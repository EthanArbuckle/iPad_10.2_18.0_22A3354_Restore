unint64_t JSC::moduleLoaderGetModuleNamespaceObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  JSC::AbstractModuleRecord *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t ModuleNamespace;
  int v22;
  JSC::VM *v23;

  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0
    || &JSC::JSModuleLoader::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
  {
    return 10;
  }
  v5 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  v23 = (JSC::VM *)v5;
  v7 = (JSC::AbstractModuleRecord *)JSC::jsDynamicCast<JSC::AbstractModuleRecord *>(v6);
  if (v7)
  {
    ModuleNamespace = JSC::AbstractModuleRecord::getModuleNamespace(v7, this, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    JSC::throwTypeError(this, &v23);
    ModuleNamespace = 0;
  }
  if (*(_DWORD *)(v5 + 80))
  {
    v22 = *(_DWORD *)(v5 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v5 + 16))
      return 0;
  }
  return ModuleNamespace;
}

unint64_t JSC::moduleLoaderParseModule(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t SlowCase;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  WTF::AtomStringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  int v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  JSC::VM *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  SourceProvider *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  SourceProvider *var0;
  WTF::StringImpl *v123;
  unint64_t Error;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t (*v134)(unint64_t *);
  unint64_t *v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  int v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int16 v177;
  char v178[8];
  WTF::StringImpl *v179;
  unsigned __int8 *v180[2];
  WTF::StringImpl **v181;
  char v182;
  WTF::StringImpl *v183;
  SourceCode v184;
  JSC::ModuleProgramNode *v185;
  WTF::StringImpl *v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  int v194;
  __int16 v195;
  uint64_t v196;
  __int128 v197;
  WTF::StringImpl *v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;

  v8 = a2;
  v10 = *(_QWORD *)(this + 56);
  v11 = (unint64_t *)(v10 + 38992);
  v12 = *(_DWORD *)(this + 1184);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 39000))
    goto LABEL_5;
  SlowCase = *(_QWORD *)(v10 + 39008);
  if ((SlowCase & 1) == 0)
  {
    v131 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39016);
    *(_QWORD *)(v10 + 39000) = SlowCase + HIDWORD(v131);
    *(_QWORD *)(v10 + 39008) = SlowCase + (int)v131;
LABEL_5:
    *v11 = SlowCase + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM(*(JSC **)(this + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0, v174, v175, v176);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v15 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v15;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v16 = 0xFFFE000000000002;
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  if (*((_DWORD *)v8 + 8) == 1)
  {
    v18 = *(_QWORD *)(this + 56);
    v17 = 10;
    goto LABEL_61;
  }
  v17 = *((_QWORD *)v8 + 6);
  v18 = *(_QWORD *)(this + 56);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_61;
  if (*(_BYTE *)(v17 + 5) != 2)
    goto LABEL_157;
  a2 = *(JSC::JSGlobalObject **)(v17 + 8);
  if ((a2 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)v8 + 6), (JSC::JSGlobalObject *)this);
    if (*(_DWORD *)(v18 + 80))
    {
      v103 = (JSC::VM *)v18;
      goto LABEL_142;
    }
    goto LABEL_79;
  }
  if ((*((_BYTE *)a2 + 16) & 0x10) == 0)
  {
    if (*(JSC::JSGlobalObject **)(v18 + 64768) != a2)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v18 + 64768), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v98 = *(WTF::StringImpl **)(v17 + 8);
      if (v98)
      {
        if ((*((_BYTE *)v98 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v98 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v98, a3, a4, a5, a6, a7, a8, (WTF *)&v186);
          v98 = v186;
        }
      }
      v99 = *(WTF::StringImpl **)(v18 + 64776);
      *(_QWORD *)(v18 + 64776) = v98;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
    {
      v100 = *(_DWORD **)(v18 + 64776);
      *v100 += 2;
      __dmb(0xAu);
      v101 = *(WTF::StringImpl **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v100;
      v186 = v101;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v18 + 192, (unint64_t)&v186);
      v102 = v186;
      v186 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::~StringImpl(v102, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v102 -= 2;
        }
      }
    }
    v86 = *(WTF::StringImpl **)(v18 + 64776);
    goto LABEL_97;
  }
LABEL_13:
  *(_DWORD *)a2 += 2;
  v198 = a2;
  while (1)
  {
    v19 = (unsigned int *)(v10 + 80);
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v132 = *(_QWORD *)(v10 + 16);
      if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v132)
      {
        *(_QWORD *)(v10 + 16) = 0;
        do
          v133 = __ldaxr(v19);
        while (__stlxr(v133 & 0xFFFFFFEF, v19));
        JSC::JSPromise::reject(SlowCase, (uint64_t *)this, *(_QWORD *)(v132 + 8), v30, a5, a6, a7, a8);
      }
      goto LABEL_42;
    }
    if (HIBYTE(qword_1ECF4C6B8))
      WTF::dataLog<char [18],JSC::Identifier,char [2]>((JSC::Identifier *)&v198);
    if ((unint64_t)(*((int *)v8 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v20 = 10;
    else
      v20 = *((_QWORD *)v8 + 7);
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
      ++*(_DWORD *)(v21 + 8);
    v196 = v21;
    v197 = *(_OWORD *)(v20 + 16);
    v22 = *(unsigned __int8 *)(v21 + 12);
    if (v22 == 2)
    {
      SlowCase = (unint64_t)JSC::JSWebAssembly::instantiate(this, (JSC::JSArrayBufferView *)SlowCase, (JSC::VM *)&v198, v20);
      goto LABEL_39;
    }
    if (v22 == 3)
      break;
    LODWORD(v186) = 0x100000;
    v187 = 0u;
    v188 = 0u;
    v189 = 0;
    v190 = -1;
    v191 = -1;
    v192 = -1;
    v193 = 0;
    v194 = -1;
    v195 = 0;
    JSC::parseRootNode<JSC::ModuleProgramNode>(v10, (uint64_t)&v196, 0, 0, 1, 1, 13, (uint64_t)&v186, 0, 0, 0);
    if ((_BYTE)v195)
    {
      v115 = (SourceProvider *)v196;
      if (v196)
        ++*(_DWORD *)(v196 + 8);
      v184.var0.var0 = v115;
      *(_OWORD *)&v184.var1 = v197;
      v116 = JSC::ParserError::toErrorObject(&v186, (JSC::JSGlobalObject *)this, &v184, 0xFFFFFFFFLL, v23, v24, v25, v26);
      JSC::JSPromise::reject(SlowCase, (uint64_t *)this, v116, v117, v118, v119, v120, v121);
      var0 = v184.var0.var0;
      v184.var0.var0 = 0;
      if (var0)
      {
        if (*((_DWORD *)var0 + 2) == 1)
          (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
        else
          --*((_DWORD *)var0 + 2);
      }
      goto LABEL_34;
    }
    v8 = (JSC::ModuleProgramNode *)((char *)v185 + 192);
    v17 = (uint64_t)v185 + 112;
    v18 = *((unsigned __int16 *)v185 + 82);
    v16 = *(_QWORD *)(this + 56);
    v180[0] = (unsigned __int8 *)v16;
    v27 = *(_QWORD *)(this + 1096);
    if ((v27 & 1) != 0)
    {
      v134 = *(uint64_t (**)(unint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v135 = (unint64_t *)(this - 16);
      else
        v135 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v199 = *v135;
      v200 = this;
      v201 = (char *)(this + 1096);
      v27 = v134(&v199);
    }
    v180[1] = (unsigned __int8 *)JSC::JSModuleRecord::create((JSC::JSModuleRecord *)this, (JSC::JSGlobalObject *)v16, v27, (JSC::Structure *)&v198, (const JSC::Identifier *)&v196, (const SourceCode *)v8, (const JSC::VariableEnvironment *)v17, (const JSC::VariableEnvironment *)v18, v177);
    v181 = 0;
    v182 = 0;
    v183 = 0;
    if (*v19 && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v28, v29, v30, a5, a6, a7, a8))
    {
      v136 = *(_QWORD *)(v10 + 16);
      if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v136)
      {
        *(_QWORD *)(v10 + 16) = 0;
        do
          v137 = __ldaxr(v19);
        while (__stlxr(v137 & 0xFFFFFFEF, v19));
        JSC::JSPromise::reject(SlowCase, (uint64_t *)this, *(_QWORD *)(v136 + 8), v30, a5, a6, a7, a8);
      }
      goto LABEL_30;
    }
    JSC::ModuleAnalyzer::analyze((JSC::ModuleAnalyzer *)v180, v185, v29, v30, a5, a6, a7, a8, (uint64_t)&v199);
    if (!(_DWORD)v201)
    {
      JSC::JSPromise::resolve(SlowCase, (uint64_t *)this, v199, v31, v32, v33, v34, v35);
LABEL_28:
      if ((_DWORD)v201 != -1)
        ((void (*)(char *, unint64_t *))off_1E35A1B70[v201])(v178, &v199);
LABEL_30:
      v37 = v183;
      v183 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v36, v29, v30, a5, a6, a7, a8);
          WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      v38 = v181;
      if (v181)
      {
        v44 = *((unsigned int *)v181 - 1);
        if ((_DWORD)v44)
        {
          v45 = v181;
          do
          {
            v46 = *v45;
            if (*v45 != (WTF::StringImpl *)-1)
            {
              *v45 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                {
                  WTF::StringImpl::~StringImpl(v46, v36, v29, v30, a5, a6, a7, a8);
                  WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
                }
                else
                {
                  *(_DWORD *)v46 -= 2;
                }
              }
            }
            ++v45;
            --v44;
          }
          while (v44);
        }
        WTF::fastFree((unint64_t)(v38 - 2), v36, v29, v30, a5, a6, a7, a8);
      }
LABEL_34:
      v39 = v185;
      v185 = 0;
      if (v39)
        std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v185, (unint64_t)v39, v29, v30, a5, a6, a7, a8);
      v40 = v193;
      v193 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v39, v29, v30, a5, a6, a7, a8);
          WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      goto LABEL_39;
    }
    if ((_DWORD)v201 == 1)
    {
      v178[0] = v199;
      v123 = (WTF::StringImpl *)v200;
      v200 = 0;
      v179 = v123;
      Error = JSC::createError(this);
      JSC::JSPromise::reject(SlowCase, (uint64_t *)this, Error, v125, v126, v127, v128, v129);
      v130 = v179;
      v179 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
        {
          WTF::StringImpl::~StringImpl(v130, v36, v29, v30, a5, a6, a7, a8);
          WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
        }
        else
        {
          *(_DWORD *)v130 -= 2;
        }
      }
      goto LABEL_28;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_157:
    v17 = JSC::JSCell::toPrimitive(v17, (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_61:
    v180[0] = (unsigned __int8 *)v17;
    if (*(_DWORD *)(v18 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v18, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v86 = *(WTF::StringImpl **)(*(_QWORD *)(v18 + 41952) + 8);
      if (v86)
        goto LABEL_97;
LABEL_98:
      v198 = v86;
    }
    else
    {
      if ((v17 & v16) != 0)
        goto LABEL_86;
      v79 = *(unsigned __int8 *)(v17 + 5);
      if (v79 == 2)
        goto LABEL_64;
      if (v79 != 4)
      {
LABEL_86:
        v17 = (uint64_t)JSC::JSValue::toStringSlowCase(v180, this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_64:
        if (*(_DWORD *)(v18 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v18, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_138:
          v198 = 0;
        }
        else
        {
          a2 = *(JSC::JSGlobalObject **)(v17 + 8);
          v80 = *(_QWORD *)(this + 56);
          if ((a2 & 1) == 0)
          {
            if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
              goto LABEL_13;
            if (*(JSC::JSGlobalObject **)(v80 + 64768) != a2)
            {
              WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v80 + 64768), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v81 = *(WTF::StringImpl **)(v17 + 8);
              if (v81)
              {
                if ((*((_BYTE *)v81 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v81 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v81, a3, a4, a5, a6, a7, a8, (WTF *)&v186);
                  v81 = v186;
                }
              }
              v82 = *(WTF::StringImpl **)(v80 + 64776);
              *(_QWORD *)(v80 + 64776) = v81;
              if (v82)
              {
                v162 = v82;
                v163 = *(_DWORD *)v82 - 2;
                if (v163)
                {
                  *(_DWORD *)v162 = v163;
                }
                else
                {
                  WTF::StringImpl::~StringImpl(v162, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
            {
              v83 = *(WTF::StringImpl **)(v80 + 64776);
              *(_DWORD *)v83 += 2;
              v186 = v83;
              __dmb(0xAu);
              v84 = *(WTF::StringImpl **)(v17 + 8);
              *(_QWORD *)(v17 + 8) = v186;
              v186 = v84;
              JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v80 + 192, (unint64_t)&v186);
              v85 = v186;
              v186 = 0;
              if (v85)
              {
                if (*(_DWORD *)v85 == 2)
                {
                  WTF::StringImpl::~StringImpl(v85, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
                }
                else
                {
                  *(_DWORD *)v85 -= 2;
                }
              }
            }
            v86 = *(WTF::StringImpl **)(v80 + 64776);
LABEL_97:
            *(_DWORD *)v86 += 2;
            goto LABEL_98;
          }
          JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v17, (JSC::JSGlobalObject *)this);
          if (!*(_DWORD *)(v80 + 80))
            goto LABEL_79;
          v103 = (JSC::VM *)v80;
LABEL_142:
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v103, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            v87 = v186;
            v198 = 0;
            v186 = 0;
            if (v87)
              goto LABEL_81;
          }
          else
          {
LABEL_79:
            v87 = v186;
            if (!v186)
              goto LABEL_138;
            *(_DWORD *)v186 += 2;
            v198 = v87;
            v186 = 0;
LABEL_81:
            v88 = *(_DWORD *)v87 - 2;
            if (*(_DWORD *)v87 != 2)
              goto LABEL_82;
LABEL_85:
            WTF::StringImpl::~StringImpl(v87, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
          }
        }
      }
      else
      {
        v87 = *(WTF::StringImpl **)(v17 + 8);
        v89 = *(_DWORD *)v87;
        *(_DWORD *)v87 += 4;
        v198 = v87;
        v88 = v89 + 2;
        if (!v88)
          goto LABEL_85;
LABEL_82:
        *(_DWORD *)v87 = v88;
      }
    }
  }
  v114 = JSC::SyntheticModuleRecord::parseJSONModule(this, (_DWORD **)&v198, (unsigned int *)&v196, v20, a5, a6, a7, a8);
  if (*v19 && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v112, v113, v30, a5, a6, a7, a8))
  {
    v172 = *(_QWORD *)(v10 + 16);
    if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v172)
    {
      *(_QWORD *)(v10 + 16) = 0;
      do
        v173 = __ldaxr(v19);
      while (__stlxr(v173 & 0xFFFFFFEF, v19));
      JSC::JSPromise::reject(SlowCase, (uint64_t *)this, *(_QWORD *)(v172 + 8), v30, a5, a6, a7, a8);
    }
  }
  else
  {
    JSC::JSPromise::resolve(SlowCase, (uint64_t *)this, v114, v30, a5, a6, a7, a8);
  }
LABEL_39:
  v41 = (_DWORD *)v196;
  v196 = 0;
  if (v41)
  {
    if (v41[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    else
      --v41[2];
  }
LABEL_42:
  v42 = v198;
  v198 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v39, v29, v30, a5, a6, a7, a8);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  return SlowCase;
}

unint64_t JSC::moduleLoaderRequestedModules(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  JSC::VM *v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  WTF::AtomStringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;

  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &JSC::AbstractModuleRecord::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &JSC::AbstractModuleRecord::s_info && v13 != 0);
  }
  if (!v12)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = JSC::constructEmptyArray((unint64_t)this, 0, *(unsigned int *)(v10 + 92), 0, a6, a7, a8, a9, a4);
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16, v17, v18, v19, v20, v21, v22, v23))
    return 0;
  v25 = *(unsigned int *)(v10 + 92);
  if ((_DWORD)v25)
  {
    v27 = 0;
    v28 = *(WTF::StringImpl ***)(v10 + 80);
    v29 = 16 * v25;
    while (1)
    {
      v30 = *v28;
      if (*v28)
        *(_DWORD *)v30 += 2;
      v47 = v30;
      v31 = JSC::jsString((uint64_t)v16, (JSC::VM *)&v47, v18, v19, v20, v21, v22, v23);
      JSC::JSObject::putDirectIndex(v24, (unint64_t)this, v27, v31, v32, v33, v34, v35, v36);
      v38 = v47;
      v47 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v37, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      if (*((_DWORD *)v16 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)v37, v18, v19, v20, v21, v22, v23))
      {
        break;
      }
      v28 += 2;
      v27 = (JSC::VM *)((_DWORD)v27 + 1);
      v29 -= 16;
      if (!v29)
        return v24;
    }
    return 0;
  }
  return v24;
}

unint64_t JSC::moduleLoaderRequestedModuleParameters(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  _DWORD *v42;
  _DWORD *v43;

  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &JSC::AbstractModuleRecord::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &JSC::AbstractModuleRecord::s_info && v13 != 0);
  }
  if (!v12)
    return JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  v16 = *((_QWORD *)this + 7);
  v24 = JSC::constructEmptyArray((unint64_t)this, 0, *(unsigned int *)(v10 + 92), 0, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v16 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v17, v18, v19, v20, v21, v22, v23))
  {
    return 0;
  }
  v26 = *(unsigned int *)(v10 + 92);
  if ((_DWORD)v26)
  {
    v28 = 0;
    v29 = *(_QWORD *)(v10 + 80);
    v30 = 16 * v26;
    v31 = (uint64_t *)(v29 + 8);
    while (1)
    {
      v32 = *v31;
      if (*v31)
      {
        v35 = *(JSC::VM **)(v16 + 41680);
        ++*(_DWORD *)(v32 + 8);
        v43 = (_DWORD *)v32;
        v36 = JSC::JSScriptFetchParameters::create(v16, v35, (uint64_t *)&v43, v19, v20, v21, v22, v23);
        JSC::JSObject::putDirectIndex(v24, (unint64_t)this, v28, v36, v37, v38, v39, v40, v41);
        v42 = v43;
        v43 = 0;
        if (v42)
        {
          if (v42[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
          else
            --v42[2];
        }
      }
      else
      {
        JSC::JSObject::putDirectIndex(v24, (unint64_t)this, v28, 0xAuLL, v20, v21, v22, v23, v25);
      }
      if (*(_DWORD *)(v16 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v33, v34, v19, v20, v21, v22, v23))
      {
        break;
      }
      v31 += 2;
      v28 = (JSC::VM *)((_DWORD)v28 + 1);
      v30 -= 16;
      if (!v30)
        return v24;
    }
    return 0;
  }
  return v24;
}

unint64_t JSC::moduleLoaderResolve(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::Symbol *v13;
  void (*v14)(WTF::StringImpl **__return_ptr, JSC *, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  WTF::AtomStringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unsigned __int8 *v94;
  WTF::StringImpl *v95;

  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0
    || &JSC::JSModuleLoader::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)))
  {
    return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    v10 = 10;
    goto LABEL_21;
  }
  v10 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v11 = 10;
    goto LABEL_21;
  }
  v11 = *((_QWORD *)a2 + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 3)
  {
LABEL_21:
    v12 = 10;
    goto LABEL_7;
  }
  v12 = *((_QWORD *)a2 + 8);
LABEL_7:
  v13 = (JSC::Symbol *)*((_QWORD *)this + 7);
  if (HIBYTE(qword_1ECF4C6B8))
  {
    JSC::printableModuleKey(&v95, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    WTF::dataLog<char [18],WTF::String,char [2]>((WTF::PrintStream *)&v95);
    v29 = v95;
    v95 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  v14 = *(void (**)(WTF::StringImpl **__return_ptr, JSC *, unint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 410) + 48);
  if (v14)
  {
    v14(&v93, this, v8, v10, v11, v12);
    goto LABEL_10;
  }
  v28 = *((_QWORD *)this + 7);
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 2)
    {
      a2 = *(JSC::JSGlobalObject **)(v10 + 8);
      if ((a2 & 1) == 0)
      {
        if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
        {
LABEL_26:
          *(_DWORD *)a2 += 2;
          v93 = a2;
          goto LABEL_10;
        }
        if (*(JSC::JSGlobalObject **)(v28 + 64768) != a2)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v28 + 64768), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v38 = *(WTF::StringImpl **)(v10 + 8);
          if (v38)
          {
            if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v38 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v38, a3, a4, a5, a6, a7, a8, (WTF *)&v95);
              v38 = v95;
            }
          }
          v39 = *(WTF::StringImpl **)(v28 + 64776);
          *(_QWORD *)(v28 + 64776) = v38;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
        {
          v40 = *(_DWORD **)(v28 + 64776);
          *v40 += 2;
          __dmb(0xAu);
          v41 = *(WTF::StringImpl **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v40;
          v95 = v41;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v28 + 192, (unint64_t)&v95);
          v42 = v95;
          v95 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
            {
              WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            }
            else
            {
              *(_DWORD *)v42 -= 2;
            }
          }
        }
        v43 = *(WTF::StringImpl **)(v28 + 64776);
        goto LABEL_45;
      }
      goto LABEL_70;
    }
    v10 = JSC::JSCell::toPrimitive(v10, (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v94 = (unsigned __int8 *)v10;
  if (*(_DWORD *)(v28 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v43 = *(WTF::StringImpl **)(*(_QWORD *)(v28 + 41952) + 8);
      if (!v43)
        goto LABEL_46;
      goto LABEL_45;
    }
    v10 = (uint64_t)v94;
  }
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    v60 = *(unsigned __int8 *)(v10 + 5);
    if (v60 == 2)
      goto LABEL_57;
    if (v60 == 4)
    {
      v66 = *(WTF::StringImpl **)(v10 + 8);
      v68 = *(_DWORD *)v66;
      *(_DWORD *)v66 += 4;
      v93 = v66;
      v67 = v68 + 2;
      if (v67)
        goto LABEL_74;
      goto LABEL_77;
    }
  }
  v10 = (uint64_t)JSC::JSValue::toStringSlowCase(&v94, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_57:
  if (*(_DWORD *)(v28 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_84;
  }
  a2 = *(JSC::JSGlobalObject **)(v10 + 8);
  v28 = *((_QWORD *)this + 7);
  if ((a2 & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
      goto LABEL_26;
    if (*(JSC::JSGlobalObject **)(v28 + 64768) != a2)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v28 + 64768), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v61 = *(WTF::StringImpl **)(v10 + 8);
      if (v61)
      {
        if ((*((_BYTE *)v61 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v61 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v61, a3, a4, a5, a6, a7, a8, (WTF *)&v95);
          v61 = v95;
        }
      }
      v62 = *(WTF::StringImpl **)(v28 + 64776);
      *(_QWORD *)(v28 + 64776) = v61;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 16) & 0x10) == 0)
    {
      v63 = *(_DWORD **)(v28 + 64776);
      *v63 += 2;
      __dmb(0xAu);
      v64 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v63;
      v95 = v64;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v28 + 192, (unint64_t)&v95);
      v65 = v95;
      v95 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
        {
          WTF::StringImpl::~StringImpl(v65, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        }
        else
        {
          *(_DWORD *)v65 -= 2;
        }
      }
    }
    v43 = *(WTF::StringImpl **)(v28 + 64776);
LABEL_45:
    *(_DWORD *)v43 += 2;
LABEL_46:
    v93 = v43;
    goto LABEL_10;
  }
LABEL_70:
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v10, this);
  if (!*(_DWORD *)(v28 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v66 = v95;
    if (v95)
    {
      *(_DWORD *)v95 += 2;
      v93 = v66;
      v95 = 0;
      goto LABEL_73;
    }
LABEL_84:
    v93 = 0;
    goto LABEL_10;
  }
  v66 = v95;
  v93 = 0;
  v95 = 0;
  if (v66)
  {
LABEL_73:
    v67 = *(_DWORD *)v66 - 2;
    if (*(_DWORD *)v66 != 2)
    {
LABEL_74:
      *(_DWORD *)v66 = v67;
      goto LABEL_10;
    }
LABEL_77:
    WTF::StringImpl::~StringImpl(v66, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_10:
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v17 = 0;
  }
  else
  {
    if (v93 && (*((_BYTE *)v93 + 16) & 0x20) != 0)
      v15 = JSC::Symbol::create(v13, v93, a3, a4, a5, a6, a7, a8);
    else
      v15 = JSC::jsString(v13, (JSC::VM *)&v93, a3, a4, a5, a6, a7, a8);
    v17 = v15;
  }
  v18 = v93;
  v93 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v17;
}

unint64_t JSC::moduleLoaderFetch(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(JSC *, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v16;
  int v17;
  JSC::VM *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  const WTF::String *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;

  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0
    || &JSC::JSModuleLoader::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)))
  {
    return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    v10 = 10;
  }
  else
  {
    v10 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v11 = 10;
    }
    else
    {
      v11 = *((_QWORD *)a2 + 7);
      if ((unint64_t)(*((int *)a2 + 8) - 1) >= 3)
      {
        v12 = *((_QWORD *)a2 + 8);
        goto LABEL_7;
      }
    }
  }
  v12 = 10;
LABEL_7:
  v89 = v10;
  if (HIBYTE(qword_1ECF4C6B8))
  {
    JSC::printableModuleKey(&v88, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    WTF::dataLog<char [16],WTF::String,char [2]>((WTF::PrintStream *)&v88);
    v51 = v88;
    v88 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v50, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v13 = *(uint64_t (**)(JSC *, unint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 410) + 56);
  if (v13)
    return v13(this, v8, v10, v11, v12);
  v16 = *((_QWORD *)this + 7);
  v17 = *((_DWORD *)this + 296);
  if (v17)
    v18 = (JSC::VM *)(16 * (v17 & 0xFFFFFFFE));
  else
    v18 = 0;
  v14 = JSC::JSInternalPromise::create(*((JSC::JSInternalPromise **)this + 7), v18, a3, a4, a5, a6, a7, a8);
  JSC::JSValue::toWTFString((JSC::JSValue *)&v89, this, v19, v20, v21, v22, v23, v24, (int **)&v88, v25);
  if (*(_DWORD *)(v16 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v26, v27, v28, v29, v30, v31, v32))
  {
    v84 = *(_QWORD *)(v16 + 16);
    if (*(_QWORD *)(*((_QWORD *)this + 7) + 24) != v84)
    {
      v85 = (unsigned int *)(v16 + 80);
      *(_QWORD *)(v16 + 16) = 0;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 & 0xFFFFFFEF, v85));
      JSC::JSPromise::reject(v14, (uint64_t *)this, *(_QWORD *)(v84 + 8), v43, v44, v45, v46, v47);
    }
  }
  else
  {
    v33 = v88;
    if (v88)
      *(_DWORD *)v88 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int **)&v87, (int8x16_t *)"Could not open the module '", 28, (uint64_t)v33, (int8x16_t *)"'.", 3);
    v35 = JSC::createError((unint64_t)this, &v87, v34);
    JSC::JSPromise::reject(v14, (uint64_t *)this, v35, v36, v37, v38, v39, v40);
    v48 = v87;
    v87 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v41, v42, v43, v44, v45, v46, v47);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  return v14;
}

uint64_t JSC::moduleLoaderModuleDeclarationInstantiation(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  JSC::VM *v17;
  uint64_t v18;
  char **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;

  v8 = *((_DWORD *)a2 + 8);
  if (v8 == 1)
    return 10;
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0)
    return 10;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &JSC::AbstractModuleRecord::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &JSC::AbstractModuleRecord::s_info && v14 != 0);
  }
  if (!v13)
    return 10;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (HIBYTE(qword_1ECF4C6B8))
  {
    WTF::dataLog<char [15],JSC::Identifier,char [2]>((JSC::Identifier *)(v10 + 32));
    v8 = *((_DWORD *)a2 + 8);
  }
  if ((unint64_t)(v8 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v18 = 10;
  else
    v18 = *((_QWORD *)a2 + 7);
  v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v19 == &JSC::JSModuleRecord::s_info)
  {
    v20 = JSC::JSModuleRecord::link(v10, this, (const SourceCode *)v18, a4, a5, a6, a7, a8);
  }
  else if (v19 == &JSC::WebAssemblyModuleRecord::s_info)
  {
    v20 = JSC::WebAssemblyModuleRecord::link(v10, (unint64_t)this);
  }
  else
  {
    if (v19 != &JSC::SyntheticModuleRecord::s_info)
    {
      result = 829;
      __break(0xC471u);
      return result;
    }
    v20 = JSC::SyntheticModuleRecord::link();
  }
  v28 = v20;
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17, v21, v22, v23, v24, v25, v26, v27))
    return 0;
  if (v28)
    return 6;
  return 7;
}

uint64_t JSC::moduleLoaderEvaluate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(JSC *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0xFFFE000000000002) != 0
    || &JSC::JSModuleLoader::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)))
  {
    return 10;
  }
  v9 = this;
  v10 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
    v12 = 10;
    v11 = 10;
LABEL_14:
    v13 = 10;
    goto LABEL_15;
  }
  v11 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v14 = 10;
    v12 = 10;
    goto LABEL_14;
  }
  v12 = *((_QWORD *)a2 + 7);
  if (v10 < 3)
  {
    v14 = 10;
    goto LABEL_14;
  }
  v13 = *((_QWORD *)a2 + 8);
  if (*((_DWORD *)a2 + 8) == 4)
  {
    v14 = 10;
  }
  else
  {
    v14 = *((_QWORD *)a2 + 9);
    if (v10 >= 5)
    {
      v15 = *((_QWORD *)a2 + 10);
      goto LABEL_9;
    }
  }
LABEL_15:
  v15 = 10;
LABEL_9:
  if (HIBYTE(qword_1ECF4C6B8))
  {
    JSC::printableModuleKey(&v30, (uint64_t)this, v11, a4, a5, a6, a7, a8);
    WTF::dataLog<char [19],WTF::String,char [2]>((WTF::PrintStream *)&v30);
    this = v30;
    v30 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        WTF::StringImpl::~StringImpl(this, v18, (uint64_t)a3, v19, a5, v20, v21, a8);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)this -= 2;
      }
    }
  }
  v16 = *(uint64_t (**)(JSC *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v9 + 410) + 72);
  if (v16)
    return v16(v9, v8, v11, v12, v13, v14, v15);
  else
    return JSC::JSModuleLoader::evaluateNonVirtual((uint64_t)this, v9, (uint64_t)a3, v12, a5, v14, v15, a8);
}

uint64_t JSC::JSModuleLoader::dependencyKeysIfEvaluated(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t *v44;
  int v45;
  char v46;
  _QWORD v47[3];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v11 = a2[7];
  v12 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 48) + 456);
  if (v12)
  {
    *(_DWORD *)v12 += 2;
    v20 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v12, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v20 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v42 = *(_DWORD *)(v11 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*(_BYTE *)(v20 + 5) == 26)
  {
    v21 = *(_QWORD *)(v20 + 24);
    if ((v21 & 1) != 0)
      v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v21 + 5) == 8)
    {
      LOBYTE(v53) = 1;
      v54 = *(_QWORD *)(v21 + 40);
      LOBYTE(v55) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v53) = 2;
      v22 = *(_QWORD *)(v20 + 16);
      v54 = v21;
      v55 = v22;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v53, v20);
  }
  v46 = 0;
  v47[1] = &v48;
  v47[2] = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v48 = a3;
  v47[0] = 0x800000001;
  v44 = &v48;
  v45 = 1;
  v23 = JSC::call(a2, v20, (unsigned __int8 *)&v53, (uint64_t)a1, (uint64_t)&v44, v17, v18, v19);
  v31 = v23;
  if (*(_DWORD *)(v11 + 80))
  {
    v43 = *(_DWORD *)(v11 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v25, v26, v27, v28, v29, v30);
    v32 = 0;
    if (*(_QWORD *)(v11 + 16) || (v31 & 0xFFFE000000000002) != 0)
      goto LABEL_16;
    goto LABEL_13;
  }
  if ((v23 & 0xFFFE000000000002) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)(v31 + 5) & 0xFE) == 0x24)
      v32 = v31;
    else
      v32 = 0;
    goto LABEL_16;
  }
  v32 = 0;
LABEL_16:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v47, v24, v25, v26, v27, v28, v29, v30);
  return v32;
}

uint64_t JSC::JSModuleLoader::provideFetch(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[3];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;

  v12 = a2[7];
  v13 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48) + 1240);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v21 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v13, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v21 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_5;
  v46 = *(_DWORD *)(v12 + 80);
  if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v12 + 16))
    return 0;
LABEL_5:
  if (*(_BYTE *)(v21 + 5) == 26)
  {
    v22 = *(_QWORD *)(v21 + 24);
    if ((v22 & 1) != 0)
      v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v22 + 5) == 8)
    {
      LOBYTE(v55) = 1;
      v56 = *(_QWORD *)(v22 + 40);
      LOBYTE(v57) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v55) = 2;
      v23 = *(_QWORD *)(v21 + 16);
      v56 = v22;
      v57 = v23;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v55, v21);
  }
  v24 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    ++*(_DWORD *)(v24 + 8);
  v52 = 0;
  v53 = (_DWORD *)v24;
  v54 = *(_OWORD *)(a4 + 8);
  v47[1] = &v48;
  v47[2] = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = a3;
  v47[0] = 0x800000001;
  *(_QWORD *)&v49 = JSC::JSSourceCode::create(v12, *(JSC::VM **)(v12 + 41664), (uint64_t *)&v53, v16, v17, v18, v19, v20);
  LODWORD(v47[0]) = 2;
  v58 = &v48;
  v59 = 2;
  v28 = JSC::call(a2, v21, (unsigned __int8 *)&v55, (uint64_t)a1, (uint64_t)&v58, v25, v26, v27);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v47, v29, v30, v31, v32, v33, v34, v35);
  v36 = v53;
  v53 = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  return v28;
}

uint64_t JSC::JSModuleLoader::loadAndEvaluateModule(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  int v45;
  char v46;
  _QWORD v47[3];
  _QWORD v48[3];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v13 = a2[7];
  v14 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 48) + 896);
  if (v14)
  {
    *(_DWORD *)v14 += 2;
    v22 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v14, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v22 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_5;
  v42 = *(_DWORD *)(v13 + 80);
  if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (*(_QWORD *)(v13 + 16))
    return 0;
LABEL_5:
  if (*(_BYTE *)(v22 + 5) == 26)
  {
    v23 = *(_QWORD *)(v22 + 24);
    if ((v23 & 1) != 0)
      v23 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v23 + 5) == 8)
    {
      LOBYTE(v52) = 1;
      v53 = *(_QWORD *)(v23 + 40);
      LOBYTE(v54) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v52) = 2;
      v24 = *(_QWORD *)(v22 + 16);
      v53 = v23;
      v54 = v24;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v52, v22);
  }
  v46 = 0;
  v47[1] = v48;
  v47[2] = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0;
  v48[0] = a3;
  v48[1] = a4;
  v48[2] = a5;
  v47[0] = 0x800000003;
  v44 = v48;
  v45 = 3;
  v32 = JSC::call(a2, v22, (unsigned __int8 *)&v52, (uint64_t)a1, (uint64_t)&v44, v19, v20, v21);
  if (*(_DWORD *)(v13 + 80))
  {
    v43 = *(_DWORD *)(v13 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*(_QWORD *)(v13 + 16))
      v32 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v47, v25, v26, v27, v28, v29, v30, v31);
  return v32;
}

uint64_t JSC::JSModuleLoader::loadModule(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  char v44;
  _QWORD v45[3];
  _QWORD v46[3];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v13 = a2[7];
  v14 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 48) + 904);
  if (v14)
  {
    *(_DWORD *)v14 += 2;
    v22 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v14, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v22 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)v15, v16, v17, v18, v19, v20, v21))
  {
    return 0;
  }
  if (*(_BYTE *)(v22 + 5) == 26)
  {
    v23 = *(_QWORD *)(v22 + 24);
    if ((v23 & 1) != 0)
      v23 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v23 + 5) == 8)
    {
      LOBYTE(v50) = 1;
      v51 = *(_QWORD *)(v23 + 40);
      LOBYTE(v52) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v50) = 2;
      v24 = *(_QWORD *)(v22 + 16);
      v51 = v23;
      v52 = v24;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v50, v22);
  }
  v44 = 0;
  v45[1] = v46;
  v45[2] = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v46[0] = a3;
  v46[1] = a4;
  v46[2] = a5;
  v45[0] = 0x800000003;
  v42 = v46;
  v43 = 3;
  v32 = JSC::call(a2, v22, (unsigned __int8 *)&v50, (uint64_t)a1, (uint64_t)&v42, v19, v20, v21);
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)v25, v26, v27, v28, v29, v30, v31))
  {
    v32 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v45, v25, v26, v27, v28, v29, v30, v31);
  return v32;
}

uint64_t JSC::JSModuleLoader::linkAndEvaluateModule(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  char v43;
  _QWORD v44[3];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v12 = a2[7];
  v13 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48) + 888);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v21 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v13, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v21 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v14, v15, v16, v17, v18, v19, v20))
  {
    return 0;
  }
  if (*(_BYTE *)(v21 + 5) == 26)
  {
    v22 = *(_QWORD *)(v21 + 24);
    if ((v22 & 1) != 0)
      v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v22 + 5) == 8)
    {
      LOBYTE(v50) = 1;
      v51 = *(_QWORD *)(v22 + 40);
      LOBYTE(v52) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v50) = 2;
      v23 = *(_QWORD *)(v21 + 16);
      v51 = v22;
      v52 = v23;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v50, v21);
  }
  v43 = 0;
  v44[1] = &v45;
  v44[2] = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v45 = a3;
  v46 = (unint64_t)a4;
  v44[0] = 0x800000002;
  v41 = &v45;
  v42 = 2;
  v24 = JSC::call(a2, v21, (unsigned __int8 *)&v50, (uint64_t)a1, (uint64_t)&v41, v18, v19, v20);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v44, v25, v26, v27, v28, v29, v30, v31);
  return v24;
}

uint64_t JSC::JSModuleLoader::requestImportModule(unsigned int *a1, uint64_t *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;

  v14 = a2[7];
  v15 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 48) + 1376);
  if (v15)
  {
    *(_DWORD *)v15 += 2;
    v23 = JSC::JSObject::get(a1, (uint64_t)a2, (unint64_t)v15, a4, a5, a6, a7, a8);
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    v23 = JSC::JSObject::get(a1, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
  }
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_5;
  v46 = *(_DWORD *)(v14 + 80);
  if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v17, v18, v19, v20, v21, v22);
  if (*(_QWORD *)(v14 + 16))
    return 0;
LABEL_5:
  if (*(_BYTE *)(v23 + 5) == 26)
  {
    v24 = *(_QWORD *)(v23 + 24);
    if ((v24 & 1) != 0)
      v24 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v24 + 5) == 8)
    {
      LOBYTE(v54) = 1;
      v55 = *(_QWORD *)(v24 + 40);
      LOBYTE(v56) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v54) = 2;
      v25 = *(_QWORD *)(v23 + 16);
      v55 = v24;
      v56 = v25;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v54, v23);
  }
  v48[1] = (char *)&v49 + 8;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  *((_QWORD *)&v49 + 1) = JSC::jsString((JSC *)v14, a3, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)&v50 = a4;
  *((_QWORD *)&v50 + 1) = a5;
  *(_QWORD *)&v51 = a6;
  v48[0] = 0x800000004;
  v57 = (char *)&v49 + 8;
  v58 = 4;
  v36 = JSC::call(a2, v23, (unsigned __int8 *)&v54, (uint64_t)a1, (uint64_t)&v57, v26, v27, v28);
  if (*(_DWORD *)(v14 + 80))
  {
    v47 = *(_DWORD *)(v14 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v30, v31, v32, v33, v34, v35);
    if (*(_QWORD *)(v14 + 16))
      v36 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v48, v29, v30, v31, v32, v33, v34, v35);
  return v36;
}

uint64_t JSC::JSModuleLoader::importModule(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v13)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  int v17;
  unint64_t v18;
  int v19;
  int **v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  JSC::Heap **v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t (*v65)(WTF::StringImpl **);
  WTF::StringImpl **v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t SlowCase;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81[3];

  if (HIBYTE(qword_1ECF4C6B8))
  {
    JSC::printableModuleKey(v81, a2, a3, a4, a5, a6, a7, a8);
    WTF::dataLog<char [17],WTF::String,char [2]>((WTF::PrintStream *)v81);
    v59 = v81[0];
    v81[0] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  v13 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 3280) + 40);
  if (v13)
    return v13(a2, a1, a3, a4, a5);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = (unint64_t *)(v15 + 38992);
  v17 = *(_DWORD *)(a2 + 1184);
  if (v17)
    v18 = 16 * (v17 & 0xFFFFFFFE);
  else
    v18 = 0;
  v14 = *v16;
  if (*v16 < *(_QWORD *)(v15 + 39000))
    goto LABEL_8;
  v14 = *(_QWORD *)(v15 + 39008);
  if ((v14 & 1) == 0)
  {
    v60 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v15 + 39016);
    *(_QWORD *)(v15 + 39000) = v14 + HIDWORD(v60);
    *(_QWORD *)(v15 + 39008) = v14 + (int)v60;
LABEL_8:
    *v16 = v14 + 32;
    goto LABEL_9;
  }
  v75 = v18;
  JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 38968, v15 + 192, 32, 0, 0, v76, v77, v78);
  v18 = v75;
  v14 = SlowCase;
LABEL_9:
  *(_DWORD *)v14 = 0;
  v19 = *(_DWORD *)(v18 + 8);
  *(_DWORD *)v14 = v18 >> 4;
  *(_DWORD *)(v14 + 4) = v19;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  *(_OWORD *)(v14 + 16) = xmmword_19914EFB0;
  v20 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v20 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a2, a3, a4, (int8x16_t)xmmword_19914EFB0, a5, a6, a7, a8);
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_14;
  v61 = *(_DWORD *)(v15 + 80);
  if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
  v62 = *(_QWORD *)(v15 + 16);
  if (!v62)
  {
LABEL_14:
    v21 = (uint64_t)*v20;
    if (*v20)
    {
      v22 = *(_DWORD *)(v21 + 4);
      *(_DWORD *)v21 += 2;
      if (v22 < 0)
        goto LABEL_53;
    }
    else
    {
      v22 = 0;
    }
    v23 = __OFADD__(v22, 2);
    v24 = v22 + 2;
    if (!v23 && !__OFADD__(v24, 29))
    {
      v25 = !v21 || (*(_BYTE *)(v21 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v24 + 29), v25, (int8x16_t *)"Could not import the module '", 0x1Du, v21, (int8x16_t *)"'.", 2u, (int **)&v80);
      if (v80)
      {
        v26 = *(JSC::Heap ***)(a2 + 56);
        v27 = *(_QWORD *)(a2 + 1504);
        if ((v27 & 1) != 0)
        {
          v65 = *(uint64_t (**)(WTF::StringImpl **))(v27 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v66 = (WTF::StringImpl **)(a2 - 16);
          else
            v66 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v81[0] = *v66;
          v81[1] = (WTF::StringImpl *)a2;
          v81[2] = (WTF::StringImpl *)(a2 + 1504);
          v27 = v65(v81);
        }
        v28 = JSC::ErrorInstance::create(v26, v27, &v80, 0, 0, 0, 0, 1);
        JSC::JSPromise::reject(v14, (uint64_t *)a2, v28, v29, v30, v31, v32, v33);
        v41 = v80;
        v80 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
            if (!v21)
              return v14;
LABEL_27:
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v34, v35, v36, v37, v38, v39, v40);
              WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
            return v14;
          }
          *(_DWORD *)v41 -= 2;
        }
        if (!v21)
          return v14;
        goto LABEL_27;
      }
LABEL_54:
      __break(0xC471u);
      JUMPOUT(0x198A25A0CLL);
    }
LABEL_53:
    v80 = 0;
    goto LABEL_54;
  }
  if (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 24) != v62)
  {
    v63 = (unsigned int *)(v15 + 80);
    *(_QWORD *)(v15 + 16) = 0;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 & 0xFFFFFFEF, v63));
    JSC::JSPromise::reject(v14, (uint64_t *)a2, *(_QWORD *)(v62 + 8), a4, a5, a6, a7, a8);
  }
  return v14;
}

void JSC::printableModuleKey(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  _QWORD *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  WTF::StringImpl *v109;

  v9 = *(_QWORD *)(a2 + 56);
  v10 = v9 + 41952;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_7;
  v11 = a3;
  v13 = *(unsigned __int8 *)(a3 + 5);
  if (v13 == 4)
  {
    v11 = JSC::JSCell::toPrimitive(a3, (JSC::VM **)a2, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    v108 = (unsigned __int8 *)v11;
    if (*(_DWORD *)(v9 + 80))
    {
      v73 = *(_DWORD *)(v9 + 80);
      if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v14 = *(WTF::StringImpl **)(*(_QWORD *)v10 + 8);
        if (!v14)
          goto LABEL_22;
LABEL_20:
        v19 = *(_DWORD *)v14 + 2;
LABEL_21:
        *(_DWORD *)v14 = v19;
        goto LABEL_22;
      }
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v17 = *(unsigned __int8 *)(v11 + 5);
      if (v17 == 2)
        goto LABEL_17;
      if (v17 == 4)
      {
        v14 = *(WTF::StringImpl **)(v11 + 8);
        v18 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v19 = v18 + 2;
        if (!v19)
        {
          v20 = v14;
          goto LABEL_32;
        }
        goto LABEL_21;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v108, a2, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_17:
    if (*(_DWORD *)(v9 + 80))
    {
      v74 = *(_DWORD *)(v9 + 80);
      if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v14 = 0;
        goto LABEL_22;
      }
    }
    v14 = *(WTF::StringImpl **)(v11 + 8);
    v9 = *(_QWORD *)(a2 + 56);
    if ((v14 & 1) != 0)
      goto LABEL_27;
    if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
    {
      v47 = *(WTF::StringImpl **)(v9 + 64768);
      if (v47 != v14)
      {
        *(_DWORD *)v14 += 2;
        *(_QWORD *)(v9 + 64768) = v14;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v47 -= 2;
          }
        }
        v48 = *(WTF::StringImpl **)(v11 + 8);
        if (v48)
        {
          if ((*((_BYTE *)v48 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v48 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v48, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v109);
            v48 = v109;
          }
        }
        v49 = *(WTF::StringImpl **)(v9 + 64776);
        *(_QWORD *)(v9 + 64776) = v48;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::~StringImpl(v49, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v49 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
      {
        v50 = *(_DWORD **)(v9 + 64776);
        *v50 += 2;
        __dmb(0xAu);
        v51 = *(WTF::StringImpl **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = v50;
        v109 = v51;
        v52 = (_QWORD *)(v9 + 808);
        v53 = *(unsigned int *)(v9 + 820);
        if ((_DWORD)v53 == *(_DWORD *)(v9 + 816))
        {
          v55 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v109);
          v53 = *(unsigned int *)(v9 + 820);
          v54 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v53);
          v51 = *v55;
        }
        else
        {
          v54 = (WTF::StringImpl **)(*v52 + 8 * v53);
          v55 = &v109;
        }
        *v55 = 0;
        *v54 = v51;
        *(_DWORD *)(v9 + 820) = v53 + 1;
        v56 = v109;
        v109 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
      }
      v14 = *(WTF::StringImpl **)(v9 + 64776);
    }
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    v14 = *(WTF::StringImpl **)(a3 + 8);
    if ((v14 & 1) == 0)
    {
      if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
      {
        v37 = *(WTF::StringImpl **)(v9 + 64768);
        if (v37 != v14)
        {
          *(_DWORD *)v14 += 2;
          *(_QWORD *)(v9 + 64768) = v14;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
            {
              WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
            }
            else
            {
              *(_DWORD *)v37 -= 2;
            }
          }
          v38 = *(WTF::StringImpl **)(v11 + 8);
          if (v38)
          {
            if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v38 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v38, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v109);
              v38 = v109;
            }
          }
          v39 = *(WTF::StringImpl **)(v9 + 64776);
          *(_QWORD *)(v9 + 64776) = v38;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v40 = *(_DWORD **)(v9 + 64776);
          *v40 += 2;
          __dmb(0xAu);
          v41 = *(WTF::StringImpl **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v40;
          v109 = v41;
          v42 = (_QWORD *)(v9 + 808);
          v43 = *(unsigned int *)(v9 + 820);
          if ((_DWORD)v43 == *(_DWORD *)(v9 + 816))
          {
            v45 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v109);
            v43 = *(unsigned int *)(v9 + 820);
            v44 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v43);
            v41 = *v45;
          }
          else
          {
            v44 = (WTF::StringImpl **)(*v42 + 8 * v43);
            v45 = &v109;
          }
          *v45 = 0;
          *v44 = v41;
          *(_DWORD *)(v9 + 820) = v43 + 1;
          v46 = v109;
          v109 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
        }
        v14 = *(WTF::StringImpl **)(v9 + 64776);
      }
      v15 = *(_DWORD *)v14 + 2;
      *(_DWORD *)v14 = v15;
LABEL_24:
      *(_DWORD *)v14 = v15 + 2;
      *a1 = v14;
      if (v15)
      {
        *(_DWORD *)v14 = v15;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      return;
    }
LABEL_27:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, (JSC::JSGlobalObject *)a2);
    if (*(_DWORD *)(v9 + 80))
    {
      v75 = *(_DWORD *)(v9 + 80);
      if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v14 = 0;
        v20 = v109;
        v109 = 0;
        if (!v20)
          goto LABEL_22;
LABEL_30:
        if (*(_DWORD *)v20 != 2)
        {
          *(_DWORD *)v20 -= 2;
          goto LABEL_22;
        }
LABEL_32:
        WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        goto LABEL_22;
      }
    }
    v14 = v109;
    if (v109)
    {
      *(_DWORD *)v109 += 2;
      v109 = 0;
      v20 = v14;
      goto LABEL_30;
    }
LABEL_22:
    if (!v14)
    {
      *a1 = 0;
      return;
    }
    v15 = *(_DWORD *)v14;
    goto LABEL_24;
  }
LABEL_7:
  v16 = *(_DWORD **)(*(_QWORD *)v10 + 8);
  if (v16)
    *v16 += 2;
  *a1 = v16;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(int **a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  uint64_t result;

  if (a3)
  {
    v10 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198A25FE4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (a6)
  {
    v11 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198A26010);
    }
  }
  else
  {
    v11 = 0;
  }
  if (a4)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if (v12 < 0)
    {
LABEL_15:
      *a1 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13 || __OFADD__(v10, v14))
    goto LABEL_15;
  v15 = !a4 || (*(_BYTE *)(a4 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v10 + v14, v15, a2, v10, a4, a5, v11, a1);
  if (!*a1)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198A25FB8);
  }
  return result;
}

unint64_t JSC::JSModuleLoader::createImportMetaProperties(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  JSC *v10;
  int v11;
  JSC::VM *v12;

  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 3280) + 64);
  if (v8)
    return v8(a2, a1);
  v10 = *(JSC **)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 932);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  return JSC::constructEmptyObject(v10, v12, a3, a4, a5, 0, a7, a8);
}

uint64_t JSC::JSModuleLoader::evaluateNonVirtual(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  char **v10;
  BOOL v11;

  if ((a4 & 0xFFFE000000000002) != 0)
    return 10;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &JSC::AbstractModuleRecord::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &JSC::AbstractModuleRecord::s_info && v10 != 0);
  }
  if (v9)
    return JSC::AbstractModuleRecord::evaluate(a4, a2, a6, a7, a5, a6, a7, a8);
  else
    return 10;
}

unint64_t JSC::jsDynamicCast<JSC::AbstractModuleRecord *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &JSC::AbstractModuleRecord::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &JSC::AbstractModuleRecord::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

void JSC::JSModuleNamespaceObject::destroy(JSC::JSModuleNamespaceObject *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v11 = (WTF::StringImpl **)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((_QWORD *)this + 2);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v25 = *v24;
        if (*v24 != (WTF::StringImpl *)-1)
        {
          v26 = v24[1];
          v24[1] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
            {
              WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
              v25 = *v24;
            }
            else
            {
              *(_DWORD *)v26 -= 2;
            }
          }
          *v24 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
        }
        v24 += 3;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JSModuleNamespaceObject::put(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  JSC::VM *v6;

  v6 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a5 + 20) & 1) != 0)
    JSC::throwTypeError(a2, &v6, (uint64_t)"Attempted to assign to readonly property.", 42);
  return 0;
}

uint64_t JSC::JSModuleNamespaceObject::putByIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  JSC::VM *v6;

  v6 = *(JSC::VM **)(a2 + 56);
  if (a5)
    JSC::throwTypeError(a2, &v6, (uint64_t)"Attempted to assign to readonly property.", 42);
  return 0;
}

uint64_t JSC::JSModuleNamespaceObject::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  int v14;

  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 1;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    v10 = *(_DWORD *)(a3 + 32);
  v11 = v9 & (v10 >> 8);
  v12 = *(_QWORD *)(v8 + 24 * v11);
  if (v12 == a3)
    return 0;
  v14 = 1;
  do
  {
    result = v12 == 0;
    if (!v12)
      break;
    v11 = (v11 + v14) & v9;
    v12 = *(_QWORD *)(v8 + 24 * v11);
    ++v14;
  }
  while (v12 != a3);
  return result;
}

BOOL JSC::JSModuleNamespaceObject::deletePropertyByIndex(JSC::JSModuleNamespaceObject *this, uint64_t ***a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  _BOOL8 v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(a2[7], (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v33);
  v16 = v33;
  v17 = *((_QWORD *)this + 2);
  if (!v17)
  {
    v22 = 1;
    goto LABEL_7;
  }
  v18 = *(_DWORD *)(v17 - 8);
  v19 = *((_DWORD *)v33 + 4);
  if ((v19 & 0x20) != 0)
    v19 = *((_DWORD *)v33 + 8);
  v20 = v18 & (v19 >> 8);
  v21 = *(WTF::StringImpl **)(v17 + 24 * v20);
  if (v21 != v33)
  {
    v32 = 1;
    do
    {
      v22 = v21 == 0;
      if (!v21)
        break;
      v20 = (v20 + v32) & v18;
      v21 = *(WTF::StringImpl **)(v17 + 24 * v20);
      ++v32;
    }
    while (v21 != v33);
LABEL_7:
    v33 = 0;
    if (!v16)
      return v22;
    goto LABEL_8;
  }
  v22 = 0;
  v33 = 0;
LABEL_8:
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::~StringImpl(v16, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v16 -= 2;
  }
  return v22;
}

uint64_t JSC::JSModuleNamespaceObject::getOwnPropertySlotByIndex(uint64_t a1, uint64_t ***a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OwnPropertySlotCommon;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(a2[7], (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v33);
  OwnPropertySlotCommon = JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(a1, (JSC::JSGlobalObject *)a2, (unint64_t)v33, a4, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return OwnPropertySlotCommon;
}

void JSC::JSModuleNamespaceObject::getOwnPropertyNames(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v69;
  WTF::StringImpl *v70[2];
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  __int16 v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  v69 = a4;
  v10 = *(unsigned int **)(a1 + 24);
  if (v10)
    v11 = (unint64_t *)(v10 + 2);
  else
    v11 = 0;
  if (v10)
    v12 = (uint64_t)&v10[2 * *v10 + 2];
  else
    v12 = 0;
  if (v11 == (unint64_t *)v12)
  {
LABEL_79:
    if ((a3[3] & 1) != 0)
      JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, (uint64_t)a2, (uint64_t)a3, (const JSC::PropertyTable *)v69);
    return;
  }
  v67 = *((_QWORD *)a2 + 7);
  v13 = a3 + 1;
  while (1)
  {
    if (v69 != 1)
      goto LABEL_14;
    v71 = 0xFFFFFFFF00000000;
    v72 = a1;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 2;
    v77 = 0;
    LOBYTE(v78) = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(a1, a2, *v11, (uint64_t)v70, a5, a6, a7, a8);
    v14 = v67;
    if (*(_DWORD *)(v67 + 80))
    {
      v65 = *(_DWORD *)(v67 + 80);
      if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      {
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v14 = v67;
      }
      if (*(_QWORD *)(v14 + 16))
        break;
    }
    if (v79)
    {
      v15 = *(_DWORD *)(v78 + 4);
      if (!v15)
        goto LABEL_86;
      *(_DWORD *)(v78 + 4) = v15 - 1;
    }
LABEL_14:
    v82 = *v11;
    v16 = (WTF::StringImpl *)v82;
    v17 = *(_DWORD *)(v82 + 16);
    if ((v17 & 0x20) != 0)
    {
      if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*(_BYTE *)(v82 + 36) & 4) != 0)
        goto LABEL_64;
    }
    else if ((a3[3] & 2) == 0)
    {
      goto LABEL_64;
    }
    v18 = *a3;
    v19 = *(unsigned int *)(*a3 + 20);
    if (v19 <= 0x13)
    {
      if ((_DWORD)v19)
      {
        v40 = *(_QWORD **)(v18 + 8);
        while (*v40 != v82)
        {
          ++v40;
          if (!--v19)
            goto LABEL_53;
        }
        goto LABEL_64;
      }
LABEL_53:
      if ((v17 & 0x20) != 0)
      {
        v41 = *(_DWORD *)v16 + 2;
      }
      else
      {
        if ((v17 & 0x10) != 0)
        {
          *(_DWORD *)v16 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v16, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v70);
          v16 = v70[0];
        }
        v41 = *(_DWORD *)v16;
        *(_DWORD *)v16 += 2;
        if (!v41)
        {
          WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          goto LABEL_59;
        }
      }
      *(_DWORD *)v16 = v41;
LABEL_59:
      v42 = (uint64_t *)(v18 + 8);
      v70[0] = v16;
      v43 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v43 == *(_DWORD *)(v18 + 16))
      {
        v62 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)v70);
        v43 = *(unsigned int *)(v18 + 20);
        v63 = *(_QWORD *)(v18 + 8);
        v64 = *v62;
        *v62 = 0;
        *(_QWORD *)(v63 + 8 * v43) = v64;
      }
      else
      {
        v44 = *v42;
        v70[0] = 0;
        *(_QWORD *)(v44 + 8 * v43) = v16;
      }
      *(_DWORD *)(v18 + 20) = v43 + 1;
      v45 = v70[0];
      v70[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
      goto LABEL_64;
    }
    if (!*v13 || !*(_DWORD *)(*v13 - 12))
    {
      v20 = *(uint64_t **)(v18 + 8);
      v21 = &v20[v19];
      while (1)
      {
        v22 = *v20;
        v23 = *v13;
        if (*v13
          || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8uLL, 0, a4, a5, a6, a7, a8), (v23 = *v13) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = (_QWORD *)(v23 + 8 * v28);
        v30 = *v29;
        if (*v29)
        {
          v31 = 0;
          v32 = 1;
          while (v30 != v22)
          {
            if (v30 == -1)
              v31 = v29;
            v28 = (v28 + v32) & v24;
            v29 = (_QWORD *)(v23 + 8 * v28);
            v30 = *v29;
            ++v32;
            if (!*v29)
            {
              if (v31)
              {
                *v31 = 0;
                --*(_DWORD *)(*v13 - 16);
                v29 = v31;
              }
              goto LABEL_32;
            }
          }
          goto LABEL_40;
        }
LABEL_32:
        *v29 = v22;
        v33 = *v13;
        v34 = *v13 ? *(_DWORD *)(v33 - 12) + 1 : 1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *v13;
        v36 = *v13 ? *(_DWORD *)(v35 - 12) : 0;
        v37 = (*(_DWORD *)(v35 - 16) + v36);
        v38 = *(unsigned int *)(v35 - 4);
        if (v38 > 0x400)
          break;
        if (3 * v38 <= 4 * v37)
        {
          if (!(_DWORD)v38)
          {
            v39 = 8;
LABEL_44:
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v39, (uint64_t)v29, a4, a5, a6, a7, a8);
            goto LABEL_40;
          }
LABEL_48:
          v39 = ((_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38)));
          goto LABEL_44;
        }
LABEL_40:
        if (++v20 == v21)
          goto LABEL_19;
      }
      if (v38 > 2 * v37)
        goto LABEL_40;
      goto LABEL_48;
    }
LABEL_19:
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)&v82, a4, a5, a6, a7, a8, (uint64_t)v70);
    if ((_BYTE)v71)
    {
      v16 = (WTF::StringImpl *)v82;
      v18 = *a3;
      v17 = *(_DWORD *)(v82 + 16);
      goto LABEL_53;
    }
LABEL_64:
    if (++v11 == (unint64_t *)v12)
      goto LABEL_79;
  }
  if (v79)
  {
    v66 = *(_DWORD *)(v78 + 4);
    if (!v66)
    {
LABEL_86:
      __break(0xC471u);
      JUMPOUT(0x198A26928);
    }
    *(_DWORD *)(v78 + 4) = v66 - 1;
  }
}

uint64_t JSC::JSModuleNamespaceObject::defineOwnProperty(JSC::JSObject *a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int8x16_t v21;
  char v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  BOOL v32;
  const WTF::StringImpl *v33;
  _BOOL8 v34;
  int v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  char v42;
  WTF::StringImpl *v43[4];
  JSC::VM *v44;
  _BYTE v45[16];
  unint64_t v46;
  JSC::JSObject *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;

  v9 = a5;
  v13 = *((_QWORD *)a2 + 7);
  v44 = (JSC::VM *)v13;
  if (a3 && (*((_BYTE *)a3 + 16) & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty(a1, a2, (unint64_t)a3, a4, a5, a6, a7, a8, a9);
  memset(v43, 0, 24);
  v43[3] = (WTF::StringImpl *)14;
  v46 = 0xFFFFFFFF00000000;
  v48 = 0;
  v49 = 0;
  v47 = a1;
  v50 = 0x20000;
  v51 = 0;
  LOBYTE(v52) = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v20 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x68))();
  v22 = 0;
  if (v20)
    v22 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v43, (uint64_t)a2, a3, (uint64_t)v45, v16, v17, v18, v19);
  if (v53)
  {
    v23 = *(_DWORD *)(v52 + 4);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198A26C30);
    }
    *(_DWORD *)(v52 + 4) = v23 - 1;
  }
  if (*(_DWORD *)(v13 + 80))
  {
    v35 = *(_DWORD *)(v13 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    {
      v42 = v22;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v14, v15, v16, v17, v18, v19);
      v22 = v42;
    }
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v22 & 1) != 0)
  {
    if (*(_OWORD *)(a4 + 8) != 0)
    {
      if ((v9 & 1) != 0)
      {
        v24 = "Cannot change module namespace object's binding to accessor";
        v25 = 60;
LABEL_16:
        JSC::throwTypeError((unint64_t)a2, &v44, (uint64_t)v24, v25);
        return 0;
      }
      return 0;
    }
    v28 = *(_DWORD *)(a4 + 28);
    if ((v28 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
    {
      if ((v9 & 1) == 0)
        return 0;
      v24 = "Cannot change module namespace object's binding to non-writable attribute";
      v25 = 74;
      goto LABEL_16;
    }
    if ((v28 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) != 0)
    {
      if ((v9 & 1) == 0)
        return 0;
      v24 = "Cannot replace module namespace object's binding with non-enumerable attribute";
      v25 = 79;
      goto LABEL_16;
    }
    if ((v28 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) == 0)
    {
      if ((v9 & 1) == 0)
        return 0;
      v24 = "Cannot replace module namespace object's binding with configurable attribute";
      v25 = 77;
      goto LABEL_16;
    }
    v29 = *(_QWORD *)a4;
    if (!*(_QWORD *)a4)
      return 1;
    v30 = v43[0];
    if ((WTF::StringImpl *)v29 == v43[0])
    {
      v27 = 1;
      goto LABEL_48;
    }
    if (v29 >> 49)
    {
      if ((unint64_t)v43[0] >> 49)
      {
        v36 = (double)(int)v29;
        if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v36 = v29 - 0x2000000000000;
        v37 = (double)SLODWORD(v43[0]);
        if (v43[0] <= (WTF::StringImpl *)0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v37 = (char *)v43[0] - 0x2000000000000;
        v32 = *(_QWORD *)&v36 == *(_QWORD *)&v37;
        goto LABEL_34;
      }
    }
    else if ((((unint64_t)v43[0] | v29) & 0xFFFE000000000002) == 0)
    {
      v31 = *(unsigned __int8 *)(v29 + 5);
      if (v31 == 2)
      {
        if (*((_BYTE *)v43[0] + 5) == 2)
        {
          if ((*(_QWORD *)(v29 + 8) & 1) != 0
            || (v33 = (const WTF::StringImpl *)*((_QWORD *)v43[0] + 1), (v33 & 1) != 0))
          {
            v34 = JSC::JSString::equalSlowCase((JSC::JSString *)v29, a2, v43[0], v15, v16, v17, v18, v19, v21);
          }
          else
          {
            v34 = WTF::equal(*(WTF **)(v29 + 8), v33, v43[0]);
          }
          goto LABEL_46;
        }
      }
      else if (v31 == 3 && *((_BYTE *)v43[0] + 5) == 3)
      {
        v34 = JSC::JSBigInt::equals((JSC::JSBigInt *)v29, v43[0], v43[0]);
LABEL_46:
        v27 = v34;
LABEL_48:
        if (*(_DWORD *)(v13 + 80))
        {
          v38 = *(_DWORD *)(v13 + 80);
          if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v30, v15, v16, v17, v18, v19);
          v39 = *(_QWORD *)(v13 + 16);
          v32 = v39 == 0;
          v40 = v39 != 0;
          if (v32)
            v41 = v27;
          else
            v41 = 1;
          v27 = v40 ^ v41;
          if ((v41 & 1) != 0 || !v9)
            return v27;
        }
        else if (((v27 | v9 ^ 1) & 1) != 0)
        {
          return v27;
        }
        v24 = "Cannot replace module namespace object's binding's value";
        v25 = 57;
        goto LABEL_16;
      }
      v32 = (WTF::StringImpl *)v29 == v43[0];
LABEL_34:
      v27 = v32;
      goto LABEL_48;
    }
    v27 = 0;
    goto LABEL_48;
  }
  if ((v9 & 1) != 0)
  {
    v24 = "Attempting to define property on object that is not extensible.";
    v25 = 64;
    goto LABEL_16;
  }
  return 0;
}

void JSC::JSModuleNamespaceObject::visitChildren(JSC::JSModuleNamespaceObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  int v31;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_7;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) == 0)
      goto LABEL_49;
  }
  else
  {
    v17 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
      goto LABEL_49;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_49:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
LABEL_7:
  v18 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v19 = *v18;
    if ((v19 & 0x40) != 0)
      break;
    v20 = __ldaxr(v18);
    if (v20 == v19)
    {
      if (!__stxr(v19 | 0x40, v18))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_14:
  v21 = *((_QWORD *)this + 2);
  if (!v21)
  {
    v24 = 0;
    LODWORD(v22) = 0;
LABEL_44:
    v23 = (_QWORD *)(v21 + 24 * v22);
    goto LABEL_21;
  }
  v22 = *(unsigned int *)(v21 - 4);
  v23 = (_QWORD *)(v21 + 24 * v22);
  if (!*(_DWORD *)(v21 - 12))
  {
    v24 = (_QWORD *)(v21 + 24 * v22);
    goto LABEL_44;
  }
  v24 = (_QWORD *)*((_QWORD *)this + 2);
  if ((_DWORD)v22)
  {
    v25 = 24 * v22;
    v24 = (_QWORD *)*((_QWORD *)this + 2);
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      v24 += 3;
      v25 -= 24;
      if (!v25)
      {
        v24 = v23;
        break;
      }
    }
  }
LABEL_21:
  if (v21)
    v26 = (_QWORD *)(v21 + 24 * *(unsigned int *)(v21 - 4));
  else
    v26 = 0;
  while (v24 != v26)
  {
    v27 = v24[2];
    if (v27)
    {
      if ((v27 & 8) != 0)
      {
        if ((*(_BYTE *)(v27 - 79) & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v28 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), v28, v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v27 & 0xFFFFFFFFFFFFC000) + 8 * ((v27 >> 10) & 0xF) + 0x28) >> (v27 >> 4)) & 1) != 0)
          goto LABEL_30;
      }
      JSC::SlotVisitor::appendHiddenSlow(a2, v27, 0, v11, v12, v13, v14, v15);
    }
LABEL_30:
    v29 = v24 + 3;
    v24 = v23;
    if (v29 != v23)
    {
      v24 = v29;
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        v24 += 3;
        if (v24 == v23)
        {
          v24 = v23;
          break;
        }
      }
    }
  }
  if (this)
  {
    while (1)
    {
      v30 = *v18;
      if ((v30 & 0xC0) != 0x40)
        break;
      v31 = __ldxr(v18);
      if (v31 == v30)
      {
        if (!__stxr(v30 & 0xBF, v18))
          return;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::JSModuleNamespaceObject::visitChildren(JSC::JSModuleNamespaceObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  _QWORD v22[2];
  uint64_t v23;
  char v24;

  v22[0] = a2;
  v22[1] = this;
  v24 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v23 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198A27124);
  }
  *((_QWORD *)a2 + 11) = v22;
  JSC::JSObject::visitChildren(this, a2, a3);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
  v6 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v9 = (_QWORD *)*((_QWORD *)this + 2);
  v10 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::begin(v9);
  v17 = v10;
  v19 = v18;
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 == v10)
  {
LABEL_21:
    while (1)
    {
      v20 = *v6;
      if ((v20 & 0xC0) != 0x40)
        break;
      v21 = __ldxr(v6);
      if (v21 == v20)
      {
        if (!__stxr(v20 & 0xBF, v6))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    do
    {
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 64))(a2, v17[2]);
      while (1)
      {
        v17 += 3;
        if (v17 == v19)
          break;
        if ((unint64_t)(*v17 + 1) > 1)
          goto LABEL_18;
      }
      v17 = v19;
LABEL_18:
      ;
    }
    while (v17 != v9);
    if (this)
      goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v22[0] + 88) = v23;
}

double JSC::JSModuleNamespaceObject::JSModuleNamespaceObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  double result;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v3;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return result;
}

{
  int v3;
  double result;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v3;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return result;
}

uint64_t JSC::JSModuleNamespaceObject::finishCreation(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::Heap *v104;
  WTF::StringImpl *v105[2];
  WTF::StringImpl *v106;
  WTF::StringImpl *v107[3];
  unint64_t v108;

  v12 = *(_QWORD *)(a2 + 56);
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  std::sort[abi:sn180100]<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution> *,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord*,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(*(_QWORD *)a4, (WTF::AtomStringImpl *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 12)), a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 32) = a3;
  v104 = (JSC::Heap *)(v12 + 192);
  if (a1 && a3 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v104, a1);
  v19 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v19)
  {
    v20 = WTF::fastMalloc((WTF *)(8 * v19 + 8));
    *(_DWORD *)v20 = v19;
    bzero((void *)(v20 + 8), 8 * v19);
  }
  else
  {
    v20 = 0;
  }
  v107[0] = (WTF::StringImpl *)v20;
  v21 = (_QWORD *)(a1 + 24);
  WTF::FixedVector<JSC::Identifier>::operator=((unsigned int **)(a1 + 24), (WTF::AtomStringImpl *)v107, v13, v14, v15, v16, v17, v18);
  WTF::FixedVector<JSC::Identifier>::~FixedVector((unsigned int **)v107, v22, v23, v24, v25, v26, v27, v28);
  v108 = a1;
  v36 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v37 = *v36;
    if ((v37 & 0x40) != 0)
      break;
    v38 = __ldaxr(v36);
    if (v38 == v37)
    {
      if (!__stxr(v37 | 0x40, v36))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v36);
LABEL_14:
  v39 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v39)
  {
    v40 = *(_QWORD *)a4;
    v41 = *(_QWORD *)a4 + 32 * v39;
    v42 = -1;
    v43 = 8;
    do
    {
      if (++v42 >= (unint64_t)*(unsigned int *)*v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198A2745CLL);
      }
      JSC::Identifier::operator=((WTF::StringImpl **)(*v21 + v43), *(WTF::AtomStringImpl **)v40, v30, v31, v32, v33, v34, v35);
      v48 = *(WTF::StringImpl **)v40;
      if (*(_QWORD *)v40)
        *(_DWORD *)v48 += 2;
      v105[1] = 0;
      v106 = v48;
      v105[0] = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::add<JSC::JSModuleNamespaceObject::ExportEntry>((uint64_t)v107, (uint64_t *)(a1 + 16), (WTF::AtomStringImpl *)&v106, (WTF::AtomStringImpl *)v105, v44, v45, v46, v47);
      if (v105[0])
      {
        if (*(_DWORD *)v105[0] == 2)
        {
          WTF::StringImpl::~StringImpl(v105[0], v49, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          *(_DWORD *)v105[0] -= 2;
        }
      }
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
        {
          WTF::StringImpl::~StringImpl(v106, v49, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        }
        else
        {
          *(_DWORD *)v106 -= 2;
        }
      }
      v56 = v107[0];
      JSC::Identifier::operator=((WTF::StringImpl **)v107[0] + 1, *(WTF::AtomStringImpl **)(v40 + 24), v50, v51, v52, v53, v54, v55);
      v57 = *(_QWORD *)(v40 + 16);
      *((_QWORD *)v56 + 2) = v57;
      if (a1 && v57 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v104, a1);
      v43 += 8;
      v40 += 32;
    }
    while (v40 != v41);
  }
  WTF::Locker<JSC::JSCellLock,void>::~Locker(&v108, v29, v30, v31, v32, v33, v34, v35);
  v74 = *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2776);
  v75 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v75 = 0x600000002;
  *(_QWORD *)(v75 + 8) = "Module";
  *(_DWORD *)(v75 + 16) = 4;
  v107[0] = (WTF::StringImpl *)v75;
  v82 = JSC::jsNontrivialString(v12, (JSC::VM *)v107, v76, v77, v78, v79, v80, v81);
  JSC::JSObject::putDirect((int *)a1, v12, v74, v82, 14, v86, v83, v84, v85);
  v94 = v107[0];
  v107[0] = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x98))(a1, a2);
}

void std::sort[abi:sn180100]<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution> *,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord*,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>(unint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  const WTF::StringImpl *v9;

  v8 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - a1) >> 5);
  if (a2 == (WTF::AtomStringImpl *)a1)
    v9 = 0;
  else
    v9 = (const WTF::StringImpl *)v8;
  std::__introsort<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,false>(a1, a2, v9, 1, a5, a6, a7, a8);
}

unsigned int **WTF::FixedVector<JSC::Identifier>::operator=(unsigned int **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v12 = (WTF::StringImpl **)(v10 + 2);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unsigned int **WTF::FixedVector<JSC::Identifier>::~FixedVector(unsigned int **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v11 = (WTF::StringImpl **)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

WTF::StringImpl **JSC::Identifier::operator=(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
    *(_DWORD *)a2 += 2;
  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::add<JSC::JSModuleNamespaceObject::ExportEntry>(uint64_t result, uint64_t *a2, WTF::AtomStringImpl *a3, WTF::AtomStringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl **v34;
  int v35;
  unsigned int v36;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a2, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *(WTF::StringImpl **)a3;
  v16 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *((_DWORD *)v15 + 8);
  v17 = v14 & (v16 >> 8);
  v18 = (WTF::StringImpl **)(v12 + 24 * v17);
  v19 = *v18;
  if (*v18)
  {
    v34 = 0;
    v35 = 1;
    do
    {
      if (v19 == v15)
      {
        if ((v13 & 1) != 0)
          v36 = 0;
        else
          v36 = *(_DWORD *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 24 * v36;
        goto LABEL_13;
      }
      if (v19 == (WTF::StringImpl *)-1)
        v34 = v18;
      v17 = (v17 + v35) & v14;
      v18 = (WTF::StringImpl **)(v12 + 24 * v17);
      v19 = *v18;
      ++v35;
    }
    while (*v18);
    if (v34)
    {
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v18 = v34;
    }
  }
  WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v18, a3, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  result = JSC::JSModuleNamespaceObject::ExportEntry::operator=((uint64_t)(v18 + 1), a4, v20, v21, v22, v23, v24, v25);
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_12;
LABEL_24:
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(a2, (WTF::AtomStringImpl *)v18);
    v18 = (WTF::StringImpl **)result;
    v28 = *a2;
    if (*a2)
      LODWORD(v31) = *(_DWORD *)(v28 - 4);
    else
      LODWORD(v31) = 0;
    goto LABEL_12;
  }
  if (3 * v31 <= 4 * v30)
    goto LABEL_24;
LABEL_12:
  v32 = v28 + 24 * v31;
  v33 = 1;
LABEL_13:
  *(_QWORD *)v11 = v18;
  *(_QWORD *)(v11 + 8) = v32;
  *(_BYTE *)(v11 + 16) = v33;
  return result;
}

uint64_t JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t TDZError;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;

  v12 = *((_QWORD *)a2 + 7);
  if (!a3 || (*(_BYTE *)(a3 + 16) & 0x20) == 0)
  {
    *(_BYTE *)(a4 + 52) = 1;
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13)
      return 0;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      v15 = *(_DWORD *)(a3 + 32);
    v16 = v14 & (v15 >> 8);
    v17 = (uint64_t *)(v13 + 24 * v16);
    v18 = *v17;
    if (*v17 != a3)
    {
      v45 = 1;
      while (v18)
      {
        v16 = (v16 + v45) & v14;
        v17 = (uint64_t *)(v13 + 24 * v16);
        v18 = *v17;
        ++v45;
        if (*v17 == a3)
          goto LABEL_7;
      }
      v17 = (uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4));
    }
LABEL_7:
    if (v17 == (uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4)))
      return 0;
    v19 = *(unsigned __int8 *)(a4 + 50);
    if (*(_BYTE *)(a4 + 50))
    {
      if (v19 == 1)
      {
        *(_QWORD *)a4 = 10;
        *(_DWORD *)(a4 + 16) = 8;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      if (v19 == 3)
      {
        result = 0;
        *(_QWORD *)a4 = 10;
        *(_DWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      if (v19 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198A27A08);
      }
    }
    if (v17[1] == *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 112))
    {
      JSC::AbstractModuleRecord::getModuleNamespace((JSC::AbstractModuleRecord *)v17[2], a2, a3, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          return 0;
      }
    }
    v20 = v17[1];
    v21 = *(_QWORD *)(v17[2] + 112);
    v22 = *(_QWORD *)(v21 + 24);
    v23 = (unsigned __int8 *)(v22 + 20);
    if (__ldaxr((unsigned __int8 *)(v22 + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
LABEL_13:
      v25 = *(_QWORD *)(v22 + 8);
      if (v25)
      {
        v26 = *(_DWORD *)(v25 - 8);
        v27 = *(_DWORD *)(v20 + 16);
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v20 + 32);
        v28 = v26 & (v27 >> 8);
        v29 = *(_QWORD *)(v25 + 16 * v28);
        if (v29 == v20)
        {
LABEL_20:
          v25 += 16 * v28;
        }
        else
        {
          v30 = 1;
          while (v29)
          {
            v28 = ((_DWORD)v28 + v30) & v26;
            v29 = *(_QWORD *)(v25 + 16 * v28);
            ++v30;
            if (v29 == v20)
              goto LABEL_20;
          }
          v25 += 16 * *(unsigned int *)(v25 - 4);
        }
      }
      v33 = *(_QWORD **)(v25 + 8);
      v31 = (_QWORD *)(v25 + 8);
      v32 = v33;
      if ((v33 & 1) == 0)
        v31 = v32;
      v34 = *v31 >> 6;
      v35 = __ldxr(v23);
      if (v35 == 1)
      {
        if (!__stlxr(0, v23))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v22 + 20), 0, a3, a4, a5, a6, a7, a8);
LABEL_28:
      v36 = *(_QWORD *)(v21 + 8 * v34 + 32);
      if (v36)
      {
        *(_QWORD *)a4 = v36;
        *(_DWORD *)(a4 + 16) = 8;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        *(_BYTE *)(a4 + 51) = 2;
        *(_QWORD *)(a4 + 72) = v21;
        *(_DWORD *)(a4 + 80) = v34;
        return result;
      }
      TDZError = JSC::createTDZError(a2, a2);
      JSC::VM::throwException((JSC::VM *)v12, a2, TDZError, v47, v48, v49, v50, v51);
      return 0;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v22 + 20);
    goto LABEL_13;
  }
  if (!(a3 >> 4)
    || (v38 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v38 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *((JSC::VM **)a2 + 7), a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v39)|| (v71 = a3, v40 = JSC::PropertyTable::get(v39, (uint64_t *)&v71), a6 = v40, (_DWORD)v40 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, (JSC::VM *)v12, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v52 = *(_DWORD *)(a3 + 16);
    if ((v52 & 0x20) != 0)
      return 0;
    v53 = *(_BYTE **)(a3 + 8);
    v54 = *(unsigned int *)(a3 + 4);
    if ((v52 & 4) != 0)
    {
      if ((_DWORD)v54)
      {
        v55 = *v53 - 48;
        if (v55 <= 9 && (v54 < 2 || *v53 != 48))
        {
          v68 = v53 + 1;
          v69 = v54 - 1;
          while (v69)
          {
            if (v55 > 0x19999999)
              goto LABEL_64;
            v70 = *v68 - 48;
            if (v70 > 9)
              goto LABEL_64;
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v62 = __CFADD__(v70, 10 * v55);
            v55 = v70 + 10 * v55;
            ++v68;
            --v69;
            if (v62)
              goto LABEL_65;
          }
          goto LABEL_100;
        }
      }
    }
    else if ((_DWORD)v54)
    {
      v55 = *(unsigned __int16 *)v53 - 48;
      if (v55 <= 9 && (*(_WORD *)v53 != 48 || v54 <= 1))
      {
        v59 = (unsigned __int16 *)(v53 + 2);
        v60 = v54 - 1;
        while (v60)
        {
          if (v55 > 0x19999999)
            goto LABEL_64;
          v61 = *v59 - 48;
          if (v61 > 9)
            goto LABEL_64;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v62 = __CFADD__(v61, 10 * v55);
          v55 = v61 + 10 * v55;
          ++v59;
          --v60;
          if (v62)
            goto LABEL_65;
        }
LABEL_100:
        v56 = 0x100000000;
        if (v55 == -1)
        {
          v56 = 0;
          v57 = 0;
        }
        else
        {
          v57 = v55;
        }
        if (v55 == -1)
          v58 = 0;
        else
          v58 = v55 & 0xFFFFFF00;
LABEL_65:
        if (HIDWORD(v56))
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, (const WTF::StringImpl *)(v56 | v58 | v57), a4, a5, a6, a7, a8);
        return 0;
      }
    }
LABEL_64:
    v56 = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_65;
  }
  if ((int)v40 <= 63)
  {
    v41 = a1 + 16;
    v42 = v40 << 32;
  }
  else
  {
    v41 = *(_QWORD *)(a1 + 8) - 8;
    v42 = 0x3F00000000 - (v40 << 32);
  }
  v43 = *(_QWORD *)(v41 + (v42 >> 29));
  if ((v43 & 0xFFFE000000000002) != 0)
    goto LABEL_47;
  v44 = *(unsigned __int8 *)(v43 + 5);
  if (v44 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, v12, a4, v43, SHIDWORD(v40), v40);
    return 1;
  }
  if (v44 != 6)
  {
LABEL_47:
    *(_QWORD *)a4 = v43;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v40);
    *(_DWORD *)(a4 + 20) = v40;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v63 = *(_DWORD *)(v38 + 16) & 3;
  v65 = *(_QWORD *)(v43 + 8);
  v64 = *(_QWORD *)(v43 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
  {
    v67 = *(_QWORD *)(v43 + 24);
    v66 = *(_QWORD *)(v43 + 32);
    *(_QWORD *)a4 = v65;
    *(_QWORD *)(a4 + 8) = v64;
    *(_DWORD *)(a4 + 16) = HIDWORD(v40);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v63 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v67;
    *(_QWORD *)(a4 + 80) = v66;
  }
  else
  {
    *(_QWORD *)a4 = v65;
    *(_QWORD *)(a4 + 8) = v64;
    *(_DWORD *)(a4 + 16) = HIDWORD(v40);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v63 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

void JSC::JSModuleRecord::destroy(JSC::JSModuleRecord *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;

  JSC::VariableEnvironment::~VariableEnvironment((JSC::JSModuleRecord *)((char *)this + 176), a2, a3, a4, a5, a6, a7, a8);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::JSModuleRecord *)((char *)this + 152), v9, v10, v11, v12, v13, v14, v15);
  v23 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  JSC::AbstractModuleRecord::~AbstractModuleRecord(this, v16, v17, v18, v19, v20, v21, v22);
}

void JSC::JSModuleRecord::visitChildren(JSC::JSModuleRecord *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::AbstractModuleRecord::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 25);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSModuleRecord::visitChildren(JSC::JSModuleRecord *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::AbstractModuleRecord::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 25));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::JSModuleRecord::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSModuleRecord::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSModuleRecord::create(JSC::JSModuleRecord *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Structure *a4, const JSC::Identifier *a5, const SourceCode *a6, const JSC::VariableEnvironment *a7, const JSC::VariableEnvironment *a8, unsigned __int16 a9)
{
  __int16 v9;
  JSC::Heap *v17;
  unint64_t SlowCase;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = (__int16)a8;
  v17 = (JSC::Heap *)*((_QWORD *)a2 + 5080);
  if (!v17)
    v17 = JSC::GCClient::Heap::jsModuleRecordSpaceSlow((JSC::Heap **)a2 + 4694);
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase < *((_QWORD *)v17 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v17 + 5);
  if ((SlowCase & 1) == 0)
  {
    v28 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v28);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v28;
LABEL_4:
    *((_QWORD *)v17 + 3) = SlowCase + 224;
    goto LABEL_5;
  }
  v29 = (uint64_t)v17;
  JSC::sanitizeStackForVM(a2, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v29, (uint64_t)a2 + 192, 224, 0, 0, v30, v31, v32);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v19 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = (unint64_t)a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  v20 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v20 += 2;
  *(_QWORD *)(SlowCase + 32) = v20;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 56) = 0u;
  *(_OWORD *)(SlowCase + 72) = 0u;
  *(_OWORD *)(SlowCase + 88) = 0u;
  *(_OWORD *)(SlowCase + 104) = 0u;
  *(_QWORD *)(SlowCase + 120) = 0;
  v21 = *(_QWORD *)a5;
  if (*(_QWORD *)a5)
    ++*(_DWORD *)(v21 + 8);
  *(_QWORD *)(SlowCase + 128) = v21;
  *(_QWORD *)(SlowCase + 136) = *((_QWORD *)a5 + 1);
  *(_QWORD *)(SlowCase + 144) = *((_QWORD *)a5 + 2);
  JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)(SlowCase + 152), (const JSC::VariableEnvironment *)a6);
  JSC::VariableEnvironment::VariableEnvironment((JSC::VariableEnvironment *)(SlowCase + 176), a7);
  *(_QWORD *)(SlowCase + 200) = 0;
  *(_WORD *)(SlowCase + 208) = v9;
  JSC::AbstractModuleRecord::finishCreation((JSC::AbstractModuleRecord *)SlowCase, (unint64_t)this, a2, v22, v23, v24, v25, v26);
  return SlowCase;
}

BOOL JSC::JSModuleRecord::link(unint64_t a1, JSC::ModuleProgramExecutable *a2, const SourceCode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v26;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v26 = v11;
  v12 = JSC::ModuleProgramExecutable::create(a2, (SourceCode *)(a1 + 128), a3, a4, a5, a6, a7, a8);
  if (!v12)
  {
    JSC::throwSyntaxError(a2, &v26);
    return 1;
  }
  v17 = v12;
  JSC::JSModuleRecord::instantiateDeclarations(a1, (unint64_t)a2, v12, (uint64_t)a3, v13, v14, v15, v16);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v18, v19, v20, v21, v22, v23, v24))
    return 1;
  *(_QWORD *)(a1 + 200) = v17;
  if (*((_DWORD *)v11 + 190) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, a1);
  return (*(_WORD *)(*(_QWORD *)(v17 + 80) + 40) & 0x80) == 0;
}

void JSC::JSModuleRecord::instantiateDeclarations(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  double v23;
  double v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::AbstractModuleRecord *v40;
  int v41;
  uint64_t *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  int v71;
  char v72;
  _QWORD *v73;
  WTF::StringImpl *v74;
  int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  const JSC::Identifier *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  JSC::Structure *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t ImportMetaProperties;
  double v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t ModuleNamespace;
  double v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  unint64_t v172;
  int8x16_t *v173;
  int8x16_t *v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl **v177;
  uint64_t *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(WTF::StringImpl **);
  WTF::StringImpl **v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  JSC::JSCell *v224;
  char *v225;
  uint64_t v226;
  JSC *v228;
  char v229;
  WTF::StringImpl *v230;
  JSC::VM *v231;
  WTF::StringImpl *v232;
  JSC::AbstractModuleRecord *v233;
  WTF::StringImpl *v234;

  v11 = *(JSC::VM **)(a2 + 56);
  v231 = v11;
  v12 = *(_QWORD *)(a3 + 96);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 784);
  if ((v14 & 1) != 0)
  {
    v192 = *(uint64_t (**)(WTF::StringImpl **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v193 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v193 = (WTF::StringImpl **)(a2 - 16);
    v232 = *v193;
    v233 = (JSC::AbstractModuleRecord *)a2;
    v234 = (WTF::StringImpl *)(a2 + 784);
    v14 = v192(&v232);
  }
  v22 = (_DWORD *)JSC::JSModuleEnvironment::create(v11, v14, v13, v12, 0, a1, a7, a8);
  v26 = *(_QWORD *)(a1 + 48);
  v228 = v11;
  if (!v26)
  {
    v29 = 0;
    LODWORD(v27) = 0;
LABEL_115:
    v28 = v26 + 48 * v27;
    goto LABEL_9;
  }
  v27 = *(unsigned int *)(v26 - 4);
  v28 = v26 + 48 * v27;
  if (!*(_DWORD *)(v26 - 12))
  {
    v29 = v26 + 48 * v27;
    goto LABEL_115;
  }
  v29 = *(_QWORD *)(a1 + 48);
  if ((_DWORD)v27)
  {
    v30 = 48 * v27;
    v29 = *(_QWORD *)(a1 + 48);
    while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
    {
      v29 += 48;
      v30 -= 48;
      if (!v30)
      {
        v29 = v28;
        break;
      }
    }
  }
LABEL_9:
  v224 = (JSC::JSCell *)a1;
  if (v26)
    v31 = v26 + 48 * *(unsigned int *)(v26 - 4);
  else
    v31 = 0;
  while (v29 != v31)
  {
    if (*(_DWORD *)(v29 + 8) == 1)
    {
      v178 = (uint64_t *)(v29 + 16);
      JSC::AbstractModuleRecord::resolveExport(v224, (JSC::VM **)a2, (WTF::StringImpl **)(v29 + 16), v17, v18, v19, v20, v21, (uint64_t)&v232);
      if (*((_DWORD *)v231 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
      {
        goto LABEL_196;
      }
      switch((_DWORD)v232)
      {
        case 3:
          v180 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v180 = 0x5500000002;
          v181 = "Indirectly exported binding name 'default' cannot be resolved by star export entries.";
LABEL_187:
          *(_QWORD *)(v180 + 8) = v181;
          *(_DWORD *)(v180 + 16) = 4;
          v230 = (WTF::StringImpl *)v180;
          goto LABEL_193;
        case 2:
          v212 = *v178;
          if (*v178)
          {
            v171 = *(_BYTE **)(v212 + 8);
            v172 = *(unsigned int *)(v212 + 4) | ((unint64_t)((*(_DWORD *)(v212 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v171 = 0;
            v172 = 0x100000000;
          }
          v173 = (int8x16_t *)"Indirectly exported binding name '";
          v174 = (int8x16_t *)"' cannot be resolved due to ambiguous multiple bindings.";
          v175 = 35;
LABEL_191:
          v176 = 57;
          goto LABEL_192;
        case 1:
          v213 = *v178;
          if (*v178)
          {
            v171 = *(_BYTE **)(v213 + 8);
            v172 = *(unsigned int *)(v213 + 4) | ((unint64_t)((*(_DWORD *)(v213 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v171 = 0;
            v172 = 0x100000000;
          }
          v173 = (int8x16_t *)"Indirectly exported binding name '";
          v174 = (int8x16_t *)"' is not found.";
          v175 = 35;
LABEL_169:
          v176 = 16;
LABEL_192:
          WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(v173, v175, v171, v172, v174, v176, (int **)&v230);
LABEL_193:
          JSC::throwSyntaxError((JSC::JSGlobalObject *)a2, &v231, &v230);
          v183 = v230;
          v230 = 0;
          if (v183)
          {
            if (*(_DWORD *)v183 == 2)
            {
              WTF::StringImpl::~StringImpl(v183, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
            }
            else
            {
              *(_DWORD *)v183 -= 2;
            }
          }
LABEL_196:
          v184 = v234;
          v234 = 0;
          if (v184)
          {
            if (*(_DWORD *)v184 == 2)
            {
              WTF::StringImpl::~StringImpl(v184, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
            }
            else
            {
              *(_DWORD *)v184 -= 2;
            }
          }
          return;
      }
      v179 = v234;
      v234 = 0;
      if (v179)
      {
        if (*(_DWORD *)v179 == 2)
        {
          WTF::StringImpl::~StringImpl(v179, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
        }
        else
        {
          *(_DWORD *)v179 -= 2;
        }
      }
    }
    v32 = v29 + 48;
    v29 = v28;
    if (v32 != v28)
    {
      v29 = v32;
      while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
      {
        v29 += 48;
        if (v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
  }
  v33 = *((_QWORD *)v224 + 5);
  v223 = a4;
  if (!v33)
  {
    v37 = 0;
    LODWORD(v34) = 0;
    v36 = v228;
LABEL_112:
    v35 = v33 + 40 * v34;
    goto LABEL_26;
  }
  v34 = *(unsigned int *)(v33 - 4);
  v35 = v33 + 40 * v34;
  v36 = v228;
  if (!*(_DWORD *)(v33 - 12))
  {
    v37 = v33 + 40 * v34;
    goto LABEL_112;
  }
  v37 = *((_QWORD *)v224 + 5);
  if ((_DWORD)v34)
  {
    v38 = 40 * v34;
    v37 = *((_QWORD *)v224 + 5);
    while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
    {
      v37 += 40;
      v38 -= 40;
      if (!v38)
      {
        v37 = v35;
        break;
      }
    }
  }
LABEL_26:
  v225 = (char *)v36 + 41912;
  if (v33)
    v39 = v33 + 40 * *(unsigned int *)(v33 - 4);
  else
    v39 = 0;
  while (v37 != v39)
  {
    v40 = (JSC::AbstractModuleRecord *)JSC::AbstractModuleRecord::hostResolveImportedModule(v224, (JSC::VM **)a2, (JSC::VM **)(v37 + 16), v17, v18, v19, v20, v21);
    if (v40 == (JSC::AbstractModuleRecord *)10)
    {
      if (!*((_QWORD *)v228 + 2))
      {
        v222 = 159;
        goto LABEL_242;
      }
      if (!*((_DWORD *)v228 + 20))
      {
        v222 = 160;
LABEL_242:
        WTFCrashWithInfoImpl(v222, "./runtime/JSModuleRecord.cpp", "void JSC::JSModuleRecord::instantiateDeclarations(JSGlobalObject *, ModuleProgramExecutable *, JSValue)");
      }
    }
    if (*((_DWORD *)v231 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
    {
      return;
    }
    v41 = *(_DWORD *)(v37 + 8);
    if (v41)
    {
      if (v41 == 1)
      {
        ModuleNamespace = JSC::AbstractModuleRecord::getModuleNamespace(v40, (JSC::JSGlobalObject *)a2, (uint64_t)v16, v17, v18, v19, v20, v21);
        if (*((_DWORD *)v231 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v231, v153, v154, v155, v156, v157, v158, v159))
            return;
        }
        LOBYTE(v232) = 0;
        JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>((unint64_t)v22, a2, *(_QWORD *)(v37 + 32), ModuleNamespace, 0, 1, &v232, v159, v161);
        if (*((_DWORD *)v231 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
            return;
        }
      }
      goto LABEL_38;
    }
    v42 = (uint64_t *)(v37 + 24);
    JSC::AbstractModuleRecord::resolveExport(v40, (JSC::VM **)a2, (WTF::StringImpl **)(v37 + 24), v17, v18, v19, v20, v21, (uint64_t)&v232);
    if (*((_DWORD *)v231 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
    {
      goto LABEL_196;
    }
    if ((_DWORD)v232)
    {
      switch((_DWORD)v232)
      {
        case 3:
          v180 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v180 = 0x4B00000002;
          v181 = "Importing binding name 'default' cannot be resolved by star export entries.";
          goto LABEL_187;
        case 2:
          v182 = *v42;
          if (*v42)
          {
            v171 = *(_BYTE **)(v182 + 8);
            v172 = *(unsigned int *)(v182 + 4) | ((unint64_t)((*(_DWORD *)(v182 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v171 = 0;
            v172 = 0x100000000;
          }
          v173 = (int8x16_t *)"Importing binding name '";
          v174 = (int8x16_t *)"' cannot be resolved due to ambiguous multiple bindings.";
          v175 = 25;
          goto LABEL_191;
        case 1:
          v170 = *v42;
          if (*v42)
          {
            v171 = *(_BYTE **)(v170 + 8);
            v172 = *(unsigned int *)(v170 + 4) | ((unint64_t)((*(_DWORD *)(v170 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v171 = 0;
            v172 = 0x100000000;
          }
          v173 = (int8x16_t *)"Importing binding name '";
          v174 = (int8x16_t *)"' is not found.";
          v175 = 25;
          goto LABEL_169;
      }
    }
    else
    {
      v43 = v234;
      if (*(WTF::StringImpl **)(*((_QWORD *)v225 + 5) + 112) != v234)
        goto LABEL_35;
      JSC::AbstractModuleRecord::getModuleNamespace(v233, (JSC::JSGlobalObject *)a2, (uint64_t)v16, v17, v18, v19, v20, v21);
      if (*((_DWORD *)v231 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
      {
        goto LABEL_196;
      }
    }
    v43 = v234;
LABEL_35:
    v234 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
LABEL_38:
    v44 = v37 + 40;
    v37 = v35;
    if (v44 != v35)
    {
      v37 = v44;
      while ((unint64_t)(*(_QWORD *)v37 + 1) <= 1)
      {
        v37 += 40;
        if (v37 == v35)
        {
          v37 = v35;
          break;
        }
      }
    }
  }
  v53 = *((_QWORD *)v224 + 19);
  if (v53)
  {
    v54 = *(unsigned int *)(v53 - 4);
    v55 = (unint64_t *)(v53 + 16 * v54);
    if (*(_DWORD *)(v53 - 12))
    {
      v56 = (unint64_t *)*((_QWORD *)v224 + 19);
      if ((_DWORD)v54)
      {
        v57 = 16 * v54;
        v56 = (unint64_t *)*((_QWORD *)v224 + 19);
        while (*v56 + 1 <= 1)
        {
          v56 += 2;
          v57 -= 16;
          if (!v57)
          {
            v56 = v55;
            goto LABEL_53;
          }
        }
      }
      goto LABEL_53;
    }
    v56 = (unint64_t *)(v53 + 16 * v54);
  }
  else
  {
    v56 = 0;
    v54 = 0;
  }
  v55 = (unint64_t *)(v53 + 16 * v54);
LABEL_53:
  if (v53)
    v58 = (unint64_t *)(v53 + 16 * *(unsigned int *)(v53 - 4));
  else
    v58 = 0;
  if (v58 != v56)
  {
    v59 = (unsigned __int8 *)(v12 + 20);
    while (1)
    {
      v60 = *v56;
      if (__ldaxr(v59))
        break;
      if (__stxr(1u, v59))
        goto LABEL_59;
LABEL_60:
      v62 = *(_QWORD *)(v12 + 8);
      if (!v62)
        goto LABEL_96;
      v63 = *(_DWORD *)(v60 + 16);
      if ((v63 & 0x20) != 0)
        v63 = *(_DWORD *)(v60 + 32);
      v64 = *(_DWORD *)(v62 - 8);
      v65 = v64 & (v63 >> 8);
      v66 = *(_QWORD *)(v62 + 16 * v65);
      if (v66 != v60)
      {
        v67 = 1;
        while (v66)
        {
          v65 = ((_DWORD)v65 + v67) & v64;
          v66 = *(_QWORD *)(v62 + 16 * v65);
          ++v67;
          if (v66 == v60)
            goto LABEL_67;
        }
LABEL_96:
        v230 = (WTF::StringImpl *)1;
        goto LABEL_69;
      }
LABEL_67:
      v68 = v62 + 16 * v65;
      v70 = *(WTF::StringImpl **)(v68 + 8);
      v15 = (WTF::AtomStringImpl *)(v68 + 8);
      v69 = v70;
      v230 = (WTF::StringImpl *)1;
      if ((v70 & 1) != 0)
        v230 = v69;
      else
        JSC::SymbolTableEntry::copySlow((unint64_t *)&v230, (_QWORD **)v15);
LABEL_69:
      v71 = __ldxr(v59);
      if (v71 != 1)
      {
        __clrex();
LABEL_73:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v12 + 20), 0, (uint64_t)v16, v17, v18, v19, v20, v21);
        goto LABEL_74;
      }
      if (__stlxr(0, v59))
        goto LABEL_73;
LABEL_74:
      v72 = (char)v230;
      if ((v230 & 1) != 0)
        v73 = &v230;
      else
        v73 = v230;
      if ((*v73 & 0x30) != 0x20)
      {
        v229 = 0;
        v74 = (WTF::StringImpl *)*v56;
        v75 = *(_DWORD *)(*v56 + 16);
        if ((v75 & 0x20) == 0)
        {
          if ((v75 & 0x10) != 0)
          {
            *(_DWORD *)v74 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)v225, *v56, v16, v17, v18, v19, v20, v21, &v232);
            v74 = v232;
          }
          v76 = *(_DWORD *)v74;
          *(_DWORD *)v74 += 2;
          if (v76)
          {
LABEL_82:
            *(_DWORD *)v74 = v76;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v74, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
          }
          JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>((unint64_t)v22, a2, (uint64_t)v74, 10, 0, 1, &v229, v21, v23);
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::~StringImpl(v74, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
          if (*((_DWORD *)v231 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
          {
            if ((v230 & 1) == 0)
            {
              v177 = &v230;
              goto LABEL_173;
            }
            return;
          }
          v72 = (char)v230;
          goto LABEL_87;
        }
        v76 = *(_DWORD *)v74 + 2;
        goto LABEL_82;
      }
LABEL_87:
      if ((v72 & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v230, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      v77 = v56 + 2;
      v56 = v55;
      if (v77 != v55)
      {
        v56 = v77;
        while (*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v55)
          {
            v56 = v55;
            break;
          }
        }
      }
      if (v56 == v58)
        goto LABEL_102;
    }
    __clrex();
LABEL_59:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
    goto LABEL_60;
  }
LABEL_102:
  v94 = *(_QWORD *)(a3 + 80);
  v95 = *(unsigned int **)(v94 + 128);
  if (!v95 || (v226 = *v95, !(_DWORD)v226))
  {
LABEL_103:
    v96 = (unint64_t)v224;
    if ((*((_WORD *)v224 + 104) & 0x1000) == 0)
      goto LABEL_104;
    v127 = JSC::JSGlobalObject::moduleLoader(a2);
    v134 = (JSC::Structure *)JSC::identifierToJSValue(v228, (JSC::VM **)v224 + 4, v128, v129, v130, v131, v132, v133);
    ImportMetaProperties = JSC::JSModuleLoader::createImportMetaProperties(v127, a2, v134, (uint64_t)v224, v223, v135, v136, v137);
    if (!*((_DWORD *)v231 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v231, v138, v139, v140, v141, v142, v143, v144))
    {
      LOBYTE(v232) = 0;
      JSC::Symbols::metaPrivateName[0] += 2;
      JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>((unint64_t)v22, a2, (uint64_t)JSC::Symbols::metaPrivateName, ImportMetaProperties, 0, 1, &v232, v144, v146);
      if (JSC::Symbols::metaPrivateName[0] == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::metaPrivateName, v147, v148, v149, v150, v151, v152, v21);
        WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
      }
      else
      {
        JSC::Symbols::metaPrivateName[0] -= 2;
      }
      v96 = (unint64_t)v224;
      if (!*((_DWORD *)v231 + 20)
        || !JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v147, v148, v149, v150, v151, v152, v21))
      {
LABEL_104:
        v97 = *(_QWORD *)(a2 + 56);
        v98 = *(_QWORD *)(v96 + 104);
        if (!v98
          || (LOBYTE(v232) = 0,
              JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>((unint64_t)v22, a2, *(_QWORD *)(*(_QWORD *)(v97 + 41952) + 112), v98, 0, 1, &v232, v21, v23), !*(_DWORD *)(v97 + 80))|| !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v97, v185, v186, v187, v188, v189, v190, v191))
        {
          *(_QWORD *)(v96 + 112) = v22;
          if (v22)
          {
            if (*(_DWORD *)(v97 + 760) >= *(unsigned __int8 *)(v96 + 7))
              JSC::Heap::writeBarrierSlowPath(v97 + 192, v96);
          }
        }
      }
    }
    return;
  }
  v99 = 0;
  v100 = (unsigned __int8 *)(v12 + 20);
  v101 = (uint64_t *)(a3 + 40);
  while (1)
  {
    v102 = *(_DWORD **)(v94 + 128);
    if (*v102 <= v99)
    {
      __break(0xC471u);
      JUMPOUT(0x198A28B8CLL);
    }
    v103 = *(_QWORD *)&v102[2 * v99 + 2];
    v104 = *(_QWORD *)(v103 + 72);
    if (__ldaxr(v100))
    {
      __clrex();
LABEL_122:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
      goto LABEL_123;
    }
    if (__stxr(1u, v100))
      goto LABEL_122;
LABEL_123:
    v106 = *(_QWORD *)(v12 + 8);
    if (!v106)
      goto LABEL_148;
    v107 = *(_DWORD *)(v104 + 16);
    if ((v107 & 0x20) != 0)
      v107 = *(_DWORD *)(v104 + 32);
    v108 = *(_DWORD *)(v106 - 8);
    v109 = v108 & (v107 >> 8);
    v110 = *(_QWORD *)(v106 + 16 * v109);
    if (v110 != v104)
    {
      v111 = 1;
      while (v110)
      {
        v109 = ((_DWORD)v109 + v111) & v108;
        v110 = *(_QWORD *)(v106 + 16 * v109);
        ++v111;
        if (v110 == v104)
          goto LABEL_130;
      }
LABEL_148:
      v113 = 1;
LABEL_131:
      v232 = (WTF::StringImpl *)v113;
      goto LABEL_132;
    }
LABEL_130:
    v112 = v106 + 16 * v109;
    v114 = *(_QWORD *)(v112 + 8);
    v15 = (WTF::AtomStringImpl *)(v112 + 8);
    v113 = v114;
    v232 = (WTF::StringImpl *)1;
    if ((v114 & 1) != 0)
      goto LABEL_131;
    JSC::SymbolTableEntry::copySlow((unint64_t *)&v232, (_QWORD **)v15);
LABEL_132:
    v115 = __ldxr(v100);
    if (v115 != 1)
    {
      __clrex();
LABEL_136:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v12 + 20), 0, (uint64_t)v16, v17, v18, v19, v20, v21);
      goto LABEL_137;
    }
    if (__stlxr(0, v100))
      goto LABEL_136;
LABEL_137:
    v116 = (char)v232;
    v117 = &v232;
    if ((v232 & 1) == 0)
      v117 = v232;
    if ((*v117 & 0x30) == 0x20)
      goto LABEL_144;
    if (*((_QWORD *)v228 + 11646) || *((_QWORD *)v228 + 11660))
    {
      v210 = *v101;
      if (*v101)
      {
        v211 = *(_DWORD *)(v210 + 112);
        if (!v211)
        {
          JSC::SourceProvider::getID(*v101);
          v211 = *(_DWORD *)(v210 + 112);
        }
      }
      else
      {
        v211 = 1;
      }
      JSC::FunctionHasExecutedCache::insertUnexecutedRange((JSC *)((char *)v228 + 93272), v211, *(_DWORD *)(v103 + 16) & 0x7FFFFFFF, *(_DWORD *)(v103 + 40) & 0x7FFFFFFF, v18, v19, v20, v21);
    }
    v118 = JSC::UnlinkedFunctionExecutable::link(v103, (uint64_t)v228, a3, (uint64_t)v101, 0, 0, 0, v21, v23, v24, v25);
    v124 = JSC::JSFunction::create((uint64_t)v228, v118, v22, v119, v120, v121, v122, v123);
    LOBYTE(v230) = 0;
    JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>((unint64_t)v22, a2, *(_QWORD *)(v103 + 72), v124, 0, 1, &v230, v125, v126);
    if (*((_DWORD *)v231 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v231, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
        break;
    }
    v116 = (char)v232;
LABEL_144:
    if ((v116 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v232, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
    if (++v99 == v226)
      goto LABEL_103;
  }
  if ((v232 & 1) == 0)
  {
    v177 = &v232;
LABEL_173:
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)v177, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  }
}

unint64_t JSC::identifierToJSValue(JSC *this, JSC::VM **a2, const JSC::Identifier *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a2 && (*((_BYTE *)*a2 + 16) & 0x20) != 0)
    return JSC::Symbol::create(this, *a2, a3, a4, a5, a6, a7, a8);
  else
    return JSC::jsString(this, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSModuleRecord::evaluate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  unint64_t v12;
  double v13;

  v9 = *(_QWORD *)(a1 + 200);
  if (!v9)
    return 10;
  result = JSC::Interpreter::executeModuleProgram(*(_QWORD *)(a2 + 56) + 90560, (WTF::Thread *)a1, v9, a2, *(JSC::JSObject **)(a1 + 112), a3, a4, a8);
  v12 = *(_QWORD *)(a1 + 16);
  if (!(v12 >> 49))
    goto LABEL_6;
  v13 = (double)(int)v12;
  if (v12 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  if (v13 == 4294967290.0)
LABEL_6:
    *(_QWORD *)(a1 + 200) = 0;
  return result;
}

void JSC::JSMicrotask::~JSMicrotask(JSC::JSMicrotask *this)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  JSC::JSMicrotask::~JSMicrotask(this);
  WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v1 = *((_QWORD *)this + 7);
  if (v1)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *((_QWORD *)this + 7) = 0;
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = (uint64_t *)(v6 - 16);
    v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v9 = *(uint64_t **)(v6 - 8);
    if (v9)
    {
      v10 = *v7;
      *v9 = *v7;
      *(_QWORD *)(v10 + 8) = v9;
      *v7 = 0;
      v7[1] = 0;
    }
    *v7 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;
    *((_QWORD *)this + 6) = 0;
  }
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = (uint64_t *)(v11 - 16);
    v13 = *(_QWORD *)(((v11 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = *(uint64_t **)(v11 - 8);
    if (v14)
    {
      v15 = *v12;
      *v14 = *v12;
      *(_QWORD *)(v15 + 8) = v14;
      *v12 = 0;
      v12[1] = 0;
    }
    *v12 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;
    *((_QWORD *)this + 5) = 0;
  }
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    v17 = (uint64_t *)(v16 - 16);
    v18 = *(_QWORD *)(((v16 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v19 = *(uint64_t **)(v16 - 8);
    if (v19)
    {
      v20 = *v17;
      *v19 = *v17;
      *(_QWORD *)(v20 + 8) = v19;
      *v17 = 0;
      v17[1] = 0;
    }
    *v17 = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;
    *((_QWORD *)this + 4) = 0;
  }
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    v22 = (uint64_t *)(v21 - 16);
    v23 = *(_QWORD *)(((v21 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v24 = *(uint64_t **)(v21 - 8);
    if (v24)
    {
      v25 = *v22;
      *v24 = *v22;
      *(_QWORD *)(v25 + 8) = v24;
      *v22 = 0;
      v22[1] = 0;
    }
    *v22 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t WTF::dataLog<char [18],JSC::Identifier,char [2]>(JSC::Identifier *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "loader [parsing] ");
  JSC::Identifier::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [15],JSC::Identifier,char [2]>(JSC::Identifier *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Loader [link] ");
  JSC::Identifier::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,false>(unint64_t a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  const WTF::StringImpl **v31;
  const WTF::StringImpl **v32;
  const WTF::StringImpl *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl **v56;
  WTF *v57;
  WTF *v58;
  WTF::StringImpl **v59;
  const WTF::StringImpl *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned __int8 *v75;
  unsigned __int16 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  unsigned __int16 *v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned __int16 *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  const WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  BOOL v117;
  const WTF::StringImpl *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const WTF::StringImpl *v151;
  uint64_t v152;
  const WTF::StringImpl **v153;
  const WTF::StringImpl *v154;
  WTF::StringImpl **v155;
  const WTF::StringImpl *v156;
  const WTF::StringImpl *v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int16 *v162;
  unsigned __int16 *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  _BOOL4 v167;
  unsigned __int16 *v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned __int8 *v172;
  unsigned __int16 *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned __int16 *v187;
  unsigned __int16 *v188;
  unsigned int v189;
  unsigned int v190;
  BOOL v191;
  unsigned __int16 *v192;
  unsigned __int8 *v193;
  unsigned int v194;
  unsigned int v195;
  unsigned __int8 *v196;
  unsigned __int16 *v197;
  unsigned int v198;
  unsigned int v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  WTF::StringImpl **v205;
  WTF::StringImpl *v206;
  int v207;
  const WTF::StringImpl **v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  WTF::StringImpl **v247;
  WTF *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const WTF::StringImpl **v255;
  BOOL v257;
  uint64_t v258;
  unint64_t v259;
  const WTF::StringImpl **v260;
  WTF::AtomStringImpl *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF *v267;
  WTF::StringImpl *v268;
  const WTF::StringImpl *v269;
  WTF::StringImpl **v270;
  WTF::StringImpl **v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  _OWORD *v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  unsigned __int16 *v280;
  unsigned __int16 *v281;
  unsigned int v282;
  unsigned int v283;
  BOOL v284;
  unsigned __int16 *v285;
  unsigned __int8 *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned __int8 *v289;
  unsigned __int16 *v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  WTF::StringImpl *v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int64_t v354;
  int64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  const WTF::StringImpl *v359;
  unint64_t v360;
  unint64_t v361;
  WTF *v362;
  WTF::StringImpl *v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  const WTF::StringImpl **v404;
  const WTF::StringImpl *v405;
  const WTF::StringImpl *v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const WTF::StringImpl *v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v415;
  unsigned __int16 *v416;
  unsigned __int16 *v417;
  unsigned int v418;
  unsigned int v419;
  BOOL v420;
  int v421;
  unsigned __int16 *v422;
  unsigned __int8 *v423;
  unsigned int v424;
  unsigned int v425;
  unsigned __int8 *v426;
  unsigned __int16 *v427;
  unsigned int v428;
  unsigned int v429;
  unsigned __int8 *v430;
  unsigned __int8 *v431;
  unsigned int v432;
  unsigned int v433;
  int v434;
  const WTF::StringImpl *v435;
  WTF::StringImpl *v436;
  uint64_t v437;
  WTF::StringImpl *v438;
  unint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  __int128 *v455;
  const WTF::StringImpl *v456;
  WTF::StringImpl *v457;
  uint64_t v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  const WTF::StringImpl *v465;
  uint64_t v466;
  unint64_t v467;
  WTF *v468;
  WTF::StringImpl *v469;
  uint64_t v470;
  WTF::StringImpl *v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  unint64_t v491;
  void *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  WTF::AtomStringImpl *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  WTF *v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  WTF::StringImpl *v563;
  const WTF::StringImpl *v564;
  unint64_t v565;
  WTF::StringImpl *v566;
  _OWORD *v567;
  int v568;
  unsigned int v569;
  unsigned int v570;
  uint64_t v571;
  unsigned __int16 *v572;
  unsigned __int16 *v573;
  unsigned int v574;
  unsigned int v575;
  BOOL v576;
  unsigned __int16 *v577;
  unsigned __int8 *v578;
  unsigned int v579;
  unsigned int v580;
  unsigned __int8 *v581;
  unsigned __int16 *v582;
  unsigned int v583;
  unsigned int v584;
  unsigned __int8 *v585;
  unsigned __int8 *v586;
  unsigned int v587;
  unsigned int v588;
  int v589;
  unint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  WTF::StringImpl *v608;
  WTF::StringImpl *v609;
  WTF::StringImpl *v610;
  unint64_t v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  void *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  WTF::StringImpl *v628;
  WTF::StringImpl *v629;
  unint64_t v630;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  char v646;
  uint64_t v647;
  const WTF::StringImpl *v648;
  int64_t v649;
  const WTF::StringImpl *v650;
  int64_t v651;
  uint64_t v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;

  v646 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v648 = (const WTF::StringImpl *)(v9 - 4);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (uint64_t)v9 - v11;
    v13 = (uint64_t)((uint64_t)v9 - v11) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v248 = *(v9 - 4);
        v247 = v9 - 4;
        if ((WTF::codePointCompare(v248, *(const WTF::StringImpl **)v11, a3) & 0x80000000) != 0)
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](v11, v247, v249, v250, v251, v252, v253, v254);
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)v11, (WTF **)(v11 + 32), v648);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)v11, (WTF **)(v11 + 32), (const WTF::StringImpl *)(v11 + 64), (WTF::StringImpl **)v648);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,0>((const WTF::StringImpl **)v11, (WTF **)(v11 + 32), (const WTF::StringImpl *)(v11 + 64), (WTF::StringImpl **)(v11 + 96), (WTF::StringImpl **)v648);
        return;
      default:
        if (v12 <= 767)
        {
          v255 = (const WTF::StringImpl **)(v11 + 32);
          v257 = (const WTF::StringImpl **)v11 == v9 || v255 == v9;
          if ((v646 & 1) != 0)
          {
            if (v257)
              return;
            v258 = 0;
            v259 = v11;
LABEL_311:
            v260 = v255;
            if ((WTF::codePointCompare(*(WTF **)(v259 + 32), *(const WTF::StringImpl **)v259, a3) & 0x80000000) == 0)
              goto LABEL_383;
            v267 = *v255;
            *v255 = 0;
            v656 = *(_OWORD *)(v259 + 40);
            v268 = *(WTF::StringImpl **)(v259 + 56);
            *(_QWORD *)(v259 + 56) = 0;
            v269 = *(const WTF::StringImpl **)v259;
            if (v267)
            {
              v270 = v255;
              while (1)
              {
                v271 = v270;
                v270 = (WTF::StringImpl **)v259;
                *(_QWORD *)v259 = 0;
                v272 = *v271;
                *v271 = v269;
                if (v272)
                {
                  if (*(_DWORD *)v272 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v272, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                    WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
                  }
                  else
                  {
                    *(_DWORD *)v272 -= 2;
                  }
                }
                *(_OWORD *)(v271 + 1) = *(_OWORD *)(v259 + 8);
                v273 = *(WTF::StringImpl **)(v259 + 24);
                *(_QWORD *)(v259 + 24) = 0;
                v274 = v271[3];
                v271[3] = v273;
                if (v274)
                {
                  if (*(_DWORD *)v274 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v274, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                    WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
                  }
                  else
                  {
                    *(_DWORD *)v274 -= 2;
                  }
                }
                v275 = (_OWORD *)(v259 + 8);
                if (v259 == a1)
                {
                  v270 = (WTF::StringImpl **)a1;
                  goto LABEL_377;
                }
                v259 -= 32;
                v269 = *(v270 - 4);
                if (!v269)
                  goto LABEL_377;
                v276 = *((_DWORD *)v269 + 4);
                v277 = *((_DWORD *)v267 + 1);
                v278 = *((_DWORD *)v269 + 1);
                if (v278 >= v277)
                  v279 = v277;
                else
                  v279 = v278;
                if ((*((_BYTE *)v267 + 16) & 4) != 0)
                {
                  if ((v276 & 4) != 0)
                  {
                    if ((_DWORD)v279)
                    {
                      v293 = (unsigned __int8 *)*((_QWORD *)v269 + 1);
                      v294 = (unsigned __int8 *)*((_QWORD *)v267 + 1);
                      do
                      {
                        v295 = *v294;
                        v296 = *v293;
                        v284 = v295 > v296;
                        if (v295 != v296)
                          goto LABEL_352;
                        ++v294;
                        ++v293;
                      }
                      while (--v279);
                    }
                  }
                  else if ((_DWORD)v279)
                  {
                    v285 = (unsigned __int16 *)*((_QWORD *)v269 + 1);
                    v286 = (unsigned __int8 *)*((_QWORD *)v267 + 1);
                    while (1)
                    {
                      v287 = *v286;
                      v288 = *v285;
                      if (v288 != v287)
                        break;
                      ++v286;
                      ++v285;
                      if (!--v279)
                        goto LABEL_347;
                    }
                    if (v288 < v287)
                      goto LABEL_377;
                    goto LABEL_358;
                  }
                }
                else if ((v276 & 4) != 0)
                {
                  if ((_DWORD)v279)
                  {
                    v289 = (unsigned __int8 *)*((_QWORD *)v269 + 1);
                    v290 = (unsigned __int16 *)*((_QWORD *)v267 + 1);
                    do
                    {
                      v291 = *v290;
                      v292 = *v289;
                      v284 = v291 > v292;
                      if (v291 != v292)
                        goto LABEL_352;
                      ++v290;
                      ++v289;
                    }
                    while (--v279);
                  }
                }
                else if ((_DWORD)v279)
                {
                  v280 = (unsigned __int16 *)*((_QWORD *)v269 + 1);
                  v281 = (unsigned __int16 *)*((_QWORD *)v267 + 1);
                  while (1)
                  {
                    v282 = *v281;
                    v283 = *v280;
                    v284 = v282 > v283;
                    if (v282 != v283)
                      break;
                    ++v281;
                    ++v280;
                    if (!--v279)
                      goto LABEL_347;
                  }
LABEL_352:
                  if (v284)
                    goto LABEL_377;
LABEL_358:
                  v297 = -1;
                  goto LABEL_359;
                }
LABEL_347:
                if (v278 < v277)
                  v297 = 1;
                else
                  v297 = -1;
                if (v277 == v278)
                  goto LABEL_377;
LABEL_359:
                if ((v297 & 0x80000000) == 0)
                  goto LABEL_377;
              }
            }
            v314 = v258;
            while (1)
            {
              v315 = v314;
              v316 = a1 + v314;
              *(_QWORD *)v316 = 0;
              v317 = *(WTF::StringImpl **)(a1 + v314 + 32);
              *(_QWORD *)(v316 + 32) = v269;
              if (v317)
              {
                if (*(_DWORD *)v317 == 2)
                {
                  WTF::StringImpl::~StringImpl(v317, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                  WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
                }
                else
                {
                  *(_DWORD *)v317 -= 2;
                }
              }
              *(_OWORD *)(v316 + 40) = *(_OWORD *)(v316 + 8);
              v318 = *(_QWORD *)(v316 + 24);
              *(_QWORD *)(v316 + 24) = 0;
              v319 = *(WTF::StringImpl **)(v316 + 56);
              *(_QWORD *)(v316 + 56) = v318;
              if (v319)
              {
                if (*(_DWORD *)v319 == 2)
                {
                  WTF::StringImpl::~StringImpl(v319, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                  WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
                  if (!v315)
                  {
LABEL_374:
                    v259 = a1;
                    goto LABEL_376;
                  }
                  goto LABEL_369;
                }
                *(_DWORD *)v319 -= 2;
              }
              if (!v315)
                goto LABEL_374;
LABEL_369:
              v269 = *(const WTF::StringImpl **)(a1 + v315 - 32);
              if (!v269)
                goto LABEL_376;
              v259 -= 32;
              v314 = v315 - 32;
              if (!*((_DWORD *)v269 + 1))
              {
                v259 = a1 + v315;
LABEL_376:
                v275 = (_OWORD *)(a1 + v315 + 8);
                v270 = (WTF::StringImpl **)v259;
LABEL_377:
                v336 = *v270;
                *v270 = v267;
                if (v336)
                {
                  if (*(_DWORD *)v336 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v336, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                    WTF::fastFree(v338, v339, v340, v341, v342, v343, v344, v345);
                  }
                  else
                  {
                    *(_DWORD *)v336 -= 2;
                  }
                }
                *v275 = v656;
                v337 = v270[3];
                v270[3] = v268;
                if (v337)
                {
                  if (*(_DWORD *)v337 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v337, v261, (uint64_t)a3, v262, v263, v264, v265, v266);
                    WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
                  }
                  else
                  {
                    *(_DWORD *)v337 -= 2;
                  }
                }
LABEL_383:
                v255 = v260 + 4;
                v258 += 32;
                v259 = (unint64_t)v260;
                if (v260 + 4 == v9)
                  return;
                goto LABEL_311;
              }
            }
          }
          if (v257)
            return;
          v547 = 0;
          v548 = v11 + 24;
          v549 = -2;
          v550 = 1;
          v551 = v11;
          while (1)
          {
            v552 = v550;
            if ((WTF::codePointCompare(*v255, *(const WTF::StringImpl **)v551, a3) & 0x80000000) != 0)
            {
              v559 = *v255;
              *v255 = 0;
              v659 = *(_OWORD *)(v551 + 40);
              v560 = *(_QWORD *)(v551 + 56);
              *(_QWORD *)(v551 + 56) = 0;
              v561 = *(_QWORD *)(a1 + 32 * v547);
              v652 = v560;
              if (v559)
              {
                while (1)
                {
                  v562 = a1 + 32 * v547;
                  *(_QWORD *)v562 = 0;
                  v563 = *v255;
                  *v255 = (const WTF::StringImpl *)v561;
                  if (v563)
                  {
                    if (*(_DWORD *)v563 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v563, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                      WTF::fastFree(v590, v591, v592, v593, v594, v595, v596, v597);
                    }
                    else
                    {
                      *(_DWORD *)v563 -= 2;
                    }
                  }
                  *(_OWORD *)(v255 + 1) = *(_OWORD *)(v562 + 8);
                  v565 = v562 + 24;
                  v564 = *(const WTF::StringImpl **)(v562 + 24);
                  *(_QWORD *)(v562 + 24) = 0;
                  v566 = v255[3];
                  v255[3] = v564;
                  if (v566)
                  {
                    if (*(_DWORD *)v566 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v566, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                      WTF::fastFree(v598, v599, v600, v601, v602, v603, v604, v605);
                    }
                    else
                    {
                      *(_DWORD *)v566 -= 2;
                    }
                  }
                  if (v547 == -1)
                    goto LABEL_603;
                  v255 = (const WTF::StringImpl **)(a1 + 32 * v547);
                  v567 = (_OWORD *)(v562 + 8);
                  --v547;
                  v561 = *(_QWORD *)(a1 + 32 * v547);
                  if (!v561)
                    goto LABEL_592;
                  v568 = *(_DWORD *)(v561 + 16);
                  v569 = *((_DWORD *)v559 + 1);
                  v570 = *(_DWORD *)(v561 + 4);
                  if (v570 >= v569)
                    v571 = v569;
                  else
                    v571 = v570;
                  if ((*((_BYTE *)v559 + 16) & 4) != 0)
                  {
                    if ((v568 & 4) != 0)
                    {
                      if ((_DWORD)v571)
                      {
                        v585 = *(unsigned __int8 **)(v561 + 8);
                        v586 = (unsigned __int8 *)*((_QWORD *)v559 + 1);
                        do
                        {
                          v587 = *v586;
                          v588 = *v585;
                          v576 = v587 > v588;
                          if (v587 != v588)
                            goto LABEL_569;
                          ++v586;
                          ++v585;
                        }
                        while (--v571);
                      }
                    }
                    else if ((_DWORD)v571)
                    {
                      v577 = *(unsigned __int16 **)(v561 + 8);
                      v578 = (unsigned __int8 *)*((_QWORD *)v559 + 1);
                      while (1)
                      {
                        v579 = *v578;
                        v580 = *v577;
                        if (v580 != v579)
                          break;
                        ++v578;
                        ++v577;
                        if (!--v571)
                          goto LABEL_564;
                      }
                      if (v580 < v579)
                        goto LABEL_592;
                      goto LABEL_575;
                    }
                  }
                  else if ((v568 & 4) != 0)
                  {
                    if ((_DWORD)v571)
                    {
                      v581 = *(unsigned __int8 **)(v561 + 8);
                      v582 = (unsigned __int16 *)*((_QWORD *)v559 + 1);
                      do
                      {
                        v583 = *v582;
                        v584 = *v581;
                        v576 = v583 > v584;
                        if (v583 != v584)
                          goto LABEL_569;
                        ++v582;
                        ++v581;
                      }
                      while (--v571);
                    }
                  }
                  else if ((_DWORD)v571)
                  {
                    v572 = *(unsigned __int16 **)(v561 + 8);
                    v573 = (unsigned __int16 *)*((_QWORD *)v559 + 1);
                    while (1)
                    {
                      v574 = *v573;
                      v575 = *v572;
                      v576 = v574 > v575;
                      if (v574 != v575)
                        break;
                      ++v573;
                      ++v572;
                      if (!--v571)
                        goto LABEL_564;
                    }
LABEL_569:
                    if (v576)
                      goto LABEL_592;
LABEL_575:
                    v589 = -1;
                    goto LABEL_576;
                  }
LABEL_564:
                  if (v570 < v569)
                    v589 = 1;
                  else
                    v589 = -1;
                  if (v569 == v570)
                    goto LABEL_592;
LABEL_576:
                  if ((v589 & 0x80000000) == 0)
                    goto LABEL_592;
                }
              }
              v606 = v549;
              v607 = v548;
              do
              {
                v565 = v607;
                *(_QWORD *)(v607 - 24) = 0;
                v608 = *(WTF::StringImpl **)(v607 + 8);
                *(_QWORD *)(v607 + 8) = v561;
                if (v608)
                {
                  if (*(_DWORD *)v608 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v608, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                    WTF::fastFree(v612, v613, v614, v615, v616, v617, v618, v619);
                  }
                  else
                  {
                    *(_DWORD *)v608 -= 2;
                  }
                }
                *(_OWORD *)(v565 + 16) = *(_OWORD *)(v565 - 16);
                v609 = *(WTF::StringImpl **)v565;
                *(_QWORD *)v565 = 0;
                v610 = *(WTF::StringImpl **)(v565 + 32);
                *(_QWORD *)(v565 + 32) = v609;
                if (v610)
                {
                  if (*(_DWORD *)v610 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v610, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                    WTF::fastFree(v620, v621, v622, v623, v624, v625, v626, v627);
                  }
                  else
                  {
                    *(_DWORD *)v610 -= 2;
                  }
                }
                if (__CFADD__(v606++, 1))
                  goto LABEL_603;
                v561 = *(_QWORD *)(v565 - 56);
                if (!v561)
                  break;
                v607 = v565 - 32;
              }
              while (*(_DWORD *)(v561 + 4));
              v255 = (const WTF::StringImpl **)(v565 - 24);
              v567 = (_OWORD *)(v565 - 16);
LABEL_592:
              v628 = *v255;
              *v255 = v559;
              if (v628)
              {
                if (*(_DWORD *)v628 == 2)
                {
                  WTF::StringImpl::~StringImpl(v628, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                  WTF::fastFree(v630, v631, v632, v633, v634, v635, v636, v637);
                }
                else
                {
                  *(_DWORD *)v628 -= 2;
                }
              }
              *v567 = v659;
              v629 = *(WTF::StringImpl **)v565;
              *(_QWORD *)v565 = v652;
              if (v629)
              {
                if (*(_DWORD *)v629 == 2)
                {
                  WTF::StringImpl::~StringImpl(v629, v553, (uint64_t)a3, v554, v555, v556, v557, v558);
                  WTF::fastFree(v638, v639, v640, v641, v642, v643, v644, v645);
                }
                else
                {
                  *(_DWORD *)v629 -= 2;
                }
              }
            }
            v551 = a1 + 32 * v552;
            v550 = v552 + 1;
            v255 = (const WTF::StringImpl **)(a1 + 32 * (v552 + 1));
            v548 += 32;
            --v549;
            v547 = v552;
            if (v255 == v9)
              return;
          }
        }
        if (!v8)
        {
          if ((const WTF::StringImpl **)v11 == v9)
            return;
          v354 = (v13 - 2) >> 1;
          v651 = v354;
          do
          {
            v355 = v354;
            if (v651 >= v354)
            {
              v356 = (2 * v354) | 1;
              v357 = a1 + 32 * v356;
              if (2 * v354 + 2 < (uint64_t)v13
                && (int)WTF::codePointCompare(*(WTF **)v357, *(const WTF::StringImpl **)(v357 + 32), a3) < 0)
              {
                v357 += 32;
                v356 = 2 * v355 + 2;
              }
              v358 = a1 + 32 * v355;
              if ((WTF::codePointCompare(*(WTF **)v357, *(const WTF::StringImpl **)v358, a3) & 0x80000000) == 0)
              {
                v359 = *(const WTF::StringImpl **)v358;
                *(_QWORD *)v358 = 0;
                v360 = a1 + 32 * v355;
                v657 = *(_OWORD *)(v360 + 8);
                v647 = *(_QWORD *)(v360 + 24);
                v649 = v355;
                *(_QWORD *)(v360 + 24) = 0;
                do
                {
                  v361 = v357;
                  v362 = *(WTF **)v357;
                  *(_QWORD *)v357 = 0;
                  v363 = *(WTF::StringImpl **)v358;
                  *(_QWORD *)v358 = v362;
                  if (v363)
                  {
                    if (*(_DWORD *)v363 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v363, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
                    }
                    else
                    {
                      *(_DWORD *)v363 -= 2;
                    }
                  }
                  *(_OWORD *)(v358 + 8) = *(_OWORD *)(v357 + 8);
                  v364 = *(_QWORD *)(v357 + 24);
                  *(_QWORD *)(v357 + 24) = 0;
                  v365 = *(WTF::StringImpl **)(v358 + 24);
                  *(_QWORD *)(v358 + 24) = v364;
                  if (v365)
                  {
                    if (*(_DWORD *)v365 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v365, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
                    }
                    else
                    {
                      *(_DWORD *)v365 -= 2;
                    }
                  }
                  if (v651 < v356)
                    break;
                  v366 = (2 * v356) | 1;
                  v357 = a1 + 32 * v366;
                  v367 = 2 * v356 + 2;
                  if (v367 < (uint64_t)v13
                    && (int)WTF::codePointCompare(*(WTF **)v357, *(const WTF::StringImpl **)(v357 + 32), a3) < 0)
                  {
                    v357 += 32;
                    v366 = v367;
                  }
                  v358 = v361;
                  v356 = v366;
                }
                while ((WTF::codePointCompare(*(WTF **)v357, v359, a3) & 0x80000000) == 0);
                v384 = *(WTF::StringImpl **)v361;
                *(_QWORD *)v361 = v359;
                if (v384)
                {
                  if (*(_DWORD *)v384 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v384, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v386, v387, v388, v389, v390, v391, v392, v393);
                  }
                  else
                  {
                    *(_DWORD *)v384 -= 2;
                  }
                }
                *(_OWORD *)(v361 + 8) = v657;
                v385 = *(WTF::StringImpl **)(v361 + 24);
                *(_QWORD *)(v361 + 24) = v647;
                v355 = v649;
                if (v385)
                {
                  if (*(_DWORD *)v385 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v385, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v394, v395, v396, v397, v398, v399, v400, v401);
                  }
                  else
                  {
                    *(_DWORD *)v385 -= 2;
                  }
                }
              }
            }
            v354 = v355 - 1;
          }
          while (v355);
          v402 = (unint64_t)v12 >> 5;
          while (1)
          {
            v403 = 0;
            v404 = v9;
            v405 = *(const WTF::StringImpl **)a1;
            *(_QWORD *)a1 = 0;
            v653 = *(_OWORD *)(a1 + 8);
            v406 = *(const WTF::StringImpl **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = 0;
            v407 = a1;
            do
            {
              v408 = v407;
              v407 += 32 * v403 + 32;
              v409 = 2 * v403;
              v403 = (2 * v403) | 1;
              if (v409 + 2 >= v402)
                goto LABEL_468;
              v410 = *(_QWORD *)(v407 + 32);
              v411 = *(const WTF::StringImpl **)v407;
              if (*(_QWORD *)v407)
              {
                if (!v410)
                {
                  v421 = *((_DWORD *)v411 + 1) != 0;
                  goto LABEL_466;
                }
                v412 = *(_DWORD *)(v410 + 16);
                v413 = *((_DWORD *)v411 + 1);
                v414 = *(_DWORD *)(v410 + 4);
                if (v414 >= v413)
                  v415 = v413;
                else
                  v415 = v414;
                if ((*((_BYTE *)v411 + 16) & 4) != 0)
                {
                  if ((v412 & 4) != 0)
                  {
                    if ((_DWORD)v415)
                    {
                      v430 = *(unsigned __int8 **)(v410 + 8);
                      v431 = (unsigned __int8 *)*((_QWORD *)v411 + 1);
                      do
                      {
                        v432 = *v431;
                        v433 = *v430;
                        v420 = v432 > v433;
                        if (v432 != v433)
                          goto LABEL_460;
                        ++v431;
                        ++v430;
                      }
                      while (--v415);
                    }
                  }
                  else if ((_DWORD)v415)
                  {
                    v422 = *(unsigned __int16 **)(v410 + 8);
                    v423 = (unsigned __int8 *)*((_QWORD *)v411 + 1);
                    while (1)
                    {
                      v424 = *v423;
                      v425 = *v422;
                      if (v425 != v424)
                        break;
                      ++v423;
                      ++v422;
                      if (!--v415)
                        goto LABEL_454;
                    }
                    if (v425 < v424)
                      v421 = 1;
                    else
                      v421 = -1;
                    goto LABEL_466;
                  }
                }
                else if ((v412 & 4) != 0)
                {
                  if ((_DWORD)v415)
                  {
                    v426 = *(unsigned __int8 **)(v410 + 8);
                    v427 = (unsigned __int16 *)*((_QWORD *)v411 + 1);
                    do
                    {
                      v428 = *v427;
                      v429 = *v426;
                      v420 = v428 > v429;
                      if (v428 != v429)
                        goto LABEL_460;
                      ++v427;
                      ++v426;
                    }
                    while (--v415);
                  }
                }
                else if ((_DWORD)v415)
                {
                  v416 = *(unsigned __int16 **)(v410 + 8);
                  v417 = (unsigned __int16 *)*((_QWORD *)v411 + 1);
                  while (1)
                  {
                    v418 = *v417;
                    v419 = *v416;
                    v420 = v418 > v419;
                    if (v418 != v419)
                      break;
                    ++v417;
                    ++v416;
                    if (!--v415)
                      goto LABEL_454;
                  }
LABEL_460:
                  if (v420)
                    v421 = 1;
                  else
                    v421 = -1;
                  goto LABEL_466;
                }
LABEL_454:
                if (v414 < v413)
                  v434 = 1;
                else
                  v434 = -1;
                if (v413 == v414)
                  v421 = 0;
                else
                  v421 = v434;
              }
              else if (v410)
              {
                if (*(_DWORD *)(v410 + 4))
                  v421 = -1;
                else
                  v421 = 0;
              }
              else
              {
                v421 = 0;
              }
LABEL_466:
              if (v421 < 0)
              {
                v407 += 32;
                v403 = v409 + 2;
              }
LABEL_468:
              v435 = *(const WTF::StringImpl **)v407;
              *(_QWORD *)v407 = 0;
              v436 = *(WTF::StringImpl **)v408;
              *(_QWORD *)v408 = v435;
              if (v436)
              {
                if (*(_DWORD *)v436 == 2)
                {
                  WTF::StringImpl::~StringImpl(v436, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v439, v440, v441, v442, v443, v444, v445, v446);
                }
                else
                {
                  *(_DWORD *)v436 -= 2;
                }
              }
              *(_OWORD *)(v408 + 8) = *(_OWORD *)(v407 + 8);
              v437 = *(_QWORD *)(v407 + 24);
              *(_QWORD *)(v407 + 24) = 0;
              v438 = *(WTF::StringImpl **)(v408 + 24);
              *(_QWORD *)(v408 + 24) = v437;
              if (v438)
              {
                if (*(_DWORD *)v438 == 2)
                {
                  WTF::StringImpl::~StringImpl(v438, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v447, v448, v449, v450, v451, v452, v453, v454);
                }
                else
                {
                  *(_DWORD *)v438 -= 2;
                }
              }
            }
            while (v403 <= (uint64_t)((unint64_t)(v402 - 2) >> 1));
            v455 = (__int128 *)(v407 + 8);
            v9 -= 4;
            if ((const WTF::StringImpl **)v407 != v404 - 4)
            {
              v456 = *v9;
              *v9 = 0;
              v457 = *(WTF::StringImpl **)v407;
              *(_QWORD *)v407 = v456;
              if (v457)
              {
                if (*(_DWORD *)v457 == 2)
                {
                  WTF::StringImpl::~StringImpl(v457, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v491, v492, v493, v494, v495, v496, v497, v498);
                }
                else
                {
                  *(_DWORD *)v457 -= 2;
                }
              }
              *v455 = *(_OWORD *)(v404 - 3);
              v458 = (uint64_t)*(v404 - 1);
              *(v404 - 1) = 0;
              v459 = *(WTF::StringImpl **)(v407 + 24);
              *(_QWORD *)(v407 + 24) = v458;
              if (v459)
              {
                if (*(_DWORD *)v459 == 2)
                {
                  WTF::StringImpl::~StringImpl(v459, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v499, v500, v501, v502, v503, v504, v505, v506);
                }
                else
                {
                  *(_DWORD *)v459 -= 2;
                }
              }
              v460 = *v9;
              *v9 = v405;
              if (v460)
              {
                if (*(_DWORD *)v460 == 2)
                {
                  WTF::StringImpl::~StringImpl(v460, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v507, v508, v509, v510, v511, v512, v513, v514);
                }
                else
                {
                  *(_DWORD *)v460 -= 2;
                }
              }
              *(_OWORD *)(v404 - 3) = v653;
              v461 = *(v404 - 1);
              *(v404 - 1) = v406;
              if (v461)
              {
                if (*(_DWORD *)v461 == 2)
                {
                  WTF::StringImpl::~StringImpl(v461, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v515, v516, v517, v518, v519, v520, v521, v522);
                }
                else
                {
                  *(_DWORD *)v461 -= 2;
                }
              }
              v462 = v407 + 32 - a1;
              if (v462 < 33)
                goto LABEL_516;
              v463 = (((unint64_t)v462 >> 5) - 2) >> 1;
              v464 = a1 + 32 * v463;
              if ((WTF::codePointCompare(*(WTF **)v464, *(const WTF::StringImpl **)v407, a3) & 0x80000000) == 0)
                goto LABEL_516;
              v465 = *(const WTF::StringImpl **)v407;
              *(_QWORD *)v407 = 0;
              v658 = *v455;
              v466 = *(_QWORD *)(v407 + 24);
              *(_QWORD *)(v407 + 24) = 0;
              while (2)
              {
                v467 = v464;
                v468 = *(WTF **)v464;
                *(_QWORD *)v464 = 0;
                v469 = *(WTF::StringImpl **)v407;
                *(_QWORD *)v407 = v468;
                if (v469)
                {
                  if (*(_DWORD *)v469 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v469, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
                  }
                  else
                  {
                    *(_DWORD *)v469 -= 2;
                  }
                }
                *(_OWORD *)(v407 + 8) = *(_OWORD *)(v464 + 8);
                v470 = *(_QWORD *)(v464 + 24);
                *(_QWORD *)(v464 + 24) = 0;
                v471 = *(WTF::StringImpl **)(v407 + 24);
                *(_QWORD *)(v407 + 24) = v470;
                if (v471)
                {
                  if (*(_DWORD *)v471 != 2)
                  {
                    *(_DWORD *)v471 -= 2;
                    goto LABEL_500;
                  }
                  WTF::StringImpl::~StringImpl(v471, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
                  if (!v463)
                  {
LABEL_505:
                    v488 = *(WTF::StringImpl **)v467;
                    *(_QWORD *)v467 = v465;
                    if (v488)
                    {
                      if (*(_DWORD *)v488 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v488, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v539, v540, v541, v542, v543, v544, v545, v546);
                      }
                      else
                      {
                        *(_DWORD *)v488 -= 2;
                      }
                    }
                    *(_OWORD *)(v467 + 8) = v658;
                    v489 = *(WTF::StringImpl **)(v467 + 24);
                    *(_QWORD *)(v467 + 24) = v466;
                    if (!v489)
                      goto LABEL_516;
                    goto LABEL_514;
                  }
                }
                else
                {
LABEL_500:
                  if (!v463)
                    goto LABEL_505;
                }
                v463 = (v463 - 1) >> 1;
                v464 = a1 + 32 * v463;
                v407 = v467;
                if ((WTF::codePointCompare(*(WTF **)v464, v465, a3) & 0x80000000) == 0)
                  goto LABEL_505;
                continue;
              }
            }
            v490 = *(WTF::StringImpl **)v407;
            *(_QWORD *)v407 = v405;
            if (v490)
            {
              if (*(_DWORD *)v490 == 2)
              {
                WTF::StringImpl::~StringImpl(v490, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
              }
              else
              {
                *(_DWORD *)v490 -= 2;
              }
            }
            *v455 = v653;
            v489 = *(WTF::StringImpl **)(v407 + 24);
            *(_QWORD *)(v407 + 24) = v406;
            if (!v489)
              goto LABEL_516;
LABEL_514:
            if (*(_DWORD *)v489 == 2)
            {
              WTF::StringImpl::~StringImpl(v489, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v523, v524, v525, v526, v527, v528, v529, v530);
            }
            else
            {
              *(_DWORD *)v489 -= 2;
            }
LABEL_516:
            v42 = v402-- <= 2;
            if (v42)
              return;
          }
        }
        v14 = v13 >> 1;
        v15 = v11 + 32 * (v13 >> 1);
        if ((unint64_t)v12 <= 0x1000)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)(v11 + 32 * (v13 >> 1)), (WTF **)v11, v648);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)v11, (WTF **)(v11 + 32 * (v13 >> 1)), v648);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)(v11 + 32), (WTF **)(v15 - 32), (const WTF::StringImpl *)(v9 - 8));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)(v11 + 64), (WTF **)(v11 + 32 + 32 * v14), (const WTF::StringImpl *)(v9 - 12));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)(v15 - 32), (WTF **)(v11 + 32 * (v13 >> 1)), (const WTF::StringImpl *)(v11 + 32 + 32 * v14));
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](v11, (WTF::StringImpl **)(v11 + 32 * (v13 >> 1)), v16, v17, v18, v19, v20, v21);
        }
        v8 = (const WTF::StringImpl *)((char *)v8 - 1);
        if ((v646 & 1) == 0
          && (WTF::codePointCompare(*(WTF **)(v11 - 32), *(const WTF::StringImpl **)v11, v23) & 0x80000000) == 0)
        {
          v151 = *(const WTF::StringImpl **)v11;
          *(_QWORD *)v11 = 0;
          v655 = *(_OWORD *)(v11 + 8);
          v152 = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = 0;
          v153 = (const WTF::StringImpl **)(v11 + 32);
          if ((WTF::codePointCompare(v151, *(const WTF::StringImpl **)v648, v23) & 0x80000000) != 0)
          {
            do
            {
              if (v153 == v9)
                goto LABEL_603;
              v154 = *v153;
              v153 += 4;
            }
            while ((WTF::codePointCompare(v151, v154, a3) & 0x80000000) == 0);
            v11 = (unint64_t)(v153 - 4);
          }
          else
          {
            do
            {
              v11 = (unint64_t)v153;
              if (v153 >= v9)
                break;
              v153 += 4;
            }
            while ((WTF::codePointCompare(v151, *(const WTF::StringImpl **)v11, a3) & 0x80000000) == 0);
          }
          v155 = v9;
          if (v11 < (unint64_t)v9)
          {
            v155 = v9;
            do
            {
              if (v155 == (WTF::StringImpl **)a1)
                goto LABEL_603;
              v156 = *(v155 - 4);
              v155 -= 4;
            }
            while ((WTF::codePointCompare(v151, v156, a3) & 0x80000000) != 0);
          }
          while (1)
          {
LABEL_276:
            if (v11 >= (unint64_t)v155)
            {
              v208 = (const WTF::StringImpl **)(v11 - 32);
              if (v11 - 32 != a1)
              {
                v209 = *v208;
                *v208 = 0;
                v210 = *(WTF::StringImpl **)a1;
                *(_QWORD *)a1 = v209;
                if (v210)
                {
                  if (*(_DWORD *)v210 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v210, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
                  }
                  else
                  {
                    *(_DWORD *)v210 -= 2;
                  }
                }
                *(_OWORD *)(a1 + 8) = *(_OWORD *)(v11 - 24);
                v211 = *(_QWORD *)(v11 - 8);
                *(_QWORD *)(v11 - 8) = 0;
                v212 = *(WTF::StringImpl **)(a1 + 24);
                *(_QWORD *)(a1 + 24) = v211;
                if (v212)
                {
                  if (*(_DWORD *)v212 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v212, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
                  }
                  else
                  {
                    *(_DWORD *)v212 -= 2;
                  }
                }
              }
              v213 = *v208;
              *v208 = v151;
              if (v213)
              {
                if (*(_DWORD *)v213 == 2)
                {
                  WTF::StringImpl::~StringImpl(v213, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
                }
                else
                {
                  *(_DWORD *)v213 -= 2;
                }
              }
              *(_OWORD *)(v11 - 24) = v655;
              v214 = *(WTF::StringImpl **)(v11 - 8);
              *(_QWORD *)(v11 - 8) = v152;
              if (v214)
              {
                if (*(_DWORD *)v214 == 2)
                {
                  WTF::StringImpl::~StringImpl(v214, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
                }
                else
                {
                  *(_DWORD *)v214 -= 2;
                }
              }
              goto LABEL_171;
            }
            std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](v11, v155, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v151)
            {
              while (1)
              {
                v11 += 32;
                if ((const WTF::StringImpl **)v11 == v9)
                  goto LABEL_603;
                v157 = *(const WTF::StringImpl **)v11;
                if (*(_QWORD *)v11)
                  break;
                v167 = *((_DWORD *)v151 + 1) != 0;
LABEL_227:
                if (v167 < 0)
                  goto LABEL_232;
              }
              v158 = *((_DWORD *)v157 + 4);
              v159 = *((_DWORD *)v151 + 1);
              v160 = *((_DWORD *)v157 + 1);
              if (v160 >= v159)
                v161 = v159;
              else
                v161 = v160;
              if ((*((_BYTE *)v151 + 16) & 4) != 0)
              {
                if ((v158 & 4) == 0)
                {
                  if (!(_DWORD)v161)
                    goto LABEL_217;
                  v168 = (unsigned __int16 *)*((_QWORD *)v157 + 1);
                  v169 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
                  while (1)
                  {
                    v170 = *v169;
                    v171 = *v168;
                    if (v171 != v170)
                      break;
                    ++v169;
                    ++v168;
                    if (!--v161)
                      goto LABEL_217;
                  }
                  if (v171 >= v170)
                    goto LABEL_232;
                  goto LABEL_226;
                }
                if (!(_DWORD)v161)
                {
LABEL_217:
                  if (v160 < v159)
                    v180 = 1;
                  else
                    v180 = -1;
                  if (v159 == v160)
                    v167 = 0;
                  else
                    v167 = v180;
                  goto LABEL_227;
                }
                v176 = (unsigned __int8 *)*((_QWORD *)v157 + 1);
                v177 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
                while (1)
                {
                  v178 = *v177;
                  v179 = *v176;
                  v166 = v178 > v179;
                  if (v178 != v179)
                    break;
                  ++v177;
                  ++v176;
                  if (!--v161)
                    goto LABEL_217;
                }
              }
              else if ((v158 & 4) != 0)
              {
                if (!(_DWORD)v161)
                  goto LABEL_217;
                v172 = (unsigned __int8 *)*((_QWORD *)v157 + 1);
                v173 = (unsigned __int16 *)*((_QWORD *)v151 + 1);
                while (1)
                {
                  v174 = *v173;
                  v175 = *v172;
                  v166 = v174 > v175;
                  if (v174 != v175)
                    break;
                  ++v173;
                  ++v172;
                  if (!--v161)
                    goto LABEL_217;
                }
              }
              else
              {
                if (!(_DWORD)v161)
                  goto LABEL_217;
                v162 = (unsigned __int16 *)*((_QWORD *)v157 + 1);
                v163 = (unsigned __int16 *)*((_QWORD *)v151 + 1);
                while (1)
                {
                  v164 = *v163;
                  v165 = *v162;
                  v166 = v164 > v165;
                  if (v164 != v165)
                    break;
                  ++v163;
                  ++v162;
                  if (!--v161)
                    goto LABEL_217;
                }
              }
              if (!v166)
                goto LABEL_232;
LABEL_226:
              v167 = 1;
              goto LABEL_227;
            }
            do
            {
              v11 += 32;
              if ((const WTF::StringImpl **)v11 == v9)
                goto LABEL_603;
            }
            while (!*(_QWORD *)v11 || !*(_DWORD *)(*(_QWORD *)v11 + 4));
LABEL_232:
            if (v151)
              break;
            v205 = v155 - 4;
            do
            {
              v155 = v205;
              if (v205 + 4 == (WTF::StringImpl **)a1)
                goto LABEL_603;
              v206 = *v205;
              if (!*v155)
                break;
              v207 = *((_DWORD *)v206 + 1);
              v205 = v155 - 4;
            }
            while (v207);
          }
          while (1)
          {
            if (v155 == (WTF::StringImpl **)a1)
              goto LABEL_603;
            v182 = (uint64_t)*(v155 - 4);
            v155 -= 4;
            v181 = v182;
            if (!v182)
              goto LABEL_276;
            v183 = *(_DWORD *)(v181 + 16);
            v184 = *((_DWORD *)v151 + 1);
            v185 = *(_DWORD *)(v181 + 4);
            if (v185 >= v184)
              v186 = v184;
            else
              v186 = v185;
            if ((*((_BYTE *)v151 + 16) & 4) != 0)
            {
              if ((v183 & 4) != 0)
              {
                if ((_DWORD)v186)
                {
                  v200 = *(unsigned __int8 **)(v181 + 8);
                  v201 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
                  do
                  {
                    v202 = *v201;
                    v203 = *v200;
                    v191 = v202 > v203;
                    if (v202 != v203)
                      goto LABEL_265;
                    ++v201;
                    ++v200;
                  }
                  while (--v186);
                }
              }
              else if ((_DWORD)v186)
              {
                v192 = *(unsigned __int16 **)(v181 + 8);
                v193 = (unsigned __int8 *)*((_QWORD *)v151 + 1);
                while (1)
                {
                  v194 = *v193;
                  v195 = *v192;
                  if (v195 != v194)
                    break;
                  ++v193;
                  ++v192;
                  if (!--v186)
                    goto LABEL_260;
                }
                if (v195 < v194)
                  goto LABEL_276;
                goto LABEL_269;
              }
            }
            else if ((v183 & 4) != 0)
            {
              if ((_DWORD)v186)
              {
                v196 = *(unsigned __int8 **)(v181 + 8);
                v197 = (unsigned __int16 *)*((_QWORD *)v151 + 1);
                do
                {
                  v198 = *v197;
                  v199 = *v196;
                  v191 = v198 > v199;
                  if (v198 != v199)
                    goto LABEL_265;
                  ++v197;
                  ++v196;
                }
                while (--v186);
              }
            }
            else if ((_DWORD)v186)
            {
              v187 = *(unsigned __int16 **)(v181 + 8);
              v188 = (unsigned __int16 *)*((_QWORD *)v151 + 1);
              while (1)
              {
                v189 = *v188;
                v190 = *v187;
                v191 = v189 > v190;
                if (v189 != v190)
                  break;
                ++v188;
                ++v187;
                if (!--v186)
                  goto LABEL_260;
              }
LABEL_265:
              if (v191)
                goto LABEL_276;
LABEL_269:
              v204 = -1;
              goto LABEL_270;
            }
LABEL_260:
            if (v185 < v184)
              v204 = 1;
            else
              v204 = -1;
            if (v184 == v185)
              goto LABEL_276;
LABEL_270:
            if ((v204 & 0x80000000) == 0)
              goto LABEL_276;
          }
        }
        v650 = v8;
        v29 = *(const WTF::StringImpl **)v11;
        *(_QWORD *)v11 = 0;
        v654 = *(_OWORD *)(v11 + 8);
        v30 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v11 + 24) = 0;
        v31 = (const WTF::StringImpl **)v11;
        while (1)
        {
          v32 = v31;
          v31 += 4;
          if (v31 == v9)
            goto LABEL_603;
          v33 = *v31;
          if (!*v31)
          {
            if (!v29)
              goto LABEL_55;
            if (*((_DWORD *)v29 + 1))
              v43 = -1;
            else
              v43 = 0;
            goto LABEL_54;
          }
          if (!v29)
            goto LABEL_55;
          v34 = *((_DWORD *)v29 + 4);
          v35 = *((_DWORD *)v33 + 1);
          v36 = *((_DWORD *)v29 + 1);
          v37 = v36 >= v35 ? v35 : v36;
          if ((*((_BYTE *)v33 + 16) & 4) != 0)
            break;
          if ((v34 & 4) != 0)
          {
            if ((_DWORD)v37)
            {
              v48 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
              v49 = (unsigned __int16 *)*((_QWORD *)v33 + 1);
              do
              {
                v50 = *v49;
                v51 = *v48;
                v42 = v50 > v51;
                if (v50 != v51)
                  goto LABEL_49;
                ++v49;
                ++v48;
              }
              while (--v37);
            }
          }
          else if ((_DWORD)v37)
          {
            v38 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
            v39 = (unsigned __int16 *)*((_QWORD *)v33 + 1);
            while (1)
            {
              v40 = *v39;
              v41 = *v38;
              v42 = v40 > v41;
              if (v40 != v41)
                break;
              ++v39;
              ++v38;
              if (!--v37)
                goto LABEL_44;
            }
LABEL_49:
            if (v42)
              goto LABEL_55;
LABEL_53:
            v43 = -1;
            goto LABEL_54;
          }
LABEL_44:
          if (v36 < v35)
            v43 = 1;
          else
            v43 = -1;
          if (v35 == v36)
            goto LABEL_55;
LABEL_54:
          if ((v43 & 0x80000000) == 0)
            goto LABEL_55;
        }
        if ((v34 & 4) != 0)
        {
          if ((_DWORD)v37)
          {
            v52 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
            v53 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
            while (1)
            {
              v54 = *v53;
              v55 = *v52;
              v42 = v54 > v55;
              if (v54 != v55)
                goto LABEL_49;
              ++v53;
              ++v52;
              if (!--v37)
                goto LABEL_44;
            }
          }
          goto LABEL_44;
        }
        if (!(_DWORD)v37)
          goto LABEL_44;
        v44 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
        v45 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
        while (1)
        {
          v46 = *v45;
          v47 = *v44;
          if (v47 != v46)
            break;
          ++v45;
          ++v44;
          if (!--v37)
            goto LABEL_44;
        }
        if (v47 >= v46)
          goto LABEL_53;
LABEL_55:
        v56 = v9;
        if (v32 != (const WTF::StringImpl **)v11)
        {
          while (v56 != (WTF::StringImpl **)v11)
          {
            v57 = *(v56 - 4);
            v56 -= 4;
            if ((WTF::codePointCompare(v57, v29, v23) & 0x80000000) != 0)
              goto LABEL_62;
          }
LABEL_603:
          __break(1u);
          return;
        }
        v56 = v9;
        do
        {
          if (v31 >= v56)
            break;
          v58 = *(v56 - 4);
          v56 -= 4;
        }
        while ((WTF::codePointCompare(v58, v29, v23) & 0x80000000) == 0);
LABEL_62:
        if (v31 >= v56)
        {
          v11 = (unint64_t)v31;
          goto LABEL_154;
        }
        if (!v29)
        {
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)v31, v56, (uint64_t)v23, v24, v25, v26, v27, v28);
          goto LABEL_603;
        }
        v11 = (unint64_t)v31;
        v59 = v56;
        while (2)
        {
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](v11, v59, (uint64_t)v23, v24, v25, v26, v27, v28);
          while (2)
          {
            v11 += 32;
            if ((const WTF::StringImpl **)v11 == v9)
              goto LABEL_603;
            v60 = *(const WTF::StringImpl **)v11;
            if (!*(_QWORD *)v11)
            {
              v63 = *((unsigned int *)v29 + 1);
              if ((_DWORD)v63)
                v70 = -1;
              else
                v70 = 0;
              goto LABEL_106;
            }
            v61 = *((_DWORD *)v29 + 4);
            v62 = *((unsigned int *)v60 + 1);
            v63 = *((unsigned int *)v29 + 1);
            if (v63 >= v62)
              v64 = v62;
            else
              v64 = v63;
            if ((*((_BYTE *)v60 + 16) & 4) == 0)
            {
              if ((v61 & 4) != 0)
              {
                if ((_DWORD)v64)
                {
                  v75 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
                  v76 = (unsigned __int16 *)*((_QWORD *)v60 + 1);
                  while (1)
                  {
                    v77 = *v76;
                    v78 = *v75;
                    v69 = v77 > v78;
                    if (v77 != v78)
                      goto LABEL_101;
                    ++v76;
                    ++v75;
                    if (!--v64)
                      goto LABEL_96;
                  }
                }
              }
              else if ((_DWORD)v64)
              {
                v65 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
                v66 = (unsigned __int16 *)*((_QWORD *)v60 + 1);
                while (1)
                {
                  v67 = *v66;
                  v68 = *v65;
                  v69 = v67 > v68;
                  if (v67 != v68)
                    break;
                  ++v66;
                  ++v65;
                  if (!--v64)
                    goto LABEL_96;
                }
LABEL_101:
                if (v69)
                  goto LABEL_152;
LABEL_105:
                v70 = -1;
LABEL_106:
                v62 = v63;
                if ((v70 & 0x80000000) == 0)
                  goto LABEL_107;
                continue;
              }
              goto LABEL_96;
            }
            break;
          }
          if ((v61 & 4) != 0)
          {
            if ((_DWORD)v64)
            {
              v79 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
              v80 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
              while (1)
              {
                v81 = *v80;
                v82 = *v79;
                v69 = v81 > v82;
                if (v81 != v82)
                  goto LABEL_101;
                ++v80;
                ++v79;
                if (!--v64)
                  goto LABEL_96;
              }
            }
            goto LABEL_96;
          }
          if (!(_DWORD)v64)
          {
LABEL_96:
            if (v63 < v62)
              v70 = 1;
            else
              v70 = -1;
            if ((_DWORD)v62 == (_DWORD)v63)
              goto LABEL_107;
            goto LABEL_106;
          }
          v71 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
          v72 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
          while (1)
          {
            v73 = *v72;
            v74 = *v71;
            if (v74 != v73)
              break;
            ++v72;
            ++v71;
            if (!--v64)
              goto LABEL_96;
          }
          if (v74 >= v73)
            goto LABEL_105;
LABEL_152:
          v62 = *((unsigned int *)v29 + 1);
LABEL_107:
          if ((_DWORD)v62)
            v83 = -1;
          else
            v83 = 0;
          v84 = v62;
          while (2)
          {
            if (v59 == (WTF::StringImpl **)a1)
              goto LABEL_603;
            v86 = (uint64_t)*(v59 - 4);
            v59 -= 4;
            v85 = v86;
            v87 = v62;
            v88 = v83;
            if (!v86)
              goto LABEL_149;
            v89 = *((_DWORD *)v29 + 4);
            v90 = *(_DWORD *)(v85 + 4);
            if (v84 >= v90)
              v91 = v90;
            else
              v91 = v84;
            if ((*(_BYTE *)(v85 + 16) & 4) == 0)
            {
              if ((v89 & 4) != 0)
              {
                if ((_DWORD)v91)
                {
                  v101 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
                  v102 = *(unsigned __int16 **)(v85 + 8);
                  while (1)
                  {
                    v103 = *v102;
                    v104 = *v101;
                    v96 = v103 > v104;
                    if (v103 != v104)
                      goto LABEL_144;
                    ++v102;
                    ++v101;
                    if (!--v91)
                      goto LABEL_138;
                  }
                }
              }
              else if ((_DWORD)v91)
              {
                v92 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
                v93 = *(unsigned __int16 **)(v85 + 8);
                while (1)
                {
                  v94 = *v93;
                  v95 = *v92;
                  v96 = v94 > v95;
                  if (v94 != v95)
                    break;
                  ++v93;
                  ++v92;
                  if (!--v91)
                    goto LABEL_138;
                }
LABEL_144:
                if (!v96)
                  goto LABEL_150;
LABEL_147:
                v88 = 1;
LABEL_148:
                v87 = v84;
LABEL_149:
                v84 = v87;
                if (v88 < 0)
                  goto LABEL_150;
                continue;
              }
              goto LABEL_138;
            }
            break;
          }
          if ((v89 & 4) != 0)
          {
            if ((_DWORD)v91)
            {
              v105 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
              v106 = *(unsigned __int8 **)(v85 + 8);
              while (1)
              {
                v107 = *v106;
                v108 = *v105;
                v96 = v107 > v108;
                if (v107 != v108)
                  goto LABEL_144;
                ++v106;
                ++v105;
                if (!--v91)
                  goto LABEL_138;
              }
            }
            goto LABEL_138;
          }
          if (!(_DWORD)v91)
          {
LABEL_138:
            if (v84 < v90)
              v109 = 1;
            else
              v109 = -1;
            if (v90 == (_DWORD)v84)
              v88 = 0;
            else
              v88 = v109;
            goto LABEL_148;
          }
          v97 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
          v98 = *(unsigned __int8 **)(v85 + 8);
          while (1)
          {
            v99 = *v98;
            v100 = *v97;
            if (v100 != v99)
              break;
            ++v98;
            ++v97;
            if (!--v91)
              goto LABEL_138;
          }
          if (v100 < v99)
            goto LABEL_147;
LABEL_150:
          if (v11 < (unint64_t)v59)
            continue;
          break;
        }
LABEL_154:
        v110 = (const WTF::StringImpl **)(v11 - 32);
        if (v11 - 32 != a1)
        {
          v111 = *v110;
          *v110 = 0;
          v112 = *(WTF::StringImpl **)a1;
          *(_QWORD *)a1 = v111;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
            {
              WTF::StringImpl::~StringImpl(v112, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
              WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
            }
            else
            {
              *(_DWORD *)v112 -= 2;
            }
          }
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v11 - 24);
          v113 = *(_QWORD *)(v11 - 8);
          *(_QWORD *)(v11 - 8) = 0;
          v114 = *(WTF::StringImpl **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v113;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
            {
              WTF::StringImpl::~StringImpl(v114, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
              WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
            }
            else
            {
              *(_DWORD *)v114 -= 2;
            }
          }
        }
        v115 = *v110;
        *v110 = v29;
        if (v115)
        {
          if (*(_DWORD *)v115 == 2)
          {
            WTF::StringImpl::~StringImpl(v115, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
            WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
          }
          else
          {
            *(_DWORD *)v115 -= 2;
          }
        }
        *(_OWORD *)(v11 - 24) = v654;
        v116 = *(WTF::StringImpl **)(v11 - 8);
        *(_QWORD *)(v11 - 8) = v30;
        v8 = v650;
        if (v116)
        {
          if (*(_DWORD *)v116 == 2)
          {
            WTF::StringImpl::~StringImpl(v116, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
            WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          }
          else
          {
            *(_DWORD *)v116 -= 2;
          }
        }
        if (v31 < v56)
          goto LABEL_170;
        v117 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)a1, (const WTF::StringImpl **)(v11 - 32), v23);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>((const WTF::StringImpl **)v11, v9, v118))
        {
          if (v117)
            continue;
LABEL_170:
          std::__introsort<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,false>(a1, v11 - 32, v650, v646 & 1);
LABEL_171:
          v646 = 0;
          continue;
        }
        v9 = (const WTF::StringImpl **)(v11 - 32);
        if (!v117)
          goto LABEL_2;
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,0>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(a1, a2, a3, a4);
  if ((WTF::codePointCompare(*a5, *a4, v10) & 0x80000000) != 0)
  {
    std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a4, a5, v11, v12, v13, v14, v15, v16);
    if ((WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v17) & 0x80000000) != 0)
    {
      std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a3, a4, v18, v19, v20, v21, v22, v23);
      if ((WTF::codePointCompare(*(WTF **)a3, *a2, v24) & 0x80000000) != 0)
      {
        std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a2, (WTF::StringImpl **)a3, v25, v26, v27, v28, v29, v30);
        if ((WTF::codePointCompare(*a2, *a1, v31) & 0x80000000) != 0)
          std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a1, a2, v32, v33, v34, v35, v36, v37);
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v6;
  const WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  const WTF::StringImpl *v18;

  v6 = WTF::codePointCompare(*a2, *a1, a3);
  v8 = WTF::codePointCompare(*(WTF **)a3, *a2, v7);
  if (v6 < 0)
  {
    if (v8 < 0)
    {
      v16 = (uint64_t)a1;
    }
    else
    {
      std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a1, a2, v9, v10, v11, v12, v13, v14);
      if ((WTF::codePointCompare(*(WTF **)a3, *a2, v18) & 0x80000000) == 0)
        return;
      v16 = (uint64_t)a2;
    }
    v17 = (WTF::StringImpl **)a3;
    goto LABEL_11;
  }
  if (v8 < 0)
  {
    std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a2, (WTF::StringImpl **)a3, v9, v10, v11, v12, v13, v14);
    if ((WTF::codePointCompare(*a2, *a1, v15) & 0x80000000) != 0)
    {
      v16 = (uint64_t)a1;
      v17 = a2;
LABEL_11:
      std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](v16, v17, v9, v10, v11, v12, v13, v14);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl **v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;

  v5 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 4;
      if ((WTF::codePointCompare(*(a2 - 4), *a1, a3) & 0x80000000) != 0)
        std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a1, v7, v8, v9, v10, v11, v12, v13);
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(a1, a1 + 4, (const WTF::StringImpl *)(a2 - 4));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(a1, a1 + 4, (const WTF::StringImpl *)(a1 + 8), a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*,0>(a1, a1 + 4, (const WTF::StringImpl *)(a1 + 8), a1 + 12, a2 - 4);
      return 1;
    default:
      v14 = a1 + 8;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(a1, a1 + 4, (const WTF::StringImpl *)(a1 + 8));
      v16 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v16, *v14, v15) & 0x80000000) != 0)
    {
      v25 = *v16;
      *v16 = 0;
      v70 = *(_OWORD *)(v16 + 1);
      v26 = v16[3];
      v16[3] = 0;
      v27 = v17;
      while (1)
      {
        v28 = v27;
        v29 = (char *)a1 + v27;
        v30 = *(uint64_t *)((char *)a1 + v27 + 64);
        *((_QWORD *)v29 + 8) = 0;
        v31 = (WTF::StringImpl *)*((_QWORD *)v29 + 12);
        *((_QWORD *)v29 + 12) = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, v19, (uint64_t)v15, v20, v21, v22, v23, v24);
            WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        *(_OWORD *)(v29 + 104) = *(_OWORD *)(v29 + 72);
        v32 = *((_QWORD *)v29 + 11);
        *((_QWORD *)v29 + 11) = 0;
        v33 = (WTF::StringImpl *)*((_QWORD *)v29 + 15);
        *((_QWORD *)v29 + 15) = v32;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            WTF::StringImpl::~StringImpl(v33, v19, (uint64_t)v15, v20, v21, v22, v23, v24);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v33 -= 2;
          }
        }
        if (v28 == -64)
          break;
        v34 = WTF::codePointCompare(v25, *(const WTF::StringImpl **)((char *)a1 + v28 + 32), v15);
        v27 = v28 - 32;
        if ((v34 & 0x80000000) == 0)
        {
          v51 = (uint64_t)a1 + v27 + 96;
          goto LABEL_20;
        }
      }
      v51 = (uint64_t)a1;
LABEL_20:
      v52 = *(WTF::StringImpl **)v51;
      *(_QWORD *)v51 = v25;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, v19, (uint64_t)v15, v20, v21, v22, v23, v24);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      *(_OWORD *)((char *)a1 + v28 + 72) = v70;
      v53 = *(WTF::StringImpl **)(v51 + 24);
      *(_QWORD *)(v51 + 24) = v26;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, v19, (uint64_t)v15, v20, v21, v22, v23, v24);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
      if (++v18 == 8)
        return v16 + 4 == a2;
    }
    v14 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 == a2)
      return 1;
  }
}

void std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100](uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;

  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v11 = *a2;
  *a2 = 0;
  v12 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *a2;
  *a2 = v10;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v50 = *(_OWORD *)(a1 + 8);
  v14 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v15 = a2[3];
  a2[3] = 0;
  v16 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  *(_OWORD *)(a2 + 1) = v50;
  v17 = a2[3];
  a2[3] = v14;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF::StringImpl **a4)
{
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JSModuleNamespaceObject::finishCreation(JSC::JSGlobalObject *,JSC::AbstractModuleRecord *,WTF::Vector<std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>*>(a1, a2, a3);
  if ((WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v8) & 0x80000000) != 0)
  {
    std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a3, a4, v9, v10, v11, v12, v13, v14);
    if ((WTF::codePointCompare(*(WTF **)a3, *a2, v15) & 0x80000000) != 0)
    {
      std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a2, (WTF::StringImpl **)a3, v16, v17, v18, v19, v20, v21);
      if ((WTF::codePointCompare(*a2, *a1, v22) & 0x80000000) != 0)
        std::pair<JSC::Identifier,JSC::AbstractModuleRecord::Resolution>::swap[abi:sn180100]((uint64_t)a1, a2, v23, v24, v25, v26, v27, v28);
    }
  }
}

WTF::StringImpl **WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>::~KeyValuePair(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

void JSC::AbstractModuleRecord::~AbstractModuleRecord(JSC::AbstractModuleRecord *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _DWORD **v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;

  v9 = *((_QWORD *)this + 15);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 15);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF::StringImpl *)-1)
        {
          v13 = v11[3];
          v11[3] = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
              v12 = *v11;
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        v11 += 4;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((unsigned int *)this + 23);
  if ((_DWORD)v30)
  {
    v39 = 16 * v30;
    v40 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v41 = *v40;
      *v40 = 0;
      if (v41)
      {
        if (v41[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
        else
          --v41[2];
      }
      v42 = (WTF::StringImpl *)*(v40 - 1);
      *(v40 - 1) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      v40 += 2;
      v39 -= 16;
    }
    while (v39);
  }
  v31 = *((_QWORD *)this + 10);
  if (v31)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v32 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  while (v32)
  {
    v67 = v32;
    v32 = (WTF::StringImpl **)v32[2];
    v68 = *v67;
    *v67 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    WTF::fastFree((unint64_t)v67, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((_QWORD *)this + 7);
  if (v33)
    WTF::fastFree(v33 - 16, a2, a3, a4, a5, a6, a7, a8);
  v34 = *((_QWORD *)this + 6);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WTF::StringImpl **)*((_QWORD *)this + 6);
      do
      {
        if (*v36 != (WTF::StringImpl *)-1)
          v36 = WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry>::~KeyValuePair(v36, a2, a3, a4, a5, a6, a7, a8);
        v36 += 6;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 5);
  if (v37)
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v37, a2, a3, a4, a5, a6, a7, a8);
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
}

void WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = (WTF::StringImpl **)(a1 + 32);
    do
    {
      if (*(v10 - 4) != (WTF::StringImpl *)-1)
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
          {
            WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            *(_DWORD *)v11 -= 2;
          }
        }
        v12 = *(v10 - 1);
        *(v10 - 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        v13 = *(v10 - 2);
        *(v10 - 2) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        v14 = *(v10 - 4);
        *(v10 - 4) = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      v10 += 5;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr(a1);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, a1));
  if (!v9)
  {
    atomic_store(1u, a1);
    JSC::VM::~VM((JSC::VM *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSLock::willReleaseLock(void)::$_0 &&>>(WTF *a1)
{
  uint64_t *result;

  result = WTF::sdkAlignedBehaviors(a1);
  _MergedGlobals_45 = (*(_DWORD *)result & 0x2000) == 0;
  return result;
}

void JSC::JSInternalFieldObjectImpl<4u>::visitChildren(JSC::JSObject *a1, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;

  v6[0] = a2;
  v6[1] = a1;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v6;
    JSC::JSObject::visitChildren(a1, a2, a3);
    if ((*((_QWORD *)a1 + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)a1 + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)a1 + 4) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)a1 + 5) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

void JSC::JSInternalFieldObjectImpl<4u>::visitChildren(JSC::JSObject *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  unint64_t v19;
  int v21;
  unint64_t v22;
  int v24;
  unint64_t v25;
  int v26;

  JSC::JSObject::visitChildren(a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a1 + 2);
  if ((v16 & 0xFFFE000000000002) != 0 || v16 == 0)
    goto LABEL_10;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v18 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_9:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  JSC::SlotVisitor::appendSlow(a2, v16, 0, v11, v12, v13, v14, v15);
LABEL_10:
  v19 = *((_QWORD *)a1 + 3);
  if ((v19 & 0xFFFE000000000002) == 0 && v19 != 0)
  {
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v21 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
      {
LABEL_18:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_19;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v19, 0, v11, v12, v13, v14, v15);
  }
LABEL_19:
  v22 = *((_QWORD *)a1 + 4);
  if ((v22 & 0xFFFE000000000002) == 0 && v22 != 0)
  {
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) == 0)
        goto LABEL_41;
    }
    else
    {
      v24 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v24, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) == 0)
        goto LABEL_41;
    }
    if (!*(_QWORD *)(a2 + 168))
      goto LABEL_28;
LABEL_41:
    JSC::SlotVisitor::appendSlow(a2, v22, 0, v11, v12, v13, v14, v15);
  }
LABEL_28:
  v25 = *((_QWORD *)a1 + 5);
  if ((v25 & 0xFFFE000000000002) == 0 && v25)
  {
    if ((v25 & 8) != 0)
    {
      if ((*(_BYTE *)(v25 - 79) & 1) == 0)
        goto LABEL_43;
    }
    else
    {
      v26 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
        goto LABEL_43;
    }
    if (!*(_QWORD *)(a2 + 168))
      return;
LABEL_43:
    JSC::SlotVisitor::appendSlow(a2, v25, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::dataLog<char [17],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Loader [import] ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [18],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Loader [resolve] ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [16],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Loader [fetch] ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [19],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Loader [evaluate] ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, WTF::AtomStringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::AtomStringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  WTF::StringImpl **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if (v7)
  {
    v20 = v7;
    v21 = (WTF::AtomStringImpl *)v6;
    do
    {
      if (*(_QWORD *)v21)
      {
        if (*(_QWORD *)v21 != -1)
        {
          v22 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::reinsert(*a1, v21, v11, v12, v13, v14, v15, v16);
          WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>::~KeyValuePair((WTF::StringImpl **)v21, v23, v24, v25, v26, v27, v28, v29);
          if (v21 == a3)
            v19 = v22;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>::~KeyValuePair((WTF::StringImpl **)v21, v10, v11, v12, v13, v14, v15, v16);
      }
      v21 = (WTF::AtomStringImpl *)((char *)v21 + 24);
      --v20;
    }
    while (v20);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::reinsert(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **result;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(WTF::StringImpl **)a2;
  if (a1)
    v11 = *(_DWORD *)(a1 - 8);
  else
    v11 = 0;
  v12 = *((_DWORD *)v10 + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)v10 + 8);
  v13 = 0;
  v14 = v12 >> 8;
  do
  {
    v15 = v14 & v11;
    v16 = (WTF::StringImpl **)(a1 + 24 * (v14 & v11));
    v14 = ++v13 + (v14 & v11);
  }
  while (*v16);
  result = WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry>::~KeyValuePair(v16, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *result = v18;
  v19 = a1 + 24 * v15;
  v20 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v19 + 8) = v20;
  *(_QWORD *)(v19 + 16) = *((_QWORD *)a2 + 2);
  return result;
}

uint64_t JSC::JSModuleNamespaceObject::ExportEntry::operator=(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  return a1;
}

_QWORD *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::JSModuleNamespaceObject::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::JSModuleNamespaceObject::ExportEntry>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t JSC::JSObject::putByIndex(unint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v11;
  JSC::VM *v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t Slow;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  JSC::JSObject *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _OWORD *j;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  JSC::JSObject *v61;
  JSC::VM *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  __n128 v73;
  uint64_t v74;
  int v75;
  char *v76;
  int v77;
  uint64_t v78;
  JSC::Butterfly *v79;
  uint64_t v80;
  unsigned int *v81;
  JSC::VM *v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t (*v112)(unint64_t, unint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **);
  WTF::StringImpl *v113;
  unint64_t v114;
  unint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  JSC::VM *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t SlowCase;
  uint64_t v189;
  unsigned int v190;
  uint64_t v192;
  int v193;
  _BOOL4 v194;
  uint64_t v195;
  unint64_t *v196;
  _OWORD *i;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  _DWORD *v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  __n128 v213;
  char *v214;
  JSC::Butterfly *ArrayStorage;
  unint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  JSC::VM *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unsigned __int8 *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  WTF::StringImpl **v277;
  WTF::StringImpl *v278;
  unint64_t v279;
  int v280;
  char v281;
  __int16 v282;
  char v283;
  uint64_t v284;
  WTF::StringImpl *v285;

  v11 = (unint64_t)a2;
  v13 = a2[7];
  v14 = (a4 & 0xFFFE000000000002) != 0 || a4 == 0;
  v15 = v14;
  if (!v14 || (v15 & 1) == 0)
  {
    v165 = a5;
    v277 = a2;
    if ((_DWORD)a3 != -1)
    {
      a9.n128_f64[0] = (double)(int)a4;
      v166 = a4 - 0x2000000000000;
      if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v17 = a4 - 0x2000000000000;
      else
        v17 = (double)(int)a4;
      v276 = (_DWORD)a3 + 1;
      while (1)
      {
        v167 = *(_BYTE *)(a1 + 4);
        if ((v167 & 0x10) != 0)
        {
          JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v167 = *(_BYTE *)(a1 + 4);
        }
        switch(v167 & 0xF)
        {
          case 0:
          case 1:
            goto LABEL_212;
          case 3:
            JSC::JSObject::convertUndecidedForValue(a1, v13, a4, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            goto LABEL_338;
          case 4:
          case 5:
            if (a4 >= 0xFFFE000000000000)
              goto LABEL_215;
            if (v166 <= 0xFFFBFFFFFFFFFFFFLL && BYTE1(dword_1ECF4C5C0))
              JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            else
              JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            goto LABEL_338;
          case 6:
          case 7:
            if (a4 >> 49)
            {
              v168 = *(_QWORD *)(a1 + 8);
              if (*(_DWORD *)(v168 - 4) > a3)
              {
                *(double *)(v168 + 8 * a3) = v17;
                if (*(_DWORD *)(v168 - 8) <= a3)
                  *(_DWORD *)(v168 - 8) = v276;
                return 1;
              }
LABEL_212:
              if ((v167 & 0x10) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x198A2D21CLL);
              }
              v21 = v277[7];
              if ((v167 & 0xFu) - 6 < 2)
              {
                v285 = v277[7];
                if (!(a3 >> 28))
                {
                  v22 = *(char **)(a1 + 8);
                  if (a3 >> 5 < 0xC35)
                    goto LABEL_224;
                  v238 = *((unsigned int *)v22 - 2);
                  if ((_DWORD)v238)
                  {
                    v239 = 0;
                    v240 = v238 - 1;
                    do
                    {
                      a9.n128_u64[0] = *(_QWORD *)&v22[8 * v240];
                      ++v239;
                    }
                    while ((unint64_t)v240--);
                  }
                  else
                  {
                    v239 = 0;
                  }
                  if (v239 >= a3 >> 3)
                  {
LABEL_224:
                    v170 = *((unsigned int *)v22 - 1);
                    if (a3 < 0x3E8 || v170 >= a3)
                    {
                      if (v170 > a3)
                      {
LABEL_266:
                        if (*((_DWORD *)v22 - 2) <= a3)
                        {
                          *((_DWORD *)v22 - 2) = v276;
                          v22 = *(char **)(a1 + 8);
                        }
                        if (*((_DWORD *)v22 - 1) <= a3)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198A2CDECLL);
                        }
                        goto LABEL_74;
                      }
                      v171 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
                      if (v171 == 65534)
                        goto LABEL_231;
                      if (v171 == 0xFFFF)
                        v171 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
                      if (v171 <= 63)
                      {
LABEL_231:
                        v172 = 0;
                      }
                      else if ((v171 - 63) >= 5)
                      {
                        v201 = (v171 - 64) | ((v171 - 64) >> 1) | (((v171 - 64) | ((v171 - 64) >> 1)) >> 2);
                        v202 = v201 | (v201 >> 4) | ((v201 | (v201 >> 4)) >> 8);
                        v172 = (v202 | HIWORD(v202)) + 1;
                      }
                      else
                      {
                        v172 = 4;
                      }
                      v278 = v21;
                      LOBYTE(v279) = 0;
                      v173 = 8 * v172 + 8;
                      v174 = v170 + v172;
                      v175 = 8 * v174;
                      v271 = 8 * v174 + 8;
                      if (v174 > 9)
                      {
                        if (v174 > 0x3EB)
                          v176 = 8 * v174 + 8;
                        else
                          v176 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                                 + (((unint64_t)(v175 + 23) >> 2) & 0x7FFFFFFFCLL));
                      }
                      else
                      {
                        v176 = (v175 + 23) & 0x1FFFFFFFF0;
                      }
                      v177 = (unint64_t)(v176 - v173) >> 3;
                      if (v177 > a3)
                      {
                        v192 = 0;
                        goto LABEL_254;
                      }
                      v178 = v172;
                      v179 = 2 * v276;
                      if (2 * v276 >= 0x10000000)
                        v179 = 0x10000000;
                      if (v179 <= 3)
                        v179 = 3;
                      v180 = v173 + 8 * v179;
                      if (v180 > 0x50)
                      {
                        if (v180 <= 0x1F60)
                          v180 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                                 + (((v180 + 15) >> 2) & 0xFFFFFFFFCLL));
                      }
                      else
                      {
                        v180 = (v180 + 15) & 0x3FFFFFFFF0;
                      }
                      v181 = v180 - v173;
                      v177 = v181 >> 3;
                      v182 = &v22[-8 * v178];
                      v183 = v182 - 8;
                      v184 = (v181 & 0x7FFFFFFF8) + v173;
                      v185 = (uint64_t)v21 + 6648;
                      if ((_DWORD)v178 || *((_BYTE *)v21 + 755) || (v183 & 8) == 0)
                      {
                        if (v184 <= 0x1F60
                          && (v186 = *(_QWORD *)((char *)v21 + (((v184 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
                        {
                          v187 = *(unsigned int *)(v186 + 60);
                          SlowCase = *(_QWORD *)(v186 + 24);
                          if (SlowCase < *(_QWORD *)(v186 + 32))
                          {
                            *(_QWORD *)(v186 + 24) = SlowCase + v187;
                            goto LABEL_248;
                          }
                          SlowCase = *(_QWORD *)(v186 + 40);
                          if ((SlowCase & 1) == 0)
                          {
                            v216 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v186 + 48);
                            *(_QWORD *)(v186 + 32) = SlowCase + HIDWORD(v216);
                            *(_QWORD *)(v186 + 40) = SlowCase + (int)v216;
                            *(_QWORD *)(v186 + 24) = SlowCase + v187;
LABEL_249:
                            if (v174 > 0x1D)
                            {
                              for (i = (_OWORD *)SlowCase; i != (_OWORD *)((v271 & 0x1FFFFFFFE0) + SlowCase); i += 2)
                              {
                                v198 = *(_OWORD *)v183;
                                v199 = *((_OWORD *)v183 + 1);
                                v183 += 32;
                                *i = v198;
                                i[1] = v199;
                              }
                              while (i != (_OWORD *)(v271 + SlowCase))
                              {
                                v200 = *(_QWORD *)v183;
                                v183 += 8;
                                *(_QWORD *)i = v200;
                                i = (_OWORD *)((char *)i + 8);
                              }
                            }
                            else
                            {
                              v189 = 0;
                              v190 = 1;
                              do
                              {
                                *(_QWORD *)(SlowCase + 8 * v189) = *(_QWORD *)&v183[8 * v189];
                                v189 = v190;
                              }
                              while (v271 >> 3 > v190++);
                            }
                            v192 = SlowCase + 8 * v178 + 8;
LABEL_253:
                            v22 = (char *)v192;
LABEL_254:
                            if ((*(_BYTE *)(a1 + 4) & 0xE) == 6)
                            {
                              if (v170 < v177)
                                memset_pattern16(&v22[8 * v170], &memset_pattern_99, 8 * (v177 + ~(_DWORD)v170) + 8);
                            }
                            else if (v170 < v177)
                            {
                              bzero(&v22[8 * v170], 8 * (v177 + ~(_DWORD)v170) + 8);
                            }
                            if (v192)
                            {
                              if (v177 >= 0x10000001)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198A2D250);
                              }
                              *((_DWORD *)v22 - 1) = v177;
                              __dmb(0xAu);
                              *(_QWORD *)(a1 + 8) = v192;
                              if (*((_DWORD *)v21 + 190) >= *(unsigned __int8 *)(a1 + 7))
                                JSC::Heap::writeBarrierSlowPath((uint64_t)v21 + 192, a1);
                            }
                            else
                            {
                              __dmb(0xAu);
                              if (v177 >= 0x10000001)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198A2D2D0);
                              }
                              *((_DWORD *)v22 - 1) = v177;
                            }
                            v193 = 1;
LABEL_262:
                            if ((_BYTE)v279)
                              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v278 + 192, 0);
                            if (v193)
                            {
                              v22 = *(char **)(a1 + 8);
                              goto LABEL_266;
                            }
LABEL_270:
                            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)v277, (JSC::JSGlobalObject *)&v285);
                            return 0;
                          }
                          JSC::sanitizeStackForVM(v21, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          SlowCase = JSC::LocalAllocator::allocateSlowCase(v186, (uint64_t)v21 + 192, v187, (uint64_t)&v278, 1, v242, v243, v244);
                        }
                        else
                        {
                          SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v185, v21, v184, (uint64_t)&v278, a5, a6, a7, a8);
                        }
LABEL_248:
                        if (SlowCase)
                          goto LABEL_249;
                      }
                      else
                      {
                        v214 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v185, v21, (uint64_t)(v182 - 8), v184, (uint64_t)&v278, 1, a7, a8);
                        if (v214)
                        {
                          v192 = (uint64_t)(v214 + 8);
                          goto LABEL_253;
                        }
                      }
                      v193 = 0;
                      goto LABEL_262;
                    }
                  }
                }
                JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a1, v21, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
                v252 = JSC::SparseArrayValueMap::create(v21, v245, v246, v247, v248, v249, v250, v251);
                v253 = (unsigned __int8 *)v252;
                **(_QWORD **)(a1 + 8) = v252;
                if (a1 && v252 && *((_DWORD *)v21 + 190) >= *(unsigned __int8 *)(a1 + 7))
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v21 + 192, a1);
                v48 = JSC::SparseArrayValueMap::putEntry(v253, (unint64_t)v277, (unsigned int *)a1, a3, a4, 0);
                if (!*((_DWORD *)v21 + 20)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps(v21, v254, v255, v256, v257, v258, v259, v260))
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 8) - 8) = v276;
                  return v48;
                }
                return 0;
              }
              switch(v167 & 0xF)
              {
                case 0:
                case 1:
                  if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x12) & 0x10) != 0
                    || (*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x100) != 0)
                  {
                    ArrayStorage = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode((JSC::JSObject *)a1, v277[7], (uint64_t)a3, a4, a5, a6, a7, a8, a9);
                    goto LABEL_349;
                  }
                  if (a3 >= 0x3E8)
                  {
                    ArrayStorage = JSC::JSObject::createArrayStorage((JSC::Butterfly **)a1, v277[7], 0, 0, a9);
LABEL_349:
                    v80 = (uint64_t)ArrayStorage;
LABEL_366:
                    v81 = (unsigned int *)a1;
                    v82 = (JSC::VM *)v277;
                    v83 = a3;
                    v84 = a4;
                    a5 = v165;
                    return JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage(v81, v82, v83, v84, a5, v80, a7, a8);
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 8) & 0x20) == 0)
                  {
                    v203 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
                    v204 = (_DWORD *)a1;
                    while (1)
                    {
                      v205 = *(_QWORD *)(v203 + 40);
                      if (v205 && *(_BYTE *)(*(_QWORD *)(v205 + 2048) + 4) == 2)
                        goto LABEL_321;
                      v206 = *(_DWORD **)(v203 + 48);
                      if (!v206)
                        v206 = (_DWORD *)*((_QWORD *)v204 + 2);
                      if (v206 == (_DWORD *)2)
                        break;
                      v203 = 16 * (*v206 & 0xFFFFFFFE);
                      v204 = v206;
                      if ((*(_BYTE *)(v203 + 8) & 0x20) != 0)
                        goto LABEL_321;
                    }
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 2048) + 4) != 2)
                    {
LABEL_136:
                      JSC::JSObject::createInitialForValueAndSet((unsigned __int8 *)a1, v21, (int)a3, a4, a9);
                      return 1;
                    }
                  }
LABEL_321:
                  v207 = JSC::lastArraySize;
                  if (v276 > JSC::lastArraySize)
                    v207 = v276;
                  if (v207 >= 4)
                    v208 = 4;
                  else
                    v208 = v207;
                  JSC::lastArraySize = v208;
                  v209 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
                  if (v209 == 65534)
                    goto LABEL_330;
                  if (v209 == 0xFFFF)
                    v209 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
                  if (v209 <= 63)
                  {
LABEL_330:
                    v210 = 0;
                  }
                  else if ((v209 - 63) >= 5)
                  {
                    v217 = (v209 - 64) | ((v209 - 64) >> 1) | (((v209 - 64) | ((v209 - 64) >> 1)) >> 2);
                    v218 = v217 | (v217 >> 4) | ((v217 | (v217 >> 4)) >> 8);
                    v210 = (v218 | HIWORD(v218)) + 1;
                  }
                  else
                  {
                    v210 = 4;
                  }
                  if (v207 >= 0x10000000)
                    v211 = 0x10000000;
                  else
                    v211 = v207;
                  v212 = JSC::ArrayStorage::optimalVectorLength(0, v210, v211);
                  JSC::JSObject::createArrayStorage((JSC::Butterfly **)a1, v21, v276, v212, v213);
                  break;
                case 3:
                  __break(0xC471u);
                  JUMPOUT(0x198A2D5F4);
                case 4:
                case 5:
                  v50 = (JSC::JSObject *)a1;
                  v51 = (unint64_t)v277;
                  return JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>(v50, v51, (uint64_t)a3, a4, a5, a6, a7, a8, (int32x4_t)a9);
                case 8:
                case 9:
                  v61 = (JSC::JSObject *)a1;
                  v62 = (JSC::VM *)v277;
                  return JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>(v61, v62, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
                case 0xA:
                case 0xB:
                  goto LABEL_365;
                case 0xC:
                case 0xD:
                  v219 = **(_QWORD **)(a1 + 8);
                  LOBYTE(v278) = 0;
                  if (v219)
                  {
                    v220 = *(_QWORD *)(v219 + 8);
                    if (v220)
                    {
                      if (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long long>>,unsigned long long>(v220, a3))
                      {
                        goto LABEL_365;
                      }
                    }
                  }
                  v221 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, (unint64_t)v277, (unint64_t)a3, a4, v165, &v278, a7, a8);
                  v227 = v221;
                  if (*((_DWORD *)v21 + 20))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v222, v223, v224, v225, v226, a7, a8);
                    if (!hasExceptionsAfterHandlingTraps && v227 == 1)
                      return (_BYTE)v278 != 0;
                    if (hasExceptionsAfterHandlingTraps)
                      return 0;
                  }
                  else if (v221)
                  {
                    return (_BYTE)v278 != 0;
                  }
LABEL_365:
                  v80 = *(_QWORD *)(a1 + 8);
                  goto LABEL_366;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198A2D418);
              }
            }
            else
            {
              JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            }
LABEL_338:
            v13 = v277[7];
            break;
          case 8:
          case 9:
LABEL_215:
            v169 = *(_QWORD *)(a1 + 8);
            if (*(_DWORD *)(v169 - 4) <= a3)
              goto LABEL_212;
            *(_QWORD *)(v169 + 8 * a3) = a4;
            if (*(_DWORD *)(v169 - 8) <= a3)
              *(_DWORD *)(v169 - 8) = v276;
            goto LABEL_218;
          case 0xA:
          case 0xB:
            v195 = *(_QWORD *)(a1 + 8);
            if (*(_DWORD *)(v195 - 4) <= a3)
              goto LABEL_212;
            v196 = (unint64_t *)(v195 + 8 * a3 + 16);
            if (*(_DWORD *)(v195 - 8) <= a3)
            {
              *(_DWORD *)(v195 - 8) = v276;
            }
            else if (*v196)
            {
              goto LABEL_290;
            }
            ++*(_DWORD *)(v195 + 12);
LABEL_290:
            *v196 = a4;
            goto LABEL_218;
          case 0xC:
          case 0xD:
            v272 = *(_QWORD *)(a1 + 8);
            if (*(_DWORD *)(v272 - 4) <= a3)
              goto LABEL_212;
            v228 = (unint64_t *)(v272 + 8 * a3 + 16);
            if (*(_DWORD *)(v272 - 8) <= a3)
            {
              LOBYTE(v278) = 0;
              v268 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, (unint64_t)v277, (unint64_t)a3, a4, v165, &v278, a7, a8);
              if (*((_DWORD *)v13 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v261, v262, v263, v264, v265, v266, v267))
              {
                return 0;
              }
              if (v268)
                return (_BYTE)v278 != 0;
              v237 = v272;
              *(_DWORD *)(v272 - 8) = v276;
            }
            else
            {
              if (*v228)
                goto LABEL_397;
              LOBYTE(v278) = 0;
              v236 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, (unint64_t)v277, (unint64_t)a3, a4, v165, &v278, a7, a8);
              if (*((_DWORD *)v13 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v229, v230, v231, v232, v233, v234, v235))
              {
                return 0;
              }
              if (v236)
                return (_BYTE)v278 != 0;
              v237 = v272;
            }
            ++*(_DWORD *)(v237 + 12);
LABEL_397:
            *v228 = a4;
LABEL_218:
            v48 = 1;
            if (a4 && (a4 & 0xFFFE000000000002) == 0)
            {
LABEL_200:
              if (*((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
            }
            return v48;
          default:
            __break(0xC471u);
            JUMPOUT(0x198A2D438);
        }
      }
    }
    v278 = 0;
    v279 = a1;
    v280 = -1;
    v281 = a5;
    v282 = 0;
    v283 = 1;
    v284 = 0;
    v112 = *(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x48);
    JSC::Identifier::from((uint64_t **)v13, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v285);
    v113 = v285;
    v114 = a1;
    v115 = (unint64_t)v277;
LABEL_173:
    v48 = v112(v114, v115, v113, a4, &v278);
    v123 = v285;
    v285 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
      {
        WTF::StringImpl::~StringImpl(v123, v116, v117, v118, v119, v120, v121, v122);
        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
      }
      else
      {
        *(_DWORD *)v123 -= 2;
      }
    }
    return v48;
  }
  if ((_DWORD)a3 == -1)
  {
    v278 = 0;
    v279 = a1;
    v280 = -1;
    v281 = a5;
    v282 = 0;
    v283 = 1;
    v284 = 0;
    v112 = *(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x48);
    JSC::Identifier::from((uint64_t **)v13, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v285);
    v113 = v285;
    v114 = a1;
    v115 = v11;
    goto LABEL_173;
  }
  a9.n128_f64[0] = (double)(int)a4;
  v16 = a4 - 0x2000000000000;
  if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v17 = a4 - 0x2000000000000;
  else
    v17 = (double)(int)a4;
  v18 = ((_DWORD)a3 + 1);
  while (2)
  {
    v19 = *(_BYTE *)(a1 + 4);
    if ((v19 & 0x10) != 0)
    {
      v274 = v18;
      v74 = a5;
      JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      a5 = v74;
      v18 = v274;
      v19 = *(_BYTE *)(a1 + 4);
    }
    switch(v19 & 0xF)
    {
      case 0:
      case 1:
        goto LABEL_20;
      case 3:
        v273 = a5;
        v58 = v18;
        JSC::JSObject::convertUndecidedForValue(a1, v13, a4, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_138;
      case 4:
      case 5:
        if (a4 > 0xFFFDFFFFFFFFFFFFLL)
          goto LABEL_23;
        v273 = a5;
        v58 = v18;
        if (v16 <= 0xFFFBFFFFFFFFFFFFLL && BYTE1(dword_1ECF4C5C0))
          JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        else
          JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_138;
      case 6:
      case 7:
        if (!(a4 >> 49))
        {
          v273 = a5;
          v58 = v18;
          JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a1, v13, (uint64_t)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
          goto LABEL_138;
        }
        v20 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v20 - 4) > a3)
        {
          *(double *)(v20 + 8 * a3) = v17;
LABEL_25:
          if (*(_DWORD *)(v20 - 8) <= a3)
            *(_DWORD *)(v20 - 8) = v18;
          return 1;
        }
LABEL_20:
        if ((v19 & 0x10) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198A2C648);
        }
        v21 = *(WTF::StringImpl **)(v11 + 56);
        if ((v19 & 0xFu) - 6 >= 2)
        {
          switch(v19 & 0xF)
          {
            case 0:
            case 1:
              if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x12) & 0x10) != 0
                || (*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x100) != 0)
              {
                v78 = a5;
                v79 = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode((JSC::JSObject *)a1, *(JSC::VM **)(v11 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
                goto LABEL_145;
              }
              if (a3 >= 0x3E8)
              {
                v78 = a5;
                v79 = JSC::JSObject::createArrayStorage((JSC::Butterfly **)a1, *(JSC::VM **)(v11 + 56), 0, 0, a9);
LABEL_145:
                v80 = (uint64_t)v79;
                v81 = (unsigned int *)a1;
                v82 = (JSC::VM *)v11;
                v83 = a3;
                v84 = a4;
                a5 = v78;
                return JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage(v81, v82, v83, v84, a5, v80, a7, a8);
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 8) & 0x20) == 0)
              {
                v63 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
                v64 = (_DWORD *)a1;
                while (1)
                {
                  v65 = *(_QWORD *)(v63 + 40);
                  if (v65 && *(_BYTE *)(*(_QWORD *)(v65 + 2048) + 4) == 2)
                    goto LABEL_121;
                  v66 = *(_DWORD **)(v63 + 48);
                  if (!v66)
                    v66 = (_DWORD *)*((_QWORD *)v64 + 2);
                  if (v66 == (_DWORD *)2)
                    break;
                  v63 = 16 * (*v66 & 0xFFFFFFFE);
                  v64 = v66;
                  if ((*(_BYTE *)(v63 + 8) & 0x20) != 0)
                    goto LABEL_121;
                }
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 2048) + 4) != 2)
                  goto LABEL_136;
              }
LABEL_121:
              v273 = a5;
              v67 = JSC::lastArraySize;
              v58 = v18;
              if (v18 > JSC::lastArraySize)
                v67 = v18;
              if (v67 >= 4)
                v68 = 4;
              else
                v68 = v67;
              JSC::lastArraySize = v68;
              v69 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
              if (v69 == 65534)
                goto LABEL_130;
              if (v69 == 0xFFFF)
                v69 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
              if (v69 < 64)
              {
LABEL_130:
                v70 = 0;
              }
              else if ((v69 - 63) >= 5)
              {
                v88 = (v69 - 64) | ((v69 - 64) >> 1) | (((v69 - 64) | ((v69 - 64) >> 1)) >> 2);
                v89 = v88 | (v88 >> 4) | ((v88 | (v88 >> 4)) >> 8);
                v70 = (v89 | HIWORD(v89)) + 1;
              }
              else
              {
                v70 = 4;
              }
              if (v67 >= 0x10000000)
                v71 = 0x10000000;
              else
                v71 = v67;
              v72 = JSC::ArrayStorage::optimalVectorLength(0, v70, v71);
              JSC::JSObject::createArrayStorage((JSC::Butterfly **)a1, v21, v58, v72, v73);
LABEL_138:
              v13 = *(JSC::VM **)(v11 + 56);
              v18 = v58;
              a5 = v273;
              break;
            case 3:
              __break(0xC471u);
              JUMPOUT(0x198A2CB98);
            case 4:
            case 5:
              v50 = (JSC::JSObject *)a1;
              v51 = v11;
              return JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>(v50, v51, (uint64_t)a3, a4, a5, a6, a7, a8, (int32x4_t)a9);
            case 8:
            case 9:
              v61 = (JSC::JSObject *)a1;
              v62 = (JSC::VM *)v11;
              return JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>(v61, v62, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            case 0xA:
            case 0xB:
              goto LABEL_276;
            case 0xC:
            case 0xD:
              v90 = a5;
              v91 = v11;
              v92 = **(_QWORD **)(a1 + 8);
              LOBYTE(v278) = 0;
              if (v92)
              {
                v93 = *(_QWORD *)(v92 + 8);
                if (v93)
                {
                  if (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long long>>,unsigned long long>(v93, a3))
                  {
                    goto LABEL_275;
                  }
                }
              }
              v94 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, v11, (unint64_t)a3, a4, v90, &v278, a7, a8);
              v100 = v94;
              if (*((_DWORD *)v21 + 20))
              {
                v194 = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v95, v96, v97, v98, v99, a7, a8);
                if (!v194 && ((v100 ^ 1) & 1) == 0)
                  return (_BYTE)v278 != 0;
                if (v194)
                  return 0;
              }
              else if (v94)
              {
                return (_BYTE)v278 != 0;
              }
LABEL_275:
              v11 = v91;
              a5 = v90;
LABEL_276:
              v80 = *(_QWORD *)(a1 + 8);
              v81 = (unsigned int *)a1;
              v82 = (JSC::VM *)v11;
              v83 = a3;
              v84 = a4;
              return JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage(v81, v82, v83, v84, a5, v80, a7, a8);
            default:
              __break(0xC471u);
              JUMPOUT(0x198A2C874);
          }
          continue;
        }
        v285 = *(WTF::StringImpl **)(v11 + 56);
        if (a3 >> 28)
          goto LABEL_185;
        v22 = *(char **)(a1 + 8);
        if (a3 >> 5 >= 0xC35)
        {
          v124 = *((unsigned int *)v22 - 2);
          if ((_DWORD)v124)
          {
            v125 = 0;
            v126 = v124 - 1;
            do
            {
              a9.n128_u64[0] = *(_QWORD *)&v22[8 * v126];
              ++v125;
            }
            while ((unint64_t)v126--);
          }
          else
          {
            v125 = 0;
          }
          if (v125 < a3 >> 3)
            goto LABEL_185;
        }
        v23 = *((unsigned int *)v22 - 1);
        if (a3 >= 0x3E8 && v23 < a3)
        {
LABEL_185:
          v131 = v18;
          JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a1, v21, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v139 = JSC::SparseArrayValueMap::create(v21, v132, v133, v134, v135, v136, v137, v138);
          v140 = (unsigned __int8 *)v139;
          **(_QWORD **)(a1 + 8) = v139;
          if (a1 && v139 && *((_DWORD *)v21 + 190) >= *(unsigned __int8 *)(a1 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v21 + 192, a1);
          v48 = JSC::SparseArrayValueMap::putEntry(v140, v11, (unsigned int *)a1, a3, a4, 0);
          if (!*((_DWORD *)v21 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v21, v141, v142, v143, v144, v145, v146, v147))
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 8) - 8) = v131;
            return v48;
          }
          return 0;
        }
        if (v23 > a3)
          goto LABEL_71;
        v24 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
        v277 = (WTF::StringImpl **)v11;
        if (v24 == 65534)
          goto LABEL_36;
        if (v24 == 0xFFFF)
          v24 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
        if (v24 < 64)
        {
LABEL_36:
          v25 = 0;
        }
        else if ((v24 - 63) >= 5)
        {
          v59 = (v24 - 64) | ((v24 - 64) >> 1) | (((v24 - 64) | ((v24 - 64) >> 1)) >> 2);
          v60 = v59 | (v59 >> 4) | ((v59 | (v59 >> 4)) >> 8);
          v25 = (v60 | HIWORD(v60)) + 1;
        }
        else
        {
          v25 = 4;
        }
        v278 = v21;
        LOBYTE(v279) = 0;
        v26 = 8 * v25 + 8;
        v27 = v23 + v25;
        v28 = 8 * v27;
        v29 = 8 * v27 + 8;
        if (v27 > 9)
        {
          if (v27 > 0x3EB)
            v30 = 8 * v27 + 8;
          else
            v30 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v28 + 23) >> 2) & 0x7FFFFFFFCLL));
        }
        else
        {
          v30 = (v28 + 23) & 0x1FFFFFFFF0;
        }
        v31 = (unint64_t)(v30 - v26) >> 3;
        if (v31 > a3)
        {
          v45 = 0;
          goto LABEL_58;
        }
        v32 = v25;
        v33 = 2 * v18;
        if ((2 * v18) >= 0x10000000)
          v33 = 0x10000000;
        if (v33 <= 3)
          v33 = 3;
        v34 = v26 + 8 * v33;
        if (v34 > 0x50)
        {
          if (v34 <= 0x1F60)
            v34 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((v34 + 15) >> 2) & 0xFFFFFFFFCLL));
        }
        else
        {
          v34 = (v34 + 15) & 0x3FFFFFFFF0;
        }
        v35 = v34 - v26;
        v31 = v35 >> 3;
        v36 = &v22[-8 * v32];
        v37 = v36 - 8;
        v38 = (v35 & 0x7FFFFFFF8) + v26;
        v39 = (uint64_t)v21 + 6648;
        if (!(_DWORD)v32 && !*((_BYTE *)v21 + 755) && (v37 & 8) != 0)
        {
          v75 = v18;
          v76 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v39, v21, (uint64_t)(v36 - 8), v38, (uint64_t)&v278, 1, a7, a8);
          if (v76)
          {
            v45 = (uint64_t)(v76 + 8);
            v22 = v76 + 8;
            LODWORD(v18) = v75;
            goto LABEL_58;
          }
          v47 = 0;
          LODWORD(v18) = v75;
          goto LABEL_67;
        }
        if (v38 > 0x1F60 || (v40 = *(_QWORD *)((char *)v21 + (((v38 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) == 0)
        {
          v77 = v18;
          Slow = JSC::CompleteSubspace::tryAllocateSlow(v39, v21, v38, (uint64_t)&v278, a5, a6, a7, a8);
          LODWORD(v18) = v77;
LABEL_53:
          if (Slow)
            goto LABEL_54;
          v47 = 0;
          goto LABEL_67;
        }
        v41 = *(unsigned int *)(v40 + 60);
        Slow = *(_QWORD *)(v40 + 24);
        if (Slow < *(_QWORD *)(v40 + 32))
        {
          *(_QWORD *)(v40 + 24) = Slow + v41;
          goto LABEL_53;
        }
        Slow = *(_QWORD *)(v40 + 40);
        if ((Slow & 1) != 0)
        {
          v270 = *(unsigned int *)(v40 + 60);
          v275 = v18;
          JSC::sanitizeStackForVM(v21, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          Slow = JSC::LocalAllocator::allocateSlowCase(v40, (uint64_t)v21 + 192, v270, (uint64_t)&v278, 1, v128, v129, v130);
          LODWORD(v18) = v275;
          goto LABEL_53;
        }
        v87 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v40 + 48);
        *(_QWORD *)(v40 + 32) = Slow + HIDWORD(v87);
        *(_QWORD *)(v40 + 40) = Slow + (int)v87;
        *(_QWORD *)(v40 + 24) = Slow + v41;
LABEL_54:
        if (v27 > 0x1D)
        {
          for (j = (_OWORD *)Slow; j != (_OWORD *)((v29 & 0x1FFFFFFFE0) + Slow); j += 2)
          {
            v55 = *(_OWORD *)v37;
            v56 = *((_OWORD *)v37 + 1);
            v37 += 32;
            *j = v55;
            j[1] = v56;
          }
          while (j != (_OWORD *)(v29 + Slow))
          {
            v57 = *(_QWORD *)v37;
            v37 += 8;
            *(_QWORD *)j = v57;
            j = (_OWORD *)((char *)j + 8);
          }
        }
        else
        {
          v43 = 0;
          v44 = 1;
          do
          {
            *(_QWORD *)(Slow + 8 * v43) = *(_QWORD *)&v37[8 * v43];
            v43 = v44++;
          }
          while (v29 >> 3 > v43);
        }
        v45 = Slow + 8 * v32 + 8;
        v22 = (char *)v45;
LABEL_58:
        if ((*(_BYTE *)(a1 + 4) & 0xE) == 6)
        {
          if (v23 < v31)
          {
            v46 = v18;
            memset_pattern16(&v22[8 * v23], &memset_pattern_99, 8 * (v31 + ~(_DWORD)v23) + 8);
            goto LABEL_61;
          }
        }
        else if (v23 < v31)
        {
          v46 = v18;
          bzero(&v22[8 * v23], 8 * (v31 + ~(_DWORD)v23) + 8);
LABEL_61:
          LODWORD(v18) = v46;
        }
        if (v45)
        {
          if (v31 >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x198A2C6A4);
          }
          *((_DWORD *)v22 - 1) = v31;
          __dmb(0xAu);
          *(_QWORD *)(a1 + 8) = v45;
          if (*((_DWORD *)v21 + 190) >= *(unsigned __int8 *)(a1 + 7))
          {
            v86 = v18;
            JSC::Heap::writeBarrierSlowPath((uint64_t)v21 + 192, a1);
            LODWORD(v18) = v86;
          }
        }
        else
        {
          __dmb(0xAu);
          if (v31 >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x198A2C730);
          }
          *((_DWORD *)v22 - 1) = v31;
        }
        v47 = 1;
LABEL_67:
        if ((_BYTE)v279)
        {
          v85 = v18;
          JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v278 + 192, 0);
          LODWORD(v18) = v85;
        }
        if (!v47)
          goto LABEL_270;
        v22 = *(char **)(a1 + 8);
LABEL_71:
        if (*((_DWORD *)v22 - 2) <= a3)
        {
          *((_DWORD *)v22 - 2) = v18;
          v22 = *(char **)(a1 + 8);
        }
        if (*((_DWORD *)v22 - 1) <= a3)
        {
          __break(0xC471u);
          JUMPOUT(0x198A2C668);
        }
LABEL_74:
        *(double *)&v22[8 * a3] = v17;
        return 1;
      case 8:
      case 9:
LABEL_23:
        v20 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v20 - 4) <= a3)
          goto LABEL_20;
        *(_QWORD *)(v20 + 8 * a3) = a4;
        goto LABEL_25;
      case 0xA:
      case 0xB:
        v52 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v52 - 4) <= a3)
          goto LABEL_20;
        v53 = (unint64_t *)(v52 + 8 * a3 + 16);
        if (*(_DWORD *)(v52 - 8) <= a3)
        {
          *(_DWORD *)(v52 - 8) = v18;
        }
        else if (*v53)
        {
          goto LABEL_90;
        }
        ++*(_DWORD *)(v52 + 12);
LABEL_90:
        *v53 = a4;
        return 1;
      case 0xC:
      case 0xD:
        v101 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v101 - 4) <= a3)
          goto LABEL_20;
        v102 = v11;
        v103 = (unint64_t *)(v101 + 8 * a3 + 16);
        if (*(_DWORD *)(v101 - 8) <= a3)
        {
          v156 = v18;
          LOBYTE(v278) = 0;
          v164 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, v102, (unint64_t)a3, a4, a5, &v278, a7, a8);
          if (*((_DWORD *)v13 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v157, v158, v159, v160, v161, v162, v163))
          {
            return 0;
          }
          if (v164)
            return (_BYTE)v278 != 0;
          *(_DWORD *)(v101 - 8) = v156;
        }
        else
        {
          if (*v103)
            goto LABEL_198;
          LOBYTE(v278) = 0;
          v111 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, v102, (unint64_t)a3, a4, a5, &v278, a7, a8);
          if (*((_DWORD *)v13 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v104, v105, v106, v107, v108, v109, v110))
          {
            return 0;
          }
          if (v111)
            return (_BYTE)v278 != 0;
        }
        ++*(_DWORD *)(v101 + 12);
LABEL_198:
        *v103 = a4;
        v48 = 1;
        if (!a4 || (a4 & 0xFFFE000000000002) != 0)
          return v48;
        goto LABEL_200;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A2C894);
    }
  }
}

uint64_t JSC::JSObject::deletePropertyByIndex(JSC::JSObject *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t **v11;
  int v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  JSC::SparseArrayValueMap *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  JSC::Symbol *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  v11 = (uint64_t **)*((_QWORD *)a2 + 7);
  if ((_DWORD)a3 == -1)
  {
    JSC::Identifier::from(v11, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v52);
    result = JSC::JSCell::deleteProperty((unint64_t)this, (uint64_t)a2, (uint64_t)v52, v29, v30, v31, v32, v33);
    v41 = v52;
    v52 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        v43 = result;
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        return v43;
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
  else
  {
    v12 = *((_BYTE *)this + 4) & 0x1F;
    v13 = a3;
    result = 1;
    switch(v12)
    {
      case 0:
      case 1:
      case 3:
        return result;
      case 4:
      case 5:
      case 8:
      case 9:
        goto LABEL_3;
      case 6:
      case 7:
        goto LABEL_24;
      case 10:
      case 11:
      case 12:
      case 13:
        v16 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v16 - 4) <= a3)
        {
          v20 = *(JSC::SparseArrayValueMap **)v16;
          if (*(_QWORD *)v16)
          {
            v21 = JSC::SparseArrayValueMap::find(*(JSC::SparseArrayValueMap **)v16, a3);
            v28 = (uint64_t *)*((_QWORD *)v20 + 1);
            if (v28)
              v28 += 3 * *((unsigned int *)v28 - 1);
            if (v28 != v21)
            {
              if ((v21[2] & 8) != 0)
                return 0;
              JSC::SparseArrayValueMap::remove((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
            }
            return 1;
          }
        }
        else
        {
          v17 = v16 + 8 * a3;
          v19 = *(_QWORD *)(v17 + 16);
          v18 = (_QWORD *)(v17 + 16);
          if (v19)
          {
            *v18 = 0;
            --*(_DWORD *)(v16 + 12);
          }
        }
        break;
      case 21:
      case 25:
        if (*(_DWORD *)(*((_QWORD *)this + 1) - 4) <= a3)
          return result;
        JSC::JSObject::convertFromCopyOnWrite(this, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_3:
        v15 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v15 - 4) > v13)
          *(_QWORD *)(v15 + 8 * v13) = 0;
        return 1;
      case 23:
        if (*(_DWORD *)(*((_QWORD *)this + 1) - 4) <= a3)
          return result;
        JSC::JSObject::convertFromCopyOnWrite(this, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_24:
        v42 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v42 - 4) > v13)
          *(_QWORD *)(v42 + 8 * v13) = 0x7FF8000000000000;
        return 1;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A2D890);
    }
  }
  return result;
}

uint64_t JSC::JSObject::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;

  if ((_DWORD)a3 == -1)
  {
    v24 = *(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl *, uint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x68);
    JSC::Identifier::from(*(uint64_t ***)(a2 + 56), 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v45);
    v44 = v24(a1, a2, v45, a4);
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    return v44;
  }
  else
  {
    v8 = 0;
    switch(*(_BYTE *)(a1 + 4) & 0xF)
    {
      case 0:
      case 1:
      case 3:
        return v8;
      case 4:
      case 5:
      case 8:
      case 9:
        v9 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v9 - 4) <= a3)
          return 0;
        v8 = *(_QWORD *)(v9 + 8 * a3);
        if (v8)
          goto LABEL_5;
        return v8;
      case 6:
      case 7:
        v23 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v23 - 4) <= a3)
          return 0;
        v8 = *(_QWORD *)(v23 + 8 * a3) + 0x2000000000000;
        goto LABEL_5;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        v11 = *(_QWORD **)(a1 + 8);
        if (*((_DWORD *)v11 - 2) <= a3)
          return 0;
        if (*((_DWORD *)v11 - 1) <= a3)
        {
          v8 = *v11;
          if (!v8)
            return v8;
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            return v8;
          v12 = *(_DWORD *)(v8 - 8);
          v13 = ~((unint64_t)a3 << 32) + a3;
          v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
          v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
          v16 = v12 & (((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27)));
          v17 = v8 + 24 * v16;
          v18 = *(_QWORD *)v17;
          if (*(_QWORD *)v17 != a3)
          {
            v19 = 1;
            while (v18 != -1)
            {
              v16 = (v16 + v19) & v12;
              v17 = v8 + 24 * v16;
              v18 = *(_QWORD *)v17;
              ++v19;
              if (*(_QWORD *)v17 == a3)
                goto LABEL_17;
            }
            v17 = v8 + 24 * *(unsigned int *)(v8 - 4);
          }
LABEL_17:
          if (v17 == v8 + 24 * *(unsigned int *)(v8 - 4))
            return 0;
          v20 = *(_QWORD *)(v17 + 8);
          if ((v20 & 0xFFFE000000000002) != 0)
          {
            v21 = 1;
          }
          else if (*(_BYTE *)(v20 + 5) == 5)
          {
            v21 = 2;
          }
          else
          {
            v21 = 1;
          }
          v22 = *(_DWORD *)(v17 + 16);
          *(_QWORD *)a4 = v20;
          *(_DWORD *)(a4 + 16) = v22;
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = v21;
          return 1;
        }
        v8 = v11[a3 + 2];
        if (v8)
        {
LABEL_5:
          *(_QWORD *)a4 = v8;
          *(_DWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 32) = a1;
          v8 = 1;
          *(_BYTE *)(a4 + 49) = 1;
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A2DBC8);
    }
  }
  return v8;
}

void JSC::JSObject::getOwnPropertyNames(_DWORD *a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject::getOwnIndexedPropertyNames((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  JSC::JSObject::getOwnNonIndexPropertyNames(a1, a2, a3, a4);
}

uint64_t JSC::JSObject::preventExtensions(JSC::JSObject *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  JSC::ArrayStorage *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _QWORD *v24;
  int v26;
  int v27;
  JSC::Butterfly *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];

  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x10) != 0)
    return 1;
  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v11 = (unsigned __int8 *)this + 4;
  v12 = *((_BYTE *)this + 4) & 0xF;
  if (v12 - 10 >= 4)
  {
    if (v12 > 9 || v12 == 2)
      goto LABEL_5;
    v29 = JSC::JSObject::ensureArrayStorageSlow(this, *((JSC::VM **)a2 + 7), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    if (!v29)
      goto LABEL_5;
    v13 = v29;
  }
  else
  {
    v13 = (JSC::ArrayStorage *)*((_QWORD *)this + 1);
  }
  JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(this, v10, v13, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v32) = 1;
  WORD2(v32) = 0;
  v33[0] = v33;
  v33[1] = v33;
  v33[2] = v10;
  v33[3] = v14;
  v15 = JSC::Structure::nonPropertyTransitionSlow(v10, v14, 12, (uint64_t)&v32, a5, a6, a7, a8, a9.n128_f64[0]);
  *(_DWORD *)this = v15 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v15 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v15 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v15 + 8))
  {
    do
    {
      while (1)
      {
        v26 = *v11;
        v27 = __ldxr(v11);
        if (v27 == v26)
          break;
        __clrex();
      }
    }
    while (__stxr(v26 & 0xC0 | *(_BYTE *)(v15 + 8), v11));
  }
  if (*((_DWORD *)v10 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v10 + 192, (unint64_t)this);
  if (BYTE4(v32) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v32, v23, v16, v17, v18, v19, v20, v21, v22);
  while (1)
  {
    v24 = (_QWORD *)v33[0];
    if ((_QWORD *)v33[0] == v33)
      break;
    v31 = *(_QWORD *)v33[0];
    v30 = *(_QWORD **)(v33[0] + 8);
    *v30 = *(_QWORD *)v33[0];
    *(_QWORD *)(v31 + 8) = v30;
    *v24 = 0;
    v24[1] = 0;
  }
  return 1;
}

BOOL JSC::JSObject::isExtensible(JSC::JSObject *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return (*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x10) == 0;
}

BOOL JSC::JSObject::setPrototype(unint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  return JSC::JSObject::setPrototypeWithCycleCheck(a1, *(JSC::VM **)(a2 + 56), a2, a3, a4);
}

uint64_t JSC::JSObject::getPrototype(JSC::JSObject *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v3)
    return *((_QWORD *)this + 2);
  return v3;
}

void JSC::JSObject::analyzeHeap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  BOOL v30;
  WTF *v31;
  uint64_t v32;
  WTF **v33;

  v10 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v31 = 0;
  v32 = 0;
  v33 = &v31;
  JSC::Structure::forEachPropertyConcurrently<JSC::Structure::getPropertiesConcurrently(void)::$_0>(v10, (uint64_t *)&v33, a3, a4, a5, a6, a7, a8);
  v18 = v31;
  if (HIDWORD(v32))
  {
    v19 = 16 * HIDWORD(v32);
    v20 = (int *)((char *)v31 + 8);
    do
    {
      v21 = *v20;
      v22 = a1 + 16;
      if (*v20 >= 64)
      {
        v22 = *(_QWORD *)(a1 + 8) - 8;
        v21 = 63 - v21;
      }
      v12 = *(_QWORD *)(v22 + 8 * v21);
      if (v12)
        v23 = (v12 & 0xFFFE000000000002) == 0;
      else
        v23 = 0;
      if (v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
      v20 += 4;
      v19 -= 16;
    }
    while (v19);
    v18 = v31;
  }
  if (v18)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  }
  v24 = *(_QWORD *)(a1 + 8);
  if (v24)
  {
    v25 = *(_BYTE *)(a1 + 4) & 0xF;
    if ((v25 - 10) >= 4)
    {
      if ((v25 - 8) > 1)
        return;
      v26 = (unsigned int *)(v24 - 8);
    }
    else
    {
      v26 = (unsigned int *)(v24 - 4);
      v24 += 16;
    }
    v27 = *v26;
    if ((_DWORD)v27)
    {
      for (i = 0; i != v27; ++i)
      {
        v29 = *(_QWORD *)(v24 + 8 * i);
        if (v29)
          v30 = (v29 & 0xFFFE000000000002) == 0;
        else
          v30 = 0;
        if (v30)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
      }
    }
  }
}

uint64_t JSC::JSObject::estimatedSize(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v2 == 65534)
      goto LABEL_7;
    if (v2 == 0xFFFF)
      v2 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v3 = __OFSUB__(v2, 63);
    LODWORD(v1) = v2 - 63;
    if (((int)v1 < 0) ^ v3 | ((_DWORD)v1 == 0))
LABEL_7:
      LODWORD(v1) = 0;
    v1 = v1;
  }
  if ((a1 & 8) != 0)
    v4 = *(_QWORD *)(a1 - 88);
  else
    v4 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v4 + v1;
}

void JSC::JSNativeStdFunction::visitChildren(JSC::JSNativeStdFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSCallee::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSNativeStdFunction::visitChildren(JSC::JSNativeStdFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSCallee::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v10[0] + 88) = v11;
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::JSNativeStdFunction::create(uint64_t a1, uint64_t a2, int a3, WTF::StringImpl **a4, uint64_t *a5, int a6, unint64_t a7, uint64_t a8)
{
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::NativeExecutable *HostFunction;
  unint64_t v21;
  JSC::Heap *v22;
  unint64_t SlowCase;
  JSC::JSFunction *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];

  HostFunction = (JSC::NativeExecutable *)JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::runStdFunction, 1, a6, a7, 0, a4, a8);
  v21 = *(_QWORD *)(a2 + 1040);
  if ((v21 & 1) != 0)
  {
    v31 = *(uint64_t (**)(_QWORD *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v32 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v32 = (_QWORD *)(a2 - 16);
    v38[0] = *v32;
    v38[1] = a2;
    v38[2] = a2 + 1040;
    v21 = v31(v38);
  }
  v22 = *(JSC::Heap **)(a1 + 40680);
  if (!v22)
    v22 = JSC::GCClient::Heap::nativeStdFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v22 + 3);
  if (SlowCase >= *((_QWORD *)v22 + 4))
  {
    SlowCase = *((_QWORD *)v22 + 5);
    if ((SlowCase & 1) != 0)
    {
      v34 = (uint64_t)v22;
      JSC::sanitizeStackForVM((JSC *)a1, v13, v14, v15, v16, v17, v18, v19);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v34, a1 + 192, 48, 0, 0, v35, v36, v37);
      goto LABEL_6;
    }
    v33 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v22 + 6);
    *((_QWORD *)v22 + 4) = SlowCase + HIDWORD(v33);
    *((_QWORD *)v22 + 5) = SlowCase + (int)v33;
  }
  *((_QWORD *)v22 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v24 = (JSC::JSFunction *)JSC::JSCallee::JSCallee(SlowCase, a1, a2, v21);
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  v25 = *a5;
  *a5 = 0;
  *(_QWORD *)(SlowCase + 32) = v25;
  JSC::JSFunction::finishCreation(v24, (JSC::VM *)a1, HostFunction, a3, (const WTF::String *)a4, v29, v26, v27, v28);
  return SlowCase;
}

uint64_t JSC::runStdFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return (*(uint64_t (**)(_QWORD, JSC *))(**(_QWORD **)(*((_QWORD *)a2 + 3) + 32) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32), this);
}

void JSC::JSONObject::finishCreation(JSC::JSONObject *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x400000002;
  *(_QWORD *)(v5 + 8) = "JSON";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

uint64_t JSC::PropertyNameForFunctionCall::value(JSC::PropertyNameForFunctionCall *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  char *v34;
  WTF::StringImpl *v35;
  WTF::AtomStringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::AtomStringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::AtomStringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;

  result = *((_QWORD *)this + 2);
  if (result)
    return result;
  v11 = *(WTF::StringImpl **)this;
  if (!*(_QWORD *)this)
  {
    v28 = *((unsigned int *)this + 2);
    if (v28 <= 9)
      return *((_QWORD *)a2 + v28 + 5325);
    if (v28 > 0xFF)
    {
      v29 = (char *)a2 + 60656;
      v30 = 9 * ((v28 + ~((_DWORD)v28 << 15)) ^ ((v28 + ~((_DWORD)v28 << 15)) >> 10));
      v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
      v32 = (v31 ^ BYTE2(v31));
      v33 = (_DWORD *)((char *)a2 + 16 * v32 + 60656);
      if (*v33 == (_DWORD)v28)
      {
        v62 = &v29[16 * v32];
        v63 = *((_QWORD *)v62 + 1);
        v36 = (WTF::AtomStringImpl *)(v62 + 8);
        if (v63)
          goto LABEL_16;
      }
      *v33 = v28;
      WTF::String::number(v28, (uint64_t *)&v81);
      v34 = &v29[16 * v32];
      v37 = (WTF::StringImpl *)*((_QWORD *)v34 + 1);
      v36 = (WTF::AtomStringImpl *)(v34 + 8);
      v35 = v37;
      v38 = v81;
      v81 = 0;
      *(_QWORD *)v36 = v38;
      if (!v37)
        goto LABEL_16;
      v39 = *(_DWORD *)v35 - 2;
      if (*(_DWORD *)v35 == 2)
      {
        v40 = v36;
        WTF::StringImpl::~StringImpl(v35, v36, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        v36 = v40;
        v35 = v81;
        v81 = 0;
        if (!v35)
          goto LABEL_16;
        v39 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v40, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
          v36 = v40;
          goto LABEL_16;
        }
      }
      *(_DWORD *)v35 = v39;
LABEL_16:
      result = JSC::jsNontrivialString(a2, v36, a3, a4, a5, a6, a7, a8);
      *((_QWORD *)this + 2) = result;
      return result;
    }
    v36 = (JSC::VM *)((char *)a2 + 16 * v28 + 44272);
    if (*(_QWORD *)v36)
      goto LABEL_16;
    v57 = (WTF::StringImpl **)((char *)a2 + 16 * v28 + 44272);
    WTF::String::number(v28, (uint64_t *)&v81);
    v59 = v81;
    v81 = 0;
    v60 = *v57;
    *v57 = v59;
    if (v60)
    {
      v61 = *(_DWORD *)v60 - 2;
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v58, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        v60 = v81;
        v81 = 0;
        if (!v60)
          goto LABEL_24;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v72, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
          goto LABEL_24;
        }
      }
      *(_DWORD *)v60 = v61;
    }
LABEL_24:
    v36 = (WTF::AtomStringImpl *)v57;
    goto LABEL_16;
  }
  *(_DWORD *)v11 += 2;
  v81 = v11;
  *((_QWORD *)this + 2) = JSC::jsString((uint64_t)a2, (JSC::VM *)&v81, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = v81;
  v81 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return *((_QWORD *)this + 2);
}

void JSC::forEachInArrayLike<JSC::Stringifier::Stringifier(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0>(JSC::JSGlobalObject *a1, JSC::ScopedArguments *this, uint64_t **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  const WTF::StringImpl *v15;
  unint64_t Index;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  _QWORD *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  WTF::StringImpl *v133;
  int8x16_t v134;
  int v135;
  BOOL v136;
  int v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  int v152;
  int v153;
  int8x16_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  int v160;
  JSC::VMTraps *v161;
  uint64_t v162;
  unsigned __int8 *v165;
  WTF::StringImpl *v166[2];
  char v167;
  WTF::StringImpl *v168;

  v10 = this;
  v11 = *((_QWORD *)a1 + 7);
  v12 = *((unsigned __int8 *)this + 5);
  v162 = v11;
  if (v12 != 36)
  {
    if (v12 == 35)
    {
      if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x20) != 0)
      {
        v133 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
        v166[0] = v133;
        if (*(_DWORD *)(v11 + 80))
        {
          v153 = *(_DWORD *)(v11 + 80);
          if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v11 + 16))
            goto LABEL_189;
        }
        v10 = this;
        if ((unint64_t)v133 >= 0xFFFE000000000000)
        {
LABEL_143:
          v13 = v133 & ~((int)v133 >> 31);
          goto LABEL_4;
        }
      }
      else
      {
        v138 = *(WTF::StringImpl **)(*((_QWORD *)this + 1) - 16);
        v166[0] = v138;
        if ((unint64_t)v138 >= 0xFFFE000000000000)
        {
          v13 = v138 & ~((int)v138 >> 31);
          goto LABEL_4;
        }
      }
      v149 = JSC::JSValue::toIntegerOrInfinity(v166, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v150 = 9.00719925e15;
      if (v149 <= 9.00719925e15)
        v150 = v149;
      if (v149 > 0.0)
        v13 = (unint64_t)v150;
      else
        v13 = 0;
      goto LABEL_4;
    }
    if (v12 != 33)
    {
      if (v12 == 34)
      {
        v13 = JSC::ScopedArguments::length(this, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_4;
      }
      v133 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
      v166[0] = v133;
      if (*(_DWORD *)(v11 + 80))
      {
        v152 = *(_DWORD *)(v11 + 80);
        if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v10 = this;
        if (*(_QWORD *)(v11 + 16))
        {
          v13 = 0;
          goto LABEL_4;
        }
      }
      if ((unint64_t)v133 >= 0xFFFE000000000000)
        goto LABEL_143;
      v151 = JSC::JSValue::toIntegerOrInfinity(v166, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v134);
      if (v151 > 0.0)
      {
        if (v151 > 9.00719925e15)
          v151 = 9.00719925e15;
        v13 = (unint64_t)v151;
        goto LABEL_182;
      }
LABEL_189:
      v13 = 0;
LABEL_182:
      v10 = this;
      goto LABEL_4;
    }
    v139 = *((_QWORD *)this + 5);
    if (!v139
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v139 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      LODWORD(v140) = *((_DWORD *)this + 8);
LABEL_167:
      v13 = v140;
      goto LABEL_4;
    }
    v140 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
    v166[0] = v140;
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_194;
    v160 = *(_DWORD *)(v11 + 80);
    if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_194:
      if ((unint64_t)v140 >= 0xFFFE000000000000)
      {
LABEL_195:
        v10 = this;
        goto LABEL_167;
      }
      v155 = (unint64_t)v140 - 0x2000000000000;
      if ((unint64_t)v140 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(v166, a1, (uint64_t)a3, a4, a5, a6, a7, a8, v154);
        v155 = v159;
      }
      v156 = (v155 >> 52) & 0x7FF;
      if ((v156 - 1023) <= 0x53)
      {
        v157 = v155 >> (51 - (v155 >> 52));
        if (v156 > 0x433)
          LODWORD(v157) = v155 << ((v155 >> 52) - 51);
        if (v156 >= 0x41F)
          v158 = v157;
        else
          v158 = (((1 << ((v155 >> 52) + 1)) - 1) & v157) + (1 << ((v155 >> 52) + 1));
        if ((v155 & 0x8000000000000000) == 0)
          LODWORD(v140) = v158;
        else
          LODWORD(v140) = -v158;
        goto LABEL_195;
      }
    }
    LODWORD(v140) = 0;
    goto LABEL_195;
  }
  if ((*((_BYTE *)this + 4) & 0xE) == 0)
  {
    if (*(_DWORD *)(v11 + 80))
    {
      v137 = *(_DWORD *)(v11 + 80);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    return;
  }
  v13 = *(unsigned int *)(*((_QWORD *)this + 1) - 8);
LABEL_4:
  if (!*(_DWORD *)(v11 + 80))
  {
    if (!v13)
      return;
    goto LABEL_6;
  }
  v135 = *(_DWORD *)(v11 + 80);
  if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
    v136 = 1;
  else
    v136 = v13 == 0;
  if (!v136)
  {
LABEL_6:
    v14 = 0;
    v161 = (JSC::VMTraps *)(v11 + 64);
    while (1)
    {
      Index = JSC::JSObject::getIndex(v10, a1, v14, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v11 + 80))
      {
        v113 = *(_DWORD *)(v11 + 80);
        if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v161, 7u, (uint64_t)v15, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
          return;
      }
      v165 = (unsigned __int8 *)Index;
      v17 = a3[2];
      if ((Index & 0xFFFE000000000002) != 0)
        break;
      v18 = *(unsigned __int8 *)(Index + 5);
      if (v18 >= 0x17)
      {
        v19 = v18 - 30;
        v20 = v19 > 0x2F;
        v21 = (1 << v19) & 0xC00000000001;
        if (v20 || v21 == 0)
          goto LABEL_70;
LABEL_19:
        Index = (unint64_t)JSC::JSValue::toStringSlowCase(&v165, **a3, (JSC::Structure *)1, a4, a5, a6, a7, a8);
        goto LABEL_20;
      }
      if (v18 != 2)
        goto LABEL_70;
LABEL_20:
      v23 = *a3[1];
      if (*(_DWORD *)(v23 + 80))
      {
        v114 = *(_DWORD *)(v23 + 80);
        if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)v15, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v23 + 16))
          return;
      }
      v24 = (JSC::JSGlobalObject *)**a3;
      v25 = *(WTF::StringImpl **)(Index + 8);
      v26 = *((_QWORD *)v24 + 7);
      if ((v25 & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)Index, v24);
        if (!*(_DWORD *)(v26 + 80))
          goto LABEL_81;
        v132 = *(_DWORD *)(v26 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, (uint64_t)v15, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v26 + 16))
        {
          v25 = 0;
          v73 = v166[0];
          v166[0] = 0;
          if (v73)
            goto LABEL_83;
        }
        else
        {
LABEL_81:
          v25 = v166[0];
          if (v166[0])
          {
            *(_DWORD *)v166[0] += 2;
            v166[0] = 0;
            v73 = v25;
LABEL_83:
            if (*(_DWORD *)v73 == 2)
            {
              WTF::StringImpl::~StringImpl(v73, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
            }
            else
            {
              *(_DWORD *)v73 -= 2;
            }
          }
        }
      }
      else if ((*((_BYTE *)v25 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v25 += 2;
      }
      else
      {
        v79 = *(WTF::StringImpl **)(v26 + 64768);
        if (v79 != v25)
        {
          *(_DWORD *)v25 += 2;
          *(_QWORD *)(v26 + 64768) = v25;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
            {
              WTF::StringImpl::~StringImpl(v79, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
            }
            else
            {
              *(_DWORD *)v79 -= 2;
            }
          }
          v80 = *(WTF::StringImpl **)(Index + 8);
          if (v80)
          {
            if ((*((_BYTE *)v80 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v80 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v80, v15, a4, a5, a6, a7, a8, (WTF *)v166);
              v80 = v166[0];
            }
          }
          v81 = *(WTF::StringImpl **)(v26 + 64776);
          *(_QWORD *)(v26 + 64776) = v80;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
            {
              WTF::StringImpl::~StringImpl(v81, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
            }
            else
            {
              *(_DWORD *)v81 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(Index + 8) + 16) & 0x10) == 0)
        {
          v82 = *(WTF::StringImpl **)(v26 + 64776);
          *(_DWORD *)v82 += 2;
          v166[0] = v82;
          __dmb(0xAu);
          v83 = *(WTF::StringImpl **)(Index + 8);
          *(WTF::StringImpl **)(Index + 8) = v166[0];
          v166[0] = v83;
          v84 = (_QWORD *)(v26 + 808);
          v85 = *(unsigned int *)(v26 + 820);
          if ((_DWORD)v85 == *(_DWORD *)(v26 + 816))
          {
            v87 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)v166);
            v85 = *(unsigned int *)(v26 + 820);
            v86 = (WTF::StringImpl **)(*(_QWORD *)(v26 + 808) + 8 * v85);
            v83 = *v87;
          }
          else
          {
            v86 = (WTF::StringImpl **)(*v84 + 8 * v85);
            v87 = v166;
          }
          *v87 = 0;
          *v86 = v83;
          *(_DWORD *)(v26 + 820) = v85 + 1;
          v88 = v166[0];
          v166[0] = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::~StringImpl(v88, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
            }
            else
            {
              *(_DWORD *)v88 -= 2;
            }
          }
        }
        v25 = *(WTF::StringImpl **)(v26 + 64776);
        *(_DWORD *)v25 += 2;
        v11 = v162;
      }
      v27 = *a3[1];
      if (*(_DWORD *)(v27 + 80))
      {
        v115 = *(_DWORD *)(v27 + 80);
        if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, (uint64_t)v15, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v27 + 16))
        {
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
          return;
        }
      }
      v168 = v25;
      v28 = *((_DWORD *)v25 + 4);
      if ((v28 & 0x20) != 0)
      {
        if ((v17[6] & 1) == 0 || *((_BYTE *)v17 + 49) && (*((_BYTE *)v25 + 36) & 4) != 0)
        {
LABEL_68:
          v10 = this;
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::~StringImpl(v25, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
          goto LABEL_70;
        }
      }
      else if ((v17[6] & 2) == 0)
      {
        goto LABEL_68;
      }
      v29 = v17[3];
      v30 = *(unsigned int *)(v29 + 20);
      if (v30 <= 0x13)
      {
        if ((_DWORD)v30)
        {
          v56 = *(WTF::StringImpl ***)(v29 + 8);
          while (*v56 != v25)
          {
            ++v56;
            if (!--v30)
              goto LABEL_76;
          }
          goto LABEL_67;
        }
LABEL_76:
        v33 = v25;
        if ((v28 & 0x20) != 0)
        {
LABEL_77:
          v54 = *(_DWORD *)v33 + 2;
          goto LABEL_64;
        }
LABEL_32:
        if ((v28 & 0x10) != 0)
        {
          *(_DWORD *)v33 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v17[5] + 41912), (unint64_t)v33, v15, a4, a5, a6, a7, a8, v166);
          v33 = v166[0];
        }
        v54 = *(_DWORD *)v33;
        *(_DWORD *)v33 += 2;
        if (v54)
        {
LABEL_64:
          *(_DWORD *)v33 = v54;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v33, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        v166[0] = v33;
        v55 = *(unsigned int *)(v29 + 20);
        if ((_DWORD)v55 == *(_DWORD *)(v29 + 16))
        {
          v74 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29 + 8, v55 + 1, (unint64_t)v166);
          v75 = *(unsigned int *)(v29 + 20);
          v76 = *(_QWORD *)(v29 + 8);
          v77 = *v74;
          *v74 = 0;
          *(_QWORD *)(v76 + 8 * v75) = v77;
          v78 = v166[0];
          *(_DWORD *)(v29 + 20) = v75 + 1;
          v166[0] = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
            {
              WTF::StringImpl::~StringImpl(v78, v24, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
            }
            else
            {
              *(_DWORD *)v78 -= 2;
            }
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v55) = v33;
          *(_DWORD *)(v29 + 20) = v55 + 1;
        }
        goto LABEL_67;
      }
      v32 = v17 + 4;
      v31 = v17[4];
      if (!v31 || !*(_DWORD *)(v31 - 12))
      {
        v34 = *(uint64_t **)(v29 + 8);
        v35 = &v34[v30];
        while (1)
        {
          v36 = *v34;
          v37 = *v32;
          if (*v32
            || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v17 + 4, 8uLL, 0, a4, a5, a6, a7, a8), (v37 = *v32) != 0))
          {
            v38 = *(_DWORD *)(v37 - 8);
          }
          else
          {
            v38 = 0;
          }
          v39 = (~(v36 << 32) + v36) ^ ((unint64_t)(~(v36 << 32) + v36) >> 22);
          v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
          v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
          v42 = v38 & ((v41 >> 31) ^ v41);
          v43 = (_QWORD *)(v37 + 8 * v42);
          v44 = *v43;
          if (*v43)
          {
            v45 = 0;
            v46 = 1;
            while (v44 != v36)
            {
              if (v44 == -1)
                v45 = v43;
              v42 = (v42 + v46) & v38;
              v43 = (_QWORD *)(v37 + 8 * v42);
              v44 = *v43;
              ++v46;
              if (!*v43)
              {
                if (v45)
                {
                  *v45 = 0;
                  --*(_DWORD *)(*v32 - 16);
                  v43 = v45;
                }
                goto LABEL_45;
              }
            }
            goto LABEL_53;
          }
LABEL_45:
          *v43 = v36;
          v47 = *v32;
          v48 = *v32 ? *(_DWORD *)(v47 - 12) + 1 : 1;
          *(_DWORD *)(v47 - 12) = v48;
          v49 = *v32;
          v50 = *v32 ? *(_DWORD *)(v49 - 12) : 0;
          v51 = (*(_DWORD *)(v49 - 16) + v50);
          v52 = *(unsigned int *)(v49 - 4);
          if (v52 > 0x400)
            break;
          if (3 * v52 <= 4 * v51)
          {
            if (!(_DWORD)v52)
            {
              v53 = 8;
LABEL_57:
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v17 + 4, v53, (uint64_t)v43, a4, a5, a6, a7, a8);
              goto LABEL_53;
            }
LABEL_61:
            v53 = ((_DWORD)v52 << (6 * *(_DWORD *)(v49 - 12) >= (2 * v52)));
            goto LABEL_57;
          }
LABEL_53:
          if (++v34 == v35)
            goto LABEL_30;
        }
        if (v52 > 2 * v51)
          goto LABEL_53;
        goto LABEL_61;
      }
LABEL_30:
      WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v17 + 4, (uint64_t *)&v168, a4, a5, a6, a7, a8, (uint64_t)v166);
      v11 = v162;
      if (v167)
      {
        v33 = v168;
        v29 = v17[3];
        v28 = *((_DWORD *)v168 + 4);
        if ((v28 & 0x20) != 0)
          goto LABEL_77;
        goto LABEL_32;
      }
LABEL_67:
      if (v25)
        goto LABEL_68;
      v10 = this;
LABEL_70:
      if (++v14 == v13)
        return;
    }
    if (!(Index >> 49))
      goto LABEL_70;
    goto LABEL_19;
  }
}

uint64_t JSC::Stringifier::appendStringifiedValue(JSC **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC **v10;
  JSC::VM *v11;
  JSC::VM *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  JSC::VM *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD **v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  JSC *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 isArraySlow;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int8x16_t *v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  JSC **v44;
  _QWORD *v45;
  uint64_t *v46;
  int **v47;
  JSC::VM *v48;
  unsigned int v49;
  int *v50;
  unsigned int v51;
  unsigned int v52;
  JSC::JSGlobalObject **v53;
  JSC *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  JSC::JSGlobalObject *v61;
  WTF::Thread *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  JSC::Interpreter *v69;
  int v70;
  JSC::JSGlobalObject *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  WTF *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int *v84;
  int v85;
  unsigned int v86;
  JSC::CodeBlock *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  int v98;
  uint64_t v99;
  _BOOL4 v100;
  char **v101;
  uint64_t v102;
  int v105;
  uint64_t v106;
  JSC **v107;
  JSC::VM *v108;
  uint64_t result;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  _WORD *v116;
  uint64_t v117;
  uint64_t (*v118)();
  unsigned int *v119;
  unsigned int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  _WORD *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  unint64_t StatusReg;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v138;
  JSC::VM *v139;
  unsigned int v140;
  _BYTE *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  JSC::JSGlobalObject **v159;
  unint64_t v160;
  unint64_t v161;
  JSC::VM *v162;
  JSC::VM *v163;
  int v164;
  unsigned int v165;
  int v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  WTF::AtomStringImpl *v171;
  int v172;
  _WORD *v173;
  uint64_t v174;
  uint64_t v175;
  JSC::Structure *v176;
  JSC::JSGlobalObject *v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  WTF::StringImpl *v188;
  unsigned int v189;
  int v190;
  WTF::StringImpl *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  _BYTE *v199;
  int *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  unsigned int v203;
  int v204;
  _BYTE *v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _WORD *v212;
  int *v213;
  unint64_t v214;
  unsigned __int16 *v215;
  unint64_t v216;
  int v217;
  unsigned __int8 *v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  _WORD *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  size_t v227;
  char *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  char *v239;
  char *v240;
  int8x16_t *v241;
  unsigned int v242;
  uint64_t v243;
  unsigned __int16 *v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  int8x16_t *v248;
  int8x16_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  JSC::VM *v258;
  WTF *v259;
  int v260;
  unint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  int v268;
  JSC::VM *v269;
  JSC::VM *v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  JSC::VM *v277;
  char OwnStaticPropertySlot;
  JSC::VM *v279;
  unsigned __int8 *v280;
  unsigned int v281;
  _QWORD *v282;
  _QWORD *v283;
  int v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  JSC *v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v297;
  BOOL v298;
  JSC::VM *v299;
  uint64_t v300;
  JSC::VM *v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  unint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  __int128 v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  char *v320;
  char *v321;
  char *v322;
  __int16 v323;
  WTF *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _DWORD *v328;
  int v329;
  _DWORD *v330;
  JSC::VM *v331;
  unint64_t v332;
  int v333;
  unsigned int *v334;
  int v335;
  unsigned int v336;
  JSC::CodeBlock *v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int v344;
  JSC::VM *v345;
  uint64_t *v346;
  int v347;
  WTF::StringImpl *v348;
  void *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t (*v353)();
  unsigned int *v354;
  unsigned int v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  JSC *v360;
  JSC::JSGlobalObject *v361;
  JSC::JSGlobalObject *v362;
  JSC::VM *v363;
  _DWORD *v364;
  unint64_t v365;
  uint64_t v366;
  _DWORD *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned int *v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unsigned int v377;
  uint64_t v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  int v382;
  int v383;
  uint64_t v384;
  JSC *v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  unsigned int v391;
  JSC::JSGlobalObject *v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  BOOL v397;
  int v398;
  uint64_t v399;
  JSC *v400;
  int appended;
  JSC::VM *v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  char v406;
  char v407;
  int v408;
  JSC *v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  WTF **v417;
  unsigned int *v418;
  _DWORD *v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  unint64_t v423;
  uint64_t v424;
  JSC *v425;
  const char *v426;
  unint64_t v427;
  JSC *v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  BOOL v433;
  uint64_t v434;
  _DWORD *v435;
  int v436;
  unsigned int v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  int v441;
  __int16 v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  JSC::VM *v447;
  uint64_t v448;
  JSC *v449;
  uint64_t v450;
  unint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  JSC *v465;
  JSC::JSGlobalObject *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  WTF **v473;
  unsigned int *v474;
  _DWORD *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  BOOL v483;
  int v484;
  uint64_t v485;
  char v486;
  WTF::StringImpl *v487;
  int v488;
  uint64_t v489;
  JSC *v490;
  unsigned int v491;
  const char *v492;
  unint64_t v493;
  uint64_t v494;
  JSC::JSGlobalObject *v495;
  JSC *v496;
  JSC::JSGlobalObject *v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  WTF::StringImpl *v502;
  WTF::AtomStringImpl *v503;
  JSC::JSGlobalObject *v504;
  unsigned int v505;
  uint64_t v506;
  WTF::StringImpl *v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _WORD *v512;
  _WORD *v513;
  unint64_t v514;
  unsigned __int16 *v515;
  unint64_t v516;
  int v517;
  unsigned __int8 *v518;
  unsigned int v519;
  int v520;
  uint64_t v521;
  _WORD *v522;
  char *v523;
  char *v524;
  unint64_t v525;
  JSC::JSGlobalObject *v526;
  unsigned int *v527;
  int v528;
  unint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  WTF::StringImpl **v533;
  uint64_t v534;
  WTF::StringImpl *v535;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  WTF::StringImpl *v546;
  uint64_t v547;
  uint64_t v548;
  _BYTE *v549;
  _BYTE *v550;
  uint64_t v551;
  unsigned __int8 *v552;
  unsigned int v553;
  int v554;
  _BYTE *v555;
  _BYTE *v556;
  uint64_t v557;
  WTF::StringImpl *v558;
  JSC::JSGlobalObject *v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  _DWORD *v568;
  JSC::JSGlobalObject *v569;
  unint64_t v570;
  void *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  JSC::JSGlobalObject *v578;
  JSC::JSGlobalObject *v579;
  uint64_t v580;
  JSC::JSGlobalObject *v581;
  uint64_t v582;
  WTF::StringImpl *v583;
  WTF::StringImpl **v584;
  uint64_t v585;
  unint64_t v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  uint64_t v595;
  WTF::StringImpl *v596;
  WTF::StringImpl **v597;
  uint64_t v598;
  unint64_t v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  JSC::JSGlobalObject *v608;
  JSC::JSGlobalObject *v609;
  JSC::JSGlobalObject *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  JSC::JSGlobalObject *v618;
  uint64_t *v619;
  _BOOL4 IndexQuicklyForTypedArray;
  _BOOL4 v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t v624;
  int8x16_t *v625;
  char *v626;
  unsigned int v627;
  int v628;
  uint64_t v629;
  char *v630;
  uint64_t v631;
  unsigned int v632;
  int *v633;
  _BYTE *v634;
  char *v635;
  WTF::StringImpl *v636;
  JSC::VM *v637;
  WTF::StringImpl *v638;
  JSC *v639;
  int v640;
  unint64_t v641;
  WTF::StringImpl *v642;
  uint64_t v643;
  _BYTE *v644;
  JSC::JSGlobalObject *v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  int v649;
  int8x16_t *v650;
  int v651;
  _BYTE *v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  unsigned int v662;
  unsigned int v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  unint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  unsigned int v673;
  int v674;
  unint64_t v675;
  int v676;
  uint64_t v677;
  unsigned int v678;
  int v679;
  JSC::VM *v680;
  unint64_t v681;
  JSC::VM *v682;
  uint64_t v683;
  JSC::VM *v684;
  int v685;
  JSC::VM *v686;
  int v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  unsigned __int16 *v692;
  uint64_t v693;
  unsigned int v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t v697;
  unint64_t v699;
  unint64_t v701;
  void *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  WTF *v709;
  uint64_t v710;
  unint64_t v711;
  const WTF::StringImpl *v712;
  int v713;
  WTF *v714;
  JSC::JSGlobalObject *v715;
  uint64_t v716;
  JSC::JSGlobalObject *v717;
  JSC::JSGlobalObject *v718;
  int v719;
  JSC::JSGlobalObject *v720;
  unint64_t OutOfMemoryError;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  double v727;
  JSC::Exception *v728;
  JSC::JSGlobalObject *v729;
  JSC::JSGlobalObject *v730;
  int v731;
  JSC::VM **v732;
  uint64_t v733;
  WTF *v734;
  int v735;
  JSC::VM *v736;
  JSC::VM *v737;
  uint64_t v738;
  unsigned int *v739;
  uint64_t v740;
  uint64_t Index;
  int v742;
  char v743;
  _BOOL4 v744;
  unint64_t v745;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v747;
  uint64_t v748;
  unint64_t v749;
  int v750;
  uint64_t v751;
  WTF *v752;
  int8x16_t v753;
  unsigned int v754;
  JSC::JSGlobalObject *v755;
  JSC::JSGlobalObject *v756;
  WTF::AtomStringImpl *v757;
  uint64_t v758;
  JSC *v759;
  WTF::StringImpl *v760;
  WTF::StringImpl *v761;
  WTF::StringImpl *v762;
  uint64_t v763;
  WTF *v764;
  int8x16_t v765;
  int v766;
  _BYTE *v767;
  uint64_t v768;
  int v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unsigned int v773;
  uint64_t v774;
  BOOL v775;
  unsigned __int16 *v776;
  uint64_t v777;
  unsigned int v778;
  JSC::JSGlobalObject *v779;
  const char *v780;
  uint64_t v781;
  unint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  WTF::StringImpl *v790;
  unint64_t v791;
  void *v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t v799;
  void *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  WTF *v808;
  uint64_t v809;
  _BOOL4 v810;
  int v811;
  unsigned int v812;
  uint64_t v813;
  _BYTE *v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  void *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  char v843;
  unsigned int v844;
  char v845;
  uint64_t v846;
  unsigned int v847;
  BOOL v848;
  WTF::AtomStringImpl *v849;
  uint64_t v850;
  WTF::StringImpl *v851;
  int v852;
  unsigned __int16 v853;
  int v854;
  unsigned int v855;
  __int16 v856;
  unsigned int v857;
  __int16 v858;
  unsigned __int16 v859;
  int v860;
  unsigned int v861;
  __int16 v862;
  __int16 v863;
  unsigned int v864;
  __int16 v865;
  __int16 v866;
  unsigned int v867;
  __int16 v868;
  char v869;
  unsigned int v870;
  char v871;
  __int16 v872;
  unsigned int v873;
  __int16 v874;
  __int16 v875;
  unsigned int v876;
  __int16 v877;
  int v878;
  int v879;
  int v880;
  unsigned int v881;
  uint64_t v882;
  unsigned __int8 *v883;
  int v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t SlowCase;
  unint64_t v889;
  void *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  JSC::JSGlobalObject *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  int v903;
  uint64_t v904;
  uint64_t v905;
  char *v906;
  uint64_t v907;
  WTF::StringImpl *v908;
  _DWORD *v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  WTF::AtomStringImpl *v918;
  unint64_t v919;
  void *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  _DWORD *v927;
  double v928;
  const unsigned __int8 *v929;
  JSC **v930;
  uint64_t *v931;
  JSC *v932;
  JSC::VM *v933;
  unint64_t v934;
  unsigned __int8 *v935;
  uint64_t v936;
  unsigned int v937;
  _BOOL4 v938;
  JSC::VM *v939;
  unsigned __int8 *v940;
  uint64_t v941;
  unsigned int v942;
  JSC::JSGlobalObject **v943;
  JSC::VM *v944;
  uint64_t v945;
  int v946;
  uint64_t v947;
  int v948;
  int v949;
  uint64_t v950;
  JSC::VM *v951;
  JSC::JSGlobalObject *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  BOOL v956;
  int v957;
  unint64_t v958;
  uint64_t v959;
  unsigned __int8 *v961;
  uint64_t v962;
  unsigned int v963;
  uint64_t v964;
  _DWORD *v965;
  uint64_t v966;
  BOOL v967;
  unsigned int *v968;
  WTF *v969;
  WTF *v970;
  unint64_t v971;
  uint64_t *v972;
  JSC *v973;
  JSC **v974;
  JSC::JSGlobalObject *v975;
  JSC::JSGlobalObject *v976;
  unint64_t v977;
  JSC::VM *v978;
  _DWORD *v979;
  JSC *v980;
  unint64_t v981;
  JSC::VM *v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  uint64_t v986;
  _DWORD *v987;
  unint64_t v988;
  WTF::StringImpl *v989;
  uint64_t v990;
  _DWORD *v991;
  JSC::CodeBlock *v992;
  JSC::VM *v993[2];
  JSC::CodeBlock *v994;
  _OWORD __s[6];
  __int128 v996;
  size_t __n[2];
  __int128 __dst;
  __int128 v999;
  _BYTE v1000[32];
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  uint64_t v1005;
  int8x16x2_t v1006;
  int8x16x2_t v1007;
  int8x16x2_t v1008;

  v10 = a1;
  v1005 = *MEMORY[0x1E0C80C00];
  v11 = (JSC::VM *)*((_QWORD *)*a1 + 7);
  v982 = v11;
  if ((unint64_t)&v968 < *((_QWORD *)v11 + 1))
  {
    v25 = *a1;
LABEL_490:
    JSC::throwStackOverflowError((unint64_t)v25, &v982, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v12 = (JSC::VM *)a5;
  v13 = a4;
  v14 = a3;
  v15 = 0xFFFE000000000002;
  if ((a3 & 0xFFFE000000000002) != 0
    || ((v16 = *(unsigned __int8 *)(a3 + 5), v16 <= 0x16) ? (v17 = v16 == 3) : (v17 = 1), !v17))
  {
    v18 = v11;
    goto LABEL_8;
  }
  v977 = a4;
  v978 = (JSC::VM *)a5;
  v979 = (_DWORD *)a2;
  v988 = a3;
  v53 = (JSC::JSGlobalObject **)*a1;
  v54 = (JSC *)*((_QWORD *)*a1 + 7);
  v55 = (uint64_t *)((char *)v54 + 39696);
  if (*(unsigned __int8 *)(a3 + 5) < 0x17u
    || (v56 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40)) == 0
    || *(_BYTE *)(v56 + 5) == 1
    || (v57 = *(_QWORD *)(v56 + 64)) == 0
    || (v58 = *(_QWORD *)(v57 + 112), v58 <= 1))
  {
    a9.i64[0] = 0xFFFFFFFF00000000;
    *(_QWORD *)&v999 = 0xFFFFFFFF00000000;
    v1000[24] = 0;
    LOBYTE(v1001) = 0;
    *((_QWORD *)&v1001 + 1) = 0;
    *(_QWORD *)&v1002 = 0;
    *(_QWORD *)v1000 = 0;
    *(_QWORD *)&v1000[8] = 0;
    *((_QWORD *)&v999 + 1) = a3;
    *(_QWORD *)&v1000[13] = 0;
    v138 = *(_QWORD *)(*((_QWORD *)v54 + 5244) + 2488);
    v139 = v53[7];
    v140 = *(unsigned __int8 *)(a3 + 5);
    if (v140 > 0x16)
      goto LABEL_241;
    v681 = *(_QWORD *)(*((_QWORD *)v54 + 5244) + 2488);
    if (v140 != 2)
    {
LABEL_1069:
      v682 = v11;
      v683 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v988, (unint64_t)v53);
      if (!v683)
      {
        LODWORD(v138) = 0;
        v15 = 0xFFFE000000000002;
        v12 = v978;
        v11 = v682;
        goto LABEL_294;
      }
      v14 = v683;
      v139 = v53[7];
      v12 = v978;
      v11 = v682;
      v138 = v681;
LABEL_241:
      v141 = (_BYTE *)(v14 + 6);
      v142 = v138 >> 4;
      v143 = v14;
      if ((*(_BYTE *)(v14 + 6) & 8) == 0)
      {
        v144 = v14;
        do
        {
          v145 = *(_DWORD *)v144 & 0xFFFFFFFE;
          v146 = 16 * v145;
          if (!(_DWORD)v142 || (v142 & ~*(_DWORD *)(16 * v145 + 0x20)) != 0)
            goto LABEL_254;
          v147 = *(_QWORD *)(16 * v145 + 0x58);
          if (!v147)
          {
            v158 = *(_QWORD *)(16 * v145 + 0x40);
            if (!v158 || *(_BYTE *)(v158 + 5) != 1 && *(_DWORD *)(v158 + 80) < 2u)
              goto LABEL_254;
            v972 = v55;
            v973 = v54;
            v159 = v53;
            v160 = v142;
            v161 = v138;
            v162 = v11;
            v163 = v139;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v146, v139, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            v139 = v163;
            v11 = v162;
            v138 = v161;
            v142 = v160;
            v53 = v159;
            v55 = v972;
            v54 = v973;
            v12 = v978;
            if (!v147)
              goto LABEL_254;
          }
          if (!*(_DWORD *)(v147 + 24))
            goto LABEL_254;
          v148 = *(_QWORD *)(v147 + 16);
          v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
          v150 = *(unsigned int *)(v147 + 8);
          v151 = *(_DWORD *)(v138 + 16);
          if ((v148 & 1) != 0)
          {
            if ((v151 & 0x20) != 0)
              v151 = *(_DWORD *)(v138 + 32);
            v152 = *(_DWORD *)(v147 + 12);
            v153 = (v151 >> 8) & *(_QWORD *)&v152;
            v154 = *(unsigned __int8 *)(v149 + v153);
            if (!*(_BYTE *)(v149 + v153))
              goto LABEL_254;
            v155 = v149 + v150;
            v156 = 1;
            while (1)
            {
              v157 = *(_QWORD *)(v155 + 8 * (v154 - 1));
              if (v138 == (v157 & 0xFFFFFFFFFFFFLL))
                break;
              v153 = ((_DWORD)v153 + v156) & v152;
              v154 = *(unsigned __int8 *)(v149 + v153);
              ++v156;
              if (!*(_BYTE *)(v149 + v153))
                goto LABEL_254;
            }
            a6 = (v157 >> 16) & 0xFF00000000 | HIBYTE(v157);
          }
          else
          {
            if ((v151 & 0x20) != 0)
              v151 = *(_DWORD *)(v138 + 32);
            v164 = *(_DWORD *)(v147 + 12);
            v165 = v164 & (v151 >> 8);
            v166 = *(_DWORD *)(v149 + 4 * v165);
            if (!v166)
              goto LABEL_254;
            v167 = v149 + 4 * v150;
            v168 = 1;
            while (1)
            {
              v169 = (v166 - 1);
              if (v138 == *(_QWORD *)(v167 + 16 * v169))
                break;
              v165 = (v165 + v168) & v164;
              v166 = *(_DWORD *)(v149 + 4 * v165);
              ++v168;
              if (!v166)
                goto LABEL_254;
            }
            a6 = *(unsigned int *)(v167 + 16 * v169 + 8) | ((unint64_t)*(unsigned __int8 *)(v167 + 16 * v169 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v185 = v144 + 16;
              v186 = a6 << 32;
            }
            else
            {
              v185 = *(_QWORD *)(v144 + 8) - 8;
              v186 = 0x3F00000000 - (a6 << 32);
            }
            v15 = 0xFFFE000000000002;
            a4 = *(_QWORD *)(v185 + (v186 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_316;
            v187 = *(unsigned __int8 *)(a4 + 5);
            if (v187 == 5)
            {
              v279 = v11;
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v144, (uint64_t)v11, (uint64_t)&__dst, a4, SHIDWORD(a6), a6);
              v11 = v279;
              v12 = v978;
              v15 = 0xFFFE000000000002;
              LODWORD(v138) = 1;
              goto LABEL_294;
            }
            if (v187 != 6)
            {
LABEL_316:
              *(_QWORD *)&__dst = a4;
              *(_QWORD *)v1000 = v144;
              *(_QWORD *)&v999 = __PAIR64__(a6, HIDWORD(a6));
              LODWORD(v138) = 1;
              *(_WORD *)&v1000[16] = 257;
              goto LABEL_294;
            }
            v302 = *(_DWORD *)(v146 + 16) & 3;
            v303 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v305 = *(_QWORD *)(a4 + 24);
              v304 = *(_QWORD *)(a4 + 32);
              *(_QWORD *)&__dst = *(_QWORD *)(a4 + 8);
              *((_QWORD *)&__dst + 1) = v303;
              LODWORD(v999) = HIDWORD(a6);
              *(_QWORD *)v1000 = v144;
              v1000[17] = 3;
              LODWORD(v138) = 1;
              if (v302 != 2)
                v1000[16] = 1;
              v1000[19] = 1;
              *((_QWORD *)&v1001 + 1) = v305;
              *(_QWORD *)&v1002 = v304;
              v15 = 0xFFFE000000000002;
            }
            else
            {
              *(_QWORD *)&__dst = *(_QWORD *)(a4 + 8);
              *((_QWORD *)&__dst + 1) = v303;
              LODWORD(v999) = HIDWORD(a6);
              *(_QWORD *)v1000 = v144;
              LODWORD(v138) = 1;
              v1000[17] = 3;
              if (v302 != 2)
                v1000[16] = 1;
              v15 = 0xFFFE000000000002;
              v12 = v978;
            }
            goto LABEL_294;
          }
LABEL_254:
          if ((*v141 & 0x20) != 0)
          {
            v975 = v11;
            v277 = v139;
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v144, v139, v138, (uint64_t)&__dst);
            v139 = v277;
            v11 = v975;
            v12 = v978;
            if ((OwnStaticPropertySlot & 1) != 0)
            {
              LODWORD(v138) = 1;
              v15 = 0xFFFE000000000002;
              goto LABEL_294;
            }
          }
          v143 = *(_QWORD *)(v146 + 48);
          if (!v143)
            v143 = *(_QWORD *)(v144 + 16);
          v15 = 0xFFFE000000000002;
          if ((v143 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v143 + 5) < 0x17u)
          {
            if (!v138)
              goto LABEL_294;
            v172 = *(_DWORD *)(v138 + 16);
            if ((v172 & 0x20) != 0)
              goto LABEL_293;
            v173 = *(_WORD **)(v138 + 8);
            v174 = *(unsigned int *)(v138 + 4);
            if ((v172 & 4) == 0)
            {
              if ((_DWORD)v174)
              {
                v175 = (unsigned __int16)*v173 - 48;
                if (v175 <= 9 && (*v173 != 48 || v174 <= 1))
                {
                  v244 = v173 + 1;
                  v245 = v174 - 1;
                  while (v245)
                  {
                    if (v175 > 0x19999999)
                      goto LABEL_293;
                    v246 = *v244 - 48;
                    if (v246 > 9)
                      goto LABEL_293;
                    LODWORD(v138) = 0;
                    v298 = __CFADD__(v246, 10 * v175);
                    v175 = v246 + 10 * (_DWORD)v175;
                    v15 = 0xFFFE000000000002;
                    ++v244;
                    --v245;
                    if (v298)
                      goto LABEL_294;
                  }
                  if ((_DWORD)v175 != -1)
                    goto LABEL_418;
                }
              }
LABEL_293:
              LODWORD(v138) = 0;
              goto LABEL_294;
            }
            v930 = v10;
            v931 = v55;
            v932 = v54;
            v933 = v11;
            if (!(_DWORD)v174
              || (v175 = *(unsigned __int8 *)v173 - 48, v175 > 9)
              || v174 >= 2 && *(_BYTE *)v173 == 48)
            {
              LODWORD(v138) = 0;
LABEL_1462:
              v12 = v978;
              v11 = v933;
              v54 = v932;
              v55 = v931;
              v10 = v930;
              goto LABEL_294;
            }
            v935 = (unsigned __int8 *)v173 + 1;
            v936 = v174 - 1;
            v12 = v978;
            while (v936)
            {
              if (v175 > 0x19999999 || (v937 = *v935 - 48, v937 > 9))
              {
                LODWORD(v138) = 0;
                v15 = 0xFFFE000000000002;
                goto LABEL_1462;
              }
              LODWORD(v138) = 0;
              v298 = __CFADD__(v937, 10 * v175);
              v175 = v937 + 10 * (_DWORD)v175;
              ++v935;
              --v936;
              v15 = 0xFFFE000000000002;
              v11 = v933;
              v54 = v932;
              v55 = v931;
              v10 = v930;
              if (v298)
                goto LABEL_294;
            }
            v15 = 0xFFFE000000000002;
            v12 = v978;
            v11 = v933;
            v54 = v932;
            v55 = v931;
            v10 = v930;
            if ((_DWORD)v175 == -1)
              goto LABEL_293;
LABEL_418:
            v269 = v53[7];
            while (2)
            {
              v270 = v11;
              v271 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
              v272 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **, uint64_t, __int128 *))(16 * *(unsigned int *)(v271 + 0x4C) + 0x70))(v14, v53, v175, &__dst);
              v274 = v272;
              if (*((_DWORD *)v269 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v269, v273, a3, a4, a5, a6, a7, a8);
                if (((hasExceptionsAfterHandlingTraps | v274) & 1) != 0)
                {
                  LODWORD(v138) = !hasExceptionsAfterHandlingTraps;
                  goto LABEL_434;
                }
              }
              else if ((v272 & 1) != 0)
              {
                LODWORD(v138) = 1;
LABEL_434:
                v15 = 0xFFFE000000000002;
LABEL_435:
                v12 = v978;
                v11 = v270;
                goto LABEL_294;
              }
              v15 = 0xFFFE000000000002;
              v12 = v978;
              if (v1000[18] == 3)
              {
                if (v1000[20])
                {
                  LODWORD(v138) = 0;
                  goto LABEL_435;
                }
                v275 = *(unsigned __int8 *)(v14 + 5);
                v12 = v978;
                v11 = v270;
                if (v275 != 61)
                {
LABEL_423:
                  if ((v275 - 39) <= 0xA)
                  {
                    v934 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
                    v11 = v270;
                    v12 = v978;
                    v15 = 0xFFFE000000000002;
                    if (v934 <= v175)
                      goto LABEL_293;
                  }
                }
              }
              else
              {
                v11 = v270;
                v275 = *(unsigned __int8 *)(v14 + 5);
                if (v275 != 61)
                  goto LABEL_423;
                if (v1000[18] == 1)
                  goto LABEL_293;
              }
              if ((*(_WORD *)(v271 + 12) & 0x800) == 0 || v1000[18] == 3)
              {
                v276 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                if (!v276)
                  v276 = *(_QWORD *)(v14 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v276 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v14, v53);
                }
                else
                {
                  v276 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                  if (!v276)
                    v276 = *(_QWORD *)(v14 + 16);
                }
                if (*((_DWORD *)v269 + 20))
                {
                  v967 = JSC::VM::hasExceptionsAfterHandlingTraps(v269, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
                  v15 = 0xFFFE000000000002;
                  v12 = v978;
                  v11 = v270;
                  if (v967)
                    goto LABEL_293;
                }
                else
                {
                  v15 = 0xFFFE000000000002;
                  v12 = v978;
                  v11 = v270;
                }
              }
              if ((v276 & 0xFFFE000000000002) != 0)
                goto LABEL_293;
              LODWORD(v138) = 0;
              v14 = v276;
              if (*(unsigned __int8 *)(v276 + 5) <= 0x16u)
                goto LABEL_294;
              continue;
            }
          }
          v141 = (_BYTE *)(v143 + 6);
          v144 = v143;
        }
        while ((*(_BYTE *)(v143 + 6) & 8) == 0);
      }
      v973 = v54;
      v974 = v10;
      v972 = v55;
      v975 = v11;
      if (v138)
      {
        v651 = *(_DWORD *)(v138 + 16);
        if ((v651 & 0x20) == 0)
        {
          v652 = *(_BYTE **)(v138 + 8);
          v653 = v138;
          v654 = *(unsigned int *)(v138 + 4);
          if ((v651 & 4) != 0)
          {
            if ((_DWORD)v654)
            {
              v655 = *v652 - 48;
              if (v655 <= 9 && (v654 < 2 || *v652 != 48))
              {
                v940 = v652 + 1;
                v941 = v654 - 1;
                while (v941)
                {
                  v138 = v653;
                  if (v655 <= 0x19999999)
                  {
                    v942 = *v940 - 48;
                    if (v942 <= 9)
                    {
                      v298 = __CFADD__(v942, 10 * v655);
                      v655 = v942 + 10 * (_DWORD)v655;
                      ++v940;
                      --v941;
                      if (!v298)
                        continue;
                    }
                  }
                  goto LABEL_1009;
                }
LABEL_1525:
                v138 = v653;
                if ((_DWORD)v655 != -1)
                {
                  v943 = v53;
                  v944 = v53[7];
                  v55 = v972;
                  v54 = v973;
                  v10 = v974;
                  while (1)
                  {
                    v945 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
                    v946 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **, uint64_t, __int128 *))(16 * *(unsigned int *)(v945 + 0x4C) + 0x70))(v14, v943, v655, &__dst);
                    v948 = v946;
                    if (*((_DWORD *)v944 + 20))
                    {
                      v938 = JSC::VM::hasExceptionsAfterHandlingTraps(v944, v947, a3, a4, a5, a6, a7, a8);
                      if (((v938 | v948) & 1) != 0)
                      {
LABEL_1539:
                        LODWORD(v138) = !v938;
                        goto LABEL_1159;
                      }
                    }
                    else if ((v946 & 1) != 0)
                    {
                      goto LABEL_1158;
                    }
                    if (v1000[18] == 3)
                    {
                      if (v1000[20])
                        goto LABEL_1549;
                      v949 = *(unsigned __int8 *)(v14 + 5);
                      if (v949 == 61)
                        goto LABEL_1532;
                    }
                    else
                    {
                      v949 = *(unsigned __int8 *)(v14 + 5);
                      if (v949 == 61)
                      {
                        if (v1000[18] == 1)
                          goto LABEL_1549;
                        goto LABEL_1532;
                      }
                    }
                    if ((v949 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, v947, a3, a4, a5, a6, a7, a8) <= v655)
                    {
                      goto LABEL_1549;
                    }
LABEL_1532:
                    if ((*(_WORD *)(v945 + 12) & 0x800) == 0 || v1000[18] == 3)
                    {
                      v950 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                      if (!v950)
                        v950 = *(_QWORD *)(v14 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v950 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v14, v53);
                      }
                      else
                      {
                        v950 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                        if (!v950)
                          v950 = *(_QWORD *)(v14 + 16);
                      }
                      if (*((_DWORD *)v944 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v944, v947, a3, a4, a5, a6, a7, a8))
                      {
LABEL_1549:
                        LODWORD(v138) = 0;
                        goto LABEL_1159;
                      }
                    }
                    if ((v950 & 0xFFFE000000000002) != 0)
                      goto LABEL_1549;
                    LODWORD(v138) = 0;
                    v14 = v950;
                    v15 = 0xFFFE000000000002;
                    v12 = v978;
                    v11 = v975;
                    v943 = v53;
                    if (*(unsigned __int8 *)(v950 + 5) <= 0x16u)
                      goto LABEL_294;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v654)
          {
            v655 = *(unsigned __int16 *)v652 - 48;
            if (v655 <= 9 && (*(_WORD *)v652 != 48 || v654 <= 1))
            {
              v692 = (unsigned __int16 *)(v652 + 2);
              v693 = v654 - 1;
              while (v693)
              {
                v138 = v653;
                if (v655 <= 0x19999999)
                {
                  v694 = *v692 - 48;
                  if (v694 <= 9)
                  {
                    v298 = __CFADD__(v694, 10 * v655);
                    v655 = v694 + 10 * (_DWORD)v655;
                    ++v692;
                    --v693;
                    if (!v298)
                      continue;
                  }
                }
                goto LABEL_1009;
              }
              goto LABEL_1525;
            }
          }
        }
      }
LABEL_1009:
      v656 = v138;
      v976 = v53[7];
      v55 = v972;
      v54 = v973;
      v10 = v974;
      while (1)
      {
        v657 = 16 * (*(_DWORD *)v143 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v143 + 6) & 8) == 0)
          break;
        v878 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **, unint64_t, __int128 *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE) + 0x4C) + 0x68))(v143, v53, v656, &__dst);
        v879 = v878;
        if (*((_DWORD *)v976 + 20))
        {
          v938 = JSC::VM::hasExceptionsAfterHandlingTraps(v976, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
          if (((v938 | v879) & 1) != 0)
            goto LABEL_1539;
        }
        else if ((v878 & 1) != 0)
        {
          goto LABEL_1158;
        }
        if (v1000[18] == 3)
        {
          if (v1000[20])
            goto LABEL_1549;
          v880 = *(unsigned __int8 *)(v143 + 5);
          if (v880 != 61)
          {
LABEL_1383:
            if (!v656)
              goto LABEL_1023;
            if ((v880 - 50) < 0xFFFFFFF5)
              goto LABEL_1023;
            v881 = *(_DWORD *)(v656 + 16);
            if ((v881 & 0x20) != 0)
              goto LABEL_1023;
            v882 = *(unsigned int *)(v656 + 4);
            if (!(_DWORD)v882)
              goto LABEL_1023;
            v883 = *(unsigned __int8 **)(v656 + 8);
            if ((v881 & 4) == 0)
            {
              v884 = *(unsigned __int16 *)v883;
              if ((_DWORD)v882 == 1)
                goto LABEL_1389;
              if (v884 == 45)
              {
                v884 = *((unsigned __int16 *)v883 + 1);
                goto LABEL_1439;
              }
              if ((v884 - 48) >= 0xA && ((_DWORD)v882 != 8 || v884 != 73))
              {
LABEL_1452:
                if ((_DWORD)v882 != 3 || v884 != 78)
                  goto LABEL_1023;
              }
LABEL_1443:
              v971 = v971 & 0xFFFFFF0000000000 | v882 | ((unint64_t)((v881 >> 2) & 1) << 32);
              JSC::jsToNumber(v883, v971);
              WTF::numberToString(__s, v928);
              if (WTF::equal(v656, (unint64_t)__s, v929))
                goto LABEL_1549;
              goto LABEL_1023;
            }
            v884 = *v883;
            if ((_DWORD)v882 == 1)
            {
LABEL_1389:
              if ((v884 - 48) < 0xA)
                goto LABEL_1549;
              goto LABEL_1023;
            }
            if (v884 == 45)
            {
              v884 = v883[1];
LABEL_1439:
              if ((v884 - 48) < 0xA)
              {
                if ((_DWORD)v882 == 2)
                  goto LABEL_1549;
                goto LABEL_1443;
              }
              if ((_DWORD)v882 != 9)
                goto LABEL_1023;
            }
            else
            {
              if ((v884 - 48) < 0xA)
                goto LABEL_1443;
              if ((_DWORD)v882 != 8)
                goto LABEL_1452;
            }
            if (v884 != 73)
              goto LABEL_1023;
            goto LABEL_1443;
          }
        }
        else
        {
          v880 = *(unsigned __int8 *)(v143 + 5);
          if (v880 != 61)
            goto LABEL_1383;
          if (v1000[18] == 1)
            goto LABEL_1549;
        }
LABEL_1023:
        if ((*(_WORD *)(v657 + 12) & 0x800) == 0)
        {
          v669 = *(_DWORD *)v143;
LABEL_1025:
          v670 = *(_QWORD *)(16 * (v669 & 0xFFFFFFFE) + 0x30);
          if (!v670)
            v670 = *(_QWORD *)(v143 + 16);
          goto LABEL_1027;
        }
        v669 = *(_DWORD *)v143;
        if (v1000[18] == 3)
          goto LABEL_1025;
        v846 = 16 * (v669 & 0xFFFFFFFE);
        if ((*(_WORD *)(v846 + 12) & 0x800) != 0)
        {
          v670 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject **))(16
                                                                                     * *(unsigned int *)(v846 + 76)
                                                                                     + 0xB0))(v143, v53);
        }
        else
        {
          v670 = *(_QWORD *)(v846 + 48);
          if (!v670)
            v670 = *(_QWORD *)(v143 + 16);
        }
        if (*((_DWORD *)v976 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v976, (uint64_t)v11, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_1549;
        }
LABEL_1027:
        v15 = 0xFFFE000000000002;
        if ((v670 & 0xFFFE000000000002) != 0)
          goto LABEL_1120;
        LODWORD(v138) = 0;
        v143 = v670;
        v12 = v978;
        v11 = v975;
        if (*(unsigned __int8 *)(v670 + 5) <= 0x16u)
          goto LABEL_294;
      }
      if ((_DWORD)v142 && (v142 & ~*(_DWORD *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v658 = *(_QWORD *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE) + 0x58);
        if (v658
          || (v671 = *(_QWORD *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v671 + 5) == 1 || *(_DWORD *)(v671 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v143 & 0xFFFFFFFE)), v976, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v658))
        {
          if (*(_DWORD *)(v658 + 24))
          {
            v659 = *(_QWORD *)(v658 + 16);
            v660 = v659 & 0xFFFFFFFFFFFFFFFELL;
            v661 = *(unsigned int *)(v658 + 8);
            v662 = *(_DWORD *)(v656 + 16);
            if ((v659 & 1) != 0)
            {
              if ((v662 & 0x20) != 0)
                v662 = *(_DWORD *)(v656 + 32);
              v663 = *(_DWORD *)(v658 + 12);
              v664 = (v662 >> 8) & *(_QWORD *)&v663;
              v665 = *(unsigned __int8 *)(v660 + v664);
              if (*(_BYTE *)(v660 + v664))
              {
                v666 = v660 + v661;
                v667 = 1;
                while (1)
                {
                  v668 = *(_QWORD *)(v666 + 8 * (v665 - 1));
                  if (v656 == (v668 & 0xFFFFFFFFFFFFLL))
                    break;
                  v664 = ((_DWORD)v664 + v667) & v663;
                  v665 = *(unsigned __int8 *)(v660 + v664);
                  ++v667;
                  if (!*(_BYTE *)(v660 + v664))
                    goto LABEL_1022;
                }
                a6 = (v668 >> 16) & 0xFF00000000 | HIBYTE(v668);
                goto LABEL_1035;
              }
            }
            else
            {
              if ((v662 & 0x20) != 0)
                v662 = *(_DWORD *)(v656 + 32);
              v672 = *(_DWORD *)(v658 + 12);
              v673 = v672 & (v662 >> 8);
              v674 = *(_DWORD *)(v660 + 4 * v673);
              if (v674)
              {
                v675 = v660 + 4 * v661;
                v676 = 1;
                while (1)
                {
                  v677 = (v674 - 1);
                  if (v656 == *(_QWORD *)(v675 + 16 * v677))
                    break;
                  v673 = (v673 + v676) & v672;
                  v674 = *(_DWORD *)(v660 + 4 * v673);
                  ++v676;
                  if (!v674)
                    goto LABEL_1022;
                }
                a6 = *(unsigned int *)(v675 + 16 * v677 + 8) | ((unint64_t)*(unsigned __int8 *)(v675 + 16 * v677 + 12) << 32);
LABEL_1035:
                if ((_DWORD)a6 != -1)
                {
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v689 = v143 + 16;
                    v690 = a6 << 32;
                  }
                  else
                  {
                    v689 = *(_QWORD *)(v143 + 8) - 8;
                    v690 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v689 + (v690 >> 29));
                  if ((a4 & 0xFFFE000000000002) != 0)
                  {
LABEL_1088:
                    *(_QWORD *)&__dst = a4;
                    *(_QWORD *)v1000 = v143;
                    *(_QWORD *)&v999 = __PAIR64__(a6, HIDWORD(a6));
                    LODWORD(v138) = 1;
                    *(_WORD *)&v1000[16] = 257;
                    goto LABEL_1159;
                  }
                  v691 = *(unsigned __int8 *)(a4 + 5);
                  if (v691 != 5)
                  {
                    if (v691 != 6)
                      goto LABEL_1088;
                    v769 = *(_DWORD *)(v657 + 16) & 3;
                    v770 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v772 = *(_QWORD *)(a4 + 24);
                      v771 = *(_QWORD *)(a4 + 32);
                      *(_QWORD *)&__dst = *(_QWORD *)(a4 + 8);
                      *((_QWORD *)&__dst + 1) = v770;
                      LODWORD(v999) = HIDWORD(a6);
                      *(_QWORD *)v1000 = v143;
                      v1000[17] = 3;
                      LODWORD(v138) = 1;
                      if (v769 != 2)
                        v1000[16] = 1;
                      v1000[19] = 1;
                      *((_QWORD *)&v1001 + 1) = v772;
                      *(_QWORD *)&v1002 = v771;
                    }
                    else
                    {
                      *(_QWORD *)&__dst = *(_QWORD *)(a4 + 8);
                      *((_QWORD *)&__dst + 1) = v770;
                      LODWORD(v999) = HIDWORD(a6);
                      *(_QWORD *)v1000 = v143;
                      LODWORD(v138) = 1;
                      v1000[17] = 3;
                      if (v769 != 2)
                        v1000[16] = 1;
                    }
LABEL_1159:
                    v15 = 0xFFFE000000000002;
                    goto LABEL_1160;
                  }
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v143, (uint64_t)v11, (uint64_t)&__dst, a4, SHIDWORD(a6), a6);
LABEL_1158:
                  LODWORD(v138) = 1;
                  goto LABEL_1159;
                }
              }
            }
          }
        }
      }
LABEL_1022:
      if ((*(_BYTE *)(v143 + 6) & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v143, v976, v656, (uint64_t)&__dst) & 1) != 0)
      {
        goto LABEL_1158;
      }
      goto LABEL_1023;
    }
    v736 = v53[7];
    v973 = v54;
    v974 = a1;
    v972 = (uint64_t *)((char *)v54 + 39696);
    v976 = (JSC::JSGlobalObject *)v53;
    v737 = v11;
    if (*(_QWORD *)(*((_QWORD *)v139 + 5244) + 1768) == v138)
    {
      v738 = *(_QWORD *)(a3 + 8);
      if ((v738 & 1) != 0)
        v739 = (unsigned int *)(a3 + 16);
      else
        v739 = (unsigned int *)(v738 + 4);
      v740 = *v739;
      if ((v740 & 0x80000000) != 0)
      {
        *(double *)a9.i64 = (double)v740;
        Index = COERCE__INT64((double)v740) + 0x2000000000000;
      }
      else
      {
        Index = v740 | 0xFFFE000000000000;
      }
      v742 = 14;
LABEL_1176:
      *(_QWORD *)&__dst = Index;
      LODWORD(v999) = v742;
      *(_QWORD *)v1000 = 0;
      LODWORD(v138) = 1;
      v1000[17] = 1;
      v15 = 0xFFFE000000000002;
      v12 = v978;
      v11 = v737;
      v55 = v972;
      v54 = v973;
      v10 = v974;
      if (!*((_DWORD *)v736 + 20))
        goto LABEL_294;
      goto LABEL_1177;
    }
    if (v138)
    {
      v766 = *(_DWORD *)(v138 + 16);
      if ((v766 & 0x20) == 0)
      {
        v767 = *(_BYTE **)(v138 + 8);
        v768 = *(unsigned int *)(v138 + 4);
        if ((v766 & 4) != 0)
        {
          if (!(_DWORD)v768)
            goto LABEL_1224;
          a3 = *v767 - 48;
          if (a3 > 9)
            goto LABEL_1224;
          if (v768 >= 2 && *v767 == 48)
            goto LABEL_1224;
          v961 = v767 + 1;
          v962 = v768 - 1;
          while (v962)
          {
            if (a3 <= 0x19999999)
            {
              v963 = *v961 - 48;
              if (v963 <= 9)
              {
                v298 = __CFADD__(v963, 10 * a3);
                a3 = v963 + 10 * (_DWORD)a3;
                ++v961;
                --v962;
                if (!v298)
                  continue;
              }
            }
            goto LABEL_1224;
          }
        }
        else
        {
          if (!(_DWORD)v768)
            goto LABEL_1224;
          a3 = *(unsigned __int16 *)v767 - 48;
          if (a3 > 9)
            goto LABEL_1224;
          v775 = *(_WORD *)v767 == 48 && v768 > 1;
          if (v775)
            goto LABEL_1224;
          v776 = (unsigned __int16 *)(v767 + 2);
          v777 = v768 - 1;
          while (v777)
          {
            if (a3 <= 0x19999999)
            {
              v778 = *v776 - 48;
              if (v778 <= 9)
              {
                v298 = __CFADD__(v778, 10 * a3);
                a3 = v778 + 10 * (_DWORD)a3;
                ++v776;
                --v777;
                if (!v298)
                  continue;
              }
            }
            goto LABEL_1224;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          v964 = *(_QWORD *)(v14 + 8);
          v965 = (_DWORD *)((v964 & 1) != 0 ? v14 + 16 : v964 + 4);
          if (*v965 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)v14, v976, a3, a4, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v736 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v736, v966, a3, a4, a5, a6, a7, a8))
            {
              v742 = 10;
              goto LABEL_1176;
            }
          }
        }
      }
    }
LABEL_1224:
    v11 = v737;
    v53 = (JSC::JSGlobalObject **)v976;
    v55 = v972;
    v54 = v973;
    v10 = v974;
    if (!*((_DWORD *)v736 + 20))
      goto LABEL_1069;
    LODWORD(v138) = 0;
LABEL_1177:
    v743 = v138;
    v744 = JSC::VM::hasExceptionsAfterHandlingTraps(v736, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
    LODWORD(v138) = v138 & !v744;
    v15 = 0xFFFE000000000002;
    if ((v743 & 1) != 0)
    {
      v12 = v978;
      v11 = v737;
      goto LABEL_1161;
    }
    v12 = v978;
    v11 = v737;
    v53 = (JSC::JSGlobalObject **)v976;
    v55 = v972;
    v54 = v973;
    v10 = v974;
    if (v744)
      goto LABEL_294;
    goto LABEL_1069;
  }
LABEL_64:
  if ((v58 & v15) != 0)
    goto LABEL_467;
  if (*(_BYTE *)(v58 + 5) != 26)
  {
    v299 = v11;
    (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v58 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v985, v58);
    v11 = v299;
    v12 = v978;
    v15 = 0xFFFE000000000002;
    if ((_BYTE)v985)
      goto LABEL_70;
LABEL_467:
    v14 = v988;
    a2 = (uint64_t)v979;
    v13 = v977;
    goto LABEL_122;
  }
  v59 = *(_QWORD *)(v58 + 24);
  if ((v59 & 1) != 0)
    v59 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v59 + 5) == 8)
  {
    LOBYTE(v985) = 1;
    v986 = *(_QWORD *)(v59 + 40);
    LOBYTE(v987) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    LOBYTE(v985) = 2;
    v60 = *(_DWORD **)(v58 + 16);
    v986 = v59;
    v987 = v60;
  }
LABEL_70:
  v975 = v11;
  LOBYTE(__s[0]) = 0;
  *((_QWORD *)&__s[0] + 1) = 0x800000000;
  v61 = (JSC::JSGlobalObject *)&__s[2];
  a9 = 0uLL;
  memset((char *)&__s[1] + 8, 0, 72);
  *(_QWORD *)&__s[1] = &__s[2];
  v62 = (WTF::Thread *)*((_QWORD *)v12 + 2);
  v976 = (JSC::JSGlobalObject *)&__s[2];
  if (v62)
  {
LABEL_86:
    v69 = (JSC::Interpreter *)((char *)__s + 8);
    v70 = DWORD2(__s[0]);
    v973 = (JSC *)((char *)__s + 8);
    if (DWORD2(__s[0]) == HIDWORD(__s[0]) || *(JSC::JSGlobalObject **)&__s[1] != v61 && *(_QWORD *)&__s[1])
    {
      v69 = (JSC::Interpreter *)JSC::MarkedVectorBase::slowAppend((uint64_t)__s + 8, (uint64_t)v62, a3, a4, a5, a6, a7, a8);
      v61 = v976;
      v12 = v978;
      v15 = 0xFFFE000000000002;
      if ((_DWORD)v69 == 1)
        LOBYTE(__s[0]) = 1;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&__s[1] + 8 * DWORD2(__s[0])) = v62;
      DWORD2(__s[0]) = v70 + 1;
    }
    v71 = *v10;
    v72 = v988;
    v983 = *(_QWORD *)&__s[1];
    v73 = DWORD2(__s[0]);
    v984 = DWORD2(__s[0]);
    v74 = *((_QWORD *)v71 + 7);
    v75 = (WTF *)(v74 + 90568);
    v76 = v985;
    if (v985 == 2 || !(_BYTE)v987)
    {
      v993[0] = *((JSC::VM **)v71 + 7);
      if (v985 == 2)
      {
        v78 = 0;
        v77 = v986;
        a4 = (uint64_t)v987;
        v79 = v987;
      }
      else
      {
        a4 = 0;
        v77 = 0;
        v78 = v986;
        v79 = (_DWORD *)v58;
      }
      v80 = *(_QWORD *)(16 * (*v79 & 0xFFFFFFFE) + 0x28);
      v989 = (WTF::StringImpl *)v74;
      v990 = v80;
      if (*(_QWORD *)v75)
      {
LABEL_95:
        *(_QWORD *)(v74 + 32) = 0;
        v81 = *(_QWORD *)(v74 + 8);
        v974 = v10;
        if ((unint64_t)&v968 < v81 || v984 > 0x10000)
        {
          v83 = v74 + 90568;
          v352 = JSC::throwStackOverflowError(v80, v993, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          if (!*(_DWORD *)(v74 + 4))
          {
            v82 = *(_DWORD *)(v74 + 80);
            if ((v82 & 0x27) == 0 || (v82 & 0x20) != 0)
              goto LABEL_99;
            v640 = *(_DWORD *)(v74 + 80);
            if ((v640 & 0x27) != 0 && (v640 & 0x20) == 0)
            {
              v957 = v73;
              v958 = v72;
              v959 = v78;
              v971 = a4;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v74 + 64), 7u, a3, a4, a5, a6, a7, a8);
              a4 = v971;
              v78 = v959;
              v72 = v958;
              v73 = v957;
              v61 = v976;
              v12 = v978;
              v15 = 0xFFFE000000000002;
            }
            v14 = *(_QWORD *)(v74 + 16);
            if (!v14)
            {
LABEL_99:
              v83 = v74 + 90568;
              v84 = (unsigned int *)(v74 + 80);
              v85 = *(_DWORD *)(v74 + 80);
              if ((v85 & 0x20) == 0)
              {
                do
                  v86 = __ldaxr(v84);
                while (__stlxr(v86 | 0x20, v84));
              }
              v87 = 0;
              v88 = 0;
              v994 = 0;
              if (v76 == 2)
              {
                if (*(_BYTE *)(v77 + 5) == 8
                  || (*(_QWORD *)(v77 + 8)
                    ? (v118 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                    : (v118 = 0),
                      v118))
                {
                  v994 = *(JSC::CodeBlock **)(v77 + 96);
                }
                else
                {
                  v284 = v73;
                  v285 = v72;
                  v972 = (uint64_t *)v78;
                  JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v77, v74, v58, (const WTF::StringImpl *)a4, 0, &v994, a7, a8);
                  v78 = (uint64_t)v972;
                  v72 = v285;
                  v73 = v284;
                }
                v14 = *((_QWORD *)v993[0] + 2);
                if (v14)
                {
                  if ((v85 & 0x20) == 0)
                  {
                    do
                      v678 = __ldaxr(v84);
                    while (__stlxr(v678 & 0xFFFFFFDF, v84));
                  }
                  v12 = v978;
                  a2 = (uint64_t)v979;
                  v15 = 0xFFFE000000000002;
                  v61 = v976;
                  v13 = v977;
                  v11 = v975;
                  goto LABEL_114;
                }
                *((_BYTE *)v994 + 17) = 0;
                v88 = *(_QWORD *)(v77 + 8);
                v119 = (unsigned int *)(v88 + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 + 1, v119));
                v87 = v994;
              }
              v89 = v73 + 1;
              *(_QWORD *)&__dst = v87;
              *((_QWORD *)&__dst + 1) = v58;
              *(_QWORD *)&v1000[8] = v983;
              *(_QWORD *)&v1000[16] = v80;
              LODWORD(v999) = v73 + 1;
              if (v87)
              {
                v90 = *((_DWORD *)v87 + 7);
                if (v90 <= v89)
                  v89 = v73 + 1;
                else
                  v89 = v90;
              }
              a2 = (uint64_t)v979;
              *(_DWORD *)v1000 = v89 | 1;
              DWORD1(v999) = 0;
              *((_QWORD *)&v999 + 1) = v72;
              if ((v85 & 0x20) == 0)
              {
                do
                  v91 = __ldaxr(v84);
                while (__stlxr(v91 & 0xFFFFFFDF, v84));
              }
              if (v76 == 2)
              {
                v14 = vmEntryToJavaScript(*(_QWORD *)(v88 + 16), (JSC::VM *)v74, (uint64_t)&__dst, a4, a5, a6, a7, a8);
                v15 = 0xFFFE000000000002;
                v13 = v977;
                v12 = v978;
                v11 = v975;
                v61 = v976;
              }
              else
              {
                v14 = vmEntryToNative(v78, (JSC::VM *)v74, (uint64_t)&__dst, a4, a5, a6, a7, a8);
                v15 = 0xFFFE000000000002;
                v13 = v977;
                v12 = v978;
                v11 = v975;
                v61 = v976;
                if (!v88)
                  goto LABEL_114;
              }
              v92 = (unsigned int *)(v88 + 8);
              do
              {
                v93 = __ldaxr(v92);
                v94 = v93 - 1;
              }
              while (__stlxr(v94, v92));
              if (!v94)
              {
                atomic_store(1u, (unsigned int *)(v88 + 8));
                (*(void (**)(uint64_t, JSC::VM *))(*(_QWORD *)v88 + 32))(v88, v11);
                v11 = v975;
                v61 = v976;
                v12 = v978;
                v15 = 0xFFFE000000000002;
              }
              goto LABEL_114;
            }
            v83 = v74 + 90568;
LABEL_540:
            a2 = (uint64_t)v979;
            v13 = v977;
            v11 = v975;
LABEL_114:
            v95 = v989;
            if (*((WTF::StringImpl ***)v989 + 11321) == &v989)
            {
              *((_QWORD *)v989 + 11321) = 0;
              if (*((_BYTE *)v95 + 56))
              {
                JSC::VM::executeEntryScopeServicesOnExit(v95, v11, a3, a4, a5, a6, a7, a8);
                v11 = v975;
                v61 = v976;
                v12 = v978;
                v15 = 0xFFFE000000000002;
              }
            }
            *(_BYTE *)(v83 + 2552) = 1;
            v10 = v974;
            goto LABEL_116;
          }
          v83 = v74 + 90568;
          v352 = JSC::Interpreter::checkVMEntryPermission(v69);
        }
        v61 = v976;
        v12 = v978;
        v15 = 0xFFFE000000000002;
        v14 = v352;
        goto LABEL_540;
      }
      *(_QWORD *)v75 = &v989;
      v259 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v259)
      {
        v260 = v73;
        v261 = v72;
        v262 = v78;
        v971 = a4;
        v69 = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(v69);
        a4 = v971;
        v78 = v262;
        v72 = v261;
        v73 = v260;
        v61 = v976;
        v12 = v978;
        v15 = 0xFFFE000000000002;
        v259 = v69;
      }
      v263 = *((_BYTE *)v259 + 5);
      if ((v263 & 0x20) == 0)
      {
        v971 = a4;
        v972 = (uint64_t *)v78;
        v749 = v72;
        v750 = v73;
        *((_BYTE *)v259 + 5) = v263 | 0x20;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread(v69, (uint64_t)v62, a3, a4, a5, a6, a7, a8);
        WTF::registerThreadForMachExceptionHandling(v259, v62, a3, a4, a5, a6, a7, a8);
        v15 = 0xFFFE000000000002;
        v12 = v978;
        v61 = v976;
        v73 = v750;
        v72 = v749;
        a4 = v971;
        v78 = (uint64_t)v972;
      }
      v69 = v989;
      if (*((_BYTE *)v989 + 56))
      {
        v971 = a4;
        v266 = v78;
        v267 = v72;
        v268 = v73;
      }
      else
      {
        v264 = *((_QWORD *)v989 + 11624);
        v265 = atomic_load(&JSC::lastTimeZoneID);
        if (v264 == v265)
          goto LABEL_95;
        v971 = a4;
        v266 = v78;
        v267 = v72;
        v268 = v73;
        v69 = v989;
      }
      JSC::VM::executeEntryScopeServicesOnEntry(v69, v62, a3, a4, a5, a6, a7, a8);
      v15 = 0xFFFE000000000002;
      v12 = v978;
      v61 = v976;
      v73 = v268;
      v72 = v267;
      v78 = v266;
      a4 = v971;
      goto LABEL_95;
    }
    if (*(_DWORD *)(v58 + 88))
    {
      v300 = JSC::Interpreter::executeBoundCall(v69, v74, v58, (uint64_t)&v983, a5, a6, a7, a8);
      v61 = v976;
      v13 = v977;
      v12 = v978;
      a2 = (uint64_t)v979;
      v15 = 0xFFFE000000000002;
      v14 = v300;
      v11 = v975;
LABEL_116:
      v96 = (uint64_t *)*((_QWORD *)&__s[1] + 1);
      if (*((_QWORD *)&__s[1] + 1))
      {
        v286 = **((_QWORD **)&__s[1] + 1);
        if (**((_QWORD **)&__s[1] + 1))
        {
          v287 = *(_DWORD *)(v286 - 8);
          v288 = ((unint64_t)v973 + ~((_QWORD)v973 << 32)) ^ (((unint64_t)v973 + ~((_QWORD)v973 << 32)) >> 22);
          v289 = 9 * ((v288 + ~(v288 << 13)) ^ ((v288 + ~(v288 << 13)) >> 8));
          v290 = (v289 ^ (v289 >> 15)) + ~((v289 ^ (v289 >> 15)) << 27);
          v291 = v287 & ((v290 >> 31) ^ v290);
          v292 = *(JSC **)(v286 + 8 * v291);
          if (v292 != v973)
          {
            v306 = 1;
            while (v292)
            {
              v291 = ((_DWORD)v291 + v306) & v287;
              v292 = *(JSC **)(v286 + 8 * v291);
              ++v306;
              if (v292 == v973)
                goto LABEL_456;
            }
            v291 = *(unsigned int *)(v286 - 4);
          }
LABEL_456:
          v15 = 0xFFFE000000000002;
          if (v291 != *(_DWORD *)(v286 - 4))
          {
            *(_QWORD *)(v286 + 8 * v291) = -1;
            ++*(_DWORD *)(*v96 - 16);
            v293 = *v96;
            v294 = *v96 ? *(_DWORD *)(v293 - 12) - 1 : -1;
            *(_DWORD *)(v293 - 12) = v294;
            v295 = *v96;
            if (*v96)
            {
              v296 = 6 * *(_DWORD *)(v295 - 12);
              v297 = *(_DWORD *)(v295 - 4);
              v298 = v296 < v297 && v297 >= 9;
              if (v298)
              {
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v96, v297 >> 1, 0, a4, a5, a6, a7, a8);
                v11 = v975;
                v61 = v976;
                v12 = v978;
                v15 = 0xFFFE000000000002;
              }
            }
          }
        }
      }
      if (*(JSC::JSGlobalObject **)&__s[1] != v61 && *(_QWORD *)&__s[1] != 0)
      {
        WTF::fastFree(*(unint64_t *)&__s[1], v11, a3, a4, a5, a6, a7, a8);
        v11 = v975;
        v12 = v978;
        v15 = 0xFFFE000000000002;
      }
      goto LABEL_122;
    }
    v325 = *(_QWORD *)(v58 + 32);
    v324 = *(WTF **)(v58 + 40);
    if (*(_BYTE *)(v325 + 5) == 26)
    {
      v326 = *(_QWORD *)(v325 + 24);
      if ((v326 & 1) != 0)
        v326 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v326 + 5) != 8)
      {
        v327 = 0;
        LOBYTE(v989) = 2;
        v328 = *(_DWORD **)(v325 + 16);
        v990 = v326;
        v991 = v328;
        v994 = (JSC::CodeBlock *)v74;
        v329 = 1;
        v330 = v328;
        goto LABEL_497;
      }
      LOBYTE(v989) = 1;
      v327 = *(_QWORD *)(v326 + 40);
      v990 = v327;
      LOBYTE(v991) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v325 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v994 = (JSC::CodeBlock *)v74;
    }
    else
    {
      v734 = *(WTF **)(v58 + 40);
      v735 = DWORD2(__s[0]);
      v69 = (JSC::Interpreter *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v325 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x38))(&v989, *(_QWORD *)(v58 + 32));
      v994 = (JSC::CodeBlock *)v74;
      if (v989 == 2)
      {
        v327 = 0;
        v329 = 1;
        v326 = v990;
        v328 = v991;
        v330 = v991;
        v73 = v735;
        v324 = v734;
LABEL_497:
        v331 = *(JSC::VM **)(16 * (*v330 & 0xFFFFFFFE) + 0x28);
        v993[0] = (JSC::VM *)v74;
        v993[1] = v331;
        if (*(_QWORD *)v75)
        {
LABEL_498:
          *(_QWORD *)(v74 + 32) = 0;
          v332 = *(_QWORD *)(v74 + 8);
          v970 = v75;
          if ((unint64_t)&v968 < v332 || v984 > 0x10000)
          {
            v774 = JSC::throwStackOverflowError((unint64_t)v331, &v994, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            if (!*(_DWORD *)(v74 + 4))
            {
              v333 = *(_DWORD *)(v74 + 80);
              if ((v333 & 0x27) == 0)
                goto LABEL_502;
              if ((v333 & 0x20) != 0)
                goto LABEL_502;
              v807 = v73;
              v808 = v324;
              v809 = v327;
              v810 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v74, (uint64_t)v62, a3, a4, a5, a6, a7, a8);
              v327 = v809;
              v324 = v808;
              v73 = v807;
              v61 = v976;
              v12 = v978;
              v15 = 0xFFFE000000000002;
              if (!v810)
              {
LABEL_502:
                v334 = (unsigned int *)(v74 + 80);
                v335 = *(_DWORD *)(v74 + 80);
                if ((v335 & 0x20) == 0)
                {
                  do
                    v336 = __ldaxr(v334);
                  while (__stlxr(v336 | 0x20, v334));
                }
                v337 = 0;
                v338 = 0;
                v992 = 0;
                if (v329)
                {
                  if (*(_BYTE *)(v326 + 5) == 8
                    || (*(_QWORD *)(v326 + 8)
                      ? (v353 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v353 = 0),
                        v353))
                  {
                    v992 = *(JSC::CodeBlock **)(v326 + 96);
                  }
                  else
                  {
                    v712 = (const WTF::StringImpl *)v328;
                    v713 = v73;
                    v714 = v324;
                    v972 = (uint64_t *)v327;
                    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v326, v74, v325, v712, 0, &v992, a7, a8);
                    v327 = (uint64_t)v972;
                    v324 = v714;
                    v73 = v713;
                  }
                  v14 = *((_QWORD *)v994 + 2);
                  if (v14)
                  {
                    if ((v335 & 0x20) == 0)
                    {
                      do
                        v847 = __ldaxr(v334);
                      while (__stlxr(v847 & 0xFFFFFFDF, v334));
                    }
                    v12 = v978;
                    a2 = (uint64_t)v979;
                    v15 = 0xFFFE000000000002;
                    v61 = v976;
                    v13 = v977;
                    v11 = v975;
                    goto LABEL_517;
                  }
                  *((_BYTE *)v992 + 17) = 0;
                  v338 = *(_QWORD *)(v326 + 8);
                  v354 = (unsigned int *)(v338 + 8);
                  do
                    v355 = __ldaxr(v354);
                  while (__stlxr(v355 + 1, v354));
                  v337 = v992;
                }
                v339 = v73 + 1;
                *(_QWORD *)&__dst = v337;
                *((_QWORD *)&__dst + 1) = v325;
                *(_QWORD *)&v1000[8] = v983;
                *(_QWORD *)&v1000[16] = v331;
                LODWORD(v999) = v73 + 1;
                if (v337)
                {
                  v340 = *((_DWORD *)v337 + 7);
                  if (v340 <= v339)
                    v339 = v73 + 1;
                  else
                    v339 = v340;
                }
                a2 = (uint64_t)v979;
                *(_DWORD *)v1000 = v339 | 1;
                DWORD1(v999) = 0;
                *((_QWORD *)&v999 + 1) = v324;
                if ((v335 & 0x20) == 0)
                {
                  do
                    v341 = __ldaxr(v334);
                  while (__stlxr(v341 & 0xFFFFFFDF, v334));
                }
                if (v329)
                {
                  v14 = vmEntryToJavaScript(*(_QWORD *)(v338 + 16), (JSC::VM *)v74, (uint64_t)&__dst, a4, a5, a6, a7, a8);
                  v15 = 0xFFFE000000000002;
                  v13 = v977;
                  v12 = v978;
                  v11 = v975;
                  v61 = v976;
                }
                else
                {
                  v14 = vmEntryToNative(v327, (JSC::VM *)v74, (uint64_t)&__dst, a4, a5, a6, a7, a8);
                  v15 = 0xFFFE000000000002;
                  v13 = v977;
                  v12 = v978;
                  v11 = v975;
                  v61 = v976;
                  if (!v338)
                    goto LABEL_517;
                }
                v342 = (unsigned int *)(v338 + 8);
                do
                {
                  v343 = __ldaxr(v342);
                  v344 = v343 - 1;
                }
                while (__stlxr(v344, v342));
                if (!v344)
                {
                  atomic_store(1u, (unsigned int *)(v338 + 8));
                  (*(void (**)(uint64_t, JSC::VM *))(*(_QWORD *)v338 + 32))(v338, v11);
                  v11 = v975;
                  v61 = v976;
                  v12 = v978;
                  v15 = 0xFFFE000000000002;
                }
                goto LABEL_517;
              }
              v14 = *(_QWORD *)(v74 + 16);
LABEL_1239:
              a2 = (uint64_t)v979;
              v13 = v977;
              v11 = v975;
LABEL_517:
              v345 = v993[0];
              if (*((JSC::VM ***)v993[0] + 11321) == v993)
              {
                *((_QWORD *)v993[0] + 11321) = 0;
                if (*((_BYTE *)v345 + 56))
                {
                  JSC::VM::executeEntryScopeServicesOnExit(v345, v11, a3, a4, a5, a6, a7, a8);
                  v11 = v975;
                  v61 = v976;
                  v12 = v978;
                  v15 = 0xFFFE000000000002;
                }
              }
              *((_BYTE *)v970 + 2552) = 1;
              goto LABEL_116;
            }
            v774 = JSC::Interpreter::checkVMEntryPermission(v69);
          }
          v61 = v976;
          v12 = v978;
          v15 = 0xFFFE000000000002;
          v14 = v774;
          goto LABEL_1239;
        }
        v972 = (uint64_t *)v327;
        v969 = v324;
        LODWORD(v971) = v73;
        *(_QWORD *)v75 = v993;
        v709 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v709)
        {
          v69 = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(v69);
          v709 = v69;
        }
        if ((*((_BYTE *)v709 + 5) & 0x20) == 0)
        {
          *((_BYTE *)v709 + 5) |= 0x20u;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread(v69, (uint64_t)v62, a3, a4, a5, a6, a7, a8);
          WTF::registerThreadForMachExceptionHandling(v709, v62, a3, a4, a5, a6, a7, a8);
        }
        v69 = v993[0];
        if (!*((_BYTE *)v993[0] + 56))
        {
          v710 = *((_QWORD *)v993[0] + 11624);
          v711 = atomic_load(&JSC::lastTimeZoneID);
          v73 = v971;
          v324 = v969;
          v327 = (uint64_t)v972;
          if (v710 == v711)
            goto LABEL_498;
          v69 = v993[0];
        }
        JSC::VM::executeEntryScopeServicesOnEntry(v69, v62, a3, a4, a5, a6, a7, a8);
        v75 = (WTF *)(v74 + 90568);
        v73 = v971;
        v324 = v969;
        v327 = (uint64_t)v972;
        goto LABEL_498;
      }
      v327 = v990;
      v73 = v735;
      v324 = v734;
    }
    v329 = 0;
    v328 = 0;
    v326 = 0;
    v330 = (_DWORD *)v325;
    goto LABEL_497;
  }
  v63 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
    v64 = *(_DWORD *)(v63 + 4);
    *(_DWORD *)v63 += 2;
    if (v64 == 1)
    {
      v65 = *(_DWORD *)(v63 + 16);
      v280 = *(unsigned __int8 **)(v63 + 8);
      if ((v65 & 4) != 0)
      {
        v281 = *v280;
      }
      else
      {
        v281 = *(unsigned __int16 *)v280;
        if (v281 > 0xFF)
        {
LABEL_75:
          v66 = v63;
          if ((v65 & 3) == 2)
          {
            v66 = v63;
            do
            {
              v66 = *(_QWORD *)(v66 + 24);
              v65 = *(_DWORD *)(v66 + 16);
            }
            while ((v65 & 3) == 2);
          }
          if ((v65 & 8) != 0)
          {
            v67 = 0;
          }
          else
          {
            *(_DWORD *)(v66 + 16) = v65 | 8;
            v67 = (unint64_t)*(unsigned int *)(v66 + 4) << ((v65 & 4) == 0);
          }
          v68 = *v55;
          if (*v55 >= (unint64_t)v55[1])
          {
            v68 = v55[2];
            if ((v68 & 1) != 0)
            {
              JSC::sanitizeStackForVM(v54, 0, a3, a4, a5, a6, a7, a8);
              SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v54 + 39672, (uint64_t)v54 + 192, 16, 0, 0, v885, v886, v887);
              v61 = v976;
              v12 = v978;
              v15 = 0xFFFE000000000002;
              v68 = SlowCase;
              goto LABEL_80;
            }
            v641 = *(_QWORD *)(v68 + 8) ^ v55[3];
            v55[1] = v68 + HIDWORD(v641);
            v55[2] = v68 + (int)v641;
          }
          *v55 = v68 + 16;
LABEL_80:
          *(_DWORD *)v68 = (unint64_t)v55[227] >> 4;
          a9.i64[0] = 17302016;
          *(_DWORD *)(v68 + 4) = 17302016;
          *(_QWORD *)(v68 + 8) = v63;
          if (*((_BYTE *)v54 + 755))
            __dmb(0xAu);
          if (v67 >= 0x101)
          {
            JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v54 + 192, 0, v68, v67, a5, a6, a7, a8);
            v61 = v976;
            v12 = v978;
            v15 = 0xFFFE000000000002;
          }
          *((_QWORD *)v12 + 2) = v68;
          goto LABEL_85;
        }
      }
      v282 = (_QWORD *)((char *)v54 + 8 * v281 + 42216);
    }
    else
    {
      if (v64)
      {
        v65 = *(_DWORD *)(v63 + 16);
        goto LABEL_75;
      }
      v282 = (_QWORD *)((char *)v54 + 41968);
    }
    *((_QWORD *)v12 + 2) = *v282;
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v63, 0, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v307, v308, v309, v310, v311, v312, v313, v314);
      v61 = v976;
      v12 = v978;
      v15 = 0xFFFE000000000002;
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
LABEL_85:
    v62 = (WTF::Thread *)*((_QWORD *)v12 + 2);
    goto LABEL_86;
  }
  v351 = *((unsigned int *)v12 + 2);
  if (v351 <= 9)
  {
    v62 = (WTF::Thread *)*((_QWORD *)v54 + v351 + 5325);
    goto LABEL_86;
  }
  if (v351 <= 0xFF)
  {
    v637 = (JSC *)((char *)v54 + 16 * v351 + 44272);
    if (*(_QWORD *)v637)
      goto LABEL_1117;
    WTF::String::number(v351, (uint64_t *)&__dst);
    v850 = __dst;
    *(_QWORD *)&__dst = 0;
    v851 = *(WTF::StringImpl **)v637;
    *(_QWORD *)v637 = v850;
    if (!v851)
      goto LABEL_1117;
    v852 = *(_DWORD *)v851 - 2;
    if (*(_DWORD *)v851 == 2)
    {
      WTF::StringImpl::~StringImpl(v851, v849, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
      v851 = (WTF::StringImpl *)__dst;
      *(_QWORD *)&__dst = 0;
      if (!v851)
        goto LABEL_1117;
      v852 = *(_DWORD *)v851 - 2;
      if (*(_DWORD *)v851 == 2)
      {
        WTF::StringImpl::~StringImpl(v851, v918, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v919, v920, v921, v922, v923, v924, v925, v926);
        goto LABEL_1117;
      }
    }
    *(_DWORD *)v851 = v852;
LABEL_1117:
    v639 = v54;
    goto LABEL_961;
  }
  v973 = v54;
  v626 = (char *)v54 + 60656;
  v627 = 9 * ((v351 + ~((_DWORD)v351 << 15)) ^ ((v351 + ~((_DWORD)v351 << 15)) >> 10));
  v628 = (v627 ^ (v627 >> 6)) + ~((v627 ^ (v627 >> 6)) << 11);
  v629 = (v628 ^ BYTE2(v628));
  v630 = &v626[16 * v629];
  if (*(_DWORD *)v630 == (_DWORD)v351)
  {
    v906 = &v626[16 * v629];
    v907 = *((_QWORD *)v906 + 1);
    v637 = (JSC::VM *)(v906 + 8);
    if (v907)
    {
LABEL_960:
      v639 = v973;
LABEL_961:
      v62 = (WTF::Thread *)JSC::jsNontrivialString(v639, v637, (const WTF::String *)a3, a4, a5, a6, a7, a8);
      v12 = v978;
      *((_QWORD *)v978 + 2) = v62;
      v15 = 0xFFFE000000000002;
      v61 = v976;
      goto LABEL_86;
    }
  }
  v631 = 0;
  *(_DWORD *)v630 = v351;
  do
  {
    v632 = (v351 % 0xA) | 0x30;
    v15 = (unint64_t)&__dst + v631;
    *((_BYTE *)&__dst + v631-- + 12) = (v351 % 0xA) | 0x30;
    v775 = v351 > 9;
    LODWORD(v351) = v351 / 0xA;
  }
  while (v775);
  if (v631 + 14 < 15)
  {
    if (v631)
    {
      if ((unint64_t)-v631 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198A3443CLL);
      }
      v633 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v631));
      v634 = v633 + 5;
      *v633 = 2;
      v633[1] = -(int)v631;
      *((_QWORD *)v633 + 1) = v633 + 5;
      v633[4] = 4;
      if (v631 == -1)
        *v634 = v632;
      else
        memcpy(v634, (char *)&__dst + v631 + 13, -v631);
    }
    else
    {
      v633 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v635 = &v626[16 * v629];
    v638 = (WTF::StringImpl *)*((_QWORD *)v635 + 1);
    v637 = (JSC::VM *)(v635 + 8);
    v636 = v638;
    *(_QWORD *)v637 = v633;
    if (v638)
    {
      if (*(_DWORD *)v636 == 2)
      {
        WTF::StringImpl::~StringImpl(v636, v62, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v701, v702, v703, v704, v705, v706, v707, v708);
      }
      else
      {
        *(_DWORD *)v636 -= 2;
      }
    }
    goto LABEL_960;
  }
  while (1)
  {
    __break(1u);
LABEL_1120:
    LODWORD(v138) = 0;
LABEL_1160:
    v12 = v978;
    v11 = v975;
LABEL_1161:
    v55 = v972;
    v54 = v973;
    v10 = v974;
LABEL_294:
    if (*((_DWORD *)v54 + 20))
    {
      v684 = v11;
      v685 = *((_DWORD *)v54 + 20);
      if ((v685 & 0x27) != 0 && (v685 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC *)((char *)v54 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = 0xFFFE000000000002;
      v12 = v978;
      v11 = v684;
      if (*((_QWORD *)v54 + 2))
        break;
    }
    if ((_DWORD)v138)
    {
      v680 = v11;
      if (v1000[17] == 1)
      {
        v58 = __dst;
      }
      else
      {
        v732 = (JSC::VM **)*v10;
        v733 = v1000[17] == 2
             ? JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&__dst, (JSC::JSGlobalObject *)v732, a3, a4, a5, a6, a7, a8): JSC::PropertySlot::customGetter((uint64_t)&__dst, v732[7], *(WTF::StringImpl **)(v55[282] + 2488));
        v58 = v733;
      }
      v15 = 0xFFFE000000000002;
      v12 = v978;
      v11 = v680;
    }
    else
    {
      v58 = 10;
    }
    if (*((_DWORD *)v54 + 20))
    {
      v686 = v11;
      v687 = *((_DWORD *)v54 + 20);
      if ((v687 & 0x27) != 0 && (v687 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC *)((char *)v54 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = 0xFFFE000000000002;
      v12 = v978;
      v11 = v686;
      if (*((_QWORD *)v54 + 2))
        break;
    }
    if ((v988 & v15) == 0 && *(unsigned __int8 *)(v988 + 5) >= 0x17u)
    {
      v176 = (JSC::Structure *)(16 * (*(_DWORD *)v988 & 0xFFFFFFFE));
      v177 = *v10;
      v178 = *((_QWORD *)v176 + 8);
      if (!v178 || *(_BYTE *)(v178 + 5) == 1)
      {
        v258 = v11;
        JSC::Structure::allocateRareData(v176, v54, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
        v11 = v258;
        v12 = v978;
        v15 = 0xFFFE000000000002;
        v178 = *((_QWORD *)v176 + 8);
      }
      v179 = *(_QWORD *)(v178 + 64);
      if (!v179 || *(_QWORD *)(v179 + 112) != 1)
      {
        v301 = v11;
        JSC::StructureRareData::cacheSpecialPropertySlow(v178, v177, v54, (unint64_t)v176, v58, 4, (uint64_t)&__dst, a8);
        v11 = v301;
        v12 = v978;
        v15 = 0xFFFE000000000002;
      }
    }
    if (!(_BYTE)v1001)
      goto LABEL_64;
    v180 = *(_DWORD *)(*(_QWORD *)&v1000[24] + 4);
    if (v180)
    {
      *(_DWORD *)(*(_QWORD *)&v1000[24] + 4) = v180 - 1;
      goto LABEL_64;
    }
    a3 = (uint64_t)"JSC::DisallowVMEntryImpl<>::~DisallowVMEntryImpl() [VMType = JSC::VM]";
    a4 = 88;
    __break(0xC471u);
  }
  if ((_BYTE)v1001)
  {
    v688 = *(_DWORD *)(*(_QWORD *)&v1000[24] + 4);
    if (!v688)
    {
      __break(0xC471u);
      JUMPOUT(0x198A33D00);
    }
    *(_DWORD *)(*(_QWORD *)&v1000[24] + 4) = v688 - 1;
  }
  v14 = 0;
  v12 = v978;
  a2 = (uint64_t)v979;
  v13 = v977;
LABEL_122:
  v18 = v982;
  if (*((_DWORD *)v982 + 20))
  {
    v98 = *((_DWORD *)v982 + 20);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
    {
      v951 = v11;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v982 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v11 = v951;
      v12 = v978;
      v15 = 0xFFFE000000000002;
    }
    if (*((_QWORD *)v18 + 2))
      return 0;
  }
LABEL_8:
  if (*((_BYTE *)v10 + 56))
  {
    LOBYTE(__s[0]) = 0;
    *((_QWORD *)&__s[0] + 1) = 0x800000000;
    memset((char *)&__s[1] + 8, 0, 72);
    *(_QWORD *)&__s[1] = &__s[2];
    v817 = JSC::PropertyNameForFunctionCall::value(v12, v11, (const WTF::String *)a3, a4, a5, a6, a7, a8);
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)__s, v817, v818, v819, v820, v821, v822, v823);
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)__s, v14, v824, v825, v826, v827, v828, v829);
    v830 = (uint64_t *)*v10;
    v831 = (uint64_t)v10[1];
    v832 = *(_QWORD *)v13;
    *(_QWORD *)&__dst = *(_QWORD *)&__s[1];
    DWORD2(__dst) = DWORD2(__s[0]);
    v14 = JSC::call(v830, v831, (unsigned __int8 *)v10 + 56, v832, (uint64_t)&__dst, v833, v834, v835);
    if (*((_DWORD *)v18 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v18, (uint64_t)v836, v837, v838, v839, v840, v841, v842))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)((char *)__s + 8), v836, v837, v838, v839, v840, v841, v842);
      return 0;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)((char *)__s + 8), v836, v837, v838, v839, v840, v841, v842);
    v15 = 0xFFFE000000000002;
  }
  if ((v14 == 10 || (v14 & v15) == 0 && *(_BYTE *)(v14 + 5) == 4) && !*(_BYTE *)(v13 + 17))
    return 2;
  if (v14 == 2)
    goto LABEL_1262;
  if ((v14 & v15) == 0)
  {
    v19 = *(unsigned __int8 *)(v14 + 5);
    if (v19 >= 0x17)
    {
      v11 = *v10;
      if (v19 == 30)
      {
        *(double *)a9.i64 = JSC::JSObject::toNumber((JSC::JSObject *)v14, v11, a3, a4, a5, a6, a7, a8);
        if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v815 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v815)
          && ((_DWORD)v815 || (a9.i64[0] & 0x8000000000000000) == 0))
        {
          v14 = v815 | 0xFFFE000000000000;
        }
        else
        {
          v14 = a9.i64[0] + 0x2000000000000;
        }
        v15 = 0xFFFE000000000002;
      }
      else if ((v19 & 0xFE) == 0x4C)
      {
        v816 = JSC::JSObject::toString((JSC::JSObject *)v14, v11, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
        v15 = 0xFFFE000000000002;
        v14 = v816;
      }
      else
      {
        v99 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v100 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v101 = (char **)(16 * v99);
        if ((_DWORD)v99 && v101 != &JSC::BooleanObject::s_info)
        {
          v102 = 16 * v99;
          do
          {
            v102 = *(_QWORD *)(v102 + 16);
            v100 = v102 != 0;
          }
          while ((char **)v102 != &JSC::BooleanObject::s_info && v102 != 0);
        }
        if (v101 == &JSC::BigIntObject::s_info || v100)
          v14 = *(_QWORD *)(v14 + 16);
      }
      if (*((_DWORD *)v18 + 20))
      {
        v105 = *((_DWORD *)v18 + 20);
        if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
        {
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v18 + 64), 7u, a3, a4, a5, a6, a7, a8);
          v15 = 0xFFFE000000000002;
        }
        if (*((_QWORD *)v18 + 2))
          return 0;
      }
    }
  }
  if ((v14 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v347 = *(_DWORD *)(a2 + 16);
    if (v14 == 7)
    {
      if (v347 < 0)
        return 1;
      v348 = *(WTF::StringImpl **)(a2 + 8);
      if ((v348 || (v348 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v348 + 16) & 4) == 0)
      {
        v192 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>(a2, (WTF::AtomStringImpl *)(v347 + 4), a3, a4, a5, a6, a7, a8);
        if (!v192)
          return 1;
        v193 = 0x65007500720074;
        goto LABEL_328;
      }
      v194 = WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)(v347 + 4), a3, a4, a5, a6, a7, a8);
      if (!v194)
        return 1;
      v195 = 1702195828;
    }
    else
    {
      if (v347 < 0)
        return 1;
      v642 = *(WTF::StringImpl **)(a2 + 8);
      if ((v642 || (v642 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v642 + 16) & 4) == 0)
      {
        v643 = WTF::StringBuilder::extendBufferForAppending<char16_t>(a2, (WTF::AtomStringImpl *)(v347 + 5), a3, a4, a5, a6, a7, a8);
        if (v643)
        {
          *(_QWORD *)v643 = 0x73006C00610066;
          *(_WORD *)(v643 + 8) = 101;
        }
        return 1;
      }
      v194 = WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)(v347 + 5), a3, a4, a5, a6, a7, a8);
      if (!v194)
        return 1;
      *(_BYTE *)(v194 + 4) = 101;
      v195 = 1936482662;
    }
    goto LABEL_332;
  }
  if ((v14 & v15) != 0)
  {
    if (!(v14 >> 49))
      return 0;
    if (v14 >= 0xFFFE000000000000)
    {
      v110 = *(_DWORD *)(a2 + 16);
      if ((v14 & 0x80000000) != 0)
      {
        v773 = -(int)v14;
        v111 = 1;
        do
        {
          ++v111;
          v298 = v773 >= 0xA;
          v773 /= 0xAu;
        }
        while (v298);
      }
      else
      {
        v111 = 0;
        v112 = v14;
        do
        {
          ++v111;
          v775 = v112 > 9;
          v112 /= 0xAu;
        }
        while (v775);
      }
      v298 = __CFADD__(v111, v110);
      v113 = v111 + v110;
      if (v298)
        v114 = 0xFFFFFFFFLL;
      else
        v114 = v113;
      v115 = *(WTF::StringImpl **)(a2 + 8);
      if ((v115 || (v115 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v115 + 16) & 4) == 0)
      {
        v116 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2, (WTF::AtomStringImpl *)v114, a3, a4, a5, a6, a7, a8);
        if (v116)
        {
          if ((v14 & 0x80000000) != 0)
          {
            v242 = -(int)v14;
            v243 = 12;
            do
            {
              *((_BYTE *)__s + v243--) = (v242 % 0xA) | 0x30;
              v775 = v242 > 9;
              v242 /= 0xAu;
            }
            while (v775);
            *((_BYTE *)__s + v243) = 45;
            if (v243 + 2 <= 14)
            {
              do
              {
                *v116++ = *((unsigned __int8 *)__s + v243);
                v775 = v243++ < 12;
              }
              while (v775);
            }
          }
          else
          {
            v117 = 0;
            do
            {
              *((_BYTE *)__s + v117-- + 12) = (v14 % 0xA) | 0x30;
              v775 = v14 > 9;
              LODWORD(v14) = v14 / 0xA;
            }
            while (v775);
            if (v117 + 14 <= 13)
            {
              do
              {
                *v116++ = *((unsigned __int8 *)__s + v117 + 13);
                v298 = __CFADD__(v117++, 1);
              }
              while (!v298);
            }
          }
        }
      }
      else
      {
        v349 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)v114, a3, a4, a5, a6, a7, a8);
        if (v349)
        {
          v350 = 0;
          if ((v14 & 0x80000000) != 0)
          {
            v812 = -(int)v14;
            do
            {
              *((_BYTE *)__s + v350-- + 12) = (v812 % 0xA) | 0x30;
              v775 = v812 > 9;
              v812 /= 0xAu;
            }
            while (v775);
            v813 = v350 + 12;
            v814 = (char *)__s + v350 + 12;
            *v814 = 45;
            if (v350 + 14 <= 14)
            {
              if (v813 <= 12)
                v813 = 12;
              memcpy(v349, v814, v813 - v350 - 11);
            }
          }
          else
          {
            do
            {
              *((_BYTE *)__s + v350-- + 12) = (v14 % 0xA) | 0x30;
              v775 = v14 > 9;
              LODWORD(v14) = v14 / 0xA;
            }
            while (v775);
            if (v350 + 14 <= 13)
              memcpy(v349, (char *)__s + v350 + 13, -v350);
          }
        }
      }
      return 1;
    }
    v181 = v14 - 0x2000000000000;
    if (((v14 - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
    {
      v182 = (v181 >> 52) & 0x7FF;
      v183 = v181 & 0x800FFFFFFFFFFFFFLL;
      if ((_DWORD)v182 == 2047)
      {
        if ((v181 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v184 = (char *)__s + 3;
        }
        else
        {
          v283 = __s;
          if ((v183 & 0x8000000000000000) != 0)
          {
            LOBYTE(__s[0]) = 45;
            v283 = (_QWORD *)((char *)__s + 1);
          }
          *v283 = 0x7974696E69666E49;
          v184 = (char *)(v283 + 1);
        }
        goto LABEL_380;
      }
      v224 = v181 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v183 & 0x8000000000000000) != 0 && v224)
      {
        LOBYTE(__s[0]) = 45;
        v225 = (char *)__s + 1;
      }
      else
      {
        v225 = (char *)__s;
        if (!v224)
        {
          v184 = (char *)__s + 1;
          LOBYTE(__s[0]) = 48;
          goto LABEL_380;
        }
      }
      v226 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v183, v182);
      v184 = WTF::dragonbox::detail::to_shortest(v226, v227, (uint64_t)v225, v228);
LABEL_380:
      *v184 = 0;
      v229 = strlen((const char *)__s);
      memcpy(&__dst, __s, v229);
      *((_BYTE *)&__dst + v229) = 0;
      HIDWORD(v1004) = strlen((const char *)&__dst);
      v236 = *(_DWORD *)(a2 + 16);
      v237 = (v236 + HIDWORD(v1004));
      if (__CFADD__(v236, HIDWORD(v1004)))
        v237 = 0xFFFFFFFFLL;
      v238 = *(WTF::StringImpl **)(a2 + 8);
      if ((v238 || (v238 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v238 + 16) & 4) == 0)
      {
        v239 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2, (WTF::AtomStringImpl *)v237, v230, v231, v232, v233, v234, v235);
        if (v239)
        {
          __s[4] = v1001;
          __s[5] = v1002;
          v996 = v1003;
          *(_OWORD *)__n = v1004;
          __s[0] = __dst;
          __s[1] = v999;
          __s[2] = *(_OWORD *)v1000;
          __s[3] = *(_OWORD *)&v1000[16];
          v240 = &v239[2 * HIDWORD(v1004)];
          if (HIDWORD(v1004) >= 0x40)
          {
            v315 = &v239[2 * (HIDWORD(v1004) & 0xFFFFFFC0)];
            v241 = (int8x16_t *)__s;
            v316 = 0uLL;
            do
            {
              v1006.val[0] = *v241;
              v317 = v241[1];
              v1007.val[0] = v241[2];
              v318 = v241[3];
              v241 += 4;
              v319 = v318;
              v1007.val[1] = 0uLL;
              v1008.val[0] = v317;
              v1006.val[1] = 0uLL;
              v320 = v239;
              vst2q_s8(v320, v1006);
              v320 += 32;
              v1008.val[1] = 0uLL;
              vst2q_s8(v320, v1008);
              v321 = v239 + 64;
              vst2q_s8(v321, v1007);
              v322 = v239 + 96;
              vst2q_s8(v322, *(int8x16x2_t *)(&v316 - 1));
              v239 += 128;
            }
            while (v239 != v315);
            v239 = v315;
          }
          else
          {
            v241 = (int8x16_t *)__s;
          }
          while (v239 != v240)
          {
            v323 = v241->u8[0];
            v241 = (int8x16_t *)((char *)v241 + 1);
            *(_WORD *)v239 = v323;
            v239 += 2;
          }
        }
      }
      else
      {
        v644 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)v237, v230, v231, v232, v233, v234, v235);
        if (v644)
        {
          __s[4] = v1001;
          __s[5] = v1002;
          v996 = v1003;
          *(_OWORD *)__n = v1004;
          __s[0] = __dst;
          __s[1] = v999;
          __s[2] = *(_OWORD *)v1000;
          __s[3] = *(_OWORD *)&v1000[16];
          if (HIDWORD(v1004) == 1)
          {
            *v644 = __s[0];
          }
          else if (HIDWORD(v1004))
          {
            memcpy(v644, __s, HIDWORD(v1004));
          }
        }
      }
      return 1;
    }
LABEL_1262:
    WTF::StringBuilder::append(a2, (int8x16_t *)"null", 4uLL, a4, a5, a6, a7, a8);
    return 1;
  }
  v20 = *(unsigned __int8 *)(v14 + 5);
  if (v20 == 2)
  {
    v47 = (int **)(v14 + 8);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0)
      v47 = JSC::JSRopeString::resolveRope(v14, *v10, a3, a4, a9, a5, a6, a7, a8);
    v48 = v982;
    if (*((_DWORD *)v982 + 20))
    {
      v356 = *((_DWORD *)v982 + 20);
      if ((v356 & 0x27) != 0 && (v356 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v982 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v48 + 2))
      {
        result = 0;
        goto LABEL_201;
      }
    }
    v49 = *(_DWORD *)(a2 + 16);
    if ((v49 & 0x80000000) != 0)
      goto LABEL_200;
    v50 = *v47;
    if (*v47)
    {
      v51 = v50[1];
      if (v51 >= 0x2AAAAAAB)
      {
        if (*(_BYTE *)(a2 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x198A33FD8);
        }
        *(_DWORD *)(a2 + 16) = -1;
        goto LABEL_200;
      }
      v52 = 6 * v51 + 2;
    }
    else
    {
      v52 = 2;
    }
    v121 = *(WTF::StringImpl **)(a2 + 8);
    v122 = v121;
    if ((!v121 && (v122 = *(WTF::StringImpl **)a2) == 0 || (*((_BYTE *)v122 + 16) & 4) != 0)
      && (!v50 || (v50[4] & 4) != 0))
    {
      if (__CFADD__(v49, v52))
        v126 = -1;
      else
        v126 = v49 + v52;
      if (v121 && (v49 = *((_DWORD *)v121 + 1), v49 >= v126))
      {
        v188 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = 0;
        if (v188)
        {
          if (*(_DWORD *)v188 == 2)
          {
            WTF::StringImpl::~StringImpl(v188, v11, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
            v121 = *(WTF::StringImpl **)(a2 + 8);
          }
          else
          {
            *(_DWORD *)v188 -= 2;
          }
        }
        v189 = *(_DWORD *)(a2 + 16);
      }
      else
      {
        v127 = 2 * v49;
        if (v127 >= 0x7FFFFFFF)
          v127 = 0x7FFFFFFF;
        if (v127 <= v126)
          v127 = v126;
        if (v127 <= 0x10)
          v128 = 16;
        else
          v128 = v127;
        if ((v121 || (v121 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v121 + 16) & 4) == 0)
          WTF::StringBuilder::reallocateBuffer<char16_t>(a2, (WTF::AtomStringImpl *)v128, a3, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<unsigned char>(a2, (WTF::AtomStringImpl *)v128, a3, a4, a5, a6, a7, a8);
        v189 = *(_DWORD *)(a2 + 16);
        if ((v189 & 0x80000000) != 0)
          goto LABEL_200;
        v121 = *(WTF::StringImpl **)(a2 + 8);
      }
      v196 = *((_QWORD *)v121 + 1);
      *(_DWORD *)(a2 + 16) = v126;
      if (v196)
      {
        v197 = (_BYTE *)(v196 + v189);
        v198 = &v197[v52];
        *v197 = 34;
        v199 = v197 + 1;
        v200 = *v47;
        if (*v47)
        {
          v201 = v200[1];
          if ((_DWORD)v201)
          {
            v202 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
            do
            {
              v203 = *v202;
              v204 = WTF::escapedFormsForJSON[*v202];
              if (WTF::escapedFormsForJSON[*v202])
              {
                *v199 = 92;
                v199[1] = v204;
                if (v204 == 117)
                {
                  *((_WORD *)v199 + 1) = 12336;
                  if (v203 >= 0xA0)
                    v843 = 87;
                  else
                    v843 = 48;
                  v199[4] = v843 + (v203 >> 4);
                  v844 = v203 & 0xF;
                  if (v844 >= 0xA)
                    v845 = 87;
                  else
                    v845 = 48;
                  v199[5] = v845 + v844;
                  v199 += 6;
                }
                else
                {
                  v199 += 2;
                }
              }
              else
              {
                *v199++ = v203;
              }
              ++v202;
              --v201;
            }
            while (v201);
          }
        }
        *v199 = 34;
        v205 = v199 + 1;
        if (v205 < v198)
        {
          v206 = (*(_DWORD *)(a2 + 16) + (_DWORD)v205 - (_DWORD)v198);
LABEL_375:
          WTF::StringBuilder::shrink((WTF::StringBuilder *)a2, (WTF::AtomStringImpl *)v206, a3, a4, a5, a6, a7, a8);
          goto LABEL_200;
        }
      }
      goto LABEL_200;
    }
    if (__CFADD__(v49, v52))
      v123 = 0xFFFFFFFFLL;
    else
      v123 = v49 + v52;
    v124 = *(WTF::StringImpl **)(a2 + 8);
    if (!v121)
    {
      v124 = *(WTF::StringImpl **)a2;
      if (!*(_QWORD *)a2)
      {
        if (v49)
          v171 = (WTF::AtomStringImpl *)MEMORY[8];
        else
          v171 = 0;
        goto LABEL_348;
      }
    }
    if ((*((_BYTE *)v124 + 16) & 4) == 0)
    {
      v125 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>(a2, (WTF::AtomStringImpl *)v123, a3, a4, a5, a6, a7, a8);
LABEL_357:
      if (!v125)
        goto LABEL_200;
      v211 = (char *)&v125[v52];
      *v125 = 34;
      v212 = v125 + 1;
      v213 = *v47;
      if (!*v47)
        goto LABEL_373;
      v214 = v213[1];
      if ((v213[4] & 4) == 0)
      {
        if ((_DWORD)v214)
        {
          v215 = (unsigned __int16 *)*((_QWORD *)v213 + 1);
          do
          {
            v216 = *v215;
            if (v216 > 0xFF)
            {
              if ((v216 & 0xF800) == 0xD800)
              {
                if (v214 < 2 || (v216 & 0x400) != 0 || (v853 = v215[1], a3 = 56320, (v853 & 0xFC00) != 0xDC00))
                {
                  *(_DWORD *)v212 = 7667804;
                  a3 = 48;
                  if (v216 >> 8 >= 0xA0)
                    v866 = 87;
                  else
                    v866 = 48;
                  v212[2] = v866 + (v216 >> 12);
                  v867 = (v216 >> 8) & 0xF;
                  if (v867 >= 0xA)
                    a5 = 87;
                  else
                    a5 = 48;
                  a4 = a5 + v867;
                  v212[3] = a4;
                  if (v216 >= 0xA0u)
                    v868 = 87;
                  else
                    v868 = 48;
                  v212[4] = v868 + ((v216 & 0xF0) >> 4);
                  v857 = v216 & 0xF;
                  if (v857 >= 0xA)
                    v858 = 87;
                  else
                    v858 = 48;
                  goto LABEL_1321;
                }
                *v212 = v216;
                v212[1] = v853;
                v212 += 2;
                --v214;
                ++v215;
              }
              else
              {
                *v212++ = v216;
              }
            }
            else
            {
              v217 = WTF::escapedFormsForJSON[v216];
              if (WTF::escapedFormsForJSON[v216])
              {
                *v212 = 92;
                v212[1] = v217;
                if (v217 == 117)
                {
                  *((_DWORD *)v212 + 1) = 3145776;
                  if (v216 >= 0xA0u)
                    a3 = 87;
                  else
                    a3 = 48;
                  v212[4] = a3 + ((v216 & 0xF0) >> 4);
                  v857 = v216 & 0xF;
                  if (v857 >= 0xA)
                    v858 = 87;
                  else
                    v858 = 48;
LABEL_1321:
                  v212[5] = v858 + v857;
                  v212 += 6;
                  goto LABEL_365;
                }
                v212 += 2;
              }
              else
              {
                *v212++ = v216;
              }
            }
LABEL_365:
            ++v215;
            --v214;
          }
          while (v214);
        }
LABEL_373:
        *v212 = 34;
        v223 = (char *)(v212 + 1);
        if (v223 < v211)
        {
          v206 = *(_DWORD *)(a2 + 16) - ((unint64_t)(v211 - v223) >> 1);
          goto LABEL_375;
        }
LABEL_200:
        result = 1;
LABEL_201:
        v981 = v14;
        return result;
      }
      if (!(_DWORD)v214)
        goto LABEL_373;
      v218 = (unsigned __int8 *)*((_QWORD *)v213 + 1);
      while (1)
      {
        v219 = *v218;
        v220 = WTF::escapedFormsForJSON[*v218];
        if (WTF::escapedFormsForJSON[*v218])
        {
          *v212 = 92;
          v212[1] = v220;
          if (v220 != 117)
          {
            v212 += 2;
            goto LABEL_372;
          }
          *((_DWORD *)v212 + 1) = 3145776;
          if (v219 >= 0xA0)
            v854 = 87;
          else
            v854 = 48;
          v855 = v854 + (v219 >> 4);
          v222 = v212 + 5;
          v212[4] = v855;
          v219 &= 0xFu;
          if (v219 >= 0xA)
            v856 = 87;
          else
            v856 = 48;
          LOWORD(v219) = v856 + v219;
          v221 = 6;
        }
        else
        {
          v221 = 1;
          v222 = v212;
        }
        v212 += v221;
        *v222 = v219;
LABEL_372:
        ++v218;
        if (!--v214)
          goto LABEL_373;
      }
    }
    if (v49)
    {
      v170 = *(WTF::StringImpl **)a2;
      if (!*(_QWORD *)a2)
        v170 = *(WTF::StringImpl **)(a2 + 8);
      v171 = (WTF::AtomStringImpl *)*((_QWORD *)v170 + 1);
      if (!v121)
        goto LABEL_348;
    }
    else
    {
      v171 = 0;
      if (!v121)
      {
        v49 = 0;
        goto LABEL_348;
      }
    }
    v49 = *((_DWORD *)v121 + 1);
LABEL_348:
    v207 = 2 * v49;
    if (2 * v49 >= 0x7FFFFFFF)
      v207 = 0x7FFFFFFF;
    if (v207 <= v123)
      v207 = v123;
    if (v207 <= 0x10)
      v208 = 16;
    else
      v208 = v207;
    WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>(a2, v171, v208, a4, a5, a6, a7, a8);
    v209 = *(unsigned int *)(a2 + 16);
    if ((v209 & 0x80000000) != 0)
      goto LABEL_200;
    v210 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    *(_DWORD *)(a2 + 16) = v123;
    v125 = (_WORD *)(v210 + 2 * v209);
    goto LABEL_357;
  }
  if (v20 == 3)
  {
    v779 = *v10;
    v780 = "JSON.stringify cannot serialize BigInt.";
    v781 = 40;
LABEL_1252:
    JSC::throwTypeError((unint64_t)v779, &v982, (uint64_t)v780, v781);
    return 0;
  }
  if (v20 < 0x17)
    return 0;
  if ((v20 & 0xFE) == 0x1A
    || (*(_BYTE *)(v14 + 6) & 4) != 0
    && ((*(void (**)(_OWORD *__return_ptr, unint64_t, JSC::VM *))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x38))(__s, v14, v11), LOBYTE(__s[0])))
  {
    if (!*(_BYTE *)(v13 + 17))
      return 2;
    v190 = *(_DWORD *)(a2 + 16);
    if (v190 < 0)
      return 1;
    v191 = *(WTF::StringImpl **)(a2 + 8);
    if ((v191 || (v191 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v191 + 16) & 4) == 0)
    {
      v192 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>(a2, (WTF::AtomStringImpl *)(v190 + 4), a3, a4, a5, a6, a7, a8);
      if (v192)
      {
        v193 = 0x6C006C0075006ELL;
LABEL_328:
        *v192 = v193;
      }
      return 1;
    }
    v194 = WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)(v190 + 4), a3, a4, a5, a6, a7, a8);
    if (!v194)
      return 1;
    v195 = 1819047278;
LABEL_332:
    *(_DWORD *)v194 = v195;
    return 1;
  }
  if ((*(_DWORD *)(a2 + 16) & 0x80000000) != 0)
    return 0;
  v21 = (_QWORD **)(v10 + 31);
  v22 = *((_DWORD *)v10 + 65);
  if (v22)
  {
    v23 = *v21;
    v24 = *((unsigned int *)v10 + 65);
    do
    {
      if (*v23 == v14)
      {
        v779 = *v10;
        v780 = "JSON.stringify cannot serialize cyclic structures.";
        v781 = 51;
        goto LABEL_1252;
      }
      v23 += 23;
      --v24;
    }
    while (v24);
    v25 = *v10;
    if (v22 >> 6 < 0x271)
      goto LABEL_28;
    goto LABEL_490;
  }
  v25 = *v10;
LABEL_28:
  v26 = *(_DWORD *)v14 & 0xFFFFFFFE;
  v27 = 16 * v26;
  *(_QWORD *)&__s[0] = v14;
  *((_QWORD *)&__s[0] + 1) = 16 * v26;
  v28 = *(unsigned __int8 *)(v14 + 5);
  LOBYTE(__s[1]) = v28 == 36;
  if (v28 < 0x17)
    goto LABEL_221;
  if (v28 - 36 < 2)
  {
    isArraySlow = 1;
LABEL_31:
    v30 = v22;
    goto LABEL_32;
  }
  if (v28 != 61)
  {
LABEL_221:
    isArraySlow = 0;
    goto LABEL_31;
  }
  isArraySlow = JSC::isArraySlow(v25, (JSC::JSGlobalObject *)v14, (JSC::ProxyObject *)a3);
  v30 = *((_DWORD *)v10 + 65);
LABEL_32:
  *(_WORD *)((char *)&__s[1] + 1) = isArraySlow;
  *(_QWORD *)((char *)&__s[1] + 4) = 0;
  *(_QWORD *)&__s[2] = 0;
  *((_QWORD *)&__s[2] + 1) = (char *)&__s[3] + 8;
  a9.i64[0] = 8;
  *(_QWORD *)&__s[3] = 8;
  if (v30 == *((_DWORD *)v10 + 64))
  {
    WTF::Vector<JSC::Stringifier::Holder,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Stringifier::Holder>((uint64_t)(v10 + 31), (unint64_t)__s, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v31 = (uint64_t)&(*v21)[23 * v30];
    v32 = __s[0];
    *(_OWORD *)(v31 + 12) = *(_OWORD *)((char *)__s + 12);
    *(_OWORD *)v31 = v32;
    v33 = *(_QWORD *)&__s[2];
    *(_QWORD *)&__s[2] = 0;
    v34 = (int8x16_t *)(v31 + 56);
    *(_QWORD *)(v31 + 40) = v31 + 56;
    v35 = (_QWORD *)(v31 + 40);
    *(v35 - 1) = v33;
    v35[1] = 8;
    v36 = (_DWORD *)v35 + 3;
    v37 = *((_QWORD *)&__s[2] + 1);
    if (*((_OWORD **)&__s[2] + 1) == (_OWORD *)((char *)&__s[3] + 8))
    {
      if (DWORD1(__s[3]))
      {
        v247 = 16 * DWORD1(__s[3]);
        v248 = (int8x16_t *)((char *)&__s[3] + 8);
        do
        {
          v249 = *v248++;
          a9 = v249;
          *v34++ = v249;
          v247 -= 16;
        }
        while (v247);
      }
    }
    else
    {
      *((_QWORD *)&__s[2] + 1) = (char *)&__s[3] + 8;
      *v35 = v37;
      v811 = __s[3];
      LODWORD(__s[3]) = 8;
      *((_DWORD *)v35 + 2) = v811;
    }
    v38 = DWORD1(__s[3]);
    DWORD1(__s[3]) = 0;
    *v36 = v38;
    ++*((_DWORD *)v10 + 65);
  }
  v39 = *((_QWORD *)&__s[2] + 1);
  if ((_OWORD *)((char *)&__s[3] + 8) != *((_OWORD **)&__s[2] + 1) && *((_QWORD *)&__s[2] + 1) != 0)
  {
    *((_QWORD *)&__s[2] + 1) = 0;
    LODWORD(__s[3]) = 0;
    WTF::fastFree(v39, v11, a3, a4, a5, a6, a7, a8);
  }
  v41 = *(_QWORD *)&__s[2];
  *(_QWORD *)&__s[2] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 != 1)
    {
      --*(_DWORD *)v41;
      goto LABEL_44;
    }
    v979 = (_DWORD *)a2;
    v129 = *(unsigned int *)(v41 + 20);
    if ((_DWORD)v129)
    {
      v130 = *(unint64_t **)(v41 + 8);
      v131 = 8 * v129;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        v133 = *v130;
        *v130 = 0;
        if (v133)
        {
          if (*(_DWORD *)v133 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v133, v11, a3, a4, a5, a6, a7, a8);
            v134 = *(_QWORD *)(StatusReg + 752);
            if (v134)
            {
              if (!(v133 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v133 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v133)) & 1) != 0)
              {
LABEL_232:
                v135 = *(unsigned int *)(v134 + 8000);
                if (v135 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v134, v133, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v134 + 8 * v135) = v133 | 0x5000000000000;
                  *(_DWORD *)(v134 + 8000) = v135 + 1;
                }
                goto LABEL_227;
              }
              if (v133 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v133 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v133 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v133) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_232;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v134, v133, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v133, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v133 -= 2;
          }
        }
LABEL_227:
        ++v130;
        v131 -= 8;
      }
      while (v131);
    }
    v136 = *(_QWORD *)(v41 + 8);
    if (v41 + 24 != v136 && v136 != 0)
    {
      *(_QWORD *)(v41 + 8) = 0;
      *(_DWORD *)(v41 + 16) = 0;
      WTF::fastFree(v136, v11, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v41, v11, a3, a4, a5, a6, a7, a8);
    a2 = (uint64_t)v979;
  }
LABEL_44:
  v42 = *((unsigned int *)v10 + 24);
  v43 = v10 + 12;
  if ((_DWORD)v42 == *((_DWORD *)v10 + 25))
  {
    if (v42 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(v10 + 12), 2 * (int)v42))
    {
      *((_BYTE *)v10 + 88) = 1;
      goto LABEL_1081;
    }
    LODWORD(v42) = *((_DWORD *)v10 + 24);
    v44 = (JSC **)v10[13];
  }
  else
  {
    v44 = (JSC **)v10[13];
    if (v44 == v10 + 15 || !v44)
    {
      v44[v42] = (JSC *)v14;
      *v43 = v42 + 1;
      goto LABEL_146;
    }
  }
  v44[v42] = (JSC *)v14;
  *((_DWORD *)v10 + 24) = v42 + 1;
  if (!v10[14] && v14)
  {
    v45 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v14 & 8) != 0)
      v45 = (_QWORD *)(v14 - 16);
    v46 = (uint64_t *)(*v45 + 560);
    v10[14] = (JSC *)v46;
    *(_QWORD *)&__dst = v10 + 12;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v46, (uint64_t *)&__dst, a4, a5, a6, a7, a8, (uint64_t)__s);
  }
LABEL_146:
  if (*((_BYTE *)v10 + 88))
  {
LABEL_1081:
    __break(0xC471u);
    JUMPOUT(0x198A32898);
  }
  v106 = *((unsigned int *)v10 + 24);
  if ((_DWORD)v106 == *((_DWORD *)v10 + 25))
  {
    if (v106 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(v10 + 12), 2 * (int)v106))
    {
      *((_BYTE *)v10 + 88) = 1;
      goto LABEL_152;
    }
    LODWORD(v106) = *((_DWORD *)v10 + 24);
    v107 = (JSC **)v10[13];
  }
  else
  {
    v107 = (JSC **)v10[13];
    if (v107 == v10 + 15 || !v107)
    {
      v107[v106] = (JSC *)v27;
      *v43 = v106 + 1;
      goto LABEL_154;
    }
  }
  v107[v106] = (JSC *)v27;
  *((_DWORD *)v10 + 24) = v106 + 1;
  if (!v10[14] && (_DWORD)v26)
  {
    v346 = (uint64_t *)(*(_QWORD *)((v27 & 0xFFFFFC000) + 8) + 560);
    v10[14] = (JSC *)v346;
    *(_QWORD *)&__dst = v10 + 12;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v346, (uint64_t *)&__dst, a4, a5, a6, a7, a8, (uint64_t)__s);
  }
  if (*((_BYTE *)v10 + 88))
  {
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x198A2F81CLL);
  }
LABEL_154:
  v108 = v982;
  if (!*((_DWORD *)v982 + 20))
  {
    if (v22)
      return 1;
    goto LABEL_566;
  }
  v357 = *((_DWORD *)v982 + 20);
  if ((v357 & 0x27) != 0 && (v357 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v982 + 64), 7u, a3, a4, a5, a6, a7, a8);
  v358 = *((_QWORD *)v108 + 2);
  result = v358 == 0;
  if (!v22 && !v358)
  {
LABEL_566:
    v979 = v10 + 403;
    v977 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        v359 = *((unsigned int *)v10 + 65) - 1;
        v360 = v10[31];
        v361 = (JSC *)((char *)v360 + 184 * v359);
        v362 = *v10;
        v363 = (JSC::VM *)*((_QWORD *)*v10 + 7);
        v364 = (_DWORD *)((char *)v361 + 20);
        if (*((_DWORD *)v361 + 5))
          goto LABEL_568;
        if (*((_BYTE *)v360 + 184 * v359 + 17))
          break;
        if (*((_BYTE *)v10 + 16))
        {
          v897 = *v10;
          v898 = (uint64_t)v360 + 184 * v359;
          WTF::RefPtr<JSC::PropertyNameArrayData,WTF::RawPtrTraits<JSC::PropertyNameArrayData>,WTF::DefaultRefDerefTraits<JSC::PropertyNameArrayData>>::operator=((unint64_t *)(v898 + 32), v10[3], a3, (uint64_t)v361, a5, a6, a7, a8);
          v362 = v897;
          v361 = (JSC::JSGlobalObject *)v898;
          *(_DWORD *)(v898 + 24) = *(_DWORD *)(*(_QWORD *)(v898 + 32) + 20);
        }
        else
        {
          v404 = **(_DWORD **)v361 & 0xFFFFFFFE;
          if (*((_QWORD *)v360 + 23 * v359 + 1) != 16 * v404
            || (v405 = 16 * v404,
                v406 = *(_WORD *)(16 * v404 + 0xC),
                v407 = *(_BYTE *)(16 * v404 + 0xA),
                v406 & 6 | v407 & 8)
            || (*(_BYTE *)(v405 + 8) & 0xE) != 0
            || (v408 = *(_DWORD *)(v405 + 16), (v408 & 3) == 2)
            || (v407 & 0x20) != 0 && (v408 & 0x400000) == 0)
          {
            v610 = *v10;
            v611 = WTF::fastMalloc((WTF *)0xB8);
            *(_DWORD *)v611 = 1;
            *(_QWORD *)(v611 + 8) = v611 + 24;
            *(_QWORD *)(v611 + 16) = 20;
            __s[0] = (unint64_t)v611;
            *(_QWORD *)&__s[1] = v363;
            WORD4(__s[1]) = 258;
            v975 = v610;
            v976 = (JSC *)((char *)v360 + 184 * v359);
            (*(void (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)v976 & 0xFFFFFFFE) + 0x4C) + 0x78))();
            v978 = v363;
            if (*((_DWORD *)v363 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v978, (uint64_t)v594, a3, v595, a5, a6, a7, a8))
            {
              JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)__s, v594, a3, v595, a5, a6, a7, a8);
              goto LABEL_686;
            }
            v612 = *(_QWORD *)&__s[0];
            *(_QWORD *)&__s[0] = 0;
            v613 = (uint64_t)v360 + 184 * v359;
            v616 = *(_QWORD *)(v613 + 32);
            v615 = (uint64_t *)(v613 + 32);
            v614 = v616;
            *v615 = v612;
            if (v616)
            {
              if (*(_DWORD *)v614 == 1)
              {
                v695 = *(unsigned int *)(v614 + 20);
                if ((_DWORD)v695)
                {
                  v584 = *(WTF::StringImpl ***)(v614 + 8);
                  v585 = 8 * v695;
                  do
                  {
                    v583 = *v584;
                    *v584 = 0;
                    if (v583)
                    {
                      if (*(_DWORD *)v583 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v583, (WTF::AtomStringImpl *)v594, a3, v595, a5, a6, a7, a8);
                        WTF::fastFree(v586, v587, v588, v589, v590, v591, v592, v593);
                      }
                      else
                      {
                        *(_DWORD *)v583 -= 2;
                      }
                    }
                    ++v584;
                    v585 -= 8;
                  }
                  while (v585);
                }
                v697 = *(_QWORD *)(v614 + 8);
                if (v614 + 24 != v697 && v697 != 0)
                {
                  *(_QWORD *)(v614 + 8) = 0;
                  *(_DWORD *)(v614 + 16) = 0;
                  WTF::fastFree(v697, v594, a3, v595, a5, a6, a7, a8);
                }
                WTF::fastFree(v614, v594, a3, v595, a5, a6, a7, a8);
                v612 = *v615;
              }
              else
              {
                --*(_DWORD *)v614;
              }
            }
            *((_DWORD *)v360 + 46 * v359 + 6) = *(_DWORD *)(v612 + 20);
            if (*((_QWORD *)&__s[0] + 1))
              WTF::fastFree(*((_QWORD *)&__s[0] + 1) - 16, v594, a3, v595, a5, a6, a7, a8);
            v617 = *(_QWORD *)&__s[0];
            *(_QWORD *)&__s[0] = 0;
            if (v617)
            {
              if (*(_DWORD *)v617 == 1)
              {
                v696 = *(unsigned int *)(v617 + 20);
                if ((_DWORD)v696)
                {
                  v597 = *(WTF::StringImpl ***)(v617 + 8);
                  v598 = 8 * v696;
                  do
                  {
                    v596 = *v597;
                    *v597 = 0;
                    if (v596)
                    {
                      if (*(_DWORD *)v596 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v596, (WTF::AtomStringImpl *)v594, a3, v595, a5, a6, a7, a8);
                        WTF::fastFree(v599, v600, v601, v602, v603, v604, v605, v606);
                      }
                      else
                      {
                        *(_DWORD *)v596 -= 2;
                      }
                    }
                    ++v597;
                    v598 -= 8;
                  }
                  while (v598);
                }
                v699 = *(_QWORD *)(v617 + 8);
                if (v617 + 24 != v699 && v699 != 0)
                {
                  *(_QWORD *)(v617 + 8) = 0;
                  *(_DWORD *)(v617 + 16) = 0;
                  WTF::fastFree(v699, v594, a3, v595, a5, a6, a7, a8);
                }
                WTF::fastFree(v617, v594, a3, v595, a5, a6, a7, a8);
              }
              else
              {
                --*(_DWORD *)v617;
              }
            }
            v363 = v978;
            v362 = v975;
            v361 = v976;
          }
          else
          {
            *((_BYTE *)v360 + 184 * v359 + 18) = (v408 & 0x20000008) == 0;
            v409 = *(JSC **)(v405 + 88);
            if (v409
              || (v494 = *(_QWORD *)(v405 + 64)) != 0
              && (*(_BYTE *)(v494 + 5) == 1 || *(_DWORD *)(v494 + 80) >= 2u)
              && (v495 = v362,
                  JSC::Structure::materializePropertyTable((JSC::Structure *)v405, v363, 1, v361, a5, a6, a7, a8),
                  v362 = v495,
                  v361 = (JSC *)((char *)v360 + 184 * v359),
                  (v409 = v496) != 0))
            {
              v978 = v363;
              v410 = *((_QWORD *)v409 + 2);
              v411 = v410 & 0xFFFFFFFFFFFFFFFELL;
              v412 = *((unsigned int *)v409 + 2);
              v413 = (*((_DWORD *)v409 + 7) + *((_DWORD *)v409 + 6));
              if ((v410 & 1) != 0)
              {
                if ((_DWORD)v413)
                {
                  v470 = (unint64_t *)(v411 + v412);
                  v471 = v411 + v412 + 8 * v413;
                  v472 = (uint64_t)v360 + 184 * v359;
                  v473 = (WTF **)(v472 + 40);
                  v474 = (unsigned int *)(v472 + 52);
                  v475 = (_DWORD *)(v472 + 48);
                  do
                  {
                    v476 = a2;
                    v477 = *v470;
                    if ((*v470 & 0x4000000000000) == 0)
                    {
                      v478 = v477 & 0xFFFFFFFFFFFFLL;
                      if ((v477 & 0xFFFFFFFFFFFFLL) != 1
                        && (!v478 || (*(_BYTE *)((v477 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) == 0))
                      {
                        v479 = *v474;
                        if ((_DWORD)v479 == *v475)
                        {
                          v971 = (unint64_t)v475;
                          v972 = (uint64_t *)v473;
                          v973 = v409;
                          v974 = v10;
                          v975 = v362;
                          v976 = v361;
                          v968 = v474;
                          v969 = (JSC *)((char *)v360 + 184 * v359 + 56);
                          v622 = v479 + (v479 >> 2);
                          if (v622 >= 0x10)
                            v623 = v622 + 1;
                          else
                            v623 = 16;
                          if (v623 <= v479 + 1)
                            v624 = v479 + 1;
                          else
                            v624 = v623;
                          v970 = *v473;
                          if (v624 < 9)
                          {
                            v625 = (int8x16_t *)v969;
                            v909 = (_DWORD *)v971;
                            *v972 = (uint64_t)v969;
                            *v909 = 8;
                          }
                          else
                          {
                            if (v624 >> 28)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198A340ACLL);
                            }
                            v625 = (int8x16_t *)WTF::fastMalloc((WTF *)(16 * v624));
                            *(_DWORD *)v971 = v624;
                            *v972 = (uint64_t)v625;
                          }
                          if ((_DWORD)v479)
                          {
                            v751 = 16 * v479;
                            v752 = v970;
                            do
                            {
                              v753 = *(int8x16_t *)v752;
                              v752 = (WTF *)((char *)v752 + 16);
                              a9 = v753;
                              *v625++ = v753;
                              v751 -= 16;
                            }
                            while (v751);
                          }
                          if (v969 != v970 && v970)
                          {
                            if ((WTF *)*v972 == v970)
                            {
                              *v972 = 0;
                              *(_DWORD *)v971 = 0;
                            }
                            WTF::fastFree((unint64_t)v970, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
                          }
                          v474 = v968;
                          v479 = *v968;
                          v473 = (WTF **)v972;
                          v409 = v973;
                          v480 = *v972 + 16 * v479;
                          v362 = v975;
                          v361 = v976;
                          v10 = v974;
                          v475 = (_DWORD *)v971;
                        }
                        else
                        {
                          v480 = (uint64_t)*v473 + 16 * v479;
                        }
                        *(_QWORD *)v480 = v478;
                        *(_DWORD *)(v480 + 8) = HIBYTE(v477);
                        *v474 = v479 + 1;
                      }
                    }
                    ++v470;
                    a2 = v476;
                  }
                  while (v470 != (unint64_t *)v471);
                }
              }
              else if ((_DWORD)v413)
              {
                v414 = v411 + 4 * v412;
                v415 = v414 + 16 * v413;
                v416 = (uint64_t)v360 + 184 * v359;
                v417 = (WTF **)(v416 + 40);
                v418 = (unsigned int *)(v416 + 52);
                v419 = (_DWORD *)(v416 + 48);
                do
                {
                  v420 = *(_QWORD *)v414;
                  if (*(_QWORD *)v414 != 1
                    && (*(_BYTE *)(v414 + 12) & 4) == 0
                    && (!v420 || (*(_BYTE *)(v420 + 16) & 0x20) == 0))
                  {
                    v421 = a2;
                    v422 = *(_DWORD *)(v414 + 8);
                    v423 = *v418;
                    if ((_DWORD)v423 == *v419)
                    {
                      v971 = (unint64_t)v419;
                      v972 = (uint64_t *)v417;
                      v973 = v409;
                      v974 = v10;
                      v975 = v362;
                      v976 = v361;
                      v968 = v418;
                      v969 = (JSC *)((char *)v360 + 184 * v359 + 56);
                      v646 = v423 + (v423 >> 2);
                      if (v646 >= 0x10)
                        v647 = v646 + 1;
                      else
                        v647 = 16;
                      if (v647 <= v423 + 1)
                        v648 = v423 + 1;
                      else
                        v648 = v647;
                      v970 = *v417;
                      if (v648 < 9)
                      {
                        v650 = (int8x16_t *)v969;
                        v927 = (_DWORD *)v971;
                        *v972 = (uint64_t)v969;
                        *v927 = 8;
                      }
                      else
                      {
                        v649 = v648;
                        if (v648 >> 28)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198A340B4);
                        }
                        v650 = (int8x16_t *)WTF::fastMalloc((WTF *)(16 * v648));
                        *(_DWORD *)v971 = v649;
                        *v972 = (uint64_t)v650;
                      }
                      if ((_DWORD)v423)
                      {
                        v763 = 16 * v423;
                        v764 = v970;
                        do
                        {
                          v765 = *(int8x16_t *)v764;
                          v764 = (WTF *)((char *)v764 + 16);
                          a9 = v765;
                          *v650++ = v765;
                          v763 -= 16;
                        }
                        while (v763);
                      }
                      if (v969 != v970 && v970)
                      {
                        if ((WTF *)*v972 == v970)
                        {
                          *v972 = 0;
                          *(_DWORD *)v971 = 0;
                        }
                        WTF::fastFree((unint64_t)v970, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
                      }
                      v418 = v968;
                      v423 = *v968;
                      v417 = (WTF **)v972;
                      v409 = v973;
                      v424 = *v972 + 16 * v423;
                      v362 = v975;
                      v361 = v976;
                      v10 = v974;
                      v419 = (_DWORD *)v971;
                    }
                    else
                    {
                      v424 = (uint64_t)*v417 + 16 * v423;
                    }
                    *(_QWORD *)v424 = v420;
                    *(_DWORD *)(v424 + 8) = v422;
                    *v418 = v423 + 1;
                    a2 = v421;
                  }
                  v414 += 16;
                }
                while (v414 != v415);
              }
              v980 = v409;
              v363 = v978;
            }
            *((_DWORD *)v360 + 46 * v359 + 6) = *((_DWORD *)v360 + 46 * v359 + 13);
          }
        }
        LOBYTE(__s[0]) = 123;
        v481 = *(_QWORD *)(a2 + 8);
        if (!v481
          || ((v482 = *(unsigned int *)(a2 + 16), v482 < *(_DWORD *)(v481 + 4))
            ? (v483 = *(_QWORD *)a2 == 0)
            : (v483 = 0),
              !v483))
        {
LABEL_921:
          v608 = v362;
          v609 = v361;
          WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
          v362 = v608;
          v361 = v609;
          goto LABEL_745;
        }
        v484 = *(_DWORD *)(v481 + 16);
        v485 = *(_QWORD *)(v481 + 8);
        *(_DWORD *)(a2 + 16) = v482 + 1;
        if ((v484 & 4) != 0)
        {
          v486 = 123;
LABEL_744:
          *(_BYTE *)(v485 + v482) = v486;
          goto LABEL_745;
        }
        *(_WORD *)(v485 + 2 * v482) = 123;
LABEL_745:
        v487 = v10[10];
        if (v487)
          v488 = *((_DWORD *)v487 + 1);
        else
          v488 = 0;
        v489 = (v488 + *((_DWORD *)v10 + 806));
        v490 = v10[401];
        if (v490)
        {
          v491 = *((_DWORD *)v490 + 1);
          if (v489 <= v491)
          {
LABEL_749:
            if (v491)
            {
              v492 = (const char *)*((_QWORD *)v490 + 1);
              if (v489 >= v491)
                v493 = v491 | ((unint64_t)((*((_DWORD *)v490 + 4) >> 2) & 1) << 32);
              else
                v493 = ((unint64_t)((*((_DWORD *)v490 + 4) >> 2) & 1) << 32) | v489;
              goto LABEL_878;
            }
            goto LABEL_877;
          }
          v755 = v362;
          v756 = v361;
          *(_DWORD *)v490 += 2;
LABEL_1201:
          *(_QWORD *)&__dst = v490;
          if (v487)
            *(_DWORD *)v487 += 2;
          v989 = v487;
          WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)&__dst, (uint64_t *)&v989, (int **)__s);
          v759 = *(JSC **)&__s[0];
          if (!*(_QWORD *)&__s[0])
          {
            __break(0xC471u);
            JUMPOUT(0x198A34238);
          }
          *(_QWORD *)&__s[0] = 0;
          v760 = v10[401];
          v10[401] = v759;
          if (v760)
          {
            if (*(_DWORD *)v760 == 2)
            {
              WTF::StringImpl::~StringImpl(v760, v757, a3, v758, a5, a6, a7, a8);
              WTF::fastFree(v782, v783, v784, v785, v786, v787, v788, v789);
              v790 = *(WTF::StringImpl **)&__s[0];
              *(_QWORD *)&__s[0] = 0;
              if (v790)
              {
                if (*(_DWORD *)v790 == 2)
                {
                  WTF::StringImpl::~StringImpl(v790, v757, a3, v758, a5, a6, a7, a8);
                  WTF::fastFree(v889, v890, v891, v892, v893, v894, v895, v896);
                }
                else
                {
                  *(_DWORD *)v790 -= 2;
                }
              }
            }
            else
            {
              *(_DWORD *)v760 -= 2;
              *(_QWORD *)&__s[0] = 0;
            }
          }
          v761 = v989;
          v989 = 0;
          if (v761)
          {
            if (*(_DWORD *)v761 == 2)
            {
              WTF::StringImpl::~StringImpl(v761, v757, a3, v758, a5, a6, a7, a8);
              WTF::fastFree(v791, v792, v793, v794, v795, v796, v797, v798);
            }
            else
            {
              *(_DWORD *)v761 -= 2;
            }
          }
          v762 = (WTF::StringImpl *)__dst;
          *(_QWORD *)&__dst = 0;
          if (v762)
          {
            if (*(_DWORD *)v762 == 2)
            {
              WTF::StringImpl::~StringImpl(v762, v757, a3, v758, a5, a6, a7, a8);
              WTF::fastFree(v799, v800, v801, v802, v803, v804, v805, v806);
            }
            else
            {
              *(_DWORD *)v762 -= 2;
            }
          }
          v490 = v10[401];
          if (!v490)
          {
            v493 = 0x100000000;
            v492 = "";
            v361 = v756;
            v362 = v755;
            goto LABEL_878;
          }
          v491 = *((_DWORD *)v490 + 1);
          v361 = v756;
          v362 = v755;
          goto LABEL_749;
        }
        if ((_DWORD)v489)
        {
          v755 = v362;
          v756 = v361;
          goto LABEL_1201;
        }
LABEL_877:
        v493 = 0x100000000;
        v492 = "";
LABEL_878:
        v10[402] = (JSC *)v492;
        v568 = v979;
        *v979 = v493;
        *((_BYTE *)v568 + 4) = BYTE4(v493);
LABEL_568:
        if ((*(_DWORD *)(a2 + 16) & 0x80000000) != 0)
          goto LABEL_686;
        v365 = *v364;
        v366 = (uint64_t)v360 + 184 * v359;
        v368 = *(_DWORD *)(v366 + 24);
        v367 = (_DWORD *)(v366 + 24);
        if ((_DWORD)v365 == v368)
        {
          v425 = v10[401];
          if (v425)
          {
            v426 = (const char *)*((_QWORD *)v425 + 1);
            v427 = *((unsigned int *)v425 + 1) | ((unint64_t)((*((_DWORD *)v425 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v426 = 0;
            v427 = 0x100000000;
          }
          v428 = v10[10];
          if (v428)
            v429 = *((_DWORD *)v428 + 1);
          else
            v429 = 0;
          v430 = (*((_DWORD *)v10 + 806) - v429);
          v431 = v430 | 0x100000000;
          if ((v427 & 0x100000000) == 0)
            v431 = v430;
          if (v430 < v427)
            v432 = v431;
          else
            v432 = v427;
          v433 = (_DWORD)v427 == 0;
          if (!(_DWORD)v427)
            v426 = "";
          v434 = 0x100000000;
          if (!v433)
            v434 = v432;
          v10[402] = (JSC *)v426;
          v435 = v979;
          *v979 = v434;
          *((_BYTE *)v435 + 4) = BYTE4(v434);
          if (*v367)
          {
            v436 = *(_DWORD *)(a2 + 16);
            if (v436 < 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198A32704);
            }
            if (!v436)
            {
              __break(0xC471u);
              JUMPOUT(0x198A32724);
            }
            v437 = v436 - 1;
            v439 = *(WTF::StringImpl **)a2;
            v438 = *(WTF::StringImpl **)(a2 + 8);
            v440 = v438;
            if (!v438)
            {
              v440 = *(WTF::StringImpl **)a2;
              if (!v439)
              {
LABEL_674:
                v439 = *(WTF::StringImpl **)(a2 + 8);
                goto LABEL_675;
              }
            }
            if ((*((_BYTE *)v440 + 16) & 4) != 0)
            {
              if (!v439)
                goto LABEL_674;
LABEL_675:
              v441 = *(unsigned __int8 *)(*((_QWORD *)v439 + 1) + v437);
            }
            else
            {
              if (v439)
                v438 = *(WTF::StringImpl **)a2;
              v441 = *(unsigned __int16 *)(*((_QWORD *)v438 + 1) + 2 * v437);
            }
            if (v428 && v441 != 123 && *((_DWORD *)v428 + 1))
            {
              LOBYTE(__dst) = 10;
              v557 = *(_QWORD *)v979;
              *(_QWORD *)&__s[0] = v426;
              *((_QWORD *)&__s[0] + 1) = v557;
              WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(a2, &__dst, (uint64_t)__s, (uint64_t)v361, a5, a6, a7, a8);
            }
          }
          if (*((_BYTE *)v360 + 184 * v359 + 17))
            v442 = 93;
          else
            v442 = 125;
          LOBYTE(__s[0]) = v442;
          v443 = *(_QWORD *)(a2 + 8);
          if (!v443
            || (v444 = *(unsigned int *)(a2 + 16), v444 >= *(_DWORD *)(v443 + 4))
            || *(_QWORD *)a2)
          {
            WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
          }
          else
          {
            v445 = *(_DWORD *)(v443 + 16);
            v446 = *(_QWORD *)(v443 + 8);
            *(_DWORD *)(a2 + 16) = v444 + 1;
            if ((v445 & 4) != 0)
              *(_BYTE *)(v446 + v444) = v442;
            else
              *(_WORD *)(v446 + 2 * v444) = v442;
          }
          goto LABEL_686;
        }
        *v364 = v365 + 1;
        if (!*((_BYTE *)v360 + 184 * v359 + 17))
        {
          if (*((_BYTE *)v360 + 184 * v359 + 18))
          {
            if (*((_DWORD *)v360 + 46 * v359 + 13) <= v365)
            {
              __break(0xC471u);
              JUMPOUT(0x198A33F68);
            }
            v369 = (uint64_t)v360 + 184 * v359;
            v370 = *(_QWORD *)(v369 + 40) + 16 * v365;
            v371 = *(_QWORD *)v370;
            v372 = *(unsigned int **)v361;
            if (**(_DWORD **)v361 == (*(_QWORD *)(v369 + 8) >> 4))
            {
              v373 = *(_DWORD *)(v370 + 8);
              if (v373 <= 63)
              {
                v374 = (uint64_t)(v372 + 4);
              }
              else
              {
                v374 = *((_QWORD *)v372 + 1) - 8;
                v373 = 63 - v373;
              }
              v375 = *(_QWORD *)(v374 + 8 * v373);
              goto LABEL_577;
            }
            v581 = v361;
            v375 = JSC::JSObject::get(v372, (uint64_t)v362, *(_QWORD *)v370, (uint64_t)v361, a5, a6, a7, a8);
            if (!*((_DWORD *)v363 + 20))
            {
LABEL_895:
              v361 = v581;
              goto LABEL_577;
            }
            v939 = v363;
            goto LABEL_1508;
          }
          v580 = *((_QWORD *)v360 + 23 * v359 + 4);
          if (v580)
          {
            if (*(_DWORD *)(v580 + 20) <= v365)
            {
              __break(0xC471u);
              JUMPOUT(0x198A34240);
            }
            v371 = *(_QWORD *)(*(_QWORD *)(v580 + 8) + 8 * v365);
            v581 = v361;
            v375 = JSC::JSObject::get(*(unsigned int **)v361, (uint64_t)v362, v371, (uint64_t)v361, a5, a6, a7, a8);
            if (!*((_DWORD *)v363 + 20))
              goto LABEL_895;
            v848 = JSC::VM::hasExceptionsAfterHandlingTraps(v363, (uint64_t)v362, a3, v582, a5, a6, a7, a8);
          }
          else
          {
            if (*((_DWORD *)v360 + 46 * v359 + 13) <= v365)
            {
              __break(0xC471u);
              JUMPOUT(0x198A34248);
            }
            v581 = v361;
            v899 = (uint64_t)v360 + 184 * v359;
            v900 = *(_QWORD *)(v899 + 40) + 16 * v365;
            v371 = *(_QWORD *)v900;
            a3 = *(_QWORD *)v361;
            if (**(_DWORD **)v361 != (*(_QWORD *)(v899 + 8) >> 4))
              goto LABEL_1414;
            v901 = *(_DWORD *)(v900 + 8);
            if (v901 <= 63)
            {
              v902 = a3 + 16;
            }
            else
            {
              v902 = *(_QWORD *)(a3 + 8) - 8;
              v901 = 63 - v901;
            }
            v375 = *(_QWORD *)(v902 + 8 * v901);
            if ((v375 & 0xFFFE000000000002) != 0)
              goto LABEL_895;
            v903 = *(unsigned __int8 *)(v375 + 5);
            if (v903 == 6)
            {
LABEL_1414:
              v904 = JSC::JSObject::get(*(unsigned int **)v361, (uint64_t)v362, v371, (uint64_t)v361, a5, a6, a7, a8);
            }
            else
            {
              if (v903 != 5)
                goto LABEL_895;
              v904 = JSC::GetterSetter::callGetter((JSC::VM *)v375, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
            }
            v375 = v904;
            if (!*((_DWORD *)v363 + 20))
              goto LABEL_895;
            v939 = v363;
LABEL_1508:
            v848 = JSC::VM::hasExceptionsAfterHandlingTraps(v939, (uint64_t)v362, a3, v905, a5, a6, a7, a8);
          }
          v361 = v581;
          if (v848)
            goto LABEL_686;
LABEL_577:
          v376 = *(unsigned int *)(a2 + 16);
          if ((v376 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198A32164);
          }
          if (!(_DWORD)v376)
          {
            __break(0xC471u);
            JUMPOUT(0x198A32184);
          }
          v377 = v376 - 1;
          v379 = *(WTF::StringImpl **)a2;
          v378 = *(_QWORD *)(a2 + 8);
          v380 = (WTF::StringImpl *)v378;
          if (!v378)
          {
            v380 = *(WTF::StringImpl **)a2;
            if (!v379)
            {
LABEL_582:
              v379 = 0;
              v381 = *(WTF::StringImpl **)(a2 + 8);
              goto LABEL_583;
            }
          }
          if ((*((_BYTE *)v380 + 16) & 4) != 0)
          {
            v381 = *(WTF::StringImpl **)a2;
            if (!v379)
              goto LABEL_582;
LABEL_583:
            v382 = *(unsigned __int8 *)(*((_QWORD *)v381 + 1) + v377);
          }
          else
          {
            if (v379)
              v908 = *(WTF::StringImpl **)a2;
            else
              v908 = *(WTF::StringImpl **)(a2 + 8);
            v382 = *(unsigned __int16 *)(*((_QWORD *)v908 + 1) + 2 * v377);
          }
          if (v382 != 123)
          {
            LOBYTE(__s[0]) = 44;
            if (!v378 || v376 >= *(_DWORD *)(v378 + 4) || v379)
            {
              v579 = v361;
              WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
              v361 = v579;
            }
            else
            {
              v383 = *(_DWORD *)(v378 + 16);
              v384 = *(_QWORD *)(v378 + 8);
              *(_DWORD *)(a2 + 16) = v376 + 1;
              if ((v383 & 4) != 0)
                *(_BYTE *)(v384 + v376) = 44;
              else
                *(_WORD *)(v384 + 2 * v376) = 44;
            }
          }
          v385 = v10[10];
          if (v385 && *((_DWORD *)v385 + 1))
          {
            LOBYTE(__dst) = 10;
            __s[0] = *((_OWORD *)v10 + 201);
            v497 = v361;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(a2, &__dst, (uint64_t)__s, (uint64_t)v361, a5, a6, a7, a8);
            v361 = v497;
          }
          *(_DWORD *)v371 += 2;
          v386 = *(_DWORD *)(a2 + 16);
          if ((v386 & 0x80000000) != 0)
            goto LABEL_615;
          v387 = *(_DWORD *)(v371 + 4);
          if (v387 >= 0x2AAAAAAB)
          {
            if (*(_BYTE *)(a2 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x198A33FE0);
            }
            *(_DWORD *)(a2 + 16) = -1;
            goto LABEL_615;
          }
          v388 = 6 * v387 + 2;
          v389 = *(WTF::StringImpl **)(a2 + 8);
          v390 = v389;
          if (!v389)
          {
            v390 = *(WTF::StringImpl **)a2;
            if (!*(_QWORD *)a2)
            {
              if (__CFADD__(v386, (_DWORD)v388))
                v391 = -1;
              else
                v391 = v386 + v388;
              if ((*(_BYTE *)(v371 + 16) & 4) == 0)
              {
LABEL_828:
                v392 = v361;
                if (v386)
                {
                  v503 = (WTF::AtomStringImpl *)MEMORY[8];
                  goto LABEL_789;
                }
LABEL_848:
                v503 = 0;
LABEL_789:
                v508 = 2 * v386;
                if (2 * v386 >= 0x7FFFFFFF)
                  v508 = 0x7FFFFFFF;
                if (v508 <= v391)
                  v508 = v391;
                if (v508 <= 0x10)
                  v509 = 16;
                else
                  v509 = v508;
                WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>(a2, v503, v509, (uint64_t)v361, a5, a6, a7, a8);
LABEL_797:
                v510 = *(unsigned int *)(a2 + 16);
                v361 = v392;
                if ((v510 & 0x80000000) == 0)
                {
                  v389 = *(WTF::StringImpl **)(a2 + 8);
                  goto LABEL_799;
                }
                goto LABEL_615;
              }
LABEL_774:
              v504 = v361;
              v505 = 2 * v386;
              if (v505 >= 0x7FFFFFFF)
                v505 = 0x7FFFFFFF;
              if (v505 <= v391)
                v505 = v391;
              if (v505 <= 0x10)
                v506 = 16;
              else
                v506 = v505;
              if ((v389 || (v389 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v389 + 16) & 4) == 0)
                WTF::StringBuilder::reallocateBuffer<char16_t>(a2, (WTF::AtomStringImpl *)v506, a3, (uint64_t)v361, a5, a6, a7, a8);
              else
                WTF::StringBuilder::reallocateBuffer<unsigned char>(a2, (WTF::AtomStringImpl *)v506, a3, (uint64_t)v361, a5, a6, a7, a8);
              v547 = *(unsigned int *)(a2 + 16);
              v361 = v504;
              if ((v547 & 0x80000000) != 0)
                goto LABEL_615;
              v389 = *(WTF::StringImpl **)(a2 + 8);
              goto LABEL_853;
            }
          }
          if ((*((_BYTE *)v390 + 16) & 4) != 0 && (*(_BYTE *)(v371 + 16) & 4) != 0)
          {
            if (__CFADD__(v386, (_DWORD)v388))
              v391 = -1;
            else
              v391 = v386 + v388;
            if (!v389)
              goto LABEL_774;
            v386 = *((_DWORD *)v389 + 1);
            if (v386 < v391)
              goto LABEL_774;
            v558 = *(WTF::StringImpl **)a2;
            *(_QWORD *)a2 = 0;
            if (v558)
            {
              if (*(_DWORD *)v558 == 2)
              {
                v569 = v361;
                WTF::StringImpl::~StringImpl(v558, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
                WTF::fastFree(v570, v571, v572, v573, v574, v575, v576, v577);
                v361 = v569;
                v389 = *(WTF::StringImpl **)(a2 + 8);
              }
              else
              {
                *(_DWORD *)v558 -= 2;
              }
            }
            v547 = *(unsigned int *)(a2 + 16);
LABEL_853:
            v548 = *((_QWORD *)v389 + 1);
            *(_DWORD *)(a2 + 16) = v391;
            if (!v548)
              goto LABEL_615;
            v549 = (_BYTE *)(v548 + v547);
            *v549 = 34;
            v550 = v549 + 1;
            v551 = *(unsigned int *)(v371 + 4);
            if ((_DWORD)v551)
            {
              v552 = *(unsigned __int8 **)(v371 + 8);
              do
              {
                v553 = *v552;
                v554 = WTF::escapedFormsForJSON[*v552];
                if (WTF::escapedFormsForJSON[*v552])
                {
                  *v550 = 92;
                  v550[1] = v554;
                  if (v554 == 117)
                  {
                    *((_WORD *)v550 + 1) = 12336;
                    if (v553 >= 0xA0)
                      v869 = 87;
                    else
                      v869 = 48;
                    v550[4] = v869 + (v553 >> 4);
                    v870 = v553 & 0xF;
                    if (v870 >= 0xA)
                      v871 = 87;
                    else
                      v871 = 48;
                    v550[5] = v871 + v870;
                    v550 += 6;
                  }
                  else
                  {
                    v550 += 2;
                  }
                }
                else
                {
                  *v550++ = v553;
                }
                ++v552;
                --v551;
              }
              while (v551);
            }
            v555 = &v549[v388];
            *v550 = 34;
            v556 = v550 + 1;
            if (v556 >= v555)
              goto LABEL_615;
            v525 = (*(_DWORD *)(a2 + 16) + (_DWORD)v556 - (_DWORD)v555);
            goto LABEL_816;
          }
          if (__CFADD__(v386, (_DWORD)v388))
            v391 = -1;
          else
            v391 = v386 + v388;
          if (!v389)
          {
            v502 = *(WTF::StringImpl **)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_828;
            if ((*((_BYTE *)v502 + 16) & 4) != 0)
            {
              v392 = v361;
              if (v386)
              {
                v503 = (WTF::AtomStringImpl *)*((_QWORD *)v502 + 1);
                goto LABEL_789;
              }
              goto LABEL_848;
            }
LABEL_602:
            v392 = v361;
            v393 = 2 * v386;
            if (v393 >= 0x7FFFFFFF)
              v393 = 0x7FFFFFFF;
            if (v393 <= v391)
              v393 = v391;
            if (v393 <= 0x10)
              v394 = 16;
            else
              v394 = v393;
            if ((v389 || (v389 = *(WTF::StringImpl **)a2) != 0) && (*((_BYTE *)v389 + 16) & 4) == 0)
              WTF::StringBuilder::reallocateBuffer<char16_t>(a2, (WTF::AtomStringImpl *)v394, a3, (uint64_t)v361, a5, a6, a7, a8);
            else
              WTF::StringBuilder::reallocateBuffer<unsigned char>(a2, (WTF::AtomStringImpl *)v394, a3, (uint64_t)v361, a5, a6, a7, a8);
            goto LABEL_797;
          }
          if ((*((_BYTE *)v389 + 16) & 4) != 0)
          {
            v392 = v361;
            if (v386)
            {
              v507 = *(WTF::StringImpl **)a2;
              if (!*(_QWORD *)a2)
                v507 = *(WTF::StringImpl **)(a2 + 8);
              v503 = (WTF::AtomStringImpl *)*((_QWORD *)v507 + 1);
            }
            else
            {
              v503 = 0;
            }
            v386 = *((_DWORD *)v389 + 1);
            goto LABEL_789;
          }
          v386 = *((_DWORD *)v389 + 1);
          if (v386 < v391)
            goto LABEL_602;
          v546 = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = 0;
          if (v546)
          {
            if (*(_DWORD *)v546 == 2)
            {
              v559 = v361;
              WTF::StringImpl::~StringImpl(v546, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
              WTF::fastFree(v560, v561, v562, v563, v564, v565, v566, v567);
              v361 = v559;
              v389 = *(WTF::StringImpl **)(a2 + 8);
            }
            else
            {
              *(_DWORD *)v546 -= 2;
            }
          }
          v510 = *(unsigned int *)(a2 + 16);
LABEL_799:
          v511 = *((_QWORD *)v389 + 1);
          *(_DWORD *)(a2 + 16) = v391;
          if (v511)
          {
            v512 = (_WORD *)(v511 + 2 * v510);
            *v512 = 34;
            v513 = v512 + 1;
            v514 = *(unsigned int *)(v371 + 4);
            if ((*(_BYTE *)(v371 + 16) & 4) == 0)
            {
              if ((_DWORD)v514)
              {
                v515 = *(unsigned __int16 **)(v371 + 8);
                do
                {
                  v516 = *v515;
                  if (v516 > 0xFF)
                  {
                    if ((v516 & 0xF800) == 0xD800)
                    {
                      if (v514 < 2 || (v516 & 0x400) != 0 || (v859 = v515[1], (v859 & 0xFC00) != 0xDC00))
                      {
                        *(_DWORD *)v513 = 7667804;
                        if (v516 >> 8 >= 0xA0)
                          v872 = 87;
                        else
                          v872 = 48;
                        v513[2] = v872 + (v516 >> 12);
                        v873 = (v516 >> 8) & 0xF;
                        if (v873 >= 0xA)
                          v874 = 87;
                        else
                          v874 = 48;
                        v513[3] = v874 + v873;
                        if (v516 >= 0xA0u)
                          v875 = 87;
                        else
                          v875 = 48;
                        v513[4] = v875 + ((v516 & 0xF0) >> 4);
                        v876 = v516 & 0xF;
                        if (v876 >= 0xA)
                          v877 = 87;
                        else
                          v877 = 48;
                        v513[5] = v877 + v876;
                        v513 += 6;
                      }
                      else
                      {
                        *v513 = v516;
                        v513[1] = v859;
                        v513 += 2;
                        --v514;
                        ++v515;
                      }
                    }
                    else
                    {
                      *v513++ = v516;
                    }
                  }
                  else
                  {
                    v517 = WTF::escapedFormsForJSON[v516];
                    if (WTF::escapedFormsForJSON[v516])
                    {
                      *v513 = 92;
                      v513[1] = v517;
                      if (v517 == 117)
                      {
                        *((_DWORD *)v513 + 1) = 3145776;
                        if (v516 >= 0xA0u)
                          v863 = 87;
                        else
                          v863 = 48;
                        v513[4] = v863 + ((v516 & 0xF0) >> 4);
                        v864 = v516 & 0xF;
                        if (v864 >= 0xA)
                          v865 = 87;
                        else
                          v865 = 48;
                        v513[5] = v865 + v864;
                        v513 += 6;
                      }
                      else
                      {
                        v513 += 2;
                      }
                    }
                    else
                    {
                      *v513++ = v516;
                    }
                  }
                  ++v515;
                  --v514;
                }
                while (v514);
              }
LABEL_814:
              v523 = (char *)&v512[v388];
              *v513 = 34;
              v524 = (char *)(v513 + 1);
              if (v524 >= v523)
                goto LABEL_615;
              v525 = v391 - ((unint64_t)(v523 - v524) >> 1);
LABEL_816:
              v526 = v361;
              WTF::StringBuilder::shrink((WTF::StringBuilder *)a2, (WTF::AtomStringImpl *)v525, a3, (uint64_t)v361, a5, a6, a7, a8);
              v361 = v526;
              goto LABEL_615;
            }
            if (!(_DWORD)v514)
              goto LABEL_814;
            v518 = *(unsigned __int8 **)(v371 + 8);
            while (2)
            {
              v519 = *v518;
              v520 = WTF::escapedFormsForJSON[*v518];
              if (!WTF::escapedFormsForJSON[*v518])
              {
                v521 = 1;
                v522 = v513;
                goto LABEL_812;
              }
              *v513 = 92;
              v513[1] = v520;
              if (v520 == 117)
              {
                *((_DWORD *)v513 + 1) = 3145776;
                if (v519 >= 0xA0)
                  v860 = 87;
                else
                  v860 = 48;
                v861 = v860 + (v519 >> 4);
                v522 = v513 + 5;
                v513[4] = v861;
                v519 &= 0xFu;
                if (v519 >= 0xA)
                  v862 = 87;
                else
                  v862 = 48;
                LOWORD(v519) = v862 + v519;
                v521 = 6;
LABEL_812:
                v513 += v521;
                *v522 = v519;
              }
              else
              {
                v513 += 2;
              }
              ++v518;
              if (!--v514)
                goto LABEL_814;
              continue;
            }
          }
LABEL_615:
          if (*(_DWORD *)v371 != 2)
          {
            *(_DWORD *)v371 -= 2;
            goto LABEL_617;
          }
          v466 = v361;
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v371, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
          v468 = *(_QWORD *)(v977 + 752);
          if (v468)
          {
            if (!(v371 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v371 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v371)) & 1) != 0)
            {
LABEL_715:
              v469 = *(unsigned int *)(v468 + 8000);
              if (v469 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v468, v371, (os_unfair_lock_s *)5, v467, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v468 + 8 * v469) = v371 | 0x5000000000000;
                *(_DWORD *)(v468 + 8000) = v469 + 1;
              }
              v361 = v466;
              goto LABEL_617;
            }
            if (v371 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v371 >> 24)
            {
              v467 = 0;
            }
            else
            {
              v467 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v371 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v371) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v467 == 1)
                goto LABEL_715;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v468, v371, 1, v467, a5, a6, a7, a8);
            v361 = v466;
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v371, (uint64_t)&bmalloc_heap_config, 1);
            v361 = v466;
          }
LABEL_617:
          LOBYTE(__s[0]) = 58;
          v395 = *(_QWORD *)(a2 + 8);
          if (v395
            && ((v396 = *(unsigned int *)(a2 + 16), v396 < *(_DWORD *)(v395 + 4))
              ? (v397 = *(_QWORD *)a2 == 0)
              : (v397 = 0),
                v397))
          {
            v398 = *(_DWORD *)(v395 + 16);
            v399 = *(_QWORD *)(v395 + 8);
            *(_DWORD *)(a2 + 16) = v396 + 1;
            if ((v398 & 4) != 0)
              *(_BYTE *)(v399 + v396) = 58;
            else
              *(_WORD *)(v399 + 2 * v396) = 58;
          }
          else
          {
            v578 = v361;
            WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
            v361 = v578;
          }
          v400 = v10[10];
          if (v400 && *((_DWORD *)v400 + 1))
          {
            LOBYTE(__s[0]) = 32;
            v498 = *(_QWORD *)(a2 + 8);
            if (!v498
              || (v499 = *(unsigned int *)(a2 + 16), v499 >= *(_DWORD *)(v498 + 4))
              || *(_QWORD *)a2)
            {
              WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
            }
            else
            {
              v500 = *(_DWORD *)(v498 + 16);
              v501 = *(_QWORD *)(v498 + 8);
              *(_DWORD *)(a2 + 16) = v499 + 1;
              if ((v500 & 4) != 0)
                *(_BYTE *)(v501 + v499) = 32;
              else
                *(_WORD *)(v501 + 2 * v499) = 32;
            }
          }
          *(_QWORD *)&__s[0] = v371;
          *(_QWORD *)&__s[1] = 0;
          appended = JSC::Stringifier::appendStringifiedValue(v10, a2, v375);
          goto LABEL_627;
        }
        v457 = *(_QWORD *)v361;
        if (!*((_BYTE *)v360 + 184 * v359 + 16))
          goto LABEL_1570;
        v458 = *(_QWORD *)(v457 + 8);
        v459 = *(_BYTE *)(v457 + 4) & 0xF;
        if ((v459 - 8) >= 2)
        {
          switch(*(_BYTE *)(v457 + 4) & 0xF)
          {
            case 0:
            case 1:
              v618 = v362;
              v619 = (uint64_t *)v361;
              IndexQuicklyForTypedArray = JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v457, v365);
              v361 = (JSC::JSGlobalObject *)v619;
              v621 = IndexQuicklyForTypedArray;
              v457 = *v619;
              if (!v621)
              {
                v362 = v618;
LABEL_1570:
                v952 = v361;
                v460 = JSC::JSObject::get((JSC::JSObject *)v457, v362, v365);
                if (*((_DWORD *)v363 + 20))
                {
                  v956 = JSC::VM::hasExceptionsAfterHandlingTraps(v363, v953, v954, v955, a5, a6, a7, a8);
                  v361 = v952;
                  if (v956)
                    goto LABEL_686;
                }
                else
                {
                  v361 = v952;
                }
                goto LABEL_704;
              }
              v458 = *(_QWORD *)(v457 + 8);
              v459 = *(_BYTE *)(v457 + 4) & 0xF;
              break;
            case 3:
              goto LABEL_1570;
            case 4:
            case 5:
              goto LABEL_700;
            case 6:
            case 7:
              if (*(_DWORD *)(v458 - 4) > v365)
                break;
              goto LABEL_1570;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              if (*(_DWORD *)(v458 - 4) <= v365 || !*(_QWORD *)(v458 + 8 * v365 + 16))
                goto LABEL_1570;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198A33C3CLL);
          }
        }
        else
        {
LABEL_700:
          if (*(_DWORD *)(v458 - 4) <= v365 || !*(_QWORD *)(v458 + 8 * v365))
            goto LABEL_1570;
        }
        if ((v459 - 8) >= 2)
        {
          switch(v459)
          {
            case 0:
            case 1:
              v747 = v361;
              v748 = JSC::JSObject::getIndexQuicklyForTypedArray(v457, v365, 0);
              v361 = v747;
              v460 = v748;
              break;
            case 4:
            case 5:
              v460 = *(unsigned int *)(v458 + 8 * v365) | 0xFFFE000000000000;
              break;
            case 6:
            case 7:
              v460 = *(_QWORD *)(v458 + 8 * v365) + 0x2000000000000;
              break;
            case 10:
            case 11:
            case 12:
            case 13:
              v460 = *(_QWORD *)(v458 + 8 * v365 + 16);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198A33C1CLL);
          }
        }
        else
        {
          v460 = *(_QWORD *)(v458 + 8 * v365);
        }
LABEL_704:
        if ((_DWORD)v365)
        {
          LOBYTE(__s[0]) = 44;
          v461 = *(_QWORD *)(a2 + 8);
          if (!v461
            || (v462 = *(unsigned int *)(a2 + 16), v462 >= *(_DWORD *)(v461 + 4))
            || *(_QWORD *)a2)
          {
            v645 = v361;
            WTF::StringBuilder::append(a2, (int8x16_t *)__s, 1uLL, (uint64_t)v361, a5, a6, a7, a8);
            v361 = v645;
          }
          else
          {
            v463 = *(_DWORD *)(v461 + 16);
            v464 = *(_QWORD *)(v461 + 8);
            *(_DWORD *)(a2 + 16) = v462 + 1;
            if ((v463 & 4) != 0)
              *(_BYTE *)(v464 + v462) = 44;
            else
              *(_WORD *)(v464 + 2 * v462) = 44;
          }
        }
        v465 = v10[10];
        if (v465 && *((_DWORD *)v465 + 1))
        {
          LOBYTE(__dst) = 10;
          __s[0] = *((_OWORD *)v10 + 201);
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(a2, &__dst, (uint64_t)__s, (uint64_t)v361, a5, a6, a7, a8);
        }
        *(_QWORD *)&__s[0] = 0;
        DWORD2(__s[0]) = v365;
        *(_QWORD *)&__s[1] = 0;
        appended = JSC::Stringifier::appendStringifiedValue(v10, a2, v460);
        v376 = 0;
LABEL_627:
        if (*((_DWORD *)v363 + 20))
        {
          v607 = *((_DWORD *)v363 + 20);
          if ((v607 & 0x27) != 0 && (v607 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v363 + 64), 7u, a3, (uint64_t)v361, a5, a6, a7, a8);
          if (*((_QWORD *)v363 + 2))
            goto LABEL_686;
        }
        if (appended == 2)
        {
          WTF::StringBuilder::shrink((WTF::StringBuilder *)a2, (WTF::AtomStringImpl *)v376, a3, (uint64_t)v361, a5, a6, a7, a8);
        }
        else if (!appended)
        {
          WTF::StringBuilder::append(a2, (int8x16_t *)"null", 4uLL, (uint64_t)v361, a5, a6, a7, a8);
        }
        v402 = v982;
        if (*((_DWORD *)v982 + 20))
        {
          v403 = *((_DWORD *)v982 + 20);
          if ((v403 & 0x27) != 0 && (v403 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v982 + 64), 7u, a3, (uint64_t)v361, a5, a6, a7, a8);
          result = 0;
          if (*((_QWORD *)v402 + 2))
            return result;
        }
      }
      v527 = *(unsigned int **)v361;
      v528 = *(unsigned __int8 *)(*(_QWORD *)v361 + 5);
      if (v528 == 36)
      {
        if ((v527[1] & 0xE) != 0)
          v529 = *(unsigned int *)(*((_QWORD *)v527 + 1) - 8);
        else
          v529 = 0;
        goto LABEL_820;
      }
      v715 = *v10;
      if (v528 != 35)
        break;
      if ((*(_BYTE *)((16 * *v527) | 0x12) & 0x20) != 0)
        goto LABEL_1143;
      v745 = *(_QWORD *)(*((_QWORD *)v527 + 1) - 16);
      *(_QWORD *)&__s[0] = v745;
      if (v745 >= 0xFFFE000000000000)
      {
        v529 = v745 & ~((int)v745 >> 31);
        goto LABEL_1183;
      }
LABEL_1144:
      v529 = JSC::JSValue::toLength((JSC::JSObject **)__s, v715, a3, (uint64_t)v361, a5, a6, a7, a8, a9);
LABEL_1183:
      v361 = (JSC *)((char *)v360 + 184 * v359);
      v362 = v715;
LABEL_820:
      if (!*((_DWORD *)v363 + 20))
        goto LABEL_1644;
      v717 = v362;
      v718 = v361;
      v719 = *((_DWORD *)v363 + 20);
      if ((v719 & 0x27) != 0 && (v719 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v363 + 64), 7u, a3, (uint64_t)v361, a5, a6, a7, a8);
      v361 = v718;
      v362 = v717;
      if (!*((_QWORD *)v363 + 2))
      {
LABEL_1644:
        if (HIDWORD(v529))
        {
          v720 = v362;
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v362, v362);
          v728 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v728 = (JSC::Exception *)JSC::Exception::create((uint64_t)v363, (JSC::VM *)OutOfMemoryError, 0, v722, v723, v724, v725, v726);
          }
          JSC::VM::throwException(v363, v720, v728, v727, v722, v723, v724, v725, v726);
        }
        else
        {
          *((_DWORD *)v360 + 46 * v359 + 6) = v529;
          if (!*((_DWORD *)v363 + 20))
            goto LABEL_823;
          v729 = v362;
          v730 = v361;
          v731 = *((_DWORD *)v363 + 20);
          if ((v731 & 0x27) != 0 && (v731 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v363 + 64), 7u, a3, (uint64_t)v361, a5, a6, a7, a8);
          v361 = v730;
          v362 = v729;
          if (!*((_QWORD *)v363 + 2))
          {
LABEL_823:
            LOBYTE(__s[0]) = 91;
            v530 = *(_QWORD *)(a2 + 8);
            if (!v530)
              goto LABEL_921;
            v482 = *(unsigned int *)(a2 + 16);
            if (v482 >= *(_DWORD *)(v530 + 4) || *(_QWORD *)a2)
              goto LABEL_921;
            v531 = *(_DWORD *)(v530 + 16);
            v485 = *(_QWORD *)(v530 + 8);
            *(_DWORD *)(a2 + 16) = v482 + 1;
            if ((v531 & 4) != 0)
            {
              v486 = 91;
              goto LABEL_744;
            }
            *(_WORD *)(v485 + 2 * v482) = 91;
            goto LABEL_745;
          }
        }
      }
LABEL_686:
      v447 = v982;
      if (*((_DWORD *)v982 + 20))
      {
        v679 = *((_DWORD *)v982 + 20);
        if ((v679 & 0x27) != 0 && (v679 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v982 + 64), 7u, a3, (uint64_t)v361, a5, a6, a7, a8);
        result = 0;
        if (*((_QWORD *)v447 + 2) || (*(_DWORD *)(a2 + 16) & 0x80000000) != 0)
          return result;
      }
      else if ((*(_DWORD *)(a2 + 16) & 0x80000000) != 0)
      {
        return 0;
      }
      v448 = *((unsigned int *)v10 + 65) - 1;
      v449 = v10[31];
      v450 = (uint64_t)v449 + 184 * v448;
      v453 = *(_QWORD **)(v450 + 40);
      v452 = (_QWORD *)(v450 + 40);
      v451 = (unint64_t)v453;
      if (v452 + 2 != v453 && v451 != 0)
      {
        *v452 = 0;
        *((_DWORD *)v449 + 46 * v448 + 12) = 0;
        WTF::fastFree(v451, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
      }
      v455 = (uint64_t)v449 + 184 * v448;
      v456 = *(_QWORD *)(v455 + 32);
      *(_QWORD *)(v455 + 32) = 0;
      if (v456)
      {
        if (*(_DWORD *)v456 == 1)
        {
          v532 = *(unsigned int *)(v456 + 20);
          if ((_DWORD)v532)
          {
            v533 = *(WTF::StringImpl ***)(v456 + 8);
            v534 = 8 * v532;
            do
            {
              v535 = *v533;
              *v533 = 0;
              if (v535)
              {
                if (*(_DWORD *)v535 == 2)
                {
                  WTF::StringImpl::~StringImpl(v535, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
                  WTF::fastFree(v536, v537, v538, v539, v540, v541, v542, v543);
                }
                else
                {
                  *(_DWORD *)v535 -= 2;
                }
              }
              ++v533;
              v534 -= 8;
            }
            while (v534);
          }
          v544 = *(_QWORD *)(v456 + 8);
          if (v456 + 24 != v544 && v544 != 0)
          {
            *(_QWORD *)(v456 + 8) = 0;
            *(_DWORD *)(v456 + 16) = 0;
            WTF::fastFree(v544, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
          }
          WTF::fastFree(v456, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v456;
        }
      }
      *((_DWORD *)v10 + 65) = v448;
      *((_DWORD *)v10 + 24) -= 2;
      result = 1;
      if (!(_DWORD)v448)
        return result;
    }
    if (v528 == 33)
    {
      v754 = JSC::DirectArguments::length((JSC::DirectArguments *)v527, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
LABEL_1199:
      v362 = v715;
      v529 = v754;
      v361 = (JSC *)((char *)v360 + 184 * v359);
      goto LABEL_820;
    }
    if (v528 == 34)
    {
      v754 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v527, v362, a3, (uint64_t)v361, a5, a6, a7, a8);
      goto LABEL_1199;
    }
LABEL_1143:
    *(_QWORD *)&__s[0] = JSC::JSObject::get(v527, (uint64_t)v362, *(_QWORD *)(*((_QWORD *)v363 + 5244) + 1768), (uint64_t)v361, a5, a6, a7, a8);
    if (*((_DWORD *)v363 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v363, v716, a3, (uint64_t)v361, a5, a6, a7, a8))
    {
      v529 = 0;
      goto LABEL_1183;
    }
    goto LABEL_1144;
  }
  return result;
}

JSC::JSGlobalObject *JSC::unwrapBoxedPrimitive(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  uint64_t v13;
  double v17;
  uint64_t v18;

  v8 = *((unsigned __int8 *)a2 + 5);
  if (v8 == 30)
  {
    v17 = JSC::JSObject::toNumber(a2, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v18 = (int)v17, v17 == (double)(int)v18)
      && ((_DWORD)v18 || (*(_QWORD *)&v17 & 0x8000000000000000) == 0))
    {
      return (JSC::JSGlobalObject *)(v18 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSGlobalObject *)(*(_QWORD *)&v17 + 0x2000000000000);
    }
  }
  else if ((v8 & 0xFE) == 0x4C)
  {
    return (JSC::JSGlobalObject *)JSC::JSObject::toString(a2, this, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &JSC::BooleanObject::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = 16 * v9;
      do
      {
        v13 = *(_QWORD *)(v13 + 16);
        v10 = v13 != 0;
      }
      while ((char **)v13 != &JSC::BooleanObject::s_info && v13 != 0);
    }
    if (v11 == &JSC::BigIntObject::s_info || v10)
      return (JSC::JSGlobalObject *)*((_QWORD *)a2 + 2);
  }
  return a2;
}

unint64_t *WTF::RefPtr<JSC::PropertyNameArrayData,WTF::RawPtrTraits<JSC::PropertyNameArrayData>,WTF::DefaultRefDerefTraits<JSC::PropertyNameArrayData>>::operator=(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (a2)
    ++*(_DWORD *)a2;
  v9 = *a1;
  *a1 = (unint64_t)a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v11 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v11)
      {
        v12 = *(WTF::StringImpl ***)(v9 + 8);
        v13 = 8 * v11;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v23 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v23 && v23 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return a1;
}

uint64_t JSC::JSObject::put(unsigned __int8 *a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  JSC::VM *v37;

  v11 = *(JSC::VM **)(a2 + 56);
  if (!a3)
    goto LABEL_6;
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_6;
  v13 = *(_BYTE **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if (!(_DWORD)v14)
      goto LABEL_6;
    v15 = *v13 - 48;
    if (v15 > 9 || v14 >= 2 && *v13 == 48)
      goto LABEL_6;
    v33 = v13 + 1;
    v34 = v14 - 1;
    while (v34)
    {
      if (v15 <= 0x19999999)
      {
        v35 = *v33 - 48;
        if (v35 <= 9)
        {
          v25 = __CFADD__(v35, 10 * v15);
          v15 = v35 + 10 * (_DWORD)v15;
          ++v33;
          --v34;
          if (!v25)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  else
  {
    if (!(_DWORD)v14)
      goto LABEL_6;
    v15 = *(unsigned __int16 *)v13 - 48;
    if (v15 > 9)
      goto LABEL_6;
    if (*(_WORD *)v13 == 48 && v14 > 1)
      goto LABEL_6;
    v22 = (unsigned __int16 *)(v13 + 2);
    v23 = v14 - 1;
    while (v23)
    {
      if (v15 <= 0x19999999)
      {
        v24 = *v22 - 48;
        if (v24 <= 9)
        {
          v25 = __CFADD__(v24, 10 * v15);
          v15 = v24 + 10 * (_DWORD)v15;
          ++v22;
          --v23;
          if (!v25)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  if ((_DWORD)v15 != -1)
  {
    v36 = *(_QWORD *)(a5 + 8);
    if ((unsigned __int8 *)v36 == a1
      || (v36 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v36 + 5) == 32 && *(unsigned __int8 **)(v36 + 16) == a1)
    {
      return (*(uint64_t (**)(unsigned __int8 *, unint64_t, uint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x50))(a1, a2, v15, a4, *(_BYTE *)(a5 + 20) & 1);
    }
    else
    {
      return JSC::ordinarySetSlow(a2, (uint64_t)a1, (WTF::StringImpl *)a3, (uint64_t)a4, v36, *(_BYTE *)(a5 + 20) & 1, a7, a8);
    }
  }
LABEL_6:
  if (*(_QWORD *)(*((_QWORD *)v11 + 5244) + 16) != a3)
  {
    v16 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    v17 = *(_DWORD *)(v16 + 0x10);
    if ((v17 & 0x10) == 0)
    {
      v18 = a1;
      while ((*(_WORD *)(v16 + 12) & 0x800) == 0 && (v18 == a1 || (*(_WORD *)(v16 + 12) & 0x400) == 0))
      {
        v19 = *(unsigned __int8 **)(v16 + 48);
        if (!v19)
          v19 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        if (v19 == (unsigned __int8 *)2)
        {
          v26 = *(_QWORD *)(a5 + 8);
          if ((unsigned __int8 *)v26 != a1
            && ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 32 || *(unsigned __int8 **)(v26 + 16) != a1))
          {
            return JSC::JSObject::definePropertyOnReceiver(a2, a3, (uint64_t)a4, a5, a5, a6, a7, a8, a9);
          }
          if ((a1[6] & 0x20) != 0 && (v17 & 0x400000) == 0)
            return JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(a1, a2, a3, (uint64_t)a4, a5, a9, a6, a7, a8);
          v37 = v11;
          v27 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a1, (uint64_t)v11, a3, (uint64_t)a4, 0, a5, a7, a8, a9);
          v29 = v28;
          if (v28)
          {
            if ((*(_BYTE *)(a5 + 20) & 1) != 0)
            {
              v30 = (uint64_t)v27;
              v31 = a2;
              v32 = v28;
              JSC::throwTypeError(v31, &v37, v30, v28);
              v29 = v32;
            }
          }
          return v29 == 0;
        }
        v16 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
        v18 = v19;
        if ((*(_BYTE *)(v16 + 0x10) & 0x10) != 0)
          return JSC::JSObject::putInlineSlow(a1, a2, a3, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))a5, a6, a7, a8, a9);
      }
    }
  }
  return JSC::JSObject::putInlineSlow(a1, a2, a3, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))a5, a6, a7, a8, a9);
}

uint64_t JSC::JSObject::deleteProperty(unsigned int *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t result;
  JSC::PropertyTable *v60;
  JSC::PropertyTable *v61;
  unsigned __int8 *v62;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t *v91;
  unint64_t v92;
  double v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  _QWORD v111[4];
  int v112;
  unsigned int v113;

  v9 = a3;
  v12 = *((_QWORD *)a2 + 7);
  if (!a3)
    goto LABEL_6;
  v13 = *(_DWORD *)(a3 + 16);
  if ((v13 & 0x20) != 0)
    goto LABEL_6;
  v14 = *(_BYTE **)(a3 + 8);
  v15 = *(unsigned int *)(a3 + 4);
  if ((v13 & 4) != 0)
  {
    if (!(_DWORD)v15)
      goto LABEL_6;
    a3 = *v14 - 48;
    if (a3 > 9 || v15 >= 2 && *v14 == 48)
      goto LABEL_6;
    v107 = v14 + 1;
    v108 = v15 - 1;
    while (v108)
    {
      if (a3 <= 0x19999999)
      {
        v109 = *v107 - 48;
        if (v109 <= 9)
        {
          v33 = __CFADD__(v109, 10 * a3);
          a3 = v109 + 10 * (_DWORD)a3;
          ++v107;
          --v108;
          if (!v33)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  else
  {
    if (!(_DWORD)v15)
      goto LABEL_6;
    a3 = *(unsigned __int16 *)v14 - 48;
    if (a3 > 9)
      goto LABEL_6;
    if (*(_WORD *)v14 == 48 && v15 > 1)
      goto LABEL_6;
    v30 = (unsigned __int16 *)(v14 + 2);
    v31 = v15 - 1;
    while (v31)
    {
      if (a3 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v33 = __CFADD__(v32, 10 * a3);
          a3 = v32 + 10 * (_DWORD)a3;
          ++v30;
          --v31;
          if (!v33)
            continue;
        }
      }
      goto LABEL_6;
    }
  }
  if ((_DWORD)a3 == -1)
  {
LABEL_6:
    v16 = *a1;
    if ((*((_BYTE *)a1 + 6) & 0x20) == 0 || (*(_BYTE *)(16 * (v16 & 0xFFFFFFFE) + 0x12) & 0x40) != 0)
      goto LABEL_7;
    v82 = *(unsigned int *)(16 * (v16 & 0xFFFFFFFE) + 0x4C);
    if ((_DWORD)v82)
      v83 = v9 == 0;
    else
      v83 = 1;
    if (v83)
      goto LABEL_132;
    v84 = 16 * v82;
    while (1)
    {
      v85 = *(_QWORD *)(v84 + 24);
      if (!v85)
        goto LABEL_110;
      v86 = *(_DWORD *)(v9 + 16);
      if ((v86 & 0x20) != 0)
        goto LABEL_110;
      v87 = *(_DWORD *)(v85 + 4) & (v86 >> 8);
      v88 = *(_QWORD *)(v85 + 32);
      v89 = *(unsigned __int16 *)(v88 + 4 * v87);
      if (v89 == 0xFFFF)
        goto LABEL_110;
      while (1)
      {
        v90 = (__int16)v89;
        v91 = (unint64_t *)(*(_QWORD *)(v85 + 24) + 40 * (__int16)v89);
        v92 = v91[1];
        if (!v92)
          goto LABEL_117;
        if (WTF::equalInternal<unsigned char>(v9, *v91, v92 - 1))
          break;
        v88 = *(_QWORD *)(v85 + 32);
LABEL_117:
        v87 = *(__int16 *)(v88 + 4 * v87 + 2);
        if (v87 == -1)
          goto LABEL_110;
        LOWORD(v89) = *(_WORD *)(v88 + 4 * v87);
      }
      v106 = *(_QWORD *)(v85 + 24);
      if (v106)
      {
        if ((*(_BYTE *)(v106 + 40 * v90 + 16) & 8) != 0 && *(_DWORD *)(v12 + 93124) != 1)
          return 0;
        JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, v93);
LABEL_132:
        v16 = *a1;
LABEL_7:
        if (!(v9 >> 4))
          goto LABEL_72;
        v17 = 16 * (v16 & 0xFFFFFFFE);
        if (((v9 >> 4) & ~*(_DWORD *)(v17 + 0x20)) != 0)
          goto LABEL_72;
        v18 = *(_QWORD *)(16 * (v16 & 0xFFFFFFFE) + 0x58);
        if (!v18)
        {
          v34 = *(_QWORD *)(16 * (v16 & 0xFFFFFFFE) + 0x40);
          if (!v34 || *(_BYTE *)(v34 + 5) != 1 && *(_DWORD *)(v34 + 80) < 2u)
            goto LABEL_72;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v17, (JSC::VM *)v12, 1, a4, a5, a6, a7, a8);
          if (!v18)
            goto LABEL_72;
        }
        if (!*(_DWORD *)(v18 + 24))
          goto LABEL_72;
        v19 = *(_QWORD *)(v18 + 16);
        v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
        v21 = *(unsigned int *)(v18 + 8);
        v22 = *(_DWORD *)(v9 + 16);
        if ((v19 & 1) != 0)
        {
          if ((v22 & 0x20) != 0)
            v22 = *(_DWORD *)(v9 + 32);
          v23 = *(_DWORD *)(v18 + 12);
          v24 = (v22 >> 8) & *(_QWORD *)&v23;
          v25 = *(unsigned __int8 *)(v20 + v24);
          if (*(_BYTE *)(v20 + v24))
          {
            v26 = v20 + v21;
            v27 = 1;
            while (1)
            {
              v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
              if (v9 == (v28 & 0xFFFFFFFFFFFFLL))
                break;
              v24 = ((_DWORD)v24 + v27) & v23;
              v25 = *(unsigned __int8 *)(v20 + v24);
              ++v27;
              if (!*(_BYTE *)(v20 + v24))
                goto LABEL_72;
            }
            v35 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
            goto LABEL_35;
          }
          goto LABEL_72;
        }
        if ((v22 & 0x20) != 0)
          v22 = *(_DWORD *)(v9 + 32);
        v46 = *(_DWORD *)(v18 + 12);
        v47 = v46 & (v22 >> 8);
        v48 = *(_DWORD *)(v20 + 4 * v47);
        if (!v48)
          goto LABEL_72;
        v49 = v20 + 4 * v21;
        v50 = 1;
        while (1)
        {
          v51 = (v48 - 1);
          if (*(_QWORD *)(v49 + 16 * v51) == v9)
            break;
          v47 = (v47 + v50) & v46;
          v48 = *(_DWORD *)(v20 + 4 * v47);
          ++v50;
          if (!v48)
            goto LABEL_72;
        }
        v35 = *(unsigned int *)(v49 + 16 * v51 + 8) | ((unint64_t)*(unsigned __int8 *)(v49 + 16 * v51 + 12) << 32);
LABEL_35:
        if ((_DWORD)v35 == -1)
        {
LABEL_72:
          *((_BYTE *)a4 + 5) = 2;
          return 1;
        }
        if ((v35 & 0x800000000) != 0 && *(_DWORD *)(v12 + 93124) != 1)
        {
          result = 0;
          *((_BYTE *)a4 + 5) = 3;
          return result;
        }
        v112 = -1;
        if ((*(_DWORD *)(v17 + 16) & 3) != 2)
        {
          LODWORD(v110) = 1;
          WORD2(v110) = 0;
          v111[0] = v111;
          v111[1] = v111;
          v111[2] = v12;
          v111[3] = v17;
          v113 = 0;
          if (JSC::Structure::getConcurrently(v17, (_DWORD *)v9, &v113, (uint64_t)a4, a5, a6, a7, a8) == -1
            || (v112 = -1, (*(_BYTE *)(v17 + 19) & 8) != 0)
            || (v40 = JSC::StructureTransitionTable::get((uint64_t *)(v17 + 80), v9, v113, 2)) == 0)
          {
            v40 = JSC::Structure::removeNewPropertyTransition((JSC::Structure *)v12, (JSC::VM *)v17, v9, (JSC::DeferredStructureTransitionWatchpointFire *)&v112, (JSC::Structure *)&v110, v36, v37, v38, v39);
            v45 = v112;
          }
          else
          {
            v45 = *(unsigned __int16 *)(v40 + 22);
            if (v45 == 65534)
            {
              v45 = -1;
            }
            else if (v45 == 0xFFFF)
            {
              v45 = *(_DWORD *)(*(_QWORD *)(v40 + 64) + 88);
            }
          }
          *((_BYTE *)a4 + 5) = 1;
          *(_DWORD *)a4 = v45;
          *a1 = v40 >> 4;
          *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 6) & 0x80 | *(_BYTE *)(v40 + 10);
          *((_BYTE *)a1 + 5) = *(_BYTE *)(v40 + 9);
          v52 = (unsigned __int8 *)(a1 + 1);
          if (*((unsigned __int8 *)a1 + 4) != *(unsigned __int8 *)(v40 + 8))
          {
            do
            {
              while (1)
              {
                v57 = *v52;
                v58 = __ldxr(v52);
                if (v58 == v57)
                  break;
                __clrex();
              }
            }
            while (__stxr(v57 & 0xC0 | *(_BYTE *)(v40 + 8), v52));
          }
          if (*(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)a1 + 7))
            JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)a1);
          if (v45 != -1)
          {
            if (v45 <= 63)
            {
              v53 = (uint64_t)(a1 + 4);
            }
            else
            {
              v53 = *((_QWORD *)a1 + 1) - 8;
              v45 = 63 - v45;
            }
            *(_QWORD *)(v53 + 8 * v45) = 0;
          }
          if ((*(_BYTE *)((16 * *a1) | 0x12) & 8) != 0)
            JSC::VM::invalidateStructureChainIntegrity(v12);
          if (BYTE4(v110) == 1)
            JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((uint64_t *)&v110, v39, v41, v42, v43, v44, v36, v37, v38);
          while (1)
          {
            v54 = (_QWORD *)v111[0];
            if ((_QWORD *)v111[0] == v111)
              break;
            v56 = *(_QWORD *)v111[0];
            v55 = *(_QWORD **)(v111[0] + 8);
            *v55 = *(_QWORD *)v111[0];
            *(_QWORD *)(v56 + 8) = v55;
            *v54 = 0;
            v54[1] = 0;
          }
          return 1;
        }
        v60 = *(JSC::PropertyTable **)(v17 + 88);
        if (!v60)
        {
          JSC::Structure::materializePropertyTable((JSC::Structure *)v17, (JSC::VM *)v12, 1, a4, a5, a6, a7, a8);
          v60 = v61;
        }
        v62 = (unsigned __int8 *)(v17 + 15);
        if (__ldaxr((unsigned __int8 *)(v17 + 15)))
        {
          __clrex();
          goto LABEL_78;
        }
        if (__stxr(1u, v62))
LABEL_78:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 15);
        ++*(_DWORD *)(v12 + 916);
        *(_DWORD *)(v17 + 16) |= 4u;
        if (v60)
        {
          *(_QWORD *)(v17 + 88) = v60;
          if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v17 + 7))
            JSC::Heap::writeBarrierSlowPath(v12 + 192, v17);
        }
        else
        {
          *(_QWORD *)(v17 + 88) = 0;
        }
        v64 = *(_QWORD *)(v17 + 64);
        if (v64 && *(_BYTE *)(v64 + 5) != 1)
          *(_DWORD *)(v64 + 80) = 0;
        else
          *(_QWORD *)(v17 + 64) = 0;
        v65 = *(unsigned int *)(v17 + 72);
        *(_DWORD *)(v17 + 72) = 0;
        if ((_DWORD)v65)
        {
          v66 = (WTF::StringImpl *)(16 * v65);
          v67 = *(_DWORD *)(16 * v65) - 2;
          if (v67)
          {
            *(_DWORD *)v66 = v67;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v66, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          }
        }
        v110 = v9;
        v68 = JSC::PropertyTable::take(v60, (JSC::VM *)v12, (uint64_t)&v110, (uint64_t)a4, a5, a6, a7, a8);
        v75 = v68;
        if ((_DWORD)v68 != -1)
        {
          *(_DWORD *)(v17 + 16) &= ~0x20u;
          v113 = v68;
          v76 = *((_QWORD *)v60 + 4);
          if (!v76)
          {
            v76 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v76 = 0;
            *(_QWORD *)(v76 + 8) = 0;
            v103 = *((_QWORD *)v60 + 4);
            *((_QWORD *)v60 + 4) = v76;
            if (v103)
            {
              v104 = *(_QWORD *)v103;
              if (*(_QWORD *)v103)
              {
                *(_QWORD *)v103 = 0;
                *(_DWORD *)(v103 + 8) = 0;
                v105 = v103;
                WTF::fastFree(v104, v102, v69, v70, v71, v72, v73, v74);
                v103 = v105;
              }
              WTF::fastFree(v103, v102, v69, v70, v71, v72, v73, v74);
              v76 = *((_QWORD *)v60 + 4);
            }
          }
          v77 = *(unsigned int *)(v76 + 12);
          if ((_DWORD)v77 == *(_DWORD *)(v76 + 8))
            *(_DWORD *)(*(_QWORD *)v76 + 4 * *(unsigned int *)(v76 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v76, v77 + 1, (unint64_t)&v113);
          else
            *(_DWORD *)(*(_QWORD *)v76 + 4 * v77) = v75;
          ++*(_DWORD *)(v76 + 12);
        }
        v78 = __ldxr(v62);
        if (v78 == 1)
        {
          if (!__stlxr(0, v62))
          {
LABEL_98:
            v79 = *(_DWORD *)(v12 + 916) - 1;
            *(_DWORD *)(v12 + 916) = v79;
            if (*(unsigned __int8 *)(v12 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v79)
            {
              *(_BYTE *)(v12 + 1198) = 0;
              JSC::Heap::collectIfNecessaryOrDefer(v12 + 192, 0);
            }
            if ((_DWORD)v75 != -1)
            {
              if ((int)v75 <= 63)
              {
                v80 = (uint64_t)(a1 + 4);
                v81 = v75 << 32;
              }
              else
              {
                v80 = *((_QWORD *)a1 + 1) - 8;
                v81 = 0x3F00000000 - (v75 << 32);
              }
              *(_QWORD *)(v80 + (v81 >> 29)) = 0;
            }
            return 1;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v62, 0, v69, v70, v71, v72, v73, v74);
        goto LABEL_98;
      }
LABEL_110:
      v84 = *(_QWORD *)(v84 + 16);
      if (!v84)
        goto LABEL_132;
    }
  }
  return (*(uint64_t (**)(unsigned int *, JSC::JSGlobalObject *))(16
                                                                          * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x60))(a1, a2);
}

uint64_t JSC::JSObject::defineOwnProperty(JSC::JSObject *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  BOOL v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::JSObject *v51;
  uint64_t v52;
  _BOOL4 v53;
  JSC::JSObject *v54;
  JSC::JSGlobalObject *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::JSGlobalObject *v66;
  JSC::JSObject *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  JSC::JSGlobalObject *v77;
  int v78;
  int v79;
  JSC::JSObject *v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  _BOOL4 v85;
  int v86;
  int v87;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  BOOL v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  double v95;
  double v96;
  char v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[2];
  unint64_t v102;
  JSC::JSObject *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  JSC::VM *v112;

  v9 = a5;
  if (!a3)
    goto LABEL_9;
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    goto LABEL_9;
  v15 = *(_BYTE **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if ((_DWORD)v16)
    {
      v17 = *v15 - 48;
      if (v17 <= 9 && (v16 < 2 || *v15 != 48))
      {
        v92 = v16 - 1;
        v93 = v15 + 1;
        while (v92)
        {
          if (v17 > 0x19999999)
            goto LABEL_6;
          v94 = *v93 - 48;
          if (v94 > 9)
            goto LABEL_6;
          v18 = 0;
          LODWORD(v16) = 0;
          v19 = 0;
          v46 = __CFADD__(v94, 10 * v17);
          v17 = v94 + 10 * v17;
          --v92;
          ++v93;
          if (v46)
            goto LABEL_8;
        }
        goto LABEL_170;
      }
      goto LABEL_6;
    }
LABEL_176:
    v18 = 0;
    goto LABEL_7;
  }
  if (!(_DWORD)v16)
    goto LABEL_176;
  v17 = *(unsigned __int16 *)v15 - 48;
  if (v17 > 9 || (*(_WORD *)v15 == 48 ? (v42 = v16 > 1) : (v42 = 0), v42))
  {
LABEL_6:
    v18 = 0;
    LODWORD(v16) = 0;
LABEL_7:
    v19 = 0;
    goto LABEL_8;
  }
  v43 = (unsigned __int16 *)(v15 + 2);
  v44 = v16 - 1;
  while (v44)
  {
    if (v17 > 0x19999999)
      goto LABEL_6;
    v45 = *v43 - 48;
    if (v45 > 9)
      goto LABEL_6;
    v18 = 0;
    LODWORD(v16) = 0;
    v19 = 0;
    v46 = __CFADD__(v45, 10 * v17);
    v17 = v45 + 10 * v17;
    ++v43;
    --v44;
    if (v46)
      goto LABEL_8;
  }
LABEL_170:
  v18 = 0x100000000;
  if (v17 == -1)
  {
    v18 = 0;
    LODWORD(v16) = 0;
  }
  else
  {
    LODWORD(v16) = v17;
  }
  if (v17 == -1)
    v19 = 0;
  else
    v19 = v17 & 0xFFFFFF00;
LABEL_8:
  if ((v18 & 0x100000000) != 0)
    return JSC::JSObject::defineOwnIndexedProperty(a1, a2, (JSC::VM *)(v19 | v16), (const JSC::PropertyDescriptor *)a4, a5, a6, a7, a8, a9);
LABEL_9:
  v20 = *((_QWORD *)a2 + 7);
  v98 = 0;
  v99 = 0uLL;
  v100 = 14;
  v102 = 0xFFFFFFFF00000000;
  v104 = 0;
  v105 = 0;
  v103 = a1;
  v106 = 0x20000;
  v107 = 0;
  LOBYTE(v108) = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v27 = 0;
  if ((*(unsigned int (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0x68))(a1, a2, a3, v101))
  {
    v27 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v98, (uint64_t)a2, (WTF::StringImpl *)a3, (uint64_t)v101, v23, v24, v25, v26);
  }
  if (v109)
  {
    v28 = *(_DWORD *)(v108 + 4);
    if (!v28)
    {
      __break(0xC471u);
      JUMPOUT(0x198A359CCLL);
    }
    *(_DWORD *)(v108 + 4) = v28 - 1;
  }
  if (*(_DWORD *)(v20 + 80))
  {
    v86 = *(_DWORD *)(v20 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v20 + 16))
      return 0;
  }
  v29 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xA0))(a1, a2);
  if (*(_DWORD *)(v20 + 80))
  {
    v87 = *(_DWORD *)(v20 + 80);
    if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
    {
      v97 = v29;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v30, v31, (uint64_t)v32, v33, v34, v35);
      v29 = v97;
    }
    if (*(_QWORD *)(v20 + 16))
      return 0;
  }
  v37 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v112 = v37;
  if ((v27 & 1) == 0)
  {
    if ((v29 & 1) != 0)
    {
      v38 = *(_QWORD *)(a4 + 8);
      if (v38)
      {
        v64 = *(_DWORD *)(a4 + 24) & 0xFFFFFFED | 0x10;
        if (v38 != 10)
          goto LABEL_67;
      }
      else
      {
        if (!*(_QWORD *)(a4 + 16))
        {
          if (*(_QWORD *)a4)
            v39 = *(_QWORD *)a4;
          else
            v39 = 10;
          v40 = *(_DWORD *)(a4 + 24) & 0xFFFFFFEF;
LABEL_24:
          v101[0] = 0;
          v101[1] = a1;
          v102 = 0x1000000FFFFFFFFLL;
          v36.n128_u64[0] = 0x100000001000000;
          v103 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, (uint64_t)v37, a3, v39, v40, (uint64_t)v101, v34, v35, v36);
          return 1;
        }
        v64 = *(_DWORD *)(a4 + 24) & 0xFFFFFFED | 0x10;
      }
      v38 = 10;
LABEL_67:
      v65 = *(_QWORD *)(a4 + 16);
      if (!v65 || v65 == 10)
        v65 = 10;
      if ((v38 & 0xFFFE000000000002) != 0)
      {
        v66 = 0;
      }
      else if (*(unsigned __int8 *)(v38 + 5) <= 0x16u)
      {
        v66 = 0;
      }
      else
      {
        v66 = (JSC::JSGlobalObject *)v38;
      }
      if ((v65 & 0xFFFE000000000002) != 0)
      {
        v67 = 0;
      }
      else if (*(unsigned __int8 *)(v65 + 5) <= 0x16u)
      {
        v67 = 0;
      }
      else
      {
        v67 = (JSC::JSObject *)v65;
      }
      v68 = JSC::GetterSetter::create(v37, a2, v66, v67, v32, v33, v34, v35);
      v73 = (int *)a1;
      v74 = (uint64_t)a2;
      v75 = a3;
      v76 = v64;
LABEL_79:
      JSC::JSObject::putDirectAccessor(v73, v74, v75, v68, v76, v72, v69, v70, v71);
      return 1;
    }
    if (v9)
    {
      v81 = "Attempting to define property on object that is not extensible.";
      v82 = (unint64_t)a2;
      v83 = 64;
      goto LABEL_117;
    }
    return 0;
  }
  if (!*(_QWORD *)a4 && !*(_QWORD *)(a4 + 8) && !*(_QWORD *)(a4 + 16) && !*(_DWORD *)(a4 + 28))
    return 1;
  v47 = JSC::PropertyDescriptor::equalTo((JSC::PropertyDescriptor *)&v98, a2, (const JSC::PropertyDescriptor *)a4, v31, (uint64_t)v32, v33, v34, v35, (int8x16_t)v36);
  v53 = v47;
  if (*((_DWORD *)v37 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v37, v48, v49, v50, (uint64_t)v51, v52, v34, v35);
    if (hasExceptionsAfterHandlingTraps || v53)
      return !hasExceptionsAfterHandlingTraps;
  }
  else if (v47)
  {
    return 1;
  }
  if ((v100 & 8) != 0)
  {
    if ((*(_BYTE *)(a4 + 24) & 8) == 0)
    {
      if (!v9)
        return 0;
      v81 = "Attempting to change configurable attribute of unconfigurable property.";
      v82 = (unint64_t)a2;
      v83 = 72;
      goto LABEL_117;
    }
    if ((*(_BYTE *)(a4 + 28) & 2) != 0)
    {
      v85 = JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)a4);
      if (v85 != JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)&v98))
      {
        if (!v9)
          return 0;
        v81 = "Attempting to change enumerable attribute of unconfigurable property.";
LABEL_116:
        v82 = (unint64_t)a2;
        v83 = 70;
        goto LABEL_117;
      }
    }
  }
  v55 = *(JSC::JSGlobalObject **)(a4 + 8);
  v54 = *(JSC::JSObject **)(a4 + 16);
  v56 = *(_QWORD *)a4;
  if (*(_OWORD *)(a4 + 8) == 0 && !v56)
  {
    if ((*(_BYTE *)(a4 + 28) & 1) == 0)
    {
      v59 = v100;
      goto LABEL_50;
    }
    v57 = v98;
    v58 = v98 != 0;
    v78 = BYTE4(v100) & 1;
    v79 = 1;
    if (!v98 && (v100 & 0x100000000) == 0)
      goto LABEL_113;
  }
  else
  {
    v57 = v98;
    v58 = v98 != 0;
    if (v56)
    {
      if ((v98 != 0) | BYTE4(v100) & 1)
        goto LABEL_49;
LABEL_113:
      v59 = v100;
      if ((v100 & 8) != 0)
      {
        if (!v9)
          return 0;
        v81 = "Attempting to change access mechanism for an unconfigurable property.";
        goto LABEL_116;
      }
      goto LABEL_50;
    }
    v79 = *(_DWORD *)(a4 + 28) & 1;
    if (((v98 != 0) | BYTE4(v100) & 1) != v79)
      goto LABEL_113;
    v78 = BYTE4(v100) & 1;
  }
  if (((v78 == 0) & ~v58) == 0 && v79)
  {
LABEL_49:
    v59 = v100;
    if ((v100 & 8) != 0 && (v100 & 2) != 0)
    {
      if ((*(_BYTE *)(a4 + 24) & 2) == 0)
      {
        if (!v9)
          return 0;
        v81 = "Attempting to change writable attribute of unconfigurable property.";
        v82 = (unint64_t)a2;
        v83 = 68;
        goto LABEL_117;
      }
      if (!v56)
        return 1;
      if (v56 == v57)
      {
        if (!*((_DWORD *)v37 + 20))
          return 1;
        v89 = JSC::VM::hasExceptionsAfterHandlingTraps(v37, v56, v57, v50, (uint64_t)v51, v52, v34, v35);
        return !v89;
      }
      if (v56 >> 49)
      {
        if (!(v57 >> 49))
        {
          if (!*((_DWORD *)v37 + 20))
            goto LABEL_128;
          v84 = 0;
LABEL_186:
          v89 = JSC::VM::hasExceptionsAfterHandlingTraps(v37, v56, v57, v50, (uint64_t)v51, v52, v34, v35);
          if (v89 || v84)
            return !v89;
LABEL_128:
          if (!v9)
            return 0;
          v81 = "Attempting to change value of a readonly property.";
          v82 = (unint64_t)a2;
          v83 = 51;
          goto LABEL_117;
        }
        v95 = (double)(int)v56;
        if (v56 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v95 = v56 - 0x2000000000000;
        v96 = (double)(int)v57;
        if (v57 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v96 = v57 - 0x2000000000000;
        v84 = *(_QWORD *)&v95 == *(_QWORD *)&v96;
      }
      else
      {
        v84 = JSC::JSValue::strictEqual(a2, v56, v57, v50, (uint64_t)v51, v52, v34, v35, (int8x16_t)v36);
      }
      if (!*((_DWORD *)v37 + 20))
      {
        if (v84)
          return 1;
        goto LABEL_128;
      }
      goto LABEL_186;
    }
LABEL_50:
    v60 = *(_DWORD *)(a4 + 28);
    if ((v56 || (v60 & 1) != 0) && v99 != 0)
      v59 |= 2u;
    v61 = 2 * (*(_DWORD *)(a4 + 28) & 7);
    if (*(_OWORD *)(a4 + 8) == 0)
    {
      v62 = *(_DWORD *)(a4 + 24) & v61 | v59 & (v61 ^ 0xFFFFFFDF);
    }
    else
    {
      v62 = *(_DWORD *)(a4 + 24) & (v61 | 0x10) | v59 & (v61 ^ 0xFFFFFFCF);
      if (v55)
      {
LABEL_81:
        if (((unint64_t)v55 & 0xFFFE000000000002) == 0)
        {
          if (*((unsigned __int8 *)v55 + 5) <= 0x16u)
            v77 = 0;
          else
            v77 = v55;
LABEL_95:
          if ((v54 || (v54 = (JSC::JSObject *)*((_QWORD *)&v99 + 1)) != 0)
            && ((unint64_t)v54 & 0xFFFE000000000002) == 0)
          {
            if (*((unsigned __int8 *)v54 + 5) <= 0x16u)
              v80 = 0;
            else
              v80 = v54;
          }
          else
          {
            v80 = 0;
          }
          v68 = JSC::GetterSetter::create(v37, a2, v77, v80, v51, v52, v34, v35);
          v76 = v62 & 0xFFFFFFFD;
          v73 = (int *)a1;
          v74 = (uint64_t)a2;
          v75 = a3;
          goto LABEL_79;
        }
LABEL_94:
        v77 = 0;
        goto LABEL_95;
      }
      if (v54)
      {
        v55 = (JSC::JSGlobalObject *)v99;
        goto LABEL_93;
      }
    }
    v55 = (JSC::JSGlobalObject *)v99;
    if (v99 == 0 || v56 || (v60 & 1) != 0)
    {
      v63 = v98;
      if (!v98)
        v63 = 10;
      if (v56)
        v39 = *(_QWORD *)a4;
      else
        v39 = v63;
      v40 = v62 & 0xFFFFFFEF;
      goto LABEL_24;
    }
LABEL_93:
    if (!v55)
      goto LABEL_94;
    goto LABEL_81;
  }
  v59 = v100;
  if ((v100 & 8) == 0)
    goto LABEL_50;
  if (v54 && v54 != *((JSC::JSObject **)&v99 + 1))
  {
    if (!v9)
      return 0;
    v81 = "Attempting to change the setter of an unconfigurable property.";
    goto LABEL_112;
  }
  if (!v55)
    return 1;
  v90 = JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)a4);
  v91 = v90 == JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)&v98);
  result = v91;
  if (!v91 && v9)
  {
    v81 = "Attempting to change the getter of an unconfigurable property.";
LABEL_112:
    v82 = (unint64_t)a2;
    v83 = 63;
LABEL_117:
    JSC::throwTypeError(v82, &v112, (uint64_t)v81, v83);
    return 0;
  }
  return result;
}

void JSC::JSObject::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  JSC::JSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t i;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  JSC::JSObject *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  JSC::JSObject *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int8 *v85;
  JSC::JSObject *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v91;
  int v92;
  int v93;
  JSC::JSObject *v94;
  unint64_t v95;
  int v96;
  JSC::JSObject *v97;
  JSC::JSObject *v98;
  JSC::JSObject *v99;
  JSC::JSObject *v100;
  JSC::JSObject *v101;
  uint64_t v102;
  JSC::JSObject *v103;
  uint64_t v104;
  JSC::JSObject *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v109;
  int v110;
  uint64_t v111;
  JSC::JSObject *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v117;
  int v118;
  JSC::JSObject *v119;
  uint64_t v120;
  unint64_t v121;
  JSC::JSObject *v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int **v126;
  int v127;
  unsigned int **v128;
  unint64_t *v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  JSC::JSObject *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 *v146;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unsigned int **v152;
  int v153;
  unsigned int **v154;
  unint64_t *v155;
  unsigned int *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  JSC::JSObject *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v174;
  int v175;
  unint64_t v176;
  unsigned int **v178;
  int v179;
  unsigned int **v180;
  unint64_t *v181;
  unsigned int *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  JSC::JSObject *v191;
  JSC::JSObject *v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  unsigned __int8 *v196;
  uint64_t v198;
  int v199;
  unint64_t v200;
  unsigned int **v202;
  int v203;
  unsigned int **v204;
  unint64_t *v205;
  unsigned int *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  JSC::JSObject *v215;
  JSC::JSObject *v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  unsigned __int8 *v220;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  JSC::JSObject *v226;
  JSC::JSObject *v227;
  uint64_t v228;
  uint64_t v229;
  JSC::JSObject *v230;
  JSC::JSObject *v231;
  JSC::JSObject *v232;
  JSC::JSObject *v233;
  JSC::JSObject *v234;
  JSC::JSObject *v235;
  JSC::JSObject *v236;
  JSC::JSObject *v237;
  JSC::JSObject *v238;
  JSC::JSObject *v239;
  JSC::JSObject *v240;
  JSC::JSObject *v241;
  JSC::JSObject *v242;
  _QWORD v243[2];

  v9 = this;
  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
    {
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      v9 = this;
    }
    a3 = 0;
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      v87 = v9;
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
      v9 = v87;
    }
  }
  if (!*((_BYTE *)a2 + 185))
  {
    v12 = *(_DWORD *)v9;
    if ((*(_DWORD *)v9 & 1) != 0)
      goto LABEL_203;
    v13 = 16 * (v12 & 0xFFFFFFFE);
    v14 = *(unsigned __int16 *)(v13 + 0x18);
    if (v14 == 65534)
    {
      v14 = -1;
    }
    else if (v14 == 0xFFFF)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(16 * (v12 & 0xFFFFFFFE) + 0x40) + 84);
    }
    v15 = *(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0x1F;
    if ((v15 - 10) <= 3)
    {
      v91 = (unsigned __int8 *)v9 + 4;
      while (1)
      {
        v92 = *v91;
        if ((v92 & 0x40) != 0)
          break;
        v93 = __ldaxr(v91);
        if (v93 == v92)
        {
          if (!__stxr(v92 | 0x40, v91))
            goto LABEL_193;
        }
        else
        {
          __clrex();
        }
      }
      v119 = v9;
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v91);
      v9 = v119;
LABEL_193:
      v16 = v9;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)v9 + 1);
    if (!v17)
      goto LABEL_15;
    if (*(_DWORD *)v9 != v12)
      goto LABEL_198;
    v18 = *(unsigned __int16 *)(16 * (v12 & 0xFFFFFFFE) + 0x18);
    if (v18 == 65534)
    {
      v18 = -1;
    }
    else if (v18 == 0xFFFF)
    {
      v18 = *(_DWORD *)(*(_QWORD *)(16 * (v12 & 0xFFFFFFFE) + 0x40) + 84);
    }
    if (v18 != v14)
    {
LABEL_198:
      v13 = 0;
      goto LABEL_15;
    }
    if ((*(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0x10) == 0)
    {
      if ((*(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
        v19 = *(unsigned int *)(v17 + 8);
      else
        v19 = 0;
      v20 = 4;
      v21 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
      v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
      v23 = (v22 | HIWORD(v22)) + 1;
      if ((v14 - 63) >= 5)
        v20 = v23;
      if (v14 >= 64)
        v24 = (v14 - 63);
      else
        v24 = 0;
      if (v14 >= 64)
        v25 = v20;
      else
        v25 = 0;
      v26 = v17 - 8 - 8 * v25 - 8 * v19;
      if ((v26 & 8) != 0)
      {
        if ((*(_BYTE *)(v26 - 79) & 1) == 0)
        {
          v85 = (unsigned __int8 *)(v26 - 79);
          while (!__ldaxr(v85))
          {
            if (!__stlxr(1u, v85))
            {
              v28 = (v26 - 112) | 1;
LABEL_42:
              if ((v28 & 1) == 0)
              {
                v33 = (unsigned __int16)(*(_WORD *)(v28 + 28))++ + 1;
                if ((v33 & 0x10000) == 0)
                  goto LABEL_44;
                v227 = v16;
                v105 = v9;
                v106 = *(_QWORD *)(*(_QWORD *)v28 + 24);
                v107 = (unsigned __int8 *)(v106 + 56);
                if (__ldaxr((unsigned __int8 *)(v106 + 56)))
                {
                  __clrex();
                  goto LABEL_168;
                }
                if (__stxr(1u, v107))
LABEL_168:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v106 + 56);
                v109 = *(_QWORD *)(v106 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)v28 + 12) >> 5);
                *(_DWORD *)(v109 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)v28 + 12);
                v110 = __ldxr(v107);
                if (v110 == 1)
                {
                  v9 = v105;
                  v16 = v227;
                  if (!__stlxr(0, v107))
                  {
LABEL_44:
                    ++*((_QWORD *)a2 + 9);
                    v34 = 16 * **(unsigned int **)v28;
LABEL_45:
                    *(int64x2_t *)((char *)a2 + 136) = vaddq_s64(*(int64x2_t *)((char *)a2 + 136), vdupq_n_s64(v34));
                    goto LABEL_46;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v106 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                v16 = v227;
                v9 = v105;
                goto LABEL_44;
              }
              ++*((_QWORD *)a2 + 9);
              v34 = *(_QWORD *)(v28 + 23);
              goto LABEL_45;
            }
          }
          __clrex();
        }
      }
      else
      {
        v27 = *((_DWORD *)a2 + 33);
        v28 = v26 & 0xFFFFFFFFFFFFC000;
        if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
        {
          v234 = v9;
          v94 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000), v27, (uint64_t)a3, a4, a5, a6, a7, a8);
          v16 = v94;
          v9 = v234;
        }
        v29 = 1 << (v26 >> 4);
        v30 = (unint64_t *)(v28 + 8 * ((v26 >> 10) & 0xF) + 40);
        while (1)
        {
          v31 = *v30;
          if ((*v30 & v29) != 0)
            break;
          v32 = __ldxr(v30);
          if (v32 == v31)
          {
            if (!__stxr(v31 | v29, v30))
              goto LABEL_42;
          }
          else
          {
            __clrex();
          }
        }
      }
LABEL_46:
      if ((_DWORD)v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v176 = *(_QWORD *)(v17 - 8 - 8 * v24 + 8 * i);
          if ((v176 & 0xFFFE000000000002) == 0 && v176 != 0)
          {
            if ((v176 & 8) != 0)
            {
              if ((*(_BYTE *)(v176 - 79) & 1) == 0)
              {
                v189 = (unsigned __int8 *)(v176 - 79);
                do
                {
                  if (__ldaxr(v189))
                  {
                    __clrex();
                    goto LABEL_279;
                  }
                }
                while (__stlxr(1u, v189));
                *(_BYTE *)(v176 + 7) = 2;
                ++*((_QWORD *)a2 + 9);
                *((_QWORD *)a2 + 17) += *(_QWORD *)(v176 - 88);
                v187 = *((_QWORD *)a2 + 3);
                if (v187 == 510)
                {
LABEL_301:
                  v191 = v9;
                  v192 = v16;
                  v193 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                  v16 = v192;
                  v9 = v191;
                  v187 = 0;
                  *v193 = 0;
                  v193[1] = 0;
                  ++*((_QWORD *)a2 + 4);
                  v194 = *((_QWORD *)a2 + 1);
                  v195 = (_QWORD *)((char *)a2 + 16);
                  if (v194)
                    v195 = (_QWORD *)*((_QWORD *)a2 + 1);
                  *v195 = v193;
                  *((_QWORD *)a2 + 1) = v193;
                  *v193 = 0;
                  v193[1] = v194;
                }
LABEL_295:
                v188 = *((_QWORD *)a2 + 1) + 8 * v187;
                *((_QWORD *)a2 + 3) = v187 + 1;
                *(_QWORD *)(v188 + 16) = v176;
              }
            }
            else
            {
              v178 = (unsigned int **)(v176 & 0xFFFFFFFFFFFFC000);
              v179 = *((_DWORD *)a2 + 33);
              if (*(_DWORD *)(v176 & 0xFFFFFFFFFFFFC000 | 0x20) != v179)
              {
                v230 = v16;
                v239 = v9;
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v176 & 0xFFFFFFFFFFFFC000), v179, (uint64_t)a3, a4, a5, a6, a7, a8);
                v16 = v230;
                v9 = v239;
              }
              v180 = &v178[(v176 >> 10) & 0xF];
              v182 = v180[5];
              v181 = (unint64_t *)(v180 + 5);
              v183 = 1 << (v176 >> 4);
              if (((unint64_t)v182 & v183) == 0)
              {
                do
                {
                  while (1)
                  {
                    v184 = *v181;
                    if ((*v181 & v183) != 0)
                      goto LABEL_279;
                    v185 = __ldxr(v181);
                    if (v185 == v184)
                      break;
                    __clrex();
                  }
                }
                while (__stxr(v184 | v183, v181));
                *(_BYTE *)(v176 + 7) = 2;
                v186 = (unsigned __int16)(*(_WORD *)((v176 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
                if ((v186 & 0x10000) == 0)
                {
LABEL_294:
                  ++*((_QWORD *)a2 + 9);
                  *((_QWORD *)a2 + 17) += 16 * **v178;
                  v187 = *((_QWORD *)a2 + 3);
                  if (v187 == 510)
                    goto LABEL_301;
                  goto LABEL_295;
                }
                v231 = v16;
                v240 = v9;
                v224 = *((_QWORD *)*v178 + 3);
                v196 = (unsigned __int8 *)(v224 + 56);
                if (__ldaxr((unsigned __int8 *)(v224 + 56)))
                {
                  __clrex();
                  goto LABEL_306;
                }
                if (__stxr(1u, v196))
LABEL_306:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v196);
                v198 = *(_QWORD *)(v224 + 32) + 40 * ((*v178)[3] >> 5);
                *(_DWORD *)(v198 + 36) |= 1 << (*v178)[3];
                v199 = __ldxr(v196);
                if (v199 == 1)
                {
                  v16 = v231;
                  v9 = v240;
                  if (!__stlxr(0, v196))
                    goto LABEL_294;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v196, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                v16 = v231;
                v9 = v240;
                goto LABEL_294;
              }
            }
          }
LABEL_279:
          ;
        }
      }
LABEL_76:
      if ((v15 - 8) < 2)
      {
        v79 = *(unsigned int *)(v17 - 8);
        if ((_DWORD)v79)
        {
          v80 = 0;
          while (1)
          {
            v200 = *(_QWORD *)(v17 + 8 * v80);
            if ((v200 & 0xFFFE000000000002) == 0 && v200 != 0)
            {
              if ((v200 & 8) != 0)
              {
                if ((*(_BYTE *)(v200 - 79) & 1) == 0)
                {
                  v213 = (unsigned __int8 *)(v200 - 79);
                  do
                  {
                    if (__ldaxr(v213))
                    {
                      __clrex();
                      goto LABEL_315;
                    }
                  }
                  while (__stlxr(1u, v213));
                  *(_BYTE *)(v200 + 7) = 2;
                  ++*((_QWORD *)a2 + 9);
                  *((_QWORD *)a2 + 17) += *(_QWORD *)(v200 - 88);
                  v211 = *((_QWORD *)a2 + 3);
                  if (v211 == 510)
                  {
LABEL_337:
                    v215 = v9;
                    v216 = v16;
                    v217 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                    v16 = v216;
                    v9 = v215;
                    v211 = 0;
                    *v217 = 0;
                    v217[1] = 0;
                    ++*((_QWORD *)a2 + 4);
                    v218 = *((_QWORD *)a2 + 1);
                    v219 = (_QWORD *)((char *)a2 + 16);
                    if (v218)
                      v219 = (_QWORD *)*((_QWORD *)a2 + 1);
                    *v219 = v217;
                    *((_QWORD *)a2 + 1) = v217;
                    *v217 = 0;
                    v217[1] = v218;
                  }
LABEL_331:
                  v212 = *((_QWORD *)a2 + 1) + 8 * v211;
                  *((_QWORD *)a2 + 3) = v211 + 1;
                  *(_QWORD *)(v212 + 16) = v200;
                }
              }
              else
              {
                v202 = (unsigned int **)(v200 & 0xFFFFFFFFFFFFC000);
                v203 = *((_DWORD *)a2 + 33);
                if (*(_DWORD *)(v200 & 0xFFFFFFFFFFFFC000 | 0x20) != v203)
                {
                  v232 = v16;
                  v241 = v9;
                  JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v200 & 0xFFFFFFFFFFFFC000), v203, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v16 = v232;
                  v9 = v241;
                }
                v204 = &v202[(v200 >> 10) & 0xF];
                v206 = v204[5];
                v205 = (unint64_t *)(v204 + 5);
                v207 = 1 << (v200 >> 4);
                if (((unint64_t)v206 & v207) == 0)
                {
                  do
                  {
                    while (1)
                    {
                      v208 = *v205;
                      if ((*v205 & v207) != 0)
                        goto LABEL_315;
                      v209 = __ldxr(v205);
                      if (v209 == v208)
                        break;
                      __clrex();
                    }
                  }
                  while (__stxr(v208 | v207, v205));
                  *(_BYTE *)(v200 + 7) = 2;
                  v210 = (unsigned __int16)(*(_WORD *)((v200 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
                  if ((v210 & 0x10000) == 0)
                  {
LABEL_330:
                    ++*((_QWORD *)a2 + 9);
                    *((_QWORD *)a2 + 17) += 16 * **v202;
                    v211 = *((_QWORD *)a2 + 3);
                    if (v211 == 510)
                      goto LABEL_337;
                    goto LABEL_331;
                  }
                  v233 = v16;
                  v242 = v9;
                  v225 = *((_QWORD *)*v202 + 3);
                  v220 = (unsigned __int8 *)(v225 + 56);
                  if (__ldaxr((unsigned __int8 *)(v225 + 56)))
                  {
                    __clrex();
                    goto LABEL_342;
                  }
                  if (__stxr(1u, v220))
LABEL_342:
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v220);
                  v222 = *(_QWORD *)(v225 + 32) + 40 * ((*v202)[3] >> 5);
                  *(_DWORD *)(v222 + 36) |= 1 << (*v202)[3];
                  v223 = __ldxr(v220);
                  if (v223 == 1)
                  {
                    v16 = v233;
                    v9 = v242;
                    if (!__stlxr(0, v220))
                      goto LABEL_330;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v220, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v16 = v233;
                  v9 = v242;
                  goto LABEL_330;
                }
              }
            }
LABEL_315:
            if (++v80 == v79)
              goto LABEL_15;
          }
        }
        goto LABEL_15;
      }
      if ((v15 - 10) < 4)
      {
        v226 = v16;
        v56 = v9;
        v57 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v57)
        {
          v58 = (unint64_t *)(v17 + 16);
          do
          {
            v60 = *v58++;
            v59 = v60;
            if ((v60 & 0xFFFE000000000002) != 0 || v59 == 0)
              goto LABEL_89;
            if ((v59 & 8) != 0)
            {
              if ((*(_BYTE *)(v59 - 79) & 1) != 0)
                goto LABEL_89;
            }
            else
            {
              v62 = *((_DWORD *)a2 + 33);
              if (*(_DWORD *)(v59 & 0xFFFFFFFFFFFFC000 | 0x20) != v62)
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v59 & 0xFFFFFFFFFFFFC000), v62, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (((*(_QWORD *)((v59 & 0xFFFFFFFFFFFFC000) + 8 * ((v59 >> 10) & 0xF) + 0x28) >> (v59 >> 4)) & 1) != 0)
                goto LABEL_89;
            }
            JSC::SlotVisitor::appendHiddenSlow(a2, v59, 0, a4, a5, a6, a7, a8);
LABEL_89:
            --v57;
          }
          while (v57);
        }
        v63 = *(_QWORD *)v17;
        if (!*(_QWORD *)v17)
        {
          v9 = v56;
          v16 = v226;
          goto LABEL_15;
        }
        if ((v63 & 8) != 0)
        {
          if ((*(_BYTE *)(v63 - 79) & 1) == 0)
            goto LABEL_96;
        }
        else
        {
          v64 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 0x20) != v64)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v63 & 0xFFFFFFFFFFFFC000), v64, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v63 & 0xFFFFFFFFFFFFC000) + 8 * ((v63 >> 10) & 0xF) + 0x28) >> (v63 >> 4)) & 1) == 0)
            goto LABEL_96;
        }
        v9 = v56;
        v16 = v226;
        if (*((_QWORD *)a2 + 21))
        {
LABEL_96:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v63, 0, a4, a5, a6, a7, a8);
          v16 = v226;
          v9 = v56;
        }
      }
LABEL_15:
      if (!v16)
        goto LABEL_16;
      v76 = (unsigned __int8 *)v16 + 4;
      while (1)
      {
        v77 = *v76;
        if ((v77 & 0xC0) != 0x40)
          break;
        v78 = __ldxr(v76);
        if (v78 == v77)
        {
          if (!__stxr(v77 & 0xBF, v76))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
      }
      v68 = v9;
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v76, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_182;
    }
    v54 = v17 - 16;
    if ((((_DWORD)v17 - 16) & 8) != 0)
    {
      if ((*(_BYTE *)(v17 - 95) & 1) != 0)
        goto LABEL_75;
    }
    else
    {
      v55 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v54 & 0xFFFFFFFFFFFFC000 | 0x20) != v55)
      {
        v99 = v9;
        v100 = v16;
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v54 & 0xFFFFFFFFFFFFC000), v55, (uint64_t)a3, a4, a5, a6, a7, a8);
        v16 = v100;
        v9 = v99;
      }
      if (((*(_QWORD *)((v54 & 0xFFFFFFFFFFFFC000) + 8 * ((v54 >> 10) & 0xF) + 0x28) >> (v54 >> 4)) & 1) != 0)
      {
LABEL_75:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_76;
      }
    }
    v97 = v9;
    v98 = v16;
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v17 - 16, 0, a4, a5, a6, a7, a8);
    v16 = v98;
    v9 = v97;
    goto LABEL_76;
  }
  v36 = *((_QWORD *)v9 + 1);
  v13 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
  v37 = *(unsigned __int16 *)(v13 + 0x18);
  if (v37 == 65534)
  {
    v37 = -1;
    if (!v36)
      goto LABEL_105;
  }
  else
  {
    if (v37 == 0xFFFF)
      v37 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x40) + 84);
    if (!v36)
      goto LABEL_105;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 8) & 0x10) != 0)
  {
    v65 = v36 - 16;
    if ((((_DWORD)v36 - 16) & 8) != 0)
    {
      if ((*(_BYTE *)(v36 - 95) & 1) != 0 && !*((_QWORD *)a2 + 21))
        goto LABEL_105;
    }
    else
    {
      v66 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v65 & 0xFFFFFFFFFFFFC000 | 0x20) != v66)
      {
        v103 = v9;
        v104 = *((_QWORD *)v9 + 1);
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v65 & 0xFFFFFFFFFFFFC000), v66, (uint64_t)a3, a4, a5, a6, a7, a8);
        v36 = v104;
        v9 = v103;
      }
      if (((*(_QWORD *)((v65 & 0xFFFFFFFFFFFFC000) + 8 * ((v65 >> 10) & 0xF) + 0x28) >> (v65 >> 4)) & 1) != 0
        && !*((_QWORD *)a2 + 21))
      {
        goto LABEL_105;
      }
    }
    v121 = v65;
    v122 = v9;
    v123 = v36;
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v121, 0, a4, a5, a6, a7, a8);
    v36 = v123;
    v9 = v122;
    goto LABEL_105;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
    v38 = *(unsigned int *)(v36 + 8);
  else
    v38 = 0;
  if (v37 >= 64)
  {
    v39 = v37 - 63;
    if ((v37 - 63) >= 5)
    {
      v83 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
      v84 = v83 | (v83 >> 4) | ((v83 | (v83 >> 4)) >> 8);
      v40 = (v84 | HIWORD(v84)) + 1;
    }
    else
    {
      v40 = 4;
    }
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  v41 = v36 - 8;
  v42 = v36 - 8 - 8 * v40 - 8 * v38;
  if ((v42 & 8) != 0)
  {
    if ((*(_BYTE *)(v42 - 79) & 1) == 0)
    {
      v88 = (unsigned __int8 *)(v42 - 79);
      while (!__ldaxr(v88))
      {
        if (!__stlxr(1u, v88))
        {
          v44 = (v42 - 112) | 1;
LABEL_65:
          if ((v44 & 1) == 0)
          {
            v49 = (unsigned __int16)(*(_WORD *)(v44 + 28))++ + 1;
            if ((v49 & 0x10000) == 0)
              goto LABEL_67;
            v111 = v36;
            v112 = v9;
            v113 = v44;
            v114 = *(_QWORD *)(*(_QWORD *)v44 + 24);
            v115 = (unsigned __int8 *)(v114 + 56);
            if (__ldaxr((unsigned __int8 *)(v114 + 56)))
            {
              __clrex();
              goto LABEL_176;
            }
            if (__stxr(1u, v115))
LABEL_176:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v114 + 56);
            v117 = *(_QWORD *)(v114 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)v113 + 12) >> 5);
            *(_DWORD *)(v117 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)v113 + 12);
            v118 = __ldxr(v115);
            if (v118 == 1)
            {
              v44 = v113;
              v9 = v112;
              v36 = v111;
              if (!__stlxr(0, v115))
              {
LABEL_67:
                ++*((_QWORD *)a2 + 9);
                v50 = 16 * **(unsigned int **)v44;
LABEL_68:
                *(int64x2_t *)((char *)a2 + 136) = vaddq_s64(*(int64x2_t *)((char *)a2 + 136), vdupq_n_s64(v50));
                goto LABEL_69;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v114 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            v36 = v111;
            v9 = v112;
            v44 = v113;
            goto LABEL_67;
          }
          ++*((_QWORD *)a2 + 9);
          v50 = *(_QWORD *)(v44 + 23);
          goto LABEL_68;
        }
      }
      __clrex();
    }
  }
  else
  {
    v43 = *((_DWORD *)a2 + 33);
    v44 = v42 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v42 & 0xFFFFFFFFFFFFC000 | 0x20) != v43)
    {
      v101 = v9;
      v102 = *((_QWORD *)v9 + 1);
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v42 & 0xFFFFFFFFFFFFC000), v43, (uint64_t)a3, a4, a5, a6, a7, a8);
      v36 = v102;
      v9 = v101;
      v44 = v42 & 0xFFFFFFFFFFFFC000;
    }
    v45 = 1 << (v42 >> 4);
    v46 = (unint64_t *)(v44 + 8 * ((v42 >> 10) & 0xF) + 40);
    while (1)
    {
      v47 = *v46;
      if ((*v46 & v45) != 0)
        break;
      v48 = __ldxr(v46);
      if (v48 == v47)
      {
        if (!__stxr(v47 | v45, v46))
          goto LABEL_65;
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_69:
  if (v39)
  {
    v51 = 0;
    v52 = v39;
    v53 = v41 - 8 * v39;
    do
    {
      v124 = *(_QWORD *)(v53 + 8 * v51);
      if ((v124 & 0xFFFE000000000002) == 0 && v124 != 0)
      {
        if ((v124 & 8) != 0)
        {
          if ((*(_BYTE *)(v124 - 79) & 1) == 0)
          {
            v137 = (unsigned __int8 *)(v124 - 79);
            do
            {
              if (__ldaxr(v137))
              {
                __clrex();
                goto LABEL_205;
              }
            }
            while (__stlxr(1u, v137));
            *(_BYTE *)(v124 + 7) = 2;
            ++*((_QWORD *)a2 + 9);
            *((_QWORD *)a2 + 17) += *(_QWORD *)(v124 - 88);
            v135 = *((_QWORD *)a2 + 3);
            if (v135 == 510)
            {
LABEL_227:
              v139 = v9;
              v140 = v36;
              v141 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
              v36 = v140;
              v9 = v139;
              v135 = 0;
              *v141 = 0;
              v141[1] = 0;
              ++*((_QWORD *)a2 + 4);
              v142 = *((_QWORD *)a2 + 1);
              if (v142)
                v143 = (_QWORD *)*((_QWORD *)a2 + 1);
              else
                v143 = (_QWORD *)((char *)a2 + 16);
              *v143 = v141;
              *((_QWORD *)a2 + 1) = v141;
              *v141 = 0;
              v141[1] = v142;
            }
LABEL_221:
            v136 = *((_QWORD *)a2 + 1) + 8 * v135;
            *((_QWORD *)a2 + 3) = v135 + 1;
            *(_QWORD *)(v136 + 16) = v124;
          }
        }
        else
        {
          v126 = (unsigned int **)(v124 & 0xFFFFFFFFFFFFC000);
          v127 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v124 & 0xFFFFFFFFFFFFC000 | 0x20) != v127)
          {
            v235 = v9;
            v144 = v36;
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v124 & 0xFFFFFFFFFFFFC000), v127, (uint64_t)a3, a4, a5, a6, a7, a8);
            v36 = v144;
            v9 = v235;
          }
          v128 = &v126[(v124 >> 10) & 0xF];
          v130 = v128[5];
          v129 = (unint64_t *)(v128 + 5);
          v131 = 1 << (v124 >> 4);
          if (((unint64_t)v130 & v131) == 0)
          {
            do
            {
              while (1)
              {
                v132 = *v129;
                if ((*v129 & v131) != 0)
                  goto LABEL_205;
                v133 = __ldxr(v129);
                if (v133 == v132)
                  break;
                __clrex();
              }
            }
            while (__stxr(v132 | v131, v129));
            *(_BYTE *)(v124 + 7) = 2;
            v134 = (unsigned __int16)(*(_WORD *)((v124 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
            if ((v134 & 0x10000) == 0)
            {
LABEL_220:
              ++*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 17) += 16 * **v126;
              v135 = *((_QWORD *)a2 + 3);
              if (v135 == 510)
                goto LABEL_227;
              goto LABEL_221;
            }
            v228 = v36;
            v236 = v9;
            v145 = *((_QWORD *)*v126 + 3);
            v146 = (unsigned __int8 *)(v145 + 56);
            if (__ldaxr((unsigned __int8 *)(v145 + 56)))
            {
              __clrex();
              goto LABEL_233;
            }
            if (__stxr(1u, v146))
LABEL_233:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v145 + 56);
            v148 = *(_QWORD *)(v145 + 32) + 40 * ((*v126)[3] >> 5);
            *(_DWORD *)(v148 + 36) |= 1 << (*v126)[3];
            v149 = __ldxr(v146);
            if (v149 == 1)
            {
              v36 = v228;
              v9 = v236;
              if (!__stlxr(0, v146))
                goto LABEL_220;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v145 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            v36 = v228;
            v9 = v236;
            goto LABEL_220;
          }
        }
      }
LABEL_205:
      ++v51;
    }
    while (v51 != v52);
  }
LABEL_105:
  v67 = *(_BYTE *)(v13 + 8) & 0x1F;
  if ((v67 - 8) < 2)
  {
    v81 = *(unsigned int *)(v36 - 8);
    if ((_DWORD)v81)
    {
      v82 = 0;
      while (1)
      {
        v150 = *(_QWORD *)(v36 + 8 * v82);
        if ((v150 & 0xFFFE000000000002) == 0 && v150 != 0)
        {
          if ((v150 & 8) != 0)
          {
            if ((*(_BYTE *)(v150 - 79) & 1) == 0)
            {
              v163 = (unsigned __int8 *)(v150 - 79);
              do
              {
                if (__ldaxr(v163))
                {
                  __clrex();
                  goto LABEL_242;
                }
              }
              while (__stlxr(1u, v163));
              *(_BYTE *)(v150 + 7) = 2;
              ++*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 17) += *(_QWORD *)(v150 - 88);
              v161 = *((_QWORD *)a2 + 3);
              if (v161 == 510)
              {
LABEL_264:
                v165 = v9;
                v166 = v36;
                v167 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                v36 = v166;
                v9 = v165;
                v161 = 0;
                *v167 = 0;
                v167[1] = 0;
                ++*((_QWORD *)a2 + 4);
                v168 = *((_QWORD *)a2 + 1);
                if (v168)
                  v169 = (_QWORD *)*((_QWORD *)a2 + 1);
                else
                  v169 = (_QWORD *)((char *)a2 + 16);
                *v169 = v167;
                *((_QWORD *)a2 + 1) = v167;
                *v167 = 0;
                v167[1] = v168;
              }
LABEL_258:
              v162 = *((_QWORD *)a2 + 1) + 8 * v161;
              *((_QWORD *)a2 + 3) = v161 + 1;
              *(_QWORD *)(v162 + 16) = v150;
            }
          }
          else
          {
            v152 = (unsigned int **)(v150 & 0xFFFFFFFFFFFFC000);
            v153 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v150 & 0xFFFFFFFFFFFFC000 | 0x20) != v153)
            {
              v237 = v9;
              v170 = v36;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v150 & 0xFFFFFFFFFFFFC000), v153, (uint64_t)a3, a4, a5, a6, a7, a8);
              v36 = v170;
              v9 = v237;
            }
            v154 = &v152[(v150 >> 10) & 0xF];
            v156 = v154[5];
            v155 = (unint64_t *)(v154 + 5);
            v157 = 1 << (v150 >> 4);
            if (((unint64_t)v156 & v157) == 0)
            {
              do
              {
                while (1)
                {
                  v158 = *v155;
                  if ((*v155 & v157) != 0)
                    goto LABEL_242;
                  v159 = __ldxr(v155);
                  if (v159 == v158)
                    break;
                  __clrex();
                }
              }
              while (__stxr(v158 | v157, v155));
              *(_BYTE *)(v150 + 7) = 2;
              v160 = (unsigned __int16)(*(_WORD *)((v150 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
              if ((v160 & 0x10000) == 0)
              {
LABEL_257:
                ++*((_QWORD *)a2 + 9);
                *((_QWORD *)a2 + 17) += 16 * **v152;
                v161 = *((_QWORD *)a2 + 3);
                if (v161 == 510)
                  goto LABEL_264;
                goto LABEL_258;
              }
              v229 = v36;
              v238 = v9;
              v171 = *((_QWORD *)*v152 + 3);
              v172 = (unsigned __int8 *)(v171 + 56);
              if (__ldaxr((unsigned __int8 *)(v171 + 56)))
              {
                __clrex();
                goto LABEL_270;
              }
              if (__stxr(1u, v172))
LABEL_270:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v171 + 56);
              v174 = *(_QWORD *)(v171 + 32) + 40 * ((*v152)[3] >> 5);
              *(_DWORD *)(v174 + 36) |= 1 << (*v152)[3];
              v175 = __ldxr(v172);
              if (v175 == 1)
              {
                v36 = v229;
                v9 = v238;
                if (!__stlxr(0, v172))
                  goto LABEL_257;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v171 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
              v36 = v229;
              v9 = v238;
              goto LABEL_257;
            }
          }
        }
LABEL_242:
        if (++v82 == v81)
          goto LABEL_16;
      }
    }
  }
  else if ((v67 - 10) < 4)
  {
    v68 = v9;
    v69 = *(unsigned int *)(v36 - 4);
    if ((_DWORD)v69)
    {
      v70 = (unint64_t *)(v36 + 16);
      do
      {
        v72 = *v70++;
        v71 = v72;
        if ((v72 & 0xFFFE000000000002) != 0 || v71 == 0)
          goto LABEL_117;
        if ((v71 & 8) != 0)
        {
          if ((*(_BYTE *)(v71 - 79) & 1) != 0)
            goto LABEL_117;
          v75 = v36;
        }
        else
        {
          v74 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v71 & 0xFFFFFFFFFFFFC000 | 0x20) != v74)
          {
            v120 = v36;
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v71 & 0xFFFFFFFFFFFFC000), v74, (uint64_t)a3, a4, a5, a6, a7, a8);
            v36 = v120;
          }
          if (((*(_QWORD *)((v71 & 0xFFFFFFFFFFFFC000) + 8 * ((v71 >> 10) & 0xF) + 0x28) >> (v71 >> 4)) & 1) != 0)
            goto LABEL_117;
          v75 = v36;
        }
        JSC::SlotVisitor::appendHiddenSlow(a2, v71, 0, a4, a5, a6, a7, a8);
        v36 = v75;
LABEL_117:
        --v69;
      }
      while (v69);
    }
    v95 = *(_QWORD *)v36;
    if (!*(_QWORD *)v36)
    {
LABEL_182:
      v9 = v68;
LABEL_16:
      if (v13)
        return;
LABEL_203:
      v243[0] = v9;
      v243[1] = "JSObject::visitButterfly";
      JSC::SlotVisitor::didRace((uint64_t)a2, (uint64_t)v243, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    if ((v95 & 8) != 0)
    {
      if ((*(_BYTE *)(v95 - 79) & 1) != 0)
        goto LABEL_158;
    }
    else
    {
      v96 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v95 & 0xFFFFFFFFFFFFC000 | 0x20) != v96)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v95 & 0xFFFFFFFFFFFFC000), v96, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v95 & 0xFFFFFFFFFFFFC000) + 8 * ((v95 >> 10) & 0xF) + 0x28) >> (v95 >> 4)) & 1) != 0)
      {
LABEL_158:
        v9 = v68;
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_16;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v95, 0, a4, a5, a6, a7, a8);
    goto LABEL_182;
  }
}

void JSC::JSObject::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  JSC::JSObject *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  _QWORD v53[2];
  uint64_t v54;
  char v55;
  JSC::JSCell *v56;
  const char *v57;
  _QWORD *v58;
  char v59;

  v53[0] = a2;
  v53[1] = this;
  v55 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v54 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198A3745CLL);
  }
  v56 = a2;
  v57 = (const char *)this;
  v59 = 0;
  v58 = v53;
  *((_QWORD *)a2 + 11) = &v56;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *((_QWORD *)v56 + 11) = v58;
  if ((*(unsigned int (**)(JSC::JSCell *))(*(_QWORD *)a2 + 120))(a2))
  {
    v12 = (uint64_t *)*((_QWORD *)this + 1);
    v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v14 = *(unsigned __int16 *)(v13 + 0x18);
    if (v14 == 65534)
    {
      v14 = -1;
    }
    else if (v14 == 0xFFFF)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    }
    if (v12)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x10) != 0)
      {
        (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, v12 - 2);
      }
      else
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
          v17 = *((unsigned int *)v12 + 2);
        else
          v17 = 0;
        if (v14 >= 64)
        {
          v18 = v14 - 63;
          if ((v14 - 63) >= 5)
          {
            v25 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
            v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
            v19 = (v26 | HIWORD(v26)) + 1;
          }
          else
          {
            v19 = 4;
          }
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v12[-v19 - 1 - v17]);
        if (v18)
        {
          v27 = -(uint64_t)v18;
          do
          {
            if ((v12[v27 - 1] & 0xFFFE000000000002) == 0)
              (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
            v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
      }
    }
    v29 = *(_BYTE *)(v13 + 8) & 0x1F;
    if ((v29 - 10) >= 4)
    {
      if ((v29 - 8) > 1)
        goto LABEL_83;
      v33 = *((unsigned int *)v12 - 2);
      if (!(_DWORD)v33)
        goto LABEL_83;
      do
      {
        v34 = *v12++;
        if ((v34 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
        --v33;
      }
      while (v33);
    }
    else
    {
      v30 = *((unsigned int *)v12 - 1);
      if ((_DWORD)v30)
      {
        v31 = v12 + 2;
        do
        {
          v32 = *v31++;
          if ((v32 & 0xFFFE000000000002) == 0)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
          --v30;
        }
        while (v30);
      }
      if (*v12)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else
  {
    v15 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 1) != 0)
    {
LABEL_82:
      v56 = this;
      v57 = "JSObject::visitButterfly";
      (*(void (**)(JSC::JSCell *, JSC::JSCell **))(*(_QWORD *)a2 + 128))(a2, &v56);
      goto LABEL_83;
    }
    v13 = 16 * (v15 & 0xFFFFFFFE);
    v16 = *(unsigned __int16 *)(v13 + 0x18);
    if (v16 == 65534)
    {
      v16 = -1;
    }
    else if (v16 == 0xFFFF)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
    }
    v20 = *(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0x1F;
    if ((v20 - 10) > 3)
    {
      v24 = 0;
    }
    else
    {
      v21 = (unsigned __int8 *)this + 4;
      while (1)
      {
        v22 = *v21;
        if ((v22 & 0x40) != 0)
          break;
        v23 = __ldaxr(v21);
        if (v23 == v22)
        {
          if (!__stxr(v22 | 0x40, v21))
            goto LABEL_53;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_53:
      v24 = this;
    }
    v35 = (uint64_t *)*((_QWORD *)this + 1);
    if (v35)
    {
      if (*(_DWORD *)this != v15)
        goto LABEL_79;
      v36 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
      if (v36 == 65534)
      {
        v36 = -1;
      }
      else if (v36 == 0xFFFF)
      {
        v36 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
      }
      if (v36 == v16)
      {
        if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0x10) != 0)
        {
          (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, v35 - 2);
        }
        else
        {
          if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
            v37 = *((unsigned int *)v35 + 2);
          else
            v37 = 0;
          v38 = 4;
          v39 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
          v40 = v39 | (v39 >> 4) | ((v39 | (v39 >> 4)) >> 8);
          v41 = (v40 | HIWORD(v40)) + 1;
          if ((v16 - 63) >= 5)
            v38 = v41;
          if (v16 >= 64)
            v42 = v16 - 63;
          else
            v42 = 0;
          if (v16 >= 64)
            v43 = v38;
          else
            v43 = 0;
          (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v35[-v43 - 1 - v37]);
          if (v42)
          {
            v44 = -(uint64_t)v42;
            do
            {
              if ((v35[v44 - 1] & 0xFFFE000000000002) == 0)
                (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
              v28 = __CFADD__(v44++, 1);
            }
            while (!v28);
          }
        }
        if ((v20 - 10) >= 4)
        {
          if ((v20 - 8) <= 1)
          {
            v48 = *((unsigned int *)v35 - 2);
            if ((_DWORD)v48)
            {
              do
              {
                v49 = *v35++;
                if ((v49 & 0xFFFE000000000002) == 0)
                  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
                --v48;
              }
              while (v48);
            }
          }
        }
        else
        {
          v45 = *((unsigned int *)v35 - 1);
          if ((_DWORD)v45)
          {
            v46 = v35 + 2;
            do
            {
              v47 = *v46++;
              if ((v47 & 0xFFFE000000000002) == 0)
                (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
              --v45;
            }
            while (v45);
          }
          if (*v35)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        }
      }
      else
      {
LABEL_79:
        v13 = 0;
      }
    }
    if (v24)
    {
      v50 = (unsigned __int8 *)v24 + 4;
      while (1)
      {
        v51 = *v50;
        if ((v51 & 0xC0) != 0x40)
          break;
        v52 = __ldxr(v50);
        if (v52 == v51)
        {
          if (!__stxr(v51 & 0xBF, v50))
            goto LABEL_81;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v50, 0, v6, v7, v8, v9, v10, v11);
    }
  }
LABEL_81:
  if (!v13)
    goto LABEL_82;
LABEL_83:
  *(_QWORD *)(v53[0] + 88) = v54;
}

uint64_t JSC::Walker::walk(uint64_t *a1, WTF::AtomStringImpl *a2, const WTF::String *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t IndexQuicklyForTypedArray;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  WTF::StringImpl *v41;
  char *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  WTF *v64;
  _DWORD *v65;
  JSC::JSGlobalObject *v66;
  uint64_t v67;
  JSC::JSObject *v68;
  int v69;
  int v70;
  JSC::JSObject *v71;
  uint64_t v72;
  JSC::JSObject *v73;
  int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  char isArraySlow;
  int v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  WTF *v91;
  WTF *v92;
  _DWORD *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::JSObject *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  JSC::JSObject *v116;
  int v117;
  uint64_t v118;
  WTF::StringImpl **v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int DirectOffset;
  double v156;
  int v157;
  uint64_t v158;
  int v159;
  WTF::StringImpl *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t SlowCase;
  __n128 v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF *v194;
  WTF *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  WTF *v204;
  JSC::JSGlobalObject *v206;
  unint64_t OutOfMemoryError;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  JSC::Exception *v214;
  WTF::StringImpl *v215;
  unint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  JSC::Heap *v228;
  _QWORD *v229;
  unsigned __int8 *v230;
  JSC *v231;
  WTF::StringImpl *v233;
  WTF *v234;
  int v235;
  unsigned int v236;
  _BYTE v237[64];
  WTF *v238;
  uint64_t v239;
  _BYTE v240[64];
  char v241;
  uint64_t v242;
  _BYTE *v243;
  _BYTE v244[64];
  uint64_t v245;
  WTF *v246;
  uint64_t v247;
  _BYTE v248[64];
  WTF *v249;
  uint64_t v250;
  _BYTE v251[512];
  JSC::VM *v252;
  uint64_t *v253;
  int v254;
  JSC::JSObject *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;

  IndexQuicklyForTypedArray = (uint64_t)a2;
  v10 = 0;
  v11 = 0;
  v264 = *MEMORY[0x1E0C80C00];
  v230 = (unsigned __int8 *)(a1 + 2);
  v12 = *(_QWORD *)(*a1 + 56);
  v229 = (_QWORD *)(v12 + 41952);
  v252 = (JSC::VM *)v12;
  v249 = (WTF *)v251;
  a9.i64[0] = 16;
  v250 = 16;
  v247 = 16;
  v242 = 0x800000000;
  memset(v244, 0, sizeof(v244));
  v228 = (JSC::Heap *)(v12 + 192);
  v239 = 16;
  v245 = 0;
  v246 = (WTF *)v248;
  v241 = 0;
  v243 = &v244[8];
  v238 = (WTF *)v240;
  v234 = (WTF *)v237;
  v235 = 16;
  v231 = (JSC *)v12;
  v13 = 2;
  while (2)
  {
    v236 = v10;
    v14 = v11;
    switch(v11)
    {
      case 0u:
        goto LABEL_168;
      case 1u:
        goto LABEL_63;
      case 2u:
        v15 = v246;
        goto LABEL_4;
      case 3u:
        goto LABEL_28;
      case 4u:
        goto LABEL_175;
      case 5u:
        goto LABEL_239;
      case 6u:
        break;
      default:
        goto LABEL_242;
    }
LABEL_249:
    v137 = *((unsigned int *)v246 + HIDWORD(v247) - 1);
    v138 = *((_QWORD *)v249 + 4 * HIDWORD(v250) - 4);
    if (*(_DWORD *)(v138 + 20) <= v137)
    {
      __break(0xC471u);
      JUMPOUT(0x198A38C58);
    }
    v139 = *(_QWORD *)&v243[8 * (v242 - 1)];
    v140 = *(WTF::StringImpl **)(*(_QWORD *)(v138 + 8) + 8 * v137);
    if (v140)
      *(_DWORD *)v140 += 2;
    v233 = v140;
    v141 = JSC::jsString(v231, (JSC::VM *)&v233, a3, (uint64_t)a4, a5, a6, a7, a8);
    LOBYTE(v255) = 0;
    v263 = 0;
    v261 = 0u;
    v262 = 0u;
    v258 = 0;
    v260 = 0u;
    v257 = (uint64_t)&v259;
    v259 = v141;
    *(_QWORD *)&v260 = v13;
    v256 = 0x800000002;
    v142 = (uint64_t *)*a1;
    v143 = a1[1];
    v253 = &v259;
    v254 = 2;
    v147 = JSC::call(v142, v143, v230, v139, (uint64_t)&v253, v144, v145, v146);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v256, v148, v149, v150, v151, v152, v153, v154);
    v12 = (uint64_t)v252;
    if (*((_DWORD *)v252 + 20))
    {
      v169 = *((_DWORD *)v252 + 20);
      if ((v169 & 0x27) != 0 && (v169 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v252 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_316;
    }
    if (v147 == 10)
    {
      JSC::JSCell::deleteProperty(v139, *a1, (uint64_t)v233, a4, a5, a6, a7, a8);
    }
    else
    {
      LODWORD(v253) = 0;
      DirectOffset = JSC::JSObject::getDirectOffset((_DWORD *)v139, v231, (unint64_t)v233, (const JSC::PropertyTable *)&v253, a5, a6, a7, a8);
      if (DirectOffset == -1 || (_DWORD)v253)
      {
        v172 = *a1;
        v255 = (JSC::JSObject *)v147;
        v256 = 0;
        v257 = 0;
        v258 = 0x700000000;
        (*(void (**)(unint64_t, uint64_t, WTF::StringImpl *, JSC::JSObject **, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C) + 0x90))(v139, v172, v233, &v255, 0);
      }
      else
      {
        v157 = DirectOffset;
        if (DirectOffset <= 63)
        {
          v158 = v139 + 16;
          v159 = DirectOffset;
        }
        else
        {
          v158 = *(_QWORD *)(v139 + 8) - 8;
          v159 = 63 - DirectOffset;
        }
        *(_QWORD *)(v158 + 8 * v159) = v147;
        if ((v147 & 0xFFFE000000000002) == 0
          && v139
          && v147
          && *((_DWORD *)v231 + 190) >= *(unsigned __int8 *)(v139 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v228, v139);
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x12) & 4) != 0)
          JSC::Structure::didReplacePropertySlow(16 * (*(_DWORD *)v139 & 0xFFFFFFFE), v157, a3, (uint64_t)a4, a5, a6, a7, a8, v156);
      }
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v170 = *(_DWORD *)(v12 + 80);
      if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_316:
        v215 = v233;
        v233 = 0;
        if (v215)
        {
          if (*(_DWORD *)v215 == 2)
          {
            WTF::StringImpl::~StringImpl(v215, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          }
          else
          {
            *(_DWORD *)v215 -= 2;
          }
        }
LABEL_314:
        v186 = 0;
        goto LABEL_294;
      }
    }
    ++*((_DWORD *)v246 + HIDWORD(v247) - 1);
    v160 = v233;
    v233 = 0;
    if (v160)
    {
      if (*(_DWORD *)v160 == 2)
      {
        WTF::StringImpl::~StringImpl(v160, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
      }
      else
      {
        *(_DWORD *)v160 -= 2;
      }
    }
    while (1)
    {
LABEL_239:
      v13 = *(_QWORD *)&v243[8 * (v242 - 1)];
      v133 = *((unsigned int *)v246 + HIDWORD(v247) - 1);
      v134 = HIDWORD(v250) - 1;
      v135 = (unint64_t *)((char *)v249 + 32 * v134);
      v136 = *(_DWORD *)(*v135 + 20);
      if (v136 == (_DWORD)v133)
      {
        LODWORD(v242) = v242 - 1;
        --HIDWORD(v247);
        WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(v135, (unint64_t *)v249 + 4 * HIDWORD(v250), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        HIDWORD(v250) = v134;
        goto LABEL_241;
      }
      if (v136 <= v133)
      {
        __break(0xC471u);
        JUMPOUT(0x198A38C50);
      }
      IndexQuicklyForTypedArray = JSC::JSObject::get((unsigned int *)v13, *a1, *(_QWORD *)(*(_QWORD *)(*v135 + 8) + 8 * v133), (uint64_t)a4, a5, a6, a7, a8);
      v12 = (uint64_t)v252;
      v19 = 6;
      if (*((_DWORD *)v252 + 20))
      {
        v171 = *((_DWORD *)v252 + 20);
        if ((v171 & 0x27) != 0 && (v171 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v252 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_315;
      }
      if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(IndexQuicklyForTypedArray + 5) < 0x17u)
      {
        v13 = IndexQuicklyForTypedArray;
        goto LABEL_249;
      }
LABEL_164:
      LODWORD(v255) = v19;
      v81 = v236;
      if (v236 == v235)
      {
        v82 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v234, v236 + 1, (unint64_t)&v255);
        v81 = v236;
        *((_DWORD *)v234 + v236) = *(_DWORD *)v82;
      }
      else
      {
        *((_DWORD *)v234 + v236) = v19;
      }
      v236 = v81 + 1;
LABEL_168:
      if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) != 0
        || (v83 = *(unsigned __int8 *)(IndexQuicklyForTypedArray + 5), v83 < 0x17))
      {
        v13 = IndexQuicklyForTypedArray;
        goto LABEL_241;
      }
      isArraySlow = 1;
      if (v83 - 36 >= 2)
      {
        if (v83 == 61)
          isArraySlow = JSC::isArraySlow((JSC *)*a1, (JSC::JSGlobalObject *)IndexQuicklyForTypedArray, a3);
        else
          isArraySlow = 0;
      }
      v12 = (uint64_t)v252;
      if (*((_DWORD *)v252 + 20))
      {
        v132 = *((_DWORD *)v252 + 20);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v252 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_315;
      }
      if ((isArraySlow & 1) != 0)
        break;
LABEL_175:
      v85 = v242;
      if (v242 >> 6 >= 0x271)
        goto LABEL_309;
      if ((_DWORD)v242 != HIDWORD(v242) && (v243 != &v244[8] ? (v86 = v243 == 0) : (v86 = 1), v86))
      {
        *(_QWORD *)&v243[8 * v242] = IndexQuicklyForTypedArray;
        LODWORD(v242) = v85 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v242, IndexQuicklyForTypedArray, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)
      {
        v241 = 1;
LABEL_326:
        __break(0xC471u);
        JUMPOUT(0x198A38C10);
      }
      if (v241)
        goto LABEL_326;
      v87 = HIDWORD(v247);
      if (HIDWORD(v247) == (_DWORD)v247)
      {
        v88 = HIDWORD(v247) + ((unint64_t)HIDWORD(v247) >> 2);
        if (v88 >= 0x10)
          v89 = v88 + 1;
        else
          v89 = 16;
        if (v89 <= (unint64_t)HIDWORD(v247) + 1)
          v90 = HIDWORD(v247) + 1;
        else
          v90 = v89;
        v91 = v246;
        if (v90 < 0x11)
        {
          v246 = (WTF *)v248;
          LODWORD(v247) = 16;
          v92 = (WTF *)v248;
        }
        else
        {
          if (v90 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198A38C48);
          }
          v92 = (WTF *)WTF::fastMalloc((WTF *)(4 * v90));
          LODWORD(v247) = v90;
          v246 = v92;
        }
        memcpy(v92, v91, 4 * v87);
        if (v248 != (_BYTE *)v91 && v91)
        {
          if (v246 == v91)
          {
            v246 = 0;
            LODWORD(v247) = 0;
          }
          WTF::fastFree((unint64_t)v91, v94, v95, v96, v97, v98, v99, v100);
        }
        v93 = (_DWORD *)((char *)v246 + 4 * HIDWORD(v247));
      }
      else
      {
        v93 = (_DWORD *)((char *)v246 + 4 * HIDWORD(v247));
      }
      *v93 = 0;
      ++HIDWORD(v247);
      v101 = (JSC::JSObject *)WTF::fastMalloc((WTF *)0xB8);
      *(_DWORD *)v101 = 1;
      *((_QWORD *)v101 + 1) = (char *)v101 + 24;
      *((_QWORD *)v101 + 2) = 20;
      v255 = v101;
      v256 = 0;
      v257 = (uint64_t)v231;
      LOWORD(v258) = 258;
      if (HIDWORD(v250) == (_DWORD)v250)
      {
        v109 = WTF::Vector<JSC::PropertyNameArray,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v249, HIDWORD(v250) + 1, (unint64_t)&v255, v104, v105, v106, v107, v108);
        v110 = (char *)v249 + 32 * HIDWORD(v250);
        v111 = *v109;
        *v109 = 0;
        *(_QWORD *)v110 = v111;
        *((_QWORD *)v110 + 1) = 0;
        v112 = v109[1];
        v109[1] = 0;
        *((_QWORD *)v110 + 1) = v112;
        LOWORD(v112) = *((_WORD *)v109 + 12);
        *((_QWORD *)v110 + 2) = v109[2];
        *((_WORD *)v110 + 12) = v112;
      }
      else
      {
        v113 = (char *)v249 + 32 * HIDWORD(v250);
        v255 = 0;
        *(_QWORD *)v113 = v101;
        *((_QWORD *)v113 + 1) = 0;
        v114 = v256;
        v256 = 0;
        *((_QWORD *)v113 + 1) = v114;
        v115 = v257;
        *((_WORD *)v113 + 12) = v258;
        *((_QWORD *)v113 + 2) = v115;
      }
      ++HIDWORD(v250);
      if (v256)
        WTF::fastFree(v256 - 16, v102, v103, v104, v105, v106, v107, v108);
      v116 = v255;
      v255 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 1)
        {
          v118 = *((unsigned int *)v116 + 5);
          if ((_DWORD)v118)
          {
            v119 = (WTF::StringImpl **)*((_QWORD *)v116 + 1);
            v120 = 8 * v118;
            do
            {
              v121 = *v119;
              *v119 = 0;
              if (v121)
              {
                if (*(_DWORD *)v121 == 2)
                {
                  WTF::StringImpl::~StringImpl(v121, (WTF::AtomStringImpl *)v102, v103, v104, v105, v106, v107, v108);
                  WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                }
                else
                {
                  *(_DWORD *)v121 -= 2;
                }
              }
              ++v119;
              v120 -= 8;
            }
            while (v120);
          }
          v130 = *((_QWORD *)v116 + 1);
          if ((JSC::JSObject *)((char *)v116 + 24) != (JSC::JSObject *)v130 && v130 != 0)
          {
            *((_QWORD *)v116 + 1) = 0;
            *((_DWORD *)v116 + 4) = 0;
            WTF::fastFree(v130, v102, v103, v104, v105, v106, v107, v108);
          }
          WTF::fastFree((unint64_t)v116, v102, v103, v104, v105, v106, v107, v108);
        }
        else
        {
          --*(_DWORD *)v116;
        }
      }
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)IndexQuicklyForTypedArray & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x78))(IndexQuicklyForTypedArray, *a1, (char *)v249 + 32 * HIDWORD(v250) - 32, 1);
      v12 = (uint64_t)v252;
      if (*((_DWORD *)v252 + 20))
      {
        v117 = *((_DWORD *)v252 + 20);
        if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v252 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_315;
      }
    }
LABEL_63:
    v54 = v242;
    if (v242 >> 6 >= 0x271)
    {
LABEL_309:
      v186 = JSC::throwStackOverflowError(*a1, &v252, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_294;
    }
    if ((_DWORD)v242 != HIDWORD(v242) && (v243 != &v244[8] ? (v55 = v243 == 0) : (v55 = 1), v55))
    {
      *(_QWORD *)&v243[8 * v242] = IndexQuicklyForTypedArray;
      LODWORD(v242) = v54 + 1;
    }
    else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v242, IndexQuicklyForTypedArray, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)
    {
      v241 = 1;
      goto LABEL_327;
    }
    if (v241)
    {
LABEL_327:
      __break(0xC471u);
      JUMPOUT(0x198A38C38);
    }
    v56 = *(unsigned __int8 *)(IndexQuicklyForTypedArray + 5);
    if (v56 == 36)
    {
      v57 = 0;
      if ((*(_BYTE *)(IndexQuicklyForTypedArray + 4) & 0xE) != 0)
        v57 = *(unsigned int *)(*(_QWORD *)(IndexQuicklyForTypedArray + 8) - 8);
      goto LABEL_75;
    }
    v66 = (JSC::JSGlobalObject *)*a1;
    v67 = *(_QWORD *)(*a1 + 56);
    switch(v56)
    {
      case '#':
        if ((*(_BYTE *)((16 * *(unsigned int *)IndexQuicklyForTypedArray) | 0x12) & 0x20) == 0)
        {
          v71 = *(JSC::JSObject **)(*(_QWORD *)(IndexQuicklyForTypedArray + 8) - 16);
          v255 = v71;
          if ((unint64_t)v71 >= 0xFFFE000000000000)
          {
            v57 = v71 & ~((int)v71 >> 31);
            goto LABEL_75;
          }
          goto LABEL_130;
        }
        v68 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)IndexQuicklyForTypedArray, *a1, *(_QWORD *)(*(_QWORD *)(v67 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
        v255 = v68;
        if (*(_DWORD *)(v67 + 80))
        {
          v75 = *(_DWORD *)(v67 + 80);
          if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v57 = 0;
          if (*(_QWORD *)(v67 + 16))
            goto LABEL_75;
          v68 = v255;
        }
        if ((unint64_t)v68 >= 0xFFFE000000000000)
          goto LABEL_108;
        goto LABEL_130;
      case '!':
        v72 = *(_QWORD *)(IndexQuicklyForTypedArray + 40);
        if (v72
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v72 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          v73 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)IndexQuicklyForTypedArray, *a1, *(_QWORD *)(*(_QWORD *)(v67 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
          v255 = v73;
          if (*(_DWORD *)(v67 + 80))
          {
            v80 = *(_DWORD *)(v67 + 80);
            if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            LODWORD(v73) = 0;
            if (*(_QWORD *)(v67 + 16))
              goto LABEL_123;
            v73 = v255;
          }
          if ((unint64_t)v73 < 0xFFFE000000000000)
          {
            v76 = (unint64_t)v73 - 0x2000000000000;
            if ((unint64_t)v73 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase(&v255, v66, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
              v76 = a9.i64[0];
            }
            LODWORD(v73) = 0;
            v77 = (v76 >> 52) & 0x7FF;
            if ((v77 - 1023) <= 0x53)
            {
              v78 = v76 >> (51 - (v76 >> 52));
              if (v77 > 0x433)
                LODWORD(v78) = v76 << ((v76 >> 52) - 51);
              if (v77 >= 0x41F)
                v79 = v78;
              else
                v79 = (((1 << ((v76 >> 52) + 1)) - 1) & v78) + (1 << ((v76 >> 52) + 1));
              if ((v76 & 0x8000000000000000) == 0)
                LODWORD(v73) = v79;
              else
                LODWORD(v73) = -v79;
            }
          }
        }
        else
        {
          LODWORD(v73) = *(_DWORD *)(IndexQuicklyForTypedArray + 32);
        }
LABEL_123:
        v57 = v73;
        goto LABEL_75;
      case '"':
        v57 = JSC::ScopedArguments::length((JSC::ScopedArguments *)IndexQuicklyForTypedArray, (JSC::JSGlobalObject *)*a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_75;
    }
    v68 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)IndexQuicklyForTypedArray, *a1, *(_QWORD *)(*(_QWORD *)(v67 + 41952) + 1768), (uint64_t)a4, a5, a6, a7, a8);
    v255 = v68;
    if (*(_DWORD *)(v67 + 80))
    {
      v74 = *(_DWORD *)(v67 + 80);
      if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v57 = 0;
      if (!*(_QWORD *)(v67 + 16))
      {
        v68 = v255;
        goto LABEL_107;
      }
    }
    else
    {
LABEL_107:
      if ((unint64_t)v68 >= 0xFFFE000000000000)
      {
LABEL_108:
        v57 = v68 & ~((int)v68 >> 31);
        goto LABEL_75;
      }
LABEL_130:
      *(double *)a9.i64 = JSC::JSValue::toIntegerOrInfinity(&v255, v66, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      v57 = 0;
      if (*(double *)a9.i64 > 0.0)
      {
        if (*(double *)a9.i64 > 9.00719925e15)
          *(double *)a9.i64 = 9.00719925e15;
        v57 = (unint64_t)*(double *)a9.i64;
      }
    }
LABEL_75:
    if (*(_DWORD *)(v12 + 80))
    {
      v69 = *(_DWORD *)(v12 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_315:
        v186 = 0;
        goto LABEL_294;
      }
    }
    if (HIDWORD(v57))
    {
LABEL_311:
      v206 = (JSC::JSGlobalObject *)*a1;
      OutOfMemoryError = JSC::createOutOfMemoryError(*a1, a2);
      v214 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v214 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v208, v209, v210, v211, v212);
      }
      JSC::VM::throwException((JSC::VM *)v12, v206, v214, v213, v208, v209, v210, v211, v212);
      goto LABEL_314;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v70 = *(_DWORD *)(v12 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_315;
    }
    LODWORD(v255) = v57;
    if (HIDWORD(v239) == (_DWORD)v239)
    {
      v58 = WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v238, HIDWORD(v239) + 1, (unint64_t)&v255);
      *((_DWORD *)v238 + HIDWORD(v239)) = *(_DWORD *)v58;
    }
    else
    {
      *((_DWORD *)v238 + HIDWORD(v239)) = v57;
    }
    ++HIDWORD(v239);
    v59 = HIDWORD(v247);
    if (HIDWORD(v247) == (_DWORD)v247)
    {
      v60 = HIDWORD(v247) + ((unint64_t)HIDWORD(v247) >> 2);
      if (v60 >= 0x10)
        v61 = v60 + 1;
      else
        v61 = 16;
      if (v61 <= (unint64_t)HIDWORD(v247) + 1)
        v62 = HIDWORD(v247) + 1;
      else
        v62 = v61;
      v63 = v246;
      if (v62 < 0x11)
      {
        v246 = (WTF *)v248;
        LODWORD(v247) = 16;
        v64 = (WTF *)v248;
      }
      else
      {
        if (v62 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198A38C60);
        }
        v64 = (WTF *)WTF::fastMalloc((WTF *)(4 * v62));
        LODWORD(v247) = v62;
        v246 = v64;
      }
      memcpy(v64, v63, 4 * v59);
      if (v248 != (_BYTE *)v63 && v63)
      {
        if (v246 == v63)
        {
          v246 = 0;
          LODWORD(v247) = 0;
        }
        WTF::fastFree((unint64_t)v63, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v15 = v246;
      v65 = (_DWORD *)((char *)v246 + 4 * HIDWORD(v247));
    }
    else
    {
      v15 = v246;
      v65 = (_DWORD *)((char *)v246 + 4 * HIDWORD(v247));
    }
    *v65 = 0;
    v42 = (char *)&v247 + 4;
    while (2)
    {
      ++*(_DWORD *)v42;
LABEL_4:
      v13 = *(_QWORD *)&v243[8 * (v242 - 1)];
      v16 = *((unsigned int *)v15 + HIDWORD(v247) - 1);
      if ((_DWORD)v16 != *((_DWORD *)v238 + HIDWORD(v239) - 1))
      {
        if (*(_BYTE *)(v13 + 5) == 36)
        {
          v17 = *(_QWORD *)(v13 + 8);
          v18 = *(_BYTE *)(v13 + 4) & 0xF;
          if ((v18 - 8) >= 2)
          {
            switch(*(_BYTE *)(v13 + 4) & 0xF)
            {
              case 0:
              case 1:
                if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v13, v16))
                  goto LABEL_23;
                v17 = *(_QWORD *)(v13 + 8);
                v18 = *(_BYTE *)(v13 + 4) & 0xF;
                break;
              case 3:
                goto LABEL_23;
              case 4:
              case 5:
                goto LABEL_8;
              case 6:
              case 7:
                if (*(_DWORD *)(v17 - 4) <= v16)
                  goto LABEL_23;
                a9.i64[0] = *(_QWORD *)(v17 + 8 * v16);
                break;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                if (*(_DWORD *)(v17 - 4) <= v16 || !*(_QWORD *)(v17 + 8 * v16 + 16))
                  goto LABEL_23;
                goto LABEL_10;
              default:
                __break(0xC471u);
                JUMPOUT(0x198A38B98);
            }
            goto LABEL_10;
          }
LABEL_8:
          if (*(_DWORD *)(v17 - 4) > v16 && *(_QWORD *)(v17 + 8 * v16))
          {
LABEL_10:
            if ((v18 - 8) >= 2)
            {
              switch(v18)
              {
                case 0:
                case 1:
                  IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v13, v16, 0);
                  break;
                case 4:
                case 5:
                  IndexQuicklyForTypedArray = *(unsigned int *)(v17 + 8 * v16) | 0xFFFE000000000000;
                  break;
                case 6:
                case 7:
                  IndexQuicklyForTypedArray = *(_QWORD *)(v17 + 8 * v16) + 0x2000000000000;
                  break;
                case 10:
                case 11:
                case 12:
                case 13:
                  IndexQuicklyForTypedArray = *(_QWORD *)(v17 + 8 * v16 + 16);
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198A38BB8);
              }
            }
            else
            {
              IndexQuicklyForTypedArray = *(_QWORD *)(v17 + 8 * v16);
            }
            goto LABEL_24;
          }
        }
LABEL_23:
        IndexQuicklyForTypedArray = JSC::JSObject::get((JSC::JSObject *)v13, (JSC::JSGlobalObject *)*a1, v16);
        if (*(_DWORD *)(v12 + 80))
        {
          v53 = *(_DWORD *)(v12 + 80);
          v19 = 3;
          if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            goto LABEL_315;
          goto LABEL_25;
        }
LABEL_24:
        v19 = 3;
LABEL_25:
        if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) == 0
          && *(unsigned __int8 *)(IndexQuicklyForTypedArray + 5) >= 0x17u)
        {
          goto LABEL_164;
        }
        v13 = IndexQuicklyForTypedArray;
LABEL_28:
        v12 = 0;
        v20 = *(_DWORD **)&v243[8 * (v242 - 1)];
        v21 = *((_DWORD *)v246 + HIDWORD(v247) - 1);
        do
        {
          v22 = (v21 % 0xA) | 0x30;
          *((_BYTE *)&v256 + v12-- + 4) = (v21 % 0xA) | 0x30;
          v23 = v21 > 9;
          v21 /= 0xAu;
        }
        while (v23);
        if (v12 + 14 >= 15)
        {
          __break(1u);
          goto LABEL_311;
        }
        if (v12)
        {
          if ((unint64_t)-v12 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198A38C40);
          }
          v24 = WTF::fastCompactMalloc((WTF *)(20 - v12));
          v25 = (_BYTE *)(v24 + 20);
          *(_DWORD *)v24 = 2;
          *(_DWORD *)(v24 + 4) = -(int)v12;
          *(_QWORD *)(v24 + 8) = v24 + 20;
          *(_DWORD *)(v24 + 16) = 4;
          v233 = (WTF::StringImpl *)v24;
          if (v12 == -1)
            *v25 = v22;
          else
            memcpy(v25, (char *)&v256 + v12 + 5, -v12);
        }
        else
        {
          WTF::StringImpl::s_emptyAtomString += 2;
          v233 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        }
        v26 = JSC::jsString((uint64_t)v231, (JSC::VM *)&v233, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        LOBYTE(v255) = 0;
        v263 = 0;
        v261 = 0u;
        v262 = 0u;
        v258 = 0;
        v260 = 0u;
        v257 = (uint64_t)&v259;
        v259 = v26;
        *(_QWORD *)&v260 = v13;
        v256 = 0x800000002;
        v27 = (uint64_t *)*a1;
        v28 = a1[1];
        v253 = &v259;
        v254 = 2;
        v32 = JSC::call(v27, v28, v230, (uint64_t)v20, (uint64_t)&v253, v29, v30, v31);
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v256, v33, v34, v35, v36, v37, v38, v39);
        v41 = v233;
        v233 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
        v12 = (uint64_t)v252;
        if (*((_DWORD *)v252 + 20))
        {
          v51 = *((_DWORD *)v252 + 20);
          if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v252 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            goto LABEL_315;
        }
        if (v32 == 10)
          (*(void (**)(_DWORD *, uint64_t, _QWORD))(16
                                                            * *(unsigned int *)(16 * (*v20 & 0xFFFFFFFE) + 0x4C)
                                                            + 0x60))(v20, *a1, *((unsigned int *)v246 + HIDWORD(v247) - 1));
        else
          JSC::JSObject::putDirectIndex((unint64_t)v20, *a1, (JSC::VM *)*((unsigned int *)v246 + HIDWORD(v247) - 1), v32, 0, 1, a7, a8, v40);
        if (*(_DWORD *)(v12 + 80))
        {
          v52 = *(_DWORD *)(v12 + 80);
          if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            goto LABEL_315;
        }
        v15 = v246;
        v42 = (char *)v246 + 4 * HIDWORD(v247) - 4;
        continue;
      }
      break;
    }
    LODWORD(v242) = v242 - 1;
    --HIDWORD(v239);
    --HIDWORD(v247);
LABEL_241:
    v14 = v236;
LABEL_242:
    if (v14)
    {
      v11 = *((_DWORD *)v234 + v14 - 1);
      v10 = v14 - 1;
      continue;
    }
    break;
  }
  v173 = *a1;
  v174 = *(_QWORD *)(*a1 + 56);
  v175 = *(_QWORD *)(v174 + 15056);
  if (v175)
  {
    v176 = *(unsigned int *)(v175 + 60);
    SlowCase = *(_QWORD *)(v175 + 24);
    if (SlowCase < *(_QWORD *)(v175 + 32))
      goto LABEL_290;
    SlowCase = *(_QWORD *)(v175 + 40);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(*(JSC **)(*a1 + 56), a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v175, v174 + 192, v176, 0, 0, v225, v226, v227);
    }
    else
    {
      v216 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v175 + 48);
      *(_QWORD *)(v175 + 32) = SlowCase + HIDWORD(v216);
      *(_QWORD *)(v175 + 40) = SlowCase + (int)v216;
LABEL_290:
      *(_QWORD *)(v175 + 24) = SlowCase + v176;
    }
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v174 + 14936, *(JSC **)(*a1 + 56), 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A38CA0);
    }
  }
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *(_DWORD *)(v173 + 848);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  v178.n128_u64[1] = 0;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v174 + 755))
    __dmb(0xAu);
  v179 = *(_QWORD *)(*v229 + 8);
  v255 = 0;
  v256 = SlowCase;
  v257 = 0x1000000FFFFFFFFLL;
  v178.n128_u64[0] = 0x100000001000000;
  v258 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, (uint64_t)v231, v179, v13, 0, (uint64_t)&v255, a7, a8, v178);
  v180 = v229[2];
  LOBYTE(v255) = 0;
  v258 = 0;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v257 = (uint64_t)&v259;
  v259 = v180;
  *(_QWORD *)&v260 = v13;
  v263 = 0;
  v256 = 0x800000002;
  v181 = (uint64_t *)*a1;
  v182 = a1[1];
  v253 = &v259;
  v254 = 2;
  v186 = JSC::call(v181, v182, v230, SlowCase, (uint64_t)&v253, v183, v184, v185);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v256, v187, v188, v189, v190, v191, v192, v193);
LABEL_294:
  v194 = v234;
  if (v237 != (_BYTE *)v234 && v234)
  {
    v234 = 0;
    v235 = 0;
    WTF::fastFree((unint64_t)v194, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v195 = v238;
  if (v240 != (_BYTE *)v238 && v238)
  {
    v238 = 0;
    LODWORD(v239) = 0;
    WTF::fastFree((unint64_t)v195, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v242, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v203 = v246;
  if (v248 != (_BYTE *)v246 && v246)
  {
    v246 = 0;
    LODWORD(v247) = 0;
    WTF::fastFree((unint64_t)v203, v196, v197, v198, v199, v200, v201, v202);
  }
  if (HIDWORD(v250))
    WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct((unint64_t *)v249, (unint64_t *)v249 + 4 * HIDWORD(v250), v197, v198, v199, v200, v201, v202);
  v204 = v249;
  if (v251 != (_BYTE *)v249 && v249)
  {
    v249 = 0;
    LODWORD(v250) = 0;
    WTF::fastFree((unint64_t)v204, v196, v197, v198, v199, v200, v201, v202);
  }
  return v186;
}

uint64_t JSC::JSONParse(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint8x16_t v37;
  char v38;
  char v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned __int8 **v48;
  unint64_t v49;
  BOOL v51;
  char v52;
  unsigned __int8 *v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned int v74;
  unint64_t v75;
  int8x16_t *v76;
  unsigned __int8 *v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  unsigned __int8 *v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  char v91;
  char v92;
  int v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  double v99;
  unint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  WTF::StringImpl *v103;
  const char *v104;
  unsigned __int8 *v105;
  int v106;
  unsigned __int8 *v107;
  WTF::StringImpl *v108;
  int8x16_t *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  int v113;
  int v114;
  int64_t v115;
  int v116;
  BOOL v117;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  const char *v138;
  unsigned __int8 *v139;
  int v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  BOOL v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  unsigned __int8 v151[4];
  unsigned int v152;
  unint64_t v153;
  unsigned __int8 v154;
  unint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  _BYTE v174[16];
  _BYTE *v175;
  uint64_t v176;
  _BYTE v177[128];
  WTF::StringImpl *v178;

  if (!a2)
    return 0;
  v8 = a3;
  if ((a3 & 0xFF00000000) == 0)
  {
    v154 = 0;
    v149 = 0;
    v150 = 0;
    v148 = a1;
    v155 = a2;
    v156 = (unsigned __int8 *)(a2 + 2 * a3);
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 1;
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v165 = 0x800000000;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    v166 = (char *)&v167 + 8;
    v171 = 0;
    v172 = v174;
    v173 = 16;
    v175 = v177;
    v176 = 16;
    v12 = JSC::LiteralParser<char16_t>::tryLiteralParse((uint64_t)&v148, (int8x16_t)0x10uLL, a2, a3, a4, a5, a6, a7, a8);
    JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v148, v13, v14, v15, v16, v17, v18, v19);
    return v12;
  }
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v148 = a1;
  v9 = a2 + a3;
  v155 = a2;
  v156 = (unsigned __int8 *)v9;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 1;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0x800000000;
  v167 = 0u;
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  v166 = (char *)&v167 + 8;
  v171 = 0;
  v172 = v174;
  v10 = (__n128)0x10uLL;
  v173 = 16;
  v175 = v177;
  v176 = 16;
  if (!(_DWORD)a3)
    goto LABEL_6;
  if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)a2] != 19)
  {
    v8 = 1;
LABEL_6:
    v11 = (unsigned __int8 *)a2;
    goto LABEL_14;
  }
  v11 = (unsigned __int8 *)(a2 + a3);
  v20 = (unsigned __int8 *)(a2 + 1);
  v21 = &v11[~a2];
  while (1)
  {
    v22 = v20;
    v155 = (unint64_t)v20;
    if (!v21)
      break;
    ++v20;
    --v21;
    if (JSC::tokenTypesOfLatin1Characters[*v22] != 19)
    {
      v11 = v22;
      break;
    }
  }
  v8 = (unint64_t)v22 < v9;
LABEL_14:
  if (v11 == (unsigned __int8 *)v9)
  {
    v52 = 14;
    goto LABEL_101;
  }
  v151[0] = 18;
  a4 = *v11;
  v23 = JSC::tokenTypesOfLatin1Characters[a4];
  if (v23 > 4)
  {
    if (v23 != 6)
    {
      if (v23 != 5)
      {
        if (v23 - 18 < 2)
        {
          WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v11, 1uLL, 39, &v178);
          v54 = v178;
          v178 = 0;
          v150 = v54;
          goto LABEL_72;
        }
        goto LABEL_29;
      }
      if ((_DWORD)a4 == 110)
      {
        if ((uint64_t)(v9 - (_QWORD)v11) >= 4 && *(_WORD *)(v11 + 1) == 27765 && v11[3] == 108)
        {
          v155 = (unint64_t)(v11 + 4);
          v52 = 13;
LABEL_101:
          v151[0] = v52;
          goto LABEL_72;
        }
      }
      else if ((_DWORD)a4 == 102)
      {
        if ((uint64_t)(v9 - (_QWORD)v11) >= 5 && *(_WORD *)(v11 + 1) == 27745 && *(_WORD *)(v11 + 3) == 25971)
        {
          v155 = (unint64_t)(v11 + 5);
          v52 = 12;
          goto LABEL_101;
        }
      }
      else if ((_DWORD)a4 == 116 && (uint64_t)(v9 - (_QWORD)v11) >= 4 && *(_WORD *)(v11 + 1) == 30066 && v11[3] == 101)
      {
        v155 = (unint64_t)(v11 + 4);
        v52 = 11;
        goto LABEL_101;
      }
      v55 = (int)v11;
      v153 = (unint64_t)v11;
      v56 = (int)v11;
      if ((unint64_t)v11 < v9)
      {
        v57 = v9 - (_QWORD)v11;
        v58 = (_DWORD)v11 + v57;
        while (1)
        {
          v59 = *v11;
          if (v59 != 36)
          {
            v60 = v59 != 95 && (v59 - 48) >= 0xA;
            if (v60 && (v59 | 0x20u) - 97 > 0x19)
              break;
          }
          v155 = (unint64_t)++v11;
          if (!--v57)
          {
            LODWORD(v11) = v58;
            break;
          }
        }
        v56 = (int)v11;
      }
      v152 = (v56 - v55) & 0x7FFFFFFF;
      v52 = 5;
      goto LABEL_101;
    }
    v38 = v8 ^ 1;
    if ((_DWORD)a4 == 45)
      v39 = v38;
    else
      v39 = 1;
    v40 = v11;
    if ((v39 & 1) == 0)
    {
      v40 = v11 + 1;
      v155 = (unint64_t)(v11 + 1);
    }
    if ((unint64_t)v40 < v9)
    {
      v41 = *v40;
      if (v41 == 48)
      {
        v8 = (unint64_t)(v40 + 1);
        v155 = v8;
        goto LABEL_46;
      }
      if ((v41 - 49) <= 8)
      {
        v42 = v40 + 1;
        do
        {
          v8 = (unint64_t)v42;
          v155 = (unint64_t)v42;
          if ((unint64_t)v42 >= v9)
            break;
          ++v42;
        }
        while (*(unsigned __int8 *)v8 - 48 < 0xA);
LABEL_46:
        if (v8 < v9)
        {
          v43 = *(unsigned __int8 *)v8;
          if (v43 == 46)
          {
            v155 = v8 + 1;
            if (v8 + 1 >= v9 || *(unsigned __int8 *)(v8 + 1) - 48 > 9)
            {
              v101 = WTF::fastCompactMalloc((WTF *)0x20);
              v103 = (WTF::StringImpl *)v101;
              v10.n128_u64[0] = 0x2200000002;
              v104 = "Invalid digits after decimal point";
              goto LABEL_220;
            }
            v47 = v8 + 2;
            do
            {
              v8 = v47;
              v155 = v47;
              if (v47 >= v9)
                break;
              ++v47;
            }
            while (*(unsigned __int8 *)v8 - 48 < 0xA);
          }
          else if (v43 != 69 && v43 != 101 && (uint64_t)(v8 - (_QWORD)v11) <= 9)
          {
            v151[0] = 6;
            v44 = *v11;
            if (v44 == 45)
              ++v11;
            if ((unint64_t)v11 >= v8)
            {
              if (v44 != 45)
              {
                v45 = 0;
                goto LABEL_61;
              }
            }
            else
            {
              v45 = 0;
              do
              {
                v46 = *v11++;
                v45 = v46 + 10 * v45 - 48;
              }
              while ((unint64_t)v11 < v8);
              if (v44 != 45)
                goto LABEL_61;
              if (v45)
              {
                v45 = -v45;
LABEL_61:
                v10.n128_f64[0] = (double)v45;
LABEL_71:
                v153 = v10.n128_u64[0];
                goto LABEL_72;
              }
            }
            v153 = 0x8000000000000000;
            goto LABEL_72;
          }
        }
        if (v8 >= v9 || (*(unsigned __int8 *)v8 | 0x20) != 0x65)
        {
LABEL_69:
          v9 = 6;
          v151[0] = 6;
          v178 = 0;
          a2 = v8 - (_QWORD)v11;
          if ((uint64_t)(v8 - (_QWORD)v11) < 0)
            goto LABEL_194;
          v10.n128_f64[0] = WTF::parseDouble(v11, a2, &v178);
          goto LABEL_71;
        }
        v105 = (unsigned __int8 *)(v8 + 1);
        v155 = v8 + 1;
        if (v8 + 1 < v9)
        {
          v106 = *v105;
          if (v106 == 45 || v106 == 43)
          {
            v105 = (unsigned __int8 *)(v8 + 2);
            v155 = v8 + 2;
          }
        }
        if ((unint64_t)v105 < v9 && *v105 - 48 <= 9)
        {
          v107 = v105 + 1;
          do
          {
            v8 = (unint64_t)v107;
            v155 = (unint64_t)v107;
            if ((unint64_t)v107 >= v9)
              break;
            ++v107;
          }
          while (*(unsigned __int8 *)v8 - 48 < 0xA);
          goto LABEL_69;
        }
        v101 = WTF::fastCompactMalloc((WTF *)0x20);
        v103 = (WTF::StringImpl *)v101;
        v10.n128_u64[0] = 0x5D00000002;
        v104 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_220:
        *(_QWORD *)v101 = v10.n128_u64[0];
        *(_QWORD *)(v101 + 8) = v104;
        *(_DWORD *)(v101 + 16) = 4;
        v108 = v150;
        v150 = v103;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
          {
            WTF::StringImpl::~StringImpl(v108, v102, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          }
          else
          {
            *(_DWORD *)v108 -= 2;
          }
        }
        goto LABEL_72;
      }
    }
    v101 = WTF::fastCompactMalloc((WTF *)0x20);
    v103 = (WTF::StringImpl *)v101;
    v10.n128_u64[0] = 0xE00000002;
    v104 = "Invalid number";
    goto LABEL_220;
  }
  if (v23 == 4)
  {
    if ((_DWORD)a4 != 39)
    {
      a3 = (unint64_t)(v11 + 1);
      v155 = (unint64_t)(v11 + 1);
      v24 = v9 - (_QWORD)(v11 + 1);
      if (v24 < 0)
        goto LABEL_194;
      v25 = (unsigned __int8 *)v9;
      if ((unint64_t)v24 >= 0x10)
      {
        v26 = v11 + 16;
        v27.i64[0] = 0x2222222222222222;
        v27.i64[1] = 0x2222222222222222;
        v28.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
        v28.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
        v29.i64[0] = 0x2020202020202020;
        v29.i64[1] = 0x2020202020202020;
        while (1)
        {
          v30 = *(int8x16_t *)(v26 - 15);
          v31 = vceqq_s8(v30, v27);
          v10 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v30, v28), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v30)), v31);
          v31.i8[0] = vmaxvq_u8((uint8x16_t)v10);
          if (v31.i32[0])
            break;
          v26 += 16;
          if ((unint64_t)v26 >= v9)
          {
            if ((unint64_t)(v26 - 15) >= v9)
              goto LABEL_32;
            v32 = v9 - 16;
            v33 = *(int8x16_t *)(v9 - 16);
            v34.i64[0] = 0x2222222222222222;
            v34.i64[1] = 0x2222222222222222;
            v35 = vceqq_s8(v33, v34);
            v36.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v36.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v37.i64[0] = 0x2020202020202020;
            v37.i64[1] = 0x2020202020202020;
            v10 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v33, v36), (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v33)), v35);
            v35.i8[0] = vmaxvq_u8((uint8x16_t)v10);
            if (!v35.i32[0])
              goto LABEL_32;
LABEL_31:
            v10 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v10);
            v10.n128_u8[0] = vminvq_u8((uint8x16_t)v10);
            v25 = (unsigned __int8 *)(v32 + v10.n128_u32[0]);
            goto LABEL_32;
          }
        }
        v32 = (unint64_t)(v26 - 15);
        goto LABEL_31;
      }
      if (v9 != a3)
      {
        v53 = v11 + 1;
        while (JSC::safeStringLatin1CharactersInStrictJSON[*v53])
        {
          ++v53;
          if (!--v24)
            goto LABEL_32;
        }
        v25 = v53;
      }
LABEL_32:
      v155 = (unint64_t)v25;
      if ((unint64_t)v25 < v9 && *v25 == (_DWORD)a4)
      {
        v153 = a3;
        v155 = (unint64_t)(v25 + 1);
        v152 = ((_DWORD)v25 - a3) & 0x7FFFFFFF;
        *(_WORD *)v151 = -252;
      }
      else
      {
        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v150, (uint64_t)v151, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_72;
    }
    v101 = WTF::fastCompactMalloc((WTF *)0x20);
    v103 = (WTF::StringImpl *)v101;
    v10.n128_u64[0] = 0x2900000002;
    v104 = "Single quotes (') are not allowed in JSON";
    goto LABEL_220;
  }
LABEL_29:
  v151[0] = v23;
  v155 = (unint64_t)(v11 + 1);
LABEL_72:
  v48 = *(unsigned __int8 ***)(v148 + 56);
  if (!v161)
  {
    v49 = JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v148, v48, v10, a3, a4, a5, a6, a7, a8);
    goto LABEL_74;
  }
  v49 = JSC::LiteralParser<unsigned char>::parse((uint64_t)&v148, (uint64_t)v48, 3uLL, a4, a5, a6, a7, a8);
  if (v151[0] == 17)
  {
    v147 = v49;
    v11 = (unsigned __int8 *)v155;
    v9 = (unint64_t)v156;
    if (v155 >= (unint64_t)v156)
    {
      v51 = 0;
    }
    else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v155] == 19)
    {
      v70 = v156;
      v71 = (unsigned __int8 *)(v155 + 1);
      v72 = &v156[~v155];
      do
      {
        v73 = v71;
        v155 = (unint64_t)v71;
        if (!v72)
          goto LABEL_131;
        ++v71;
        --v72;
      }
      while (JSC::tokenTypesOfLatin1Characters[*v73] == 19);
      v70 = v73;
LABEL_131:
      v51 = v73 < v156;
      v11 = v70;
    }
    else
    {
      v51 = 1;
    }
    if (v11 == v156)
    {
      v91 = 14;
      goto LABEL_155;
    }
    v151[0] = 18;
    a4 = *v11;
    v74 = JSC::tokenTypesOfLatin1Characters[a4];
    if (v74 > 4)
    {
      if (v74 == 6)
      {
        v92 = (_DWORD)a4 != 45 || !v51;
        v8 = (unint64_t)v11;
        if ((v92 & 1) == 0)
        {
          v8 = (unint64_t)(v11 + 1);
          v155 = (unint64_t)(v11 + 1);
        }
        if (v8 < (unint64_t)v156)
        {
          v93 = *(unsigned __int8 *)v8;
          if (v93 == 48)
            goto LABEL_195;
          if ((v93 - 49) <= 8)
          {
            v94 = v8 + 1;
            do
            {
              v8 = v94;
              v155 = v94;
              if (v94 >= (unint64_t)v156)
                break;
              ++v94;
            }
            while (*(unsigned __int8 *)v8 - 48 < 0xA);
            goto LABEL_167;
          }
        }
        v135 = WTF::fastCompactMalloc((WTF *)0x20);
        v136 = (WTF::StringImpl *)v135;
        v137 = 0xE00000002;
        v138 = "Invalid number";
LABEL_270:
        *(_QWORD *)v135 = v137;
        *(_QWORD *)(v135 + 8) = v138;
        *(_DWORD *)(v135 + 16) = 4;
        v111 = v150;
        v150 = v136;
        if (!v111)
          goto LABEL_193;
        goto LABEL_255;
      }
      if (v74 == 5)
      {
        if ((_DWORD)a4 == 110)
        {
          if (v156 - v11 >= 4 && *(_WORD *)(v11 + 1) == 27765 && v11[3] == 108)
          {
            v155 = (unint64_t)(v11 + 4);
            v91 = 13;
            goto LABEL_155;
          }
        }
        else if ((_DWORD)a4 == 102)
        {
          if (v156 - v11 >= 5 && *(_WORD *)(v11 + 1) == 27745 && *(_WORD *)(v11 + 3) == 25971)
          {
            v155 = (unint64_t)(v11 + 5);
            v91 = 12;
            goto LABEL_155;
          }
        }
        else if ((_DWORD)a4 == 116 && v156 - v11 >= 4 && *(_WORD *)(v11 + 1) == 30066 && v11[3] == 101)
        {
          v155 = (unint64_t)(v11 + 4);
          v91 = 11;
          goto LABEL_155;
        }
        v113 = (int)v11;
        v153 = (unint64_t)v11;
        v114 = (int)v11;
        if (v11 < v156)
        {
          v115 = v156 - v11;
          do
          {
            v116 = *v11;
            if (v116 != 36)
            {
              v117 = v116 != 95 && (v116 - 48) >= 0xA;
              if (v117 && (v116 | 0x20u) - 97 > 0x19)
                goto LABEL_252;
            }
            v155 = (unint64_t)++v11;
            --v115;
          }
          while (v115);
          LODWORD(v11) = (_DWORD)v156;
LABEL_252:
          v114 = (int)v11;
        }
        v152 = v152 & 0x80000000 | (v114 - v113) & 0x7FFFFFFF;
        v91 = 5;
LABEL_155:
        v151[0] = v91;
        goto LABEL_193;
      }
      if (v74 - 18 < 2)
      {
        WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v11, 1uLL, 39, &v178);
        v110 = v178;
        v178 = 0;
        v111 = v150;
        v150 = v110;
        if (!v111)
          goto LABEL_193;
        v112 = *(_DWORD *)v111 - 2;
        if (*(_DWORD *)v111 != 2)
          goto LABEL_234;
        WTF::StringImpl::~StringImpl(v111, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
        v111 = v178;
        v178 = 0;
        if (!v111)
          goto LABEL_193;
LABEL_255:
        v112 = *(_DWORD *)v111 - 2;
        if (*(_DWORD *)v111 == 2)
        {
          WTF::StringImpl::~StringImpl(v111, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          goto LABEL_193;
        }
LABEL_234:
        *(_DWORD *)v111 = v112;
        goto LABEL_193;
      }
    }
    else if (v74 == 4)
    {
      v8 = v154;
      if ((_DWORD)a4 != 39)
      {
        a3 = (unint64_t)(v11 + 1);
        v155 = (unint64_t)(v11 + 1);
        if (!v154)
        {
          v75 = (unint64_t)&v156[-a3];
          if ((uint64_t)&v156[-a3] < 0)
          {
            while (1)
            {
LABEL_194:
              __break(1u);
LABEL_195:
              v155 = ++v8;
LABEL_167:
              if (v8 < v9)
              {
                v95 = *(unsigned __int8 *)v8;
                if (v95 == 46)
                {
                  v155 = v8 + 1;
                  if (v8 + 1 >= v9 || *(unsigned __int8 *)(v8 + 1) - 48 > 9)
                  {
                    v135 = WTF::fastCompactMalloc((WTF *)0x20);
                    v136 = (WTF::StringImpl *)v135;
                    v137 = 0x2200000002;
                    v138 = "Invalid digits after decimal point";
                    goto LABEL_270;
                  }
                  v100 = v8 + 2;
                  do
                  {
                    v8 = v100;
                    v155 = v100;
                    if (v100 >= v9)
                      break;
                    ++v100;
                  }
                  while (*(unsigned __int8 *)v8 - 48 < 0xA);
                }
                else if (v95 != 69 && v95 != 101 && (uint64_t)(v8 - (_QWORD)v11) <= 9)
                {
                  v151[0] = 6;
                  v96 = *v11;
                  if (v96 == 45)
                    ++v11;
                  if ((unint64_t)v11 >= v8)
                  {
                    if (v96 != 45)
                    {
                      v97 = 0;
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    v97 = 0;
                    do
                    {
                      v98 = *v11++;
                      v97 = v98 + 10 * v97 - 48;
                    }
                    while ((unint64_t)v11 < v8);
                    if (v96 != 45)
                      goto LABEL_182;
                    if (v97)
                    {
                      v97 = -v97;
LABEL_182:
                      v99 = (double)v97;
LABEL_192:
                      v153 = *(_QWORD *)&v99;
                      goto LABEL_193;
                    }
                  }
                  v153 = 0x8000000000000000;
LABEL_193:
                  v49 = v147;
                  goto LABEL_74;
                }
              }
              if (v8 < v9 && (*(unsigned __int8 *)v8 | 0x20) == 0x65)
              {
                v139 = (unsigned __int8 *)(v8 + 1);
                v155 = v8 + 1;
                if (v8 + 1 < v9)
                {
                  v140 = *v139;
                  if (v140 == 45 || v140 == 43)
                  {
                    v139 = (unsigned __int8 *)(v8 + 2);
                    v155 = v8 + 2;
                  }
                }
                if ((unint64_t)v139 >= v9 || *v139 - 48 > 9)
                {
                  v135 = WTF::fastCompactMalloc((WTF *)0x20);
                  v136 = (WTF::StringImpl *)v135;
                  v137 = 0x5D00000002;
                  v138 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                  goto LABEL_270;
                }
                v141 = v139 + 1;
                do
                {
                  v8 = (unint64_t)v141;
                  v155 = (unint64_t)v141;
                  if ((unint64_t)v141 >= v9)
                    break;
                  ++v141;
                }
                while (*(unsigned __int8 *)v8 - 48 < 0xA);
              }
              v9 = 6;
              v151[0] = 6;
              v178 = 0;
              a2 = v8 - (_QWORD)v11;
              if ((uint64_t)(v8 - (_QWORD)v11) >= 0)
              {
                v99 = WTF::parseDouble(v11, a2, &v178);
                goto LABEL_192;
              }
            }
          }
          v76 = (int8x16_t *)&v11[v75 + 1];
          if (v75 >= 0x10)
          {
            v77 = v11 + 16;
            v78.i64[0] = 0x2222222222222222;
            v78.i64[1] = 0x2222222222222222;
            v79.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v79.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v80.i64[0] = 0x2020202020202020;
            v80.i64[1] = 0x2020202020202020;
            while (1)
            {
              v81 = *(int8x16_t *)(v77 - 15);
              v82 = vceqq_s8(v81, v78);
              v83 = vorrq_s8(vorrq_s8(vceqq_s8(v81, v79), (int8x16_t)vcgtq_u8(v80, (uint8x16_t)v81)), v82);
              v82.i8[0] = vmaxvq_u8((uint8x16_t)v83);
              if (v82.i32[0])
                break;
              v77 += 16;
              if (v77 >= (unsigned __int8 *)v76)
              {
                if (v77 - 15 >= (unsigned __int8 *)v76)
                  goto LABEL_151;
                v84 = (unsigned __int8 *)&v76[-1];
                v85 = v76[-1];
                v86.i64[0] = 0x2222222222222222;
                v86.i64[1] = 0x2222222222222222;
                v87 = vceqq_s8(v85, v86);
                v88.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v88.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v89.i64[0] = 0x2020202020202020;
                v89.i64[1] = 0x2020202020202020;
                v83 = vorrq_s8(vorrq_s8(vceqq_s8(v85, v88), (int8x16_t)vcgtq_u8(v89, (uint8x16_t)v85)), v87);
                v87.i8[0] = vmaxvq_u8((uint8x16_t)v83);
                if (!v87.i32[0])
                  goto LABEL_151;
LABEL_150:
                v90 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v83);
                v90.i8[0] = vminvq_u8(v90);
                v76 = (int8x16_t *)&v84[v90.u32[0]];
                goto LABEL_151;
              }
            }
            v84 = v77 - 15;
            goto LABEL_150;
          }
          if (v156 == (unsigned __int8 *)a3)
            goto LABEL_151;
          v109 = (int8x16_t *)(v11 + 1);
          do
          {
            if (!JSC::safeStringLatin1CharactersInStrictJSON[v109->u8[0]])
            {
              v76 = v109;
              break;
            }
            v109 = (int8x16_t *)((char *)v109 + 1);
            --v75;
          }
          while (v75);
LABEL_151:
          v155 = (unint64_t)v76;
LABEL_152:
          if (v76 >= (int8x16_t *)v156 || v76->u8[0] != (_DWORD)a4)
          {
            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v150, (uint64_t)v151, a3, a4, a5, a6, a7, a8);
            goto LABEL_193;
          }
          v151[1] |= 1u;
          v153 = a3;
          v155 = (unint64_t)v76->u64 + 1;
          v152 = v152 & 0x80000000 | ((_DWORD)v76 - a3) & 0x7FFFFFFF;
          v91 = 4;
          goto LABEL_155;
        }
LABEL_274:
        if (a3 >= (unint64_t)v156)
        {
          v76 = (int8x16_t *)a3;
        }
        else
        {
          v142 = (uint64_t)&v156[(_QWORD)v11 - a3 + 1];
          v76 = (int8x16_t *)a3;
          do
          {
            v143 = v76->u8[0];
            v146 = v143 < 0x20 || v143 == 92 || v143 == (_DWORD)a4;
            if (v143 != 9 && v146)
              goto LABEL_152;
            v76 = (int8x16_t *)((char *)v76 + 1);
            v155 = (unint64_t)v76;
          }
          while (v76 != (int8x16_t *)v142);
          v76 = (int8x16_t *)v142;
        }
        goto LABEL_152;
      }
      if (v154)
      {
        a3 = (unint64_t)(v11 + 1);
        v155 = (unint64_t)(v11 + 1);
        goto LABEL_274;
      }
      v135 = WTF::fastCompactMalloc((WTF *)0x20);
      v136 = (WTF::StringImpl *)v135;
      v137 = 0x2900000002;
      v138 = "Single quotes (') are not allowed in JSON";
      goto LABEL_270;
    }
    v151[0] = v74;
    v155 = (unint64_t)(v11 + 1);
    goto LABEL_193;
  }
LABEL_74:
  if (v151[0] == 14)
    v12 = v49;
  else
    v12 = 0;
  JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v148, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  return v12;
}

unint64_t JSC::JSONParseWithException(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl **v12;
  unint64_t v13;
  __n128 v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int8x16_t v32;
  int8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  char v43;
  char v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 **v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  JSC::Exception *v70;
  WTF::StringImpl *v71;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  BOOL v82;
  char v83;
  unsigned __int8 *v84;
  int v85;
  WTF::AtomStringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  int v93;
  int v94;
  BOOL v95;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  unsigned __int8 *v117;
  unsigned int v118;
  unint64_t v119;
  int8x16_t *v120;
  unsigned __int8 *v121;
  int8x16_t v122;
  int8x16_t v123;
  uint8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  unsigned __int8 *v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  uint8x16_t v133;
  uint8x16_t v134;
  char v135;
  char v136;
  unsigned __int8 *v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  double v145;
  unsigned __int8 *v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  const char *v149;
  unsigned __int8 *v150;
  int v151;
  unsigned __int8 *v152;
  int8x16_t *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  int v160;
  BOOL v161;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  const char *v182;
  unsigned __int8 *v183;
  int v184;
  unsigned __int8 *v185;
  uint64_t v186;
  unsigned int v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  JSC::JSGlobalObject *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  unsigned __int8 v194[4];
  unsigned int v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  char v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  _BYTE v217[16];
  _BYTE *v218;
  uint64_t v219;
  _BYTE v220[128];
  WTF::StringImpl *v221;

  if (a2)
  {
    v10 = *((_QWORD *)a1 + 7);
    v11 = a3;
    if ((a3 & 0xFF00000000) == 0)
    {
      v197 = 0;
      v192 = 0;
      v193 = 0;
      v191 = a1;
      v198 = a2;
      v199 = a2 + 2 * a3;
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v203 = 1;
      v204 = 0;
      v205 = 0;
      v206 = 0;
      v207 = 0;
      v208 = 0x800000000;
      v210 = 0u;
      v211 = 0u;
      v212 = 0u;
      v213 = 0u;
      v209 = (char *)&v210 + 8;
      v214 = 0;
      v215 = v217;
      v216 = 16;
      v218 = v220;
      v219 = 16;
      v8 = JSC::LiteralParser<char16_t>::tryLiteralParse((uint64_t)&v191, (int8x16_t)0x10uLL, a2, a3, a4, a5, a6, a7, a8);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_9;
      v85 = *(_DWORD *)(v10 + 80);
      if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_9:
        if (v8)
          goto LABEL_92;
        JSC::LiteralParser<unsigned char>::getErrorMessage((uint64_t)&v191, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8, (int **)&v221);
        v16 = JSC::createSyntaxError(a1, &v221, 0);
        v23 = (JSC::Exception *)v16;
        if ((v16 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
        {
          v23 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
        }
        JSC::VM::throwException((JSC::VM *)v10, a1, v23, v22, v17, v18, v19, v20, v21);
        v24 = v221;
        v221 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
      v8 = 0;
      goto LABEL_92;
    }
    v197 = 0;
    v12 = &v193;
    v192 = 0;
    v193 = 0;
    v191 = a1;
    v13 = a2 + a3;
    v198 = a2;
    v199 = v13;
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 1;
    v204 = 0;
    v205 = 0;
    v206 = 0;
    v207 = 0;
    v208 = 0x800000000;
    v210 = 0u;
    v211 = 0u;
    v212 = 0u;
    v213 = 0u;
    v209 = (char *)&v210 + 8;
    v214 = 0;
    v215 = v217;
    v14 = (__n128)0x10uLL;
    v216 = 16;
    v218 = v220;
    v219 = 16;
    if ((_DWORD)a3)
    {
      if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)a2] == 19)
      {
        v15 = (unsigned __int8 *)(a2 + a3);
        v25 = (unsigned __int8 *)(a2 + 1);
        v26 = &v15[~a2];
        while (1)
        {
          v27 = v25;
          v198 = (unint64_t)v25;
          if (!v26)
            break;
          ++v25;
          --v26;
          if (JSC::tokenTypesOfLatin1Characters[*v27] != 19)
          {
            v15 = v27;
            break;
          }
        }
        v11 = (unint64_t)v27 < v13;
LABEL_22:
        if (v15 == (unsigned __int8 *)v13)
        {
          v83 = 14;
          goto LABEL_117;
        }
        v194[0] = 18;
        a4 = *v15;
        v28 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v28 <= 4)
        {
          if (v28 == 4)
          {
            if ((_DWORD)a4 != 39)
            {
              a3 = (unint64_t)(v15 + 1);
              v198 = (unint64_t)(v15 + 1);
              v29 = v13 - (_QWORD)(v15 + 1);
              if (v29 < 0)
                goto LABEL_219;
              v30 = (unsigned __int8 *)v13;
              if ((unint64_t)v29 >= 0x10)
              {
                v31 = v15 + 16;
                v32.i64[0] = 0x2222222222222222;
                v32.i64[1] = 0x2222222222222222;
                v33.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v33.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v34.i64[0] = 0x2020202020202020;
                v34.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v35 = *(int8x16_t *)(v31 - 15);
                  v36 = vceqq_s8(v35, v32);
                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v35, v33), (int8x16_t)vcgtq_u8(v34, (uint8x16_t)v35)), v36);
                  v36.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                  if (v36.i32[0])
                    break;
                  v31 += 16;
                  if ((unint64_t)v31 >= v13)
                  {
                    if ((unint64_t)(v31 - 15) >= v13)
                      goto LABEL_40;
                    v37 = v13 - 16;
                    v38 = *(int8x16_t *)(v13 - 16);
                    v39.i64[0] = 0x2222222222222222;
                    v39.i64[1] = 0x2222222222222222;
                    v40 = vceqq_s8(v38, v39);
                    v41.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v41.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v42.i64[0] = 0x2020202020202020;
                    v42.i64[1] = 0x2020202020202020;
                    v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v38, v41), (int8x16_t)vcgtq_u8(v42, (uint8x16_t)v38)), v40);
                    v40.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                    if (!v40.i32[0])
                      goto LABEL_40;
LABEL_39:
                    v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                    v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                    v30 = (unsigned __int8 *)(v37 + v14.n128_u32[0]);
                    goto LABEL_40;
                  }
                }
                v37 = (unint64_t)(v31 - 15);
                goto LABEL_39;
              }
              if (v13 != a3)
              {
                v84 = v15 + 1;
                while (JSC::safeStringLatin1CharactersInStrictJSON[*v84])
                {
                  ++v84;
                  if (!--v29)
                    goto LABEL_40;
                }
                v30 = v84;
              }
LABEL_40:
              v198 = (unint64_t)v30;
              if ((unint64_t)v30 < v13 && *v30 == (_DWORD)a4)
              {
                v196 = a3;
                v198 = (unint64_t)(v30 + 1);
                v195 = ((_DWORD)v30 - a3) & 0x7FFFFFFF;
                *(_WORD *)v194 = -252;
              }
              else
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v193, (uint64_t)v194, a3, a4, a5, a6, a7, a8);
              }
LABEL_81:
              v62 = (unsigned __int8 **)*((_QWORD *)v191 + 7);
              if (!v204)
              {
                v8 = JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v191, v62, v14, a3, a4, a5, a6, a7, a8);
                goto LABEL_83;
              }
              v8 = JSC::LiteralParser<unsigned char>::parse((uint64_t)&v191, (uint64_t)v62, 3uLL, a4, a5, a6, a7, a8);
              if (v194[0] != 17)
                goto LABEL_83;
              v81 = (unsigned __int8 *)v198;
              LOBYTE(v13) = v199;
              if (v198 >= v199)
              {
                v82 = 0;
              }
              else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v198] == 19)
              {
                v114 = (unsigned __int8 *)v199;
                v115 = (unsigned __int8 *)(v198 + 1);
                v116 = ~v198 + v199;
                while (1)
                {
                  v117 = v115;
                  v198 = (unint64_t)v115;
                  if (!v116)
                    break;
                  ++v115;
                  --v116;
                  if (JSC::tokenTypesOfLatin1Characters[*v117] != 19)
                  {
                    v114 = v117;
                    break;
                  }
                }
                v82 = (unint64_t)v117 < v199;
                v81 = v114;
              }
              else
              {
                v82 = 1;
              }
              if (v81 == (unsigned __int8 *)v199)
              {
                v135 = 14;
                goto LABEL_181;
              }
              v194[0] = 18;
              a4 = *v81;
              v118 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v118 <= 4)
              {
                if (v118 == 4)
                {
                  if ((_DWORD)a4 != 39)
                  {
                    a3 = (unint64_t)(v81 + 1);
                    v198 = (unint64_t)(v81 + 1);
                    if (!v197)
                    {
                      v119 = v199 - a3;
                      if ((uint64_t)(v199 - a3) >= 0)
                      {
                        v120 = (int8x16_t *)&v81[v119 + 1];
                        if (v119 >= 0x10)
                        {
                          v121 = v81 + 16;
                          v122.i64[0] = 0x2222222222222222;
                          v122.i64[1] = 0x2222222222222222;
                          v123.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v123.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v124.i64[0] = 0x2020202020202020;
                          v124.i64[1] = 0x2020202020202020;
                          while (1)
                          {
                            v125 = *(int8x16_t *)(v121 - 15);
                            v126 = vceqq_s8(v125, v122);
                            v127 = vorrq_s8(vorrq_s8(vceqq_s8(v125, v123), (int8x16_t)vcgtq_u8(v124, (uint8x16_t)v125)), v126);
                            v126.i8[0] = vmaxvq_u8((uint8x16_t)v127);
                            if (v126.i32[0])
                              break;
                            v121 += 16;
                            if (v121 >= (unsigned __int8 *)v120)
                            {
                              if (v121 - 15 >= (unsigned __int8 *)v120)
                                goto LABEL_177;
                              v128 = (unsigned __int8 *)&v120[-1];
                              v129 = v120[-1];
                              v130.i64[0] = 0x2222222222222222;
                              v130.i64[1] = 0x2222222222222222;
                              v131 = vceqq_s8(v129, v130);
                              v132.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                              v132.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                              v133.i64[0] = 0x2020202020202020;
                              v133.i64[1] = 0x2020202020202020;
                              v127 = vorrq_s8(vorrq_s8(vceqq_s8(v129, v132), (int8x16_t)vcgtq_u8(v133, (uint8x16_t)v129)), v131);
                              v131.i8[0] = vmaxvq_u8((uint8x16_t)v127);
                              if (!v131.i32[0])
                                goto LABEL_177;
LABEL_176:
                              v134 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v127);
                              v134.i8[0] = vminvq_u8(v134);
                              v120 = (int8x16_t *)&v128[v134.u32[0]];
                              goto LABEL_177;
                            }
                          }
                          v128 = v121 - 15;
                          goto LABEL_176;
                        }
                        if (v199 == a3)
                          goto LABEL_177;
                        v153 = (int8x16_t *)(v81 + 1);
                        do
                        {
                          if (!JSC::safeStringLatin1CharactersInStrictJSON[v153->u8[0]])
                          {
                            v120 = v153;
                            break;
                          }
                          v153 = (int8x16_t *)((char *)v153 + 1);
                          --v119;
                        }
                        while (v119);
LABEL_177:
                        v198 = (unint64_t)v120;
LABEL_178:
                        if ((unint64_t)v120 < v199 && v120->u8[0] == (_DWORD)a4)
                        {
                          v194[1] |= 1u;
                          v196 = a3;
                          v198 = (unint64_t)v120->u64 + 1;
                          v195 = v195 & 0x80000000 | ((_DWORD)v120 - a3) & 0x7FFFFFFF;
                          v135 = 4;
LABEL_181:
                          v194[0] = v135;
                          goto LABEL_83;
                        }
                        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v193, (uint64_t)v194, a3, a4, a5, a6, a7, a8);
LABEL_83:
                        LODWORD(v12) = v194[0];
                        if (!*(_DWORD *)(v10 + 80))
                          goto LABEL_84;
                        LODWORD(v13) = *(_DWORD *)(v10 + 80);
                        if ((v13 & 0x27) == 0)
                        {
LABEL_119:
                          if (*(_QWORD *)(v10 + 16))
                          {
LABEL_91:
                            v8 = 0;
LABEL_92:
                            JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v191, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            return v8;
                          }
LABEL_84:
                          if ((_DWORD)v12 == 14 && v8)
                            goto LABEL_92;
                          JSC::LiteralParser<unsigned char>::getErrorMessage((uint64_t)&v191, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8, (int **)&v221);
                          v63 = JSC::createSyntaxError(a1, &v221, 0);
                          v70 = (JSC::Exception *)v63;
                          if ((v63 & 0xFFFE000000000002) != 0
                            || &JSC::Exception::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v63 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
                          {
                            v70 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v63, 0, v64, v65, v66, v67, v68);
                          }
                          JSC::VM::throwException((JSC::VM *)v10, a1, v70, v69, v64, v65, v66, v67, v68);
                          v71 = v221;
                          v221 = 0;
                          if (v71)
                          {
                            if (*(_DWORD *)v71 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                              WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
                            }
                            else
                            {
                              *(_DWORD *)v71 -= 2;
                            }
                          }
                          goto LABEL_91;
                        }
LABEL_220:
                        if ((v13 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
                        goto LABEL_119;
                      }
LABEL_219:
                      __break(1u);
                      goto LABEL_220;
                    }
LABEL_303:
                    if (a3 >= v199)
                    {
                      v120 = (int8x16_t *)a3;
                    }
                    else
                    {
                      v186 = (uint64_t)&v81[v199 - a3 + 1];
                      v120 = (int8x16_t *)a3;
                      while (1)
                      {
                        v187 = v120->u8[0];
                        v188 = v187 < 0x20 || v187 == 92;
                        v189 = v188 || v187 == (_DWORD)a4;
                        v190 = v189;
                        if (v187 != 9 && v190)
                          break;
                        v120 = (int8x16_t *)((char *)v120 + 1);
                        v198 = (unint64_t)v120;
                        if (v120 == (int8x16_t *)v186)
                        {
                          v120 = (int8x16_t *)v186;
                          goto LABEL_178;
                        }
                      }
                    }
                    goto LABEL_178;
                  }
                  if (v197)
                  {
                    a3 = (unint64_t)(v81 + 1);
                    v198 = (unint64_t)(v81 + 1);
                    goto LABEL_303;
                  }
                  v179 = WTF::fastCompactMalloc((WTF *)0x20);
                  v180 = (WTF::StringImpl *)v179;
                  v181 = 0x2900000002;
                  v182 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_299;
                }
LABEL_174:
                v194[0] = v118;
                v198 = (unint64_t)(v81 + 1);
                goto LABEL_83;
              }
              if (v118 != 6)
              {
                if (v118 == 5)
                {
                  if ((_DWORD)a4 == 110)
                  {
                    if ((uint64_t)(v199 - (_QWORD)v81) >= 4 && *(_WORD *)(v81 + 1) == 27765 && v81[3] == 108)
                    {
                      v198 = (unint64_t)(v81 + 4);
                      v135 = 13;
                      goto LABEL_181;
                    }
                  }
                  else if ((_DWORD)a4 == 102)
                  {
                    if ((uint64_t)(v199 - (_QWORD)v81) >= 5
                      && *(_WORD *)(v81 + 1) == 27745
                      && *(_WORD *)(v81 + 3) == 25971)
                    {
                      v198 = (unint64_t)(v81 + 5);
                      v135 = 12;
                      goto LABEL_181;
                    }
                  }
                  else if ((_DWORD)a4 == 116
                         && (uint64_t)(v199 - (_QWORD)v81) >= 4
                         && *(_WORD *)(v81 + 1) == 30066
                         && v81[3] == 101)
                  {
                    v198 = (unint64_t)(v81 + 4);
                    v135 = 11;
                    goto LABEL_181;
                  }
                  v157 = (int)v81;
                  v196 = (unint64_t)v81;
                  v158 = (int)v81;
                  if ((unint64_t)v81 < v199)
                  {
                    v159 = v199 - (_QWORD)v81;
                    while (1)
                    {
                      v160 = *v81;
                      if (v160 != 36)
                      {
                        v161 = v160 != 95 && (v160 - 48) >= 0xA;
                        if (v161 && (v160 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      v198 = (unint64_t)++v81;
                      if (!--v159)
                      {
                        LODWORD(v81) = v199;
                        break;
                      }
                    }
                    v158 = (int)v81;
                  }
                  v195 = v195 & 0x80000000 | (v158 - v157) & 0x7FFFFFFF;
                  v135 = 5;
                  goto LABEL_181;
                }
                if (v118 - 18 < 2)
                {
                  WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v81, 1uLL, 39, &v221);
                  v154 = v221;
                  v221 = 0;
                  v155 = v193;
                  v193 = v154;
                  if (!v155)
                    goto LABEL_83;
                  v156 = *(_DWORD *)v155 - 2;
                  if (*(_DWORD *)v155 != 2)
                    goto LABEL_263;
                  WTF::StringImpl::~StringImpl(v155, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
                  v155 = v221;
                  v221 = 0;
                  if (!v155)
                    goto LABEL_83;
LABEL_284:
                  v156 = *(_DWORD *)v155 - 2;
                  if (*(_DWORD *)v155 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v155, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
                    goto LABEL_83;
                  }
LABEL_263:
                  *(_DWORD *)v155 = v156;
                  goto LABEL_83;
                }
                goto LABEL_174;
              }
              v136 = (_DWORD)a4 != 45 || !v82;
              v137 = v81;
              if ((v136 & 1) == 0)
              {
                v137 = v81 + 1;
                v198 = (unint64_t)(v81 + 1);
              }
              if ((unint64_t)v137 < v199)
              {
                v138 = *v137;
                if (v138 == 48)
                {
                  v140 = v137 + 1;
                  v198 = (unint64_t)v140;
                  goto LABEL_193;
                }
                if ((v138 - 49) <= 8)
                {
                  v139 = v137 + 1;
                  do
                  {
                    v140 = v139;
                    v198 = (unint64_t)v139;
                    if ((unint64_t)v139 >= v199)
                      break;
                    ++v139;
                  }
                  while (*v140 - 48 < 0xA);
LABEL_193:
                  if ((unint64_t)v140 < v199)
                  {
                    v141 = *v140;
                    if (v141 == 46)
                    {
                      v198 = (unint64_t)(v140 + 1);
                      if ((unint64_t)(v140 + 1) >= v199 || v140[1] - 48 > 9)
                      {
                        v179 = WTF::fastCompactMalloc((WTF *)0x20);
                        v180 = (WTF::StringImpl *)v179;
                        v181 = 0x2200000002;
                        v182 = "Invalid digits after decimal point";
                        goto LABEL_299;
                      }
                      v146 = v140 + 2;
                      do
                      {
                        v140 = v146;
                        v198 = (unint64_t)v146;
                        if ((unint64_t)v146 >= v199)
                          break;
                        ++v146;
                      }
                      while (*v140 - 48 < 0xA);
                    }
                    else if (v141 != 69 && v141 != 101 && v140 - v81 <= 9)
                    {
                      v194[0] = 6;
                      v142 = *v81;
                      if (v142 == 45)
                        ++v81;
                      if (v81 >= v140)
                      {
                        if (v142 != 45)
                        {
                          v143 = 0;
                          goto LABEL_208;
                        }
                      }
                      else
                      {
                        v143 = 0;
                        do
                        {
                          v144 = *v81++;
                          v143 = v144 + 10 * v143 - 48;
                        }
                        while (v81 < v140);
                        if (v142 != 45)
                          goto LABEL_208;
                        if (v143)
                        {
                          v143 = -v143;
LABEL_208:
                          v145 = (double)v143;
                          goto LABEL_218;
                        }
                      }
                      v196 = 0x8000000000000000;
                      goto LABEL_83;
                    }
                  }
                  if ((unint64_t)v140 >= v199 || (*v140 | 0x20) != 0x65)
                  {
LABEL_216:
                    LOBYTE(v13) = 6;
                    v194[0] = 6;
                    v221 = 0;
                    a2 = v140 - v81;
                    if (v140 - v81 < 0)
                      goto LABEL_219;
                    v145 = WTF::parseDouble(v81, a2, &v221);
LABEL_218:
                    v196 = *(_QWORD *)&v145;
                    goto LABEL_83;
                  }
                  v183 = v140 + 1;
                  v198 = (unint64_t)(v140 + 1);
                  if ((unint64_t)(v140 + 1) < v199)
                  {
                    v184 = *v183;
                    if (v184 == 45 || v184 == 43)
                    {
                      v183 = v140 + 2;
                      v198 = (unint64_t)(v140 + 2);
                    }
                  }
                  if ((unint64_t)v183 < v199 && *v183 - 48 <= 9)
                  {
                    v185 = v183 + 1;
                    do
                    {
                      v140 = v185;
                      v198 = (unint64_t)v185;
                      if ((unint64_t)v185 >= v199)
                        break;
                      ++v185;
                    }
                    while (*v140 - 48 < 0xA);
                    goto LABEL_216;
                  }
                  v179 = WTF::fastCompactMalloc((WTF *)0x20);
                  v180 = (WTF::StringImpl *)v179;
                  v181 = 0x5D00000002;
                  v182 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_299:
                  *(_QWORD *)v179 = v181;
                  *(_QWORD *)(v179 + 8) = v182;
                  *(_DWORD *)(v179 + 16) = 4;
                  v155 = v193;
                  v193 = v180;
                  if (!v155)
                    goto LABEL_83;
                  goto LABEL_284;
                }
              }
              v179 = WTF::fastCompactMalloc((WTF *)0x20);
              v180 = (WTF::StringImpl *)v179;
              v181 = 0xE00000002;
              v182 = "Invalid number";
              goto LABEL_299;
            }
            v147 = WTF::fastCompactMalloc((WTF *)0x20);
            v148 = (WTF::StringImpl *)v147;
            v14.n128_u64[0] = 0x2900000002;
            v149 = "Single quotes (') are not allowed in JSON";
            goto LABEL_249;
          }
LABEL_37:
          v194[0] = v28;
          v198 = (unint64_t)(v15 + 1);
          goto LABEL_81;
        }
        if (v28 != 6)
        {
          if (v28 != 5)
          {
            if (v28 - 18 < 2)
            {
              WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v15, 1uLL, 39, &v221);
              v87 = v221;
              v221 = 0;
              v88 = v193;
              v193 = v87;
              if (!v88)
                goto LABEL_81;
              v89 = *(_DWORD *)v88 - 2;
              if (*(_DWORD *)v88 != 2)
                goto LABEL_130;
              WTF::StringImpl::~StringImpl(v88, v86, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
              v88 = v221;
              v221 = 0;
              if (!v88)
                goto LABEL_81;
LABEL_151:
              v89 = *(_DWORD *)v88 - 2;
              if (*(_DWORD *)v88 == 2)
              {
                WTF::StringImpl::~StringImpl(v88, v105, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
                goto LABEL_81;
              }
LABEL_130:
              *(_DWORD *)v88 = v89;
              goto LABEL_81;
            }
            goto LABEL_37;
          }
          if ((_DWORD)a4 == 110)
          {
            if ((uint64_t)(v13 - (_QWORD)v15) >= 4 && *(_WORD *)(v15 + 1) == 27765 && v15[3] == 108)
            {
              v198 = (unint64_t)(v15 + 4);
              v83 = 13;
LABEL_117:
              v194[0] = v83;
              goto LABEL_81;
            }
          }
          else if ((_DWORD)a4 == 102)
          {
            if ((uint64_t)(v13 - (_QWORD)v15) >= 5 && *(_WORD *)(v15 + 1) == 27745 && *(_WORD *)(v15 + 3) == 25971)
            {
              v198 = (unint64_t)(v15 + 5);
              v83 = 12;
              goto LABEL_117;
            }
          }
          else if ((_DWORD)a4 == 116
                 && (uint64_t)(v13 - (_QWORD)v15) >= 4
                 && *(_WORD *)(v15 + 1) == 30066
                 && v15[3] == 101)
          {
            v198 = (unint64_t)(v15 + 4);
            v83 = 11;
            goto LABEL_117;
          }
          v90 = (int)v15;
          v196 = (unint64_t)v15;
          v91 = (int)v15;
          if ((unint64_t)v15 < v13)
          {
            v92 = v13 - (_QWORD)v15;
            v93 = (_DWORD)v15 + v92;
            while (1)
            {
              v94 = *v15;
              if (v94 != 36)
              {
                v95 = v94 != 95 && (v94 - 48) >= 0xA;
                if (v95 && (v94 | 0x20u) - 97 > 0x19)
                  break;
              }
              v198 = (unint64_t)++v15;
              if (!--v92)
              {
                LODWORD(v15) = v93;
                break;
              }
            }
            v91 = (int)v15;
          }
          v195 = (v91 - v90) & 0x7FFFFFFF;
          v83 = 5;
          goto LABEL_117;
        }
        v43 = !v11;
        if ((_DWORD)a4 == 45)
          v44 = v43;
        else
          v44 = 1;
        v45 = v15;
        if ((v44 & 1) == 0)
        {
          v45 = v15 + 1;
          v198 = (unint64_t)(v15 + 1);
        }
        if ((unint64_t)v45 < v13)
        {
          v46 = *v45;
          if (v46 == 48)
          {
            v48 = v45 + 1;
            v198 = (unint64_t)v48;
            goto LABEL_54;
          }
          if ((v46 - 49) <= 8)
          {
            v47 = v45 + 1;
            do
            {
              v48 = v47;
              v198 = (unint64_t)v47;
              if ((unint64_t)v47 >= v13)
                break;
              ++v47;
            }
            while (*v48 - 48 < 0xA);
LABEL_54:
            if ((unint64_t)v48 < v13)
            {
              v49 = *v48;
              if (v49 == 46)
              {
                v198 = (unint64_t)(v48 + 1);
                if ((unint64_t)(v48 + 1) >= v13 || v48[1] - 48 > 9)
                {
                  v147 = WTF::fastCompactMalloc((WTF *)0x20);
                  v148 = (WTF::StringImpl *)v147;
                  v14.n128_u64[0] = 0x2200000002;
                  v149 = "Invalid digits after decimal point";
                  goto LABEL_249;
                }
                v61 = v48 + 2;
                do
                {
                  v48 = v61;
                  v198 = (unint64_t)v61;
                  if ((unint64_t)v61 >= v13)
                    break;
                  ++v61;
                }
                while (*v48 - 48 < 0xA);
              }
              else if (v49 != 69 && v49 != 101 && v48 - v15 <= 9)
              {
                v194[0] = 6;
                v50 = *v15;
                if (v50 == 45)
                  ++v15;
                if (v15 >= v48)
                {
                  if (v50 != 45)
                  {
                    v51 = 0;
                    goto LABEL_70;
                  }
                }
                else
                {
                  v51 = 0;
                  do
                  {
                    v52 = *v15++;
                    v51 = v52 + 10 * v51 - 48;
                  }
                  while (v15 < v48);
                  if (v50 != 45)
                    goto LABEL_70;
                  if (v51)
                  {
                    v51 = -v51;
LABEL_70:
                    v14.n128_f64[0] = (double)v51;
LABEL_80:
                    v196 = v14.n128_u64[0];
                    goto LABEL_81;
                  }
                }
                v196 = 0x8000000000000000;
                goto LABEL_81;
              }
            }
            if ((unint64_t)v48 >= v13 || (*v48 | 0x20) != 0x65)
            {
LABEL_78:
              LOBYTE(v13) = 6;
              v194[0] = 6;
              v221 = 0;
              a2 = v48 - v15;
              if (v48 - v15 < 0)
                goto LABEL_219;
              v14.n128_f64[0] = WTF::parseDouble(v15, a2, &v221);
              goto LABEL_80;
            }
            v150 = v48 + 1;
            v198 = (unint64_t)(v48 + 1);
            if ((unint64_t)(v48 + 1) < v13)
            {
              v151 = *v150;
              if (v151 == 45 || v151 == 43)
              {
                v150 = v48 + 2;
                v198 = (unint64_t)(v48 + 2);
              }
            }
            if ((unint64_t)v150 < v13 && *v150 - 48 <= 9)
            {
              v152 = v150 + 1;
              do
              {
                v48 = v152;
                v198 = (unint64_t)v152;
                if ((unint64_t)v152 >= v13)
                  break;
                ++v152;
              }
              while (*v48 - 48 < 0xA);
              goto LABEL_78;
            }
            v147 = WTF::fastCompactMalloc((WTF *)0x20);
            v148 = (WTF::StringImpl *)v147;
            v14.n128_u64[0] = 0x5D00000002;
            v149 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_249:
            *(_QWORD *)v147 = v14.n128_u64[0];
            *(_QWORD *)(v147 + 8) = v149;
            *(_DWORD *)(v147 + 16) = 4;
            v88 = v193;
            v193 = v148;
            if (!v88)
              goto LABEL_81;
            goto LABEL_151;
          }
        }
        v147 = WTF::fastCompactMalloc((WTF *)0x20);
        v148 = (WTF::StringImpl *)v147;
        v14.n128_u64[0] = 0xE00000002;
        v149 = "Invalid number";
        goto LABEL_249;
      }
      v11 = 1;
    }
    v15 = (unsigned __int8 *)a2;
    goto LABEL_22;
  }
  return 0;
}

void JSC::LiteralParser<unsigned char>::getErrorMessage(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const char *v43;
  uint64_t v44;

  v11 = *(WTF::StringImpl **)(a1 + 16);
  if (!v11)
    goto LABEL_12;
  v12 = *(_DWORD *)v11;
  v13 = *((_DWORD *)v11 + 1);
  v14 = *(_DWORD *)v11 + 2;
  *(_DWORD *)v11 = v14;
  if (v12)
  {
    *(_DWORD *)v11 = v12;
    if (v13)
    {
LABEL_4:
      *(_DWORD *)v11 = v14;
      goto LABEL_5;
    }
LABEL_12:
    v31 = *(WTF::StringImpl **)(a1 + 96);
    if (!v31 || !*((_DWORD *)v31 + 1))
    {
      v32 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v32 = 0x2D00000002;
      *(_QWORD *)(v32 + 8) = "JSON Parse error: Unable to parse JSON string";
      *(_DWORD *)(v32 + 16) = 4;
      *a9 = (int *)v32;
      return;
    }
    *(_DWORD *)v31 += 2;
    v41 = v31;
    v43 = "JSON Parse error: ";
    v44 = 19;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v43, (uint64_t *)&v41, a9);
    if (*a9)
    {
      v22 = v41;
      v41 = 0;
      if (!v22)
        return;
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x198A3AE44);
  }
  WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  if (!v13)
    goto LABEL_12;
  v11 = *(WTF::StringImpl **)(a1 + 16);
  if (v11)
  {
    v14 = *(_DWORD *)v11 + 2;
    goto LABEL_4;
  }
LABEL_5:
  v42 = v11;
  v43 = "JSON Parse error: ";
  v44 = 19;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v43, (uint64_t *)&v42, a9);
  if (!*a9)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  v22 = v42;
  v42 = 0;
  if (!v22)
    return;
LABEL_7:
  if (*(_DWORD *)v22 == 2)
  {
    WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
}

void JSC::JSONStringify(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSC::stringify(a2, a1);
}

{
  JSC::stringify(a2, a1);
}

void JSC::stringify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  JSC::VM **v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 *v18;
  unint64_t StatusReg;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const JSC::PropertyTable *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  size_t v29;
  int *v30;
  _BYTE *v31;
  char *v32;
  size_t v33;
  int v34;
  JSC::VM *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::ProxyObject *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  unsigned int v48;
  JSC::JSGlobalObject *v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  int *v54;
  int appended;
  WTF::StringImpl *v56;
  WTF *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v86;
  WTF::StringImpl **v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::JSGlobalObject *v148;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v150;
  int isArray;
  uint64_t v152;
  double v153;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  JSC::JSGlobalObject *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE v170[24];
  int v171;
  WTF *v172;
  WTF *v173;
  uint64_t v174;
  _BYTE v175[128];
  WTF::StringImpl *v176[3];
  JSC::VM *v177;
  WTF::StringImpl *v178;
  JSC::VM *v179;
  JSC::VM **v180;
  unsigned __int8 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  __int128 v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  char v189;
  _QWORD v190[19];
  WTF *v191;
  uint64_t v192;
  _BYTE v193[2944];
  __int128 v194;
  int v195;
  char v196;
  int *__b[5];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v6;
  v12 = v5;
  v13 = v4;
  v14 = v3;
  v15 = (_QWORD *)v2;
  __b[3] = *(int **)MEMORY[0x1E0C80C00];
  v16 = (unint64_t)v5 & 0xFFFE000000000002;
  if ((unint64_t)v170 < *((_QWORD *)v3[7] + 1))
    goto LABEL_35;
  if (v16)
  {
    if (v6 != 10)
    {
LABEL_19:
      *v15 = 0;
      goto LABEL_35;
    }
  }
  else if (v5[5] > 0x16u || v6 != 10)
  {
    goto LABEL_19;
  }
  v18 = (unsigned __int8 *)v3[7];
  v180 = v3;
  v181 = v18;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)&v182 = 0;
  *(_DWORD *)((char *)&v182 + 7) = 0;
  v20 = *(_QWORD *)(StatusReg + 736);
  if (!v20)
    v20 = WTF::Thread::initializeCurrentTLS(0);
  v21 = (unint64_t)&v170[-*(_QWORD *)(v20 + 24) - 0x10000] / 0x180;
  if (v21 >= 0x2000)
    LODWORD(v21) = 0x2000;
  DWORD1(v182) = v21;
  JSC::FastStringifier<unsigned char>::append((uint64_t)&v180, v13, v4, (const JSC::PropertyTable *)v5, v6, v7, v8, v9, v10);
  v29 = v182;
  if (v182 <= 0x2000)
  {
    if ((_DWORD)v182)
    {
      v30 = (int *)WTF::fastCompactMalloc((WTF *)(v182 + 20));
      v31 = v30 + 5;
      *v30 = 2;
      v30[1] = v29;
      *((_QWORD *)v30 + 1) = v30 + 5;
      v30[4] = 4;
      if ((_DWORD)v29 == 1)
      {
        *v31 = BYTE11(v182);
LABEL_32:
        *v15 = v30;
        return;
      }
      v32 = (char *)&v182 + 11;
      v33 = v29;
LABEL_17:
      memcpy(v31, v32, v33);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v34 = BYTE10(v182);
  *v15 = 0;
  if (v34)
  {
    if (!v16 && v12[5] > 0x16u)
      goto LABEL_19;
    v35 = v14[7];
    v180 = v14;
    v181 = (unsigned __int8 *)v35;
    *(_QWORD *)&v182 = 0;
    *(_DWORD *)((char *)&v182 + 7) = 0;
    v36 = *(_QWORD *)(StatusReg + 736);
    if (!v36)
      v36 = WTF::Thread::initializeCurrentTLS(0);
    v37 = (unint64_t)&v170[-*(_QWORD *)(v36 + 24) - 0x10000] / 0x180;
    if (v37 >= 0x2000)
      LODWORD(v37) = 0x2000;
    DWORD1(v182) = v37;
    JSC::FastStringifier<char16_t>::append((uint64_t)&v180, v13, v22, v23, v24, v25, v26, v27, v28);
    v38 = v182;
    if (v182 > 0x2000)
      goto LABEL_19;
    if ((_DWORD)v182)
    {
      v30 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v182 + 20));
      v31 = v30 + 5;
      *v30 = 2;
      v30[1] = v38;
      *((_QWORD *)v30 + 1) = v30 + 5;
      v30[4] = 0;
      if ((_DWORD)v38 == 1)
      {
        *(_WORD *)v31 = WORD6(v182);
        goto LABEL_32;
      }
      v32 = (char *)&v182 + 12;
      v33 = 2 * v38;
      goto LABEL_17;
    }
LABEL_31:
    v30 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_32;
  }
LABEL_35:
  v177 = v14[7];
  v39 = (uint64_t)v177;
  v176[0] = (WTF::StringImpl *)v14;
  v180 = v14;
  v181 = v12;
  LOBYTE(v182) = 0;
  v40 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v40 = 1;
  *(_QWORD *)(v40 + 8) = v40 + 24;
  *(_QWORD *)(v40 + 16) = 20;
  *((_QWORD *)&v182 + 1) = v40;
  v183 = 0;
  v184 = v39;
  v185 = 258;
  LOBYTE(v186) = 0;
  v188 = 0;
  v189 = 0;
  v190[0] = 0x1000000000;
  v47 = 0uLL;
  memset(&v190[2], 0, 136);
  v190[1] = &v190[3];
  v191 = (WTF *)v193;
  v192 = 16;
  v194 = 0u;
  v195 = 0;
  v196 = 1;
  v179 = v14[7];
  if (!v16)
  {
    v48 = v12[5];
    if (v48 >= 0x17)
    {
      if (v48 == 26)
        JSC::JSFunction::getCallData((uint64_t)v12, (uint64_t)v170);
      else
        (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x38))(v170, v12);
      v47 = *(int8x16_t *)v170;
      v186 = *(_OWORD *)v170;
      v187 = *(_QWORD *)&v170[16];
      if (!v170[0])
      {
        isArray = JSC::isArray(v176[0], (JSC::JSGlobalObject *)v12, v41);
        if (*((_DWORD *)v179 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v179, v150, (uint64_t)v41, v42, v43, v44, v45, v46))
            goto LABEL_51;
        }
        if (isArray)
        {
          LOBYTE(v182) = 1;
          *(_QWORD *)v170 = v176;
          *(_QWORD *)&v170[8] = &v179;
          *(_QWORD *)&v170[16] = &v180;
          JSC::forEachInArrayLike<JSC::Stringifier::Stringifier(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0>(v176[0], (JSC::ScopedArguments *)v12, (uint64_t **)v170, v42, v43, v44, v45, v46, v47);
          if (*((_DWORD *)v179 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v179, v152, (uint64_t)v41, v42, v43, v44, v45, v46))
              goto LABEL_51;
          }
        }
      }
    }
  }
  v49 = v176[0];
  v50 = (JSC::VM *)*((_QWORD *)v176[0] + 7);
  if ((v11 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v11 + 5) >= 0x17u)
  {
    v160 = v176[0];
    v161 = JSC::unwrapBoxedPrimitive(v176[0], (JSC::JSGlobalObject *)v11, v41, v42, v43, v44, v45, v46);
    v49 = v160;
    v11 = (unint64_t)v161;
  }
  if (*((_DWORD *)v50 + 20))
  {
    v148 = v49;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v50, (uint64_t)v49, (uint64_t)v41, v42, v43, v44, v45, v46);
    v49 = v148;
    if (hasExceptionsAfterHandlingTraps)
    {
      v178 = 0;
      goto LABEL_48;
    }
  }
  if (v11 >> 49)
  {
    v153 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v153 = v11 - 0x2000000000000;
    if (v153 <= 10.0)
    {
      if (v153 <= 0.0)
      {
        v154 = 0;
        goto LABEL_147;
      }
      v154 = (unint64_t)v153;
      if (!(unint64_t)v153)
        goto LABEL_147;
    }
    else
    {
      v154 = 10;
    }
    memset(__b, 32, v154);
LABEL_147:
    WTF::String::String((uint64_t *)&v178, __b, v154);
    goto LABEL_48;
  }
  if ((v11 & 0xFFFE000000000002) != 0)
    __b[0] = 0;
  else
    JSC::JSCell::getString((int **)v11, v49, (uint64_t)v41, v42, v43, v44, v45, v46, __b, v47);
  if (*((_DWORD *)v50 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v50, (uint64_t)v49, (uint64_t)v41, v42, v43, v44, v45, v46))
  {
    v178 = 0;
  }
  else
  {
    if (!__b[0] || __b[0][1] <= 0xAu)
    {
      v178 = (WTF::StringImpl *)__b[0];
      goto LABEL_48;
    }
    WTF::String::substringSharingImpl(__b, 0, 0xAu, (int **)&v178);
  }
  v159 = (WTF::StringImpl *)__b[0];
  __b[0] = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
LABEL_48:
  v51 = v178;
  v178 = 0;
  v52 = v188;
  v188 = v51;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      v52 = v178;
      v178 = 0;
      if (!v52)
        goto LABEL_51;
      v53 = *(_DWORD *)v52 - 2;
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        goto LABEL_51;
      }
    }
    *(_DWORD *)v52 = v53;
  }
LABEL_51:
  if (!*(_DWORD *)(v39 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v39, (uint64_t)v49, (uint64_t)v41, v42, v43, v44, v45, v46))
  {
    v54 = 0;
    __b[0] = *(int **)(*(_QWORD *)(v39 + 41952) + 8);
    __b[2] = 0;
    if ((_BYTE)v186)
    {
      v54 = (int *)JSC::constructEmptyObject((JSC *)v14, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
      JSC::JSObject::putDirect(v54, v39, *(_QWORD *)(*(_QWORD *)(v39 + 41952) + 8), v13, 0, v158, v155, v156, v157);
    }
    memset(v176, 0, 21);
    *(_DWORD *)&v170[20] = 0;
    v171 = 0;
    *(_OWORD *)v170 = (unint64_t)v54;
    *(_DWORD *)&v170[15] = 0;
    v172 = 0;
    v173 = (WTF *)v175;
    v47.i64[0] = 8;
    v174 = 8;
    appended = JSC::Stringifier::appendStringifiedValue((JSC **)&v180, (uint64_t)v176, v13, (uint64_t)v170, (uint64_t)__b, v44, v45, v46, v47);
    if (!*(_DWORD *)(v39 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v39, (uint64_t)v49, (uint64_t)v41, v42, v43, v44, v45, v46))
    {
      if (((uint64_t)v176[2] & 0x80000000) != 0)
      {
        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)v14, (JSC::JSGlobalObject *)&v177);
      }
      else if (appended == 1)
      {
        v56 = v176[0];
        if (v176[0]
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v176, (uint64_t)v49, (uint64_t)v41, v42, v43, v44, v45, v46), WTF::StringBuilder::reifyString((WTF::StringBuilder *)v176), (v56 = v176[0]) != 0))
        {
          *(_DWORD *)v56 += 2;
        }
        goto LABEL_59;
      }
    }
    v56 = 0;
LABEL_59:
    *v15 = v56;
    v57 = v173;
    if (v175 != (_BYTE *)v173 && v173)
    {
      v173 = 0;
      LODWORD(v174) = 0;
      WTF::fastFree((unint64_t)v57, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
    }
    v58 = v172;
    v172 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
      {
        v86 = *((unsigned int *)v58 + 5);
        if ((_DWORD)v86)
        {
          v87 = (WTF::StringImpl **)*((_QWORD *)v58 + 1);
          v88 = 8 * v86;
          do
          {
            v89 = *v87;
            *v87 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
              {
                WTF::StringImpl::~StringImpl(v89, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
                WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
              }
              else
              {
                *(_DWORD *)v89 -= 2;
              }
            }
            ++v87;
            v88 -= 8;
          }
          while (v88);
        }
        v98 = *((_QWORD *)v58 + 1);
        if ((WTF *)((char *)v58 + 24) != (WTF *)v98 && v98 != 0)
        {
          *((_QWORD *)v58 + 1) = 0;
          *((_DWORD *)v58 + 4) = 0;
          WTF::fastFree(v98, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
        }
        WTF::fastFree((unint64_t)v58, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
      }
      else
      {
        --*(_DWORD *)v58;
      }
    }
    v59 = v176[1];
    v176[1] = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
    v60 = v176[0];
    v176[0] = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
    goto LABEL_69;
  }
  *v15 = 0;
LABEL_69:
  v61 = (WTF::StringImpl *)v194;
  *(_QWORD *)&v194 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  if (HIDWORD(v192))
    WTF::VectorTypeOperations<JSC::Stringifier::Holder>::destruct(v191, (_QWORD *)v191 + 23 * HIDWORD(v192), (uint64_t)v41, v42, v43, v44, v45, v46);
  v62 = v191;
  if (v193 != (_BYTE *)v191 && v191)
  {
    v191 = 0;
    LODWORD(v192) = 0;
    WTF::fastFree((unint64_t)v62, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v190, v49, (uint64_t)v41, v42, v43, v44, v45, v46);
  v70 = v188;
  v188 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  if (v183)
    WTF::fastFree(v183 - 16, v63, v64, v65, v66, v67, v68, v69);
  v71 = *((_QWORD *)&v182 + 1);
  *((_QWORD *)&v182 + 1) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
    {
      v72 = *(unsigned int *)(v71 + 20);
      if ((_DWORD)v72)
      {
        v73 = *(WTF::StringImpl ***)(v71 + 8);
        v74 = 8 * v72;
        do
        {
          v75 = *v73;
          *v73 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
            {
              WTF::StringImpl::~StringImpl(v75, v63, v64, v65, v66, v67, v68, v69);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else
            {
              *(_DWORD *)v75 -= 2;
            }
          }
          ++v73;
          v74 -= 8;
        }
        while (v74);
      }
      v84 = *(_QWORD *)(v71 + 8);
      if (v71 + 24 != v84 && v84 != 0)
      {
        *(_QWORD *)(v71 + 8) = 0;
        *(_DWORD *)(v71 + 16) = 0;
        WTF::fastFree(v84, v63, v64, v65, v66, v67, v68, v69);
      }
      WTF::fastFree(v71, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      --*(_DWORD *)v71;
    }
  }
}

BOOL JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>(JSC::JSObject *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  JSC::VM *v9;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *SparseIndexMap;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t v38;
  uint64_t v39;
  int32x4_t v40;
  uint64_t v41;
  JSC::VM *v42;

  v9 = *(JSC::VM **)(a2 + 56);
  v42 = v9;
  if ((*((_BYTE *)this + 4) & 0x10) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3B88CLL);
  }
  v11 = a3;
  if (a3 >> 28)
  {
LABEL_20:
    JSC::JSObject::ensureArrayStorageSlow(this, v9, a3, a4, a5, a6, a7, a8, (__n128)a9);
    SparseIndexMap = (unsigned __int8 *)JSC::JSObject::allocateSparseIndexMap(this, v9, v23, v24, v25, v26, v27, v28);
    v16 = JSC::SparseArrayValueMap::putEntry(SparseIndexMap, a2, (unsigned int *)this, v11, a4, 0);
    if (!*((_DWORD *)v9 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v9, v30, v31, v32, v33, v34, v35, v36))
    {
      *(_DWORD *)(*((_QWORD *)this + 1) - 8) = v11 + 1;
      return v16;
    }
    return 0;
  }
  v14 = *((_QWORD *)this + 1);
  if (a3 >> 5 >= 0xC35)
  {
    v18 = *(unsigned int *)(v14 - 8);
    if (!(_DWORD)v18)
    {
      v19 = 0;
      goto LABEL_19;
    }
    if (v18 >= 0xC)
    {
      v20 = *(_DWORD *)(v14 - 8) & 7;
      v37 = v18 - 1;
      v38 = 0uLL;
      v39 = v18 & 0xFFFFFFF8;
      v40 = 0uLL;
      do
      {
        v41 = v14 + 8 * v37;
        v38 = vsubq_s32(v38, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v41 - 8), *(int8x16_t *)(v41 - 8), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v41 - 24), *(int8x16_t *)(v41 - 24), 8uLL)))));
        v40 = vsubq_s32(v40, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v41 - 40), *(int8x16_t *)(v41 - 40), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v41 - 56), *(int8x16_t *)(v41 - 56), 8uLL)))));
        v37 -= 8;
        v39 -= 8;
      }
      while (v39);
      a9 = vaddq_s32(v40, v38);
      a9.i32[0] = vaddvq_s32(a9);
      v19 = a9.i32[0];
      if ((v18 & 0xFFFFFFF8) == v18)
        goto LABEL_19;
    }
    else
    {
      v19 = 0;
      v20 = *(_DWORD *)(v14 - 8);
    }
    v21 = v20 - 1;
    do
    {
      if (*(_QWORD *)(v14 + 8 * v21))
        ++v19;
    }
    while ((unint64_t)v21--);
LABEL_19:
    if (v19 < a3 >> 3)
      goto LABEL_20;
  }
  if (a3 >= 0x3E8 && *(_DWORD *)(v14 - 4) < a3)
    goto LABEL_20;
  if ((JSC::JSObject::ensureLength(this, v9, (a3 + 1), a4, a5, a6, a7, a8, (__n128)a9) & 1) == 0)
  {
    JSC::throwOutOfMemoryError(a2, &v42);
    return 0;
  }
  v15 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v15 - 4) <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3B8ACLL);
  }
  *(_QWORD *)(v15 + 8 * v11) = a4;
  return 1;
}

JSC::Butterfly *JSC::JSObject::ensureArrayStorageSlow(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  char v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  JSC::JSObject *v19;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  JSC::JSObject *v28;
  uint64_t v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::JSObject *v33;
  uint64_t v34;
  JSC::JSObject *v35;
  uint64_t v36;
  uint64_t v37;
  JSC::JSObject *v38;
  uint64_t v39;
  JSC::JSObject *v40;
  uint64_t v41;

  if (*(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 < 0xB)
    return 0;
  v11 = *((_BYTE *)this + 4);
  if ((v11 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v11 = *((_BYTE *)this + 4);
  }
  v12 = v11 & 0xF;
  if (v12 >= 2)
  {
    switch(v12)
    {
      case 3u:
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
          goto LABEL_64;
        v37 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v38 = this;
        while (2)
        {
          v39 = *(_QWORD *)(v37 + 40);
          if (v39 && *(_BYTE *)(*(_QWORD *)(v39 + 2048) + 4) == 2)
            goto LABEL_64;
          v40 = *(JSC::JSObject **)(v37 + 48);
          if (!v40)
            v40 = (JSC::JSObject *)*((_QWORD *)v38 + 2);
          if (v40 != (JSC::JSObject *)2)
          {
            v37 = 16 * (*(_DWORD *)v40 & 0xFFFFFFFE);
            v38 = v40;
            if ((*(_BYTE *)(v37 + 8) & 0x20) != 0)
              goto LABEL_64;
            continue;
          }
          break;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
        {
LABEL_64:
          v41 = 9;
          return (JSC::Butterfly *)JSC::JSObject::convertUndecidedToArrayStorage((unint64_t)this, (uint64_t)a2, v41, a4, a5, a6, a7, a8);
        }
        v41 = 8;
        return (JSC::Butterfly *)JSC::JSObject::convertUndecidedToArrayStorage((unint64_t)this, (uint64_t)a2, v41, a4, a5, a6, a7, a8);
      case 4u:
      case 5u:
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
          goto LABEL_53;
        v32 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v33 = this;
        while (2)
        {
          v34 = *(_QWORD *)(v32 + 40);
          if (v34 && *(_BYTE *)(*(_QWORD *)(v34 + 2048) + 4) == 2)
            goto LABEL_53;
          v35 = *(JSC::JSObject **)(v32 + 48);
          if (!v35)
            v35 = (JSC::JSObject *)*((_QWORD *)v33 + 2);
          if (v35 != (JSC::JSObject *)2)
          {
            v32 = 16 * (*(_DWORD *)v35 & 0xFFFFFFFE);
            v33 = v35;
            if ((*(_BYTE *)(v32 + 8) & 0x20) != 0)
              goto LABEL_53;
            continue;
          }
          break;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
        {
LABEL_53:
          v36 = 9;
          return (JSC::Butterfly *)JSC::JSObject::convertInt32ToArrayStorage((unint64_t)this, (uint64_t)a2, v36, a4, a5, a6, a7, a8);
        }
        v36 = 8;
        return (JSC::Butterfly *)JSC::JSObject::convertInt32ToArrayStorage((unint64_t)this, (uint64_t)a2, v36, a4, a5, a6, a7, a8);
      case 6u:
      case 7u:
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
          goto LABEL_42;
        v27 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v28 = this;
        while (2)
        {
          v29 = *(_QWORD *)(v27 + 40);
          if (v29 && *(_BYTE *)(*(_QWORD *)(v29 + 2048) + 4) == 2)
            goto LABEL_42;
          v30 = *(JSC::JSObject **)(v27 + 48);
          if (!v30)
            v30 = (JSC::JSObject *)*((_QWORD *)v28 + 2);
          if (v30 != (JSC::JSObject *)2)
          {
            v27 = 16 * (*(_DWORD *)v30 & 0xFFFFFFFE);
            v28 = v30;
            if ((*(_BYTE *)(v27 + 8) & 0x20) != 0)
              goto LABEL_42;
            continue;
          }
          break;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
        {
LABEL_42:
          v31 = 9;
          return (JSC::Butterfly *)JSC::JSObject::convertDoubleToArrayStorage((unint64_t)this, (uint64_t)a2, v31, a4, a5, a6, a7, a8);
        }
        v31 = 8;
        return (JSC::Butterfly *)JSC::JSObject::convertDoubleToArrayStorage((unint64_t)this, (uint64_t)a2, v31, a4, a5, a6, a7, a8);
      case 8u:
      case 9u:
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
          goto LABEL_27;
        v18 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v19 = this;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A3BDE0);
    }
    while (1)
    {
      v20 = *(_QWORD *)(v18 + 40);
      if (v20 && *(_BYTE *)(*(_QWORD *)(v20 + 2048) + 4) == 2)
        goto LABEL_27;
      v21 = *(JSC::JSObject **)(v18 + 48);
      if (!v21)
        v21 = (JSC::JSObject *)*((_QWORD *)v19 + 2);
      if (v21 == (JSC::JSObject *)2)
        break;
      v18 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
      v19 = v21;
      if ((*(_BYTE *)(v18 + 8) & 0x20) != 0)
        goto LABEL_27;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
    {
LABEL_27:
      v22 = 9;
      return (JSC::Butterfly *)JSC::JSObject::convertContiguousToArrayStorage((unint64_t)this, (uint64_t)a2, v22, a4, a5, a6, a7, a8);
    }
    v22 = 8;
    return (JSC::Butterfly *)JSC::JSObject::convertContiguousToArrayStorage((unint64_t)this, (uint64_t)a2, v22, a4, a5, a6, a7, a8);
  }
  else
  {
    if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x10) == 0
      && (*(_WORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0xC) & 0x100) == 0)
    {
      v13 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
      if (v13 == 65534)
        goto LABEL_11;
      if (v13 == 0xFFFF)
        v13 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
      if (v13 < 64)
      {
LABEL_11:
        v14 = 0;
        v15 = 64;
      }
      else
      {
        if ((v13 - 63) >= 5)
        {
          v23 = (v13 - 64) | ((v13 - 64) >> 1) | (((v13 - 64) | ((v13 - 64) >> 1)) >> 2);
          v24 = v23 | (v23 >> 4) | ((v23 | (v23 >> 4)) >> 8);
          v25 = v24 | HIWORD(v24);
          v14 = v25 + 1;
          v26 = 8 * v14;
          if (v25 > 0x3E4)
          {
            v15 = v26 + 56;
            return JSC::JSObject::createArrayStorage((JSC::Butterfly **)this, a2, 0, (unint64_t)(v15 - 8 * v14 + 0x7FFFFFFE8) >> 3, a9);
          }
          v17 = v26 + 32;
        }
        else
        {
          v17 = 64;
          v14 = 4;
        }
        v15 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v17 + 39) >> 2) & 0x7FFFFFFFCLL));
      }
      return JSC::JSObject::createArrayStorage((JSC::Butterfly **)this, a2, 0, (unint64_t)(v15 - 8 * v14 + 0x7FFFFFFE8) >> 3, a9);
    }
    return JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

unint64_t JSC::JSObject::allocateSparseIndexMap(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  char *v11;
  unint64_t v12;

  result = JSC::SparseArrayValueMap::create(a2, a2, a3, a4, a5, a6, a7, a8);
  **((_QWORD **)this + 1) = result;
  if (this && result && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    v11 = (char *)a2 + 192;
    v12 = result;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v11, (unint64_t)this);
    return v12;
  }
  return result;
}

BOOL JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t Slow;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  double v38;
  _BOOL8 v39;
  _OWORD *i;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  JSC::VM *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;

  v9 = *((_QWORD *)a2 + 7);
  v77 = v9;
  if ((*((_BYTE *)this + 4) & 0x10) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3C29CLL);
  }
  v11 = a3;
  if (a3 >> 28)
    goto LABEL_89;
  v13 = *((_QWORD *)this + 1);
  if (a3 >> 5 >= 0xC35)
  {
    v49 = *(unsigned int *)(v13 - 8);
    if ((_DWORD)v49)
    {
      v50 = 0;
      v51 = v49 - 1;
      do
      {
        a9.n128_u64[0] = *(_QWORD *)(v13 + 8 * v51);
        ++v50;
      }
      while ((unint64_t)v51--);
    }
    else
    {
      v50 = 0;
    }
    if (v50 < a3 >> 3)
      goto LABEL_89;
  }
  v14 = *(unsigned int *)(v13 - 4);
  if (a3 >= 0x3E8 && v14 < a3)
  {
LABEL_89:
    JSC::JSObject::ensureArrayStorageSlow(this, (JSC::VM *)v9, a3, a4, a5, a6, a7, a8, a9);
    v64 = JSC::SparseArrayValueMap::create((JSC::SparseArrayValueMap *)v9, v57, v58, v59, v60, v61, v62, v63);
    v65 = (unsigned __int8 *)v64;
    **((_QWORD **)this + 1) = v64;
    if (this && v64 && *(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)this);
    v39 = JSC::SparseArrayValueMap::putEntry(v65, (unint64_t)a2, (unsigned int *)this, v11, a4, 0);
    if (!*(_DWORD *)(v9 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v66, v67, v68, v69, v70, v71, v72))
    {
      *(_DWORD *)(*((_QWORD *)this + 1) - 8) = v11 + 1;
      return v39;
    }
    return 0;
  }
  v76 = a3 + 1;
  if (v14 <= a3)
  {
    v15 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
    if (v15 == 65534)
      goto LABEL_11;
    if (v15 == 0xFFFF)
      v15 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    if (v15 < 64)
    {
LABEL_11:
      v16 = 0;
    }
    else if ((v15 - 63) >= 5)
    {
      v45 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
      v46 = v45 | (v45 >> 4) | ((v45 | (v45 >> 4)) >> 8);
      v16 = (v46 | HIWORD(v46)) + 1;
    }
    else
    {
      v16 = 4;
    }
    v78 = v9;
    v79 = 0;
    v17 = 8 * v16 + 8;
    v18 = v14 + v16;
    v19 = 8 * v18;
    v20 = 8 * v18 + 8;
    if (v18 > 9)
    {
      if (v18 > 0x3EB)
        v21 = 8 * v18 + 8;
      else
        v21 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v19 + 23) >> 2) & 0x7FFFFFFFCLL));
    }
    else
    {
      v21 = (v19 + 23) & 0x1FFFFFFFF0;
    }
    v22 = (unint64_t)(v21 - v17) >> 3;
    if (v22 > a3)
    {
      v36 = 0;
      goto LABEL_34;
    }
    v23 = v16;
    v24 = 2 * v76;
    if ((2 * v76) >= 0x10000000)
      v24 = 0x10000000;
    if (v24 <= 3)
      v24 = 3;
    v25 = v17 + 8 * v24;
    if (v25 > 0x50)
    {
      if (v25 <= 0x1F60)
        v25 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v25 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v25 = (v25 + 15) & 0x3FFFFFFFF0;
    }
    v26 = v25 - v17;
    v22 = v26 >> 3;
    v27 = v13 - 8 * v23;
    v28 = (_OWORD *)(v27 - 8);
    v29 = (v26 & 0x7FFFFFFF8) + v17;
    v30 = v9 + 6648;
    if ((_DWORD)v23 || *(_BYTE *)(v9 + 755) || (v28 & 8) == 0)
    {
      if (v29 <= 0x1F60 && (v31 = *(_QWORD *)(v9 + (((v29 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
      {
        v32 = *(unsigned int *)(v31 + 60);
        Slow = *(_QWORD *)(v31 + 24);
        if (Slow >= *(_QWORD *)(v31 + 32))
        {
          Slow = *(_QWORD *)(v31 + 40);
          if ((Slow & 1) == 0)
          {
            v48 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v31 + 48);
            *(_QWORD *)(v31 + 32) = Slow + HIDWORD(v48);
            *(_QWORD *)(v31 + 40) = Slow + (int)v48;
            *(_QWORD *)(v31 + 24) = Slow + v32;
            goto LABEL_29;
          }
          v73 = v14;
          v53 = v31;
          v74 = v22;
          v22 = *(unsigned int *)(v31 + 60);
          JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
          v54 = v53;
          v14 = v73;
          v55 = v22;
          LODWORD(v22) = v74;
          Slow = JSC::LocalAllocator::allocateSlowCase(v54, v9 + 192, v55, &v78, 1);
        }
        else
        {
          *(_QWORD *)(v31 + 24) = Slow + v32;
        }
      }
      else
      {
        Slow = JSC::CompleteSubspace::tryAllocateSlow(v30, (JSC *)v9, v29, (uint64_t)&v78, a5, a6, a7, a8);
      }
      if (Slow)
      {
LABEL_29:
        if (v18 > 0x1D)
        {
          for (i = (_OWORD *)Slow; i != (_OWORD *)((v20 & 0x1FFFFFFFE0) + Slow); i += 2)
          {
            v42 = *v28;
            v43 = v28[1];
            v28 += 2;
            *i = v42;
            i[1] = v43;
          }
          while (i != (_OWORD *)(v20 + Slow))
          {
            v44 = *(_QWORD *)v28;
            v28 = (_OWORD *)((char *)v28 + 8);
            *(_QWORD *)i = v44;
            i = (_OWORD *)((char *)i + 8);
          }
        }
        else
        {
          v34 = 0;
          v35 = 1;
          do
          {
            *(_QWORD *)(Slow + 8 * v34) = *((_QWORD *)v28 + v34);
            v34 = v35++;
          }
          while (v20 >> 3 > v34);
        }
        v36 = Slow + 8 * v23 + 8;
        goto LABEL_33;
      }
    }
    else
    {
      v47 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v30, (JSC *)v9, v27 - 8, v29, (uint64_t)&v78, 1, a7, a8);
      if (v47)
      {
        v36 = (uint64_t)(v47 + 8);
LABEL_33:
        v13 = v36;
LABEL_34:
        if ((*((_BYTE *)this + 4) & 0xE) == 6)
        {
          if (v14 < v22)
            memset_pattern16((void *)(v13 + 8 * v14), &memset_pattern_99, 8 * (v22 + ~(_DWORD)v14) + 8);
        }
        else if (v14 < v22)
        {
          bzero((void *)(v13 + 8 * v14), 8 * (v22 + ~(_DWORD)v14) + 8);
        }
        if (v36)
        {
          if (v22 >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x198A3C2F0);
          }
          *(_DWORD *)(v13 - 4) = v22;
          __dmb(0xAu);
          *((_QWORD *)this + 1) = v36;
          if (*(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)this);
        }
        else
        {
          __dmb(0xAu);
          if (v22 >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x198A3C358);
          }
          *(_DWORD *)(v13 - 4) = v22;
        }
        v37 = 1;
        goto LABEL_42;
      }
    }
    v37 = 0;
LABEL_42:
    if (v79)
      JSC::Heap::collectIfNecessaryOrDefer(v78 + 192, 0);
    if (v37)
    {
      v13 = *((_QWORD *)this + 1);
      goto LABEL_46;
    }
    JSC::throwOutOfMemoryError(a2, &v77);
    return 0;
  }
LABEL_46:
  if (*(_DWORD *)(v13 - 8) <= v11)
  {
    *(_DWORD *)(v13 - 8) = v76;
    v13 = *((_QWORD *)this + 1);
  }
  if (*(_DWORD *)(v13 - 4) <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3C2BCLL);
  }
  v38 = (double)(int)a4;
  if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v38 = a4 - 0x2000000000000;
  *(double *)(v13 + 8 * v11) = v38;
  return 1;
}

BOOL JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t SlowCase;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _BOOL8 v38;
  _OWORD *i;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  JSC::VM *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v9 = *((_QWORD *)a2 + 7);
  v78 = v9;
  if ((*((_BYTE *)this + 4) & 0x10) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3C894);
  }
  v11 = a3;
  if (!(a3 >> 28))
  {
    v14 = *((_QWORD *)this + 1);
    if (a3 >> 5 < 0xC35)
      goto LABEL_4;
    v48 = *(unsigned int *)(v14 - 8);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = v48 - 1;
      do
      {
        if (*(_QWORD *)(v14 + 8 * v50))
          ++v49;
      }
      while ((unint64_t)v50--);
    }
    else
    {
      v49 = 0;
    }
    if (v49 >= a3 >> 3)
    {
LABEL_4:
      v15 = *(unsigned int *)(v14 - 4);
      if (a3 < 0x3E8 || v15 >= a3)
      {
        v77 = a3 + 1;
        if (v15 > a3)
        {
LABEL_46:
          if (*(_DWORD *)(v14 - 8) <= v11)
          {
            *(_DWORD *)(v14 - 8) = v77;
            v14 = *((_QWORD *)this + 1);
          }
          if (*(_DWORD *)(v14 - 4) <= v11)
          {
            __break(0xC471u);
            JUMPOUT(0x198A3C8B4);
          }
          *(_QWORD *)(v14 + 8 * v11) = a4;
          v38 = 1;
          if (a4
            && (a4 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)this);
          }
          return v38;
        }
        v16 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
        if (v16 == 65534)
          goto LABEL_11;
        if (v16 == 0xFFFF)
          v16 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
        if (v16 < 64)
        {
LABEL_11:
          v17 = 0;
        }
        else if ((v16 - 63) >= 5)
        {
          v44 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
          v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
          v17 = (v45 | HIWORD(v45)) + 1;
        }
        else
        {
          v17 = 4;
        }
        v79 = v9;
        v80 = 0;
        v18 = 8 * v17 + 8;
        v19 = v15 + v17;
        v20 = 8 * v19;
        v21 = 8 * v19 + 8;
        if (v19 > 9)
        {
          if (v19 > 0x3EB)
            v22 = 8 * v19 + 8;
          else
            v22 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v20 + 23) >> 2) & 0x7FFFFFFFCLL));
        }
        else
        {
          v22 = (v20 + 23) & 0x1FFFFFFFF0;
        }
        v23 = (unint64_t)(v22 - v18) >> 3;
        if (v23 > a3)
        {
          v37 = 0;
          goto LABEL_34;
        }
        v24 = v17;
        v25 = 2 * v77;
        if ((2 * v77) >= 0x10000000)
          v25 = 0x10000000;
        if (v25 <= 3)
          v25 = 3;
        v26 = v18 + 8 * v25;
        if (v26 > 0x50)
        {
          if (v26 <= 0x1F60)
            v26 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((v26 + 15) >> 2) & 0xFFFFFFFFCLL));
        }
        else
        {
          v26 = (v26 + 15) & 0x3FFFFFFFF0;
        }
        v27 = v26 - v18;
        v23 = v27 >> 3;
        v28 = v14 - 8 * v24;
        v29 = (_OWORD *)(v28 - 8);
        v30 = (v27 & 0x7FFFFFFF8) + v18;
        v31 = v9 + 6648;
        if ((_DWORD)v24 || *(_BYTE *)(v9 + 755) || (v29 & 8) == 0)
        {
          if (v30 <= 0x1F60 && (v32 = *(_QWORD *)(v9 + (((v30 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
          {
            v33 = *(unsigned int *)(v32 + 60);
            SlowCase = *(_QWORD *)(v32 + 24);
            if (SlowCase >= *(_QWORD *)(v32 + 32))
            {
              SlowCase = *(_QWORD *)(v32 + 40);
              if ((SlowCase & 1) == 0)
              {
                v47 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v32 + 48);
                *(_QWORD *)(v32 + 32) = SlowCase + HIDWORD(v47);
                *(_QWORD *)(v32 + 40) = SlowCase + (int)v47;
                *(_QWORD *)(v32 + 24) = SlowCase + v33;
                goto LABEL_29;
              }
              v74 = v15;
              v68 = v32;
              v75 = v23;
              v23 = *(unsigned int *)(v32 + 60);
              JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
              v69 = v68;
              v15 = v74;
              v70 = v23;
              LODWORD(v23) = v75;
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v69, v9 + 192, v70, (uint64_t)&v79, 1, v71, v72, v73);
            }
            else
            {
              *(_QWORD *)(v32 + 24) = SlowCase + v33;
            }
          }
          else
          {
            SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v31, (JSC *)v9, v30, (uint64_t)&v79, a5, a6, a7, a8);
          }
          if (SlowCase)
          {
LABEL_29:
            if (v19 > 0x1D)
            {
              for (i = (_OWORD *)SlowCase; i != (_OWORD *)((v21 & 0x1FFFFFFFE0) + SlowCase); i += 2)
              {
                v41 = *v29;
                v42 = v29[1];
                v29 += 2;
                *i = v41;
                i[1] = v42;
              }
              while (i != (_OWORD *)(v21 + SlowCase))
              {
                v43 = *(_QWORD *)v29;
                v29 = (_OWORD *)((char *)v29 + 8);
                *(_QWORD *)i = v43;
                i = (_OWORD *)((char *)i + 8);
              }
            }
            else
            {
              v35 = 0;
              v36 = 1;
              do
              {
                *(_QWORD *)(SlowCase + 8 * v35) = *((_QWORD *)v29 + v35);
                v35 = v36++;
              }
              while (v21 >> 3 > v35);
            }
            v37 = SlowCase + 8 * v24 + 8;
            goto LABEL_33;
          }
        }
        else
        {
          v46 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v31, (JSC *)v9, v28 - 8, v30, (uint64_t)&v79, 1, a7, a8);
          if (v46)
          {
            v37 = (uint64_t)(v46 + 8);
LABEL_33:
            v14 = v37;
LABEL_34:
            if ((*((_BYTE *)this + 4) & 0xE) == 6)
            {
              if (v15 < v23)
                memset_pattern16((void *)(v14 + 8 * v15), &memset_pattern_99, 8 * (v23 + ~(_DWORD)v15) + 8);
            }
            else if (v15 < v23)
            {
              bzero((void *)(v14 + 8 * v15), 8 * (v23 + ~(_DWORD)v15) + 8);
            }
            if (v37)
            {
              if (v23 >= 0x10000001)
              {
                __break(0xC471u);
                JUMPOUT(0x198A3C908);
              }
              *(_DWORD *)(v14 - 4) = v23;
              __dmb(0xAu);
              *((_QWORD *)this + 1) = v37;
              if (*(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
                JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)this);
            }
            else
            {
              __dmb(0xAu);
              if (v23 >= 0x10000001)
              {
                __break(0xC471u);
                JUMPOUT(0x198A3C970);
              }
              *(_DWORD *)(v14 - 4) = v23;
            }
            v38 = 1;
            goto LABEL_42;
          }
        }
        v38 = 0;
LABEL_42:
        if (v80)
          JSC::Heap::collectIfNecessaryOrDefer(v79 + 192, 0);
        if (!v38)
        {
          JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v78);
          return v38;
        }
        v14 = *((_QWORD *)this + 1);
        goto LABEL_46;
      }
    }
  }
  JSC::JSObject::ensureArrayStorageSlow(this, (JSC::VM *)v9, a3, a4, a5, a6, a7, a8, a9);
  v59 = JSC::SparseArrayValueMap::create((JSC::SparseArrayValueMap *)v9, v52, v53, v54, v55, v56, v57, v58);
  v60 = (unsigned __int8 *)v59;
  **((_QWORD **)this + 1) = v59;
  if (this && v59 && *(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath(v9 + 192, (unint64_t)this);
  v38 = JSC::SparseArrayValueMap::putEntry(v60, (unint64_t)a2, (unsigned int *)this, v11, a4, 0);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v61, v62, v63, v64, v65, v66, v67))
  {
    return 0;
  }
  *(_DWORD *)(*((_QWORD *)this + 1) - 8) = v11 + 1;
  return v38;
}

void JSC::JSFinalObject::visitChildren(JSC::JSFinalObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  JSC::JSFinalObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  JSC::JSFinalObject *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  int v77;
  unint64_t v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v91;
  unsigned __int8 *v93;
  int v94;
  int v95;
  JSC::JSFinalObject *v96;
  JSC::JSFinalObject *v97;
  JSC::JSFinalObject *v98;
  JSC::JSFinalObject *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unsigned int **v113;
  int v114;
  unsigned int **v115;
  unint64_t *v116;
  unsigned int *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  unsigned __int8 *v129;
  uint64_t v131;
  int v132;
  unint64_t v133;
  unsigned int **v135;
  int v136;
  unsigned int **v137;
  unint64_t *v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 *v146;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  unsigned __int8 *v151;
  uint64_t v153;
  int v154;
  unint64_t v155;
  unsigned int **v157;
  int v158;
  unsigned int **v159;
  unint64_t *v160;
  unsigned int *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  JSC::JSFinalObject *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  unsigned __int8 *v175;
  uint64_t v177;
  int v178;
  unint64_t v179;
  unsigned int **v181;
  int v182;
  unsigned int **v183;
  unint64_t *v184;
  unsigned int *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  JSC::JSFinalObject *v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  unsigned __int8 *v198;
  uint64_t v200;
  int v201;
  unint64_t v202;
  unsigned int **v204;
  int v205;
  unsigned int **v206;
  unint64_t *v207;
  unsigned int *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 *v215;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  uint64_t v223;
  int v224;
  uint64_t v225;
  JSC::JSFinalObject *v226;
  JSC::JSFinalObject *v227;
  JSC::JSFinalObject *v228;
  JSC::JSFinalObject *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD v237[2];

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    a3 = 0;
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  if (!*((_BYTE *)a2 + 185))
  {
    v12 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 1) != 0)
      goto LABEL_210;
    v13 = 16 * (v12 & 0xFFFFFFFE);
    v14 = *(unsigned __int16 *)(v13 + 0x18);
    if (v14 == 65534)
    {
      v14 = -1;
    }
    else if (v14 == 0xFFFF)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(16 * (v12 & 0xFFFFFFFE) + 0x40) + 84);
    }
    v15 = *(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0x1F;
    if ((v15 - 10) <= 3)
    {
      v93 = (unsigned __int8 *)this + 4;
      while (1)
      {
        v94 = *v93;
        if ((v94 & 0x40) != 0)
          break;
        v95 = __ldaxr(v93);
        if (v95 == v94)
        {
          if (!__stxr(v94 | 0x40, v93))
            goto LABEL_200;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v93);
LABEL_200:
      v16 = this;
    }
    else
    {
      v16 = 0;
    }
    v17 = *((_QWORD *)this + 1);
    if (!v17)
      goto LABEL_15;
    if (*(_DWORD *)this != v12)
      goto LABEL_205;
    v22 = *(unsigned __int16 *)(16 * (v12 & 0xFFFFFFFE) + 0x18);
    if (v22 == 65534)
    {
      v22 = -1;
    }
    else if (v22 == 0xFFFF)
    {
      v22 = *(_DWORD *)(*(_QWORD *)(16 * (v12 & 0xFFFFFFFE) + 0x40) + 84);
    }
    if (v22 != v14)
    {
LABEL_205:
      v13 = 0;
      goto LABEL_15;
    }
    if ((*(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0x10) == 0)
    {
      if ((*(_BYTE *)(16 * (v12 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
        v23 = *(unsigned int *)(v17 + 8);
      else
        v23 = 0;
      v24 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
      v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
      v26 = v25 | HIWORD(v25);
      if ((v14 - 63) >= 5)
        v27 = v26 + 1;
      else
        v27 = 4;
      if (v14 >= 64)
        v28 = (v14 - 63);
      else
        v28 = 0;
      if (v14 >= 64)
        v29 = v27;
      else
        v29 = 0;
      v30 = v17 - 8 - 8 * v29 - 8 * v23;
      if ((v30 & 8) != 0)
      {
        if ((*(_BYTE *)(v30 - 79) & 1) == 0)
        {
          v89 = (unsigned __int8 *)(v30 - 79);
          while (!__ldaxr(v89))
          {
            if (!__stlxr(1u, v89))
            {
              v32 = (v30 - 112) | 1;
LABEL_51:
              if ((v32 & 1) == 0)
              {
                v37 = (unsigned __int16)(*(_WORD *)(v32 + 28))++ + 1;
                if ((v37 & 0x10000) == 0)
                  goto LABEL_53;
                v231 = v28;
                v99 = v16;
                v100 = *(_QWORD *)(*(_QWORD *)v32 + 24);
                v101 = (unsigned __int8 *)(v100 + 56);
                if (__ldaxr((unsigned __int8 *)(v100 + 56)))
                {
                  __clrex();
                  goto LABEL_175;
                }
                if (__stxr(1u, v101))
LABEL_175:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v100 + 56);
                v103 = *(_QWORD *)(v100 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)v32 + 12) >> 5);
                *(_DWORD *)(v103 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)v32 + 12);
                v104 = __ldxr(v101);
                if (v104 == 1)
                {
                  v16 = v99;
                  v28 = v231;
                  if (!__stlxr(0, v101))
                  {
LABEL_53:
                    ++*((_QWORD *)a2 + 9);
                    v38 = 16 * **(unsigned int **)v32;
LABEL_54:
                    *(int64x2_t *)((char *)a2 + 136) = vaddq_s64(*(int64x2_t *)((char *)a2 + 136), vdupq_n_s64(v38));
                    goto LABEL_55;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v100 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                v28 = v231;
                v16 = v99;
                goto LABEL_53;
              }
              ++*((_QWORD *)a2 + 9);
              v38 = *(_QWORD *)(v32 + 23);
              goto LABEL_54;
            }
          }
          __clrex();
        }
      }
      else
      {
        v31 = *((_DWORD *)a2 + 33);
        v32 = v30 & 0xFFFFFFFFFFFFC000;
        if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != v31)
        {
          v96 = v16;
          v230 = v28;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000), v31, (uint64_t)a3, a4, a5, a6, a7, a8);
          v28 = v230;
          v16 = v96;
        }
        v33 = 1 << (v30 >> 4);
        v34 = (unint64_t *)(v32 + 8 * ((v30 >> 10) & 0xF) + 40);
        while (1)
        {
          v35 = *v34;
          if ((*v34 & v33) != 0)
            break;
          v36 = __ldxr(v34);
          if (v36 == v35)
          {
            if (!__stxr(v35 | v33, v34))
              goto LABEL_51;
          }
          else
          {
            __clrex();
          }
        }
      }
LABEL_55:
      if ((_DWORD)v28)
      {
        v39 = 0;
        v40 = v17 - 8 - 8 * v28;
        do
        {
          v155 = *(_QWORD *)(v40 + 8 * v39);
          if ((v155 & 0xFFFE000000000002) == 0 && v155 != 0)
          {
            if ((v155 & 8) != 0)
            {
              if ((*(_BYTE *)(v155 - 79) & 1) == 0)
              {
                v168 = (unsigned __int8 *)(v155 - 79);
                do
                {
                  if (__ldaxr(v168))
                  {
                    __clrex();
                    goto LABEL_286;
                  }
                }
                while (__stlxr(1u, v168));
                *(_BYTE *)(v155 + 7) = 2;
                ++*((_QWORD *)a2 + 9);
                *((_QWORD *)a2 + 17) += *(_QWORD *)(v155 - 88);
                v166 = *((_QWORD *)a2 + 3);
                if (v166 == 510)
                {
LABEL_308:
                  v170 = v16;
                  v171 = v28;
                  v172 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                  v28 = v171;
                  v16 = v170;
                  v166 = 0;
                  *v172 = 0;
                  v172[1] = 0;
                  ++*((_QWORD *)a2 + 4);
                  v173 = *((_QWORD *)a2 + 1);
                  v174 = (_QWORD *)((char *)a2 + 16);
                  if (v173)
                    v174 = (_QWORD *)*((_QWORD *)a2 + 1);
                  *v174 = v172;
                  *((_QWORD *)a2 + 1) = v172;
                  *v172 = 0;
                  v172[1] = v173;
                }
LABEL_302:
                v167 = *((_QWORD *)a2 + 1) + 8 * v166;
                *((_QWORD *)a2 + 3) = v166 + 1;
                *(_QWORD *)(v167 + 16) = v155;
              }
            }
            else
            {
              v157 = (unsigned int **)(v155 & 0xFFFFFFFFFFFFC000);
              v158 = *((_DWORD *)a2 + 33);
              if (*(_DWORD *)(v155 & 0xFFFFFFFFFFFFC000 | 0x20) != v158)
              {
                v226 = v16;
                v234 = v28;
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v155 & 0xFFFFFFFFFFFFC000), v158, (uint64_t)a3, a4, a5, a6, a7, a8);
                v16 = v226;
                v28 = v234;
              }
              v159 = &v157[(v155 >> 10) & 0xF];
              v161 = v159[5];
              v160 = (unint64_t *)(v159 + 5);
              v162 = 1 << (v155 >> 4);
              if (((unint64_t)v161 & v162) == 0)
              {
                do
                {
                  while (1)
                  {
                    v163 = *v160;
                    if ((*v160 & v162) != 0)
                      goto LABEL_286;
                    v164 = __ldxr(v160);
                    if (v164 == v163)
                      break;
                    __clrex();
                  }
                }
                while (__stxr(v163 | v162, v160));
                *(_BYTE *)(v155 + 7) = 2;
                v165 = (unsigned __int16)(*(_WORD *)((v155 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
                if ((v165 & 0x10000) == 0)
                {
LABEL_301:
                  ++*((_QWORD *)a2 + 9);
                  *((_QWORD *)a2 + 17) += 16 * **v157;
                  v166 = *((_QWORD *)a2 + 3);
                  if (v166 == 510)
                    goto LABEL_308;
                  goto LABEL_302;
                }
                v227 = v16;
                v235 = v28;
                v225 = *((_QWORD *)*v157 + 3);
                v175 = (unsigned __int8 *)(v225 + 56);
                if (__ldaxr((unsigned __int8 *)(v225 + 56)))
                {
                  __clrex();
                  goto LABEL_313;
                }
                if (__stxr(1u, v175))
LABEL_313:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v175);
                v177 = *(_QWORD *)(v225 + 32) + 40 * ((*v157)[3] >> 5);
                *(_DWORD *)(v177 + 36) |= 1 << (*v157)[3];
                v178 = __ldxr(v175);
                if (v178 == 1)
                {
                  v16 = v227;
                  v28 = v235;
                  if (!__stlxr(0, v175))
                    goto LABEL_301;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v175, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                v16 = v227;
                v28 = v235;
                goto LABEL_301;
              }
            }
          }
LABEL_286:
          ++v39;
        }
        while (v39 != v28);
      }
LABEL_85:
      if ((v15 - 8) < 2)
      {
        v83 = *(unsigned int *)(v17 - 8);
        if ((_DWORD)v83)
        {
          v84 = 0;
          while (1)
          {
            v179 = *(_QWORD *)(v17 + 8 * v84);
            if ((v179 & 0xFFFE000000000002) == 0 && v179 != 0)
            {
              if ((v179 & 8) != 0)
              {
                if ((*(_BYTE *)(v179 - 79) & 1) == 0)
                {
                  v192 = (unsigned __int8 *)(v179 - 79);
                  do
                  {
                    if (__ldaxr(v192))
                    {
                      __clrex();
                      goto LABEL_322;
                    }
                  }
                  while (__stlxr(1u, v192));
                  *(_BYTE *)(v179 + 7) = 2;
                  ++*((_QWORD *)a2 + 9);
                  *((_QWORD *)a2 + 17) += *(_QWORD *)(v179 - 88);
                  v190 = *((_QWORD *)a2 + 3);
                  if (v190 == 510)
                  {
LABEL_344:
                    v194 = v16;
                    v195 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                    v16 = v194;
                    v190 = 0;
                    *v195 = 0;
                    v195[1] = 0;
                    ++*((_QWORD *)a2 + 4);
                    v196 = *((_QWORD *)a2 + 1);
                    if (v196)
                      v197 = (_QWORD *)*((_QWORD *)a2 + 1);
                    else
                      v197 = (_QWORD *)((char *)a2 + 16);
                    *v197 = v195;
                    *((_QWORD *)a2 + 1) = v195;
                    *v195 = 0;
                    v195[1] = v196;
                  }
LABEL_338:
                  v191 = *((_QWORD *)a2 + 1) + 8 * v190;
                  *((_QWORD *)a2 + 3) = v190 + 1;
                  *(_QWORD *)(v191 + 16) = v179;
                }
              }
              else
              {
                v181 = (unsigned int **)(v179 & 0xFFFFFFFFFFFFC000);
                v182 = *((_DWORD *)a2 + 33);
                if (*(_DWORD *)(v179 & 0xFFFFFFFFFFFFC000 | 0x20) != v182)
                {
                  v228 = v16;
                  JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v179 & 0xFFFFFFFFFFFFC000), v182, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v16 = v228;
                }
                v183 = &v181[(v179 >> 10) & 0xF];
                v185 = v183[5];
                v184 = (unint64_t *)(v183 + 5);
                v186 = 1 << (v179 >> 4);
                if (((unint64_t)v185 & v186) == 0)
                {
                  do
                  {
                    while (1)
                    {
                      v187 = *v184;
                      if ((*v184 & v186) != 0)
                        goto LABEL_322;
                      v188 = __ldxr(v184);
                      if (v188 == v187)
                        break;
                      __clrex();
                    }
                  }
                  while (__stxr(v187 | v186, v184));
                  *(_BYTE *)(v179 + 7) = 2;
                  v189 = (unsigned __int16)(*(_WORD *)((v179 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
                  if ((v189 & 0x10000) == 0)
                  {
LABEL_337:
                    ++*((_QWORD *)a2 + 9);
                    *((_QWORD *)a2 + 17) += 16 * **v181;
                    v190 = *((_QWORD *)a2 + 3);
                    if (v190 == 510)
                      goto LABEL_344;
                    goto LABEL_338;
                  }
                  v229 = v16;
                  v236 = *((_QWORD *)*v181 + 3);
                  v198 = (unsigned __int8 *)(v236 + 56);
                  if (__ldaxr((unsigned __int8 *)(v236 + 56)))
                  {
                    __clrex();
                    goto LABEL_350;
                  }
                  if (__stxr(1u, v198))
LABEL_350:
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v198);
                  v200 = *(_QWORD *)(v236 + 32) + 40 * ((*v181)[3] >> 5);
                  *(_DWORD *)(v200 + 36) |= 1 << (*v181)[3];
                  v201 = __ldxr(v198);
                  if (v201 == 1)
                  {
                    v16 = v229;
                    if (!__stlxr(0, v198))
                      goto LABEL_337;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v198, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v16 = v229;
                  goto LABEL_337;
                }
              }
            }
LABEL_322:
            if (++v84 == v83)
              goto LABEL_15;
          }
        }
        goto LABEL_15;
      }
      if ((v15 - 10) < 4)
      {
        v60 = v16;
        v61 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v61)
        {
          v62 = (unint64_t *)(v17 + 16);
          do
          {
            v64 = *v62++;
            v63 = v64;
            if ((v64 & 0xFFFE000000000002) != 0 || v63 == 0)
              goto LABEL_98;
            if ((v63 & 8) != 0)
            {
              if ((*(_BYTE *)(v63 - 79) & 1) != 0)
                goto LABEL_98;
            }
            else
            {
              v66 = *((_DWORD *)a2 + 33);
              if (*(_DWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 0x20) != v66)
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v63 & 0xFFFFFFFFFFFFC000), v66, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (((*(_QWORD *)((v63 & 0xFFFFFFFFFFFFC000) + 8 * ((v63 >> 10) & 0xF) + 0x28) >> (v63 >> 4)) & 1) != 0)
                goto LABEL_98;
            }
            JSC::SlotVisitor::appendHiddenSlow(a2, v63, 0, a4, a5, a6, a7, a8);
LABEL_98:
            --v61;
          }
          while (v61);
        }
        v67 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
        {
          if ((v67 & 8) != 0)
          {
            if ((*(_BYTE *)(v67 - 79) & 1) != 0)
              goto LABEL_104;
          }
          else
          {
            v68 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 0x20) != v68)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v67 & 0xFFFFFFFFFFFFC000), v68, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v67 & 0xFFFFFFFFFFFFC000) + 8 * ((v67 >> 10) & 0xF) + 0x28) >> (v67 >> 4)) & 1) != 0)
            {
LABEL_104:
              v16 = v60;
              if (!*((_QWORD *)a2 + 21))
                goto LABEL_15;
            }
          }
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v67, 0, a4, a5, a6, a7, a8);
          v16 = v60;
          goto LABEL_15;
        }
        v16 = v60;
      }
LABEL_15:
      if (v16)
      {
        v80 = (unsigned __int8 *)v16 + 4;
        while (1)
        {
          v81 = *v80;
          if ((v81 & 0xC0) != 0x40)
            break;
          v82 = __ldxr(v80);
          if (v82 == v81)
          {
            if (!__stxr(v81 & 0xBF, v80))
              goto LABEL_16;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v80, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_16:
      if (v13)
        goto LABEL_17;
LABEL_210:
      v237[0] = this;
      v237[1] = "JSObject::visitButterfly";
      JSC::SlotVisitor::didRace((uint64_t)a2, (uint64_t)v237, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    v58 = v17 - 16;
    if ((((_DWORD)v17 - 16) & 8) != 0)
    {
      if ((*(_BYTE *)(v17 - 95) & 1) != 0 && !*((_QWORD *)a2 + 21))
        goto LABEL_85;
    }
    else
    {
      v59 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v58 & 0xFFFFFFFFFFFFC000 | 0x20) != v59)
      {
        v98 = v16;
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v58 & 0xFFFFFFFFFFFFC000), v59, (uint64_t)a3, a4, a5, a6, a7, a8);
        v16 = v98;
      }
      if (((*(_QWORD *)((v58 & 0xFFFFFFFFFFFFC000) + 8 * ((v58 >> 10) & 0xF) + 0x28) >> (v58 >> 4)) & 1) != 0
        && !*((_QWORD *)a2 + 21))
      {
        goto LABEL_85;
      }
    }
    v97 = v16;
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v17 - 16, 0, a4, a5, a6, a7, a8);
    v16 = v97;
    goto LABEL_85;
  }
  v41 = *((_QWORD *)this + 1);
  v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v42 = *(unsigned __int16 *)(v13 + 0x18);
  if (v42 == 65534)
  {
    v42 = -1;
    if (!v41)
      goto LABEL_114;
  }
  else
  {
    if (v42 == 0xFFFF)
      v42 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    if (!v41)
      goto LABEL_114;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x10) != 0)
  {
    v69 = v41 - 16;
    if ((((_DWORD)v41 - 16) & 8) != 0)
    {
      if ((*(_BYTE *)(v41 - 95) & 1) != 0)
        goto LABEL_113;
    }
    else
    {
      v70 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v69 & 0xFFFFFFFFFFFFC000 | 0x20) != v70)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v69 & 0xFFFFFFFFFFFFC000), v70, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v69 & 0xFFFFFFFFFFFFC000) + 8 * ((v69 >> 10) & 0xF) + 0x28) >> (v69 >> 4)) & 1) != 0)
      {
LABEL_113:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_114;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v41 - 16, 0, a4, a5, a6, a7, a8);
    goto LABEL_114;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
    v43 = *(unsigned int *)(v41 + 8);
  else
    v43 = 0;
  if (v42 >= 64)
  {
    v44 = v42 - 63;
    if ((v42 - 63) >= 5)
    {
      v87 = (v42 - 64) | ((v42 - 64) >> 1) | (((v42 - 64) | ((v42 - 64) >> 1)) >> 2);
      v88 = v87 | (v87 >> 4) | ((v87 | (v87 >> 4)) >> 8);
      v45 = (v88 | HIWORD(v88)) + 1;
    }
    else
    {
      v45 = 4;
    }
  }
  else
  {
    v44 = 0;
    v45 = 0;
  }
  v46 = v41 - 8 - 8 * v45 - 8 * v43;
  if ((v46 & 8) != 0)
  {
    if ((*(_BYTE *)(v46 - 79) & 1) == 0)
    {
      v91 = (unsigned __int8 *)(v46 - 79);
      while (!__ldaxr(v91))
      {
        if (!__stlxr(1u, v91))
        {
          v48 = (v46 - 112) | 1;
LABEL_74:
          if ((v48 & 1) == 0)
          {
            v53 = (unsigned __int16)(*(_WORD *)(v48 + 28))++ + 1;
            if ((v53 & 0x10000) == 0)
              goto LABEL_76;
            v105 = v48;
            v106 = *(_QWORD *)(*(_QWORD *)v48 + 24);
            v107 = (unsigned __int8 *)(v106 + 56);
            if (__ldaxr((unsigned __int8 *)(v106 + 56)))
            {
              __clrex();
              goto LABEL_183;
            }
            if (__stxr(1u, v107))
LABEL_183:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v106 + 56);
            v109 = *(_QWORD *)(v106 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)v105 + 12) >> 5);
            *(_DWORD *)(v109 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)v105 + 12);
            v110 = __ldxr(v107);
            if (v110 == 1)
            {
              v48 = v105;
              if (!__stlxr(0, v107))
              {
LABEL_76:
                ++*((_QWORD *)a2 + 9);
                v54 = 16 * **(unsigned int **)v48;
LABEL_77:
                *(int64x2_t *)((char *)a2 + 136) = vaddq_s64(*(int64x2_t *)((char *)a2 + 136), vdupq_n_s64(v54));
                goto LABEL_78;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v106 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            v48 = v105;
            goto LABEL_76;
          }
          ++*((_QWORD *)a2 + 9);
          v54 = *(_QWORD *)(v48 + 23);
          goto LABEL_77;
        }
      }
      __clrex();
    }
  }
  else
  {
    v47 = *((_DWORD *)a2 + 33);
    v48 = v46 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != v47)
    {
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000), v47, (uint64_t)a3, a4, a5, a6, a7, a8);
      v48 = v46 & 0xFFFFFFFFFFFFC000;
    }
    v49 = 1 << (v46 >> 4);
    v50 = (unint64_t *)(v48 + 8 * ((v46 >> 10) & 0xF) + 40);
    while (1)
    {
      v51 = *v50;
      if ((*v50 & v49) != 0)
        break;
      v52 = __ldxr(v50);
      if (v52 == v51)
      {
        if (!__stxr(v51 | v49, v50))
          goto LABEL_74;
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_78:
  if (v44)
  {
    v55 = 0;
    v56 = v44;
    v57 = v41 - 8 - 8 * v44;
    do
    {
      v111 = *(_QWORD *)(v57 + 8 * v55);
      if ((v111 & 0xFFFE000000000002) == 0 && v111 != 0)
      {
        if ((v111 & 8) != 0)
        {
          if ((*(_BYTE *)(v111 - 79) & 1) == 0)
          {
            v124 = (unsigned __int8 *)(v111 - 79);
            do
            {
              if (__ldaxr(v124))
              {
                __clrex();
                goto LABEL_212;
              }
            }
            while (__stlxr(1u, v124));
            *(_BYTE *)(v111 + 7) = 2;
            ++*((_QWORD *)a2 + 9);
            *((_QWORD *)a2 + 17) += *(_QWORD *)(v111 - 88);
            v122 = *((_QWORD *)a2 + 3);
            if (v122 == 510)
            {
LABEL_234:
              v126 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
              v122 = 0;
              *v126 = 0;
              v126[1] = 0;
              ++*((_QWORD *)a2 + 4);
              v127 = *((_QWORD *)a2 + 1);
              if (v127)
                v128 = (_QWORD *)*((_QWORD *)a2 + 1);
              else
                v128 = (_QWORD *)((char *)a2 + 16);
              *v128 = v126;
              *((_QWORD *)a2 + 1) = v126;
              *v126 = 0;
              v126[1] = v127;
            }
LABEL_228:
            v123 = *((_QWORD *)a2 + 1) + 8 * v122;
            *((_QWORD *)a2 + 3) = v122 + 1;
            *(_QWORD *)(v123 + 16) = v111;
          }
        }
        else
        {
          v113 = (unsigned int **)(v111 & 0xFFFFFFFFFFFFC000);
          v114 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v111 & 0xFFFFFFFFFFFFC000 | 0x20) != v114)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v111 & 0xFFFFFFFFFFFFC000), v114, (uint64_t)a3, a4, a5, a6, a7, a8);
          v115 = &v113[(v111 >> 10) & 0xF];
          v117 = v115[5];
          v116 = (unint64_t *)(v115 + 5);
          v118 = 1 << (v111 >> 4);
          if (((unint64_t)v117 & v118) == 0)
          {
            do
            {
              while (1)
              {
                v119 = *v116;
                if ((*v116 & v118) != 0)
                  goto LABEL_212;
                v120 = __ldxr(v116);
                if (v120 == v119)
                  break;
                __clrex();
              }
            }
            while (__stxr(v119 | v118, v116));
            *(_BYTE *)(v111 + 7) = 2;
            v121 = (unsigned __int16)(*(_WORD *)((v111 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
            if ((v121 & 0x10000) == 0)
            {
LABEL_227:
              ++*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 17) += 16 * **v113;
              v122 = *((_QWORD *)a2 + 3);
              if (v122 == 510)
                goto LABEL_234;
              goto LABEL_228;
            }
            v232 = *((_QWORD *)*v113 + 3);
            v129 = (unsigned __int8 *)(v232 + 56);
            if (__ldaxr((unsigned __int8 *)(v232 + 56)))
            {
              __clrex();
              goto LABEL_240;
            }
            if (__stxr(1u, v129))
LABEL_240:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v129);
            v131 = *(_QWORD *)(v232 + 32) + 40 * ((*v113)[3] >> 5);
            *(_DWORD *)(v131 + 36) |= 1 << (*v113)[3];
            v132 = __ldxr(v129);
            if (v132 == 1)
            {
              if (!__stlxr(0, v129))
                goto LABEL_227;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v129, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_227;
          }
        }
      }
LABEL_212:
      ++v55;
    }
    while (v55 != v56);
  }
LABEL_114:
  v71 = *(_BYTE *)(v13 + 8) & 0x1F;
  if ((v71 - 8) < 2)
  {
    v85 = *(unsigned int *)(v41 - 8);
    if ((_DWORD)v85)
    {
      v86 = 0;
      while (1)
      {
        v133 = *(_QWORD *)(v41 + 8 * v86);
        if ((v133 & 0xFFFE000000000002) == 0 && v133 != 0)
        {
          if ((v133 & 8) != 0)
          {
            if ((*(_BYTE *)(v133 - 79) & 1) == 0)
            {
              v146 = (unsigned __int8 *)(v133 - 79);
              do
              {
                if (__ldaxr(v146))
                {
                  __clrex();
                  goto LABEL_249;
                }
              }
              while (__stlxr(1u, v146));
              *(_BYTE *)(v133 + 7) = 2;
              ++*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 17) += *(_QWORD *)(v133 - 88);
              v144 = *((_QWORD *)a2 + 3);
              if (v144 == 510)
              {
LABEL_271:
                v148 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                v144 = 0;
                *v148 = 0;
                v148[1] = 0;
                ++*((_QWORD *)a2 + 4);
                v149 = *((_QWORD *)a2 + 1);
                if (v149)
                  v150 = (_QWORD *)*((_QWORD *)a2 + 1);
                else
                  v150 = (_QWORD *)((char *)a2 + 16);
                *v150 = v148;
                *((_QWORD *)a2 + 1) = v148;
                *v148 = 0;
                v148[1] = v149;
              }
LABEL_265:
              v145 = *((_QWORD *)a2 + 1) + 8 * v144;
              *((_QWORD *)a2 + 3) = v144 + 1;
              *(_QWORD *)(v145 + 16) = v133;
            }
          }
          else
          {
            v135 = (unsigned int **)(v133 & 0xFFFFFFFFFFFFC000);
            v136 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v133 & 0xFFFFFFFFFFFFC000 | 0x20) != v136)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v133 & 0xFFFFFFFFFFFFC000), v136, (uint64_t)a3, a4, a5, a6, a7, a8);
            v137 = &v135[(v133 >> 10) & 0xF];
            v139 = v137[5];
            v138 = (unint64_t *)(v137 + 5);
            v140 = 1 << (v133 >> 4);
            if (((unint64_t)v139 & v140) == 0)
            {
              do
              {
                while (1)
                {
                  v141 = *v138;
                  if ((*v138 & v140) != 0)
                    goto LABEL_249;
                  v142 = __ldxr(v138);
                  if (v142 == v141)
                    break;
                  __clrex();
                }
              }
              while (__stxr(v141 | v140, v138));
              *(_BYTE *)(v133 + 7) = 2;
              v143 = (unsigned __int16)(*(_WORD *)((v133 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
              if ((v143 & 0x10000) == 0)
              {
LABEL_264:
                ++*((_QWORD *)a2 + 9);
                *((_QWORD *)a2 + 17) += 16 * **v135;
                v144 = *((_QWORD *)a2 + 3);
                if (v144 == 510)
                  goto LABEL_271;
                goto LABEL_265;
              }
              v233 = *((_QWORD *)*v135 + 3);
              v151 = (unsigned __int8 *)(v233 + 56);
              if (__ldaxr((unsigned __int8 *)(v233 + 56)))
              {
                __clrex();
                goto LABEL_277;
              }
              if (__stxr(1u, v151))
LABEL_277:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v151);
              v153 = *(_QWORD *)(v233 + 32) + 40 * ((*v135)[3] >> 5);
              *(_DWORD *)(v153 + 36) |= 1 << (*v135)[3];
              v154 = __ldxr(v151);
              if (v154 == 1)
              {
                if (!__stlxr(0, v151))
                  goto LABEL_264;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v151, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_264;
            }
          }
        }
LABEL_249:
        if (++v86 == v85)
          goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if ((v71 - 10) < 4)
  {
    v72 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v72)
    {
      v73 = (unint64_t *)(v41 + 16);
      do
      {
        v75 = *v73++;
        v74 = v75;
        if ((v75 & 0xFFFE000000000002) != 0 || v74 == 0)
          goto LABEL_127;
        if ((v74 & 8) != 0)
        {
          if ((*(_BYTE *)(v74 - 79) & 1) != 0)
            goto LABEL_127;
        }
        else
        {
          v77 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v74 & 0xFFFFFFFFFFFFC000 | 0x20) != v77)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v74 & 0xFFFFFFFFFFFFC000), v77, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v74 & 0xFFFFFFFFFFFFC000) + 8 * ((v74 >> 10) & 0xF) + 0x28) >> (v74 >> 4)) & 1) != 0)
            goto LABEL_127;
        }
        JSC::SlotVisitor::appendHiddenSlow(a2, v74, 0, a4, a5, a6, a7, a8);
LABEL_127:
        --v72;
      }
      while (v72);
    }
    v78 = *(_QWORD *)v41;
    if (!*(_QWORD *)v41)
      goto LABEL_16;
    if ((v78 & 8) != 0)
    {
      if ((*(_BYTE *)(v78 - 79) & 1) != 0)
        goto LABEL_133;
    }
    else
    {
      v79 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v78 & 0xFFFFFFFFFFFFC000 | 0x20) != v79)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v78 & 0xFFFFFFFFFFFFC000), v79, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v78 & 0xFFFFFFFFFFFFC000) + 8 * ((v78 >> 10) & 0xF) + 0x28) >> (v78 >> 4)) & 1) != 0)
      {
LABEL_133:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_16;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v78, 0, a4, a5, a6, a7, a8);
    goto LABEL_16;
  }
LABEL_17:
  v18 = *(unsigned __int16 *)(v13 + 24);
  if (v18 == 65534)
  {
    v18 = -1;
  }
  else if (v18 == 0xFFFF)
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  }
  if (v18 + 1 < *(unsigned __int8 *)(v13 + 14))
    v19 = (v18 + 1);
  else
    v19 = *(unsigned __int8 *)(v13 + 14);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = (char *)this + 16;
    do
    {
      v202 = *(_QWORD *)&v21[8 * v20];
      if ((v202 & 0xFFFE000000000002) == 0 && v202 != 0)
      {
        if ((v202 & 8) != 0)
        {
          if ((*(_BYTE *)(v202 - 79) & 1) == 0)
          {
            v215 = (unsigned __int8 *)(v202 - 79);
            do
            {
              if (__ldaxr(v215))
              {
                __clrex();
                goto LABEL_359;
              }
            }
            while (__stlxr(1u, v215));
            *(_BYTE *)(v202 + 7) = 2;
            ++*((_QWORD *)a2 + 9);
            *((_QWORD *)a2 + 17) += *(_QWORD *)(v202 - 88);
            v213 = *((_QWORD *)a2 + 3);
            if (v213 == 510)
            {
LABEL_381:
              v217 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
              v213 = 0;
              *v217 = 0;
              v217[1] = 0;
              ++*((_QWORD *)a2 + 4);
              v218 = *((_QWORD *)a2 + 1);
              if (v218)
                v219 = (_QWORD *)*((_QWORD *)a2 + 1);
              else
                v219 = (_QWORD *)((char *)a2 + 16);
              *v219 = v217;
              *((_QWORD *)a2 + 1) = v217;
              *v217 = 0;
              v217[1] = v218;
            }
LABEL_375:
            v214 = *((_QWORD *)a2 + 1) + 8 * v213;
            *((_QWORD *)a2 + 3) = v213 + 1;
            *(_QWORD *)(v214 + 16) = v202;
          }
        }
        else
        {
          v204 = (unsigned int **)(v202 & 0xFFFFFFFFFFFFC000);
          v205 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v202 & 0xFFFFFFFFFFFFC000 | 0x20) != v205)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v202 & 0xFFFFFFFFFFFFC000), v205, (uint64_t)a3, a4, a5, a6, a7, a8);
          v206 = &v204[(v202 >> 10) & 0xF];
          v208 = v206[5];
          v207 = (unint64_t *)(v206 + 5);
          v209 = 1 << (v202 >> 4);
          if (((unint64_t)v208 & v209) == 0)
          {
            do
            {
              while (1)
              {
                v210 = *v207;
                if ((*v207 & v209) != 0)
                  goto LABEL_359;
                v211 = __ldxr(v207);
                if (v211 == v210)
                  break;
                __clrex();
              }
            }
            while (__stxr(v210 | v209, v207));
            *(_BYTE *)(v202 + 7) = 2;
            v212 = (unsigned __int16)(*(_WORD *)((v202 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
            if ((v212 & 0x10000) == 0)
            {
LABEL_374:
              ++*((_QWORD *)a2 + 9);
              *((_QWORD *)a2 + 17) += 16 * **v204;
              v213 = *((_QWORD *)a2 + 3);
              if (v213 == 510)
                goto LABEL_381;
              goto LABEL_375;
            }
            v220 = *((_QWORD *)*v204 + 3);
            v221 = (unsigned __int8 *)(v220 + 56);
            if (__ldaxr((unsigned __int8 *)(v220 + 56)))
            {
              __clrex();
              goto LABEL_387;
            }
            if (__stxr(1u, v221))
LABEL_387:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v220 + 56);
            v223 = *(_QWORD *)(v220 + 32) + 40 * ((*v204)[3] >> 5);
            *(_DWORD *)(v223 + 36) |= 1 << (*v204)[3];
            v224 = __ldxr(v221);
            if (v224 == 1)
            {
              if (!__stlxr(0, v221))
                goto LABEL_374;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v220 + 56), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_374;
          }
        }
      }
LABEL_359:
      ++v20;
    }
    while (v20 != v19);
  }
}

void JSC::JSFinalObject::visitChildren(JSC::JSFinalObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  JSC::JSFinalObject *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  _QWORD v51[2];
  uint64_t v52;
  char v53;
  JSC::JSCell *v54;
  const char *v55;
  _QWORD *v56;
  char v57;

  v51[0] = a2;
  v51[1] = this;
  v53 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v52 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198A3E51CLL);
  }
  v54 = a2;
  v55 = (const char *)this;
  v57 = 0;
  v56 = v51;
  *((_QWORD *)a2 + 11) = &v54;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *((_QWORD *)v54 + 11) = v56;
  if ((*(unsigned int (**)(JSC::JSCell *))(*(_QWORD *)a2 + 120))(a2))
  {
    v12 = (uint64_t *)*((_QWORD *)this + 1);
    v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v14 = *(unsigned __int16 *)(v13 + 0x18);
    if ((_DWORD)v14 == 65534)
    {
      v14 = 0xFFFFFFFFLL;
    }
    else if ((_DWORD)v14 == 0xFFFF)
    {
      v14 = *(unsigned int *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    }
    if (v12)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x10) != 0)
      {
        (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, v12 - 2);
      }
      else
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
          v17 = *((unsigned int *)v12 + 2);
        else
          v17 = 0;
        v18 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v14);
        (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v12[-v18 - 1 - v17]);
        LODWORD(v19) = v14 - 63;
        if ((int)v14 >= 64)
          v19 = v19;
        else
          v19 = 0;
        if ((_DWORD)v19)
        {
          v20 = -v19;
          do
          {
            if ((v12[v20 - 1] & 0xFFFE000000000002) == 0)
              (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
            v21 = __CFADD__(v20++, 1);
          }
          while (!v21);
        }
      }
    }
    v22 = *(_BYTE *)(v13 + 8) & 0x1F;
    if ((v22 - 10) >= 4)
    {
      if ((v22 - 8) > 1)
        goto LABEL_76;
      v26 = *((unsigned int *)v12 - 2);
      if (!(_DWORD)v26)
        goto LABEL_76;
      do
      {
        v27 = *v12++;
        if ((v27 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
        --v26;
      }
      while (v26);
    }
    else
    {
      v23 = *((unsigned int *)v12 - 1);
      if ((_DWORD)v23)
      {
        v24 = v12 + 2;
        do
        {
          v25 = *v24++;
          if ((v25 & 0xFFFE000000000002) == 0)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
          --v23;
        }
        while (v23);
      }
      if (*v12)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else
  {
    v15 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 1) != 0)
    {
LABEL_79:
      v54 = this;
      v55 = "JSObject::visitButterfly";
      (*(void (**)(JSC::JSCell *, JSC::JSCell **))(*(_QWORD *)a2 + 128))(a2, &v54);
      goto LABEL_89;
    }
    v13 = 16 * (v15 & 0xFFFFFFFE);
    v16 = *(unsigned __int16 *)(v13 + 0x18);
    if ((_DWORD)v16 == 65534)
    {
      v16 = 0xFFFFFFFFLL;
    }
    else if ((_DWORD)v16 == 0xFFFF)
    {
      v16 = *(unsigned int *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
    }
    v28 = *(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0x1F;
    if ((v28 - 10) > 3)
    {
      v32 = 0;
    }
    else
    {
      v29 = (unsigned __int8 *)this + 4;
      while (1)
      {
        v30 = *v29;
        if ((v30 & 0x40) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 0x40, v29))
            goto LABEL_52;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
LABEL_52:
      v32 = this;
    }
    v33 = (uint64_t *)*((_QWORD *)this + 1);
    if (v33)
    {
      if (*(_DWORD *)this != v15)
        goto LABEL_73;
      v34 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
      if (v34 == 65534)
      {
        v34 = -1;
      }
      else if (v34 == 0xFFFF)
      {
        v34 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
      }
      if (v34 == (_DWORD)v16)
      {
        if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0x10) != 0)
        {
          (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, v33 - 2);
        }
        else
        {
          if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 8) & 0xEu) >= 0xA)
            v35 = *((unsigned int *)v33 + 2);
          else
            v35 = 0;
          v36 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v16);
          (*(void (**)(JSC::JSCell *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v33[-v36 - 1 - v35]);
          LODWORD(v37) = v16 - 63;
          if ((int)v16 >= 64)
            v37 = v37;
          else
            v37 = 0;
          if ((_DWORD)v37)
          {
            v38 = -v37;
            do
            {
              if ((v33[v38 - 1] & 0xFFFE000000000002) == 0)
                (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
              v21 = __CFADD__(v38++, 1);
            }
            while (!v21);
          }
        }
        if ((v28 - 10) >= 4)
        {
          if ((v28 - 8) <= 1)
          {
            v46 = *((unsigned int *)v33 - 2);
            if ((_DWORD)v46)
            {
              do
              {
                v47 = *v33++;
                if ((v47 & 0xFFFE000000000002) == 0)
                  (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
                --v46;
              }
              while (v46);
            }
          }
        }
        else
        {
          v43 = *((unsigned int *)v33 - 1);
          if ((_DWORD)v43)
          {
            v44 = v33 + 2;
            do
            {
              v45 = *v44++;
              if ((v45 & 0xFFFE000000000002) == 0)
                (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
              --v43;
            }
            while (v43);
          }
          if (*v33)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        }
      }
      else
      {
LABEL_73:
        v13 = 0;
      }
    }
    if (v32)
    {
      v48 = (unsigned __int8 *)v32 + 4;
      while (1)
      {
        v49 = *v48;
        if ((v49 & 0xC0) != 0x40)
          break;
        v50 = __ldxr(v48);
        if (v50 == v49)
        {
          if (!__stxr(v49 & 0xBF, v48))
            goto LABEL_75;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, v6, v7, v8, v9, v10, v11);
    }
  }
LABEL_75:
  if (!v13)
    goto LABEL_79;
LABEL_76:
  v39 = *(unsigned __int16 *)(v13 + 24);
  if (v39 == 65534)
  {
    v39 = -1;
  }
  else if (v39 == 0xFFFF)
  {
    v39 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  }
  if (v39 + 1 < *(unsigned __int8 *)(v13 + 14))
    v40 = (v39 + 1);
  else
    v40 = *(unsigned __int8 *)(v13 + 14);
  if ((_DWORD)v40)
  {
    v41 = (uint64_t *)((char *)this + 16);
    do
    {
      v42 = *v41++;
      if ((v42 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
      --v40;
    }
    while (v40);
  }
LABEL_89:
  *(_QWORD *)(v51[0] + 88) = v52;
}

void JSC::JSObject::calculatedClassName(JSC::JSObject *this@<X0>, JSC::JSObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  int v73;
  int v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  uint64_t v78;
  JSC::VM *v79;
  JSC::JSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  WTF::StringImpl *v107;
  int v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int **v113;
  int *v114;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _WORD *v193;
  uint64_t v194;
  uint64_t v195;
  JSC::VM *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unsigned int *v209;
  unsigned int v210;
  int v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  JSC::VM *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unsigned __int16 *v225;
  uint64_t v226;
  unsigned int v227;
  unsigned __int16 *v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  int v238;
  unsigned int v239;
  uint64_t v240;
  unsigned __int8 *v241;
  int v242;
  char v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned __int8 *v247;
  int v248;
  double v249;
  const unsigned __int8 *v250;
  double v251;
  const unsigned __int8 *v252;
  BOOL v253;
  unsigned __int8 *v255;
  uint64_t v256;
  unsigned int v257;
  unsigned __int8 *v258;
  uint64_t v259;
  unsigned int v260;
  JSC::VM *v261;
  JSC::JSObject *v262;
  uint64_t v263;
  char v264;
  int v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  unsigned int v269;
  JSC::VM *v270;
  uint64_t v271;
  char v272;
  int v273;
  uint64_t v274;
  unsigned __int8 *v276;
  uint64_t v277;
  unsigned int v278;
  JSC::VM *v279;
  JSC::JSObject *v280;
  uint64_t v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  _BOOL4 v286;
  char v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned int v290;
  JSC::VM *v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  char v298;
  unint64_t v299;
  _QWORD *v300;
  JSC::JSGlobalObject *v301;
  JSC::InternalFunction *v302;
  uint64_t v303;
  unint64_t v304;
  JSC::JSObject *v305;
  JSC::JSObject *v306;
  uint64_t v307;
  int v308;
  char v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  JSC::InternalFunction *v314;
  uint64_t v315;
  unint64_t v316;
  JSC::JSObject *v317;
  JSC::JSObject *v318;
  uint64_t v319;
  int v320;
  char v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327[18];

  v327[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v301 = *(JSC::JSGlobalObject **)(v13 + 0x28);
  v14 = *((_QWORD *)v301 + 7);
  v316 = 0xFFFFFFFF00000000;
  v318 = 0;
  v319 = 0;
  v317 = this;
  v320 = 196608;
  v321 = 0;
  v325 = 0;
  v326 = 0;
  v324 = 0;
  v322 = v14;
  ++*(_DWORD *)(v14 + 4);
  v323 = 1;
  v15 = v14 + 41952;
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1080);
  if (!(v16 >> 4)
    || ((v16 >> 4) & ~*(_DWORD *)(v13 + 32)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v13, (JSC::VM *)v14, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v17)|| (v327[0] = (WTF::StringImpl *)v16, v18 = JSC::PropertyTable::get(v17, (uint64_t *)v327), a6 = v18, (_DWORD)v18 == -1))
  {
    if ((*((_BYTE *)this + 6) & 0x20) == 0
      || (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, (JSC::VM *)v14, v16, (uint64_t)&v314) & 1) == 0)
    {
      if (!v16)
        goto LABEL_26;
      v31 = *(_DWORD *)(v16 + 16);
      if ((v31 & 0x20) != 0)
        goto LABEL_26;
      v32 = *(_BYTE **)(v16 + 8);
      v33 = *(unsigned int *)(v16 + 4);
      if ((v31 & 4) != 0)
      {
        if (!(_DWORD)v33)
          goto LABEL_26;
        a3 = *v32 - 48;
        if (a3 > 9)
          goto LABEL_26;
        if (v33 >= 2 && *v32 == 48)
          goto LABEL_26;
        v255 = v32 + 1;
        v256 = v33 - 1;
        while (v256)
        {
          if (a3 <= 0x19999999)
          {
            v257 = *v255 - 48;
            if (v257 <= 9)
            {
              v67 = __CFADD__(v257, 10 * a3);
              a3 = v257 + 10 * (_DWORD)a3;
              ++v255;
              --v256;
              if (!v67)
                continue;
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        if (!(_DWORD)v33)
          goto LABEL_26;
        a3 = *(unsigned __int16 *)v32 - 48;
        if (a3 > 9)
          goto LABEL_26;
        if (*(_WORD *)v32 == 48 && v33 > 1)
          goto LABEL_26;
        v116 = (unsigned __int16 *)(v32 + 2);
        v117 = v33 - 1;
        while (v117)
        {
          if (a3 <= 0x19999999)
          {
            v118 = *v116 - 48;
            if (v118 <= 9)
            {
              v67 = __CFADD__(v118, 10 * a3);
              a3 = v118 + 10 * (_DWORD)a3;
              ++v116;
              --v117;
              if (!v67)
                continue;
            }
          }
          goto LABEL_26;
        }
      }
      if ((_DWORD)a3 == -1
        || !JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, (uint64_t)v301, (const WTF::StringImpl *)a3, (uint64_t)&v314, a5, a6, a7, a8))
      {
        goto LABEL_26;
      }
    }
  }
  else
  {
    a5 = HIDWORD(v18);
    if ((int)v18 <= 63)
    {
      v19 = (char *)this + 16;
      v20 = v18 << 32;
    }
    else
    {
      v19 = (char *)(*((_QWORD *)this + 1) - 8);
      v20 = 0x3F00000000 - (v18 << 32);
    }
    a4 = *(_QWORD *)&v19[v20 >> 29];
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_10;
    v21 = *(unsigned __int8 *)(a4 + 5);
    if (v21 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)a2, (uint64_t)&v314, a4, SHIDWORD(v18), v18);
      goto LABEL_11;
    }
    if (v21 == 6)
    {
      v180 = *(_DWORD *)(v13 + 16) & 3;
      v181 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v183 = *(_QWORD *)(a4 + 24);
        v182 = *(_QWORD *)(a4 + 32);
        v314 = *(JSC::InternalFunction **)(a4 + 8);
        v315 = v181;
        LODWORD(v316) = HIDWORD(v18);
        v318 = this;
        BYTE1(v320) = 3;
        if (v180 != 2)
          LOBYTE(v320) = 1;
        HIBYTE(v320) = 1;
        v324 = v183;
        v325 = v182;
      }
      else
      {
        v314 = *(JSC::InternalFunction **)(a4 + 8);
        v315 = v181;
        LODWORD(v316) = HIDWORD(v18);
        v318 = this;
        BYTE1(v320) = 3;
        if (v180 != 2)
          LOBYTE(v320) = 1;
      }
    }
    else
    {
LABEL_10:
      v314 = (JSC::InternalFunction *)a4;
      v318 = this;
      v316 = __PAIR64__(v18, HIDWORD(v18));
      LOWORD(v320) = 257;
    }
  }
LABEL_11:
  if (BYTE1(v320) == 1 && ((unint64_t)v314 & 0xFFFE000000000002) == 0)
  {
    v22 = *((unsigned __int8 *)v314 + 5);
    if (v22 >= 0x17)
    {
      if (v314 && v22 == 26)
      {
        JSC::JSFunction::calculatedDisplayName(v314, (JSC::VM *)v14, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, v327);
        WTF::String::operator=((unint64_t *)&v326, (WTF::AtomStringImpl *)v327, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        if (!v314)
          goto LABEL_26;
        if (v22 - 29 < 0xFFFFFFFE)
          goto LABEL_26;
        JSC::InternalFunction::calculatedDisplayName(v314, (JSC::VM *)v14, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, (int **)v327);
        v29 = v326;
        v326 = v327[0];
        v327[0] = 0;
        if (!v29)
          goto LABEL_26;
        v30 = *(_DWORD *)v29 - 2;
        if (*(_DWORD *)v29 != 2)
        {
LABEL_19:
          *(_DWORD *)v29 = v30;
          goto LABEL_26;
        }
        WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      v29 = v327[0];
      v327[0] = 0;
      if (!v29)
        goto LABEL_26;
      v30 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 != 2)
        goto LABEL_19;
      WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
  }
LABEL_26:
  if (*(_QWORD *)(v14 + 16))
  {
    *(_QWORD *)(v14 + 16) = 0;
    v202 = (unsigned int *)(v14 + 80);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 & 0xFFFFFFEF, v202));
  }
  if (v326 || (*(_WORD *)(v13 + 12) & 0x800) != 0)
    goto LABEL_101;
  v34 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v34)
    v34 = *((_QWORD *)this + 2);
  if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) < 0x17u)
    goto LABEL_101;
  v300 = a9;
  v304 = 0xFFFFFFFF00000000;
  v306 = 0;
  v307 = 0;
  v305 = (JSC::JSObject *)v34;
  v308 = 196608;
  v309 = 0;
  v312 = 0;
  v313 = 0;
  v310 = v14;
  ++*(_DWORD *)(v14 + 4);
  v311 = 1;
  v35 = *(_QWORD *)(*(_QWORD *)v15 + 1080);
  v36 = (_BYTE *)(v34 + 6);
  v10 = v35 >> 4;
  if ((*(_BYTE *)(v34 + 6) & 8) != 0)
  {
    v52 = v34;
LABEL_280:
    if (v35)
    {
      v211 = *(_DWORD *)(v35 + 16);
      if ((v211 & 0x20) == 0)
      {
        v212 = *(_BYTE **)(v35 + 8);
        v213 = *(unsigned int *)(v35 + 4);
        if ((v211 & 4) != 0)
        {
          if ((_DWORD)v213)
          {
            v214 = *v212 - 48;
            if (v214 <= 9 && (v213 < 2 || *v212 != 48))
            {
              v288 = v212 + 1;
              v289 = v213 - 1;
              while (v289)
              {
                if (v214 <= 0x19999999)
                {
                  v290 = *v288 - 48;
                  if (v290 <= 9)
                  {
                    v67 = __CFADD__(v290, 10 * v214);
                    v214 = v290 + 10 * (_DWORD)v214;
                    ++v288;
                    --v289;
                    if (!v67)
                      continue;
                  }
                }
                goto LABEL_285;
              }
LABEL_580:
              if ((_DWORD)v214 != -1)
              {
                v291 = (JSC::VM *)*((_QWORD *)v301 + 7);
                while (1)
                {
                  v292 = 16 * (*(_DWORD *)v34 & 0xFFFFFFFE);
                  v293 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(v292 + 0x4C) + 0x70))(v34, v301, v214, &v302);
                  v294 = v293;
                  if (*((_DWORD *)v291 + 20))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v291, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    if (((hasExceptionsAfterHandlingTraps | v294) & 1) != 0)
                    {
                      v298 = BYTE1(v308) != 1 || hasExceptionsAfterHandlingTraps;
                      if ((v298 & 1) == 0)
                        goto LABEL_89;
                      goto LABEL_98;
                    }
                  }
                  else if ((v293 & 1) != 0)
                  {
                    goto LABEL_88;
                  }
                  if (BYTE2(v308) == 3)
                  {
                    if (v309)
                      goto LABEL_98;
                    v295 = *(unsigned __int8 *)(v34 + 5);
                    if (v295 != 61)
                    {
LABEL_586:
                      if ((v295 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v214)
                      {
                        goto LABEL_98;
                      }
                    }
                  }
                  else
                  {
                    v295 = *(unsigned __int8 *)(v34 + 5);
                    if (v295 != 61)
                      goto LABEL_586;
                    if (BYTE2(v308) == 1)
                      goto LABEL_98;
                  }
                  if ((*(_WORD *)(v292 + 12) & 0x800) == 0 || BYTE2(v308) == 3)
                  {
                    v296 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x30);
                    if (!v296)
                      v296 = *(_QWORD *)(v34 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v296 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v34, v301);
                    }
                    else
                    {
                      v296 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x30);
                      if (!v296)
                        v296 = *(_QWORD *)(v34 + 16);
                    }
                    if (*((_DWORD *)v291 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v291, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                    {
                      goto LABEL_98;
                    }
                  }
                  if ((v296 & 0xFFFE000000000002) == 0)
                  {
                    v34 = v296;
                    if (*(unsigned __int8 *)(v296 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_98;
                }
              }
            }
          }
        }
        else if ((_DWORD)v213)
        {
          v214 = *(unsigned __int16 *)v212 - 48;
          if (v214 <= 9 && (*(_WORD *)v212 != 48 || v213 <= 1))
          {
            v228 = (unsigned __int16 *)(v212 + 2);
            v229 = v213 - 1;
            while (v229)
            {
              if (v214 <= 0x19999999)
              {
                v230 = *v228 - 48;
                if (v230 <= 9)
                {
                  v67 = __CFADD__(v230, 10 * v214);
                  v214 = v230 + 10 * (_DWORD)v214;
                  ++v228;
                  --v229;
                  if (!v67)
                    continue;
                }
              }
              goto LABEL_285;
            }
            goto LABEL_580;
          }
        }
      }
    }
LABEL_285:
    v215 = (JSC::VM *)*((_QWORD *)v301 + 7);
    while (1)
    {
      v216 = 16 * (*(_DWORD *)v52 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v52 + 6) & 8) != 0)
      {
        v243 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C) + 0x68))(v52, v301, v35, &v302);
        if (*((_DWORD *)v215 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v215, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_98;
        }
        if ((v243 & 1) != 0)
          goto LABEL_88;
        if (BYTE2(v308) == 3)
        {
          if (v309)
            goto LABEL_98;
          v244 = *(unsigned __int8 *)(v52 + 5);
          if (v244 != 61)
          {
LABEL_384:
            if (!v35)
              goto LABEL_292;
            if ((v244 - 50) < 0xFFFFFFF5)
              goto LABEL_292;
            v245 = *(_DWORD *)(v35 + 16);
            if ((v245 & 0x20) != 0)
              goto LABEL_292;
            v246 = *(unsigned int *)(v35 + 4);
            if (!(_DWORD)v246)
              goto LABEL_292;
            v247 = *(unsigned __int8 **)(v35 + 8);
            if ((v245 & 4) == 0)
            {
              v248 = *(unsigned __int16 *)v247;
              if ((_DWORD)v246 == 1)
                goto LABEL_390;
              if (v248 == 45)
              {
                v248 = *((unsigned __int16 *)v247 + 1);
                goto LABEL_401;
              }
              if ((v248 - 48) >= 0xA && ((_DWORD)v246 != 8 || v248 != 73))
              {
LABEL_426:
                if ((_DWORD)v246 != 3 || v248 != 78)
                  goto LABEL_292;
              }
LABEL_410:
              v299 = v299 & 0xFFFFFF0000000000 | v246 | ((unint64_t)((v245 >> 2) & 1) << 32);
              JSC::jsToNumber(v247, v299);
              WTF::numberToString(v327, v251);
              if (WTF::equal(v35, (unint64_t)v327, v252))
                goto LABEL_98;
              goto LABEL_292;
            }
            v248 = *v247;
            if ((_DWORD)v246 == 1)
            {
LABEL_390:
              if ((v248 - 48) < 0xA)
                goto LABEL_98;
              goto LABEL_292;
            }
            if (v248 == 45)
            {
              v248 = v247[1];
LABEL_401:
              if ((v248 - 48) < 0xA)
              {
                if ((_DWORD)v246 == 2)
                  goto LABEL_98;
                goto LABEL_410;
              }
              if ((_DWORD)v246 != 9)
                goto LABEL_292;
            }
            else
            {
              if ((v248 - 48) < 0xA)
                goto LABEL_410;
              if ((_DWORD)v246 != 8)
                goto LABEL_426;
            }
            if (v248 != 73)
              goto LABEL_292;
            goto LABEL_410;
          }
        }
        else
        {
          v244 = *(unsigned __int8 *)(v52 + 5);
          if (v244 != 61)
            goto LABEL_384;
          if (BYTE2(v308) == 1)
            goto LABEL_98;
        }
      }
      else
      {
        if ((_DWORD)v10)
        {
          if ((v10 & ~*(_DWORD *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE)), v215, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v217)
            {
              v327[0] = (WTF::StringImpl *)v35;
              v218 = JSC::PropertyTable::get(v217, (uint64_t *)v327);
              a6 = v218;
              if ((_DWORD)v218 != -1)
              {
                a5 = HIDWORD(v218);
                if ((int)v218 <= 63)
                {
                  v221 = v52 + 16;
                  v222 = v218 << 32;
                }
                else
                {
                  v221 = *(_QWORD *)(v52 + 8) - 8;
                  v222 = 0x3F00000000 - (v218 << 32);
                }
                a4 = *(_QWORD *)(v221 + (v222 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v223 = *(unsigned __int8 *)(a4 + 5);
                  if (v223 != 5)
                  {
                    if (v223 != 6)
                      goto LABEL_304;
                    v168 = *(_DWORD *)(v216 + 16) & 3;
                    v234 = *(_QWORD *)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v171 = *(_QWORD *)(a4 + 24);
                      v170 = *(_QWORD *)(a4 + 32);
                      v302 = *(JSC::InternalFunction **)(a4 + 8);
                      v303 = v234;
                      LODWORD(v304) = HIDWORD(v218);
                      v306 = (JSC::JSObject *)v52;
LABEL_236:
                      BYTE1(v308) = 3;
                      if (v168 != 2)
                        LOBYTE(v308) = 1;
                      HIBYTE(v308) = 1;
                      v312 = v171;
                      v313 = v170;
LABEL_88:
                      if (BYTE1(v308) == 1)
                      {
LABEL_89:
                        if (((unint64_t)v302 & 0xFFFE000000000002) == 0)
                        {
                          v71 = *((unsigned __int8 *)v302 + 5);
                          if (v71 >= 0x17)
                          {
                            if (v302 && v71 == 26)
                            {
                              JSC::JSFunction::calculatedDisplayName(v302, (JSC::VM *)v14, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, v327);
                              WTF::String::operator=((unint64_t *)&v326, (WTF::AtomStringImpl *)v327, v140, v141, v142, v143, v144, v145);
LABEL_220:
                              v72 = v327[0];
                              v327[0] = 0;
                              if (v72)
                              {
                                v73 = *(_DWORD *)v72 - 2;
                                if (*(_DWORD *)v72 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v72, a2, a3, a4, a5, a6, a7, a8);
                                  WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
                                }
                                else
                                {
LABEL_97:
                                  *(_DWORD *)v72 = v73;
                                }
                              }
                            }
                            else if (v302)
                            {
                              if (v71 - 29 >= 0xFFFFFFFE)
                              {
                                JSC::InternalFunction::calculatedDisplayName(v302, (JSC::VM *)v14, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, (int **)v327);
                                v72 = v326;
                                v326 = v327[0];
                                v327[0] = 0;
                                if (v72)
                                {
                                  v73 = *(_DWORD *)v72 - 2;
                                  if (*(_DWORD *)v72 != 2)
                                    goto LABEL_97;
                                  WTF::StringImpl::~StringImpl(v72, a2, a3, a4, a5, a6, a7, a8);
                                  WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
                                  goto LABEL_220;
                                }
                              }
                            }
                          }
                        }
                      }
                      goto LABEL_98;
                    }
                    v302 = *(JSC::InternalFunction **)(a4 + 8);
                    v303 = v234;
                    LODWORD(v304) = HIDWORD(v218);
                    v306 = (JSC::JSObject *)v52;
LABEL_333:
                    BYTE1(v308) = 3;
                    if (v168 != 2)
                      LOBYTE(v308) = 1;
                    goto LABEL_88;
                  }
                  v139 = (unsigned int *)v52;
LABEL_213:
                  JSC::JSObject::fillGetterPropertySlot(v139, (uint64_t)a2, (uint64_t)&v302, a4, a5, a6);
                  goto LABEL_88;
                }
LABEL_304:
                v302 = (JSC::InternalFunction *)a4;
                v306 = (JSC::JSObject *)v52;
                goto LABEL_87;
              }
            }
          }
        }
        if ((*(_BYTE *)(v52 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v52, v215, v35, (uint64_t)&v302) & 1) != 0)
        {
          goto LABEL_88;
        }
      }
LABEL_292:
      if ((*(_WORD *)(v216 + 12) & 0x800) == 0)
      {
        v219 = *(_DWORD *)v52;
LABEL_294:
        v220 = *(_QWORD *)(16 * (v219 & 0xFFFFFFFE) + 0x30);
        if (!v220)
          v220 = *(_QWORD *)(v52 + 16);
        goto LABEL_296;
      }
      v219 = *(_DWORD *)v52;
      if (BYTE2(v308) == 3)
        goto LABEL_294;
      v236 = 16 * (v219 & 0xFFFFFFFE);
      if ((*(_WORD *)(v236 + 12) & 0x800) != 0)
      {
        v220 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v236 + 76) + 0xB0))(v52, v301);
      }
      else
      {
        v220 = *(_QWORD *)(v236 + 48);
        if (!v220)
          v220 = *(_QWORD *)(v52 + 16);
      }
      if (*((_DWORD *)v215 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v215, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_98;
LABEL_296:
      if ((v220 & 0xFFFE000000000002) == 0)
      {
        v52 = v220;
        if (*(unsigned __int8 *)(v220 + 5) > 0x16u)
          continue;
      }
      goto LABEL_98;
    }
  }
  v37 = (JSC::VM *)*((_QWORD *)v301 + 7);
  v38 = v34;
  while (1)
  {
    v39 = *(_DWORD *)v38 & 0xFFFFFFFE;
    v40 = 16 * v39;
    if (!(_DWORD)v10 || (v10 & ~*(_DWORD *)(16 * v39 + 0x20)) != 0)
      goto LABEL_46;
    v41 = *(_QWORD *)(16 * v39 + 0x58);
    if (!v41)
    {
      v53 = *(_QWORD *)(16 * v39 + 0x40);
      if (!v53 || *(_BYTE *)(v53 + 5) != 1 && *(_DWORD *)(v53 + 80) < 2u)
        goto LABEL_46;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v40, v37, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v41)
        goto LABEL_46;
    }
    if (!*(_DWORD *)(v41 + 24))
      goto LABEL_46;
    v42 = *(_QWORD *)(v41 + 16);
    v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
    v44 = *(unsigned int *)(v41 + 8);
    v45 = *(_DWORD *)(v35 + 16);
    if ((v42 & 1) != 0)
    {
      if ((v45 & 0x20) != 0)
        v45 = *(_DWORD *)(v35 + 32);
      v46 = *(_DWORD *)(v41 + 12);
      v47 = (v45 >> 8) & *(_QWORD *)&v46;
      v48 = *(unsigned __int8 *)(v43 + v47);
      if (!*(_BYTE *)(v43 + v47))
        goto LABEL_46;
      v49 = v43 + v44;
      v50 = 1;
      while (1)
      {
        v51 = *(_QWORD *)(v49 + 8 * (v48 - 1));
        if (v35 == (v51 & 0xFFFFFFFFFFFFLL))
          break;
        v47 = ((_DWORD)v47 + v50) & v46;
        v48 = *(unsigned __int8 *)(v43 + v47);
        ++v50;
        if (!*(_BYTE *)(v43 + v47))
          goto LABEL_46;
      }
      a6 = (v51 >> 16) & 0xFF00000000 | HIBYTE(v51);
    }
    else
    {
      if ((v45 & 0x20) != 0)
        v45 = *(_DWORD *)(v35 + 32);
      v54 = *(_DWORD *)(v41 + 12);
      v55 = v54 & (v45 >> 8);
      v56 = *(_DWORD *)(v43 + 4 * v55);
      if (!v56)
        goto LABEL_46;
      v57 = v43 + 4 * v44;
      v58 = 1;
      while (1)
      {
        v59 = (v56 - 1);
        if (v35 == *(_QWORD *)(v57 + 16 * v59))
          break;
        v55 = (v55 + v58) & v54;
        v56 = *(_DWORD *)(v43 + 4 * v55);
        ++v58;
        if (!v56)
          goto LABEL_46;
      }
      a6 = *(unsigned int *)(v57 + 16 * v59 + 8) | ((unint64_t)*(unsigned __int8 *)(v57 + 16 * v59 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v68 = v38 + 16;
        v69 = a6 << 32;
      }
      else
      {
        v68 = *(_QWORD *)(v38 + 8) - 8;
        v69 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v68 + (v69 >> 29));
      if ((a4 & 0xFFFE000000000002) == 0)
      {
        v70 = *(unsigned __int8 *)(a4 + 5);
        if (v70 == 5)
        {
          v139 = (unsigned int *)v38;
          goto LABEL_213;
        }
        if (v70 == 6)
        {
          v168 = *(_DWORD *)(v40 + 16) & 3;
          v169 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v171 = *(_QWORD *)(a4 + 24);
            v170 = *(_QWORD *)(a4 + 32);
            v302 = *(JSC::InternalFunction **)(a4 + 8);
            v303 = v169;
            LODWORD(v304) = HIDWORD(a6);
            v306 = (JSC::JSObject *)v38;
            goto LABEL_236;
          }
          v302 = *(JSC::InternalFunction **)(a4 + 8);
          v303 = v169;
          LODWORD(v304) = HIDWORD(a6);
          v306 = (JSC::JSObject *)v38;
          goto LABEL_333;
        }
      }
      v302 = (JSC::InternalFunction *)a4;
      v306 = (JSC::JSObject *)v38;
LABEL_87:
      v304 = __PAIR64__(a6, a5);
      LOWORD(v308) = 257;
      goto LABEL_88;
    }
LABEL_46:
    if ((*v36 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v38, v37, v35, (uint64_t)&v302) & 1) != 0)
    {
      goto LABEL_88;
    }
    v52 = *(_QWORD *)(v40 + 48);
    if (!v52)
      v52 = *(_QWORD *)(v38 + 16);
    if ((v52 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v52 + 5) < 0x17u)
      break;
    v36 = (_BYTE *)(v52 + 6);
    v38 = v52;
    if ((*(_BYTE *)(v52 + 6) & 8) != 0)
      goto LABEL_280;
  }
  if (!v35)
    goto LABEL_98;
  v60 = *(_DWORD *)(v35 + 16);
  if ((v60 & 0x20) != 0)
    goto LABEL_98;
  v61 = *(_BYTE **)(v35 + 8);
  v62 = *(unsigned int *)(v35 + 4);
  if ((v60 & 4) != 0)
  {
    if (!(_DWORD)v62)
      goto LABEL_98;
    v63 = *v61 - 48;
    if (v63 > 9 || v62 >= 2 && *v61 == 48)
      goto LABEL_98;
    v267 = v61 + 1;
    v268 = v62 - 1;
    while (v268)
    {
      if (v63 <= 0x19999999)
      {
        v269 = *v267 - 48;
        if (v269 <= 9)
        {
          v67 = __CFADD__(v269, 10 * v63);
          v63 = v269 + 10 * (_DWORD)v63;
          ++v267;
          --v268;
          if (!v67)
            continue;
        }
      }
      goto LABEL_98;
    }
  }
  else
  {
    if (!(_DWORD)v62)
      goto LABEL_98;
    v63 = *(unsigned __int16 *)v61 - 48;
    if (v63 > 9 || *(_WORD *)v61 == 48 && v62 > 1)
      goto LABEL_98;
    v64 = (unsigned __int16 *)(v61 + 2);
    v65 = v62 - 1;
    while (v65)
    {
      if (v63 <= 0x19999999)
      {
        v66 = *v64 - 48;
        if (v66 <= 9)
        {
          v67 = __CFADD__(v66, 10 * v63);
          v63 = v66 + 10 * (_DWORD)v63;
          ++v64;
          --v65;
          if (!v67)
            continue;
        }
      }
      goto LABEL_98;
    }
  }
  if ((_DWORD)v63 != -1)
  {
    v270 = (JSC::VM *)*((_QWORD *)v301 + 7);
    while (1)
    {
      v271 = 16 * (*(_DWORD *)v34 & 0xFFFFFFFE);
      v272 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(v271 + 0x4C) + 0x70))(v34, v301, v63, &v302);
      if (*((_DWORD *)v270 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v270, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        break;
      if ((v272 & 1) != 0)
        goto LABEL_88;
      if (BYTE2(v308) == 3)
      {
        if (v309)
          break;
        v273 = *(unsigned __int8 *)(v34 + 5);
        if (v273 != 61)
        {
LABEL_490:
          if ((v273 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v34, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v63)
          {
            break;
          }
        }
      }
      else
      {
        v273 = *(unsigned __int8 *)(v34 + 5);
        if (v273 != 61)
          goto LABEL_490;
        if (BYTE2(v308) == 1)
          break;
      }
      if ((*(_WORD *)(v271 + 12) & 0x800) == 0 || BYTE2(v308) == 3)
      {
        v274 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x30);
        if (!v274)
          v274 = *(_QWORD *)(v34 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v274 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v34 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v34, v301);
        }
        else
        {
          v274 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x30);
          if (!v274)
            v274 = *(_QWORD *)(v34 + 16);
        }
        if (*((_DWORD *)v270 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v270, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          break;
        }
      }
      if ((v274 & 0xFFFE000000000002) == 0)
      {
        v34 = v274;
        if (*(unsigned __int8 *)(v274 + 5) > 0x16u)
          continue;
      }
      break;
    }
  }
LABEL_98:
  a9 = v300;
  if (v311)
  {
    v74 = *(_DWORD *)(v310 + 4);
    if (!v74)
    {
      __break(0xC471u);
      JUMPOUT(0x198A3F830);
    }
    *(_DWORD *)(v310 + 4) = v74 - 1;
  }
LABEL_101:
  if (*(_QWORD *)(v14 + 16))
  {
    *(_QWORD *)(v14 + 16) = 0;
    v204 = (unsigned int *)(v14 + 80);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 & 0xFFFFFFEF, v204));
  }
  if (v326 && !WTF::equalInternal<unsigned char>((uint64_t)v326, (unint64_t)"Object", 6))
    goto LABEL_152;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v304 = 0xFFFFFFFF00000000;
  v306 = 0;
  v307 = 0;
  v305 = this;
  v308 = 196608;
  v309 = 0;
  v312 = 0;
  v313 = 0;
  v310 = v14;
  ++*(_DWORD *)(v14 + 4);
  v311 = 1;
  v75 = *(_QWORD *)(*(_QWORD *)v15 + 2776);
  v76 = (char *)this + 6;
  v77 = v75 >> 4;
  v78 = (uint64_t)this;
  if ((*((_BYTE *)this + 6) & 8) == 0)
  {
    v79 = (JSC::VM *)*((_QWORD *)v301 + 7);
    v80 = this;
    do
    {
      v81 = *(_DWORD *)v80 & 0xFFFFFFFE;
      v82 = 16 * v81;
      if (!(_DWORD)v77 || (v77 & ~*(_DWORD *)(16 * v81 + 0x20)) != 0)
        goto LABEL_117;
      v83 = *(_QWORD *)(16 * v81 + 0x58);
      if (!v83)
      {
        v94 = *(_QWORD *)(16 * v81 + 0x40);
        if (!v94 || *(_BYTE *)(v94 + 5) != 1 && *(_DWORD *)(v94 + 80) < 2u)
          goto LABEL_117;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v82, v79, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v83)
          goto LABEL_117;
      }
      if (!*(_DWORD *)(v83 + 24))
        goto LABEL_117;
      v84 = *(_QWORD *)(v83 + 16);
      v85 = v84 & 0xFFFFFFFFFFFFFFFELL;
      v86 = *(unsigned int *)(v83 + 8);
      v87 = *(_DWORD *)(v75 + 16);
      if ((v84 & 1) != 0)
      {
        if ((v87 & 0x20) != 0)
          v87 = *(_DWORD *)(v75 + 32);
        v88 = *(_DWORD *)(v83 + 12);
        v89 = (v87 >> 8) & *(_QWORD *)&v88;
        v90 = *(unsigned __int8 *)(v85 + v89);
        if (!*(_BYTE *)(v85 + v89))
          goto LABEL_117;
        v91 = v85 + v86;
        v92 = 1;
        while (1)
        {
          v93 = *(_QWORD *)(v91 + 8 * (v90 - 1));
          if (v75 == (v93 & 0xFFFFFFFFFFFFLL))
            break;
          v89 = ((_DWORD)v89 + v92) & v88;
          v90 = *(unsigned __int8 *)(v85 + v89);
          ++v92;
          if (!*(_BYTE *)(v85 + v89))
            goto LABEL_117;
        }
        a6 = (v93 >> 16) & 0xFF00000000 | HIBYTE(v93);
      }
      else
      {
        if ((v87 & 0x20) != 0)
          v87 = *(_DWORD *)(v75 + 32);
        v95 = *(_DWORD *)(v83 + 12);
        v96 = v95 & (v87 >> 8);
        v97 = *(_DWORD *)(v85 + 4 * v96);
        if (!v97)
          goto LABEL_117;
        v98 = v85 + 4 * v86;
        v99 = 1;
        while (1)
        {
          v100 = (v97 - 1);
          if (v75 == *(_QWORD *)(v98 + 16 * v100))
            break;
          v96 = (v96 + v99) & v95;
          v97 = *(_DWORD *)(v85 + 4 * v96);
          ++v99;
          if (!v97)
            goto LABEL_117;
        }
        a6 = *(unsigned int *)(v98 + 16 * v100 + 8) | ((unint64_t)*(unsigned __int8 *)(v98 + 16 * v100 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v110 = (uint64_t)v80 + 16;
          v111 = a6 << 32;
        }
        else
        {
          v110 = *((_QWORD *)v80 + 1) - 8;
          v111 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v110 + (v111 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v112 = *(unsigned __int8 *)(a4 + 5);
          if (v112 != 5)
          {
            if (v112 != 6)
              goto LABEL_165;
            v164 = *(_DWORD *)(v82 + 16) & 3;
            v165 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v167 = *(_QWORD *)(a4 + 24);
              v166 = *(_QWORD *)(a4 + 32);
              v302 = *(JSC::InternalFunction **)(a4 + 8);
              v303 = v165;
              LODWORD(v304) = HIDWORD(a6);
              v306 = v80;
              goto LABEL_231;
            }
            v302 = *(JSC::InternalFunction **)(a4 + 8);
            v303 = v165;
            LODWORD(v304) = HIDWORD(a6);
            v306 = v80;
LABEL_329:
            BYTE1(v308) = 3;
            if (v164 != 2)
              LOBYTE(v308) = 1;
            goto LABEL_167;
          }
          v130 = (unsigned int *)v80;
LABEL_204:
          JSC::JSObject::fillGetterPropertySlot(v130, (uint64_t)a2, (uint64_t)&v302, a4, a5, a6);
          goto LABEL_167;
        }
LABEL_165:
        v302 = (JSC::InternalFunction *)a4;
        v306 = v80;
LABEL_166:
        v304 = __PAIR64__(a6, a5);
        LOWORD(v308) = 257;
        goto LABEL_167;
      }
LABEL_117:
      if ((*v76 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v80, v79, v75, (uint64_t)&v302) & 1) != 0)
      {
        goto LABEL_167;
      }
      v78 = *(_QWORD *)(v82 + 48);
      if (!v78)
        v78 = *((_QWORD *)v80 + 2);
      if ((v78 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v78 + 5) < 0x17u)
      {
        if (!v75)
          goto LABEL_144;
        v101 = *(_DWORD *)(v75 + 16);
        if ((v101 & 0x20) != 0)
          goto LABEL_144;
        v102 = *(_BYTE **)(v75 + 8);
        v103 = *(unsigned int *)(v75 + 4);
        if ((v101 & 4) != 0)
        {
          if (!(_DWORD)v103)
            goto LABEL_144;
          v104 = *v102 - 48;
          if (v104 > 9 || v103 >= 2 && *v102 == 48)
            goto LABEL_144;
          v258 = v102 + 1;
          v259 = v103 - 1;
          while (v259)
          {
            if (v104 <= 0x19999999)
            {
              v260 = *v258 - 48;
              if (v260 <= 9)
              {
                v67 = __CFADD__(v260, 10 * v104);
                v104 = v260 + 10 * (_DWORD)v104;
                ++v258;
                --v259;
                if (!v67)
                  continue;
              }
            }
            goto LABEL_144;
          }
        }
        else
        {
          if (!(_DWORD)v103)
            goto LABEL_144;
          v104 = *(unsigned __int16 *)v102 - 48;
          if (v104 > 9 || *(_WORD *)v102 == 48 && v103 > 1)
            goto LABEL_144;
          v119 = (unsigned __int16 *)(v102 + 2);
          v120 = v103 - 1;
          while (v120)
          {
            if (v104 <= 0x19999999)
            {
              v121 = *v119 - 48;
              if (v121 <= 9)
              {
                v67 = __CFADD__(v121, 10 * v104);
                v104 = v121 + 10 * (_DWORD)v104;
                ++v119;
                --v120;
                if (!v67)
                  continue;
              }
            }
            goto LABEL_144;
          }
        }
        if ((_DWORD)v104 == -1)
          goto LABEL_144;
        v261 = (JSC::VM *)*((_QWORD *)v301 + 7);
        v262 = this;
        while (1)
        {
          v263 = 16 * (*(_DWORD *)v262 & 0xFFFFFFFE);
          v264 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(v263 + 0x4C) + 0x70))(v262, v301, v104, &v302);
          if (*((_DWORD *)v261 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v261, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_144;
          }
          if ((v264 & 1) != 0)
            goto LABEL_167;
          if (BYTE2(v308) == 3)
          {
            if (v309)
              goto LABEL_144;
            v265 = *((unsigned __int8 *)v262 + 5);
            if (v265 == 61)
              goto LABEL_465;
          }
          else
          {
            v265 = *((unsigned __int8 *)v262 + 5);
            if (v265 == 61)
            {
              if (BYTE2(v308) == 1)
                goto LABEL_144;
              goto LABEL_465;
            }
          }
          if ((v265 - 39) <= 0xA
            && JSC::JSArrayBufferView::length(v262, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v104)
          {
            goto LABEL_144;
          }
LABEL_465:
          if ((*(_WORD *)(v263 + 12) & 0x800) == 0 || BYTE2(v308) == 3)
          {
            v266 = *(_QWORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0x30);
            if (!v266)
              v266 = *((_QWORD *)v262 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v266 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v262, v301);
            }
            else
            {
              v266 = *(_QWORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0x30);
              if (!v266)
                v266 = *((_QWORD *)v262 + 2);
            }
            if (*((_DWORD *)v261 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v261, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_144;
            }
          }
          if ((v266 & 0xFFFE000000000002) == 0)
          {
            v262 = (JSC::JSObject *)v266;
            if (*(unsigned __int8 *)(v266 + 5) > 0x16u)
              continue;
          }
          goto LABEL_144;
        }
      }
      v76 = (_BYTE *)(v78 + 6);
      v80 = (JSC::JSObject *)v78;
    }
    while ((*(_BYTE *)(v78 + 6) & 8) == 0);
  }
  if (!v75)
    goto LABEL_250;
  v192 = *(_DWORD *)(v75 + 16);
  if ((v192 & 0x20) != 0)
    goto LABEL_250;
  v193 = *(_WORD **)(v75 + 8);
  v194 = *(unsigned int *)(v75 + 4);
  if ((v192 & 4) == 0)
  {
    if ((_DWORD)v194)
    {
      v195 = (unsigned __int16)*v193 - 48;
      if (v195 <= 9 && (*v193 != 48 || v194 <= 1))
      {
        v225 = v193 + 1;
        v226 = v194 - 1;
        while (v226)
        {
          if (v195 <= 0x19999999)
          {
            v227 = *v225 - 48;
            if (v227 <= 9)
            {
              v67 = __CFADD__(v227, 10 * v195);
              v195 = v227 + 10 * (_DWORD)v195;
              ++v225;
              --v226;
              if (!v67)
                continue;
            }
          }
          goto LABEL_250;
        }
        goto LABEL_550;
      }
    }
    goto LABEL_250;
  }
  if ((_DWORD)v194)
  {
    v195 = *(unsigned __int8 *)v193 - 48;
    if (v195 <= 9 && (v194 < 2 || *(_BYTE *)v193 != 48))
    {
      v276 = (unsigned __int8 *)v193 + 1;
      v277 = v194 - 1;
      while (v277)
      {
        if (v195 <= 0x19999999)
        {
          v278 = *v276 - 48;
          if (v278 <= 9)
          {
            v67 = __CFADD__(v278, 10 * v195);
            v195 = v278 + 10 * (_DWORD)v195;
            ++v276;
            --v277;
            if (!v67)
              continue;
          }
        }
        goto LABEL_250;
      }
LABEL_550:
      if ((_DWORD)v195 != -1)
      {
        v279 = (JSC::VM *)*((_QWORD *)v301 + 7);
        v280 = this;
        while (1)
        {
          v281 = 16 * (*(_DWORD *)v280 & 0xFFFFFFFE);
          v282 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(v281 + 0x4C) + 0x70))(v280, v301, v195, &v302);
          v283 = v282;
          if (*((_DWORD *)v279 + 20))
          {
            v286 = JSC::VM::hasExceptionsAfterHandlingTraps(v279, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            if (((v286 | v283) & 1) != 0)
            {
              v287 = BYTE1(v308) != 1 || v286;
              if ((v287 & 1) == 0)
                goto LABEL_168;
              goto LABEL_144;
            }
          }
          else if ((v282 & 1) != 0)
          {
            goto LABEL_167;
          }
          if (BYTE2(v308) == 3)
          {
            if (v309)
              goto LABEL_144;
            v284 = *((unsigned __int8 *)v280 + 5);
            if (v284 == 61)
              goto LABEL_557;
          }
          else
          {
            v284 = *((unsigned __int8 *)v280 + 5);
            if (v284 == 61)
            {
              if (BYTE2(v308) == 1)
                goto LABEL_144;
              goto LABEL_557;
            }
          }
          if ((v284 - 39) <= 0xA
            && JSC::JSArrayBufferView::length(v280, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v195)
          {
            goto LABEL_144;
          }
LABEL_557:
          if ((*(_WORD *)(v281 + 12) & 0x800) == 0 || BYTE2(v308) == 3)
          {
            v285 = *(_QWORD *)(16 * (*(_DWORD *)v280 & 0xFFFFFFFE) + 0x30);
            if (!v285)
              v285 = *((_QWORD *)v280 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v280 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v285 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v280 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v280, v301);
            }
            else
            {
              v285 = *(_QWORD *)(16 * (*(_DWORD *)v280 & 0xFFFFFFFE) + 0x30);
              if (!v285)
                v285 = *((_QWORD *)v280 + 2);
            }
            if (*((_DWORD *)v279 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v279, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_144;
            }
          }
          if ((v285 & 0xFFFE000000000002) == 0)
          {
            v280 = (JSC::JSObject *)v285;
            if (*(unsigned __int8 *)(v285 + 5) > 0x16u)
              continue;
          }
          goto LABEL_144;
        }
      }
    }
  }
LABEL_250:
  v196 = (JSC::VM *)*((_QWORD *)v301 + 7);
  while (2)
  {
    v197 = 16 * (*(_DWORD *)v78 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v78 + 6) & 8) != 0)
    {
      v237 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, JSC::InternalFunction **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C) + 0x68))(v78, v301, v75, &v302);
      if (*((_DWORD *)v196 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v196, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_144;
      if ((v237 & 1) != 0)
        goto LABEL_167;
      if (BYTE2(v308) == 3)
      {
        if (v309)
          goto LABEL_144;
        v238 = *(unsigned __int8 *)(v78 + 5);
        if (v238 == 61)
          goto LABEL_257;
      }
      else
      {
        v238 = *(unsigned __int8 *)(v78 + 5);
        if (v238 == 61)
        {
          if (BYTE2(v308) == 1)
            goto LABEL_144;
          goto LABEL_257;
        }
      }
      if (!v75)
        goto LABEL_257;
      if ((v238 - 50) < 0xFFFFFFF5)
        goto LABEL_257;
      v239 = *(_DWORD *)(v75 + 16);
      if ((v239 & 0x20) != 0)
        goto LABEL_257;
      v240 = *(unsigned int *)(v75 + 4);
      if (!(_DWORD)v240)
        goto LABEL_257;
      v241 = *(unsigned __int8 **)(v75 + 8);
      if ((v239 & 4) != 0)
      {
        v242 = *v241;
        if ((_DWORD)v240 == 1)
        {
LABEL_378:
          if ((v242 - 48) < 0xA)
            goto LABEL_144;
          goto LABEL_257;
        }
        if (v242 == 45)
        {
          v242 = v241[1];
          goto LABEL_396;
        }
        if ((v242 - 48) < 0xA)
          goto LABEL_405;
        if ((_DWORD)v240 == 8)
        {
LABEL_413:
          v253 = v242 == 73;
LABEL_414:
          if (!v253)
            goto LABEL_257;
          goto LABEL_405;
        }
      }
      else
      {
        v242 = *(unsigned __int16 *)v241;
        if ((_DWORD)v240 == 1)
          goto LABEL_378;
        if (v242 == 45)
        {
          v242 = *((unsigned __int16 *)v241 + 1);
LABEL_396:
          if ((v242 - 48) < 0xA)
          {
            if ((_DWORD)v240 == 2)
              goto LABEL_144;
LABEL_405:
            v10 = v10 & 0xFFFFFF0000000000 | v240 | ((unint64_t)((v239 >> 2) & 1) << 32);
            JSC::jsToNumber(v241, v10);
            WTF::numberToString(v327, v249);
            if (WTF::equal(v75, (unint64_t)v327, v250))
              goto LABEL_144;
            goto LABEL_257;
          }
          if ((_DWORD)v240 != 9)
            goto LABEL_257;
          goto LABEL_413;
        }
        if ((v242 - 48) < 0xA || (_DWORD)v240 == 8 && v242 == 73)
          goto LABEL_405;
      }
      if ((_DWORD)v240 != 3)
        goto LABEL_257;
      v253 = v242 == 78;
      goto LABEL_414;
    }
    if (!(_DWORD)v77
      || (v77 & ~*(_DWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE)), v196, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v198)|| (v327[0] = (WTF::StringImpl *)v75, v199 = JSC::PropertyTable::get(v198, (uint64_t *)v327), a6 = v199, (_DWORD)v199 == -1))
    {
      if ((*(_BYTE *)(v78 + 6) & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v78, v196, v75, (uint64_t)&v302) & 1) != 0)
      {
        goto LABEL_167;
      }
LABEL_257:
      if ((*(_WORD *)(v197 + 12) & 0x800) != 0)
      {
        v200 = *(_DWORD *)v78;
        if (BYTE2(v308) == 3)
          goto LABEL_259;
        v235 = 16 * (v200 & 0xFFFFFFFE);
        if ((*(_WORD *)(v235 + 12) & 0x800) != 0)
        {
          v201 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v235 + 76) + 0xB0))(v78, v301);
        }
        else
        {
          v201 = *(_QWORD *)(v235 + 48);
          if (!v201)
            v201 = *(_QWORD *)(v78 + 16);
        }
        if (*((_DWORD *)v196 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v196, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_144;
        }
      }
      else
      {
        v200 = *(_DWORD *)v78;
LABEL_259:
        v201 = *(_QWORD *)(16 * (v200 & 0xFFFFFFFE) + 0x30);
        if (!v201)
          v201 = *(_QWORD *)(v78 + 16);
      }
      if ((v201 & 0xFFFE000000000002) != 0)
        goto LABEL_144;
      v78 = v201;
      if (*(unsigned __int8 *)(v201 + 5) <= 0x16u)
        goto LABEL_144;
      continue;
    }
    break;
  }
  a5 = HIDWORD(v199);
  if ((int)v199 <= 63)
  {
    v206 = v78 + 16;
    v207 = v199 << 32;
  }
  else
  {
    v206 = *(_QWORD *)(v78 + 8) - 8;
    v207 = 0x3F00000000 - (v199 << 32);
  }
  a4 = *(_QWORD *)(v206 + (v207 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_275:
    v302 = (JSC::InternalFunction *)a4;
    v306 = (JSC::JSObject *)v78;
    goto LABEL_166;
  }
  v208 = *(unsigned __int8 *)(a4 + 5);
  if (v208 == 5)
  {
    v130 = (unsigned int *)v78;
    goto LABEL_204;
  }
  if (v208 != 6)
    goto LABEL_275;
  v164 = *(_DWORD *)(v197 + 16) & 3;
  v233 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v302 = *(JSC::InternalFunction **)(a4 + 8);
    v303 = v233;
    LODWORD(v304) = HIDWORD(v199);
    v306 = (JSC::JSObject *)v78;
    goto LABEL_329;
  }
  v167 = *(_QWORD *)(a4 + 24);
  v166 = *(_QWORD *)(a4 + 32);
  v302 = *(JSC::InternalFunction **)(a4 + 8);
  v303 = v233;
  LODWORD(v304) = HIDWORD(v199);
  v306 = (JSC::JSObject *)v78;
LABEL_231:
  BYTE1(v308) = 3;
  if (v164 != 2)
    LOBYTE(v308) = 1;
  HIBYTE(v308) = 1;
  v312 = v167;
  v313 = v166;
LABEL_167:
  if (BYTE1(v308) == 1)
  {
LABEL_168:
    if (((unint64_t)v302 & 0xFFFE000000000002) == 0 && *((_BYTE *)v302 + 5) == 2)
    {
      v113 = (int **)((char *)v302 + 8);
      if ((*((_BYTE *)v302 + 8) & 1) != 0)
        v113 = JSC::JSRopeString::resolveRope((unint64_t)v302, v301, a3, a4, a10, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        *(_QWORD *)(v14 + 16) = 0;
        v231 = (unsigned int *)(v14 + 80);
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 & 0xFFFFFFEF, v231));
      }
      v114 = *v113;
      if (*v113)
        *v114 += 2;
      *a9 = v114;
      goto LABEL_147;
    }
  }
LABEL_144:
  if (*(_QWORD *)(v14 + 16))
  {
    *(_QWORD *)(v14 + 16) = 0;
    v209 = (unsigned int *)(v14 + 80);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 & 0xFFFFFFEF, v209));
  }
  WTF::String::String((int **)v327, *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)), *(_QWORD *)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) + 8));
  if (v327[0])
  {
    *a9 = v327[0];
    goto LABEL_147;
  }
  if (v326)
  {
    v105 = 0;
  }
  else
  {
    v154 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v154 = 0x600000002;
    *(_QWORD *)(v154 + 8) = "Object";
    *(_DWORD *)(v154 + 16) = 4;
    *a9 = v154;
    v155 = v327[0];
    v327[0] = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
      {
        WTF::StringImpl::~StringImpl(v155, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
      }
      else
      {
        *(_DWORD *)v155 -= 2;
      }
    }
LABEL_147:
    v105 = 1;
  }
  if (v311)
  {
    v106 = *(_DWORD *)(v310 + 4);
    if (!v106)
    {
      __break(0xC471u);
      JUMPOUT(0x198A3F804);
    }
    *(_DWORD *)(v310 + 4) = v106 - 1;
  }
  if (!v105)
  {
LABEL_152:
    v107 = v326;
    v326 = 0;
    *a9 = v107;
  }
  if (v323)
  {
    v108 = *(_DWORD *)(v322 + 4);
    if (!v108)
    {
      __break(0xC471u);
      JUMPOUT(0x198A3F79CLL);
    }
    *(_DWORD *)(v322 + 4) = v108 - 1;
  }
  v109 = v326;
  v326 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
}

uint64_t JSC::ordinarySetSlow(unint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  _QWORD v23[4];
  _BYTE v24[16];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v14 = *(JSC::VM **)(a1 + 56);
  memset(v23, 0, 24);
  v23[3] = 14;
  if (*(_BYTE *)(a2 + 5) == 61)
    return JSC::ordinarySetWithOwnDescriptor(a1, a2, a3, a4, a5, (uint64_t)v23, a6, a8);
  v25 = 0xFFFFFFFF00000000;
  v27 = 0;
  v28 = 0;
  v26 = a2;
  v29 = 0x20000;
  v30 = 0;
  LOBYTE(v31) = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if ((*(unsigned int (**)(uint64_t, unint64_t, WTF::StringImpl *, _BYTE *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(a2, a1, a3, v24))
  {
    JSC::PropertyDescriptor::setPropertySlot((uint64_t)v23, a1, a3, (uint64_t)v24, v18, v19, v20, a8);
  }
  if (!v32)
  {
LABEL_7:
    if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v15, v16, v17, v18, v19, v20, a8))
      return 0;
    return JSC::ordinarySetWithOwnDescriptor(a1, a2, a3, a4, a5, (uint64_t)v23, a6, a8);
  }
  v21 = *(_DWORD *)(v31 + 4);
  if (v21)
  {
    *(_DWORD *)(v31 + 4) = v21 - 1;
    goto LABEL_7;
  }
  result = 57;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JSObject::getOwnPropertyDescriptor(_DWORD *a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  int v13;
  _BYTE v14[16];
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v15 = 0xFFFFFFFF00000000;
  v17 = 0;
  v18 = 0;
  v16 = a1;
  v19 = 0x20000;
  v20 = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v11 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C) + 0x68))();
  result = 0;
  if (v11)
    result = JSC::PropertyDescriptor::setPropertySlot(a4, a2, a3, (uint64_t)v14, v7, v8, v9, v10);
  if (v22)
  {
    v13 = *(_DWORD *)(v21 + 4);
    if (v13)
    {
      *(_DWORD *)(v21 + 4) = v13 - 1;
    }
    else
    {
      result = 57;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::ordinarySetWithOwnDescriptor(unint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  JSC::JSCell *v14;
  int v15;
  int v16;
  JSC::JSCell *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, unint64_t, WTF::StringImpl *, uint64_t *, _QWORD);
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  JSC::VM *v62;

  v48 = a7;
  v12 = *(JSC::VM **)(a1 + 56);
  v62 = v12;
  if (*(_BYTE *)(a2 + 5) != 61)
  {
    v46 = (_QWORD *)(a6 + 8);
    v14 = (JSC::JSCell *)a2;
    while (1)
    {
      if (v14 == (JSC::JSCell *)a2)
      {
        v18 = *(_QWORD *)a6;
        if (*(_QWORD *)a6)
          v19 = 0;
        else
          v19 = *(_QWORD *)(a6 + 8) == 0;
        if (!v19 || *(_QWORD *)(a6 + 16) != 0 || *(_DWORD *)(a6 + 28) != 0)
          goto LABEL_32;
      }
      else
      {
        v53 = (char *)0xFFFFFFFF00000000;
        v54 = (unint64_t)v14;
        *(_QWORD *)&v55 = 0;
        DWORD2(v55) = 0x20000;
        BYTE12(v55) = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        v57 = 0uLL;
        v15 = 0;
        if ((*(unsigned int (**)(JSC::JSCell *, unint64_t, WTF::StringImpl *, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0x68))(v14, a1, a3, &v51))
        {
          v15 = JSC::PropertyDescriptor::setPropertySlot(a6, a1, a3, (uint64_t)&v51, a5, a6, a7, a8);
        }
        if (BYTE8(v56))
        {
          v16 = *(_DWORD *)(v56 + 4);
          if (!v16)
          {
            __break(0xC471u);
            JUMPOUT(0x198A40D48);
          }
          *(_DWORD *)(v56 + 4) = v16 - 1;
        }
        if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          return 0;
        if (v15)
        {
          v18 = *(_QWORD *)a6;
LABEL_32:
          if (!v18 && (*(_BYTE *)(a6 + 28) & 1) == 0)
          {
            v33 = *(_QWORD *)(a6 + 16);
            if ((v33 & 0xFFFE000000000002) == 0)
            {
              v34 = *(unsigned __int8 *)(v33 + 5);
              if (v34 > 0x16)
              {
                LOBYTE(v51) = 0;
                v35 = (char *)&v54 + 8;
                v53 = (char *)&v54 + 8;
                *(_QWORD *)&v54 = 0;
                v55 = 0u;
                v56 = 0u;
                v57 = 0u;
                v58 = 0;
                *((_QWORD *)&v54 + 1) = a4;
                v52 = 0x800000001;
                if (v34 == 26)
                {
                  v36 = *(_QWORD *)(v33 + 24);
                  if ((v36 & 1) != 0)
                    v36 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 48);
                  if (*(_BYTE *)(v36 + 5) == 8)
                  {
                    v38 = 1;
                    LOBYTE(v59) = 1;
                    *(_QWORD *)&v60 = *(_QWORD *)(v36 + 40);
                    BYTE8(v60) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v33 & 0xFFFFFFFE)
                                                                                            + 0x4C));
                  }
                  else
                  {
                    LOBYTE(v59) = 2;
                    v37 = *(_QWORD *)(v33 + 16);
                    *(_QWORD *)&v60 = v36;
                    *((_QWORD *)&v60 + 1) = v37;
                    v38 = 1;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v33 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v59, v33);
                  v35 = v53;
                  v38 = v52;
                }
                v49 = v35;
                v50 = v38;
                JSC::call(a1, v33, &v59, a5, &v49);
                JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v52, v39, v40, v41, v42, v43, v44, v45);
                return 1;
              }
            }
LABEL_56:
            if (v48)
              JSC::throwTypeError(a1, &v62, (uint64_t)"Attempted to assign to readonly property.", 42);
            return 0;
          }
LABEL_33:
          if ((*(_BYTE *)(a6 + 24) & 2) != 0
            || (a5 & 0xFFFE000000000002) != 0
            || *(unsigned __int8 *)(a5 + 5) <= 0x16u)
          {
            goto LABEL_56;
          }
          v59 = 0;
          v60 = 0uLL;
          v61 = 14;
          v53 = (char *)0xFFFFFFFF00000000;
          *(_QWORD *)&v55 = 0;
          v54 = (unint64_t)a5;
          DWORD2(v55) = 0x20000;
          BYTE12(v55) = 0;
          LOBYTE(v56) = 0;
          BYTE8(v56) = 0;
          v57 = 0uLL;
          v29 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, WTF::StringImpl *, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C) + 0x68))(a5, a1, a3, &v51))
          {
            v29 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v59, a1, a3, (uint64_t)&v51, v25, v26, v27, v28);
          }
          if (BYTE8(v56))
          {
            v30 = *(_DWORD *)(v56 + 4);
            if (!v30)
            {
              __break(0xC471u);
              JUMPOUT(0x198A40D78);
            }
            *(_DWORD *)(v56 + 4) = v30 - 1;
          }
          if (!*((_DWORD *)v12 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v22, v23, v24, v25, v26, v27, v28))
          {
            if (!v29)
            {
              v31 = *(uint64_t (**)(uint64_t, unint64_t, WTF::StringImpl *, uint64_t *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C) + 0x90);
              v51 = a4;
              v52 = 0;
              v53 = 0;
              *(_QWORD *)&v54 = 0x700000000;
              return v31(a5, a1, a3, &v51, v48);
            }
            if (v60 == 0 && (v61 & 2) == 0)
            {
              v52 = 0;
              v53 = 0;
              *(_QWORD *)&v54 = 14;
              v51 = a4;
              return (*(uint64_t (**)(uint64_t, unint64_t, WTF::StringImpl *, uint64_t *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C) + 0x90))(a5, a1, a3, &v51, v48);
            }
            goto LABEL_56;
          }
          return 0;
        }
      }
      if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v17 = (JSC::JSCell *)(*(uint64_t (**)(JSC::JSCell *, unint64_t))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v14, a1);
      }
      else
      {
        v17 = *(JSC::JSCell **)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
        if (!v17)
          v17 = (JSC::JSCell *)*((_QWORD *)v14 + 2);
      }
      if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        return 0;
      if (v17 == (JSC::JSCell *)2)
      {
        *v46 = 0;
        v46[1] = 0;
        *(_QWORD *)a6 = 10;
        *(_QWORD *)(a6 + 24) = 0x700000000;
        goto LABEL_33;
      }
      v14 = v17;
      if (*((_BYTE *)v17 + 5) == 61)
        goto LABEL_71;
    }
  }
  v17 = (JSC::JSCell *)a2;
LABEL_71:
  v51 = 0;
  v52 = a5;
  LODWORD(v53) = -1;
  BYTE4(v53) = v48;
  *(_WORD *)((char *)&v53 + 5) = 0;
  HIBYTE(v53) = 1;
  *(_QWORD *)&v54 = 0;
  return JSC::ProxyObject::put(v17, a1, (unint64_t)a3, a4, (uint64_t)&v51, a6, a7, a8);
}

uint64_t JSC::JSObject::putInlineSlow(unsigned __int8 *a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t (*a5)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t), uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t);
  _BOOL8 v42;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::VM *v65;
  JSC::VM *v66;

  v10 = *(_QWORD *)(a2 + 56);
  v65 = (JSC::VM *)v10;
  if ((unint64_t)&v63 < *(_QWORD *)(v10 + 8))
  {
    JSC::throwStackOverflowError(a2, &v65, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    return 0;
  }
  v11 = (uint64_t)a5;
  v15 = a3 >> 4;
  v16 = a1;
  v17 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  while (1)
  {
    if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(v17 + 32)) != 0)
      goto LABEL_32;
    v18 = *(_QWORD *)(v17 + 88);
    if (!v18)
    {
      v29 = *(_QWORD *)(v17 + 64);
      if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
        goto LABEL_32;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v17, (JSC::VM *)v10, 1, a4, (uint64_t)a5, a6, a7, a8);
      if (!v18)
        goto LABEL_32;
    }
    if (!*(_DWORD *)(v18 + 24))
      goto LABEL_32;
    v19 = *(_QWORD *)(v18 + 16);
    v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
    v21 = *(unsigned int *)(v18 + 8);
    v22 = *(_DWORD *)(a3 + 16);
    if ((v19 & 1) != 0)
    {
      if ((v22 & 0x20) != 0)
        v22 = *(_DWORD *)(a3 + 32);
      v23 = *(_DWORD *)(v18 + 12);
      v24 = (v22 >> 8) & *(_QWORD *)&v23;
      v25 = *(unsigned __int8 *)(v20 + v24);
      if (!*(_BYTE *)(v20 + v24))
        goto LABEL_32;
      v26 = v20 + v21;
      v27 = 1;
      while (1)
      {
        v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
        if (a3 == (v28 & 0xFFFFFFFFFFFFLL))
          break;
        v24 = ((_DWORD)v24 + v27) & v23;
        v25 = *(unsigned __int8 *)(v20 + v24);
        ++v27;
        if (!*(_BYTE *)(v20 + v24))
          goto LABEL_32;
      }
      v30 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
    }
    else
    {
      if ((v22 & 0x20) != 0)
        v22 = *(_DWORD *)(a3 + 32);
      v31 = *(_DWORD *)(v18 + 12);
      v32 = v31 & (v22 >> 8);
      v33 = *(_DWORD *)(v20 + 4 * v32);
      if (!v33)
        goto LABEL_32;
      v34 = v20 + 4 * v21;
      v35 = 1;
      while (1)
      {
        v36 = (v33 - 1);
        if (*(_QWORD *)(v34 + 16 * v36) == a3)
          break;
        v32 = (v32 + v35) & v31;
        v33 = *(_DWORD *)(v20 + 4 * v32);
        ++v35;
        if (!v33)
          goto LABEL_32;
      }
      v30 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
    }
    if ((_DWORD)v30 != -1)
    {
      v38 = HIDWORD(v30);
      if ((v30 & 0x6000000000) == 0)
      {
        a5 = 0;
        goto LABEL_45;
      }
      if ((int)v30 <= 63)
      {
        v39 = (uint64_t)(v16 + 16);
        v40 = v30 << 32;
      }
      else
      {
        v39 = *((_QWORD *)v16 + 1) - 8;
        v40 = 0x3F00000000 - (v30 << 32);
      }
      v41 = (uint64_t (**)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))(*(_QWORD *)(v39 + (v40 >> 29)) + 16);
LABEL_44:
      a5 = *v41;
      goto LABEL_45;
    }
LABEL_32:
    if ((*(_BYTE *)(v17 + 10) & 0x20) != 0 && (*(_BYTE *)(v17 + 18) & 0x40) == 0)
    {
      v48 = *(unsigned int *)(v17 + 76);
      if ((_DWORD)v48 && a3 != 0)
        break;
    }
LABEL_33:
    if ((*(_WORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      v37 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, unint64_t))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v16, a2);
    }
    else
    {
      v37 = *(unsigned __int8 **)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
      if (!v37)
        v37 = (unsigned __int8 *)*((_QWORD *)v16 + 2);
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v59 = *(_DWORD *)(v10 + 80);
      if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    if (v37 == (unsigned __int8 *)2)
      goto LABEL_56;
    v16 = v37;
    v17 = 16 * (*(_DWORD *)v37 & 0xFFFFFFFE);
    if (v16 != a1 && (*(_WORD *)(v17 + 12) & 0x400) != 0)
      return (*(uint64_t (**)(unsigned __int8 *, unint64_t, unint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(v17 + 76) + 0x48))(v16, a2, a3, a4, v11);
  }
  v50 = 16 * v48;
  while (1)
  {
    v51 = *(_QWORD *)(v50 + 24);
    if (v51)
    {
      v52 = *(_DWORD *)(a3 + 16);
      if ((v52 & 0x20) == 0)
      {
        v53 = *(_DWORD *)(v51 + 4) & (v52 >> 8);
        v54 = *(_QWORD *)(v51 + 32);
        v55 = *(unsigned __int16 *)(v54 + 4 * v53);
        if (v55 != 0xFFFF)
        {
          v64 = v53;
          while (1)
          {
            v56 = *(_QWORD *)(v51 + 24);
            v63 = (__int16)v55;
            v57 = (unint64_t *)(v56 + 40 * (__int16)v55);
            v58 = v57[1];
            if (!v58)
              goto LABEL_80;
            if (WTF::equalInternal<unsigned char>(a3, *v57, v58 - 1))
              break;
            v54 = *(_QWORD *)(v51 + 32);
LABEL_80:
            v55 = *(__int16 *)(v54 + 4 * (int)v64 + 2);
            if (v55 == -1)
              goto LABEL_72;
            v64 = *(__int16 *)(v54 + 4 * (int)v64 + 2);
            LOWORD(v55) = *(_WORD *)(v54 + 4 * v55);
          }
          v30 = *(_QWORD *)(v51 + 24);
          if (v30)
            break;
        }
      }
    }
LABEL_72:
    v50 = *(_QWORD *)(v50 + 16);
    if (!v50)
      goto LABEL_33;
  }
  LODWORD(v38) = *(_DWORD *)(v30 + 40 * (int)v63 + 16);
  if ((v38 & 0x3F30) == 0)
    LOWORD(v38) = v38 | 0x40;
  if ((v38 & 0x60) != 0)
  {
    v41 = (uint64_t (**)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))(v30 + 40 * (int)v63 + 32);
    LODWORD(v30) = -1;
    goto LABEL_44;
  }
  a5 = 0;
  LODWORD(v30) = -1;
LABEL_45:
  if ((v38 & 2) != 0)
  {
    if ((*(_BYTE *)(v11 + 20) & 1) != 0)
      JSC::throwTypeError(a2, &v65, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  if ((v38 & 0x10) != 0)
  {
    if ((*(_DWORD *)((16 * *(unsigned int *)a1) | 0x10) & 3) != 2)
    {
      *(_BYTE *)(v11 + 21) = 3;
      *(_QWORD *)v11 = v16;
      *(_DWORD *)(v11 + 16) = v30;
    }
    if ((int)v30 <= 63)
    {
      v47 = (uint64_t)(v16 + 16);
    }
    else
    {
      v47 = *((_QWORD *)v16 + 1) - 8;
      LODWORD(v30) = 63 - v30;
    }
    return JSC::GetterSetter::callSetter(*(_QWORD *)(v47 + 8 * (int)v30), a2, *(_QWORD *)(v11 + 8), (uint64_t)a4, *(_BYTE *)(v11 + 20) & 1);
  }
  if ((v38 & 0x20) == 0)
  {
    if ((v38 & 0x40) != 0
      && ((v62 = *(_QWORD *)(v11 + 8), (unsigned __int8 *)v62 == v16)
       || (v62 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v62 + 5) == 32 && *(unsigned __int8 **)(v62 + 16) == v16))
    {
      if (a5)
      {
        *(_BYTE *)(v11 + 21) = 4;
        *(_QWORD *)v11 = v16;
        *(_QWORD *)(v11 + 24) = a5;
        return a5(*(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28), v16, a4, a3);
      }
      v61 = v38 & 0xBF;
    }
    else
    {
      if ((v38 & 0x3B00) == 0
        || (v60 = *(_QWORD *)(v11 + 8), (unsigned __int8 *)v60 != v16)
        && ((v60 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v60 + 5) != 32 || *(unsigned __int8 **)(v60 + 16) != v16))
      {
LABEL_56:
        v44 = *(_QWORD *)(v11 + 8);
        if ((unsigned __int8 *)v44 == a1
          || (v44 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v44 + 5) == 32 && *(unsigned __int8 **)(v44 + 16) == a1)
        {
          v66 = *(JSC::VM **)(a2 + 56);
          v45 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a1, (uint64_t)v66, a3, (uint64_t)a4, 0, v11, a7, a8, a9);
          v42 = v46 == 0;
          if (v46 && (*(_BYTE *)(v11 + 20) & 1) != 0)
            JSC::throwTypeError(a2, &v66, (uint64_t)v45, v46);
          return v42;
        }
        return JSC::JSObject::definePropertyOnReceiver(a2, a3, (uint64_t)a4, v11, (uint64_t)a5, a6, a7, a8, a9);
      }
      v61 = v38;
    }
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v16, v10, a3, (uint64_t)a4, v61, v11, a7, a8, a9);
    return 1;
  }
  if (a5)
  {
    *(_BYTE *)(v11 + 21) = 5;
    *(_QWORD *)v11 = v16;
    *(_QWORD *)(v11 + 24) = a5;
    a5(*(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28), *(unsigned __int8 **)(v11 + 8), a4, a3);
    return 1;
  }
  return 0;
}

uint64_t JSC::JSObject::definePropertyOnReceiver(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  _BOOL8 v23;
  JSC::VM *v26;
  JSC::VM *v27;

  v12 = *(JSC::VM **)(a1 + 56);
  v26 = v12;
  v13 = *(_QWORD *)(a4 + 8);
  if ((v13 & 0xFFFE000000000002) != 0
    || ((v14 = *(unsigned __int8 *)(v13 + 5), v13) ? (v15 = v14 > 0x16) : (v15 = 0), !v15))
  {
    if ((*(_BYTE *)(a4 + 20) & 1) != 0)
      JSC::throwTypeError(a1, &v26, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  if (v14 == 32)
    v13 = *(_QWORD *)(v13 + 16);
  if ((*(_BYTE *)(a4 + 20) & 4) == 0)
  {
    v17 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    if (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v17 + 0x4C) + 0x90) == JSC::JSObject::defineOwnProperty)
    {
LABEL_17:
      if ((*(_BYTE *)(v17 + 16) & 8) != 0)
      {
        LODWORD(v27) = 0;
        if (JSC::JSObject::getDirectOffset((_DWORD *)v13, v12, a2, (const JSC::PropertyTable *)&v27, a5, a6, a7, a8) != -1&& (v27 & 0x40) != 0)
        {
          return JSC::definePropertyOnReceiverSlow(a1, a2, a3, (_DWORD *)v13, *(_BYTE *)(a4 + 20) & 1);
        }
      }
      if ((*(_BYTE *)(v13 + 6) & 0x20) == 0 || (*(_BYTE *)((16 * *(unsigned int *)v13) | 0x12) & 0x40) != 0)
      {
        v27 = *(JSC::VM **)(a1 + 56);
        v21 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)v13, (uint64_t)v27, a2, a3, 0, a4, a7, a8, a9);
        v23 = v22 == 0;
        if (v22 && (*(_BYTE *)(a4 + 20) & 1) != 0)
          JSC::throwTypeError(a1, &v27, (uint64_t)v21, v22);
        return v23;
      }
      return JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)v13, a1, a2, a3, a4, a9, a6, a7, a8);
    }
  }
  v18 = *(unsigned __int8 *)(v13 + 5);
  if (v18 == 26)
  {
    v19 = (_QWORD *)*((_QWORD *)v12 + 5244);
    if (v19[221] == a2 || v19[246] == a2)
      return JSC::definePropertyOnReceiverSlow(a1, a2, a3, (_DWORD *)v13, *(_BYTE *)(a4 + 20) & 1);
    v20 = v19 + 270;
  }
  else
  {
    if ((v18 - 36) > 1)
      return JSC::definePropertyOnReceiverSlow(a1, a2, a3, (_DWORD *)v13, *(_BYTE *)(a4 + 20) & 1);
    v20 = (_QWORD *)(*((_QWORD *)v12 + 5244) + 1768);
  }
  if (*v20 != a2)
  {
    v17 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    goto LABEL_17;
  }
  return JSC::definePropertyOnReceiverSlow(a1, a2, a3, (_DWORD *)v13, *(_BYTE *)(a4 + 20) & 1);
}

uint64_t JSC::definePropertyOnReceiverSlow(unint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, _DWORD *, uint64_t, uint64_t);
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = *(JSC::VM **)(a1 + 56);
  v32 = 0;
  v33 = v10;
  v23 = 0xFFFFFFFF00000000;
  v25 = 0;
  v26 = 0;
  v24 = a4;
  v27 = 0x20000;
  v28 = 0;
  LOBYTE(v29) = 0;
  v30 = 0;
  v31 = 0;
  v18 = (*(uint64_t (**)(_DWORD *, unint64_t, uint64_t, uint64_t *))(16
                                                                                  * *(unsigned int *)(16 * (*a4 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x68))(a4, a1, a2, &v21);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v11, v12, v13, v14, v15, v16, v17))
  {
LABEL_13:
    result = 0;
    goto LABEL_7;
  }
  if (!v18)
  {
    v34 = a3;
    v35 = 0;
    v36 = 0;
    v37 = 0x700000000;
    goto LABEL_6;
  }
  if ((v23 & 0x32) != 0)
  {
    if ((_DWORD)a5)
      JSC::throwTypeError(a1, &v33, (uint64_t)"Attempted to assign to readonly property.", 42);
    goto LABEL_13;
  }
  if ((v23 & 0x40) == 0 || !v22)
  {
    v35 = 0;
    v36 = 0;
    v37 = 14;
    v34 = a3;
LABEL_6:
    result = (*(uint64_t (**)(_DWORD *, unint64_t, uint64_t, uint64_t *, uint64_t))(16
                                                                                                * *(unsigned int *)(16 * (*a4 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x90))(a4, a1, a2, &v34, a5);
    goto LABEL_7;
  }
  result = v22(*(_QWORD *)(16 * (*a4 & 0xFFFFFFFE) + 0x28), a4, a3, a2);
LABEL_7:
  if (v30)
  {
    v20 = *(_DWORD *)(v29 + 4);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198A41824);
    }
    *(_DWORD *)(v29 + 4) = v20 - 1;
  }
  return result;
}

uint64_t JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(unsigned __int8 *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  JSC::VM *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v58;
  int v59;
  uint64_t (*v60)(_QWORD, unsigned __int8 *, uint64_t, unint64_t);
  int v61;
  JSC::VM *v62;
  JSC::VM *v63;

  v9 = a5;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  v14 = *(JSC::VM **)(a2 + 56);
  v62 = v14;
  v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if ((a3 >> 4)
    && ((a3 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x20)) == 0)
  {
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
    if (v16
      || (v26 = *(_QWORD *)(v15 + 64)) != 0
      && (*(_BYTE *)(v26 + 5) == 1 || *(_DWORD *)(v26 + 80) >= 2u)
      && (JSC::Structure::materializePropertyTable((JSC::Structure *)v15, v14, 1, (const JSC::PropertyTable *)a3, a5, a5, a8, a9), v11 = a3, v9 = a5, v16))
    {
      if (*(_DWORD *)(v16 + 24))
      {
        v17 = *(_QWORD *)(v16 + 16);
        v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
        v19 = *(unsigned int *)(v16 + 8);
        v20 = *(_DWORD *)(v11 + 16);
        if ((v17 & 1) != 0)
        {
          if ((v20 & 0x20) != 0)
            v20 = *(_DWORD *)(v11 + 32);
          v21 = *(_DWORD *)(v16 + 12);
          v22 = (v20 >> 8) & *(_QWORD *)&v21;
          v23 = *(unsigned __int8 *)(v18 + v22);
          if (*(_BYTE *)(v18 + v22))
          {
            v24 = v18 + v19;
            v25 = 1;
            while (v11 != (*(_QWORD *)(v24 + 8 * (v23 - 1)) & 0xFFFFFFFFFFFFLL))
            {
              v22 = ((_DWORD)v22 + v25) & v21;
              v23 = *(unsigned __int8 *)(v18 + v22);
              ++v25;
              if (!*(_BYTE *)(v18 + v22))
                goto LABEL_25;
            }
            goto LABEL_40;
          }
        }
        else
        {
          if ((v20 & 0x20) != 0)
            v20 = *(_DWORD *)(v11 + 32);
          v29 = *(_DWORD *)(v16 + 12);
          v30 = v29 & (v20 >> 8);
          v31 = *(_DWORD *)(v18 + 4 * v30);
          if (v31)
          {
            v32 = v18 + 4 * v19;
            v33 = 1;
            while (1)
            {
              v34 = (v31 - 1);
              if (*(_QWORD *)(v32 + 16 * v34) == v11)
                break;
              v30 = (v30 + v33) & v29;
              v31 = *(_DWORD *)(v18 + 4 * v30);
              ++v33;
              if (!v31)
                goto LABEL_25;
            }
            if (*(_DWORD *)(v32 + 16 * v34 + 8) != -1)
            {
LABEL_40:
              v63 = *(JSC::VM **)(v12 + 56);
              v53 = v9;
              v54 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v13, (uint64_t)v63, v11, a4, 0, v9, a8, a9, a6);
              v56 = v55 == 0;
              if (v55)
              {
                if ((*(_BYTE *)(v53 + 20) & 1) != 0)
                  JSC::throwTypeError(v12, &v63, (uint64_t)v54, v55);
              }
              return v56;
            }
          }
        }
      }
    }
  }
LABEL_25:
  v35 = *(unsigned int *)(v15 + 76);
  if ((_DWORD)v35)
    v36 = v11 == 0;
  else
    v36 = 1;
  if (v36)
    goto LABEL_40;
  v37 = 16 * v35;
  while (1)
  {
    v38 = *(_QWORD *)(v37 + 24);
    if (v38)
    {
      v39 = *(_DWORD *)(v11 + 16);
      if ((v39 & 0x20) == 0)
      {
        v40 = *(_DWORD *)(v38 + 4) & (v39 >> 8);
        v41 = *(_QWORD *)(v38 + 32);
        v42 = *(unsigned __int16 *)(v41 + 4 * v40);
        if (v42 != 0xFFFF)
        {
          while (1)
          {
            v43 = (__int16)v42;
            v44 = (unint64_t *)(*(_QWORD *)(v38 + 24) + 40 * (__int16)v42);
            v45 = v44[1];
            if (!v45)
              goto LABEL_38;
            v61 = v40;
            v46 = v15;
            v47 = v13;
            v48 = v14;
            v49 = v12;
            v50 = a4;
            v51 = v9;
            v52 = v11;
            if (WTF::equalInternal<unsigned char>(v11, *v44, v45 - 1))
              break;
            v41 = *(_QWORD *)(v38 + 32);
            v9 = v51;
            a4 = v50;
            v12 = v49;
            v14 = v48;
            v13 = v47;
            v15 = v46;
            v11 = v52;
            v40 = v61;
LABEL_38:
            v40 = *(__int16 *)(v41 + 4 * v40 + 2);
            if (v40 == -1)
              goto LABEL_31;
            LOWORD(v42) = *(_WORD *)(v41 + 4 * v40);
          }
          v58 = *(_QWORD *)(v38 + 24);
          v9 = v51;
          a4 = v50;
          v12 = v49;
          v14 = v48;
          v13 = v47;
          v15 = v46;
          v11 = v52;
          if (v58)
            break;
        }
      }
    }
LABEL_31:
    v37 = *(_QWORD *)(v37 + 16);
    if (!v37)
      goto LABEL_40;
  }
  v59 = *(_DWORD *)(v58 + 40 * v43 + 16);
  if ((v59 & 0x32) != 0)
  {
    if ((*(_BYTE *)(v9 + 20) & 1) != 0)
      JSC::throwTypeError(v12, &v62, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  else
  {
    if ((v59 & 0x40) == 0
      || (v60 = *(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, unint64_t))(v58 + 40 * v43 + 32)) == 0)
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v13, (uint64_t)v14, v52, a4, v59 & 0xBF, v9, a8, a9, a6);
      return 1;
    }
    return v60(*(_QWORD *)(v46 + 40), v13, a4, v52);
  }
}

uint64_t JSC::JSObject::convertUndecidedForValue(unint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];

  if (a3 > 0xFFFDFFFFFFFFFFFFLL)
    return JSC::JSObject::convertUndecidedToInt32((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (a3 >> 49)
  {
    *(_QWORD *)&a9 = a3 - 0x2000000000000;
    if (BYTE1(dword_1ECF4C5C0))
      return JSC::JSObject::convertUndecidedToDouble((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  v11 = *(unsigned int **)(a1 + 8);
  v12 = *(v11 - 1);
  if ((_DWORD)v12)
    bzero(v11, 8 * v12);
  __dmb(0xAu);
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  LODWORD(v38) = 1;
  WORD2(v38) = 0;
  v39[0] = v39;
  v39[1] = v39;
  v39[2] = a2;
  v39[3] = v13;
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_29;
  v15 = *(unsigned __int8 *)(v13 + 8);
  v16 = (v15 >> 1) & 7;
  if ((v15 & 0x10) != 0)
    v16 = ((v15 & 0xE) + 10) >> 1;
  v17 = *(_DWORD *)(v14 + 4 * v16 + 852);
  v18 = v17 ? 16 * (v17 & 0xFFFFFFFE) : 0;
  if (v18 == v13
    && ((v19 = v15 & 0xFFFFFFE1 | 8, v20 = *(_DWORD *)(v14 + 868), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
      ? (v22 = 16 * (v20 & 0xFFFFFFFE))
      : (v22 = 0),
        *(unsigned __int8 *)(v22 + 8) == v19))
  {
    result = JSC::Structure::didTransitionFromThisStructure(v13, (JSC::DeferredStructureTransitionWatchpointFire *)&v38, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_29:
    result = JSC::Structure::nonPropertyTransitionSlow(a2, v13, 7, (uint64_t)&v38, a5, a6, a7, a8, a9);
    v21 = result;
  }
  *(_DWORD *)a1 = v21 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v21 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v21 + 9);
  v32 = (unsigned __int8 *)(a1 + 4);
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v21 + 8))
  {
    do
    {
      while (1)
      {
        v34 = *v32;
        v35 = __ldxr(v32);
        if (v35 == v34)
          break;
        __clrex();
      }
    }
    while (__stxr(v34 & 0xC0 | *(_BYTE *)(v21 + 8), v32));
  }
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
    result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
  if (BYTE4(v38) == 1)
    result = (uint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v38, v31, v24, v25, v26, v27, v28, v29, v30);
  while (1)
  {
    v33 = (_QWORD *)v39[0];
    if ((_QWORD *)v39[0] == v39)
      break;
    v37 = *(_QWORD *)v39[0];
    v36 = *(_QWORD **)(v39[0] + 8);
    *v36 = *(_QWORD *)v39[0];
    *(_QWORD *)(v37 + 8) = v36;
    *v33 = 0;
    v33[1] = 0;
  }
  return result;
}

uint64_t JSC::JSObject::convertInt32ForValue(JSC::JSObject *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;

  *(_QWORD *)&v8 = a3 - 0x2000000000000;
  if ((unint64_t)(a3 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL || BYTE1(dword_1ECF4C5C0) == 0)
    return JSC::JSObject::convertInt32ToContiguous(a1, a2, a3, a4, a5, a6, a7, a8, v8);
  else
    return JSC::JSObject::convertInt32ToDouble(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

uint64_t JSC::JSObject::convertDoubleToContiguous(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  int v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];

  v11 = *((_QWORD *)this + 1);
  v12 = *(unsigned int *)(v11 - 4);
  if ((_DWORD)v12)
  {
    v13 = v12 - 1;
    do
    {
      a9 = *(double *)(v11 + 8 * v13);
      *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)&a9 + 0x2000000000000;
    }
    while ((unint64_t)v13--);
  }
  __dmb(0xAu);
  v15 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v40) = 1;
  WORD2(v40) = 0;
  v41[0] = v41;
  v41[1] = v41;
  v41[2] = a2;
  v41[3] = v15;
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
    goto LABEL_27;
  v17 = *(unsigned __int8 *)(v15 + 8);
  v18 = (v17 >> 1) & 7;
  if ((v17 & 0x10) != 0)
    v18 = ((v17 & 0xE) + 10) >> 1;
  v19 = *(_DWORD *)(v16 + 4 * v18 + 852);
  v20 = v19 ? 16 * (v19 & 0xFFFFFFFE) : 0;
  if (v20 == v15
    && ((v21 = v17 & 0xFFFFFFE1 | 8, v22 = *(_DWORD *)(v16 + 868), v23 = 16 * (v22 & 0xFFFFFFFE), v22)
      ? (v24 = 16 * (v22 & 0xFFFFFFFE))
      : (v24 = 0),
        *(unsigned __int8 *)(v24 + 8) == v21))
  {
    JSC::Structure::didTransitionFromThisStructure(v15, (JSC::DeferredStructureTransitionWatchpointFire *)&v40, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_27:
    v23 = JSC::Structure::nonPropertyTransitionSlow(a2, v15, 7, (uint64_t)&v40, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v23 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v23 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v23 + 9);
  v33 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v23 + 8))
  {
    do
    {
      while (1)
      {
        v36 = *v33;
        v37 = __ldxr(v33);
        if (v37 == v36)
          break;
        __clrex();
      }
    }
    while (__stxr(v36 & 0xC0 | *(_BYTE *)(v23 + 8), v33));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v40) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v40, v32, v25, v26, v27, v28, v29, v30, v31);
  while (1)
  {
    v34 = (_QWORD *)v41[0];
    if ((_QWORD *)v41[0] == v41)
      break;
    v39 = *(_QWORD *)v41[0];
    v38 = *(_QWORD **)(v41[0] + 8);
    *v38 = *(_QWORD *)v41[0];
    *(_QWORD *)(v39 + 8) = v38;
    *v34 = 0;
    v34[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

uint64_t JSC::JSObject::attemptToInterceptPutByIndexOnHole(const WTF::StringImpl *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  int v17;
  BOOL v18;
  uint64_t v19;

  v14 = *(_QWORD *)(a2 + 56);
  if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v15 = (*(uint64_t (**)(const WTF::StringImpl *, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(a1, a2);
  }
  else
  {
    v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
    if (!v15)
      v15 = *((_QWORD *)a1 + 2);
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v17 = *(_DWORD *)(v14 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
    {
      v19 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, (uint64_t)a6, a7, a8);
      v15 = v19;
    }
    if (*(_QWORD *)(v14 + 16))
      v18 = 1;
    else
      v18 = v15 == 2;
    if (v18)
      return 0;
  }
  else if (v15 == 2)
  {
    return 0;
  }
  return JSC::JSObject::attemptToInterceptPutByIndexOnHoleForPrototype(v15, a2, a1, a3, a4, a5, a6, a8);
}

JSC::Butterfly *JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(JSC::JSObject *this, JSC::VM *a2, JSC::ArrayStorage *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Butterfly *v8;
  unint64_t v11;
  int v12;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[3];

  v8 = a3;
  v11 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v14 = JSC::SparseArrayValueMap::create(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = v14;
    **((_QWORD **)this + 1) = v14;
    if (this)
    {
      if (v14 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    }
  }
  v12 = *(_DWORD *)(v11 + 16);
  if ((v12 & 1) == 0)
  {
    *(_DWORD *)(v11 + 16) = v12 | 1;
    v15 = *((_DWORD *)v8 - 2);
    v16 = *((_DWORD *)v8 - 1);
    if (v16 >= v15)
      v17 = v15;
    else
      v17 = v16;
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        v19 = *((_QWORD *)v8 + i + 2);
        if (v19)
        {
          JSC::SparseArrayValueMap::add((JSC::SparseArrayValueMap *)v11, (uint64_t)this, i, (uint64_t)v32);
          v20 = v32[0];
          *(_QWORD *)(v32[0] + 8) = v19;
          if ((v19 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
          {
            v30 = v20;
            JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
            v20 = v30;
          }
          *(_DWORD *)(v20 + 16) = 0;
        }
      }
    }
    ++*((_DWORD *)a2 + 229);
    if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xE) != 0)
    {
      v21 = 1;
    }
    else if (*(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 > 0xA)
    {
      v21 = 0;
    }
    else
    {
      v21 = (*((unsigned __int8 *)this + 40) >> 6) & 1;
    }
    v22 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
    if (v22 == 65534)
      goto LABEL_24;
    if (v22 == 0xFFFF)
      v22 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    if (v22 < 64)
    {
LABEL_24:
      v23 = 0;
    }
    else if ((v22 - 63) >= 5)
    {
      v28 = (v22 - 64) | ((v22 - 64) >> 1) | (((v22 - 64) | ((v22 - 64) >> 1)) >> 2);
      v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
      v23 = (v29 | HIWORD(v29)) + 1;
    }
    else
    {
      v23 = 4;
    }
    v24 = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xF;
    if ((v24 - 3) >= 7)
    {
      if ((v24 - 10) < 4)
        v25 = 8 * *((unsigned int *)v8 - 1) + 16;
      else
        v25 = 0;
    }
    else
    {
      v25 = 8 * *((unsigned int *)v8 - 1);
    }
    v26 = JSC::Butterfly::resizeArray(v8, a2, (JSC::JSObject *)v23, v21, v25, 0, v21, 16, v31);
    if (!v26)
    {
      __break(0xC471u);
      JUMPOUT(0x198A4242CLL);
    }
    v8 = (JSC::Butterfly *)v26;
    *((_DWORD *)v26 + 2) = 0;
    *((_DWORD *)v26 - 1) = 0;
    *(_QWORD *)v26 = v11;
    if (v11 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    if (*((_BYTE *)a2 + 755))
    {
      __dmb(0xAu);
      *((_QWORD *)this + 1) = v8;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      __dmb(0xAu);
    }
    else
    {
      *((_QWORD *)this + 1) = v8;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    }
    v27 = *((_DWORD *)a2 + 229) - 1;
    *((_DWORD *)a2 + 229) = v27;
    if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v27)
    {
      *((_BYTE *)a2 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
    }
  }
  return v8;
}

uint64_t JSC::SparseArrayEntry::forceSet(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)result = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a3 + 7))
  {
    v7 = result;
    v6 = a5;
    v5 = a3;
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a3);
    a3 = v5;
    result = v7;
    a5 = v6;
  }
  if ((a5 & 0x10) != 0)
    *(_DWORD *)(a3 + 16) |= 4u;
  *(_DWORD *)(result + 8) = a5;
  return result;
}

void JSC::DeferGC::~DeferGC(JSC::DeferGC *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;

  v1 = *(_QWORD *)this;
  v2 = *(_DWORD *)(*(_QWORD *)this + 916) - 1;
  *(_DWORD *)(v1 + 916) = v2;
  if (*(unsigned __int8 *)(v1 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v3 = v2 == 0;
  else
    v3 = 0;
  if (v3)
  {
    *(_BYTE *)(v1 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v1 + 192, 0);
  }
}

JSC::Butterfly *JSC::JSObject::enterDictionaryIndexingMode(JSC::Butterfly *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSObject *v10;
  unsigned int v11;
  JSC::ArrayStorage *v12;

  v10 = this;
  v11 = *((_BYTE *)this + 4) & 0xF;
  if (v11 - 10 < 4)
  {
    v12 = (JSC::ArrayStorage *)*((_QWORD *)this + 1);
    return JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(v10, a2, v12, a4, a5, a6, a7, a8);
  }
  if (v11 <= 9 && v11 != 2)
  {
    this = JSC::JSObject::ensureArrayStorageSlow(this, a2, a3, a4, a5, a6, a7, a8, a9);
    if (this)
    {
      v12 = this;
      return JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(v10, a2, v12, a4, a5, a6, a7, a8);
    }
  }
  return this;
}

void JSC::JSObject::notifyPresenceOfIndexedAccessors(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::JSObject *v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v10 = this;
  for (i = *((unsigned __int8 *)this + 5); i == 51; i = *((unsigned __int8 *)v10 + 5))
    v10 = (JSC::JSObject *)*((_QWORD *)v10 + 8);
  v12 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 & 0x20) == 0)
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    if (!v14 || *(_BYTE *)(*(_QWORD *)(v14 + 2048) + 4) != 2)
    {
      LODWORD(v37) = 1;
      WORD2(v37) = 0;
      v38[0] = v38;
      v38[1] = v38;
      v38[2] = a2;
      v38[3] = v12;
      if (!v14)
        goto LABEL_35;
      v15 = (v13 & 0x10) != 0 ? ((v13 & 0xE) + 10) >> 1 : (v13 >> 1) & 7;
      v16 = *(_DWORD *)(v14 + 4 * v15 + 852);
      v17 = v16 ? 16 * (v16 & 0xFFFFFFFE) : 0;
      if (v17 == v12
        && ((v18 = v13 | 0x20, (v13 & 0x10) != 0) ? (v19 = ((v13 & 0xE) + 10) >> 1) : (v19 = (v13 >> 1) & 7),
            (v20 = *(_DWORD *)(v14 + 4 * v19 + 852), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
          ? (v22 = 16 * (v20 & 0xFFFFFFFE))
          : (v22 = 0),
            *(unsigned __int8 *)(v22 + 8) == v18))
      {
        JSC::Structure::didTransitionFromThisStructure(v12, (JSC::DeferredStructureTransitionWatchpointFire *)&v37, a9, a3, a4, a5, a6, a7, a8);
      }
      else
      {
LABEL_35:
        v21 = JSC::Structure::nonPropertyTransitionSlow(a2, v12, 11, (uint64_t)&v37, a5, a6, a7, a8, a9);
      }
      *(_DWORD *)v10 = v21 >> 4;
      *((_BYTE *)v10 + 6) = *((_BYTE *)v10 + 6) & 0x80 | *(_BYTE *)(v21 + 10);
      *((_BYTE *)v10 + 5) = *(_BYTE *)(v21 + 9);
      v31 = (unsigned __int8 *)v10 + 4;
      if (*((unsigned __int8 *)v10 + 4) != *(unsigned __int8 *)(v21 + 8))
      {
        do
        {
          while (1)
          {
            v33 = *v31;
            v34 = __ldxr(v31);
            if (v34 == v33)
              break;
            __clrex();
          }
        }
        while (__stxr(v33 & 0xC0 | *(_BYTE *)(v21 + 8), v31));
      }
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v10 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v10);
      if (BYTE4(v37) == 1)
        JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v37, v30, v23, v24, v25, v26, v27, v28, v29);
      while (1)
      {
        v32 = (_QWORD *)v38[0];
        if ((_QWORD *)v38[0] == v38)
          break;
        v36 = *(_QWORD *)v38[0];
        v35 = *(_QWORD **)(v38[0] + 8);
        *v35 = *(_QWORD *)v38[0];
        *(_QWORD *)(v36 + 8) = v35;
        *v32 = 0;
        v32[1] = 0;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x12) & 8) != 0)
        JSC::JSGlobalObject::haveABadTime(*(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28), a2, v24, v25, v26, v27, v28, v29);
    }
  }
}

unint64_t JSC::JSObject::setStructure(unint64_t this, JSC::VM *a2, unint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v15;
  unint64_t v16;

  *(_DWORD *)this = a3 >> 4;
  *(_BYTE *)(this + 6) = *(_BYTE *)(this + 6) & 0x80 | *(_BYTE *)(a3 + 10);
  *(_BYTE *)(this + 5) = *(_BYTE *)(a3 + 9);
  v3 = (unsigned __int8 *)(this + 4);
  if (*(unsigned __int8 *)(this + 4) != *(unsigned __int8 *)(a3 + 8))
  {
    do
    {
      while (1)
      {
        v5 = *v3;
        v6 = __ldxr(v3);
        if (v6 == v5)
          break;
        __clrex();
      }
    }
    while (__stxr(v5 & 0xC0 | *(_BYTE *)(a3 + 8), v3));
  }
  v4 = (unsigned __int8 *)(this + 7);
  if (*((_DWORD *)a2 + 190) < *(unsigned __int8 *)(this + 7))
    return this;
  if (!*((_BYTE *)a2 + 755))
  {
    ++*((_QWORD *)a2 + 161);
LABEL_10:
    *v4 = 2;
    v7 = (_QWORD *)*((_QWORD *)a2 + 76);
    v8 = v7[2];
    if (v8 == 510)
    {
      v15 = (_QWORD *)*((_QWORD *)a2 + 76);
      v16 = this;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
      v7 = v15;
      this = v16;
      v8 = 0;
      *v10 = 0;
      v10[1] = 0;
      ++v15[3];
      v11 = *v15;
      v12 = v15 + 1;
      if (*v15)
        v12 = (_QWORD *)*v15;
      *v12 = v10;
      *v15 = v10;
      *v10 = 0;
      v10[1] = v11;
    }
    v9 = *v7 + 8 * v8;
    v7[2] = v8 + 1;
    *(_QWORD *)(v9 + 16) = this;
    return this;
  }
  __dmb(0xBu);
  if (*v4)
    return this;
  v13 = *((unsigned __int8 *)a2 + 755);
  ++*((_QWORD *)a2 + 161);
  if (!v13)
    goto LABEL_10;
  __dmb(0xBu);
  if ((this & 8) != 0)
  {
    if ((*(_BYTE *)(this - 79) & 1) != 0)
      goto LABEL_10;
  }
  else if (*(_DWORD *)(this & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
         && ((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 8 * ((this >> 10) & 0xF) + 0x28) >> (this >> 4)) & 1) != 0)
  {
    goto LABEL_10;
  }
  if (*((_BYTE *)a2 + 347) == 1)
  {
    do
    {
      if (__ldaxr(v4))
      {
        __clrex();
        return this;
      }
    }
    while (__stlxr(1u, v4));
    if ((this & 8) != 0)
    {
      if ((*(_BYTE *)(this - 79) & 1) != 0)
LABEL_26:
        *v4 = 0;
    }
    else if (*(_DWORD *)(this & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
           && ((*(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 8 * ((this >> 10) & 0xF) + 0x28) >> (this >> 4)) & 1) != 0)
    {
      goto LABEL_26;
    }
  }
  else
  {
    this = 1131;
    __break(0xC471u);
  }
  return this;
}

uint64_t JSC::JSObject::createInitialIndexedStorage(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, __n128 a4)
{
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::Butterfly *v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;

  v6 = (unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v7 = v6[12];
  if (v7 == 65534)
    goto LABEL_5;
  if (v7 == 0xFFFF)
    v7 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
  if (v7 < 64)
  {
LABEL_5:
    v8 = 0;
  }
  else if ((v7 - 63) >= 5)
  {
    v18 = (v7 - 64) | ((v7 - 64) >> 1) | (((v7 - 64) | ((v7 - 64) >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v8 = (v19 | HIWORD(v19)) + 1;
  }
  else
  {
    v8 = 4;
  }
  if (a3 <= 3)
    LODWORD(v9) = 3;
  else
    LODWORD(v9) = a3;
  if (a3)
    v9 = v9;
  else
    v9 = 5;
  v10 = v8 + v9;
  v11 = 8 * (v8 + v9);
  if (v10 > 9)
  {
    if (v10 > 0x3EB)
      v12 = v11 + 8;
    else
      v12 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v11 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v12 = (v11 + 23) & 0x1FFFFFFFF0;
  }
  v13 = v12 - 8 * v8 - 8;
  v14 = v13 >> 3;
  v15 = (JSC::Butterfly *)*((_QWORD *)this + 1);
  v16 = v13 & 0x7FFFFFFF8;
  if (v15)
  {
    result = JSC::Butterfly::growArrayRight(v15, a2, this, (JSC::Structure *)v6, v8, 0, 0, v16);
  }
  else
  {
    v20 = 0;
    result = JSC::Butterfly::create(a2, a4, (uint64_t)this, 0, v8, 1, &v20, v13 & 0x7FFFFFFF8, v16);
  }
  *(_DWORD *)(result - 8) = a3;
  if (v14 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198A42BA4);
  }
  *(_DWORD *)(result - 4) = v14;
  return result;
}

uint64_t JSC::JSObject::createInitialUndecided(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t InitialIndexedStorage;
  double v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;

  ++*((_DWORD *)a2 + 229);
  InitialIndexedStorage = JSC::JSObject::createInitialIndexedStorage(this, a2, a3, a4);
  v14 = *(_DWORD *)this;
  LODWORD(v42) = 1;
  WORD2(v42) = 0;
  v43[0] = v43;
  v43[1] = v43;
  v43[2] = a2;
  v44 = 16 * (v14 & 0xFFFFFFFE);
  v15 = *(_QWORD *)(v44 + 0x28);
  if (!v15)
    goto LABEL_16;
  v16 = *(unsigned __int8 *)(16 * (v14 & 0xFFFFFFFE) + 8);
  v17 = (v16 >> 1) & 7;
  if ((v16 & 0x10) != 0)
    v17 = ((v16 & 0xE) + 10) >> 1;
  v18 = *(_DWORD *)(v15 + 4 * v17 + 852);
  v19 = v18 ? 16 * (v18 & 0xFFFFFFFE) : 0;
  if (v19 == 16 * (v14 & 0xFFFFFFFE)
    && ((v20 = v16 | 2, (v16 & 0x10) != 0) ? (v21 = ((v16 & 0xC | 2) + 10) >> 1) : (v21 = ((v16 | 2) >> 1) & 7),
        (v22 = *(_DWORD *)(v15 + 4 * v21 + 852), v23 = 16 * (v22 & 0xFFFFFFFE), v22)
      ? (v24 = 16 * (v22 & 0xFFFFFFFE))
      : (v24 = 0),
        *(unsigned __int8 *)(v24 + 8) == v20))
  {
    JSC::Structure::didTransitionFromThisStructure(16 * (v14 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v42, v13, v6, v7, v8, v9, v10, v11);
  }
  else
  {
LABEL_16:
    v23 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v14 & 0xFFFFFFFE), 4, (uint64_t)&v42, v8, v9, v10, v11, v13);
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v14 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = InitialIndexedStorage;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = InitialIndexedStorage;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v23 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v23 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v23 + 9);
  v33 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v23 + 8))
  {
    do
    {
      while (1)
      {
        v34 = *v33;
        v35 = __ldxr(v33);
        if (v35 == v34)
          break;
        __clrex();
      }
    }
    while (__stxr(v34 & 0xC0 | *(_BYTE *)(v23 + 8), v33));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v42) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v42, v32, v25, v26, v27, v28, v29, v30, v31);
  while (1)
  {
    v38 = (_QWORD *)v43[0];
    if ((_QWORD *)v43[0] == v43)
      break;
    v37 = *(_QWORD *)v43[0];
    v36 = *(_QWORD **)(v43[0] + 8);
    *v36 = *(_QWORD *)v43[0];
    *(_QWORD *)(v37 + 8) = v36;
    *v38 = 0;
    v38[1] = 0;
  }
  v39 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v39;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v40 = v39 == 0;
  else
    v40 = 0;
  if (v40)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  return InitialIndexedStorage;
}

unsigned int *JSC::JSObject::createInitialInt32(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, __n128 a4)
{
  unsigned int *InitialIndexedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;

  ++*((_DWORD *)a2 + 229);
  InitialIndexedStorage = (unsigned int *)JSC::JSObject::createInitialIndexedStorage(this, a2, a3, a4);
  v14 = InitialIndexedStorage;
  v15 = *(InitialIndexedStorage - 1);
  if ((_DWORD)v15)
    bzero(InitialIndexedStorage, 8 * v15);
  v16 = *(_DWORD *)this;
  LODWORD(v43) = 1;
  WORD2(v43) = 0;
  v44[0] = v44;
  v44[1] = v44;
  v44[2] = a2;
  v45 = 16 * (v16 & 0xFFFFFFFE);
  v17 = *(_QWORD *)(v45 + 0x28);
  if (!v17)
    goto LABEL_34;
  v18 = *(unsigned __int8 *)(16 * (v16 & 0xFFFFFFFE) + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
  v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
  if (v21 == 16 * (v16 & 0xFFFFFFFE)
    && ((v22 = v18 & 0xFFFFFFE1 | 4, v23 = *(_DWORD *)(v17 + 860), v24 = 16 * (v23 & 0xFFFFFFFE), v23)
      ? (v25 = 16 * (v23 & 0xFFFFFFFE))
      : (v25 = 0),
        *(unsigned __int8 *)(v25 + 8) == v22))
  {
    JSC::Structure::didTransitionFromThisStructure(16 * (v16 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v43, v13, v7, v8, v9, v10, v11, v12);
  }
  else
  {
LABEL_34:
    v24 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v16 & 0xFFFFFFFE), 5, (uint64_t)&v43, v9, v10, v11, v12, v13);
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v16 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v24 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v24 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v24 + 9);
  v34 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v24 + 8))
  {
    do
    {
      while (1)
      {
        v39 = *v34;
        v40 = __ldxr(v34);
        if (v40 == v39)
          break;
        __clrex();
      }
    }
    while (__stxr(v39 & 0xC0 | *(_BYTE *)(v24 + 8), v34));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v43) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v43, v33, v26, v27, v28, v29, v30, v31, v32);
  while (1)
  {
    v35 = (_QWORD *)v44[0];
    if ((_QWORD *)v44[0] == v44)
      break;
    v42 = *(_QWORD *)v44[0];
    v41 = *(_QWORD **)(v44[0] + 8);
    *v41 = *(_QWORD *)v44[0];
    *(_QWORD *)(v42 + 8) = v41;
    *v35 = 0;
    v35[1] = 0;
  }
  v36 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v36;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v37 = v36 == 0;
  else
    v37 = 0;
  if (v37)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  return v14;
}

unsigned int *JSC::JSObject::createInitialDouble(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, __n128 a4)
{
  unsigned int *InitialIndexedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;

  ++*((_DWORD *)a2 + 229);
  InitialIndexedStorage = (unsigned int *)JSC::JSObject::createInitialIndexedStorage(this, a2, a3, a4);
  v14 = InitialIndexedStorage;
  v15 = *(InitialIndexedStorage - 1);
  if ((_DWORD)v15)
    memset_pattern16(InitialIndexedStorage, &memset_pattern_99, 8 * v15);
  v16 = *(_DWORD *)this;
  LODWORD(v43) = 1;
  WORD2(v43) = 0;
  v44[0] = v44;
  v44[1] = v44;
  v44[2] = a2;
  v45 = 16 * (v16 & 0xFFFFFFFE);
  v17 = *(_QWORD *)(v45 + 0x28);
  if (!v17)
    goto LABEL_34;
  v18 = *(unsigned __int8 *)(16 * (v16 & 0xFFFFFFFE) + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
  v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
  if (v21 == 16 * (v16 & 0xFFFFFFFE)
    && ((v22 = v18 & 0xFFFFFFE1 | 6, v23 = *(_DWORD *)(v17 + 864), v24 = 16 * (v23 & 0xFFFFFFFE), v23)
      ? (v25 = 16 * (v23 & 0xFFFFFFFE))
      : (v25 = 0),
        *(unsigned __int8 *)(v25 + 8) == v22))
  {
    JSC::Structure::didTransitionFromThisStructure(16 * (v16 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v43, v13, v7, v8, v9, v10, v11, v12);
  }
  else
  {
LABEL_34:
    v24 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v16 & 0xFFFFFFFE), 6, (uint64_t)&v43, v9, v10, v11, v12, v13);
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v16 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v24 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v24 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v24 + 9);
  v34 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v24 + 8))
  {
    do
    {
      while (1)
      {
        v39 = *v34;
        v40 = __ldxr(v34);
        if (v40 == v39)
          break;
        __clrex();
      }
    }
    while (__stxr(v39 & 0xC0 | *(_BYTE *)(v24 + 8), v34));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v43) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v43, v33, v26, v27, v28, v29, v30, v31, v32);
  while (1)
  {
    v35 = (_QWORD *)v44[0];
    if ((_QWORD *)v44[0] == v44)
      break;
    v42 = *(_QWORD *)v44[0];
    v41 = *(_QWORD **)(v44[0] + 8);
    *v41 = *(_QWORD *)v44[0];
    *(_QWORD *)(v42 + 8) = v41;
    *v35 = 0;
    v35[1] = 0;
  }
  v36 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v36;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v37 = v36 == 0;
  else
    v37 = 0;
  if (v37)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  return v14;
}

unsigned int *JSC::JSObject::createInitialContiguous(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, __n128 a4)
{
  unsigned int *InitialIndexedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;

  ++*((_DWORD *)a2 + 229);
  InitialIndexedStorage = (unsigned int *)JSC::JSObject::createInitialIndexedStorage(this, a2, a3, a4);
  v14 = InitialIndexedStorage;
  v15 = *(InitialIndexedStorage - 1);
  if ((_DWORD)v15)
    bzero(InitialIndexedStorage, 8 * v15);
  v16 = *(_DWORD *)this;
  LODWORD(v43) = 1;
  WORD2(v43) = 0;
  v44[0] = v44;
  v44[1] = v44;
  v44[2] = a2;
  v45 = 16 * (v16 & 0xFFFFFFFE);
  v17 = *(_QWORD *)(v45 + 0x28);
  if (!v17)
    goto LABEL_34;
  v18 = *(unsigned __int8 *)(16 * (v16 & 0xFFFFFFFE) + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
  v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
  if (v21 == 16 * (v16 & 0xFFFFFFFE)
    && ((v22 = v18 & 0xFFFFFFE1 | 8, v23 = *(_DWORD *)(v17 + 868), v24 = 16 * (v23 & 0xFFFFFFFE), v23)
      ? (v25 = 16 * (v23 & 0xFFFFFFFE))
      : (v25 = 0),
        *(unsigned __int8 *)(v25 + 8) == v22))
  {
    JSC::Structure::didTransitionFromThisStructure(16 * (v16 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v43, v13, v7, v8, v9, v10, v11, v12);
  }
  else
  {
LABEL_34:
    v24 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v16 & 0xFFFFFFFE), 7, (uint64_t)&v43, v9, v10, v11, v12, v13);
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v16 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v14;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v24 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v24 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v24 + 9);
  v34 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v24 + 8))
  {
    do
    {
      while (1)
      {
        v39 = *v34;
        v40 = __ldxr(v34);
        if (v40 == v39)
          break;
        __clrex();
      }
    }
    while (__stxr(v39 & 0xC0 | *(_BYTE *)(v24 + 8), v34));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v43) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v43, v33, v26, v27, v28, v29, v30, v31, v32);
  while (1)
  {
    v35 = (_QWORD *)v44[0];
    if ((_QWORD *)v44[0] == v44)
      break;
    v42 = *(_QWORD *)v44[0];
    v41 = *(_QWORD **)(v44[0] + 8);
    *v41 = *(_QWORD *)v44[0];
    *(_QWORD *)(v42 + 8) = v41;
    *v35 = 0;
    v35[1] = 0;
  }
  v36 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v36;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v37 = v36 == 0;
  else
    v37 = 0;
  if (v37)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  return v14;
}

_QWORD *JSC::createArrayStorageButterflyImpl(JSC::VM *a1, JSC::JSObject *a2, JSC::Structure *a3, int a4, unsigned int a5, JSC::Butterfly *this, int a7, __n128 a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;

  v11 = *((unsigned __int16 *)a3 + 12);
  if (v11 == 65534)
    goto LABEL_5;
  if (v11 == 0xFFFF)
    v11 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 84);
  if (v11 < 64)
  {
LABEL_5:
    v12 = 0;
  }
  else if ((v11 - 63) >= 5)
  {
    v18 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v12 = (v19 | HIWORD(v19)) + 1;
  }
  else
  {
    v12 = 4;
  }
  v13 = 8 * a5;
  v14 = v13 + 16;
  if (this)
  {
    v15 = (_QWORD *)JSC::Butterfly::growArrayRight(this, a1, a2, a3, v12, 0, 0, v14);
  }
  else
  {
    v20 = 0;
    v15 = (_QWORD *)JSC::Butterfly::create(a1, a8, (uint64_t)a2, 0, v12, 1, &v20, v13 + 16, v14);
  }
  v16 = v15;
  if (v15)
  {
    *((_DWORD *)v15 - 2) = a4;
    if (a5 >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198A43754);
    }
    *((_DWORD *)v15 - 1) = a5;
    *v15 = 0;
    v15[1] = 0;
    if (a5)
      bzero(v15 + 2, 8 * a5);
  }
  else if (!a7)
  {
    WTFCrashWithInfoImpl(1278, "./runtime/JSObject.cpp", "Butterfly *JSC::createArrayStorageButterflyImpl(VM &, JSObject *, Structure *, unsigned int, unsigned int, Butterfly *, AllocationFailureMode)");
  }
  return v16;
}

JSC::Butterfly *JSC::JSObject::createArrayStorage(JSC::Butterfly **this, JSC::VM *a2, int a3, unsigned int a4, __n128 a5)
{
  int v7;
  JSC::Structure *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Butterfly *ArrayStorageButterflyImpl;
  double v15;
  uint64_t v16;
  JSC::Butterfly **v17;
  uint64_t v18;
  JSC::Butterfly *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned __int8 *v43;
  int v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];

  ++*((_DWORD *)a2 + 229);
  v7 = *(_DWORD *)this;
  v8 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  ArrayStorageButterflyImpl = (JSC::Butterfly *)JSC::createArrayStorageButterflyImpl(a2, (JSC::JSObject *)this, v8, a3, a4, this[1], 0, a5);
  LODWORD(v48) = 1;
  WORD2(v48) = 0;
  v49[0] = v49;
  v49[1] = v49;
  v49[2] = a2;
  v49[3] = 16 * (v7 & 0xFFFFFFFE);
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v17 = this;
    do
    {
      v18 = *(_QWORD *)(v16 + 40);
      if (v18)
      {
        if (*(_BYTE *)(*(_QWORD *)(v18 + 2048) + 4) == 2)
          break;
      }
      v19 = *(JSC::Butterfly **)(v16 + 48);
      if (!v19)
        v19 = v17[2];
      if (v19 == (JSC::Butterfly *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          break;
        v20 = 8;
        v21 = 10;
        goto LABEL_13;
      }
      v16 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
      v17 = (JSC::Butterfly **)v19;
    }
    while ((*(_BYTE *)(v16 + 8) & 0x20) == 0);
  }
  v20 = 9;
  v21 = 12;
LABEL_13:
  v22 = *(_QWORD *)(16 * (v7 & 0xFFFFFFFE) + 0x28);
  if (!v22)
    goto LABEL_40;
  v23 = *(unsigned __int8 *)(16 * (v7 & 0xFFFFFFFE) + 8);
  v24 = (v23 >> 1) & 7;
  if ((v23 & 0x10) != 0)
    v24 = ((v23 & 0xE) + 10) >> 1;
  v25 = *(_DWORD *)(v22 + 4 * v24 + 852);
  v26 = v25 ? 16 * (v25 & 0xFFFFFFFE) : 0;
  if ((JSC::Structure *)v26 == v8
    && ((v27 = v23 & 0xFFFFFFE1 | v21,
         v28 = *(_DWORD *)(v22 + 4 * (v21 >> 1) + 852),
         v29 = 16 * (v28 & 0xFFFFFFFE),
         v28)
      ? (v30 = 16 * (v28 & 0xFFFFFFFE))
      : (v30 = 0),
        *(unsigned __int8 *)(v30 + 8) == v27))
  {
    JSC::Structure::didTransitionFromThisStructure(16 * (v7 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v48, v15, v20, v9, v10, v11, v12, v13);
  }
  else
  {
LABEL_40:
    v29 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v7 & 0xFFFFFFFE), v20, (uint64_t)&v48, v10, v11, v12, v13, v15);
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v7 | 1;
    __dmb(0xAu);
    this[1] = ArrayStorageButterflyImpl;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    this[1] = ArrayStorageButterflyImpl;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v29 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v29 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v29 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v29 + 8))
  {
    v43 = (unsigned __int8 *)this + 4;
    do
    {
      while (1)
      {
        v44 = *v43;
        v45 = __ldxr(v43);
        if (v45 == v44)
          break;
        __clrex();
      }
    }
    while (__stxr(v44 & 0xC0 | *(_BYTE *)(v29 + 8), v43));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v48) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v48, v38, v31, v32, v33, v34, v35, v36, v37);
  while (1)
  {
    v39 = (_QWORD *)v49[0];
    if ((_QWORD *)v49[0] == v49)
      break;
    v47 = *(_QWORD *)v49[0];
    v46 = *(_QWORD **)(v49[0] + 8);
    *v46 = *(_QWORD *)v49[0];
    *(_QWORD *)(v47 + 8) = v46;
    *v39 = 0;
    v39[1] = 0;
  }
  v40 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v40;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v41 = v40 == 0;
  else
    v41 = 0;
  if (v41)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
  return ArrayStorageButterflyImpl;
}

unint64_t JSC::ArrayStorage::optimalVectorLength(JSC::ArrayStorage *this, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a3 <= 4)
    v3 = 4;
  else
    v3 = a3;
  v4 = a2 + this;
  v5 = 8 * (v4 + v3);
  v6 = v5 + 24;
  if ((unint64_t)(v5 + 24) > 0x50)
  {
    if (v6 <= 0x1F60)
      v6 = *(unsigned int *)((char *)&JSC::MarkedSpace::s_sizeClassForSizeStep
                           + (((unint64_t)(v5 + 39) >> 2) & 0x3FFFFFFFFFFFFFFCLL));
  }
  else
  {
    v6 = (v5 + 39) & 0xFFFFFFFFFFFFFFF0;
  }
  return (v6 - 8 * v4 + 0x7FFFFFFE8) >> 3;
}

uint64_t JSC::JSObject::convertUndecidedToInt32(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];

  v11 = (unsigned int *)*((_QWORD *)this + 1);
  v12 = *(v11 - 1);
  if ((_DWORD)v12)
    bzero(v11, 8 * v12);
  v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v38) = 1;
  WORD2(v38) = 0;
  v39[0] = v39;
  v39[1] = v39;
  v39[2] = a2;
  v39[3] = v13;
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_26;
  v15 = *(unsigned __int8 *)(v13 + 8);
  v16 = (v15 >> 1) & 7;
  if ((v15 & 0x10) != 0)
    v16 = ((v15 & 0xE) + 10) >> 1;
  v17 = *(_DWORD *)(v14 + 4 * v16 + 852);
  v18 = v17 ? 16 * (v17 & 0xFFFFFFFE) : 0;
  if (v18 == v13
    && ((v19 = v15 & 0xFFFFFFE1 | 4, v20 = *(_DWORD *)(v14 + 860), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
      ? (v22 = 16 * (v20 & 0xFFFFFFFE))
      : (v22 = 0),
        *(unsigned __int8 *)(v22 + 8) == v19))
  {
    JSC::Structure::didTransitionFromThisStructure(v13, (JSC::DeferredStructureTransitionWatchpointFire *)&v38, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_26:
    v21 = JSC::Structure::nonPropertyTransitionSlow(a2, v13, 5, (uint64_t)&v38, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v21 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v21 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v21 + 9);
  v31 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v21 + 8))
  {
    do
    {
      while (1)
      {
        v34 = *v31;
        v35 = __ldxr(v31);
        if (v35 == v34)
          break;
        __clrex();
      }
    }
    while (__stxr(v34 & 0xC0 | *(_BYTE *)(v21 + 8), v31));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v38) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v38, v30, v23, v24, v25, v26, v27, v28, v29);
  while (1)
  {
    v32 = (_QWORD *)v39[0];
    if ((_QWORD *)v39[0] == v39)
      break;
    v37 = *(_QWORD *)v39[0];
    v36 = *(_QWORD **)(v39[0] + 8);
    *v36 = *(_QWORD *)v39[0];
    *(_QWORD *)(v37 + 8) = v36;
    *v32 = 0;
    v32[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

uint64_t JSC::JSObject::convertUndecidedToDouble(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];

  v11 = (unsigned int *)*((_QWORD *)this + 1);
  v12 = *(v11 - 1);
  if ((_DWORD)v12)
    memset_pattern16(v11, &memset_pattern_99, 8 * v12);
  v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v38) = 1;
  WORD2(v38) = 0;
  v39[0] = v39;
  v39[1] = v39;
  v39[2] = a2;
  v39[3] = v13;
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_26;
  v15 = *(unsigned __int8 *)(v13 + 8);
  v16 = (v15 >> 1) & 7;
  if ((v15 & 0x10) != 0)
    v16 = ((v15 & 0xE) + 10) >> 1;
  v17 = *(_DWORD *)(v14 + 4 * v16 + 852);
  v18 = v17 ? 16 * (v17 & 0xFFFFFFFE) : 0;
  if (v18 == v13
    && ((v19 = v15 & 0xFFFFFFE1 | 6, v20 = *(_DWORD *)(v14 + 864), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
      ? (v22 = 16 * (v20 & 0xFFFFFFFE))
      : (v22 = 0),
        *(unsigned __int8 *)(v22 + 8) == v19))
  {
    JSC::Structure::didTransitionFromThisStructure(v13, (JSC::DeferredStructureTransitionWatchpointFire *)&v38, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_26:
    v21 = JSC::Structure::nonPropertyTransitionSlow(a2, v13, 6, (uint64_t)&v38, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v21 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v21 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v21 + 9);
  v31 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v21 + 8))
  {
    do
    {
      while (1)
      {
        v34 = *v31;
        v35 = __ldxr(v31);
        if (v35 == v34)
          break;
        __clrex();
      }
    }
    while (__stxr(v34 & 0xC0 | *(_BYTE *)(v21 + 8), v31));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v38) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v38, v30, v23, v24, v25, v26, v27, v28, v29);
  while (1)
  {
    v32 = (_QWORD *)v39[0];
    if ((_QWORD *)v39[0] == v39)
      break;
    v37 = *(_QWORD *)v39[0];
    v36 = *(_QWORD **)(v39[0] + 8);
    *v36 = *(_QWORD *)v39[0];
    *(_QWORD *)(v37 + 8) = v36;
    *v32 = 0;
    v32[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

uint64_t JSC::JSObject::convertUndecidedToContiguous(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];

  v11 = (unsigned int *)*((_QWORD *)this + 1);
  v12 = *(v11 - 1);
  if ((_DWORD)v12)
    bzero(v11, 8 * v12);
  __dmb(0xAu);
  v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v38) = 1;
  WORD2(v38) = 0;
  v39[0] = v39;
  v39[1] = v39;
  v39[2] = a2;
  v39[3] = v13;
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_26;
  v15 = *(unsigned __int8 *)(v13 + 8);
  v16 = (v15 >> 1) & 7;
  if ((v15 & 0x10) != 0)
    v16 = ((v15 & 0xE) + 10) >> 1;
  v17 = *(_DWORD *)(v14 + 4 * v16 + 852);
  v18 = v17 ? 16 * (v17 & 0xFFFFFFFE) : 0;
  if (v18 == v13
    && ((v19 = v15 & 0xFFFFFFE1 | 8, v20 = *(_DWORD *)(v14 + 868), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
      ? (v22 = 16 * (v20 & 0xFFFFFFFE))
      : (v22 = 0),
        *(unsigned __int8 *)(v22 + 8) == v19))
  {
    JSC::Structure::didTransitionFromThisStructure(v13, (JSC::DeferredStructureTransitionWatchpointFire *)&v38, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_26:
    v21 = JSC::Structure::nonPropertyTransitionSlow(a2, v13, 7, (uint64_t)&v38, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v21 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v21 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v21 + 9);
  v31 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v21 + 8))
  {
    do
    {
      while (1)
      {
        v34 = *v31;
        v35 = __ldxr(v31);
        if (v35 == v34)
          break;
        __clrex();
      }
    }
    while (__stxr(v34 & 0xC0 | *(_BYTE *)(v21 + 8), v31));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v38) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v38, v30, v23, v24, v25, v26, v27, v28, v29);
  while (1)
  {
    v32 = (_QWORD *)v39[0];
    if ((_QWORD *)v39[0] == v39)
      break;
    v37 = *(_QWORD *)v39[0];
    v36 = *(_QWORD **)(v39[0] + 8);
    *v36 = *(_QWORD *)v39[0];
    *(_QWORD *)(v37 + 8) = v36;
    *v32 = 0;
    v32[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

unint64_t JSC::JSObject::constructConvertedArrayStorageWithoutCopyingElements(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  __int128 *v24;
  _OWORD *i;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  unint64_t v37;

  v8 = a3;
  v10 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
  if (v10 == 65534)
    goto LABEL_5;
  if (v10 == 0xFFFF)
    v10 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
  if (v10 < 64)
  {
LABEL_5:
    v11 = 0;
  }
  else if ((v10 - 63) >= 5)
  {
    v29 = (v10 - 64) | ((v10 - 64) >> 1) | (((v10 - 64) | ((v10 - 64) >> 1)) >> 2);
    v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
    v11 = (v30 | HIWORD(v30)) + 1;
  }
  else
  {
    v11 = 4;
  }
  v12 = *(_DWORD *)(*((_QWORD *)this + 1) - 8);
  v13 = v11 + a3;
  v14 = 8 * v13;
  if (v13 <= 0x3E9
    && (v15 = *(_QWORD *)((char *)a2 + (((unint64_t)(v14 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
  {
    v16 = *(unsigned int *)(v15 + 60);
    SlowCase = *(_QWORD *)(v15 + 24);
    if (SlowCase < *(_QWORD *)(v15 + 32))
    {
LABEL_9:
      *(_QWORD *)(v15 + 24) = SlowCase + v16;
      goto LABEL_10;
    }
    SlowCase = *(_QWORD *)(v15 + 40);
    if ((SlowCase & 1) == 0)
    {
      v31 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 48);
      *(_QWORD *)(v15 + 32) = SlowCase + HIDWORD(v31);
      *(_QWORD *)(v15 + 40) = SlowCase + (int)v31;
      goto LABEL_9;
    }
    v37 = v11;
    v36 = v12;
    v32 = (char *)a2 + 192;
    v33 = *(_QWORD *)((char *)a2 + (((unint64_t)(v14 + 39) >> 1) & 0xFFFFFFFF8) + 6736);
    JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
    v34 = v33;
    v35 = v32;
    v12 = v36;
    v11 = v37;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v34, v35, v16, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v14 + 24, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A441F8);
    }
  }
LABEL_10:
  v18 = *((_QWORD *)this + 1) - 8;
  if (v11 > 0x1E)
  {
    v24 = (__int128 *)(v18 - 8 * v11);
    for (i = (_OWORD *)SlowCase; i != (_OWORD *)(((8 * v11) & 0x7FFFFFFE0) + SlowCase); i += 2)
    {
      v26 = *v24;
      v27 = v24[1];
      v24 += 2;
      *i = v26;
      i[1] = v27;
    }
    while (i != (_OWORD *)(8 * v11 + SlowCase))
    {
      v28 = *(_QWORD *)v24;
      v24 = (__int128 *)((char *)v24 + 8);
      *(_QWORD *)i = v28;
      i = (_OWORD *)((char *)i + 8);
    }
  }
  else if (v11)
  {
    v19 = -(uint64_t)v11;
    v20 = (_QWORD *)SlowCase;
    do
      *v20++ = *(_QWORD *)(v18 + 8 * v19);
    while (!__CFADD__(v19++, 1));
  }
  if (v8 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198A44218);
  }
  v22 = SlowCase + 8 * v11;
  *(_DWORD *)v22 = v12;
  *(_DWORD *)(v22 + 4) = v8;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 8) = 0;
  return v22 + 8;
}

unint64_t JSC::JSObject::convertUndecidedToArrayStorage(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unsigned __int8 *v40;
  _QWORD *v41;
  int v42;
  BOOL v43;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;

  ++*(_DWORD *)(a2 + 916);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4);
  v12 = JSC::JSObject::constructConvertedArrayStorageWithoutCopyingElements((JSC::JSObject *)a1, (JSC::VM *)a2, v11, a4, a5, a6, a7, a8);
  v20 = v12;
  if ((_DWORD)v11)
    bzero((void *)(v12 + 16), 8 * v11);
  v21 = *(_DWORD *)a1;
  LODWORD(v49) = 1;
  WORD2(v49) = 0;
  v50[0] = v50;
  v50[1] = v50;
  v50[2] = a2;
  v51 = 16 * (v21 & 0xFFFFFFFE);
  v22 = *(_QWORD *)(v51 + 0x28);
  if (!v22)
    goto LABEL_40;
  v23 = *(unsigned __int8 *)(16 * (v21 & 0xFFFFFFFE) + 8);
  v24 = (v23 >> 1) & 7;
  if ((v23 & 0x10) != 0)
    v24 = ((v23 & 0xE) + 10) >> 1;
  v25 = *(_DWORD *)(v22 + 4 * v24 + 852);
  v26 = v25 ? 16 * (v25 & 0xFFFFFFFE) : 0;
  if (v26 != 16 * (v21 & 0xFFFFFFFE))
    goto LABEL_40;
  v27 = v23 & 0xFFFFFFE1 | 0xA;
  if ((_DWORD)a3 == 9)
    v23 = v23 & 0xFFFFFFE1 | 0xC;
  if ((_DWORD)a3 == 8)
    v23 = v27;
  v28 = (v23 >> 1) & 7;
  if ((v23 & 0x10) != 0)
    v28 = ((v23 & 0xE) + 10) >> 1;
  v29 = *(_DWORD *)(v22 + 4 * v28 + 852);
  v30 = 16 * (v29 & 0xFFFFFFFE);
  v31 = v29 ? 16 * (v29 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v31 + 8) == v23)
    JSC::Structure::didTransitionFromThisStructure(16 * (v21 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v49, v19, v13, v14, v15, v16, v17, v18);
  else
LABEL_40:
    v30 = JSC::Structure::nonPropertyTransitionSlow((JSC::VM *)a2, 16 * (v21 & 0xFFFFFFFE), a3, (uint64_t)&v49, v15, v16, v17, v18, v19);
  if (*(_BYTE *)(a2 + 755))
  {
    *(_DWORD *)a1 = v21 | 1;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  *(_DWORD *)a1 = v30 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v30 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v30 + 9);
  v40 = (unsigned __int8 *)(a1 + 4);
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v30 + 8))
  {
    do
    {
      while (1)
      {
        v45 = *v40;
        v46 = __ldxr(v40);
        if (v46 == v45)
          break;
        __clrex();
      }
    }
    while (__stxr(v45 & 0xC0 | *(_BYTE *)(v30 + 8), v40));
  }
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  if (BYTE4(v49) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v49, v39, v32, v33, v34, v35, v36, v37, v38);
  while (1)
  {
    v41 = (_QWORD *)v50[0];
    if ((_QWORD *)v50[0] == v50)
      break;
    v48 = *(_QWORD *)v50[0];
    v47 = *(_QWORD **)(v50[0] + 8);
    *v47 = *(_QWORD *)v50[0];
    *(_QWORD *)(v48 + 8) = v47;
    *v41 = 0;
    v41[1] = 0;
  }
  v42 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v42;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v43 = v42 == 0;
  else
    v43 = 0;
  if (v43)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v20;
}

unint64_t JSC::JSObject::convertUndecidedToArrayStorage(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSObject *v9;
  uint64_t v10;
  JSC::JSObject *v11;
  uint64_t v12;

  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v8 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v9 = this;
    do
    {
      v10 = *(_QWORD *)(v8 + 40);
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 2048) + 4) == 2)
          break;
      }
      v11 = *(JSC::JSObject **)(v8 + 48);
      if (!v11)
        v11 = (JSC::JSObject *)*((_QWORD *)v9 + 2);
      if (v11 == (JSC::JSObject *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          break;
        v12 = 8;
        return JSC::JSObject::convertUndecidedToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
      }
      v8 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v9 = v11;
    }
    while ((*(_BYTE *)(v8 + 8) & 0x20) == 0);
  }
  v12 = 9;
  return JSC::JSObject::convertUndecidedToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSObject::convertInt32ToDouble(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];

  v11 = *((_QWORD *)this + 1);
  v12 = *(_DWORD *)(v11 - 4);
  if (v12)
  {
    v13 = v12 - 1;
    do
    {
      v14 = *(_QWORD *)(v11 + 8 * v13);
      a9 = (double)(int)v14;
      if (v14 <= 0xFFFDFFFFFFFFFFFFLL)
        a9 = NAN;
      *(double *)(v11 + 8 * v13) = a9;
    }
    while ((unint64_t)v13--);
  }
  v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v41) = 1;
  WORD2(v41) = 0;
  v42[0] = v42;
  v42[1] = v42;
  v42[2] = a2;
  v42[3] = v16;
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
    goto LABEL_29;
  v18 = *(unsigned __int8 *)(v16 + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
  v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
  if (v21 == v16
    && ((v22 = v18 & 0xFFFFFFE1 | 6, v23 = *(_DWORD *)(v17 + 864), v24 = 16 * (v23 & 0xFFFFFFFE), v23)
      ? (v25 = 16 * (v23 & 0xFFFFFFFE))
      : (v25 = 0),
        *(unsigned __int8 *)(v25 + 8) == v22))
  {
    JSC::Structure::didTransitionFromThisStructure(v16, (JSC::DeferredStructureTransitionWatchpointFire *)&v41, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_29:
    v24 = JSC::Structure::nonPropertyTransitionSlow(a2, v16, 6, (uint64_t)&v41, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v24 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v24 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v24 + 9);
  v34 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v24 + 8))
  {
    do
    {
      while (1)
      {
        v37 = *v34;
        v38 = __ldxr(v34);
        if (v38 == v37)
          break;
        __clrex();
      }
    }
    while (__stxr(v37 & 0xC0 | *(_BYTE *)(v24 + 8), v34));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v41) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v41, v33, v26, v27, v28, v29, v30, v31, v32);
  while (1)
  {
    v35 = (_QWORD *)v42[0];
    if ((_QWORD *)v42[0] == v42)
      break;
    v40 = *(_QWORD *)v42[0];
    v39 = *(_QWORD **)(v42[0] + 8);
    *v39 = *(_QWORD *)v42[0];
    *(_QWORD *)(v40 + 8) = v39;
    *v35 = 0;
    v35[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

uint64_t JSC::JSObject::convertInt32ToContiguous(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];

  v11 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v36) = 1;
  WORD2(v36) = 0;
  v37[0] = v37;
  v37[1] = v37;
  v37[2] = a2;
  v37[3] = v11;
  v12 = *(_QWORD *)(v11 + 40);
  if (!v12)
    goto LABEL_24;
  v13 = *(unsigned __int8 *)(v11 + 8);
  v14 = (v13 >> 1) & 7;
  if ((v13 & 0x10) != 0)
    v14 = ((v13 & 0xE) + 10) >> 1;
  v15 = *(_DWORD *)(v12 + 4 * v14 + 852);
  v16 = v15 ? 16 * (v15 & 0xFFFFFFFE) : 0;
  if (v16 == v11
    && ((v17 = v13 & 0xFFFFFFE1 | 8, v18 = *(_DWORD *)(v12 + 868), v19 = 16 * (v18 & 0xFFFFFFFE), v18)
      ? (v20 = 16 * (v18 & 0xFFFFFFFE))
      : (v20 = 0),
        *(unsigned __int8 *)(v20 + 8) == v17))
  {
    JSC::Structure::didTransitionFromThisStructure(v11, (JSC::DeferredStructureTransitionWatchpointFire *)&v36, a9, a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_24:
    v19 = JSC::Structure::nonPropertyTransitionSlow(a2, v11, 7, (uint64_t)&v36, a5, a6, a7, a8, a9);
  }
  *(_DWORD *)this = v19 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v19 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v19 + 9);
  v29 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v19 + 8))
  {
    do
    {
      while (1)
      {
        v32 = *v29;
        v33 = __ldxr(v29);
        if (v33 == v32)
          break;
        __clrex();
      }
    }
    while (__stxr(v32 & 0xC0 | *(_BYTE *)(v19 + 8), v29));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v36) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v36, v28, v21, v22, v23, v24, v25, v26, v27);
  while (1)
  {
    v30 = (_QWORD *)v37[0];
    if ((_QWORD *)v37[0] == v37)
      break;
    v35 = *(_QWORD *)v37[0];
    v34 = *(_QWORD **)(v37[0] + 8);
    *v34 = *(_QWORD *)v37[0];
    *(_QWORD *)(v35 + 8) = v34;
    *v30 = 0;
    v30[1] = 0;
  }
  return *((_QWORD *)this + 1);
}

unint64_t JSC::JSObject::convertInt32ToArrayStorage(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  int v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  ++*(_DWORD *)(a2 + 916);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4);
  v12 = JSC::JSObject::constructConvertedArrayStorageWithoutCopyingElements((JSC::JSObject *)a1, (JSC::VM *)a2, v11, a4, a5, a6, a7, a8);
  v20 = v12;
  if ((_DWORD)v11)
  {
    v21 = *(uint64_t **)(a1 + 8);
    v22 = (_QWORD *)(v12 + 16);
    do
    {
      v23 = *v21++;
      *v22 = v23;
      if (v23)
        ++*(_DWORD *)(v12 + 12);
      ++v22;
      --v11;
    }
    while (v11);
  }
  v24 = *(_DWORD *)a1;
  LODWORD(v52) = 1;
  WORD2(v52) = 0;
  v53[0] = v53;
  v53[1] = v53;
  v53[2] = a2;
  v54 = 16 * (v24 & 0xFFFFFFFE);
  v25 = *(_QWORD *)(v54 + 0x28);
  if (!v25)
    goto LABEL_43;
  v26 = *(unsigned __int8 *)(16 * (v24 & 0xFFFFFFFE) + 8);
  v27 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v27 = ((v26 & 0xE) + 10) >> 1;
  v28 = *(_DWORD *)(v25 + 4 * v27 + 852);
  v29 = v28 ? 16 * (v28 & 0xFFFFFFFE) : 0;
  if (v29 != 16 * (v24 & 0xFFFFFFFE))
    goto LABEL_43;
  v30 = v26 & 0xFFFFFFE1 | 0xA;
  if ((_DWORD)a3 == 9)
    v26 = v26 & 0xFFFFFFE1 | 0xC;
  if ((_DWORD)a3 == 8)
    v26 = v30;
  v31 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v31 = ((v26 & 0xE) + 10) >> 1;
  v32 = *(_DWORD *)(v25 + 4 * v31 + 852);
  v33 = 16 * (v32 & 0xFFFFFFFE);
  v34 = v32 ? 16 * (v32 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v34 + 8) == v26)
    JSC::Structure::didTransitionFromThisStructure(16 * (v24 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v52, v19, v13, v14, v15, v16, v17, v18);
  else
LABEL_43:
    v33 = JSC::Structure::nonPropertyTransitionSlow((JSC::VM *)a2, 16 * (v24 & 0xFFFFFFFE), a3, (uint64_t)&v52, v15, v16, v17, v18, v19);
  if (*(_BYTE *)(a2 + 755))
  {
    *(_DWORD *)a1 = v24 | 1;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  *(_DWORD *)a1 = v33 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v33 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v33 + 9);
  v43 = (unsigned __int8 *)(a1 + 4);
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v33 + 8))
  {
    do
    {
      while (1)
      {
        v48 = *v43;
        v49 = __ldxr(v43);
        if (v49 == v48)
          break;
        __clrex();
      }
    }
    while (__stxr(v48 & 0xC0 | *(_BYTE *)(v33 + 8), v43));
  }
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  if (BYTE4(v52) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v52, v42, v35, v36, v37, v38, v39, v40, v41);
  while (1)
  {
    v44 = (_QWORD *)v53[0];
    if ((_QWORD *)v53[0] == v53)
      break;
    v51 = *(_QWORD *)v53[0];
    v50 = *(_QWORD **)(v53[0] + 8);
    *v50 = *(_QWORD *)v53[0];
    *(_QWORD *)(v51 + 8) = v50;
    *v44 = 0;
    v44[1] = 0;
  }
  v45 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v45;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v20;
}

unint64_t JSC::JSObject::convertInt32ToArrayStorage(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSObject *v9;
  uint64_t v10;
  JSC::JSObject *v11;
  uint64_t v12;

  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v8 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v9 = this;
    do
    {
      v10 = *(_QWORD *)(v8 + 40);
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 2048) + 4) == 2)
          break;
      }
      v11 = *(JSC::JSObject **)(v8 + 48);
      if (!v11)
        v11 = (JSC::JSObject *)*((_QWORD *)v9 + 2);
      if (v11 == (JSC::JSObject *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          break;
        v12 = 8;
        return JSC::JSObject::convertInt32ToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
      }
      v8 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v9 = v11;
    }
    while ((*(_BYTE *)(v8 + 8) & 0x20) == 0);
  }
  v12 = 9;
  return JSC::JSObject::convertInt32ToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSObject::convertDoubleToArrayStorage(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  double *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  int v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  ++*(_DWORD *)(a2 + 916);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4);
  v12 = JSC::JSObject::constructConvertedArrayStorageWithoutCopyingElements((JSC::JSObject *)a1, (JSC::VM *)a2, v11, a4, a5, a6, a7, a8);
  v20 = v12;
  if ((_DWORD)v11)
  {
    v21 = *(double **)(a1 + 8);
    v22 = (uint64_t *)(v12 + 16);
    do
    {
      v19 = *v21;
      v23 = *(_QWORD *)v21 + 0x2000000000000;
      ++*(_DWORD *)(v12 + 12);
      *v22++ = v23;
      ++v21;
      --v11;
    }
    while (v11);
  }
  v24 = *(_DWORD *)a1;
  LODWORD(v52) = 1;
  WORD2(v52) = 0;
  v53[0] = v53;
  v53[1] = v53;
  v53[2] = a2;
  v54 = 16 * (v24 & 0xFFFFFFFE);
  v25 = *(_QWORD *)(v54 + 0x28);
  if (!v25)
    goto LABEL_41;
  v26 = *(unsigned __int8 *)(16 * (v24 & 0xFFFFFFFE) + 8);
  v27 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v27 = ((v26 & 0xE) + 10) >> 1;
  v28 = *(_DWORD *)(v25 + 4 * v27 + 852);
  v29 = v28 ? 16 * (v28 & 0xFFFFFFFE) : 0;
  if (v29 != 16 * (v24 & 0xFFFFFFFE))
    goto LABEL_41;
  v30 = v26 & 0xFFFFFFE1 | 0xA;
  if ((_DWORD)a3 == 9)
    v26 = v26 & 0xFFFFFFE1 | 0xC;
  if ((_DWORD)a3 == 8)
    v26 = v30;
  v31 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v31 = ((v26 & 0xE) + 10) >> 1;
  v32 = *(_DWORD *)(v25 + 4 * v31 + 852);
  v33 = 16 * (v32 & 0xFFFFFFFE);
  v34 = v32 ? 16 * (v32 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v34 + 8) == v26)
    JSC::Structure::didTransitionFromThisStructure(16 * (v24 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v52, v19, v13, v14, v15, v16, v17, v18);
  else
LABEL_41:
    v33 = JSC::Structure::nonPropertyTransitionSlow((JSC::VM *)a2, 16 * (v24 & 0xFFFFFFFE), a3, (uint64_t)&v52, v15, v16, v17, v18, v19);
  if (*(_BYTE *)(a2 + 755))
  {
    *(_DWORD *)a1 = v24 | 1;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  *(_DWORD *)a1 = v33 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v33 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v33 + 9);
  v43 = (unsigned __int8 *)(a1 + 4);
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v33 + 8))
  {
    do
    {
      while (1)
      {
        v48 = *v43;
        v49 = __ldxr(v43);
        if (v49 == v48)
          break;
        __clrex();
      }
    }
    while (__stxr(v48 & 0xC0 | *(_BYTE *)(v33 + 8), v43));
  }
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  if (BYTE4(v52) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v52, v42, v35, v36, v37, v38, v39, v40, v41);
  while (1)
  {
    v44 = (_QWORD *)v53[0];
    if ((_QWORD *)v53[0] == v53)
      break;
    v51 = *(_QWORD *)v53[0];
    v50 = *(_QWORD **)(v53[0] + 8);
    *v50 = *(_QWORD *)v53[0];
    *(_QWORD *)(v51 + 8) = v50;
    *v44 = 0;
    v44[1] = 0;
  }
  v45 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v45;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v20;
}

unint64_t JSC::JSObject::convertDoubleToArrayStorage(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSObject *v9;
  uint64_t v10;
  JSC::JSObject *v11;
  uint64_t v12;

  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v8 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v9 = this;
    do
    {
      v10 = *(_QWORD *)(v8 + 40);
      if (v10)
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 2048) + 4) == 2)
          break;
      }
      v11 = *(JSC::JSObject **)(v8 + 48);
      if (!v11)
        v11 = (JSC::JSObject *)*((_QWORD *)v9 + 2);
      if (v11 == (JSC::JSObject *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          break;
        v12 = 8;
        return JSC::JSObject::convertDoubleToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
      }
      v8 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v9 = v11;
    }
    while ((*(_BYTE *)(v8 + 8) & 0x20) == 0);
  }
  v12 = 9;
  return JSC::JSObject::convertDoubleToArrayStorage((unint64_t)this, (uint64_t)a2, v12, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSObject::convertContiguousToArrayStorage(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  int v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  ++*(_DWORD *)(a2 + 916);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4);
  v12 = JSC::JSObject::constructConvertedArrayStorageWithoutCopyingElements((JSC::JSObject *)a1, (JSC::VM *)a2, v11, a4, a5, a6, a7, a8);
  v20 = v12;
  if ((_DWORD)v11)
  {
    v21 = *(uint64_t **)(a1 + 8);
    v22 = (_QWORD *)(v12 + 16);
    do
    {
      v23 = *v21++;
      *v22 = v23;
      if (v23)
        ++*(_DWORD *)(v12 + 12);
      ++v22;
      --v11;
    }
    while (v11);
  }
  v24 = *(_DWORD *)a1;
  LODWORD(v52) = 1;
  WORD2(v52) = 0;
  v53[0] = v53;
  v53[1] = v53;
  v53[2] = a2;
  v54 = 16 * (v24 & 0xFFFFFFFE);
  v25 = *(_QWORD *)(v54 + 0x28);
  if (!v25)
    goto LABEL_43;
  v26 = *(unsigned __int8 *)(16 * (v24 & 0xFFFFFFFE) + 8);
  v27 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v27 = ((v26 & 0xE) + 10) >> 1;
  v28 = *(_DWORD *)(v25 + 4 * v27 + 852);
  v29 = v28 ? 16 * (v28 & 0xFFFFFFFE) : 0;
  if (v29 != 16 * (v24 & 0xFFFFFFFE))
    goto LABEL_43;
  v30 = v26 & 0xFFFFFFE1 | 0xA;
  if ((_DWORD)a3 == 9)
    v26 = v26 & 0xFFFFFFE1 | 0xC;
  if ((_DWORD)a3 == 8)
    v26 = v30;
  v31 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v31 = ((v26 & 0xE) + 10) >> 1;
  v32 = *(_DWORD *)(v25 + 4 * v31 + 852);
  v33 = 16 * (v32 & 0xFFFFFFFE);
  v34 = v32 ? 16 * (v32 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v34 + 8) == v26)
    JSC::Structure::didTransitionFromThisStructure(16 * (v24 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v52, v19, v13, v14, v15, v16, v17, v18);
  else
LABEL_43:
    v33 = JSC::Structure::nonPropertyTransitionSlow((JSC::VM *)a2, 16 * (v24 & 0xFFFFFFFE), a3, (uint64_t)&v52, v15, v16, v17, v18, v19);
  if (*(_BYTE *)(a2 + 755) && (__dmb(0xAu), *(_BYTE *)(a2 + 755)))
  {
    *(_DWORD *)a1 = v24 | 1;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v20;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  *(_DWORD *)a1 = v33 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v33 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v33 + 9);
  v43 = (unsigned __int8 *)(a1 + 4);
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v33 + 8))
  {
    do
    {
      while (1)
      {
        v48 = *v43;
        v49 = __ldxr(v43);
        if (v49 == v48)
          break;
        __clrex();
      }
    }
    while (__stxr(v48 & 0xC0 | *(_BYTE *)(v33 + 8), v43));
  }
  if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  if (BYTE4(v52) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v52, v42, v35, v36, v37, v38, v39, v40, v41);
  while (1)
  {
    v44 = (_QWORD *)v53[0];
    if ((_QWORD *)v53[0] == v53)
      break;
    v51 = *(_QWORD *)v53[0];
    v50 = *(_QWORD **)(v53[0] + 8);
    *v50 = *(_QWORD *)v53[0];
    *(_QWORD *)(v51 + 8) = v50;
    *v44 = 0;
    v44[1] = 0;
  }
  v45 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v45;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
  return v20;
}

unsigned int *JSC::JSObject::createInitialForValueAndSet(unsigned __int8 *a1, JSC::VM *a2, int a3, unint64_t a4, __n128 a5)
{
  unint64_t v9;
  unsigned int *result;

  if (a4 >= 0xFFFE000000000000)
  {
    result = JSC::JSObject::createInitialInt32((JSC::JSObject *)a1, a2, a3 + 1, a5);
    *(_QWORD *)&result[2 * a3] = a4;
  }
  else
  {
    v9 = a4 - 0x2000000000000;
    if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
      && (a5.n128_u64[0] = a4 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
    {
      result = JSC::JSObject::createInitialDouble((JSC::JSObject *)a1, a2, a3 + 1, a5);
      *(_QWORD *)&result[2 * a3] = v9;
    }
    else
    {
      result = JSC::JSObject::createInitialContiguous((JSC::JSObject *)a1, a2, a3 + 1, a5);
      *(_QWORD *)&result[2 * a3] = a4;
      if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *((_DWORD *)a2 + 190) >= a1[7])
        return (unsigned int *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a1);
    }
  }
  return result;
}

uint64_t JSC::JSObject::convertFromCopyOnWrite(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  _QWORD *v51;
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t i;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;

  v11 = *((_QWORD *)this + 1);
  v12 = 2 * *(_DWORD *)(v11 - 4);
  if (v12 >= 0x10000000)
    v12 = 0x10000000;
  if (v12 <= 3)
    v13 = 3;
  else
    v13 = v12;
  v14 = 8 * v13;
  if (v12)
    v15 = v14;
  else
    v15 = 40;
  if (v15 > 0x48)
  {
    if (v15 > 0x1F58)
      v16 = v15 + 8;
    else
      v16 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v15 + 23) >> 2) & 0x7FFFFFFC));
  }
  else
  {
    v16 = (v15 + 23) & 0x1FFFFFFF0;
  }
  v17 = (v16 + 0x7FFFFFFF8) & 0x7FFFFFFF8;
  if (v17 <= 0x1F58 && (v18 = *(_QWORD *)((char *)a2 + (((v17 + 23) >> 1) & 0x7FFFFFFF8) + 6736)) != 0)
  {
    v19 = *(unsigned int *)(v18 + 60);
    SlowCase = *(_QWORD *)(v18 + 24);
    if (SlowCase < *(_QWORD *)(v18 + 32))
    {
LABEL_14:
      *(_QWORD *)(v18 + 24) = SlowCase + v19;
      goto LABEL_15;
    }
    SlowCase = *(_QWORD *)(v18 + 40);
    if ((SlowCase & 1) == 0)
    {
      v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 48);
      *(_QWORD *)(v18 + 32) = SlowCase + HIDWORD(v62);
      *(_QWORD *)(v18 + 40) = SlowCase + (int)v62;
      goto LABEL_14;
    }
    JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v18, (char *)a2 + 192, v19, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v17 + 8, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A4584CLL);
    }
  }
LABEL_15:
  v21 = v11 - 8;
  v22 = *(unsigned int *)(v11 - 4);
  v23 = 8 * v22 + 8;
  if (v22 > 0x1D)
  {
    v56 = v23 & 0xFFFFFFFE0;
    v57 = v23 + SlowCase;
    v58 = v56 + SlowCase;
    for (i = SlowCase; i != v58; i += 32)
    {
      a9 = *(__n128 *)v21;
      v60 = *(_OWORD *)(v21 + 16);
      v21 += 32;
      *(__n128 *)i = a9;
      *(_OWORD *)(i + 16) = v60;
    }
    while (i != v57)
    {
      v61 = *(_QWORD *)v21;
      v21 += 8;
      a9.n128_u64[0] = v61;
      *(_QWORD *)i = v61;
      i += 8;
    }
  }
  else
  {
    v24 = v23 >> 3;
    v25 = (unint64_t *)SlowCase;
    do
    {
      v26 = *(_QWORD *)v21;
      v21 += 8;
      *v25++ = v26;
      --v24;
    }
    while (v24);
  }
  __dmb(0xAu);
  v27 = (unsigned __int8 *)this + 4;
  v28 = *((_BYTE *)this + 4) & 0xF;
  if ((_DWORD)v28 != 5)
  {
    if ((_DWORD)v28 == 9)
    {
      v28 = 7;
    }
    else
    {
      if ((_DWORD)v28 != 7)
      {
        __break(0xC471u);
        JUMPOUT(0x198A458BCLL);
      }
      v28 = 6;
    }
  }
  v29 = SlowCase + 8;
  v30 = *(_DWORD *)this;
  LODWORD(v63) = 1;
  WORD2(v63) = 0;
  v64[0] = v64;
  v64[1] = v64;
  v64[2] = a2;
  v65 = 16 * (v30 & 0xFFFFFFFE);
  v31 = *(_QWORD *)(v65 + 0x28);
  if (!v31)
    goto LABEL_57;
  v32 = *(unsigned __int8 *)(16 * (v30 & 0xFFFFFFFE) + 8);
  v33 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  v34 = *(_DWORD *)(v31 + 4 * v33 + 852);
  v35 = v34 ? 16 * (v34 & 0xFFFFFFFE) : 0;
  if (v35 != 16 * (v30 & 0xFFFFFFFE))
    goto LABEL_57;
  v36 = v32 & 0xFFFFFFE1 | 8;
  v37 = v32 & 0xFFFFFFE1 | 6;
  if ((_DWORD)v28 == 5)
    v32 = v32 & 0xFFFFFFE1 | 4;
  if ((_DWORD)v28 == 6)
    v32 = v37;
  if ((_DWORD)v28 == 7)
    v32 = v36;
  v38 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v38 = ((v32 & 0xE) + 10) >> 1;
  v39 = *(_DWORD *)(v31 + 4 * v38 + 852);
  v40 = 16 * (v39 & 0xFFFFFFFE);
  v41 = v39 ? 16 * (v39 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v41 + 8) == v32)
  {
    result = JSC::Structure::didTransitionFromThisStructure(16 * (v30 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v63, a9.n128_f64[0], v28, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_57:
    result = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v30 & 0xFFFFFFFE), v28, (uint64_t)&v63, a5, a6, a7, a8, a9.n128_f64[0]);
    v40 = result;
  }
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v30 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v29;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v29;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  }
  *(_DWORD *)this = v40 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v40 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v40 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v40 + 8))
  {
    do
    {
      while (1)
      {
        v52 = *v27;
        v53 = __ldxr(v27);
        if (v53 == v52)
          break;
        __clrex();
      }
    }
    while (__stxr(v52 & 0xC0 | *(_BYTE *)(v40 + 8), v27));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v63) == 1)
    result = (uint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v63, v50, v43, v44, v45, v46, v47, v48, v49);
  while (1)
  {
    v51 = (_QWORD *)v64[0];
    if ((_QWORD *)v64[0] == v64)
      break;
    v55 = *(_QWORD *)v64[0];
    v54 = *(_QWORD **)(v64[0] + 8);
    *v54 = *(_QWORD *)v64[0];
    *(_QWORD *)(v55 + 8) = v54;
    *v51 = 0;
    v51[1] = 0;
  }
  return result;
}

uint64_t JSC::JSObject::setIndexQuicklyToUndecided(unint64_t a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::JSObject::convertUndecidedForValue(a1, a2, a4, a4, a5, a6, a7, a8, a9);
  return JSC::JSObject::setIndexQuickly(a1, a2, a3, a4, v13, v14, v15, v16);
}

uint64_t JSC::JSObject::setIndexQuickly(uint64_t result, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a3;
  v11 = result;
  v12 = (double)(int)a4;
  if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = a4 - 0x2000000000000;
  else
    v13 = (double)(int)a4;
  if (a4 < 0xFFFE000000000000)
  {
    if (a4 >> 49)
    {
      if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        while (2)
        {
          v14 = *(_QWORD *)(v11 + 8);
          if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
          {
            switch(*(_BYTE *)(v11 + 4) & 0xF)
            {
              case 0:
              case 1:
                return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
              case 4:
              case 5:
                if (BYTE1(dword_1ECF4C5C0))
                  result = JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
                else
                  result = JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
                continue;
              case 6:
              case 7:
LABEL_22:
                *(double *)(v14 + 8 * v9) = v13;
                if (*(_DWORD *)(v14 - 8) <= v9)
                  *(_DWORD *)(v14 - 8) = v9 + 1;
                return result;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                goto LABEL_36;
              default:
                goto LABEL_42;
            }
          }
          break;
        }
      }
      else
      {
        while (2)
        {
          v14 = *(_QWORD *)(v11 + 8);
          if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
          {
            switch(*(_BYTE *)(v11 + 4) & 0xF)
            {
              case 0:
              case 1:
                return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
              case 4:
              case 5:
                result = JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
                continue;
              case 6:
              case 7:
                goto LABEL_22;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                goto LABEL_36;
              default:
                goto LABEL_42;
            }
          }
          break;
        }
      }
    }
    else if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      while (2)
      {
        v14 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
        {
          switch(*(_BYTE *)(v11 + 4) & 0xF)
          {
            case 0:
            case 1:
              return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
            case 4:
            case 5:
              if (BYTE1(dword_1ECF4C5C0))
                result = JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
              else
                result = JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
              continue;
            case 6:
            case 7:
              result = JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
              continue;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
LABEL_36:
              v15 = v14;
              v16 = v14 + 8 * v9;
              v17 = *(_QWORD *)(v16 + 16);
              *(_QWORD *)(v16 + 16) = a4;
              if (a4
                && (a4 & 0xFFFE000000000002) == 0
                && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
              {
                result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
              }
              if (!v17)
              {
                ++*(_DWORD *)(v15 + 12);
                if (*(_DWORD *)(v15 - 8) <= v9)
                  *(_DWORD *)(v15 - 8) = v9 + 1;
              }
              return result;
            default:
LABEL_42:
              __break(0xC471u);
              JUMPOUT(0x198A45D14);
          }
        }
        break;
      }
    }
    else
    {
      while (2)
      {
        v14 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
        {
          switch(*(_BYTE *)(v11 + 4) & 0xF)
          {
            case 0:
            case 1:
              return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
            case 4:
            case 5:
              result = JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
              continue;
            case 6:
            case 7:
              result = JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
              continue;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              goto LABEL_36;
            default:
              goto LABEL_42;
          }
        }
        break;
      }
    }
  }
  else if (a4 >> 49)
  {
    v14 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(result + 4) & 0xFu) - 8 >= 2)
    {
      switch(*(_BYTE *)(result + 4) & 0xF)
      {
        case 0:
        case 1:
          return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
        case 4:
        case 5:
          break;
        case 6:
        case 7:
          goto LABEL_22;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          goto LABEL_36;
        default:
          goto LABEL_42;
      }
    }
  }
  else
  {
    while (2)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if ((*(_BYTE *)(v11 + 4) & 0xFu) - 8 >= 2)
      {
        switch(*(_BYTE *)(v11 + 4) & 0xF)
        {
          case 0:
          case 1:
            return JSC::JSObject::setIndexQuicklyForTypedArray(v11, v9, a4);
          case 4:
          case 5:
            break;
          case 6:
          case 7:
            result = JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)v11, a2, a3, a4, a5, a6, a7, a8, v12);
            continue;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            goto LABEL_36;
          default:
            goto LABEL_42;
        }
      }
      break;
    }
  }
  *(_QWORD *)(v14 + 8 * v9) = a4;
  if (*(_DWORD *)(v14 - 8) <= v9)
    *(_DWORD *)(v14 - 8) = v9 + 1;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
    return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
  return result;
}

uint64_t JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex(JSC::JSObject *a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)&v12 = a4 - 0x2000000000000;
  if (a4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || BYTE1(dword_1ECF4C5C0) == 0)
    JSC::JSObject::convertInt32ToContiguous(a1, a2, a3, a4, a5, a6, a7, a8, v12);
  else
    JSC::JSObject::convertInt32ToDouble(a1, a2, a3, a4, a5, a6, a7, a8, v12);
  return JSC::JSObject::setIndexQuickly((uint64_t)a1, a2, a3, a4, v15, v16, v17, v18);
}

uint64_t JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(JSC::JSObject *a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::JSObject::convertDoubleToContiguous(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return JSC::JSObject::setIndexQuickly((uint64_t)a1, a2, a3, a4, v13, v14, v15, v16);
}

unsigned int *JSC::JSObject::tryMakeWritableInt32Slow(unsigned int *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int *v10;
  char v11;
  unsigned int v12;
  __n128 v13;

  v10 = this;
  v11 = *((_BYTE *)this + 4);
  if ((v11 & 0x10) != 0)
  {
    if ((v11 & 0xEu) <= 4)
    {
      JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8, a9);
      return (unsigned int *)*((_QWORD *)v10 + 1);
    }
    return 0;
  }
  if (*(unsigned __int8 *)(16 * (*this & 0xFFFFFFFE) + 9) - 39 < 0xB)
    return 0;
  v12 = v11 & 0xF;
  if (v12 == 3)
    return (unsigned int *)JSC::JSObject::convertUndecidedToInt32((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
  if (v12 - 6 < 8)
    return 0;
  if (v12 > 1)
  {
    __break(0xC471u);
  }
  else
  {
    if ((*(_BYTE *)(16 * (*this & 0xFFFFFFFE) + 0x12) & 0x10) != 0
      || (*(_WORD *)(16 * (*this & 0xFFFFFFFE) + 0xC) & 0x100) != 0
      || JSC::JSObject::needsSlowPutIndexing((JSC::JSObject *)this))
    {
      return 0;
    }
    return JSC::JSObject::createInitialInt32((JSC::JSObject *)v10, a2, 0, v13);
  }
  return this;
}

BOOL JSC::JSObject::needsSlowPutIndexing(JSC::JSObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  JSC::JSObject *v4;

  v1 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if ((*(_BYTE *)(v1 + 8) & 0x20) == 0)
  {
    v2 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    do
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        if (*(_BYTE *)(*(_QWORD *)(v3 + 2048) + 4) == 2)
          break;
      }
      v4 = *(JSC::JSObject **)(v2 + 48);
      if (!v4)
        v4 = (JSC::JSObject *)*((_QWORD *)this + 2);
      if (v4 == (JSC::JSObject *)2)
        return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 2048) + 4) == 2;
      v2 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
      this = v4;
    }
    while ((*(_BYTE *)(v2 + 8) & 0x20) == 0);
  }
  return 1;
}

unsigned int *JSC::JSObject::tryMakeWritableDoubleSlow(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int8 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t Slow;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int *result;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  int v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t i;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  JSC::JSObject *v87;
  uint64_t v88;
  JSC::JSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD **v95;
  JSC::VM *v96;
  uint64_t v97;

  v12 = (unsigned __int8 *)this + 4;
  v11 = *((_BYTE *)this + 4);
  if ((v11 & 0x10) != 0)
  {
    if ((v11 & 0xEu) > 6)
      return 0;
    v13 = *((_QWORD *)this + 1);
    v14 = 2 * *(_DWORD *)(v13 - 4);
    if (v14 >= 0x10000000)
      v14 = 0x10000000;
    if (v14 <= 3)
      v15 = 3;
    else
      v15 = v14;
    v16 = 8 * v15;
    if (v14)
      v17 = v16;
    else
      v17 = 40;
    if (v17 > 0x48)
    {
      if (v17 > 0x1F58)
        v18 = v17 + 8;
      else
        v18 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v17 + 23) >> 2) & 0x7FFFFFFC));
    }
    else
    {
      v18 = (v17 + 23) & 0x1FFFFFFF0;
    }
    v19 = (v18 + 0x7FFFFFFF8) & 0x7FFFFFFF8;
    if (v19 > 0x1F58 || (v20 = *(_QWORD *)((char *)a2 + (((v19 + 23) >> 1) & 0x7FFFFFFF8) + 6736)) == 0)
    {
      Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v19 + 8, 0, a5, a6, a7, a8);
      if (!Slow)
      {
        __break(0xC471u);
        goto LABEL_130;
      }
      goto LABEL_17;
    }
    v21 = *(unsigned int *)(v20 + 60);
    Slow = *(_QWORD *)(v20 + 24);
    if (Slow >= *(_QWORD *)(v20 + 32))
    {
      Slow = *(_QWORD *)(v20 + 40);
      if ((Slow & 1) != 0)
      {
        JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
        Slow = JSC::LocalAllocator::allocateSlowCase(v20, (uint64_t)a2 + 192, v21, 0, 0, v90, v91, v92);
LABEL_17:
        v23 = v13 - 8;
        v24 = *(unsigned int *)(v13 - 4);
        v25 = 8 * v24 + 8;
        if (v24 > 0x1D)
        {
          v79 = v25 & 0xFFFFFFFE0;
          v80 = v25 + Slow;
          v81 = v79 + Slow;
          for (i = Slow; i != v81; i += 32)
          {
            a9 = *(__n128 *)v23;
            v83 = *(_OWORD *)(v23 + 16);
            v23 += 32;
            *(__n128 *)i = a9;
            *(_OWORD *)(i + 16) = v83;
          }
          while (i != v80)
          {
            v84 = *(_QWORD *)v23;
            v23 += 8;
            a9.n128_u64[0] = v84;
            *(_QWORD *)i = v84;
            i += 8;
          }
        }
        else
        {
          v26 = v25 >> 3;
          v27 = (unint64_t *)Slow;
          do
          {
            v28 = *(_QWORD *)v23;
            v23 += 8;
            *v27++ = v28;
            --v26;
          }
          while (v26);
        }
        __dmb(0xAu);
        v29 = *v12 & 0xF;
        if ((_DWORD)v29 != 5)
        {
          if ((_DWORD)v29 == 9)
          {
            v29 = 7;
          }
          else
          {
            if ((_DWORD)v29 != 7)
            {
              __break(0xC471u);
              JUMPOUT(0x198A46888);
            }
            v29 = 6;
          }
        }
        v30 = Slow + 8;
        v31 = *(_DWORD *)this;
        LODWORD(v93) = 1;
        WORD2(v93) = 0;
        v94 = &v94;
        v95 = &v94;
        v96 = a2;
        v97 = 16 * (v31 & 0xFFFFFFFE);
        v32 = *(_QWORD *)(v97 + 0x28);
        if (!v32)
          goto LABEL_90;
        v33 = *(unsigned __int8 *)(16 * (v31 & 0xFFFFFFFE) + 8);
        v34 = (v33 >> 1) & 7;
        if ((v33 & 0x10) != 0)
          v34 = ((v33 & 0xE) + 10) >> 1;
        v35 = *(_DWORD *)(v32 + 4 * v34 + 852);
        v36 = v35 ? 16 * (v35 & 0xFFFFFFFE) : 0;
        if (v36 != 16 * (v31 & 0xFFFFFFFE))
          goto LABEL_90;
        v37 = v33 & 0xFFFFFFE1 | 8;
        v38 = v33 & 0xFFFFFFE1 | 6;
        if ((_DWORD)v29 == 5)
          v33 = v33 & 0xFFFFFFE1 | 4;
        if ((_DWORD)v29 == 6)
          v33 = v38;
        if ((_DWORD)v29 == 7)
          v33 = v37;
        v39 = (v33 >> 1) & 7;
        if ((v33 & 0x10) != 0)
          v39 = ((v33 & 0xE) + 10) >> 1;
        v40 = *(_DWORD *)(v32 + 4 * v39 + 852);
        v41 = 16 * (v40 & 0xFFFFFFFE);
        v42 = v40 ? 16 * (v40 & 0xFFFFFFFE) : 0;
        if (*(unsigned __int8 *)(v42 + 8) == v33)
          JSC::Structure::didTransitionFromThisStructure(16 * (v31 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v93, a9.n128_f64[0], v29, a4, a5, a6, a7, a8);
        else
LABEL_90:
          v41 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v31 & 0xFFFFFFFE), v29, (uint64_t)&v93, a5, a6, a7, a8, a9.n128_f64[0]);
        if (*((_BYTE *)a2 + 755))
        {
          *(_DWORD *)this = v31 | 1;
          __dmb(0xAu);
          *((_QWORD *)this + 1) = v30;
          if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
          __dmb(0xAu);
        }
        else
        {
          *((_QWORD *)this + 1) = v30;
          if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
        }
        *(_DWORD *)this = v41 >> 4;
        *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v41 + 10);
        *((_BYTE *)this + 5) = *(_BYTE *)(v41 + 9);
        if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v41 + 8))
        {
          do
          {
            while (1)
            {
              v46 = *v12;
              v47 = __ldxr(v12);
              if (v47 == v46)
                break;
              __clrex();
            }
          }
          while (__stxr(v46 & 0xC0 | *(_BYTE *)(v41 + 8), v12));
        }
        if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
        if (BYTE4(v93) == 1)
          JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v93, a9.n128_f64[0], v43, a3, a4, a5, a6, a7, a8);
        while (1)
        {
          v44 = v94;
          if (v94 == &v94)
            break;
          v78 = *v94;
          v77 = (_QWORD *)v94[1];
          *v77 = *v94;
          *(_QWORD *)(v78 + 8) = v77;
          *v44 = 0;
          v44[1] = 0;
        }
        v11 = *v12;
        if ((*v12 & 0xE) == 6)
          return (unsigned int *)*((_QWORD *)this + 1);
        goto LABEL_60;
      }
      v85 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v20 + 32) = Slow + HIDWORD(v85);
      *(_QWORD *)(v20 + 40) = Slow + (int)v85;
    }
    *(_QWORD *)(v20 + 24) = Slow + v21;
    goto LABEL_17;
  }
LABEL_60:
  v48 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (*(unsigned __int8 *)(v48 + 9) - 39 >= 0xB)
  {
    v49 = v11 & 0xF;
    if (v49 - 4 < 2)
    {
      v50 = *((_QWORD *)this + 1);
      v51 = *(_DWORD *)(v50 - 4);
      if (v51)
      {
        v52 = v51 - 1;
        do
        {
          v53 = v52;
          v54 = *(_QWORD *)(v50 + 8 * v52);
          a9.n128_f64[0] = (double)(int)v54;
          if (v54 <= 0xFFFDFFFFFFFFFFFFLL)
            a9.n128_f64[0] = NAN;
          *(_QWORD *)(v50 + 8 * v52--) = a9.n128_u64[0];
        }
        while (v53);
      }
      LODWORD(v93) = 1;
      WORD2(v93) = 0;
      v94 = &v94;
      v95 = &v94;
      v96 = a2;
      v97 = v48;
      v55 = *(_QWORD *)(v48 + 40);
      if (!v55)
        goto LABEL_94;
      v56 = *(unsigned __int8 *)(v48 + 8);
      v57 = (v56 >> 1) & 7;
      if ((v56 & 0x10) != 0)
        v57 = ((v56 & 0xE) + 10) >> 1;
      v58 = *(_DWORD *)(v55 + 4 * v57 + 852);
      v59 = v58 ? 16 * (v58 & 0xFFFFFFFE) : 0;
      if (v59 == v48
        && ((v60 = v56 & 0xFFFFFFE1 | 6, v61 = *(_DWORD *)(v55 + 864), v62 = 16 * (v61 & 0xFFFFFFFE), v61)
          ? (v63 = 16 * (v61 & 0xFFFFFFFE))
          : (v63 = 0),
            *(unsigned __int8 *)(v63 + 8) == v60))
      {
        JSC::Structure::didTransitionFromThisStructure(v48, (JSC::DeferredStructureTransitionWatchpointFire *)&v93, a9.n128_f64[0], a3, a4, a5, a6, a7, a8);
      }
      else
      {
LABEL_94:
        v62 = JSC::Structure::nonPropertyTransitionSlow(a2, v48, 6, (uint64_t)&v93, a5, a6, a7, a8, a9.n128_f64[0]);
      }
      *(_DWORD *)this = v62 >> 4;
      *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v62 + 10);
      *((_BYTE *)this + 5) = *(_BYTE *)(v62 + 9);
      if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v62 + 8))
      {
        do
        {
          while (1)
          {
            v75 = *v12;
            v76 = __ldxr(v12);
            if (v76 == v75)
              break;
            __clrex();
          }
        }
        while (__stxr(v75 & 0xC0 | *(_BYTE *)(v62 + 8), v12));
      }
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      if (BYTE4(v93) == 1)
        JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v93, v71, v64, v65, v66, v67, v68, v69, v70);
      while (1)
      {
        v72 = v94;
        if (v94 == &v94)
          break;
        v74 = *v94;
        v73 = (_QWORD *)v94[1];
        *v73 = *v94;
        *(_QWORD *)(v74 + 8) = v73;
        *v72 = 0;
        v72[1] = 0;
      }
      return (unsigned int *)*((_QWORD *)this + 1);
    }
    if (v49 == 3)
      return (unsigned int *)JSC::JSObject::convertUndecidedToDouble(this, a2, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
    if (v49 < 2)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x10) == 0
        && (*(_WORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0xC) & 0x100) == 0
        && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
      {
        v86 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v87 = this;
        while (1)
        {
          v88 = *(_QWORD *)(v86 + 40);
          if (v88)
          {
            if (*(_BYTE *)(*(_QWORD *)(v88 + 2048) + 4) == 2)
              break;
          }
          v89 = *(JSC::JSObject **)(v86 + 48);
          if (!v89)
            v89 = (JSC::JSObject *)*((_QWORD *)v87 + 2);
          if (v89 == (JSC::JSObject *)2)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
              return 0;
            return JSC::JSObject::createInitialDouble(this, a2, 0, a9);
          }
          result = 0;
          v86 = 16 * (*(_DWORD *)v89 & 0xFFFFFFFE);
          v87 = v89;
          if ((*(_BYTE *)(v86 + 8) & 0x20) != 0)
            return result;
        }
      }
      return 0;
    }
    if (v49 - 8 >= 6)
    {
      __break(0xC471u);
LABEL_130:
      JUMPOUT(0x198A46748);
    }
  }
  return 0;
}

unsigned int *JSC::JSObject::tryMakeWritableContiguousSlow(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int8 v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  _QWORD *v34;
  unsigned int *result;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  int v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  JSC::JSObject *v78;
  uint64_t v79;
  JSC::JSObject *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t i;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD **v96;
  JSC::VM *v97;
  uint64_t v98;

  v12 = (unsigned __int8 *)this + 4;
  v11 = *((_BYTE *)this + 4);
  if ((v11 & 0x10) == 0)
    goto LABEL_2;
  if ((v11 & 0xEu) > 8)
    return 0;
  v38 = *((_QWORD *)this + 1);
  v39 = 2 * *(_DWORD *)(v38 - 4);
  if (v39 >= 0x10000000)
    v39 = 0x10000000;
  if (v39 <= 3)
    v40 = 3;
  else
    v40 = v39;
  v41 = 8 * v40;
  if (v39)
    v42 = v41;
  else
    v42 = 40;
  if (v42 > 0x48)
  {
    if (v42 > 0x1F58)
      v43 = v42 + 8;
    else
      v43 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v42 + 23) >> 2) & 0x7FFFFFFC));
  }
  else
  {
    v43 = (v42 + 23) & 0x1FFFFFFF0;
  }
  v44 = (v43 + 0x7FFFFFFF8) & 0x7FFFFFFF8;
  if (v44 <= 0x1F58 && (v45 = *(_QWORD *)((char *)a2 + (((v44 + 23) >> 1) & 0x7FFFFFFF8) + 6736)) != 0)
  {
    v46 = *(unsigned int *)(v45 + 60);
    SlowCase = *(_QWORD *)(v45 + 24);
    if (SlowCase < *(_QWORD *)(v45 + 32))
    {
LABEL_44:
      *(_QWORD *)(v45 + 24) = SlowCase + v46;
      goto LABEL_45;
    }
    SlowCase = *(_QWORD *)(v45 + 40);
    if ((SlowCase & 1) == 0)
    {
      v87 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v45 + 48);
      *(_QWORD *)(v45 + 32) = SlowCase + HIDWORD(v87);
      *(_QWORD *)(v45 + 40) = SlowCase + (int)v87;
      goto LABEL_44;
    }
    v88 = *((_QWORD *)this + 1);
    v89 = *(unsigned int *)(v45 + 60);
    JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
    v90 = v89;
    v38 = v88;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v45, (uint64_t)a2 + 192, v90, 0, 0, v91, v92, v93);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v44 + 8, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A46F34);
    }
  }
LABEL_45:
  v48 = v38 - 8;
  v49 = *(unsigned int *)(v38 - 4);
  v50 = 8 * v49 + 8;
  if (v49 > 0x1D)
  {
    v81 = v50 & 0xFFFFFFFE0;
    v82 = v50 + SlowCase;
    v83 = v81 + SlowCase;
    for (i = SlowCase; i != v83; i += 32)
    {
      a9 = *(__n128 *)v48;
      v85 = *(_OWORD *)(v48 + 16);
      v48 += 32;
      *(__n128 *)i = a9;
      *(_OWORD *)(i + 16) = v85;
    }
    while (i != v82)
    {
      v86 = *(_QWORD *)v48;
      v48 += 8;
      a9.n128_u64[0] = v86;
      *(_QWORD *)i = v86;
      i += 8;
    }
  }
  else
  {
    v51 = v50 >> 3;
    v52 = (unint64_t *)SlowCase;
    do
    {
      v53 = *(_QWORD *)v48;
      v48 += 8;
      *v52++ = v53;
      --v51;
    }
    while (v51);
  }
  __dmb(0xAu);
  v54 = *v12 & 0xF;
  if ((_DWORD)v54 != 5)
  {
    if ((_DWORD)v54 == 9)
    {
      v54 = 7;
    }
    else
    {
      if ((_DWORD)v54 != 7)
      {
        __break(0xC471u);
        JUMPOUT(0x198A46FC8);
      }
      v54 = 6;
    }
  }
  v57 = SlowCase + 8;
  v58 = *(_DWORD *)this;
  LODWORD(v94) = 1;
  WORD2(v94) = 0;
  v95 = &v95;
  v96 = &v95;
  v97 = a2;
  v98 = 16 * (v58 & 0xFFFFFFFE);
  v59 = *(_QWORD *)(v98 + 0x28);
  if (!v59)
    goto LABEL_90;
  v60 = *(unsigned __int8 *)(16 * (v58 & 0xFFFFFFFE) + 8);
  v61 = (v60 >> 1) & 7;
  if ((v60 & 0x10) != 0)
    v61 = ((v60 & 0xE) + 10) >> 1;
  v62 = *(_DWORD *)(v59 + 4 * v61 + 852);
  v63 = v62 ? 16 * (v62 & 0xFFFFFFFE) : 0;
  if (v63 != 16 * (v58 & 0xFFFFFFFE))
    goto LABEL_90;
  v64 = v60 & 0xFFFFFFE1 | 8;
  v65 = v60 & 0xFFFFFFE1 | 6;
  if ((_DWORD)v54 == 5)
    v60 = v60 & 0xFFFFFFE1 | 4;
  if ((_DWORD)v54 == 6)
    v60 = v65;
  if ((_DWORD)v54 == 7)
    v60 = v64;
  v66 = (v60 >> 1) & 7;
  if ((v60 & 0x10) != 0)
    v66 = ((v60 & 0xE) + 10) >> 1;
  v67 = *(_DWORD *)(v59 + 4 * v66 + 852);
  v68 = 16 * (v67 & 0xFFFFFFFE);
  v69 = v67 ? 16 * (v67 & 0xFFFFFFFE) : 0;
  if (*(unsigned __int8 *)(v69 + 8) == v60)
    JSC::Structure::didTransitionFromThisStructure(16 * (v58 & 0xFFFFFFFE), (JSC::DeferredStructureTransitionWatchpointFire *)&v94, a9.n128_f64[0], v54, a4, a5, a6, a7, a8);
  else
LABEL_90:
    v68 = JSC::Structure::nonPropertyTransitionSlow(a2, 16 * (v58 & 0xFFFFFFFE), v54, (uint64_t)&v94, a5, a6, a7, a8, a9.n128_f64[0]);
  v71 = (char *)a2 + 192;
  if (*((_BYTE *)a2 + 755))
  {
    *(_DWORD *)this = v58 | 1;
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v57;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v71, (unint64_t)this);
      v71 = (char *)a2 + 192;
    }
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v57;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v71, (unint64_t)this);
      v71 = (char *)a2 + 192;
    }
  }
  *(_DWORD *)this = v68 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v68 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v68 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v68 + 8))
  {
    do
    {
      while (1)
      {
        v73 = *v12;
        v74 = __ldxr(v12);
        if (v74 == v73)
          break;
        __clrex();
      }
    }
    while (__stxr(v73 & 0xC0 | *(_BYTE *)(v68 + 8), v12));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v71, (unint64_t)this);
  if (BYTE4(v94) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v94, a9.n128_f64[0], v70, a3, a4, a5, a6, a7, a8);
  while (1)
  {
    v72 = v95;
    if (v95 == &v95)
      break;
    v76 = *v95;
    v75 = (_QWORD *)v95[1];
    *v75 = *v95;
    *(_QWORD *)(v76 + 8) = v75;
    *v72 = 0;
    v72[1] = 0;
  }
  v11 = *v12;
  if ((*v12 & 0xE) == 8)
    return (unsigned int *)*((_QWORD *)this + 1);
LABEL_2:
  if (*(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 < 0xB)
    return 0;
  v13 = v11 & 0xF;
  if (v13 != 3)
  {
    result = 0;
    switch(v13)
    {
      case 0:
      case 1:
        if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x10) != 0
          || (*(_WORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0xC) & 0x100) != 0
          || (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) != 0)
        {
          return 0;
        }
        v77 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v78 = this;
        break;
      case 4:
      case 5:
        return (unsigned int *)JSC::JSObject::convertInt32ToContiguous(this, a2, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      case 6:
      case 7:
        return (unsigned int *)JSC::JSObject::convertDoubleToContiguous(this, a2, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      case 10:
      case 11:
      case 12:
      case 13:
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A4700CLL);
    }
    while (1)
    {
      v79 = *(_QWORD *)(v77 + 40);
      if (v79)
      {
        if (*(_BYTE *)(*(_QWORD *)(v79 + 2048) + 4) == 2)
          break;
      }
      v80 = *(JSC::JSObject **)(v77 + 48);
      if (!v80)
        v80 = (JSC::JSObject *)*((_QWORD *)v78 + 2);
      if (v80 == (JSC::JSObject *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          return 0;
        return JSC::JSObject::createInitialContiguous(this, a2, 0, a9);
      }
      result = 0;
      v77 = 16 * (*(_DWORD *)v80 & 0xFFFFFFFE);
      v78 = v80;
      if ((*(_BYTE *)(v77 + 8) & 0x20) != 0)
        return result;
    }
    return 0;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 1);
  v15 = *(v14 - 1);
  if ((_DWORD)v15)
    bzero(v14, 8 * v15);
  __dmb(0xAu);
  v16 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v94) = 1;
  WORD2(v94) = 0;
  v95 = &v95;
  v96 = &v95;
  v97 = a2;
  v98 = v16;
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
    goto LABEL_52;
  v18 = *(unsigned __int8 *)(v16 + 8);
  v19 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  v20 = *(_DWORD *)(v17 + 4 * v19 + 852);
  v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
  if (v21 == v16
    && ((v22 = v18 & 0xFFFFFFE1 | 8, v23 = *(_DWORD *)(v17 + 868), v24 = 16 * (v23 & 0xFFFFFFFE), v23)
      ? (v25 = 16 * (v23 & 0xFFFFFFFE))
      : (v25 = 0),
        *(unsigned __int8 *)(v25 + 8) == v22))
  {
    JSC::Structure::didTransitionFromThisStructure(v16, (JSC::DeferredStructureTransitionWatchpointFire *)&v94, a9.n128_f64[0], a3, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_52:
    v24 = JSC::Structure::nonPropertyTransitionSlow(a2, v16, 7, (uint64_t)&v94, a5, a6, a7, a8, a9.n128_f64[0]);
  }
  *(_DWORD *)this = v24 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v24 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v24 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v24 + 8))
  {
    do
    {
      while (1)
      {
        v36 = *v12;
        v37 = __ldxr(v12);
        if (v37 == v36)
          break;
        __clrex();
      }
    }
    while (__stxr(v36 & 0xC0 | *(_BYTE *)(v24 + 8), v12));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v94) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v94, v33, v26, v27, v28, v29, v30, v31, v32);
  while (1)
  {
    v34 = v95;
    if (v95 == &v95)
      break;
    v56 = *v95;
    v55 = (_QWORD *)v95[1];
    *v55 = *v95;
    *(_QWORD *)(v56 + 8) = v55;
    *v34 = 0;
    v34[1] = 0;
  }
  return (unsigned int *)*((_QWORD *)this + 1);
}

JSC::Butterfly *JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  char v11;
  int v12;
  uint64_t v13;
  JSC::JSObject *v14;
  uint64_t v15;
  JSC::JSObject *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::ArrayStorage *v19;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;

  v11 = *((_BYTE *)this + 4);
  if ((v11 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v11 = *((_BYTE *)this + 4);
  }
  v12 = v11 & 0xF;
  if ((v12 - 8) >= 2)
  {
    switch(v12)
    {
      case 0:
      case 1:
        JSC::JSObject::createArrayStorage((JSC::Butterfly **)this, a2, 0, 0, a9);
        v28 = JSC::SparseArrayValueMap::create(a2, v21, v22, v23, v24, v25, v26, v27);
        **((_QWORD **)this + 1) = v28;
        if (v28 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        {
          v29 = (char *)a2 + 192;
          v30 = v28;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v29, (unint64_t)this);
          v28 = v30;
        }
        *(_DWORD *)(v28 + 16) |= 1u;
        return (JSC::Butterfly *)*((_QWORD *)this + 1);
      case 3:
        v18 = JSC::JSObject::convertUndecidedToArrayStorage(this, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 4:
      case 5:
        v18 = JSC::JSObject::convertInt32ToArrayStorage(this, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 6:
      case 7:
        v18 = JSC::JSObject::convertDoubleToArrayStorage(this, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_17;
      case 10:
      case 11:
      case 12:
      case 13:
        v19 = (JSC::ArrayStorage *)*((_QWORD *)this + 1);
        return JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(this, a2, v19, a4, a5, a6, a7, a8);
      default:
        __break(0xC471u);
        JUMPOUT(0x198A47200);
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v13 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v14 = this;
    do
    {
      v15 = *(_QWORD *)(v13 + 40);
      if (v15)
      {
        if (*(_BYTE *)(*(_QWORD *)(v15 + 2048) + 4) == 2)
          break;
      }
      v16 = *(JSC::JSObject **)(v13 + 48);
      if (!v16)
        v16 = (JSC::JSObject *)*((_QWORD *)v14 + 2);
      if (v16 == (JSC::JSObject *)2)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 2048) + 4) == 2)
          break;
        v17 = 8;
        goto LABEL_16;
      }
      v13 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
      v14 = v16;
    }
    while ((*(_BYTE *)(v13 + 8) & 0x20) == 0);
  }
  v17 = 9;
LABEL_16:
  v18 = JSC::JSObject::convertContiguousToArrayStorage((unint64_t)this, (uint64_t)a2, v17, a4, a5, a6, a7, a8);
LABEL_17:
  v19 = (JSC::ArrayStorage *)v18;
  return JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(this, a2, v19, a4, a5, a6, a7, a8);
}

unsigned __int8 *JSC::JSObject::switchToSlowPutArrayStorage(unsigned __int8 *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSObject *v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[4];

  v10 = (JSC::JSObject *)this;
  v12 = this + 4;
  v11 = this[4];
  while (1)
  {
    if ((v11 & 0x10) != 0)
    {
      this = (unsigned __int8 *)JSC::JSObject::convertFromCopyOnWrite(v10, a2, a3, a4, a5, a6, a7, a8, a9);
      v11 = *((_BYTE *)v10 + 4);
    }
    if ((v11 & 0xF) != 1)
      break;
    if ((v11 & 0xEu) <= 9)
    {
      this = (unsigned __int8 *)JSC::JSObject::ensureArrayStorageSlow(v10, a2, a3, a4, a5, a6, a7, a8, a9);
      v11 = *((_BYTE *)v10 + 4);
    }
    if ((v11 & 0xEu) <= 9)
    {
      __break(0xC471u);
      JUMPOUT(0x198A47518);
    }
    if ((v11 & 0xE) == 0xC)
      return this;
  }
  switch(v11 & 0xF)
  {
    case 3:
      this = (unsigned __int8 *)JSC::JSObject::convertUndecidedToArrayStorage((unint64_t)v10, (uint64_t)a2, 9, a4, a5, a6, a7, a8);
      break;
    case 4:
    case 5:
      this = (unsigned __int8 *)JSC::JSObject::convertInt32ToArrayStorage((unint64_t)v10, (uint64_t)a2, 9, a4, a5, a6, a7, a8);
      break;
    case 6:
    case 7:
      this = (unsigned __int8 *)JSC::JSObject::convertDoubleToArrayStorage((unint64_t)v10, (uint64_t)a2, 9, a4, a5, a6, a7, a8);
      break;
    case 8:
    case 9:
      this = (unsigned __int8 *)JSC::JSObject::convertContiguousToArrayStorage((unint64_t)v10, (uint64_t)a2, 9, a4, a5, a6, a7, a8);
      break;
    case 0xA:
    case 0xB:
      v13 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
      LODWORD(v36) = 1;
      WORD2(v36) = 0;
      v37[0] = v37;
      v37[1] = v37;
      v37[2] = a2;
      v37[3] = v13;
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
        goto LABEL_27;
      v15 = *(unsigned __int8 *)(v13 + 8);
      v16 = (v15 >> 1) & 7;
      if ((v15 & 0x10) != 0)
        v16 = ((v15 & 0xE) + 10) >> 1;
      v17 = *(_DWORD *)(v14 + 4 * v16 + 852);
      v18 = v17 ? 16 * (v17 & 0xFFFFFFFE) : 0;
      if (v18 == v13
        && ((v19 = v15 & 0xFFFFFFE1 | 0xC, v20 = *(_DWORD *)(v14 + 876), v21 = 16 * (v20 & 0xFFFFFFFE), v20)
          ? (v22 = 16 * (v20 & 0xFFFFFFFE))
          : (v22 = 0),
            *(unsigned __int8 *)(v22 + 8) == v19))
      {
        this = (unsigned __int8 *)JSC::Structure::didTransitionFromThisStructure(v13, (JSC::DeferredStructureTransitionWatchpointFire *)&v36, a9.n128_f64[0], a3, a4, a5, a6, a7, a8);
      }
      else
      {
LABEL_27:
        this = (unsigned __int8 *)JSC::Structure::nonPropertyTransitionSlow(a2, v13, 10, (uint64_t)&v36, a5, a6, a7, a8, a9.n128_f64[0]);
        v21 = (unint64_t)this;
      }
      *(_DWORD *)v10 = v21 >> 4;
      *((_BYTE *)v10 + 6) = *((_BYTE *)v10 + 6) & 0x80 | *(_BYTE *)(v21 + 10);
      *((_BYTE *)v10 + 5) = *(_BYTE *)(v21 + 9);
      if (*((unsigned __int8 *)v10 + 4) != *(unsigned __int8 *)(v21 + 8))
      {
        do
        {
          while (1)
          {
            v31 = *v12;
            v32 = __ldxr(v12);
            if (v32 == v31)
              break;
            __clrex();
          }
        }
        while (__stxr(v31 & 0xC0 | *(_BYTE *)(v21 + 8), v12));
      }
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v10 + 7))
        this = (unsigned __int8 *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v10);
      if (BYTE4(v36) == 1)
        this = (unsigned __int8 *)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v36, v30, v23, v24, v25, v26, v27, v28, v29);
      while (1)
      {
        v35 = (_QWORD *)v37[0];
        if ((_QWORD *)v37[0] == v37)
          break;
        v34 = *(_QWORD *)v37[0];
        v33 = *(_QWORD **)(v37[0] + 8);
        *v33 = *(_QWORD *)v37[0];
        *(_QWORD *)(v34 + 8) = v33;
        *v35 = 0;
        v35[1] = 0;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198A47520);
  }
  return this;
}

void JSC::JSObject::setPrototypeDirect(unint64_t a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];

  if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) > 0x16u)
  {
    JSC::JSObject::didBecomePrototype(a3, a2, a9.n128_f64[0], a3, a4, a5, a6, a7, a8);
    v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if (!*(_QWORD *)(v12 + 0x30))
    {
      *(_QWORD *)(a1 + 16) = a3;
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
      goto LABEL_12;
    }
    goto LABEL_4;
  }
  if (a3 != 2)
    return;
  v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (*(_QWORD *)(v12 + 0x30))
  {
LABEL_4:
    LODWORD(v27) = 1;
    WORD2(v27) = 0;
    v28[0] = v28;
    v28[1] = v28;
    v28[2] = a2;
    v28[3] = v12;
    v13 = JSC::Structure::changePrototypeTransition((uint64_t)a2, v12, a3, (JSC::Structure *)&v27, a5, a6, a7, a8, a9.n128_f64[0]);
    v15 = v13 >> 4;
    *(_DWORD *)a1 = v13 >> 4;
    *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v13 + 10);
    *(_BYTE *)(a1 + 5) = *(_BYTE *)(v13 + 9);
    v16 = (unsigned __int8 *)(a1 + 4);
    if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v13 + 8))
    {
      do
      {
        while (1)
        {
          v23 = *v16;
          v24 = __ldxr(v16);
          if (v24 == v23)
            break;
          __clrex();
        }
      }
      while (__stxr(v23 & 0xC0 | *(_BYTE *)(v13 + 8), v16));
    }
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
      LODWORD(v15) = *(_DWORD *)a1;
    }
    if ((*(_BYTE *)((16 * v15) | 0x12) & 8) != 0)
      JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
    if (BYTE4(v27) == 1)
      JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v27, a9.n128_f64[0], v14, a3, a4, a5, a6, a7, a8);
    while (1)
    {
      v17 = (_QWORD *)v28[0];
      if ((_QWORD *)v28[0] == v28)
        break;
      v26 = *(_QWORD *)v28[0];
      v25 = *(_QWORD **)(v28[0] + 8);
      *v25 = *(_QWORD *)v28[0];
      *(_QWORD *)(v26 + 8) = v25;
      *v17 = 0;
      v17[1] = 0;
    }
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 16) = 2;
LABEL_12:
  if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 8) & 0x20) == 0)
  {
    v18 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    v19 = (_DWORD *)a1;
    do
    {
      v20 = *(_QWORD *)(v18 + 40);
      if (v20)
      {
        if (*(_BYTE *)(*(_QWORD *)(v20 + 2048) + 4) == 2)
          break;
      }
      v21 = *(_DWORD **)(v18 + 48);
      if (!v21)
        v21 = (_DWORD *)*((_QWORD *)v19 + 2);
      if (v21 == (_DWORD *)2)
        return;
      v18 = 16 * (*v21 & 0xFFFFFFFE);
      v19 = v21;
    }
    while ((*(_BYTE *)(v18 + 8) & 0x20) == 0);
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x12) & 8) != 0)
  {
    JSC::JSGlobalObject::haveABadTime(*(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), a2, a3, a4, a5, a6, a7, a8);
  }
  else if ((*(_BYTE *)(a1 + 4) & 0xE) != 0 && (*(_BYTE *)(a1 + 4) & 0xE) != 12)
  {
    JSC::JSObject::switchToSlowPutArrayStorage((unsigned __int8 *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t JSC::JSObject::anyObjectInChainMayInterceptIndexedAccesses(JSC::JSObject *this)
{
  uint64_t i;
  uint64_t v2;
  JSC::JSObject *v3;

  for (i = 16 * (*(_DWORD *)this & 0xFFFFFFFE); (*(_BYTE *)(i + 8) & 0x20) == 0; this = v3)
  {
    v2 = *(_QWORD *)(i + 40);
    if (v2)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 2048) + 4) == 2)
        break;
    }
    v3 = *(JSC::JSObject **)(i + 48);
    if (!v3)
      v3 = (JSC::JSObject *)*((_QWORD *)this + 2);
    if (v3 == (JSC::JSObject *)2)
      return 0;
    i = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  }
  return 1;
}

BOOL JSC::JSObject::setPrototypeWithCycleCheck(unint64_t a1, JSC::VM *a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  _BOOL8 result;
  const char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::VM *v30;

  v30 = a2;
  if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x40) == 0)
  {
    v10 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
    if (!v10)
      v10 = *(_QWORD *)(a1 + 16);
    if (v10 == a4)
      return 1;
    v18 = (*(uint64_t (**)(unint64_t, unint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0xA0))(a1, a3);
    if (*((_DWORD *)a2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(a2, v11, v12, v13, v14, v15, v16, v17))
      return 0;
    if ((v18 & 1) != 0)
    {
      if ((a4 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a4 + 5) > 0x16u)
      {
        if (a4)
        {
          v20 = a4;
          while (1)
          {
            v21 = *(unsigned __int8 *)(v20 + 5);
            if (v21 < 0x17)
              break;
            if (v20 == a1)
            {
              if (!a5)
                return 0;
              v25 = "cyclic __proto__ value";
              v26 = a3;
              v27 = 23;
              goto LABEL_26;
            }
            if (v21 != 61)
            {
              v22 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
              if (!v22)
                v22 = *(_QWORD *)(v20 + 16);
              v23 = v22 && (v22 & 0xFFFE000000000002) == 0;
              v20 = v22;
              if (v23)
                continue;
            }
            goto LABEL_20;
          }
        }
        goto LABEL_20;
      }
      if (a4 == 2)
      {
LABEL_20:
        JSC::JSObject::setPrototypeDirect(a1, a2, a4, v13, v14, v15, v16, v17, v19);
        return 1;
      }
      if (!a5)
        return 0;
      v25 = "Prototype value can only be an object or null";
      v26 = a3;
      v27 = 46;
    }
    else
    {
      if (!a5)
        return 0;
      v25 = "Attempted to assign to readonly property.";
      v26 = a3;
      v27 = 42;
    }
LABEL_26:
    JSC::throwTypeError(v26, &v30, (uint64_t)v25, v27);
    return 0;
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v28 = (*(uint64_t (**)(unint64_t, unint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0xB0))(a1, a3);
  }
  else
  {
    v28 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
    if (!v28)
      v28 = *(_QWORD *)(a1 + 16);
  }
  v23 = v28 == a4;
  result = v28 == a4;
  if (!v23 && a5 != 0)
  {
    v25 = "Cannot set prototype of immutable prototype object";
    v26 = a3;
    v27 = 51;
    goto LABEL_26;
  }
  return result;
}

uint64_t JSC::JSObject::isExtensible(JSC::JSObject *this, JSC::JSGlobalObject *a2)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) + 0xA0))();
}

uint64_t JSC::JSObject::putGetter(JSC::JSObject *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, int32x2_t a10)
{
  int8x8_t v10;
  int32x2_t v11;
  _QWORD v13[4];

  a9.n128_u32[0] = 0;
  a10.i32[0] = a5 & 2;
  v13[1] = a4;
  v13[2] = 0;
  v10 = (int8x8_t)vdup_lane_s32(vceq_s32(a10, (int32x2_t)a9.n128_u64[0]), 0);
  v13[0] = 0;
  v11.i32[1] = 2;
  v11.i32[0] = a5 & 4;
  a9.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v11, (int32x2_t)a9.n128_u64[0]), 0), vbsl_s8(v10, (int8x8_t)0x600000010, (int8x8_t)0x200000018), vbsl_s8(v10, (int8x8_t)0x400000014, (int8x8_t)28));
  v13[3] = a9.n128_u64[0];
  return JSC::JSObject::defineOwnProperty(a1, a2, a3, (uint64_t)v13, 1, a6, a7, a8, a9);
}

uint64_t JSC::JSObject::putSetter(JSC::JSObject *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;

  memset(v16, 0, sizeof(v16));
  v17 = 14;
  JSC::PropertyDescriptor::setSetter((uint64_t)v16, a4);
  if ((a5 & 2) == 0)
  {
    LODWORD(v13) = v17 & 0xFFFFFFF7;
    v12.n128_u64[0] = v17 | 0x400000004;
    HIDWORD(v13) = HIDWORD(v17) | 4;
    v17 = v13;
  }
  if ((a5 & 4) == 0)
  {
    LODWORD(v14) = v17 & 0xFFFFFFFB;
    v12.n128_u64[0] = v17 | 0x200000002;
    HIDWORD(v14) = HIDWORD(v17) | 2;
    v17 = v14;
  }
  return JSC::JSObject::defineOwnProperty(a1, a2, a3, (uint64_t)v16, 1, v9, v10, v11, v12);
}

uint64_t JSC::JSObject::putDirectAccessor(int *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  BOOL v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  _QWORD v31[2];
  int v32;
  int v33;
  uint64_t v34;

  v9 = a5;
  if (!a3)
    goto LABEL_9;
  v12 = *(_DWORD *)(a3 + 16);
  if ((v12 & 0x20) != 0)
    goto LABEL_9;
  v13 = *(_BYTE **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((v12 & 4) != 0)
  {
    if ((_DWORD)v14)
    {
      v15 = *v13 - 48;
      if (v15 <= 9 && (v14 < 2 || *v13 != 48))
      {
        v28 = v14 - 1;
        v29 = v13 + 1;
        while (v28)
        {
          if (v15 > 0x19999999)
            goto LABEL_6;
          v30 = *v29 - 48;
          if (v30 > 9)
            goto LABEL_6;
          v16 = 0;
          LODWORD(v14) = 0;
          v17 = 0;
          v27 = __CFADD__(v30, 10 * v15);
          v15 = v30 + 10 * v15;
          --v28;
          ++v29;
          if (v27)
            goto LABEL_8;
        }
        goto LABEL_38;
      }
      goto LABEL_6;
    }
LABEL_44:
    v16 = 0;
    goto LABEL_7;
  }
  if (!(_DWORD)v14)
    goto LABEL_44;
  v15 = *(unsigned __int16 *)v13 - 48;
  if (v15 > 9 || (*(_WORD *)v13 == 48 ? (v23 = v14 > 1) : (v23 = 0), v23))
  {
LABEL_6:
    v16 = 0;
    LODWORD(v14) = 0;
LABEL_7:
    v17 = 0;
    goto LABEL_8;
  }
  v24 = (unsigned __int16 *)(v13 + 2);
  v25 = v14 - 1;
  while (v25)
  {
    if (v15 > 0x19999999)
      goto LABEL_6;
    v26 = *v24 - 48;
    if (v26 > 9)
      goto LABEL_6;
    v16 = 0;
    LODWORD(v14) = 0;
    v17 = 0;
    v27 = __CFADD__(v26, 10 * v15);
    v15 = v26 + 10 * v15;
    ++v24;
    --v25;
    if (v27)
      goto LABEL_8;
  }
LABEL_38:
  v16 = 0x100000000;
  if (v15 == -1)
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  else
  {
    LODWORD(v14) = v15;
  }
  if (v15 == -1)
    v17 = 0;
  else
    v17 = v15 & 0xFFFFFF00;
LABEL_8:
  if ((v16 & 0x100000000) != 0)
    return JSC::JSObject::putDirectIndex((unint64_t)a1, a2, (JSC::VM *)(v17 | v14), a4, a5, 0, a8, a9, a6.n128_f64[0]);
LABEL_9:
  v18 = *(_QWORD *)(a2 + 56);
  v31[0] = 0;
  v31[1] = a1;
  v32 = -1;
  a6.n128_u64[0] = 0x100000001000000;
  v33 = 0x1000000;
  v34 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, v18, a3, a4, a5, (uint64_t)v31, a8, a9, a6);
  v20 = *(_DWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x10);
  if ((v9 & 2) != 0)
    v20 |= 0x10u;
  result = v19 == 0;
  if (*(_QWORD *)(*(_QWORD *)(v18 + 41952) + 16) == a3)
    v22 = 8;
  else
    v22 = 24;
  *(_DWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x10) = v22 | v20;
  return result;
}

BOOL JSC::JSObject::putDirectCustomAccessor(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  _BOOL8 result;
  int v15;
  _QWORD v16[2];
  int v17;
  int v18;
  uint64_t v19;

  v16[0] = 0;
  v16[1] = a1;
  v17 = -1;
  a6.n128_u64[0] = 0x100000001000000;
  v18 = 0x1000000;
  v19 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, a3, a4, ~(2 * a5) & 0x40 | a5, (uint64_t)v16, a8, a9, a6);
  result = v13 == 0;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
    v15 = 8;
  else
    v15 = 24;
  *(_DWORD *)((16 * *a1) | 0x10) |= (8 * a5) & 0x10 | v15;
  return result;
}

void JSC::JSObject::putDirectCustomGetterSetterWithoutTransition(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  char v9;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23[6];
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;

  v9 = (char)a5;
  v14 = 16 * (*a1 & 0xFFFFFFFE);
  v27 = *a1;
  v26 = v14;
  v15 = *(unsigned __int16 *)(v14 + 24);
  if (v15 == 65534)
    goto LABEL_5;
  if (v15 == 0xFFFF)
    v15 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 84);
  if (v15 < 64)
  {
LABEL_5:
    v16 = 0;
  }
  else if ((v15 - 63) >= 5)
  {
    v21 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
    v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
    v16 = (v22 | HIWORD(v22)) + 1;
  }
  else
  {
    v16 = 4;
  }
  v24 = 0;
  v25 = v16;
  v23[0] = (unsigned int *)&v25;
  v23[1] = a1;
  v23[2] = (unsigned int *)a2;
  v23[3] = &v27;
  v23[4] = (unsigned int *)&v26;
  v23[5] = (unsigned int *)&v24;
  JSC::Structure::addPropertyWithoutTransition<JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v14, a2, a3, a5, v23, a6, a7, a8, a9);
  if ((*(_BYTE *)((16 * *a1) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity(a2);
  v17 = v24;
  if (v24 <= 63)
  {
    v18 = (uint64_t)(a1 + 4);
  }
  else
  {
    v18 = *((_QWORD *)a1 + 1) - 8;
    v17 = 63 - v24;
  }
  *(_QWORD *)(v18 + 8 * v17) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
  v19 = *(_DWORD *)(v14 + 16);
  if ((v9 & 2) != 0)
    v19 |= 0x10u;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
    v20 = 8;
  else
    v20 = 24;
  *(_DWORD *)(v14 + 16) = v20 | v19;
}

void JSC::JSObject::putDirectNonIndexAccessorWithoutTransition(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22[6];
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;

  v9 = (int)a5;
  v14 = 16 * (*a1 & 0xFFFFFFFE);
  v26 = *a1;
  v25 = v14;
  v15 = *(unsigned __int16 *)(v14 + 24);
  if (v15 == 65534)
    goto LABEL_5;
  if (v15 == 0xFFFF)
    v15 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 84);
  if (v15 < 64)
  {
LABEL_5:
    v16 = 0;
  }
  else if ((v15 - 63) >= 5)
  {
    v20 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
    v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
    v16 = (v21 | HIWORD(v21)) + 1;
  }
  else
  {
    v16 = 4;
  }
  v23 = 0;
  v24 = v16;
  v22[0] = (unsigned int *)&v24;
  v22[1] = a1;
  v22[2] = (unsigned int *)a2;
  v22[3] = &v26;
  v22[4] = (unsigned int *)&v25;
  v22[5] = (unsigned int *)&v23;
  JSC::Structure::addPropertyWithoutTransition<JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v14, a2, a3, a5, v22, a6, a7, a8, a9);
  if ((*(_BYTE *)((16 * *a1) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity(a2);
  v17 = v23;
  if (v23 <= 63)
  {
    v18 = (uint64_t)(a1 + 4);
  }
  else
  {
    v18 = *((_QWORD *)a1 + 1) - 8;
    v17 = 63 - v23;
  }
  *(_QWORD *)(v18 + 8 * v17) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
    v19 = 8;
  else
    v19 = 24;
  *(_DWORD *)(v14 + 16) |= (8 * v9) & 0x10 | v19;
}

uint64_t JSC::JSObject::hasProperty(unint64_t a1, uint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _BYTE *v73;
  uint64_t v74;
  JSC::VM *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned int v104;
  JSC::VM *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned __int8 *v125;
  int v126;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v128;
  const unsigned __int8 *v129;
  int v130;
  uint64_t v131;
  BOOL v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  JSC::VM *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t *v170;
  _BYTE v171[124];
  uint64_t v172;

  v10 = a2;
  v11 = a1;
  v172 = *MEMORY[0x1E0C80C00];
  v161 = 0xFFFFFFFF00000000;
  v163 = 0;
  v164 = 0;
  v162 = a1;
  v165 = 0x10000;
  v166 = 0;
  LOBYTE(v167) = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v12 = (_BYTE *)(a1 + 6);
  v13 = a3 >> 4;
  v14 = a1;
  if ((*(_BYTE *)(a1 + 6) & 8) == 0)
  {
    v15 = *(JSC::VM **)(a2 + 56);
    a2 = 40;
    v8 = a1;
    do
    {
      v16 = *(_DWORD *)v8 & 0xFFFFFFFE;
      v17 = 16 * v16;
      if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * v16 + 0x20)) != 0)
        goto LABEL_14;
      v18 = *(_QWORD *)(16 * v16 + 0x58);
      if (!v18)
      {
        v29 = *(_QWORD *)(16 * v16 + 0x40);
        if (!v29 || *(_BYTE *)(v29 + 5) != 1 && *(_DWORD *)(v29 + 80) < 2u)
          goto LABEL_14;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v17, v15, 1, a4, a5, a6, a7, a8);
        a2 = 40;
        if (!v18)
          goto LABEL_14;
      }
      if (!*(_DWORD *)(v18 + 24))
        goto LABEL_14;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(unsigned int *)(v18 + 8);
      v22 = *(_DWORD *)(a3 + 16);
      if ((v19 & 1) != 0)
      {
        if ((v22 & 0x20) != 0)
          v22 = *(_DWORD *)(a3 + 32);
        v23 = *(_DWORD *)(v18 + 12);
        v24 = (v22 >> 8) & *(_QWORD *)&v23;
        v25 = *(unsigned __int8 *)(v20 + v24);
        if (!*(_BYTE *)(v20 + v24))
          goto LABEL_14;
        v26 = v20 + v21;
        v27 = 1;
        while (1)
        {
          v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
          if (a3 == (v28 & 0xFFFFFFFFFFFFLL))
            break;
          v24 = ((_DWORD)v24 + v27) & v23;
          v25 = *(unsigned __int8 *)(v20 + v24);
          ++v27;
          if (!*(_BYTE *)(v20 + v24))
            goto LABEL_14;
        }
        a6 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
      }
      else
      {
        if ((v22 & 0x20) != 0)
          v22 = *(_DWORD *)(a3 + 32);
        v38 = *(_DWORD *)(v18 + 12);
        v39 = v38 & (v22 >> 8);
        v40 = *(_DWORD *)(v20 + 4 * v39);
        if (!v40)
          goto LABEL_14;
        v41 = v20 + 4 * v21;
        v42 = 1;
        while (1)
        {
          v43 = (v40 - 1);
          if (*(_QWORD *)(v41 + 16 * v43) == a3)
            break;
          v39 = (v39 + v42) & v38;
          v40 = *(_DWORD *)(v20 + 4 * v39);
          ++v42;
          if (!v40)
            goto LABEL_14;
        }
        a6 = *(unsigned int *)(v41 + 16 * v43 + 8) | ((unint64_t)*(unsigned __int8 *)(v41 + 16 * v43 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v50 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v51 = v8 + 16;
          v52 = a6 << 32;
        }
        else
        {
          v51 = *(_QWORD *)(v8 + 8) - 8;
          v52 = 0x3F00000000 - (a6 << 32);
        }
        v53 = *(_QWORD *)(v51 + (v52 >> 29));
        if ((v53 & 0xFFFE000000000002) == 0)
        {
          v54 = *(unsigned __int8 *)(v53 + 5);
          if (v54 != 5)
          {
            if (v54 != 6)
              goto LABEL_63;
            v62 = *(_DWORD *)(v17 + 16) & 3;
            v63 = *(_QWORD *)(v53 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v53 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v65 = *(_QWORD *)(v53 + 24);
              v64 = *(uint64_t **)(v53 + 32);
              v159 = *(_QWORD *)(v53 + 8);
              v160 = v63;
              LODWORD(v161) = HIDWORD(a6);
              v163 = v8;
              goto LABEL_85;
            }
            v159 = *(_QWORD *)(v53 + 8);
            v160 = v63;
            LODWORD(v161) = HIDWORD(a6);
            v163 = v8;
LABEL_170:
            result = 1;
            BYTE1(v165) = 3;
            if (v62 != 2)
              LOBYTE(v165) = 1;
            goto LABEL_54;
          }
          v61 = (unsigned int *)v8;
LABEL_79:
          JSC::JSObject::fillGetterPropertySlot(v61, a2, (uint64_t)&v159, v53, v50, a6);
LABEL_80:
          result = 1;
          goto LABEL_54;
        }
LABEL_63:
        v159 = v53;
        v163 = v8;
LABEL_64:
        v161 = __PAIR64__(a6, v50);
        v55 = 257;
        goto LABEL_65;
      }
LABEL_14:
      if ((*v12 & 0x20) != 0)
      {
        if (a3)
        {
          v60 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
          if ((_DWORD)v60)
          {
            v31 = 16 * v60;
            do
            {
              v30 = *(_QWORD *)(v31 + 24);
              if (!v30)
                goto LABEL_26;
              if ((*(_BYTE *)((16 * *(unsigned int *)v8) | 0x12) & 0x40) != 0)
                goto LABEL_26;
              v32 = *(_DWORD *)(a3 + 16);
              if ((v32 & 0x20) != 0)
                goto LABEL_26;
              v33 = *(_DWORD *)(v30 + 4) & (v32 >> 8);
              v34 = *(_QWORD *)(v30 + 32);
              v35 = *(unsigned __int16 *)(v34 + 4 * v33);
              if (v35 == 0xFFFF)
                goto LABEL_26;
              v157 = *(_QWORD *)(v30 + 16);
              while (1)
              {
                v158 = (__int16)v35;
                v36 = (unint64_t *)(*(_QWORD *)(v30 + 24) + 40 * (__int16)v35);
                v37 = v36[1];
                if (!v37)
                  goto LABEL_35;
                if (WTF::equalInternal<unsigned char>(a3, *v36, v37 - 1))
                  break;
                v34 = *(_QWORD *)(v30 + 32);
LABEL_35:
                v33 = *(__int16 *)(v34 + 4 * v33 + 2);
                a2 = 40;
                if (v33 == -1)
                  goto LABEL_26;
                LOWORD(v35) = *(_WORD *)(v34 + 4 * v33);
              }
              v66 = *(_QWORD *)(v30 + 24);
              a2 = 40;
              if (v66)
              {
                v67 = *(_DWORD *)(v66 + 40 * v158 + 16);
                if ((v67 & 0x3B10) == 0)
                {
                  if ((v67 & 0x400) != 0)
                  {
                    v130 = *(_DWORD *)(v66 + 40 * v158 + 16);
                    v131 = *(_QWORD *)(v66 + 40 * v158 + 24);
                    v132 = v131 == (int)v131;
                    v133 = v131 | 0xFFFE000000000000;
                    v134 = COERCE__INT64((double)v131) + 0x2000000000000;
                    if (v132)
                      v134 = v133;
                    v159 = v134;
                    LODWORD(v161) = v130;
                    v163 = v8;
                    result = 1;
                    BYTE1(v165) = 1;
                    goto LABEL_54;
                  }
                  v68 = *(_DWORD *)(v66 + 40 * v158 + 16);
                  if ((v67 & 0x8000) != 0)
                  {
                    v135 = v66 + 40 * v158;
                    v137 = *(uint64_t **)(v135 + 24);
                    v136 = *(_QWORD *)(v135 + 32);
                    v159 = *v137;
                    v160 = v136;
                    LODWORD(v161) = v68;
                    v163 = v8;
                    LOWORD(v165) = 769;
                    result = 1;
                    HIBYTE(v165) = 1;
                    v169 = v157;
                    v170 = v137;
                    goto LABEL_54;
                  }
                  v69 = v66 + 40 * v158;
                  v71 = *(_QWORD *)(v69 + 24);
                  v70 = *(_QWORD *)(v69 + 32);
                  if ((v67 & 0x4000) != 0)
                  {
                    v159 = v71;
                    v160 = v70;
                    LODWORD(v161) = v67;
                    v163 = v8;
                    LOWORD(v165) = 769;
                    result = 1;
                    HIBYTE(v165) = 1;
                    v169 = v157;
                    v170 = 0;
                    goto LABEL_54;
                  }
                  v159 = v71;
                  v160 = v70;
                  LODWORD(v161) = v67;
                  v163 = v8;
                  v55 = 769;
LABEL_65:
                  result = 1;
                  LOWORD(v165) = v55;
                  goto LABEL_54;
                }
                v100 = JSC::setUpStaticFunctionSlot(v15, v157, v66 + 40 * v158, (unsigned int *)v8, a3, (uint64_t)&v159, a7, a8);
                a2 = 40;
                if ((v100 & 1) != 0)
                  goto LABEL_80;
              }
LABEL_26:
              v31 = *(_QWORD *)(v31 + 16);
            }
            while (v31);
          }
        }
      }
      v14 = *(_QWORD *)(v17 + 48);
      if (!v14)
        v14 = *(_QWORD *)(v8 + 16);
      if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_53;
        v44 = *(_DWORD *)(a3 + 16);
        if ((v44 & 0x20) != 0)
          goto LABEL_53;
        v45 = *(_WORD **)(a3 + 8);
        v46 = *(unsigned int *)(a3 + 4);
        if ((v44 & 4) == 0)
        {
          if ((_DWORD)v46)
          {
            v47 = (unsigned __int16)*v45 - 48;
            if (v47 <= 9 && (*v45 != 48 || v46 <= 1))
            {
              v56 = v45 + 1;
              v57 = v46 - 1;
              while (v57)
              {
                if (v47 > 0x19999999)
                  goto LABEL_53;
                v58 = *v56 - 48;
                if (v58 > 9)
                  goto LABEL_53;
                result = 0;
                v59 = __CFADD__(v58, 10 * v47);
                v47 = v58 + 10 * (_DWORD)v47;
                ++v56;
                --v57;
                if (v59)
                  goto LABEL_54;
              }
              goto LABEL_234;
            }
          }
          goto LABEL_53;
        }
        if (!(_DWORD)v46)
          goto LABEL_53;
        v47 = *(unsigned __int8 *)v45 - 48;
        if (v47 > 9 || v46 >= 2 && *(_BYTE *)v45 == 48)
          goto LABEL_53;
        v138 = (unsigned __int8 *)v45 + 1;
        v139 = v46 - 1;
        while (v139)
        {
          if (v47 > 0x19999999)
            goto LABEL_53;
          v140 = *v138 - 48;
          if (v140 > 9)
            goto LABEL_53;
          result = 0;
          v59 = __CFADD__(v140, 10 * v47);
          v47 = v140 + 10 * (_DWORD)v47;
          ++v138;
          --v139;
          if (v59)
            goto LABEL_54;
        }
LABEL_234:
        if ((_DWORD)v47 == -1)
        {
LABEL_53:
          result = 0;
          goto LABEL_54;
        }
        v141 = *(JSC::VM **)(v10 + 56);
        while (2)
        {
          v142 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
          v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(16 * *(unsigned int *)(v142 + 0x4C)
                                                                                 + 0x70))(v11, v10, v47, &v159);
          v151 = v143;
          if (*((_DWORD *)v141 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v141, v144, v145, v146, v147, v148, v149, v150);
            if (((hasExceptionsAfterHandlingTraps | v151) & 1) != 0)
            {
LABEL_248:
              result = !hasExceptionsAfterHandlingTraps;
              goto LABEL_54;
            }
          }
          else if ((v143 & 1) != 0)
          {
            goto LABEL_80;
          }
          if (BYTE2(v165) == 3)
          {
            if (v166)
              goto LABEL_53;
            v152 = *(unsigned __int8 *)(v11 + 5);
            if (v152 != 61)
              goto LABEL_240;
          }
          else
          {
            v152 = *(unsigned __int8 *)(v11 + 5);
            if (v152 == 61)
            {
              if (BYTE2(v165) == 1)
                goto LABEL_53;
            }
            else
            {
LABEL_240:
              if ((v152 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v144, v145, v146, v147, v148, v149, v150) <= v47)
              {
                goto LABEL_53;
              }
            }
          }
          if ((*(_WORD *)(v142 + 12) & 0x800) == 0 || BYTE2(v165) == 3)
          {
            v153 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v153)
              v153 = *(_QWORD *)(v11 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v153 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xB0))(v11, v10);
            }
            else
            {
              v153 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v153)
                v153 = *(_QWORD *)(v11 + 16);
            }
            if (*((_DWORD *)v141 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v141, v144, v145, v146, v147, v148, v149, v150))
            {
              goto LABEL_53;
            }
          }
          if ((v153 & 0xFFFE000000000002) != 0)
            goto LABEL_53;
          result = 0;
          v11 = v153;
          if (*(unsigned __int8 *)(v153 + 5) <= 0x16u)
            goto LABEL_54;
          continue;
        }
      }
      v12 = (_BYTE *)(v14 + 6);
      v8 = v14;
    }
    while ((*(_BYTE *)(v14 + 6) & 8) == 0);
  }
  if (a3)
  {
    v72 = *(_DWORD *)(a3 + 16);
    if ((v72 & 0x20) == 0)
    {
      v73 = *(_BYTE **)(a3 + 8);
      v74 = *(unsigned int *)(a3 + 4);
      if ((v72 & 4) != 0)
      {
        if ((_DWORD)v74)
        {
          v8 = *v73 - 48;
          if (v8 <= 9 && (v74 < 2 || *v73 != 48))
          {
            v154 = v73 + 1;
            v155 = v74 - 1;
            while (v155)
            {
              if (v8 <= 0x19999999)
              {
                v156 = *v154 - 48;
                if (v156 <= 9)
                {
                  v59 = __CFADD__(v156, 10 * v8);
                  v8 = v156 + 10 * (_DWORD)v8;
                  ++v154;
                  --v155;
                  if (!v59)
                    continue;
                }
              }
              goto LABEL_99;
            }
            if ((_DWORD)v8 != -1)
              goto LABEL_157;
          }
        }
      }
      else if ((_DWORD)v74)
      {
        v8 = *(unsigned __int16 *)v73 - 48;
        if (v8 <= 9 && (*(_WORD *)v73 != 48 || v74 <= 1))
        {
          v102 = (unsigned __int16 *)(v73 + 2);
          v103 = v74 - 1;
          while (v103)
          {
            if (v8 <= 0x19999999)
            {
              v104 = *v102 - 48;
              if (v104 <= 9)
              {
                v59 = __CFADD__(v104, 10 * v8);
                v8 = v104 + 10 * (_DWORD)v8;
                ++v102;
                --v103;
                if (!v59)
                  continue;
              }
            }
            goto LABEL_99;
          }
          if ((_DWORD)v8 != -1)
          {
LABEL_157:
            v105 = *(JSC::VM **)(v10 + 56);
            while (1)
            {
              v106 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
              v107 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                              * *(unsigned int *)(v106 + 0x4C)
                                                                                              + 0x70))(v11, v10, v8, &v159);
              v115 = v107;
              if (*((_DWORD *)v105 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v105, v108, v109, v110, v111, v112, v113, v114);
                if (((hasExceptionsAfterHandlingTraps | v115) & 1) != 0)
                  goto LABEL_248;
              }
              else if ((v107 & 1) != 0)
              {
                goto LABEL_80;
              }
              if (BYTE2(v165) == 3)
              {
                if (v166)
                  goto LABEL_53;
                v116 = *(unsigned __int8 *)(v11 + 5);
                if (v116 == 61)
                  goto LABEL_163;
              }
              else
              {
                v116 = *(unsigned __int8 *)(v11 + 5);
                if (v116 == 61)
                {
                  if (BYTE2(v165) == 1)
                    goto LABEL_53;
                  goto LABEL_163;
                }
              }
              if ((v116 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v108, v109, v110, v111, v112, v113, v114) <= v8)
              {
                goto LABEL_53;
              }
LABEL_163:
              if ((*(_WORD *)(v106 + 12) & 0x800) == 0 || BYTE2(v165) == 3)
              {
                v117 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                if (!v117)
                  v117 = *(_QWORD *)(v11 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v117 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v11, v10);
                }
                else
                {
                  v117 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v117)
                    v117 = *(_QWORD *)(v11 + 16);
                }
                if (*((_DWORD *)v105 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v105, v108, v109, v110, v111, v112, v113, v114))
                {
                  goto LABEL_53;
                }
              }
              if ((v117 & 0xFFFE000000000002) != 0)
                goto LABEL_53;
              result = 0;
              v11 = v117;
              if (*(unsigned __int8 *)(v117 + 5) <= 0x16u)
                goto LABEL_54;
            }
          }
        }
      }
    }
  }
LABEL_99:
  v75 = *(JSC::VM **)(v10 + 56);
  while (1)
  {
    v76 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v14 + 6) & 8) == 0)
      break;
    v120 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(v14, v10, a3, &v159);
    v121 = v120;
    if (*((_DWORD *)v75 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v75, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v121) & 1) != 0)
        goto LABEL_248;
    }
    else if ((v120 & 1) != 0)
    {
      goto LABEL_80;
    }
    if (BYTE2(v165) == 3)
    {
      if (v166)
        goto LABEL_53;
      v122 = *(unsigned __int8 *)(v14 + 5);
      if (v122 != 61)
      {
LABEL_192:
        if (!a3)
          goto LABEL_113;
        if ((v122 - 50) < 0xFFFFFFF5)
          goto LABEL_113;
        v123 = *(_DWORD *)(a3 + 16);
        if ((v123 & 0x20) != 0)
          goto LABEL_113;
        v124 = *(unsigned int *)(a3 + 4);
        if (!(_DWORD)v124)
          goto LABEL_113;
        v125 = *(unsigned __int8 **)(a3 + 8);
        if ((v123 & 4) == 0)
        {
          v126 = *(unsigned __int16 *)v125;
          if ((_DWORD)v124 == 1)
            goto LABEL_198;
          if (v126 == 45)
          {
            v126 = *((unsigned __int16 *)v125 + 1);
            goto LABEL_205;
          }
          if ((v126 - 48) >= 0xA && ((_DWORD)v124 != 8 || v126 != 73))
          {
LABEL_216:
            if ((_DWORD)v124 != 3 || v126 != 78)
              goto LABEL_113;
          }
LABEL_209:
          v8 = v8 & 0xFFFFFF0000000000 | v124 | ((unint64_t)((v123 >> 2) & 1) << 32);
          JSC::jsToNumber(v125, v8);
          WTF::numberToString(v171, v128);
          if (WTF::equal(a3, (unint64_t)v171, v129))
            goto LABEL_53;
          goto LABEL_113;
        }
        v126 = *v125;
        if ((_DWORD)v124 == 1)
        {
LABEL_198:
          if ((v126 - 48) < 0xA)
            goto LABEL_53;
          goto LABEL_113;
        }
        if (v126 == 45)
        {
          v126 = v125[1];
LABEL_205:
          if ((v126 - 48) < 0xA)
          {
            if ((_DWORD)v124 == 2)
              goto LABEL_53;
            goto LABEL_209;
          }
          if ((_DWORD)v124 != 9)
            goto LABEL_113;
        }
        else
        {
          if ((v126 - 48) < 0xA)
            goto LABEL_209;
          if ((_DWORD)v124 != 8)
            goto LABEL_216;
        }
        if (v126 != 73)
          goto LABEL_113;
        goto LABEL_209;
      }
    }
    else
    {
      v122 = *(unsigned __int8 *)(v14 + 5);
      if (v122 != 61)
        goto LABEL_192;
      if (BYTE2(v165) == 1)
        goto LABEL_53;
    }
LABEL_113:
    if ((*(_WORD *)(v76 + 12) & 0x800) != 0)
    {
      v88 = *(_DWORD *)v14;
      if (BYTE2(v165) != 3)
      {
        v119 = 16 * (v88 & 0xFFFFFFFE);
        if ((*(_WORD *)(v119 + 12) & 0x800) != 0)
        {
          v89 = (*(uint64_t (**)(unint64_t, uint64_t))(16 * *(unsigned int *)(v119 + 76) + 0xB0))(v14, v10);
        }
        else
        {
          v89 = *(_QWORD *)(v119 + 48);
          if (!v89)
            v89 = *(_QWORD *)(v14 + 16);
        }
        if (*((_DWORD *)v75 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v75, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
          goto LABEL_53;
        goto LABEL_117;
      }
    }
    else
    {
      v88 = *(_DWORD *)v14;
    }
    v89 = *(_QWORD *)(16 * (v88 & 0xFFFFFFFE) + 0x30);
    if (!v89)
      v89 = *(_QWORD *)(v14 + 16);
LABEL_117:
    if ((v89 & 0xFFFE000000000002) != 0)
      goto LABEL_53;
    result = 0;
    v14 = v89;
    if (*(unsigned __int8 *)(v89 + 5) <= 0x16u)
      goto LABEL_54;
  }
  if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_112;
  v77 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x58);
  if (!v77)
  {
    v90 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40);
    if (!v90 || *(_BYTE *)(v90 + 5) != 1 && *(_DWORD *)(v90 + 80) < 2u)
      goto LABEL_112;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)), v75, 1, a4, a5, a6, a7, a8);
    if (!v77)
      goto LABEL_112;
  }
  if (!*(_DWORD *)(v77 + 24))
    goto LABEL_112;
  v78 = *(_QWORD *)(v77 + 16);
  v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
  v80 = *(unsigned int *)(v77 + 8);
  v81 = *(_DWORD *)(a3 + 16);
  if ((v78 & 1) != 0)
  {
    if ((v81 & 0x20) != 0)
      v81 = *(_DWORD *)(a3 + 32);
    v82 = *(_DWORD *)(v77 + 12);
    v83 = (v81 >> 8) & *(_QWORD *)&v82;
    v84 = *(unsigned __int8 *)(v79 + v83);
    if (*(_BYTE *)(v79 + v83))
    {
      v85 = v79 + v80;
      v86 = 1;
      while (1)
      {
        v87 = *(_QWORD *)(v85 + 8 * (v84 - 1));
        if (a3 == (v87 & 0xFFFFFFFFFFFFLL))
          break;
        v83 = ((_DWORD)v83 + v86) & v82;
        v84 = *(unsigned __int8 *)(v79 + v83);
        ++v86;
        if (!*(_BYTE *)(v79 + v83))
          goto LABEL_112;
      }
      a6 = (v87 >> 16) & 0xFF00000000 | HIBYTE(v87);
      goto LABEL_125;
    }
LABEL_112:
    if ((*(_BYTE *)(v14 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v14, v75, a3, (uint64_t)&v159) & 1) != 0)
    {
      goto LABEL_80;
    }
    goto LABEL_113;
  }
  if ((v81 & 0x20) != 0)
    v81 = *(_DWORD *)(a3 + 32);
  v91 = *(_DWORD *)(v77 + 12);
  v92 = v91 & (v81 >> 8);
  v93 = *(_DWORD *)(v79 + 4 * v92);
  if (!v93)
    goto LABEL_112;
  v94 = v79 + 4 * v80;
  v95 = 1;
  while (1)
  {
    v96 = (v93 - 1);
    if (*(_QWORD *)(v94 + 16 * v96) == a3)
      break;
    v92 = (v92 + v95) & v91;
    v93 = *(_DWORD *)(v79 + 4 * v92);
    ++v95;
    if (!v93)
      goto LABEL_112;
  }
  a6 = *(unsigned int *)(v94 + 16 * v96 + 8) | ((unint64_t)*(unsigned __int8 *)(v94 + 16 * v96 + 12) << 32);
LABEL_125:
  if ((_DWORD)a6 == -1)
    goto LABEL_112;
  v50 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v97 = v14 + 16;
    v98 = a6 << 32;
  }
  else
  {
    v97 = *(_QWORD *)(v14 + 8) - 8;
    v98 = 0x3F00000000 - (a6 << 32);
  }
  v53 = *(_QWORD *)(v97 + (v98 >> 29));
  if ((v53 & 0xFFFE000000000002) != 0)
  {
LABEL_140:
    v159 = v53;
    v163 = v14;
    goto LABEL_64;
  }
  v99 = *(unsigned __int8 *)(v53 + 5);
  if (v99 == 5)
  {
    v61 = (unsigned int *)v14;
    goto LABEL_79;
  }
  if (v99 != 6)
    goto LABEL_140;
  v62 = *(_DWORD *)(v76 + 16) & 3;
  v118 = *(_QWORD *)(v53 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
  {
    v159 = *(_QWORD *)(v53 + 8);
    v160 = v118;
    LODWORD(v161) = HIDWORD(a6);
    v163 = v14;
    goto LABEL_170;
  }
  v65 = *(_QWORD *)(v53 + 24);
  v64 = *(uint64_t **)(v53 + 32);
  v159 = *(_QWORD *)(v53 + 8);
  v160 = v118;
  LODWORD(v161) = HIDWORD(a6);
  v163 = v14;
LABEL_85:
  BYTE1(v165) = 3;
  result = 1;
  if (v62 != 2)
    LOBYTE(v165) = 1;
  HIBYTE(v165) = 1;
  v169 = v65;
  v170 = v64;
LABEL_54:
  if (v168)
  {
    v49 = *(_DWORD *)(v167 + 4);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198A48934);
    }
    *(_DWORD *)(v167 + 4) = v49 - 1;
  }
  return result;
}

BOOL JSC::JSObject::hasProperty(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t a3)
{
  JSC::JSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL8 result;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  BOOL hasExceptionsAfterHandlingTraps;
  char v25;
  uint64_t v26;
  char v27[16];
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v5 = this;
  v28 = 0xFFFFFFFF00000000;
  v30 = 0;
  v31 = 0;
  v29 = this;
  v32 = 0x10000;
  v33 = 0;
  LOBYTE(v34) = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v6 = *((_QWORD *)a2 + 7);
  while (1)
  {
    v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
    v8 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, char *))(16
                                                                                            * *(unsigned int *)(v7 + 0x4C)
                                                                                            + 0x70))(v5, a2, a3, v27);
    if (*(_DWORD *)(v6 + 80))
      break;
    if ((v8 & 1) != 0)
    {
      result = 1;
      goto LABEL_14;
    }
LABEL_4:
    if (BYTE2(v32) == 3)
    {
      if (v33)
        goto LABEL_12;
      v16 = *((unsigned __int8 *)v5 + 5);
      if (v16 != 61)
      {
LABEL_6:
        if ((v16 - 39) <= 0xA
          && JSC::JSArrayBufferView::length(v5, v9, v10, v11, v12, v13, v14, v15) <= a3)
        {
          goto LABEL_12;
        }
      }
    }
    else
    {
      v16 = *((unsigned __int8 *)v5 + 5);
      if (v16 != 61)
        goto LABEL_6;
      if (BYTE2(v32) == 1)
        goto LABEL_12;
    }
    if ((*(_WORD *)(v7 + 12) & 0x800) == 0 || BYTE2(v32) == 3)
    {
      v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
      if (!v17)
        v17 = *((_QWORD *)v5 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v26 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v5, a2);
      }
      else
      {
        v26 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
        if (!v26)
          v26 = *((_QWORD *)v5 + 2);
      }
      if (*(_DWORD *)(v6 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6, v9, v10, v11, v12, v13, v14, v15);
        v17 = v26;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_12;
      }
      else
      {
        v17 = v26;
      }
    }
    if ((v17 & 0xFFFE000000000002) == 0)
    {
      v5 = (JSC::JSObject *)v17;
      if (*(unsigned __int8 *)(v17 + 5) > 0x16u)
        continue;
    }
LABEL_12:
    result = 0;
    goto LABEL_14;
  }
  v20 = *(_DWORD *)(v6 + 80);
  if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
  {
    v25 = v8;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v10, v11, v12, v13, v14, v15);
    v8 = v25;
  }
  v21 = *(_QWORD *)(v6 + 16);
  v22 = v21 == 0;
  if (v21)
    v23 = 1;
  else
    v23 = v8;
  if ((v23 & 1) == 0)
    goto LABEL_4;
  result = v22;
LABEL_14:
  if (v35)
  {
    v19 = *(_DWORD *)(v34 + 4);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198A49230);
    }
    *(_DWORD *)(v34 + 4) = v19 - 1;
  }
  return result;
}

BOOL JSC::JSObject::hasProperty(JSC::JSObject *this, uint64_t ***a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  const JSC::PropertyTable *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t hasProperty;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  if ((unint64_t)a3 <= 0xFFFFFFFE)
    return JSC::JSObject::hasProperty(this, (JSC::JSGlobalObject *)a2, (uint64_t)a3);
  v11 = a2[7];
  if (a3 == (const WTF::StringImpl *)0xFFFFFFFFLL)
    JSC::Identifier::from(v11, 0xFFFFFFFFuLL, (const WTF::StringImpl *)0xFFFFFFFFLL, a4, a5, a6, a7, a8, (int **)&v34);
  else
    JSC::Identifier::from(v11, (JSC::VM *)a2, (double)(unint64_t)a3, a3, a4, a5, a6, a7, a8, &v34);
  hasProperty = JSC::JSObject::hasProperty((unint64_t)this, (uint64_t)a2, (unint64_t)v34, v12, v13, v14, v15, v16);
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return hasProperty;
}

uint64_t JSC::JSObject::hasEnumerableProperty(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  _WORD *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t result;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  JSC::VM *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  JSC::VM *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  char v95;
  char v96;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned int v100;
  JSC::VM *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  double v123;
  const unsigned __int8 *v124;
  int v125;
  uint64_t v126;
  BOOL v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  JSC::VM *v133;
  unint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  unsigned int v137;
  _BOOL4 v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned int v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159[18];

  v10 = a1;
  v159[16] = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::VM **)(a2 + 56);
  v149 = 0xFFFFFFFF00000000;
  v151 = 0;
  v152 = 0;
  v150 = a1;
  v153 = 0x20000;
  v154 = 0;
  LOBYTE(v155) = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v12 = a3 >> 4;
  v13 = a1;
  v14 = (_BYTE *)(a1 + 6);
  if ((*(_BYTE *)(a1 + 6) & 8) == 0)
  {
    v8 = a1;
    do
    {
      v15 = *(_DWORD *)v8 & 0xFFFFFFFE;
      v16 = 16 * v15;
      if ((_DWORD)v12 && (v12 & ~*(_DWORD *)(16 * v15 + 0x20)) == 0)
      {
        v17 = *(_QWORD *)(16 * v15 + 0x58);
        if (v17
          || (v28 = *(_QWORD *)(16 * v15 + 0x40)) != 0
          && (*(_BYTE *)(v28 + 5) == 1 || *(_DWORD *)(v28 + 80) >= 2u)
          && (v29 = a2,
              JSC::Structure::materializePropertyTable((JSC::Structure *)v16, v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), a2 = v29, v17))
        {
          if (*(_DWORD *)(v17 + 24))
          {
            v18 = *(_QWORD *)(v17 + 16);
            v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
            v20 = *(unsigned int *)(v17 + 8);
            v21 = *(_DWORD *)(a3 + 16);
            if ((v18 & 1) != 0)
            {
              if ((v21 & 0x20) != 0)
                v21 = *(_DWORD *)(a3 + 32);
              v22 = *(_DWORD *)(v17 + 12);
              v23 = (v21 >> 8) & *(_QWORD *)&v22;
              v24 = *(unsigned __int8 *)(v19 + v23);
              if (*(_BYTE *)(v19 + v23))
              {
                v25 = v19 + v20;
                v26 = 1;
                while (1)
                {
                  v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
                  if (a3 == (v27 & 0xFFFFFFFFFFFFLL))
                    break;
                  v23 = ((_DWORD)v23 + v26) & v22;
                  v24 = *(unsigned __int8 *)(v19 + v23);
                  ++v26;
                  if (!*(_BYTE *)(v19 + v23))
                    goto LABEL_14;
                }
                a6 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
LABEL_38:
                if ((_DWORD)a6 != -1)
                {
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v52 = v8 + 16;
                    v53 = a6 << 32;
                  }
                  else
                  {
                    v52 = *(_QWORD *)(v8 + 8) - 8;
                    v53 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v52 + (v53 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v54 = *(unsigned __int8 *)(a4 + 5);
                    if (v54 == 5)
                    {
                      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v8, a2, (uint64_t)&v147, a4, SHIDWORD(a6), a6);
LABEL_95:
                      v49 = 1;
                      goto LABEL_54;
                    }
                    if (v54 == 6)
                    {
                      v69 = *(_DWORD *)(v16 + 16) & 3;
                      v70 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v72 = *(_QWORD *)(a4 + 24);
                        v71 = *(uint64_t **)(a4 + 32);
                        v147 = *(_QWORD *)(a4 + 8);
                        v148 = v70;
                        LODWORD(v149) = HIDWORD(a6);
                        v151 = (_DWORD *)v8;
                        BYTE1(v153) = 3;
                        v49 = 1;
                        if (v69 != 2)
                          LOBYTE(v153) = 1;
                        HIBYTE(v153) = 1;
                        v157 = v72;
                        v158 = v71;
                      }
                      else
                      {
                        v147 = *(_QWORD *)(a4 + 8);
                        v148 = v70;
                        LODWORD(v149) = HIDWORD(a6);
                        v151 = (_DWORD *)v8;
                        v49 = 1;
                        BYTE1(v153) = 3;
                        if (v69 != 2)
                          LOBYTE(v153) = 1;
                      }
                      goto LABEL_54;
                    }
                  }
                  v147 = a4;
                  v151 = (_DWORD *)v8;
                  v149 = __PAIR64__(a6, HIDWORD(a6));
                  v55 = 257;
LABEL_68:
                  v49 = 1;
                  LOWORD(v153) = v55;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if ((v21 & 0x20) != 0)
                v21 = *(_DWORD *)(a3 + 32);
              v39 = *(_DWORD *)(v17 + 12);
              v40 = v39 & (v21 >> 8);
              v41 = *(_DWORD *)(v19 + 4 * v40);
              if (v41)
              {
                v42 = v19 + 4 * v20;
                v43 = 1;
                while (1)
                {
                  v44 = (v41 - 1);
                  if (*(_QWORD *)(v42 + 16 * v44) == a3)
                    break;
                  v40 = (v40 + v43) & v39;
                  v41 = *(_DWORD *)(v19 + 4 * v40);
                  ++v43;
                  if (!v41)
                    goto LABEL_14;
                }
                a6 = *(unsigned int *)(v42 + 16 * v44 + 8) | ((unint64_t)*(unsigned __int8 *)(v42 + 16 * v44 + 12) << 32);
                goto LABEL_38;
              }
            }
          }
        }
      }
LABEL_14:
      if ((*v14 & 0x20) == 0)
        goto LABEL_15;
      if (!a3)
        goto LABEL_15;
      v68 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
      if (!(_DWORD)v68)
        goto LABEL_15;
      v32 = 16 * v68;
      do
      {
        v30 = v11;
        v31 = *(_QWORD *)(v32 + 24);
        if (!v31)
          goto LABEL_26;
        if ((*(_BYTE *)((16 * *(unsigned int *)v8) | 0x12) & 0x40) != 0)
          goto LABEL_26;
        v33 = *(_DWORD *)(a3 + 16);
        if ((v33 & 0x20) != 0)
          goto LABEL_26;
        v34 = *(_DWORD *)(v31 + 4) & (v33 >> 8);
        v35 = *(_QWORD *)(v31 + 32);
        v36 = *(unsigned __int16 *)(v35 + 4 * v34);
        if (v36 == 0xFFFF)
          goto LABEL_26;
        v144 = *(_QWORD *)(v31 + 16);
        v146 = a2;
        while (1)
        {
          v145 = (__int16)v36;
          v37 = (unint64_t *)(*(_QWORD *)(v31 + 24) + 40 * (__int16)v36);
          v38 = v37[1];
          if (!v38)
            goto LABEL_35;
          if (WTF::equalInternal<unsigned char>(a3, *v37, v38 - 1))
            break;
          v35 = *(_QWORD *)(v31 + 32);
          a2 = v146;
LABEL_35:
          v34 = *(__int16 *)(v35 + 4 * v34 + 2);
          if (v34 == -1)
            goto LABEL_26;
          LOWORD(v36) = *(_WORD *)(v35 + 4 * v34);
        }
        v73 = *(_QWORD *)(v31 + 24);
        a2 = v146;
        if (v73)
        {
          v74 = *(_DWORD *)(v73 + 40 * v145 + 16);
          if ((v74 & 0x3B10) == 0)
          {
            v11 = v30;
            if ((v74 & 0x400) != 0)
            {
              v125 = *(_DWORD *)(v73 + 40 * v145 + 16);
              v126 = *(_QWORD *)(v73 + 40 * v145 + 24);
              v127 = v126 == (int)v126;
              v128 = v126 | 0xFFFE000000000000;
              v129 = COERCE__INT64((double)v126) + 0x2000000000000;
              if (v127)
                v129 = v128;
              v147 = v129;
              LODWORD(v149) = v125;
              v151 = (_DWORD *)v8;
              v49 = 1;
              BYTE1(v153) = 1;
              goto LABEL_54;
            }
            v75 = *(_DWORD *)(v73 + 40 * v145 + 16);
            if ((v74 & 0x8000) != 0)
            {
              v130 = v73 + 40 * v145;
              v132 = *(uint64_t **)(v130 + 24);
              v131 = *(_QWORD *)(v130 + 32);
              v147 = *v132;
              v148 = v131;
              LODWORD(v149) = v75;
              v151 = (_DWORD *)v8;
              LOWORD(v153) = 769;
              v49 = 1;
              HIBYTE(v153) = 1;
              v157 = v144;
              v158 = v132;
              goto LABEL_54;
            }
            v76 = v73 + 40 * v145;
            v78 = *(_QWORD *)(v76 + 24);
            v77 = *(_QWORD *)(v76 + 32);
            if ((v74 & 0x4000) != 0)
            {
              v147 = v78;
              v148 = v77;
              LODWORD(v149) = v74;
              v151 = (_DWORD *)v8;
              LOWORD(v153) = 769;
              v49 = 1;
              HIBYTE(v153) = 1;
              v157 = v144;
              v158 = 0;
              goto LABEL_54;
            }
            v147 = v78;
            v148 = v77;
            LODWORD(v149) = v74;
            v151 = (_DWORD *)v8;
            v55 = 769;
            goto LABEL_68;
          }
          v96 = JSC::setUpStaticFunctionSlot(v30, v144, v73 + 40 * v145, (unsigned int *)v8, a3, (uint64_t)&v147, a7, a8);
          a2 = v146;
          if ((v96 & 1) != 0)
          {
LABEL_141:
            v49 = 1;
            goto LABEL_142;
          }
        }
LABEL_26:
        v32 = *(_QWORD *)(v32 + 16);
        v11 = v30;
      }
      while (v32);
LABEL_15:
      v13 = *(_QWORD *)(v16 + 48);
      if (!v13)
        v13 = *(_QWORD *)(v8 + 16);
      if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_53;
        v45 = *(_DWORD *)(a3 + 16);
        if ((v45 & 0x20) != 0)
          goto LABEL_53;
        v46 = *(_WORD **)(a3 + 8);
        v47 = *(unsigned int *)(a3 + 4);
        if ((v45 & 4) == 0)
        {
          if ((_DWORD)v47)
          {
            v48 = (unsigned __int16)*v46 - 48;
            if (v48 <= 9 && (*v46 != 48 || v47 <= 1))
            {
              v56 = v46 + 1;
              v57 = v47 - 1;
              while (v57)
              {
                if (v48 > 0x19999999)
                  goto LABEL_53;
                v58 = *v56 - 48;
                if (v58 > 9)
                  goto LABEL_53;
                v49 = 0;
                v59 = __CFADD__(v58, 10 * v48);
                v48 = v58 + 10 * v48;
                ++v56;
                --v57;
                if (v59)
                  goto LABEL_54;
              }
              if (v48 != -1)
                goto LABEL_79;
            }
          }
LABEL_53:
          v49 = 0;
          goto LABEL_54;
        }
        v133 = v11;
        if (!(_DWORD)v47
          || (v48 = *(unsigned __int8 *)v46 - 48, v48 > 9)
          || v47 >= 2 && *(_BYTE *)v46 == 48)
        {
LABEL_228:
          v49 = 0;
          v11 = v133;
          goto LABEL_54;
        }
        v135 = (unsigned __int8 *)v46 + 1;
        v136 = v47 - 1;
        while (v136)
        {
          if (v48 > 0x19999999)
            goto LABEL_228;
          v137 = *v135 - 48;
          if (v137 > 9)
            goto LABEL_228;
          v49 = 0;
          v59 = __CFADD__(v137, 10 * v48);
          v48 = v137 + 10 * v48;
          ++v135;
          --v136;
          v11 = v133;
          if (v59)
            goto LABEL_54;
        }
        v11 = v133;
        if (v48 == -1)
          goto LABEL_53;
LABEL_79:
        v60 = *(JSC::VM **)(a2 + 56);
        while (2)
        {
          v61 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v62 = a2;
          v63 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v61 + 0x4C) + 0x70))(v10);
          v65 = v63;
          if (*((_DWORD *)v60 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v60, v64, a3, a4, a5, a6, a7, a8);
            if (((hasExceptionsAfterHandlingTraps | v65) & 1) != 0)
            {
LABEL_175:
              v49 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_54;
            }
          }
          else if ((v63 & 1) != 0)
          {
            goto LABEL_95;
          }
          if (BYTE2(v153) == 3)
          {
            if (v154)
              goto LABEL_53;
            v66 = *(unsigned __int8 *)(v10 + 5);
            a2 = v62;
            if (v66 != 61)
              goto LABEL_84;
          }
          else
          {
            v66 = *(unsigned __int8 *)(v10 + 5);
            a2 = v62;
            if (v66 == 61)
            {
              if (BYTE2(v153) == 1)
                goto LABEL_53;
            }
            else
            {
LABEL_84:
              if ((v66 - 39) <= 0xA)
              {
                v134 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, a2, a3, a4, a5, a6, a7, a8);
                a2 = v62;
                if (v134 <= v48)
                  goto LABEL_53;
              }
            }
          }
          if ((*(_WORD *)(v61 + 12) & 0x800) == 0 || BYTE2(v153) == 3)
          {
            v67 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v67)
              v67 = *(_QWORD *)(v10 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v67 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v10, v62);
            }
            else
            {
              v67 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v67)
                v67 = *(_QWORD *)(v10 + 16);
            }
            if (*((_DWORD *)v60 + 20))
            {
              v143 = JSC::VM::hasExceptionsAfterHandlingTraps(v60, a2, a3, a4, a5, a6, a7, a8);
              a2 = v62;
              if (v143)
                goto LABEL_53;
            }
            else
            {
              a2 = v62;
            }
          }
          if ((v67 & 0xFFFE000000000002) != 0)
            goto LABEL_53;
          v49 = 0;
          v10 = v67;
          if (*(unsigned __int8 *)(v67 + 5) <= 0x16u)
            goto LABEL_54;
          continue;
        }
      }
      v14 = (_BYTE *)(v13 + 6);
      v8 = v13;
    }
    while ((*(_BYTE *)(v13 + 6) & 8) == 0);
  }
  if (a3)
  {
    v79 = *(_DWORD *)(a3 + 16);
    if ((v79 & 0x20) == 0)
    {
      v80 = *(_BYTE **)(a3 + 8);
      v81 = *(unsigned int *)(a3 + 4);
      if ((v79 & 4) != 0)
      {
        if ((_DWORD)v81)
        {
          v8 = *v80 - 48;
          if (v8 <= 9 && (v81 < 2 || *v80 != 48))
          {
            v139 = v80 + 1;
            v140 = v81 - 1;
            while (v140)
            {
              if (v8 <= 0x19999999)
              {
                v141 = *v139 - 48;
                if (v141 <= 9)
                {
                  v59 = __CFADD__(v141, 10 * v8);
                  v8 = v141 + 10 * (_DWORD)v8;
                  ++v139;
                  --v140;
                  if (!v59)
                    continue;
                }
              }
              goto LABEL_113;
            }
            if ((_DWORD)v8 != -1)
              goto LABEL_157;
          }
        }
      }
      else if ((_DWORD)v81)
      {
        v8 = *(unsigned __int16 *)v80 - 48;
        if (v8 <= 9 && (*(_WORD *)v80 != 48 || v81 <= 1))
        {
          v98 = (unsigned __int16 *)(v80 + 2);
          v99 = v81 - 1;
          while (v99)
          {
            if (v8 <= 0x19999999)
            {
              v100 = *v98 - 48;
              if (v100 <= 9)
              {
                v59 = __CFADD__(v100, 10 * v8);
                v8 = v100 + 10 * (_DWORD)v8;
                ++v98;
                --v99;
                if (!v59)
                  continue;
              }
            }
            goto LABEL_113;
          }
          if ((_DWORD)v8 != -1)
          {
LABEL_157:
            v101 = *(JSC::VM **)(a2 + 56);
            while (1)
            {
              v102 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
              v103 = a2;
              v104 = (*(uint64_t (**)(uint64_t))(16 * *(unsigned int *)(v102 + 0x4C) + 0x70))(v10);
              v106 = v104;
              if (*((_DWORD *)v101 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v101, v105, a3, a4, a5, a6, a7, a8);
                if (((hasExceptionsAfterHandlingTraps | v106) & 1) != 0)
                  goto LABEL_175;
              }
              else if ((v104 & 1) != 0)
              {
                goto LABEL_95;
              }
              if (BYTE2(v153) == 3)
              {
                if (v154)
                  goto LABEL_53;
                v107 = *(unsigned __int8 *)(v10 + 5);
                if (v107 == 61)
                  goto LABEL_163;
              }
              else
              {
                v107 = *(unsigned __int8 *)(v10 + 5);
                if (v107 == 61)
                {
                  if (BYTE2(v153) == 1)
                    goto LABEL_53;
                  goto LABEL_163;
                }
              }
              if ((v107 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, v105, a3, a4, a5, a6, a7, a8) <= v8)
              {
                goto LABEL_53;
              }
LABEL_163:
              if ((*(_WORD *)(v102 + 12) & 0x800) == 0 || BYTE2(v153) == 3)
              {
                v108 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                if (!v108)
                  v108 = *(_QWORD *)(v10 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v108 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v10, v103);
                }
                else
                {
                  v108 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v108)
                    v108 = *(_QWORD *)(v10 + 16);
                }
                if (*((_DWORD *)v101 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v101, v105, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_53;
                }
              }
              if ((v108 & 0xFFFE000000000002) != 0)
                goto LABEL_53;
              v49 = 0;
              v10 = v108;
              a2 = v103;
              if (*(unsigned __int8 *)(v108 + 5) <= 0x16u)
                goto LABEL_54;
            }
          }
        }
      }
    }
  }
LABEL_113:
  v82 = *(JSC::VM **)(a2 + 56);
  while (1)
  {
    v83 = a2;
    v30 = v11;
    v84 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v13 + 6) & 8) == 0)
      break;
    v115 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(v13, a2, a3, &v147);
    v117 = v115;
    if (*((_DWORD *)v82 + 20))
    {
      v138 = JSC::VM::hasExceptionsAfterHandlingTraps(v82, v116, a3, a4, a5, a6, a7, a8);
      if (((v138 | v117) & 1) != 0)
      {
        v49 = !v138;
        goto LABEL_142;
      }
    }
    else if ((v115 & 1) != 0)
    {
      goto LABEL_141;
    }
    if (BYTE2(v153) == 3)
    {
      if (v154)
        goto LABEL_287;
      v118 = *(unsigned __int8 *)(v13 + 5);
      if (v118 != 61)
      {
LABEL_192:
        if (!a3)
          goto LABEL_120;
        if ((v118 - 50) < 0xFFFFFFF5)
          goto LABEL_120;
        v119 = *(_DWORD *)(a3 + 16);
        if ((v119 & 0x20) != 0)
          goto LABEL_120;
        v120 = *(unsigned int *)(a3 + 4);
        if (!(_DWORD)v120)
          goto LABEL_120;
        v121 = *(unsigned __int8 **)(a3 + 8);
        if ((v119 & 4) == 0)
        {
          v122 = *(unsigned __int16 *)v121;
          if ((_DWORD)v120 == 1)
            goto LABEL_198;
          if (v122 == 45)
          {
            v122 = *((unsigned __int16 *)v121 + 1);
            goto LABEL_208;
          }
          if ((v122 - 48) >= 0xA && ((_DWORD)v120 != 8 || v122 != 73))
          {
LABEL_219:
            if ((_DWORD)v120 != 3 || v122 != 78)
              goto LABEL_120;
          }
LABEL_212:
          v8 = v8 & 0xFFFFFF0000000000 | v120 | ((unint64_t)((v119 >> 2) & 1) << 32);
          JSC::jsToNumber(v121, v8);
          WTF::numberToString(v159, v123);
          if (WTF::equal(a3, (unint64_t)v159, v124))
            goto LABEL_287;
          goto LABEL_120;
        }
        v122 = *v121;
        if ((_DWORD)v120 == 1)
        {
LABEL_198:
          if ((v122 - 48) < 0xA)
            goto LABEL_287;
          goto LABEL_120;
        }
        if (v122 == 45)
        {
          v122 = v121[1];
LABEL_208:
          if ((v122 - 48) < 0xA)
          {
            if ((_DWORD)v120 == 2)
              goto LABEL_287;
            goto LABEL_212;
          }
          if ((_DWORD)v120 != 9)
            goto LABEL_120;
        }
        else
        {
          if ((v122 - 48) < 0xA)
            goto LABEL_212;
          if ((_DWORD)v120 != 8)
            goto LABEL_219;
        }
        if (v122 != 73)
          goto LABEL_120;
        goto LABEL_212;
      }
    }
    else
    {
      v118 = *(unsigned __int8 *)(v13 + 5);
      if (v118 != 61)
        goto LABEL_192;
      if (BYTE2(v153) == 1)
      {
LABEL_287:
        v49 = 0;
        goto LABEL_142;
      }
    }
LABEL_120:
    if ((*(_WORD *)(v84 + 12) & 0x800) == 0)
    {
      v88 = *(_DWORD *)v13;
      a2 = v83;
LABEL_122:
      v89 = *(_QWORD *)(16 * (v88 & 0xFFFFFFFE) + 0x30);
      if (!v89)
        v89 = *(_QWORD *)(v13 + 16);
      goto LABEL_124;
    }
    v88 = *(_DWORD *)v13;
    a2 = v83;
    if (BYTE2(v153) == 3)
      goto LABEL_122;
    v114 = 16 * (v88 & 0xFFFFFFFE);
    if ((*(_WORD *)(v114 + 12) & 0x800) != 0)
    {
      v89 = (*(uint64_t (**)(unint64_t, uint64_t))(16 * *(unsigned int *)(v114 + 76) + 0xB0))(v13, v83);
    }
    else
    {
      v89 = *(_QWORD *)(v114 + 48);
      if (!v89)
        v89 = *(_QWORD *)(v13 + 16);
    }
    if (*((_DWORD *)v82 + 20))
    {
      v142 = JSC::VM::hasExceptionsAfterHandlingTraps(v82, a2, a3, a4, a5, a6, a7, a8);
      a2 = v83;
      if (v142)
        goto LABEL_287;
    }
    else
    {
      a2 = v83;
    }
LABEL_124:
    if ((v89 & 0xFFFE000000000002) != 0)
      goto LABEL_287;
    v49 = 0;
    v90 = *(unsigned __int8 *)(v89 + 5);
    v13 = v89;
    v11 = v30;
    if (v90 <= 0x16)
      goto LABEL_54;
  }
  if (!(_DWORD)v12
    || (v12 & ~*(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE)), v82, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v85)|| (v159[0] = a3, v86 = JSC::PropertyTable::get(v85, v159), a6 = v86, (_DWORD)v86 == -1))
  {
    if ((*(_BYTE *)(v13 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v13, v82, a3, (uint64_t)&v147) & 1) != 0)
    {
      goto LABEL_141;
    }
    goto LABEL_120;
  }
  a5 = HIDWORD(v86);
  if ((int)v86 <= 63)
  {
    v91 = v13 + 16;
    v92 = v86 << 32;
  }
  else
  {
    v91 = *(_QWORD *)(v13 + 8) - 8;
    v92 = 0x3F00000000 - (v86 << 32);
  }
  a4 = *(_QWORD *)(v91 + (v92 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_132;
  v93 = *(unsigned __int8 *)(a4 + 5);
  if (v93 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v13, v87, (uint64_t)&v147, a4, SHIDWORD(v86), v86);
    goto LABEL_141;
  }
  if (v93 != 6)
  {
LABEL_132:
    v147 = a4;
    v151 = (_DWORD *)v13;
    v149 = __PAIR64__(v86, HIDWORD(v86));
    v49 = 1;
    LOWORD(v153) = 257;
    goto LABEL_142;
  }
  v110 = *(_DWORD *)(v84 + 16) & 3;
  v111 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v113 = *(_QWORD *)(a4 + 24);
    v112 = *(uint64_t **)(a4 + 32);
    v147 = *(_QWORD *)(a4 + 8);
    v148 = v111;
    LODWORD(v149) = HIDWORD(v86);
    v151 = (_DWORD *)v13;
    BYTE1(v153) = 3;
    v49 = 1;
    if (v110 != 2)
      LOBYTE(v153) = 1;
    HIBYTE(v153) = 1;
    v157 = v113;
    v158 = v112;
  }
  else
  {
    v147 = *(_QWORD *)(a4 + 8);
    v148 = v111;
    LODWORD(v149) = HIDWORD(v86);
    v151 = (_DWORD *)v13;
    v49 = 1;
    BYTE1(v153) = 3;
    if (v110 != 2)
      LOBYTE(v153) = 1;
  }
LABEL_142:
  v11 = v30;
LABEL_54:
  if (*((_DWORD *)v11 + 20))
  {
    v94 = *((_DWORD *)v11 + 20);
    if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v11 + 2))
      v95 = 0;
    else
      v95 = v49;
    if ((v95 & 1) == 0)
      goto LABEL_138;
LABEL_56:
    if ((v149 & 4) != 0)
    {
      if (!v151)
        goto LABEL_138;
      result = (*(unsigned __int16 *)(16 * (*v151 & 0xFFFFFFFE) + 0xC) >> 12) & 1;
    }
    else
    {
      result = 1;
    }
  }
  else
  {
    if (v49)
      goto LABEL_56;
LABEL_138:
    result = 0;
  }
  if (v156)
  {
    v51 = *(_DWORD *)(v155 + 4);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x198A49BD0);
    }
    *(_DWORD *)(v155 + 4) = v51 - 1;
  }
  return result;
}

uint64_t JSC::JSObject::hasEnumerableProperty(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t a3)
{
  JSC::JSObject *v5;
  JSC::VM *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v25;
  char v26[16];
  unint64_t v27;
  JSC::JSObject *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v5 = this;
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v27 = 0xFFFFFFFF00000000;
  v29 = 0;
  v30 = 0;
  v28 = this;
  v31 = 0x20000;
  v32 = 0;
  LOBYTE(v33) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  while (1)
  {
    v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
    v8 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, uint64_t, char *))(16
                                                                                            * *(unsigned int *)(v7 + 0x4C)
                                                                                            + 0x70))(v5, a2, a3, v26);
    v16 = v8;
    if (*((_DWORD *)v6 + 20))
      break;
    if ((v8 & 1) != 0)
    {
      if (!*((_DWORD *)v6 + 20))
        goto LABEL_17;
      v19 = 1;
      goto LABEL_26;
    }
LABEL_4:
    if (BYTE2(v31) == 3)
    {
      if (v32)
        goto LABEL_12;
      v17 = *((unsigned __int8 *)v5 + 5);
      if (v17 != 61)
      {
LABEL_6:
        if ((v17 - 39) <= 0xA
          && JSC::JSArrayBufferView::length(v5, v9, v10, v11, v12, v13, v14, v15) <= a3)
        {
          goto LABEL_12;
        }
      }
    }
    else
    {
      v17 = *((unsigned __int8 *)v5 + 5);
      if (v17 != 61)
        goto LABEL_6;
      if (BYTE2(v31) == 1)
        goto LABEL_12;
    }
    if ((*(_WORD *)(v7 + 12) & 0x800) == 0 || BYTE2(v31) == 3)
    {
      v18 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
      if (!v18)
        v18 = *((_QWORD *)v5 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v25 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v5, a2);
      }
      else
      {
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
        if (!v25)
          v25 = *((_QWORD *)v5 + 2);
      }
      if (*((_DWORD *)v6 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, v10, v11, v12, v13, v14, v15);
        v18 = v25;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_12;
      }
      else
      {
        v18 = v25;
      }
    }
    if ((v18 & 0xFFFE000000000002) == 0)
    {
      v5 = (JSC::JSObject *)v18;
      if (*(unsigned __int8 *)(v18 + 5) > 0x16u)
        continue;
    }
LABEL_12:
    v19 = 0;
    goto LABEL_13;
  }
  v22 = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, v10, v11, v12, v13, v14, v15);
  if (((v22 | v16) & 1) == 0)
    goto LABEL_4;
  v19 = !v22;
LABEL_13:
  if (!*((_DWORD *)v6 + 20))
  {
    if (!v19)
    {
LABEL_15:
      result = 0;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_26:
  v23 = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, v10, v11, v12, v13, v14, v15);
  result = 0;
  if (v23 || !v19)
    goto LABEL_19;
LABEL_17:
  if ((v27 & 4) != 0)
  {
    if (!v29)
      goto LABEL_15;
    result = (*(unsigned __int16 *)(16 * (*v29 & 0xFFFFFFFE) + 0xC) >> 12) & 1;
  }
  else
  {
    result = 1;
  }
LABEL_19:
  if (v34)
  {
    v21 = *(_DWORD *)(v33 + 4);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198A4A4ECLL);
    }
    *(_DWORD *)(v33 + 4) = v21 - 1;
  }
  return result;
}

uint64_t JSC::JSObject::findPropertyHashEntry@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return JSC::Structure::findPropertyHashEntry(16 * (*a1 & 0xFFFFFFFE), a2, a3);
}

void JSC::JSObject::reifyAllStaticProperties(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  JSC::GetterSetter *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  const char **v23;
  WTF::StringImpl *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  WTF::StringImpl *v64;

  v9 = *(_DWORD *)this & 0xFFFFFFFE;
  v10 = 16 * v9;
  v11 = *(_DWORD *)(16 * v9 + 0x10);
  if ((*((_BYTE *)this + 6) & 0x20) != 0)
  {
    v14 = (JSC::GetterSetter *)*((_QWORD *)a2 + 7);
    if ((v11 & 3) == 0)
    {
      JSC::JSObject::convertToDictionary(this, *((JSC::VM **)a2 + 7), a9, a3, a4, a5, a6, a7, a8);
      v10 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    }
    v15 = *(unsigned int *)(v10 + 76);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        v17 = *(unsigned int **)(v16 + 24);
        if (v17)
        {
          v18 = *v17;
          if ((int)v18 < 1)
          {
            LODWORD(v19) = 0;
          }
          else
          {
            v19 = 0;
            v20 = (uint64_t *)(*((_QWORD *)v17 + 3) + 8);
            while (1)
            {
              v21 = *v20;
              v20 += 5;
              if (v21)
                break;
              if (v18 == ++v19)
              {
                LODWORD(v19) = *v17;
                break;
              }
            }
          }
          if ((_DWORD)v18 != (_DWORD)v19)
          {
            v22 = v19;
            do
            {
              v23 = (const char **)(*((_QWORD *)v17 + 3) + 40 * v22);
              v63 = 0;
              v24 = (WTF::StringImpl *)*v23;
              if (*v23)
              {
                v45 = strlen(*v23);
                WTF::AtomStringImpl::add((uint64_t)v24, v45, v46, v47, v48, v49, v50, &v64);
                v24 = v64;
                if (v64)
                {
                  v54 = *(_DWORD *)v64;
                  *(_DWORD *)v64 += 2;
                  if (v54)
                  {
                    *(_DWORD *)v24 = v54;
                  }
                  else
                  {
                    WTF::StringImpl::~StringImpl(v24, v51, v52, v53, a5, a6, a7, a8);
                    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
                  }
                }
              }
              if (JSC::JSObject::getDirectOffset(this, v14, (unint64_t)v24, (const JSC::PropertyTable *)&v63, a5, a6, a7, a8) == -1)
              {
                v44 = *((_QWORD *)v17 + 2);
                v64 = v24;
                JSC::reifyStaticProperty(v14, v44, (unint64_t *)&v64, (uint64_t)v23, (uint64_t)this, a6, a7, a8, v28);
              }
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                {
                  WTF::StringImpl::~StringImpl(v24, v25, v26, v27, a5, a6, a7, a8);
                  WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
                }
                else
                {
                  *(_DWORD *)v24 -= 2;
                }
              }
              LODWORD(v19) = v19 + 1;
              v29 = (int)*v17;
              if ((int)v19 < (int)v29)
              {
                v30 = *((_QWORD *)v17 + 3);
                if (!*(_QWORD *)(v30 + 40 * (int)v19 + 8))
                {
                  v40 = (int)v19 + 1;
                  v41 = (uint64_t *)(v30 + 40 * (int)v19 + 48);
                  do
                  {
                    v42 = v40;
                    if (v29 == v40)
                      break;
                    v43 = *v41;
                    v41 += 5;
                    ++v40;
                  }
                  while (!v43);
                  LODWORD(v19) = v42;
                }
              }
              v22 = v19;
            }
            while ((_DWORD)v18 != (_DWORD)v19);
          }
        }
        v16 = *(_QWORD *)(v16 + 16);
      }
      while (v16);
      v10 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    }
    v39 = *(_DWORD *)(v10 + 16);
    v12 = (_DWORD *)(v10 + 16);
    v11 = v39;
  }
  else
  {
    v12 = (_DWORD *)((32 * (v9 >> 1)) | 0x10);
  }
  *v12 = v11 | 0x400000;
}

uint64_t JSC::JSObject::ordinaryToPrimitive(JSC::Structure *this, WTF::Thread *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  JSC::VM *v10;
  JSC::VM *v11;
  JSC::Structure *v12;
  uint64_t v13;
  int v14;
  JSC::Structure *v15;
  JSC::VM *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::Thread *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  JSC::VM ***v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  JSC::VM **v40;
  int v41;
  unsigned int *v42;
  int v43;
  unsigned int v44;
  JSC::VM *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  JSC::VM *v55;
  uint64_t *v56;
  WTF::Thread *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  JSC::VM *v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  JSC::VM *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int *v76;
  int v77;
  unsigned int v78;
  JSC::VM *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  JSC::VM *v85;
  JSC::VM *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  JSC::VM *v90;
  uint64_t *v91;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  JSC::VM *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t (*v100)();
  unsigned int *v101;
  unsigned int v102;
  char v103;
  _BYTE *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  JSC::VM *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  JSC::VM *v125;
  int v126;
  unsigned int v127;
  int v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t (*v132)();
  unsigned int *v133;
  unsigned int v134;
  char v135;
  _BYTE *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  JSC::VM *v153;
  int v154;
  unsigned int v155;
  int v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  _WORD *v161;
  uint64_t v162;
  int v163;
  JSC::Structure *v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  char v169;
  _BYTE *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  unint64_t v184;
  uint64_t v185;
  JSC::VM *v186;
  JSC::VM *v187;
  int v188;
  unsigned int v189;
  int v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  _WORD *v198;
  uint64_t v199;
  int v200;
  JSC::Structure *v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  JSC::VM *v208;
  JSC::VM *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _WORD *v223;
  uint64_t v224;
  int v225;
  JSC::Structure *v226;
  unint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int16 *v236;
  uint64_t v237;
  unsigned int v238;
  JSC::VM *v239;
  JSC::VM *v240;
  unsigned __int16 *v241;
  uint64_t v242;
  unsigned int v243;
  JSC::VM *v244;
  unint64_t v245;
  JSC::VM *v246;
  uint64_t v247;
  JSC::VM *v248;
  JSC::VM *v249;
  uint64_t v250;
  JSC::VM *v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  JSC::VM *v256;
  JSC::VM *v257;
  char v258;
  JSC::VM *v259;
  JSC::VM *v260;
  JSC::VM *v261;
  uint64_t v262;
  unint64_t v263;
  JSC::VM *v264;
  uint64_t v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  unsigned __int16 *v270;
  uint64_t v271;
  unsigned int v272;
  unint64_t v273;
  JSC::VM *v274;
  char v275;
  WTF *v276;
  JSC::VM *v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  JSC::VM *v283;
  unint64_t v284;
  unint64_t v285;
  JSC::VM *v286;
  JSC::VM *v287;
  JSC::VM *v288;
  unint64_t v289;
  _DWORD *v290;
  JSC::VM *v291;
  uint64_t v292;
  JSC::VM *v293;
  uint64_t v294;
  JSC::VM *v295;
  JSC::VM *v296;
  uint64_t v297;
  JSC::VM *v298;
  int v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  JSC::VM *v304;
  JSC::VM *v305;
  char OwnStaticPropertySlot;
  WTF *v307;
  JSC::VM *v308;
  JSC::VM *v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  JSC::VM *v315;
  JSC::VM *v316;
  JSC::VM *v317;
  JSC::VM *v318;
  JSC::VM *v319;
  JSC::VM *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  unsigned int v331;
  unsigned int v332;
  BOOL v333;
  JSC::VM *v334;
  JSC::VM *v335;
  unint64_t v336;
  JSC::VM *v337;
  JSC::VM *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  JSC::VM *v342;
  uint64_t v343;
  unsigned int v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  JSC::VM *v355;
  int v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  JSC::VM *v360;
  JSC::VM *v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  JSC::VM *v366;
  JSC::VM *v367;
  JSC::VM *v368;
  JSC::VM *v369;
  uint64_t v370;
  int v371;
  int v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  JSC::VM *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _DWORD *v382;
  int v383;
  _DWORD *v384;
  unint64_t v385;
  int v386;
  unsigned int *v387;
  int v388;
  unsigned int v389;
  unint64_t v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  unint64_t v395;
  unsigned int *v396;
  unsigned int v397;
  unsigned int v398;
  JSC::VM *v399;
  JSC::VM *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _DWORD *v405;
  int v406;
  _DWORD *v407;
  unint64_t v408;
  int v409;
  unsigned int *v410;
  int v411;
  unsigned int v412;
  unint64_t v413;
  uint64_t v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  JSC::VM *v418;
  JSC::VM *v419;
  unsigned int *v420;
  unsigned int v421;
  unsigned int v422;
  JSC::VM *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t (*v426)();
  unsigned int *v427;
  unsigned int v428;
  JSC::VM *v429;
  JSC::VM *v430;
  uint64_t (*v431)(unint64_t *);
  unint64_t v432;
  JSC::VM *v433;
  uint64_t *v434;
  JSC::VM *v435;
  uint64_t v436;
  uint64_t (*v437)();
  unsigned int *v438;
  unsigned int v439;
  int v440;
  int v441;
  uint64_t (*v442)(unint64_t *, unint64_t);
  JSC::VM *v443;
  JSC::VM *v444;
  uint64_t *v445;
  int v446;
  _BYTE *v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  JSC::VM *v451;
  uint64_t v452;
  JSC::VM *v453;
  JSC::VM *v454;
  uint64_t v455;
  unint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int v460;
  int v461;
  _BYTE *v462;
  uint64_t v463;
  uint64_t v464;
  JSC::VM *v465;
  uint64_t v466;
  unint64_t v467;
  JSC::VM *v468;
  uint64_t v469;
  unint64_t v470;
  int v471;
  uint64_t v472;
  unsigned int v473;
  int v474;
  _BYTE *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  JSC::VM *v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  JSC::VM *v488;
  unint64_t *v489;
  int v490;
  JSC::VM *v491;
  unint64_t *v492;
  int v493;
  JSC::VM *v494;
  unint64_t *v495;
  int v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  JSC::VM *v501;
  unint64_t v502;
  int v503;
  JSC::VM *v504;
  unint64_t v505;
  int v506;
  JSC::VM *v507;
  unint64_t v508;
  int v509;
  unint64_t v510;
  JSC::VM *v511;
  unsigned __int16 *v512;
  uint64_t v513;
  unsigned int v514;
  unsigned __int16 *v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  JSC::VM *v521;
  unint64_t v522;
  unint64_t *v523;
  int v524;
  int v525;
  int v526;
  JSC::VM *v527;
  JSC::VM *v528;
  JSC::VM *v529;
  JSC::VM *v530;
  uint64_t v531;
  unsigned __int16 *v532;
  uint64_t v533;
  unsigned int v534;
  JSC::VM *v535;
  unint64_t v536;
  WTF *v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  int v541;
  _DWORD *v542;
  JSC::VM *v543;
  uint64_t v544;
  JSC::VM *v545;
  JSC::VM *v546;
  WTF *v547;
  uint64_t v548;
  unint64_t v549;
  JSC::VM *v550;
  JSC::VM *v551;
  char v552;
  uint64_t v553;
  _DWORD *v554;
  JSC::VM *v555;
  uint64_t v556;
  char v557;
  _BOOL4 v558;
  uint64_t v559;
  _BOOL4 v560;
  JSC::VM *v561;
  unint64_t v562;
  unint64_t v563;
  JSC::VM *v564;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v566;
  JSC::VM *v567;
  JSC::VM *v568;
  JSC::VM *v569;
  JSC::VM *v570;
  int v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  JSC::VM *v585;
  JSC::VM *v586;
  uint64_t v587;
  unint64_t v588;
  JSC::VM *v589;
  uint64_t v590;
  _BOOL4 v591;
  JSC::VM *v592;
  JSC::VM *v593;
  uint64_t v594;
  JSC::VM *v595;
  JSC::VM *v596;
  JSC::VM *v597;
  _BOOL4 v598;
  unint64_t v599;
  JSC::VM *v600;
  uint64_t v601;
  unsigned int v602;
  uint64_t v603;
  int v604;
  int v605;
  unsigned int v606;
  JSC::VM *v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  unsigned int v613;
  uint64_t v614;
  unsigned __int8 *v615;
  int v616;
  char v617;
  _BYTE *v618;
  unint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  int v624;
  _WORD *v625;
  uint64_t v626;
  uint64_t v627;
  JSC::VM *v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  int v632;
  uint64_t v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  int v646;
  int v647;
  _WORD *v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned __int16 *v657;
  uint64_t v658;
  unsigned int v659;
  unsigned int *v660;
  double v661;
  const unsigned __int8 *v662;
  JSC::VM *v663;
  const JSC::PropertyTable *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  JSC::VM *v670;
  unint64_t v671;
  JSC::VM *v672;
  unint64_t v673;
  int v674;
  unint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  JSC::VM *v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  JSC::VM *v683;
  unint64_t v684;
  JSC::VM *v685;
  unint64_t v686;
  unint64_t v687;
  unsigned __int8 *v688;
  uint64_t v689;
  unsigned int v690;
  unsigned __int8 *v691;
  uint64_t v692;
  unsigned int v693;
  _BOOL4 v694;
  int v695;
  unsigned int v696;
  uint64_t v697;
  unsigned __int8 *v698;
  int v699;
  double v700;
  const unsigned __int8 *v701;
  BOOL v702;
  _BOOL4 v703;
  int v704;
  unsigned int v705;
  uint64_t v706;
  unsigned __int8 *v707;
  int v708;
  double v709;
  const unsigned __int8 *v710;
  BOOL v711;
  unsigned __int8 *v712;
  uint64_t v713;
  unsigned int v714;
  _BOOL4 v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  unsigned __int16 *v719;
  uint64_t v720;
  unsigned int v721;
  uint64_t v722;
  unsigned __int8 *v723;
  uint64_t v724;
  unsigned int v725;
  uint64_t v726;
  JSC::VM *v727;
  uint64_t v728;
  int v729;
  int v730;
  int v731;
  uint64_t v732;
  _BOOL4 v733;
  unsigned __int8 *v734;
  uint64_t v735;
  unsigned int v736;
  uint64_t v737;
  JSC::VM *v738;
  uint64_t v739;
  int v740;
  int v741;
  int v742;
  uint64_t v743;
  _BOOL4 v744;
  unsigned __int8 *v745;
  uint64_t v746;
  unsigned int v747;
  uint64_t v748;
  JSC::VM *v749;
  uint64_t v750;
  int v751;
  uint64_t v752;
  int v753;
  int v754;
  uint64_t v755;
  _BOOL4 v756;
  unint64_t v757;
  unint64_t v758;
  JSC::VM *v759;
  unint64_t v760;
  uint64_t v761;
  BOOL v762;
  JSC::VM *v763;
  JSC::VM *v764;
  JSC::VM *v765;
  JSC::VM *v766;
  uint64_t v767;
  uint64_t v768;
  BOOL v769;
  uint64_t v770;
  int v771;
  int v772;
  int v773;
  unsigned int v774;
  uint64_t v775;
  unsigned __int8 *v776;
  int v777;
  double v778;
  const unsigned __int8 *v779;
  BOOL v780;
  BOOL v781;
  unsigned __int8 *v782;
  uint64_t v783;
  unsigned int v784;
  JSC::VM *v785;
  JSC::VM *v786;
  uint64_t v787;
  int v788;
  int v789;
  int v790;
  uint64_t v791;
  _BOOL4 v792;
  BOOL v793;
  unsigned __int8 *v794;
  uint64_t v795;
  unsigned int v796;
  JSC::VM *v797;
  uint64_t v798;
  int v799;
  int v800;
  int v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  JSC::VM *v808;
  unint64_t v809;
  unint64_t v810;
  JSC::VM *v811;
  char *v812;
  unsigned int v813;
  uint64_t v814;
  uint64_t v815;
  _DWORD *v816;
  unint64_t v817;
  unint64_t v818;
  unint64_t v819;
  JSC::VM *v820;
  unint64_t v821;
  __int128 v822;
  uint64_t v823;
  char v824;
  uint64_t v825;
  uint64_t v826;
  JSC::VM *v827;
  uint64_t v828;
  _DWORD *v829;
  unint64_t v830;
  JSC::VM *v831;
  unint64_t v832;
  JSC::VM *v833;
  unint64_t v834;
  uint64_t v835;
  char *v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  uint64_t v841;
  uint64_t v842;

  v8 = (int)a3;
  v9 = (unint64_t)a2;
  v10 = this;
  v842 = *MEMORY[0x1E0C80C00];
  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v811 = v11;
  if (this)
  {
    v12 = this;
    do
    {
      v13 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
      v14 = *(_DWORD *)(v13 + 0x10);
      if ((v14 & 0x2000000) == 0)
      {
        v663 = v10;
        if ((*(_DWORD *)(v13 + 0x10) & 3) != 2)
        {
          JSC::Structure::startWatchingPropertyForReplacements((JSC::Structure *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)), v11, *(_QWORD *)(*((_QWORD *)v11 + 5244) + 2512), (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          JSC::Structure::startWatchingPropertyForReplacements((JSC::Structure *)v13, v11, *(_QWORD *)(*((_QWORD *)v11 + 5244) + 2616), v664, v665, v666, v667, v668);
          v14 = *(_DWORD *)(v13 + 16);
        }
        v669 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
        *(_DWORD *)(v13 + 16) = v14 | 0x2000000;
        v13 = v669;
        v10 = v663;
      }
      v15 = *(JSC::Structure **)(v13 + 48);
      if (v15 == (JSC::Structure *)2)
        break;
      if (!v15)
      {
        v15 = (JSC::Structure *)*((_QWORD *)v12 + 2);
        if (v15 == (JSC::Structure *)2)
          break;
      }
      v12 = v15;
    }
    while (v15);
    v16 = *(JSC::VM **)(v9 + 56);
  }
  else
  {
    v16 = v11;
  }
  v17 = (unint64_t)v11 + 41952;
  v18 = *((_QWORD *)v11 + 5244);
  v19 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
  if (v8 == 2)
  {
    v59 = (WTF::Thread *)0xFFFE000000000002;
    v60 = *(_QWORD *)(v18 + 2512);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 5) != 1)
      {
        v61 = *(_QWORD *)(v19 + 64);
        if (v61)
        {
          v62 = *(_QWORD *)(v61 + 40);
          if (v62 > 1)
            goto LABEL_70;
        }
      }
    }
    v819 = 0xFFFFFFFF00000000;
    LOBYTE(v823) = 0;
    v824 = 0;
    v825 = 0;
    v826 = 0;
    v170 = (char *)v10 + 6;
    v169 = *((_BYTE *)v10 + 6);
    v821 = 0;
    *(_QWORD *)&v822 = 0;
    v820 = v10;
    v171 = v60 >> 4;
    v51 = (unint64_t)v10;
    *(_QWORD *)((char *)&v822 + 5) = 0;
    if ((v169 & 8) == 0)
    {
      v172 = (unint64_t)v10;
      while (1)
      {
        v173 = *(_DWORD *)v172 & 0xFFFFFFFE;
        v51 = 16 * v173;
        if (!(_DWORD)v171 || (v171 & ~*(_DWORD *)(16 * v173 + 0x20)) != 0)
          goto LABEL_255;
        v174 = *(_QWORD *)(16 * v173 + 0x58);
        if (!v174)
        {
          v185 = *(_QWORD *)(16 * v173 + 0x40);
          if (!v185 || *(_BYTE *)(v185 + 5) != 1 && *(_DWORD *)(v185 + 80) < 2u)
            goto LABEL_255;
          v186 = v16;
          v187 = v10;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v51, v16, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          v59 = (WTF::Thread *)0xFFFE000000000002;
          v16 = v186;
          v10 = v187;
          if (!v174)
            goto LABEL_255;
        }
        if (!*(_DWORD *)(v174 + 24))
          goto LABEL_255;
        v175 = *(_QWORD *)(v174 + 16);
        v176 = v175 & 0xFFFFFFFFFFFFFFFELL;
        v177 = *(unsigned int *)(v174 + 8);
        v178 = *(_DWORD *)(v60 + 16);
        if ((v175 & 1) == 0)
          break;
        if ((v178 & 0x20) != 0)
          v178 = *(_DWORD *)(v60 + 32);
        v179 = *(_DWORD *)(v174 + 12);
        v180 = (v178 >> 8) & *(_QWORD *)&v179;
        v181 = *(unsigned __int8 *)(v176 + v180);
        if (*(_BYTE *)(v176 + v180))
        {
          v182 = v176 + v177;
          v183 = 1;
          while (1)
          {
            v184 = *(_QWORD *)(v182 + 8 * (v181 - 1));
            if (v60 == (v184 & 0xFFFFFFFFFFFFLL))
              break;
            v180 = ((_DWORD)v180 + v183) & v179;
            v181 = *(unsigned __int8 *)(v176 + v180);
            ++v183;
            if (!*(_BYTE *)(v176 + v180))
              goto LABEL_255;
          }
          a6 = (v184 >> 16) & 0xFF00000000 | HIBYTE(v184);
          goto LABEL_267;
        }
LABEL_255:
        if ((*v170 & 0x20) != 0)
        {
          v304 = v16;
          v305 = v10;
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot(v172, v16, v60, &v817);
          v59 = (WTF::Thread *)0xFFFE000000000002;
          v16 = v304;
          v10 = v305;
          if ((OwnStaticPropertySlot & 1) != 0)
            goto LABEL_468;
        }
        v51 = *(_QWORD *)(v51 + 48);
        if (!v51)
          v51 = *(_QWORD *)(v172 + 16);
        if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
        {
          if (!v60)
            goto LABEL_331;
          v222 = *(_DWORD *)(v60 + 16);
          if ((v222 & 0x20) != 0)
            goto LABEL_331;
          v223 = *(_WORD **)(v60 + 8);
          v224 = *(unsigned int *)(v60 + 4);
          if ((v222 & 4) == 0)
          {
            if ((_DWORD)v224)
            {
              v51 = (unsigned __int16)*v223 - 48;
              if (v51 <= 9 && (*v223 != 48 || v224 <= 1))
              {
                v270 = v223 + 1;
                v271 = v224 - 1;
                while (v271)
                {
                  if (v51 > 0x19999999)
                    goto LABEL_331;
                  v272 = *v270 - 48;
                  if (v272 > 9)
                    goto LABEL_331;
                  v225 = 0;
                  v333 = __CFADD__(v272, 10 * v51);
                  v51 = v272 + 10 * (_DWORD)v51;
                  ++v270;
                  --v271;
                  if (v333)
                    goto LABEL_332;
                }
                if ((_DWORD)v51 != -1)
                  goto LABEL_441;
              }
            }
LABEL_331:
            v225 = 0;
            goto LABEL_332;
          }
          v683 = v16;
          v684 = v17;
          v685 = v10;
          v686 = v9;
          if (!(_DWORD)v224
            || (v51 = *(unsigned __int8 *)v223 - 48, v51 > 9)
            || v224 >= 2 && *(_BYTE *)v223 == 48)
          {
LABEL_1106:
            v225 = 0;
            v9 = v686;
            v10 = v685;
            v17 = v684;
            v16 = v683;
            goto LABEL_458;
          }
          v712 = (unsigned __int8 *)v223 + 1;
          v713 = v224 - 1;
          v59 = (WTF::Thread *)0xFFFE000000000002;
          while (v713)
          {
            if (v51 > 0x19999999)
              goto LABEL_1106;
            v714 = *v712 - 48;
            if (v714 > 9)
              goto LABEL_1106;
            v225 = 0;
            v333 = __CFADD__(v714, 10 * v51);
            v51 = v714 + 10 * (_DWORD)v51;
            ++v712;
            --v713;
            v9 = v686;
            v10 = v685;
            v17 = v684;
            v16 = v683;
            if (v333)
              goto LABEL_332;
          }
          v9 = v686;
          v10 = v685;
          v17 = v684;
          v16 = v683;
          v59 = (WTF::Thread *)0xFFFE000000000002;
          if ((_DWORD)v51 == -1)
            goto LABEL_331;
LABEL_441:
          v293 = *(JSC::VM **)(v9 + 56);
          v294 = (uint64_t)v10;
          while (2)
          {
            v295 = v16;
            v296 = v10;
            v297 = 16 * (*(_DWORD *)v294 & 0xFFFFFFFE);
            v298 = v293;
            v299 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v297 + 0x4C) + 0x70))(v294, v9, v51, &v817);
            v293 = v298;
            v301 = v299;
            if (*((_DWORD *)v298 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v298, v300, (uint64_t)a3, a4, a5, a6, a7, a8);
              v293 = v298;
              if (((hasExceptionsAfterHandlingTraps | v301) & 1) != 0)
              {
                v225 = !hasExceptionsAfterHandlingTraps;
                goto LABEL_456;
              }
            }
            else if ((v299 & 1) != 0)
            {
              v225 = 1;
LABEL_456:
              v10 = v296;
              goto LABEL_457;
            }
            v59 = (WTF::Thread *)0xFFFE000000000002;
            if (BYTE10(v822) == 3)
            {
              if (BYTE12(v822))
              {
                v225 = 0;
                v10 = v296;
                v16 = v295;
                goto LABEL_332;
              }
              v302 = *(unsigned __int8 *)(v294 + 5);
              v10 = v296;
              v16 = v295;
              v293 = v298;
              if (v302 != 61)
                goto LABEL_446;
            }
            else
            {
              v10 = v296;
              v16 = v295;
              v302 = *(unsigned __int8 *)(v294 + 5);
              if (v302 == 61)
              {
                if (BYTE10(v822) == 1)
                  goto LABEL_1119;
              }
              else
              {
LABEL_446:
                if ((v302 - 39) <= 0xA)
                {
                  v687 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v294, 0xFFFE000000000002, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v293 = v298;
                  v59 = (WTF::Thread *)0xFFFE000000000002;
                  v16 = v295;
                  v10 = v296;
                  if (v687 <= v51)
                  {
LABEL_1119:
                    v225 = 0;
                    goto LABEL_332;
                  }
                }
              }
            }
            if ((*(_WORD *)(v297 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
            {
              v303 = *(_QWORD *)(16 * (*(_DWORD *)v294 & 0xFFFFFFFE) + 0x30);
              if (!v303)
                v303 = *(_QWORD *)(v294 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v294 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v303 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v294 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v294, v9);
              }
              else
              {
                v303 = *(_QWORD *)(16 * (*(_DWORD *)v294 & 0xFFFFFFFE) + 0x30);
                if (!v303)
                  v303 = *(_QWORD *)(v294 + 16);
              }
              if (*((_DWORD *)v298 + 20))
              {
                v793 = JSC::VM::hasExceptionsAfterHandlingTraps(v298, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                v293 = v298;
                v10 = v296;
                v16 = v295;
                v59 = (WTF::Thread *)0xFFFE000000000002;
                if (v793)
                  goto LABEL_1119;
              }
              else
              {
                v10 = v296;
                v16 = v295;
                v59 = (WTF::Thread *)0xFFFE000000000002;
                v293 = v298;
              }
            }
            if ((v303 & 0xFFFE000000000002) != 0)
              goto LABEL_331;
            v225 = 0;
            v294 = v303;
            if (*(unsigned __int8 *)(v303 + 5) <= 0x16u)
              goto LABEL_332;
            continue;
          }
        }
        v170 = (_BYTE *)(v51 + 6);
        v172 = v51;
        if ((*(_BYTE *)(v51 + 6) & 8) != 0)
          goto LABEL_682;
      }
      if ((v178 & 0x20) != 0)
        v178 = *(_DWORD *)(v60 + 32);
      v188 = *(_DWORD *)(v174 + 12);
      v189 = v188 & (v178 >> 8);
      v190 = *(_DWORD *)(v176 + 4 * v189);
      if (!v190)
        goto LABEL_255;
      v191 = v176 + 4 * v177;
      v192 = 1;
      while (1)
      {
        v193 = (v190 - 1);
        if (v60 == *(_QWORD *)(v191 + 16 * v193))
          break;
        v189 = (v189 + v192) & v188;
        v190 = *(_DWORD *)(v176 + 4 * v189);
        ++v192;
        if (!v190)
          goto LABEL_255;
      }
      a6 = *(unsigned int *)(v191 + 16 * v193 + 8) | ((unint64_t)*(unsigned __int8 *)(v191 + 16 * v193 + 12) << 32);
LABEL_267:
      if ((_DWORD)a6 == -1)
        goto LABEL_255;
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v231 = v172 + 16;
        v232 = a6 << 32;
      }
      else
      {
        v231 = *(_QWORD *)(v172 + 8) - 8;
        v232 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v231 + (v232 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_352;
      v233 = *(unsigned __int8 *)(a4 + 5);
      if (v233 == 5)
      {
        v318 = v16;
        v319 = v10;
        JSC::JSObject::fillGetterPropertySlot((unsigned int *)v172, 0xFFFE000000000002, (uint64_t)&v817, a4, SHIDWORD(a6), a6);
        v59 = (WTF::Thread *)0xFFFE000000000002;
        v16 = v318;
        v10 = v319;
LABEL_468:
        v225 = 1;
        goto LABEL_332;
      }
      if (v233 != 6)
      {
LABEL_352:
        v817 = a4;
        v821 = v172;
        v819 = __PAIR64__(a6, HIDWORD(a6));
        v225 = 1;
        WORD4(v822) = 257;
        goto LABEL_332;
      }
      v372 = *(_DWORD *)(v51 + 16) & 3;
      v373 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v817 = *(_QWORD *)(a4 + 8);
        v818 = v373;
        LODWORD(v819) = HIDWORD(a6);
        v821 = v172;
        v225 = 1;
        BYTE9(v822) = 3;
        if (v372 != 2)
          BYTE8(v822) = 1;
        goto LABEL_458;
      }
      v375 = *(_QWORD *)(a4 + 24);
      v374 = *(_QWORD *)(a4 + 32);
      v817 = *(_QWORD *)(a4 + 8);
      v818 = v373;
      LODWORD(v819) = HIDWORD(a6);
      v821 = v172;
      BYTE9(v822) = 3;
      v225 = 1;
      if (v372 != 2)
        BYTE8(v822) = 1;
      BYTE11(v822) = 1;
      v825 = v375;
      v826 = v374;
LABEL_332:
      if (*((_DWORD *)v16 + 20))
      {
        v809 = v17;
        v521 = v10;
        v522 = v9;
        v523 = (unint64_t *)v16;
        v524 = *((_DWORD *)v16 + 20);
        if ((v524 & 0x27) != 0 && (v524 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v16 = (JSC::VM *)v523;
        v51 = v523[2];
        v10 = v521;
        v17 = v809;
        v59 = (WTF::Thread *)0xFFFE000000000002;
        if (v51)
        {
          v62 = 0;
          goto LABEL_775;
        }
      }
      if (v225)
      {
        v527 = v16;
        v528 = v10;
        if (BYTE9(v822) == 1)
        {
          v62 = v817;
        }
        else
        {
          if (BYTE9(v822) == 2)
            v559 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v817, (JSC::JSGlobalObject *)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            v559 = JSC::PropertySlot::customGetter((uint64_t)&v817, *(JSC::VM **)(v9 + 56), (WTF::StringImpl *)v60);
          v62 = v559;
        }
        v10 = v528;
        v16 = v527;
        v59 = (WTF::Thread *)0xFFFE000000000002;
      }
      else
      {
        v62 = 10;
      }
      if (*((_DWORD *)v16 + 20))
      {
        v809 = v17;
        v521 = v10;
        v522 = v9;
        v523 = (unint64_t *)v16;
        v525 = *((_DWORD *)v16 + 20);
        if ((v525 & 0x27) != 0 && (v525 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v16 = (JSC::VM *)v523;
        v51 = v523[2];
        v10 = v521;
        v17 = v809;
        v59 = (WTF::Thread *)0xFFFE000000000002;
        if (v51)
          goto LABEL_775;
      }
      v226 = (JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
      v227 = *((_QWORD *)v226 + 8);
      if (!v227 || *(_BYTE *)(v227 + 5) == 1)
      {
        v287 = v10;
        v288 = v16;
        JSC::Structure::allocateRareData(v226, v16, a3, a4, a5, a6, a7, a8);
        v59 = (WTF::Thread *)0xFFFE000000000002;
        v16 = v288;
        v10 = v287;
        v227 = *((_QWORD *)v226 + 8);
      }
      v228 = *(_QWORD *)(v227 + 64);
      if (!v228 || *(_QWORD *)(v228 + 40) != 1)
      {
        v360 = v16;
        v361 = v10;
        JSC::StructureRareData::cacheSpecialPropertySlow(v227, (_QWORD *)v9, v16, (unint64_t)v226, v62, 1, (uint64_t)&v817, a8);
        v59 = (WTF::Thread *)0xFFFE000000000002;
        v16 = v360;
        v10 = v361;
      }
      if (!*((_DWORD *)v16 + 20))
      {
        v229 = 1;
        goto LABEL_342;
      }
      v809 = v17;
      v521 = v10;
      v522 = v9;
      v523 = (unint64_t *)v16;
      v526 = *((_DWORD *)v16 + 20);
      if ((v526 & 0x27) != 0 && (v526 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v51 = v523[2];
      if (v51)
LABEL_775:
        v229 = 0;
      else
        v229 = 1;
      v9 = v522;
      v10 = v521;
      v17 = v809;
      v16 = (JSC::VM *)v523;
      v59 = (WTF::Thread *)0xFFFE000000000002;
LABEL_342:
      if (v824)
      {
        v230 = *(_DWORD *)(v823 + 4);
        if (!v230)
        {
          __break(0xC471u);
          JUMPOUT(0x198A4D6C0);
        }
        *(_DWORD *)(v823 + 4) = v230 - 1;
      }
      if (v229)
      {
LABEL_70:
        if ((v62 & 0xFFFFFFFFFFFFFFF7) == 2)
          goto LABEL_116;
        v63 = *(JSC::VM **)(v9 + 512);
        if ((v63 & 1) != 0)
        {
          v442 = *(uint64_t (**)(unint64_t *, unint64_t))((unint64_t)v63 & 0xFFFFFFFFFFFFFFFCLL);
          v443 = v16;
          v444 = v10;
          if ((v9 & 8) != 0)
            v445 = (uint64_t *)(v9 - 16);
          else
            v445 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
          v834 = *v445;
          v835 = v9;
          v836 = (char *)(v9 + 512);
          v63 = (JSC::VM *)v442(&v834, 0xFFFE000000000002);
          v10 = v444;
          v16 = v443;
          v59 = (WTF::Thread *)0xFFFE000000000002;
        }
        if ((JSC::VM *)v62 == v63)
        {
          v234 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
          if (v234)
          {
            if (*(_BYTE *)(v234 + 5) != 1)
            {
              v235 = *(_QWORD *)(v234 + 64);
              if (v235)
              {
                v51 = *(_QWORD *)(v235 + 16);
                if (v51 > 1)
                  return v51;
              }
            }
          }
        }
        if ((v62 & 0xFFFE000000000002) == 0)
        {
          if (*(_BYTE *)(v62 + 5) == 26)
          {
            v64 = *(_QWORD *)(v62 + 24);
            if ((v64 & 1) != 0)
              v64 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFFELL) + 48);
            if (*(_BYTE *)(v64 + 5) == 8)
            {
              v65 = 1;
              LOBYTE(v814) = 1;
              v815 = *(_QWORD *)(v64 + 40);
              LOBYTE(v816) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v62 & 0xFFFFFFFE)
                                                                                        + 0x4C));
            }
            else
            {
              v65 = 2;
              LOBYTE(v814) = 2;
              v66 = *(_DWORD **)(v62 + 16);
              v815 = v64;
              v816 = v66;
            }
LABEL_79:
            LOBYTE(v834) = 0;
            v835 = 0x800000000;
            v67 = (char *)&v837 + 8;
            v837 = 0u;
            v838 = 0u;
            v839 = 0u;
            v840 = 0u;
            v836 = (char *)&v837 + 8;
            v841 = 0;
            v812 = (char *)&v837 + 8;
            v813 = 0;
            v68 = *(_QWORD *)(v9 + 56);
            v69 = (JSC::VM *)(v68 + 90568);
            v809 = v17;
            v810 = v9;
            if (v65 == 2 || !(_BYTE)v816)
            {
              v831 = (JSC::VM *)v68;
              if (v65 == 2)
              {
                v71 = 0;
                v70 = v815;
                a4 = (uint64_t)v816;
                v72 = v816;
              }
              else
              {
                a4 = 0;
                v70 = 0;
                v71 = v815;
                v72 = (_DWORD *)v62;
              }
              v73 = *(_QWORD *)(16 * (*v72 & 0xFFFFFFFE) + 0x28);
              v827 = (JSC::VM *)v68;
              v828 = v73;
              if (*(_QWORD *)v69)
              {
LABEL_84:
                *(_QWORD *)(v68 + 32) = 0;
                v74 = *(_QWORD *)(v68 + 8);
                v808 = v69;
                if ((unint64_t)&v803 < v74 || v813 > 0x10000)
                {
                  v86 = v10;
                  v435 = v16;
                  v436 = JSC::throwStackOverflowError(v73, &v831, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  if (!*(_DWORD *)(v68 + 4))
                  {
                    v75 = *(_DWORD *)(v68 + 80);
                    if ((v75 & 0x27) == 0 || (v75 & 0x20) != 0)
                      goto LABEL_88;
                    v460 = *(_DWORD *)(v68 + 80);
                    if ((v460 & 0x27) != 0 && (v460 & 0x20) == 0)
                    {
                      v765 = v10;
                      v766 = v16;
                      v767 = v71;
                      v768 = a4;
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v68 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                      a4 = v768;
                      v71 = v767;
                      v59 = (WTF::Thread *)0xFFFE000000000002;
                      v16 = v766;
                      v10 = v765;
                    }
                    v51 = *(_QWORD *)(v68 + 16);
                    if (!v51)
                    {
LABEL_88:
                      v76 = (unsigned int *)(v68 + 80);
                      v77 = *(_DWORD *)(v68 + 80);
                      if ((v77 & 0x20) == 0)
                      {
                        do
                          v78 = __ldaxr(v76);
                        while (__stlxr(v78 | 0x20, v76));
                      }
                      v79 = 0;
                      v80 = 0;
                      v833 = 0;
                      if (v65 == 2)
                      {
                        if (*(_BYTE *)(v70 + 5) == 8
                          || (*(_QWORD *)(v70 + 8)
                            ? (v132 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                            : (v132 = 0),
                              v132))
                        {
                          v833 = *(JSC::VM **)(v70 + 96);
                        }
                        else
                        {
                          v807 = (uint64_t)v16;
                          v320 = v10;
                          v321 = v71;
                          JSC::ScriptExecutable::prepareForExecutionImpl(v70, v68, v62, a4, 0, &v833);
                          v71 = v321;
                          v16 = (JSC::VM *)v807;
                          v10 = v320;
                        }
                        v51 = *((_QWORD *)v831 + 2);
                        if (v51)
                        {
                          v86 = v10;
                          if ((v77 & 0x20) == 0)
                          {
                            do
                              v497 = __ldaxr(v76);
                            while (__stlxr(v497 & 0xFFFFFFDF, v76));
                          }
                          v17 = v809;
                          v59 = (WTF::Thread *)0xFFFE000000000002;
                          v67 = (char *)&v837 + 8;
                          v9 = v810;
                          goto LABEL_103;
                        }
                        *((_BYTE *)v833 + 17) = 0;
                        v80 = *(_QWORD *)(v70 + 8);
                        v133 = (unsigned int *)(v80 + 8);
                        do
                          v134 = __ldaxr(v133);
                        while (__stlxr(v134 + 1, v133));
                        v79 = v833;
                      }
                      v817 = (unint64_t)v79;
                      v818 = v62;
                      *(_QWORD *)&v822 = v812;
                      *((_QWORD *)&v822 + 1) = v73;
                      v81 = 1;
                      LODWORD(v819) = 1;
                      if (v79)
                      {
                        v82 = *((_DWORD *)v79 + 7);
                        if (v82 >= 2)
                          v81 = v82;
                        else
                          v81 = 1;
                      }
                      v17 = v809;
                      v83 = v810;
                      LODWORD(v821) = v81 | 1;
                      HIDWORD(v819) = 0;
                      v820 = v10;
                      if ((v77 & 0x20) == 0)
                      {
                        do
                          v84 = __ldaxr(v76);
                        while (__stlxr(v84 & 0xFFFFFFDF, v76));
                      }
                      v85 = v16;
                      v86 = v10;
                      if (v65 == 2)
                      {
                        v51 = vmEntryToJavaScript(*(_QWORD *)(v80 + 16), (JSC::VM *)v68, (uint64_t)&v817, a4, a5, a6, a7, a8);
                        v16 = v85;
                        v59 = (WTF::Thread *)0xFFFE000000000002;
                        v67 = (char *)&v837 + 8;
                        v9 = v83;
                      }
                      else
                      {
                        v51 = vmEntryToNative(v71, (JSC::VM *)v68, (uint64_t)&v817, a4, a5, a6, a7, a8);
                        v16 = v85;
                        v59 = (WTF::Thread *)0xFFFE000000000002;
                        v67 = (char *)&v837 + 8;
                        v9 = v83;
                        if (!v80)
                          goto LABEL_103;
                      }
                      v87 = (unsigned int *)(v80 + 8);
                      do
                      {
                        v88 = __ldaxr(v87);
                        v89 = v88 - 1;
                      }
                      while (__stlxr(v89, v87));
                      if (!v89)
                      {
                        atomic_store(1u, (unsigned int *)(v80 + 8));
                        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v80 + 32))(v80, 0xFFFE000000000002);
                        v59 = (WTF::Thread *)0xFFFE000000000002;
                        v16 = v85;
                      }
                      goto LABEL_103;
                    }
                    v86 = v10;
LABEL_604:
                    v17 = v809;
                    v9 = v810;
LABEL_103:
                    v90 = v827;
                    if (*((JSC::VM ***)v827 + 11321) == &v827)
                    {
                      *((_QWORD *)v827 + 11321) = 0;
                      if (*((_BYTE *)v90 + 56))
                      {
                        v317 = v16;
                        JSC::VM::executeEntryScopeServicesOnExit(v90, (void *)0xFFFE000000000002, (uint64_t)a3, a4, a5, a6, a7, a8);
                        v59 = (WTF::Thread *)0xFFFE000000000002;
                        v16 = v317;
                      }
                    }
                    *((_BYTE *)v808 + 2552) = 1;
                    v10 = v86;
                    goto LABEL_105;
                  }
                  v86 = v10;
                  v435 = v16;
                  v436 = JSC::Interpreter::checkVMEntryPermission(v63);
                }
                v59 = (WTF::Thread *)0xFFFE000000000002;
                v16 = v435;
                v51 = v436;
                goto LABEL_604;
              }
              *(_QWORD *)v69 = &v827;
              v307 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v307)
              {
                v308 = v10;
                v309 = v16;
                v310 = v71;
                v806 = a4;
                v63 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(v63);
                a4 = v806;
                v71 = v310;
                v59 = (WTF::Thread *)0xFFFE000000000002;
                v16 = v309;
                v10 = v308;
                v307 = v63;
              }
              v311 = *((_BYTE *)v307 + 5);
              if ((v311 & 0x20) == 0)
              {
                v805 = v71;
                v806 = a4;
                v569 = v16;
                v570 = v10;
                *((_BYTE *)v307 + 5) = v311 | 0x20;
                if (BYTE2(dword_1ECF4C6C3))
                  JSC::Wasm::startTrackingCurrentThread(v63, 0xFFFE000000000002, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::registerThreadForMachExceptionHandling(v307, v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                v10 = v570;
                v16 = v569;
                v59 = (WTF::Thread *)0xFFFE000000000002;
                v69 = (JSC::VM *)(v68 + 90568);
                v71 = v805;
                a4 = v806;
              }
              v63 = v827;
              if (*((_BYTE *)v827 + 56))
              {
                v806 = a4;
                v314 = v71;
                v315 = v16;
                v316 = v10;
              }
              else
              {
                v312 = *((_QWORD *)v827 + 11624);
                v313 = atomic_load(&JSC::lastTimeZoneID);
                if (v312 == v313)
                  goto LABEL_84;
                v806 = a4;
                v314 = v71;
                v315 = v16;
                v316 = v10;
                v63 = v827;
              }
              JSC::VM::executeEntryScopeServicesOnEntry(v63, (WTF::AtomStringImpl *)0xFFFE000000000002, (uint64_t)a3, a4, a5, a6, a7, a8);
              v10 = v316;
              v16 = v315;
              v59 = (WTF::Thread *)0xFFFE000000000002;
              v71 = v314;
              a4 = v806;
              goto LABEL_84;
            }
            if (*(_DWORD *)(v62 + 88))
            {
              v368 = v16;
              v369 = v10;
              v370 = JSC::Interpreter::executeBoundCall();
              v59 = (WTF::Thread *)0xFFFE000000000002;
              v16 = v368;
              v10 = v369;
              v51 = v370;
              if (!*((_DWORD *)v16 + 20))
                goto LABEL_107;
LABEL_105:
              v459 = *((_DWORD *)v16 + 20);
              if ((v459 & 0x27) != 0 && (v459 & 0x20) == 0)
              {
                v763 = v10;
                v764 = v16;
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                v59 = (WTF::Thread *)0xFFFE000000000002;
                v16 = v764;
                v10 = v763;
              }
              if (*((_QWORD *)v16 + 2))
              {
                v51 = *((_QWORD *)v16 + 2);
              }
              else
              {
LABEL_107:
                if ((v51 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v51 + 5) > 0x16u)
                  v51 = 0;
              }
              v91 = (uint64_t *)v837;
              if ((_QWORD)v837)
              {
                v343 = *(_QWORD *)v837;
                if (*(_QWORD *)v837)
                {
                  v344 = *(_DWORD *)(v343 - 8);
                  v345 = (((unint64_t)&v835 + ~((_QWORD)&v835 << 32)) ^ (((unint64_t)&v835
                                                                               + ~((_QWORD)&v835 << 32)) >> 22))
                       + ~((((unint64_t)&v835 + ~((_QWORD)&v835 << 32)) ^ (((unint64_t)&v835
                                                                                 + ~((_QWORD)&v835 << 32)) >> 22)) << 13);
                  v346 = (9 * (v345 ^ (v345 >> 8))) ^ ((9 * (v345 ^ (v345 >> 8))) >> 15);
                  v347 = v344 & (((v346 + ~(v346 << 27)) >> 31) ^ ((_DWORD)v346 + ~((_DWORD)v346 << 27)));
                  v348 = *(uint64_t **)(v343 + 8 * v347);
                  if (v348 != &v835)
                  {
                    v376 = 1;
                    while (v348)
                    {
                      v347 = ((_DWORD)v347 + v376) & v344;
                      v348 = *(uint64_t **)(v343 + 8 * v347);
                      ++v376;
                      if (v348 == &v835)
                        goto LABEL_492;
                    }
                    v347 = *(unsigned int *)(v343 - 4);
                  }
LABEL_492:
                  if (v347 != *(_DWORD *)(v343 - 4))
                  {
                    *(_QWORD *)(v343 + 8 * v347) = -1;
                    ++*(_DWORD *)(*v91 - 16);
                    v349 = *v91;
                    v350 = *v91 ? *(_DWORD *)(v349 - 12) - 1 : -1;
                    *(_DWORD *)(v349 - 12) = v350;
                    v351 = *v91;
                    if (*v91)
                    {
                      v352 = 6 * *(_DWORD *)(v351 - 12);
                      v353 = *(_DWORD *)(v351 - 4);
                      if (v352 < v353 && v353 >= 9)
                      {
                        v355 = v10;
                        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v91, v353 >> 1, 0, a4, a5, a6, a7, a8);
                        v10 = v355;
                      }
                    }
                  }
                }
              }
              if (v836 != v67 && v836 != 0)
              {
                v342 = v10;
                WTF::fastFree((unint64_t)v836, v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                v10 = v342;
              }
              goto LABEL_115;
            }
            v806 = (unint64_t)&v837 + 8;
            v401 = *(_QWORD *)(v62 + 32);
            v400 = *(JSC::VM **)(v62 + 40);
            if (*(_BYTE *)(v401 + 5) == 26)
            {
              v402 = *(_QWORD *)(v401 + 24);
              if ((v402 & 1) != 0)
                v402 = *(_QWORD *)((v402 & 0xFFFFFFFFFFFFFFFELL) + 48);
              v403 = v68 + 90568;
              if (*(_BYTE *)(v402 + 5) != 8)
              {
                v404 = 0;
                LOBYTE(v827) = 2;
                v405 = *(_DWORD **)(v401 + 16);
                v828 = v402;
                v829 = v405;
                v833 = (JSC::VM *)v68;
                v406 = 1;
                v407 = v405;
                goto LABEL_559;
              }
              LOBYTE(v827) = 1;
              v404 = *(_QWORD *)(v402 + 40);
              v828 = v404;
              LOBYTE(v829) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v401 & 0xFFFFFFFE)
                                                                                        + 0x4C));
              v833 = (JSC::VM *)v68;
            }
            else
            {
              v566 = *(JSC::VM **)(v62 + 40);
              v403 = v68 + 90568;
              v567 = v16;
              v568 = v10;
              v63 = (JSC::VM *)(*(_QWORD *(**)(JSC::VM **__return_ptr, unint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v401 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v827, v401, 0xFFFE000000000002);
              v833 = (JSC::VM *)v68;
              if (v827 == 2)
              {
                v404 = 0;
                v406 = 1;
                v402 = v828;
                v405 = v829;
                v407 = v829;
                v10 = v568;
                v16 = v567;
                v400 = v566;
LABEL_559:
                v408 = *(_QWORD *)(16 * (*v407 & 0xFFFFFFFE) + 0x28);
                v831 = (JSC::VM *)v68;
                v832 = v408;
                if (*(_QWORD *)v403)
                {
LABEL_560:
                  *(_QWORD *)(v68 + 32) = 0;
                  if ((unint64_t)&v803 < *(_QWORD *)(v68 + 8) || v813 > 0x10000)
                  {
                    v585 = v10;
                    v586 = v16;
                    v587 = JSC::throwStackOverflowError(v408, &v833, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    if (!*(_DWORD *)(v68 + 4))
                    {
                      v409 = *(_DWORD *)(v68 + 80);
                      if ((v409 & 0x27) == 0)
                        goto LABEL_564;
                      if ((v409 & 0x20) != 0)
                        goto LABEL_564;
                      v595 = v10;
                      v596 = v16;
                      v597 = v400;
                      v804 = v404;
                      v598 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                      v404 = v804;
                      v400 = v597;
                      v59 = (WTF::Thread *)0xFFFE000000000002;
                      v16 = v596;
                      v10 = v595;
                      if (!v598)
                      {
LABEL_564:
                        v410 = (unsigned int *)(v68 + 80);
                        v411 = *(_DWORD *)(v68 + 80);
                        if ((v411 & 0x20) == 0)
                        {
                          do
                            v412 = __ldaxr(v410);
                          while (__stlxr(v412 | 0x20, v410));
                        }
                        v413 = 0;
                        v414 = 0;
                        v830 = 0;
                        if (v406)
                        {
                          if (*(_BYTE *)(v402 + 5) == 8
                            || (*(_QWORD *)(v402 + 8)
                              ? (v437 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                              : (v437 = 0),
                                v437))
                          {
                            v830 = *(_QWORD *)(v402 + 96);
                          }
                          else
                          {
                            v807 = (uint64_t)v16;
                            v554 = v405;
                            v555 = v10;
                            v805 = (uint64_t)v400;
                            v556 = v404;
                            JSC::ScriptExecutable::prepareForExecutionImpl(v402, v68, v401, v554, 0, &v830);
                            v404 = v556;
                            v400 = (JSC::VM *)v805;
                            v16 = (JSC::VM *)v807;
                            v10 = v555;
                          }
                          v51 = *((_QWORD *)v833 + 2);
                          if (v51)
                          {
                            if ((v411 & 0x20) == 0)
                            {
                              do
                                v606 = __ldaxr(v410);
                              while (__stlxr(v606 & 0xFFFFFFDF, v410));
                            }
                            v17 = v809;
                            v9 = v810;
                            v59 = (WTF::Thread *)0xFFFE000000000002;
                            v67 = (char *)v806;
                            goto LABEL_579;
                          }
                          *(_BYTE *)(v830 + 17) = 0;
                          v414 = *(_QWORD *)(v402 + 8);
                          v438 = (unsigned int *)(v414 + 8);
                          do
                            v439 = __ldaxr(v438);
                          while (__stlxr(v439 + 1, v438));
                          v413 = v830;
                        }
                        v817 = v413;
                        v818 = v401;
                        *(_QWORD *)&v822 = v812;
                        *((_QWORD *)&v822 + 1) = v408;
                        v415 = 1;
                        LODWORD(v819) = 1;
                        if (v413)
                        {
                          v416 = *(_DWORD *)(v413 + 28);
                          if (v416 >= 2)
                            v415 = v416;
                          else
                            v415 = 1;
                        }
                        v17 = v809;
                        v67 = (char *)v806;
                        LODWORD(v821) = v415 | 1;
                        HIDWORD(v819) = 0;
                        v820 = v400;
                        if ((v411 & 0x20) == 0)
                        {
                          do
                            v417 = __ldaxr(v410);
                          while (__stlxr(v417 & 0xFFFFFFDF, v410));
                        }
                        v418 = v16;
                        v419 = v10;
                        if (v406)
                        {
                          v51 = vmEntryToJavaScript(*(_QWORD *)(v414 + 16), (JSC::VM *)v68, (uint64_t)&v817, a4, a5, a6, a7, a8);
                          v9 = v810;
                          v10 = v419;
                          v16 = v418;
                          v59 = (WTF::Thread *)0xFFFE000000000002;
                        }
                        else
                        {
                          v51 = vmEntryToNative(v404, (JSC::VM *)v68, (uint64_t)&v817, a4, a5, a6, a7, a8);
                          v9 = v810;
                          v10 = v419;
                          v16 = v418;
                          v59 = (WTF::Thread *)0xFFFE000000000002;
                          if (!v414)
                            goto LABEL_579;
                        }
                        v420 = (unsigned int *)(v414 + 8);
                        do
                        {
                          v421 = __ldaxr(v420);
                          v422 = v421 - 1;
                        }
                        while (__stlxr(v422, v420));
                        if (!v422)
                        {
                          atomic_store(1u, (unsigned int *)(v414 + 8));
                          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v414 + 32))(v414, 0xFFFE000000000002);
                          v59 = (WTF::Thread *)0xFFFE000000000002;
                          v16 = v418;
                          v10 = v419;
                        }
                        goto LABEL_579;
                      }
                      v51 = *(_QWORD *)(v68 + 16);
LABEL_897:
                      v17 = v809;
                      v9 = v810;
                      v67 = (char *)v806;
LABEL_579:
                      v423 = v831;
                      if (*((JSC::VM ***)v831 + 11321) == &v831)
                      {
                        *((_QWORD *)v831 + 11321) = 0;
                        if (*((_BYTE *)v423 + 56))
                        {
                          v550 = v10;
                          v551 = v16;
                          JSC::VM::executeEntryScopeServicesOnExit(v423, (void *)0xFFFE000000000002, (uint64_t)a3, a4, a5, a6, a7, a8);
                          v59 = (WTF::Thread *)0xFFFE000000000002;
                          v16 = v551;
                          v10 = v550;
                        }
                      }
                      *(_BYTE *)(v403 + 2552) = 1;
                      goto LABEL_105;
                    }
                    v585 = v10;
                    v586 = v16;
                    v587 = JSC::Interpreter::checkVMEntryPermission(v63);
                  }
                  v59 = (WTF::Thread *)0xFFFE000000000002;
                  v16 = v586;
                  v10 = v585;
                  v51 = v587;
                  goto LABEL_897;
                }
                v804 = v404;
                v805 = (uint64_t)v400;
                v545 = v16;
                v546 = v10;
                *(_QWORD *)v403 = &v831;
                v547 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v547)
                {
                  v63 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(v63);
                  v547 = v63;
                }
                if ((*((_BYTE *)v547 + 5) & 0x20) == 0)
                {
                  *((_BYTE *)v547 + 5) |= 0x20u;
                  if (BYTE2(dword_1ECF4C6C3))
                    JSC::Wasm::startTrackingCurrentThread(v63, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::registerThreadForMachExceptionHandling(v547, v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                v63 = v831;
                if (!*((_BYTE *)v831 + 56))
                {
                  v548 = *((_QWORD *)v831 + 11624);
                  v549 = atomic_load(&JSC::lastTimeZoneID);
                  v10 = v546;
                  v16 = v545;
                  v404 = v804;
                  v400 = (JSC::VM *)v805;
                  if (v548 == v549)
                    goto LABEL_560;
                  v63 = v831;
                }
                JSC::VM::executeEntryScopeServicesOnEntry(v63, v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                v10 = v546;
                v16 = v545;
                v404 = v804;
                v400 = (JSC::VM *)v805;
                goto LABEL_560;
              }
              v404 = v828;
              v10 = v568;
              v16 = v567;
              v400 = v566;
            }
            v406 = 0;
            v405 = 0;
            v402 = 0;
            v407 = (_DWORD *)v401;
            goto LABEL_559;
          }
          v366 = v10;
          v367 = v16;
          v63 = (JSC::VM *)(*(_QWORD *(**)(uint64_t *__return_ptr, unint64_t, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v814, v62, 0xFFFE000000000002);
          v59 = (WTF::Thread *)0xFFFE000000000002;
          v16 = v367;
          v10 = v366;
          v65 = v814;
          if ((_BYTE)v814)
            goto LABEL_79;
        }
        v51 = *((_QWORD *)v16 + 2);
      }
LABEL_115:
      if (v51)
        return v51;
LABEL_116:
      v93 = *(_QWORD *)(*(_QWORD *)v17 + 2616);
      v94 = v9;
      v95 = *(_QWORD *)(v9 + 56);
      v96 = v10;
      v97 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
      if (v97)
      {
        if (*(_BYTE *)(v97 + 5) != 1)
        {
          v98 = *(_QWORD *)(v97 + 64);
          if (v98)
          {
            v99 = *(_QWORD *)(v98 + 64);
            if (v99 > 1)
              goto LABEL_120;
          }
        }
      }
      v819 = 0xFFFFFFFF00000000;
      LOBYTE(v823) = 0;
      v824 = 0;
      v825 = 0;
      v826 = 0;
      v51 = (unint64_t)v10;
      v618 = (char *)v10 + 6;
      v617 = *((_BYTE *)v10 + 6);
      v821 = 0;
      *(_QWORD *)&v822 = 0;
      v820 = v10;
      v619 = v93 >> 4;
      *(_QWORD *)((char *)&v822 + 5) = 0;
      if ((v617 & 8) == 0)
      {
        v620 = (unint64_t)v10;
        while (1)
        {
          v621 = *(_DWORD *)v620 & 0xFFFFFFFE;
          v51 = 16 * v621;
          if ((_DWORD)v619)
          {
            if ((v619 & ~*(_DWORD *)(16 * v621 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v51, (JSC::VM *)v95, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v622)
              {
                v834 = v93;
                v623 = JSC::PropertyTable::get(v622, (uint64_t *)&v834);
                a6 = v623;
                if ((_DWORD)v623 != -1)
                {
                  a5 = HIDWORD(v623);
                  if ((int)v623 <= 63)
                  {
                    v635 = v620 + 16;
                    v636 = v623 << 32;
                  }
                  else
                  {
                    v635 = *(_QWORD *)(v620 + 8) - 8;
                    v636 = 0x3F00000000 - (v623 << 32);
                  }
                  a4 = *(_QWORD *)(v635 + (v636 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v637 = *(unsigned __int8 *)(a4 + 5);
                    if (v637 == 5)
                    {
                      v660 = (unsigned int *)v620;
                      goto LABEL_1047;
                    }
                    if (v637 == 6)
                    {
                      v674 = *(_DWORD *)(v51 + 16) & 3;
                      v675 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v677 = *(_QWORD *)(a4 + 24);
                        v676 = *(_QWORD *)(a4 + 32);
                        v817 = *(_QWORD *)(a4 + 8);
                        v818 = v675;
                        LODWORD(v819) = HIDWORD(v623);
                        v821 = v620;
                        goto LABEL_1072;
                      }
                      v817 = *(_QWORD *)(a4 + 8);
                      v818 = v675;
                      LODWORD(v819) = HIDWORD(v623);
                      v821 = v620;
                      goto LABEL_1245;
                    }
                  }
                  v817 = a4;
                  v821 = v620;
                  goto LABEL_997;
                }
              }
            }
          }
          if ((*v618 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(v620, v95, v93, &v817) & 1) != 0)
            goto LABEL_1048;
          v51 = *(_QWORD *)(v51 + 48);
          if (!v51)
            v51 = *(_QWORD *)(v620 + 16);
          if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
            break;
          v618 = (_BYTE *)(v51 + 6);
          v620 = v51;
          if ((*(_BYTE *)(v51 + 6) & 8) != 0)
            goto LABEL_969;
        }
        if (!v93)
          goto LABEL_1018;
        v647 = *(_DWORD *)(v93 + 16);
        if ((v647 & 0x20) != 0)
          goto LABEL_1018;
        v648 = *(_WORD **)(v93 + 8);
        v649 = *(unsigned int *)(v93 + 4);
        if ((v647 & 4) == 0)
        {
          if ((_DWORD)v649)
          {
            v51 = (unsigned __int16)*v648 - 48;
            if (v51 <= 9 && (*v648 != 48 || v649 <= 1))
            {
              v657 = v648 + 1;
              v658 = v649 - 1;
              while (v658)
              {
                if (v51 > 0x19999999)
                  goto LABEL_1018;
                v659 = *v657 - 48;
                if (v659 > 9)
                  goto LABEL_1018;
                v634 = 0;
                v333 = __CFADD__(v659, 10 * v51);
                v51 = v659 + 10 * (_DWORD)v51;
                ++v657;
                --v658;
                if (v333)
                  goto LABEL_998;
              }
              goto LABEL_1507;
            }
          }
          goto LABEL_1018;
        }
        if (!(_DWORD)v649)
          goto LABEL_1018;
        v51 = *(unsigned __int8 *)v648 - 48;
        if (v51 > 9 || v649 >= 2 && *(_BYTE *)v648 == 48)
          goto LABEL_1018;
        v782 = (unsigned __int8 *)v648 + 1;
        v783 = v649 - 1;
        while (v783)
        {
          if (v51 > 0x19999999)
            goto LABEL_1018;
          v784 = *v782 - 48;
          if (v784 > 9)
            goto LABEL_1018;
          v634 = 0;
          v333 = __CFADD__(v784, 10 * v51);
          v51 = v784 + 10 * (_DWORD)v51;
          ++v782;
          --v783;
          if (v333)
            goto LABEL_998;
        }
LABEL_1507:
        if ((_DWORD)v51 == -1)
        {
LABEL_1018:
          v634 = 0;
          goto LABEL_998;
        }
        v785 = *(JSC::VM **)(v9 + 56);
        v786 = v96;
        while (2)
        {
          v787 = 16 * (*(_DWORD *)v786 & 0xFFFFFFFE);
          v788 = (*(uint64_t (**)(JSC::VM *, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v787 + 0x4C) + 0x70))(v786, v94, v51, &v817);
          v789 = v788;
          if (*((_DWORD *)v785 + 20))
          {
            v792 = JSC::VM::hasExceptionsAfterHandlingTraps(v785, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((v792 | v789) & 1) != 0)
            {
LABEL_1521:
              v634 = !v792;
              goto LABEL_998;
            }
          }
          else if ((v788 & 1) != 0)
          {
            goto LABEL_1048;
          }
          if (BYTE10(v822) == 3)
          {
            if (BYTE12(v822))
              goto LABEL_1018;
            v790 = *((unsigned __int8 *)v786 + 5);
            if (v790 != 61)
              goto LABEL_1513;
          }
          else
          {
            v790 = *((unsigned __int8 *)v786 + 5);
            if (v790 == 61)
            {
              if (BYTE10(v822) == 1)
                goto LABEL_1018;
            }
            else
            {
LABEL_1513:
              if ((v790 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v786, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8) <= v51)
              {
                goto LABEL_1018;
              }
            }
          }
          if ((*(_WORD *)(v787 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
          {
            v791 = *(_QWORD *)(16 * (*(_DWORD *)v786 & 0xFFFFFFFE) + 0x30);
            if (!v791)
              v791 = *((_QWORD *)v786 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v786 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v791 = (*(uint64_t (**)(JSC::VM *, unint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v786 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xB0))(v786, v94);
            }
            else
            {
              v791 = *(_QWORD *)(16 * (*(_DWORD *)v786 & 0xFFFFFFFE) + 0x30);
              if (!v791)
                v791 = *((_QWORD *)v786 + 2);
            }
            if (*((_DWORD *)v785 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v785, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_1018;
            }
          }
          if ((v791 & 0xFFFE000000000002) != 0)
            goto LABEL_1018;
          v634 = 0;
          v786 = (JSC::VM *)v791;
          if (*(unsigned __int8 *)(v791 + 5) <= 0x16u)
            goto LABEL_998;
          continue;
        }
      }
LABEL_969:
      if (!v93)
        goto LABEL_974;
      v624 = *(_DWORD *)(v93 + 16);
      if ((v624 & 0x20) != 0)
        goto LABEL_974;
      v625 = *(_WORD **)(v93 + 8);
      v626 = *(unsigned int *)(v93 + 4);
      if ((v624 & 4) == 0)
      {
        if ((_DWORD)v626)
        {
          v627 = (unsigned __int16)*v625 - 48;
          if (v627 <= 9 && (*v625 != 48 || v626 <= 1))
          {
            v719 = v625 + 1;
            v720 = v626 - 1;
            while (v720)
            {
              if (v627 <= 0x19999999)
              {
                v721 = *v719 - 48;
                if (v721 <= 9)
                {
                  v333 = __CFADD__(v721, 10 * v627);
                  v627 = v721 + 10 * (_DWORD)v627;
                  ++v719;
                  --v720;
                  if (!v333)
                    continue;
                }
              }
              goto LABEL_974;
            }
            goto LABEL_1552;
          }
        }
        goto LABEL_974;
      }
      if ((_DWORD)v626)
      {
        v627 = *(unsigned __int8 *)v625 - 48;
        if (v627 <= 9 && (v626 < 2 || *(_BYTE *)v625 != 48))
        {
          v794 = (unsigned __int8 *)v625 + 1;
          v795 = v626 - 1;
          while (v795)
          {
            if (v627 <= 0x19999999)
            {
              v796 = *v794 - 48;
              if (v796 <= 9)
              {
                v333 = __CFADD__(v796, 10 * v627);
                v627 = v796 + 10 * (_DWORD)v627;
                ++v794;
                --v795;
                if (!v333)
                  continue;
              }
            }
            goto LABEL_974;
          }
LABEL_1552:
          if ((_DWORD)v627 != -1)
          {
            v51 = *(_QWORD *)(v9 + 56);
            v797 = v96;
            while (1)
            {
              v798 = 16 * (*(_DWORD *)v797 & 0xFFFFFFFE);
              v799 = (*(uint64_t (**)(JSC::VM *, unint64_t, uint64_t, unint64_t *))(16 * *(unsigned int *)(v798 + 0x4C) + 0x70))(v797, v94, v627, &v817);
              v800 = v799;
              if (*(_DWORD *)(v51 + 80))
              {
                v792 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
                if (((v792 | v800) & 1) != 0)
                  goto LABEL_1521;
              }
              else if ((v799 & 1) != 0)
              {
                goto LABEL_1048;
              }
              if (BYTE10(v822) == 3)
              {
                if (BYTE12(v822))
                  goto LABEL_1018;
                v801 = *((unsigned __int8 *)v797 + 5);
                if (v801 == 61)
                  goto LABEL_1559;
              }
              else
              {
                v801 = *((unsigned __int8 *)v797 + 5);
                if (v801 == 61)
                {
                  if (BYTE10(v822) == 1)
                    goto LABEL_1018;
                  goto LABEL_1559;
                }
              }
              if ((v801 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v797, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8) <= v627)
              {
                goto LABEL_1018;
              }
LABEL_1559:
              if ((*(_WORD *)(v798 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
              {
                v802 = *(_QWORD *)(16 * (*(_DWORD *)v797 & 0xFFFFFFFE) + 0x30);
                if (!v802)
                  v802 = *((_QWORD *)v797 + 2);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v797 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v802 = (*(uint64_t (**)(JSC::VM *, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v797 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v797, v94);
                }
                else
                {
                  v802 = *(_QWORD *)(16 * (*(_DWORD *)v797 & 0xFFFFFFFE) + 0x30);
                  if (!v802)
                    v802 = *((_QWORD *)v797 + 2);
                }
                if (*(_DWORD *)(v51 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_1018;
                }
              }
              if ((v802 & 0xFFFE000000000002) != 0)
                goto LABEL_1018;
              v634 = 0;
              v797 = (JSC::VM *)v802;
              if (*(unsigned __int8 *)(v802 + 5) <= 0x16u)
                goto LABEL_998;
            }
          }
        }
      }
LABEL_974:
      v628 = *(JSC::VM **)(v9 + 56);
      while (1)
      {
        v629 = 16 * (*(_DWORD *)v51 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v51 + 6) & 8) != 0)
        {
          v771 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C) + 0x68))(v51, v94, v93, &v817);
          v772 = v771;
          if (*((_DWORD *)v628 + 20))
          {
            v792 = JSC::VM::hasExceptionsAfterHandlingTraps(v628, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((v792 | v772) & 1) != 0)
              goto LABEL_1521;
          }
          else if ((v771 & 1) != 0)
          {
            goto LABEL_1048;
          }
          if (BYTE10(v822) == 3)
          {
            if (BYTE12(v822))
              goto LABEL_1018;
            v773 = *(unsigned __int8 *)(v51 + 5);
            if (v773 != 61)
            {
LABEL_1431:
              if (!v93)
                goto LABEL_981;
              if ((v773 - 50) < 0xFFFFFFF5)
                goto LABEL_981;
              v774 = *(_DWORD *)(v93 + 16);
              if ((v774 & 0x20) != 0)
                goto LABEL_981;
              v775 = *(unsigned int *)(v93 + 4);
              if (!(_DWORD)v775)
                goto LABEL_981;
              v776 = *(unsigned __int8 **)(v93 + 8);
              if ((v774 & 4) == 0)
              {
                v777 = *(unsigned __int16 *)v776;
                if ((_DWORD)v775 == 1)
                  goto LABEL_1437;
                if (v777 == 45)
                {
                  v777 = *((unsigned __int16 *)v776 + 1);
                  goto LABEL_1469;
                }
                if ((v777 - 48) >= 0xA && ((_DWORD)v775 != 8 || v777 != 73))
                {
LABEL_1487:
                  if ((_DWORD)v775 != 3 || v777 != 78)
                    goto LABEL_981;
                }
LABEL_1480:
                v9 = v9 & 0xFFFFFF0000000000 | v775 | ((unint64_t)((v774 >> 2) & 1) << 32);
                JSC::jsToNumber(v776, v9);
                WTF::numberToString(&v834, v778);
                if (WTF::equal(v93, (unint64_t)&v834, v779))
                  goto LABEL_1018;
                goto LABEL_981;
              }
              v777 = *v776;
              if ((_DWORD)v775 == 1)
              {
LABEL_1437:
                if ((v777 - 48) < 0xA)
                  goto LABEL_1018;
                goto LABEL_981;
              }
              if (v777 == 45)
              {
                v777 = v776[1];
LABEL_1469:
                if ((v777 - 48) < 0xA)
                {
                  if ((_DWORD)v775 == 2)
                    goto LABEL_1018;
                  goto LABEL_1480;
                }
                if ((_DWORD)v775 != 9)
                  goto LABEL_981;
              }
              else
              {
                if ((v777 - 48) < 0xA)
                  goto LABEL_1480;
                if ((_DWORD)v775 != 8)
                  goto LABEL_1487;
              }
              if (v777 != 73)
                goto LABEL_981;
              goto LABEL_1480;
            }
          }
          else
          {
            v773 = *(unsigned __int8 *)(v51 + 5);
            if (v773 != 61)
              goto LABEL_1431;
            if (BYTE10(v822) == 1)
              goto LABEL_1018;
          }
        }
        else
        {
          if ((_DWORD)v619)
          {
            if ((v619 & ~*(_DWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)), v628, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v630)
              {
                v834 = v93;
                v631 = JSC::PropertyTable::get(v630, (uint64_t *)&v834);
                a6 = v631;
                if ((_DWORD)v631 != -1)
                {
                  a5 = HIDWORD(v631);
                  if ((int)v631 <= 63)
                  {
                    v716 = v51 + 16;
                    v717 = v631 << 32;
                  }
                  else
                  {
                    v716 = *(_QWORD *)(v51 + 8) - 8;
                    v717 = 0x3F00000000 - (v631 << 32);
                  }
                  a4 = *(_QWORD *)(v716 + (v717 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v718 = *(unsigned __int8 *)(a4 + 5);
                    if (v718 != 5)
                    {
                      if (v718 != 6)
                        goto LABEL_1233;
                      v674 = *(_DWORD *)(v629 + 16) & 3;
                      v757 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v677 = *(_QWORD *)(a4 + 24);
                        v676 = *(_QWORD *)(a4 + 32);
                        v817 = *(_QWORD *)(a4 + 8);
                        v818 = v757;
                        LODWORD(v819) = HIDWORD(v631);
                        v821 = v51;
LABEL_1072:
                        BYTE9(v822) = 3;
                        v634 = 1;
                        if (v674 != 2)
                          BYTE8(v822) = 1;
                        BYTE11(v822) = 1;
                        v825 = v677;
                        v826 = v676;
LABEL_998:
                        if (*(_DWORD *)(v95 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v95, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8))
                        {
                          v99 = 0;
                          goto LABEL_1227;
                        }
                        if (v634)
                        {
                          if (BYTE9(v822) == 1)
                          {
                            v99 = v817;
                          }
                          else
                          {
                            if (BYTE9(v822) == 2)
                              v722 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v817, (JSC::JSGlobalObject *)v94, (uint64_t)a3, a4, a5, a6, a7, a8);
                            else
                              v722 = JSC::PropertySlot::customGetter((uint64_t)&v817, *(JSC::VM **)(v94 + 56), (WTF::StringImpl *)v93);
                            v99 = v722;
                          }
                        }
                        else
                        {
                          v99 = 10;
                        }
                        if (*(_DWORD *)(v95 + 80)
                          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v95, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8)|| (JSC::Structure::cacheSpecialProperty((JSC::Structure *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE)), (_QWORD *)v94, (JSC::VM *)v95, v99, 2, (uint64_t)&v817, a7, a8), *(_DWORD *)(v95 + 80))&& JSC::VM::hasExceptionsAfterHandlingTraps(
                               (JSC::VM *)v95,
                               v638,
                               v639,
                               v640,
                               v641,
                               v642,
                               v643,
                               v644))
                        {
LABEL_1227:
                          v645 = 0;
                          v51 = *(_QWORD *)(v95 + 16);
                        }
                        else
                        {
                          v645 = 1;
                        }
                        if (v824)
                        {
                          v646 = *(_DWORD *)(v823 + 4);
                          if (!v646)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198A4EEF4);
                          }
                          *(_DWORD *)(v823 + 4) = v646 - 1;
                        }
                        if (!v645)
                        {
LABEL_1008:
                          v9 = v94;
                          if (v51)
                            return v51;
                          return JSC::throwTypeError(v9, &v811, (uint64_t)"No default value", 17);
                        }
LABEL_120:
                        v9 = v94;
                        if ((v99 & 0xFFFFFFFFFFFFFFF7) == 2 || v99 == *(_QWORD *)(v94 + 552))
                          return JSC::throwTypeError(v9, &v811, (uint64_t)"No default value", 17);
                        JSC::getCallData(v99, (uint64_t)&v817);
                        if ((_BYTE)v817)
                        {
                          LOBYTE(v834) = 0;
                          v835 = 0x800000000;
                          v837 = 0u;
                          v838 = 0u;
                          v839 = 0u;
                          v840 = 0u;
                          v836 = (char *)&v837 + 8;
                          v841 = 0;
                          v827 = (JSC::VM *)((char *)&v837 + 8);
                          LODWORD(v828) = 0;
                          v51 = JSC::call(v94, v99, &v817, v96, &v827);
                          if (*(_DWORD *)(v95 + 80)
                            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v95, (uint64_t)v650, v651, v652, v653, v654, v655, v656))
                          {
                            v51 = *(_QWORD *)(v95 + 16);
                          }
                          else if ((v51 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v51 + 5) > 0x16u)
                          {
                            v51 = 0;
                          }
                          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v835, v650, v651, v652, v653, v654, v655, v656);
                        }
                        else
                        {
                          v51 = *(_QWORD *)(v95 + 16);
                        }
                        goto LABEL_1008;
                      }
                      v817 = *(_QWORD *)(a4 + 8);
                      v818 = v757;
                      LODWORD(v819) = HIDWORD(v631);
                      v821 = v51;
LABEL_1245:
                      v634 = 1;
                      BYTE9(v822) = 3;
                      if (v674 != 2)
                        BYTE8(v822) = 1;
                      goto LABEL_998;
                    }
                    v660 = (unsigned int *)v51;
LABEL_1047:
                    JSC::JSObject::fillGetterPropertySlot(v660, (uint64_t)v59, (uint64_t)&v817, a4, a5, a6);
LABEL_1048:
                    v634 = 1;
                    goto LABEL_998;
                  }
LABEL_1233:
                  v817 = a4;
                  v821 = v51;
LABEL_997:
                  v819 = __PAIR64__(a6, a5);
                  v634 = 1;
                  WORD4(v822) = 257;
                  goto LABEL_998;
                }
              }
            }
          }
          if ((*(_BYTE *)(v51 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot(v51, v628, v93, &v817) & 1) != 0)
          {
            goto LABEL_1048;
          }
        }
LABEL_981:
        if ((*(_WORD *)(v629 + 12) & 0x800) != 0)
        {
          v632 = *(_DWORD *)v51;
          if (BYTE10(v822) != 3)
          {
            v770 = 16 * (v632 & 0xFFFFFFFE);
            if ((*(_WORD *)(v770 + 12) & 0x800) != 0)
            {
              v633 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v770 + 76)
                                                                                   + 0xB0))(v51, v94);
            }
            else
            {
              v633 = *(_QWORD *)(v770 + 48);
              if (!v633)
                v633 = *(_QWORD *)(v51 + 16);
            }
            if (*((_DWORD *)v628 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v628, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_1018;
            }
            goto LABEL_985;
          }
        }
        else
        {
          v632 = *(_DWORD *)v51;
        }
        v633 = *(_QWORD *)(16 * (v632 & 0xFFFFFFFE) + 0x30);
        if (!v633)
          v633 = *(_QWORD *)(v51 + 16);
LABEL_985:
        if ((v633 & 0xFFFE000000000002) != 0)
          goto LABEL_1018;
        v634 = 0;
        v51 = v633;
        if (*(unsigned __int8 *)(v633 + 5) <= 0x16u)
          goto LABEL_998;
      }
    }
LABEL_682:
    v809 = v17;
    if (v60)
    {
      v474 = *(_DWORD *)(v60 + 16);
      if ((v474 & 0x20) == 0)
      {
        v475 = *(_BYTE **)(v60 + 8);
        v476 = *(unsigned int *)(v60 + 4);
        if ((v474 & 4) != 0)
        {
          if ((_DWORD)v476)
          {
            v477 = *v475 - 48;
            if (v477 <= 9 && (v476 < 2 || *v475 != 48))
            {
              v745 = v475 + 1;
              v746 = v476 - 1;
              while (v746)
              {
                if (v477 <= 0x19999999)
                {
                  v747 = *v745 - 48;
                  if (v747 <= 9)
                  {
                    v333 = __CFADD__(v747, 10 * v477);
                    v477 = v747 + 10 * (_DWORD)v477;
                    ++v745;
                    --v746;
                    if (!v333)
                      continue;
                  }
                }
                goto LABEL_687;
              }
LABEL_1355:
              if ((_DWORD)v477 != -1)
              {
                v51 = *(_QWORD *)(v9 + 56);
                v748 = (uint64_t)v10;
                v807 = (uint64_t)v16;
                while (1)
                {
                  v749 = v10;
                  v750 = 16 * (*(_DWORD *)v748 & 0xFFFFFFFE);
                  v751 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t *))(16 * *(unsigned int *)(v750 + 0x4C) + 0x70))(v748, v9, v477, &v817);
                  v753 = v751;
                  if (*(_DWORD *)(v51 + 80))
                  {
                    v756 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, v752, (uint64_t)a3, a4, a5, a6, a7, a8);
                    if (((v756 | v753) & 1) != 0)
                    {
                      v225 = !v756;
                      goto LABEL_1369;
                    }
                  }
                  else if ((v751 & 1) != 0)
                  {
                    v225 = 1;
LABEL_1369:
                    v10 = v749;
                    v17 = v809;
                    v16 = (JSC::VM *)v807;
                    goto LABEL_458;
                  }
                  if (BYTE10(v822) == 3)
                  {
                    if (BYTE12(v822))
                      goto LABEL_1379;
                    v754 = *(unsigned __int8 *)(v748 + 5);
                    if (v754 == 61)
                      goto LABEL_1362;
                  }
                  else
                  {
                    v754 = *(unsigned __int8 *)(v748 + 5);
                    if (v754 == 61)
                    {
                      if (BYTE10(v822) == 1)
                        goto LABEL_1379;
                      goto LABEL_1362;
                    }
                  }
                  if ((v754 - 39) <= 0xA
                    && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v748, v752, (uint64_t)a3, a4, a5, a6, a7, a8) <= v477)
                  {
                    goto LABEL_1379;
                  }
LABEL_1362:
                  if ((*(_WORD *)(v750 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
                  {
                    v755 = *(_QWORD *)(16 * (*(_DWORD *)v748 & 0xFFFFFFFE) + 0x30);
                    if (!v755)
                      v755 = *(_QWORD *)(v748 + 16);
                  }
                  else
                  {
                    if ((*(_WORD *)(16 * (*(_DWORD *)v748 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                    {
                      v755 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)v748 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0xB0))(v748, v9);
                    }
                    else
                    {
                      v755 = *(_QWORD *)(16 * (*(_DWORD *)v748 & 0xFFFFFFFE) + 0x30);
                      if (!v755)
                        v755 = *(_QWORD *)(v748 + 16);
                    }
                    if (*(_DWORD *)(v51 + 80)
                      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, v752, (uint64_t)a3, a4, a5, a6, a7, a8))
                    {
LABEL_1379:
                      v225 = 0;
                      goto LABEL_1369;
                    }
                  }
                  if ((v755 & 0xFFFE000000000002) != 0)
                    goto LABEL_1379;
                  v225 = 0;
                  v748 = v755;
                  v10 = v749;
                  v17 = v809;
                  v16 = (JSC::VM *)v807;
                  v59 = (WTF::Thread *)0xFFFE000000000002;
                  if (*(unsigned __int8 *)(v755 + 5) <= 0x16u)
                    goto LABEL_332;
                }
              }
            }
          }
        }
        else if ((_DWORD)v476)
        {
          v477 = *(unsigned __int16 *)v475 - 48;
          if (v477 <= 9 && (*(_WORD *)v475 != 48 || v476 <= 1))
          {
            v532 = (unsigned __int16 *)(v475 + 2);
            v533 = v476 - 1;
            while (v533)
            {
              if (v477 <= 0x19999999)
              {
                v534 = *v532 - 48;
                if (v534 <= 9)
                {
                  v333 = __CFADD__(v534, 10 * v477);
                  v477 = v534 + 10 * (_DWORD)v477;
                  ++v532;
                  --v533;
                  if (!v333)
                    continue;
                }
              }
              goto LABEL_687;
            }
            goto LABEL_1355;
          }
        }
      }
    }
LABEL_687:
    v808 = *(JSC::VM **)(v9 + 56);
    while (1)
    {
      v478 = 16 * (*(_DWORD *)v51 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v51 + 6) & 8) != 0)
      {
        v295 = v16;
        v479 = v10;
        v482 = v9;
        v610 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C) + 0x68))(v51, v9, v60, &v817);
        v611 = v610;
        if (*((_DWORD *)v808 + 20))
        {
          v715 = JSC::VM::hasExceptionsAfterHandlingTraps(v808, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((v715 | v611) & 1) != 0)
          {
            v225 = !v715;
            goto LABEL_856;
          }
        }
        else if ((v610 & 1) != 0)
        {
          goto LABEL_855;
        }
        if (BYTE10(v822) == 3)
        {
          if (BYTE12(v822))
            goto LABEL_1455;
          v612 = *(unsigned __int8 *)(v51 + 5);
          if (v612 != 61)
          {
LABEL_944:
            if (!v60)
              goto LABEL_694;
            if ((v612 - 50) < 0xFFFFFFF5)
              goto LABEL_694;
            v613 = *(_DWORD *)(v60 + 16);
            if ((v613 & 0x20) != 0)
              goto LABEL_694;
            v614 = *(unsigned int *)(v60 + 4);
            if (!(_DWORD)v614)
              goto LABEL_694;
            v615 = *(unsigned __int8 **)(v60 + 8);
            if ((v613 & 4) == 0)
            {
              v616 = *(unsigned __int16 *)v615;
              if ((_DWORD)v614 == 1)
                goto LABEL_950;
              if (v616 == 45)
              {
                v616 = *((unsigned __int16 *)v615 + 1);
                goto LABEL_1033;
              }
              if ((v616 - 48) >= 0xA && ((_DWORD)v614 != 8 || v616 != 73))
              {
LABEL_1064:
                if ((_DWORD)v614 != 3 || v616 != 78)
                  goto LABEL_694;
              }
LABEL_1052:
              v806 = v806 & 0xFFFFFF0000000000 | v614 | ((unint64_t)((v613 >> 2) & 1) << 32);
              JSC::jsToNumber(v615, v806);
              WTF::numberToString(&v834, v661);
              if (WTF::equal(v60, (unint64_t)&v834, v662))
                goto LABEL_1455;
              goto LABEL_694;
            }
            v616 = *v615;
            if ((_DWORD)v614 == 1)
            {
LABEL_950:
              if ((v616 - 48) < 0xA)
                goto LABEL_1455;
              goto LABEL_694;
            }
            if (v616 == 45)
            {
              v616 = v615[1];
LABEL_1033:
              if ((v616 - 48) < 0xA)
              {
                if ((_DWORD)v614 == 2)
                  goto LABEL_1455;
                goto LABEL_1052;
              }
              if ((_DWORD)v614 != 9)
                goto LABEL_694;
            }
            else
            {
              if ((v616 - 48) < 0xA)
                goto LABEL_1052;
              if ((_DWORD)v614 != 8)
                goto LABEL_1064;
            }
            if (v616 != 73)
              goto LABEL_694;
            goto LABEL_1052;
          }
        }
        else
        {
          v612 = *(unsigned __int8 *)(v51 + 5);
          if (v612 != 61)
            goto LABEL_944;
          if (BYTE10(v822) == 1)
            goto LABEL_1455;
        }
      }
      else
      {
        v295 = v16;
        v479 = v10;
        if ((_DWORD)v171)
        {
          if ((v171 & ~*(_DWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x20)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)), v808, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (v480)
            {
              v834 = v60;
              v481 = JSC::PropertyTable::get(v480, (uint64_t *)&v834);
              a6 = v481;
              if ((_DWORD)v481 != -1)
              {
                a5 = HIDWORD(v481);
                if ((int)v481 <= 63)
                {
                  v518 = v51 + 16;
                  v519 = v481 << 32;
                }
                else
                {
                  v518 = *(_QWORD *)(v51 + 8) - 8;
                  v519 = 0x3F00000000 - (v481 << 32);
                }
                a4 = *(_QWORD *)(v518 + (v519 >> 29));
                if ((a4 & 0xFFFE000000000002) != 0)
                  goto LABEL_763;
                v520 = *(unsigned __int8 *)(a4 + 5);
                if (v520 == 5)
                {
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v51, (uint64_t)v59, (uint64_t)&v817, a4, SHIDWORD(v481), v481);
                  v225 = 1;
                  goto LABEL_764;
                }
                if (v520 != 6)
                {
LABEL_763:
                  v817 = a4;
                  v821 = v51;
                  v819 = __PAIR64__(v481, HIDWORD(v481));
                  v225 = 1;
                  WORD4(v822) = 257;
                  goto LABEL_764;
                }
                v579 = *(_DWORD *)(v478 + 16) & 3;
                v580 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v582 = *(_QWORD *)(a4 + 24);
                  v581 = *(_QWORD *)(a4 + 32);
                  v817 = *(_QWORD *)(a4 + 8);
                  v818 = v580;
                  LODWORD(v819) = HIDWORD(v481);
                  v821 = v51;
                  BYTE9(v822) = 3;
                  v225 = 1;
                  if (v579 != 2)
                    BYTE8(v822) = 1;
                  BYTE11(v822) = 1;
                  v825 = v582;
                  v826 = v581;
                }
                else
                {
                  v817 = *(_QWORD *)(a4 + 8);
                  v818 = v580;
                  LODWORD(v819) = HIDWORD(v481);
                  v821 = v51;
                  v225 = 1;
                  BYTE9(v822) = 3;
                  if (v579 != 2)
                    BYTE8(v822) = 1;
                }
LABEL_764:
                v10 = v479;
                v17 = v809;
LABEL_457:
                v16 = v295;
LABEL_458:
                v59 = (WTF::Thread *)0xFFFE000000000002;
                goto LABEL_332;
              }
            }
          }
        }
        v482 = v9;
        if ((*(_BYTE *)(v51 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot(v51, v808, v60, &v817) & 1) != 0)
        {
LABEL_855:
          v225 = 1;
          goto LABEL_856;
        }
      }
LABEL_694:
      if ((*(_WORD *)(v478 + 12) & 0x800) == 0)
      {
        v483 = *(_DWORD *)v51;
LABEL_696:
        v484 = *(_QWORD *)(16 * (v483 & 0xFFFFFFFE) + 0x30);
        if (!v484)
          v484 = *(_QWORD *)(v51 + 16);
        goto LABEL_698;
      }
      v483 = *(_DWORD *)v51;
      if (BYTE10(v822) == 3)
        goto LABEL_696;
      v603 = 16 * (v483 & 0xFFFFFFFE);
      if ((*(_WORD *)(v603 + 12) & 0x800) != 0)
      {
        v484 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v603 + 76) + 0xB0))(v51, v482);
      }
      else
      {
        v484 = *(_QWORD *)(v603 + 48);
        if (!v484)
          v484 = *(_QWORD *)(v51 + 16);
      }
      if (*((_DWORD *)v808 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v808, (uint64_t)v59, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
LABEL_1455:
        v225 = 0;
LABEL_856:
        v9 = v482;
        goto LABEL_764;
      }
LABEL_698:
      v59 = (WTF::Thread *)0xFFFE000000000002;
      if ((v484 & 0xFFFE000000000002) != 0)
      {
        v225 = 0;
        v9 = v482;
        v10 = v479;
        v17 = v809;
        v16 = v295;
        goto LABEL_332;
      }
      v225 = 0;
      v51 = v484;
      v9 = v482;
      v10 = v479;
      v17 = v809;
      v16 = v295;
      if (*(unsigned __int8 *)(v484 + 5) <= 0x16u)
        goto LABEL_332;
    }
  }
  v20 = *(_QWORD *)(v18 + 2616);
  if (v19)
  {
    if (*(_BYTE *)(v19 + 5) != 1)
    {
      v21 = *(_QWORD *)(v19 + 64);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 64);
        if (v22 > 1)
          goto LABEL_13;
      }
    }
  }
  v819 = 0xFFFFFFFF00000000;
  LOBYTE(v823) = 0;
  v824 = 0;
  v825 = 0;
  v826 = 0;
  v104 = (char *)v10 + 6;
  v103 = *((_BYTE *)v10 + 6);
  v821 = 0;
  *(_QWORD *)&v822 = 0;
  v820 = v10;
  v105 = v20 >> 4;
  v51 = (unint64_t)v10;
  *(_QWORD *)((char *)&v822 + 5) = 0;
  if ((v103 & 8) == 0)
  {
    v106 = (unint64_t)v10;
    do
    {
      v107 = *(_DWORD *)v106 & 0xFFFFFFFE;
      v51 = 16 * v107;
      if (!(_DWORD)v105 || (v105 & ~*(_DWORD *)(16 * v107 + 0x20)) != 0)
        goto LABEL_150;
      v108 = *(_QWORD *)(16 * v107 + 0x58);
      if (!v108)
      {
        v119 = *(_QWORD *)(16 * v107 + 0x40);
        if (!v119 || *(_BYTE *)(v119 + 5) != 1 && *(_DWORD *)(v119 + 80) < 2u)
          goto LABEL_150;
        v120 = v16;
        v121 = v9;
        v122 = v17;
        v123 = v20;
        v124 = v105;
        v125 = v10;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v51, v16, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v16 = v120;
        v10 = v125;
        v105 = v124;
        v20 = v123;
        v17 = v122;
        v9 = v121;
        if (!v108)
          goto LABEL_150;
      }
      if (!*(_DWORD *)(v108 + 24))
        goto LABEL_150;
      v109 = *(_QWORD *)(v108 + 16);
      v110 = v109 & 0xFFFFFFFFFFFFFFFELL;
      v111 = *(unsigned int *)(v108 + 8);
      v112 = *(_DWORD *)(v20 + 16);
      if ((v109 & 1) != 0)
      {
        if ((v112 & 0x20) != 0)
          v112 = *(_DWORD *)(v20 + 32);
        v113 = *(_DWORD *)(v108 + 12);
        v114 = (v112 >> 8) & *(_QWORD *)&v113;
        v115 = *(unsigned __int8 *)(v110 + v114);
        if (!*(_BYTE *)(v110 + v114))
          goto LABEL_150;
        v116 = v110 + v111;
        v117 = 1;
        while (1)
        {
          v118 = *(_QWORD *)(v116 + 8 * (v115 - 1));
          if (v20 == (v118 & 0xFFFFFFFFFFFFLL))
            break;
          v114 = ((_DWORD)v114 + v117) & v113;
          v115 = *(unsigned __int8 *)(v110 + v114);
          ++v117;
          if (!*(_BYTE *)(v110 + v114))
            goto LABEL_150;
        }
        a6 = (v118 >> 16) & 0xFF00000000 | HIBYTE(v118);
      }
      else
      {
        if ((v112 & 0x20) != 0)
          v112 = *(_DWORD *)(v20 + 32);
        v126 = *(_DWORD *)(v108 + 12);
        v127 = v126 & (v112 >> 8);
        v128 = *(_DWORD *)(v110 + 4 * v127);
        if (!v128)
          goto LABEL_150;
        v129 = v110 + 4 * v111;
        v130 = 1;
        while (1)
        {
          v131 = (v128 - 1);
          if (v20 == *(_QWORD *)(v129 + 16 * v131))
            break;
          v127 = (v127 + v130) & v126;
          v128 = *(_DWORD *)(v110 + 4 * v127);
          ++v130;
          if (!v128)
            goto LABEL_150;
        }
        a6 = *(unsigned int *)(v129 + 16 * v131 + 8) | ((unint64_t)*(unsigned __int8 *)(v129 + 16 * v131 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v194 = v106 + 16;
          v195 = a6 << 32;
        }
        else
        {
          v194 = *(_QWORD *)(v106 + 8) - 8;
          v195 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v194 + (v195 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v196 = *(unsigned __int8 *)(a4 + 5);
          if (v196 == 5)
          {
            v259 = v16;
            v260 = v10;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v106, (uint64_t)a2, (uint64_t)&v817, a4, SHIDWORD(a6), a6);
            v16 = v259;
            v10 = v260;
LABEL_398:
            v163 = 1;
            goto LABEL_226;
          }
          if (v196 == 6)
          {
            v356 = *(_DWORD *)(v51 + 16) & 3;
            v357 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v359 = *(_QWORD *)(a4 + 24);
              v358 = *(_QWORD *)(a4 + 32);
              v817 = *(_QWORD *)(a4 + 8);
              v818 = v357;
              LODWORD(v819) = HIDWORD(a6);
              v821 = v106;
              BYTE9(v822) = 3;
              v163 = 1;
              if (v356 != 2)
                BYTE8(v822) = 1;
              BYTE11(v822) = 1;
              v825 = v359;
              v826 = v358;
            }
            else
            {
              v817 = *(_QWORD *)(a4 + 8);
              v818 = v357;
              LODWORD(v819) = HIDWORD(a6);
              v821 = v106;
              v163 = 1;
              BYTE9(v822) = 3;
              if (v356 != 2)
                BYTE8(v822) = 1;
            }
            goto LABEL_226;
          }
        }
        v817 = a4;
        v821 = v106;
        v819 = __PAIR64__(a6, HIDWORD(a6));
        v163 = 1;
        WORD4(v822) = 257;
        goto LABEL_226;
      }
LABEL_150:
      if ((*v104 & 0x20) != 0)
      {
        v256 = v16;
        v257 = v10;
        v258 = JSC::JSObject::getOwnStaticPropertySlot(v106, v16, v20, &v817);
        v16 = v256;
        v10 = v257;
        if ((v258 & 1) != 0)
          goto LABEL_398;
      }
      v51 = *(_QWORD *)(v51 + 48);
      if (!v51)
        v51 = *(_QWORD *)(v106 + 16);
      if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
      {
        if (!v20)
          goto LABEL_225;
        v160 = *(_DWORD *)(v20 + 16);
        if ((v160 & 0x20) != 0)
          goto LABEL_225;
        v161 = *(_WORD **)(v20 + 8);
        v162 = *(unsigned int *)(v20 + 4);
        if ((v160 & 4) == 0)
        {
          if ((_DWORD)v162)
          {
            v51 = (unsigned __int16)*v161 - 48;
            if (v51 <= 9 && (*v161 != 48 || v162 <= 1))
            {
              v236 = v161 + 1;
              v237 = v162 - 1;
              while (v237)
              {
                if (v51 > 0x19999999)
                  goto LABEL_225;
                v238 = *v236 - 48;
                if (v238 > 9)
                  goto LABEL_225;
                v163 = 0;
                v333 = __CFADD__(v238, 10 * v51);
                v51 = v238 + 10 * (_DWORD)v51;
                ++v236;
                --v237;
                if (v333)
                  goto LABEL_226;
              }
              if ((_DWORD)v51 != -1)
                goto LABEL_380;
            }
          }
LABEL_225:
          v163 = 0;
          goto LABEL_226;
        }
        a2 = (WTF::Thread *)v20;
        v670 = v16;
        v671 = v17;
        v672 = v10;
        v673 = v9;
        if (!(_DWORD)v162
          || (v51 = *(unsigned __int8 *)v161 - 48, v51 > 9)
          || v162 >= 2 && *(_BYTE *)v161 == 48)
        {
LABEL_1069:
          v163 = 0;
          v9 = v673;
          v10 = v672;
          v17 = v671;
          v16 = v670;
          v20 = (unint64_t)a2;
          goto LABEL_226;
        }
        v688 = (unsigned __int8 *)v161 + 1;
        v689 = v162 - 1;
        while (v689)
        {
          if (v51 > 0x19999999)
            goto LABEL_1069;
          v690 = *v688 - 48;
          if (v690 > 9)
            goto LABEL_1069;
          v163 = 0;
          v333 = __CFADD__(v690, 10 * v51);
          v51 = v690 + 10 * (_DWORD)v51;
          ++v688;
          --v689;
          v9 = v673;
          v10 = v672;
          v17 = v671;
          v16 = v670;
          v20 = (unint64_t)a2;
          if (v333)
            goto LABEL_226;
        }
        v9 = v673;
        v10 = v672;
        v17 = v671;
        v16 = v670;
        v20 = (unint64_t)a2;
        if ((_DWORD)v51 == -1)
          goto LABEL_225;
LABEL_380:
        v246 = *(JSC::VM **)(v9 + 56);
        v247 = (uint64_t)v10;
        while (2)
        {
          v248 = v16;
          v249 = v10;
          v250 = 16 * (*(_DWORD *)v247 & 0xFFFFFFFE);
          v251 = v246;
          v252 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v250 + 0x4C) + 0x70))(v247, v9, v51, &v817);
          v246 = v251;
          v253 = v252;
          if (*((_DWORD *)v251 + 20))
          {
            v558 = JSC::VM::hasExceptionsAfterHandlingTraps(v251, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v246 = v251;
            if (((v558 | v253) & 1) != 0)
            {
              v163 = !v558;
              goto LABEL_396;
            }
          }
          else if ((v252 & 1) != 0)
          {
            v163 = 1;
LABEL_396:
            v10 = v249;
            v16 = v248;
            goto LABEL_226;
          }
          if (BYTE10(v822) == 3)
          {
            if (BYTE12(v822))
            {
              v163 = 0;
              goto LABEL_396;
            }
            v254 = *(unsigned __int8 *)(v247 + 5);
            v10 = v249;
            v16 = v248;
            v246 = v251;
            if (v254 != 61)
            {
LABEL_385:
              if ((v254 - 39) <= 0xA)
              {
                v681 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v247, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v246 = v251;
                v16 = v248;
                v10 = v249;
                if (v681 <= v51)
                {
LABEL_1090:
                  v163 = 0;
                  goto LABEL_226;
                }
              }
            }
          }
          else
          {
            v10 = v249;
            v16 = v248;
            v254 = *(unsigned __int8 *)(v247 + 5);
            if (v254 != 61)
              goto LABEL_385;
            if (BYTE10(v822) == 1)
              goto LABEL_1090;
          }
          if ((*(_WORD *)(v250 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
          {
            v255 = *(_QWORD *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0x30);
            if (!v255)
              v255 = *(_QWORD *)(v247 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v255 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v247 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v247, v9);
            }
            else
            {
              v255 = *(_QWORD *)(16 * (*(_DWORD *)v247 & 0xFFFFFFFE) + 0x30);
              if (!v255)
                v255 = *(_QWORD *)(v247 + 16);
            }
            if (*((_DWORD *)v251 + 20))
            {
              v780 = JSC::VM::hasExceptionsAfterHandlingTraps(v251, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v246 = v251;
              v10 = v249;
              v16 = v248;
              if (v780)
                goto LABEL_1090;
            }
            else
            {
              v10 = v249;
              v16 = v248;
              v246 = v251;
            }
          }
          if ((v255 & 0xFFFE000000000002) != 0)
            goto LABEL_225;
          v163 = 0;
          v247 = v255;
          if (*(unsigned __int8 *)(v255 + 5) <= 0x16u)
            goto LABEL_226;
          continue;
        }
      }
      v104 = (_BYTE *)(v51 + 6);
      v106 = v51;
    }
    while ((*(_BYTE *)(v51 + 6) & 8) == 0);
  }
  if (v20)
  {
    v446 = *(_DWORD *)(v20 + 16);
    if ((v446 & 0x20) == 0)
    {
      v447 = *(_BYTE **)(v20 + 8);
      v448 = *(unsigned int *)(v20 + 4);
      if ((v446 & 4) != 0)
      {
        if ((_DWORD)v448)
        {
          v449 = *v447 - 48;
          if (v449 <= 9 && (v448 < 2 || *v447 != 48))
          {
            v723 = v447 + 1;
            v724 = v448 - 1;
            while (v724)
            {
              if (v449 <= 0x19999999)
              {
                v725 = *v723 - 48;
                if (v725 <= 9)
                {
                  v333 = __CFADD__(v725, 10 * v449);
                  v449 = v725 + 10 * (_DWORD)v449;
                  ++v723;
                  --v724;
                  if (!v333)
                    continue;
                }
              }
              goto LABEL_634;
            }
LABEL_1269:
            if ((_DWORD)v449 != -1)
            {
              v51 = *(_QWORD *)(v9 + 56);
              v726 = (uint64_t)v10;
              v809 = v17;
              v807 = (uint64_t)v16;
              while (1)
              {
                v727 = v10;
                v728 = 16 * (*(_DWORD *)v726 & 0xFFFFFFFE);
                v729 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t *))(16 * *(unsigned int *)(v728 + 0x4C) + 0x70))(v726, v9, v449, &v817);
                v730 = v729;
                if (*(_DWORD *)(v51 + 80))
                {
                  v733 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((v733 | v730) & 1) != 0)
                  {
                    v163 = !v733;
                    goto LABEL_1283;
                  }
                }
                else if ((v729 & 1) != 0)
                {
                  v163 = 1;
LABEL_1283:
                  v10 = v727;
                  v17 = v809;
                  v16 = (JSC::VM *)v807;
                  goto LABEL_226;
                }
                if (BYTE10(v822) == 3)
                {
                  if (BYTE12(v822))
                    goto LABEL_1322;
                  v731 = *(unsigned __int8 *)(v726 + 5);
                  if (v731 == 61)
                    goto LABEL_1276;
                }
                else
                {
                  v731 = *(unsigned __int8 *)(v726 + 5);
                  if (v731 == 61)
                  {
                    if (BYTE10(v822) == 1)
                      goto LABEL_1322;
                    goto LABEL_1276;
                  }
                }
                if ((v731 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v726, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8) <= v449)
                {
                  goto LABEL_1322;
                }
LABEL_1276:
                if ((*(_WORD *)(v728 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
                {
                  v732 = *(_QWORD *)(16 * (*(_DWORD *)v726 & 0xFFFFFFFE) + 0x30);
                  if (!v732)
                    v732 = *(_QWORD *)(v726 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v726 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v732 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v726 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v726, v9);
                  }
                  else
                  {
                    v732 = *(_QWORD *)(16 * (*(_DWORD *)v726 & 0xFFFFFFFE) + 0x30);
                    if (!v732)
                      v732 = *(_QWORD *)(v726 + 16);
                  }
                  if (*(_DWORD *)(v51 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
LABEL_1322:
                    v163 = 0;
                    goto LABEL_1283;
                  }
                }
                if ((v732 & 0xFFFE000000000002) != 0)
                  goto LABEL_1322;
                v163 = 0;
                v726 = v732;
                v10 = v727;
                v17 = v809;
                v16 = (JSC::VM *)v807;
                if (*(unsigned __int8 *)(v732 + 5) <= 0x16u)
                  goto LABEL_226;
              }
            }
          }
        }
      }
      else if ((_DWORD)v448)
      {
        v449 = *(unsigned __int16 *)v447 - 48;
        if (v449 <= 9 && (*(_WORD *)v447 != 48 || v448 <= 1))
        {
          v512 = (unsigned __int16 *)(v447 + 2);
          v513 = v448 - 1;
          while (v513)
          {
            if (v449 <= 0x19999999)
            {
              v514 = *v512 - 48;
              if (v514 <= 9)
              {
                v333 = __CFADD__(v514, 10 * v449);
                v449 = v514 + 10 * (_DWORD)v449;
                ++v512;
                --v513;
                if (!v333)
                  continue;
              }
            }
            goto LABEL_634;
          }
          goto LABEL_1269;
        }
      }
    }
  }
LABEL_634:
  v450 = v105;
  v451 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    v452 = 16 * (*(_DWORD *)v51 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v51 + 6) & 8) == 0)
    {
      v453 = v16;
      v454 = v10;
      if (v450)
      {
        if ((v450 & ~*(_DWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)), v451, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v455)
          {
            v834 = v20;
            v456 = JSC::PropertyTable::get(v455, (uint64_t *)&v834);
            a6 = v456;
            if ((_DWORD)v456 != -1)
            {
              a5 = HIDWORD(v456);
              if ((int)v456 <= 63)
              {
                v485 = v51 + 16;
                v486 = v456 << 32;
              }
              else
              {
                v485 = *(_QWORD *)(v51 + 8) - 8;
                v486 = 0x3F00000000 - (v456 << 32);
              }
              a4 = *(_QWORD *)(v485 + (v486 >> 29));
              if ((a4 & 0xFFFE000000000002) != 0)
              {
LABEL_706:
                v817 = a4;
                v821 = v51;
                v819 = __PAIR64__(v456, HIDWORD(v456));
                v163 = 1;
                WORD4(v822) = 257;
              }
              else
              {
                v487 = *(unsigned __int8 *)(a4 + 5);
                if (v487 == 5)
                {
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v51, (uint64_t)a2, (uint64_t)&v817, a4, SHIDWORD(v456), v456);
                  v163 = 1;
                }
                else
                {
                  if (v487 != 6)
                    goto LABEL_706;
                  v571 = *(_DWORD *)(v452 + 16) & 3;
                  v572 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v574 = *(_QWORD *)(a4 + 24);
                    v573 = *(_QWORD *)(a4 + 32);
                    v817 = *(_QWORD *)(a4 + 8);
                    v818 = v572;
                    LODWORD(v819) = HIDWORD(v456);
                    v821 = v51;
                    BYTE9(v822) = 3;
                    v163 = 1;
                    if (v571 != 2)
                      BYTE8(v822) = 1;
                    BYTE11(v822) = 1;
                    v825 = v574;
                    v826 = v573;
                  }
                  else
                  {
                    v817 = *(_QWORD *)(a4 + 8);
                    v818 = v572;
                    LODWORD(v819) = HIDWORD(v456);
                    v821 = v51;
                    v163 = 1;
                    BYTE9(v822) = 3;
                    if (v571 != 2)
                      BYTE8(v822) = 1;
                  }
                }
              }
              v10 = v454;
              v16 = v453;
              goto LABEL_226;
            }
          }
        }
      }
      if ((*(_BYTE *)(v51 + 6) & 0x20) != 0)
      {
        v552 = JSC::JSObject::getOwnStaticPropertySlot(v51, v451, v20, &v817);
        v16 = v453;
        v10 = v454;
        if ((v552 & 1) != 0)
        {
          v163 = 1;
          goto LABEL_226;
        }
      }
      else
      {
        v10 = v454;
        v16 = v453;
      }
      goto LABEL_642;
    }
    v807 = (uint64_t)v16;
    v808 = v10;
    v809 = v17;
    v604 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v452 + 76) + 0x68))(v51, v9, v20, &v817);
    v605 = v604;
    if (*((_DWORD *)v451 + 20))
    {
      v694 = JSC::VM::hasExceptionsAfterHandlingTraps(v451, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((v694 | v605) & 1) != 0)
      {
        v163 = !v694;
        goto LABEL_932;
      }
    }
    else if ((v604 & 1) != 0)
    {
      v163 = 1;
      goto LABEL_932;
    }
    if (BYTE10(v822) == 3)
      break;
    v695 = *(unsigned __int8 *)(v51 + 5);
    if (v695 != 61)
      goto LABEL_1147;
    v10 = v808;
    v17 = v809;
    v16 = (JSC::VM *)v807;
    if (BYTE10(v822) == 1)
      goto LABEL_1090;
LABEL_642:
    if ((*(_WORD *)(v452 + 12) & 0x800) != 0)
    {
      v457 = *(_DWORD *)v51;
      if (BYTE10(v822) != 3)
      {
        v592 = v16;
        v593 = v10;
        v594 = 16 * (v457 & 0xFFFFFFFE);
        if ((*(_WORD *)(v594 + 12) & 0x800) != 0)
        {
          v458 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v594 + 76)
                                                                               + 0xB0))(v51, v9);
        }
        else
        {
          v458 = *(_QWORD *)(v594 + 48);
          if (!v458)
            v458 = *(_QWORD *)(v51 + 16);
        }
        if (*((_DWORD *)v451 + 20))
        {
          v762 = JSC::VM::hasExceptionsAfterHandlingTraps(v451, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = v593;
          v16 = v592;
          if (v762)
            goto LABEL_225;
        }
        else
        {
          v10 = v593;
          v16 = v592;
        }
        goto LABEL_646;
      }
    }
    else
    {
      v457 = *(_DWORD *)v51;
    }
    v458 = *(_QWORD *)(16 * (v457 & 0xFFFFFFFE) + 0x30);
    if (!v458)
      v458 = *(_QWORD *)(v51 + 16);
LABEL_646:
    if ((v458 & 0xFFFE000000000002) != 0)
      goto LABEL_225;
    v163 = 0;
    v51 = v458;
    if (*(unsigned __int8 *)(v458 + 5) <= 0x16u)
      goto LABEL_226;
  }
  if (!BYTE12(v822))
  {
    v695 = *(unsigned __int8 *)(v51 + 5);
    if (v695 == 61)
      goto LABEL_1165;
LABEL_1147:
    if (!v20
      || (v695 - 50) < 0xFFFFFFF5
      || (v696 = *(_DWORD *)(v20 + 16), (v696 & 0x20) != 0)
      || (v697 = *(unsigned int *)(v20 + 4), !(_DWORD)v697))
    {
LABEL_1165:
      v10 = v808;
      v17 = v809;
      v16 = (JSC::VM *)v807;
      goto LABEL_642;
    }
    v698 = *(unsigned __int8 **)(v20 + 8);
    if ((v696 & 4) == 0)
    {
      v699 = *(unsigned __int16 *)v698;
      if ((_DWORD)v697 == 1)
        goto LABEL_1153;
      if (v699 == 45)
      {
        v699 = *((unsigned __int16 *)v698 + 1);
        goto LABEL_1157;
      }
      if ((v699 - 48) >= 0xA && ((_DWORD)v697 != 8 || v699 != 73))
      {
LABEL_1168:
        if ((_DWORD)v697 != 3 || v699 != 78)
          goto LABEL_1165;
      }
LABEL_1161:
      v806 = v806 & 0xFFFFFF0000000000 | v697 | ((unint64_t)((v696 >> 2) & 1) << 32);
      JSC::jsToNumber(v698, v806);
      WTF::numberToString(&v834, v700);
      v702 = WTF::equal(v20, (unint64_t)&v834, v701);
      v10 = v808;
      v17 = v809;
      v16 = (JSC::VM *)v807;
      if (v702)
        goto LABEL_1090;
      goto LABEL_642;
    }
    v699 = *v698;
    if ((_DWORD)v697 == 1)
    {
LABEL_1153:
      v10 = v808;
      v17 = v809;
      v16 = (JSC::VM *)v807;
      if ((v699 - 48) < 0xA)
        goto LABEL_1090;
      goto LABEL_642;
    }
    if (v699 == 45)
    {
      v699 = v698[1];
LABEL_1157:
      if ((v699 - 48) < 0xA)
      {
        if ((_DWORD)v697 == 2)
          goto LABEL_1391;
        goto LABEL_1161;
      }
      if ((_DWORD)v697 != 9)
        goto LABEL_1165;
    }
    else
    {
      if ((v699 - 48) < 0xA)
        goto LABEL_1161;
      if ((_DWORD)v697 != 8)
        goto LABEL_1168;
    }
    if (v699 != 73)
      goto LABEL_1165;
    goto LABEL_1161;
  }
LABEL_1391:
  v163 = 0;
LABEL_932:
  v10 = v808;
  v17 = v809;
  v16 = (JSC::VM *)v807;
LABEL_226:
  if (*((_DWORD *)v16 + 20))
  {
    v488 = v10;
    v489 = (unint64_t *)v16;
    v490 = *((_DWORD *)v16 + 20);
    if ((v490 & 0x27) != 0 && (v490 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v16 = (JSC::VM *)v489;
    v51 = v489[2];
    v10 = v488;
    if (v51)
    {
      v22 = 0;
      goto LABEL_717;
    }
  }
  if (v163)
  {
    if (BYTE9(v822) == 1)
    {
      v22 = v817;
    }
    else
    {
      v529 = v16;
      v530 = v10;
      if (BYTE9(v822) == 2)
        v531 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v817, (JSC::JSGlobalObject *)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        v531 = JSC::PropertySlot::customGetter((uint64_t)&v817, *(JSC::VM **)(v9 + 56), (WTF::StringImpl *)v20);
      v22 = v531;
      v10 = v530;
      v16 = v529;
    }
  }
  else
  {
    v22 = 10;
  }
  if (!*((_DWORD *)v16 + 20))
    goto LABEL_230;
  v491 = v10;
  v492 = (unint64_t *)v16;
  v493 = *((_DWORD *)v16 + 20);
  if ((v493 & 0x27) != 0 && (v493 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v16 = (JSC::VM *)v492;
  v51 = v492[2];
  v10 = v491;
  if (v51)
  {
LABEL_717:
    v167 = 0;
  }
  else
  {
LABEL_230:
    v164 = (JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
    v165 = *((_QWORD *)v164 + 8);
    if (!v165 || *(_BYTE *)(v165 + 5) == 1)
    {
      v239 = v10;
      v240 = v16;
      JSC::Structure::allocateRareData(v164, v16, a3, a4, a5, a6, a7, a8);
      v16 = v240;
      v10 = v239;
      v165 = *((_QWORD *)v164 + 8);
    }
    v166 = *(_QWORD *)(v165 + 64);
    if (!v166 || *(_QWORD *)(v166 + 64) != 1)
    {
      v334 = v16;
      v335 = v10;
      JSC::StructureRareData::cacheSpecialPropertySlow(v165, (_QWORD *)v9, v16, (unint64_t)v164, v22, 2, (uint64_t)&v817, a8);
      v16 = v334;
      v10 = v335;
    }
    if (!*((_DWORD *)v16 + 20))
    {
      v167 = 1;
      goto LABEL_236;
    }
    v494 = v10;
    v495 = (unint64_t *)v16;
    v496 = *((_DWORD *)v16 + 20);
    if ((v496 & 0x27) != 0 && (v496 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v51 = v495[2];
    if (v51)
    {
      v10 = v494;
      v16 = (JSC::VM *)v495;
      goto LABEL_717;
    }
    v167 = 1;
    v10 = v494;
    v16 = (JSC::VM *)v495;
  }
LABEL_236:
  if (v824)
  {
    v168 = *(_DWORD *)(v823 + 4);
    if (!v168)
    {
      __break(0xC471u);
      JUMPOUT(0x198A4D328);
    }
    *(_DWORD *)(v823 + 4) = v168 - 1;
  }
  if (v167)
  {
LABEL_13:
    if ((v22 & 0xFFFFFFFFFFFFFFF7) == 2 || v22 == *(_QWORD *)(v9 + 552))
      goto LABEL_15;
    if ((v22 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v22 + 5) == 26)
      {
        v206 = *(_QWORD *)(v22 + 24);
        if ((v206 & 1) != 0)
          v206 = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v206 + 5) == 8)
        {
          LOBYTE(v817) = 1;
          v818 = *(_QWORD *)(v206 + 40);
          LOBYTE(v819) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                                    + 0x4C));
        }
        else
        {
          LOBYTE(v817) = 2;
          v207 = *(_QWORD *)(v22 + 16);
          v818 = v206;
          v819 = v207;
        }
        goto LABEL_310;
      }
      v429 = v10;
      v430 = v16;
      (*(void (**)(unint64_t *__return_ptr, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v22 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(&v817, v22);
      v16 = v430;
      v10 = v429;
      if ((_BYTE)v817)
      {
LABEL_310:
        LOBYTE(v834) = 0;
        v835 = 0x800000000;
        v837 = 0u;
        v838 = 0u;
        v839 = 0u;
        v840 = 0u;
        v836 = (char *)&v837 + 8;
        v841 = 0;
        v827 = (JSC::VM *)((char *)&v837 + 8);
        LODWORD(v828) = 0;
        v208 = v16;
        v209 = v10;
        v51 = JSC::call(v9, v22, &v817, v10, &v827);
        if (!*((_DWORD *)v208 + 20))
          goto LABEL_312;
        v541 = *((_DWORD *)v208 + 20);
        if ((v541 & 0x27) != 0 && (v541 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v208 + 64), 7u, v211, v212, v213, v214, v215, v216);
        if (*((_QWORD *)v208 + 2))
        {
          v51 = *((_QWORD *)v208 + 2);
        }
        else
        {
LABEL_312:
          if ((v51 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v51 + 5) > 0x16u)
            v51 = 0;
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v835, v210, v211, v212, v213, v214, v215, v216);
        v10 = v209;
        goto LABEL_240;
      }
    }
    v51 = *((_QWORD *)v16 + 2);
  }
LABEL_240:
  if (v51)
    return v51;
LABEL_15:
  v23 = *(_QWORD *)(*(_QWORD *)v17 + 2512);
  v24 = *(_QWORD *)(v9 + 56);
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 5) != 1)
    {
      v26 = *(_QWORD *)(v25 + 64);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 40);
        if (v27 > 1)
          goto LABEL_19;
      }
    }
  }
  v819 = 0xFFFFFFFF00000000;
  LOBYTE(v823) = 0;
  v824 = 0;
  v825 = 0;
  v826 = 0;
  v136 = (char *)v10 + 6;
  v135 = *((_BYTE *)v10 + 6);
  v821 = 0;
  *(_QWORD *)&v822 = 0;
  v820 = v10;
  v137 = v23 >> 4;
  v51 = (unint64_t)v10;
  *(_QWORD *)((char *)&v822 + 5) = 0;
  if ((v135 & 8) == 0)
  {
    v138 = (unint64_t)v10;
    do
    {
      v139 = *(_DWORD *)v138 & 0xFFFFFFFE;
      v51 = 16 * v139;
      if (!(_DWORD)v137 || (v137 & ~*(_DWORD *)(16 * v139 + 0x20)) != 0)
        goto LABEL_198;
      v140 = *(_QWORD *)(16 * v139 + 0x58);
      if (!v140)
      {
        v151 = *(_QWORD *)(16 * v139 + 0x40);
        if (!v151 || *(_BYTE *)(v151 + 5) != 1 && *(_DWORD *)(v151 + 80) < 2u)
          goto LABEL_198;
        v152 = v24;
        v153 = v10;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v51, (JSC::VM *)v24, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v24 = v152;
        v10 = v153;
        if (!v140)
          goto LABEL_198;
      }
      if (!*(_DWORD *)(v140 + 24))
        goto LABEL_198;
      v141 = *(_QWORD *)(v140 + 16);
      v142 = v141 & 0xFFFFFFFFFFFFFFFELL;
      v143 = *(unsigned int *)(v140 + 8);
      v144 = *(_DWORD *)(v23 + 16);
      if ((v141 & 1) != 0)
      {
        if ((v144 & 0x20) != 0)
          v144 = *(_DWORD *)(v23 + 32);
        v145 = *(_DWORD *)(v140 + 12);
        v146 = (v144 >> 8) & *(_QWORD *)&v145;
        v147 = *(unsigned __int8 *)(v142 + v146);
        if (!*(_BYTE *)(v142 + v146))
          goto LABEL_198;
        v148 = v142 + v143;
        v149 = 1;
        while (1)
        {
          v150 = *(_QWORD *)(v148 + 8 * (v147 - 1));
          if (v23 == (v150 & 0xFFFFFFFFFFFFLL))
            break;
          v146 = ((_DWORD)v146 + v149) & v145;
          v147 = *(unsigned __int8 *)(v142 + v146);
          ++v149;
          if (!*(_BYTE *)(v142 + v146))
            goto LABEL_198;
        }
        a6 = (v150 >> 16) & 0xFF00000000 | HIBYTE(v150);
      }
      else
      {
        if ((v144 & 0x20) != 0)
          v144 = *(_DWORD *)(v23 + 32);
        v154 = *(_DWORD *)(v140 + 12);
        v155 = v154 & (v144 >> 8);
        v156 = *(_DWORD *)(v142 + 4 * v155);
        if (!v156)
          goto LABEL_198;
        v157 = v142 + 4 * v143;
        v158 = 1;
        while (1)
        {
          v159 = (v156 - 1);
          if (v23 == *(_QWORD *)(v157 + 16 * v159))
            break;
          v155 = (v155 + v158) & v154;
          v156 = *(_DWORD *)(v142 + 4 * v155);
          ++v158;
          if (!v156)
            goto LABEL_198;
        }
        a6 = *(unsigned int *)(v157 + 16 * v159 + 8) | ((unint64_t)*(unsigned __int8 *)(v157 + 16 * v159 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v217 = v138 + 16;
          v218 = a6 << 32;
        }
        else
        {
          v217 = *(_QWORD *)(v138 + 8) - 8;
          v218 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v217 + (v218 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v219 = *(unsigned __int8 *)(a4 + 5);
          if (v219 == 5)
          {
            v285 = v24;
            v286 = v10;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v138, (uint64_t)a2, (uint64_t)&v817, a4, SHIDWORD(a6), a6);
            v24 = v285;
            v10 = v286;
LABEL_433:
            v200 = 1;
            goto LABEL_289;
          }
          if (v219 == 6)
          {
            v362 = *(_DWORD *)(v51 + 16) & 3;
            v363 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v365 = *(_QWORD *)(a4 + 24);
              v364 = *(_QWORD *)(a4 + 32);
              v817 = *(_QWORD *)(a4 + 8);
              v818 = v363;
              LODWORD(v819) = HIDWORD(a6);
              v821 = v138;
              BYTE9(v822) = 3;
              v200 = 1;
              if (v362 != 2)
                BYTE8(v822) = 1;
              BYTE11(v822) = 1;
              v825 = v365;
              v826 = v364;
            }
            else
            {
              v817 = *(_QWORD *)(a4 + 8);
              v818 = v363;
              LODWORD(v819) = HIDWORD(a6);
              v821 = v138;
              v200 = 1;
              BYTE9(v822) = 3;
              if (v362 != 2)
                BYTE8(v822) = 1;
            }
            goto LABEL_289;
          }
        }
        v817 = a4;
        v821 = v138;
        v819 = __PAIR64__(a6, HIDWORD(a6));
        v200 = 1;
        WORD4(v822) = 257;
        goto LABEL_289;
      }
LABEL_198:
      if ((*v136 & 0x20) != 0)
      {
        v273 = v24;
        v274 = v10;
        v275 = JSC::JSObject::getOwnStaticPropertySlot(v138, v24, v23, &v817);
        v24 = v273;
        v10 = v274;
        if ((v275 & 1) != 0)
          goto LABEL_433;
      }
      v51 = *(_QWORD *)(v51 + 48);
      if (!v51)
        v51 = *(_QWORD *)(v138 + 16);
      if ((v51 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v51 + 5) < 0x17u)
      {
        if (!v23)
          goto LABEL_288;
        v197 = *(_DWORD *)(v23 + 16);
        if ((v197 & 0x20) != 0)
          goto LABEL_288;
        v198 = *(_WORD **)(v23 + 8);
        v199 = *(unsigned int *)(v23 + 4);
        if ((v197 & 4) == 0)
        {
          if ((_DWORD)v199)
          {
            v51 = (unsigned __int16)*v198 - 48;
            if (v51 <= 9 && (*v198 != 48 || v199 <= 1))
            {
              v241 = v198 + 1;
              v242 = v199 - 1;
              while (v242)
              {
                if (v51 > 0x19999999)
                  goto LABEL_288;
                v243 = *v241 - 48;
                if (v243 > 9)
                  goto LABEL_288;
                v200 = 0;
                v333 = __CFADD__(v243, 10 * v51);
                v51 = v243 + 10 * (_DWORD)v51;
                ++v241;
                --v242;
                if (v333)
                  goto LABEL_289;
              }
              if ((_DWORD)v51 != -1)
                goto LABEL_400;
            }
          }
LABEL_288:
          v200 = 0;
          goto LABEL_289;
        }
        v678 = v24;
        v679 = v10;
        v680 = v9;
        if (!(_DWORD)v199
          || (v51 = *(unsigned __int8 *)v198 - 48, v51 > 9)
          || v199 >= 2 && *(_BYTE *)v198 == 48)
        {
LABEL_1077:
          v200 = 0;
          v9 = v680;
          v10 = v679;
          v24 = v678;
          goto LABEL_289;
        }
        v691 = (unsigned __int8 *)v198 + 1;
        v692 = v199 - 1;
        while (v692)
        {
          if (v51 > 0x19999999)
            goto LABEL_1077;
          v693 = *v691 - 48;
          if (v693 > 9)
            goto LABEL_1077;
          v200 = 0;
          v333 = __CFADD__(v693, 10 * v51);
          v51 = v693 + 10 * (_DWORD)v51;
          ++v691;
          --v692;
          v9 = v680;
          v10 = v679;
          v24 = v678;
          if (v333)
            goto LABEL_289;
        }
        v9 = v680;
        v10 = v679;
        v24 = v678;
        if ((_DWORD)v51 == -1)
          goto LABEL_288;
LABEL_400:
        v261 = *(JSC::VM **)(v9 + 56);
        v262 = (uint64_t)v10;
        while (2)
        {
          v263 = v24;
          v264 = v10;
          v265 = 16 * (*(_DWORD *)v262 & 0xFFFFFFFE);
          v266 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v265 + 0x4C) + 0x70))(v262, v9, v51, &v817);
          v267 = v266;
          if (*((_DWORD *)v261 + 20))
          {
            v560 = JSC::VM::hasExceptionsAfterHandlingTraps(v261, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((v560 | v267) & 1) != 0)
            {
              v200 = !v560;
              goto LABEL_423;
            }
          }
          else if ((v266 & 1) != 0)
          {
            v200 = 1;
LABEL_423:
            v10 = v264;
            v24 = v263;
            goto LABEL_289;
          }
          if (BYTE10(v822) == 3)
          {
            if (BYTE12(v822))
            {
              v200 = 0;
              goto LABEL_423;
            }
            v268 = *(unsigned __int8 *)(v262 + 5);
            v10 = v264;
            v24 = v263;
            if (v268 != 61)
            {
LABEL_405:
              if ((v268 - 39) <= 0xA)
              {
                v682 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v262, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v24 = v263;
                v10 = v264;
                if (v682 <= v51)
                {
LABEL_1103:
                  v200 = 0;
                  goto LABEL_289;
                }
              }
            }
          }
          else
          {
            v10 = v264;
            v24 = v263;
            v268 = *(unsigned __int8 *)(v262 + 5);
            if (v268 != 61)
              goto LABEL_405;
            if (BYTE10(v822) == 1)
              goto LABEL_1103;
          }
          if ((*(_WORD *)(v265 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
          {
            v269 = *(_QWORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0x30);
            if (!v269)
              v269 = *(_QWORD *)(v262 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v269 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v262 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v262, v9);
            }
            else
            {
              v269 = *(_QWORD *)(16 * (*(_DWORD *)v262 & 0xFFFFFFFE) + 0x30);
              if (!v269)
                v269 = *(_QWORD *)(v262 + 16);
            }
            if (*((_DWORD *)v261 + 20))
            {
              v781 = JSC::VM::hasExceptionsAfterHandlingTraps(v261, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v10 = v264;
              v24 = v263;
              if (v781)
                goto LABEL_1103;
            }
            else
            {
              v10 = v264;
              v24 = v263;
            }
          }
          if ((v269 & 0xFFFE000000000002) != 0)
            goto LABEL_288;
          v200 = 0;
          v262 = v269;
          if (*(unsigned __int8 *)(v269 + 5) <= 0x16u)
            goto LABEL_289;
          continue;
        }
      }
      v136 = (_BYTE *)(v51 + 6);
      v138 = v51;
    }
    while ((*(_BYTE *)(v51 + 6) & 8) == 0);
  }
  if (v23)
  {
    v461 = *(_DWORD *)(v23 + 16);
    if ((v461 & 0x20) == 0)
    {
      v462 = *(_BYTE **)(v23 + 8);
      v463 = *(unsigned int *)(v23 + 4);
      if ((v461 & 4) != 0)
      {
        if ((_DWORD)v463)
        {
          v464 = *v462 - 48;
          if (v464 <= 9 && (v463 < 2 || *v462 != 48))
          {
            v734 = v462 + 1;
            v735 = v463 - 1;
            while (v735)
            {
              if (v464 <= 0x19999999)
              {
                v736 = *v734 - 48;
                if (v736 <= 9)
                {
                  v333 = __CFADD__(v736, 10 * v464);
                  v464 = v736 + 10 * (_DWORD)v464;
                  ++v734;
                  --v735;
                  if (!v333)
                    continue;
                }
              }
              goto LABEL_664;
            }
LABEL_1298:
            if ((_DWORD)v464 != -1)
            {
              v51 = *(_QWORD *)(v9 + 56);
              v737 = (uint64_t)v10;
              v806 = v24;
              while (1)
              {
                v738 = v10;
                v739 = 16 * (*(_DWORD *)v737 & 0xFFFFFFFE);
                v740 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t *))(16 * *(unsigned int *)(v739 + 0x4C) + 0x70))(v737, v9, v464, &v817);
                v741 = v740;
                if (*(_DWORD *)(v51 + 80))
                {
                  v744 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((v744 | v741) & 1) != 0)
                  {
                    v200 = !v744;
                    goto LABEL_1312;
                  }
                }
                else if ((v740 & 1) != 0)
                {
                  v200 = 1;
LABEL_1312:
                  v10 = v738;
                  goto LABEL_1313;
                }
                if (BYTE10(v822) == 3)
                {
                  if (BYTE12(v822))
                    goto LABEL_1336;
                  v742 = *(unsigned __int8 *)(v737 + 5);
                  if (v742 == 61)
                    goto LABEL_1305;
                }
                else
                {
                  v742 = *(unsigned __int8 *)(v737 + 5);
                  if (v742 == 61)
                  {
                    if (BYTE10(v822) == 1)
                      goto LABEL_1336;
                    goto LABEL_1305;
                  }
                }
                if ((v742 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v737, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8) <= v464)
                {
                  goto LABEL_1336;
                }
LABEL_1305:
                if ((*(_WORD *)(v739 + 12) & 0x800) == 0 || BYTE10(v822) == 3)
                {
                  v743 = *(_QWORD *)(16 * (*(_DWORD *)v737 & 0xFFFFFFFE) + 0x30);
                  if (!v743)
                    v743 = *(_QWORD *)(v737 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v737 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v743 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v737 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v737, v9);
                  }
                  else
                  {
                    v743 = *(_QWORD *)(16 * (*(_DWORD *)v737 & 0xFFFFFFFE) + 0x30);
                    if (!v743)
                      v743 = *(_QWORD *)(v737 + 16);
                  }
                  if (*(_DWORD *)(v51 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
LABEL_1336:
                    v200 = 0;
                    goto LABEL_1312;
                  }
                }
                if ((v743 & 0xFFFE000000000002) != 0)
                  goto LABEL_1336;
                v200 = 0;
                v737 = v743;
                v10 = v738;
                v24 = v806;
                if (*(unsigned __int8 *)(v743 + 5) <= 0x16u)
                  goto LABEL_289;
              }
            }
          }
        }
      }
      else if ((_DWORD)v463)
      {
        v464 = *(unsigned __int16 *)v462 - 48;
        if (v464 <= 9 && (*(_WORD *)v462 != 48 || v463 <= 1))
        {
          v515 = (unsigned __int16 *)(v462 + 2);
          v516 = v463 - 1;
          while (v516)
          {
            if (v464 <= 0x19999999)
            {
              v517 = *v515 - 48;
              if (v517 <= 9)
              {
                v333 = __CFADD__(v517, 10 * v464);
                v464 = v517 + 10 * (_DWORD)v464;
                ++v515;
                --v516;
                if (!v333)
                  continue;
              }
            }
            goto LABEL_664;
          }
          goto LABEL_1298;
        }
      }
    }
  }
LABEL_664:
  v465 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    v466 = 16 * (*(_DWORD *)v51 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v51 + 6) & 8) == 0)
    {
      v467 = v24;
      v468 = v10;
      if ((_DWORD)v137)
      {
        if ((v137 & ~*(_DWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)), v465, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v469)
          {
            v834 = v23;
            v470 = JSC::PropertyTable::get(v469, (uint64_t *)&v834);
            a6 = v470;
            if ((_DWORD)v470 != -1)
            {
              a5 = HIDWORD(v470);
              if ((int)v470 <= 63)
              {
                v498 = v51 + 16;
                v499 = v470 << 32;
              }
              else
              {
                v498 = *(_QWORD *)(v51 + 8) - 8;
                v499 = 0x3F00000000 - (v470 << 32);
              }
              a4 = *(_QWORD *)(v498 + (v499 >> 29));
              if ((a4 & 0xFFFE000000000002) != 0)
              {
LABEL_726:
                v817 = a4;
                v821 = v51;
                v819 = __PAIR64__(v470, HIDWORD(v470));
                v200 = 1;
                WORD4(v822) = 257;
              }
              else
              {
                v500 = *(unsigned __int8 *)(a4 + 5);
                if (v500 == 5)
                {
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v51, (uint64_t)a2, (uint64_t)&v817, a4, SHIDWORD(v470), v470);
                  v200 = 1;
                }
                else
                {
                  if (v500 != 6)
                    goto LABEL_726;
                  v575 = *(_DWORD *)(v466 + 16) & 3;
                  v576 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v578 = *(_QWORD *)(a4 + 24);
                    v577 = *(_QWORD *)(a4 + 32);
                    v817 = *(_QWORD *)(a4 + 8);
                    v818 = v576;
                    LODWORD(v819) = HIDWORD(v470);
                    v821 = v51;
                    BYTE9(v822) = 3;
                    v200 = 1;
                    if (v575 != 2)
                      BYTE8(v822) = 1;
                    BYTE11(v822) = 1;
                    v825 = v578;
                    v826 = v577;
                  }
                  else
                  {
                    v817 = *(_QWORD *)(a4 + 8);
                    v818 = v576;
                    LODWORD(v819) = HIDWORD(v470);
                    v821 = v51;
                    v200 = 1;
                    BYTE9(v822) = 3;
                    if (v575 != 2)
                      BYTE8(v822) = 1;
                  }
                }
              }
              v10 = v468;
              v24 = v467;
              goto LABEL_289;
            }
          }
        }
      }
      if ((*(_BYTE *)(v51 + 6) & 0x20) != 0)
      {
        v557 = JSC::JSObject::getOwnStaticPropertySlot(v51, v465, v23, &v817);
        v24 = v467;
        v10 = v468;
        if ((v557 & 1) != 0)
        {
          v200 = 1;
          goto LABEL_289;
        }
      }
      else
      {
        v10 = v468;
        v24 = v467;
      }
      goto LABEL_672;
    }
    v806 = v24;
    v607 = v10;
    v608 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t *))(16 * *(unsigned int *)(v466 + 76) + 0x68))(v51, v9, v23, &v817);
    v609 = v608;
    if (*((_DWORD *)v465 + 20))
    {
      v703 = JSC::VM::hasExceptionsAfterHandlingTraps(v465, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((v703 | v609) & 1) != 0)
      {
        v200 = !v703;
        goto LABEL_939;
      }
    }
    else if ((v608 & 1) != 0)
    {
      v200 = 1;
      goto LABEL_939;
    }
    if (BYTE10(v822) == 3)
      break;
    v704 = *(unsigned __int8 *)(v51 + 5);
    if (v704 != 61)
      goto LABEL_1180;
    v10 = v607;
    v24 = v806;
    if (BYTE10(v822) == 1)
      goto LABEL_1103;
LABEL_672:
    if ((*(_WORD *)(v466 + 12) & 0x800) != 0)
    {
      v471 = *(_DWORD *)v51;
      if (BYTE10(v822) != 3)
      {
        v599 = v24;
        v600 = v10;
        v601 = 16 * (v471 & 0xFFFFFFFE);
        if ((*(_WORD *)(v601 + 12) & 0x800) != 0)
        {
          v472 = (*(uint64_t (**)(unint64_t, unint64_t))(16 * *(unsigned int *)(v601 + 76)
                                                                               + 0xB0))(v51, v9);
        }
        else
        {
          v472 = *(_QWORD *)(v601 + 48);
          if (!v472)
            v472 = *(_QWORD *)(v51 + 16);
        }
        if (*((_DWORD *)v465 + 20))
        {
          v769 = JSC::VM::hasExceptionsAfterHandlingTraps(v465, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v10 = v600;
          v24 = v599;
          if (v769)
            goto LABEL_288;
        }
        else
        {
          v10 = v600;
          v24 = v599;
        }
        goto LABEL_676;
      }
    }
    else
    {
      v471 = *(_DWORD *)v51;
    }
    v472 = *(_QWORD *)(16 * (v471 & 0xFFFFFFFE) + 0x30);
    if (!v472)
      v472 = *(_QWORD *)(v51 + 16);
LABEL_676:
    if ((v472 & 0xFFFE000000000002) != 0)
      goto LABEL_288;
    v200 = 0;
    v51 = v472;
    if (*(unsigned __int8 *)(v472 + 5) <= 0x16u)
      goto LABEL_289;
  }
  if (!BYTE12(v822))
  {
    v704 = *(unsigned __int8 *)(v51 + 5);
    if (v704 == 61)
      goto LABEL_1198;
LABEL_1180:
    if (!v23
      || (v704 - 50) < 0xFFFFFFF5
      || (v705 = *(_DWORD *)(v23 + 16), (v705 & 0x20) != 0)
      || (v706 = *(unsigned int *)(v23 + 4), !(_DWORD)v706))
    {
LABEL_1198:
      v10 = v607;
      v24 = v806;
      goto LABEL_672;
    }
    v707 = *(unsigned __int8 **)(v23 + 8);
    if ((v705 & 4) == 0)
    {
      v708 = *(unsigned __int16 *)v707;
      if ((_DWORD)v706 == 1)
        goto LABEL_1186;
      if (v708 == 45)
      {
        v708 = *((unsigned __int16 *)v707 + 1);
        goto LABEL_1190;
      }
      if ((v708 - 48) >= 0xA && ((_DWORD)v706 != 8 || v708 != 73))
      {
LABEL_1201:
        if ((_DWORD)v706 != 3 || v708 != 78)
          goto LABEL_1198;
      }
LABEL_1194:
      v809 = v809 & 0xFFFFFF0000000000 | v706 | ((unint64_t)((v705 >> 2) & 1) << 32);
      JSC::jsToNumber(v707, v809);
      WTF::numberToString(&v834, v709);
      v711 = WTF::equal(v23, (unint64_t)&v834, v710);
      v10 = v607;
      v24 = v806;
      if (v711)
        goto LABEL_1103;
      goto LABEL_672;
    }
    v708 = *v707;
    if ((_DWORD)v706 == 1)
    {
LABEL_1186:
      v10 = v607;
      v24 = v806;
      if ((v708 - 48) < 0xA)
        goto LABEL_1103;
      goto LABEL_672;
    }
    if (v708 == 45)
    {
      v708 = v707[1];
LABEL_1190:
      if ((v708 - 48) < 0xA)
      {
        if ((_DWORD)v706 == 2)
          goto LABEL_1396;
        goto LABEL_1194;
      }
      if ((_DWORD)v706 != 9)
        goto LABEL_1198;
    }
    else
    {
      if ((v708 - 48) < 0xA)
        goto LABEL_1194;
      if ((_DWORD)v706 != 8)
        goto LABEL_1201;
    }
    if (v708 != 73)
      goto LABEL_1198;
    goto LABEL_1194;
  }
LABEL_1396:
  v200 = 0;
LABEL_939:
  v10 = v607;
LABEL_1313:
  v24 = v806;
LABEL_289:
  if (*(_DWORD *)(v24 + 80))
  {
    v501 = v10;
    v502 = v24;
    v503 = *(_DWORD *)(v24 + 80);
    if ((v503 & 0x27) != 0 && (v503 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v24 = v502;
    v51 = *(_QWORD *)(v502 + 16);
    v10 = v501;
    if (v51)
    {
      v27 = 0;
      goto LABEL_737;
    }
  }
  if (v200)
  {
    v510 = v24;
    v511 = v10;
    if (BYTE9(v822) == 1)
    {
      v27 = v817;
    }
    else
    {
      if (BYTE9(v822) == 2)
        v553 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v817, (JSC::JSGlobalObject *)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        v553 = JSC::PropertySlot::customGetter((uint64_t)&v817, *(JSC::VM **)(v9 + 56), (WTF::StringImpl *)v23);
      v27 = v553;
    }
    v10 = v511;
    v24 = v510;
  }
  else
  {
    v27 = 10;
  }
  if (!*(_DWORD *)(v24 + 80))
    goto LABEL_293;
  v504 = v10;
  v505 = v24;
  v506 = *(_DWORD *)(v24 + 80);
  if ((v506 & 0x27) != 0 && (v506 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = v505;
  v51 = *(_QWORD *)(v505 + 16);
  v10 = v504;
  if (v51)
  {
LABEL_737:
    v204 = 0;
  }
  else
  {
LABEL_293:
    v201 = (JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
    v202 = *((_QWORD *)v201 + 8);
    if (!v202 || *(_BYTE *)(v202 + 5) == 1)
    {
      v244 = v10;
      v245 = v24;
      JSC::Structure::allocateRareData(v201, (JSC::VM *)v24, a3, a4, a5, a6, a7, a8);
      v24 = v245;
      v10 = v244;
      v202 = *((_QWORD *)v201 + 8);
    }
    v203 = *(_QWORD *)(v202 + 64);
    if (!v203 || *(_QWORD *)(v203 + 40) != 1)
    {
      v336 = v24;
      v337 = v10;
      JSC::StructureRareData::cacheSpecialPropertySlow(v202, (_QWORD *)v9, (JSC::VM *)v24, (unint64_t)v201, v27, 1, (uint64_t)&v817, a8);
      v24 = v336;
      v10 = v337;
    }
    if (!*(_DWORD *)(v24 + 80))
    {
      v204 = 1;
      goto LABEL_299;
    }
    v507 = v10;
    v508 = v24;
    v509 = *(_DWORD *)(v24 + 80);
    if ((v509 & 0x27) != 0 && (v509 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v51 = *(_QWORD *)(v508 + 16);
    if (v51)
    {
      v10 = v507;
      v24 = v508;
      goto LABEL_737;
    }
    v204 = 1;
    v10 = v507;
    v24 = v508;
  }
LABEL_299:
  if (v824)
  {
    v205 = *(_DWORD *)(v823 + 4);
    if (!v205)
    {
      __break(0xC471u);
      JUMPOUT(0x198A4D3B0);
    }
    *(_DWORD *)(v823 + 4) = v205 - 1;
  }
  if (!v204)
  {
LABEL_64:
    if (v51)
      return v51;
    return JSC::throwTypeError(v9, &v811, (uint64_t)"No default value", 17);
  }
LABEL_19:
  if ((v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    return JSC::throwTypeError(v9, &v811, (uint64_t)"No default value", 17);
  v28 = *(WTF::Thread **)(v9 + 512);
  if ((v28 & 1) != 0)
  {
    v431 = *(uint64_t (**)(unint64_t *))((unint64_t)v28 & 0xFFFFFFFFFFFFFFFCLL);
    v432 = v24;
    v433 = v10;
    if ((v9 & 8) != 0)
      v434 = (uint64_t *)(v9 - 16);
    else
      v434 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    v834 = *v434;
    v835 = v9;
    v836 = (char *)(v9 + 512);
    v28 = (WTF::Thread *)v431(&v834);
    v10 = v433;
    v24 = v432;
  }
  if ((WTF::Thread *)v27 != v28
    || (v220 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40)) == 0
    || *(_BYTE *)(v220 + 5) == 1
    || (v221 = *(_QWORD *)(v220 + 64)) == 0
    || (v51 = *(_QWORD *)(v221 + 16), v51 <= 1))
  {
    if ((v27 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v27 + 5) == 26)
      {
        v29 = *(_QWORD *)(v27 + 24);
        if ((v29 & 1) != 0)
          v29 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v29 + 5) == 8)
        {
          v30 = 1;
          LOBYTE(v814) = 1;
          v815 = *(_QWORD *)(v29 + 40);
          LOBYTE(v816) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v27 & 0xFFFFFFFE)
                                                                                    + 0x4C));
        }
        else
        {
          v30 = 2;
          LOBYTE(v814) = 2;
          v31 = *(_DWORD **)(v27 + 16);
          v815 = v29;
          v816 = v31;
        }
LABEL_28:
        LOBYTE(v834) = 0;
        v835 = 0x800000000;
        v32 = (char *)&v837 + 8;
        v837 = 0u;
        v838 = 0u;
        v839 = 0u;
        v840 = 0u;
        v836 = (char *)&v837 + 8;
        v841 = 0;
        v812 = (char *)&v837 + 8;
        v813 = 0;
        v33 = *(_QWORD *)(v9 + 56);
        v34 = (JSC::VM ***)(v33 + 90568);
        v809 = (unint64_t)&v837 + 8;
        v810 = v9;
        if (v30 == 2 || !(_BYTE)v816)
        {
          v831 = (JSC::VM *)v33;
          if (v30 == 2)
          {
            v37 = 0;
            v36 = v815;
            v35 = v816;
            v38 = v816;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = v815;
            v38 = (_DWORD *)v27;
          }
          v39 = *(_QWORD *)(16 * (*v38 & 0xFFFFFFFE) + 0x28);
          v827 = (JSC::VM *)v33;
          v828 = v39;
          v40 = *v34;
          v808 = (JSC::VM *)(v33 + 90568);
          if (!v40)
          {
            *v34 = &v827;
            v276 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v276)
            {
              v277 = v10;
              v278 = v24;
              v807 = v37;
              v28 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(v28);
              v37 = v807;
              v24 = v278;
              v10 = v277;
              v276 = v28;
            }
            v279 = *((_BYTE *)v276 + 5);
            if ((v279 & 0x20) == 0)
            {
              v807 = v37;
              v563 = v24;
              v564 = v10;
              *((_BYTE *)v276 + 5) = v279 | 0x20;
              if (BYTE2(dword_1ECF4C6C3))
                JSC::Wasm::startTrackingCurrentThread(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::registerThreadForMachExceptionHandling(v276, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v10 = v564;
              v24 = v563;
              v37 = v807;
            }
            v28 = v827;
            if (*((_BYTE *)v827 + 56))
            {
              v807 = v37;
              v282 = v24;
              v283 = v10;
            }
            else
            {
              v280 = *((_QWORD *)v827 + 11624);
              v281 = atomic_load(&JSC::lastTimeZoneID);
              if (v280 == v281)
                goto LABEL_33;
              v807 = v37;
              v282 = v24;
              v283 = v10;
              v28 = v827;
            }
            JSC::VM::executeEntryScopeServicesOnEntry(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v10 = v283;
            v24 = v282;
            v37 = v807;
          }
LABEL_33:
          *(_QWORD *)(v33 + 32) = 0;
          if ((unint64_t)&v803 < *(_QWORD *)(v33 + 8) || v813 > 0x10000)
          {
            v424 = v24;
            v425 = JSC::throwStackOverflowError(v39, &v831, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          else
          {
            if (!*(_DWORD *)(v33 + 4))
            {
              v41 = *(_DWORD *)(v33 + 80);
              if ((v41 & 0x27) == 0 || (v41 & 0x20) != 0)
                goto LABEL_37;
              v441 = *(_DWORD *)(v33 + 80);
              if ((v441 & 0x27) != 0 && (v441 & 0x20) == 0)
              {
                v759 = v10;
                v760 = v24;
                v761 = v37;
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                v37 = v761;
                v24 = v760;
                v10 = v759;
              }
              v51 = *(_QWORD *)(v33 + 16);
              if (!v51)
              {
LABEL_37:
                v42 = (unsigned int *)(v33 + 80);
                v43 = *(_DWORD *)(v33 + 80);
                if ((v43 & 0x20) == 0)
                {
                  do
                    v44 = __ldaxr(v42);
                  while (__stlxr(v44 | 0x20, v42));
                }
                v45 = 0;
                v46 = 0;
                v833 = 0;
                if (v30 == 2)
                {
                  if (*(_BYTE *)(v36 + 5) == 8
                    || (*(_QWORD *)(v36 + 8)
                      ? (v100 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v100 = 0),
                        v100))
                  {
                    v833 = *(JSC::VM **)(v36 + 96);
                  }
                  else
                  {
                    v289 = v24;
                    v290 = v35;
                    v291 = v10;
                    v292 = v37;
                    JSC::ScriptExecutable::prepareForExecutionImpl(v36, v33, v27, v290, 0, &v833);
                    v37 = v292;
                    v24 = v289;
                    v10 = v291;
                  }
                  v51 = *((_QWORD *)v831 + 2);
                  if (!v51)
                  {
                    *((_BYTE *)v833 + 17) = 0;
                    v46 = *(_QWORD *)(v36 + 8);
                    v101 = (unsigned int *)(v46 + 8);
                    do
                      v102 = __ldaxr(v101);
                    while (__stlxr(v102 + 1, v101));
                    v45 = v833;
                    goto LABEL_40;
                  }
                  if ((v43 & 0x20) == 0)
                  {
                    do
                      v473 = __ldaxr(v42);
                    while (__stlxr(v473 & 0xFFFFFFDF, v42));
                  }
                  v32 = (char *)v809;
                  v9 = v810;
                }
                else
                {
LABEL_40:
                  v817 = (unint64_t)v45;
                  v818 = v27;
                  *(_QWORD *)&v822 = v812;
                  *((_QWORD *)&v822 + 1) = v39;
                  v47 = 1;
                  LODWORD(v819) = 1;
                  if (v45)
                  {
                    v48 = *((_DWORD *)v45 + 7);
                    if (v48 >= 2)
                      v47 = v48;
                    else
                      v47 = 1;
                  }
                  v32 = (char *)v809;
                  v9 = v810;
                  LODWORD(v821) = v47 | 1;
                  HIDWORD(v819) = 0;
                  v820 = v10;
                  if ((v43 & 0x20) == 0)
                  {
                    do
                      v49 = __ldaxr(v42);
                    while (__stlxr(v49 & 0xFFFFFFDF, v42));
                  }
                  v50 = v24;
                  if (v30 == 2)
                  {
                    v51 = vmEntryToJavaScript(*(_QWORD *)(v46 + 16), (JSC::VM *)v33, (uint64_t)&v817, a4, a5, a6, a7, a8);
                    v24 = v50;
LABEL_48:
                    v52 = (unsigned int *)(v46 + 8);
                    do
                    {
                      v53 = __ldaxr(v52);
                      v54 = v53 - 1;
                    }
                    while (__stlxr(v54, v52));
                    if (!v54)
                    {
                      atomic_store(1u, (unsigned int *)(v46 + 8));
                      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
                      v24 = v50;
                    }
                  }
                  else
                  {
                    v51 = vmEntryToNative(v37, (JSC::VM *)v33, (uint64_t)&v817, a4, a5, a6, a7, a8);
                    v24 = v50;
                    if (v46)
                      goto LABEL_48;
                  }
                }
LABEL_52:
                v55 = v827;
                if (*((JSC::VM ***)v827 + 11321) == &v827)
                {
                  *((_QWORD *)v827 + 11321) = 0;
                  if (*((_BYTE *)v55 + 56))
                  {
                    v284 = v24;
                    JSC::VM::executeEntryScopeServicesOnExit(v55, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v24 = v284;
                  }
                }
                *((_BYTE *)v808 + 2552) = 1;
                if (!*(_DWORD *)(v24 + 80))
                  goto LABEL_56;
LABEL_54:
                v440 = *(_DWORD *)(v24 + 80);
                if ((v440 & 0x27) != 0 && (v440 & 0x20) == 0)
                {
                  v758 = v24;
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v24 = v758;
                }
                if (*(_QWORD *)(v24 + 16))
                {
                  v51 = *(_QWORD *)(v24 + 16);
                }
                else
                {
LABEL_56:
                  if ((v51 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v51 + 5) > 0x16u)
                    v51 = 0;
                }
                v56 = (uint64_t *)v837;
                if ((_QWORD)v837)
                {
                  v322 = *(_QWORD *)v837;
                  if (*(_QWORD *)v837)
                  {
                    v323 = *(_DWORD *)(v322 - 8);
                    v324 = (((unint64_t)&v835 + ~((_QWORD)&v835 << 32)) ^ (((unint64_t)&v835
                                                                                 + ~((_QWORD)&v835 << 32)) >> 22))
                         + ~((((unint64_t)&v835 + ~((_QWORD)&v835 << 32)) ^ (((unint64_t)&v835
                                                                                   + ~((_QWORD)&v835 << 32)) >> 22)) << 13);
                    v325 = (9 * (v324 ^ (v324 >> 8))) ^ ((9 * (v324 ^ (v324 >> 8))) >> 15);
                    v326 = v323 & (((v325 + ~(v325 << 27)) >> 31) ^ ((_DWORD)v325 + ~((_DWORD)v325 << 27)));
                    v327 = *(uint64_t **)(v322 + 8 * v326);
                    if (v327 != &v835)
                    {
                      v371 = 1;
                      while (v327)
                      {
                        v326 = ((_DWORD)v326 + v371) & v323;
                        v327 = *(uint64_t **)(v322 + 8 * v326);
                        ++v371;
                        if (v327 == &v835)
                          goto LABEL_474;
                      }
                      v326 = *(unsigned int *)(v322 - 4);
                    }
LABEL_474:
                    if (v326 != *(_DWORD *)(v322 - 4))
                    {
                      *(_QWORD *)(v322 + 8 * v326) = -1;
                      ++*(_DWORD *)(*v56 - 16);
                      v328 = *v56;
                      v329 = *v56 ? *(_DWORD *)(v328 - 12) - 1 : -1;
                      *(_DWORD *)(v328 - 12) = v329;
                      v330 = *v56;
                      if (*v56)
                      {
                        v331 = 6 * *(_DWORD *)(v330 - 12);
                        v332 = *(_DWORD *)(v330 - 4);
                        v333 = v331 < v332 && v332 >= 9;
                        if (v333)
                          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v56, v332 >> 1, 0, a4, a5, a6, a7, a8);
                      }
                    }
                  }
                }
                if (v836 != v32 && v836 != 0)
                  WTF::fastFree((unint64_t)v836, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                goto LABEL_64;
              }
LABEL_583:
              v32 = (char *)v809;
              v9 = v810;
              goto LABEL_52;
            }
            v424 = v24;
            v425 = JSC::Interpreter::checkVMEntryPermission(v28);
          }
          v24 = v424;
          v51 = v425;
          goto LABEL_583;
        }
        if (*(_DWORD *)(v27 + 88))
        {
          v340 = v24;
          v341 = JSC::Interpreter::executeBoundCall();
          v24 = v340;
          v51 = v341;
          goto LABEL_54;
        }
        v378 = *(_QWORD *)(v27 + 32);
        v377 = *(JSC::VM **)(v27 + 40);
        if (*(_BYTE *)(v378 + 5) == 26)
        {
          v379 = *(_QWORD *)(v378 + 24);
          if ((v379 & 1) != 0)
            v379 = *(_QWORD *)((v379 & 0xFFFFFFFFFFFFFFFELL) + 48);
          v380 = v33 + 90568;
          if (*(_BYTE *)(v379 + 5) != 8)
          {
            v381 = 0;
            LOBYTE(v827) = 2;
            v382 = *(_DWORD **)(v378 + 16);
            v828 = v379;
            v829 = v382;
            v833 = (JSC::VM *)v33;
            v383 = 1;
            v384 = v382;
            goto LABEL_532;
          }
          LOBYTE(v827) = 1;
          v381 = *(_QWORD *)(v379 + 40);
          v828 = v381;
          LOBYTE(v829) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v378 & 0xFFFFFFFE)
                                                                                    + 0x4C));
          v833 = (JSC::VM *)v33;
LABEL_596:
          v383 = 0;
          v382 = 0;
          v379 = 0;
          v384 = (_DWORD *)v378;
        }
        else
        {
          v561 = *(JSC::VM **)(v27 + 40);
          v380 = v33 + 90568;
          v562 = v24;
          v28 = (WTF::Thread *)(*(_QWORD *(**)(JSC::VM **__return_ptr, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v378 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v827, v378);
          v833 = (JSC::VM *)v33;
          if (v827 != 2)
          {
            v381 = v828;
            v24 = v562;
            v377 = v561;
            goto LABEL_596;
          }
          v381 = 0;
          v383 = 1;
          v379 = v828;
          v382 = v829;
          v384 = v829;
          v24 = v562;
          v377 = v561;
        }
LABEL_532:
        v385 = *(_QWORD *)(16 * (*v384 & 0xFFFFFFFE) + 0x28);
        v831 = (JSC::VM *)v33;
        v832 = v385;
        if (!*(_QWORD *)v380)
        {
          v807 = v381;
          v535 = v377;
          v536 = v24;
          *(_QWORD *)v380 = &v831;
          v537 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v537)
          {
            v28 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(v28);
            v537 = v28;
          }
          if ((*((_BYTE *)v537 + 5) & 0x20) == 0)
          {
            *((_BYTE *)v537 + 5) |= 0x20u;
            if (BYTE2(dword_1ECF4C6C3))
              JSC::Wasm::startTrackingCurrentThread(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::registerThreadForMachExceptionHandling(v537, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          v28 = v831;
          if (!*((_BYTE *)v831 + 56))
          {
            v538 = *((_QWORD *)v831 + 11624);
            v539 = atomic_load(&JSC::lastTimeZoneID);
            v24 = v536;
            v377 = v535;
            v381 = v807;
            if (v538 == v539)
              goto LABEL_533;
            v28 = v831;
          }
          JSC::VM::executeEntryScopeServicesOnEntry(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v24 = v536;
          v377 = v535;
          v381 = v807;
        }
LABEL_533:
        *(_QWORD *)(v33 + 32) = 0;
        if ((unint64_t)&v803 < *(_QWORD *)(v33 + 8) || v813 > 0x10000)
        {
          v583 = v24;
          v584 = JSC::throwStackOverflowError(v385, &v833, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          if (!*(_DWORD *)(v33 + 4))
          {
            v386 = *(_DWORD *)(v33 + 80);
            if ((v386 & 0x27) != 0 && (v386 & 0x20) == 0)
            {
              v588 = v24;
              v589 = v377;
              v590 = v381;
              v591 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v33, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v381 = v590;
              v377 = v589;
              v24 = v588;
              if (v591)
              {
                v51 = *(_QWORD *)(v33 + 16);
                goto LABEL_893;
              }
            }
            v387 = (unsigned int *)(v33 + 80);
            v388 = *(_DWORD *)(v33 + 80);
            if ((v388 & 0x20) == 0)
            {
              do
                v389 = __ldaxr(v387);
              while (__stlxr(v389 | 0x20, v387));
            }
            v390 = 0;
            v391 = 0;
            v830 = 0;
            if (v383)
            {
              if (*(_BYTE *)(v379 + 5) == 8
                || (*(_QWORD *)(v379 + 8)
                  ? (v426 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                  : (v426 = 0),
                    v426))
              {
                v830 = *(_QWORD *)(v379 + 96);
              }
              else
              {
                v806 = v24;
                v542 = v382;
                v543 = v377;
                v544 = v381;
                JSC::ScriptExecutable::prepareForExecutionImpl(v379, v33, v378, v542, 0, &v830);
                v381 = v544;
                v377 = v543;
                v24 = v806;
              }
              v51 = *((_QWORD *)v833 + 2);
              if (!v51)
              {
                *(_BYTE *)(v830 + 17) = 0;
                v391 = *(_QWORD *)(v379 + 8);
                v427 = (unsigned int *)(v391 + 8);
                do
                  v428 = __ldaxr(v427);
                while (__stlxr(v428 + 1, v427));
                v390 = v830;
                goto LABEL_540;
              }
              if ((v388 & 0x20) == 0)
              {
                do
                  v602 = __ldaxr(v387);
                while (__stlxr(v602 & 0xFFFFFFDF, v387));
              }
LABEL_893:
              v32 = (char *)v809;
              v9 = v810;
            }
            else
            {
LABEL_540:
              v817 = v390;
              v818 = v378;
              *(_QWORD *)&v822 = v812;
              *((_QWORD *)&v822 + 1) = v385;
              v392 = 1;
              LODWORD(v819) = 1;
              if (v390)
              {
                v393 = *(_DWORD *)(v390 + 28);
                if (v393 >= 2)
                  v392 = v393;
                else
                  v392 = 1;
              }
              v32 = (char *)v809;
              LODWORD(v821) = v392 | 1;
              HIDWORD(v819) = 0;
              v820 = v377;
              if ((v388 & 0x20) == 0)
              {
                do
                  v394 = __ldaxr(v387);
                while (__stlxr(v394 & 0xFFFFFFDF, v387));
              }
              v395 = v24;
              if (v383)
              {
                v51 = vmEntryToJavaScript(*(_QWORD *)(v391 + 16), (JSC::VM *)v33, (uint64_t)&v817, a4, a5, a6, a7, a8);
                v9 = v810;
                v24 = v395;
LABEL_548:
                v396 = (unsigned int *)(v391 + 8);
                do
                {
                  v397 = __ldaxr(v396);
                  v398 = v397 - 1;
                }
                while (__stlxr(v398, v396));
                if (!v398)
                {
                  atomic_store(1u, (unsigned int *)(v391 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v391 + 32))(v391);
                  v24 = v395;
                }
              }
              else
              {
                v51 = vmEntryToNative(v381, (JSC::VM *)v33, (uint64_t)&v817, a4, a5, a6, a7, a8);
                v9 = v810;
                v24 = v395;
                if (v391)
                  goto LABEL_548;
              }
            }
            v399 = v831;
            if (*((JSC::VM ***)v831 + 11321) == &v831)
            {
              *((_QWORD *)v831 + 11321) = 0;
              if (*((_BYTE *)v399 + 56))
              {
                v540 = v24;
                JSC::VM::executeEntryScopeServicesOnExit(v399, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v24 = v540;
              }
            }
            *(_BYTE *)(v380 + 2552) = 1;
            goto LABEL_54;
          }
          v583 = v24;
          v584 = JSC::Interpreter::checkVMEntryPermission(v28);
        }
        v24 = v583;
        v51 = v584;
        goto LABEL_893;
      }
      v338 = v10;
      v339 = v24;
      v28 = (WTF::Thread *)(*(_QWORD *(**)(uint64_t *__return_ptr, unint64_t))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x38))(&v814, v27);
      v24 = v339;
      v10 = v338;
      v30 = v814;
      if ((_BYTE)v814)
        goto LABEL_28;
    }
    v51 = *(_QWORD *)(v24 + 16);
    goto LABEL_64;
  }
  return v51;
}

uint64_t JSC::JSObject::toPrimitive(JSC::Structure *this, JSC::VM **a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::Structure *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned __int16 *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  double v106;
  const unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  JSC::VM *v129;
  JSC::VM *v130;
  JSC::VM *v131;
  _QWORD *v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  JSC::Structure *v137;
  JSC::Structure *v138;
  _QWORD v139[2];
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  JSC::VM *v144;
  unint64_t v145;
  _DWORD v146[2];
  _QWORD *v147;
  _QWORD v148[15];

  v148[13] = *MEMORY[0x1E0C80C00];
  v11 = a2[7];
  v12 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 2768);
  v144 = v11;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40);
  if (v13)
  {
    if (*(_BYTE *)(v13 + 5) != 1)
    {
      v14 = *(_QWORD *)(v13 + 64);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 88);
        v16 = v11;
        if (v15 > 1)
          goto LABEL_5;
      }
    }
  }
  v136 = 0xFFFFFFFF00000000;
  LOBYTE(v140) = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v19 = (char *)this + 6;
  v18 = *((_BYTE *)this + 6);
  v138 = 0;
  memset(v139, 0, 13);
  v137 = this;
  v17 = v12 >> 4;
  v20 = (uint64_t)this;
  if ((v18 & 8) == 0)
  {
    v21 = this;
    do
    {
      v22 = *(_DWORD *)v21 & 0xFFFFFFFE;
      if (!(_DWORD)v22)
      {
        __break(0xC471u);
        JUMPOUT(0x198A50E40);
      }
      v23 = 16 * v22;
      if ((_DWORD)v17 && (v17 & ~*(_DWORD *)(16 * v22 + 0x20)) == 0)
      {
        v24 = *(_QWORD *)(16 * v22 + 0x58);
        if (v24
          || (v35 = *(_QWORD *)(16 * v22 + 0x40)) != 0
          && (*(_BYTE *)(v35 + 5) == 1 || *(_DWORD *)(v35 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)v23, v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v24))
        {
          if (*(_DWORD *)(v24 + 24))
          {
            v25 = *(_QWORD *)(v24 + 16);
            v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
            v27 = *(unsigned int *)(v24 + 8);
            v28 = *(_DWORD *)(v12 + 16);
            if ((v25 & 1) != 0)
            {
              if ((v28 & 0x20) != 0)
                v28 = *(_DWORD *)(v12 + 32);
              v29 = *(_DWORD *)(v24 + 12);
              v30 = (v28 >> 8) & *(_QWORD *)&v29;
              v31 = *(unsigned __int8 *)(v26 + v30);
              if (!*(_BYTE *)(v26 + v30))
                goto LABEL_22;
              v32 = v26 + v27;
              v33 = 1;
              while (1)
              {
                v34 = *(_QWORD *)(v32 + 8 * (v31 - 1));
                if (v12 == (v34 & 0xFFFFFFFFFFFFLL))
                  break;
                v30 = ((_DWORD)v30 + v33) & v29;
                v31 = *(unsigned __int8 *)(v26 + v30);
                ++v33;
                if (!*(_BYTE *)(v26 + v30))
                  goto LABEL_22;
              }
              a6 = (v34 >> 16) & 0xFF00000000 | HIBYTE(v34);
            }
            else
            {
              if ((v28 & 0x20) != 0)
                v28 = *(_DWORD *)(v12 + 32);
              v36 = *(_DWORD *)(v24 + 12);
              v37 = v36 & (v28 >> 8);
              v38 = *(_DWORD *)(v26 + 4 * v37);
              if (!v38)
                goto LABEL_22;
              v39 = v26 + 4 * v27;
              v40 = 1;
              while (1)
              {
                v41 = (v38 - 1);
                if (v12 == *(_QWORD *)(v39 + 16 * v41))
                  break;
                v37 = (v37 + v40) & v36;
                v38 = *(_DWORD *)(v26 + 4 * v37);
                ++v40;
                if (!v38)
                  goto LABEL_22;
              }
              a6 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              a5 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v42 = (uint64_t)v21 + 16;
                v43 = a6 << 32;
              }
              else
              {
                v42 = *((_QWORD *)v21 + 1) - 8;
                v43 = 0x3F00000000 - (a6 << 32);
              }
              a4 = *(_QWORD *)(v42 + (v43 >> 29));
              if ((a4 & 0xFFFE000000000002) == 0)
              {
                v44 = *(unsigned __int8 *)(a4 + 5);
                if (v44 != 5)
                {
                  if (v44 != 6)
                    goto LABEL_49;
                  v72 = *(_DWORD *)(v23 + 16) & 3;
                  v73 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v75 = *(_QWORD *)(a4 + 24);
                    v74 = *(_QWORD *)(a4 + 32);
                    v134 = *(_QWORD *)(a4 + 8);
                    v135 = v73;
                    LODWORD(v136) = HIDWORD(a6);
                    v138 = v21;
                    goto LABEL_109;
                  }
                  v134 = *(_QWORD *)(a4 + 8);
                  v135 = v73;
                  LODWORD(v136) = HIDWORD(a6);
                  v138 = v21;
LABEL_170:
                  v45 = 1;
                  BYTE1(v139[1]) = 3;
                  if (v72 != 2)
                    LOBYTE(v139[1]) = 1;
                  goto LABEL_57;
                }
                v60 = (unsigned int *)v21;
LABEL_88:
                JSC::JSObject::fillGetterPropertySlot(v60, (uint64_t)a2, (uint64_t)&v134, a4, a5, a6);
LABEL_89:
                v45 = 1;
                goto LABEL_57;
              }
LABEL_49:
              v134 = a4;
              v138 = v21;
LABEL_50:
              v136 = __PAIR64__(a6, a5);
              v45 = 1;
              LOWORD(v139[1]) = 257;
              goto LABEL_57;
            }
          }
        }
      }
LABEL_22:
      if ((*v19 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(v21, v11, v12, &v134) & 1) != 0)
        goto LABEL_89;
      v20 = *(_QWORD *)(v23 + 48);
      if (!v20)
        v20 = *((_QWORD *)v21 + 2);
      if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
      {
        if (!v12)
          goto LABEL_56;
        v46 = *(_DWORD *)(v12 + 16);
        if ((v46 & 0x20) != 0)
          goto LABEL_56;
        v47 = *(_WORD **)(v12 + 8);
        v48 = *(unsigned int *)(v12 + 4);
        if ((v46 & 4) == 0)
        {
          if ((_DWORD)v48)
          {
            v49 = (unsigned __int16)*v47 - 48;
            if (v49 <= 9 && (*v47 != 48 || v48 <= 1))
            {
              v56 = v47 + 1;
              v57 = v48 - 1;
              while (v57)
              {
                if (v49 > 0x19999999)
                  goto LABEL_56;
                v58 = *v56 - 48;
                if (v58 > 9)
                  goto LABEL_56;
                v45 = 0;
                v59 = __CFADD__(v58, 10 * v49);
                v49 = v58 + 10 * (_DWORD)v49;
                ++v56;
                --v57;
                if (v59)
                  goto LABEL_57;
              }
              goto LABEL_235;
            }
          }
          goto LABEL_56;
        }
        if (!(_DWORD)v48)
          goto LABEL_56;
        v49 = *(unsigned __int8 *)v47 - 48;
        if (v49 > 9 || v48 >= 2 && *(_BYTE *)v47 == 48)
          goto LABEL_56;
        v108 = (unsigned __int8 *)v47 + 1;
        v109 = v48 - 1;
        while (v109)
        {
          if (v49 > 0x19999999)
            goto LABEL_56;
          v110 = *v108 - 48;
          if (v110 > 9)
            goto LABEL_56;
          v45 = 0;
          v59 = __CFADD__(v110, 10 * v49);
          v49 = v110 + 10 * (_DWORD)v49;
          ++v108;
          --v109;
          if (v59)
            goto LABEL_57;
        }
LABEL_235:
        if ((_DWORD)v49 == -1)
        {
LABEL_56:
          v45 = 0;
          goto LABEL_57;
        }
        v17 = (uint64_t)this;
        v130 = a2[7];
        while (2)
        {
          v111 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
          v112 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, unint64_t *))(16
                                                                                             * *(unsigned int *)(v111 + 0x4C)
                                                                                             + 0x70))(v17, a2, v49, &v134);
          v114 = v112;
          if (*((_DWORD *)v130 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v130, v113, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((hasExceptionsAfterHandlingTraps | v114) & 1) != 0)
            {
LABEL_249:
              v45 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_57;
            }
          }
          else if ((v112 & 1) != 0)
          {
            goto LABEL_89;
          }
          if (BYTE2(v139[1]) == 3)
          {
            if (BYTE4(v139[1]))
              goto LABEL_56;
            v115 = *(unsigned __int8 *)(v17 + 5);
            if (v115 != 61)
              goto LABEL_241;
          }
          else
          {
            v115 = *(unsigned __int8 *)(v17 + 5);
            if (v115 == 61)
            {
              if (BYTE2(v139[1]) == 1)
                goto LABEL_56;
            }
            else
            {
LABEL_241:
              if ((v115 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v17, v113, (uint64_t)a3, a4, a5, a6, a7, a8) <= v49)
              {
                goto LABEL_56;
              }
            }
          }
          if ((*(_WORD *)(v111 + 12) & 0x800) == 0 || BYTE2(v139[1]) == 3)
          {
            v116 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
            if (!v116)
              v116 = *(_QWORD *)(v17 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v116 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v17, a2);
            }
            else
            {
              v116 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
              if (!v116)
                v116 = *(_QWORD *)(v17 + 16);
            }
            if (*((_DWORD *)v130 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v130, v113, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_56;
            }
          }
          if ((v116 & 0xFFFE000000000002) != 0)
            goto LABEL_56;
          v45 = 0;
          v17 = v116;
          if (*(unsigned __int8 *)(v116 + 5) <= 0x16u)
            goto LABEL_57;
          continue;
        }
      }
      v19 = (_BYTE *)(v20 + 6);
      v21 = (JSC::Structure *)v20;
    }
    while ((*(_BYTE *)(v20 + 6) & 8) == 0);
  }
  if (v12)
  {
    v77 = *(_DWORD *)(v12 + 16);
    if ((v77 & 0x20) == 0)
    {
      v78 = *(_BYTE **)(v12 + 8);
      v79 = *(unsigned int *)(v12 + 4);
      if ((v77 & 4) != 0)
      {
        if ((_DWORD)v79)
        {
          v80 = *v78 - 48;
          if (v80 <= 9 && (v79 < 2 || *v78 != 48))
          {
            v119 = v78 + 1;
            v120 = v79 - 1;
            while (v120)
            {
              if (v80 <= 0x19999999)
              {
                v121 = *v119 - 48;
                if (v121 <= 9)
                {
                  v59 = __CFADD__(v121, 10 * v80);
                  v80 = v121 + 10 * (_DWORD)v80;
                  ++v119;
                  --v120;
                  if (!v59)
                    continue;
                }
              }
              goto LABEL_123;
            }
LABEL_282:
            if ((_DWORD)v80 != -1)
            {
              v131 = a2[7];
              v17 = (uint64_t)this;
              while (1)
              {
                v122 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
                v123 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, unint64_t *))(16 * *(unsigned int *)(v122 + 0x4C) + 0x70))(v17, a2, v80, &v134);
                v125 = v123;
                if (*((_DWORD *)v131 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v131, v124, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v125) & 1) != 0)
                    goto LABEL_249;
                }
                else if ((v123 & 1) != 0)
                {
                  goto LABEL_89;
                }
                if (BYTE2(v139[1]) == 3)
                {
                  if (BYTE4(v139[1]))
                    goto LABEL_56;
                  v126 = *(unsigned __int8 *)(v17 + 5);
                  if (v126 == 61)
                    goto LABEL_289;
                }
                else
                {
                  v126 = *(unsigned __int8 *)(v17 + 5);
                  if (v126 == 61)
                  {
                    if (BYTE2(v139[1]) == 1)
                      goto LABEL_56;
                    goto LABEL_289;
                  }
                }
                if ((v126 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v17, v124, (uint64_t)a3, a4, a5, a6, a7, a8) <= v80)
                {
                  goto LABEL_56;
                }
LABEL_289:
                if ((*(_WORD *)(v122 + 12) & 0x800) == 0 || BYTE2(v139[1]) == 3)
                {
                  v127 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
                  if (!v127)
                    v127 = *(_QWORD *)(v17 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v127 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v17, a2);
                  }
                  else
                  {
                    v127 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
                    if (!v127)
                      v127 = *(_QWORD *)(v17 + 16);
                  }
                  if (*((_DWORD *)v131 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v131, v124, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_56;
                  }
                }
                if ((v127 & 0xFFFE000000000002) != 0)
                  goto LABEL_56;
                v45 = 0;
                v17 = v127;
                if (*(unsigned __int8 *)(v127 + 5) <= 0x16u)
                  goto LABEL_57;
              }
            }
          }
        }
      }
      else if ((_DWORD)v79)
      {
        v80 = *(unsigned __int16 *)v78 - 48;
        if (v80 <= 9 && (*(_WORD *)v78 != 48 || v79 <= 1))
        {
          v93 = (unsigned __int16 *)(v78 + 2);
          v94 = v79 - 1;
          while (v94)
          {
            if (v80 <= 0x19999999)
            {
              v95 = *v93 - 48;
              if (v95 <= 9)
              {
                v59 = __CFADD__(v95, 10 * v80);
                v80 = v95 + 10 * (_DWORD)v80;
                ++v93;
                --v94;
                if (!v59)
                  continue;
              }
            }
            goto LABEL_123;
          }
          goto LABEL_282;
        }
      }
    }
  }
LABEL_123:
  v129 = a2[7];
  while (1)
  {
    v81 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v20 + 6) & 8) == 0)
      break;
    v99 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, unint64_t *))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(v20, a2, v12, &v134);
    v100 = v99;
    if (*((_DWORD *)v129 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v129, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v100) & 1) != 0)
        goto LABEL_249;
    }
    else if ((v99 & 1) != 0)
    {
      goto LABEL_89;
    }
    if (BYTE2(v139[1]) == 3)
    {
      if (BYTE4(v139[1]))
        goto LABEL_56;
      v101 = *(unsigned __int8 *)(v20 + 5);
      if (v101 != 61)
      {
LABEL_197:
        if (!v12)
          goto LABEL_130;
        if ((v101 - 50) < 0xFFFFFFF5)
          goto LABEL_130;
        v102 = *(_DWORD *)(v12 + 16);
        if ((v102 & 0x20) != 0)
          goto LABEL_130;
        v103 = *(unsigned int *)(v12 + 4);
        if (!(_DWORD)v103)
          goto LABEL_130;
        v104 = *(unsigned __int8 **)(v12 + 8);
        if ((v102 & 4) == 0)
        {
          v105 = *(unsigned __int16 *)v104;
          if ((_DWORD)v103 == 1)
            goto LABEL_203;
          if (v105 == 45)
          {
            v105 = *((unsigned __int16 *)v104 + 1);
            goto LABEL_210;
          }
          if ((v105 - 48) >= 0xA && ((_DWORD)v103 != 8 || v105 != 73))
          {
LABEL_221:
            if ((_DWORD)v103 != 3 || v105 != 78)
              goto LABEL_130;
          }
LABEL_214:
          v128 = v128 & 0xFFFFFF0000000000 | v103 | ((unint64_t)((v102 >> 2) & 1) << 32);
          JSC::jsToNumber(v104, v128);
          WTF::numberToString(&v145, v106);
          if (WTF::equal(v12, (unint64_t)&v145, v107))
            goto LABEL_56;
          goto LABEL_130;
        }
        v105 = *v104;
        if ((_DWORD)v103 == 1)
        {
LABEL_203:
          if ((v105 - 48) < 0xA)
            goto LABEL_56;
          goto LABEL_130;
        }
        if (v105 == 45)
        {
          v105 = v104[1];
LABEL_210:
          if ((v105 - 48) < 0xA)
          {
            if ((_DWORD)v103 == 2)
              goto LABEL_56;
            goto LABEL_214;
          }
          if ((_DWORD)v103 != 9)
            goto LABEL_130;
        }
        else
        {
          if ((v105 - 48) < 0xA)
            goto LABEL_214;
          if ((_DWORD)v103 != 8)
            goto LABEL_221;
        }
        if (v105 != 73)
          goto LABEL_130;
        goto LABEL_214;
      }
    }
    else
    {
      v101 = *(unsigned __int8 *)(v20 + 5);
      if (v101 != 61)
        goto LABEL_197;
      if (BYTE2(v139[1]) == 1)
        goto LABEL_56;
    }
LABEL_130:
    if ((*(_WORD *)(v81 + 12) & 0x800) != 0)
    {
      v84 = *(_DWORD *)v20;
      if (BYTE2(v139[1]) != 3)
      {
        v98 = 16 * (v84 & 0xFFFFFFFE);
        if ((*(_WORD *)(v98 + 12) & 0x800) != 0)
        {
          v85 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v98 + 76) + 0xB0))(v20, a2);
        }
        else
        {
          v85 = *(_QWORD *)(v98 + 48);
          if (!v85)
            v85 = *(_QWORD *)(v20 + 16);
        }
        if (*((_DWORD *)v129 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v129, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_56;
        }
        goto LABEL_134;
      }
    }
    else
    {
      v84 = *(_DWORD *)v20;
    }
    v85 = *(_QWORD *)(16 * (v84 & 0xFFFFFFFE) + 0x30);
    if (!v85)
      v85 = *(_QWORD *)(v20 + 16);
LABEL_134:
    if ((v85 & 0xFFFE000000000002) != 0)
      goto LABEL_56;
    v45 = 0;
    v20 = v85;
    if (*(unsigned __int8 *)(v85 + 5) <= 0x16u)
      goto LABEL_57;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)), v129, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v82)|| (v145 = v12, v83 = JSC::PropertyTable::get(v82, (uint64_t *)&v145), a6 = v83, (_DWORD)v83 == -1))
  {
    if ((*(_BYTE *)(v20 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(v20, v129, v12, &v134) & 1) != 0)
      goto LABEL_89;
    goto LABEL_130;
  }
  a5 = HIDWORD(v83);
  if ((int)v83 <= 63)
  {
    v86 = v20 + 16;
    v87 = v83 << 32;
  }
  else
  {
    v86 = *(_QWORD *)(v20 + 8) - 8;
    v87 = 0x3F00000000 - (v83 << 32);
  }
  a4 = *(_QWORD *)(v86 + (v87 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_144:
    v134 = a4;
    v138 = (JSC::Structure *)v20;
    goto LABEL_50;
  }
  v88 = *(unsigned __int8 *)(a4 + 5);
  if (v88 == 5)
  {
    v60 = (unsigned int *)v20;
    goto LABEL_88;
  }
  if (v88 != 6)
    goto LABEL_144;
  v72 = *(_DWORD *)(v81 + 16) & 3;
  v97 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v134 = *(_QWORD *)(a4 + 8);
    v135 = v97;
    LODWORD(v136) = HIDWORD(v83);
    v138 = (JSC::Structure *)v20;
    goto LABEL_170;
  }
  v75 = *(_QWORD *)(a4 + 24);
  v74 = *(_QWORD *)(a4 + 32);
  v134 = *(_QWORD *)(a4 + 8);
  v135 = v97;
  LODWORD(v136) = HIDWORD(v83);
  v138 = (JSC::Structure *)v20;
LABEL_109:
  BYTE1(v139[1]) = 3;
  v45 = 1;
  if (v72 != 2)
    LOBYTE(v139[1]) = 1;
  BYTE3(v139[1]) = 1;
  v142 = v75;
  v143 = v74;
LABEL_57:
  v16 = v144;
  if (*((_DWORD *)v144 + 20))
  {
    v89 = *((_DWORD *)v144 + 20);
    if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v144 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v17 = *((_QWORD *)v16 + 2);
    if (v17)
    {
      v15 = 0;
      goto LABEL_153;
    }
  }
  if (v45)
  {
    if (BYTE1(v139[1]) == 1)
    {
      v15 = v134;
    }
    else
    {
      if (BYTE1(v139[1]) == 2)
        v96 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v134, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        v96 = JSC::PropertySlot::customGetter((uint64_t)&v134, a2[7], (WTF::StringImpl *)v12);
      v15 = v96;
    }
  }
  else
  {
    v15 = 10;
  }
  if (*((_DWORD *)v16 + 20))
  {
    v90 = *((_DWORD *)v16 + 20);
    if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v17 = *((_QWORD *)v16 + 2);
    if (v17)
      goto LABEL_153;
  }
  v50 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v51 = *((_QWORD *)v50 + 8);
  if (!v51 || *(_BYTE *)(v51 + 5) == 1)
  {
    JSC::Structure::allocateRareData(v50, v11, a3, a4, a5, a6, a7, a8);
    v51 = *((_QWORD *)v50 + 8);
  }
  v52 = *(_QWORD *)(v51 + 64);
  if (!v52 || *(_QWORD *)(v52 + 88) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v51, a2, v11, (unint64_t)v50, v15, 3, (uint64_t)&v134, a8);
  if (!*((_DWORD *)v16 + 20))
    goto LABEL_66;
  v91 = *((_DWORD *)v16 + 20);
  if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)v16 + 2);
  if (v17)
LABEL_153:
    v53 = 0;
  else
LABEL_66:
    v53 = 1;
  if (v141)
  {
    v54 = *(_DWORD *)(v140 + 4);
    if (!v54)
    {
      __break(0xC471u);
      JUMPOUT(0x198A50974);
    }
    *(_DWORD *)(v140 + 4) = v54 - 1;
  }
  if (v53)
  {
LABEL_5:
    if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v17 = 0;
      if (*((_DWORD *)v11 + 20))
        goto LABEL_115;
      goto LABEL_72;
    }
    if ((v15 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v134) = 0;
    }
    else
    {
      if (*(_BYTE *)(v15 + 5) == 26)
      {
        v61 = *(_QWORD *)(v15 + 24);
        if ((v61 & 1) != 0)
          v61 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v61 + 5) == 8)
        {
          LOBYTE(v134) = 1;
          v135 = *(_QWORD *)(v61 + 40);
          LOBYTE(v136) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                    + 0x4C));
        }
        else
        {
          LOBYTE(v134) = 2;
          v62 = *(_QWORD *)(v15 + 16);
          v135 = v61;
          v136 = v62;
        }
LABEL_98:
        LOBYTE(v145) = 0;
        v146[1] = 8;
        memset(v148, 0, 72);
        v147 = &v148[1];
        if ((_DWORD)a3 == 1)
        {
          v63 = (uint64_t *)((char *)v11 + 42008);
        }
        else if ((_DWORD)a3)
        {
          v64 = 0;
          if ((_DWORD)a3 != 2)
          {
LABEL_101:
            v148[1] = v64;
            v146[0] = 1;
            v132 = &v148[1];
            v133 = 1;
            v17 = JSC::call(a2, v15, &v134, this, &v132);
            if (*((_DWORD *)v16 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)v65, v66, v67, v68, v69, v70, v71))
            {
              v17 = *((_QWORD *)v16 + 2);
            }
            else if ((v17 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v17 + 5) >= 0x17u)
            {
              v17 = JSC::throwTypeError((unint64_t)a2, &v144, (uint64_t)"Symbol.toPrimitive returned an object", 38);
            }
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v146, v65, v66, v67, v68, v69, v70, v71);
            goto LABEL_71;
          }
          v63 = (uint64_t *)((char *)v11 + 42040);
        }
        else
        {
          v63 = (uint64_t *)((char *)v11 + 41976);
        }
        v64 = *v63;
        goto LABEL_101;
      }
      (*(void (**)(unint64_t *__return_ptr, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(&v134, v15);
      if ((_BYTE)v134)
        goto LABEL_98;
    }
    JSC::throwTypeError((unint64_t)a2, &v144, (uint64_t)"Symbol.toPrimitive is not a function, undefined, or null", 57);
    v17 = *((_QWORD *)v16 + 2);
  }
LABEL_71:
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_72;
LABEL_115:
  v76 = *((_DWORD *)v11 + 20);
  if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*((_QWORD *)v11 + 2))
    return 0;
LABEL_72:
  if (!v17)
    return JSC::JSObject::ordinaryToPrimitive(this, (WTF::Thread *)a2, a3, a4, a5, a6, a7, a8);
  return v17;
}

uint64_t JSC::JSObject::getOwnStaticPropertySlot(unsigned int *a1, JSC::VM *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C);
  if (!(_DWORD)v4 || !a3)
    return 0;
  v9 = 16 * v4;
  while (1)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      if ((*(_BYTE *)((16 * *a1) | 0x12) & 0x40) == 0)
      {
        v11 = *(_DWORD *)(a3 + 16);
        if ((v11 & 0x20) == 0)
        {
          v12 = *(_DWORD *)(v10 + 4) & (v11 >> 8);
          v13 = *(_QWORD *)(v10 + 32);
          v14 = *(unsigned __int16 *)(v13 + 4 * v12);
          if (v14 != 0xFFFF)
          {
            v35 = *(_QWORD *)(v10 + 16);
            while (1)
            {
              v15 = (__int16)v14;
              v16 = (unint64_t *)(*(_QWORD *)(v10 + 24) + 40 * (__int16)v14);
              v17 = v16[1];
              if (!v17)
                goto LABEL_14;
              if (WTF::equalInternal<unsigned char>(a3, *v16, v17 - 1))
                break;
              v13 = *(_QWORD *)(v10 + 32);
LABEL_14:
              v12 = *(__int16 *)(v13 + 4 * v12 + 2);
              if (v12 == -1)
                goto LABEL_5;
              LOWORD(v14) = *(_WORD *)(v13 + 4 * v12);
            }
            v21 = *(_QWORD *)(v10 + 24);
            if (v21)
              break;
          }
        }
      }
    }
LABEL_5:
    v9 = *(_QWORD *)(v9 + 16);
    if (!v9)
      return 0;
  }
  v22 = *(_DWORD *)(v21 + 40 * v15 + 16);
  if ((v22 & 0x3B10) != 0)
  {
    if ((JSC::setUpStaticFunctionSlot(a2, v35, v21 + 40 * v15, a1, a3, a4, v18, v19) & 1) != 0)
      return 1;
    goto LABEL_5;
  }
  if ((v22 & 0x400) != 0)
  {
    v27 = *(_DWORD *)(v21 + 40 * v15 + 16);
    v28 = *(_QWORD *)(v21 + 40 * v15 + 24);
    v29 = v28 == (int)v28;
    v30 = v28 | 0xFFFE000000000000;
    v31 = COERCE__INT64((double)v28) + 0x2000000000000;
    if (v29)
      v31 = v30;
    *(_QWORD *)a4 = v31;
    *(_DWORD *)(a4 + 16) = v27;
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 40 * v15 + 16);
    if ((v22 & 0x8000) != 0)
    {
      v32 = v21 + 40 * v15;
      v34 = *(_QWORD **)(v32 + 24);
      v33 = *(_QWORD *)(v32 + 32);
      *(_QWORD *)a4 = *v34;
      *(_QWORD *)(a4 + 8) = v33;
      *(_DWORD *)(a4 + 16) = v23;
      *(_QWORD *)(a4 + 32) = a1;
      *(_WORD *)(a4 + 48) = 769;
      result = 1;
      *(_BYTE *)(a4 + 51) = 1;
      *(_QWORD *)(a4 + 72) = v35;
      *(_QWORD *)(a4 + 80) = v34;
    }
    else
    {
      v24 = v21 + 40 * v15;
      v26 = *(_QWORD *)(v24 + 24);
      v25 = *(_QWORD *)(v24 + 32);
      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = v25;
      *(_DWORD *)(a4 + 16) = v23;
      *(_QWORD *)(a4 + 32) = a1;
      if ((v22 & 0x4000) != 0)
      {
        *(_WORD *)(a4 + 48) = 769;
        result = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v35;
        *(_QWORD *)(a4 + 80) = 0;
      }
      else
      {
        result = 1;
        *(_WORD *)(a4 + 48) = 769;
      }
    }
  }
  return result;
}

uint64_t JSC::JSObject::hasInstance(unsigned int *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t HasInstanceValueNotFunction;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD v56[4];
  uint64_t v57;
  _BYTE v58[24];
  JSC::VM *v59;

  v11 = *((_QWORD *)a2 + 7);
  v59 = (JSC::VM *)v11;
  if ((a4 & 0xFFFFFFFFFFFFFFF7) != 2 && *((_QWORD *)a2 + 70) != a4)
  {
    JSC::getCallData(a4, (uint64_t)v58);
    if (v58[0])
    {
      LOBYTE(v53) = 0;
      v54 = 0x800000000;
      v55 = (char *)v56 + 8;
      memset(v56, 0, sizeof(v56));
      v57 = 0;
      JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(&v53, a3, v13, v14, v15, v16, v17, v18);
      v50 = v55;
      v51 = v54;
      v52 = JSC::call(a2, a4, v58, a1, &v50);
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v19, v20, v21, v22, v23, v24, v25))
      {
        v33 = 0;
      }
      else
      {
        v33 = JSC::JSValue::toBoolean(&v52, (uint64_t)a2);
      }
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v54, v26, v27, v28, v29, v30, v31, v32);
      return v33;
    }
    HasInstanceValueNotFunction = JSC::createInvalidInstanceofParameterErrorHasInstanceValueNotFunction((uint64_t)a2, (uint64_t)a1);
    goto LABEL_11;
  }
  if ((*(_BYTE *)(16 * (*a1 & 0xFFFFFFFE) + 0xA) & 2) != 0)
  {
    v48 = JSC::JSObject::get(a1, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160), a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v41, v42, v43, v44, v45, v46, v47))
    {
      return 0;
    }
    return JSC::JSObject::defaultHasInstance((unint64_t)a2, a3, v48, v43, v44, v45, v46, v47);
  }
  else
  {
    if ((*(_WORD *)(16 * (*a1 & 0xFFFFFFFE) + 0xC) & 1) == 0)
    {
      HasInstanceValueNotFunction = JSC::createInvalidInstanceofParameterErrorNotFunction((uint64_t)a2, (uint64_t)a1);
LABEL_11:
      JSC::VM::throwException((JSC::VM *)v11, a2, HasInstanceValueNotFunction, v36, v37, v38, v39, v40);
      return 0;
    }
    if ((unint64_t)&v49 < *(_QWORD *)(v11 + 8))
    {
      JSC::throwStackOverflowError((unint64_t)a2, &v59, a3, a4, a5, a6, a7, a8);
      return 0;
    }
    return (*(uint64_t (**)(unsigned int *, JSC::JSGlobalObject *, uint64_t))(16
                                                                                     * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0x88))(a1, a2, a3);
  }
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v11 = *((_QWORD *)a2 + 7);
  v13 = JSC::JSObject::get(a1, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2688), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    return JSC::JSObject::hasInstance(a1, a2, a3, v13, v14, v15, v16, v17);
  v19 = *(_DWORD *)(v11 + 80);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
  {
    v20 = v13;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    v13 = v20;
  }
  if (*(_QWORD *)(v11 + 16))
    return 0;
  else
    return JSC::JSObject::hasInstance(a1, a2, a3, v13, v14, v15, v16, v17);
}

uint64_t JSC::JSObject::defaultHasInstance(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  JSC::VM *v16;

  v8 = *(_QWORD *)(a1 + 56);
  v16 = (JSC::VM *)v8;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  if ((a3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a3 + 5) < 0x17u)
  {
    JSC::throwTypeError(a1, &v16, (uint64_t)"instanceof called on an object with an invalid prototype property.", 67);
    return 0;
  }
  do
  {
    if ((*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      v11 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xB0))(a2, a1);
    }
    else
    {
      v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
      if (!v11)
        v11 = *(_QWORD *)(a2 + 16);
    }
    if (*(_DWORD *)(v8 + 80))
    {
      v14 = *(_DWORD *)(v8 + 80);
      if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
      {
        v15 = v11;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v11 = v15;
      }
      v12 = 0;
      if (*(_QWORD *)(v8 + 16) || (v11 & 0xFFFE000000000002) != 0)
        return v12;
    }
    else if ((v11 & 0xFFFE000000000002) != 0)
    {
      return 0;
    }
    if (*(unsigned __int8 *)(v11 + 5) < 0x17u)
      return 0;
    a2 = v11;
  }
  while (v11 != a3);
  return 1;
}

uint64_t JSC::objectPrivateFuncInstanceOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (JSC::JSObject::defaultHasInstance((unint64_t)this, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), a4, a5, a6, a7, a8))return 7;
  else
    return 6;
}

uint64_t JSC::JSObject::getPropertyNames(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v8;
  int i;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;

  v8 = *(JSC::VM **)(a2 + 56);
  v19 = v8;
  for (i = 40000; ; --i)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x78))(a1, a2, a3, a4);
    if (*((_DWORD *)v8 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v8, v11, v12, v13, v14, v15, v16, v17);
      if ((result & 1) != 0)
        break;
    }
    if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(a1, a2);
      v18 = result;
    }
    else
    {
      v18 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
      if (!v18)
        v18 = *(_QWORD *)(a1 + 16);
    }
    if (*((_DWORD *)v8 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v8, v11, v12, v13, v14, v15, v16, v17);
      if ((result & 1) != 0)
        break;
    }
    if (v18 == 2)
      break;
    if (!i)
      return JSC::throwStackOverflowError(a2, &v19, v12, v13, v14, v15, v16, v17);
    a1 = v18;
  }
  return result;
}

void JSC::JSObject::getOwnIndexedPropertyNames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t k;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t *v45;
  int *v46;
  int v47;
  uint64_t v48;
  unint64_t j;
  WTF *v50;
  uint64_t v51;
  int v52;

  if ((*(_BYTE *)(a3 + 24) & 2) != 0 && (*(_BYTE *)(a1 + 4) & 0xFu) >= 2)
  {
    switch(*(_BYTE *)(a1 + 4) & 0xF)
    {
      case 3:
        return;
      case 4:
      case 5:
      case 8:
      case 9:
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(unsigned int *)(v9 - 8);
        if ((_DWORD)v10)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)(v9 + 8 * i))
              JSC::PropertyNameArray::add((uint64_t ***)a3, i, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8);
          }
        }
        return;
      case 6:
      case 7:
        v48 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 8);
        if ((_DWORD)v48)
        {
          for (j = 0; j != v48; ++j)
            JSC::PropertyNameArray::add((uint64_t ***)a3, j, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8);
        }
        return;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        v12 = a4;
        v13 = *(_QWORD **)(a1 + 8);
        v14 = *((_DWORD *)v13 - 2);
        v15 = *((_DWORD *)v13 - 1);
        if (v15 >= v14)
          v16 = v14;
        else
          v16 = v15;
        if ((_DWORD)v16)
        {
          for (k = 0; k != v16; ++k)
          {
            if (v13[k + 2])
              JSC::PropertyNameArray::add((uint64_t ***)a3, k, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8);
          }
        }
        v18 = *v13;
        if (!*v13)
          return;
        v50 = 0;
        v51 = 0;
        v19 = *(_QWORD *)(v18 + 8);
        if (!v19)
          goto LABEL_21;
        v29 = *(unsigned int *)(v19 - 12);
        if (!(_DWORD)v29)
          goto LABEL_21;
        if (v29 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x198A51BF0);
        }
        v30 = (WTF *)WTF::fastMalloc((WTF *)(4 * v29));
        LODWORD(v51) = v29;
        v50 = v30;
        v38 = *(_QWORD *)(v18 + 8);
        if (!v38 || !*(_DWORD *)(v38 - 12))
          goto LABEL_49;
        v39 = *(unsigned int *)(v38 - 4);
        if ((_DWORD)v39)
        {
          v40 = 24 * v39;
          v41 = *(uint64_t **)(v18 + 8);
          while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v41 += 3;
            v40 -= 24;
            if (!v40)
              goto LABEL_49;
          }
        }
        else
        {
          v41 = *(uint64_t **)(v18 + 8);
        }
        v42 = (uint64_t *)(v38 + 24 * v39);
        if (v42 == v41)
          goto LABEL_49;
        v43 = 0;
        v44 = *v41;
LABEL_38:
        if (!v12 || (v41[2] & 4) == 0)
        {
          v52 = v44;
          if (v43 == (_DWORD)v51)
          {
            v45 = v42;
            v46 = (int *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, v43 + 1, (unint64_t)&v52);
            v30 = v50;
            v47 = *v46;
            v42 = v45;
            *((_DWORD *)v50 + HIDWORD(v51)) = v47;
          }
          else
          {
            *((_DWORD *)v30 + v43) = v44;
          }
          v43 = ++HIDWORD(v51);
        }
        while (1)
        {
          v41 += 3;
          if (v41 == v42)
            break;
          v44 = *v41;
          if ((unint64_t)*v41 < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v41 != v42)
              goto LABEL_38;
            break;
          }
        }
        if (v51 <= v43)
          goto LABEL_21;
        if (!v43)
        {
          if (!v30)
            goto LABEL_21;
LABEL_49:
          v50 = 0;
          LODWORD(v51) = 0;
          WTF::fastFree((unint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
          goto LABEL_21;
        }
        LODWORD(v51) = v43;
        v50 = (WTF *)WTF::fastRealloc((unint64_t)v30, 4 * v43, v32, v33, v34, v35, v36, v37);
LABEL_21:
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        if (HIDWORD(v51))
        {
          v27 = 0;
          do
            JSC::PropertyNameArray::add((uint64_t ***)a3, *((unsigned int *)v50 + v27++), v21, v22, v23, v24, v25, v26);
          while (v27 < HIDWORD(v51));
        }
        v28 = v50;
        if (v50)
        {
          v50 = 0;
          LODWORD(v51) = 0;
          WTF::fastFree((unint64_t)v28, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A51BC8);
    }
  }
}

void JSC::JSObject::getOwnNonIndexPropertyNames(_DWORD *a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4)
{
  JSC::VM *v7;
  WTF::AtomStringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::Structure *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::VM *v89;
  WTF::StringImpl *v90[2];
  char v91;
  uint64_t v92;
  WTF::StringImpl *v93;

  v7 = *(JSC::VM **)(a2 + 56);
  (*(void (**)(void))(16 * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C) + 0x80))();
  if (!*((_DWORD *)v7 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v7, (uint64_t)v8, (uint64_t)v9, v10, v11, v12, v13, v14))
  {
    v15 = (JSC::Structure *)(16 * (*a1 & 0xFFFFFFFE));
    if ((*((_BYTE *)v15 + 18) & 0x40) != 0 || (v16 = *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C), !(_DWORD)v16))
    {
LABEL_55:
      JSC::Structure::getPropertyNamesFromStructure(v15, v7, a3, a4, v11, v12, v13, v14);
      return;
    }
    v17 = 16 * v16;
    while (1)
    {
      v18 = *(unsigned int **)(v17 + 24);
      if (v18)
      {
        v70 = *v18;
        if ((int)v70 < 1)
        {
          LODWORD(v31) = 0;
        }
        else
        {
          v31 = 0;
          v71 = (uint64_t *)(*((_QWORD *)v18 + 3) + 8);
          while (1)
          {
            v72 = *v71;
            v71 += 5;
            if (v72)
              break;
            if (v70 == ++v31)
            {
              LODWORD(v31) = *v18;
              break;
            }
          }
        }
        if ((_DWORD)v70 != (_DWORD)v31)
          break;
      }
LABEL_6:
      v17 = *(_QWORD *)(v17 + 16);
      if (!v17)
      {
        v15 = (JSC::Structure *)(16 * (*a1 & 0xFFFFFFFE));
        goto LABEL_55;
      }
    }
    v73 = (_QWORD *)(a3 + 8);
    v34 = v31;
    v89 = v7;
    while (1)
    {
      v19 = *((_QWORD *)v18 + 3);
      if ((_DWORD)a4 && (*(_BYTE *)(v19 + 40 * v34 + 16) & 4) != 0)
        goto LABEL_30;
      v20 = 40 * v34;
      v21 = *(WTF::StringImpl **)(v19 + v20);
      if (v21)
      {
        v74 = strlen(*(const char **)(v19 + v20));
        WTF::AtomStringImpl::add((uint64_t)v21, v74, v75, v76, v77, v78, v79, v90);
        v21 = v90[0];
        if (v90[0])
        {
          v80 = *(_DWORD *)v90[0];
          *(_DWORD *)v90[0] += 2;
          if (v80)
          {
            *(_DWORD *)v21 = v80;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
            WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
          }
        }
      }
      v93 = v21;
      v22 = *((_DWORD *)v21 + 4);
      if ((v22 & 0x20) != 0)
      {
        if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v21 + 36) & 4) != 0)
        {
LABEL_54:
          v7 = v89;
LABEL_28:
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::~StringImpl(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
          goto LABEL_30;
        }
      }
      else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
      {
        goto LABEL_54;
      }
      v23 = *(_QWORD *)a3;
      v24 = *(unsigned int *)(*(_QWORD *)a3 + 20);
      if (v24 <= 0x13)
      {
        if (!(_DWORD)v24)
        {
LABEL_42:
          v25 = v21;
LABEL_17:
          if ((v22 & 0x20) == 0)
          {
            if ((v22 & 0x10) != 0)
            {
              *(_DWORD *)v25 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v25, v9, v10, v11, v12, v13, v14, v90);
              v25 = v90[0];
            }
            v26 = *(_DWORD *)v25;
            *(_DWORD *)v25 += 2;
            if (v26)
            {
LABEL_21:
              *(_DWORD *)v25 = v26;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v25, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
            }
            v27 = (uint64_t *)(v23 + 8);
            v90[0] = v25;
            v28 = *(unsigned int *)(v23 + 20);
            if ((_DWORD)v28 == *(_DWORD *)(v23 + 16))
            {
              v63 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)v90);
              v28 = *(unsigned int *)(v23 + 20);
              v64 = *(_QWORD *)(v23 + 8);
              v65 = *v63;
              *v63 = 0;
              *(_QWORD *)(v64 + 8 * v28) = v65;
            }
            else
            {
              v29 = *v27;
              v90[0] = 0;
              *(_QWORD *)(v29 + 8 * v28) = v25;
            }
            *(_DWORD *)(v23 + 20) = v28 + 1;
            v30 = v90[0];
            v90[0] = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::~StringImpl(v30, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
                WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
              }
              else
              {
                *(_DWORD *)v30 -= 2;
              }
            }
            goto LABEL_27;
          }
          v26 = *(_DWORD *)v25 + 2;
          goto LABEL_21;
        }
        v38 = *(WTF::StringImpl ***)(v23 + 8);
        while (*v38 != v21)
        {
          ++v38;
          if (!--v24)
            goto LABEL_42;
        }
      }
      else
      {
        if (!*v73 || !*(_DWORD *)(*v73 - 12))
        {
          v35 = *(uint64_t **)(v23 + 8);
          v36 = 8 * v24;
          do
          {
            v37 = *v35++;
            v92 = v37;
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v92, v10, v11, v12, v13, v14, (uint64_t)v90);
            v36 -= 8;
          }
          while (v36);
        }
        WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v93, v10, v11, v12, v13, v14, (uint64_t)v90);
        if (v91)
        {
          v25 = v93;
          v23 = *(_QWORD *)a3;
          v22 = *((_DWORD *)v93 + 4);
          goto LABEL_17;
        }
      }
LABEL_27:
      v7 = v89;
      if (v21)
        goto LABEL_28;
LABEL_30:
      LODWORD(v31) = v31 + 1;
      v32 = (int)*v18;
      if ((int)v31 < (int)v32)
      {
        v33 = *((_QWORD *)v18 + 3);
        if (!*(_QWORD *)(v33 + 40 * (int)v31 + 8))
        {
          v66 = (int)v31 + 1;
          v67 = (uint64_t *)(v33 + 40 * (int)v31 + 48);
          do
          {
            v68 = v66;
            if (v32 == v66)
              break;
            v69 = *v67;
            v67 += 5;
            ++v66;
          }
          while (!v69);
          LODWORD(v31) = v68;
        }
      }
      v34 = v31;
      if ((_DWORD)v32 == (_DWORD)v31)
        goto LABEL_6;
    }
  }
}

void JSC::PropertyNameArray::add(uint64_t ***this, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  int v43;
  unint64_t v44;
  WTF::StringImpl **v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76[2];
  char v77;
  WTF::StringImpl *v78;

  JSC::Identifier::from(this[2], a2, a3, a4, a5, a6, a7, a8, (int **)&v75);
  v16 = v75;
  v78 = v75;
  v17 = *((_DWORD *)v75 + 4);
  if ((v17 & 0x20) != 0)
  {
    if (((_BYTE)this[3] & 1) == 0 || *((_BYTE *)this + 25) && (*((_BYTE *)v75 + 36) & 4) != 0)
      goto LABEL_15;
  }
  else if (((_BYTE)this[3] & 2) == 0)
  {
    goto LABEL_15;
  }
  v18 = *this;
  v19 = *((unsigned int *)*this + 5);
  if (v19 > 0x13)
  {
    v21 = (uint64_t *)(this + 1);
    v20 = this[1];
    if (v20 && *((_DWORD *)v20 - 3))
    {
LABEL_6:
      WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)this + 1, (uint64_t *)&v78, v11, v12, v13, v14, v15, (uint64_t)v76);
      if (!v77)
        goto LABEL_15;
      v16 = v78;
      v18 = *this;
      v17 = *((_DWORD *)v78 + 4);
LABEL_8:
      if ((v17 & 0x20) != 0)
      {
        v22 = *(_DWORD *)v16 + 2;
      }
      else
      {
        if ((v17 & 0x10) != 0)
        {
          *(_DWORD *)v16 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(this[2][5239], (unint64_t)v16, v10, v11, v12, v13, v14, v15, v76);
          v16 = v76[0];
        }
        v22 = *(_DWORD *)v16;
        *(_DWORD *)v16 += 2;
        if (!v22)
        {
          WTF::StringImpl::~StringImpl(v16, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
LABEL_13:
          v76[0] = v16;
          v23 = *((unsigned int *)v18 + 5);
          if ((_DWORD)v23 == *((_DWORD *)v18 + 4))
          {
            v62 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v18 + 1), v23 + 1, (unint64_t)v76);
            v63 = *((unsigned int *)v18 + 5);
            v64 = v18[1];
            v65 = *v62;
            *v62 = 0;
            v64[v63] = v65;
            v66 = v76[0];
            *((_DWORD *)v18 + 5) = v63 + 1;
            v76[0] = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
              {
                WTF::StringImpl::~StringImpl(v66, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
                WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
              }
              else
              {
                *(_DWORD *)v66 -= 2;
              }
            }
          }
          else
          {
            v18[1][v23] = (uint64_t)v16;
            *((_DWORD *)v18 + 5) = v23 + 1;
          }
          goto LABEL_15;
        }
      }
      *(_DWORD *)v16 = v22;
      goto LABEL_13;
    }
    v25 = v18[1];
    v26 = &v25[v19];
    while (1)
    {
      v27 = *v25;
      v28 = *v21;
      if (*v21
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)this + 1, 8uLL, 0, v11, v12, v13, v14, v15), (v28 = *v21) != 0))
      {
        v29 = *(_DWORD *)(v28 - 8);
      }
      else
      {
        v29 = 0;
      }
      v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v29 & ((v32 >> 31) ^ v32);
      v34 = (uint64_t *)(v28 + 8 * v33);
      v35 = *v34;
      if (*v34)
      {
        v42 = 0;
        v43 = 1;
        while (v35 != v27)
        {
          if (v35 == -1)
            v42 = v34;
          v33 = (v33 + v43) & v29;
          v34 = (uint64_t *)(v28 + 8 * v33);
          v35 = *v34;
          ++v43;
          if (!*v34)
          {
            if (v42)
            {
              *v42 = 0;
              --*(_DWORD *)(*v21 - 16);
              v34 = v42;
            }
            goto LABEL_23;
          }
        }
        goto LABEL_29;
      }
LABEL_23:
      *v34 = v27;
      v36 = *v21;
      v37 = *v21 ? *(_DWORD *)(v36 - 12) + 1 : 1;
      *(_DWORD *)(v36 - 12) = v37;
      v38 = *v21;
      v39 = *v21 ? *(_DWORD *)(v38 - 12) : 0;
      v40 = (*(_DWORD *)(v38 - 16) + v39);
      v41 = *(unsigned int *)(v38 - 4);
      if (v41 > 0x400)
        break;
      if (3 * v41 <= 4 * v40)
      {
        if (!(_DWORD)v41)
        {
          v44 = 8;
LABEL_42:
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)this + 1, v44, (uint64_t)v34, v11, v12, v13, v14, v15);
          goto LABEL_29;
        }
LABEL_46:
        v44 = ((_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41)));
        goto LABEL_42;
      }
LABEL_29:
      if (++v25 == v26)
        goto LABEL_6;
    }
    if (v41 > 2 * v40)
      goto LABEL_29;
    goto LABEL_46;
  }
  if (!(_DWORD)v19)
    goto LABEL_8;
  v45 = (WTF::StringImpl **)v18[1];
  while (*v45 != v75)
  {
    ++v45;
    if (!--v19)
      goto LABEL_8;
  }
LABEL_15:
  v24 = v75;
  v75 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

double JSC::JSObject::toNumber(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double result;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v20;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v17 = JSC::JSObject::toPrimitive(this, (JSC::VM **)a2, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v20 = v17;
  if (!*((_DWORD *)v9 + 20)
    || (hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9, v10, v11, v12, v13, v14, v15, v16), result = 0.0, !hasExceptionsAfterHandlingTraps))
  {
    if (v17 >= 0xFFFE000000000000)
    {
      return (double)(int)v17;
    }
    else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, a2);
    }
    else
    {
      *(_QWORD *)&result = v17 - 0x2000000000000;
    }
  }
  return result;
}

uint64_t JSC::JSObject::toString(JSC::JSObject *this, JSC::JSGlobalObject *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  _BYTE *v25;
  uint64_t v26;
  JSC::JSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  _WORD *v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Structure *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  unsigned int *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  double v110;
  const unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  JSC::VM *v135;
  _QWORD *v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  JSC::JSObject *v141;
  JSC::JSObject *v142;
  _QWORD v143[2];
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  JSC::VM *v148;
  unint64_t v149;
  _QWORD v150[17];

  v150[15] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2768);
  v148 = (JSC::VM *)v10;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40);
  if (v12)
  {
    if (*(_BYTE *)(v12 + 5) != 1)
    {
      v13 = *(_QWORD *)(v12 + 64);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 88);
        v15 = (JSC::VM *)v10;
        if (v14 > 1)
          goto LABEL_5;
      }
    }
  }
  v140 = 0xFFFFFFFF00000000;
  LOBYTE(v144) = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v25 = (char *)this + 6;
  v24 = *((_BYTE *)this + 6);
  v142 = 0;
  memset(v143, 0, 13);
  v141 = this;
  v16 = v11 >> 4;
  v26 = (uint64_t)this;
  if ((v24 & 8) == 0)
  {
    v27 = this;
    do
    {
      v28 = *(_DWORD *)v27 & 0xFFFFFFFE;
      if (!(_DWORD)v28)
      {
        __break(0xC471u);
        JUMPOUT(0x198A5311CLL);
      }
      v29 = 16 * v28;
      if ((_DWORD)v16 && (v16 & ~*(_DWORD *)(16 * v28 + 0x20)) == 0)
      {
        v30 = *(_QWORD *)(16 * v28 + 0x58);
        if (v30
          || (v41 = *(_QWORD *)(16 * v28 + 0x40)) != 0
          && (*(_BYTE *)(v41 + 5) == 1 || *(_DWORD *)(v41 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)v29, (JSC::VM *)v10, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v30))
        {
          if (*(_DWORD *)(v30 + 24))
          {
            v31 = *(_QWORD *)(v30 + 16);
            v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
            v33 = *(unsigned int *)(v30 + 8);
            v34 = *(_DWORD *)(v11 + 16);
            if ((v31 & 1) != 0)
            {
              if ((v34 & 0x20) != 0)
                v34 = *(_DWORD *)(v11 + 32);
              v35 = *(_DWORD *)(v30 + 12);
              v36 = (v34 >> 8) & *(_QWORD *)&v35;
              v37 = *(unsigned __int8 *)(v32 + v36);
              if (!*(_BYTE *)(v32 + v36))
                goto LABEL_27;
              v38 = v32 + v33;
              v39 = 1;
              while (1)
              {
                v40 = *(_QWORD *)(v38 + 8 * (v37 - 1));
                if (v11 == (v40 & 0xFFFFFFFFFFFFLL))
                  break;
                v36 = ((_DWORD)v36 + v39) & v35;
                v37 = *(unsigned __int8 *)(v32 + v36);
                ++v39;
                if (!*(_BYTE *)(v32 + v36))
                  goto LABEL_27;
              }
              a6 = (v40 >> 16) & 0xFF00000000 | HIBYTE(v40);
            }
            else
            {
              if ((v34 & 0x20) != 0)
                v34 = *(_DWORD *)(v11 + 32);
              v42 = *(_DWORD *)(v30 + 12);
              v43 = v42 & (v34 >> 8);
              v44 = *(_DWORD *)(v32 + 4 * v43);
              if (!v44)
                goto LABEL_27;
              v45 = v32 + 4 * v33;
              v46 = 1;
              while (1)
              {
                v47 = (v44 - 1);
                if (v11 == *(_QWORD *)(v45 + 16 * v47))
                  break;
                v43 = (v43 + v46) & v42;
                v44 = *(_DWORD *)(v32 + 4 * v43);
                ++v46;
                if (!v44)
                  goto LABEL_27;
              }
              a6 = *(unsigned int *)(v45 + 16 * v47 + 8) | ((unint64_t)*(unsigned __int8 *)(v45 + 16 * v47 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              a5 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v48 = (uint64_t)v27 + 16;
                v49 = a6 << 32;
              }
              else
              {
                v48 = *((_QWORD *)v27 + 1) - 8;
                v49 = 0x3F00000000 - (a6 << 32);
              }
              a4 = *(_QWORD *)(v48 + (v49 >> 29));
              if ((a4 & 0xFFFE000000000002) == 0)
              {
                v50 = *(unsigned __int8 *)(a4 + 5);
                if (v50 != 5)
                {
                  if (v50 != 6)
                    goto LABEL_55;
                  v75 = *(_DWORD *)(v29 + 16) & 3;
                  v76 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v78 = *(_QWORD *)(a4 + 24);
                    v77 = *(_QWORD *)(a4 + 32);
                    v138 = *(_QWORD *)(a4 + 8);
                    v139 = v76;
                    LODWORD(v140) = HIDWORD(a6);
                    v142 = v27;
                    goto LABEL_109;
                  }
                  v138 = *(_QWORD *)(a4 + 8);
                  v139 = v76;
                  LODWORD(v140) = HIDWORD(a6);
                  v142 = v27;
LABEL_173:
                  v51 = 1;
                  BYTE1(v143[1]) = 3;
                  if (v75 != 2)
                    LOBYTE(v143[1]) = 1;
                  goto LABEL_63;
                }
                v65 = (unsigned int *)v27;
LABEL_91:
                JSC::JSObject::fillGetterPropertySlot(v65, (uint64_t)a2, (uint64_t)&v138, a4, a5, a6);
LABEL_92:
                v51 = 1;
                goto LABEL_63;
              }
LABEL_55:
              v138 = a4;
              v142 = v27;
LABEL_56:
              v140 = __PAIR64__(a6, a5);
              v51 = 1;
              LOWORD(v143[1]) = 257;
              goto LABEL_63;
            }
          }
        }
      }
LABEL_27:
      if ((*v25 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v27, (JSC::VM *)v10, v11, (uint64_t)&v138) & 1) != 0)
      {
        goto LABEL_92;
      }
      v26 = *(_QWORD *)(v29 + 48);
      if (!v26)
        v26 = *((_QWORD *)v27 + 2);
      if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
      {
        if (!v11)
          goto LABEL_62;
        v52 = *(_DWORD *)(v11 + 16);
        if ((v52 & 0x20) != 0)
          goto LABEL_62;
        v53 = *(_WORD **)(v11 + 8);
        v54 = *(unsigned int *)(v11 + 4);
        if ((v52 & 4) == 0)
        {
          if ((_DWORD)v54)
          {
            v55 = (unsigned __int16)*v53 - 48;
            if (v55 <= 9 && (*v53 != 48 || v54 <= 1))
            {
              v61 = v53 + 1;
              v62 = v54 - 1;
              while (v62)
              {
                if (v55 > 0x19999999)
                  goto LABEL_62;
                v63 = *v61 - 48;
                if (v63 > 9)
                  goto LABEL_62;
                v51 = 0;
                v64 = __CFADD__(v63, 10 * v55);
                v55 = v63 + 10 * (_DWORD)v55;
                ++v61;
                --v62;
                if (v64)
                  goto LABEL_63;
              }
              goto LABEL_235;
            }
          }
          goto LABEL_62;
        }
        if (!(_DWORD)v54)
          goto LABEL_62;
        v55 = *(unsigned __int8 *)v53 - 48;
        if (v55 > 9 || v54 >= 2 && *(_BYTE *)v53 == 48)
          goto LABEL_62;
        v112 = (unsigned __int8 *)v53 + 1;
        v113 = v54 - 1;
        while (v113)
        {
          if (v55 > 0x19999999)
            goto LABEL_62;
          v114 = *v112 - 48;
          if (v114 > 9)
            goto LABEL_62;
          v51 = 0;
          v64 = __CFADD__(v114, 10 * v55);
          v55 = v114 + 10 * (_DWORD)v55;
          ++v112;
          --v113;
          if (v64)
            goto LABEL_63;
        }
LABEL_235:
        if ((_DWORD)v55 == -1)
        {
LABEL_62:
          v51 = 0;
          goto LABEL_63;
        }
        v16 = (uint64_t)this;
        v134 = (JSC::VM *)*((_QWORD *)a2 + 7);
        while (2)
        {
          v115 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
          v116 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, unint64_t *))(16 * *(unsigned int *)(v115 + 0x4C) + 0x70))(v16, a2, v55, &v138);
          v118 = v116;
          if (*((_DWORD *)v134 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v134, v117, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((hasExceptionsAfterHandlingTraps | v118) & 1) != 0)
            {
LABEL_249:
              v51 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_63;
            }
          }
          else if ((v116 & 1) != 0)
          {
            goto LABEL_92;
          }
          if (BYTE2(v143[1]) == 3)
          {
            if (BYTE4(v143[1]))
              goto LABEL_62;
            v119 = *(unsigned __int8 *)(v16 + 5);
            if (v119 != 61)
              goto LABEL_241;
          }
          else
          {
            v119 = *(unsigned __int8 *)(v16 + 5);
            if (v119 == 61)
            {
              if (BYTE2(v143[1]) == 1)
                goto LABEL_62;
            }
            else
            {
LABEL_241:
              if ((v119 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v16, v117, (uint64_t)a3, a4, a5, a6, a7, a8) <= v55)
              {
                goto LABEL_62;
              }
            }
          }
          if ((*(_WORD *)(v115 + 12) & 0x800) == 0 || BYTE2(v143[1]) == 3)
          {
            v120 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
            if (!v120)
              v120 = *(_QWORD *)(v16 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v120 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v16, a2);
            }
            else
            {
              v120 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
              if (!v120)
                v120 = *(_QWORD *)(v16 + 16);
            }
            if (*((_DWORD *)v134 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v134, v117, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_62;
            }
          }
          if ((v120 & 0xFFFE000000000002) != 0)
            goto LABEL_62;
          v51 = 0;
          v16 = v120;
          if (*(unsigned __int8 *)(v120 + 5) <= 0x16u)
            goto LABEL_63;
          continue;
        }
      }
      v25 = (_BYTE *)(v26 + 6);
      v27 = (JSC::JSObject *)v26;
    }
    while ((*(_BYTE *)(v26 + 6) & 8) == 0);
  }
  if (v11)
  {
    v81 = *(_DWORD *)(v11 + 16);
    if ((v81 & 0x20) == 0)
    {
      v82 = *(_BYTE **)(v11 + 8);
      v83 = *(unsigned int *)(v11 + 4);
      if ((v81 & 4) != 0)
      {
        if ((_DWORD)v83)
        {
          v84 = *v82 - 48;
          if (v84 <= 9 && (v83 < 2 || *v82 != 48))
          {
            v123 = v82 + 1;
            v124 = v83 - 1;
            while (v124)
            {
              if (v84 <= 0x19999999)
              {
                v125 = *v123 - 48;
                if (v125 <= 9)
                {
                  v64 = __CFADD__(v125, 10 * v84);
                  v84 = v125 + 10 * (_DWORD)v84;
                  ++v123;
                  --v124;
                  if (!v64)
                    continue;
                }
              }
              goto LABEL_126;
            }
LABEL_283:
            if ((_DWORD)v84 != -1)
            {
              v135 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v16 = (uint64_t)this;
              while (1)
              {
                v126 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
                v127 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, unint64_t *))(16 * *(unsigned int *)(v126 + 0x4C) + 0x70))(v16, a2, v84, &v138);
                v129 = v127;
                if (*((_DWORD *)v135 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v135, v128, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v129) & 1) != 0)
                    goto LABEL_249;
                }
                else if ((v127 & 1) != 0)
                {
                  goto LABEL_92;
                }
                if (BYTE2(v143[1]) == 3)
                {
                  if (BYTE4(v143[1]))
                    goto LABEL_62;
                  v130 = *(unsigned __int8 *)(v16 + 5);
                  if (v130 == 61)
                    goto LABEL_290;
                }
                else
                {
                  v130 = *(unsigned __int8 *)(v16 + 5);
                  if (v130 == 61)
                  {
                    if (BYTE2(v143[1]) == 1)
                      goto LABEL_62;
                    goto LABEL_290;
                  }
                }
                if ((v130 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v16, v128, (uint64_t)a3, a4, a5, a6, a7, a8) <= v84)
                {
                  goto LABEL_62;
                }
LABEL_290:
                if ((*(_WORD *)(v126 + 12) & 0x800) == 0 || BYTE2(v143[1]) == 3)
                {
                  v131 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
                  if (!v131)
                    v131 = *(_QWORD *)(v16 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v131 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v16, a2);
                  }
                  else
                  {
                    v131 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x30);
                    if (!v131)
                      v131 = *(_QWORD *)(v16 + 16);
                  }
                  if (*((_DWORD *)v135 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v135, v128, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_62;
                  }
                }
                if ((v131 & 0xFFFE000000000002) != 0)
                  goto LABEL_62;
                v51 = 0;
                v16 = v131;
                if (*(unsigned __int8 *)(v131 + 5) <= 0x16u)
                  goto LABEL_63;
              }
            }
          }
        }
      }
      else if ((_DWORD)v83)
      {
        v84 = *(unsigned __int16 *)v82 - 48;
        if (v84 <= 9 && (*(_WORD *)v82 != 48 || v83 <= 1))
        {
          v97 = (unsigned __int16 *)(v82 + 2);
          v98 = v83 - 1;
          while (v98)
          {
            if (v84 <= 0x19999999)
            {
              v99 = *v97 - 48;
              if (v99 <= 9)
              {
                v64 = __CFADD__(v99, 10 * v84);
                v84 = v99 + 10 * (_DWORD)v84;
                ++v97;
                --v98;
                if (!v64)
                  continue;
              }
            }
            goto LABEL_126;
          }
          goto LABEL_283;
        }
      }
    }
  }
LABEL_126:
  v133 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (1)
  {
    v85 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 6) & 8) == 0)
      break;
    v103 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C) + 0x68))(v26, a2, v11, &v138);
    v104 = v103;
    if (*((_DWORD *)v133 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v133, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((hasExceptionsAfterHandlingTraps | v104) & 1) != 0)
        goto LABEL_249;
    }
    else if ((v103 & 1) != 0)
    {
      goto LABEL_92;
    }
    if (BYTE2(v143[1]) == 3)
    {
      if (BYTE4(v143[1]))
        goto LABEL_62;
      v105 = *(unsigned __int8 *)(v26 + 5);
      if (v105 != 61)
      {
LABEL_199:
        if (!v11)
          goto LABEL_133;
        if ((v105 - 50) < 0xFFFFFFF5)
          goto LABEL_133;
        v106 = *(_DWORD *)(v11 + 16);
        if ((v106 & 0x20) != 0)
          goto LABEL_133;
        v107 = *(unsigned int *)(v11 + 4);
        if (!(_DWORD)v107)
          goto LABEL_133;
        v108 = *(unsigned __int8 **)(v11 + 8);
        if ((v106 & 4) == 0)
        {
          v109 = *(unsigned __int16 *)v108;
          if ((_DWORD)v107 == 1)
            goto LABEL_205;
          if (v109 == 45)
          {
            v109 = *((unsigned __int16 *)v108 + 1);
            goto LABEL_210;
          }
          if ((v109 - 48) >= 0xA && ((_DWORD)v107 != 8 || v109 != 73))
          {
LABEL_221:
            if ((_DWORD)v107 != 3 || v109 != 78)
              goto LABEL_133;
          }
LABEL_214:
          v132 = v132 & 0xFFFFFF0000000000 | v107 | ((unint64_t)((v106 >> 2) & 1) << 32);
          JSC::jsToNumber(v108, v132);
          WTF::numberToString(&v149, v110);
          if (WTF::equal(v11, (unint64_t)&v149, v111))
            goto LABEL_62;
          goto LABEL_133;
        }
        v109 = *v108;
        if ((_DWORD)v107 == 1)
        {
LABEL_205:
          if ((v109 - 48) < 0xA)
            goto LABEL_62;
          goto LABEL_133;
        }
        if (v109 == 45)
        {
          v109 = v108[1];
LABEL_210:
          if ((v109 - 48) < 0xA)
          {
            if ((_DWORD)v107 == 2)
              goto LABEL_62;
            goto LABEL_214;
          }
          if ((_DWORD)v107 != 9)
            goto LABEL_133;
        }
        else
        {
          if ((v109 - 48) < 0xA)
            goto LABEL_214;
          if ((_DWORD)v107 != 8)
            goto LABEL_221;
        }
        if (v109 != 73)
          goto LABEL_133;
        goto LABEL_214;
      }
    }
    else
    {
      v105 = *(unsigned __int8 *)(v26 + 5);
      if (v105 != 61)
        goto LABEL_199;
      if (BYTE2(v143[1]) == 1)
        goto LABEL_62;
    }
LABEL_133:
    if ((*(_WORD *)(v85 + 12) & 0x800) != 0)
    {
      v88 = *(_DWORD *)v26;
      if (BYTE2(v143[1]) != 3)
      {
        v102 = 16 * (v88 & 0xFFFFFFFE);
        if ((*(_WORD *)(v102 + 12) & 0x800) != 0)
        {
          v89 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v102 + 76) + 0xB0))(v26, a2);
        }
        else
        {
          v89 = *(_QWORD *)(v102 + 48);
          if (!v89)
            v89 = *(_QWORD *)(v26 + 16);
        }
        if (*((_DWORD *)v133 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v133, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_62;
        }
        goto LABEL_137;
      }
    }
    else
    {
      v88 = *(_DWORD *)v26;
    }
    v89 = *(_QWORD *)(16 * (v88 & 0xFFFFFFFE) + 0x30);
    if (!v89)
      v89 = *(_QWORD *)(v26 + 16);
LABEL_137:
    if ((v89 & 0xFFFE000000000002) != 0)
      goto LABEL_62;
    v51 = 0;
    v26 = v89;
    if (*(unsigned __int8 *)(v89 + 5) <= 0x16u)
      goto LABEL_63;
  }
  if (!(_DWORD)v16
    || (v16 & ~*(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)), v133, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v86)|| (v149 = v11, v87 = JSC::PropertyTable::get(v86, (uint64_t *)&v149), a6 = v87, (_DWORD)v87 == -1))
  {
    if ((*(_BYTE *)(v26 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v26, v133, v11, (uint64_t)&v138) & 1) != 0)
    {
      goto LABEL_92;
    }
    goto LABEL_133;
  }
  a5 = HIDWORD(v87);
  if ((int)v87 <= 63)
  {
    v90 = v26 + 16;
    v91 = v87 << 32;
  }
  else
  {
    v90 = *(_QWORD *)(v26 + 8) - 8;
    v91 = 0x3F00000000 - (v87 << 32);
  }
  a4 = *(_QWORD *)(v90 + (v91 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_147:
    v138 = a4;
    v142 = (JSC::JSObject *)v26;
    goto LABEL_56;
  }
  v92 = *(unsigned __int8 *)(a4 + 5);
  if (v92 == 5)
  {
    v65 = (unsigned int *)v26;
    goto LABEL_91;
  }
  if (v92 != 6)
    goto LABEL_147;
  v75 = *(_DWORD *)(v85 + 16) & 3;
  v101 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v138 = *(_QWORD *)(a4 + 8);
    v139 = v101;
    LODWORD(v140) = HIDWORD(v87);
    v142 = (JSC::JSObject *)v26;
    goto LABEL_173;
  }
  v78 = *(_QWORD *)(a4 + 24);
  v77 = *(_QWORD *)(a4 + 32);
  v138 = *(_QWORD *)(a4 + 8);
  v139 = v101;
  LODWORD(v140) = HIDWORD(v87);
  v142 = (JSC::JSObject *)v26;
LABEL_109:
  BYTE1(v143[1]) = 3;
  v51 = 1;
  if (v75 != 2)
    LOBYTE(v143[1]) = 1;
  BYTE3(v143[1]) = 1;
  v146 = v78;
  v147 = v77;
LABEL_63:
  v15 = v148;
  if (*((_DWORD *)v148 + 20))
  {
    v93 = *((_DWORD *)v148 + 20);
    if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v148 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v16 = *((_QWORD *)v15 + 2);
    if (v16)
    {
      v14 = 0;
      goto LABEL_156;
    }
  }
  if (v51)
  {
    if (BYTE1(v143[1]) == 1)
    {
      v14 = v138;
    }
    else
    {
      if (BYTE1(v143[1]) == 2)
        v100 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v138, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        v100 = JSC::PropertySlot::customGetter((uint64_t)&v138, *((JSC::VM **)a2 + 7), (WTF::StringImpl *)v11);
      v14 = v100;
    }
  }
  else
  {
    v14 = 10;
  }
  if (*((_DWORD *)v15 + 20))
  {
    v94 = *((_DWORD *)v15 + 20);
    if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v16 = *((_QWORD *)v15 + 2);
    if (v16)
      goto LABEL_156;
  }
  v56 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v57 = *((_QWORD *)v56 + 8);
  if (!v57 || *(_BYTE *)(v57 + 5) == 1)
  {
    JSC::Structure::allocateRareData(v56, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8);
    v57 = *((_QWORD *)v56 + 8);
  }
  v58 = *(_QWORD *)(v57 + 64);
  if (!v58 || *(_QWORD *)(v58 + 88) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v57, a2, (JSC::VM *)v10, (unint64_t)v56, v14, 3, (uint64_t)&v138, a8);
  if (!*((_DWORD *)v15 + 20))
    goto LABEL_72;
  v95 = *((_DWORD *)v15 + 20);
  if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)v15 + 2);
  if (v16)
LABEL_156:
    v59 = 0;
  else
LABEL_72:
    v59 = 1;
  if (v145)
  {
    v60 = *(_DWORD *)(v144 + 4);
    if (!v60)
    {
      __break(0xC471u);
      JUMPOUT(0x198A52CA0);
    }
    *(_DWORD *)(v144 + 4) = v60 - 1;
  }
  if (v59)
  {
LABEL_5:
    if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v16 = 0;
      goto LABEL_7;
    }
    if ((v14 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v138) = 0;
    }
    else
    {
      if (*(_BYTE *)(v14 + 5) == 26)
      {
        v66 = *(_QWORD *)(v14 + 24);
        if ((v66 & 1) != 0)
          v66 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v66 + 5) == 8)
        {
          LOBYTE(v138) = 1;
          v139 = *(_QWORD *)(v66 + 40);
          LOBYTE(v140) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                    + 0x4C));
        }
        else
        {
          LOBYTE(v138) = 2;
          v67 = *(_QWORD *)(v14 + 16);
          v139 = v66;
          v140 = v67;
        }
        goto LABEL_101;
      }
      (*(void (**)(unint64_t *__return_ptr, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(&v138, v14);
      if ((_BYTE)v138)
      {
LABEL_101:
        LOBYTE(v149) = 0;
        v150[1] = &v150[3];
        memset(&v150[2], 0, 72);
        v150[3] = *(_QWORD *)(v10 + 42040);
        v150[0] = 0x800000001;
        v136 = &v150[3];
        v137 = 1;
        v16 = JSC::call((uint64_t *)a2, v14, (unsigned __int8 *)&v138, (uint64_t)this, (uint64_t)&v136, a6, a7, a8);
        if (*((_DWORD *)v15 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v15, (uint64_t)v68, v69, v70, v71, v72, v73, v74))
        {
          v16 = *((_QWORD *)v15 + 2);
        }
        else if ((v16 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v16 + 5) >= 0x17u)
        {
          v16 = JSC::throwTypeError((unint64_t)a2, &v148, (uint64_t)"Symbol.toPrimitive returned an object", 38);
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v150, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_7;
      }
    }
    JSC::throwTypeError((unint64_t)a2, &v148, (uint64_t)"Symbol.toPrimitive is not a function, undefined, or null", 57);
    v16 = *((_QWORD *)v15 + 2);
  }
LABEL_7:
  v149 = v16;
  if (*(_DWORD *)(v10 + 80))
  {
    v79 = *(_DWORD *)(v10 + 80);
    if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return *(_QWORD *)(v10 + 41968);
  }
  if (v16)
    goto LABEL_11;
  v16 = JSC::JSObject::ordinaryToPrimitive(this, a2, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  v149 = v16;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_11;
  v80 = *(_DWORD *)(v10 + 80);
  if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
  if (*(_QWORD *)(v10 + 16))
    return *(_QWORD *)(v10 + 41968);
LABEL_11:
  if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
    return JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v149, a2, 1);
  return v16;
}

void JSC::JSObject::seal(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  JSC::VM *v17;
  JSC::DeferredStructureTransitionWatchpointFire *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  int v33;
  __int16 v34;
  _QWORD v35[4];

  if ((JSC::Structure::isSealed((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    JSC::JSObject::enterDictionaryIndexingMode(this, a2, v10, v11, v12, v13, v14, v15, v16);
    v17 = (JSC::VM *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
    v33 = 1;
    v34 = 0;
    v35[0] = v35;
    v35[1] = v35;
    v35[2] = a2;
    v35[3] = v17;
    v24 = JSC::Structure::sealTransition(a2, v17, (JSC::Structure *)&v33, v18, v19, v20, v21, v22, v23);
    JSC::JSObject::setStructure((unint64_t)this, a2, v24);
    JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire((JSC::DeferredStructureTransitionWatchpointFire *)&v33, v25, v26, v27, v28, v29, v30, v31, v32);
  }
}

void JSC::JSObject::freeze(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::Structure *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  JSC::ArrayStorage *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _QWORD *v25;
  int v26;
  int v27;
  JSC::Butterfly *v29;
  _QWORD *v30;
  uint64_t v31;
  JSC::PropertyTable *v32;
  uint64_t v33;
  _QWORD v34[4];

  v11 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  if ((*((_BYTE *)v11 + 18) & 0x10) != 0)
  {
    JSC::Structure::ensurePropertyTableIfNotEmpty(v11, a2, a3, a4, a5, a6, a7, a8);
    if (!v32 || (JSC::PropertyTable::isFrozen(v32) & 1) != 0)
      return;
  }
  v12 = (unsigned __int8 *)this + 4;
  v13 = *((_BYTE *)this + 4) & 0xF;
  if (v13 - 10 >= 4)
  {
    if (v13 > 9 || v13 == 2)
      goto LABEL_5;
    v29 = JSC::JSObject::ensureArrayStorageSlow(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    if (!v29)
      goto LABEL_5;
    v14 = v29;
  }
  else
  {
    v14 = (JSC::ArrayStorage *)*((_QWORD *)this + 1);
  }
  JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(this, a2, v14, (uint64_t)a4, a5, a6, a7, a8);
LABEL_5:
  v15 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v33) = 1;
  WORD2(v33) = 0;
  v34[0] = v34;
  v34[1] = v34;
  v34[2] = a2;
  v34[3] = v15;
  v16 = JSC::Structure::nonPropertyTransitionSlow(a2, v15, 14, (uint64_t)&v33, a5, a6, a7, a8, a9.n128_f64[0]);
  *(_DWORD *)this = v16 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(v16 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(v16 + 9);
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(v16 + 8))
  {
    do
    {
      while (1)
      {
        v26 = *v12;
        v27 = __ldxr(v12);
        if (v27 == v26)
          break;
        __clrex();
      }
    }
    while (__stxr(v26 & 0xC0 | *(_BYTE *)(v16 + 8), v12));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v33) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v33, v24, v17, v18, v19, v20, v21, v22, v23);
  while (1)
  {
    v25 = (_QWORD *)v34[0];
    if ((_QWORD *)v34[0] == v34)
      break;
    v31 = *(_QWORD *)v34[0];
    v30 = *(_QWORD **)(v34[0] + 8);
    *v30 = *(_QWORD *)v34[0];
    *(_QWORD *)(v31 + 8) = v30;
    *v25 = 0;
    v25[1] = 0;
  }
}

unint64_t JSC::JSObject::convertToDictionary(JSC::JSObject *this, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];

  v11 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  LODWORD(v27) = 1;
  WORD2(v27) = 0;
  v28[0] = v28;
  v28[1] = v28;
  v28[2] = a2;
  v28[3] = v11;
  result = JSC::Structure::toDictionaryTransition((uint64_t)a2, v11, 1, (JSC::Structure *)&v27, a6, a7, a8, a9, a3);
  *(_DWORD *)this = result >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(result + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(result + 9);
  v21 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(result + 8))
  {
    do
    {
      while (1)
      {
        v23 = *v21;
        v24 = __ldxr(v21);
        if (v24 == v23)
          break;
        __clrex();
      }
    }
    while (__stxr(v23 & 0xC0 | *(_BYTE *)(result + 8), v21));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  if (BYTE4(v27) == 1)
    result = (unint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v27, v20, v13, v14, v15, v16, v17, v18, v19);
  while (1)
  {
    v22 = (_QWORD *)v28[0];
    if ((_QWORD *)v28[0] == v28)
      break;
    v26 = *(_QWORD *)v28[0];
    v25 = *(_QWORD **)(v28[0] + 8);
    *v25 = *(_QWORD *)v28[0];
    *(_QWORD *)(v26 + 8) = v25;
    *v22 = 0;
    v22[1] = 0;
  }
  return result;
}

void JSC::Identifier::fromLatin1(JSC::VM *__s@<X1>, WTF::StringImpl **a2@<X8>)
{
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;

  if (__s
    && (v28 = a2,
        v5 = strlen((const char *)__s),
        WTF::AtomStringImpl::add((uint64_t)__s, v5, v6, v7, v8, v9, v10, &v29),
        a2 = v28,
        (v18 = v29) != 0))
  {
    v19 = *(_DWORD *)v29;
    *(_DWORD *)v29 += 2;
    *v28 = v18;
    if (v19)
    {
      *(_DWORD *)v18 = v19;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void JSC::reifyStaticProperty(JSC::GetterSetter *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  void (*v32)(uint64_t *);
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  JSC::VM *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  JSC::VM **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v13 = *(_DWORD *)(a4 + 16);
  if ((v13 & 0x200) != 0)
  {
    if ((v13 & 0x10) == 0)
    {
      v21 = *(_DWORD **)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
      v22 = (*(uint64_t (**)(JSC::GetterSetter *))(a4 + 24))(a1);
      v23 = *(unsigned __int8 *)(a4 + 16);
      v16 = JSC::JSFunction::create((uint64_t)a1, v22, v21, v24, v25, v26, v27, v28);
      v17 = *a3;
      v48 = 0;
      v49 = a5;
      v50 = 0x1000000FFFFFFFFLL;
      a9.n128_u64[0] = 0x100000001000000;
      v51 = 0;
      v19 = (int *)a5;
      v20 = (uint64_t)a1;
      v18 = v23;
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  if ((v13 & 0x100) != 0)
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
    if ((v13 & 0x10000) != 0)
      JSC::JSObject::putDirectNativeFunction((WTF::StringImpl *)a5, (uint64_t)a1, v14, a3, *(unsigned __int8 *)(*(_QWORD *)(a4 + 32) + 40), *(_QWORD *)(a4 + 24), 0, *(unsigned __int8 *)(a4 + 20), *(_QWORD *)(a4 + 32), *(_DWORD *)(a4 + 16));
    else
      JSC::JSObject::putDirectNativeFunction((WTF::StringImpl *)a5, (uint64_t)a1, v14, a3, *(unsigned __int8 *)(a4 + 32), *(_QWORD *)(a4 + 24), 0, *(unsigned __int8 *)(a4 + 20), *(_DWORD *)(a4 + 16));
    return;
  }
  if ((v13 & 0x400) == 0)
  {
    if ((v13 & 0x10) == 0)
    {
      if ((v13 & 0x800) != 0)
      {
        v29 = (uint64_t *)(a5 + *(_QWORD *)(a4 + 24));
        v16 = *v29;
        if ((*v29 & 1) != 0)
        {
          v30 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
          v31 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a5 & 8) != 0)
            v31 = (uint64_t *)(a5 - 16);
          v48 = *v31;
          v49 = a5;
          v50 = (uint64_t)v29;
          v16 = v30(&v48);
          LOBYTE(v13) = *(_BYTE *)(a4 + 16);
        }
        goto LABEL_11;
      }
      if ((v13 & 0x1000) != 0)
      {
        v15 = (_QWORD *)(a5 + *(_QWORD *)(a4 + 24));
        if ((*v15 & 1) != 0)
        {
          v32 = *(void (**)(uint64_t *))(*v15 & 0xFFFFFFFFFFFFFFFCLL);
          v33 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a5 & 8) != 0)
            v33 = (uint64_t *)(a5 - 16);
          v48 = *v33;
          v49 = a5;
          v50 = (uint64_t)v15;
          v32(&v48);
          LOBYTE(v13) = *(_BYTE *)(a4 + 16);
        }
        v16 = v15[1];
LABEL_11:
        v17 = *a3;
        v18 = v13;
LABEL_12:
        v48 = 0;
        v49 = a5;
        v50 = 0x1000000FFFFFFFFLL;
        a9.n128_u64[0] = 0x100000001000000;
        v51 = 0;
        v19 = (int *)a5;
        v20 = (uint64_t)a1;
LABEL_13:
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v19, v20, v17, v16, v18, (uint64_t)&v48, a7, a8, a9);
        return;
      }
      if ((v13 & 0x2000) != 0)
      {
        v16 = (*(uint64_t (**)(JSC::GetterSetter *, uint64_t))(a4 + 24))(a1, a5);
        v17 = *a3;
        v18 = *(unsigned __int8 *)(a4 + 16);
        goto LABEL_12;
      }
      if ((v13 & 0x8000) != 0)
      {
        v47 = *(JSC::VM ***)(a4 + 24);
        v41 = *(_QWORD *)(a4 + 32);
        v40 = *v47;
      }
      else
      {
        v40 = *(JSC::VM **)(a4 + 24);
        v41 = *(_QWORD *)(a4 + 32);
        if ((v13 & 0x4000) == 0)
        {
          v42 = JSC::CustomGetterSetter::create((uint64_t)a1, v40, v41, a2, a5, a6, a7, a8);
LABEL_35:
          JSC::JSObject::putDirectCustomAccessor((int *)a5, (uint64_t)a1, *a3, v42, *(unsigned __int8 *)(a4 + 16), v46, v43, v44, v45);
          return;
        }
        v47 = 0;
      }
      v42 = JSC::DOMAttributeGetterSetter::create((uint64_t)a1, v40, v41, a2, (uint64_t)v47, a6, a7, a8);
      goto LABEL_35;
    }
LABEL_26:
    JSC::reifyStaticAccessor(a1, a4, (int *)a5, *a3, (JSC::JSObject *)a5, a6, a7, a8);
    return;
  }
  v34 = *a3;
  v35 = *(_QWORD *)(a4 + 24);
  v36 = v35 == (int)v35;
  a9.n128_f64[0] = (double)v35;
  v37 = COERCE__INT64((double)v35) + 0x2000000000000;
  if (v36)
    v38 = *(_QWORD *)(a4 + 24) | 0xFFFE000000000000;
  else
    v38 = v37;
  JSC::JSObject::putDirect((int *)a5, (uint64_t)a1, v34, v38, v13, a9, a6, a7, a8);
}

unsigned int *JSC::JSObject::fillGetterPropertySlot(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if ((*(_DWORD *)((16 * *result) | 0x10) & 3) != 2)
  {
    *(_DWORD *)(a3 + 20) = a6;
    *(_BYTE *)(a3 + 48) = 1;
  }
  *(_QWORD *)a3 = a4;
  *(_DWORD *)(a3 + 16) = a5;
  *(_QWORD *)(a3 + 32) = result;
  *(_BYTE *)(a3 + 49) = 2;
  return result;
}

uint64_t JSC::JSObject::defineOwnIndexedProperty(JSC::JSObject *this, JSC::JSGlobalObject *a2, JSC::VM *a3, const JSC::PropertyDescriptor *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  JSC::VM *v14;
  char v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  JSC::SparseArrayValueMap *v25;
  uint64_t v26;
  uint64_t v27;
  JSC::PropertyDescriptor *v28;
  uint64_t v29;
  uint64_t v30;
  JSC::SparseArrayValueMap *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::PropertyDescriptor *v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  int v56;
  char v57;
  uint64_t v58;
  const char *v59;
  JSC::JSGlobalObject *v60;
  uint64_t v61;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  _BOOL4 v63;
  BOOL v64;
  uint64_t v65;
  double v66;
  double v67;
  _QWORD *v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::VM *v74;

  v9 = a5;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v74 = v14;
  v15 = *((_BYTE *)this + 4);
  if ((v15 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(this, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v15 = *((_BYTE *)this + 4);
  }
  v16 = v15 & 0xF;
  if (v16 - 3 >= 7)
  {
    if (v16 - 10 >= 4)
    {
      if (v16 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198A53E34);
      }
    }
    else
    {
      v23 = **((_QWORD **)this + 1);
      if (v23 && (*(_BYTE *)(v23 + 16) & 1) != 0)
      {
LABEL_24:
        if ((*((_BYTE *)a4 + 24) & 0x12) != 0)
          JSC::JSObject::notifyPresenceOfIndexedAccessors(this, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
        v25 = (JSC::SparseArrayValueMap *)**((_QWORD **)this + 1);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x198A53F3CLL);
        }
        JSC::SparseArrayValueMap::add(v25, (uint64_t)this, a3, (uint64_t)v68);
        v31 = (JSC::SparseArrayValueMap *)(v68[0] + 1);
        if (!v69)
        {
          v71 = 0;
          v72 = 0;
          v70 = 0;
          v73 = 14;
          JSC::PropertyDescriptor::setDescriptor((uint64_t)&v70, v68[0][1], *((_DWORD *)v68[0] + 4));
          if (*(_QWORD *)a4 || *((_QWORD *)a4 + 1) || *((_QWORD *)a4 + 2) || *((_DWORD *)a4 + 7))
          {
            v40 = JSC::PropertyDescriptor::equalTo(a4, a2, (const JSC::PropertyDescriptor *)&v70, v34, v35, v36, v37, v38, v39);
            v49 = v40;
            if (!*((_DWORD *)v14 + 20))
            {
              if (!v40)
                goto LABEL_34;
              return 1;
            }
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v41, v42, v43, v44, (uint64_t)v45, v46, v47);
            if (!hasExceptionsAfterHandlingTraps && !v49)
            {
LABEL_34:
              if ((v73 & 8) != 0)
              {
                v50 = *((_DWORD *)a4 + 7);
                if ((v50 & 4) != 0 && (*((_BYTE *)a4 + 24) & 8) == 0)
                {
                  if (!v9)
                    return 0;
                  v59 = "Attempting to change configurable attribute of unconfigurable property.";
                  v60 = a2;
                  v61 = 72;
LABEL_101:
                  JSC::throwTypeError((unint64_t)v60, &v74, (uint64_t)v59, v61);
                  return 0;
                }
                if ((v50 & 2) != 0)
                {
                  v63 = JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)&v70);
                  if (v63 != JSC::PropertyDescriptor::enumerable(a4))
                  {
                    if (v9)
                    {
                      v59 = "Attempting to change enumerable attribute of unconfigurable property.";
                      goto LABEL_86;
                    }
                    return 0;
                  }
                }
              }
              v51 = *((_QWORD *)a4 + 1);
              v52 = *((_QWORD *)a4 + 2);
              v53 = *(_QWORD *)a4;
              if (v51 || v52 || v53)
              {
                v54 = v70;
                v55 = v70 != 0;
                v56 = BYTE4(v73) & 1;
                v57 = (v70 != 0) | BYTE4(v73);
                if (v53)
                {
                  if ((v70 != 0) | BYTE4(v73) & 1)
                    goto LABEL_43;
LABEL_68:
                  if ((v73 & 8) != 0)
                  {
                    if (v9)
                    {
                      v59 = "Attempting to change access mechanism for an unconfigurable property.";
LABEL_86:
                      v60 = a2;
                      v61 = 70;
                      goto LABEL_101;
                    }
                    return 0;
                  }
                  goto LABEL_49;
                }
              }
              else
              {
                if ((*((_BYTE *)a4 + 28) & 1) == 0)
                {
LABEL_49:
                  JSC::putIndexedDescriptor((uint64_t)a2, v25, v31, a4, (const JSC::PropertyDescriptor *)&v70, v45, v46, v47);
                  return 1;
                }
                v54 = v70;
                v55 = v70 != 0;
                v56 = BYTE4(v73) & 1;
                v57 = (v70 != 0) | BYTE4(v73);
              }
              if ((v57 & 1) == (*((_BYTE *)a4 + 28) & 1))
              {
LABEL_43:
                if ((v55 || v56) && (v53 || (*((_BYTE *)a4 + 28) & 1) != 0))
                {
                  if ((~(_DWORD)v73 & 0xA) == 0)
                  {
                    if ((*((_BYTE *)a4 + 24) & 2) == 0)
                    {
                      if (v9)
                      {
                        v59 = "Attempting to change writable attribute of unconfigurable property.";
                        v60 = a2;
                        v61 = 68;
                        goto LABEL_101;
                      }
                      return 0;
                    }
                    if (v53)
                    {
                      if (v53 == v54)
                      {
                        v64 = 1;
                      }
                      else if (v53 >> 49)
                      {
                        if (v54 >> 49)
                        {
                          v66 = (double)(int)v53;
                          if (v53 <= 0xFFFDFFFFFFFFFFFFLL)
                            *(_QWORD *)&v66 = v53 - 0x2000000000000;
                          v67 = (double)(int)v54;
                          if (v54 <= 0xFFFDFFFFFFFFFFFFLL)
                            *(_QWORD *)&v67 = v54 - 0x2000000000000;
                          v64 = *(_QWORD *)&v66 == *(_QWORD *)&v67;
                        }
                        else
                        {
                          v64 = 0;
                        }
                      }
                      else
                      {
                        v64 = JSC::JSValue::strictEqual(a2, v53, v54, v43, v44, (uint64_t)v45, v46, v47, v48);
                      }
                      if (*((_DWORD *)v14 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v53, v54, v43, v44, (uint64_t)v45, v46, v47))
                      {
                        return 0;
                      }
                      if (!v64)
                      {
                        if (v9)
                        {
                          v59 = "Attempting to change value of a readonly property.";
                          v60 = a2;
                          v61 = 51;
                          goto LABEL_101;
                        }
                        return 0;
                      }
                    }
                  }
                }
                else if ((v73 & 8) != 0)
                {
                  if (v52 && v52 != v72)
                  {
                    if (!v9)
                      return 0;
                    v59 = "Attempting to change the setter of an unconfigurable property.";
                    goto LABEL_64;
                  }
                  if (v51)
                  {
                    v65 = JSC::PropertyDescriptor::getter(a4);
                    if (v65 != JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)&v70))
                    {
                      if (!v9)
                        return 0;
                      v59 = "Attempting to change the getter of an unconfigurable property.";
LABEL_64:
                      v60 = a2;
                      v61 = 63;
                      goto LABEL_101;
                    }
                  }
                }
                goto LABEL_49;
              }
              goto LABEL_68;
            }
          }
          else
          {
            if (!*((_DWORD *)v14 + 20))
              return 1;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v32, v33, v34, v35, v36, v37, v38);
          }
          return !hasExceptionsAfterHandlingTraps;
        }
        if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x10) != 0)
        {
          JSC::SparseArrayValueMap::remove((uint64_t)v25, v68[0], (uint64_t)v68[1], v26, v27, (uint64_t)v28, v29, v30);
          if (v9)
          {
            v59 = "Attempting to define property on object that is not extensible.";
            v60 = a2;
            v61 = 64;
            goto LABEL_101;
          }
          return 0;
        }
        v71 = 0;
        v72 = 0;
        v70 = 10;
        v73 = 0x70000000ELL;
        JSC::putIndexedDescriptor((uint64_t)a2, v25, (JSC::SparseArrayValueMap *)(v68[0] + 1), a4, (const JSC::PropertyDescriptor *)&v70, v28, v29, v30);
        v58 = *((_QWORD *)this + 1);
        if (*(_DWORD *)(v58 - 8) <= a3)
          *(_DWORD *)(v58 - 8) = (_DWORD)a3 + 1;
        return 1;
      }
    }
  }
  v70 = 10;
  v71 = 0;
  v72 = 0;
  v73 = 0x700000000;
  if (!*(_QWORD *)a4
    || *((_DWORD *)a4 + 6)
    && (!JSC::JSObject::canGetIndexQuickly(this, a3)
     || JSC::PropertyDescriptor::attributesOverridingCurrent(a4, (const JSC::PropertyDescriptor *)&v70)))
  {
LABEL_23:
    JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(this, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_24;
  }
  v17 = *((unsigned __int8 *)this + 5);
  if ((v17 - 33) >= 3)
  {
    v18 = *((unsigned __int8 *)this + 4);
    v19 = v18 & 0xF;
    if (v19 - 3 < 7)
      goto LABEL_8;
    if (v19 - 10 >= 4)
    {
      if (v19 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198A53E5CLL);
      }
    }
    else
    {
      v24 = **((_QWORD **)this + 1);
      if (v24 && (*(_BYTE *)(v24 + 16) & 1) != 0)
        goto LABEL_23;
    }
LABEL_8:
    v20 = (v18 >> 4) & 1;
    if (v17 != 36)
      v20 = 1;
    if (v17 == 24 || !v20)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_12:
  if (v9)
    v21 = 2;
  else
    v21 = 1;
  return JSC::JSObject::putDirectIndex((unint64_t)this, (uint64_t)a2, a3, *(_QWORD *)a4, 0, v21, a7, a8, a9.n128_f64[0]);
}

uint64_t JSC::putIndexedDescriptor(uint64_t this, JSC::JSGlobalObject *a2, JSC::SparseArrayValueMap *a3, JSC::SparseArrayEntry *a4, const JSC::PropertyDescriptor *a5, JSC::PropertyDescriptor *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  JSC::JSGlobalObject *v18;
  JSC::JSGlobalObject *v19;
  JSC::JSObject *v20;
  JSC::JSObject *v21;
  unint64_t v22;
  int v23;

  v12 = *(_QWORD *)(this + 56);
  v13 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    v14 = 0;
  else
    v14 = (*((_DWORD *)a4 + 7) & 1) == 0;
  if (!v14)
  {
    v15 = *((_DWORD *)a5 + 6);
    if (*(_OWORD *)((char *)a5 + 8) != 0)
      v15 |= 2u;
    if (*(_OWORD *)((char *)a4 + 8) == 0)
      v16 = 2 * (*((_DWORD *)a4 + 7) & 7);
    else
      v16 = (2 * (*((_DWORD *)a4 + 7) & 7)) | 0x10;
    v17 = (v16 & *((_DWORD *)a4 + 6) | v15 & ~v16) & 0xFFFFFFCF;
    if (v13)
    {
      *(_QWORD *)a3 = v13;
      if ((v13 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)a2 + 7))
        this = JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)a2);
    }
    else if (*(_OWORD *)((char *)a5 + 8) != 0)
    {
      *(_QWORD *)a3 = 10;
    }
    *((_DWORD *)a3 + 2) = v17;
    return this;
  }
  v18 = (JSC::JSGlobalObject *)*((_QWORD *)a4 + 1);
  if (v18)
  {
LABEL_18:
    if (((unint64_t)v18 & 0xFFFE000000000002) == 0)
    {
      if (*((unsigned __int8 *)v18 + 5) <= 0x16u)
        v19 = 0;
      else
        v19 = v18;
LABEL_23:
      v20 = (JSC::JSObject *)*((_QWORD *)a4 + 2);
      if (!v20 && (v20 = (JSC::JSObject *)*((_QWORD *)a5 + 2), *(_OWORD *)((char *)a5 + 8) == 0)
        || ((unint64_t)v20 & 0xFFFE000000000002) != 0)
      {
        v21 = 0;
      }
      else if (*((unsigned __int8 *)v20 + 5) <= 0x16u)
      {
        v21 = 0;
      }
      else
      {
        v21 = v20;
      }
      v22 = JSC::GetterSetter::create(*(JSC::GetterSetter **)(this + 56), (JSC::VM *)this, v19, v21, a5, (uint64_t)a6, a7, a8);
      v23 = JSC::PropertyDescriptor::attributesOverridingCurrent(a4, a5) & 0xFFFFFFFD;
      return JSC::SparseArrayEntry::forceSet((uint64_t)a3, v12, (unint64_t)a2, v22, v23);
    }
LABEL_22:
    v19 = 0;
    goto LABEL_23;
  }
  if (*((_QWORD *)a4 + 2))
  {
    v18 = (JSC::JSGlobalObject *)*((_QWORD *)a5 + 1);
    if (*(_OWORD *)((char *)a5 + 8) == 0)
      goto LABEL_22;
    goto LABEL_18;
  }
  this = JSC::PropertyDescriptor::attributesOverridingCurrent(a4, a5);
  if ((this & 0x10) != 0)
    *((_DWORD *)a2 + 4) |= 4u;
  *((_DWORD *)a3 + 2) = this;
  return this;
}

uint64_t JSC::JSObject::deallocateSparseIndexMap(uint64_t this)
{
  _QWORD *v1;

  if ((*(_BYTE *)(this + 4) & 0xEu) - 10 <= 3)
  {
    v1 = *(_QWORD **)(this + 8);
    if (v1)
      *v1 = 0;
  }
  return this;
}

uint64_t JSC::JSObject::attemptToInterceptPutByIndexOnHoleForPrototype(uint64_t a1, unint64_t a2, const WTF::StringImpl *a3, unint64_t a4, unint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t result;
  char v30;
  uint64_t v31;

  v11 = a4;
  v14 = a4;
  v15 = ~((unint64_t)a4 << 32) + a4;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  v19 = *(_QWORD *)(a2 + 56);
  while (1)
  {
    if ((*(_BYTE *)(a1 + 4) & 0xEu) - 10 <= 3)
    {
      v21 = *(unint64_t **)(a1 + 8);
      if (v21)
      {
        a4 = *v21;
        if (*v21)
        {
          v22 = *(_QWORD *)(a4 + 8);
          if (v22)
          {
            v23 = *(_DWORD *)(v22 - 8);
            v24 = v23 & v18;
            v25 = (uint64_t *)(v22 + 24 * (v23 & v18));
            v26 = *v25;
            if (*v25 != v14)
            {
              v27 = 1;
              while (v26 != -1)
              {
                v24 = (v24 + v27) & v23;
                v25 = (uint64_t *)(v22 + 24 * v24);
                v26 = *v25;
                ++v27;
                if (*v25 == v14)
                  goto LABEL_19;
              }
              v25 = (uint64_t *)(v22 + 24 * *(unsigned int *)(v22 - 4));
            }
LABEL_19:
            if (v25 != (uint64_t *)(v22 + 24 * *(unsigned int *)(v22 - 4)) && (v25[2] & 0x12) != 0)
            {
              v30 = JSC::SparseArrayEntry::put((uint64_t)(v25 + 1), a2, (uint64_t)a3, a4, a5, a6);
LABEL_30:
              *a7 = v30;
              return 1;
            }
          }
        }
      }
    }
    if (*(_BYTE *)(a1 + 5) == 61)
    {
      v30 = JSC::ProxyObject::putByIndexCommon((JSC::JSCell *)a1, a2, a3, v11, a5, a6, (uint64_t)a7, a8);
      goto LABEL_30;
    }
    if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      v20 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) + 0xB0))();
    }
    else
    {
      v20 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
      if (!v20)
        v20 = *(_QWORD *)(a1 + 16);
    }
    if (!*(_DWORD *)(v19 + 80))
      break;
    v28 = *(_DWORD *)(v19 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    {
      v31 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8);
      v20 = v31;
    }
    result = 0;
    if (*(_QWORD *)(v19 + 16) || v20 == 2)
      return result;
LABEL_9:
    a1 = v20;
  }
  if (v20 != 2)
    goto LABEL_9;
  return 0;
}

uint64_t JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage(unsigned int *a1, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::VM *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  JSC::SparseArrayEntry *v29;
  uint64_t v30;
  uint64_t NonSparseMode;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  JSC::SparseArrayValueMap *v35;
  JSC::VM *v36;

  v8 = a5;
  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v36 = v13;
  v14 = *(_QWORD *)a6;
  v15 = *(unsigned int *)(a6 - 8);
  if (!*(_QWORD *)a6)
  {
    if (v15 <= a3)
      *(_DWORD *)(a6 - 8) = a3 + 1;
    if ((a3 < 0x3E8 || *(_DWORD *)(a6 - 4) >= a3)
      && *(_DWORD *)(a6 + 12) >= a3 >> 3
      && JSC::JSObject::increaseVectorLength((JSC::JSObject *)a1, v13, a3 + 1))
    {
      v16 = *((_QWORD *)a1 + 1);
      *(_QWORD *)(v16 + 8 * a3 + 16) = a4;
      if (a4
        && (a4 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v13 + 190) >= *((unsigned __int8 *)a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, (unint64_t)a1);
      }
      ++*(_DWORD *)(v16 + 12);
      return 1;
    }
    v14 = JSC::SparseArrayValueMap::create(v13, a2, v15, a4, a5, a6, a7, a8);
    **((_QWORD **)a1 + 1) = v14;
    if (a1 && v14 && *((_DWORD *)v13 + 190) >= *((unsigned __int8 *)a1 + 7))
    {
      v32 = (uint64_t)v13 + 192;
      v33 = v14;
      JSC::Heap::writeBarrierSlowPath(v32, (unint64_t)a1);
      v14 = v33;
    }
    return JSC::SparseArrayValueMap::putEntry((unsigned __int8 *)v14, (unint64_t)a2, a1, a3, a4, v8);
  }
  if (v15 <= a3)
  {
    if ((*(_BYTE *)(v14 + 16) & 2) != 0 || (*(_BYTE *)((16 * *a1) | 0x12) & 0x10) != 0)
    {
      if ((_DWORD)a5)
        JSC::throwTypeError((unint64_t)a2, &v36, (uint64_t)"Attempted to assign to readonly property.", 42);
      return 0;
    }
    LODWORD(v15) = a3 + 1;
    *(_DWORD *)(a6 - 8) = a3 + 1;
  }
  v18 = *(_QWORD *)(v14 + 8);
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 - 12);
  if ((*(_BYTE *)(v14 + 16) & 1) != 0)
    return JSC::SparseArrayValueMap::putEntry((unsigned __int8 *)v14, (unint64_t)a2, a1, a3, a4, v8);
  v19 = v18 + *(_DWORD *)(a6 + 12);
  if (v15 >> 3 > v19)
    return JSC::SparseArrayValueMap::putEntry((unsigned __int8 *)v14, (unint64_t)a2, a1, a3, a4, v8);
  v35 = (JSC::SparseArrayValueMap *)v14;
  v20 = JSC::JSObject::increaseVectorLength((JSC::JSObject *)a1, v13, v15);
  v14 = (unint64_t)v35;
  if (!v20)
    return JSC::SparseArrayValueMap::putEntry((unsigned __int8 *)v14, (unint64_t)a2, a1, a3, a4, v8);
  v21 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v21 + 12) = v19;
  v22 = *((_QWORD *)v35 + 1);
  if (v22)
    v23 = (uint64_t *)(v22 + 24 * *(unsigned int *)(v22 - 4));
  else
    v23 = 0;
  v24 = v21 + 16;
  v25 = JSC::SparseArrayValueMap::begin(v35);
  if (v23 != v25)
  {
    v27 = v25;
    v28 = v26;
    do
    {
      v29 = (JSC::SparseArrayEntry *)(v27 + 1);
      v30 = *v27;
      v27 += 3;
      NonSparseMode = JSC::SparseArrayEntry::getNonSparseMode(v29);
      JSC::WriteBarrierBase<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>::set((_QWORD *)(v24 + 8 * v30), (uint64_t)v13, (unint64_t)a1, NonSparseMode);
      while (v27 != v28)
      {
        if ((unint64_t)*v27 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_34;
        v27 += 3;
      }
      v27 = v28;
LABEL_34:
      ;
    }
    while (v27 != v23);
  }
  if ((a1[1] & 0xE) - 10 <= 3)
  {
    v34 = (_QWORD *)*((_QWORD *)a1 + 1);
    if (v34)
      *v34 = 0;
  }
  if (!*(_QWORD *)(v24 + 8 * a3))
    ++*(_DWORD *)(v21 + 12);
  *(_QWORD *)(v24 + 8 * a3) = a4;
  result = 1;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v13 + 190) >= *((unsigned __int8 *)a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, (unint64_t)a1);
    return 1;
  }
  return result;
}

BOOL JSC::JSObject::increaseVectorLength(JSC::JSObject *this, JSC::VM *a2, unsigned int a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  unint64_t v31;
  char *v32;
  int v33;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  char *v45;
  unint64_t v46;
  JSC::VM *v47;

  v5 = (unsigned int *)*((_QWORD *)this + 1);
  v6 = *(v5 - 1);
  v7 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
  if (v7 == 65534)
    goto LABEL_5;
  if (v7 == 0xFFFF)
    v7 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
  if (v7 < 64)
  {
LABEL_5:
    v8 = 0;
  }
  else if ((v7 - 63) >= 5)
  {
    v38 = (v7 - 64) | ((v7 - 64) >> 1) | (((v7 - 64) | ((v7 - 64) >> 1)) >> 2);
    v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    v8 = (v39 | HIWORD(v39)) + 1;
  }
  else
  {
    v8 = 4;
  }
  v9 = v5[2];
  v10 = v8 + v9;
  v11 = v8 + v9 + v6;
  v12 = 8 * v11;
  if (v11 > 7)
  {
    if (v11 > 0x3E9)
      v13 = v12 + 24;
    else
      v13 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v12 + 39) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v13 = (v12 + 39) & 0x3FFFFFFFF0;
  }
  v14 = (unint64_t)(v13 - 8 * v10 + 0x7FFFFFFE8) >> 3;
  if (v14 < a3)
  {
    if (a3 > 0x10000000 || a3 >> 5 >= 0xC35 && v5[3] < a3 >> 3)
      return 0;
    v15 = *((_BYTE *)this + 4) & 0xE;
    if ((*((_BYTE *)this + 4) & 0xE) != 0)
    {
      if (v15 - 10 <= 3)
        v15 = v5[2];
      else
        v15 = 0;
      LODWORD(v16) = *(v5 - 2);
      if (v16 >= 0x186A0)
        LODWORD(v16) = 100000;
      if (v16 > a3)
      {
LABEL_18:
        if (v16 >= 4)
          v17 = 4;
        else
          v17 = v16;
        JSC::lastArraySize = v17;
        v18 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
        v19 = *(unsigned __int16 *)(v18 + 0x18);
        if (v19 == 65534
          || (v19 == 0xFFFF
            ? (v20 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84))
            : (v20 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18)),
              v20 < 64))
        {
          v21 = 0;
        }
        else if ((v20 - 63) >= 5)
        {
          v40 = (v20 - 64) | ((v20 - 64) >> 1) | (((v20 - 64) | ((v20 - 64) >> 1)) >> 2);
          v41 = v40 | (v40 >> 4) | ((v40 | (v40 >> 4)) >> 8);
          v21 = (v41 | HIWORD(v41)) + 1;
        }
        else
        {
          v21 = 4;
        }
        if (v16 >= 0x10000000)
          LODWORD(v16) = 0x10000000;
        if (v16 <= 4)
          v16 = 4;
        else
          v16 = v16;
        v22 = v21 + (unint64_t)v15;
        v23 = v22 + v16;
        v24 = 8 * (v22 + v16);
        if (v23 > 7)
        {
          if (v23 > 0x3E9)
            v25 = v24 + 24;
          else
            v25 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v24 + 39) >> 2) & 0xFFFFFFFFCLL));
        }
        else
        {
          v25 = (v24 + 39) & 0x3FFFFFFFF0;
        }
        v26 = v25 - 8 * v22 + 0x7FFFFFFE8;
        v27 = v26 >> 3;
        if (!(_DWORD)v9)
        {
          ++*((_DWORD *)a2 + 229);
          if (v19 == 65534)
            goto LABEL_38;
          if (v19 == 0xFFFF)
            v19 = *(_DWORD *)(*(_QWORD *)(v18 + 64) + 84);
          if (v19 < 64)
          {
LABEL_38:
            v28 = 0;
          }
          else
          {
            v35 = (v19 - 64) | ((v19 - 64) >> 1) | (((v19 - 64) | ((v19 - 64) >> 1)) >> 2);
            v36 = v35 | (v35 >> 4) | ((v35 | (v35 >> 4)) >> 8);
            v37 = (v36 | HIWORD(v36)) + 1;
            if ((v19 - 63) >= 5)
              v28 = v37;
            else
              v28 = 4;
          }
          v29 = JSC::Butterfly::growArrayRight((JSC::Butterfly *)v5, a2, this, (JSC::Structure *)v18, v28, 1, 8 * v6 + 16, (v26 & 0x7FFFFFFF8) + 16);
          v30 = v29 != 0;
          if (!v29)
            goto LABEL_46;
          v31 = v29;
          if (v6 < v27)
            bzero((void *)(v29 + 8 * v6 + 16), 8 * (v27 + ~(_DWORD)v6) + 8);
          if (v27 < 0x10000001)
          {
            *(_DWORD *)(v31 - 4) = v27;
            v32 = (char *)a2 + 192;
            if (*((_BYTE *)a2 + 755))
            {
              __dmb(0xAu);
              *((_QWORD *)this + 1) = v31;
              if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v32, (unint64_t)this);
              __dmb(0xAu);
            }
            else
            {
              *((_QWORD *)this + 1) = v31;
              if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v32, (unint64_t)this);
            }
LABEL_46:
            v33 = *((_DWORD *)a2 + 229) - 1;
            *((_DWORD *)a2 + 229) = v33;
            if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v33)
            {
              *((_BYTE *)a2 + 1198) = 0;
              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
            }
            return v30;
          }
LABEL_90:
          __break(0xC471u);
          JUMPOUT(0x198A54D3CLL);
        }
        v47 = a2;
        ++*((_DWORD *)a2 + 229);
        if (0x10000000 - (int)v27 >= v9 >> 1)
          v42 = v9 >> 1;
        else
          v42 = (0x10000000 - v27);
        v43 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v18);
        v44 = JSC::Butterfly::resizeArray((JSC::Butterfly *)v5, a2, (JSC::JSObject *)v43, 1, 8 * v6 + 16, v42, 1, (v26 & 0x7FFFFFFF8) + 16, v46);
        v30 = v44 != 0;
        if (v44)
        {
          v45 = v44;
          if (v6 < v27)
            bzero(&v44[8 * v6 + 16], 8 * (v27 + ~(_DWORD)v6) + 8);
          if (v27 >= 0x10000001)
            goto LABEL_90;
          *((_DWORD *)v45 - 1) = v27;
          *((_DWORD *)v45 + 2) = v42;
          JSC::JSObject::setButterfly(this, a2, (JSC::Butterfly *)v45);
        }
        JSC::DeferGC::~DeferGC((JSC::DeferGC *)&v47);
        return v30;
      }
      if ((_DWORD)v6)
      {
        LODWORD(v16) = a3 + (a3 >> 1) + (a3 & 1);
        goto LABEL_18;
      }
    }
    LODWORD(v16) = JSC::lastArraySize;
    if (JSC::lastArraySize <= a3)
      LODWORD(v16) = a3;
    goto LABEL_18;
  }
  if (v6 < v14)
    bzero(&v5[2 * v6 + 4], 8 * (v14 + ~(_DWORD)v6) + 8);
  if (v14 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198A54D8CLL);
  }
  *(v5 - 1) = v14;
  return 1;
}

uint64_t JSC::JSObject::putDirectIndexBeyondVectorLengthWithArrayStorage(JSC::JSObject *this, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  JSC::VM *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  JSC::SparseArrayEntry *v31;
  uint64_t v32;
  uint64_t NonSparseMode;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  JSC::SparseArrayValueMap *v40;
  JSC::VM *v41;

  v8 = a6;
  v9 = a5;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v41 = v14;
  v15 = *(_QWORD *)a7;
  v16 = *(unsigned int *)(a7 - 8);
  if (!*(_QWORD *)a7)
  {
    if (v16 <= a3)
      *(_DWORD *)(a7 - 8) = a3 + 1;
    if (!(_DWORD)a5
      && *(_DWORD *)(a7 + 12) >= a3 >> 3
      && (a3 < 0x3E8 || *(_DWORD *)(a7 - 4) >= a3)
      && JSC::JSObject::increaseVectorLength(this, v14, a3 + 1))
    {
      v17 = *((_QWORD *)this + 1);
      *(_QWORD *)(v17 + 8 * a3 + 16) = a4;
      if (a4
        && (a4 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v14 + 190) >= *((unsigned __int8 *)this + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, (unint64_t)this);
      }
      ++*(_DWORD *)(v17 + 12);
      return 1;
    }
    v15 = JSC::SparseArrayValueMap::create(v14, a2, v16, a4, a5, a6, a7, a8);
    **((_QWORD **)this + 1) = v15;
    if (this && v15 && *((_DWORD *)v14 + 190) >= *((unsigned __int8 *)this + 7))
    {
      v34 = (uint64_t)v14 + 192;
      v35 = v15;
      JSC::Heap::writeBarrierSlowPath(v34, (unint64_t)this);
      v15 = v35;
    }
    return JSC::SparseArrayValueMap::putDirect(v15, (unint64_t)a2, this, a3, a4, v9, v8);
  }
  if (v16 <= a3)
  {
    if (!(_DWORD)a6)
    {
LABEL_49:
      LODWORD(v16) = a3 + 1;
      *(_DWORD *)(a7 - 8) = a3 + 1;
      goto LABEL_18;
    }
    if ((*(_BYTE *)(v15 + 16) & 2) != 0)
    {
      if ((_DWORD)a6 != 2)
        return 0;
      v36 = "Attempted to assign to readonly property.";
      v37 = (unint64_t)a2;
      v38 = 42;
    }
    else
    {
      if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x10) == 0)
        goto LABEL_49;
      if ((_DWORD)a6 != 2)
        return 0;
      v36 = "Attempting to define property on object that is not extensible.";
      v37 = (unint64_t)a2;
      v38 = 64;
    }
    JSC::throwTypeError(v37, &v41, (uint64_t)v36, v38);
    return 0;
  }
LABEL_18:
  v19 = *(_QWORD *)(v15 + 8);
  if (v19)
    LODWORD(v19) = *(_DWORD *)(v19 - 12);
  v20 = v19 + *(_DWORD *)(a7 + 12);
  if (*(_DWORD *)(v15 + 16) & 1 | a5)
    v21 = 1;
  else
    v21 = v16 >> 3 > v20;
  if (v21)
    return JSC::SparseArrayValueMap::putDirect(v15, (unint64_t)a2, this, a3, a4, v9, v8);
  v40 = (JSC::SparseArrayValueMap *)v15;
  v22 = JSC::JSObject::increaseVectorLength(this, v14, v16);
  v15 = (unint64_t)v40;
  if (!v22)
    return JSC::SparseArrayValueMap::putDirect(v15, (unint64_t)a2, this, a3, a4, v9, v8);
  v23 = *((_QWORD *)this + 1);
  *(_DWORD *)(v23 + 12) = v20;
  v24 = *((_QWORD *)v40 + 1);
  if (v24)
    v25 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
  else
    v25 = 0;
  v26 = v23 + 16;
  v27 = JSC::SparseArrayValueMap::begin(v40);
  if (v25 != v27)
  {
    v29 = v27;
    v30 = v28;
    do
    {
      v31 = (JSC::SparseArrayEntry *)(v29 + 1);
      v32 = *v29;
      v29 += 3;
      NonSparseMode = JSC::SparseArrayEntry::getNonSparseMode(v31);
      JSC::WriteBarrierBase<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>::set((_QWORD *)(v26 + 8 * v32), (uint64_t)v14, (unint64_t)this, NonSparseMode);
      while (v29 != v30)
      {
        if ((unint64_t)*v29 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_34;
        v29 += 3;
      }
      v29 = v30;
LABEL_34:
      ;
    }
    while (v29 != v25);
  }
  if ((*((_BYTE *)this + 4) & 0xEu) - 10 <= 3)
  {
    v39 = (_QWORD *)*((_QWORD *)this + 1);
    if (v39)
      *v39 = 0;
  }
  if (!*(_QWORD *)(v26 + 8 * a3))
    ++*(_DWORD *)(v23 + 12);
  *(_QWORD *)(v26 + 8 * a3) = a4;
  result = 1;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v14 + 190) >= *((unsigned __int8 *)this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, (unint64_t)this);
    return 1;
  }
  return result;
}

uint64_t JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(JSC::JSObject *this, unint64_t a2, JSC::VM *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  uint64_t v10;
  unint64_t v11;
  JSC::VM *v12;
  JSC::JSObject *v14;
  _BOOL4 v15;
  JSC::VM *v16;
  int v17;
  unsigned int v18;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t Slow;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  JSC::VM *v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *i;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v71;
  int v72;
  uint64_t (*v73)(JSC::JSObject *, unint64_t, WTF::StringImpl *, JSC::VM **, _BOOL8);
  WTF::StringImpl *v74;
  _BOOL8 v75;
  JSC::JSObject *v76;
  unint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  JSC::JSObject *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::JSObject *v90;
  JSC::VM *v91;
  uint64_t v92;
  unint64_t v93;
  JSC::VM *v94;
  char *v95;
  JSC::Butterfly *ArrayStorage;
  JSC::JSObject *v97;
  JSC::VM *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::VM *v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  BOOL v115;
  JSC::VM *v116;
  unsigned int v117;
  WTF::StringImpl *v118;
  char *v119;
  uint64_t v120;
  int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v143;
  WTF::StringImpl *v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  JSC::JSObject *v149;
  uint64_t v150;
  JSC::JSObject *v151;
  JSC::VM *v152;
  unsigned int v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  __n128 v163;
  JSC::Butterfly *v164;
  unsigned __int8 *v165;
  int v166;
  unint64_t v167;
  _OWORD *j;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  JSC::VM *v174;
  unint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  JSC::SparseArrayValueMap *v188;
  JSC::VM *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int32x4_t v206;
  uint64_t v207;
  int32x4_t v208;
  char *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  char *v214;
  JSC::VM *v215;
  WTF::StringImpl *v216;
  uint64_t v217;
  int v218;
  JSC::JSObject *v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  JSC::JSObject *v226;
  uint64_t v227;
  JSC::JSObject *v228;
  unsigned int v229;
  int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  __n128 v235;
  _BYTE *v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  JSC::VM *v244;
  char v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  JSC::SparseArrayValueMap *v250;
  JSC::VM *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v265;
  int v266;
  _BYTE *v267;
  JSC::VM *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  JSC::VM *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  WTF::StringImpl *v281;

  v10 = a5;
  v11 = a4;
  v12 = a3;
  v14 = this;
  *(double *)a9.i64 = (double)(int)a4;
  v15 = a4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL;
  v16 = *(JSC::VM **)(a2 + 56);
  v17 = *((unsigned __int8 *)this + 5);
  v18 = v17 - 33;
  v20 = (a4 & 0xFFFE000000000002) != 0 || a4 == 0;
  if ((a5 & 0x12) == 0 && v20)
  {
    if (v18 >= 3)
    {
      v21 = *((unsigned __int8 *)this + 4);
      v22 = v21 & 0xF;
      if (v22 - 3 >= 7)
      {
        if (v22 - 10 >= 4)
        {
          if (v22 >= 2)
            goto LABEL_122;
        }
        else
        {
          v71 = **((_QWORD **)this + 1);
          if (v71 && (*(_BYTE *)(v71 + 16) & 1) != 0)
            goto LABEL_114;
        }
      }
      v23 = (v21 >> 4) & 1;
      if (v17 != 36)
        LOBYTE(v23) = 1;
      v24 = v17 != 24 || this == 0;
      if (v24 && (v23 & 1) != 0)
        goto LABEL_114;
    }
    LOBYTE(v25) = *((_BYTE *)this + 4);
    if ((v25 & 0xF) - 8 < 2)
    {
      if (!(_DWORD)a5)
      {
        v16 = *(JSC::VM **)(a2 + 56);
        goto LABEL_22;
      }
LABEL_255:
      ArrayStorage = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
      v97 = v14;
      v98 = (JSC::VM *)a2;
      goto LABEL_256;
    }
    switch(*((_BYTE *)this + 4) & 0xF)
    {
      case 0:
      case 1:
LABEL_224:
        if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x12) & 0x10) != 0
          || v10 | *(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x100)
        {
          goto LABEL_255;
        }
        if (v12 >= 0x3E8)
        {
          ArrayStorage = JSC::JSObject::createArrayStorage((JSC::Butterfly **)v14, v16, 0, 0, (__n128)a9);
LABEL_133:
          v97 = v14;
          v98 = (JSC::VM *)a2;
          goto LABEL_134;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 8) & 0x20) != 0)
          goto LABEL_235;
        v148 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
        v149 = v14;
        while (2)
        {
          v150 = *(_QWORD *)(v148 + 40);
          if (!v150 || *(_BYTE *)(*(_QWORD *)(v150 + 2048) + 4) != 2)
          {
            v151 = *(JSC::JSObject **)(v148 + 48);
            if (!v151)
              v151 = (JSC::JSObject *)*((_QWORD *)v149 + 2);
            if (v151 != (JSC::JSObject *)2)
            {
              v148 = 16 * (*(_DWORD *)v151 & 0xFFFFFFFE);
              v149 = v151;
              if ((*(_BYTE *)(v148 + 8) & 0x20) != 0)
                break;
              continue;
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) + 2048) + 4) != 2)
            {
              v165 = (unsigned __int8 *)v14;
              v166 = (int)v12;
              v167 = v11;
              goto LABEL_254;
            }
          }
          break;
        }
LABEL_235:
        v152 = v16;
        v153 = v12;
        v154 = v11;
        v155 = v153 + 1;
        v156 = JSC::lastArraySize;
        v157 = v153;
        if (v153 + 1 > JSC::lastArraySize)
          v156 = v153 + 1;
        if (v156 >= 4)
          v158 = 4;
        else
          v158 = v156;
        JSC::lastArraySize = v158;
        v159 = *(unsigned __int16 *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x18);
        if (v159 == 65534)
          goto LABEL_244;
        if (v159 == 0xFFFF)
          v159 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40) + 84);
        if (v159 < 64)
        {
LABEL_244:
          v160 = 0;
        }
        else if ((v159 - 63) >= 5)
        {
          v210 = (v159 - 64) | ((v159 - 64) >> 1) | (((v159 - 64) | ((v159 - 64) >> 1)) >> 2);
          v211 = v210 | (v210 >> 4) | ((v210 | (v210 >> 4)) >> 8);
          v160 = (v211 | HIWORD(v211)) + 1;
        }
        else
        {
          v160 = 4;
        }
        if (v156 >= 0x10000000)
          v161 = 0x10000000;
        else
          v161 = v156;
        v162 = JSC::ArrayStorage::optimalVectorLength(0, v160, v161);
        v164 = JSC::JSObject::createArrayStorage((JSC::Butterfly **)v14, v152, v155, v162, v163);
        *((_QWORD *)v164 + v157 + 2) = v154;
        if (v14 && v154 && (v154 & 0xFFFE000000000002) == 0)
          goto LABEL_383;
LABEL_251:
        ++*((_DWORD *)v164 + 3);
        return 1;
      case 3:
LABEL_73:
        JSC::JSObject::convertUndecidedForValue((unint64_t)v14, v16, v11, a4, a5, a6, a7, a8, *(double *)a9.i64);
        v58 = (unint64_t)v14;
        v59 = a2;
        return JSC::JSObject::putDirectIndex(v58, v59, v12, v11, v10, a6, v55, v56, v57);
      case 4:
      case 5:
        if ((_DWORD)a5)
          goto LABEL_255;
        if (a4 > 0xFFFDFFFFFFFFFFFFLL)
        {
LABEL_125:
          v86 = v14;
          v87 = a2;
          v88 = (uint64_t)v12;
          v89 = v11;
LABEL_126:
          JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>(v86, v87, v88, v89, a5, a6, a7, a8, a9);
          return 1;
        }
        if (BYTE1(dword_1ECF4C5C0))
          v111 = a4 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL;
        else
          v111 = 1;
        if (v111)
LABEL_417:
          JSC::JSObject::convertInt32ToContiguous(this, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
        else
LABEL_457:
          JSC::JSObject::convertInt32ToDouble(this, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
        goto LABEL_96;
      case 6:
      case 7:
        if ((_DWORD)a5)
          goto LABEL_255;
        if (!(a4 >> 49))
        {
          JSC::JSObject::convertDoubleToContiguous(this, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
LABEL_96:
          while (2)
          {
            v16 = *(JSC::VM **)(a2 + 56);
            v66 = *((unsigned __int8 *)v14 + 5);
            v25 = *((unsigned __int8 *)v14 + 4);
            v67 = v25 & 0xF;
            if ((v66 - 33) < 3)
              goto LABEL_108;
            if (v67 - 3 < 7)
              goto LABEL_98;
            if (v67 - 10 < 4)
            {
              v146 = **((_QWORD **)v14 + 1);
              if (v146 && (*(_BYTE *)(v146 + 16) & 1) != 0)
              {
LABEL_215:
                LODWORD(v10) = 0;
LABEL_114:
                v276 = 0;
                v277 = 0;
                v278 = 0;
                v279 = v10 & 0xFFFFFFBF;
                if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 5)
                {
                  v279 = v10 & 0xFFFFFFBD;
                  v240 = *(_QWORD *)(v11 + 8);
                  v241 = *(_QWORD *)(v11 + 16);
                  if (&JSC::NullGetterFunction::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v240 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
                    v240 = 10;
                  v277 = v240;
                  if (*(_BYTE *)(v241 + 5) != 28 || v241 == 0)
                    v243 = v241;
                  else
                    v243 = 10;
                  v278 = v243;
                  v72 = 6;
                }
                else
                {
                  v276 = (JSC::VM *)v11;
                  v72 = 7;
                }
                v280 = v72;
                v73 = *(uint64_t (**)(JSC::JSObject *, unint64_t, WTF::StringImpl *, JSC::VM **, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0x90);
                JSC::Identifier::from((uint64_t **)v16, (unint64_t)v12, a3, a4, a5, a6, a7, a8, (int **)&v281);
                v74 = v281;
                v75 = (_DWORD)a6 == 2;
                v76 = v14;
                v77 = a2;
LABEL_118:
                v53 = v73(v76, v77, v74, &v276, v75);
                v85 = v281;
                v281 = 0;
                if (v85)
                {
                  if (*(_DWORD *)v85 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
                    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
                  }
                  else
                  {
                    *(_DWORD *)v85 -= 2;
                  }
                }
                return v53;
              }
              goto LABEL_98;
            }
            if (v67 < 2)
            {
LABEL_98:
              v68 = (v25 >> 4) & 1;
              if (v66 != 36)
                v68 = 1;
              if ((v66 != 24 || v14 == 0) && v68 != 0)
                goto LABEL_215;
LABEL_108:
              if (v67 - 8 >= 2)
              {
                switch(v25 & 0xF)
                {
                  case 0u:
                  case 1u:
                    v10 = 0;
                    goto LABEL_224;
                  case 3u:
                    v10 = 0;
                    goto LABEL_73;
                  case 4u:
                  case 5u:
                    if (v11 > 0xFFFDFFFFFFFFFFFFLL)
                      goto LABEL_125;
                    this = v14;
                    if (BYTE1(dword_1ECF4C5C0))
                      v245 = v15;
                    else
                      v245 = 1;
                    if ((v245 & 1) != 0)
                      goto LABEL_417;
                    goto LABEL_457;
                  case 6u:
                  case 7u:
                    if (v11 >> 49)
                      goto LABEL_127;
                    JSC::JSObject::convertDoubleToContiguous(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
                    continue;
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0xDu:
                    goto LABEL_132;
                  default:
                    goto LABEL_344;
                }
              }
LABEL_22:
              v281 = v16;
              if ((v25 & 0x10) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x198A55B70);
              }
              if (v12 >> 28)
                goto LABEL_315;
              v26 = (char *)*((_QWORD *)v14 + 1);
              if (v12 >> 5 < 0xC35)
              {
LABEL_25:
                v27 = *((unsigned int *)v26 - 1);
                if (v12 < 0x3E8 || v27 >= v12)
                {
                  v28 = (_DWORD)v12 + 1;
                  if (v27 > v12)
                  {
LABEL_66:
                    if (*((_DWORD *)v26 - 2) <= v12)
                    {
                      *((_DWORD *)v26 - 2) = v28;
                      v26 = (char *)*((_QWORD *)v14 + 1);
                    }
                    if (*((_DWORD *)v26 - 1) <= v12)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198A55B90);
                    }
                    *(_QWORD *)&v26[8 * v12] = v11;
                    return 1;
                  }
                  v29 = *(unsigned __int16 *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x18);
                  if (v29 == 65534)
                    goto LABEL_32;
                  if (v29 == 0xFFFF)
                    v29 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40) + 84);
                  if (v29 < 64)
                  {
LABEL_32:
                    v30 = 0;
                  }
                  else if ((v29 - 63) >= 5)
                  {
                    v64 = (v29 - 64) | ((v29 - 64) >> 1) | (((v29 - 64) | ((v29 - 64) >> 1)) >> 2);
                    v65 = v64 | (v64 >> 4) | ((v64 | (v64 >> 4)) >> 8);
                    v30 = (v65 | HIWORD(v65)) + 1;
                  }
                  else
                  {
                    v30 = 4;
                  }
                  v276 = v16;
                  LOBYTE(v277) = 0;
                  v31 = 8 * v30 + 8;
                  v32 = v27 + v30;
                  v33 = 8 * v32;
                  v34 = 8 * v32 + 8;
                  v273 = a2;
                  if (v32 > 9)
                  {
                    if (v32 > 0x3EB)
                      v35 = 8 * v32 + 8;
                    else
                      v35 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                            + (((unint64_t)(v33 + 23) >> 2) & 0x7FFFFFFFCLL));
                  }
                  else
                  {
                    v35 = (v33 + 23) & 0x1FFFFFFFF0;
                  }
                  v36 = (unint64_t)(v35 - v31) >> 3;
                  if (v36 > v12)
                  {
                    v50 = 0;
                  }
                  else
                  {
                    v274 = (int)v12;
                    v12 = (JSC::VM *)v11;
                    v37 = v30;
                    v38 = 2 * v28;
                    if ((2 * v28) >= 0x10000000)
                      v38 = 0x10000000;
                    if (v38 <= 3)
                      v38 = 3;
                    v39 = v31 + 8 * v38;
                    if (v39 > 0x50)
                    {
                      if (v39 <= 0x1F60)
                        v39 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                              + (((v39 + 15) >> 2) & 0xFFFFFFFFCLL));
                    }
                    else
                    {
                      v39 = (v39 + 15) & 0x3FFFFFFFF0;
                    }
                    v40 = v39 - v31;
                    v36 = v40 >> 3;
                    v41 = &v26[-8 * v37];
                    v42 = v41 - 8;
                    v43 = (v40 & 0x7FFFFFFF8) + v31;
                    v44 = (uint64_t)v16 + 6648;
                    if ((_DWORD)v37 || *((_BYTE *)v16 + 755) || (v42 & 8) == 0)
                    {
                      if (v43 <= 0x1F60
                        && (v45 = *(_QWORD *)((char *)v16 + (((v43 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
                      {
                        v46 = *(unsigned int *)(v45 + 60);
                        Slow = *(_QWORD *)(v45 + 24);
                        if (Slow >= *(_QWORD *)(v45 + 32))
                        {
                          Slow = *(_QWORD *)(v45 + 40);
                          if ((Slow & 1) == 0)
                          {
                            v147 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v45 + 48);
                            *(_QWORD *)(v45 + 32) = Slow + HIDWORD(v147);
                            *(_QWORD *)(v45 + 40) = Slow + (int)v147;
                            *(_QWORD *)(v45 + 24) = Slow + v46;
                            goto LABEL_50;
                          }
                          v272 = v28;
                          v236 = (char *)v16 + 192;
                          v268 = v16;
                          v271 = v27;
                          v237 = *(unsigned int *)(v45 + 60);
                          JSC::sanitizeStackForVM(v16, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
                          v238 = v236;
                          v28 = v272;
                          v239 = v237;
                          v27 = v271;
                          Slow = JSC::LocalAllocator::allocateSlowCase(v45, v238, v239, &v276, 1);
                          v16 = v268;
                        }
                        else
                        {
                          *(_QWORD *)(v45 + 24) = Slow + v46;
                        }
                      }
                      else
                      {
                        v110 = v16;
                        Slow = JSC::CompleteSubspace::tryAllocateSlow(v44, v16, v43, (uint64_t)&v276, a5, a6, a7, a8);
                        v16 = v110;
                      }
                      if (Slow)
                      {
LABEL_50:
                        if (v32 > 0x1D)
                        {
                          for (i = (_OWORD *)Slow; i != (_OWORD *)((v34 & 0x1FFFFFFFE0) + Slow); i += 2)
                          {
                            v61 = *(_OWORD *)v42;
                            v62 = *((_OWORD *)v42 + 1);
                            v42 += 32;
                            *i = v61;
                            i[1] = v62;
                          }
                          while (i != (_OWORD *)(v34 + Slow))
                          {
                            v63 = *(_QWORD *)v42;
                            v42 += 8;
                            *(_QWORD *)i = v63;
                            i = (_OWORD *)((char *)i + 8);
                          }
                        }
                        else
                        {
                          v48 = 0;
                          v49 = 1;
                          do
                          {
                            *(_QWORD *)(Slow + 8 * v48) = *(_QWORD *)&v42[8 * v48];
                            v48 = v49++;
                          }
                          while (v34 >> 3 > v48);
                        }
                        v50 = Slow + 8 * v37 + 8;
                        v26 = (char *)v50;
                        v11 = (unint64_t)v12;
                        LODWORD(v12) = v274;
                        goto LABEL_54;
                      }
LABEL_389:
                      v52 = 0;
                      v11 = (unint64_t)v12;
                      LODWORD(v12) = v274;
                      goto LABEL_62;
                    }
                    v94 = v16;
                    v95 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v44, v16, (uint64_t)(v41 - 8), v43, (uint64_t)&v276, 1, a7, a8);
                    if (!v95)
                      goto LABEL_389;
                    v50 = (uint64_t)(v95 + 8);
                    v26 = v95 + 8;
                    v11 = (unint64_t)v12;
                    LODWORD(v12) = v274;
                    v16 = v94;
                  }
LABEL_54:
                  v51 = v16;
                  if ((*((_BYTE *)v14 + 4) & 0xE) == 6)
                  {
                    if (v27 < v36)
                      memset_pattern16(&v26[8 * v27], &memset_pattern_99, 8 * (v36 + ~(_DWORD)v27) + 8);
                  }
                  else if (v27 < v36)
                  {
                    bzero(&v26[8 * v27], 8 * (v36 + ~(_DWORD)v27) + 8);
                  }
                  if (v50)
                  {
                    if (v36 >= 0x10000001)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198A55BFCLL);
                    }
                    *((_DWORD *)v26 - 1) = v36;
                    __dmb(0xAu);
                    *((_QWORD *)v14 + 1) = v50;
                    if (*((_DWORD *)v51 + 190) >= *((unsigned __int8 *)v14 + 7))
                      JSC::Heap::writeBarrierSlowPath((uint64_t)v51 + 192, (unint64_t)v14);
                  }
                  else
                  {
                    __dmb(0xAu);
                    if (v36 >= 0x10000001)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198A55F24);
                    }
                    *((_DWORD *)v26 - 1) = v36;
                  }
                  v52 = 1;
LABEL_62:
                  if ((_BYTE)v277)
                    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v276 + 192, 0);
                  if (v52)
                  {
                    v26 = (char *)*((_QWORD *)v14 + 1);
                    goto LABEL_66;
                  }
                  goto LABEL_401;
                }
                goto LABEL_315;
              }
              v183 = *((unsigned int *)v26 - 2);
              if (!(_DWORD)v183)
              {
                v184 = 0;
                goto LABEL_314;
              }
              if (v183 >= 0xC)
              {
                v185 = *((_DWORD *)v26 - 2) & 7;
                v205 = v183 - 1;
                v206 = 0uLL;
                v207 = v183 & 0xFFFFFFF8;
                v208 = 0uLL;
                do
                {
                  v209 = &v26[8 * v205];
                  v206 = vsubq_s32(v206, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v209 - 8), *(int8x16_t *)(v209 - 8), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v209 - 24), *(int8x16_t *)(v209 - 24), 8uLL)))));
                  v208 = vsubq_s32(v208, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v209 - 40), *(int8x16_t *)(v209 - 40), 8uLL)), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v209 - 56), *(int8x16_t *)(v209 - 56), 8uLL)))));
                  v205 -= 8;
                  v207 -= 8;
                }
                while (v207);
                a9 = vaddq_s32(v208, v206);
                a9.i32[0] = vaddvq_s32(a9);
                v184 = a9.i32[0];
                if ((v183 & 0xFFFFFFF8) == v183)
                  goto LABEL_314;
              }
              else
              {
                v184 = 0;
                v185 = *((_DWORD *)v26 - 2);
              }
              v186 = v185 - 1;
              do
              {
                if (*(_QWORD *)&v26[8 * v186])
                  ++v184;
              }
              while ((unint64_t)v186--);
LABEL_314:
              if (v184 >= v12 >> 3)
                goto LABEL_25;
LABEL_315:
              v188 = v16;
              JSC::JSObject::ensureArrayStorageSlow(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
              v196 = JSC::SparseArrayValueMap::create(v188, v189, v190, v191, v192, v193, v194, v195);
              v197 = (unsigned __int8 *)v196;
              **((_QWORD **)v14 + 1) = v196;
              if (v14 && v196 && *((_DWORD *)v188 + 190) >= *((unsigned __int8 *)v14 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v188 + 192, (unint64_t)v14);
              JSC::SparseArrayValueMap::putEntry(v197, a2, (unsigned int *)v14, v12, v11, 0);
              if (!*((_DWORD *)v188 + 20))
              {
LABEL_318:
                *(_DWORD *)(*((_QWORD *)v14 + 1) - 8) = (_DWORD)v12 + 1;
                return 1;
              }
              v244 = v188;
LABEL_403:
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v244, v198, v199, v200, v201, v202, v203, v204))
                return 1;
              goto LABEL_318;
            }
            break;
          }
LABEL_122:
          __break(0xC471u);
          JUMPOUT(0x198A5573CLL);
        }
LABEL_127:
        v90 = v14;
        v91 = (JSC::VM *)a2;
        v92 = (uint64_t)v12;
        v93 = v11;
        break;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if ((_DWORD)a5)
          goto LABEL_255;
LABEL_132:
        ArrayStorage = (JSC::Butterfly *)*((_QWORD *)v14 + 1);
        goto LABEL_133;
      default:
LABEL_344:
        __break(0xC471u);
        JUMPOUT(0x198A56368);
    }
LABEL_128:
    JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>(v90, v91, v92, v93, a5, a6, a7, a8, (__n128)a9);
    return 1;
  }
  v273 = a2;
  if (v18 > 2)
  {
    v112 = *((unsigned __int8 *)this + 4);
    v113 = v112 & 0xF;
    if (v113 - 3 >= 7)
    {
      v118 = v16;
      v174 = a3;
      v175 = a4;
      if (v113 - 10 >= 4)
      {
        if (v113 > 1)
          goto LABEL_321;
      }
      else
      {
        v181 = **((_QWORD **)this + 1);
        if (v181 && (*(_BYTE *)(v181 + 16) & 1) != 0)
          goto LABEL_303;
      }
    }
    v114 = (v112 >> 4) & 1;
    if (v17 != 36)
      LOBYTE(v114) = 1;
    v115 = v17 != 24 || this == 0;
    if (v115 && (v114 & 1) != 0)
    {
      v118 = v16;
      v174 = a3;
      v175 = a4;
      goto LABEL_303;
    }
  }
  v116 = (JSC::VM *)v273;
  if ((a5 & 0x12) != 0)
  {
    v215 = v16;
    JSC::JSObject::notifyPresenceOfIndexedAccessors(this, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
    v16 = v215;
  }
  LOBYTE(v117) = *((_BYTE *)v14 + 4);
  if ((v117 & 0xF) - 8 < 2)
  {
    if ((_DWORD)v10)
    {
LABEL_343:
      ArrayStorage = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
      v97 = v14;
      v98 = (JSC::VM *)v273;
LABEL_256:
      v99 = v12;
      v100 = v11;
      goto LABEL_257;
    }
    v118 = *(WTF::StringImpl **)(v273 + 56);
LABEL_160:
    v281 = v118;
    if ((v117 & 0x10) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198A563C8);
    }
    if (v12 >> 28)
      goto LABEL_424;
    v119 = (char *)*((_QWORD *)v14 + 1);
    if (v12 >> 5 >= 0xC35)
    {
      v246 = *((unsigned int *)v119 - 2);
      if ((_DWORD)v246)
      {
        v247 = 0;
        v248 = v246 - 1;
        do
        {
          if (*(_QWORD *)&v119[8 * v248])
            ++v247;
        }
        while ((unint64_t)v248--);
      }
      else
      {
        v247 = 0;
      }
      if (v247 < v12 >> 3)
        goto LABEL_424;
    }
    v120 = *((unsigned int *)v119 - 1);
    if (v12 >= 0x3E8 && v120 < v12)
    {
LABEL_424:
      v250 = v118;
      JSC::JSObject::ensureArrayStorageSlow(v14, v118, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
      v258 = JSC::SparseArrayValueMap::create(v250, v251, v252, v253, v254, v255, v256, v257);
      v259 = (unsigned __int8 *)v258;
      **((_QWORD **)v14 + 1) = v258;
      if (v14 && v258 && *((_DWORD *)v250 + 190) >= *((unsigned __int8 *)v14 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v250 + 192, (unint64_t)v14);
      JSC::SparseArrayValueMap::putEntry(v259, v273, (unsigned int *)v14, v12, v11, 0);
      if (!*((_DWORD *)v250 + 20))
        goto LABEL_318;
      v244 = v250;
      goto LABEL_403;
    }
    v121 = (_DWORD)v12 + 1;
    if (v120 > v12)
    {
LABEL_204:
      if (*((_DWORD *)v119 - 2) <= v12)
      {
        *((_DWORD *)v119 - 2) = v121;
        v119 = (char *)*((_QWORD *)v14 + 1);
      }
      if (*((_DWORD *)v119 - 1) <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198A563E8);
      }
      *(_QWORD *)&v119[8 * v12] = v11;
      if (v11
        && (v11 & 0xFFFE000000000002) == 0
        && *((_DWORD *)v118 + 190) >= *((unsigned __int8 *)v14 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v118 + 192, (unint64_t)v14);
      }
      return 1;
    }
    v122 = *(unsigned __int16 *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x18);
    if (v122 == 65534)
      goto LABEL_170;
    if (v122 == 0xFFFF)
      v122 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40) + 84);
    if (v122 <= 63)
    {
LABEL_170:
      v123 = 0;
    }
    else if ((v122 - 63) >= 5)
    {
      v172 = (v122 - 64) | ((v122 - 64) >> 1) | (((v122 - 64) | ((v122 - 64) >> 1)) >> 2);
      v173 = v172 | (v172 >> 4) | ((v172 | (v172 >> 4)) >> 8);
      v123 = (v173 | HIWORD(v173)) + 1;
    }
    else
    {
      v123 = 4;
    }
    v276 = v118;
    LOBYTE(v277) = 0;
    v124 = 8 * v123 + 8;
    v125 = v120 + v123;
    v126 = 8 * v125;
    v127 = 8 * v125 + 8;
    if (v125 > 9)
    {
      if (v125 > 0x3EB)
        v128 = 8 * v125 + 8;
      else
        v128 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                               + (((unint64_t)(v126 + 23) >> 2) & 0x7FFFFFFFCLL));
    }
    else
    {
      v128 = (v126 + 23) & 0x1FFFFFFFF0;
    }
    v275 = v11;
    v129 = (unint64_t)(v128 - v124) >> 3;
    if (v129 > v12)
    {
      v143 = 0;
    }
    else
    {
      v130 = v123;
      v131 = 2 * v121;
      if ((2 * v121) >= 0x10000000)
        v131 = 0x10000000;
      if (v131 <= 3)
        v131 = 3;
      v132 = v124 + 8 * v131;
      if (v132 > 0x50)
      {
        if (v132 <= 0x1F60)
          v132 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                 + (((v132 + 15) >> 2) & 0xFFFFFFFFCLL));
      }
      else
      {
        v132 = (v132 + 15) & 0x3FFFFFFFF0;
      }
      v133 = v132 - v124;
      v129 = v133 >> 3;
      v134 = &v119[-8 * v130];
      v135 = v134 - 8;
      v136 = (v133 & 0x7FFFFFFF8) + v124;
      v137 = (uint64_t)v118 + 6648;
      if ((_DWORD)v130 || *((_BYTE *)v118 + 755) || (v135 & 8) == 0)
      {
        if (v136 <= 0x1F60 && (v138 = *(_QWORD *)((char *)v118 + (((v136 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
        {
          v139 = *(_QWORD *)(v138 + 24);
          if (v139 >= *(_QWORD *)(v138 + 32))
          {
            v270 = *(unsigned int *)(v138 + 60);
            v222 = v120;
            v139 = *(_QWORD *)(v138 + 40);
            if ((v139 & 1) == 0)
            {
              v223 = *(_QWORD *)(v139 + 8) ^ *(_QWORD *)(v138 + 48);
              *(_QWORD *)(v138 + 32) = v139 + HIDWORD(v223);
              *(_QWORD *)(v138 + 40) = v139 + (int)v223;
              v127 = 8 * v125 + 8;
              *(_QWORD *)(v138 + 24) = v139 + v270;
              goto LABEL_188;
            }
            v267 = (char *)v118 + 192;
            v269 = v118;
            JSC::sanitizeStackForVM(v118, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
            v139 = JSC::LocalAllocator::allocateSlowCase(v138, v267, v270, &v276, 1);
            v118 = v269;
            v120 = v222;
            v127 = 8 * v125 + 8;
          }
          else
          {
            *(_QWORD *)(v138 + 24) = v139 + *(unsigned int *)(v138 + 60);
          }
        }
        else
        {
          v216 = v118;
          v217 = v120;
          v139 = JSC::CompleteSubspace::tryAllocateSlow(v137, v118, v136, (uint64_t)&v276, a5, a6, a7, a8);
          v127 = 8 * v125 + 8;
          v118 = v216;
          v120 = v217;
        }
        if (v139)
        {
LABEL_188:
          if (v125 > 0x1D)
          {
            for (j = (_OWORD *)v139; j != (_OWORD *)((v127 & 0x1FFFFFFFE0) + v139); j += 2)
            {
              v169 = *(_OWORD *)v135;
              v170 = *((_OWORD *)v135 + 1);
              v135 += 32;
              *j = v169;
              j[1] = v170;
            }
            while (j != (_OWORD *)(v127 + v139))
            {
              v171 = *(_QWORD *)v135;
              v135 += 8;
              *(_QWORD *)j = v171;
              j = (_OWORD *)((char *)j + 8);
            }
          }
          else
          {
            v140 = 0;
            v141 = 1;
            do
            {
              *(_QWORD *)(v139 + 8 * v140) = *(_QWORD *)&v135[8 * v140];
              v140 = v141;
            }
            while (v127 >> 3 > v141++);
          }
          v143 = v139 + 8 * v130 + 8;
          v119 = (char *)v143;
          goto LABEL_192;
        }
        v145 = 0;
        v11 = v275;
LABEL_200:
        if ((_BYTE)v277)
        {
          v221 = v118;
          JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v276 + 192, 0);
          v118 = v221;
        }
        if (!v145)
        {
LABEL_401:
          JSC::throwOutOfMemoryError(v273, &v281);
          return 1;
        }
        v119 = (char *)*((_QWORD *)v14 + 1);
        goto LABEL_204;
      }
      v212 = v120;
      v213 = v118;
      v214 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v137, v118, (uint64_t)(v134 - 8), v136, (uint64_t)&v276, 1, a7, a8);
      if (!v214)
      {
        v145 = 0;
        v11 = v275;
        v118 = v213;
        goto LABEL_200;
      }
      v143 = (uint64_t)(v214 + 8);
      v119 = v214 + 8;
      v120 = v212;
      v118 = v213;
    }
LABEL_192:
    v144 = v118;
    v11 = v275;
    if ((*((_BYTE *)v14 + 4) & 0xE) == 6)
    {
      if (v120 < v129)
        memset_pattern16(&v119[8 * v120], &memset_pattern_99, 8 * (v129 + ~(_DWORD)v120) + 8);
    }
    else if (v120 < v129)
    {
      bzero(&v119[8 * v120], 8 * (v129 + ~(_DWORD)v120) + 8);
    }
    if (v143)
    {
      if (v129 >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x198A56424);
      }
      v118 = v144;
      *((_DWORD *)v119 - 1) = v129;
      __dmb(0xAu);
      *((_QWORD *)v14 + 1) = v143;
      if (*((_DWORD *)v144 + 190) >= *((unsigned __int8 *)v14 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v144 + 192, (unint64_t)v14);
        v118 = v144;
      }
      v145 = 1;
    }
    else
    {
      __dmb(0xAu);
      if (v129 >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x198A5673CLL);
      }
      *((_DWORD *)v119 - 1) = v129;
      v145 = 1;
      v11 = v275;
      v118 = v144;
    }
    goto LABEL_200;
  }
  switch(*((_BYTE *)v14 + 4) & 0xF)
  {
    case 0:
    case 1:
LABEL_356:
      v152 = v16;
      v224 = v11;
      if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x12) & 0x10) != 0
        || v10 | *(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x100)
      {
        ArrayStorage = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
        v97 = v14;
        v98 = (JSC::VM *)v273;
        v99 = v12;
        v100 = v11;
        goto LABEL_257;
      }
      if (v12 < 0x3E8)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 8) & 0x20) == 0)
        {
          v225 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v226 = v14;
          while (1)
          {
            v227 = *(_QWORD *)(v225 + 40);
            if (v227 && *(_BYTE *)(*(_QWORD *)(v227 + 2048) + 4) == 2)
              goto LABEL_367;
            v228 = *(JSC::JSObject **)(v225 + 48);
            if (!v228)
              v228 = (JSC::JSObject *)*((_QWORD *)v226 + 2);
            if (v228 == (JSC::JSObject *)2)
              break;
            v225 = 16 * (*(_DWORD *)v228 & 0xFFFFFFFE);
            v226 = v228;
            if ((*(_BYTE *)(v225 + 8) & 0x20) != 0)
              goto LABEL_367;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) + 2048) + 4) != 2)
          {
            v165 = (unsigned __int8 *)v14;
            v166 = (int)v12;
            v167 = v11;
LABEL_254:
            JSC::JSObject::createInitialForValueAndSet(v165, v16, v166, v167, (__n128)a9);
            return 1;
          }
        }
LABEL_367:
        v229 = JSC::lastArraySize;
        if ((int)v12 + 1 > JSC::lastArraySize)
          v229 = (_DWORD)v12 + 1;
        if (v229 >= 4)
          v230 = 4;
        else
          v230 = v229;
        JSC::lastArraySize = v230;
        v231 = *(unsigned __int16 *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x18);
        if (v231 == 65534)
          goto LABEL_376;
        if (v231 == 0xFFFF)
          v231 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40) + 84);
        if (v231 <= 63)
        {
LABEL_376:
          v232 = 0;
        }
        else if ((v231 - 63) >= 5)
        {
          v260 = (v231 - 64) | ((v231 - 64) >> 1) | (((v231 - 64) | ((v231 - 64) >> 1)) >> 2);
          v261 = v260 | (v260 >> 4) | ((v260 | (v260 >> 4)) >> 8);
          v232 = (v261 | HIWORD(v261)) + 1;
        }
        else
        {
          v232 = 4;
        }
        if (v229 >= 0x10000000)
          v233 = 0x10000000;
        else
          v233 = v229;
        v234 = JSC::ArrayStorage::optimalVectorLength(0, v232, v233);
        v164 = JSC::JSObject::createArrayStorage((JSC::Butterfly **)v14, v152, (int)v12 + 1, v234, v235);
        *((_QWORD *)v164 + v12 + 2) = v224;
        if (v14 && v224 && (v224 & 0xFFFE000000000002) == 0)
        {
LABEL_383:
          if (*((_DWORD *)v152 + 190) >= *((unsigned __int8 *)v14 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v152 + 192, (unint64_t)v14);
        }
        goto LABEL_251;
      }
      ArrayStorage = JSC::JSObject::createArrayStorage((JSC::Butterfly **)v14, v16, 0, 0, (__n128)a9);
      v97 = v14;
      v98 = (JSC::VM *)v273;
      v99 = v12;
      v100 = v11;
LABEL_135:
      v101 = 0;
      return JSC::JSObject::putDirectIndexBeyondVectorLengthWithArrayStorage(v97, v98, v99, v100, v101, a6, (uint64_t)ArrayStorage, a8);
    case 3:
LABEL_219:
      JSC::JSObject::convertUndecidedForValue((unint64_t)v14, v16, v11, a4, a5, a6, a7, a8, *(double *)a9.i64);
      v58 = (unint64_t)v14;
      v59 = (uint64_t)v116;
      return JSC::JSObject::putDirectIndex(v58, v59, v12, v11, v10, a6, v55, v56, v57);
    case 4:
    case 5:
      v174 = v12;
      v175 = v11;
      if ((_DWORD)v10)
        goto LABEL_431;
      if (v11 >= 0xFFFE000000000000)
      {
LABEL_329:
        v86 = v14;
        v87 = v273;
        v88 = (uint64_t)v174;
        v89 = v175;
        goto LABEL_126;
      }
      if (BYTE1(dword_1ECF4C5C0))
        v218 = v15;
      else
        v218 = 1;
      v219 = v14;
      if (v218 == 1)
LABEL_453:
        JSC::JSObject::convertInt32ToContiguous(v219, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
      else
LABEL_459:
        JSC::JSObject::convertInt32ToDouble(v219, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
      goto LABEL_283;
    case 6:
    case 7:
      v174 = v12;
      v175 = v11;
      if (!(_DWORD)v10)
      {
        if (v11 >> 49)
        {
LABEL_330:
          v90 = v14;
          v91 = (JSC::VM *)v273;
          v92 = (uint64_t)v174;
          v93 = v175;
          goto LABEL_128;
        }
        JSC::JSObject::convertDoubleToContiguous(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
LABEL_283:
        while (2)
        {
          v118 = *(WTF::StringImpl **)(v273 + 56);
          v176 = *((unsigned __int8 *)v14 + 5);
          v117 = *((unsigned __int8 *)v14 + 4);
          v177 = v117 & 0xF;
          if ((v176 - 33) <= 2)
            goto LABEL_295;
          if (v177 - 3 < 7)
            goto LABEL_285;
          if (v177 - 10 < 4)
          {
            v220 = **((_QWORD **)v14 + 1);
            if (v220 && (*(_BYTE *)(v220 + 16) & 1) != 0)
            {
LABEL_349:
              LODWORD(v10) = 0;
LABEL_303:
              v276 = 0;
              v277 = 0;
              v278 = 0;
              v279 = v10 & 0xFFFFFFBF;
              if ((v175 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v175 + 5) == 5)
              {
                v279 = v10 & 0xFFFFFFBD;
                v262 = *(_QWORD *)(v175 + 8);
                v263 = *(_QWORD *)(v175 + 16);
                if (&JSC::NullGetterFunction::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v262 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
                  v262 = 10;
                v277 = v262;
                if (*(_BYTE *)(v263 + 5) != 28 || v263 == 0)
                  v265 = v263;
                else
                  v265 = 10;
                v278 = v265;
                v182 = 6;
              }
              else
              {
                v276 = (JSC::VM *)v175;
                v182 = 7;
              }
              v280 = v182;
              v73 = *(uint64_t (**)(JSC::JSObject *, unint64_t, WTF::StringImpl *, JSC::VM **, _BOOL8))(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) + 0x90);
              JSC::Identifier::from((uint64_t **)v118, (unint64_t)v174, a3, a4, a5, a6, a7, a8, (int **)&v281);
              v74 = v281;
              v75 = (_DWORD)a6 == 2;
              v76 = v14;
              v77 = v273;
              goto LABEL_118;
            }
            goto LABEL_285;
          }
          if (v177 < 2)
          {
LABEL_285:
            v178 = (v117 >> 4) & 1;
            if (v176 != 36)
              v178 = 1;
            if ((v176 != 24 || v14 == 0) && v178 != 0)
              goto LABEL_349;
LABEL_295:
            if (v177 - 8 >= 2)
            {
              v11 = v175;
              v116 = (JSC::VM *)v273;
              v12 = v174;
              v16 = *(JSC::VM **)(v273 + 56);
              switch(v117 & 0xF)
              {
                case 0u:
                case 1u:
                  v10 = 0;
                  goto LABEL_356;
                case 3u:
                  v10 = 0;
                  goto LABEL_219;
                case 4u:
                case 5u:
                  v175 = v11;
                  if (v11 > 0xFFFDFFFFFFFFFFFFLL)
                    goto LABEL_329;
                  if (BYTE1(dword_1ECF4C5C0))
                    v266 = v15;
                  else
                    v266 = 1;
                  v219 = v14;
                  v16 = *(JSC::VM **)(v273 + 56);
                  if (v266 == 1)
                    goto LABEL_453;
                  goto LABEL_459;
                case 6u:
                case 7u:
                  v175 = v11;
                  if (v11 >> 49)
                    goto LABEL_330;
                  JSC::JSObject::convertDoubleToContiguous(v14, *(JSC::VM **)(v273 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
                  continue;
                case 0xAu:
                case 0xBu:
                case 0xCu:
                case 0xDu:
                  goto LABEL_334;
                default:
                  goto LABEL_432;
              }
            }
            v11 = v175;
            LODWORD(v12) = (_DWORD)v174;
            goto LABEL_160;
          }
          break;
        }
LABEL_321:
        __break(0xC471u);
        JUMPOUT(0x198A56178);
      }
LABEL_431:
      ArrayStorage = JSC::JSObject::ensureArrayStorageExistsAndEnterDictionaryIndexingMode(v14, v16, (uint64_t)a3, a4, a5, a6, a7, a8, (__n128)a9);
      v97 = v14;
      v98 = (JSC::VM *)v273;
      v99 = v174;
      v100 = v175;
LABEL_257:
      v101 = v10;
      return JSC::JSObject::putDirectIndexBeyondVectorLengthWithArrayStorage(v97, v98, v99, v100, v101, a6, (uint64_t)ArrayStorage, a8);
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      if ((_DWORD)v10)
        goto LABEL_343;
LABEL_334:
      ArrayStorage = (JSC::Butterfly *)*((_QWORD *)v14 + 1);
      v97 = v14;
      v98 = v116;
LABEL_134:
      v99 = v12;
      v100 = v11;
      goto LABEL_135;
    default:
LABEL_432:
      __break(0xC471u);
      JUMPOUT(0x198A568D8);
  }
}

uint64_t JSC::JSObject::putDirectNativeIntrinsicGetter(uint64_t result, JSC::GetterSetter *a2, JSC::VM *a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50[2];
  int v51;
  int v52;
  uint64_t v53;

  v13 = (WTF::StringImpl *)result;
  v14 = *a4;
  if (*a4)
  {
    v15 = *(_DWORD *)(v14 + 4);
    *(_DWORD *)v14 += 2;
    if (v15 < 0 || (result = (v15 + 4), __OFADD__(v15, 4)))
    {
      v50[0] = 0;
      goto LABEL_23;
    }
    v16 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    v16 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(result, v16, (int8x16_t *)"get ", 4u, v14, (int **)v50);
  if (!v50[0])
  {
LABEL_23:
    __break(0xC471u);
    return result;
  }
  v24 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, v50, a5, 0, a6, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v25 = v50[0];
  v50[0] = 0;
  if (!v25)
    goto LABEL_9;
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
LABEL_9:
    if (v14)
      goto LABEL_10;
    goto LABEL_12;
  }
  WTF::StringImpl::~StringImpl(v25, v17, v18, v19, (uint64_t)v20, v21, v22, v23);
  WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
  if (v14)
  {
LABEL_10:
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v17, v18, v19, (uint64_t)v20, v21, v22, v23);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
LABEL_12:
  v26 = JSC::GetterSetter::create(a2, a3, v24, 0, v20, v21, v22, v23);
  v27 = *a4;
  v50[0] = 0;
  v50[1] = v13;
  v51 = -1;
  v28.n128_u64[0] = 0x100000001000000;
  v52 = 0x1000000;
  v53 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v13, (uint64_t)a2, v27, v26, a7, (uint64_t)v50, v29, v30, v28);
  v32 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x10);
  if ((a7 & 2) != 0)
    v32 |= 0x10u;
  result = v31 == 0;
  if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 16) == v27)
    v33 = 8;
  else
    v33 = 24;
  *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x10) = v33 | v32;
  return result;
}

void JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition(unsigned int *a1, JSC::GetterSetter *a2, JSC::VM *a3, unint64_t *a4, uint64_t a5, int a6, const JSC::PropertyTable *a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;

  v14 = *a4;
  if (*a4)
  {
    v15 = *(_DWORD *)(v14 + 4);
    *(_DWORD *)v14 += 2;
    if (v15 < 0 || (v16 = (v15 + 4), __OFADD__(v15, 4)))
    {
      v48 = 0;
      goto LABEL_17;
    }
    v17 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    v17 = 1;
    v16 = 4;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v16, v17, (int8x16_t *)"get ", 4u, v14, (int **)&v48);
  if (!v48)
  {
LABEL_17:
    __break(0xC471u);
    return;
  }
  v25 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v48, a5, 0, a6, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v26 = v48;
  v48 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, (uint64_t)v21, v22, v23, v24);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v18, v19, v20, (uint64_t)v21, v22, v23, v24);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v27 = JSC::GetterSetter::create(a2, a3, v25, 0, v21, v22, v23, v24);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition(a1, (uint64_t)a2, *a4, v27, a7, v28, v29, v30, v31);
}

BOOL JSC::JSObject::putDirectNativeFunction(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned int a9)
{
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34[2];
  int v35;
  int v36;
  uint64_t v37;

  v12 = (WTF::StringImpl *)*a4;
  if (*a4 && (*((_BYTE *)v12 + 16) & 0x20) == 0
    || (v12 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 41952) + 872)) != 0)
  {
    *(_DWORD *)v12 += 2;
  }
  v34[0] = v12;
  v20 = JSC::JSFunction::create(a2, a3, a5, v34, a6, a7, a8, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v34[0];
  v34[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v23 = *a4;
  v34[0] = 0;
  v34[1] = a1;
  v35 = -1;
  v21.n128_u64[0] = 0x100000001000000;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, a2, v23, v20, a9, (uint64_t)v34, v18, v19, v21);
  return v24 == 0;
}

BOOL JSC::JSObject::putDirectNativeFunction(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10)
{
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35[2];
  int v36;
  int v37;
  uint64_t v38;

  v13 = (WTF::StringImpl *)*a4;
  if (*a4 && (*((_BYTE *)v13 + 16) & 0x20) == 0
    || (v13 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 41952) + 872)) != 0)
  {
    *(_DWORD *)v13 += 2;
  }
  v35[0] = v13;
  v21 = JSC::JSFunction::create(a2, a3, a5, v35, a6, a7, a8, (unint64_t)JSC::callHostFunctionAsConstructor, a9);
  v23 = v35[0];
  v35[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *a4;
  v35[0] = 0;
  v35[1] = a1;
  v36 = -1;
  v22.n128_u64[0] = 0x100000001000000;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, a2, v24, v21, a10, (uint64_t)v35, v19, v20, v22);
  return v25 == 0;
}

void JSC::JSObject::putDirectNativeFunctionWithoutTransition(JSC::JSObject *a1, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned int a9)
{
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v12 = (WTF::StringImpl *)*a4;
  if (*a4 && (*((_BYTE *)v12 + 16) & 0x20) == 0
    || (v12 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 41952) + 872)) != 0)
  {
    *(_DWORD *)v12 += 2;
  }
  v31 = v12;
  v20 = JSC::JSFunction::create(a2, a3, a5, &v31, a6, a7, a8, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *a4, v20, a9, v17, v18, v19, v21);
}

uint64_t JSC::JSObject::putDirectBuiltinFunction(int *a1, uint64_t a2, _DWORD *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  int v19;
  int v20;
  uint64_t v21;

  v12 = JSC::JSFunction::create(a2, a5, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = *a4;
  v18[0] = 0;
  v18[1] = a1;
  v19 = -1;
  v14.n128_u64[0] = 0x100000001000000;
  v20 = 0x1000000;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, v13, v12, a6, (uint64_t)v18, v15, v16, v14);
  return v12;
}

uint64_t JSC::JSObject::countElements(JSC::JSObject *this)
{
  int v1;
  uint64_t result;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v1 = *((_BYTE *)this + 4) & 0xF;
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 4:
    case 5:
      v4 = *((_QWORD *)this + 1);
      v5 = *(_DWORD *)(v4 - 8);
      if (!v5)
        goto LABEL_20;
      LODWORD(result) = 0;
      v6 = v5 - 1;
      do
      {
        if (*(_QWORD *)(v4 + 8 * v6))
          result = (result + 1);
        else
          result = result;
      }
      while ((unint64_t)v6--);
      break;
    case 6:
    case 7:
      v8 = *(unsigned int *)(*((_QWORD *)this + 1) - 8);
      if (!(_DWORD)v8)
        goto LABEL_20;
      LODWORD(result) = 0;
      v9 = v8 - 1;
      do
        result = (result + 1);
      while ((unint64_t)v9--);
      break;
    case 8:
    case 9:
      v11 = *((_QWORD *)this + 1);
      v12 = *(_DWORD *)(v11 - 8);
      if (v12)
      {
        LODWORD(result) = 0;
        v13 = v12 - 1;
        do
        {
          if (*(_QWORD *)(v11 + 8 * v13))
            result = (result + 1);
          else
            result = result;
        }
        while ((unint64_t)v13--);
      }
      else
      {
LABEL_20:
        result = 0;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198A57298);
  }
  return result;
}

char *JSC::Butterfly::resizeArray(JSC::Butterfly *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t SlowCase;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v11 = a4;
  v14 = 8;
  if (!(_DWORD)a7)
    v14 = 0;
  v15 = v14 + a8;
  v16 = v14 + a8 + 8 * ((_QWORD)a3 + a6);
  if (v16 <= 0x1F60 && (v17 = *((_QWORD *)a2 + ((v16 + 15) >> 4) + 842)) != 0)
  {
    v18 = *(unsigned int *)(v17 + 60);
    SlowCase = *(_QWORD *)(v17 + 24);
    if (SlowCase < *(_QWORD *)(v17 + 32))
    {
LABEL_6:
      *(_QWORD *)(v17 + 24) = SlowCase + v18;
      goto LABEL_7;
    }
    SlowCase = *(_QWORD *)(v17 + 40);
    if ((SlowCase & 1) == 0)
    {
      v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v17 + 32) = SlowCase + HIDWORD(v35);
      *(_QWORD *)(v17 + 40) = SlowCase + (int)v35;
      goto LABEL_6;
    }
    v38 = v14 + a8;
    v36 = (char *)a2 + 192;
    JSC::sanitizeStackForVM(a2, a2, v16, a4, a5, a6, a7, a8);
    v37 = v36;
    v15 = v38;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v37, v18, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v16, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A57428);
    }
  }
LABEL_7:
  v20 = 8;
  if (!v11)
    v20 = 0;
  v21 = v20 + 8 * (_QWORD)a3 + a5;
  if (v15 + 8 * (uint64_t)a3 >= v21)
    v22 = v21;
  else
    v22 = v15 + 8 * (_QWORD)a3;
  if ((v22 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A57448);
  }
  v23 = (_OWORD *)(SlowCase + 8 * a6);
  v24 = (char *)v23 + 8 * (_QWORD)a3;
  v25 = (__int128 *)((char *)this - 8 * (_QWORD)a3 - 8);
  if (v22 > 0xF0)
  {
    v29 = v22 & 0xFFFFFFFFFFFFFFE0;
    v30 = (_OWORD *)((char *)v23 + v22);
    v31 = (_OWORD *)((char *)v23 + v29);
    while (v23 != v31)
    {
      v32 = *v25;
      v33 = v25[1];
      v25 += 2;
      *v23 = v32;
      v23[1] = v33;
      v23 += 2;
    }
    while (v23 != v30)
    {
      v34 = *(_QWORD *)v25;
      v25 = (__int128 *)((char *)v25 + 8);
      *(_QWORD *)v23 = v34;
      v23 = (_OWORD *)((char *)v23 + 8);
    }
  }
  else if (v22 >= 8)
  {
    v26 = v22 & 0xF8;
    do
    {
      v27 = *(_QWORD *)v25;
      v25 = (__int128 *)((char *)v25 + 8);
      *(_QWORD *)v23 = v27;
      v23 = (_OWORD *)((char *)v23 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  return v24 + 8;
}

uint64_t JSC::JSObject::ensureLengthSlow(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t SlowCase;
  uint64_t v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  _OWORD *i;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::VM *v56;
  char v57;

  v9 = a3;
  if ((*((_BYTE *)this + 4) & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v12 = *((_QWORD *)this + 1);
    if (*(_DWORD *)(v12 - 4) >= v9)
      return 1;
    v13 = *(_DWORD *)(v12 - 4);
  }
  else
  {
    v12 = *((_QWORD *)this + 1);
    v13 = *(_DWORD *)(v12 - 4);
  }
  v14 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
  if (v14 == 65534)
    goto LABEL_7;
  if (v14 == 0xFFFF)
    v14 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
  if (v14 < 64)
  {
LABEL_7:
    v15 = 0;
  }
  else if ((v14 - 63) >= 5)
  {
    v46 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
    v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
    v15 = (v47 | HIWORD(v47)) + 1;
  }
  else
  {
    v15 = 4;
  }
  v56 = a2;
  v57 = 0;
  v16 = v15;
  v17 = 8 * v15 + 8;
  v18 = v16 + v13;
  v19 = 8 * v18;
  v20 = 8 * v18 + 8;
  if (v18 > 9)
  {
    if (v18 > 0x3EB)
      v21 = 8 * v18 + 8;
    else
      v21 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v19 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v21 = (v19 + 23) & 0x1FFFFFFFF0;
  }
  v22 = (unint64_t)(v21 - v17) >> 3;
  if (v22 >= v9)
  {
    v39 = 0;
    goto LABEL_34;
  }
  v23 = 2 * v9;
  if (2 * v9 >= 0x10000000)
    v23 = 0x10000000;
  if (v23 <= 3)
    v24 = 3;
  else
    v24 = v23;
  v25 = 8 * v24;
  if (v23)
    v26 = v25;
  else
    v26 = 40;
  v27 = v17 + v26;
  if (v27 > 0x50)
  {
    if (v27 <= 0x1F60)
      v27 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v27 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v27 = (v27 + 15) & 0x3FFFFFFFF0;
  }
  v28 = v27 - v17;
  v22 = v28 >> 3;
  v29 = v12 - 8 * v16;
  v30 = (_OWORD *)(v29 - 8);
  v31 = (v28 & 0x7FFFFFFF8) + v17;
  v32 = (char *)a2 + 6648;
  if ((_DWORD)v16 || *((_BYTE *)a2 + 755) || (v30 & 8) == 0)
  {
    if (v31 <= 0x1F60 && (v33 = *(_QWORD *)((char *)a2 + (((v31 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v34 = *(unsigned int *)(v33 + 60);
      SlowCase = *(_QWORD *)(v33 + 24);
      if (SlowCase >= *(_QWORD *)(v33 + 32))
      {
        SlowCase = *(_QWORD *)(v33 + 40);
        if ((SlowCase & 1) == 0)
        {
          v49 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v33 + 48);
          *(_QWORD *)(v33 + 32) = SlowCase + HIDWORD(v49);
          *(_QWORD *)(v33 + 40) = SlowCase + (int)v49;
          *(_QWORD *)(v33 + 24) = SlowCase + v34;
          goto LABEL_29;
        }
        v55 = v16;
        v50 = *(unsigned int *)(v33 + 60);
        JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
        v51 = v50;
        v16 = v55;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v33, (uint64_t)a2 + 192, v51, (uint64_t)&v56, 1, v52, v53, v54);
      }
      else
      {
        *(_QWORD *)(v33 + 24) = SlowCase + v34;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v32, a2, v31, (uint64_t)&v56, a5, a6, a7, a8);
    }
    if (SlowCase)
    {
LABEL_29:
      if (v18 > 0x1D)
      {
        for (i = (_OWORD *)SlowCase; i != (_OWORD *)((v20 & 0x1FFFFFFFE0) + SlowCase); i += 2)
        {
          v43 = *v30;
          v44 = v30[1];
          v30 += 2;
          *i = v43;
          i[1] = v44;
        }
        while (i != (_OWORD *)(v20 + SlowCase))
        {
          v45 = *(_QWORD *)v30;
          v30 = (_OWORD *)((char *)v30 + 8);
          *(_QWORD *)i = v45;
          i = (_OWORD *)((char *)i + 8);
        }
      }
      else
      {
        v36 = 0;
        v37 = 1;
        do
        {
          *(_QWORD *)(SlowCase + 8 * v36) = *((_QWORD *)v30 + v36);
          v36 = v37;
        }
        while (v20 >> 3 > v37++);
      }
      v39 = SlowCase + 8 * v16 + 8;
      goto LABEL_33;
    }
  }
  else
  {
    v48 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual((uint64_t)v32, a2, v29 - 8, v31, (uint64_t)&v56, 1, a7, a8);
    if (v48)
    {
      v39 = (uint64_t)(v48 + 8);
LABEL_33:
      v12 = v39;
LABEL_34:
      if ((*((_BYTE *)this + 4) & 0xE) == 6)
      {
        if (v13 < v22)
          memset_pattern16((void *)(v12 + 8 * v13), &memset_pattern_99, 8 * (v22 + ~v13) + 8);
      }
      else if (v13 < v22)
      {
        bzero((void *)(v12 + 8 * v13), 8 * (v22 + ~v13) + 8);
      }
      if (v39)
      {
        if (v22 >= 0x10000001)
        {
          __break(0xC471u);
          JUMPOUT(0x198A57848);
        }
        *(_DWORD *)(v12 - 4) = v22;
        __dmb(0xAu);
        *((_QWORD *)this + 1) = v39;
        if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      }
      else
      {
        __dmb(0xAu);
        if (v22 >= 0x10000001)
        {
          __break(0xC471u);
          JUMPOUT(0x198A578B0);
        }
        *(_DWORD *)(v12 - 4) = v22;
      }
      v40 = 1;
      goto LABEL_42;
    }
  }
  v40 = 0;
LABEL_42:
  if (v57)
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v56 + 192, 0);
  return v40;
}

void JSC::JSObject::reallocateAndShrinkButterfly(JSC::JSObject *this, JSC::VM *a2, unsigned int a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  JSC::Butterfly *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;

  ++*((_DWORD *)a2 + 229);
  v6 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v7 = *(_BYTE *)(v6 + 8);
  if ((v7 & 0xE) != 0)
  {
    v8 = 1;
  }
  else if (*(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 > 0xA)
  {
    v8 = 0;
  }
  else
  {
    v8 = (*((unsigned __int8 *)this + 40) >> 6) & 1;
  }
  v9 = (JSC::Butterfly *)*((_QWORD *)this + 1);
  v10 = 8 * a3 + 16;
  v11 = *(unsigned __int16 *)(v6 + 24);
  if (v11 == 65534)
    goto LABEL_7;
  if (v11 == 0xFFFF)
    v11 = *(_DWORD *)(*(_QWORD *)(v6 + 64) + 84);
  if (v11 < 64)
  {
LABEL_7:
    v12 = 0;
  }
  else if ((v11 - 63) >= 5)
  {
    v18 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v12 = (v19 | HIWORD(v19)) + 1;
  }
  else
  {
    v12 = 4;
  }
  v13 = v7 & 0xF;
  if ((v13 - 3) >= 7)
  {
    if ((v13 - 10) < 4)
      v14 = 8 * *((unsigned int *)v9 - 1) + 16;
    else
      v14 = 0;
  }
  else
  {
    v14 = 8 * *((unsigned int *)v9 - 1);
  }
  v15 = JSC::Butterfly::resizeArray(v9, a2, (JSC::JSObject *)v12, v8, v14, 0, v8, v10, v20);
  if (a3 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198A57ABCLL);
  }
  *((_DWORD *)v15 - 2) = a3;
  *((_DWORD *)v15 - 1) = a3;
  __dmb(0xAu);
  *((_QWORD *)this + 1) = v15;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  v16 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v16;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v17 = v16 == 0;
  else
    v17 = 0;
  if (v17)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
  }
}

unint64_t JSC::JSObject::allocateMoreOutOfLineStorage(JSC::JSObject *this, JSC::VM *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t Slow;
  unint64_t SlowCase;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  __n128 *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;

  v9 = a4 - a3;
  if (a4 <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198A57DF8);
  }
  v11 = *((_QWORD *)this + 1);
  if (!v11)
  {
    v33 = 8 * a4;
    if (8 * a4 <= 0x1F60 && (v34 = *((_QWORD *)a2 + ((unint64_t)(v33 + 15) >> 4) + 842)) != 0)
    {
      v35 = *(unsigned int *)(v34 + 60);
      SlowCase = *(_QWORD *)(v34 + 24);
      if (SlowCase >= *(_QWORD *)(v34 + 32))
      {
        SlowCase = *(_QWORD *)(v34 + 40);
        if ((SlowCase & 1) == 0)
        {
          v43 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v34 + 48);
          *(_QWORD *)(v34 + 32) = SlowCase + HIDWORD(v43);
          *(_QWORD *)(v34 + 40) = SlowCase + (int)v43;
          *(_QWORD *)(v34 + 24) = SlowCase + v35;
LABEL_30:
          v36 = (__n128 *)SlowCase;
          a9.n128_u64[0] = 0;
          while (v36 != (__n128 *)((v33 & 0xFFFFFFFFFFFFFFC0) + SlowCase))
          {
            *v36 = a9;
            v36[1] = a9;
            v36[2] = a9;
            v36[3] = a9;
            v36 += 4;
          }
          while (v36 != (__n128 *)(v33 + SlowCase))
          {
            v36->n128_u64[0] = 0;
            v36 = (__n128 *)((char *)v36 + 8);
          }
          return SlowCase + 8 * a4 + 8;
        }
        v50 = (char *)a2 + 192;
        JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v34, v50, v35, 0, 1);
      }
      else
      {
        *(_QWORD *)(v34 + 24) = SlowCase + v35;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, 8 * a4, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A57F08);
    }
    goto LABEL_30;
  }
  v13 = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
  v14 = v13 & 0xE;
  if (v14 >= 0xA)
    v15 = *(unsigned int *)(v11 + 8);
  else
    v15 = 0;
  v16 = v13 & 0xF;
  if ((v16 - 3) >= 7)
  {
    if ((v16 - 10) >= 4)
    {
      v17 = 0;
      if (v14)
        goto LABEL_8;
      goto LABEL_38;
    }
    v17 = 8 * *(unsigned int *)(v11 - 4) + 16;
  }
  else
  {
    v17 = 8 * *(unsigned int *)(v11 - 4);
  }
  if (v14)
  {
LABEL_8:
    v18 = 8 * (v15 + a4);
    goto LABEL_9;
  }
LABEL_38:
  if (*(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 >= 0xB)
  {
    v19 = 0;
    v18 = 8 * (v15 + a4);
    goto LABEL_10;
  }
  v18 = 8 * (v15 + a4);
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
  {
    v19 = 0;
    goto LABEL_10;
  }
LABEL_9:
  v19 = 8;
LABEL_10:
  v20 = v19 + v17 + v18;
  if (v20 > 0x1F60 || (v21 = *((_QWORD *)a2 + ((v20 + 15) >> 4) + 842)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v20, 0, a5, a6, a7, a8);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198A57DC0);
    }
    goto LABEL_14;
  }
  v22 = *(unsigned int *)(v21 + 60);
  Slow = *(_QWORD *)(v21 + 24);
  if (Slow >= *(_QWORD *)(v21 + 32))
  {
    Slow = *(_QWORD *)(v21 + 40);
    if ((Slow & 1) != 0)
    {
      v51 = v15;
      v52 = v9;
      v44 = (char *)a2 + 192;
      v45 = v11;
      v46 = *((_QWORD *)a2 + ((v20 + 15) >> 4) + 842);
      v47 = *(unsigned int *)(v21 + 60);
      JSC::sanitizeStackForVM(a2, a2, v20, a4, a5, a6, a7, a8);
      v48 = v46;
      v11 = v45;
      v49 = v47;
      v15 = v51;
      v9 = v52;
      Slow = JSC::LocalAllocator::allocateSlowCase(v48, v44, v49, 0, 0);
      goto LABEL_14;
    }
    v42 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v21 + 48);
    *(_QWORD *)(v21 + 32) = Slow + HIDWORD(v42);
    *(_QWORD *)(v21 + 40) = Slow + (int)v42;
  }
  *(_QWORD *)(v21 + 24) = Slow + v22;
LABEL_14:
  if ((v17 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A57E30);
  }
  SlowCase = Slow + 8 * v15;
  v25 = SlowCase + 8 * a4 - 8 * a3;
  v26 = v11 - 8 - 8 * a3;
  v27 = v17 + v19 + 8 * a3;
  if (v27 > 0xF0)
  {
    v37 = v27 & 0xFFFFFFFFFFFFFFE0;
    v38 = v27 + v25;
    v39 = v37 + v25;
    while (v25 != v39)
    {
      a9 = *(__n128 *)v26;
      v40 = *(_OWORD *)(v26 + 16);
      v26 += 32;
      *(__n128 *)v25 = a9;
      *(_OWORD *)(v25 + 16) = v40;
      v25 += 32;
    }
    while (v25 != v38)
    {
      v41 = *(_QWORD *)v26;
      v26 += 8;
      *(_QWORD *)v25 = v41;
      v25 += 8;
    }
  }
  else if (v27 >= 8)
  {
    v28 = 0;
    v29 = v27 >> 3;
    v30 = 1;
    do
    {
      *(_QWORD *)(v25 + 8 * v28) = *(_QWORD *)(v26 + 8 * v28);
      v28 = v30++;
    }
    while (v29 > v28);
  }
  v31 = (__n128 *)SlowCase;
  a9.n128_u64[0] = 0;
  while (v31 != (__n128 *)(((8 * v9) & 0xFFFFFFFFFFFFFFC0) + SlowCase))
  {
    *v31 = a9;
    v31[1] = a9;
    v31[2] = a9;
    v31[3] = a9;
    v31 += 4;
  }
  while (v31 != (__n128 *)(8 * v9 + SlowCase))
  {
    v31->n128_u64[0] = 0;
    v31 = (__n128 *)((char *)v31 + 8);
  }
  return SlowCase + 8 * a4 + 8;
}

uint64_t JSC::JSObject::putDirectMayBeIndex(int *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  _QWORD v26[2];
  int v27;
  int v28;
  uint64_t v29;

  if (!a3)
    goto LABEL_9;
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    goto LABEL_9;
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) != 0)
  {
    if ((_DWORD)v11)
    {
      v12 = *v10 - 48;
      if (v12 <= 9 && (v11 < 2 || *v10 != 48))
      {
        v23 = v11 - 1;
        v24 = v10 + 1;
        while (v23)
        {
          if (v12 > 0x19999999)
            goto LABEL_6;
          v25 = *v24 - 48;
          if (v25 > 9)
            goto LABEL_6;
          v13 = 0;
          LODWORD(v11) = 0;
          v14 = 0;
          v22 = __CFADD__(v25, 10 * v12);
          v12 = v25 + 10 * v12;
          --v23;
          ++v24;
          if (v22)
            goto LABEL_8;
        }
        goto LABEL_33;
      }
      goto LABEL_6;
    }
LABEL_39:
    v13 = 0;
    goto LABEL_7;
  }
  if (!(_DWORD)v11)
    goto LABEL_39;
  v12 = *(unsigned __int16 *)v10 - 48;
  if (v12 > 9 || (*(_WORD *)v10 == 48 ? (v18 = v11 > 1) : (v18 = 0), v18))
  {
LABEL_6:
    v13 = 0;
    LODWORD(v11) = 0;
LABEL_7:
    v14 = 0;
    goto LABEL_8;
  }
  v19 = (unsigned __int16 *)(v10 + 2);
  v20 = v11 - 1;
  while (v20)
  {
    if (v12 > 0x19999999)
      goto LABEL_6;
    v21 = *v19 - 48;
    if (v21 > 9)
      goto LABEL_6;
    v13 = 0;
    LODWORD(v11) = 0;
    v14 = 0;
    v22 = __CFADD__(v21, 10 * v12);
    v12 = v21 + 10 * v12;
    ++v19;
    --v20;
    if (v22)
      goto LABEL_8;
  }
LABEL_33:
  v13 = 0x100000000;
  if (v12 == -1)
  {
    v13 = 0;
    LODWORD(v11) = 0;
  }
  else
  {
    LODWORD(v11) = v12;
  }
  if (v12 == -1)
    v14 = 0;
  else
    v14 = v12 & 0xFFFFFF00;
LABEL_8:
  if ((v13 & 0x100000000) == 0)
  {
LABEL_9:
    v15 = *(_QWORD *)(a2 + 56);
    v26[0] = 0;
    v26[1] = a1;
    v27 = -1;
    a9.n128_u64[0] = 0x100000001000000;
    v28 = 0x1000000;
    v29 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, v15, a3, a4, 0, (uint64_t)v26, a7, a8, a9);
    return v16 == 0;
  }
  return JSC::JSObject::putDirectIndex((unint64_t)a1, a2, (JSC::VM *)(v14 | v11), a4, a5, a6, a7, a8, (int32x4_t)a9);
}

BOOL JSC::validateAndApplyPropertyDescriptor(JSC::VM **a1, int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  JSC::VM *v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  BOOL v19;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::JSObject *v27;
  uint64_t v28;
  JSC::JSObject *v29;
  JSC::JSGlobalObject *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::JSGlobalObject *v44;
  JSC::JSObject *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  int *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  const char *v56;
  uint64_t v57;
  JSC::JSObject *v58;
  _BOOL4 v59;
  BOOL v60;
  _BOOL4 v61;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v63;
  BOOL v64;
  double v65;
  double v66;
  JSC::VM *v67;
  _QWORD v68[2];
  int v69;
  int v70;
  uint64_t v71;

  v9 = a8;
  v13 = (JSC::VM *)a1;
  v14 = a1[7];
  v67 = v14;
  if ((a6 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      if (!a2)
        return 1;
      v15 = *(_QWORD *)(a5 + 8);
      if (v15)
      {
        v42 = *(_DWORD *)(a5 + 24) & 0xFFFFFFED | 0x10;
        if (v15 != 10)
          goto LABEL_52;
      }
      else
      {
        if (!*(_QWORD *)(a5 + 16))
        {
          if (*(_QWORD *)a5)
            v16 = *(_QWORD *)a5;
          else
            v16 = 10;
          v17 = *(_DWORD *)(a5 + 24) & 0xFFFFFFEF;
LABEL_10:
          v68[0] = 0;
          v68[1] = a2;
          v69 = -1;
          a9.n128_u64[0] = 0x100000001000000;
          v70 = 0x1000000;
          v71 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a2, (uint64_t)v14, a3, v16, v17, (uint64_t)v68, a7, a8, a9);
          return 1;
        }
        v42 = *(_DWORD *)(a5 + 24) & 0xFFFFFFED | 0x10;
      }
      v15 = 10;
LABEL_52:
      v43 = *(_QWORD *)(a5 + 16);
      if (!v43 || v43 == 10)
        v43 = 10;
      if ((v15 & 0xFFFE000000000002) != 0)
      {
        v44 = 0;
      }
      else if (*(unsigned __int8 *)(v15 + 5) <= 0x16u)
      {
        v44 = 0;
      }
      else
      {
        v44 = (JSC::JSGlobalObject *)v15;
      }
      if ((v43 & 0xFFFE000000000002) != 0)
      {
        v45 = 0;
      }
      else if (*(unsigned __int8 *)(v43 + 5) <= 0x16u)
      {
        v45 = 0;
      }
      else
      {
        v45 = (JSC::JSObject *)v43;
      }
      v46 = JSC::GetterSetter::create(v14, (JSC::VM *)a1, v44, v45, (JSC::JSObject *)a5, a6, a7, a8);
      v51 = a2;
      v52 = (uint64_t)v13;
      v53 = a3;
      v54 = v42;
LABEL_64:
      JSC::JSObject::putDirectAccessor(v51, v52, v53, v46, v54, v50, v47, v48, v49);
      return 1;
    }
    if ((_DWORD)a8)
    {
      v56 = "Attempting to define property on object that is not extensible.";
      v57 = 64;
      goto LABEL_77;
    }
    return 0;
  }
  if (*(_QWORD *)a5)
    v19 = 0;
  else
    v19 = *(_QWORD *)(a5 + 8) == 0;
  if (v19 && *(_QWORD *)(a5 + 16) == 0 && *(_DWORD *)(a5 + 28) == 0)
    return 1;
  v23 = JSC::PropertyDescriptor::equalTo((JSC::PropertyDescriptor *)a7, (JSC::JSGlobalObject *)a1, (const JSC::PropertyDescriptor *)a5, a4, a5, a6, a7, a8, (int8x16_t)a9);
  if (*((_DWORD *)v14 + 20))
  {
    v61 = v23;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v24, v25, v26, (uint64_t)v27, v28, a7, a8);
    if (hasExceptionsAfterHandlingTraps || v61)
      return !hasExceptionsAfterHandlingTraps;
  }
  else if (v23)
  {
    return 1;
  }
  if ((*(_BYTE *)(a7 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a5 + 24) & 8) == 0)
    {
      if (!v9)
        return 0;
      v56 = "Attempting to change configurable attribute of unconfigurable property.";
      a1 = (JSC::VM **)v13;
      v57 = 72;
      goto LABEL_77;
    }
    if ((*(_BYTE *)(a5 + 28) & 2) != 0)
    {
      v59 = JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)a5);
      if (v59 != JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)a7))
      {
        if (!v9)
          return 0;
        v56 = "Attempting to change enumerable attribute of unconfigurable property.";
LABEL_76:
        a1 = (JSC::VM **)v13;
        v57 = 70;
LABEL_77:
        JSC::throwTypeError((unint64_t)a1, &v67, (uint64_t)v56, v57);
        return 0;
      }
    }
  }
  v30 = *(JSC::JSGlobalObject **)(a5 + 8);
  v29 = *(JSC::JSObject **)(a5 + 16);
  v31 = *(_QWORD *)a5;
  if (*(_OWORD *)(a5 + 8) == 0 && !v31)
  {
    if ((*(_BYTE *)(a5 + 28) & 1) == 0)
      goto LABEL_34;
    v32 = *(_QWORD *)a7;
    v33 = *(_QWORD *)a7 != 0;
    v34 = *(_DWORD *)(a7 + 28) & 1;
    v35 = v33 | *(_DWORD *)(a7 + 28);
  }
  else
  {
    v32 = *(_QWORD *)a7;
    v33 = *(_QWORD *)a7 != 0;
    v34 = *(_DWORD *)(a7 + 28) & 1;
    v35 = v33 | *(_DWORD *)(a7 + 28);
    if (v31)
    {
      if ((v35 & 1) != 0)
        goto LABEL_30;
LABEL_73:
      if ((*(_BYTE *)(a7 + 24) & 8) != 0)
      {
        if (!v9)
          return 0;
        v56 = "Attempting to change access mechanism for an unconfigurable property.";
        goto LABEL_76;
      }
      goto LABEL_34;
    }
  }
  if ((v35 & 1) != (*(_BYTE *)(a5 + 28) & 1))
    goto LABEL_73;
LABEL_30:
  if ((v33 || v34) && (v31 || (*(_BYTE *)(a5 + 28) & 1) != 0))
  {
    v36 = *(_DWORD *)(a7 + 24);
    if ((v36 & 8) != 0 && (v36 & 2) != 0)
    {
      if ((*(_BYTE *)(a5 + 24) & 2) == 0)
      {
        if (!v9)
          return 0;
        v56 = "Attempting to change writable attribute of unconfigurable property.";
        a1 = (JSC::VM **)v13;
        v57 = 68;
        goto LABEL_77;
      }
      if (!v31)
        return 1;
      if (v31 == v32)
      {
        if (!*((_DWORD *)v14 + 20))
          return 1;
        v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v31, v32, v26, (uint64_t)v27, v28, a7, a8);
        return !v64;
      }
      if (v31 >> 49)
      {
        if (!(v32 >> 49))
        {
          if (!*((_DWORD *)v14 + 20))
            goto LABEL_113;
          v60 = 0;
LABEL_140:
          v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v31, v32, v26, (uint64_t)v27, v28, a7, a8);
          if (v64 || v60)
            return !v64;
LABEL_113:
          if (!v9)
            return 0;
          v56 = "Attempting to change value of a readonly property.";
          a1 = (JSC::VM **)v13;
          v57 = 51;
          goto LABEL_77;
        }
        v65 = (double)(int)v31;
        if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v65 = v31 - 0x2000000000000;
        v66 = (double)(int)v32;
        if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v66 = v32 - 0x2000000000000;
        v60 = *(_QWORD *)&v65 == *(_QWORD *)&v66;
      }
      else
      {
        v60 = JSC::JSValue::strictEqual(v13, v31, v32, v26, (uint64_t)v27, v28, a7, a8, (int8x16_t)a9);
      }
      if (!*((_DWORD *)v14 + 20))
      {
        if (v60)
          return 1;
        goto LABEL_113;
      }
      goto LABEL_140;
    }
LABEL_34:
    if (!a2)
      return 1;
    v37 = *(_DWORD *)(a7 + 24);
    v38 = *(_DWORD *)(a5 + 28);
    if ((v31 || (v38 & 1) != 0) && *(_OWORD *)(a7 + 8) != 0)
      v37 |= 2u;
    v39 = 2 * (*(_DWORD *)(a5 + 28) & 7);
    if (*(_OWORD *)(a5 + 8) == 0)
    {
      v40 = *(_DWORD *)(a5 + 24) & v39 | (v39 ^ 0xFFFFFFDF) & v37;
    }
    else
    {
      v40 = *(_DWORD *)(a5 + 24) & (v39 | 0x10) | (v39 ^ 0xFFFFFFCF) & v37;
      if (v30)
      {
LABEL_66:
        if (((unint64_t)v30 & 0xFFFE000000000002) == 0)
        {
          if (*((unsigned __int8 *)v30 + 5) <= 0x16u)
            v55 = 0;
          else
            v55 = v30;
LABEL_92:
          if ((v29 || (v29 = *(JSC::JSObject **)(a7 + 16)) != 0)
            && ((unint64_t)v29 & 0xFFFE000000000002) == 0)
          {
            if (*((unsigned __int8 *)v29 + 5) <= 0x16u)
              v58 = 0;
            else
              v58 = v29;
          }
          else
          {
            v58 = 0;
          }
          v46 = JSC::GetterSetter::create(v14, v13, v55, v58, v27, v28, a7, a8);
          v54 = v40 & 0xFFFFFFFD;
          v51 = a2;
          v52 = (uint64_t)v13;
          v53 = a3;
          goto LABEL_64;
        }
LABEL_91:
        v55 = 0;
        goto LABEL_92;
      }
      if (v29)
      {
        v30 = *(JSC::JSGlobalObject **)(a7 + 8);
        goto LABEL_90;
      }
    }
    v30 = *(JSC::JSGlobalObject **)(a7 + 8);
    if (*(_OWORD *)(a7 + 8) == 0 || v31 || (v38 & 1) != 0)
    {
      v41 = *(_QWORD *)a7;
      if (!*(_QWORD *)a7)
        v41 = 10;
      if (v31)
        v16 = *(_QWORD *)a5;
      else
        v16 = v41;
      v17 = v40 & 0xFFFFFFEF;
      goto LABEL_10;
    }
LABEL_90:
    if (!v30)
      goto LABEL_91;
    goto LABEL_66;
  }
  if ((*(_BYTE *)(a7 + 24) & 8) == 0)
    goto LABEL_34;
  if (v29 && v29 != *(JSC::JSObject **)(a7 + 16))
  {
    if (!v9)
      return 0;
    v56 = "Attempting to change the setter of an unconfigurable property.";
    goto LABEL_85;
  }
  if (!v30)
    return 1;
  v63 = JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)a5);
  v19 = v63 == JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)a7);
  result = v19;
  if (!v19 && v9)
  {
    v56 = "Attempting to change the getter of an unconfigurable property.";
LABEL_85:
    a1 = (JSC::VM **)v13;
    v57 = 63;
    goto LABEL_77;
  }
  return result;
}

uint64_t JSC::JSObject::defineOwnNonIndexProperty(int *a1, JSC::VM *a2, WTF::StringImpl *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::JSObject *v36;
  uint64_t v37;
  _BOOL4 v38;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  char v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::JSGlobalObject *v53;
  JSC::JSObject *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  int *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  JSC::JSGlobalObject *v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  JSC::JSObject *v68;
  _BOOL4 v69;
  BOOL v70;
  int v71;
  int v72;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  double v77;
  double v78;
  char v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  _QWORD v83[2];
  unint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  JSC::VM *v94;

  v10 = *((_QWORD *)a2 + 7);
  v80 = 0;
  v81 = 0uLL;
  v82 = 14;
  v84 = 0xFFFFFFFF00000000;
  v86 = 0;
  v87 = 0;
  v85 = a1;
  v88 = 0x20000;
  v89 = 0;
  LOBYTE(v90) = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v17 = 0;
  if ((*(unsigned int (**)(void))(16 * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C) + 0x68))())
    v17 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v80, (uint64_t)a2, a3, (uint64_t)v83, v13, v14, v15, v16);
  if (v91)
  {
    v18 = *(_DWORD *)(v90 + 4);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198A58B70);
    }
    *(_DWORD *)(v90 + 4) = v18 - 1;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v71 = *(_DWORD *)(v10 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v19 = (*(uint64_t (**)(int *, JSC::VM *))(16 * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C) + 0xA0))(a1, a2);
  if (*(_DWORD *)(v10 + 80))
  {
    v72 = *(_DWORD *)(v10 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
    {
      v79 = v19;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v20, v21, (uint64_t)v22, v23, v24, v25);
      v19 = v79;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v27 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v94 = v27;
  if ((v17 & 1) == 0)
  {
    if ((v19 & 1) != 0)
    {
      v28 = *(_QWORD *)(a4 + 8);
      if (v28)
      {
        v51 = *(_DWORD *)(a4 + 24) & 0xFFFFFFED | 0x10;
        if (v28 != 10)
          goto LABEL_51;
      }
      else
      {
        if (!*(_QWORD *)(a4 + 16))
        {
          if (*(_QWORD *)a4)
            v29 = *(_QWORD *)a4;
          else
            v29 = 10;
          v30 = *(_DWORD *)(a4 + 24) & 0xFFFFFFEF;
LABEL_16:
          v83[0] = 0;
          v83[1] = a1;
          v84 = 0x1000000FFFFFFFFLL;
          v26.n128_u64[0] = 0x100000001000000;
          v85 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, (uint64_t)v27, (unint64_t)a3, v29, v30, (uint64_t)v83, v24, v25, v26);
          return 1;
        }
        v51 = *(_DWORD *)(a4 + 24) & 0xFFFFFFED | 0x10;
      }
      v28 = 10;
LABEL_51:
      v52 = *(_QWORD *)(a4 + 16);
      if (!v52 || v52 == 10)
        v52 = 10;
      if ((v28 & 0xFFFE000000000002) != 0)
      {
        v53 = 0;
      }
      else if (*(unsigned __int8 *)(v28 + 5) <= 0x16u)
      {
        v53 = 0;
      }
      else
      {
        v53 = (JSC::JSGlobalObject *)v28;
      }
      if ((v52 & 0xFFFE000000000002) != 0)
      {
        v54 = 0;
      }
      else if (*(unsigned __int8 *)(v52 + 5) <= 0x16u)
      {
        v54 = 0;
      }
      else
      {
        v54 = (JSC::JSObject *)v52;
      }
      v55 = JSC::GetterSetter::create(v27, a2, v53, v54, v22, v23, v24, v25);
      v60 = a1;
      v61 = (uint64_t)a2;
      v62 = (unint64_t)a3;
      v63 = v51;
LABEL_63:
      JSC::JSObject::putDirectAccessor(v60, v61, v62, v55, v63, v59, v56, v57, v58);
      return 1;
    }
    if (a5)
    {
      v65 = "Attempting to define property on object that is not extensible.";
      v66 = (unint64_t)a2;
      v67 = 64;
      goto LABEL_76;
    }
    return 0;
  }
  if (!*(_QWORD *)a4 && !*(_QWORD *)(a4 + 8) && !*(_QWORD *)(a4 + 16) && !*(_DWORD *)(a4 + 28))
    return 1;
  v32 = JSC::PropertyDescriptor::equalTo((JSC::PropertyDescriptor *)&v80, a2, (const JSC::PropertyDescriptor *)a4, v21, (uint64_t)v22, v23, v24, v25, (int8x16_t)v26);
  v38 = v32;
  if (*((_DWORD *)v27 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v27, v33, v34, v35, (uint64_t)v36, v37, v24, v25);
    if (hasExceptionsAfterHandlingTraps || v38)
      return !hasExceptionsAfterHandlingTraps;
  }
  else if (v32)
  {
    return 1;
  }
  if ((v82 & 8) != 0)
  {
    if ((*(_BYTE *)(a4 + 24) & 8) == 0)
    {
      if (!a5)
        return 0;
      v65 = "Attempting to change configurable attribute of unconfigurable property.";
      v66 = (unint64_t)a2;
      v67 = 72;
      goto LABEL_76;
    }
    if ((*(_BYTE *)(a4 + 28) & 2) != 0)
    {
      v69 = JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)a4);
      if (v69 != JSC::PropertyDescriptor::enumerable((JSC::PropertyDescriptor *)&v80))
      {
        if (!a5)
          return 0;
        v65 = "Attempting to change enumerable attribute of unconfigurable property.";
LABEL_75:
        v66 = (unint64_t)a2;
        v67 = 70;
LABEL_76:
        JSC::throwTypeError(v66, &v94, (uint64_t)v65, v67);
        return 0;
      }
    }
  }
  v40 = *(JSC::JSGlobalObject **)(a4 + 8);
  v39 = *(JSC::JSObject **)(a4 + 16);
  v41 = *(_QWORD *)a4;
  if (*(_OWORD *)(a4 + 8) == 0 && !v41)
  {
    if ((*(_BYTE *)(a4 + 28) & 1) == 0)
    {
      v46 = v82;
      goto LABEL_34;
    }
    v42 = v80;
    v43 = v80 != 0;
    v44 = BYTE4(v82) & 1;
    v45 = (v80 != 0) | BYTE4(v82);
  }
  else
  {
    v42 = v80;
    v43 = v80 != 0;
    v44 = BYTE4(v82) & 1;
    v45 = (v80 != 0) | BYTE4(v82);
    if (v41)
    {
      if ((v80 != 0) | BYTE4(v82) & 1)
        goto LABEL_30;
      goto LABEL_72;
    }
  }
  if ((v45 & 1) != (*(_BYTE *)(a4 + 28) & 1))
  {
LABEL_72:
    v46 = v82;
    if ((v82 & 8) != 0)
    {
      if (!a5)
        return 0;
      v65 = "Attempting to change access mechanism for an unconfigurable property.";
      goto LABEL_75;
    }
LABEL_34:
    v47 = *(_DWORD *)(a4 + 28);
    if ((v41 || (v47 & 1) != 0) && v81 != 0)
      v46 |= 2u;
    v48 = 2 * (*(_DWORD *)(a4 + 28) & 7);
    if (*(_OWORD *)(a4 + 8) == 0)
    {
      v49 = *(_DWORD *)(a4 + 24) & v48 | (v48 ^ 0xFFFFFFDF) & v46;
    }
    else
    {
      v49 = *(_DWORD *)(a4 + 24) & (v48 | 0x10) | (v48 ^ 0xFFFFFFCF) & v46;
      if (v40)
      {
LABEL_65:
        if (((unint64_t)v40 & 0xFFFE000000000002) == 0)
        {
          if (*((unsigned __int8 *)v40 + 5) <= 0x16u)
            v64 = 0;
          else
            v64 = v40;
LABEL_91:
          if ((v39 || (v39 = (JSC::JSObject *)*((_QWORD *)&v81 + 1)) != 0)
            && ((unint64_t)v39 & 0xFFFE000000000002) == 0)
          {
            if (*((unsigned __int8 *)v39 + 5) <= 0x16u)
              v68 = 0;
            else
              v68 = v39;
          }
          else
          {
            v68 = 0;
          }
          v55 = JSC::GetterSetter::create(v27, a2, v64, v68, v36, v37, v24, v25);
          v63 = v49 & 0xFFFFFFFD;
          v60 = a1;
          v61 = (uint64_t)a2;
          v62 = (unint64_t)a3;
          goto LABEL_63;
        }
LABEL_90:
        v64 = 0;
        goto LABEL_91;
      }
      if (v39)
      {
        v40 = (JSC::JSGlobalObject *)v81;
        goto LABEL_89;
      }
    }
    v40 = (JSC::JSGlobalObject *)v81;
    if (v81 == 0 || v41 || (v47 & 1) != 0)
    {
      v50 = v80;
      if (!v80)
        v50 = 10;
      if (v41)
        v29 = *(_QWORD *)a4;
      else
        v29 = v50;
      v30 = v49 & 0xFFFFFFEF;
      goto LABEL_16;
    }
LABEL_89:
    if (!v40)
      goto LABEL_90;
    goto LABEL_65;
  }
LABEL_30:
  if ((v43 || v44) && (v41 || (*(_BYTE *)(a4 + 28) & 1) != 0))
  {
    v46 = v82;
    if ((v82 & 8) == 0 || (v82 & 2) == 0)
      goto LABEL_34;
    if ((*(_BYTE *)(a4 + 24) & 2) == 0)
    {
      if (!a5)
        return 0;
      v65 = "Attempting to change writable attribute of unconfigurable property.";
      v66 = (unint64_t)a2;
      v67 = 68;
      goto LABEL_76;
    }
    if (!v41)
      return 1;
    if (v41 == v42)
    {
      if (!*((_DWORD *)v27 + 20))
        return 1;
      v76 = JSC::VM::hasExceptionsAfterHandlingTraps(v27, v41, v42, v35, (uint64_t)v36, v37, v24, v25);
      return !v76;
    }
    if (v41 >> 49)
    {
      if (!(v42 >> 49))
      {
        if (!*((_DWORD *)v27 + 20))
          goto LABEL_113;
        v70 = 0;
LABEL_151:
        v76 = JSC::VM::hasExceptionsAfterHandlingTraps(v27, v41, v42, v35, (uint64_t)v36, v37, v24, v25);
        if (v76 || v70)
          return !v76;
LABEL_113:
        if (!a5)
          return 0;
        v65 = "Attempting to change value of a readonly property.";
        v66 = (unint64_t)a2;
        v67 = 51;
        goto LABEL_76;
      }
      v77 = (double)(int)v41;
      if (v41 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v77 = v41 - 0x2000000000000;
      v78 = (double)(int)v42;
      if (v42 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v78 = v42 - 0x2000000000000;
      v70 = *(_QWORD *)&v77 == *(_QWORD *)&v78;
    }
    else
    {
      v70 = JSC::JSValue::strictEqual(a2, v41, v42, v35, (uint64_t)v36, v37, v24, v25, (int8x16_t)v26);
    }
    if (!*((_DWORD *)v27 + 20))
    {
      if (v70)
        return 1;
      goto LABEL_113;
    }
    goto LABEL_151;
  }
  v46 = v82;
  if ((v82 & 8) == 0)
    goto LABEL_34;
  if (v39 && v39 != *((JSC::JSObject **)&v81 + 1))
  {
    if (!a5)
      return 0;
    v65 = "Attempting to change the setter of an unconfigurable property.";
    goto LABEL_84;
  }
  if (!v40)
    return 1;
  v74 = JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)a4);
  v75 = v74 == JSC::PropertyDescriptor::getter((JSC::PropertyDescriptor *)&v80);
  result = v75;
  if (!v75 && a5)
  {
    v65 = "Attempting to change the getter of an unconfigurable property.";
LABEL_84:
    v66 = (unint64_t)a2;
    v67 = 63;
    goto LABEL_76;
  }
  return result;
}

unint64_t JSC::JSObject::convertToUncacheableDictionary(unint64_t this, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  _QWORD v29[4];

  v10 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if ((*(_DWORD *)(v10 + 0x10) & 3) != 2)
  {
    v11 = this;
    LODWORD(v28) = 1;
    WORD2(v28) = 0;
    v29[0] = v29;
    v29[1] = v29;
    v29[2] = a2;
    v29[3] = v10;
    this = JSC::Structure::toDictionaryTransition((uint64_t)a2, v10, 2, (JSC::Structure *)&v28, a6, a7, a8, a9, a3);
    v20 = this >> 4;
    *(_DWORD *)v11 = this >> 4;
    *(_BYTE *)(v11 + 6) = *(_BYTE *)(v11 + 6) & 0x80 | *(_BYTE *)(this + 10);
    *(_BYTE *)(v11 + 5) = *(_BYTE *)(this + 9);
    v21 = (unsigned __int8 *)(v11 + 4);
    if (*(unsigned __int8 *)(v11 + 4) != *(unsigned __int8 *)(this + 8))
    {
      do
      {
        while (1)
        {
          v22 = *v21;
          v23 = __ldxr(v21);
          if (v23 == v22)
            break;
          __clrex();
        }
      }
      while (__stxr(v22 & 0xC0 | *(_BYTE *)(this + 8), v21));
    }
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
    {
      this = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
      LODWORD(v20) = *(_DWORD *)v11;
    }
    if ((*(_BYTE *)((16 * v20) | 0x12) & 8) != 0)
    {
      this = *((_QWORD *)a2 + 11635);
      if (this)
      {
        if ((this & 1) == 0)
        {
          v27 = (unsigned __int16)(*(_WORD *)(this + 133120))++ + 1;
          if ((v27 & 0x10000) != 0)
            this = (unint64_t)JSC::MegamorphicCache::clearEntries((_WORD *)this);
        }
      }
    }
    if (BYTE4(v28) == 1)
      this = (unint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v28, v19, v12, v13, v14, v15, v16, v17, v18);
    while (1)
    {
      v26 = (_QWORD *)v29[0];
      if ((_QWORD *)v29[0] == v29)
        break;
      v25 = *(_QWORD *)v29[0];
      v24 = *(_QWORD **)(v29[0] + 8);
      *v24 = *(_QWORD *)v29[0];
      *(_QWORD *)(v25 + 8) = v24;
      *v26 = 0;
      v26[1] = 0;
    }
  }
  return this;
}

uint64_t JSC::JSObject::shiftButterflyAfterFlattening(JSC::JSObject *this, const JSC::GCSafeConcurrentJSLocker *a2, JSC::VM *a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t result;
  unint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v11 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8) & 0xE) != 0
    || *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 39 <= 0xA
    && (*((_BYTE *)this + 40) & 0x40) != 0)
  {
    v12 = *((_BYTE *)a4 + 8);
    if ((v12 & 0xEu) >= 0xA)
      v13 = *(unsigned int *)(v11 + 8);
    else
      v13 = 0;
    v14 = v12 & 0xF;
    if ((v14 - 3) >= 7)
    {
      if ((v14 - 10) < 4)
        v15 = 8 * *(unsigned int *)(v11 - 4) + 16;
      else
        v15 = 0;
    }
    else
    {
      v15 = 8 * *(unsigned int *)(v11 - 4);
    }
    v17 = v13 + a5;
    v16 = 8;
  }
  else
  {
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v17 = a5;
  }
  v18 = v16 + v15;
  v19 = v16 + v15 + 8 * v17;
  if (v19 <= 0x1F60 && (v20 = *((_QWORD *)a3 + ((v19 + 15) >> 4) + 842)) != 0)
  {
    v21 = *(unsigned int *)(v20 + 60);
    SlowCase = *(_QWORD *)(v20 + 24);
    if (SlowCase < *(_QWORD *)(v20 + 32))
    {
LABEL_15:
      *(_QWORD *)(v20 + 24) = SlowCase + v21;
      goto LABEL_16;
    }
    SlowCase = *(_QWORD *)(v20 + 40);
    if ((SlowCase & 1) == 0)
    {
      v38 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v20 + 32) = SlowCase + HIDWORD(v38);
      *(_QWORD *)(v20 + 40) = SlowCase + (int)v38;
      goto LABEL_15;
    }
    v43 = v15;
    v44 = v11;
    v39 = v13;
    v40 = *((_QWORD *)a3 + ((v19 + 15) >> 4) + 842);
    v15 = *(unsigned int *)(v20 + 60);
    JSC::sanitizeStackForVM(a3, a2, v19, (uint64_t)a4, a5, a6, a7, a8);
    v41 = v40;
    v13 = v39;
    v42 = v15;
    LOBYTE(v15) = v43;
    v11 = v44;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v41, (char *)a3 + 192, v42, 0, 0);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a3 + 6648, a3, v19, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5908CLL);
    }
  }
LABEL_16:
  if ((v15 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A590ACLL);
  }
  v23 = (_OWORD *)(SlowCase + 8 * v13);
  v24 = (uint64_t)v23 + 8 * a5 + 8;
  v25 = (_OWORD *)(v11 - 8 * a5 - 8);
  v26 = v18 + 8 * a5;
  if (v26 > 0xF0)
  {
    v32 = v26 & 0xFFFFFFFFFFFFFFE0;
    v33 = (_OWORD *)((char *)v23 + v26);
    v34 = (_OWORD *)((char *)v23 + v32);
    while (v23 != v34)
    {
      v35 = *v25;
      v36 = v25[1];
      v25 += 2;
      *v23 = v35;
      v23[1] = v36;
      v23 += 2;
    }
    while (v23 != v33)
    {
      v37 = *(_QWORD *)v25;
      v25 = (_OWORD *)((char *)v25 + 8);
      *(_QWORD *)v23 = v37;
      v23 = (_OWORD *)((char *)v23 + 8);
    }
  }
  else if (v26 >= 8)
  {
    v27 = 0;
    v28 = v26 >> 3;
    v29 = 1;
    do
    {
      *((_QWORD *)v23 + v27) = *((_QWORD *)v25 + v27);
      v27 = v29;
    }
    while (v28 > v29++);
  }
  result = (uint64_t)a3 + 192;
  if (*((_BYTE *)a3 + 755))
  {
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v24;
    if (*((_DWORD *)a3 + 190) >= *((unsigned __int8 *)this + 7))
      result = JSC::Heap::writeBarrierSlowPath(result, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v24;
    if (*((_DWORD *)a3 + 190) >= *((unsigned __int8 *)this + 7))
      return JSC::Heap::writeBarrierSlowPath(result, (unint64_t)this);
  }
  return result;
}

uint64_t JSC::JSObject::getEnumerableLength(JSC::JSObject *this)
{
  uint64_t v1;
  _QWORD *v4;
  uint64_t v5;
  JSC::Structure *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;

  v1 = 0;
  if ((*((_BYTE *)this + 4) & 0xFu) >= 2)
  {
    switch(*((_BYTE *)this + 4) & 0xF)
    {
      case 3:
        return v1;
      case 4:
      case 5:
      case 8:
      case 9:
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v1 = *((unsigned int *)v4 - 2);
        if (!(_DWORD)v1)
          return v1;
        v5 = *((unsigned int *)v4 - 2);
        v6 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
        if (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) == 36)
        {
          v7 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
          v8 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
          v9 = (v8 >> 1) & 7;
          if ((v8 & 0x10) != 0)
            v9 = ((v8 & 0xE) + 10) >> 1;
          v10 = *(_DWORD *)(v7 + 4 * v9 + 852);
          if (v10)
            v11 = 16 * (v10 & 0xFFFFFFFE);
          else
            v11 = 0;
          if ((JSC::Structure *)v11 == v6)
          {
            v12 = *(_QWORD *)(v7 + 2304);
            v13 = (v12 & 1) != 0 ? (v12 >> 1) & 3 : *(unsigned __int8 *)(v12 + 4);
            if (v13 != 2)
              goto LABEL_19;
          }
        }
        else
        {
          LOBYTE(v8) = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
        }
        if ((v8 & 0x20) != 0)
          return 0;
        v14 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
        if (v14)
        {
          if (*(_BYTE *)(*(_QWORD *)(v14 + 2048) + 4) == 2)
            return 0;
        }
        if ((JSC::Structure::holesMustForwardToPrototypeSlow(v6, this) & 1) != 0)
          return 0;
        do
        {
LABEL_19:
          if (!*v4++)
            return 0;
          --v5;
        }
        while (v5);
        return v1;
      case 6:
      case 7:
        v17 = *((_QWORD *)this + 1);
        v1 = *(unsigned int *)(v17 - 8);
        if (!(_DWORD)v1)
          return v1;
        if ((JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), this) & 1) != 0)return 0;
        v18 = v1;
        do
        {
          v17 += 8;
          --v18;
        }
        while (v18);
        return v1;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        v16 = (_QWORD *)*((_QWORD *)this + 1);
        if (*v16)
          return 0;
        v19 = *((_DWORD *)v16 - 2);
        v20 = *((_DWORD *)v16 - 1);
        if (v20 >= v19)
          v1 = v19;
        else
          v1 = v20;
        if (!(_DWORD)v1)
          return v1;
        if ((JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), this) & 1) != 0)return 0;
        v21 = v16 + 2;
        v22 = v1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A5932CLL);
    }
    while (*v21++)
    {
      if (!--v22)
        return v1;
    }
    return 0;
  }
  return v1;
}

uint64_t JSC::JSObject::getMethod(unsigned int *a1, unint64_t a2, uint64_t a3, unint64_t *a4, WTF::StringImpl **a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  JSC::VM *v24;

  v24 = *(JSC::VM **)(a2 + 56);
  v18 = JSC::JSObject::get(a1, a2, *a4, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24, v11, v12, v13, v14, v15, v16, v17))
    return 0;
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
      return 10;
LABEL_16:
    JSC::throwTypeError(a2, &v24, a5);
    return 10;
  }
  if (*(_BYTE *)(v18 + 5) == 26)
  {
    v19 = *(_QWORD *)(v18 + 24);
    if ((v19 & 1) != 0)
      v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v19 + 5) == 8)
    {
      LOBYTE(v22) = 1;
      *((_QWORD *)&v22 + 1) = *(_QWORD *)(v19 + 40);
      LOBYTE(v23) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v22) = 2;
      v20 = *(_QWORD *)(v18 + 16);
      *((_QWORD *)&v22 + 1) = v19;
      v23 = v20;
    }
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(&v22, v18);
  }
  *(_OWORD *)a3 = v22;
  *(_QWORD *)(a3 + 16) = v23;
  if (!*(_BYTE *)a3)
    goto LABEL_16;
  return v18;
}

void JSC::JSObject::putOwnDataPropertyBatching(unint64_t a1, JSC::VM *a2, JSC::Structure *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  const JSC::PropertyTable *v10;
  unsigned __int8 *v12;
  int64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t MoreOutOfLineStorage;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  unsigned __int8 *v90;
  WTF *v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  JSC::VM *v105;
  WTF *v106;
  uint64_t v107;
  int v108;
  char v109;
  __int16 v110;
  char v111;
  uint64_t v112;
  int v113;

  v9 = a5;
  v10 = a4;
  v12 = (unsigned __int8 *)a1;
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v14 = *(_DWORD *)(v13 + 0x10);
  v105 = a2;
  if ((v14 & 3) != 0)
  {
LABEL_26:
    v23 = 0;
    goto LABEL_28;
  }
  v15 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
  if (v15 == 65534)
  {
    v15 = -1;
LABEL_11:
    v18 = v15 + 1;
    goto LABEL_12;
  }
  if (v15 == 0xFFFF)
    v15 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
  v16 = *(unsigned __int8 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xE);
  if (v15 < v16)
    goto LABEL_11;
  if (v15 >= 64)
    v17 = v15 - 63;
  else
    v17 = 0;
  v18 = v17 + v16;
LABEL_12:
  if ((v18 + a5) > 0x40)
    goto LABEL_26;
  v19 = (v14 & 0x20000008) == 0 && (*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 6) == 0;
  if (!v19 || (*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xA) & 8) != 0)
    goto LABEL_26;
  v21 = a5;
  v106 = (WTF *)&v108;
  a9.n128_u64[0] = 16;
  v107 = 16;
  v102 = a5;
  if (a5 >= 0x11)
  {
    if (a5 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x198A595F8);
    }
    LODWORD(v107) = a5;
    v106 = (WTF *)WTF::fastMalloc((WTF *)(4 * a5));
    a2 = v105;
    goto LABEL_23;
  }
  if ((_DWORD)a5)
  {
LABEL_23:
    v22 = 0;
    while (1)
    {
      v32 = *((_QWORD *)a3 + v22);
      if ((*(_BYTE *)(v13 + 19) & 8) == 0)
      {
        v33 = *(_QWORD *)(v13 + 80);
        if ((v33 & 1) != 0)
        {
          v31 = v33 & 0xFFFFFFFFFFFFFFFELL;
          if ((v33 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v43 = (*(_DWORD *)(v31 + 16) >> 13) & 0x1F;
            if ((_DWORD)v43 == 16)
            {
              v44 = *(_QWORD *)(v31 + 48);
              v45 = v44 | 0x1000000000000000;
              v19 = v44 == 2;
              v46 = 0x1000000000000000;
              if (!v19)
                v46 = v45;
              if ((v46 | ((unint64_t)*(unsigned __int8 *)(v31 + 20) << 48)) == (v32 | 0x100000000000000))
              {
LABEL_44:
                LODWORD(v42) = *(unsigned __int16 *)(v31 + 22);
                if ((_DWORD)v42 == 65534)
                {
                  LODWORD(v42) = -1;
                }
                else if ((_DWORD)v42 == 0xFFFF)
                {
                  LODWORD(v42) = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 88);
                }
                goto LABEL_36;
              }
            }
            else if (((v43 << 56) | (16 * *(unsigned int *)(v31 + 72)) | ((unint64_t)*(unsigned __int8 *)(v31 + 20) << 48)) == (v32 | 0x100000000000000))
            {
              goto LABEL_44;
            }
          }
        }
        else
        {
          v34 = *(_QWORD *)(v33 + 8);
          if (v34)
          {
            v35 = *(_DWORD *)(v34 - 8);
            v36 = ((v32 | 0x100000000000000) + ~(v32 << 32)) ^ (((v32 | 0x100000000000000) + ~(v32 << 32)) >> 22);
            v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
            v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
            v39 = v35 & ((v38 >> 31) ^ v38);
            v40 = *(_QWORD *)(v34 + 16 * v39);
            if (v40 == (v32 | 0x100000000000000))
            {
LABEL_41:
              v41 = *(_QWORD *)(v34 + 16 * v39 + 8);
              if (v41)
              {
                if ((*(_BYTE *)(v41 + 8) & 3) == 0)
                {
                  v31 = *(_QWORD *)v41;
                  if (*(_QWORD *)v41)
                    goto LABEL_44;
                }
              }
            }
            else
            {
              v47 = 1;
              while (v40)
              {
                v39 = ((_DWORD)v39 + v47) & v35;
                v40 = *(_QWORD *)(v34 + 16 * v39);
                ++v47;
                if (v40 == (v32 | 0x100000000000000))
                  goto LABEL_41;
              }
            }
          }
        }
      }
      if (!(v32 >> 4) || ((v32 >> 4) & ~*(_DWORD *)(v13 + 32)) != 0)
        break;
      v48 = *(_QWORD *)(v13 + 88);
      if (!v48)
      {
        v59 = *(_QWORD *)(v13 + 64);
        if (!v59 || *(_BYTE *)(v59 + 5) != 1 && *(_DWORD *)(v59 + 80) < 2u)
          break;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v13, v105, 1, a4, a5, a6, a7, a8);
        a2 = v105;
        if (!v48)
          break;
      }
      if (!*(_DWORD *)(v48 + 24))
        break;
      v49 = *(_QWORD *)(v48 + 16);
      v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
      v51 = *(unsigned int *)(v48 + 8);
      v52 = *(_DWORD *)(v32 + 16);
      if ((v49 & 1) != 0)
      {
        if ((v52 & 0x20) != 0)
          v52 = *(_DWORD *)(v32 + 32);
        v53 = *(_DWORD *)(v48 + 12);
        v54 = (v52 >> 8) & *(_QWORD *)&v53;
        v55 = *(unsigned __int8 *)(v50 + v54);
        if (!*(_BYTE *)(v50 + v54))
          break;
        v56 = v50 + v51;
        v57 = 1;
        while (1)
        {
          v58 = *(_QWORD *)(v56 + 8 * (v55 - 1));
          if (v32 == (v58 & 0xFFFFFFFFFFFFLL))
            break;
          v54 = ((_DWORD)v54 + v57) & v53;
          v55 = *(unsigned __int8 *)(v50 + v54);
          ++v57;
          if (!*(_BYTE *)(v50 + v54))
            goto LABEL_86;
        }
        v42 = HIBYTE(v58);
      }
      else
      {
        if ((v52 & 0x20) != 0)
          v52 = *(_DWORD *)(v32 + 32);
        v60 = *(_DWORD *)(v48 + 12);
        v61 = v60 & (v52 >> 8);
        v62 = *(_DWORD *)(v50 + 4 * v61);
        if (!v62)
          break;
        v63 = v50 + 4 * v51;
        v64 = 1;
        while (1)
        {
          v65 = (v62 - 1);
          if (v32 == *(_QWORD *)(v63 + 16 * v65))
            break;
          v61 = (v61 + v64) & v60;
          v62 = *(_DWORD *)(v50 + 4 * v61);
          ++v64;
          if (!v62)
            goto LABEL_86;
        }
        LODWORD(v42) = *(_DWORD *)(v63 + 16 * v65 + 8);
      }
      v113 = v42;
      if ((_DWORD)v42 != -1)
      {
        if ((*(_BYTE *)(v13 + 18) & 4) != 0)
        {
          JSC::Structure::didReplacePropertySlow(v13, v42, a3, (uint64_t)a4, a5, a6, a7, a8, a9.n128_f64[0]);
          a2 = v105;
        }
        v31 = v13;
        goto LABEL_36;
      }
LABEL_87:
      v66 = *(_QWORD *)(v13 + 96);
      if ((v66 & 1) == 0 && *(_BYTE *)(v66 + 5) && *(_BYTE *)(v66 + 4) != 2)
        goto LABEL_102;
      v67 = *(unsigned __int16 *)(v13 + 24);
      if (v67 == 65534)
      {
        v67 = -1;
      }
      else
      {
        if (v67 == 0xFFFF)
          v67 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
        v68 = *(unsigned __int8 *)(v13 + 14);
        if (v67 >= v68)
        {
          if (v67 >= 64)
            v69 = v67 - 63;
          else
            v69 = 0;
          v70 = v69 + v68;
          goto LABEL_98;
        }
      }
      v70 = v67 + 1;
LABEL_98:
      if (v70 > 64)
        goto LABEL_102;
      v71 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v13, v32, 0, &v113, 0, 0, a8, a9.n128_f64[0]);
      a2 = v105;
      v31 = v71;
      LODWORD(v42) = v113;
LABEL_36:
      *((_DWORD *)v106 + HIDWORD(v107)) = v42;
      ++HIDWORD(v107);
      ++v22;
      v13 = v31;
      if (v22 == v21)
        goto LABEL_103;
    }
LABEL_86:
    v113 = -1;
    goto LABEL_87;
  }
LABEL_102:
  v31 = v13;
LABEL_103:
  v12 = (unsigned __int8 *)a1;
  v72 = *(_DWORD *)a1;
  v73 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
  if (v73 == 65534)
  {
    v75 = 0;
    v10 = a4;
  }
  else
  {
    v10 = a4;
    if (v73 == 0xFFFF)
      v74 = *(_DWORD *)(*(_QWORD *)(16 * (v72 & 0xFFFFFFFE) + 0x40) + 84);
    else
      v74 = *(unsigned __int16 *)(16 * (v72 & 0xFFFFFFFE) + 0x18);
    if (v74 >= 64)
    {
      if ((v74 - 63) >= 5)
      {
        v94 = (v74 - 64) | ((v74 - 64) >> 1) | (((v74 - 64) | ((v74 - 64) >> 1)) >> 2);
        v95 = v94 | (v94 >> 4) | ((v94 | (v94 >> 4)) >> 8);
        v75 = (v95 | HIWORD(v95)) + 1;
      }
      else
      {
        v75 = 4;
      }
    }
    else
    {
      v75 = 0;
    }
  }
  v76 = *(unsigned __int16 *)(v31 + 24);
  if (v76 == 65534
    || (v76 == 0xFFFF ? (v77 = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 84)) : (v77 = *(unsigned __int16 *)(v31 + 24)),
        v77 < 64))
  {
    v78 = 0;
  }
  else if ((v77 - 63) >= 5)
  {
    v96 = (v77 - 64) | ((v77 - 64) >> 1) | (((v77 - 64) | ((v77 - 64) >> 1)) >> 2);
    v97 = v96 | (v96 >> 4) | ((v96 | (v96 >> 4)) >> 8);
    v78 = (v97 | HIWORD(v97)) + 1;
  }
  else
  {
    v78 = 4;
  }
  if (v75 != v78)
  {
    if (v73 == 65534)
      goto LABEL_119;
    if (v73 == 0xFFFF)
      v73 = *(_DWORD *)(*(_QWORD *)(16 * (v72 & 0xFFFFFFFE) + 0x40) + 84);
    if (v73 < 64)
    {
LABEL_119:
      v79 = 0;
    }
    else if ((v73 - 63) >= 5)
    {
      v98 = (v73 - 64) | ((v73 - 64) >> 1) | (((v73 - 64) | ((v73 - 64) >> 1)) >> 2);
      v99 = v98 | (v98 >> 4) | ((v98 | (v98 >> 4)) >> 8);
      v79 = (v99 | HIWORD(v99)) + 1;
    }
    else
    {
      v79 = 4;
    }
    if (v76 == 65534)
      goto LABEL_124;
    if (v76 == 0xFFFF)
      v76 = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 84);
    if (v76 < 64)
    {
LABEL_124:
      v80 = 0;
    }
    else if ((v76 - 63) >= 5)
    {
      v100 = (v76 - 64) | ((v76 - 64) >> 1) | (((v76 - 64) | ((v76 - 64) >> 1)) >> 2);
      v101 = v100 | (v100 >> 4) | ((v100 | (v100 >> 4)) >> 8);
      v80 = (v101 | HIWORD(v101)) + 1;
    }
    else
    {
      v80 = 4;
    }
    MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, v105, v79, v80, a5, a6, a7, a8, a9);
    a2 = v105;
    v82 = MoreOutOfLineStorage;
    v83 = (uint64_t)v105 + 192;
    if (*((_BYTE *)v105 + 755))
    {
      *(_DWORD *)a1 = v72 | 1;
      __dmb(0xAu);
      *(_QWORD *)(a1 + 8) = v82;
      if (*((_DWORD *)v105 + 190) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v83, a1);
        a2 = v105;
      }
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v82;
      if (*((_DWORD *)v105 + 190) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v83, a1);
        a2 = v105;
      }
    }
  }
  v23 = HIDWORD(v107);
  if (HIDWORD(v107))
  {
    v84 = 0;
    do
    {
      v85 = *((_DWORD *)v106 + v84);
      if (v85 < 64)
      {
        v86 = a1 + 16;
      }
      else
      {
        v86 = *(_QWORD *)(a1 + 8) - 8;
        v85 = 63 - v85;
      }
      v87 = *((_QWORD *)v10 + v84);
      *(_QWORD *)(v86 + 8 * v85) = v87;
      if (v87)
        v88 = (v87 & 0xFFFE000000000002) == 0;
      else
        v88 = 0;
      if (v88 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
        a2 = v105;
        v23 = HIDWORD(v107);
      }
      ++v84;
    }
    while (v84 < v23);
  }
  v89 = v31 >> 4;
  *(_DWORD *)a1 = v31 >> 4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a1 + 6) & 0x80 | *(_BYTE *)(v31 + 10);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(v31 + 9);
  v90 = (unsigned __int8 *)(a1 + 4);
  v9 = v102;
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(v31 + 8))
  {
    do
    {
      while (1)
      {
        v92 = *v90;
        v93 = __ldxr(v90);
        if (v93 == v92)
          break;
        __clrex();
      }
    }
    while (__stxr(v92 & 0xC0 | *(_BYTE *)(v31 + 8), v90));
  }
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a1);
    a2 = v105;
    v23 = HIDWORD(v107);
    LODWORD(v89) = *(_DWORD *)a1;
  }
  if ((*(_BYTE *)((16 * v89) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
  v91 = v106;
  if (&v108 != (int *)v106 && v106)
  {
    v106 = 0;
    LODWORD(v107) = 0;
    WTF::fastFree((unint64_t)v91, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_28:
  v24 = v9 >= v23;
  v25 = v9 - v23;
  if (v25 != 0 && v24)
  {
    v26 = (uint64_t *)((char *)v10 + 8 * v23);
    v27 = (unint64_t *)((char *)a3 + 8 * v23);
    do
    {
      v106 = 0;
      v107 = (uint64_t)v12;
      v108 = -1;
      v109 = v109 & 0xF8 | 1;
      v110 = 0;
      v111 = 1;
      v112 = 0;
      v29 = *v27++;
      v28 = v29;
      v30 = *v26++;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(v12, (uint64_t)v105, v28, v30, 0, (uint64_t)&v106, a7, a8, a9);
      --v25;
    }
    while (v25);
  }
}

const char *JSC::JSObject::putDirectToDictionaryWithoutExtensibility(JSC::JSCell *a1, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  const char *result;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;

  if (!((unint64_t)a3 >> 4))
    return "Attempting to define property on object that is not extensible.";
  v10 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if ((((unint64_t)a3 >> 4) & ~*(_DWORD *)(v10 + 0x20)) != 0)
    return "Attempting to define property on object that is not extensible.";
  v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v15)
  {
    v16 = *(_QWORD *)(v10 + 64);
    if (!v16 || *(_BYTE *)(v16 + 5) != 1 && *(_DWORD *)(v16 + 80) < 2u)
      return "Attempting to define property on object that is not extensible.";
    JSC::Structure::materializePropertyTable((JSC::Structure *)v10, a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v15)
      return "Attempting to define property on object that is not extensible.";
  }
  if (!*(_DWORD *)(v15 + 24))
    return "Attempting to define property on object that is not extensible.";
  v17 = *(_QWORD *)(v15 + 16);
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(unsigned int *)(v15 + 8);
  v20 = *((_DWORD *)a3 + 4);
  if ((v17 & 1) != 0)
  {
    if ((v20 & 0x20) != 0)
      v20 = *((_DWORD *)a3 + 8);
    v21 = *(_DWORD *)(v15 + 12);
    v22 = (v20 >> 8) & *(_QWORD *)&v21;
    v23 = *(unsigned __int8 *)(v18 + v22);
    if (!*(_BYTE *)(v18 + v22))
      return "Attempting to define property on object that is not extensible.";
    v24 = v18 + v19;
    v25 = 1;
    result = "Attempting to define property on object that is not extensible.";
    while (1)
    {
      v27 = *(_QWORD *)(v24 + 8 * (v23 - 1));
      if (a3 == (JSC::Structure *)(v27 & 0xFFFFFFFFFFFFLL))
        break;
      v22 = ((_DWORD)v22 + v25) & v21;
      v23 = *(unsigned __int8 *)(v18 + v22);
      ++v25;
      if (!*(_BYTE *)(v18 + v22))
        return result;
    }
    v28 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
  }
  else
  {
    if ((v20 & 0x20) != 0)
      v20 = *((_DWORD *)a3 + 8);
    v29 = *(_DWORD *)(v15 + 12);
    v30 = v29 & (v20 >> 8);
    v31 = *(_DWORD *)(v18 + 4 * v30);
    if (!v31)
      return "Attempting to define property on object that is not extensible.";
    v32 = v18 + 4 * v19;
    v33 = 1;
    result = "Attempting to define property on object that is not extensible.";
    while (1)
    {
      v34 = (v31 - 1);
      if (*(JSC::Structure **)(v32 + 16 * v34) == a3)
        break;
      v30 = (v30 + v33) & v29;
      v31 = *(_DWORD *)(v18 + 4 * v30);
      ++v33;
      if (!v31)
        return result;
    }
    v28 = *(unsigned int *)(v32 + 16 * v34 + 8) | ((unint64_t)*(unsigned __int8 *)(v32 + 16 * v34 + 12) << 32);
  }
  if ((_DWORD)v28 == -1)
    return "Attempting to define property on object that is not extensible.";
  if ((v28 & 0x3200000000) != 0)
    return "Attempting to change value of a readonly property.";
  if ((int)v28 <= 63)
  {
    v35 = (char *)a1 + 16;
    v36 = v28;
  }
  else
  {
    v35 = (char *)(*((_QWORD *)a1 + 1) - 8);
    v36 = 63 - v28;
  }
  *(_QWORD *)&v35[8 * v36] = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a1);
  if ((*(_BYTE *)(v10 + 18) & 4) != 0)
    JSC::Structure::didReplacePropertySlow(v10, v28, a3, a4, a5, a6, a7, a8, a9);
  result = 0;
  *(_BYTE *)(a5 + 21) = 1;
  *(_QWORD *)a5 = a1;
  *(_DWORD *)(a5 + 16) = v28;
  return result;
}

void JSC::JSObject::putDirectForJSONSlow(unsigned __int8 *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v13;
  uint64_t v14;
  unint64_t v15;
  JSC::Structure *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t MoreOutOfLineStorage;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  char v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  JSC::Structure *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  JSC::VM *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  JSC::Structure **v128[4];
  JSC::VM *v129;
  int v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD **v133;
  JSC::VM *v134;
  JSC::VM *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v130 = *(_DWORD *)a1;
  v13 = (JSC::VM *)(16 * (v130 & 0xFFFFFFFE));
  v129 = v13;
  if ((*((_BYTE *)v13 + 16) & 3) == 0)
  {
    LODWORD(v128[0]) = 0;
    if (!(a3 >> 4)
      || ((a3 >> 4) & ~*(_DWORD *)(16 * (v130 & 0xFFFFFFFE) + 0x20)) != 0
      || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (v130 & 0xFFFFFFFE)), a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v14)|| (v131 = a3, v15 = JSC::PropertyTable::get(v14, (uint64_t *)&v131), v21 = v15, v13 = v129, (_DWORD)v15 == -1))
    {
      LODWORD(v128[0]) = -1;
      LODWORD(v131) = 1;
      WORD2(v131) = 0;
      v132 = &v132;
      v133 = &v132;
      v134 = a2;
      v135 = v13;
      v36 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v13, a3, 0, (int *)v128, 0, (JSC::Structure *)&v131, a8, a9);
      v45 = v36;
      v46 = *((unsigned __int16 *)v129 + 12);
      if (v46 == 65534)
        goto LABEL_23;
      if (v46 == 0xFFFF)
        v46 = *(_DWORD *)(*((_QWORD *)v129 + 8) + 84);
      if (v46 < 64)
      {
LABEL_23:
        v47 = 0;
      }
      else
      {
        v57 = (v46 - 64) | ((v46 - 64) >> 1) | (((v46 - 64) | ((v46 - 64) >> 1)) >> 2);
        v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
        v59 = v58 | HIWORD(v58);
        if ((v46 - 63) >= 5)
          v47 = v59 + 1;
        else
          v47 = 4;
      }
      v48 = *(unsigned __int16 *)(v36 + 24);
      if (v48 == 65534)
        goto LABEL_28;
      if (v48 == 0xFFFF)
        v48 = *(_DWORD *)(*(_QWORD *)(v36 + 64) + 84);
      if (v48 < 64)
      {
LABEL_28:
        v49 = 0;
      }
      else if ((v48 - 63) >= 5)
      {
        v62 = (v48 - 64) | ((v48 - 64) >> 1) | (((v48 - 64) | ((v48 - 64) >> 1)) >> 2);
        v63 = v62 | (v62 >> 4) | ((v62 | (v62 >> 4)) >> 8);
        v49 = (v63 | HIWORD(v63)) + 1;
      }
      else
      {
        v49 = 4;
      }
      if (v47 != v49)
      {
        MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, a2, v47, v49, v40, v41, v42, v43, v44);
        v65 = (char *)a2 + 192;
        if (*((_BYTE *)a2 + 755))
        {
          *(_DWORD *)a1 = v130 | 1;
          __dmb(0xAu);
          *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
          if (*((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath((uint64_t)v65, (unint64_t)a1);
          __dmb(0xAu);
        }
        else
        {
          *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
          if (*((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath((uint64_t)v65, (unint64_t)a1);
        }
      }
      v50 = (int)v128[0];
      if (SLODWORD(v128[0]) <= 63)
      {
        v51 = (uint64_t)(a1 + 16);
      }
      else
      {
        v51 = *((_QWORD *)a1 + 1) - 8;
        v50 = 63 - LODWORD(v128[0]);
      }
      *(_QWORD *)(v51 + 8 * v50) = a4;
      if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= a1[7])
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a1);
      v52 = v45 >> 4;
      *(_DWORD *)a1 = v45 >> 4;
      a1[6] = a1[6] & 0x80 | *(_BYTE *)(v45 + 10);
      a1[5] = *(_BYTE *)(v45 + 9);
      v53 = a1 + 4;
      if (a1[4] != *(unsigned __int8 *)(v45 + 8))
      {
        do
        {
          while (1)
          {
            v55 = *v53;
            v56 = __ldxr(v53);
            if (v56 == v55)
              break;
            __clrex();
          }
        }
        while (__stxr(v55 & 0xC0 | *(_BYTE *)(v45 + 8), v53));
      }
      if (*((_DWORD *)a2 + 190) >= a1[7])
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a1);
        LODWORD(v52) = *(_DWORD *)a1;
      }
      if ((*(_BYTE *)((16 * v52) | 0x12) & 8) != 0)
        JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
      if (BYTE4(v131) == 1)
        JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((uint64_t *)&v131, v44.n128_f64[0], v37, v38, v39, v40, v41, v42, v43);
      while (1)
      {
        v54 = v132;
        if (v132 == &v132)
          break;
        v61 = *v132;
        v60 = (_QWORD *)v132[1];
        *v60 = *v132;
        *(_QWORD *)(v61 + 8) = v60;
        *v54 = 0;
        v54[1] = 0;
      }
    }
    else
    {
      LODWORD(v128[0]) = v15;
      if ((*((_BYTE *)v129 + 18) & 4) != 0)
      {
        JSC::Structure::didReplacePropertySlow((int64_t)v129, v15, v16, v17, v18, v19, v20, a8, a9);
        v22 = (int)v128[0];
      }
      else
      {
        v22 = v15;
      }
      if (v22 <= 63)
      {
        v23 = (uint64_t)(a1 + 16);
      }
      else
      {
        v23 = *((_QWORD *)a1 + 1) - 8;
        v22 = 63 - v22;
      }
      *(_QWORD *)(v23 + 8 * v22) = a4;
      if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= a1[7])
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a1);
      if (HIDWORD(v21))
      {
        LODWORD(v131) = 1;
        WORD2(v131) = 0;
        v132 = &v132;
        v133 = &v132;
        v134 = a2;
        v135 = v129;
        v24 = JSC::Structure::attributeChangeTransition(a2, v129, a3, 0, (JSC::Structure *)&v131, v19, v20, a8, a9);
        JSC::JSObject::setStructure((unint64_t)a1, a2, (unint64_t)v24);
        if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
          JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
        if (BYTE4(v131) == 1)
          JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((uint64_t *)&v131, v32, v25, v26, v27, v28, v29, v30, v31);
        while (1)
        {
          v33 = v132;
          if (v132 == &v132)
            break;
          v35 = *v132;
          v34 = (_QWORD *)v132[1];
          *v34 = *v132;
          *(_QWORD *)(v35 + 8) = v34;
          *v33 = 0;
          v33[1] = 0;
        }
      }
    }
    return;
  }
  v128[0] = &v129;
  v128[1] = (JSC::Structure **)a1;
  v128[2] = (JSC::Structure **)a2;
  v128[3] = (JSC::Structure **)&v130;
  v66 = *(_QWORD *)(16 * (v130 & 0xFFFFFFFE) + 0x58);
  if (!v66)
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v130 & 0xFFFFFFFE)), a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v66 = v67;
  }
  v68 = JSC::PropertyTable::find(v66, a3);
  v74 = v69;
  if ((_DWORD)v69 == -1)
  {
    v75 = v68;
    v76 = (unsigned __int8 *)v13 + 15;
    LOBYTE(v134) = 0;
    v132 = (_QWORD *)((char *)v13 + 15);
    LOBYTE(v133) = 1;
    if (__ldaxr((unsigned __int8 *)v13 + 15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v76))
    {
LABEL_68:
      LOBYTE(v134) = 1;
      v135 = a2;
      ++*((_DWORD *)a2 + 229);
      JSC::Structure::pin(v13, (WTF::AtomStringImpl *)&v131, (uint64_t)a2, v66, v70, v71, v72, v73);
      if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
        *((_DWORD *)v13 + 4) &= ~0x20u;
      if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 16) == a3)
        *((_DWORD *)v13 + 4) |= 0x20000000u;
      v82 = *((unsigned __int8 *)v13 + 14);
      v83 = *(_QWORD *)(v66 + 32);
      if (v83 && (v127 = *(unsigned int *)(v83 + 12), (_DWORD)v127))
      {
        v88 = *(unsigned int *)(*(_QWORD *)v83 + 4 * v127 - 4);
        *(_DWORD *)(v83 + 12) = v127 - 1;
      }
      else
      {
        v84 = *(_DWORD *)(v66 + 24);
        v85 = __OFSUB__(v84, v82);
        v87 = v84 - v82;
        v86 = (v87 < 0) ^ v85;
        LODWORD(v88) = v87 + 64;
        if (v86)
          v88 = v84;
        else
          v88 = v88;
      }
      v89 = *(_DWORD *)(a3 + 16);
      if ((v89 & 0x20) != 0)
        v89 = *(_DWORD *)(a3 + 32);
      v90 = *((_DWORD *)v13 + 7) ^ (v89 >> 8);
      v91 = *((_DWORD *)v13 + 8) | (a3 >> 4);
      *((_DWORD *)v13 + 7) = v90;
      *((_DWORD *)v13 + 8) = v91;
      *(_DWORD *)a3 += 2;
      v92 = *(_DWORD *)(v66 + 24);
      v93 = *(_DWORD *)(v66 + 28) + v92;
      if (v93 >= *(_DWORD *)(v66 + 8) >> 1 || (v94 = *(_QWORD *)(v66 + 16), (v94 & 1) != 0) && (int)v88 >= 256)
      {
        v125 = v88;
        JSC::PropertyTable::rehash((JSC::PropertyTable *)v66, a2, (v92 + 1), (int)v88 < 256, v78, v79, v80, v81);
        v126 = JSC::PropertyTable::find(v66, a3);
        v88 = v125;
        v75 = v126;
        v94 = *(_QWORD *)(v66 + 16);
        v93 = *(_DWORD *)(v66 + 28) + *(_DWORD *)(v66 + 24);
      }
      v95 = HIDWORD(v75);
      v96 = v93 + 1;
      v97 = v94 & 0xFFFFFFFFFFFFFFFELL;
      if ((v94 & 1) != 0)
      {
        *(_BYTE *)(v97 + v95) = v96;
        *(_QWORD *)(v97 + *(unsigned int *)(v66 + 8) + 8 * v93) = a3 | (v88 << 56);
      }
      else
      {
        *(_DWORD *)(v97 + 4 * v95) = v96;
        v124 = v97 + 4 * *(unsigned int *)(v66 + 8) + 16 * v93;
        *(_QWORD *)v124 = a3;
        *(_DWORD *)(v124 + 8) = v88;
        *(_BYTE *)(v124 + 12) = 0;
      }
      ++*(_DWORD *)(v66 + 24);
      v98 = *((unsigned __int16 *)v13 + 12);
      if (v98 == 65534)
      {
        v98 = -1;
      }
      else if (v98 == 0xFFFF)
      {
        v98 = *(_DWORD *)(*((_QWORD *)v13 + 8) + 84);
      }
      if ((int)v88 <= v98)
        v115 = v98;
      else
        v115 = v88;
      v116 = v88;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)2>(JSC::VM &,JSC::PropertyName,JSC::JSValue,unsigned int,JSC::PutPropertySlot &)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()(v128, (JSC::Structure *)v115);
      JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v131, v117, v118, v119, v120, v121, v122, v123);
      JSC::JSObject::putDirectOffset((unint64_t)a1, (uint64_t)a2, v116, a4);
      if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
        JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v76);
    goto LABEL_68;
  }
  JSC::JSObject::putDirectOffset((unint64_t)a1, (uint64_t)a2, v69, a4);
  if ((*((_BYTE *)v129 + 18) & 4) != 0)
    JSC::Structure::didReplacePropertySlow((int64_t)v129, v74, v99, v100, v101, v102, v103, v104, v105);
  if (HIDWORD(v74))
  {
    LODWORD(v131) = 1;
    WORD2(v131) = 0;
    v132 = &v132;
    v133 = &v132;
    v134 = a2;
    v135 = v129;
    v106 = JSC::Structure::attributeChangeTransition(a2, v129, a3, 0, (JSC::Structure *)&v131, v102, v103, v104, v105);
    JSC::JSObject::setStructure((unint64_t)a1, a2, (unint64_t)v106);
    if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
      JSC::VM::invalidateStructureChainIntegrity((uint64_t)a2);
    JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire((JSC::DeferredStructureTransitionWatchpointFire *)&v131, v107, v108, v109, v110, v111, v112, v113, v114);
  }
}

void JSC::JSPromise::visitChildren(JSC::JSPromise *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

unint64_t JSC::JSPromise::create(JSC::JSPromise *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  char *v12;
  char *v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::JSPromise *v19;

  v8 = *((_QWORD *)this + 4874);
  if (v8 < *((_QWORD *)this + 4875))
    goto LABEL_2;
  v8 = *((_QWORD *)this + 4876);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *((_QWORD *)this + 4877);
    *((_QWORD *)this + 4875) = v8 + HIDWORD(v11);
    *((_QWORD *)this + 4876) = v8 + (int)v11;
LABEL_2:
    *((_QWORD *)this + 4874) = v8 + 32;
    goto LABEL_3;
  }
  v12 = (char *)this + 38968;
  v13 = (char *)this + 192;
  v19 = this;
  v14 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, (uint64_t)v13, 32, 0, 0, v15, v16, v17);
  a2 = v14;
  v8 = SlowCase;
  this = v19;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v8 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(v8 + 16) = xmmword_19914EFB0;
  return v8;
}

unint64_t JSC::JSPromise::status(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 < 0xFFFE000000000000 || (v1 & 0x80000000) != 0)
    LOBYTE(v1) = COERCE_DOUBLE(v1 - 0x2000000000000);
  return v1 & 3;
}

uint64_t JSC::JSPromise::result(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 < 0xFFFE000000000000 || (v1 & 0x80000000) != 0)
    LOBYTE(v1) = COERCE_DOUBLE(v1 - 0x2000000000000);
  if ((v1 & 3) != 0)
    return *(_QWORD *)(a1 + 24);
  else
    return 10;
}

uint64_t JSC::JSPromise::isHandled(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 < 0xFFFE000000000000 || (v1 & 0x80000000) != 0)
    LODWORD(v1) = COERCE_DOUBLE(v1 - 0x2000000000000);
  return (v1 >> 2) & 1;
}

uint64_t JSC::JSPromise::createNewPromiseCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v23)(uint64_t *);
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a1 + 1960);
  if (*(_DWORD *)v8 <= 0x3Du)
  {
    __break(0xC471u);
    JUMPOUT(0x198A5ABC0);
  }
  v11 = *(_QWORD *)(v8 + 496);
  if ((v11 & 1) != 0)
  {
    v23 = *(uint64_t (**)(uint64_t *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v24 = (uint64_t *)(a1 - 16);
    v27 = *v24;
    v28 = a1;
    v29 = (uint64_t *)(v8 + 496);
    v11 = v23(&v27);
  }
  if (*(_BYTE *)(v11 + 5) == 26)
  {
    v12 = *(_QWORD *)(v11 + 24);
    if ((v12 & 1) != 0)
      v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v12 + 5) == 8)
    {
      LOBYTE(v36) = 1;
      v37 = *(_QWORD *)(v12 + 40);
      LOBYTE(v38) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v36) = 2;
      v13 = *(_QWORD *)(v11 + 16);
      v37 = v12;
      v38 = v13;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v36, v11);
  }
  LOBYTE(v27) = 0;
  v29 = &v31;
  v30 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v31 = a2;
  v28 = 0x800000001;
  v25 = &v31;
  v26 = 1;
  v14 = JSC::call((uint64_t *)a1, v11, (unsigned __int8 *)&v36, 10, (uint64_t)&v25, a6, a7, a8);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v28, v15, v16, v17, v18, v19, v20, v21);
  return v14;
}

void JSC::JSPromise::convertCapabilityToDeferredData(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::VM *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  BOOL v37;
  unsigned int *v38;
  int v39;
  unint64_t v40;
  JSC::JSString *v41;
  uint64_t v42;
  unsigned int v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  JSC::JSString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _WORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  JSC::JSString *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  JSC::JSString *v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  int v88;
  unint64_t v89;
  JSC::JSString *v90;
  uint64_t v91;
  unsigned int v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  JSC::JSString *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _WORD *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  JSC::JSString *v122;
  unint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  BOOL v127;
  int v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int8x16_t **v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t **v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int8x16_t **v149;
  int v150;
  _BYTE *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  size_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  JSC::VM **v178;
  uint64_t v179;
  int v180;
  int v181;
  JSC::VM **p_dst;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  _WORD *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  size_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unsigned __int8 *v214;
  JSC::VM **v215;
  uint64_t v216;
  int v217;
  int v218;
  JSC::VM **v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  _WORD *v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  unsigned __int8 *v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  unint64_t v246;
  size_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unsigned __int8 *v251;
  JSC::VM **v252;
  uint64_t v253;
  int v254;
  int v255;
  JSC::VM **v256;
  uint64_t v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned __int16 *v271;
  unsigned int v272;
  unsigned __int16 *v273;
  uint64_t v274;
  unsigned int v275;
  unsigned __int16 *v276;
  uint64_t v277;
  unsigned int v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned __int8 *v286;
  unsigned int v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  int v292;
  uint64_t v293;
  int v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  unsigned __int8 *v298;
  uint64_t v299;
  unsigned int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  int v305;
  uint64_t v306;
  int v307;
  int v308;
  unint64_t v309;
  unint64_t v310;
  unsigned __int8 *v311;
  uint64_t v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  int v318;
  uint64_t v319;
  int v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unsigned int *v325;
  uint64_t v326;
  uint64_t Index;
  int v328;
  char v329;
  uint64_t v330;
  unsigned int *v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  char v335;
  uint64_t v336;
  unsigned int *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  char v341;
  int v342;
  _BYTE *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  _BYTE *v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  _BYTE *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v355;
  unsigned __int16 *v356;
  unsigned int v357;
  unsigned __int16 *v359;
  uint64_t v360;
  unsigned int v361;
  unsigned __int16 *v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char v372;
  char v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  char v378;
  int v379;
  unint64_t v380;
  unint64_t v381;
  unsigned __int8 *v382;
  uint64_t v383;
  unsigned int v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char v388;
  char v389;
  int v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  char v394;
  int v395;
  unint64_t v396;
  unint64_t v397;
  unsigned __int8 *v398;
  uint64_t v399;
  unsigned int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  char v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  char v410;
  int v411;
  unint64_t v412;
  unint64_t v413;
  int v414;
  int v415;
  int v416;
  uint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  uint64_t v421;
  _DWORD *v422;
  int v423;
  unsigned __int8 *v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  JSC::JSString *v429;
  int v430;
  unsigned __int8 *v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  JSC::JSString *v436;
  int v437;
  unint64_t v438;
  unint64_t v439;
  char v440;
  uint64_t v441;
  int v442;
  char v443;
  uint64_t v444;
  int v445;
  char v446;
  uint64_t v447;
  int v448;
  JSC::VMTraps *v449;
  JSC::VMTraps *v450;
  JSC::VMTraps *v451;
  JSC::VMTraps *v452;
  uint64_t v454;
  JSC::JSString *v455;
  uint64_t (*v456)(unint64_t);
  uint64_t v457;
  unint64_t v458;
  JSC::JSString *v459;
  JSC::JSString *v460;
  _QWORD v461[2];
  uint64_t v462;
  char v463;
  int8x16_t **v464;
  uint64_t v465;
  JSC::VM *__dst;
  char v467;
  char __s[3];
  _BYTE v469[39];

  v10 = a2;
  *(_QWORD *)&v469[23] = *MEMORY[0x1E0C80C00];
  v455 = (JSC::JSString *)a2;
  v12 = *((_QWORD *)a1 + 7);
  v13 = v12 + 41952;
  v14 = *(_QWORD *)(v12 + 41952);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 2784);
  if (v15)
    *(_DWORD *)v15 += 2;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v458 = 0xFFFFFFFF00000000;
  LOBYTE(v462) = 0;
  v463 = 0;
  v464 = 0;
  v465 = 0;
  v460 = 0;
  memset(v461, 0, 13);
  v459 = (JSC::JSString *)a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v16 = *(unsigned __int8 *)(a2 + 5);
    v17 = (JSC::VM *)v12;
    if (v16 > 0x16)
      goto LABEL_5;
    if (v16 == 2)
    {
      if (*(_QWORD *)(v14 + 1768) == v15)
      {
        v324 = *(_QWORD *)(a2 + 8);
        if ((v324 & 1) != 0)
          v325 = (unsigned int *)(a2 + 16);
        else
          v325 = (unsigned int *)(v324 + 4);
        v326 = *v325;
        if ((v326 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v326) + 0x2000000000000;
        else
          Index = v326 | 0xFFFE000000000000;
        v328 = 14;
        goto LABEL_800;
      }
      if (v15)
      {
        v342 = *(_DWORD *)(v15 + 16);
        if ((v342 & 0x20) == 0)
        {
          v343 = *(_BYTE **)(v15 + 8);
          v344 = *(unsigned int *)(v15 + 4);
          if ((v342 & 4) != 0)
          {
            if (!(_DWORD)v344)
              goto LABEL_824;
            a3 = *v343 - 48;
            if (a3 > 9)
              goto LABEL_824;
            if (v344 >= 2 && *v343 == 48)
              goto LABEL_824;
            v418 = v344 - 1;
            v419 = v343 + 1;
            while (v418)
            {
              if (a3 > 0x19999999)
                goto LABEL_824;
              v420 = *v419 - 48;
              if (v420 > 9)
                goto LABEL_824;
              v329 = 0;
              v37 = __CFADD__(v420, 10 * a3);
              a3 = v420 + 10 * (_DWORD)a3;
              --v418;
              ++v419;
              if (v37)
                goto LABEL_825;
            }
          }
          else
          {
            if (!(_DWORD)v344)
              goto LABEL_824;
            a3 = *(unsigned __int16 *)v343 - 48;
            if (a3 > 9)
              goto LABEL_824;
            if (*(_WORD *)v343 == 48 && v344 > 1)
              goto LABEL_824;
            v355 = v344 - 1;
            v356 = (unsigned __int16 *)(v343 + 2);
            while (v355)
            {
              if (a3 > 0x19999999)
                goto LABEL_824;
              v357 = *v356 - 48;
              if (v357 > 9)
                goto LABEL_824;
              v329 = 0;
              v37 = __CFADD__(v357, 10 * a3);
              a3 = v357 + 10 * (_DWORD)a3;
              --v355;
              ++v356;
              if (v37)
                goto LABEL_825;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v421 = *(_QWORD *)(a2 + 8);
            v422 = (_DWORD *)((v421 & 1) != 0 ? a2 + 16 : v421 + 4);
            if (*v422 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a10);
              if (!*(_DWORD *)(v12 + 80))
                goto LABEL_1090;
              v423 = *(_DWORD *)(v12 + 80);
              if ((v423 & 0x27) != 0 && (v423 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v12 + 16))
              {
LABEL_1090:
                v328 = 10;
LABEL_800:
                v456 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v458) = v328;
                v460 = 0;
                v329 = 1;
                BYTE1(v461[1]) = 1;
                goto LABEL_825;
              }
            }
          }
        }
      }
LABEL_824:
      v329 = 0;
LABEL_825:
      if (*(_DWORD *)(v12 + 80))
      {
        v414 = *(_DWORD *)(v12 + 80);
        if ((v414 & 0x27) != 0 && (v414 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_27;
      }
      if ((v329 & 1) != 0)
        goto LABEL_44;
    }
  }
  v345 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v455, (unint64_t)a1);
  if (!v345)
    goto LABEL_27;
  v10 = v345;
  v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_5:
  v18 = (_BYTE *)(v10 + 6);
  v19 = v15 >> 4;
  v20 = v10;
  if ((*(_BYTE *)(v10 + 6) & 8) == 0)
  {
    v21 = v10;
    while (1)
    {
      v22 = *(_DWORD *)v21 & 0xFFFFFFFE;
      v23 = 16 * v22;
      if ((_DWORD)v19)
      {
        if ((v19 & ~*(_DWORD *)(16 * v22 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v23, v17, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v24)
          {
            __dst = (JSC::VM *)v15;
            v25 = JSC::PropertyTable::get(v24, (uint64_t *)&__dst);
            a6 = v25;
            if ((_DWORD)v25 != -1)
              break;
          }
        }
      }
      if ((*v18 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v21, v17, v15, (uint64_t)&v456) & 1) != 0)
      {
        goto LABEL_44;
      }
      v20 = *(_QWORD *)(v23 + 48);
      if (!v20)
        v20 = *(_QWORD *)(v21 + 16);
      if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
      {
        if (!v15)
          goto LABEL_27;
        v28 = *(_DWORD *)(v15 + 16);
        if ((v28 & 0x20) != 0)
          goto LABEL_27;
        v29 = *(_WORD **)(v15 + 8);
        v30 = *(unsigned int *)(v15 + 4);
        if ((v28 & 4) == 0)
        {
          if ((_DWORD)v30)
          {
            v31 = (unsigned __int16)*v29 - 48;
            if (v31 <= 9 && (*v29 != 48 || v30 <= 1))
            {
              v34 = v30 - 1;
              v35 = v29 + 1;
              v454 = 10;
              while (v34)
              {
                if (v31 <= 0x19999999)
                {
                  v36 = *v35 - 48;
                  if (v36 <= 9)
                  {
                    v37 = __CFADD__(v36, 10 * v31);
                    v31 = v36 + 10 * v31;
                    --v34;
                    ++v35;
                    if (!v37)
                      continue;
                  }
                }
                goto LABEL_47;
              }
              goto LABEL_647;
            }
          }
          goto LABEL_27;
        }
        if (!(_DWORD)v30)
          goto LABEL_27;
        v31 = *(unsigned __int8 *)v29 - 48;
        if (v31 > 9 || v30 >= 2 && *(_BYTE *)v29 == 48)
          goto LABEL_27;
        v285 = v30 - 1;
        v286 = (unsigned __int8 *)v29 + 1;
        v454 = 10;
        while (v285)
        {
          if (v31 <= 0x19999999)
          {
            v287 = *v286 - 48;
            if (v287 <= 9)
            {
              v37 = __CFADD__(v287, 10 * v31);
              v31 = v287 + 10 * v31;
              --v285;
              ++v286;
              if (!v37)
                continue;
            }
          }
          goto LABEL_47;
        }
LABEL_647:
        if (v31 == -1)
        {
LABEL_27:
          v32 = 10;
          goto LABEL_46;
        }
        v288 = v31;
        v289 = *((_QWORD *)a1 + 7);
        v454 = 10;
        while (2)
        {
          v290 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v291 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v290 + 0x4C) + 0x70))(v10, a1, v288, &v456);
          if (*(_DWORD *)(v289 + 80))
          {
            v294 = *(_DWORD *)(v289 + 80);
            if ((v294 & 0x27) != 0 && (v294 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v289 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v289 + 16))
              goto LABEL_47;
          }
          if ((v291 & 1) != 0)
            goto LABEL_44;
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_47;
            v292 = *(unsigned __int8 *)(v10 + 5);
            if (v292 != 61)
              goto LABEL_653;
          }
          else
          {
            v292 = *(unsigned __int8 *)(v10 + 5);
            if (v292 == 61)
            {
              if (BYTE2(v461[1]) == 1)
                goto LABEL_47;
            }
            else
            {
LABEL_653:
              if ((v292 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v467 = 0;
                  v297 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v296 = (_BYTE)a2 ? v297 : 0;
                }
                else
                {
                  v296 = *(_QWORD *)(v10 + 24);
                }
                if (v296 <= v288)
                  goto LABEL_47;
              }
            }
          }
          if ((*(_WORD *)(v290 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
          {
            v293 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v293)
              v293 = *(_QWORD *)(v10 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v293 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v10, a1);
            }
            else
            {
              v293 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v293)
                v293 = *(_QWORD *)(v10 + 16);
            }
            if (*(_DWORD *)(v289 + 80))
            {
              v295 = *(_DWORD *)(v289 + 80);
              if ((v295 & 0x27) != 0 && (v295 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v289 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v289 + 16))
                goto LABEL_47;
            }
          }
          if ((v293 & 0xFFFE000000000002) != 0)
            goto LABEL_47;
          v10 = v293;
          if (*(unsigned __int8 *)(v293 + 5) <= 0x16u)
            goto LABEL_47;
          continue;
        }
      }
      v18 = (_BYTE *)(v20 + 6);
      v21 = v20;
      if ((*(_BYTE *)(v20 + 6) & 8) != 0)
        goto LABEL_231;
    }
    a5 = HIDWORD(v25);
    if ((int)v25 <= 63)
    {
      v26 = v21 + 16;
      v27 = v25 << 32;
    }
    else
    {
      v26 = *(_QWORD *)(v21 + 8) - 8;
      v27 = 0x3F00000000 - (v25 << 32);
    }
    a4 = *(_QWORD *)(v26 + (v27 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_32;
    v33 = *(unsigned __int8 *)(a4 + 5);
    if (v33 != 5)
    {
      if (v33 != 6)
      {
LABEL_32:
        v456 = (uint64_t (*)(unint64_t))a4;
        v460 = (JSC::JSString *)v21;
LABEL_33:
        v458 = __PAIR64__(a6, a5);
        LOWORD(v461[1]) = 257;
        goto LABEL_44;
      }
      v138 = *(_DWORD *)(v23 + 16) & 3;
      v139 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v141 = *(int8x16_t ***)(a4 + 24);
        v140 = *(_QWORD *)(a4 + 32);
        v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v457 = v139;
        LODWORD(v458) = HIDWORD(v25);
        v460 = (JSC::JSString *)v21;
        goto LABEL_218;
      }
      v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v457 = v139;
      LODWORD(v458) = HIDWORD(v25);
      v460 = (JSC::JSString *)v21;
LABEL_577:
      BYTE1(v461[1]) = 3;
      if (v138 != 2)
        LOBYTE(v461[1]) = 1;
      goto LABEL_44;
    }
    v38 = (unsigned int *)v21;
LABEL_43:
    JSC::JSObject::fillGetterPropertySlot(v38, a2, (uint64_t)&v456, a4, a5, a6);
    goto LABEL_44;
  }
LABEL_231:
  if (v15)
  {
    v150 = *(_DWORD *)(v15 + 16);
    if ((v150 & 0x20) == 0)
    {
      v151 = *(_BYTE **)(v15 + 8);
      v152 = *(unsigned int *)(v15 + 4);
      if ((v150 & 4) != 0)
      {
        if ((_DWORD)v152)
        {
          v153 = *v151 - 48;
          if (v153 <= 9 && (v152 < 2 || *v151 != 48))
          {
            v366 = v152 - 1;
            v367 = v151 + 1;
            while (v366)
            {
              if (v153 <= 0x19999999)
              {
                v368 = *v367 - 48;
                if (v368 <= 9)
                {
                  v37 = __CFADD__(v368, 10 * v153);
                  v153 = v368 + 10 * v153;
                  --v366;
                  ++v367;
                  if (!v37)
                    continue;
                }
              }
              goto LABEL_236;
            }
LABEL_893:
            if (v153 != -1)
            {
              v369 = v153;
              v370 = *((_QWORD *)a1 + 7);
              v454 = 10;
              while (1)
              {
                v371 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v372 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v371 + 0x4C) + 0x70))(v10, a1, v369, &v456);
                v373 = v372;
                if (*(_DWORD *)(v370 + 80))
                {
                  v376 = *(_DWORD *)(v370 + 80);
                  if ((v376 & 0x27) != 0 && (v376 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v370 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v377 = *(_QWORD *)(v370 + 16);
                  if (v377)
                    v378 = 1;
                  else
                    v378 = v373;
                  if ((v378 & 1) != 0)
                  {
                    if (!v377)
                      goto LABEL_44;
                    goto LABEL_27;
                  }
                }
                else if ((v372 & 1) != 0)
                {
                  goto LABEL_44;
                }
                if (BYTE2(v461[1]) == 3)
                {
                  if (BYTE4(v461[1]))
                    goto LABEL_47;
                  v374 = *(unsigned __int8 *)(v10 + 5);
                  if (v374 == 61)
                    goto LABEL_900;
                }
                else
                {
                  v374 = *(unsigned __int8 *)(v10 + 5);
                  if (v374 == 61)
                  {
                    if (BYTE2(v461[1]) == 1)
                      goto LABEL_47;
                    goto LABEL_900;
                  }
                }
                if ((v374 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v467 = 0;
                    v381 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v380 = (_BYTE)a2 ? v381 : 0;
                  }
                  else
                  {
                    v380 = *(_QWORD *)(v10 + 24);
                  }
                  if (v380 <= v369)
                    goto LABEL_47;
                }
LABEL_900:
                if ((*(_WORD *)(v371 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
                {
                  v375 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v375)
                    v375 = *(_QWORD *)(v10 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v375 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v10, a1);
                  }
                  else
                  {
                    v375 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v375)
                      v375 = *(_QWORD *)(v10 + 16);
                  }
                  if (*(_DWORD *)(v370 + 80))
                  {
                    v379 = *(_DWORD *)(v370 + 80);
                    if ((v379 & 0x27) != 0 && (v379 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v370 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v370 + 16))
                      goto LABEL_47;
                  }
                }
                if ((v375 & 0xFFFE000000000002) == 0)
                {
                  v10 = v375;
                  if (*(unsigned __int8 *)(v375 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_47;
              }
            }
          }
        }
      }
      else if ((_DWORD)v152)
      {
        v153 = *(unsigned __int16 *)v151 - 48;
        if (v153 <= 9 && (*(_WORD *)v151 != 48 || v152 <= 1))
        {
          v270 = v152 - 1;
          v271 = (unsigned __int16 *)(v151 + 2);
          while (v270)
          {
            if (v153 <= 0x19999999)
            {
              v272 = *v271 - 48;
              if (v272 <= 9)
              {
                v37 = __CFADD__(v272, 10 * v153);
                v153 = v272 + 10 * v153;
                --v270;
                ++v271;
                if (!v37)
                  continue;
              }
            }
            goto LABEL_236;
          }
          goto LABEL_893;
        }
      }
    }
  }
LABEL_236:
  v154 = *((_QWORD *)a1 + 7);
  v454 = 10;
  while (1)
  {
    v155 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v20 + 6) & 8) == 0)
      break;
    v446 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C) + 0x68))(v20, a1, v15, &v456);
    if (*(_DWORD *)(v154 + 80))
    {
      v186 = *(_DWORD *)(v154 + 80);
      if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v154 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v154 + 16))
        goto LABEL_47;
    }
    if ((v446 & 1) != 0)
      goto LABEL_44;
    if (BYTE2(v461[1]) == 3)
    {
      if (BYTE4(v461[1]))
        goto LABEL_47;
      v162 = *(unsigned __int8 *)(v20 + 5);
      if (v162 == 61)
        goto LABEL_243;
    }
    else
    {
      v162 = *(unsigned __int8 *)(v20 + 5);
      if (v162 == 61)
      {
        if (BYTE2(v461[1]) == 1)
          goto LABEL_47;
        goto LABEL_243;
      }
    }
    if (!v15)
      goto LABEL_243;
    if ((v162 - 50) < 0xFFFFFFF5)
      goto LABEL_243;
    v163 = *(_DWORD *)(v15 + 16);
    if ((v163 & 0x20) != 0)
      goto LABEL_243;
    v164 = *(unsigned int *)(v15 + 4);
    if (!(_DWORD)v164)
      goto LABEL_243;
    v165 = *(unsigned __int8 **)(v15 + 8);
    if ((v163 & 4) != 0)
    {
      v166 = *v165;
      if ((_DWORD)v164 == 1)
      {
LABEL_270:
        if ((v166 - 48) < 0xA)
          goto LABEL_47;
        goto LABEL_243;
      }
      if (v166 == 45)
      {
        v166 = v165[1];
        goto LABEL_274;
      }
      if ((v166 - 48) < 0xA)
        goto LABEL_285;
      if ((_DWORD)v164 == 8)
        goto LABEL_284;
    }
    else
    {
      v166 = *(unsigned __int16 *)v165;
      if ((_DWORD)v164 == 1)
        goto LABEL_270;
      if (v166 == 45)
      {
        v166 = *((unsigned __int16 *)v165 + 1);
LABEL_274:
        if ((v166 - 48) < 0xA)
        {
          if ((_DWORD)v164 == 2)
            goto LABEL_47;
          goto LABEL_285;
        }
        if ((_DWORD)v164 != 9)
          goto LABEL_243;
LABEL_284:
        if (v166 != 73)
          goto LABEL_243;
        goto LABEL_285;
      }
      if ((v166 - 48) < 0xA || (_DWORD)v164 == 8 && v166 == 73)
        goto LABEL_285;
    }
    if ((_DWORD)v164 != 3 || v166 != 78)
      goto LABEL_243;
LABEL_285:
    v439 = v439 & 0xFFFFFF0000000000 | v164 | ((unint64_t)((v163 >> 2) & 1) << 32);
    JSC::jsToNumber(v165, v439);
    v168 = (v167 >> 52) & 0x7FF;
    if ((_DWORD)v168 == 2047)
    {
      if ((v167 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v169 = v469;
      }
      else
      {
        if ((v167 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v175 = &__s[1];
        }
        else
        {
          v175 = __s;
        }
        *(_QWORD *)v175 = 0x7974696E69666E49;
        v169 = v175 + 8;
      }
      goto LABEL_299;
    }
    v170 = v167 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v167 & 0x8000000000000000) != 0 && v170)
    {
      __s[0] = 45;
      v171 = &__s[1];
    }
    else
    {
      if (!v170)
      {
        __s[0] = 48;
        v169 = &__s[1];
        goto LABEL_299;
      }
      v171 = __s;
    }
    v447 = (uint64_t)v171;
    v172 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v167 & 0x800FFFFFFFFFFFFFLL, v168);
    v169 = WTF::dragonbox::detail::to_shortest(v172, v173, v447, v174);
LABEL_299:
    *v169 = 0;
    v448 = strlen(__s);
    memcpy(&__dst, __s, v448);
    *((_BYTE *)&__dst + v448) = 0;
    v176 = *(unsigned int *)(v15 + 4);
    v177 = *(unsigned __int8 **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if ((_DWORD)v176)
      {
        p_dst = &__dst;
        v183 = *(unsigned int *)(v15 + 4);
        do
        {
          v185 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v184 = v185;
          if (!v185 || *v177 != v184)
            goto LABEL_243;
          ++v177;
        }
        while (--v183);
      }
    }
    else if ((_DWORD)v176)
    {
      v178 = &__dst;
      v179 = *(unsigned int *)(v15 + 4);
      do
      {
        v181 = *(unsigned __int8 *)v178;
        v178 = (JSC::VM **)((char *)v178 + 1);
        v180 = v181;
        if (!v181 || *(unsigned __int16 *)v177 != v180)
          goto LABEL_243;
        v177 += 2;
      }
      while (--v179);
    }
    if (!*((_BYTE *)&__dst + v176))
      goto LABEL_47;
LABEL_243:
    if ((*(_WORD *)(v155 + 12) & 0x800) == 0)
    {
      v158 = *(_DWORD *)v20;
LABEL_245:
      v159 = *(_QWORD *)(16 * (v158 & 0xFFFFFFFE) + 0x30);
      if (!v159)
        v159 = *(_QWORD *)(v20 + 16);
      goto LABEL_247;
    }
    v158 = *(_DWORD *)v20;
    if (BYTE2(v461[1]) == 3)
      goto LABEL_245;
    v160 = 16 * (v158 & 0xFFFFFFFE);
    if ((*(_WORD *)(v160 + 12) & 0x800) != 0)
    {
      v159 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v160 + 76) + 0xB0))(v20, a1);
    }
    else
    {
      v159 = *(_QWORD *)(v160 + 48);
      if (!v159)
        v159 = *(_QWORD *)(v20 + 16);
    }
    if (*(_DWORD *)(v154 + 80))
    {
      v161 = *(_DWORD *)(v154 + 80);
      if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v154 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v154 + 16))
        goto LABEL_47;
    }
LABEL_247:
    if ((v159 & 0xFFFE000000000002) == 0)
    {
      v20 = v159;
      if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
        continue;
    }
    goto LABEL_47;
  }
  if (!(_DWORD)v19
    || (v19 & ~*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE)), (JSC::VM *)v154, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v156)|| (__dst = (JSC::VM *)v15, v157 = JSC::PropertyTable::get(v156, (uint64_t *)&__dst), a6 = v157, (_DWORD)v157 == -1))
  {
    if ((*(_BYTE *)(v20 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, (JSC::VM *)v154, v15, (uint64_t)&v456) & 1) != 0)
    {
      goto LABEL_44;
    }
    goto LABEL_243;
  }
  a5 = HIDWORD(v157);
  if ((int)v157 <= 63)
  {
    v264 = v20 + 16;
    v265 = v157 << 32;
  }
  else
  {
    v264 = *(_QWORD *)(v20 + 8) - 8;
    v265 = 0x3F00000000 - (v157 << 32);
  }
  a4 = *(_QWORD *)(v264 + (v265 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_589:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = (JSC::JSString *)v20;
    goto LABEL_33;
  }
  v279 = *(unsigned __int8 *)(a4 + 5);
  if (v279 == 5)
  {
    v38 = (unsigned int *)v20;
    goto LABEL_43;
  }
  if (v279 != 6)
    goto LABEL_589;
  v138 = *(_DWORD *)(v155 + 16) & 3;
  v282 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v457 = v282;
    LODWORD(v458) = HIDWORD(v157);
    v460 = (JSC::JSString *)v20;
    goto LABEL_577;
  }
  v141 = *(int8x16_t ***)(a4 + 24);
  v140 = *(_QWORD *)(a4 + 32);
  v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v457 = v282;
  LODWORD(v458) = HIDWORD(v157);
  v460 = (JSC::JSString *)v20;
LABEL_218:
  BYTE1(v461[1]) = 3;
  if (v138 != 2)
    LOBYTE(v461[1]) = 1;
  BYTE3(v461[1]) = 1;
  v464 = v141;
  v465 = v140;
LABEL_44:
  if (BYTE1(v461[1]) == 1)
  {
    v32 = (uint64_t)v456;
LABEL_46:
    v454 = v32;
  }
  else
  {
    if (BYTE1(v461[1]) == 2)
    {
      v71 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v456, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v74 = v460;
      v75 = *(_QWORD *)(16 * (*(_DWORD *)v460 & 0xFFFFFFFE) + 0x28);
      if ((v458 & 0x20) != 0)
        v74 = v459;
      if (BYTE3(v461[1]) != 1)
        goto LABEL_118;
      if (((unint64_t)v74 & 0xFFFE000000000002) != 0)
        goto LABEL_630;
      v76 = *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C);
      v77 = *(_DWORD *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C) != 0;
      v78 = 16 * v76;
      if ((_DWORD)v76)
        v79 = v464 == (int8x16_t **)v78;
      else
        v79 = 1;
      if (!v79)
      {
        do
        {
          v78 = *(_QWORD *)(v78 + 16);
          v77 = v78 != 0;
        }
        while ((int8x16_t **)v78 != v464 && v78 != 0);
      }
      if (!v77)
      {
LABEL_630:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v71 = JSC::throwDOMAttributeGetterTypeError(v75, &__dst, v464, (WTF::StringImpl *)v15);
      }
      else
      {
LABEL_118:
        v71 = v456(v75);
      }
    }
    v454 = v71;
  }
LABEL_47:
  if (v463)
  {
    v39 = *(_DWORD *)(v462 + 4);
    if (!v39)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5C634);
    }
    *(_DWORD *)(v462 + 4) = v39 - 1;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v261 = *(_DWORD *)(v12 + 80);
    if ((v261 & 0x27) != 0 && (v261 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_542;
  }
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 48) + 1408);
  if (v40)
    *(_DWORD *)v40 += 2;
  v41 = v455;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v458 = 0xFFFFFFFF00000000;
  LOBYTE(v462) = 0;
  v463 = 0;
  v464 = 0;
  v465 = 0;
  v460 = 0;
  memset(v461, 0, 13);
  v459 = v455;
  if (((unint64_t)v455 & 0xFFFE000000000002) != 0)
    goto LABEL_837;
  v42 = *((_QWORD *)a1 + 7);
  v43 = *((unsigned __int8 *)v455 + 5);
  if (v43 > 0x16)
    goto LABEL_58;
  if (v43 != 2)
    goto LABEL_837;
  if (*(_QWORD *)(*(_QWORD *)(v42 + 41952) + 1768) != v40)
  {
    if (v40)
    {
      v346 = *(_DWORD *)(v40 + 16);
      if ((v346 & 0x20) == 0)
      {
        v347 = *(_BYTE **)(v40 + 8);
        v348 = *(unsigned int *)(v40 + 4);
        if ((v346 & 4) != 0)
        {
          if ((_DWORD)v348)
          {
            a3 = *v347 - 48;
            if (a3 <= 9 && (v348 < 2 || *v347 != 48))
            {
              v425 = v347 + 1;
              v426 = v348 - 1;
              while (v426)
              {
                if (a3 > 0x19999999)
                  goto LABEL_834;
                v427 = *v425 - 48;
                if (v427 > 9)
                  goto LABEL_834;
                v335 = 0;
                v37 = __CFADD__(v427, 10 * a3);
                a3 = v427 + 10 * (_DWORD)a3;
                ++v425;
                --v426;
                if (v37)
                  goto LABEL_835;
              }
LABEL_1109:
              if ((_DWORD)a3 != -1)
              {
                v428 = *((_QWORD *)v455 + 1);
                v429 = (v428 & 1) != 0 ? (JSC::JSString *)((char *)v455 + 16) : (JSC::JSString *)(v428 + 4);
                if (*(_DWORD *)v429 > a3)
                {
                  v333 = JSC::JSString::getIndex(v455, a1, a3, a4, a5, a6, a7, a8, a10);
                  if (!*(_DWORD *)(v42 + 80))
                    goto LABEL_1115;
                  v430 = *(_DWORD *)(v42 + 80);
                  if ((v430 & 0x27) != 0 && (v430 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (!*(_QWORD *)(v42 + 16))
                  {
LABEL_1115:
                    v334 = 10;
                    goto LABEL_809;
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v348)
        {
          a3 = *(unsigned __int16 *)v347 - 48;
          if (a3 <= 9 && (*(_WORD *)v347 != 48 || v348 <= 1))
          {
            v359 = (unsigned __int16 *)(v347 + 2);
            v360 = v348 - 1;
            while (v360)
            {
              if (a3 > 0x19999999)
                goto LABEL_834;
              v361 = *v359 - 48;
              if (v361 > 9)
                goto LABEL_834;
              v335 = 0;
              v37 = __CFADD__(v361, 10 * a3);
              a3 = v361 + 10 * (_DWORD)a3;
              ++v359;
              --v360;
              if (v37)
                goto LABEL_835;
            }
            goto LABEL_1109;
          }
        }
      }
    }
LABEL_834:
    v335 = 0;
    goto LABEL_835;
  }
  v330 = *((_QWORD *)v455 + 1);
  if ((v330 & 1) != 0)
    v331 = (unsigned int *)((char *)v455 + 16);
  else
    v331 = (unsigned int *)(v330 + 4);
  v332 = *v331;
  if ((v332 & 0x80000000) != 0)
    v333 = COERCE__INT64((double)v332) + 0x2000000000000;
  else
    v333 = v332 | 0xFFFE000000000000;
  v334 = 14;
LABEL_809:
  v456 = (uint64_t (*)(unint64_t))v333;
  LODWORD(v458) = v334;
  v460 = 0;
  v335 = 1;
  BYTE1(v461[1]) = 1;
LABEL_835:
  if (*(_DWORD *)(v42 + 80))
  {
    v415 = *(_DWORD *)(v42 + 80);
    if ((v415 & 0x27) != 0 && (v415 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v42 + 16))
      goto LABEL_80;
  }
  if ((v335 & 1) != 0)
    goto LABEL_100;
LABEL_837:
  v349 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v455, (unint64_t)a1);
  if (!v349)
    goto LABEL_80;
  v41 = (JSC::JSString *)v349;
  v42 = *((_QWORD *)a1 + 7);
LABEL_58:
  v44 = (char *)v41 + 6;
  v45 = v40 >> 4;
  v46 = (uint64_t)v41;
  if ((*((_BYTE *)v41 + 6) & 8) == 0)
  {
    v47 = v41;
    while (1)
    {
      v48 = *(_DWORD *)v47 & 0xFFFFFFFE;
      v49 = 16 * v48;
      if ((_DWORD)v45)
      {
        if ((v45 & ~*(_DWORD *)(16 * v48 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v49, (JSC::VM *)v42, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v50)
          {
            __dst = (JSC::VM *)v40;
            v51 = JSC::PropertyTable::get(v50, (uint64_t *)&__dst);
            a6 = v51;
            if ((_DWORD)v51 != -1)
              break;
          }
        }
      }
      if ((*v44 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v47, (JSC::VM *)v42, v40, (uint64_t)&v456) & 1) != 0)
      {
        goto LABEL_100;
      }
      v46 = *(_QWORD *)(v49 + 48);
      if (!v46)
        v46 = *((_QWORD *)v47 + 2);
      if ((v46 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v46 + 5) < 0x17u)
      {
        if (!v40)
          goto LABEL_80;
        v54 = *(_DWORD *)(v40 + 16);
        if ((v54 & 0x20) != 0)
          goto LABEL_80;
        v55 = *(_WORD **)(v40 + 8);
        v56 = *(unsigned int *)(v40 + 4);
        if ((v54 & 4) == 0)
        {
          if ((_DWORD)v56)
          {
            v57 = (unsigned __int16)*v55 - 48;
            if (v57 <= 9 && (*v55 != 48 || v56 <= 1))
            {
              v60 = v55 + 1;
              v61 = v56 - 1;
              v58 = 10;
              while (v61)
              {
                if (v57 <= 0x19999999)
                {
                  v62 = *v60 - 48;
                  if (v62 <= 9)
                  {
                    v37 = __CFADD__(v62, 10 * v57);
                    v57 = v62 + 10 * v57;
                    ++v60;
                    --v61;
                    if (!v37)
                      continue;
                  }
                }
                goto LABEL_136;
              }
              goto LABEL_699;
            }
          }
          goto LABEL_80;
        }
        if (!(_DWORD)v56)
          goto LABEL_80;
        v57 = *(unsigned __int8 *)v55 - 48;
        if (v57 > 9 || v56 >= 2 && *(_BYTE *)v55 == 48)
          goto LABEL_80;
        v298 = (unsigned __int8 *)v55 + 1;
        v299 = v56 - 1;
        v58 = 10;
        while (v299)
        {
          if (v57 <= 0x19999999)
          {
            v300 = *v298 - 48;
            if (v300 <= 9)
            {
              v37 = __CFADD__(v300, 10 * v57);
              v57 = v300 + 10 * v57;
              ++v298;
              --v299;
              if (!v37)
                continue;
            }
          }
          goto LABEL_136;
        }
LABEL_699:
        if (v57 == -1)
        {
LABEL_80:
          v58 = 10;
          goto LABEL_136;
        }
        v301 = v57;
        v302 = *((_QWORD *)a1 + 7);
        v449 = (JSC::VMTraps *)(v302 + 64);
        v58 = 10;
        while (2)
        {
          v303 = 16 * (*(_DWORD *)v41 & 0xFFFFFFFE);
          v304 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v303 + 0x4C) + 0x70))(v41, a1, v301, &v456);
          if (*(_DWORD *)(v302 + 80))
          {
            v307 = *(_DWORD *)(v302 + 80);
            if ((v307 & 0x27) != 0 && (v307 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v449, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v302 + 16))
              goto LABEL_136;
          }
          if ((v304 & 1) != 0)
            goto LABEL_100;
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_136;
            v305 = *((unsigned __int8 *)v41 + 5);
            if (v305 != 61)
              goto LABEL_705;
          }
          else
          {
            v305 = *((unsigned __int8 *)v41 + 5);
            if (v305 == 61)
            {
              if (BYTE2(v461[1]) == 1)
                goto LABEL_136;
            }
            else
            {
LABEL_705:
              if ((v305 - 39) <= 0xA)
              {
                if ((*((_BYTE *)v41 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v467 = 0;
                  v310 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v41, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v309 = (_BYTE)a2 ? v310 : 0;
                }
                else
                {
                  v309 = *((_QWORD *)v41 + 3);
                }
                if (v309 <= v301)
                  goto LABEL_136;
              }
            }
          }
          if ((*(_WORD *)(v303 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
          {
            v306 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x30);
            if (!v306)
              v306 = *((_QWORD *)v41 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v306 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v41, a1);
            }
            else
            {
              v306 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x30);
              if (!v306)
                v306 = *((_QWORD *)v41 + 2);
            }
            if (*(_DWORD *)(v302 + 80))
            {
              v308 = *(_DWORD *)(v302 + 80);
              if ((v308 & 0x27) != 0 && (v308 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v449, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v302 + 16))
                goto LABEL_136;
            }
          }
          if ((v306 & 0xFFFE000000000002) != 0)
            goto LABEL_136;
          v41 = (JSC::JSString *)v306;
          if (*(unsigned __int8 *)(v306 + 5) <= 0x16u)
            goto LABEL_136;
          continue;
        }
      }
      v44 = (_BYTE *)(v46 + 6);
      v47 = (JSC::JSString *)v46;
      if ((*(_BYTE *)(v46 + 6) & 8) != 0)
        goto LABEL_332;
    }
    a5 = HIDWORD(v51);
    if ((int)v51 <= 63)
    {
      v52 = (uint64_t)v47 + 16;
      v53 = v51 << 32;
    }
    else
    {
      v52 = *((_QWORD *)v47 + 1) - 8;
      v53 = 0x3F00000000 - (v51 << 32);
    }
    a4 = *(_QWORD *)(v52 + (v53 >> 29));
    if ((a4 & 0xFFFE000000000002) == 0)
    {
      v59 = *(unsigned __int8 *)(a4 + 5);
      if (v59 != 5)
      {
        if (v59 != 6)
          goto LABEL_85;
        v142 = *(_DWORD *)(v49 + 16) & 3;
        v143 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v145 = *(int8x16_t ***)(a4 + 24);
          v144 = *(_QWORD *)(a4 + 32);
          v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v457 = v143;
          LODWORD(v458) = HIDWORD(v51);
          v460 = v47;
          goto LABEL_223;
        }
        v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v457 = v143;
        LODWORD(v458) = HIDWORD(v51);
        v460 = v47;
LABEL_580:
        BYTE1(v461[1]) = 3;
        if (v142 != 2)
          LOBYTE(v461[1]) = 1;
        goto LABEL_100;
      }
      v72 = (unsigned int *)v47;
LABEL_99:
      JSC::JSObject::fillGetterPropertySlot(v72, a2, (uint64_t)&v456, a4, a5, a6);
      goto LABEL_100;
    }
LABEL_85:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = v47;
LABEL_86:
    v458 = __PAIR64__(a6, a5);
    LOWORD(v461[1]) = 257;
    goto LABEL_100;
  }
LABEL_332:
  if (!v40)
    goto LABEL_337;
  v187 = *(_DWORD *)(v40 + 16);
  if ((v187 & 0x20) != 0)
    goto LABEL_337;
  v188 = *(_WORD **)(v40 + 8);
  v189 = *(unsigned int *)(v40 + 4);
  if ((v187 & 4) == 0)
  {
    if ((_DWORD)v189)
    {
      v190 = (unsigned __int16)*v188 - 48;
      if (v190 <= 9 && (*v188 != 48 || v189 <= 1))
      {
        v273 = v188 + 1;
        v274 = v189 - 1;
        while (v274)
        {
          if (v190 <= 0x19999999)
          {
            v275 = *v273 - 48;
            if (v275 <= 9)
            {
              v37 = __CFADD__(v275, 10 * v190);
              v190 = v275 + 10 * v190;
              ++v273;
              --v274;
              if (!v37)
                continue;
            }
          }
          goto LABEL_337;
        }
        goto LABEL_950;
      }
    }
    goto LABEL_337;
  }
  if ((_DWORD)v189)
  {
    v190 = *(unsigned __int8 *)v188 - 48;
    if (v190 <= 9 && (v189 < 2 || *(_BYTE *)v188 != 48))
    {
      v382 = (unsigned __int8 *)v188 + 1;
      v383 = v189 - 1;
      while (v383)
      {
        if (v190 <= 0x19999999)
        {
          v384 = *v382 - 48;
          if (v384 <= 9)
          {
            v37 = __CFADD__(v384, 10 * v190);
            v190 = v384 + 10 * v190;
            ++v382;
            --v383;
            if (!v37)
              continue;
          }
        }
        goto LABEL_337;
      }
LABEL_950:
      if (v190 != -1)
      {
        v385 = v190;
        v386 = *((_QWORD *)a1 + 7);
        v451 = (JSC::VMTraps *)(v386 + 64);
        v58 = 10;
        while (1)
        {
          v387 = 16 * (*(_DWORD *)v41 & 0xFFFFFFFE);
          v388 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v387 + 0x4C) + 0x70))(v41, a1, v385, &v456);
          v389 = v388;
          if (*(_DWORD *)(v386 + 80))
          {
            v392 = *(_DWORD *)(v386 + 80);
            if ((v392 & 0x27) != 0 && (v392 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v451, 7u, a3, a4, a5, a6, a7, a8);
            v393 = *(_QWORD *)(v386 + 16);
            if (v393)
              v394 = 1;
            else
              v394 = v389;
            if ((v394 & 1) != 0)
            {
              if (!v393)
                goto LABEL_100;
              goto LABEL_80;
            }
          }
          else if ((v388 & 1) != 0)
          {
            goto LABEL_100;
          }
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_136;
            v390 = *((unsigned __int8 *)v41 + 5);
            if (v390 == 61)
              goto LABEL_957;
          }
          else
          {
            v390 = *((unsigned __int8 *)v41 + 5);
            if (v390 == 61)
            {
              if (BYTE2(v461[1]) == 1)
                goto LABEL_136;
              goto LABEL_957;
            }
          }
          if ((v390 - 39) <= 0xA)
          {
            if ((*((_BYTE *)v41 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              v467 = 0;
              v397 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v41, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v396 = (_BYTE)a2 ? v397 : 0;
            }
            else
            {
              v396 = *((_QWORD *)v41 + 3);
            }
            if (v396 <= v385)
              goto LABEL_136;
          }
LABEL_957:
          if ((*(_WORD *)(v387 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
          {
            v391 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x30);
            if (!v391)
              v391 = *((_QWORD *)v41 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v391 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v41, a1);
            }
            else
            {
              v391 = *(_QWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x30);
              if (!v391)
                v391 = *((_QWORD *)v41 + 2);
            }
            if (*(_DWORD *)(v386 + 80))
            {
              v395 = *(_DWORD *)(v386 + 80);
              if ((v395 & 0x27) != 0 && (v395 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v451, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v386 + 16))
                goto LABEL_136;
            }
          }
          if ((v391 & 0xFFFE000000000002) == 0)
          {
            v41 = (JSC::JSString *)v391;
            if (*(unsigned __int8 *)(v391 + 5) > 0x16u)
              continue;
          }
          goto LABEL_136;
        }
      }
    }
  }
LABEL_337:
  v191 = *((_QWORD *)a1 + 7);
  v58 = 10;
  while (2)
  {
    v192 = 16 * (*(_DWORD *)v46 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v46 + 6) & 8) != 0)
    {
      v440 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C) + 0x68))(v46, a1, v40, &v456);
      if (*(_DWORD *)(v191 + 80))
      {
        v223 = *(_DWORD *)(v191 + 80);
        if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v191 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v191 + 16))
          goto LABEL_136;
      }
      if ((v440 & 1) != 0)
        goto LABEL_100;
      if (BYTE2(v461[1]) == 3)
      {
        if (BYTE4(v461[1]))
          goto LABEL_136;
        v199 = *(unsigned __int8 *)(v46 + 5);
        if (v199 == 61)
          goto LABEL_344;
      }
      else
      {
        v199 = *(unsigned __int8 *)(v46 + 5);
        if (v199 == 61)
        {
          if (BYTE2(v461[1]) == 1)
            goto LABEL_136;
          goto LABEL_344;
        }
      }
      if (!v40)
        goto LABEL_344;
      if ((v199 - 50) < 0xFFFFFFF5)
        goto LABEL_344;
      v200 = *(_DWORD *)(v40 + 16);
      if ((v200 & 0x20) != 0)
        goto LABEL_344;
      v201 = *(unsigned int *)(v40 + 4);
      if (!(_DWORD)v201)
        goto LABEL_344;
      v202 = *(unsigned __int8 **)(v40 + 8);
      if ((v200 & 4) != 0)
      {
        v203 = *v202;
        if ((_DWORD)v201 == 1)
        {
LABEL_371:
          if ((v203 - 48) < 0xA)
            goto LABEL_136;
          goto LABEL_344;
        }
        if (v203 == 45)
        {
          v203 = v202[1];
          goto LABEL_375;
        }
        if ((v203 - 48) < 0xA)
          goto LABEL_386;
        if ((_DWORD)v201 == 8)
        {
LABEL_385:
          if (v203 != 73)
            goto LABEL_344;
          goto LABEL_386;
        }
      }
      else
      {
        v203 = *(unsigned __int16 *)v202;
        if ((_DWORD)v201 == 1)
          goto LABEL_371;
        if (v203 == 45)
        {
          v203 = *((unsigned __int16 *)v202 + 1);
LABEL_375:
          if ((v203 - 48) < 0xA)
          {
            if ((_DWORD)v201 == 2)
              goto LABEL_136;
            goto LABEL_386;
          }
          if ((_DWORD)v201 != 9)
            goto LABEL_344;
          goto LABEL_385;
        }
        if ((v203 - 48) < 0xA || (_DWORD)v201 == 8 && v203 == 73)
          goto LABEL_386;
      }
      if ((_DWORD)v201 != 3 || v203 != 78)
        goto LABEL_344;
LABEL_386:
      v438 = v438 & 0xFFFFFF0000000000 | v201 | ((unint64_t)((v200 >> 2) & 1) << 32);
      JSC::jsToNumber(v202, v438);
      v205 = (v204 >> 52) & 0x7FF;
      if ((_DWORD)v205 == 2047)
      {
        if ((v204 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", sizeof(__s));
          v206 = v469;
        }
        else
        {
          if ((v204 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v212 = &__s[1];
          }
          else
          {
            v212 = __s;
          }
          *(_QWORD *)v212 = 0x7974696E69666E49;
          v206 = v212 + 8;
        }
        goto LABEL_400;
      }
      v207 = v204 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v204 & 0x8000000000000000) != 0 && v207)
      {
        __s[0] = 45;
        v208 = &__s[1];
      }
      else
      {
        if (!v207)
        {
          __s[0] = 48;
          v206 = &__s[1];
          goto LABEL_400;
        }
        v208 = __s;
      }
      v441 = (uint64_t)v208;
      v209 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v204 & 0x800FFFFFFFFFFFFFLL, v205);
      v206 = WTF::dragonbox::detail::to_shortest(v209, v210, v441, v211);
LABEL_400:
      *v206 = 0;
      v442 = strlen(__s);
      memcpy(&__dst, __s, v442);
      *((_BYTE *)&__dst + v442) = 0;
      v213 = *(unsigned int *)(v40 + 4);
      v214 = *(unsigned __int8 **)(v40 + 8);
      if ((*(_BYTE *)(v40 + 16) & 4) != 0)
      {
        if ((_DWORD)v213)
        {
          v219 = &__dst;
          v220 = *(unsigned int *)(v40 + 4);
          do
          {
            v222 = *(unsigned __int8 *)v219;
            v219 = (JSC::VM **)((char *)v219 + 1);
            v221 = v222;
            if (!v222 || *v214 != v221)
              goto LABEL_344;
            ++v214;
          }
          while (--v220);
        }
      }
      else if ((_DWORD)v213)
      {
        v215 = &__dst;
        v216 = *(unsigned int *)(v40 + 4);
        do
        {
          v218 = *(unsigned __int8 *)v215;
          v215 = (JSC::VM **)((char *)v215 + 1);
          v217 = v218;
          if (!v218 || *(unsigned __int16 *)v214 != v217)
            goto LABEL_344;
          v214 += 2;
        }
        while (--v216);
      }
      if (!*((_BYTE *)&__dst + v213))
        goto LABEL_136;
LABEL_344:
      if ((*(_WORD *)(v192 + 12) & 0x800) != 0)
      {
        v195 = *(_DWORD *)v46;
        if (BYTE2(v461[1]) != 3)
        {
          v197 = 16 * (v195 & 0xFFFFFFFE);
          if ((*(_WORD *)(v197 + 12) & 0x800) != 0)
          {
            v196 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v197 + 76) + 0xB0))(v46, a1);
          }
          else
          {
            v196 = *(_QWORD *)(v197 + 48);
            if (!v196)
              v196 = *(_QWORD *)(v46 + 16);
          }
          if (*(_DWORD *)(v191 + 80))
          {
            v198 = *(_DWORD *)(v191 + 80);
            if ((v198 & 0x27) != 0 && (v198 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v191 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v191 + 16))
              goto LABEL_136;
          }
          goto LABEL_348;
        }
      }
      else
      {
        v195 = *(_DWORD *)v46;
      }
      v196 = *(_QWORD *)(16 * (v195 & 0xFFFFFFFE) + 0x30);
      if (!v196)
        v196 = *(_QWORD *)(v46 + 16);
LABEL_348:
      if ((v196 & 0xFFFE000000000002) != 0)
        goto LABEL_136;
      v46 = v196;
      if (*(unsigned __int8 *)(v196 + 5) <= 0x16u)
        goto LABEL_136;
      continue;
    }
    break;
  }
  if (!(_DWORD)v45
    || (v45 & ~*(_DWORD *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE)), (JSC::VM *)v191, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v193)|| (__dst = (JSC::VM *)v40, v194 = JSC::PropertyTable::get(v193, (uint64_t *)&__dst), a6 = v194, (_DWORD)v194 == -1))
  {
    if ((*(_BYTE *)(v46 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v46, (JSC::VM *)v191, v40, (uint64_t)&v456) & 1) != 0)
    {
      goto LABEL_100;
    }
    goto LABEL_344;
  }
  a5 = HIDWORD(v194);
  if ((int)v194 <= 63)
  {
    v266 = v46 + 16;
    v267 = v194 << 32;
  }
  else
  {
    v266 = *(_QWORD *)(v46 + 8) - 8;
    v267 = 0x3F00000000 - (v194 << 32);
  }
  a4 = *(_QWORD *)(v266 + (v267 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_594:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = (JSC::JSString *)v46;
    goto LABEL_86;
  }
  v280 = *(unsigned __int8 *)(a4 + 5);
  if (v280 == 5)
  {
    v72 = (unsigned int *)v46;
    goto LABEL_99;
  }
  if (v280 != 6)
    goto LABEL_594;
  v142 = *(_DWORD *)(v192 + 16) & 3;
  v283 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v457 = v283;
    LODWORD(v458) = HIDWORD(v194);
    v460 = (JSC::JSString *)v46;
    goto LABEL_580;
  }
  v145 = *(int8x16_t ***)(a4 + 24);
  v144 = *(_QWORD *)(a4 + 32);
  v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v457 = v283;
  LODWORD(v458) = HIDWORD(v194);
  v460 = (JSC::JSString *)v46;
LABEL_223:
  BYTE1(v461[1]) = 3;
  if (v142 != 2)
    LOBYTE(v461[1]) = 1;
  BYTE3(v461[1]) = 1;
  v464 = v145;
  v465 = v144;
LABEL_100:
  if (BYTE1(v461[1]) == 1)
  {
    v58 = (uint64_t)v456;
  }
  else
  {
    if (BYTE1(v461[1]) == 2)
    {
      v73 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v456, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v81 = v460;
      v82 = *(_QWORD *)(16 * (*(_DWORD *)v460 & 0xFFFFFFFE) + 0x28);
      if ((v458 & 0x20) != 0)
        v81 = v459;
      if (BYTE3(v461[1]) != 1)
        goto LABEL_134;
      if (((unint64_t)v81 & 0xFFFE000000000002) != 0)
        goto LABEL_631;
      v83 = *(unsigned int *)(16 * (*(_DWORD *)v81 & 0xFFFFFFFE) + 0x4C);
      v84 = *(_DWORD *)(16 * (*(_DWORD *)v81 & 0xFFFFFFFE) + 0x4C) != 0;
      v85 = 16 * v83;
      if ((_DWORD)v83)
        v86 = v464 == (int8x16_t **)v85;
      else
        v86 = 1;
      if (!v86)
      {
        do
        {
          v85 = *(_QWORD *)(v85 + 16);
          v84 = v85 != 0;
        }
        while ((int8x16_t **)v85 != v464 && v85 != 0);
      }
      if (!v84)
      {
LABEL_631:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v73 = JSC::throwDOMAttributeGetterTypeError(v82, &__dst, v464, (WTF::StringImpl *)v40);
      }
      else
      {
LABEL_134:
        v73 = v456(v82);
      }
    }
    v58 = v73;
  }
LABEL_136:
  if (v463)
  {
    v88 = *(_DWORD *)(v462 + 4);
    if (!v88)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5C654);
    }
    *(_DWORD *)(v462 + 4) = v88 - 1;
  }
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v40, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v262 = *(_DWORD *)(v12 + 80);
    if ((v262 & 0x27) != 0 && (v262 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_542;
  }
  v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 48) + 1296);
  if (v89)
    *(_DWORD *)v89 += 2;
  v90 = v455;
  a10.i64[0] = 0xFFFFFFFF00000000;
  v458 = 0xFFFFFFFF00000000;
  LOBYTE(v462) = 0;
  v463 = 0;
  v464 = 0;
  v465 = 0;
  v460 = 0;
  memset(v461, 0, 13);
  v459 = v455;
  if (((unint64_t)v455 & 0xFFFE000000000002) != 0)
    goto LABEL_847;
  v91 = *((_QWORD *)a1 + 7);
  v92 = *((unsigned __int8 *)v455 + 5);
  if (v92 > 0x16)
    goto LABEL_147;
  if (v92 != 2)
    goto LABEL_847;
  if (*(_QWORD *)(*(_QWORD *)(v91 + 41952) + 1768) != v89)
  {
    if (v89)
    {
      v350 = *(_DWORD *)(v89 + 16);
      if ((v350 & 0x20) == 0)
      {
        v351 = *(_BYTE **)(v89 + 8);
        v352 = *(unsigned int *)(v89 + 4);
        if ((v350 & 4) != 0)
        {
          if ((_DWORD)v352)
          {
            a3 = *v351 - 48;
            if (a3 <= 9 && (v352 < 2 || *v351 != 48))
            {
              v432 = v351 + 1;
              v433 = v352 - 1;
              while (v433)
              {
                if (a3 > 0x19999999)
                  goto LABEL_844;
                v434 = *v432 - 48;
                if (v434 > 9)
                  goto LABEL_844;
                v341 = 0;
                v37 = __CFADD__(v434, 10 * a3);
                a3 = v434 + 10 * (_DWORD)a3;
                ++v432;
                --v433;
                if (v37)
                  goto LABEL_845;
              }
LABEL_1134:
              if ((_DWORD)a3 != -1)
              {
                v435 = *((_QWORD *)v455 + 1);
                v436 = (v435 & 1) != 0 ? (JSC::JSString *)((char *)v455 + 16) : (JSC::JSString *)(v435 + 4);
                if (*(_DWORD *)v436 > a3)
                {
                  v339 = JSC::JSString::getIndex(v455, a1, a3, a4, a5, a6, a7, a8, a10);
                  if (!*(_DWORD *)(v91 + 80))
                    goto LABEL_1140;
                  v437 = *(_DWORD *)(v91 + 80);
                  if ((v437 & 0x27) != 0 && (v437 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v91 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (!*(_QWORD *)(v91 + 16))
                  {
LABEL_1140:
                    v340 = 10;
                    goto LABEL_818;
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v352)
        {
          a3 = *(unsigned __int16 *)v351 - 48;
          if (a3 <= 9 && (*(_WORD *)v351 != 48 || v352 <= 1))
          {
            v363 = (unsigned __int16 *)(v351 + 2);
            v364 = v352 - 1;
            while (v364)
            {
              if (a3 > 0x19999999)
                goto LABEL_844;
              v365 = *v363 - 48;
              if (v365 > 9)
                goto LABEL_844;
              v341 = 0;
              v37 = __CFADD__(v365, 10 * a3);
              a3 = v365 + 10 * (_DWORD)a3;
              ++v363;
              --v364;
              if (v37)
                goto LABEL_845;
            }
            goto LABEL_1134;
          }
        }
      }
    }
LABEL_844:
    v341 = 0;
    goto LABEL_845;
  }
  v336 = *((_QWORD *)v455 + 1);
  if ((v336 & 1) != 0)
    v337 = (unsigned int *)((char *)v455 + 16);
  else
    v337 = (unsigned int *)(v336 + 4);
  v338 = *v337;
  if ((v338 & 0x80000000) != 0)
    v339 = COERCE__INT64((double)v338) + 0x2000000000000;
  else
    v339 = v338 | 0xFFFE000000000000;
  v340 = 14;
LABEL_818:
  v456 = (uint64_t (*)(unint64_t))v339;
  LODWORD(v458) = v340;
  v460 = 0;
  v341 = 1;
  BYTE1(v461[1]) = 1;
LABEL_845:
  if (*(_DWORD *)(v91 + 80))
  {
    v416 = *(_DWORD *)(v91 + 80);
    if ((v416 & 0x27) != 0 && (v416 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v91 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v91 + 16))
      goto LABEL_169;
  }
  if ((v341 & 1) != 0)
    goto LABEL_187;
LABEL_847:
  v353 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v455, (unint64_t)a1);
  if (!v353)
    goto LABEL_169;
  v90 = (JSC::JSString *)v353;
  v91 = *((_QWORD *)a1 + 7);
LABEL_147:
  v93 = (char *)v90 + 6;
  v94 = v89 >> 4;
  v95 = (uint64_t)v90;
  if ((*((_BYTE *)v90 + 6) & 8) == 0)
  {
    v96 = v90;
    while (1)
    {
      v97 = *(_DWORD *)v96 & 0xFFFFFFFE;
      v98 = 16 * v97;
      if ((_DWORD)v94)
      {
        if ((v94 & ~*(_DWORD *)(16 * v97 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v98, (JSC::VM *)v91, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v99)
          {
            __dst = (JSC::VM *)v89;
            v100 = JSC::PropertyTable::get(v99, (uint64_t *)&__dst);
            a6 = v100;
            if ((_DWORD)v100 != -1)
              break;
          }
        }
      }
      if ((*v93 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v96, (JSC::VM *)v91, v89, (uint64_t)&v456) & 1) != 0)
      {
        goto LABEL_187;
      }
      v95 = *(_QWORD *)(v98 + 48);
      if (!v95)
        v95 = *((_QWORD *)v96 + 2);
      if ((v95 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v95 + 5) < 0x17u)
      {
        if (!v89)
          goto LABEL_169;
        v103 = *(_DWORD *)(v89 + 16);
        if ((v103 & 0x20) != 0)
          goto LABEL_169;
        v104 = *(_WORD **)(v89 + 8);
        v105 = *(unsigned int *)(v89 + 4);
        if ((v103 & 4) == 0)
        {
          if ((_DWORD)v105)
          {
            v106 = (unsigned __int16)*v104 - 48;
            if (v106 <= 9 && (*v104 != 48 || v105 <= 1))
            {
              v109 = v104 + 1;
              v110 = v105 - 1;
              v107 = 10;
              while (v110)
              {
                if (v106 <= 0x19999999)
                {
                  v111 = *v109 - 48;
                  if (v111 <= 9)
                  {
                    v37 = __CFADD__(v111, 10 * v106);
                    v106 = v111 + 10 * v106;
                    ++v109;
                    --v110;
                    if (!v37)
                      continue;
                  }
                }
                goto LABEL_207;
              }
              goto LABEL_751;
            }
          }
          goto LABEL_169;
        }
        if (!(_DWORD)v105)
          goto LABEL_169;
        v106 = *(unsigned __int8 *)v104 - 48;
        if (v106 > 9 || v105 >= 2 && *(_BYTE *)v104 == 48)
          goto LABEL_169;
        v311 = (unsigned __int8 *)v104 + 1;
        v312 = v105 - 1;
        v107 = 10;
        while (v312)
        {
          if (v106 <= 0x19999999)
          {
            v313 = *v311 - 48;
            if (v313 <= 9)
            {
              v37 = __CFADD__(v313, 10 * v106);
              v106 = v313 + 10 * v106;
              ++v311;
              --v312;
              if (!v37)
                continue;
            }
          }
          goto LABEL_207;
        }
LABEL_751:
        if (v106 == -1)
        {
LABEL_169:
          v107 = 10;
          goto LABEL_207;
        }
        v314 = v106;
        v315 = *((_QWORD *)a1 + 7);
        v450 = (JSC::VMTraps *)(v315 + 64);
        v107 = 10;
        while (2)
        {
          v316 = 16 * (*(_DWORD *)v90 & 0xFFFFFFFE);
          v317 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v316 + 0x4C) + 0x70))(v90, a1, v314, &v456);
          if (*(_DWORD *)(v315 + 80))
          {
            v320 = *(_DWORD *)(v315 + 80);
            if ((v320 & 0x27) != 0 && (v320 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v450, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v315 + 16))
              goto LABEL_207;
          }
          if ((v317 & 1) != 0)
            goto LABEL_187;
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_207;
            v318 = *((unsigned __int8 *)v90 + 5);
            if (v318 != 61)
              goto LABEL_757;
          }
          else
          {
            v318 = *((unsigned __int8 *)v90 + 5);
            if (v318 == 61)
            {
              if (BYTE2(v461[1]) == 1)
                goto LABEL_207;
            }
            else
            {
LABEL_757:
              if ((v318 - 39) <= 0xA)
              {
                if ((*((_BYTE *)v90 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v467 = 0;
                  v323 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v90, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v322 = (_BYTE)a2 ? v323 : 0;
                }
                else
                {
                  v322 = *((_QWORD *)v90 + 3);
                }
                if (v322 <= v314)
                  goto LABEL_207;
              }
            }
          }
          if ((*(_WORD *)(v316 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
          {
            v319 = *(_QWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x30);
            if (!v319)
              v319 = *((_QWORD *)v90 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v319 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v90, a1);
            }
            else
            {
              v319 = *(_QWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x30);
              if (!v319)
                v319 = *((_QWORD *)v90 + 2);
            }
            if (*(_DWORD *)(v315 + 80))
            {
              v321 = *(_DWORD *)(v315 + 80);
              if ((v321 & 0x27) != 0 && (v321 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v450, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v315 + 16))
                goto LABEL_207;
            }
          }
          if ((v319 & 0xFFFE000000000002) != 0)
            goto LABEL_207;
          v90 = (JSC::JSString *)v319;
          if (*(unsigned __int8 *)(v319 + 5) <= 0x16u)
            goto LABEL_207;
          continue;
        }
      }
      v93 = (_BYTE *)(v95 + 6);
      v96 = (JSC::JSString *)v95;
      if ((*(_BYTE *)(v95 + 6) & 8) != 0)
        goto LABEL_433;
    }
    a5 = HIDWORD(v100);
    if ((int)v100 <= 63)
    {
      v101 = (uint64_t)v96 + 16;
      v102 = v100 << 32;
    }
    else
    {
      v101 = *((_QWORD *)v96 + 1) - 8;
      v102 = 0x3F00000000 - (v100 << 32);
    }
    a4 = *(_QWORD *)(v101 + (v102 >> 29));
    if ((a4 & 0xFFFE000000000002) == 0)
    {
      v108 = *(unsigned __int8 *)(a4 + 5);
      if (v108 != 5)
      {
        if (v108 != 6)
          goto LABEL_174;
        v146 = *(_DWORD *)(v98 + 16) & 3;
        v147 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v149 = *(int8x16_t ***)(a4 + 24);
          v148 = *(_QWORD *)(a4 + 32);
          v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v457 = v147;
          LODWORD(v458) = HIDWORD(v100);
          v460 = v96;
          goto LABEL_228;
        }
        v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v457 = v147;
        LODWORD(v458) = HIDWORD(v100);
        v460 = v96;
LABEL_583:
        BYTE1(v461[1]) = 3;
        if (v146 != 2)
          LOBYTE(v461[1]) = 1;
        goto LABEL_187;
      }
      v120 = (unsigned int *)v96;
LABEL_186:
      JSC::JSObject::fillGetterPropertySlot(v120, a2, (uint64_t)&v456, a4, a5, a6);
      goto LABEL_187;
    }
LABEL_174:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = v96;
LABEL_175:
    v458 = __PAIR64__(a6, a5);
    LOWORD(v461[1]) = 257;
    goto LABEL_187;
  }
LABEL_433:
  if (!v89)
    goto LABEL_438;
  v224 = *(_DWORD *)(v89 + 16);
  if ((v224 & 0x20) != 0)
    goto LABEL_438;
  v225 = *(_WORD **)(v89 + 8);
  v226 = *(unsigned int *)(v89 + 4);
  if ((v224 & 4) == 0)
  {
    if ((_DWORD)v226)
    {
      v227 = (unsigned __int16)*v225 - 48;
      if (v227 <= 9 && (*v225 != 48 || v226 <= 1))
      {
        v276 = v225 + 1;
        v277 = v226 - 1;
        while (v277)
        {
          if (v227 <= 0x19999999)
          {
            v278 = *v276 - 48;
            if (v278 <= 9)
            {
              v37 = __CFADD__(v278, 10 * v227);
              v227 = v278 + 10 * v227;
              ++v276;
              --v277;
              if (!v37)
                continue;
            }
          }
          goto LABEL_438;
        }
        goto LABEL_1007;
      }
    }
    goto LABEL_438;
  }
  if ((_DWORD)v226)
  {
    v227 = *(unsigned __int8 *)v225 - 48;
    if (v227 <= 9 && (v226 < 2 || *(_BYTE *)v225 != 48))
    {
      v398 = (unsigned __int8 *)v225 + 1;
      v399 = v226 - 1;
      while (v399)
      {
        if (v227 <= 0x19999999)
        {
          v400 = *v398 - 48;
          if (v400 <= 9)
          {
            v37 = __CFADD__(v400, 10 * v227);
            v227 = v400 + 10 * v227;
            ++v398;
            --v399;
            if (!v37)
              continue;
          }
        }
        goto LABEL_438;
      }
LABEL_1007:
      if (v227 != -1)
      {
        v401 = v227;
        v402 = *((_QWORD *)a1 + 7);
        v452 = (JSC::VMTraps *)(v402 + 64);
        v107 = 10;
        while (1)
        {
          v403 = 16 * (*(_DWORD *)v90 & 0xFFFFFFFE);
          v404 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v403 + 0x4C) + 0x70))(v90, a1, v401, &v456);
          v405 = v404;
          if (*(_DWORD *)(v402 + 80))
          {
            v408 = *(_DWORD *)(v402 + 80);
            if ((v408 & 0x27) != 0 && (v408 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v452, 7u, a3, a4, a5, a6, a7, a8);
            v409 = *(_QWORD *)(v402 + 16);
            if (v409)
              v410 = 1;
            else
              v410 = v405;
            if ((v410 & 1) != 0)
            {
              if (!v409)
                goto LABEL_187;
              goto LABEL_169;
            }
          }
          else if ((v404 & 1) != 0)
          {
            goto LABEL_187;
          }
          if (BYTE2(v461[1]) == 3)
          {
            if (BYTE4(v461[1]))
              goto LABEL_207;
            v406 = *((unsigned __int8 *)v90 + 5);
            if (v406 == 61)
              goto LABEL_1014;
          }
          else
          {
            v406 = *((unsigned __int8 *)v90 + 5);
            if (v406 == 61)
            {
              if (BYTE2(v461[1]) == 1)
                goto LABEL_207;
              goto LABEL_1014;
            }
          }
          if ((v406 - 39) <= 0xA)
          {
            if ((*((_BYTE *)v90 + 40) & 7u) > 2)
            {
              LOBYTE(__dst) = 0;
              v467 = 0;
              v413 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v90, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
              v412 = (_BYTE)a2 ? v413 : 0;
            }
            else
            {
              v412 = *((_QWORD *)v90 + 3);
            }
            if (v412 <= v401)
              goto LABEL_207;
          }
LABEL_1014:
          if ((*(_WORD *)(v403 + 12) & 0x800) == 0 || BYTE2(v461[1]) == 3)
          {
            v407 = *(_QWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x30);
            if (!v407)
              v407 = *((_QWORD *)v90 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v407 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C)
                                                                                       + 0xB0))(v90, a1);
            }
            else
            {
              v407 = *(_QWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x30);
              if (!v407)
                v407 = *((_QWORD *)v90 + 2);
            }
            if (*(_DWORD *)(v402 + 80))
            {
              v411 = *(_DWORD *)(v402 + 80);
              if ((v411 & 0x27) != 0 && (v411 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v452, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v402 + 16))
                goto LABEL_207;
            }
          }
          if ((v407 & 0xFFFE000000000002) == 0)
          {
            v90 = (JSC::JSString *)v407;
            if (*(unsigned __int8 *)(v407 + 5) > 0x16u)
              continue;
          }
          goto LABEL_207;
        }
      }
    }
  }
LABEL_438:
  v228 = *((_QWORD *)a1 + 7);
  v107 = 10;
  while (2)
  {
    v229 = 16 * (*(_DWORD *)v95 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v95 + 6) & 8) != 0)
    {
      v443 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE) + 0x4C) + 0x68))(v95, a1, v89, &v456);
      if (*(_DWORD *)(v228 + 80))
      {
        v260 = *(_DWORD *)(v228 + 80);
        if ((v260 & 0x27) != 0 && (v260 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v228 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v228 + 16))
          goto LABEL_207;
      }
      if ((v443 & 1) != 0)
        goto LABEL_187;
      if (BYTE2(v461[1]) == 3)
      {
        if (BYTE4(v461[1]))
          goto LABEL_207;
        v236 = *(unsigned __int8 *)(v95 + 5);
        if (v236 == 61)
          goto LABEL_445;
      }
      else
      {
        v236 = *(unsigned __int8 *)(v95 + 5);
        if (v236 == 61)
        {
          if (BYTE2(v461[1]) == 1)
            goto LABEL_207;
          goto LABEL_445;
        }
      }
      if (!v89)
        goto LABEL_445;
      if ((v236 - 50) < 0xFFFFFFF5)
        goto LABEL_445;
      v237 = *(_DWORD *)(v89 + 16);
      if ((v237 & 0x20) != 0)
        goto LABEL_445;
      v238 = *(unsigned int *)(v89 + 4);
      if (!(_DWORD)v238)
        goto LABEL_445;
      v239 = *(unsigned __int8 **)(v89 + 8);
      if ((v237 & 4) != 0)
      {
        v240 = *v239;
        if ((_DWORD)v238 == 1)
        {
LABEL_472:
          if ((v240 - 48) < 0xA)
            goto LABEL_207;
          goto LABEL_445;
        }
        if (v240 == 45)
        {
          v240 = v239[1];
          goto LABEL_476;
        }
        if ((v240 - 48) < 0xA)
          goto LABEL_487;
        if ((_DWORD)v238 == 8)
        {
LABEL_486:
          if (v240 != 73)
            goto LABEL_445;
          goto LABEL_487;
        }
      }
      else
      {
        v240 = *(unsigned __int16 *)v239;
        if ((_DWORD)v238 == 1)
          goto LABEL_472;
        if (v240 == 45)
        {
          v240 = *((unsigned __int16 *)v239 + 1);
LABEL_476:
          if ((v240 - 48) < 0xA)
          {
            if ((_DWORD)v238 == 2)
              goto LABEL_207;
            goto LABEL_487;
          }
          if ((_DWORD)v238 != 9)
            goto LABEL_445;
          goto LABEL_486;
        }
        if ((v240 - 48) < 0xA || (_DWORD)v238 == 8 && v240 == 73)
          goto LABEL_487;
      }
      if ((_DWORD)v238 != 3 || v240 != 78)
        goto LABEL_445;
LABEL_487:
      v438 = v438 & 0xFFFFFF0000000000 | v238 | ((unint64_t)((v237 >> 2) & 1) << 32);
      JSC::jsToNumber(v239, v438);
      v242 = (v241 >> 52) & 0x7FF;
      if ((_DWORD)v242 == 2047)
      {
        if ((v241 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", sizeof(__s));
          v243 = v469;
        }
        else
        {
          if ((v241 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v249 = &__s[1];
          }
          else
          {
            v249 = __s;
          }
          *(_QWORD *)v249 = 0x7974696E69666E49;
          v243 = v249 + 8;
        }
        goto LABEL_501;
      }
      v244 = v241 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v241 & 0x8000000000000000) != 0 && v244)
      {
        __s[0] = 45;
        v245 = &__s[1];
      }
      else
      {
        if (!v244)
        {
          __s[0] = 48;
          v243 = &__s[1];
          goto LABEL_501;
        }
        v245 = __s;
      }
      v444 = (uint64_t)v245;
      v246 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v241 & 0x800FFFFFFFFFFFFFLL, v242);
      v243 = WTF::dragonbox::detail::to_shortest(v246, v247, v444, v248);
LABEL_501:
      *v243 = 0;
      v445 = strlen(__s);
      memcpy(&__dst, __s, v445);
      *((_BYTE *)&__dst + v445) = 0;
      v250 = *(unsigned int *)(v89 + 4);
      v251 = *(unsigned __int8 **)(v89 + 8);
      if ((*(_BYTE *)(v89 + 16) & 4) != 0)
      {
        if ((_DWORD)v250)
        {
          v256 = &__dst;
          v257 = *(unsigned int *)(v89 + 4);
          do
          {
            v259 = *(unsigned __int8 *)v256;
            v256 = (JSC::VM **)((char *)v256 + 1);
            v258 = v259;
            if (!v259 || *v251 != v258)
              goto LABEL_445;
            ++v251;
          }
          while (--v257);
        }
      }
      else if ((_DWORD)v250)
      {
        v252 = &__dst;
        v253 = *(unsigned int *)(v89 + 4);
        do
        {
          v255 = *(unsigned __int8 *)v252;
          v252 = (JSC::VM **)((char *)v252 + 1);
          v254 = v255;
          if (!v255 || *(unsigned __int16 *)v251 != v254)
            goto LABEL_445;
          v251 += 2;
        }
        while (--v253);
      }
      if (!*((_BYTE *)&__dst + v250))
        goto LABEL_207;
LABEL_445:
      if ((*(_WORD *)(v229 + 12) & 0x800) != 0)
      {
        v232 = *(_DWORD *)v95;
        if (BYTE2(v461[1]) != 3)
        {
          v234 = 16 * (v232 & 0xFFFFFFFE);
          if ((*(_WORD *)(v234 + 12) & 0x800) != 0)
          {
            v233 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v234 + 76) + 0xB0))(v95, a1);
          }
          else
          {
            v233 = *(_QWORD *)(v234 + 48);
            if (!v233)
              v233 = *(_QWORD *)(v95 + 16);
          }
          if (*(_DWORD *)(v228 + 80))
          {
            v235 = *(_DWORD *)(v228 + 80);
            if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v228 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v228 + 16))
              goto LABEL_207;
          }
          goto LABEL_449;
        }
      }
      else
      {
        v232 = *(_DWORD *)v95;
      }
      v233 = *(_QWORD *)(16 * (v232 & 0xFFFFFFFE) + 0x30);
      if (!v233)
        v233 = *(_QWORD *)(v95 + 16);
LABEL_449:
      if ((v233 & 0xFFFE000000000002) != 0)
        goto LABEL_207;
      v95 = v233;
      if (*(unsigned __int8 *)(v233 + 5) <= 0x16u)
        goto LABEL_207;
      continue;
    }
    break;
  }
  if (!(_DWORD)v94
    || (v94 & ~*(_DWORD *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE)), (JSC::VM *)v228, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v230)|| (__dst = (JSC::VM *)v89, v231 = JSC::PropertyTable::get(v230, (uint64_t *)&__dst), a6 = v231, (_DWORD)v231 == -1))
  {
    if ((*(_BYTE *)(v95 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v95, (JSC::VM *)v228, v89, (uint64_t)&v456) & 1) != 0)
    {
      goto LABEL_187;
    }
    goto LABEL_445;
  }
  a5 = HIDWORD(v231);
  if ((int)v231 <= 63)
  {
    v268 = v95 + 16;
    v269 = v231 << 32;
  }
  else
  {
    v268 = *(_QWORD *)(v95 + 8) - 8;
    v269 = 0x3F00000000 - (v231 << 32);
  }
  a4 = *(_QWORD *)(v268 + (v269 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_599:
    v456 = (uint64_t (*)(unint64_t))a4;
    v460 = (JSC::JSString *)v95;
    goto LABEL_175;
  }
  v281 = *(unsigned __int8 *)(a4 + 5);
  if (v281 == 5)
  {
    v120 = (unsigned int *)v95;
    goto LABEL_186;
  }
  if (v281 != 6)
    goto LABEL_599;
  v146 = *(_DWORD *)(v229 + 16) & 3;
  v284 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v457 = v284;
    LODWORD(v458) = HIDWORD(v231);
    v460 = (JSC::JSString *)v95;
    goto LABEL_583;
  }
  v149 = *(int8x16_t ***)(a4 + 24);
  v148 = *(_QWORD *)(a4 + 32);
  v456 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v457 = v284;
  LODWORD(v458) = HIDWORD(v231);
  v460 = (JSC::JSString *)v95;
LABEL_228:
  BYTE1(v461[1]) = 3;
  if (v146 != 2)
    LOBYTE(v461[1]) = 1;
  BYTE3(v461[1]) = 1;
  v464 = v149;
  v465 = v148;
LABEL_187:
  if (BYTE1(v461[1]) == 1)
  {
    v107 = (uint64_t)v456;
  }
  else
  {
    if (BYTE1(v461[1]) == 2)
    {
      v121 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v456, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v122 = v460;
      v123 = *(_QWORD *)(16 * (*(_DWORD *)v460 & 0xFFFFFFFE) + 0x28);
      if ((v458 & 0x20) != 0)
        v122 = v459;
      if (BYTE3(v461[1]) != 1)
        goto LABEL_205;
      if (((unint64_t)v122 & 0xFFFE000000000002) != 0)
        goto LABEL_632;
      v124 = *(unsigned int *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C);
      v125 = *(_DWORD *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C) != 0;
      v126 = 16 * v124;
      if ((_DWORD)v124)
        v127 = v464 == (int8x16_t **)v126;
      else
        v127 = 1;
      if (!v127)
      {
        do
        {
          v126 = *(_QWORD *)(v126 + 16);
          v125 = v126 != 0;
        }
        while ((int8x16_t **)v126 != v464 && v126 != 0);
      }
      if (!v125)
      {
LABEL_632:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v121 = JSC::throwDOMAttributeGetterTypeError(v123, &__dst, v464, (WTF::StringImpl *)v89);
      }
      else
      {
LABEL_205:
        v121 = v456(v123);
      }
    }
    v107 = v121;
  }
LABEL_207:
  if (v463)
  {
    v129 = *(_DWORD *)(v462 + 4);
    if (!v129)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5C674);
    }
    *(_DWORD *)(v462 + 4) = v129 - 1;
  }
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v89, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_214;
  v263 = *(_DWORD *)(v12 + 80);
  if ((v263 & 0x27) != 0 && (v263 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
  {
LABEL_542:
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
LABEL_214:
    *a9 = v454;
    a9[1] = v58;
    a9[2] = v107;
  }
}

uint64_t JSC::JSPromise::resolvedPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v24)(uint64_t *);
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 536);
  if ((v11 & 1) != 0)
  {
    v24 = *(uint64_t (**)(uint64_t *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v25 = (uint64_t *)(a1 - 16);
    v29 = *v25;
    v30 = a1;
    v31 = (uint64_t *)(a1 + 536);
    v11 = v24(&v29);
  }
  if (*(_BYTE *)(v11 + 5) == 26)
  {
    v12 = *(_QWORD *)(v11 + 24);
    if ((v12 & 1) != 0)
      v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v12 + 5) == 8)
    {
      LOBYTE(v38) = 1;
      v39 = *(_QWORD *)(v12 + 40);
      LOBYTE(v40) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v38) = 2;
      v13 = *(_QWORD *)(v11 + 16);
      v39 = v12;
      v40 = v13;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v38, v11);
  }
  LOBYTE(v29) = 0;
  v31 = &v33;
  v32 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v33 = a2;
  v30 = 0x800000001;
  v14 = *(_QWORD *)(a1 + 264);
  v27 = &v33;
  v28 = 1;
  v22 = JSC::call((uint64_t *)a1, v11, (unsigned __int8 *)&v38, v14, (uint64_t)&v27, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v26 = *(_DWORD *)(v10 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v16, v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v10 + 16))
      v22 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v30, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

unint64_t JSC::JSPromise::rejectedPromise(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t SlowCase;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (unint64_t *)(v9 + 38992);
  v11 = *(_DWORD *)(a1 + 1164);
  v12 = 16 * (v11 & 0xFFFFFFFE);
  if (!v11)
    v12 = 0;
  v13 = v9 + 192;
  v14 = *v10;
  if (*v10 < *(_QWORD *)(v9 + 39000))
    goto LABEL_4;
  v14 = *(_QWORD *)(v9 + 39008);
  if ((v14 & 1) == 0)
  {
    v29 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v9 + 39016);
    *(_QWORD *)(v9 + 39000) = v14 + HIDWORD(v29);
    *(_QWORD *)(v9 + 39008) = v14 + (int)v29;
LABEL_4:
    *v10 = v14 + 32;
    goto LABEL_5;
  }
  v41 = (unint64_t *)(v9 + 38992);
  v45 = a1;
  v30 = v9 + 38968;
  v49 = *(_QWORD *)(a1 + 56);
  v31 = v9 + 192;
  v37 = v12;
  v38 = a2;
  JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)v9, a3, a4, a5, a6, a7, a8);
  v32 = v30;
  v10 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v32, v31, 32, 0, 0, v33, v34, v35);
  v12 = v37;
  a2 = v38;
  v13 = v31;
  v14 = SlowCase;
  a1 = v45;
  v9 = v49;
LABEL_5:
  *(_DWORD *)v14 = 0;
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v14 = v12 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v14 + 16) = 0xFFFE000000000000;
  *(_QWORD *)(v14 + 24) = a2;
  if (!a2)
  {
LABEL_10:
    v16 = 0xFFFE000000000000;
    goto LABEL_11;
  }
  v16 = 0xFFFE000000000000;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
    {
      v43 = a1;
      v47 = v9;
      v39 = v13;
      JSC::Heap::writeBarrierSlowPath(v13, v14);
      v13 = v39;
      a1 = v43;
      v9 = v47;
      v16 = *(_QWORD *)(v14 + 16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  if (v16 < 0xFFFE000000000000 || (v16 & 0x80000000) != 0)
    LODWORD(v16) = COERCE_DOUBLE(v16 - 0x2000000000000);
  if ((v16 & 0x80000000) != 0)
    v17 = COERCE__INT64((double)(v16 | 0xA)) + 0x2000000000000;
  else
    v17 = v16 | 0xFFFE00000000000ALL;
  *(_QWORD *)(v14 + 16) = v17;
  if (v17)
    v18 = (v17 & 0xFFFE000000000002) == 0;
  else
    v18 = 0;
  if (v18 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v14 + 7))
  {
    v42 = a1;
    v46 = v9;
    JSC::Heap::writeBarrierSlowPath(v13, v14);
    a1 = v42;
    v9 = v46;
  }
  v19 = *(void (**)(void))(*(_QWORD *)(a1 + 3280) + 80);
  if (v19)
  {
    v19();
  }
  else
  {
    v20 = v9 + 93416;
    v50 = v14;
    v21 = (uint64_t *)(v10 + 6802);
    v22 = *(unsigned int *)(v9 + 93420);
    if ((_DWORD)v22 == *(_DWORD *)(v9 + 93416))
    {
      WTF::Vector<JSC::Strong<JSC::JSPromise,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::JSPromise*&>((uint64_t)v21, (_QWORD *)v9, (uint64_t *)&v50, a4, a5, a6, a7, a8);
    }
    else
    {
      v23 = *v21;
      v24 = *(_QWORD *)(v9 + 712);
      if (!v24)
      {
        v44 = *v21;
        v48 = v9;
        v40 = v9 + 93416;
        JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672), v9, a3, a4, a5, a6, a7, a8);
        v20 = v40;
        v23 = v44;
        v9 = v48;
        v24 = *(_QWORD *)(v48 + 712);
      }
      *(_QWORD *)(v9 + 712) = *(_QWORD *)v24;
      *(_QWORD *)(v24 + 16) = 0;
      v25 = (unint64_t *)(v24 + 16);
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v23 + 8 * v22) = v24 + 16;
      if (!*(_QWORD *)(v24 + 16))
      {
        v26 = *(_QWORD **)((v24 & 0xFFFFFFFFFFFFF000) + 0x10);
        v27 = v26[3];
        v26 += 3;
        *(v25 - 2) = v27;
        *(v25 - 1) = (unint64_t)v26;
        *v26 = v25 - 2;
        *(_QWORD *)(v27 + 8) = v25 - 2;
      }
      *v25 = v14;
      ++*(_DWORD *)(v20 + 4);
    }
  }
  return v14;
}

void JSC::JSPromise::resolve(unint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t *);
  uint64_t *v36;
  unint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < 0xFFFE000000000000 || (v8 & 0x80000000) != 0)
    LODWORD(v8) = COERCE_DOUBLE(v8 - 0x2000000000000);
  if ((v8 & 8) == 0)
  {
    v13 = (JSC::VM *)a2[7];
    if ((v8 & 0x80000000) != 0)
      v14 = COERCE__INT64((double)(v8 | 8)) + 0x2000000000000;
    else
      v14 = v8 | 0xFFFE000000000008;
    *(_QWORD *)(a1 + 16) = v14;
    if (v14)
      v15 = (v14 & 0xFFFE000000000002) == 0;
    else
      v15 = 0;
    if (v15 && *((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    v17 = *(_QWORD *)(v16 + 1960);
    if (*(_DWORD *)v17 <= 0x61u)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5E484);
    }
    v18 = *(_QWORD *)(v17 + 784);
    if ((v18 & 1) != 0)
    {
      v35 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v36 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v36 = (uint64_t *)(v16 - 16);
      v39 = *v36;
      v40 = v16;
      v41 = (unint64_t *)(v17 + 784);
      v18 = v35(&v39);
    }
    if ((v18 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v48) = 0;
    }
    else if (*(_BYTE *)(v18 + 5) == 26)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if ((v19 & 1) != 0)
        v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v19 + 5) == 8)
      {
        LOBYTE(v48) = 1;
        v49 = *(_QWORD *)(v19 + 40);
        LOBYTE(v50) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v48) = 2;
        v20 = *(_QWORD *)(v18 + 16);
        v49 = v19;
        v50 = v20;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0x38))(&v48, v18);
    }
    LOBYTE(v39) = 0;
    v41 = &v43;
    v42 = 0;
    v45 = 0u;
    v46 = 0u;
    v47 = 0;
    v43 = a1;
    v44 = a3;
    v40 = 0x800000002;
    v37 = &v43;
    v38 = 2;
    JSC::call(a2, v18, (unsigned __int8 *)&v48, 10, (uint64_t)&v37, a6, a7, a8);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v40, v21, v22, v23, v24, v25, v26, v27);
    if (*((_DWORD *)v13 + 20))
      JSC::VM::hasExceptionsAfterHandlingTraps(v13, v28, v29, v30, v31, v32, v33, v34);
  }
}

void JSC::callFunction(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  char v21;
  _QWORD v22[3];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];

  if ((a2 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v28[0]) = 0;
  }
  else if (*(_BYTE *)(a2 + 5) == 26)
  {
    JSC::JSFunction::getCallData(a2, (uint64_t)v28);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v28, a2);
  }
  v21 = 0;
  v22[1] = &v23;
  v22[2] = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v23 = a3;
  v24 = a4;
  v22[0] = 0x800000002;
  v19 = &v23;
  v20 = 2;
  JSC::call(a1, a2, (unsigned __int8 *)v28, 10, (uint64_t)&v19, a6, a7, a8);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v22, v12, v13, v14, v15, v16, v17, v18);
}

void JSC::JSPromise::reject(unint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _DWORD *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *);
  _QWORD *v26;
  int v27;
  _QWORD v28[3];

  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < 0xFFFE000000000000 || (v8 & 0x80000000) != 0)
    LODWORD(v8) = COERCE_DOUBLE(v8 - 0x2000000000000);
  if ((v8 & 8) == 0)
  {
    v13 = (_DWORD *)a2[7];
    if ((v8 & 0x80000000) != 0)
      v14 = COERCE__INT64((double)(v8 | 8)) + 0x2000000000000;
    else
      v14 = v8 | 0xFFFE000000000008;
    *(_QWORD *)(a1 + 16) = v14;
    if (v14)
      v15 = (v14 & 0xFFFE000000000002) == 0;
    else
      v15 = 0;
    if (v15 && v13[190] >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)(v13 + 48), a1);
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    v17 = *(_QWORD *)(v16 + 1960);
    if (*(_DWORD *)v17 <= 0x5Cu)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5E6DCLL);
    }
    v18 = *(_QWORD *)(v17 + 744);
    if ((v18 & 1) != 0)
    {
      v25 = *(uint64_t (**)(_QWORD *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v26 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v26 = (_QWORD *)(v16 - 16);
      v28[0] = *v26;
      v28[1] = v16;
      v28[2] = v17 + 744;
      v18 = v25(v28);
    }
    JSC::callFunction(a2, v18, a1, a3, a5, a6, a7, a8);
    if (v13[20])
    {
      v27 = v13[20];
      if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 16), 7u, v19, v20, v21, v22, v23, v24);
    }
  }
}

unint64_t JSC::JSPromise::markAsHandled(unint64_t this, JSC::JSGlobalObject *a2)
{
  unint64_t v2;
  BOOL v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;

  v2 = *(_QWORD *)(this + 16);
  v3 = v2 >= 0xFFFE000000000000 && (v2 & 0x80000000) == 0;
  v4 = COERCE_DOUBLE(v2 - 0x2000000000000);
  if (v3)
    v4 = *(_QWORD *)(this + 16);
  if ((v4 & 8) == 0)
  {
    if ((v4 & 0x80000000) != 0)
      v5 = COERCE__INT64((double)(v4 | 4)) + 0x2000000000000;
    else
      v5 = v4 | 0xFFFE000000000004;
    v6 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(this + 16) = v5;
    if (v5)
      v7 = (v5 & 0xFFFE000000000002) == 0;
    else
      v7 = 0;
    if (v7 && *(_DWORD *)(v6 + 760) >= *(unsigned __int8 *)(this + 7))
      return JSC::Heap::writeBarrierSlowPath(v6 + 192, this);
  }
  return this;
}

void JSC::JSPromise::rejectAsHandled(unint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v16;
  uint64_t *v17;

  v8 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 >= 0xFFFE000000000000 && (v9 & 0x80000000) == 0;
  v11 = COERCE_DOUBLE(v9 - 0x2000000000000);
  if (v10)
    v11 = *(_QWORD *)(a1 + 16);
  if ((v11 & 8) == 0)
  {
    if ((v11 & 0x80000000) != 0)
      v12 = COERCE__INT64((double)(v11 | 4)) + 0x2000000000000;
    else
      v12 = v11 | 0xFFFE000000000004;
    v13 = a2[7];
    *(_QWORD *)(a1 + 16) = v12;
    if (v12)
      v14 = (v12 & 0xFFFE000000000002) == 0;
    else
      v14 = 0;
    if (v14 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a1 + 7))
    {
      v17 = a2;
      v16 = a3;
      JSC::Heap::writeBarrierSlowPath(v13 + 192, a1);
      v8 = a1;
      a3 = v16;
      a2 = v17;
    }
  }
  JSC::JSPromise::reject(v8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSPromise::reject(JSC::JSPromise *this, JSC::JSGlobalObject *a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSPromise::reject((unint64_t)this, (uint64_t *)a2, *((_QWORD *)a3 + 1), a4, a5, a6, a7, a8);
}

void JSC::JSPromise::rejectAsHandled(JSC::JSPromise *this, JSC::JSGlobalObject *a2, JSC::Exception *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSPromise *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  JSC::JSGlobalObject *v17;

  v8 = this;
  v9 = *((_QWORD *)a3 + 1);
  v10 = *((_QWORD *)this + 2);
  v11 = v10 >= 0xFFFE000000000000 && (v10 & 0x80000000) == 0;
  v12 = COERCE_DOUBLE(v10 - 0x2000000000000);
  if (v11)
    v12 = *((_QWORD *)this + 2);
  if ((v12 & 8) == 0)
  {
    if ((v12 & 0x80000000) != 0)
      v13 = COERCE__INT64((double)(v12 | 4)) + 0x2000000000000;
    else
      v13 = v12 | 0xFFFE000000000004;
    v14 = *((_QWORD *)a2 + 7);
    *((_QWORD *)this + 2) = v13;
    if (v13)
      v15 = (v13 & 0xFFFE000000000002) == 0;
    else
      v15 = 0;
    if (v15 && *(_DWORD *)(v14 + 760) >= *((unsigned __int8 *)this + 7))
    {
      v17 = a2;
      v16 = v9;
      JSC::Heap::writeBarrierSlowPath(v14 + 192, (unint64_t)this);
      v8 = this;
      v9 = v16;
      a2 = v17;
    }
  }
  JSC::JSPromise::reject((unint64_t)v8, (uint64_t *)a2, v9, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSPromise::rejectWithCaughtException(unint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v9 = *a3;
  v10 = *(_QWORD *)(*a3 + 16);
  if (*(_QWORD *)(a2[7] + 24) != v10)
  {
    *(_QWORD *)(v9 + 16) = 0;
    v11 = (unsigned int *)(v9 + 80);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 & 0xFFFFFFEF, v11));
    JSC::JSPromise::reject(a1, a2, *(_QWORD *)(v10 + 8), a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::JSPromise::performPromiseThen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t *);
  uint64_t *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a2 + 1960);
  if (*(_DWORD *)v8 <= 0x41u)
  {
    __break(0xC471u);
    JUMPOUT(0x198A5EB40);
  }
  v14 = *(_QWORD *)(v8 + 528);
  if ((v14 & 1) != 0)
  {
    v24 = (_QWORD *)(v8 + 528);
    v25 = *(uint64_t (**)(uint64_t *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v26 = (uint64_t *)(a2 - 16);
    else
      v26 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v29 = *v26;
    v30 = a2;
    v31 = v24;
    v14 = v25(&v29);
  }
  if (*(_BYTE *)(v14 + 5) == 26)
  {
    v15 = *(_QWORD *)(v14 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v15 + 5) == 8)
    {
      LOBYTE(v36) = 1;
      v37 = *(_QWORD *)(v15 + 40);
      LOBYTE(v38) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v36) = 2;
      v16 = *(_QWORD *)(v14 + 16);
      v37 = v15;
      v38 = v16;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v36, v14);
  }
  LOBYTE(v29) = 0;
  v31 = v33;
  v32 = 0;
  v34 = 0u;
  v35 = 0;
  v33[0] = a1;
  v33[1] = a3;
  v33[2] = a4;
  v33[3] = a5;
  v33[4] = 10;
  v30 = 0x800000005;
  v27 = v33;
  v28 = 5;
  JSC::call((uint64_t *)a2, v14, (unsigned __int8 *)&v36, 10, (uint64_t)&v27, a6, a7, a8);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v30, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::JSPromiseConstructor::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  JSC::VM *v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  JSC::JSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  WTF::StringImpl *v123;
  __int128 v124;

  v11 = a2 + 41952;
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)v11 + 2160), a3, 14, a7, a8, a9, a4);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)v11 + 1768), 0xFFFE000000000001, 6, v12, v13, v14, v15);
  v16 = *(JSC::VM **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v17 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v17 = 0x1400000002;
  *(_QWORD *)(v17 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v17 + 16) = 4;
  v123 = (WTF::StringImpl *)v17;
  v18 = (JSC::JSGlobalObject *)JSC::JSFunction::create(a2, (uint64_t)v16, 0, &v123, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v30 = JSC::GetterSetter::create((JSC::GetterSetter *)a2, v16, v18, 0, v19, v20, v21, v22);
  v32 = v123;
  v123 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, a2, *(_QWORD *)(*(_QWORD *)v11 + 2752), v30, (const JSC::PropertyTable *)0x16, v27, v28, v29, v31);
  if (HIBYTE(qword_1ECF4C7A0))
  {
    v34 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v11 + 48) + 1664);
    if (v34)
    {
      *(_DWORD *)v34 += 2;
      v35 = JSC::BuiltinExecutables::promiseConstructorWithResolversCodeExecutable(*(JSC::BuiltinExecutables **)(a2 + 93152));
      v36 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 93152) + 8);
      ++*((_DWORD *)v36 + 2);
      v123 = v36;
      v124 = xmmword_199125AD0;
      v45 = JSC::UnlinkedFunctionExecutable::link(v35, a2, 0, (uint64_t)&v123, 0, 0, 0, v37, COERCE_DOUBLE(0x291C600029182), v38, v39);
      v46 = v123;
      v123 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
        else
          --*((_DWORD *)v46 + 2);
      }
      v47 = JSC::JSFunction::create(a2, v45, v16, v40, v41, v42, v43, v44);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v34, v47, 4, v48, v49, v50, v51);
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v33, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    else
    {
      v74 = JSC::promiseConstructorWithResolversCodeGenerator((JSC::BuiltinExecutables **)a2, v33);
      v80 = JSC::JSFunction::create(a2, v74, v16, v75, v76, v77, v78, v79);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, 0, v80, 4, v81, v82, v83, v84);
    }
  }
  if ((_BYTE)qword_1ECF4C7A8)
  {
    v85 = *(WTF::StringImpl **)(*(_QWORD *)v11 + 440);
    if (v85)
    {
      *(_DWORD *)v85 += 2;
      v86 = JSC::promiseConstructorTryCodeGenerator((JSC::BuiltinExecutables **)a2, v33);
      v92 = JSC::JSFunction::create(a2, v86, v16, v87, v88, v89, v90, v91);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v85, v92, 4, v93, v94, v95, v96);
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, v97, v98, v99, v100, v101, v102, v103);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v85 -= 2;
      }
    }
    else
    {
      v112 = JSC::promiseConstructorTryCodeGenerator((JSC::BuiltinExecutables **)a2, v33);
      v118 = JSC::JSFunction::create(a2, v112, v16, v113, v114, v115, v116, v117);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, 0, v118, 4, v119, v120, v121, v122);
    }
  }
}

void JSC::JSPromiseConstructor::addOwnInternalSlots(JSC::JSPromiseConstructor *this, JSC::BuiltinExecutables **a2, JSC::JSGlobalObject *a3)
{
  JSC::BuiltinExecutables **v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  double v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  __int128 v92;

  JSC::Symbols::resolvePrivateName[0] += 4;
  v6 = a2 + 11644;
  v7 = JSC::BuiltinExecutables::promiseConstructorResolveCodeExecutable(a2[11644]);
  v8 = (_DWORD *)*((_QWORD *)*v6 + 1);
  ++v8[2];
  v91 = v8;
  v92 = xmmword_199125890;
  v17 = JSC::UnlinkedFunctionExecutable::link(v7, (uint64_t)a2, 0, (uint64_t)&v91, 0, 0, 0, v9, COERCE_DOUBLE(0x249BB0002492FLL), v10, v11);
  v18 = v91;
  v91 = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = JSC::JSFunction::create((uint64_t)a2, v17, a3, v12, v13, v14, v15, v16);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::resolvePrivateName, v19, 14, v20, v21, v22, v23);
  v31 = JSC::Symbols::resolvePrivateName[0] - 2;
  if (JSC::Symbols::resolvePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolvePrivateName, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    v31 = JSC::Symbols::resolvePrivateName[0];
  }
  else
  {
    JSC::Symbols::resolvePrivateName[0] -= 2;
  }
  v32 = v31 - 2;
  if (v32)
  {
    JSC::Symbols::resolvePrivateName[0] = v32;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::resolvePrivateName, v24, v25, v26, v27, v28, v29, v30);
    WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
  }
  JSC::Symbols::rejectPrivateName[0] += 4;
  v33 = JSC::BuiltinExecutables::promiseConstructorRejectCodeExecutable(*v6);
  v34 = (_DWORD *)*((_QWORD *)*v6 + 1);
  ++v34[2];
  v91 = v34;
  v92 = xmmword_1991257A0;
  v43 = JSC::UnlinkedFunctionExecutable::link(v33, (uint64_t)a2, 0, (uint64_t)&v91, 0, 0, 0, v35, COERCE_DOUBLE(0x2242300022306), v36, v37);
  v44 = v91;
  v91 = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = JSC::JSFunction::create((uint64_t)a2, v43, a3, v38, v39, v40, v41, v42);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::rejectPrivateName, v45, 14, v46, v47, v48, v49);
  v57 = JSC::Symbols::rejectPrivateName[0] - 2;
  if (JSC::Symbols::rejectPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::rejectPrivateName, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    v57 = JSC::Symbols::rejectPrivateName[0];
  }
  else
  {
    JSC::Symbols::rejectPrivateName[0] -= 2;
  }
  v58 = v57 - 2;
  if (v58)
  {
    JSC::Symbols::rejectPrivateName[0] = v58;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::rejectPrivateName, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
}

unint64_t JSC::JSPromisePrototype::create(JSC::JSPromisePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *);
  _QWORD *v38;
  JSC::JSGlobalObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t SlowCase;
  _QWORD v44[3];

  v11 = *((_QWORD *)this + 4863);
  if (v11 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v11 = *((_QWORD *)this + 4865);
  if ((v11 & 1) == 0)
  {
    v35 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v11 + HIDWORD(v35);
    *((_QWORD *)this + 4865) = v11 + (int)v35;
LABEL_2:
    *((_QWORD *)this + 4863) = v11 + 16;
    goto LABEL_3;
  }
  v39 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v40, v41, v42);
  a3 = (uint64_t)v39;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSPromisePrototype::finishCreation((JSC::JSPromisePrototype *)v11, this, (unint64_t)a2, a9, (uint64_t)a4, a5, a6, a7, a8);
  JSC::Symbols::thenPrivateName[0] += 2;
  v17 = *((_QWORD *)a2 + 245);
  if (*(_DWORD *)v17 <= 0x97u)
  {
    __break(0xC471u);
    JUMPOUT(0x198A5F23CLL);
  }
  v18 = *(_QWORD *)(v17 + 1216);
  if ((v18 & 1) != 0)
  {
    v36 = v17 + 1216;
    v37 = *(uint64_t (**)(_QWORD *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v38 = (_QWORD *)((char *)a2 - 16);
    else
      v38 = (_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFC000 | 8);
    v44[0] = *v38;
    v44[1] = a2;
    v44[2] = v36;
    v18 = v37(v44);
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v11, (uint64_t)this, (unint64_t)JSC::Symbols::thenPrivateName, v18, 14, v13, v14, v15, v16);
  if (JSC::Symbols::thenPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thenPrivateName, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    JSC::Symbols::thenPrivateName[0] -= 2;
  }
  return v11;
}

void JSC::JSPromisePrototype::finishCreation(JSC::JSPromisePrototype *this, JSC::VM *a2, unint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(WTF::StringImpl **);
  WTF::StringImpl **v45;
  WTF::StringImpl *v46[3];

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v11 = *(_DWORD **)(a3 + 1960);
  if (*v11 <= 0x97u)
  {
    __break(0xC471u);
    JUMPOUT(0x198A5F3DCLL);
  }
  v12 = (char *)a2 + 41952;
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5244) + 48) + 1576);
  v14 = *((_QWORD *)v11 + 152);
  if ((v14 & 1) != 0)
  {
    v44 = *(uint64_t (**)(WTF::StringImpl **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v45 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v45 = (WTF::StringImpl **)(a3 - 16);
    v46[0] = *v45;
    v46[1] = (WTF::StringImpl *)a3;
    v46[2] = (WTF::StringImpl *)(v11 + 304);
    v14 = v44(v46);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v13, v14, 4, a7, a8, a9, a4);
  v15 = *(_QWORD *)(*(_QWORD *)v12 + 2776);
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x700000002;
  *(_QWORD *)(v16 + 8) = "Promise";
  *(_DWORD *)(v16 + 16) = 4;
  v46[0] = (WTF::StringImpl *)v16;
  v23 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)v46, v17, v18, v19, v20, v21, v22);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v15, v23, 6, v24, v25, v26, v27);
  v35 = v46[0];
  v46[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
}

void JSC::JSPropertyNameEnumerator::visitChildren(JSC::JSPropertyNameEnumerator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unint64_t *)*((_QWORD *)this + 1);
  if (v12)
  {
    JSC::SlotVisitor::markAuxiliary(a2, *((_QWORD *)this + 1), (uint64_t)a3, a4, a5, a6, a7, a8);
    v13 = *((unsigned int *)this + 7);
    if ((_DWORD)v13)
    {
      for (i = 8 * v13; i; i -= 8)
      {
        v15 = *v12;
        if (*v12)
        {
          if ((v15 & 8) != 0)
          {
            if ((*(_BYTE *)(v15 - 79) & 1) == 0)
              goto LABEL_23;
          }
          else
          {
            v16 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000), v16, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1) == 0)
            {
LABEL_23:
              JSC::SlotVisitor::appendSlow((uint64_t)a2, v15, 0, a4, a5, a6, a7, a8);
              goto LABEL_15;
            }
          }
          if (*((_QWORD *)a2 + 21))
            goto LABEL_23;
        }
LABEL_15:
        ++v12;
      }
    }
  }
  v17 = *((_DWORD *)this + 4);
  v18 = v17 & 0xFFFFFFFE;
  if ((v17 & 0xFFFFFFFE) != 0)
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v18) & 0xFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v18) & 0xFFFFFC000), v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v18) & 0xFFFFFC000) + 8 * ((v18 >> 6) & 0xF) + 0x28) >> (v18 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v18, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSPropertyNameEnumerator::visitChildren(JSC::JSPropertyNameEnumerator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  _QWORD *v17;
  char v18;

  v13[0] = a2;
  v13[1] = this;
  v15 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v14 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v16[0] = a2;
    v16[1] = this;
    v18 = 0;
    v17 = v13;
    *((_QWORD *)a2 + 11) = v16;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v16[0] + 88) = v17;
    v6 = (uint64_t *)*((_QWORD *)this + 1);
    if (v6)
    {
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((_QWORD *)this + 1));
      v7 = *((unsigned int *)this + 7);
      if ((_DWORD)v7)
      {
        v8 = 8 * v7;
        do
        {
          v9 = *v6++;
          (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
          v8 -= 8;
        }
        while (v8);
      }
    }
    v10 = *((_DWORD *)this + 4);
    if (v10)
      v11 = 16 * (v10 & 0xFFFFFFFE);
    else
      v11 = 0;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v11);
    *(_QWORD *)(v13[0] + 88) = v14;
  }
  return result;
}

unint64_t JSC::JSPropertyNameEnumerator::create(_QWORD *a1, JSC::VM *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v10;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Slow;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v49;
  unint64_t v50;
  uint64_t SlowCase;
  int v52;
  uint64_t v53;
  unint64_t v54;

  v10 = a4;
  v14 = *(unsigned int *)(*(_QWORD *)a5 + 20);
  v15 = 8 * v14;
  v16 = (8 * v14) & 0xFFFFFFF8;
  if (!v16)
  {
    Slow = 0;
    goto LABEL_8;
  }
  if (v16 > 0x1F60 || (v17 = *(_QWORD *)((char *)a1 + (((v16 + 15) >> 1) & 0xFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)(a1 + 831), (JSC *)a1, v16, 0, a5, a6, a7, a8);
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198A5F944);
    }
    goto LABEL_6;
  }
  v18 = *(unsigned int *)(v17 + 60);
  Slow = *(_QWORD *)(v17 + 24);
  if (Slow < *(_QWORD *)(v17 + 32))
    goto LABEL_5;
  Slow = *(_QWORD *)(v17 + 40);
  if ((Slow & 1) == 0)
  {
    v50 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v17 + 48);
    *(_QWORD *)(v17 + 32) = Slow + HIDWORD(v50);
    *(_QWORD *)(v17 + 40) = Slow + (int)v50;
LABEL_5:
    *(_QWORD *)(v17 + 24) = Slow + v18;
    goto LABEL_6;
  }
  v52 = *(_DWORD *)(*(_QWORD *)a5 + 20);
  v14 = *(unsigned int *)(v17 + 60);
  JSC::sanitizeStackForVM((JSC *)a1, a2, v16, a4, a5, a6, a7, a8);
  v53 = v14;
  LODWORD(v14) = v52;
  Slow = JSC::LocalAllocator::allocateSlowCase(v17, a1 + 24, v53, 0, 0);
LABEL_6:
  if ((_DWORD)v14)
    bzero((void *)Slow, v15);
LABEL_8:
  v20 = a1 + 4885;
  v21 = a1[4885];
  if (v21 < a1[4886])
  {
LABEL_9:
    *v20 = v21 + 48;
    goto LABEL_10;
  }
  v21 = a1[4887];
  if ((v21 & 1) == 0)
  {
    v49 = *(_QWORD *)(v21 + 8) ^ a1[4888];
    a1[4886] = v21 + HIDWORD(v49);
    a1[4887] = v21 + (int)v49;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, v16, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 4882, a1 + 24, 48, 0, 0);
  v20 = a1 + 4885;
  v21 = SlowCase;
LABEL_10:
  v22 = 0;
  *(_DWORD *)v21 = 0;
  v23 = v20[305];
  v24 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)v21 = v23 >> 4;
  *(_DWORD *)(v21 + 4) = v24;
  *(_QWORD *)(v21 + 8) = Slow;
  *(_DWORD *)(v21 + 16) = (unint64_t)a2 >> 4;
  *(_DWORD *)(v21 + 20) = a3;
  *(_DWORD *)(v21 + 24) = v10;
  *(_DWORD *)(v21 + 28) = v14;
  if (a2)
    v22 = *((unsigned __int8 *)a2 + 14);
  v25 = a3 != 0;
  if (v10)
    v25 |= 2u;
  if ((_DWORD)v14 != v10)
    v25 |= 4u;
  *(_DWORD *)(v21 + 32) = v22;
  *(_DWORD *)(v21 + 36) = v25;
  v26 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v54 = v26;
  JSC::JSPropertyNameEnumerator::finishCreation((JSC::JSCell *)v21, (uint64_t)a1, (uint64_t)&v54, a9, a4, a5, a6, a7, a8);
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v35 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v35)
      {
        v36 = *(WTF::StringImpl ***)(v26 + 8);
        v37 = 8 * v35;
        do
        {
          v38 = *v36;
          *v36 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::~StringImpl(v38, v27, v28, v29, v30, v31, v32, v33);
              WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
      }
      v47 = *(_QWORD *)(v26 + 8);
      if (v26 + 24 != v47 && v47 != 0)
      {
        *(_QWORD *)(v26 + 8) = 0;
        *(_DWORD *)(v26 + 16) = 0;
        WTF::fastFree(v47, v27, v28, v29, v30, v31, v32, v33);
      }
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  return v21;
}

void JSC::JSPropertyNameEnumerator::finishCreation(JSC::JSCell *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t SlowCase;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)a3;
  if (*(_DWORD *)(*(_QWORD *)a3 + 20))
  {
    v12 = 0;
    v13 = (uint64_t *)(a2 + 39696);
    a4.n128_u64[0] = 17302016;
    while (1)
    {
      v14 = *((_QWORD *)a1 + 1);
      v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v12);
      if (!v15)
        goto LABEL_26;
      v16 = *(_DWORD *)(v15 + 4);
      if (v16 != 1)
        break;
      v17 = *(_DWORD *)(v15 + 16);
      v21 = *(unsigned __int8 **)(v15 + 8);
      if ((v17 & 4) != 0)
      {
        v22 = *v21;
      }
      else
      {
        v22 = *(unsigned __int16 *)v21;
        if (v22 > 0xFF)
          goto LABEL_9;
      }
      v20 = *(_QWORD *)(a2 + 8 * v22 + 42216);
LABEL_18:
      *(_QWORD *)(v14 + 8 * v12) = v20;
      if (a1 && v20 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      {
        v28 = a4;
        JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
        a4 = v28;
      }
      if (++v12 >= (unint64_t)*(unsigned int *)(v11 + 20))
        return;
    }
    if (v16)
    {
      v17 = *(_DWORD *)(v15 + 16);
LABEL_9:
      *(_DWORD *)v15 += 2;
      v18 = v15;
      if ((v17 & 3) == 2)
      {
        v18 = v15;
        do
        {
          v18 = *(_QWORD *)(v18 + 24);
          v17 = *(_DWORD *)(v18 + 16);
        }
        while ((v17 & 3) == 2);
      }
      if ((v17 & 8) != 0)
      {
        v19 = 0;
      }
      else
      {
        *(_DWORD *)(v18 + 16) = v17 | 8;
        v19 = (unint64_t)*(unsigned int *)(v18 + 4) << ((v17 & 4) == 0);
      }
      v20 = *v13;
      if ((unint64_t)*v13 >= *(_QWORD *)(a2 + 39704))
      {
        v20 = *(_QWORD *)(a2 + 39712);
        if ((v20 & 1) == 0)
        {
          v23 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(a2 + 39720);
          *(_QWORD *)(a2 + 39704) = v20 + HIDWORD(v23);
          *(_QWORD *)(a2 + 39712) = v20 + (int)v23;
          goto LABEL_13;
        }
        v25 = v15;
        v26 = v19;
        v29 = a4;
        JSC::sanitizeStackForVM((JSC *)a2, (JSC::VM *)a2, a3, v19, a6, a7, a8, a9);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(a2 + 39672, a2 + 192, 16, 0, 0);
        a4 = v29;
        v15 = v25;
        v19 = v26;
        v20 = SlowCase;
      }
      else
      {
LABEL_13:
        *v13 = v20 + 16;
      }
      *(_DWORD *)v20 = *(_QWORD *)(a2 + 41512) >> 4;
      *(_DWORD *)(v20 + 4) = a4.n128_u32[0];
      *(_QWORD *)(v20 + 8) = v15;
      if (*(_BYTE *)(a2 + 755))
        __dmb(0xAu);
      if (v19 >= 0x101)
      {
        v27 = a4;
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(a2 + 192, 0, v20, v19, a6, a7, a8, a9);
        a4 = v27;
      }
      goto LABEL_18;
    }
LABEL_26:
    v20 = *(_QWORD *)(a2 + 41968);
    goto LABEL_18;
  }
}

void JSC::getEnumerablePropertyNames(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::PropertyNameArray *a4, unsigned int *a5, unsigned int *a6)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v10;
  JSC::Structure *v11;
  BOOL v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int i;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  JSC::VM *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82[2];
  char v83;
  uint64_t v84;
  WTF::StringImpl *v85;

  v8 = a2;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v80 = v10;
  v11 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
  v12 = (*((_DWORD *)v11 + 4) & 0x28) != 0x20 || (*((_DWORD *)v11 + 4) & 3) == 2;
  if (v12
    || (*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 2) != 0
    || ((*((_BYTE *)a2 + 4) & 0xE) == 0 ? (v14 = 0) : (v14 = *(_DWORD *)(*((_QWORD *)a2 + 1) - 8)),
        *(_DWORD *)a4 != v14))
  {
    (*(void (**)(JSC::JSGlobalObject *, JSC *, JSC::JSObject *, BOOL, unsigned int *, unsigned int *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x78))(a2, this, a3, *((_BYTE *)a2 + 5) != 61, a5, a6);
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v50, v51, v52, v53, v54, v55, v56))
      return;
    *(_DWORD *)a4 = 0;
  }
  else
  {
    (*(void (**)(JSC::JSGlobalObject *, JSC *, JSC::JSObject *, uint64_t, unsigned int *, unsigned int *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x80))(a2, this, a3, 1, a5, a6);
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v15, v16, v17, v18, v19, v20, v21))
      return;
    if ((*(_BYTE *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x12) & 0x40) == 0)
    {
      v22 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        while (1)
        {
          v24 = *(unsigned int **)(v23 + 24);
          if (v24)
          {
            v41 = *v24;
            if ((int)v41 < 1)
            {
              LODWORD(v26) = 0;
            }
            else
            {
              v26 = 0;
              v59 = (uint64_t *)(*((_QWORD *)v24 + 3) + 8);
              while (1)
              {
                v60 = *v59;
                v59 += 5;
                if (v60)
                  break;
                if (v41 == ++v26)
                {
                  LODWORD(v26) = *v24;
                  break;
                }
              }
            }
            if ((_DWORD)v41 != (_DWORD)v26)
              break;
          }
LABEL_14:
          v23 = *(_QWORD *)(v23 + 16);
          if (!v23)
            goto LABEL_49;
        }
        v28 = v26;
        while (1)
        {
          v25 = *((_QWORD *)v24 + 3);
          if ((*(_BYTE *)(v25 + 40 * v28 + 16) & 4) == 0)
            break;
LABEL_17:
          LODWORD(v26) = v26 + 1;
          if ((int)v26 < (int)v41)
          {
            v27 = *((_QWORD *)v24 + 3);
            if (!*(_QWORD *)(v27 + 40 * (int)v26 + 8))
            {
              v42 = (int)v26 + 1;
              v43 = (uint64_t *)(v27 + 40 * (int)v26 + 48);
              do
              {
                v44 = v42;
                if ((int)v41 == v42)
                  break;
                v45 = *v43;
                v43 += 5;
                ++v42;
              }
              while (!v45);
              LODWORD(v26) = v44;
            }
          }
          v28 = v26;
          if ((_DWORD)v41 == (_DWORD)v26)
            goto LABEL_14;
        }
        JSC::Identifier::fromLatin1(*(JSC::VM **)(v25 + 40 * v28), &v81);
        v31 = v81;
        v85 = v81;
        if ((*((_BYTE *)v81 + 16) & 0x20) != 0)
        {
          if ((*((_BYTE *)a3 + 24) & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v81 + 36) & 4) != 0)
            goto LABEL_33;
        }
        else if ((*((_BYTE *)a3 + 24) & 2) == 0)
        {
          goto LABEL_33;
        }
        v32 = *(_QWORD *)a3;
        v33 = *(unsigned int *)(*(_QWORD *)a3 + 20);
        if (v33 <= 0x13)
        {
          v78 = *(_QWORD *)a3;
          if ((_DWORD)v33)
          {
            v48 = *(WTF::StringImpl ***)(v32 + 8);
            while (*v48 != v81)
            {
              ++v48;
              if (!--v33)
                goto LABEL_28;
            }
            goto LABEL_33;
          }
        }
        else
        {
          v34 = (uint64_t *)((char *)a3 + 8);
          v35 = *((_QWORD *)a3 + 1);
          if (!v35 || !*(_DWORD *)(v35 - 12))
          {
            v46 = *(uint64_t **)(v32 + 8);
            v47 = 8 * v33;
            do
            {
              v77 = v47;
              v79 = v46 + 1;
              v84 = *v46;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)a3 + 1, &v84, v30, v18, v19, v20, v21, (uint64_t)v82);
              v46 = v79;
              v34 = (uint64_t *)((char *)a3 + 8);
              v47 = v77 - 8;
            }
            while (v77 != 8);
          }
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v34, (uint64_t *)&v85, v30, v18, v19, v20, v21, (uint64_t)v82);
          if (!v83)
            goto LABEL_33;
          v31 = v85;
          v78 = *(_QWORD *)a3;
        }
LABEL_28:
        JSC::Identifier::fromUid(v31, *((_QWORD *)a3 + 2), v29, v30, v18, v19, v20, v21, v82);
        v36 = *(unsigned int *)(v78 + 20);
        if ((_DWORD)v36 == *(_DWORD *)(v78 + 16))
        {
          WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v78 + 8, (unint64_t)v82);
        }
        else
        {
          v37 = *(_QWORD *)(v78 + 8);
          v38 = v82[0];
          v82[0] = 0;
          *(_QWORD *)(v37 + 8 * v36) = v38;
          *(_DWORD *)(v78 + 20) = v36 + 1;
        }
        v39 = v82[0];
        v82[0] = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, (uint64_t)v29, v30, v18, v19, v20, v21);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
        }
LABEL_33:
        v40 = v81;
        v81 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v31, (uint64_t)v29, v30, v18, v19, v20, v21);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        LODWORD(v41) = *v24;
        goto LABEL_17;
      }
    }
LABEL_49:
    v49 = *(_DWORD *)(*(_QWORD *)a3 + 20);
    JSC::Structure::getPropertyNamesFromStructure(v11, v10, (uint64_t)a3, (const JSC::PropertyTable *)1, v18, v19, v20, v21);
    if (!v49)
      *a5 = *(_DWORD *)(*(_QWORD *)a3 + 20);
  }
  for (i = 40000; ; --i)
  {
    if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      v58 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v8, this);
    }
    else
    {
      v58 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
      if (!v58)
        v58 = *((_QWORD *)v8 + 2);
    }
    if (*((_DWORD *)v80 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v80, v50, v51, v52, v53, v54, v55, v56)
      || v58 == 2)
    {
      break;
    }
    if (!i)
    {
      JSC::throwStackOverflowError((unint64_t)this, &v80, v51, v52, v53, v54, v55, v56);
      return;
    }
    (*(void (**)(uint64_t, JSC *, JSC::JSObject *, BOOL))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v58 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x78))(v58, this, a3, *(_BYTE *)(v58 + 5) != 61);
    if (*((_DWORD *)v80 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v80, v50, v51, v52, v53, v54, v55, v56))
      return;
    v8 = (JSC::JSGlobalObject *)v58;
  }
}

void JSC::JSRemoteFunction::visitChildren(JSC::JSRemoteFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  JSC::JSCallee::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 4);
  if (!v18)
    goto LABEL_13;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
LABEL_13:
  v20 = *((_QWORD *)this + 5);
  if (!v20)
    return;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) == 0)
      goto LABEL_25;
  }
  else
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
      goto LABEL_25;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_25:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::JSRemoteFunction::visitChildren(JSC::JSRemoteFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSCallee::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v10[0] + 88) = v11;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 5));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::remoteFunctionCallForJSFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::JSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSRemoteFunction *v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t OutOfMemoryError;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::Exception *v42;
  int v43;
  int v44;
  JSC::JSRemoteFunction *v45;
  JSC::VM *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD v52[4];
  uint64_t v53;
  JSC::VM *v54;
  _OWORD *v55;
  int v56;

  v9 = *((_QWORD *)this + 7);
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v11 = *(JSC::JSRemoteFunction **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v49 = 0;
  v45 = v11;
  v50 = 0x800000000;
  v51 = (_OWORD *)((char *)v52 + 8);
  memset(v52, 0, sizeof(v52));
  v53 = 0;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)((char *)a2 + (((v13 << 32) + 0x600000000) >> 29));
      v16 = *((_QWORD *)this + 7);
      v46 = (JSC::VM *)v16;
      if ((v15 & 0xFFFE000000000002) == 0)
      {
        v17 = *(unsigned __int8 *)(v15 + 5);
        if (v17 - 2 >= 3)
        {
          if (v17 >= 0x17
            && ((v17 & 0xFE) == 0x1A
             || (*(_BYTE *)(v15 + 6) & 4) != 0
             && ((*(void (**)(_OWORD **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x38))(&v55, v15), (_BYTE)v55)))
          {
            v15 = JSC::JSRemoteFunction::tryCreate(v45, (JSC::JSGlobalObject *)v16, (JSC::VM *)v15, a4);
          }
          else
          {
            v15 = 0;
          }
        }
      }
      if (!*(_DWORD *)(v16 + 80))
        goto LABEL_12;
      v20 = *(_DWORD *)(v16 + 80);
      if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v16 + 16))
      {
        v15 = 0;
      }
      else
      {
LABEL_12:
        if (!v15)
          JSC::throwTypeError((unint64_t)this, &v46, (uint64_t)"value passing between realms must be callable or primitive", 59);
      }
      if (*(_DWORD *)(v9 + 80))
      {
        v21 = *(_DWORD *)(v9 + 80);
        if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v9 + 16))
          goto LABEL_77;
      }
      v18 = v50;
      if ((_DWORD)v50 == HIDWORD(v50) || v51 != (_OWORD *)((char *)v52 + 8) && v51)
      {
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v50, v15, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)v49 = 1;
      }
      else
      {
        *((_QWORD *)v51 + v50) = v15;
        LODWORD(v50) = v18 + 1;
      }
      v13 = v14;
      if (*((int *)a2 + 8) - 1 <= (unint64_t)v14++)
      {
        if (!v49)
          break;
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
        v42 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v42 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v37, v38, v39, v40, v41);
        }
        JSC::VM::throwException((JSC::VM *)v9, this, v42);
        goto LABEL_77;
      }
    }
  }
  v22 = *(_QWORD *)(v10 + 24);
  if ((v22 & 1) != 0)
    v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v22 + 5) == 8
    || (*(_QWORD *)(v22 + 8)
      ? (v23 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v23 = 0),
        v23))
  {
    if (!*(_QWORD *)(v22 + 24))
    {
      v29 = *(unsigned int **)(v22 + 8);
      v30 = v29 + 2;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v32 = (*(uint64_t (**)(unsigned int *, uint64_t, JSC::CallFrame *))(*(_QWORD *)v29 + 40))(v29, 1, a3);
      do
      {
        v33 = __ldaxr(v30);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v30));
      if (!v34)
      {
        atomic_store(1u, v29 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 32))(v29);
      }
      *(_QWORD *)(v22 + 24) = v32;
    }
  }
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    v24 = *(_QWORD *)(v10 + 24);
    if ((v24 & 1) != 0)
      v24 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v24 + 5) == 8)
    {
      LOBYTE(v46) = 1;
      v47 = *(_QWORD *)(v24 + 40);
      LOBYTE(v48) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v46) = 2;
      v25 = *(_QWORD *)(v10 + 16);
      v47 = v24;
      v48 = v25;
    }
  }
  else
  {
    (*(void (**)(JSC::VM **__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(&v46, v10);
  }
  v55 = v51;
  v56 = v50;
  v26 = JSC::call(v45, v10, &v46, 10, &v55);
  if (*(_DWORD *)(v9 + 80))
  {
    v43 = *(_DWORD *)(v9 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_77;
  }
  v27 = *((_QWORD *)this + 7);
  v54 = (JSC::VM *)v27;
  if ((v26 & 0xFFFE000000000002) == 0)
  {
    v28 = *(unsigned __int8 *)(v26 + 5);
    if (v28 - 2 >= 3)
    {
      if (v28 >= 0x17
        && ((v28 & 0xFE) == 0x1A
         || (*(_BYTE *)(v26 + 6) & 4) != 0
         && ((*(void (**)(_OWORD **__return_ptr, unint64_t))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x38))(&v55, v26), (_BYTE)v55)))
      {
        v26 = JSC::JSRemoteFunction::tryCreate(this, (JSC::JSGlobalObject *)v27, (JSC::VM *)v26, a4);
      }
      else
      {
        v26 = 0;
      }
    }
  }
  if (*(_DWORD *)(v27 + 80))
  {
    v44 = *(_DWORD *)(v27 + 80);
    if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v27 + 16))
    {
LABEL_77:
      v26 = 0;
      goto LABEL_68;
    }
  }
  if (!v26)
    JSC::throwTypeError((unint64_t)this, &v54, (uint64_t)"value passing between realms must be callable or primitive", 59);
LABEL_68:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v50, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

unint64_t JSC::remoteFunctionCallGeneric(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::JSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::JSRemoteFunction *v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t OutOfMemoryError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::Exception *v34;
  int v35;
  int v36;
  JSC::JSRemoteFunction *v37;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD v44[4];
  uint64_t v45;
  JSC::VM *v46;
  _OWORD *v47;
  int v48;

  v9 = *((_QWORD *)this + 7);
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v11 = *(JSC::JSRemoteFunction **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v41 = 0;
  v37 = v11;
  v42 = 0x800000000;
  v43 = (_OWORD *)((char *)v44 + 8);
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)((char *)a2 + (((v13 << 32) + 0x600000000) >> 29));
      v16 = *((_QWORD *)this + 7);
      v38 = (JSC::VM *)v16;
      if ((v15 & 0xFFFE000000000002) == 0)
      {
        v17 = *(unsigned __int8 *)(v15 + 5);
        if (v17 - 2 >= 3)
        {
          if (v17 >= 0x17
            && ((v17 & 0xFE) == 0x1A
             || (*(_BYTE *)(v15 + 6) & 4) != 0
             && ((*(void (**)(_OWORD **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x38))(&v47, v15), (_BYTE)v47)))
          {
            v15 = JSC::JSRemoteFunction::tryCreate(v37, (JSC::JSGlobalObject *)v16, (JSC::VM *)v15, a4);
          }
          else
          {
            v15 = 0;
          }
        }
      }
      if (!*(_DWORD *)(v16 + 80))
        goto LABEL_12;
      v20 = *(_DWORD *)(v16 + 80);
      if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v16 + 16))
      {
        v15 = 0;
      }
      else
      {
LABEL_12:
        if (!v15)
          JSC::throwTypeError((unint64_t)this, &v38, (uint64_t)"value passing between realms must be callable or primitive", 59);
      }
      if (*(_DWORD *)(v9 + 80))
      {
        v21 = *(_DWORD *)(v9 + 80);
        if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v9 + 16))
          goto LABEL_62;
      }
      v18 = v42;
      if ((_DWORD)v42 == HIDWORD(v42) || v43 != (_OWORD *)((char *)v44 + 8) && v43)
      {
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v42, v15, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)v41 = 1;
      }
      else
      {
        *((_QWORD *)v43 + v42) = v15;
        LODWORD(v42) = v18 + 1;
      }
      v13 = v14;
      if (*((int *)a2 + 8) - 1 <= (unint64_t)v14++)
      {
        if (!v41)
          break;
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
        v34 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v34 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v29, v30, v31, v32, v33);
        }
        JSC::VM::throwException((JSC::VM *)v9, this, v34);
        goto LABEL_62;
      }
    }
  }
  if (*(_BYTE *)(v10 + 5) == 26)
  {
    v22 = *(_QWORD *)(v10 + 24);
    if ((v22 & 1) != 0)
      v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v22 + 5) == 8)
    {
      LOBYTE(v38) = 1;
      v39 = *(_QWORD *)(v22 + 40);
      LOBYTE(v40) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v38) = 2;
      v23 = *(_QWORD *)(v10 + 16);
      v39 = v22;
      v40 = v23;
    }
  }
  else
  {
    (*(void (**)(JSC::VM **__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(&v38, v10);
  }
  v47 = v43;
  v48 = v42;
  v24 = JSC::call(v37, v10, &v38, 10, &v47);
  if (*(_DWORD *)(v9 + 80))
  {
    v35 = *(_DWORD *)(v9 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_62;
  }
  v25 = *((_QWORD *)this + 7);
  v46 = (JSC::VM *)v25;
  if ((v24 & 0xFFFE000000000002) == 0)
  {
    v26 = *(unsigned __int8 *)(v24 + 5);
    if (v26 - 2 >= 3)
    {
      if (v26 >= 0x17
        && ((v26 & 0xFE) == 0x1A
         || (*(_BYTE *)(v24 + 6) & 4) != 0
         && ((*(void (**)(_OWORD **__return_ptr, unint64_t))(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v24 & 0xFFFFFFFE)
                                                                                               + 0x4C)
                                                                             + 0x38))(&v47, v24), (_BYTE)v47)))
      {
        v24 = JSC::JSRemoteFunction::tryCreate(v37, (JSC::JSGlobalObject *)v25, (JSC::VM *)v24, a4);
      }
      else
      {
        v24 = 0;
      }
    }
  }
  if (*(_DWORD *)(v25 + 80))
  {
    v36 = *(_DWORD *)(v25 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v25 + 16))
    {
LABEL_62:
      v24 = 0;
      goto LABEL_53;
    }
  }
  if (!v24)
    JSC::throwTypeError((unint64_t)this, &v46, (uint64_t)"value passing between realms must be callable or primitive", 59);
LABEL_53:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v24;
}

uint64_t JSC::isRemoteFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 6;
  if (&JSC::JSRemoteFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
    return 7;
  return 6;
}

unint64_t JSC::createRemoteFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::JSObject *a4)
{
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  uint64_t v7;

  v5 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  v6 = (JSC::VM *)*((_QWORD *)a2 + 6);
  v7 = *((_QWORD *)a2 + 7);
  if ((v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if ((v7 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v7 + 5) != 58)
      this = (JSC *)v7;
    else
      this = *(JSC **)(v7 + 16);
  }
  return JSC::JSRemoteFunction::tryCreate((uint64_t)this, v5, v6, a4);
}

unint64_t JSC::JSRemoteFunction::tryCreate(uint64_t this, JSC::JSGlobalObject *a2, JSC::VM *a3, JSC::JSObject *a4)
{
  uint64_t v4;
  BOOL v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t **v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int OwnPropertySlotInline;
  int8x16_t v36;
  JSC::JSObject *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  double v59;
  uint64_t (*v60)(_QWORD *);
  _QWORD *v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  int v68;
  int v69;
  _QWORD *v70;
  double v71;
  JSC::VM *v72;
  JSC::JSObject *v73;
  _QWORD v74[2];
  unint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  char v82;
  int8x16_t **v83;
  uint64_t v84;
  JSC::VM *v85;

  v4 = (uint64_t)a3;
  if (&JSC::JSRemoteFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)))
    v4 = *((_QWORD *)a3 + 4);
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    v11 = (uint64_t **)((char *)a2 + 41880);
    v9 = 1;
  }
  else
  {
    if (v4)
      v7 = *(_BYTE *)(v4 + 5) == 26;
    else
      v7 = 0;
    v8 = v7;
    v9 = (v8 & 1) == 0;
    v10 = 41880;
    if (!v9)
      v10 = 41872;
    v11 = (uint64_t **)((char *)a2 + v10);
  }
  LOBYTE(v74[0]) = v9;
  v19 = JSC::VM::getRemoteFunction(BOOL)::$_0::operator()((unsigned __int8 *)v74, (uint64_t)a2, v11);
  v20 = *(_QWORD *)(this + 1048);
  if ((v20 & 1) != 0)
  {
    v60 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v61 = (_QWORD *)(this - 16);
    else
      v61 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    v74[0] = *v61;
    v74[1] = this;
    v75 = this + 1048;
    v20 = v60(v74);
  }
  v21 = (_QWORD *)*((_QWORD *)a2 + 5088);
  if (!v21)
    v21 = (_QWORD *)JSC::GCClient::Heap::remoteFunctionSpaceSlow((JSC::Heap **)a2 + 4694);
  SlowCase = v21[3];
  if (SlowCase < v21[4])
    goto LABEL_17;
  SlowCase = v21[5];
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ v21[6];
    v21[4] = SlowCase + HIDWORD(v62);
    v21[5] = SlowCase + (int)v62;
LABEL_17:
    v21[3] = SlowCase + 64;
    goto LABEL_18;
  }
  v70 = v21;
  JSC::sanitizeStackForVM(a2, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v70, (char *)a2 + 192, 64, 0, 0);
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  JSC::JSCallee::JSCallee(SlowCase, (uint64_t)a2, this, v20);
  *(_QWORD *)(SlowCase + 24) = v19;
  *(_QWORD *)(SlowCase + 32) = v4;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_QWORD *)(SlowCase + 48) = 0;
  if (*((_BYTE *)a2 + 755))
  {
    __dmb(0xAu);
    v4 = *(_QWORD *)(SlowCase + 32);
  }
  v72 = a2;
  v27 = *(_QWORD *)(this + 56);
  v75 = 0xFFFFFFFF00000000;
  v77 = 0;
  v78 = 0;
  v76 = (_DWORD *)v4;
  v79 = 0x20000;
  v80 = 0;
  LOBYTE(v81) = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v28 = v27 + 41952;
  OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(v4, this, *(_QWORD *)(*(_QWORD *)(v27 + 41952) + 1768), (uint64_t)v74, v23, v24, v25, v26);
  if (*(_DWORD *)(v27 + 80))
  {
    v63 = *(_DWORD *)(v27 + 80);
    if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v29, v30, v31, v32, v33, v34);
    if (*(_QWORD *)(v27 + 16))
      goto LABEL_56;
  }
  if (OwnPropertySlotInline)
  {
    if (v80)
    {
      v38 = JSC::JSObject::get(*(unsigned int **)(SlowCase + 32), this, *(_QWORD *)(*(_QWORD *)v28 + 1768), v30, v31, v32, v33, v34);
    }
    else
    {
      if (BYTE1(v79) == 1)
      {
        v37 = (JSC::JSObject *)v74[0];
LABEL_41:
        v73 = v37;
        if (*(_DWORD *)(v27 + 80))
        {
          v65 = *(_DWORD *)(v27 + 80);
          if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v29, v30, v31, v32, v33, v34);
          if (*(_QWORD *)(v27 + 16))
            goto LABEL_56;
        }
        if ((unint64_t)v37 < 0xFFFE000000000000)
        {
          if ((unint64_t)v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase(&v73, (JSC::JSGlobalObject *)this, v29, v30, v31, v32, v33, v34, v36);
          else
            *(_QWORD *)&v59 = (char *)v37 - 0x2000000000000;
          v46 = trunc(v59 + 0.0);
        }
        else
        {
          v46 = (double)(int)v37;
        }
        if (*(_DWORD *)(v27 + 80))
        {
          v68 = *(_DWORD *)(v27 + 80);
          if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
          {
            v71 = v46;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v29, v30, v31, v32, v33, v34);
            v46 = v71;
          }
          if (*(_QWORD *)(v27 + 16))
            goto LABEL_56;
        }
        if (v46 < 0.0)
          v46 = 0.0;
        *(double *)(SlowCase + 48) = v46;
        goto LABEL_48;
      }
      if (BYTE1(v79) == 2)
      {
        v38 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v74, (JSC::JSGlobalObject *)this, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        v39 = *(WTF::StringImpl **)(*(_QWORD *)v28 + 1768);
        v40 = (unint64_t)v77;
        v41 = *(_QWORD *)(16 * (*v77 & 0xFFFFFFFE) + 0x28);
        if ((v75 & 0x20) != 0)
          v40 = (unint64_t)v76;
        if (HIBYTE(v79) != 1)
          goto LABEL_39;
        if ((v40 & 0xFFFE000000000002) != 0)
          goto LABEL_105;
        v42 = *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C);
        v43 = *(_DWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v42)
        {
          v44 = 16 * v42;
          if (v83 != (int8x16_t **)v44)
          {
            do
            {
              v44 = *(_QWORD *)(v44 + 16);
              v43 = v44 != 0;
            }
            while ((int8x16_t **)v44 != v83 && v44 != 0);
          }
        }
        if (!v43)
        {
LABEL_105:
          v85 = *(JSC::VM **)(this + 56);
          v38 = JSC::throwDOMAttributeGetterTypeError(v41, &v85, v83, v39);
        }
        else
        {
LABEL_39:
          v38 = ((uint64_t (*)(unint64_t))v74[0])(v41);
        }
      }
    }
    v37 = (JSC::JSObject *)v38;
    goto LABEL_41;
  }
LABEL_48:
  v47 = JSC::JSObject::get(*(unsigned int **)(SlowCase + 32), this, *(_QWORD *)(*(_QWORD *)v28 + 1968), v30, v31, v32, v33, v34);
  v55 = v47;
  if (!*(_DWORD *)(v27 + 80))
  {
    if ((v47 & 0xFFFE000000000002) != 0)
      goto LABEL_56;
    goto LABEL_50;
  }
  v64 = *(_DWORD *)(v27 + 80);
  if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v48, v49, v50, v51, v52, v53);
  if (!*(_QWORD *)(v27 + 16) && (v55 & 0xFFFE000000000002) == 0)
  {
LABEL_50:
    if (*(_BYTE *)(v55 + 5) == 2)
    {
      if ((*(_BYTE *)(v55 + 8) & 1) != 0)
        JSC::JSRopeString::resolveRope(v55, (JSC::JSGlobalObject *)this, v48, v49, v54, v50, v51, v52, v53);
      if (!*(_DWORD *)(v27 + 80))
        goto LABEL_54;
      v69 = *(_DWORD *)(v27 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v48, v49, v50, v51, v52, v53);
      if (!*(_QWORD *)(v27 + 16))
      {
LABEL_54:
        *(_QWORD *)(SlowCase + 40) = v55;
        if (*(_DWORD *)(v27 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
          JSC::Heap::writeBarrierSlowPath(v27 + 192, SlowCase);
      }
    }
  }
LABEL_56:
  if (v82)
  {
    v56 = *(_DWORD *)(v81 + 4);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x198A61210);
    }
    *(_DWORD *)(v81 + 4) = v56 - 1;
  }
  v57 = *((_QWORD *)a2 + 2);
  if (v57 && *((_QWORD *)a2 + 3) != v57)
  {
    *((_QWORD *)a2 + 2) = 0;
    v66 = (unsigned int *)((char *)a2 + 80);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 & 0xFFFFFFEF, v66));
    JSC::throwTypeError(this, &v72, (uint64_t)"wrapping returned function throws an error", 43);
  }
  return SlowCase;
}

void WTF::VectorTypeOperations<JSC::Stringifier::Holder>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[5];
      if (v9 + 7 != (_QWORD *)v10 && v10 != 0)
      {
        v9[5] = 0;
        *((_DWORD *)v9 + 12) = 0;
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = v9[4];
      v9[4] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
        {
          v13 = *(unsigned int *)(v12 + 20);
          if ((_DWORD)v13)
          {
            v14 = *(WTF::StringImpl ***)(v12 + 8);
            v15 = 8 * v13;
            do
            {
              v16 = *v14;
              *v14 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                {
                  WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
                }
                else
                {
                  *(_DWORD *)v16 -= 2;
                }
              }
              ++v14;
              v15 -= 8;
            }
            while (v15);
          }
          v25 = *(_QWORD *)(v12 + 8);
          if (v12 + 24 != v25 && v25 != 0)
          {
            *(_QWORD *)(v12 + 8) = 0;
            *(_DWORD *)(v12 + 16) = 0;
            WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v12;
        }
      }
      v9 += 23;
    }
    while (v9 != a2);
  }
}

char *JSC::jsonProtoFuncParse(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  JSC::CallFrame *v19;
  __n128 v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  int16x8_t *v24;
  char *v25;
  char *v26;
  int16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int8x16_t v31;
  unsigned __int16 *v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;
  int16x8_t v36;
  uint16x8_t v37;
  JSC::CallFrame *v38;
  __n128 v39;
  unsigned int v40;
  uint64_t v41;
  JSC::CallFrame *v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  unint64_t *v55;
  WTF::AtomStringImpl *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unsigned __int8 **v73;
  unsigned __int16 *v75;
  uint64_t v76;
  int v77;
  char v78;
  char v79;
  uint64_t v80;
  unsigned __int16 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  int v87;
  int v88;
  int v89;
  char v90;
  char v91;
  char *v92;
  int v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  char *v98;
  int v99;
  int v100;
  unsigned __int8 *v101;
  BOOL v102;
  unsigned int v103;
  unint64_t v104;
  int8x16_t *v105;
  unsigned __int8 *v106;
  int8x16_t v107;
  int8x16_t v108;
  uint8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  unsigned __int8 *v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  uint8x16_t v118;
  unsigned __int8 *v119;
  WTF::AtomStringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v123;
  JSC::CallFrame *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  int v145;
  unsigned __int16 *v146;
  BOOL v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  int16x8_t *v151;
  unsigned __int16 *v152;
  unsigned __int16 *v153;
  int16x8_t v154;
  int16x8_t v155;
  uint16x8_t v156;
  int16x8_t v157;
  int8x16_t v158;
  int8x16_t v159;
  unsigned __int16 *v160;
  int16x8_t v161;
  int16x8_t v162;
  int8x16_t v163;
  int16x8_t v164;
  uint16x8_t v165;
  const WTF::String *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  const WTF::String *v175;
  JSC::Symbol *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const WTF::String *v181;
  unint64_t SyntaxError;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  int64_t v190;
  int v191;
  int v192;
  BOOL v193;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::AtomStringImpl *v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  unsigned __int16 *v213;
  unint64_t v214;
  unsigned __int8 *v215;
  uint8x16_t v216;
  char v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  char v227;
  unsigned __int8 *v228;
  int v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  int v232;
  int v233;
  int v234;
  int v235;
  double v236;
  char v237;
  uint64_t v238;
  unsigned __int16 *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int16 *v244;
  int v245;
  int v246;
  int v247;
  double v248;
  unsigned __int8 *v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  const char *v252;
  char *v253;
  int v254;
  BOOL v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  const char *v259;
  unsigned __int16 *v260;
  unint64_t v261;
  unsigned __int16 *v262;
  int v263;
  unsigned __int16 *v264;
  uint64_t v265;
  int16x8_t *v266;
  unint64_t v267;
  unsigned __int8 *v268;
  int v269;
  unsigned __int8 *v270;
  int8x16_t *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  int v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  int v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v295;
  unint64_t v296;
  int v297;
  BOOL v298;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  const char *v319;
  unsigned __int8 *v320;
  int v321;
  unsigned __int8 *v322;
  uint64_t v323;
  WTF::StringImpl *v324;
  uint64_t v325;
  const char *v326;
  unsigned __int16 *v327;
  int v328;
  BOOL v330;
  uint64_t v331;
  unsigned int v332;
  BOOL v333;
  BOOL v334;
  BOOL v335;
  unsigned int v336;
  unsigned __int16 *v337;
  unint64_t v338;
  unsigned __int16 *v339;
  int v340;
  unsigned __int16 *v341;
  uint64_t v342;
  int16x8_t *v343;
  unint64_t v344;
  WTF::StringImpl *v345[2];
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  WTF::StringImpl *v349[2];
  unint64_t v350;
  char v351;
  unsigned __int16 *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  char v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  uint64_t v362;
  char *v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _BYTE *v369;
  uint64_t v370;
  _BYTE v371[16];
  _BYTE *v372;
  uint64_t v373;
  _BYTE v374[128];

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v347 = 10;
LABEL_96:
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v347, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  v12 = *((_QWORD *)a2 + 6);
  v347 = v12;
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
    goto LABEL_96;
LABEL_4:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v13 = *(int **)(v12 + 8);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_7:
      v14 = v13[4];
      v15 = (char *)*((_QWORD *)v13 + 1);
      LODWORD(v13) = v13[1];
      v16 = (v14 >> 2) & 1;
LABEL_8:
      v17 = v13 | (unint64_t)(v16 << 32);
      goto LABEL_9;
    }
LABEL_124:
    v15 = 0;
    v16 = 1;
    goto LABEL_8;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_7;
    goto LABEL_124;
  }
  v64 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v64
    && (v65 = *(unsigned int *)(v64 + 4),
        v66 = *(_QWORD *)(v12 + 24),
        v67 = v66 >> 16,
        v65 > (v66 >> 16)))
  {
    v68 = *(unsigned int *)(v64 + 16);
    v15 = *(char **)(v64 + 8);
    v69 = *(_DWORD *)(v12 + 16);
    if ((int)v65 - (int)v67 > v69 || (v69 = v65 - v67, (_DWORD)v67))
    {
      v70 = (v66 >> 16);
      v17 = v69;
      v71 = v65 - v67;
      if (((v68 >> 2) & 1) != 0)
      {
        if (v71 < v69)
          goto LABEL_602;
        v15 += v70;
        v17 = v69 | 0x100000000;
      }
      else
      {
        if (v71 < v69)
          goto LABEL_602;
        v15 += 2 * v70;
      }
    }
    else
    {
      v17 = v65 & 0xFFFFFFFEFFFFFFFFLL | (((v68 >> 2) & 1) << 32);
    }
  }
  else
  {
    v15 = "";
    v17 = 0x100000000;
  }
LABEL_9:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v18 = v17;
  if ((v17 & 0x100000000) != 0)
  {
    v351 = 0;
    v348 = 0;
    v349[0] = 0;
    v347 = (uint64_t)this;
    v38 = (JSC::CallFrame *)&v15[v17];
    v352 = (unsigned __int16 *)v15;
    v353 = (unint64_t)v38;
    v354 = 0;
    v355 = 0;
    v356 = 0;
    v357 = 1;
    v358 = 0;
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 0x800000000;
    v364 = 0u;
    v365 = 0u;
    v366 = 0u;
    v367 = 0u;
    v363 = (char *)&v364 + 8;
    v368 = 0;
    v369 = v371;
    v39 = (__n128)0x10uLL;
    v370 = 16;
    v372 = v374;
    v373 = 16;
    if ((_DWORD)v17)
    {
      if (JSC::tokenTypesOfLatin1Characters[*v15] == 19)
      {
        v75 = (unsigned __int16 *)(v15 + 1);
        v76 = v17 - 1;
        while (1)
        {
          v352 = v75;
          if (!v76)
            goto LABEL_213;
          v77 = *(unsigned __int8 *)v75;
          v75 = (unsigned __int16 *)((char *)v75 + 1);
          --v76;
          if (JSC::tokenTypesOfLatin1Characters[v77] != 19)
          {
            v15 = (char *)v75 - 1;
            v18 = (char *)v75 - 1 < (char *)v38;
            goto LABEL_37;
          }
        }
      }
      v18 = 1;
    }
LABEL_37:
    if (v15 != (char *)v38)
    {
      LOBYTE(v349[1]) = 18;
      a4 = *v15;
      v40 = JSC::tokenTypesOfLatin1Characters[a4];
      if (v40 <= 4)
      {
        if (v40 == 4)
        {
          if ((_DWORD)a4 != 39)
          {
            a3 = (JSC::CallFrame *)(v15 + 1);
            v352 = (unsigned __int16 *)(v15 + 1);
            v41 = v38 - (JSC::CallFrame *)(v15 + 1);
            if (v41 < 0)
              goto LABEL_602;
            v42 = v38;
            if ((unint64_t)v41 >= 0x10)
            {
              v43 = v15 + 16;
              v44.i64[0] = 0x2222222222222222;
              v44.i64[1] = 0x2222222222222222;
              v45.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v45.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v46.i64[0] = 0x2020202020202020;
              v46.i64[1] = 0x2020202020202020;
              while (1)
              {
                v47 = *(int8x16_t *)(v43 - 15);
                v48 = vceqq_s8(v47, v44);
                v39 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v47, v45), (int8x16_t)vcgtq_u8(v46, (uint8x16_t)v47)), v48);
                v48.i8[0] = vmaxvq_u8((uint8x16_t)v39);
                if (v48.i32[0])
                  break;
                v43 += 16;
                if (v43 >= (char *)v38)
                {
                  if (v43 - 15 >= (char *)v38)
                    goto LABEL_90;
                  v49 = (char *)v38 - 16;
                  v50 = *((int8x16_t *)v38 - 1);
                  v51.i64[0] = 0x2222222222222222;
                  v51.i64[1] = 0x2222222222222222;
                  v52 = vceqq_s8(v50, v51);
                  v53.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v53.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v54.i64[0] = 0x2020202020202020;
                  v54.i64[1] = 0x2020202020202020;
                  v39 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v50, v53), (int8x16_t)vcgtq_u8(v54, (uint8x16_t)v50)), v52);
                  v52.i8[0] = vmaxvq_u8((uint8x16_t)v39);
                  if (!v52.i32[0])
                    goto LABEL_90;
LABEL_89:
                  v39 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v39);
                  v39.n128_u8[0] = vminvq_u8((uint8x16_t)v39);
                  v42 = (JSC::CallFrame *)&v49[v39.n128_u32[0]];
                  goto LABEL_90;
                }
              }
              v49 = v43 - 15;
              goto LABEL_89;
            }
            if (v38 != a3)
            {
              v124 = (JSC::CallFrame *)(v15 + 1);
              while (JSC::safeStringLatin1CharactersInStrictJSON[*(unsigned __int8 *)v124])
              {
                v124 = (JSC::CallFrame *)((char *)v124 + 1);
                if (!--v41)
                  goto LABEL_90;
              }
              v42 = v124;
            }
LABEL_90:
            v352 = (unsigned __int16 *)v42;
            if (v42 < v38 && *(unsigned __int8 *)v42 == (_DWORD)a4)
            {
              BYTE1(v349[1]) |= 1u;
              v350 = (unint64_t)(v15 + 1);
              v352 = (unsigned __int16 *)((char *)v42 + 1);
              HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | ((_DWORD)v42 - (_DWORD)a3) & 0x7FFFFFFF;
              v78 = 4;
LABEL_93:
              LOBYTE(v349[1]) = v78;
              goto LABEL_77;
            }
            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)v349, (uint64_t)&v349[1], (size_t)a3, a4, a5, a6, a7, a8);
LABEL_77:
            v73 = *(unsigned __int8 ***)(v347 + 56);
            if (!v358)
            {
              v15 = (char *)JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v347, v73, v39, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_79:
              if (LOBYTE(v349[1]) == 14 && v15 != 0)
                goto LABEL_57;
              if (*((_DWORD *)v11 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v56, v57, v58, v59, v60, v61, v62))
              {
                v15 = 0;
                goto LABEL_257;
              }
              JSC::LiteralParser<unsigned char>::getErrorMessage((uint64_t)&v347, v56, v57, v58, v59, v60, v61, v62, (int **)v345);
              SyntaxError = JSC::createSyntaxError(this, v345, v181);
              v15 = (char *)JSC::VM::throwException(v11, this, SyntaxError, v183, v184, v185, v186, v187);
              v173 = v345[0];
              v345[0] = 0;
              if (!v173)
                goto LABEL_257;
              if (*(_DWORD *)v173 != 2)
              {
                *(_DWORD *)v173 -= 2;
                goto LABEL_257;
              }
              goto LABEL_302;
            }
            v15 = (char *)JSC::LiteralParser<unsigned char>::parse((uint64_t)&v347, (uint64_t)v73, 3uLL, a4, a5, a6, a7, a8);
            if (LOBYTE(v349[1]) != 17)
              goto LABEL_79;
            v101 = (unsigned __int8 *)v352;
            if ((unint64_t)v352 >= v353)
            {
              v102 = 0;
            }
            else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v352] == 19)
            {
              v212 = (unsigned __int8 *)v353;
              v213 = (unsigned __int16 *)((char *)v352 + 1);
              v214 = ~(unint64_t)v352 + v353;
              while (1)
              {
                v215 = (unsigned __int8 *)v213;
                v352 = v213;
                if (!v214)
                  break;
                v213 = (unsigned __int16 *)((char *)v213 + 1);
                --v214;
                if (JSC::tokenTypesOfLatin1Characters[*v215] != 19)
                {
                  v212 = v215;
                  break;
                }
              }
              v102 = (unint64_t)v215 < v353;
              v101 = v212;
            }
            else
            {
              v102 = 1;
            }
            if (v101 == (unsigned __int8 *)v353)
            {
              v217 = 14;
              goto LABEL_301;
            }
            LOBYTE(v349[1]) = 18;
            v58 = *v101;
            v103 = JSC::tokenTypesOfLatin1Characters[v58];
            if (v103 <= 4)
            {
              if (v103 == 4)
              {
                if ((_DWORD)v58 != 39)
                {
                  v57 = (size_t)(v101 + 1);
                  v352 = (unsigned __int16 *)(v101 + 1);
                  if (!v351)
                  {
                    v104 = v353 - v57;
                    if ((uint64_t)(v353 - v57) < 0)
                      goto LABEL_602;
                    v105 = (int8x16_t *)&v101[v104 + 1];
                    if (v104 >= 0x10)
                    {
                      v106 = v101 + 16;
                      v107.i64[0] = 0x2222222222222222;
                      v107.i64[1] = 0x2222222222222222;
                      v108.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v108.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v109.i64[0] = 0x2020202020202020;
                      v109.i64[1] = 0x2020202020202020;
                      while (1)
                      {
                        v110 = *(int8x16_t *)(v106 - 15);
                        v111 = vceqq_s8(v110, v107);
                        v112 = vorrq_s8(vorrq_s8(vceqq_s8(v110, v108), (int8x16_t)vcgtq_u8(v109, (uint8x16_t)v110)), v111);
                        v111.i8[0] = vmaxvq_u8((uint8x16_t)v112);
                        if (v111.i32[0])
                          break;
                        v106 += 16;
                        if (v106 >= (unsigned __int8 *)v105)
                        {
                          if (v106 - 15 >= (unsigned __int8 *)v105)
                            goto LABEL_297;
                          v113 = (unsigned __int8 *)&v105[-1];
                          v114 = v105[-1];
                          v115.i64[0] = 0x2222222222222222;
                          v115.i64[1] = 0x2222222222222222;
                          v116 = vceqq_s8(v114, v115);
                          v117.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v117.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v118.i64[0] = 0x2020202020202020;
                          v118.i64[1] = 0x2020202020202020;
                          v112 = vorrq_s8(vorrq_s8(vceqq_s8(v114, v117), (int8x16_t)vcgtq_u8(v118, (uint8x16_t)v114)), v116);
                          v116.i8[0] = vmaxvq_u8((uint8x16_t)v112);
                          if (!v116.i32[0])
                            goto LABEL_297;
LABEL_296:
                          v216 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v112);
                          v216.i8[0] = vminvq_u8(v216);
                          v105 = (int8x16_t *)&v113[v216.u32[0]];
                          goto LABEL_297;
                        }
                      }
                      v113 = v106 - 15;
                      goto LABEL_296;
                    }
                    if (v353 == v57)
                      goto LABEL_297;
                    v271 = (int8x16_t *)(v101 + 1);
                    do
                    {
                      if (!JSC::safeStringLatin1CharactersInStrictJSON[v271->u8[0]])
                      {
                        v105 = v271;
                        break;
                      }
                      v271 = (int8x16_t *)((char *)v271 + 1);
                      --v104;
                    }
                    while (v104);
LABEL_297:
                    v352 = (unsigned __int16 *)v105;
                    goto LABEL_298;
                  }
LABEL_554:
                  if (v57 >= v353)
                  {
                    v105 = (int8x16_t *)v57;
                  }
                  else
                  {
                    v331 = (uint64_t)&v101[v353 - v57 + 1];
                    v105 = (int8x16_t *)v57;
                    while (1)
                    {
                      v332 = v105->u8[0];
                      v333 = v332 < 0x20 || v332 == 92;
                      v334 = v333 || v332 == (_DWORD)v58;
                      v335 = v334;
                      if (v332 != 9 && v335)
                        break;
                      v105 = (int8x16_t *)((char *)v105 + 1);
                      v352 = (unsigned __int16 *)v105;
                      if (v105 == (int8x16_t *)v331)
                      {
                        v105 = (int8x16_t *)v331;
                        break;
                      }
                    }
                  }
LABEL_298:
                  if ((unint64_t)v105 >= v353 || v105->u8[0] != (_DWORD)v58)
                  {
                    JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)v349, (uint64_t)&v349[1], v57, v58, v59, v60, v61, v62);
                    goto LABEL_79;
                  }
                  BYTE1(v349[1]) |= 1u;
                  v350 = v57;
                  v352 = (unsigned __int16 *)((char *)v105->u16 + 1);
                  HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | ((_DWORD)v105 - v57) & 0x7FFFFFFF;
                  v217 = 4;
                  goto LABEL_301;
                }
                if (v351)
                {
                  v57 = (size_t)(v101 + 1);
                  v352 = (unsigned __int16 *)(v101 + 1);
                  goto LABEL_554;
                }
                v316 = WTF::fastCompactMalloc((WTF *)0x20);
                v317 = (WTF::StringImpl *)v316;
                v318 = 0x2900000002;
                v319 = "Single quotes (') are not allowed in JSON";
                goto LABEL_516;
              }
LABEL_285:
              LOBYTE(v349[1]) = v103;
              v352 = (unsigned __int16 *)(v101 + 1);
              goto LABEL_79;
            }
            if (v103 != 6)
            {
              if (v103 != 5)
              {
                if (v103 - 18 < 2)
                {
                  WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v101, 1uLL, 39, v345);
                  v275 = v345[0];
                  v345[0] = 0;
                  v276 = v349[0];
                  v349[0] = v275;
                  if (!v276)
                    goto LABEL_79;
                  v277 = *(_DWORD *)v276 - 2;
                  if (*(_DWORD *)v276 != 2)
                  {
LABEL_489:
                    *(_DWORD *)v276 = v277;
                    goto LABEL_79;
                  }
                  WTF::StringImpl::~StringImpl(v276, v56, v57, v58, v59, v60, v61, v62);
                  WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
                  v276 = v345[0];
                  v345[0] = 0;
                  if (!v276)
                    goto LABEL_79;
LABEL_513:
                  v277 = *(_DWORD *)v276 - 2;
                  if (*(_DWORD *)v276 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v276, v56, v57, v58, v59, v60, v61, v62);
                    WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
                    goto LABEL_79;
                  }
                  goto LABEL_489;
                }
                goto LABEL_285;
              }
              if ((_DWORD)v58 == 110)
              {
                if ((uint64_t)(v353 - (_QWORD)v101) >= 4 && *(_WORD *)(v101 + 1) == 27765 && v101[3] == 108)
                {
                  v352 = (unsigned __int16 *)(v101 + 4);
                  v217 = 13;
LABEL_301:
                  LOBYTE(v349[1]) = v217;
                  goto LABEL_79;
                }
              }
              else if ((_DWORD)v58 == 102)
              {
                if ((uint64_t)(v353 - (_QWORD)v101) >= 5
                  && *(_WORD *)(v101 + 1) == 27745
                  && *(_WORD *)(v101 + 3) == 25971)
                {
                  v352 = (unsigned __int16 *)(v101 + 5);
                  v217 = 12;
                  goto LABEL_301;
                }
              }
              else if ((_DWORD)v58 == 116
                     && (uint64_t)(v353 - (_QWORD)v101) >= 4
                     && *(_WORD *)(v101 + 1) == 30066
                     && v101[3] == 101)
              {
                v352 = (unsigned __int16 *)(v101 + 4);
                v217 = 11;
                goto LABEL_301;
              }
              v294 = (int)v101;
              v350 = (unint64_t)v101;
              v295 = (int)v101;
              if ((unint64_t)v101 < v353)
              {
                v296 = v353 - (_QWORD)v101;
                while (1)
                {
                  v297 = *v101;
                  if (v297 != 36)
                  {
                    v298 = v297 != 95 && (v297 - 48) >= 0xA;
                    if (v298 && (v297 | 0x20u) - 97 > 0x19)
                      break;
                  }
                  v352 = (unsigned __int16 *)++v101;
                  if (!--v296)
                  {
                    LODWORD(v101) = v353;
                    break;
                  }
                }
                v295 = (int)v101;
              }
              HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (v295 - v294) & 0x7FFFFFFF;
              v217 = 5;
              goto LABEL_301;
            }
            v227 = (_DWORD)v58 != 45 || !v102;
            v228 = v101;
            if ((v227 & 1) == 0)
            {
              v228 = v101 + 1;
              v352 = (unsigned __int16 *)(v101 + 1);
            }
            if ((unint64_t)v228 < v353)
            {
              v229 = *v228;
              if (v229 == 48)
              {
                v231 = v228 + 1;
                v352 = (unsigned __int16 *)v231;
                goto LABEL_322;
              }
              if ((v229 - 49) <= 8)
              {
                v230 = v228 + 1;
                do
                {
                  v231 = v230;
                  v352 = (unsigned __int16 *)v230;
                  if ((unint64_t)v230 >= v353)
                    break;
                  ++v230;
                }
                while (*v231 - 48 < 0xA);
LABEL_322:
                if ((unint64_t)v231 < v353)
                {
                  v232 = *v231;
                  if (v232 == 46)
                  {
                    v352 = (unsigned __int16 *)(v231 + 1);
                    if ((unint64_t)(v231 + 1) >= v353 || v231[1] - 48 > 9)
                    {
                      v316 = WTF::fastCompactMalloc((WTF *)0x20);
                      v317 = (WTF::StringImpl *)v316;
                      v318 = 0x2200000002;
                      v319 = "Invalid digits after decimal point";
                      goto LABEL_516;
                    }
                    v249 = v231 + 2;
                    do
                    {
                      v231 = v249;
                      v352 = (unsigned __int16 *)v249;
                      if ((unint64_t)v249 >= v353)
                        break;
                      ++v249;
                    }
                    while (*v231 - 48 < 0xA);
                  }
                  else if (v232 != 69 && v232 != 101 && v231 - v101 <= 9)
                  {
                    LOBYTE(v349[1]) = 6;
                    v233 = *v101;
                    if (v233 == 45)
                      ++v101;
                    if (v101 >= v231)
                    {
                      if (v233 != 45)
                      {
                        v234 = 0;
LABEL_333:
                        v236 = (double)v234;
LABEL_334:
                        v350 = *(_QWORD *)&v236;
                        goto LABEL_79;
                      }
                    }
                    else
                    {
                      v234 = 0;
                      do
                      {
                        v235 = *v101++;
                        v234 = v235 + 10 * v234 - 48;
                      }
                      while (v101 < v231);
                      if (v233 != 45)
                        goto LABEL_333;
                      if (v234)
                      {
                        v234 = -v234;
                        goto LABEL_333;
                      }
                    }
                    v350 = 0x8000000000000000;
                    goto LABEL_79;
                  }
                }
                if ((unint64_t)v231 >= v353 || (*v231 | 0x20) != 0x65)
                {
LABEL_375:
                  LOBYTE(v349[1]) = 6;
                  v345[0] = 0;
                  if (v231 - v101 < 0)
                    goto LABEL_602;
                  v236 = WTF::parseDouble(v101, v231 - v101, v345);
                  goto LABEL_334;
                }
                v320 = v231 + 1;
                v352 = (unsigned __int16 *)(v231 + 1);
                if ((unint64_t)(v231 + 1) < v353)
                {
                  v321 = *v320;
                  if (v321 == 45 || v321 == 43)
                  {
                    v320 = v231 + 2;
                    v352 = (unsigned __int16 *)(v231 + 2);
                  }
                }
                if ((unint64_t)v320 < v353 && *v320 - 48 <= 9)
                {
                  v322 = v320 + 1;
                  do
                  {
                    v231 = v322;
                    v352 = (unsigned __int16 *)v322;
                    if ((unint64_t)v322 >= v353)
                      break;
                    ++v322;
                  }
                  while (*v231 - 48 < 0xA);
                  goto LABEL_375;
                }
                v316 = WTF::fastCompactMalloc((WTF *)0x20);
                v317 = (WTF::StringImpl *)v316;
                v318 = 0x5D00000002;
                v319 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_516:
                *(_QWORD *)v316 = v318;
                *(_QWORD *)(v316 + 8) = v319;
                *(_DWORD *)(v316 + 16) = 4;
                v276 = v349[0];
                v349[0] = v317;
                if (!v276)
                  goto LABEL_79;
                goto LABEL_513;
              }
            }
            v316 = WTF::fastCompactMalloc((WTF *)0x20);
            v317 = (WTF::StringImpl *)v316;
            v318 = 0xE00000002;
            v319 = "Invalid number";
            goto LABEL_516;
          }
          v257 = WTF::fastCompactMalloc((WTF *)0x20);
          v258 = (WTF::StringImpl *)v257;
          v39.n128_u64[0] = 0x2900000002;
          v259 = "Single quotes (') are not allowed in JSON";
          goto LABEL_406;
        }
LABEL_76:
        LOBYTE(v349[1]) = v40;
        v352 = (unsigned __int16 *)(v15 + 1);
        goto LABEL_77;
      }
      if (v40 != 6)
      {
        if (v40 == 5)
        {
          if ((_DWORD)a4 == 110)
          {
            if (v38 - (JSC::CallFrame *)v15 >= 4 && *(_WORD *)(v15 + 1) == 27765 && v15[3] == 108)
            {
              v352 = (unsigned __int16 *)(v15 + 4);
              v78 = 13;
              goto LABEL_93;
            }
          }
          else if ((_DWORD)a4 == 102)
          {
            if (v38 - (JSC::CallFrame *)v15 >= 5 && *(_WORD *)(v15 + 1) == 27745 && *(_WORD *)(v15 + 3) == 25971)
            {
              v352 = (unsigned __int16 *)(v15 + 5);
              v78 = 12;
              goto LABEL_93;
            }
          }
          else if ((_DWORD)a4 == 116
                 && v38 - (JSC::CallFrame *)v15 >= 4
                 && *(_WORD *)(v15 + 1) == 30066
                 && v15[3] == 101)
          {
            v352 = (unsigned __int16 *)(v15 + 4);
            v78 = 11;
            goto LABEL_93;
          }
          v188 = (int)v15;
          v350 = (unint64_t)v15;
          v189 = (int)v15;
          if (v15 < (char *)v38)
          {
            v190 = v38 - (JSC::CallFrame *)v15;
            v191 = (_DWORD)v15 + v190;
            while (1)
            {
              v192 = *v15;
              if (v192 != 36)
              {
                v193 = v192 != 95 && (v192 - 48) >= 0xA;
                if (v193 && (v192 | 0x20u) - 97 > 0x19)
                  break;
              }
              v352 = (unsigned __int16 *)++v15;
              if (!--v190)
              {
                LODWORD(v15) = v191;
                break;
              }
            }
            v189 = (int)v15;
          }
          HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (v189 - v188) & 0x7FFFFFFF;
          v78 = 5;
          goto LABEL_93;
        }
        if (v40 - 18 < 2)
        {
          WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v15, 1uLL, 39, v345);
          v143 = v345[0];
          v345[0] = 0;
          v144 = v349[0];
          v349[0] = v143;
          if (!v144)
            goto LABEL_77;
          v145 = *(_DWORD *)v144 - 2;
          if (*(_DWORD *)v144 != 2)
            goto LABEL_222;
          WTF::StringImpl::~StringImpl(v144, v142, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
          v144 = v345[0];
          v345[0] = 0;
          if (!v144)
            goto LABEL_77;
LABEL_280:
          v145 = *(_DWORD *)v144 - 2;
          if (*(_DWORD *)v144 == 2)
          {
            WTF::StringImpl::~StringImpl(v144, v203, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
            goto LABEL_77;
          }
LABEL_222:
          *(_DWORD *)v144 = v145;
          goto LABEL_77;
        }
        goto LABEL_76;
      }
      v90 = !v18;
      if ((_DWORD)a4 == 45)
        v91 = v90;
      else
        v91 = 1;
      v92 = v15;
      if ((v91 & 1) == 0)
      {
        v92 = v15 + 1;
        v352 = (unsigned __int16 *)(v15 + 1);
      }
      if (v92 < (char *)v38)
      {
        v93 = *v92;
        if (v93 == 48)
        {
          v95 = (unsigned __int8 *)(v92 + 1);
          v352 = (unsigned __int16 *)v95;
          goto LABEL_136;
        }
        if ((v93 - 49) <= 8)
        {
          v94 = (unsigned __int8 *)(v92 + 1);
          do
          {
            v95 = v94;
            v352 = (unsigned __int16 *)v94;
            if (v94 >= (unsigned __int8 *)v38)
              break;
            ++v94;
          }
          while (*v95 - 48 < 0xA);
LABEL_136:
          if (v95 < (unsigned __int8 *)v38)
          {
            v96 = *v95;
            if (v96 == 46)
            {
              v352 = (unsigned __int16 *)(v95 + 1);
              if (v95 + 1 >= (unsigned __int8 *)v38 || v95[1] - 48 > 9)
              {
                v257 = WTF::fastCompactMalloc((WTF *)0x20);
                v258 = (WTF::StringImpl *)v257;
                v39.n128_u64[0] = 0x2200000002;
                v259 = "Invalid digits after decimal point";
                goto LABEL_406;
              }
              v119 = v95 + 2;
              do
              {
                v95 = v119;
                v352 = (unsigned __int16 *)v119;
                if (v119 >= (unsigned __int8 *)v38)
                  break;
                ++v119;
              }
              while (*v95 - 48 < 0xA);
            }
            else if (v96 != 69 && v96 != 101 && v95 - (unsigned __int8 *)v15 <= 9)
            {
              LOBYTE(v349[1]) = 6;
              v97 = *v15;
              if (v97 == 45)
                v98 = v15 + 1;
              else
                v98 = v15;
              if (v98 >= (char *)v95)
              {
                if (v97 != 45)
                {
                  v99 = 0;
LABEL_148:
                  v39.n128_f64[0] = (double)v99;
LABEL_149:
                  v350 = v39.n128_u64[0];
                  goto LABEL_77;
                }
              }
              else
              {
                v99 = 0;
                do
                {
                  v100 = *v98++;
                  v99 = v100 + 10 * v99 - 48;
                }
                while (v98 < (char *)v95);
                if (v97 != 45)
                  goto LABEL_148;
                if (v99)
                {
                  v99 = -v99;
                  goto LABEL_148;
                }
              }
              v350 = 0x8000000000000000;
              goto LABEL_77;
            }
          }
          if (v95 >= (unsigned __int8 *)v38 || (*v95 | 0x20) != 0x65)
          {
LABEL_184:
            LOBYTE(v349[1]) = 6;
            v345[0] = 0;
            if (v95 - (unsigned __int8 *)v15 < 0)
              goto LABEL_602;
            v39.n128_f64[0] = WTF::parseDouble((unsigned __int8 *)v15, v95 - (unsigned __int8 *)v15, v345);
            goto LABEL_149;
          }
          v268 = v95 + 1;
          v352 = (unsigned __int16 *)(v95 + 1);
          if (v95 + 1 < (unsigned __int8 *)v38)
          {
            v269 = *v268;
            if (v269 == 45 || v269 == 43)
            {
              v268 = v95 + 2;
              v352 = (unsigned __int16 *)(v95 + 2);
            }
          }
          if (v268 < (unsigned __int8 *)v38 && *v268 - 48 <= 9)
          {
            v270 = v268 + 1;
            do
            {
              v95 = v270;
              v352 = (unsigned __int16 *)v270;
              if (v270 >= (unsigned __int8 *)v38)
                break;
              ++v270;
            }
            while (*v95 - 48 < 0xA);
            goto LABEL_184;
          }
          v257 = WTF::fastCompactMalloc((WTF *)0x20);
          v258 = (WTF::StringImpl *)v257;
          v39.n128_u64[0] = 0x5D00000002;
          v259 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_406:
          *(_QWORD *)v257 = v39.n128_u64[0];
          *(_QWORD *)(v257 + 8) = v259;
          *(_DWORD *)(v257 + 16) = 4;
          v144 = v349[0];
          v349[0] = v258;
          if (!v144)
            goto LABEL_77;
          goto LABEL_280;
        }
      }
      v257 = WTF::fastCompactMalloc((WTF *)0x20);
      v258 = (WTF::StringImpl *)v257;
      v39.n128_u64[0] = 0xE00000002;
      v259 = "Invalid number";
      goto LABEL_406;
    }
LABEL_213:
    v78 = 14;
    goto LABEL_93;
  }
  v351 = 0;
  v348 = 0;
  v349[0] = 0;
  v347 = (uint64_t)this;
  v19 = (JSC::CallFrame *)&v15[2 * v17];
  v352 = (unsigned __int16 *)v15;
  v353 = (unint64_t)v19;
  v354 = 0;
  v355 = 0;
  v356 = 0;
  v357 = 1;
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v362 = 0x800000000;
  v364 = 0u;
  v365 = 0u;
  v366 = 0u;
  v367 = 0u;
  v363 = (char *)&v364 + 8;
  v368 = 0;
  v369 = v371;
  v20 = (__n128)0x10uLL;
  v370 = 16;
  v372 = v374;
  v373 = 16;
  if ((_DWORD)v17)
  {
    do
    {
      v21 = *(unsigned __int16 *)v15 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v15] == 19;
      v18 = !v21;
      if (!v21)
        break;
      v15 += 2;
      v352 = (unsigned __int16 *)v15;
    }
    while (v15 < (char *)v19);
  }
  if (v15 == (char *)v19)
  {
    v72 = 14;
    goto LABEL_72;
  }
  LOBYTE(v349[1]) = 18;
  a4 = *(unsigned __int16 *)v15;
  if (a4 > 0xFF)
    goto LABEL_197;
  v22 = JSC::tokenTypesOfLatin1Characters[a4];
  if (v22 > 4)
  {
    if (v22 == 5)
    {
      if ((_DWORD)a4 == 102)
      {
        if (v19 - (JSC::CallFrame *)v15 >= 9 && *(_DWORD *)(v15 + 2) == 7077985 && *(_DWORD *)(v15 + 6) == 6619251)
        {
          v352 = (unsigned __int16 *)(v15 + 10);
          v72 = 12;
          goto LABEL_72;
        }
      }
      else if ((_DWORD)a4 == 116)
      {
        if (v19 - (JSC::CallFrame *)v15 >= 7 && *(_DWORD *)(v15 + 2) == 7667826 && *((_WORD *)v15 + 3) == 101)
        {
          v352 = (unsigned __int16 *)(v15 + 8);
          v72 = 11;
          goto LABEL_72;
        }
      }
      else if ((_DWORD)a4 == 110
             && v19 - (JSC::CallFrame *)v15 >= 7
             && *(_DWORD *)(v15 + 2) == 7078005
             && *((_WORD *)v15 + 3) == 108)
      {
        v352 = (unsigned __int16 *)(v15 + 8);
        v72 = 13;
        goto LABEL_72;
      }
      v350 = (unint64_t)v15;
      LODWORD(v253) = (_DWORD)v15;
      if (v15 < (char *)v19)
      {
        v253 = v15;
        do
        {
          v254 = *(unsigned __int16 *)v253;
          v256 = (v254 | 0x20u) - 97 >= 0x1A && (v254 - 48) >= 0xA && (v254 - 8204) >= 2;
          if (v256 && v254 != 95 && v254 != 36)
            break;
          v253 += 2;
          v352 = (unsigned __int16 *)v253;
        }
        while (v253 < (char *)v19);
      }
      HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (((_DWORD)v253 - (_DWORD)v15) >> 1);
      v72 = 5;
      goto LABEL_72;
    }
    if (v22 != 6)
    {
      if (v22 - 18 >= 2)
        goto LABEL_52;
LABEL_197:
      WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v15, 1uLL, 39, v345);
      v121 = v345[0];
      v345[0] = 0;
      v122 = v349[0];
      v349[0] = v121;
      if (!v122)
        goto LABEL_53;
      v123 = *(_DWORD *)v122 - 2;
      if (*(_DWORD *)v122 != 2)
        goto LABEL_199;
      WTF::StringImpl::~StringImpl(v122, v120, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      v122 = v345[0];
      v345[0] = 0;
      if (!v122)
        goto LABEL_53;
LABEL_218:
      v123 = *(_DWORD *)v122 - 2;
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::~StringImpl(v122, v133, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        goto LABEL_53;
      }
LABEL_199:
      *(_DWORD *)v122 = v123;
      goto LABEL_53;
    }
    v79 = !v18;
    if ((_DWORD)a4 != 45)
      v79 = 1;
    if ((v79 & 1) != 0)
    {
      v80 = 0;
    }
    else
    {
      v352 = (unsigned __int16 *)(v15 + 2);
      v80 = 1;
    }
    v81 = (unsigned __int16 *)&v15[2 * v80];
    if (v81 < (unsigned __int16 *)v19)
    {
      v82 = *v81;
      if (v82 == 48)
      {
        v85 = v80 + 1;
        goto LABEL_107;
      }
      if ((v82 - 49) <= 8)
      {
        v83 = v80 + 1;
        v84 = 2 * v80 + 2;
        do
        {
          v85 = v83;
          if (&v15[v84] >= (char *)v19)
            break;
          ++v83;
          v84 += 2;
        }
        while (*(unsigned __int16 *)&v15[2 * v85] - 48 < 0xA);
LABEL_107:
        v86 = (unsigned __int16 *)&v15[2 * v85];
        v352 = v86;
        if (v86 < (unsigned __int16 *)v19)
        {
          v87 = *v86;
          if (v87 != 101 && v87 != 69)
          {
            if (v87 == 46)
            {
              v260 = v86 + 1;
              v352 = v260;
              if (v260 >= (unsigned __int16 *)v19 || *v260 - 48 > 9)
              {
                v250 = WTF::fastCompactMalloc((WTF *)0x20);
                v251 = (WTF::StringImpl *)v250;
                v20.n128_u64[0] = 0x2200000002;
                v252 = "Invalid digits after decimal point";
                goto LABEL_379;
              }
              v261 = (unint64_t)&v15[2 * v85 + 4];
              do
              {
                v86 = (unsigned __int16 *)v261;
                if (v261 >= (unint64_t)v19)
                  break;
                v261 += 2;
              }
              while (*v86 - 48 < 0xA);
              v352 = v86;
            }
            else if (v85 <= 9)
            {
              LOBYTE(v349[1]) = 6;
              if ((_DWORD)a4 == 45)
              {
                if (v85 < 2)
                  goto LABEL_457;
                v15 += 2;
              }
              v88 = 0;
              do
              {
                v89 = *(unsigned __int16 *)v15;
                v15 += 2;
                v88 = v89 + 10 * v88 - 48;
              }
              while (v15 < (char *)v86);
              if ((_DWORD)a4 != 45)
                goto LABEL_116;
              if (v88)
              {
                v88 = -v88;
LABEL_116:
                v20.n128_f64[0] = (double)v88;
LABEL_117:
                v350 = v20.n128_u64[0];
                goto LABEL_53;
              }
LABEL_457:
              v350 = 0x8000000000000000;
              goto LABEL_53;
            }
          }
        }
        if (v86 >= (unsigned __int16 *)v19 || (*v86 | 0x20) != 0x65)
        {
LABEL_429:
          LOBYTE(v349[1]) = 6;
          v345[0] = 0;
          if ((char *)v86 - v15 <= -2)
            goto LABEL_602;
          v20.n128_f64[0] = WTF::parseDouble((unsigned __int16 *)v15, ((char *)v86 - v15) >> 1, v345);
          goto LABEL_117;
        }
        v262 = v86 + 1;
        v352 = v86 + 1;
        if (v86 + 1 < (unsigned __int16 *)v19)
        {
          v263 = *v262;
          if (v263 == 45 || v263 == 43)
          {
            v262 = v86 + 2;
            v352 = v86 + 2;
          }
        }
        if (v262 < (unsigned __int16 *)v19 && *v262 - 48 <= 9)
        {
          v264 = v262 + 1;
          do
          {
            v86 = v264;
            if (v264 >= (unsigned __int16 *)v19)
              break;
            ++v264;
          }
          while (*v86 - 48 < 0xA);
          v352 = v86;
          goto LABEL_429;
        }
        v250 = WTF::fastCompactMalloc((WTF *)0x20);
        v251 = (WTF::StringImpl *)v250;
        v20.n128_u64[0] = 0x5D00000002;
        v252 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_379:
        *(_QWORD *)v250 = v20.n128_u64[0];
        *(_QWORD *)(v250 + 8) = v252;
        *(_DWORD *)(v250 + 16) = 4;
        v122 = v349[0];
        v349[0] = v251;
        if (!v122)
          goto LABEL_53;
        goto LABEL_218;
      }
    }
    v250 = WTF::fastCompactMalloc((WTF *)0x20);
    v251 = (WTF::StringImpl *)v250;
    v20.n128_u64[0] = 0xE00000002;
    v252 = "Invalid number";
    goto LABEL_379;
  }
  if (v22 != 4)
  {
LABEL_52:
    LOBYTE(v349[1]) = v22;
    v352 = (unsigned __int16 *)(v15 + 2);
    goto LABEL_53;
  }
  if ((_DWORD)a4 == 39)
  {
    v250 = WTF::fastCompactMalloc((WTF *)0x20);
    v251 = (WTF::StringImpl *)v250;
    v20.n128_u64[0] = 0x2900000002;
    v252 = "Single quotes (') are not allowed in JSON";
    goto LABEL_379;
  }
  a3 = (JSC::CallFrame *)(v15 + 2);
  v352 = (unsigned __int16 *)(v15 + 2);
  v23 = v19 - (JSC::CallFrame *)(v15 + 2);
  if (v23 < -2 || v19 == (JSC::CallFrame *)v15)
    goto LABEL_602;
  v24 = (int16x8_t *)&v15[(v23 & 0xFFFFFFFFFFFFFFFELL) + 2];
  if ((unint64_t)v23 <= 0xE)
  {
    if (v19 != a3)
    {
      v265 = 2 * (v23 >> 1);
      v266 = (int16x8_t *)(v15 + 2);
      while (1)
      {
        v267 = v266->u16[0];
        if (v267 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v267])
          break;
        v266 = (int16x8_t *)((char *)v266 + 2);
        v265 -= 2;
        if (!v265)
          goto LABEL_69;
      }
      v24 = v266;
    }
    goto LABEL_69;
  }
  v25 = v15 + 2;
  if (v23 < 15)
  {
LABEL_31:
    if (v25 >= (char *)v24)
      goto LABEL_69;
    v32 = (unsigned __int16 *)&v24[-1];
    v33 = v24[-1];
    v34.i64[0] = 0x22002200220022;
    v34.i64[1] = 0x22002200220022;
    v35 = (int8x16_t)vceqq_s16(v33, v34);
    v36.i64[0] = 0x5C005C005C005CLL;
    v36.i64[1] = 0x5C005C005C005CLL;
    v37.i64[0] = 0x20002000200020;
    v37.i64[1] = 0x20002000200020;
    v20 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v33, v36), (int8x16_t)vcgtq_u16(v37, (uint16x8_t)v33)), v35);
    v35.i16[0] = vmaxvq_u16((uint16x8_t)v20);
    if (!v35.i32[0])
      goto LABEL_69;
  }
  else
  {
    v26 = v15 + 16;
    v27.i64[0] = 0x22002200220022;
    v27.i64[1] = 0x22002200220022;
    v28.i64[0] = 0x5C005C005C005CLL;
    v28.i64[1] = 0x5C005C005C005CLL;
    v29.i64[0] = 0x20002000200020;
    v29.i64[1] = 0x20002000200020;
    while (1)
    {
      v30 = *(int16x8_t *)(v26 - 14);
      v31 = (int8x16_t)vceqq_s16(v30, v27);
      v20 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v30, v28), (int8x16_t)vcgtq_u16(v29, (uint16x8_t)v30)), v31);
      v31.i16[0] = vmaxvq_u16((uint16x8_t)v20);
      if (v31.i32[0])
        break;
      v26 += 16;
      if (v26 >= (char *)v24)
      {
        v25 = v26 - 14;
        goto LABEL_31;
      }
    }
    v32 = (unsigned __int16 *)(v26 - 14);
  }
  v20 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v20);
  v20.n128_u16[0] = vminvq_u16((uint16x8_t)v20);
  v24 = (int16x8_t *)&v32[v20.n128_u8[0]];
LABEL_69:
  v352 = (unsigned __int16 *)v24;
  if (v24 < (int16x8_t *)v19 && v24->u16[0] == (_DWORD)a4)
  {
    BYTE1(v349[1]) &= ~1u;
    v350 = (unint64_t)(v15 + 2);
    v352 = &v24->u16[1];
    HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (((_DWORD)v24 - (_DWORD)a3) >> 1);
    v72 = 4;
LABEL_72:
    LOBYTE(v349[1]) = v72;
    goto LABEL_53;
  }
  JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v349, (uint64_t)&v349[1], (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_53:
  v55 = *(unint64_t **)(v347 + 56);
  if (v358)
  {
    v15 = (char *)JSC::LiteralParser<char16_t>::parse(&v347, (uint64_t)v55, 3uLL, a4, a5, a6, a7, a8);
    if (LOBYTE(v349[1]) != 17)
      goto LABEL_55;
    v146 = v352;
    if ((unint64_t)v352 >= v353)
    {
      v148 = 0;
    }
    else
    {
      do
      {
        v147 = *v146 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v146] == 19;
        v148 = !v147;
        if (!v147)
          break;
        v352 = ++v146;
      }
      while ((unint64_t)v146 < v353);
    }
    if (v146 == (unsigned __int16 *)v353)
    {
      v226 = 14;
      goto LABEL_310;
    }
    LOBYTE(v349[1]) = 18;
    v58 = *v146;
    if (v58 > 0xFF)
      goto LABEL_481;
    v149 = JSC::tokenTypesOfLatin1Characters[v58];
    if (v149 <= 4)
    {
      if (v149 == 4)
      {
        if ((_DWORD)v58 != 39)
        {
          v57 = (size_t)(v146 + 1);
          v352 = v146 + 1;
          if (!v351)
          {
            v150 = v353 - v57;
            if ((uint64_t)(v353 - v57) > -2)
            {
              v151 = (int16x8_t *)((char *)v146 + (v150 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v150 <= 0xE)
              {
                if (v353 != v57)
                {
                  v342 = 2 * (v150 >> 1);
                  v343 = (int16x8_t *)v57;
                  while (1)
                  {
                    v344 = v343->u16[0];
                    if (v344 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v344])
                      break;
                    v343 = (int16x8_t *)((char *)v343 + 2);
                    v342 -= 2;
                    if (!v342)
                      goto LABEL_306;
                  }
                  v151 = v343;
                }
                goto LABEL_306;
              }
              v152 = v146 + 1;
              if (v150 < 15)
              {
LABEL_250:
                if (v152 >= (unsigned __int16 *)v151)
                  goto LABEL_306;
                v160 = (unsigned __int16 *)&v151[-1];
                v161 = v151[-1];
                v162.i64[0] = 0x22002200220022;
                v162.i64[1] = 0x22002200220022;
                v163 = (int8x16_t)vceqq_s16(v161, v162);
                v164.i64[0] = 0x5C005C005C005CLL;
                v164.i64[1] = 0x5C005C005C005CLL;
                v165.i64[0] = 0x20002000200020;
                v165.i64[1] = 0x20002000200020;
                v159 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v161, v164), (int8x16_t)vcgtq_u16(v165, (uint16x8_t)v161)), v163);
                v163.i16[0] = vmaxvq_u16((uint16x8_t)v159);
                if (!v163.i32[0])
                  goto LABEL_306;
              }
              else
              {
                v153 = v146 + 8;
                v154.i64[0] = 0x22002200220022;
                v154.i64[1] = 0x22002200220022;
                v155.i64[0] = 0x5C005C005C005CLL;
                v155.i64[1] = 0x5C005C005C005CLL;
                v156.i64[0] = 0x20002000200020;
                v156.i64[1] = 0x20002000200020;
                while (1)
                {
                  v157 = *(int16x8_t *)(v153 - 7);
                  v158 = (int8x16_t)vceqq_s16(v157, v154);
                  v159 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v157, v155), (int8x16_t)vcgtq_u16(v156, (uint16x8_t)v157)), v158);
                  v158.i16[0] = vmaxvq_u16((uint16x8_t)v159);
                  if (v158.i32[0])
                    break;
                  v153 += 8;
                  if (v153 >= (unsigned __int16 *)v151)
                  {
                    v152 = v153 - 7;
                    goto LABEL_250;
                  }
                }
                v160 = v153 - 7;
              }
              v151 = (int16x8_t *)&v160[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v159))];
LABEL_306:
              v352 = (unsigned __int16 *)v151;
LABEL_307:
              if ((unint64_t)v151 >= v353 || v151->u16[0] != (_DWORD)v58)
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v349, (uint64_t)&v349[1], v57, v58, v59, v60, v61, v62);
                goto LABEL_55;
              }
              BYTE1(v349[1]) &= ~1u;
              v350 = v57;
              v352 = &v151->u16[1];
              HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (((_DWORD)v151 - v57) >> 1);
              v226 = 4;
              goto LABEL_310;
            }
            goto LABEL_602;
          }
LABEL_571:
          v151 = (int16x8_t *)v57;
          if (v57 < v353)
          {
            while (1)
            {
              v336 = v151->u16[0];
              if (v336 < 0x20)
              {
                if (v336 != 9)
                  goto LABEL_307;
              }
              else if (v336 == (_DWORD)v58 || v336 > 0xFF || v336 == 92)
              {
                goto LABEL_307;
              }
              v151 = (int16x8_t *)((char *)v151 + 2);
              v352 = (unsigned __int16 *)v151;
              if ((unint64_t)v151 >= v353)
                goto LABEL_307;
            }
          }
          goto LABEL_307;
        }
        if (v351)
        {
          v57 = (size_t)(v146 + 1);
          v352 = v146 + 1;
          goto LABEL_571;
        }
        v323 = WTF::fastCompactMalloc((WTF *)0x20);
        v324 = (WTF::StringImpl *)v323;
        v325 = 0x2900000002;
        v326 = "Single quotes (') are not allowed in JSON";
LABEL_530:
        *(_QWORD *)v323 = v325;
        *(_QWORD *)(v323 + 8) = v326;
        *(_DWORD *)(v323 + 16) = 4;
        v273 = v349[0];
        v349[0] = v324;
        if (!v273)
          goto LABEL_55;
        goto LABEL_491;
      }
LABEL_294:
      LOBYTE(v349[1]) = v149;
      v352 = v146 + 1;
      goto LABEL_55;
    }
    if (v149 != 5)
    {
      if (v149 != 6)
      {
        if (v149 - 18 >= 2)
          goto LABEL_294;
LABEL_481:
        WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v146, 1uLL, 39, v345);
        v272 = v345[0];
        v345[0] = 0;
        v273 = v349[0];
        v349[0] = v272;
        if (!v273)
          goto LABEL_55;
        v274 = *(_DWORD *)v273 - 2;
        if (*(_DWORD *)v273 != 2)
        {
LABEL_483:
          *(_DWORD *)v273 = v274;
          goto LABEL_55;
        }
        WTF::StringImpl::~StringImpl(v273, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
        v273 = v345[0];
        v345[0] = 0;
        if (!v273)
          goto LABEL_55;
LABEL_491:
        v274 = *(_DWORD *)v273 - 2;
        if (*(_DWORD *)v273 == 2)
        {
          WTF::StringImpl::~StringImpl(v273, v56, v57, v58, v59, v60, v61, v62);
          WTF::fastFree(v286, v287, v288, v289, v290, v291, v292, v293);
          goto LABEL_55;
        }
        goto LABEL_483;
      }
      v237 = v148 ^ 1;
      if ((_DWORD)v58 != 45)
        v237 = 1;
      if ((v237 & 1) != 0)
      {
        v238 = 0;
      }
      else
      {
        v352 = v146 + 1;
        v238 = 1;
      }
      v239 = &v146[v238];
      if ((unint64_t)v239 < v353)
      {
        v240 = *v239;
        if (v240 == 48)
        {
          v243 = v238 + 1;
LABEL_345:
          v244 = &v146[v243];
          v352 = v244;
          if ((unint64_t)v244 < v353)
          {
            v245 = *v244;
            if (v245 != 101 && v245 != 69)
            {
              if (v245 == 46)
              {
                v337 = v244 + 1;
                v352 = v337;
                if ((unint64_t)v337 >= v353 || *v337 - 48 > 9)
                {
                  v323 = WTF::fastCompactMalloc((WTF *)0x20);
                  v324 = (WTF::StringImpl *)v323;
                  v325 = 0x2200000002;
                  v326 = "Invalid digits after decimal point";
                  goto LABEL_530;
                }
                v338 = (unint64_t)&v146[v243 + 2];
                do
                {
                  v244 = (unsigned __int16 *)v338;
                  if (v338 >= v353)
                    break;
                  v338 += 2;
                }
                while (*v244 - 48 < 0xA);
                v352 = v244;
              }
              else if (v243 <= 9)
              {
                LOBYTE(v349[1]) = 6;
                if ((_DWORD)v58 == 45)
                {
                  if (v243 < 2)
                    goto LABEL_617;
                  ++v146;
                }
                v246 = 0;
                do
                {
                  v247 = *v146++;
                  v246 = v247 + 10 * v246 - 48;
                }
                while (v146 < v244);
                if ((_DWORD)v58 != 45)
                  goto LABEL_354;
                if (v246)
                {
                  v246 = -v246;
LABEL_354:
                  v248 = (double)v246;
LABEL_355:
                  v350 = *(_QWORD *)&v248;
                  goto LABEL_55;
                }
LABEL_617:
                v350 = 0x8000000000000000;
                goto LABEL_55;
              }
            }
          }
          if ((unint64_t)v244 < v353 && (*v244 | 0x20) == 0x65)
          {
            v339 = v244 + 1;
            v352 = v244 + 1;
            if ((unint64_t)(v244 + 1) < v353)
            {
              v340 = *v339;
              if (v340 == 45 || v340 == 43)
              {
                v339 = v244 + 2;
                v352 = v244 + 2;
              }
            }
            if ((unint64_t)v339 >= v353 || *v339 - 48 > 9)
              goto LABEL_603;
            v341 = v339 + 1;
            do
            {
              v244 = v341;
              if ((unint64_t)v341 >= v353)
                break;
              ++v341;
            }
            while (*v244 - 48 < 0xA);
            v352 = v244;
          }
          LOBYTE(v349[1]) = 6;
          v345[0] = 0;
          if ((char *)v244 - (char *)v146 > -2)
          {
            v248 = WTF::parseDouble(v146, v244 - v146, v345);
            goto LABEL_355;
          }
LABEL_602:
          __break(1u);
LABEL_603:
          v323 = WTF::fastCompactMalloc((WTF *)0x20);
          v324 = (WTF::StringImpl *)v323;
          v325 = 0x5D00000002;
          v326 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
          goto LABEL_530;
        }
        if ((v240 - 49) <= 8)
        {
          v241 = v238 + 1;
          v242 = 2 * v238 + 2;
          do
          {
            v243 = v241;
            if ((unint64_t)v146 + v242 >= v353)
              break;
            ++v241;
            v242 += 2;
          }
          while (v146[v243] - 48 < 0xA);
          goto LABEL_345;
        }
      }
      v323 = WTF::fastCompactMalloc((WTF *)0x20);
      v324 = (WTF::StringImpl *)v323;
      v325 = 0xE00000002;
      v326 = "Invalid number";
      goto LABEL_530;
    }
    if ((_DWORD)v58 == 102)
    {
      if ((uint64_t)(v353 - (_QWORD)v146) >= 9 && *(_DWORD *)(v146 + 1) == 7077985 && *(_DWORD *)(v146 + 3) == 6619251)
      {
        v352 = v146 + 5;
        v226 = 12;
LABEL_310:
        LOBYTE(v349[1]) = v226;
        goto LABEL_55;
      }
    }
    else if ((_DWORD)v58 == 116)
    {
      if ((uint64_t)(v353 - (_QWORD)v146) >= 7 && *(_DWORD *)(v146 + 1) == 7667826 && v146[3] == 101)
      {
        v352 = v146 + 4;
        v226 = 11;
        goto LABEL_310;
      }
    }
    else if ((_DWORD)v58 == 110
           && (uint64_t)(v353 - (_QWORD)v146) >= 7
           && *(_DWORD *)(v146 + 1) == 7078005
           && v146[3] == 108)
    {
      v352 = v146 + 4;
      v226 = 13;
      goto LABEL_310;
    }
    v350 = (unint64_t)v146;
    LODWORD(v327) = (_DWORD)v146;
    if ((unint64_t)v146 < v353)
    {
      v327 = v146;
      do
      {
        v328 = *v327;
        v330 = (v328 | 0x20u) - 97 >= 0x1A && (v328 - 48) >= 0xA && (v328 - 8204) >= 2;
        if (v330 && v328 != 95 && v328 != 36)
          break;
        v352 = ++v327;
      }
      while ((unint64_t)v327 < v353);
    }
    HIDWORD(v349[1]) = HIDWORD(v349[1]) & 0x80000000 | (((_DWORD)v327 - (_DWORD)v146) >> 1);
    v226 = 5;
    goto LABEL_310;
  }
  v15 = (char *)JSC::LiteralParser<char16_t>::parseRecursivelyEntry((uint64_t)&v347, v55, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_55:
  if (LOBYTE(v349[1]) != 14 || !v15)
  {
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v56, v57, v58, v59, v60, v61, v62))
    {
      v15 = 0;
      goto LABEL_257;
    }
    JSC::LiteralParser<unsigned char>::getErrorMessage((uint64_t)&v347, v56, v57, v58, v59, v60, v61, v62, (int **)v345);
    v167 = JSC::createSyntaxError(this, v345, v166);
    v15 = (char *)JSC::VM::throwException(v11, this, v167, v168, v169, v170, v171, v172);
    v173 = v345[0];
    v345[0] = 0;
    if (!v173)
    {
LABEL_257:
      JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v347, v56, v57, v58, v59, v60, v61, v62);
      return v15;
    }
    if (*(_DWORD *)v173 != 2)
    {
      *(_DWORD *)v173 -= 2;
      goto LABEL_257;
    }
LABEL_302:
    WTF::StringImpl::~StringImpl(v173, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    goto LABEL_257;
  }
LABEL_57:
  JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v347, v56, v57, v58, v59, v60, v61, v62);
  if ((unint64_t)(*((int *)a2 + 8) - 1) >= 2)
  {
    v174 = *((_QWORD *)a2 + 7);
    JSC::getCallData(v174, (uint64_t)v345);
    if (LOBYTE(v345[0]))
    {
      *(_OWORD *)v349 = *(_OWORD *)v345;
      v350 = v346;
      v347 = (uint64_t)this;
      v348 = v174;
      return (char *)JSC::Walker::walk(&v347, (WTF::AtomStringImpl *)v15, v175, v176, v177, v178, v179, v180, *(int8x16_t *)v345);
    }
  }
  return v15;
}

uint64_t JSC::jsonProtoFuncStringify(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  JSC::stringify((uint64_t)&v28, (uint64_t)this);
  if (!v28)
    return 10;
  v17 = JSC::jsString(*((_QWORD *)this + 7), (JSC::VM *)&v28, v4, v5, v6, v7, v8, v9);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v17;
}

void JSC::FastStringifier<unsigned char>::append(uint64_t a1, unint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  double v11;
  int v12;
  int **v13;
  int *v14;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  JSC::VM *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _WORD *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unsigned __int16 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned __int16 v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  char v91;
  char v92;
  char v93;
  JSC::VM *v94;
  int **v95;
  unsigned int v96;
  uint64_t v97;
  int8x16_t *v98;
  uint64_t v99;
  int8x16_t *v100;
  unint64_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t *v105;
  uint8x16_t v106;
  unsigned __int8 *v107;
  int8x16_t v108;
  BOOL v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint8x16_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  _QWORD v119[2];

  if (a2 == 6)
  {
    v89 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - v89 <= 4)
    {
      if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 5u))
        goto LABEL_122;
      v89 = *(_DWORD *)(a1 + 16);
    }
    *(_BYTE *)(a1 + 27 + v89) = 102;
    *(_BYTE *)(a1 + 27 + v89 + 1) = 97;
    *(_BYTE *)(a1 + 27 + v89 + 2) = 108;
    *(_BYTE *)(a1 + 27 + v89 + 3) = 115;
    *(_BYTE *)(a1 + 27 + v89 + 4) = 101;
    v84 = v89 + 5;
    goto LABEL_135;
  }
  v10 = a2;
  if (a2 == 7)
  {
    v90 = 116;
    v91 = 114;
    v92 = 117;
    v93 = 101;
LABEL_148:
    JSC::FastStringifier<unsigned char>::append(a1, v90, v91, v92, v93);
    return;
  }
  if (a2 == 2)
  {
LABEL_153:
    v90 = 110;
    v91 = 117;
    v92 = 108;
    v93 = 108;
    goto LABEL_148;
  }
  if (a2 >= 0xFFFE000000000000)
  {
    v69 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - v69 <= 0xA)
    {
      if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 0xBu))
        goto LABEL_122;
      v69 = *(_DWORD *)(a1 + 16);
    }
    v70 = a1 + v69;
    v71 = (_BYTE *)(v70 + 27);
    v72 = v70 + 38;
    if ((v10 & 0x80000000) != 0)
    {
      *v71 = 45;
      v73 = (_WORD *)(v70 + 28);
      LODWORD(v10) = -(int)v10;
    }
    else
    {
      v73 = (_WORD *)(v70 + 27);
    }
    if (v72 - (uint64_t)v73 > 9
      || (v74 = (1233 * (32 - __clz(v10 | 1))) >> 12,
          v72 - (uint64_t)v73 >= (((__PAIR64__(v74, v10) - std::__itoa::__pow10_32[v74]) >> 32) + 1)))
    {
      if (v10 >= 0xF4240)
      {
        if (v10 >= 0x5F5E100)
        {
          v80 = v10 / 0x5F5E100;
          if (v10 > 0x3B9AC9FF)
          {
            *v73 = std::__itoa::__digits_base_10[v80];
            v73[1] = std::__itoa::__digits_base_10[v10 % 0x5F5E100 / 0xF4240];
            v73[2] = std::__itoa::__digits_base_10[v10 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
            v88 = v10 % 0x5F5E100 % 0xF4240 % 0x2710;
            v73[3] = std::__itoa::__digits_base_10[(unsigned __int16)v88 / 0x64u];
            v73[4] = std::__itoa::__digits_base_10[(unsigned __int16)v88 % 0x64u];
            v75 = 10;
          }
          else
          {
            *(_BYTE *)v73 = v80 + 48;
            *(_WORD *)((char *)v73 + 1) = std::__itoa::__digits_base_10[v10 % 0x5F5E100 / 0xF4240];
            *(_WORD *)((char *)v73 + 3) = std::__itoa::__digits_base_10[v10 % 0x5F5E100 % 0xF4240
                                                                      / 0x2710uLL];
            v81 = v10 % 0x5F5E100 % 0xF4240 % 0x2710;
            *(_WORD *)((char *)v73 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v81 / 0x64u];
            *(_WORD *)((char *)v73 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v81 % 0x64u];
            v75 = 9;
          }
        }
        else
        {
          v76 = v10 / 0xF4240;
          if (v10 > 0x98967F)
          {
            *v73 = std::__itoa::__digits_base_10[v76];
            v73[1] = std::__itoa::__digits_base_10[v10 % 0xF4240 / 0x2710uLL];
            v86 = v10 % 0xF4240 % 0x2710;
            v73[2] = std::__itoa::__digits_base_10[(unsigned __int16)v86 / 0x64u];
            v73[3] = std::__itoa::__digits_base_10[(unsigned __int16)v86 % 0x64u];
            v75 = 8;
          }
          else
          {
            *(_BYTE *)v73 = v76 + 48;
            v77 = (429497 * (unint64_t)(v10 % 0xF4240)) >> 32;
            *(_WORD *)((char *)v73 + 1) = std::__itoa::__digits_base_10[v77];
            v78 = v10 % 0xF4240 - 10000 * v77;
            *(_WORD *)((char *)v73 + 3) = std::__itoa::__digits_base_10[v78 / 0x64u];
            *(_WORD *)((char *)v73 + 5) = std::__itoa::__digits_base_10[v78 % 0x64u];
            v75 = 7;
          }
        }
      }
      else if (v10 >> 4 > 0x270)
      {
        v79 = v10 / 0x2710;
        if (v10 >> 5 > 0xC34)
        {
          *v73 = std::__itoa::__digits_base_10[v79];
          v87 = v10 % 0x2710;
          v73[1] = std::__itoa::__digits_base_10[v87 / 0x64u];
          v73[2] = std::__itoa::__digits_base_10[v87 % 0x64u];
          v75 = 6;
        }
        else
        {
          *(_BYTE *)v73 = v79 + 48;
          *(_WORD *)((char *)v73 + 1) = std::__itoa::__digits_base_10[(5243 * (v10 % 0x2710)) >> 19];
          *(_WORD *)((char *)v73 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(v10 % 0x2710
                                                                                       - 100
                                                                                       * ((unsigned __int16)((5243 * (v10 % 0x2710)) >> 16) >> 3))];
          v75 = 5;
        }
      }
      else if (v10 > 0x63)
      {
        v85 = (unsigned __int16)v10 / 0x64u;
        if (v10 > 0x3E7)
        {
          *v73 = std::__itoa::__digits_base_10[v85];
          v73[1] = std::__itoa::__digits_base_10[(unsigned __int16)v10 % 0x64u];
          v75 = 4;
        }
        else
        {
          *(_BYTE *)v73 = v85 + 48;
          *(_WORD *)((char *)v73 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)v10 % 0x64u];
          v75 = 3;
        }
      }
      else if (v10 > 9)
      {
        *v73 = std::__itoa::__digits_base_10[v10];
        v75 = 2;
      }
      else
      {
        *(_BYTE *)v73 = v10 + 48;
        v75 = 1;
      }
      LODWORD(v72) = (_DWORD)v73 + v75;
      v69 = *(_DWORD *)(a1 + 16);
    }
    v84 = v69 + v72 - (_DWORD)v71;
    goto LABEL_135;
  }
  *(_QWORD *)&v11 = a2 - 0x2000000000000;
  if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v82 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20) - v82 <= 0x7B)
      {
        if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 0x7Cu))
          goto LABEL_122;
        v82 = *(_DWORD *)(a1 + 16);
      }
      v115 = a1 + v82 + 27;
      LODWORD(v116) = 124;
      LODWORD(v117) = 0;
      WTF::double_conversion::DoubleToStringConverter::ToShortestIeeeNumber((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, (uint64_t)&v115, 0, v11);
      v83 = v117;
      *(_DWORD *)(a1 + 16) += v117;
      if ((v83 & 0x80000000) == 0)
        *(_BYTE *)(v115 + v83) = 0;
      return;
    }
    goto LABEL_153;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_122;
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 == 2)
  {
    v13 = (int **)(a2 + 8);
    v14 = *(int **)(a2 + 8);
    if ((v14 & 1) != 0)
    {
      v13 = JSC::JSRopeString::resolveRope(a2, 0, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
      v14 = *v13;
    }
    if (!v14)
      goto LABEL_140;
    if ((v14[4] & 4) == 0)
      goto LABEL_139;
    v15 = v14[1];
    v16 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - v16 < v15 + 2)
    {
      v95 = v13;
      if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, v15 + 2))
        goto LABEL_140;
      v16 = *(_DWORD *)(a1 + 16);
      v13 = v95;
    }
    *(_BYTE *)(a1 + v16 + 27) = 34;
    v17 = *v13;
    if (*v13)
    {
      v97 = a1 + v16;
      v98 = (int8x16_t *)*((_QWORD *)v17 + 1);
      v99 = v17[1];
      v100 = (int8x16_t *)(v97 + 28);
      if (v99 < 0x10)
      {
        if ((_DWORD)v99)
        {
          do
          {
            v114 = v98->u8[0];
            if (WTF::escapedFormsForJSON[v114])
              goto LABEL_140;
            v100->i8[0] = v114;
            v100 = (int8x16_t *)((char *)v100 + 1);
            v98 = (int8x16_t *)((char *)v98 + 1);
          }
          while (--v99);
        }
      }
      else
      {
        v101 = (unint64_t)v98->u64 + v99;
        v102 = 0uLL;
        v103.i64[0] = 0x2222222222222222;
        v103.i64[1] = 0x2222222222222222;
        v104.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
        v104.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
        v105 = v100;
        v106.i64[0] = 0x2020202020202020;
        v106.i64[1] = 0x2020202020202020;
        do
        {
          v107 = (unsigned __int8 *)&v98[1];
          v108 = *v98;
          *v105++ = *v98;
          v102 = vorrq_s8(vorrq_s8(v102, vceqq_s8(v108, v103)), vorrq_s8(vceqq_s8(v108, v104), (int8x16_t)vcgtq_u8(v106, (uint8x16_t)v108)));
          v109 = (unint64_t)&v98[1].u64[1] + 7 >= v101;
          ++v98;
        }
        while (!v109);
        if ((unint64_t)v107 < v101)
        {
          v110 = *(int8x16_t *)(v101 - 16);
          *(int8x16_t *)((char *)&v100[-1] + v99) = v110;
          v111.i64[0] = 0x2222222222222222;
          v111.i64[1] = 0x2222222222222222;
          v112.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
          v112.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
          v113.i64[0] = 0x2020202020202020;
          v113.i64[1] = 0x2020202020202020;
          v102 = vorrq_s8(v102, vorrq_s8(vorrq_s8(vceqq_s8(v110, v112), (int8x16_t)vcgtq_u8(v113, (uint8x16_t)v110)), vceqq_s8(v110, v111)));
        }
        v102.i8[0] = vmaxvq_u8((uint8x16_t)v102);
        if (v102.i32[0])
          goto LABEL_140;
      }
    }
    v18 = *(_DWORD *)(a1 + 16);
    *(_BYTE *)(a1 + (v15 + v18 + 1) + 27) = 34;
    v19 = v18 + v15 + 2;
LABEL_15:
    *(_DWORD *)(a1 + 16) = v19;
    return;
  }
  if (v12 == 36)
  {
    if (!*(_BYTE *)(a1 + 25))
    {
      if (JSC::FastStringifier<unsigned char>::mayHaveToJSON(a1, *(_DWORD **)(*(_QWORD *)a1 + 672), a3, a4, a5, a6, a7, a8))goto LABEL_122;
      *(_BYTE *)(a1 + 25) = 1;
    }
    v20 = (unsigned __int8 *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
    v21 = v20[8];
    if ((v21 & 0x10) != 0)
      v22 = ((v21 & 0xE) + 10) >> 1;
    else
      v22 = (v21 >> 1) & 7;
    v23 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v22 + 852);
    if (v23)
      v24 = 16 * (v23 & 0xFFFFFFFE);
    else
      v24 = 0;
    if ((unsigned __int8 *)v24 == v20)
    {
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v94 = *(JSC::VM **)(a1 + 8);
      v115 = a1;
      JSC::Structure::forEachProperty<JSC::FastStringifier<unsigned char>::append(JSC::JSValue)::{lambda(JSC::PropertyTableEntry const&)#1}>((JSC::Structure *)v20, v94, &v115, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 16);
      if (v25 > 0x2000)
        return;
    }
    if (*(_DWORD *)(a1 + 20) == v25)
    {
      if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 1u))
        goto LABEL_122;
      v25 = *(_DWORD *)(a1 + 16);
    }
    v26 = v25 + 1;
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(a1 + v25 + 27) = 91;
    v27 = *(_BYTE *)(v10 + 4);
    if ((v27 & 0xE) == 0 || (v28 = *(_QWORD **)(v10 + 8), v29 = *((unsigned int *)v28 - 2), !(_DWORD)v29))
    {
LABEL_46:
      if (*(_DWORD *)(a1 + 20) != v26)
      {
LABEL_47:
        *(_DWORD *)(a1 + 16) = v26 + 1;
        v35 = a1 + v26;
        v36 = 93;
LABEL_48:
        *(_BYTE *)(v35 + 27) = v36;
        return;
      }
      if (JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 1u))
      {
        v26 = *(_DWORD *)(a1 + 16);
        goto LABEL_47;
      }
      goto LABEL_122;
    }
    v30 = v27 & 0xF;
    if ((v30 - 8) >= 2)
    {
      switch(v27 & 0xF)
      {
        case 0:
        case 1:
          if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v10, 0))
            goto LABEL_122;
          v30 = *(_BYTE *)(v10 + 4) & 0xF;
          break;
        case 3:
          goto LABEL_122;
        case 4:
        case 5:
          goto LABEL_33;
        case 6:
        case 7:
          if (!*((_DWORD *)v28 - 1))
            goto LABEL_122;
          break;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (!*((_DWORD *)v28 - 1) || !v28[2])
            goto LABEL_122;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198A64304);
      }
LABEL_35:
      if ((v30 - 8) >= 2)
      {
        switch(v30)
        {
          case 0:
          case 1:
            JSC::JSObject::getIndexQuicklyForTypedArray(v10, 0, 0);
            break;
          case 4:
          case 5:
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 13:
            break;
          default:
LABEL_182:
            __break(0xC471u);
            JUMPOUT(0x198A642E4);
        }
      }
      JSC::FastStringifier<unsigned char>::append(a1);
      v26 = *(_DWORD *)(a1 + 16);
      if (v26 > 0x2000)
        return;
      if ((_DWORD)v29 != 1)
      {
        v31 = 0;
        v32 = 1;
        while (1)
        {
          if (*(_DWORD *)(a1 + 20) == v26)
          {
            if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 1u))
              goto LABEL_122;
            v26 = *(_DWORD *)(a1 + 16);
          }
          *(_DWORD *)(a1 + 16) = v26 + 1;
          *(_BYTE *)(a1 + v26 + 27) = 44;
          v33 = *(_QWORD *)(v10 + 8);
          v34 = *(_BYTE *)(v10 + 4) & 0xF;
          if ((v34 - 8) >= 2)
          {
            switch(*(_BYTE *)(v10 + 4) & 0xF)
            {
              case 0:
              case 1:
                if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v10, v32))
                  goto LABEL_122;
                v34 = *(_BYTE *)(v10 + 4) & 0xF;
                break;
              case 3:
                goto LABEL_122;
              case 4:
              case 5:
                goto LABEL_41;
              case 6:
              case 7:
                if (v32 < *(unsigned int *)(v33 - 4))
                  break;
                goto LABEL_122;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                if (v32 >= *(unsigned int *)(v33 - 4) || !*(_QWORD *)(v33 + v31 + 24))
                  goto LABEL_122;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198A64324);
            }
          }
          else
          {
LABEL_41:
            if (v32 >= *(unsigned int *)(v33 - 4) || !*(_QWORD *)(v33 + v31 + 8))
              goto LABEL_122;
          }
          if ((v34 - 8) >= 2)
          {
            switch(v34)
            {
              case 0:
              case 1:
                JSC::JSObject::getIndexQuicklyForTypedArray(v10, v32, 0);
                break;
              case 4:
              case 5:
              case 6:
              case 7:
              case 10:
              case 11:
              case 12:
              case 13:
                break;
              default:
                goto LABEL_182;
            }
          }
          JSC::FastStringifier<unsigned char>::append(a1);
          v26 = *(_DWORD *)(a1 + 16);
          if (v26 > 0x2000)
            return;
          ++v32;
          v31 += 8;
          if (v29 == v32)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
LABEL_33:
    if (*((_DWORD *)v28 - 1) && *v28)
      goto LABEL_35;
LABEL_122:
    v84 = 8193;
LABEL_135:
    *(_DWORD *)(a1 + 16) = v84;
    return;
  }
  if ((v12 - 23) >= 2)
    goto LABEL_122;
  if ((*(_BYTE *)(a2 + 6) & 4) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v115, a2);
    if ((_BYTE)v115)
      goto LABEL_122;
  }
  v37 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v38 = *(_DWORD **)(v37 + 0x30);
  if (!v38)
    goto LABEL_122;
  v39 = *(_DWORD **)(*(_QWORD *)a1 + 656);
  if (v38 != v39)
    goto LABEL_122;
  if (!*(_BYTE *)(a1 + 24))
  {
    if (JSC::FastStringifier<unsigned char>::mayHaveToJSON(a1, v39, a3, a4, a5, a6, a7, a8))
      goto LABEL_122;
    *(_BYTE *)(a1 + 24) = 1;
  }
  v40 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20) == v40)
  {
    if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 1u))
      goto LABEL_122;
    v40 = *(_DWORD *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 16) = v40 + 1;
  *(_BYTE *)(a1 + v40 + 27) = 123;
  if (*(_WORD *)(v37 + 12) & 6 | *(_BYTE *)(v37 + 10) & 8
    || (*(_DWORD *)(v37 + 16) & 0x20000008) != 0
    || (*(_DWORD *)(v37 + 16) & 3) == 2
    || (*(_BYTE *)(v37 + 8) & 0xE) != 0)
  {
    goto LABEL_122;
  }
  v41 = *(JSC::VM **)(a1 + 8);
  v115 = a1;
  v116 = v10;
  v117 = v37;
  v42 = *(_QWORD *)(v37 + 88);
  if (v42
    || (v67 = *(_QWORD *)(v37 + 64)) != 0
    && (*(_BYTE *)(v67 + 5) == 1 || *(_DWORD *)(v67 + 80) >= 2u)
    && (JSC::Structure::materializePropertyTable((JSC::Structure *)v37, v41, 1, a4, a5, a6, a7, a8), (v42 = v68) != 0))
  {
    v118 = &v115;
    v119[0] = v42;
    v119[1] = &v118;
    v43 = *(_QWORD *)(v42 + 16);
    v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
    if ((v43 & 1) != 0)
    {
      v45 = *(_DWORD *)(v42 + 28) + *(_DWORD *)(v42 + 24);
      if (v45)
      {
        v46 = (unint64_t *)(v44 + *(unsigned int *)(v42 + 8));
        v47 = &v46[v45];
        do
        {
          v48 = *v46;
          v49 = *v46 & 0xFFFFFFFFFFFFLL;
          if (v49 != 1)
          {
            if ((v48 & 0x4000000000000) != 0)
              goto LABEL_109;
            v50 = *v118;
            v51 = *(_DWORD *)((*v46 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v51 & 0x20) != 0 || (v51 & 4) == 0 || (v52 = v118[1], v118[2] != 16 * (*(_DWORD *)v52 & 0xFFFFFFFE)))
            {
LABEL_161:
              *(_DWORD *)(v50 + 16) = 8193;
              break;
            }
            v53 = HIBYTE(v48);
            v54 = (_QWORD *)(v48 >> 62 ? *(_QWORD *)(v52 + 8) + 8 * (63 - v53) - 8 : v52 + 8 * v53 + 16);
            if (*v54 == 10)
            {
LABEL_109:
              v65 = 1;
            }
            else
            {
              v55 = *(_DWORD *)(v50 + 16);
              v56 = *(unsigned __int8 *)(v50 + v55 - 1 + 27);
              v57 = *(unsigned int *)((*v46 & 0xFFFFFFFFFFFFLL) + 4);
              if (v56 == 123)
                v58 = 1;
              else
                v58 = 2;
              v59 = v57 + v58 + 2;
              if (*(_DWORD *)(v50 + 20) - v55 < v59)
              {
                if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(v50, v59))
                  goto LABEL_161;
                v55 = *(_DWORD *)(v50 + 16);
              }
              if (v56 != 123)
              {
                v66 = v50 + v55++;
                *(_DWORD *)(v50 + 16) = v55;
                *(_BYTE *)(v66 + 27) = 44;
              }
              *(_BYTE *)(v50 + v55 + 27) = 34;
              if ((_DWORD)v57)
              {
                v60 = *(unsigned __int8 **)(v49 + 8);
                v61 = *(unsigned int *)(v49 + 4);
                v62 = v55 + 1;
                v63 = v57;
                while (v61)
                {
                  v64 = *v60;
                  if (WTF::escapedFormsForJSON[v64])
                    goto LABEL_161;
                  *(_BYTE *)(v50 + v62++ + 27) = v64;
                  ++v60;
                  --v61;
                  if (!--v63)
                    goto LABEL_84;
                }
                __break(1u);
LABEL_139:
                *(_BYTE *)(a1 + 26) = *(_DWORD *)(a1 + 16) < *(_DWORD *)(a1 + 20) >> 1;
LABEL_140:
                v19 = 8193;
                goto LABEL_15;
              }
LABEL_84:
              *(_BYTE *)(v50 + 27 + v57 + v55 + 1) = 34;
              *(_BYTE *)(v50 + 27 + v57 + v55 + 2) = 58;
              *(_DWORD *)(v50 + 16) = v57 + v55 + 3;
              JSC::FastStringifier<unsigned char>::append(v50);
              v65 = *(_DWORD *)(v50 + 16) <= 0x2000u;
            }
            if (!v65)
              break;
          }
          ++v46;
        }
        while (v46 != v47);
      }
    }
    else
    {
      _ZZNK3JSC13PropertyTable15forEachPropertyIZNS_9Structure15forEachPropertyIZNS_15FastStringifierIhE6appendENS_7JSValueEEUlRKT_E_EEvRNS_2VMES9_EUlS9_E_EEvS9_ENKUlPS8_E_clIjEEDaSE_((uint64_t)v119, v44);
    }
  }
  v96 = *(_DWORD *)(a1 + 16);
  if (v96 <= 0x2000)
  {
    if (*(_DWORD *)(a1 + 20) == v96)
    {
      if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(a1, 1u))
        goto LABEL_122;
      v96 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v96 + 1;
    v35 = a1 + v96;
    v36 = 125;
    goto LABEL_48;
  }
}

uint64_t JSC::FastStringifier<unsigned char>::append(uint64_t result, char a2, char a3, char a4, char a5)
{
  unsigned int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = *(_DWORD *)(result + 16);
  if (*(_DWORD *)(result + 20) - v5 <= 3)
  {
    v10 = a2;
    v8 = a4;
    v9 = a3;
    v7 = a5;
    v11 = result;
    if (!JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(result, 4u))
    {
      v6 = 8193;
      result = v11;
      goto LABEL_3;
    }
    result = v11;
    v5 = *(_DWORD *)(v11 + 16);
    a5 = v7;
    a4 = v8;
    a3 = v9;
    a2 = v10;
  }
  *(_BYTE *)(result + 27 + v5) = a2;
  *(_BYTE *)(result + 27 + v5 + 1) = a3;
  *(_BYTE *)(result + 27 + v5 + 2) = a4;
  *(_BYTE *)(result + 27 + v5 + 3) = a5;
  v6 = v5 + 4;
LABEL_3:
  *(_DWORD *)(result + 16) = v6;
  return result;
}

uint64_t JSC::FastStringifier<unsigned char>::mayHaveToJSON(uint64_t a1, _DWORD *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::Structure *v20;
  JSC::VM *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[16];
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v10 = *(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x40);
  if (!v10 || *(_BYTE *)(v10 + 5) == 1 || (v11 = *(_QWORD *)(v10 + 64)) == 0 || (v12 = *(_QWORD *)(v11 + 112), v12 < 2))
  {
    if ((JSC::JSObject::noSideEffectMayHaveNonIndexProperty((uint64_t)a2, *(JSC::VM **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 41952) + 2488), a4, a5, a6, a7, a8) & 1) != 0)return 1;
    v27 = 0xFFFFFFFF00000000;
    LOBYTE(v31) = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30[0] = 0;
    v28 = a2;
    *(_QWORD *)((char *)v30 + 5) = 0;
    v20 = (JSC::Structure *)(16 * (*a2 & 0xFFFFFFFE));
    v22 = *(_QWORD **)a1;
    v21 = *(JSC::VM **)(a1 + 8);
    v23 = *((_QWORD *)v20 + 8);
    if (!v23 || *(_BYTE *)(v23 + 5) == 1)
    {
      JSC::Structure::allocateRareData(v20, v21, v14, v15, v16, v17, v18, v19);
      v23 = *((_QWORD *)v20 + 8);
    }
    v24 = *(_QWORD *)(v23 + 64);
    if (!v24 || *(_QWORD *)(v24 + 112) != 1)
    {
      JSC::StructureRareData::cacheSpecialPropertySlow(v23, v22, v21, (unint64_t)v20, 10, 4, (uint64_t)v26, v19);
      if (v32)
      {
        v25 = *(_DWORD *)(v31 + 4);
        if (!v25)
        {
          result = 57;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v31 + 4) = v25 - 1;
      }
    }
    return 0;
  }
  return v12 != 10;
}

void JSC::Structure::forEachProperty<JSC::FastStringifier<unsigned char>::append(JSC::JSValue)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::Structure *a1, JSC::VM *a2, uint64_t *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *((_QWORD *)a1 + 11);
  if (v10
    || (v21 = *((_QWORD *)a1 + 8)) != 0
    && (*(_BYTE *)(v21 + 5) == 1 || *(_DWORD *)(v21 + 80) >= 2u)
    && (JSC::Structure::materializePropertyTable(a1, a2, 1, a4, a5, a6, a7, a8), v10))
  {
    v11 = *(_QWORD *)(v10 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned int *)(v10 + 8);
    v14 = (*(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 24));
    if ((v11 & 1) != 0)
    {
      if (!(_DWORD)v14)
        return;
      v18 = (_QWORD *)(v12 + v13);
      v15 = *a3;
      v19 = 8 * v14;
      while (1)
      {
        v20 = *v18 & 0xFFFFFFFFFFFFLL;
        if (v20 != 1 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 41952) + 2488) == v20)
          break;
        ++v18;
        v19 -= 8;
        if (!v19)
          return;
      }
    }
    else
    {
      if (!(_DWORD)v14)
        return;
      v15 = *a3;
      v16 = 16 * v14;
      for (i = (_QWORD *)(v12 + 4 * v13);
            *i == 1 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 41952) + 2488) != *i;
            i += 2)
      {
        v16 -= 16;
        if (!v16)
          return;
      }
    }
    *(_DWORD *)(v15 + 16) = 8193;
  }
}

BOOL JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v4 = 0x2000 - *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
    v5 = WTF::Thread::initializeCurrentTLS(0);
  v6 = ((unint64_t)&v8 - *(_QWORD *)(v5 + 24) - 0x10000) / 0x180;
  if (v6 >= v4)
    LODWORD(v6) = v4;
  if (v6 >= a2)
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 16) + v6;
  return v6 >= a2;
}

uint64_t JSC::JSObject::noSideEffectMayHaveNonIndexProperty(uint64_t result, JSC::VM *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Structure *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  signed int v43;

  if (!result)
    return result;
  v10 = (unsigned int *)result;
  v11 = a3 >> 4;
  v12 = result;
  do
  {
    v13 = *(_DWORD *)v12 & 0xFFFFFFFE;
    v14 = (JSC::Structure *)(16 * v13);
    if ((*(_BYTE *)(v12 + 6) & 8) != 0
      && &JSC::ArrayPrototype::s_info != (char **)(16 * *(unsigned int *)(16 * v13 + 0x4C)))
    {
      return 1;
    }
    if ((_DWORD)v11 && (v11 & ~*(_DWORD *)(16 * v13 + 0x20)) == 0)
    {
      v15 = *(_QWORD *)(16 * v13 + 0x58);
      if (v15
        || (v27 = *(_QWORD *)(16 * v13 + 0x40)) != 0
        && (*(_BYTE *)(v27 + 5) == 1 || *(_DWORD *)(v27 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable(v14, a2, 1, a4, a5, a6, a7, a8), v15))
      {
        if (*(_DWORD *)(v15 + 24))
        {
          v16 = *(_QWORD *)(v15 + 16);
          v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(unsigned int *)(v15 + 8);
          v19 = *(_DWORD *)(a3 + 16);
          if ((v16 & 1) != 0)
          {
            if ((v19 & 0x20) != 0)
              v19 = *(_DWORD *)(a3 + 32);
            v20 = *(_DWORD *)(v15 + 12);
            v21 = (v19 >> 8) & *(_QWORD *)&v20;
            v22 = *(unsigned __int8 *)(v17 + v21);
            if (*(_BYTE *)(v17 + v21))
            {
              v23 = v17 + v18;
              v24 = 1;
              do
              {
                if (a3 == (*(_QWORD *)(v23 + 8 * (v22 - 1)) & 0xFFFFFFFFFFFFLL))
                  return 1;
                v21 = ((_DWORD)v21 + v24) & v20;
                v22 = *(unsigned __int8 *)(v17 + v21);
                ++v24;
              }
              while (*(_BYTE *)(v17 + v21));
            }
          }
          else
          {
            if ((v19 & 0x20) != 0)
              v19 = *(_DWORD *)(a3 + 32);
            v32 = *(_DWORD *)(v15 + 12);
            v29 = v32 & (v19 >> 8);
            v30 = *(_DWORD *)(v17 + 4 * v29);
            if (v30)
            {
              v33 = v17 + 4 * v18;
              v31 = 1;
              while (1)
              {
                v28 = (v30 - 1);
                if (*(_QWORD *)(v33 + 16 * v28) == a3)
                  break;
                v29 = (v29 + v31) & v32;
                v30 = *(_DWORD *)(v17 + 4 * v29);
                ++v31;
                if (!v30)
                  goto LABEL_15;
              }
              if (*(_DWORD *)(v33 + 16 * v28 + 8) != -1)
                return 1;
            }
          }
        }
      }
    }
LABEL_15:
    if ((*((_BYTE *)v10 + 6) & 0x20) == 0)
      goto LABEL_16;
    if ((*(_BYTE *)((16 * *v10) | 0x12) & 0x40) != 0)
      goto LABEL_16;
    if (!a3)
      goto LABEL_16;
    v34 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
    if (!(_DWORD)v34)
      goto LABEL_16;
    v35 = 16 * v34;
    do
    {
      v36 = *(_QWORD *)(v35 + 24);
      if (!v36)
        goto LABEL_51;
      v37 = *(_DWORD *)(a3 + 16);
      if ((v37 & 0x20) != 0)
        goto LABEL_51;
      v38 = *(_DWORD *)(v36 + 4) & (v37 >> 8);
      v39 = *(_QWORD *)(v36 + 32);
      v40 = *(unsigned __int16 *)(v39 + 4 * v38);
      if (v40 == 0xFFFF)
        goto LABEL_51;
      v43 = v38;
      while (1)
      {
        v41 = (unint64_t *)(*(_QWORD *)(v36 + 24) + 40 * (__int16)v40);
        v42 = v41[1];
        if (!v42)
          goto LABEL_57;
        if (WTF::equalInternal<unsigned char>(a3, *v41, v42 - 1))
          break;
        v39 = *(_QWORD *)(v36 + 32);
LABEL_57:
        v40 = *(__int16 *)(v39 + 4 * v43 + 2);
        if (v40 == -1)
          goto LABEL_51;
        v43 = *(__int16 *)(v39 + 4 * v43 + 2);
        LOWORD(v40) = *(_WORD *)(v39 + 4 * v40);
      }
      if (*(_QWORD *)(v36 + 24))
        return 1;
LABEL_51:
      v35 = *(_QWORD *)(v35 + 16);
    }
    while (v35);
LABEL_16:
    if ((*((_WORD *)v14 + 6) & 0x800) != 0)
      return 1;
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
    if (!v25)
      v25 = *(_QWORD *)(v12 + 16);
    if ((v25 & 0xFFFE000000000002) != 0)
      return 0;
    result = 0;
    if (v25)
      v26 = *(unsigned __int8 *)(v25 + 5) > 0x16u;
    else
      v26 = 0;
    v12 = v25;
  }
  while (v26);
  return result;
}

uint64_t _ZZNK3JSC13PropertyTable15forEachPropertyIZNS_9Structure15forEachPropertyIZNS_15FastStringifierIhE6appendENS_7JSValueEEUlRKT_E_EEvRNS_2VMES9_EUlS9_E_EEvS9_ENKUlPS8_E_clIjEEDaSE_(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD *)(*(_QWORD *)result + 28) + *(_DWORD *)(*(_QWORD *)result + 24);
  if (!v2)
    return result;
  v3 = result;
  v4 = (uint64_t *)(a2 + 4 * *(unsigned int *)(*(_QWORD *)result + 8));
  v5 = &v4[2 * v2];
  while (1)
  {
    v6 = *v4;
    if (*v4 != 1 && (*((_BYTE *)v4 + 12) & 4) == 0)
    {
      v7 = **(uint64_t ***)(v3 + 8);
      v8 = *v7;
      v9 = *(_DWORD *)(v6 + 16);
      if ((v9 & 0x20) != 0)
        goto LABEL_30;
      if ((v9 & 4) == 0)
        goto LABEL_30;
      v10 = v7[1];
      if (v7[2] != 16 * (*(_DWORD *)v10 & 0xFFFFFFFE))
        goto LABEL_30;
      v11 = *((_DWORD *)v4 + 2);
      if (v11 <= 63)
      {
        v12 = v10 + 16;
      }
      else
      {
        v12 = *(_QWORD *)(v10 + 8) - 8;
        v11 = 63 - v11;
      }
      if (*(_QWORD *)(v12 + 8 * v11) != 10)
        break;
    }
LABEL_25:
    v4 += 2;
    if (v4 == v5)
      return result;
  }
  v14 = (unsigned int *)(v8 + 16);
  v13 = *(_DWORD *)(v8 + 16);
  v15 = *(unsigned __int8 *)(v8 + v13 - 1 + 27);
  v16 = *(unsigned int *)(v6 + 4);
  if (v15 == 123)
    v17 = 1;
  else
    v17 = 2;
  v18 = v16 + v17 + 2;
  if (*(_DWORD *)(v8 + 20) - v13 < v18)
  {
    result = JSC::FastStringifier<unsigned char>::hasRemainingCapacitySlow(v8, v18);
    if (!(_DWORD)result)
      goto LABEL_31;
    v13 = *v14;
  }
  if (v15 != 123)
  {
    v19 = v8 + v13++;
    *(_DWORD *)(v8 + 16) = v13;
    *(_BYTE *)(v19 + 27) = 44;
  }
  *(_BYTE *)(v8 + v13 + 27) = 34;
  if (!(_DWORD)v16)
  {
LABEL_24:
    *(_BYTE *)(v8 + 27 + v16 + v13 + 1) = 34;
    *(_BYTE *)(v8 + 27 + v16 + v13 + 2) = 58;
    *(_DWORD *)(v8 + 16) = v16 + v13 + 3;
    result = JSC::FastStringifier<unsigned char>::append(v8);
    if (*(_DWORD *)(v8 + 16) > 0x2000u)
      return result;
    goto LABEL_25;
  }
  v20 = *(unsigned __int8 **)(v6 + 8);
  v21 = *(unsigned int *)(v6 + 4);
  v22 = v13 + 1;
  v23 = v16;
  while (v21)
  {
    v24 = *v20;
    if (WTF::escapedFormsForJSON[v24])
      goto LABEL_31;
    *(_BYTE *)(v8 + v22++ + 27) = v24;
    ++v20;
    --v21;
    if (!--v23)
      goto LABEL_24;
  }
  __break(1u);
LABEL_30:
  v14 = (unsigned int *)(v8 + 16);
LABEL_31:
  *v14 = 8193;
  return result;
}

void JSC::FastStringifier<char16_t>::append(uint64_t a1, unint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  int *v45;
  int **v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t *v51;
  char *v52;
  unint64_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  int8x16_t *v59;
  int16x8_t v60;
  unsigned __int8 *v61;
  int16x8_t v62;
  BOOL v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint16x8_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  char v78;
  unint64_t v79;
  __int16 v80;
  unsigned __int16 v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  unsigned int v86;
  __int16 v87;
  unsigned int v88;
  unsigned __int16 v89;
  __int16 v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  int8x16_t v98;
  __int128 v99;
  __int128 v100;
  char *v101;
  char *v102;
  char *v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  char v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  __int16 v120;
  JSC::VM *v121;
  uint64_t *v122;
  char *v123;
  unsigned int v124;
  char *v125;
  char *v126;
  __int128 v127;
  int8x16_t v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  char *v132;
  char *v133;
  __int16 v134;
  unsigned int v135;
  unint64_t v136;
  __int128 v137;
  int8x16_t v138;
  int8x16_t v139;
  uint8x16_t v140;
  char *v141;
  unsigned __int8 *v142;
  int8x16_t v143;
  char *v144;
  int8x16_t v145;
  int8x16_t v146;
  uint8x16_t v147;
  uint64_t v148;
  uint64_t *v149;
  unint64_t **v150;
  signed int v151;
  unint64_t *v152;
  uint64_t v153;
  _QWORD v154[17];
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;

  v154[15] = *MEMORY[0x1E0C80C00];
  if (a2 == 7)
  {
    v72 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - v72 <= 3)
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 4u))
        goto LABEL_105;
      v72 = *(_DWORD *)(a1 + 16);
    }
    *(_WORD *)(a1 + 28 + 2 * v72) = 116;
    *(_WORD *)(a1 + 28 + 2 * (v72 + 1)) = 114;
    *(_WORD *)(a1 + 28 + 2 * (v72 + 2)) = 117;
    *(_WORD *)(a1 + 28 + 2 * (v72 + 3)) = 101;
    v73 = v72 + 4;
LABEL_100:
    *(_DWORD *)(a1 + 16) = v73;
    return;
  }
  v10 = a2;
  if (a2 == 6)
  {
    v74 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - v74 <= 4)
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 5u))
        goto LABEL_105;
      v74 = *(_DWORD *)(a1 + 16);
    }
    *(_WORD *)(a1 + 28 + 2 * v74) = 102;
    *(_WORD *)(a1 + 28 + 2 * (v74 + 1)) = 97;
    *(_WORD *)(a1 + 28 + 2 * (v74 + 2)) = 108;
    *(_WORD *)(a1 + 28 + 2 * (v74 + 3)) = 115;
    *(_WORD *)(a1 + 28 + 2 * (v74 + 4)) = 101;
    v73 = v74 + 5;
    goto LABEL_100;
  }
  if (a2 == 2)
    goto LABEL_179;
  if (a2 >= 0xFFFE000000000000)
  {
    if ((*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16)) > 0xA
      || JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 0xBu))
    {
      v41 = &v153;
      v42 = (char *)v154 + 3;
      if ((v10 & 0x80000000) != 0)
      {
        v41 = (uint64_t *)((char *)&v153 + 1);
        LOBYTE(v153) = 45;
        LODWORD(v10) = -(int)v10;
      }
      if ((char *)v154 + 3 - (char *)v41 > 9
        || (v43 = (1233 * (32 - __clz(v10 | 1))) >> 12,
            (char *)v154 + 3 - (char *)v41 >= (((__PAIR64__(v43, v10) - std::__itoa::__pow10_32[v43]) >> 32)
                                                           + 1)))
      {
        if (v10 >= 0xF4240)
        {
          if (v10 >= 0x5F5E100)
          {
            v83 = v10 / 0x5F5E100;
            if (v10 > 0x3B9AC9FF)
            {
              *(_WORD *)v41 = std::__itoa::__digits_base_10[v83];
              v90 = std::__itoa::__digits_base_10[v10 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
              *((_WORD *)v41 + 1) = std::__itoa::__digits_base_10[v10 % 0x5F5E100 / 0xF4240];
              *((_WORD *)v41 + 2) = v90;
              v91 = v10 % 0x5F5E100 % 0xF4240 % 0x2710;
              *((_WORD *)v41 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)v91 / 0x64u];
              *((_WORD *)v41 + 4) = std::__itoa::__digits_base_10[(unsigned __int16)v91 % 0x64u];
              v44 = 10;
            }
            else
            {
              *(_BYTE *)v41 = v83 + 48;
              v84 = std::__itoa::__digits_base_10[v10 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
              *(_WORD *)((char *)v41 + 1) = std::__itoa::__digits_base_10[v10 % 0x5F5E100 / 0xF4240];
              *(_WORD *)((char *)v41 + 3) = v84;
              v85 = v10 % 0x5F5E100 % 0xF4240 % 0x2710;
              *(_WORD *)((char *)v41 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v85 / 0x64u];
              *(_WORD *)((char *)v41 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v85 % 0x64u];
              v44 = 9;
            }
          }
          else
          {
            v77 = v10 / 0xF4240;
            if (v10 > 0x98967F)
            {
              v87 = std::__itoa::__digits_base_10[v10 % 0xF4240 / 0x2710uLL];
              *(_WORD *)v41 = std::__itoa::__digits_base_10[v77];
              *((_WORD *)v41 + 1) = v87;
              v88 = v10 % 0xF4240 % 0x2710;
              *((_WORD *)v41 + 2) = std::__itoa::__digits_base_10[(unsigned __int16)v88 / 0x64u];
              *((_WORD *)v41 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)v88 % 0x64u];
              v44 = 8;
            }
            else
            {
              v78 = v77 + 48;
              v79 = (429497 * (unint64_t)(v10 % 0xF4240)) >> 32;
              v80 = std::__itoa::__digits_base_10[v79];
              *(_BYTE *)v41 = v78;
              *(_WORD *)((char *)v41 + 1) = v80;
              v81 = v10 % 0xF4240 - 10000 * v79;
              *(_WORD *)((char *)v41 + 3) = std::__itoa::__digits_base_10[v81 / 0x64u];
              *(_WORD *)((char *)v41 + 5) = std::__itoa::__digits_base_10[v81 % 0x64u];
              v44 = 7;
            }
          }
        }
        else if (v10 >> 4 > 0x270)
        {
          v82 = v10 / 0x2710;
          if (v10 >> 5 > 0xC34)
          {
            *(_WORD *)v41 = std::__itoa::__digits_base_10[v82];
            v89 = v10 % 0x2710;
            *((_WORD *)v41 + 1) = std::__itoa::__digits_base_10[v89 / 0x64u];
            *((_WORD *)v41 + 2) = std::__itoa::__digits_base_10[v89 % 0x64u];
            v44 = 6;
          }
          else
          {
            *(_BYTE *)v41 = v82 + 48;
            *(_WORD *)((char *)v41 + 1) = std::__itoa::__digits_base_10[(5243 * (v10 % 0x2710)) >> 19];
            *(_WORD *)((char *)v41 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(v10 % 0x2710
                                                                                         - 100
                                                                                         * ((unsigned __int16)((5243 * (v10 % 0x2710)) >> 16) >> 3))];
            v44 = 5;
          }
        }
        else if (v10 > 0x63)
        {
          v86 = (unsigned __int16)v10 / 0x64u;
          if (v10 > 0x3E7)
          {
            *(_WORD *)v41 = std::__itoa::__digits_base_10[v86];
            *((_WORD *)v41 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)v10 % 0x64u];
            v44 = 4;
          }
          else
          {
            *(_BYTE *)v41 = v86 + 48;
            *(_WORD *)((char *)v41 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)v10 % 0x64u];
            v44 = 3;
          }
        }
        else if (v10 > 9)
        {
          *(_WORD *)v41 = std::__itoa::__digits_base_10[v10];
          v44 = 2;
        }
        else
        {
          *(_BYTE *)v41 = v10 + 48;
          v44 = 1;
        }
        v42 = (char *)v41 + v44;
      }
      v92 = &v153;
      v93 = v42 - (char *)&v153;
      v94 = (char *)(a1 + 2 * *(unsigned int *)(a1 + 16) + 28);
      v95 = &v94[2 * v93];
      if (v93 >= 0x40uLL)
      {
        v96 = &v94[2 * (v93 & 0xFFFFFFC0)];
        v92 = &v153;
        v97 = 0uLL;
        do
        {
          v156.val[0] = *(int8x16_t *)v92;
          v98 = *((int8x16_t *)v92 + 1);
          v158.val[0] = (int8x16_t)*((_OWORD *)v92 + 2);
          v99 = *((_OWORD *)v92 + 3);
          v92 += 8;
          v100 = v99;
          v158.val[1] = 0uLL;
          v160.val[0] = v98;
          v156.val[1] = 0uLL;
          v101 = v94;
          vst2q_s8(v101, v156);
          v101 += 32;
          v160.val[1] = 0uLL;
          vst2q_s8(v101, v160);
          v102 = v94 + 64;
          vst2q_s8(v102, v158);
          v103 = v94 + 96;
          vst2q_s8(v103, *(int8x16x2_t *)(&v97 - 1));
          v94 += 128;
        }
        while (v94 != v96);
        v94 = v96;
      }
      while (v94 != v95)
      {
        v104 = *(unsigned __int8 *)v92;
        v92 = (uint64_t *)((char *)v92 + 1);
        *(_WORD *)v94 = v104;
        v94 += 2;
      }
      v73 = *(_DWORD *)(a1 + 16) + v93;
      goto LABEL_100;
    }
    goto LABEL_105;
  }
  *(_QWORD *)&v11 = a2 - 0x2000000000000;
  if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16)) > 0x7B
        || JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 0x7Cu))
      {
        v122 = &v153;
        v149 = &v153;
        LODWORD(v150) = 124;
        v151 = 0;
        WTF::double_conversion::DoubleToStringConverter::ToShortestIeeeNumber((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, (uint64_t)&v149, 0, v11);
        v123 = (char *)(a1 + 2 * *(unsigned int *)(a1 + 16) + 28);
        v124 = v151;
        v125 = &v123[2 * v151];
        if (v151 >= 0x40)
        {
          v126 = &v123[2 * (v151 & 0x7FFFFFFFFFFFFFC0)];
          v122 = &v153;
          v127 = 0uLL;
          do
          {
            v157.val[0] = *(int8x16_t *)v122;
            v128 = *((int8x16_t *)v122 + 1);
            v159.val[0] = (int8x16_t)*((_OWORD *)v122 + 2);
            v129 = *((_OWORD *)v122 + 3);
            v122 += 8;
            v130 = v129;
            v159.val[1] = 0uLL;
            v161.val[0] = v128;
            v157.val[1] = 0uLL;
            v131 = v123;
            vst2q_s8(v131, v157);
            v131 += 32;
            v161.val[1] = 0uLL;
            vst2q_s8(v131, v161);
            v132 = v123 + 64;
            vst2q_s8(v132, v159);
            v133 = v123 + 96;
            vst2q_s8(v133, *(int8x16x2_t *)(&v127 - 1));
            v123 += 128;
          }
          while (v123 != v126);
          v123 = v126;
        }
        while (v123 != v125)
        {
          v134 = *(unsigned __int8 *)v122;
          v122 = (uint64_t *)((char *)v122 + 1);
          *(_WORD *)v123 = v134;
          v123 += 2;
        }
        *(_DWORD *)(a1 + 16) += v124;
        if ((v124 & 0x80000000) == 0)
          *((_BYTE *)v149 + v124) = 0;
        return;
      }
      goto LABEL_105;
    }
LABEL_179:
    JSC::FastStringifier<char16_t>::append(a1);
    return;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_105;
  v12 = *(unsigned __int8 *)(a2 + 5);
  if (v12 <= 0x16)
  {
    if (v12 != 2)
      goto LABEL_105;
    v46 = (int **)(a2 + 8);
    v45 = *(int **)(a2 + 8);
    if ((v45 & 1) != 0)
    {
      v46 = JSC::JSRopeString::resolveRope(a2, 0, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
      v45 = *v46;
    }
    if (!v45)
      goto LABEL_198;
    v47 = v45[1];
    v48 = v47 + 2;
    v49 = *(unsigned int *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20) - (int)v49 < (v47 + 2))
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, v48))
        goto LABEL_198;
      v49 = *(unsigned int *)(a1 + 16);
      v45 = *v46;
      *(_WORD *)(a1 + 2 * v49 + 28) = 34;
      v48 = v47 + 2;
      if (!v45)
        goto LABEL_70;
      LODWORD(v50) = v45[1];
    }
    else
    {
      *(_WORD *)(a1 + 2 * v49 + 28) = 34;
      LODWORD(v50) = v47;
    }
    v51 = (int8x16_t *)*((_QWORD *)v45 + 1);
    v50 = v50;
    v52 = (char *)(a1 + 2 * v49 + 30);
    if ((v45[4] & 4) != 0)
    {
      if (v50 < 0x10)
      {
        if (!(_DWORD)v50)
          goto LABEL_70;
        while (1)
        {
          v148 = v51->u8[0];
          if (WTF::escapedFormsForJSON[v148])
            goto LABEL_198;
          *(_WORD *)v52 = v148;
          v52 += 2;
          v51 = (int8x16_t *)((char *)v51 + 1);
          if (!--v50)
            goto LABEL_70;
        }
      }
      v136 = (unint64_t)v51->u64 + v50;
      v137 = 0uLL;
      v138.i64[0] = 0x2222222222222222;
      v138.i64[1] = 0x2222222222222222;
      v139.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
      v139.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
      v140.i64[0] = 0x2020202020202020;
      v140.i64[1] = 0x2020202020202020;
      v141 = v52;
      v54 = 0uLL;
      do
      {
        v142 = (unsigned __int8 *)&v51[1];
        v143 = *v51;
        vst2q_s8(v141, *(int8x16x2_t *)(&v137 - 1));
        v141 += 32;
        v54 = vorrq_s8(vorrq_s8(v54, vceqq_s8(v143, v138)), vorrq_s8(vceqq_s8(v143, v139), (int8x16_t)vcgtq_u8(v140, (uint8x16_t)v143)));
        v63 = (unint64_t)&v51[1].u64[1] + 7 >= v136;
        ++v51;
      }
      while (!v63);
      if ((unint64_t)v142 < v136)
      {
        v155.val[0] = *(int8x16_t *)(v136 - 16);
        v155.val[1] = 0uLL;
        v144 = &v52[2 * v50 - 32];
        vst2q_s8(v144, v155);
        v145.i64[0] = 0x2222222222222222;
        v145.i64[1] = 0x2222222222222222;
        v146.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
        v146.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
        v147.i64[0] = 0x2020202020202020;
        v147.i64[1] = 0x2020202020202020;
        v54 = vorrq_s8(v54, vorrq_s8(vorrq_s8(vceqq_s8(v155.val[0], v146), (int8x16_t)vcgtq_u8(v147, (uint8x16_t)v155.val[0])), vceqq_s8(v155.val[0], v145)));
      }
      v54.i8[0] = vmaxvq_u8((uint8x16_t)v54);
    }
    else
    {
      if (v50 < 8)
      {
        if (!(_DWORD)v50)
          goto LABEL_70;
        v105 = 2 * v50;
        while (1)
        {
          v106 = v51->u16[0];
          if ((v106 & 0xF800) == 0xD800 || v106 <= 0xFF && WTF::escapedFormsForJSON[v106])
            goto LABEL_198;
          *(_WORD *)v52 = v106;
          v52 += 2;
          v51 = (int8x16_t *)((char *)v51 + 2);
          v105 -= 2;
          if (!v105)
            goto LABEL_70;
        }
      }
      v53 = (unint64_t)v51 + 2 * v50;
      v54 = 0uLL;
      v55.i64[0] = 0x22002200220022;
      v55.i64[1] = 0x22002200220022;
      v56.i64[0] = 0x5C005C005C005CLL;
      v56.i64[1] = 0x5C005C005C005CLL;
      v57.i64[0] = 0x20002000200020;
      v57.i64[1] = 0x20002000200020;
      v58.i64[0] = 0xF800F800F800F800;
      v58.i64[1] = 0xF800F800F800F800;
      v59 = (int8x16_t *)v52;
      v60.i64[0] = 0xD800D800D800D800;
      v60.i64[1] = 0xD800D800D800D800;
      do
      {
        v61 = (unsigned __int8 *)&v51[1];
        v62 = *(int16x8_t *)v51;
        *v59++ = *v51;
        v54 = vorrq_s8(vorrq_s8(v54, (int8x16_t)vceqq_s16((int16x8_t)vandq_s8((int8x16_t)v62, v58), v60)), vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v62, v56), (int8x16_t)vcgtq_u16(v57, (uint16x8_t)v62)), (int8x16_t)vceqq_s16(v62, v55)));
        v63 = (unint64_t)&v51[1].u64[1] + 6 >= v53;
        ++v51;
      }
      while (!v63);
      if ((unint64_t)v61 < v53)
      {
        v64 = *(int16x8_t *)(v53 - 16);
        *(int16x8_t *)&v52[2 * v50 - 16] = v64;
        v65.i64[0] = 0x22002200220022;
        v65.i64[1] = 0x22002200220022;
        v66.i64[0] = 0x5C005C005C005CLL;
        v66.i64[1] = 0x5C005C005C005CLL;
        v67.i64[0] = 0x20002000200020;
        v67.i64[1] = 0x20002000200020;
        v68 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v64, v66), (int8x16_t)vcgtq_u16(v67, (uint16x8_t)v64)), (int8x16_t)vceqq_s16(v64, v65));
        v66.i64[0] = 0xF800F800F800F800;
        v66.i64[1] = 0xF800F800F800F800;
        v69 = (int16x8_t)vandq_s8((int8x16_t)v64, (int8x16_t)v66);
        v66.i64[0] = 0xD800D800D800D800;
        v66.i64[1] = 0xD800D800D800D800;
        v54 = vorrq_s8(v54, vorrq_s8((int8x16_t)vceqq_s16(v69, v66), v68));
      }
      v54.i16[0] = vmaxvq_u16((uint16x8_t)v54);
    }
    if (!v54.i32[0])
    {
LABEL_70:
      v70 = *(_DWORD *)(a1 + 16);
      *(_WORD *)(a1 + 2 * (v47 + v70 + 1) + 28) = 34;
      v71 = v70 + v48;
LABEL_71:
      *(_DWORD *)(a1 + 16) = v71;
      return;
    }
LABEL_198:
    v71 = 8193;
    goto LABEL_71;
  }
  if (v12 - 23 >= 2)
  {
    if (v12 != 36)
      goto LABEL_105;
    if (!*(_BYTE *)(a1 + 25))
    {
      if (JSC::FastStringifier<unsigned char>::mayHaveToJSON(a1, *(_DWORD **)(*(_QWORD *)a1 + 672), a3, a4, a5, a6, a7, a8))goto LABEL_105;
      *(_BYTE *)(a1 + 25) = 1;
    }
    v107 = (unsigned __int8 *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
    v108 = v107[8];
    if ((v108 & 0x10) != 0)
      v109 = ((v108 & 0xE) + 10) >> 1;
    else
      v109 = (v108 >> 1) & 7;
    v110 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v109 + 852);
    if (v110)
      v111 = 16 * (v110 & 0xFFFFFFFE);
    else
      v111 = 0;
    if ((unsigned __int8 *)v111 == v107)
    {
      v112 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v121 = *(JSC::VM **)(a1 + 8);
      v153 = a1;
      JSC::Structure::forEachProperty<JSC::FastStringifier<unsigned char>::append(JSC::JSValue)::{lambda(JSC::PropertyTableEntry const&)#1}>((JSC::Structure *)v107, v121, &v153, a4, a5, a6, a7, a8);
      v112 = *(_DWORD *)(a1 + 16);
      if (v112 > 0x2000)
        return;
    }
    if (*(_DWORD *)(a1 + 20) == v112)
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 1u))
        goto LABEL_105;
      v112 = *(_DWORD *)(a1 + 16);
    }
    v113 = v112 + 1;
    *(_DWORD *)(a1 + 16) = v112 + 1;
    *(_WORD *)(a1 + 2 * v112 + 28) = 91;
    v114 = *(_BYTE *)(v10 + 4);
    if ((v114 & 0xE) != 0)
    {
      v115 = *(_QWORD **)(v10 + 8);
      v21 = (unint64_t *)*((unsigned int *)v115 - 2);
      if ((_DWORD)v21)
      {
        v116 = v114 & 0xF;
        if ((v116 - 8) >= 2)
        {
          switch(v114 & 0xF)
          {
            case 0:
            case 1:
              if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v10, 0))
                goto LABEL_105;
              v116 = *(_BYTE *)(v10 + 4) & 0xF;
              break;
            case 3:
              goto LABEL_105;
            case 4:
            case 5:
              goto LABEL_130;
            case 6:
            case 7:
              if (*((_DWORD *)v115 - 1))
                break;
              goto LABEL_105;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              if (!*((_DWORD *)v115 - 1) || !v115[2])
                goto LABEL_105;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198A65DE4);
          }
        }
        else
        {
LABEL_130:
          if (!*((_DWORD *)v115 - 1) || !*v115)
            goto LABEL_105;
        }
        if ((v116 - 8) >= 2)
        {
          switch(v116)
          {
            case 0:
            case 1:
              JSC::JSObject::getIndexQuicklyForTypedArray(v10, 0, 0);
              break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 10:
            case 11:
            case 12:
            case 13:
              break;
            default:
LABEL_183:
              __break(0xC471u);
              JUMPOUT(0x198A65C90);
          }
        }
        JSC::FastStringifier<char16_t>::append(a1);
        v113 = *(_DWORD *)(a1 + 16);
        if (v113 > 0x2000)
          return;
        if ((_DWORD)v21 != 1)
        {
          v22 = 0;
          v25 = 1;
          LOWORD(v32) = 44;
          goto LABEL_136;
        }
      }
    }
LABEL_150:
    if (*(_DWORD *)(a1 + 20) == v113)
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 1u))
        goto LABEL_105;
      v113 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v113 + 1;
    v119 = a1 + 2 * v113;
    v120 = 93;
LABEL_190:
    *(_WORD *)(v119 + 28) = v120;
    return;
  }
  if ((*(_BYTE *)(a2 + 6) & 4) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v153, a2);
    if ((_BYTE)v153)
      goto LABEL_105;
  }
  v13 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v14 = *(_DWORD **)(v13 + 0x30);
  if (!v14)
    goto LABEL_105;
  v15 = *(_DWORD **)(*(_QWORD *)a1 + 656);
  if (v14 != v15)
    goto LABEL_105;
  if (!*(_BYTE *)(a1 + 24))
  {
    if (JSC::FastStringifier<unsigned char>::mayHaveToJSON(a1, v15, a3, a4, a5, a6, a7, a8))
      goto LABEL_105;
    *(_BYTE *)(a1 + 24) = 1;
  }
  v16 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20) == v16)
  {
    if (JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 1u))
    {
      v16 = *(_DWORD *)(a1 + 16);
      goto LABEL_14;
    }
LABEL_105:
    v73 = 8193;
    goto LABEL_100;
  }
LABEL_14:
  *(_DWORD *)(a1 + 16) = v16 + 1;
  *(_WORD *)(a1 + 2 * v16 + 28) = 123;
  if (*(_WORD *)(v13 + 12) & 6 | *(_BYTE *)(v13 + 10) & 8
    || (*(_DWORD *)(v13 + 16) & 0x20000008) != 0
    || (*(_DWORD *)(v13 + 16) & 3) == 2
    || (*(_BYTE *)(v13 + 8) & 0xE) != 0)
  {
    goto LABEL_105;
  }
  v17 = *(JSC::VM **)(a1 + 8);
  v153 = a1;
  v154[0] = v10;
  v154[1] = v13;
  v10 = *(_QWORD *)(v13 + 88);
  if (!v10)
  {
    v75 = *(_QWORD *)(v13 + 64);
    if (!v75 || *(_BYTE *)(v75 + 5) != 1 && *(_DWORD *)(v75 + 80) < 2u)
      goto LABEL_187;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v13, v17, 1, a4, a5, a6, a7, a8);
    v10 = v76;
    if (!v76)
      goto LABEL_187;
  }
  v152 = (unint64_t *)&v153;
  v149 = (uint64_t *)v10;
  v150 = &v152;
  v18 = *(_QWORD *)(v10 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if ((v18 & 1) == 0)
  {
    _ZZNK3JSC13PropertyTable15forEachPropertyIZNS_9Structure15forEachPropertyIZNS_15FastStringifierIDsE6appendENS_7JSValueEEUlRKT_E_EEvRNS_2VMES9_EUlS9_E_EEvS9_ENKUlPS8_E_clIjEEDaSE_((uint64_t)&v149, v19);
    goto LABEL_187;
  }
  v20 = *(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 24);
  if (!v20)
  {
LABEL_187:
    v135 = *(_DWORD *)(a1 + 16);
    if (v135 > 0x2000)
      return;
    if (*(_DWORD *)(a1 + 20) != v135)
      goto LABEL_189;
    if (JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 1u))
    {
      v135 = *(_DWORD *)(a1 + 16);
LABEL_189:
      *(_DWORD *)(a1 + 16) = v135 + 1;
      v119 = a1 + 2 * v135;
      v120 = 125;
      goto LABEL_190;
    }
    goto LABEL_105;
  }
  v21 = (unint64_t *)(v19 + *(unsigned int *)(v10 + 8));
  v22 = &v21[v20];
  while (1)
  {
    v23 = *v21;
    v24 = *v21 & 0xFFFFFFFFFFFFLL;
    if (v24 != 1 && (v23 & 0x4000000000000) == 0)
    {
      v25 = *v152;
      v26 = *(_DWORD *)((*v21 & 0xFFFFFFFFFFFFLL) + 0x10);
      if ((v26 & 0x20) != 0 || (v26 & 4) == 0 || (v27 = v152[1], v152[2] != 16 * (*(_DWORD *)v27 & 0xFFFFFFFE)))
      {
LABEL_186:
        *(_DWORD *)(v25 + 16) = 8193;
        goto LABEL_187;
      }
      v28 = HIBYTE(v23);
      v29 = (_QWORD *)(v23 >> 62 ? *(_QWORD *)(v27 + 8) + 8 * (63 - v28) - 8 : v27 + 8 * v28 + 16);
      if (*v29 != 10)
        break;
    }
LABEL_42:
    if (++v21 == v22)
      goto LABEL_187;
  }
  v30 = *(_DWORD *)(v25 + 16);
  v31 = *(unsigned __int16 *)(v25 + 2 * (v30 - 1) + 28);
  v32 = *(unsigned int *)((*v21 & 0xFFFFFFFFFFFFLL) + 4);
  if (v31 == 123)
    v33 = 1;
  else
    v33 = 2;
  v34 = v32 + v33 + 2;
  if (*(_DWORD *)(v25 + 20) - v30 < v34)
  {
    if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(v25, v34))
      goto LABEL_186;
    v30 = *(_DWORD *)(v25 + 16);
  }
  if (v31 != 123)
  {
    v35 = v25 + 2 * v30++;
    *(_DWORD *)(v25 + 16) = v30;
    *(_WORD *)(v35 + 28) = 44;
  }
  *(_WORD *)(v25 + 2 * v30 + 28) = 34;
  if (!(_DWORD)v32)
  {
LABEL_41:
    *(_WORD *)(v25 + 28 + 2 * (v32 + v30 + 1)) = 34;
    *(_WORD *)(v25 + 28 + 2 * (v32 + v30 + 2)) = 58;
    *(_DWORD *)(v25 + 16) = v32 + v30 + 3;
    JSC::FastStringifier<char16_t>::append(v25);
    if (*(_DWORD *)(v25 + 16) > 0x2000u)
      goto LABEL_187;
    goto LABEL_42;
  }
  v36 = *(unsigned __int8 **)(v24 + 8);
  v37 = *(unsigned int *)(v24 + 4);
  v38 = v30 + 1;
  v39 = v32;
  while (v37)
  {
    v40 = *v36;
    if (WTF::escapedFormsForJSON[v40])
      goto LABEL_186;
    *(_WORD *)(v25 + 2 * v38 + 28) = v40;
    ++v36;
    ++v38;
    --v37;
    if (!--v39)
      goto LABEL_41;
  }
  __break(1u);
LABEL_153:
  if (!JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)v10, v25))
    goto LABEL_105;
  v118 = *(_BYTE *)(v10 + 4) & 0xF;
  while (1)
  {
    if ((v118 - 8) >= 2)
    {
      switch(v118)
      {
        case 0:
        case 1:
          JSC::JSObject::getIndexQuicklyForTypedArray(v10, v25, 0);
          break;
        case 4:
        case 5:
        case 6:
        case 7:
        case 10:
        case 11:
        case 12:
        case 13:
          break;
        default:
          goto LABEL_183;
      }
    }
    JSC::FastStringifier<char16_t>::append(a1);
    v113 = *(_DWORD *)(a1 + 16);
    if (v113 > 0x2000)
      break;
    ++v25;
    ++v22;
    if (v21 == (unint64_t *)v25)
      goto LABEL_150;
LABEL_136:
    if (*(_DWORD *)(a1 + 20) == v113)
    {
      if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(a1, 1u))
        goto LABEL_105;
      v113 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v113 + 1;
    *(_WORD *)(a1 + 2 * v113 + 28) = v32;
    v117 = *(_QWORD *)(v10 + 8);
    v118 = *(_BYTE *)(v10 + 4) & 0xF;
    if ((v118 - 8) >= 2)
    {
      switch(*(_BYTE *)(v10 + 4) & 0xF)
      {
        case 0:
        case 1:
          goto LABEL_153;
        case 3:
          goto LABEL_105;
        case 4:
        case 5:
          break;
        case 6:
        case 7:
          if (v25 < *(unsigned int *)(v117 - 4))
            continue;
          goto LABEL_105;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (v25 >= *(unsigned int *)(v117 - 4) || !*(unint64_t *)((char *)v22 + v117 + 24))
            goto LABEL_105;
          continue;
        default:
          __break(0xC471u);
          JUMPOUT(0x198A65CB0);
      }
    }
    if (v25 >= *(unsigned int *)(v117 - 4) || !*(unint64_t *)((char *)v22 + v117 + 8))
      goto LABEL_105;
  }
}

uint64_t JSC::FastStringifier<char16_t>::append(uint64_t result)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(result + 16);
  if (*(_DWORD *)(result + 20) - v1 <= 3)
  {
    v3 = result;
    if (!JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(result, 4u))
    {
      v2 = 8193;
      result = v3;
      goto LABEL_3;
    }
    result = v3;
    v1 = *(_DWORD *)(v3 + 16);
  }
  *(_WORD *)(result + 28 + 2 * v1) = 110;
  *(_WORD *)(result + 28 + 2 * (v1 + 1)) = 117;
  *(_WORD *)(result + 28 + 2 * (v1 + 2)) = 108;
  *(_WORD *)(result + 28 + 2 * (v1 + 3)) = 108;
  v2 = v1 + 4;
LABEL_3:
  *(_DWORD *)(result + 16) = v2;
  return result;
}

BOOL JSC::FastStringifier<char16_t>::hasRemainingCapacitySlow(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v4 = 0x2000 - *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5)
    v5 = WTF::Thread::initializeCurrentTLS(0);
  v6 = ((unint64_t)&v8 - *(_QWORD *)(v5 + 24) - 0x10000) / 0x180;
  if (v6 >= v4)
    LODWORD(v6) = v4;
  if (v6 >= a2)
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 16) + v6;
  return v6 >= a2;
}

uint64_t _ZZNK3JSC13PropertyTable15forEachPropertyIZNS_9Structure15forEachPropertyIZNS_15FastStringifierIDsE6appendENS_7JSValueEEUlRKT_E_EEvRNS_2VMES9_EUlS9_E_EEvS9_ENKUlPS8_E_clIjEEDaSE_(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t StatusReg;

  v2 = *(_DWORD *)(*(_QWORD *)result + 28) + *(_DWORD *)(*(_QWORD *)result + 24);
  if (!v2)
    return result;
  v3 = (uint64_t *)(a2 + 4 * *(unsigned int *)(*(_QWORD *)result + 8));
  v4 = &v3[2 * v2];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v5 = *v3;
    if (*v3 != 1 && (*((_BYTE *)v3 + 12) & 4) == 0)
    {
      v6 = **(uint64_t ***)(result + 8);
      v7 = *v6;
      v8 = *(_DWORD *)(v5 + 16);
      if ((v8 & 0x20) != 0)
        goto LABEL_34;
      if ((v8 & 4) == 0)
        goto LABEL_34;
      v9 = v6[1];
      if (v6[2] != 16 * (*(_DWORD *)v9 & 0xFFFFFFFE))
        goto LABEL_34;
      v10 = *((_DWORD *)v3 + 2);
      if (v10 <= 63)
      {
        v11 = v9 + 16;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 8) - 8;
        v10 = 63 - v10;
      }
      v12 = *(_QWORD *)(v11 + 8 * v10);
      if (v12 != 10)
        break;
    }
LABEL_25:
    v3 += 2;
    if (v3 == v4)
      return result;
  }
  v14 = (_DWORD *)(v7 + 16);
  v13 = *(_DWORD *)(v7 + 16);
  v15 = *(unsigned __int16 *)(v7 + 2 * (v13 - 1) + 28);
  v16 = *(unsigned int *)(v5 + 4);
  if (v15 == 123)
    v17 = 1;
  else
    v17 = 2;
  v18 = v16 + v17 + 2;
  if (*(_DWORD *)(v7 + 20) - v13 < v18)
  {
    v28 = result;
    v29 = v12;
    result = *(_QWORD *)(StatusReg + 736);
    if (!result)
      result = WTF::Thread::initializeCurrentTLS(0);
    v26 = 0x2000 - v13;
    if ((((unint64_t)&v27 - *(_QWORD *)(result + 24) - 0x10000) / 0x180) < 0x2000 - v13)
      v26 = ((unint64_t)&v27 - *(_QWORD *)(result + 24) - 0x10000) / 0x180;
    if (v26 < v18)
      goto LABEL_35;
    v13 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 20) = v13 + v26;
    result = v28;
  }
  if (v15 != 123)
  {
    v19 = v7 + 2 * v13++;
    *(_DWORD *)(v7 + 16) = v13;
    *(_WORD *)(v19 + 28) = 44;
  }
  *(_WORD *)(v7 + 2 * v13 + 28) = 34;
  if (!(_DWORD)v16)
  {
LABEL_24:
    *(_WORD *)(v7 + 28 + 2 * (v16 + v13 + 1)) = 34;
    *(_WORD *)(v7 + 28 + 2 * (v16 + v13 + 2)) = 58;
    *(_DWORD *)(v7 + 16) = v16 + v13 + 3;
    v25 = result;
    JSC::FastStringifier<char16_t>::append(v7);
    result = v25;
    if (*(_DWORD *)(v7 + 16) > 0x2000u)
      return result;
    goto LABEL_25;
  }
  v20 = *(unsigned __int8 **)(v5 + 8);
  v21 = *(unsigned int *)(v5 + 4);
  v22 = v13 + 1;
  v23 = v16;
  while (v21)
  {
    v24 = *v20;
    if (WTF::escapedFormsForJSON[v24])
      goto LABEL_35;
    *(_WORD *)(v7 + 2 * v22++ + 28) = v24;
    ++v20;
    --v21;
    if (!--v23)
      goto LABEL_24;
  }
  __break(1u);
LABEL_34:
  v14 = (_DWORD *)(v7 + 16);
LABEL_35:
  *v14 = 8193;
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long long>>,unsigned long long>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -1)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return 0;
  }
  return v7;
}

uint64_t JSC::PropertyTable::find(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v2 & 1) != 0)
  {
    if ((v5 & 0x20) != 0)
      v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = (v5 >> 8) & *(_QWORD *)&v6;
    v8 = *(unsigned __int8 *)(v3 + v7);
    if (*(_BYTE *)(v3 + v7))
    {
      v9 = v3 + v4;
      v10 = 1;
      while ((*(_QWORD *)(v9 + 8 * (v8 - 1)) & 0xFFFFFFFFFFFFLL) != a2)
      {
        v11 = 0;
        v7 = ((_DWORD)v7 + v10) & v6;
        v8 = *(unsigned __int8 *)(v3 + v7);
        ++v10;
        if (!*(_BYTE *)(v3 + v7))
          goto LABEL_10;
      }
      v7 = v7;
      v11 = v8;
    }
    else
    {
      v11 = 0;
    }
LABEL_10:
    v12 = v11;
  }
  else
  {
    if ((v5 & 0x20) != 0)
      v5 = *(_DWORD *)(a2 + 32);
    v14 = *(_DWORD *)(a1 + 12);
    v7 = v14 & (v5 >> 8);
    v15 = *(_DWORD *)(v3 + 4 * v7);
    if (v15)
    {
      v16 = v3 + 4 * v4;
      v17 = 1;
      while (*(_QWORD *)(v16 + 16 * (v15 - 1)) != a2)
      {
        v7 = ((_DWORD)v7 + v17) & v14;
        v15 = *(_DWORD *)(v3 + 4 * v7);
        ++v17;
        if (!v15)
          goto LABEL_21;
      }
      v7 = v7;
    }
LABEL_21:
    v12 = v15;
  }
  return v12 | (v7 << 32);
}

void JSC::Structure::pin(JSC::JSCell *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *((_DWORD *)a1 + 4) |= 4u;
  if (a4)
  {
    *((_QWORD *)a1 + 11) = a4;
    if (*(_DWORD *)(a3 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a3 + 192, (unint64_t)a1);
  }
  else
  {
    *((_QWORD *)a1 + 11) = 0;
  }
  v9 = *((_QWORD *)a1 + 8);
  if (v9 && *(_BYTE *)(v9 + 5) != 1)
    *(_DWORD *)(v9 + 80) = 0;
  else
    *((_QWORD *)a1 + 8) = 0;
  v10 = *((unsigned int *)a1 + 18);
  *((_DWORD *)a1 + 18) = 0;
  if ((_DWORD)v10)
  {
    v11 = (WTF::StringImpl *)(16 * v10);
    v12 = *(_DWORD *)(16 * v10) - 2;
    if (v12)
    {
      *(_DWORD *)v11 = v12;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

void JSC::Structure::addPropertyWithoutTransition<JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(unint64_t a1, uint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int8 v10;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t MoreOutOfLineStorage;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  __int16 v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v10 = a4;
  v14 = *(_QWORD *)(a1 + 88);
  if (!v14)
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)a1, (JSC::VM *)a2, 1, a4, (uint64_t)a5, a6, a7, a8);
    v14 = v15;
  }
  v16 = (unsigned __int8 *)(a1 + 15);
  if (__ldaxr((unsigned __int8 *)(a1 + 15)))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 15);
    goto LABEL_6;
  }
  if (__stxr(1u, v16))
    goto LABEL_5;
LABEL_6:
  ++*(_DWORD *)(a2 + 916);
  *(_DWORD *)(a1 + 16) |= 4u;
  if (v14)
  {
    *(_QWORD *)(a1 + 88) = v14;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  v18 = *(_QWORD *)(a1 + 64);
  if (v18 && *(_BYTE *)(v18 + 5) != 1)
    *(_DWORD *)(v18 + 80) = 0;
  else
    *(_QWORD *)(a1 + 64) = 0;
  v19 = *(unsigned int *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = 0;
  if ((_DWORD)v19)
  {
    v20 = (WTF::StringImpl *)(16 * v19);
    v21 = *(_DWORD *)(16 * v19) - 2;
    if (v21)
    {
      *(_DWORD *)v20 = v21;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
  }
  if ((v10 & 4) != 0)
  {
    v22 = *(_DWORD *)(a1 + 16) & 0xFFFFFF9F | 0x40;
LABEL_17:
    *(_DWORD *)(a1 + 16) = v22;
    goto LABEL_18;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v22 = *(_DWORD *)(a1 + 16) & 0xFFFFFFDF;
    goto LABEL_17;
  }
LABEL_18:
  if ((v10 & 8) != 0)
  {
    v74 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v74 | 0x40000000;
    if ((v10 & 0x72) != 0)
      *(_DWORD *)(a1 + 16) = v74 | 0xC0000000;
  }
  if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
    *(_DWORD *)(a1 + 16) |= 0x20000000u;
  v23 = *(unsigned __int8 *)(a1 + 14);
  v24 = *(_QWORD *)(v14 + 32);
  if (v24 && (v88 = *(unsigned int *)(v24 + 12), (_DWORD)v88))
  {
    v29 = *(_DWORD *)(*(_QWORD *)v24 + 4 * v88 - 4);
    *(_DWORD *)(v24 + 12) = v88 - 1;
  }
  else
  {
    v25 = *(_DWORD *)(v14 + 24);
    v26 = __OFSUB__(v25, v23);
    v27 = v25 - v23;
    v47 = (v27 < 0) ^ v26;
    v28 = v27 + 64;
    if (v47)
      v29 = *(_DWORD *)(v14 + 24);
    else
      v29 = v28;
  }
  v30 = *(_DWORD *)(a3 + 16);
  v31 = v30;
  if ((v30 & 0x20) != 0)
    v31 = *(_DWORD *)(a3 + 32);
  v32 = *(_DWORD *)(a1 + 28) ^ (v31 >> 8);
  v33 = *(_DWORD *)(a1 + 32) | (a3 >> 4);
  *(_DWORD *)(a1 + 28) = v32;
  *(_DWORD *)(a1 + 32) = v33;
  v34 = *(_QWORD *)(v14 + 16);
  v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
  v36 = *(unsigned int *)(v14 + 8);
  if ((v34 & 1) != 0)
  {
    if ((v30 & 0x20) != 0)
      v30 = *(_DWORD *)(a3 + 32);
    v37 = *(_DWORD *)(v14 + 12);
    v38 = (v30 >> 8) & *(_QWORD *)&v37;
    v39 = *(unsigned __int8 *)(v35 + v38);
    if (*(_BYTE *)(v35 + v38))
    {
      v40 = 1;
      while (a3 != (*(_QWORD *)(v35 + v36 + 8 * (v39 - 1)) & 0xFFFFFFFFFFFFLL))
      {
        v38 = ((_DWORD)v38 + v40) & v37;
        v39 = *(unsigned __int8 *)(v35 + v38);
        ++v40;
        if (!*(_BYTE *)(v35 + v38))
          goto LABEL_45;
      }
      goto LABEL_56;
    }
LABEL_45:
    *(_DWORD *)a3 += 2;
    v46 = *(_DWORD *)(v14 + 24);
    v47 = (v34 & 1) == 0 || v29 < 256;
    if (v47)
      v48 = 1;
    else
      v48 = 0;
    if (*(_DWORD *)(v14 + 28) + v46 >= v36 >> 1 || (v48 & 1) == 0)
    {
      JSC::PropertyTable::rehash((JSC::PropertyTable *)v14, (JSC::VM *)a2, (v46 + 1), v29 < 256, (uint64_t)a5, a6, a7, a8);
      v34 = *(_QWORD *)(v14 + 16);
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      v78 = *(unsigned int *)(v14 + 8);
      v79 = *(_DWORD *)(a3 + 16);
      if ((v34 & 1) != 0)
      {
        if ((v79 & 0x20) != 0)
          v79 = *(_DWORD *)(a3 + 32);
        v80 = *(_DWORD *)(v14 + 12);
        v38 = (v79 >> 8) & *(_QWORD *)&v80;
        v81 = *(unsigned __int8 *)(v35 + v38);
        if (*(_BYTE *)(v35 + v38))
        {
          v82 = v35 + v78;
          v83 = 1;
          do
          {
            if (a3 == (*(_QWORD *)(v82 + 8 * (v81 - 1)) & 0xFFFFFFFFFFFFLL))
              break;
            v38 = ((_DWORD)v38 + v83) & v80;
            v81 = *(unsigned __int8 *)(v35 + v38);
            ++v83;
          }
          while (*(_BYTE *)(v35 + v38));
        }
      }
      else
      {
        if ((v79 & 0x20) != 0)
          v79 = *(_DWORD *)(a3 + 32);
        v84 = *(_DWORD *)(v14 + 12);
        LODWORD(v38) = v84 & (v79 >> 8);
        v85 = *(_DWORD *)(v35 + 4 * v38);
        if (v85)
        {
          v86 = v35 + 4 * v78;
          v87 = 1;
          do
          {
            if (*(_QWORD *)(v86 + 16 * (v85 - 1)) == a3)
              break;
            LODWORD(v38) = (v38 + v87) & v84;
            v85 = *(_DWORD *)(v35 + 4 * v38);
            ++v87;
          }
          while (v85);
        }
      }
    }
    v49 = *(_DWORD *)(v14 + 28) + *(_DWORD *)(v14 + 24);
    v50 = v49 + 1;
    if ((v34 & 1) != 0)
    {
      *(_BYTE *)(v35 + v38) = v50;
      *(_QWORD *)(v35 + *(unsigned int *)(v14 + 8) + 8 * v49) = a3 | ((unint64_t)(v10 | (v29 << 8)) << 48);
    }
    else
    {
      *(_DWORD *)(v35 + 4 * v38) = v50;
      v59 = v35 + 4 * *(unsigned int *)(v14 + 8) + 16 * v49;
      *(_QWORD *)v59 = a3;
      *(_DWORD *)(v59 + 8) = v29;
      *(_BYTE *)(v59 + 12) = v10;
    }
    ++*(_DWORD *)(v14 + 24);
    goto LABEL_56;
  }
  if ((v30 & 0x20) != 0)
    v30 = *(_DWORD *)(a3 + 32);
  v41 = *(_DWORD *)(v14 + 12);
  LODWORD(v38) = v41 & (v30 >> 8);
  v42 = *(_DWORD *)(v35 + 4 * v38);
  if (!v42)
    goto LABEL_45;
  v43 = v35 + 4 * v36;
  v44 = 1;
  while (1)
  {
    v45 = (v42 - 1);
    if (*(_QWORD *)(v43 + 16 * v45) == a3)
      break;
    LODWORD(v38) = (v38 + v44) & v41;
    v42 = *(_DWORD *)(v35 + 4 * v38);
    ++v44;
    if (!v42)
      goto LABEL_45;
  }
  if (*(_DWORD *)(v43 + 16 * v45 + 8) == -1)
    goto LABEL_45;
LABEL_56:
  v51 = *(unsigned __int16 *)(a1 + 24);
  if (v51 == 65534)
  {
    v51 = -1;
  }
  else if (v51 == 0xFFFF)
  {
    v51 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 84);
  }
  if (v29 <= v51)
    v52 = v51;
  else
    v52 = v29;
  if (v52 >= 64)
  {
    if ((v52 - 63) >= 5)
    {
      v75 = (v52 - 64) | ((v52 - 64) >> 1) | (((v52 - 64) | ((v52 - 64) >> 1)) >> 2);
      v76 = v75 | (v75 >> 4) | ((v75 | (v75 >> 4)) >> 8);
      v53 = (v76 | HIWORD(v76)) + 1;
    }
    else
    {
      v53 = 4;
    }
  }
  else
  {
    v53 = 0;
  }
  v54 = **a5;
  if (v53 != (_DWORD)v54)
  {
    v60 = (unint64_t)a5[1];
    MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v60, (JSC::VM *)a5[2], v54, v53, (uint64_t)a5, a6, a7, a8, a9);
    v62 = a5[2];
    v63 = (uint64_t)(v62 + 48);
    if (*((_BYTE *)v62 + 755))
    {
      *(_DWORD *)v60 = *a5[3] | 1;
      __dmb(0xAu);
      *(_QWORD *)(v60 + 8) = MoreOutOfLineStorage;
      if (v62[190] >= *(unsigned __int8 *)(v60 + 7))
        JSC::Heap::writeBarrierSlowPath(v63, v60);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v60 + 8) = MoreOutOfLineStorage;
      if (v62[190] >= *(unsigned __int8 *)(v60 + 7))
        JSC::Heap::writeBarrierSlowPath(v63, v60);
    }
    v64 = *(_QWORD *)a5[4];
    if (v52 == -1)
    {
      v77 = -2;
    }
    else
    {
      if (v52 <= 65533)
      {
        *(_WORD *)(v64 + 24) = v52;
LABEL_88:
        __dmb(0xAu);
        *(_DWORD *)v60 = *a5[3];
        goto LABEL_69;
      }
      v90 = *(_QWORD *)(v64 + 64);
      if (*(__int16 *)(v64 + 24) == -1)
      {
        *(_DWORD *)(v90 + 84) = v52;
        goto LABEL_88;
      }
      if (!v90 || *(_BYTE *)(v90 + 5) == 1)
      {
        JSC::Structure::allocateRareData(*(JSC::Structure **)a5[4], (JSC::VM *)a5[2], (JSC::Structure *)v54, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        v90 = *(_QWORD *)(v64 + 64);
      }
      *(_DWORD *)(v90 + 84) = v52;
      __dmb(0xAu);
      v77 = -1;
    }
    *(_WORD *)(v64 + 24) = v77;
    goto LABEL_88;
  }
  v55 = *(_QWORD *)a5[4];
  if (v52 == -1)
  {
    v65 = -2;
LABEL_90:
    *(_WORD *)(v55 + 24) = v65;
    goto LABEL_69;
  }
  if (v52 <= 65533)
  {
    *(_WORD *)(v55 + 24) = v52;
    goto LABEL_69;
  }
  v89 = *(_QWORD *)(v55 + 64);
  if (*(__int16 *)(v55 + 24) != -1)
  {
    if (!v89 || *(_BYTE *)(v89 + 5) == 1)
    {
      JSC::Structure::allocateRareData(*(JSC::Structure **)a5[4], (JSC::VM *)a5[2], (JSC::Structure *)v54, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v89 = *(_QWORD *)(v55 + 64);
    }
    *(_DWORD *)(v89 + 84) = v52;
    __dmb(0xAu);
    v65 = -1;
    goto LABEL_90;
  }
  *(_DWORD *)(v89 + 84) = v52;
LABEL_69:
  *a5[5] = v29;
  v56 = __ldxr(v16);
  if (v56 != 1)
  {
    __clrex();
    goto LABEL_73;
  }
  if (__stlxr(0, v16))
LABEL_73:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v54, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v57 = *(_DWORD *)(a2 + 916) - 1;
  *(_DWORD *)(a2 + 916) = v57;
  if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v58 = v57 == 0;
  else
    v58 = 0;
  if (v58)
  {
    *(_BYTE *)(a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
  }
}

unint64_t JSC::DOMAttributeGetterSetter::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t SlowCase;
  uint64_t v21;

  v8 = (_QWORD *)(a1 + 38112);
  v9 = *(_QWORD *)(a1 + 38112);
  if (v9 < *(_QWORD *)(a1 + 38120))
    goto LABEL_2;
  v9 = *(_QWORD *)(a1 + 38128);
  if ((v9 & 1) == 0)
  {
    v13 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(a1 + 38136);
    *(_QWORD *)(a1 + 38120) = v9 + HIDWORD(v13);
    *(_QWORD *)(a1 + 38128) = v9 + (int)v13;
LABEL_2:
    *v8 = v9 + 48;
    goto LABEL_3;
  }
  v14 = a1 + 38088;
  v15 = a1 + 192;
  v21 = a1;
  v16 = a5;
  v17 = a4;
  v18 = a3;
  v19 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 48, 0, 0);
  a2 = v19;
  a3 = v18;
  a4 = v17;
  a5 = v16;
  v9 = SlowCase;
  a1 = v21;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = v8[429];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)v9 = v10 >> 4;
  *(_DWORD *)(v9 + 4) = v11;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_QWORD *)(v9 + 32) = a5;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return v9;
}

unint64_t JSC::CustomGetterSetter::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t SlowCase;
  uint64_t v19;

  v8 = (_QWORD *)(a1 + 37936);
  v9 = *(_QWORD *)(a1 + 37936);
  if (v9 < *(_QWORD *)(a1 + 37944))
    goto LABEL_2;
  v9 = *(_QWORD *)(a1 + 37952);
  if ((v9 & 1) == 0)
  {
    v13 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(a1 + 37960);
    *(_QWORD *)(a1 + 37944) = v9 + HIDWORD(v13);
    *(_QWORD *)(a1 + 37952) = v9 + (int)v13;
LABEL_2:
    *v8 = v9 + 32;
    goto LABEL_3;
  }
  v14 = a1 + 37912;
  v15 = a1 + 192;
  v19 = a1;
  v16 = a3;
  v17 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 32, 0, 0);
  a2 = v17;
  a3 = v16;
  v9 = SlowCase;
  a1 = v19;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = v8[450];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)v9 = v10 >> 4;
  *(_DWORD *)(v9 + 4) = v11;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = a3;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return v9;
}

uint64_t WTF::Vector<JSC::Stringifier::Holder,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Stringifier::Holder>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 **v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  result = WTF::Vector<JSC::Stringifier::Holder,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + 184 * v10;
  v13 = *(_OWORD *)(result + 12);
  *(_OWORD *)v12 = *(_OWORD *)result;
  *(_OWORD *)(v12 + 12) = v13;
  v14 = *(__int128 **)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  v15 = (_OWORD *)(v12 + 56);
  *(_QWORD *)(v12 + 40) = v12 + 56;
  v16 = (__int128 **)(v12 + 40);
  *(v16 - 1) = v14;
  v16[1] = (__int128 *)8;
  v17 = *(__int128 **)(result + 40);
  if (v17 == (__int128 *)(result + 56))
  {
    v18 = *(unsigned int *)(result + 52);
    if ((_DWORD)v18)
    {
      v21 = 16 * v18;
      do
      {
        v22 = *v17++;
        *v15++ = v22;
        v21 -= 16;
      }
      while (v21);
    }
  }
  else
  {
    *(_QWORD *)(result + 40) = result + 56;
    *v16 = v17;
    v23 = *(_DWORD *)(result + 48);
    *(_DWORD *)(result + 48) = 8;
    *((_DWORD *)v16 + 2) = v23;
  }
  v19 = v11 + 184 * v10;
  v20 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = 0;
  *(_DWORD *)(v19 + 52) = v20;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::Stringifier::Holder,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = a3;
  v10 = *(char **)a1;
  if (*(_QWORD *)a1 > a3 || (v11 = &v10[184 * *(unsigned int *)(a1 + 12)], (unint64_t)v11 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v19 = a2;
    if (v19 > v17)
    {
      v20 = *(_DWORD *)(a1 + 12);
      if (v19 < 0x11)
      {
        v22 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v19 >= 0x1642C86)
        {
          __break(0xC471u);
          JUMPOUT(0x198A67198);
        }
        v21 = 184 * v19;
        v22 = WTF::fastMalloc((WTF *)(184 * v19));
        *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0xB8;
        *(_QWORD *)a1 = v22;
      }
      WTF::VectorMover<false,JSC::Stringifier::Holder>::move(v10, &v10[184 * v20], v22, a4, a5, a6, a7, a8);
      if ((char *)(a1 + 16) != v10 && v10)
      {
        if (*(char **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v14 = a2;
    if (v14 > v12)
    {
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v14 >= 0x1642C86)
        {
          __break(0xC471u);
          JUMPOUT(0x198A671A0);
        }
        v15 = 184 * v14;
        v16 = WTF::fastMalloc((WTF *)(184 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0xB8;
        *(_QWORD *)a1 = v16;
      }
      WTF::VectorMover<false,JSC::Stringifier::Holder>::move(v10, v11, v16, a4, a5, a6, a7, a8);
      if ((char *)(a1 + 16) != v10 && v10)
      {
        if (*(char **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - (_QWORD)v10) >> 3);
  }
  return v8;
}

void WTF::VectorMover<false,JSC::Stringifier::Holder>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *(_OWORD *)v10;
      *(_OWORD *)(v8 + 12) = *(_OWORD *)(v10 + 12);
      *(_OWORD *)v8 = v11;
      v12 = *((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = 0;
      *(_QWORD *)(v8 + 32) = v12;
      *(_QWORD *)(v8 + 40) = v8 + 56;
      *(_QWORD *)(v8 + 48) = 8;
      v13 = (char *)*((_QWORD *)v10 + 5);
      v14 = v10 + 56;
      if (v13 == v10 + 56)
      {
        v15 = *((unsigned int *)v10 + 13);
        if ((_DWORD)v15)
        {
          v34 = 0;
          v35 = 16 * v15;
          do
          {
            *(_OWORD *)(v8 + v34 + 56) = *(_OWORD *)&v13[v34];
            v34 += 16;
          }
          while (v35 != v34);
        }
      }
      else
      {
        *((_QWORD *)v10 + 5) = v14;
        *(_QWORD *)(v8 + 40) = v13;
        v36 = *((_DWORD *)v10 + 12);
        *((_DWORD *)v10 + 12) = 8;
        *(_DWORD *)(v8 + 48) = v36;
      }
      v16 = *((_DWORD *)v10 + 13);
      *((_DWORD *)v10 + 13) = 0;
      *(_DWORD *)(v8 + 52) = v16;
      v17 = *((_QWORD *)v10 + 5);
      if (v14 != (char *)v17 && v17 != 0)
      {
        *((_QWORD *)v10 + 5) = 0;
        *((_DWORD *)v10 + 12) = 0;
        WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      }
      v19 = *((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
        {
          v20 = *(unsigned int *)(v19 + 20);
          if ((_DWORD)v20)
          {
            v21 = *(WTF::StringImpl ***)(v19 + 8);
            v22 = 8 * v20;
            do
            {
              v23 = *v21;
              *v21 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
                }
                else
                {
                  *(_DWORD *)v23 -= 2;
                }
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
          v32 = *(_QWORD *)(v19 + 8);
          if (v19 + 24 != v32 && v32 != 0)
          {
            *(_QWORD *)(v19 + 8) = 0;
            *(_DWORD *)(v19 + 16) = 0;
            WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v19;
        }
      }
      v8 += 184;
      v10 += 184;
    }
    while (v10 != a2);
  }
}

void WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[1];
      if (v10)
        WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          v12 = *(unsigned int *)(v11 + 20);
          if ((_DWORD)v12)
          {
            v13 = *(WTF::StringImpl ***)(v11 + 8);
            v14 = 8 * v12;
            do
            {
              v15 = *v13;
              *v13 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                {
                  WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
                }
                else
                {
                  *(_DWORD *)v15 -= 2;
                }
              }
              ++v13;
              v14 -= 8;
            }
            while (v14);
          }
          v24 = *(_QWORD *)(v11 + 8);
          if (v11 + 24 != v24 && v24 != 0)
          {
            *(_QWORD *)(v11 + 8) = 0;
            *(_DWORD *)(v11 + 16) = 0;
            WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      v9 += 4;
    }
    while (v9 != a2);
  }
}

char *WTF::Vector<unsigned int,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[4 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!(v10 >> 30))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(4 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 4 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198A675CCLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(4 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

unint64_t *WTF::Vector<JSC::PropertyNameArray,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a3;
  v10 = *(unint64_t **)a1;
  if (*(_QWORD *)a1 > a3 || (v11 = &v10[4 * *(unsigned int *)(a1 + 12)], (unint64_t)v11 <= a3))
  {
    v17 = *(unsigned int *)(a1 + 8);
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= a2)
      v20 = a2;
    else
      v20 = v19;
    if (v20 > v17)
    {
      v21 = *(unsigned int *)(a1 + 12);
      if (v20 < 0x11)
      {
        v22 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v20 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x198A67774);
        }
        v22 = WTF::fastMalloc((WTF *)(32 * v20));
        *(_DWORD *)(a1 + 8) = v20;
        *(_QWORD *)a1 = v22;
      }
      WTF::VectorMover<false,JSC::PropertyNameArray>::move(v10, &v10[4 * v21], v22, a4, a5, a6, a7, a8);
      if ((unint64_t *)(a1 + 16) != v10 && v10)
      {
        if (*(unint64_t **)a1 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= a2)
      v15 = a2;
    else
      v15 = v14;
    if (v15 <= v12)
    {
      v30 = *(unint64_t **)a1;
    }
    else
    {
      if (v15 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
      }
      else
      {
        if (v15 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x198A6777CLL);
        }
        v16 = WTF::fastMalloc((WTF *)(32 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
      }
      WTF::VectorMover<false,JSC::PropertyNameArray>::move(v10, v11, v16, a4, a5, a6, a7, a8);
      v30 = *(unint64_t **)a1;
      if ((unint64_t *)(a1 + 16) != v10 && v10)
      {
        if (v30 == v10)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v10, v31, v32, v33, v34, v35, v36, v37);
        v30 = *(unint64_t **)a1;
      }
    }
    return &v30[4 * ((uint64_t)(v8 - (_QWORD)v10) >> 5)];
  }
  return (unint64_t *)v8;
}

void WTF::VectorMover<false,JSC::PropertyNameArray>::move(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      *v10 = 0;
      *(_QWORD *)v8 = v11;
      *(_QWORD *)(v8 + 8) = 0;
      v12 = v10[1];
      v10[1] = 0;
      *(_QWORD *)(v8 + 8) = v12;
      v13 = v10[2];
      *(_WORD *)(v8 + 24) = *((_WORD *)v10 + 12);
      *(_QWORD *)(v8 + 16) = v13;
      v14 = v10[1];
      if (v14)
        WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
      v15 = *v10;
      *v10 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(unsigned int *)(v15 + 20);
          if ((_DWORD)v16)
          {
            v17 = *(WTF::StringImpl ***)(v15 + 8);
            v18 = 8 * v16;
            do
            {
              v19 = *v17;
              *v17 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                {
                  WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_DWORD *)v19 -= 2;
                }
              }
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
          v28 = *(_QWORD *)(v15 + 8);
          if (v15 + 24 != v28 && v28 != 0)
          {
            *(_QWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      v8 += 32;
      v10 += 4;
    }
    while (v10 != a2);
  }
}

unint64_t JSC::PropertyTable::take(JSC::PropertyTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v10 = *((_QWORD *)this + 2);
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v12 = *((unsigned int *)this + 2);
  v13 = *(WTF::StringImpl **)a3;
  v14 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if ((v10 & 1) != 0)
  {
    if ((v14 & 0x20) != 0)
      v14 = *((_DWORD *)v13 + 8);
    v15 = *((_DWORD *)this + 3);
    v16 = (v14 >> 8) & *(_QWORD *)&v15;
    v17 = *(unsigned __int8 *)(v11 + v16);
    if (*(_BYTE *)(v11 + v16))
    {
      v18 = 1;
      v19 = 0xFFFFFFFFLL;
      while (1)
      {
        v20 = *(_QWORD *)(v11 + v12 + 8 * (v17 - 1));
        if (v13 == (WTF::StringImpl *)(v20 & 0xFFFFFFFFFFFFLL))
          break;
        v21 = 0;
        v16 = ((_DWORD)v16 + v18) & v15;
        v17 = *(unsigned __int8 *)(v11 + v16);
        ++v18;
        if (!*(_BYTE *)(v11 + v16))
          goto LABEL_10;
      }
      v19 = (v20 >> 16) & 0xFF00000000 | HIBYTE(v20);
      v16 = v16;
      v21 = v17;
    }
    else
    {
      v21 = 0;
      v19 = 0xFFFFFFFFLL;
    }
LABEL_10:
    v22 = v21;
  }
  else
  {
    if ((v14 & 0x20) != 0)
      v14 = *((_DWORD *)v13 + 8);
    v29 = *((_DWORD *)this + 3);
    v16 = v29 & (v14 >> 8);
    LODWORD(v22) = *(_DWORD *)(v11 + 4 * v16);
    if ((_DWORD)v22)
    {
      v30 = v11 + 4 * v12;
      v31 = 1;
      v19 = 0xFFFFFFFFLL;
      while (v13 != *(WTF::StringImpl **)(v30 + 16 * (v22 - 1)))
      {
        v16 = ((_DWORD)v16 + v31) & v29;
        LODWORD(v22) = *(_DWORD *)(v11 + 4 * v16);
        ++v31;
        if (!(_DWORD)v22)
          goto LABEL_29;
      }
      v19 = *(unsigned int *)(v30 + 16 * (v22 - 1) + 8) | ((unint64_t)*(unsigned __int8 *)(v30 + 16 * (v22 - 1) + 12) << 32);
      v16 = v16;
    }
    else
    {
      v19 = 0xFFFFFFFFLL;
    }
LABEL_29:
    v22 = v22;
  }
  v23 = v22 | (v16 << 32);
  if ((_DWORD)v19 != -1)
  {
    v24 = HIDWORD(v23);
    if ((v10 & 1) != 0)
    {
      *(_BYTE *)(v11 + v24) = (v12 >> 1) + 1;
      v25 = *((unsigned int *)this + 2);
      v32 = v11 + v25 + 8 * (v23 - 1);
      *(_QWORD *)v32 = ((unint64_t)*(unsigned __int16 *)(v32 + 6) << 48) | 1;
    }
    else
    {
      *(_DWORD *)(v11 + 4 * v24) = (v12 >> 1) + 1;
      v25 = *((unsigned int *)this + 2);
      *(_QWORD *)(v11 + 4 * v25 + 16 * (v23 - 1)) = 1;
    }
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      LODWORD(v25) = *((_DWORD *)this + 2);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
    v26 = (*((_DWORD *)this + 6) - 1);
    v27 = *((_DWORD *)this + 7) + 1;
    *((_DWORD *)this + 6) = v26;
    *((_DWORD *)this + 7) = v27;
    if (v25 <= 4 * v27)
      JSC::PropertyTable::rehash(this, a2, v26, 1, a5, a6, a7, a8);
  }
  return v19;
}

_QWORD *JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)2>(JSC::VM &,JSC::PropertyName,JSC::JSValue,unsigned int,JSC::PutPropertySlot &)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()(JSC::Structure ***a1, JSC::Structure *this)
{
  int v2;
  JSC::Structure *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *result;
  JSC::Structure *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  JSC::Structure *v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t MoreOutOfLineStorage;
  JSC::Structure **v26;
  JSC::Structure *v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  JSC::Structure *v31;
  uint64_t v32;

  v2 = (int)this;
  v4 = **a1;
  v5 = *((unsigned __int16 *)v4 + 12);
  if (v5 == 65534)
    goto LABEL_5;
  if (v5 == 0xFFFF)
    v5 = *(_DWORD *)(*((_QWORD *)v4 + 8) + 84);
  if (v5 < 64)
  {
LABEL_5:
    v6 = 0;
  }
  else if ((v5 - 63) >= 5)
  {
    v7 = (v5 - 64) | ((v5 - 64) >> 1) | (((v5 - 64) | ((v5 - 64) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v6 = (v8 | HIWORD(v8)) + 1;
  }
  else
  {
    v6 = 4;
  }
  v9 = (unint64_t)a1[1];
  result = (_QWORD *)JSC::Structure::outOfLineCapacity(this);
  if ((_DWORD)result == v6)
  {
    v18 = **a1;
    if (v2 == -1)
    {
      v28 = -2;
    }
    else
    {
      if (v2 <= 65533)
      {
        *((_WORD *)v18 + 12) = v2;
        return result;
      }
      v29 = *((_QWORD *)v18 + 8);
      if (*((__int16 *)v18 + 12) == -1)
      {
        *(_DWORD *)(v29 + 84) = v2;
        return result;
      }
      if (!v29 || *(_BYTE *)(v29 + 5) == 1)
      {
        result = (_QWORD *)JSC::Structure::allocateRareData(**a1, (JSC::VM *)a1[2], v11, v12, v13, v14, v15, v16);
        v29 = *((_QWORD *)v18 + 8);
      }
      *(_DWORD *)(v29 + 84) = v2;
      __dmb(0xAu);
      v28 = -1;
    }
    *((_WORD *)v18 + 12) = v28;
    return result;
  }
  MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v9, (JSC::VM *)a1[2], v6, result, v13, v14, v15, v16, v17);
  v26 = a1[2];
  result = v26 + 24;
  if (*((_BYTE *)v26 + 755))
  {
    *(_DWORD *)v9 = *(_DWORD *)a1[3] | 1;
    __dmb(0xAu);
    *(_QWORD *)(v9 + 8) = MoreOutOfLineStorage;
    if (*((_DWORD *)v26 + 190) >= *(unsigned __int8 *)(v9 + 7))
      result = (_QWORD *)JSC::Heap::writeBarrierSlowPath((uint64_t)result, v9);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(v9 + 8) = MoreOutOfLineStorage;
    if (*((_DWORD *)v26 + 190) >= *(unsigned __int8 *)(v9 + 7))
      result = (_QWORD *)JSC::Heap::writeBarrierSlowPath((uint64_t)result, v9);
  }
  v27 = **a1;
  if (v2 == -1)
  {
    *((_WORD *)v27 + 12) = -2;
  }
  else if (v2 > 65533)
  {
    v30 = *((__int16 *)v27 + 12);
    v31 = **a1;
    v32 = *((_QWORD *)v27 + 8);
    if (v30 == -1)
    {
      *(_DWORD *)(v32 + 84) = v2;
    }
    else
    {
      if (!v32 || *(_BYTE *)(v32 + 5) == 1)
      {
        result = (_QWORD *)JSC::Structure::allocateRareData(v31, (JSC::VM *)a1[2], v19, v20, v21, v22, v23, v24);
        v32 = *((_QWORD *)v31 + 8);
      }
      *(_DWORD *)(v32 + 84) = v2;
      __dmb(0xAu);
      *((_WORD *)v31 + 12) = -1;
    }
  }
  else
  {
    *((_WORD *)v27 + 12) = v2;
  }
  __dmb(0xAu);
  *(_DWORD *)v9 = *(_DWORD *)a1[3];
  return result;
}

void JSC::JSRunLoopTimer::Manager::timerDidFireCallback(JSC::JSRunLoopTimer::Manager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSRunLoopTimer::Manager *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  unsigned int **v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t *v38;
  WTF *v39;
  uint64_t v40;
  unsigned int *v41;
  JSC::JSRunLoopTimer::Manager *v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  WTF *v63;
  WTF *v64;
  unint64_t StatusReg;
  uint64_t v66;
  unsigned __int8 *v67;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD v97[2];
  WTF *v98;
  uint64_t v99;
  char v100;
  _QWORD *v101;

  v8 = this;
  v98 = 0;
  v99 = 0;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_4;
  }
  this = (JSC::JSRunLoopTimer::Manager *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_4:
  v10 = *((_QWORD *)v8 + 1);
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_62;
  v11 = WTF::RunLoop::current(this);
  v12 = mach_absolute_time();
  v14 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v14 != -1)
  {
    v97[0] = &v100;
    v101 = v97;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v101, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v15 = *((_QWORD *)v8 + 1);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    v17 = (_QWORD *)(v15 + 16 * v16);
    if (*(_DWORD *)(v15 - 12))
    {
      v18 = (_QWORD *)*((_QWORD *)v8 + 1);
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = (_QWORD *)*((_QWORD *)v8 + 1);
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          v18 += 2;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v18 = (_QWORD *)(v15 + 16 * v16);
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = (_QWORD *)(v15 + 16 * v16);
LABEL_15:
  if (v15)
    v20 = (_QWORD *)(v15 + 16 * *(unsigned int *)(v15 - 4));
  else
    v20 = 0;
  if (v20 != v18)
  {
    v13.n128_u32[0] = dword_1ECF4400C;
    v21 = (double)(v12 * WTF::machTimebaseInfo(void)::timebaseInfo)
        / ((double)v13.n128_u64[0]
         * 1000000000.0);
    do
    {
      v22 = v18[1];
      if (*(_QWORD *)v22 == v11)
      {
        v24 = *(unsigned int *)(v22 + 28);
        v25 = 315360000.0;
        if ((_DWORD)v24)
        {
          v26 = 0;
          v27 = v21 + 315360000.0;
          do
          {
            v28 = *(_QWORD *)(v22 + 16);
            v29 = (unsigned int **)(v28 + 16 * v26);
            v30 = (uint64_t *)(v29 + 1);
            v13.n128_u64[0] = (unint64_t)v29[1];
            if (v13.n128_f64[0] <= v21)
            {
              if (!v24)
              {
                __break(0xC471u);
                JUMPOUT(0x198A68314);
              }
              v31 = v24 - 1;
              if (v24 - 1 != v26)
              {
                v95 = v20;
                v96 = v11;
                v42 = v8;
                v43 = (unsigned int **)(v28 + 16 * v31);
                v44 = *v29;
                *v29 = 0;
                v45 = *v43;
                *v43 = 0;
                v46 = *v29;
                *v29 = v45;
                if (v46)
                {
                  v56 = v46 + 2;
                  do
                  {
                    v57 = __ldaxr(v56);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, v56));
                  if (!v58)
                  {
                    atomic_store(1u, v46 + 2);
                    (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v46 + 8))(v46, v13);
                  }
                }
                v47 = *v43;
                *v43 = v44;
                v8 = v42;
                v20 = v95;
                v11 = v96;
                if (v47)
                {
                  v59 = v47 + 2;
                  do
                  {
                    v60 = __ldaxr(v59);
                    v61 = v60 - 1;
                  }
                  while (__stlxr(v61, v59));
                  if (!v61)
                  {
                    atomic_store(1u, v47 + 2);
                    (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v47 + 8))(v47, v13);
                  }
                }
                v48 = v28 + 16 * v31;
                v49 = *v30;
                *v30 = *(_QWORD *)(v48 + 8);
                *(_QWORD *)(v48 + 8) = v49;
                v24 = *(unsigned int *)(v22 + 28);
                if (!(_DWORD)v24)
                {
LABEL_121:
                  __break(0xC471u);
                  JUMPOUT(0x198A68278);
                }
                v28 = *(_QWORD *)(v22 + 16);
              }
              v32 = v24 - 1;
              v33 = (uint64_t *)(v28 + 16 * (v24 - 1));
              v34 = *v33;
              *v33 = 0;
              v97[0] = v34;
              v97[1] = v33[1];
              v35 = *(_QWORD *)(v22 + 16);
              v36 = *(unsigned int **)(v35 + 16 * v32);
              *(_QWORD *)(v35 + 16 * v32) = 0;
              if (v36)
              {
                v50 = v36 + 2;
                do
                {
                  v51 = __ldaxr(v50);
                  v52 = v51 - 1;
                }
                while (__stlxr(v52, v50));
                if (!v52)
                {
                  atomic_store(1u, v36 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
                }
              }
              *(_DWORD *)(v22 + 28) = v32;
              LODWORD(v37) = HIDWORD(v99);
              if (HIDWORD(v99) == (_DWORD)v99)
              {
                v38 = (uint64_t *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v98, HIDWORD(v99) + 1, (unint64_t)v97);
                v37 = HIDWORD(v99);
                v39 = v98;
                v40 = *v38;
                *v38 = 0;
                *((_QWORD *)v39 + v37) = v40;
              }
              else
              {
                v83 = v97[0];
                v97[0] = 0;
                *((_QWORD *)v98 + HIDWORD(v99)) = v83;
              }
              HIDWORD(v99) = v37 + 1;
              v41 = (unsigned int *)v97[0];
              v97[0] = 0;
              if (v41)
              {
                v53 = v41 + 2;
                do
                {
                  v54 = __ldaxr(v53);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v53));
                if (!v55)
                {
                  atomic_store(1u, v41 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
                }
              }
              --v26;
              v24 = *(unsigned int *)(v22 + 28);
            }
            else if (v27 >= v13.n128_f64[0])
            {
              v27 = *((double *)v29 + 1);
            }
            ++v26;
          }
          while (v26 < v24);
          v25 = fmax(v27 - v21, 0.0);
        }
        WTF::RunLoop::TimerBase::start(*(_QWORD *)(v22 + 8), 0, v25);
      }
      v23 = v18 + 2;
      v18 = v17;
      if (v23 != v17)
      {
        v18 = v23;
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          v18 += 2;
          if (v18 == v17)
          {
            v18 = v17;
            break;
          }
        }
      }
    }
    while (v18 != v20);
  }
LABEL_62:
  v62 = __ldxr((unsigned __int8 *)v8);
  if (v62 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_67;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v8, 0, a3, a4, a5, a6, a7, a8);
LABEL_67:
  v63 = v98;
  if (!HIDWORD(v99))
    goto LABEL_103;
  v64 = (WTF *)((char *)v98 + 8 * HIDWORD(v99));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v66 = *(_QWORD *)v63;
    v67 = (unsigned __int8 *)(*(_QWORD *)v63 + 33);
    if (__ldaxr(v67))
    {
      __clrex();
LABEL_71:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v67);
      goto LABEL_72;
    }
    if (__stxr(1u, v67))
      goto LABEL_71;
LABEL_72:
    v69 = *(unsigned __int8 *)(v66 + 34);
    v70 = __ldxr(v67);
    if (v70 == 1)
    {
      if (!__stlxr(0, v67))
        goto LABEL_74;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v67, 0, a3, a4, a5, a6, a7, a8);
LABEL_74:
    if (v69)
    {
      v71 = *(_QWORD *)(v66 + 16);
      JSC::JSLock::lock((JSC::JSLock *)v71, a2, a3, a4, a5, a6, a7, a8);
      v72 = *(unsigned int **)(*(_QWORD *)(v66 + 16) + 32);
      if (v72)
      {
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 + 1, v72));
        (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v66 + 16))(v66, v72);
        do
        {
          v74 = __ldaxr(v72);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v72));
        if (!v75)
        {
          atomic_store(1u, v72);
          JSC::VM::~VM((JSC::VM *)v72);
          WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
        }
      }
      if (v71)
      {
        if (!*(_BYTE *)(v71 + 6))
          goto LABEL_121;
        v76 = *(_QWORD *)(v71 + 8);
        v77 = *(_QWORD *)(StatusReg + 736);
        if (!v77)
          v77 = WTF::Thread::initializeCurrentTLS(0);
        if (v76 != v77)
          goto LABEL_121;
        if (*(_QWORD *)(v71 + 16) != 1)
        {
          --*(_QWORD *)(v71 + 16);
          goto LABEL_88;
        }
        JSC::JSLock::willReleaseLock((JSC::JSLock *)v71, a2, a3, a4, a5, a6, a7, a8);
        v84 = *(_QWORD *)(v71 + 16) - 1;
        *(_QWORD *)(v71 + 16) = v84;
        if (!v84)
        {
          *(_BYTE *)(v71 + 6) = 0;
          v85 = (unsigned __int8 *)(v71 + 4);
          v86 = __ldxr((unsigned __int8 *)(v71 + 4));
          if (v86 != 1)
          {
            __clrex();
LABEL_114:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v85, 0, a3, a4, a5, a6, a7, a8);
            goto LABEL_88;
          }
          if (__stlxr(0, v85))
            goto LABEL_114;
        }
      }
    }
LABEL_88:
    v63 = (WTF *)((char *)v63 + 8);
  }
  while (v63 != v64);
  v63 = v98;
  if (HIDWORD(v99))
  {
    v78 = (WTF *)((char *)v98 + 8 * HIDWORD(v99));
    do
    {
      v79 = *(unsigned int **)v63;
      *(_QWORD *)v63 = 0;
      if (v79)
      {
        v80 = v79 + 2;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          atomic_store(1u, v79 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
        }
      }
      v63 = (WTF *)((char *)v63 + 8);
    }
    while (v63 != v78);
    v63 = v98;
  }
LABEL_103:
  if (v63)
    WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(JSC::JSRunLoopTimer::Manager::PerVMData *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E35A2D90;
  v4[1] = v3;
  v39 = v4;
  WTF::RunLoop::dispatch(v2, (uint64_t *)&v39, v5, v6, v7, v8, v9, v10);
  if (v39)
    (*(void (**)(_QWORD *))(*v39 + 8))(v39);
  v18 = *((unsigned int *)this + 7);
  if ((_DWORD)v18)
  {
    v19 = (unsigned int **)*((_QWORD *)this + 2);
    v20 = &v19[2 * v18];
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v21 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      v19 += 2;
    }
    while (v19 != v20);
  }
  v25 = *((_QWORD *)this + 2);
  if (v25)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v25, v11, v12, v13, v14, v15, v16, v17);
  }
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v27 + 2);
      WTF::RunLoop::~RunLoop((WTF::RunLoop *)v27);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }
}

void JSC::JSRunLoopTimer::Manager::registerVM(JSC::JSRunLoopTimer::Manager *this, JSC::VM *a2)
{
  uint64_t v4;
  JSC::JSRunLoopTimer::Manager::PerVMData *v5;
  JSC::JSRunLoopTimer::Manager::PerVMData *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSRunLoopTimer::Manager::PerVMData *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::JSLock *v48;
  _BYTE v49[24];
  JSC::JSRunLoopTimer::Manager::PerVMData *v50;

  v4 = *((_QWORD *)a2 + 15);
  v5 = (JSC::JSRunLoopTimer::Manager::PerVMData *)WTF::fastMalloc((WTF *)0x20);
  v6 = v5;
  v7 = (unsigned int *)(v4 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)v5 = v4;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E35A2D68;
  v10[1] = JSC::JSRunLoopTimer::Manager::timerDidFireCallback;
  v10[2] = 0;
  v10[3] = this;
  *v9 = off_1E3572150;
  do
    v16 = __ldaxr(v7);
  while (__stlxr(v16 + 1, v7));
  *v9 = off_1E3571F10;
  v9[1] = v4;
  v9[2] = 0;
  v9[3] = v10;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 1) = v9;
  v50 = v6;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_8:
  v18 = (unsigned int *)*((_QWORD *)a2 + 14);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v48 = (JSC::JSLock *)v18;
  WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>((uint64_t *)this + 1, &v48, (unsigned int **)&v50, v11, v12, v13, v14, v15, (uint64_t)v49);
  v27 = (unsigned int *)v48;
  v48 = 0;
  if (v27)
  {
    do
    {
      v29 = __ldaxr(v27);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v27));
    if (!v30)
    {
      atomic_store(1u, v27);
      JSC::JSLock::~JSLock((JSC::JSLock *)v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }
  if (!v49[16])
  {
    __break(0xC471u);
    return;
  }
  v28 = __ldxr((unsigned __int8 *)this);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, v21, v22, v23, v24, v25, v26);
  v39 = v50;
  v50 = 0;
  if (v39)
  {
    JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v39);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
}

void WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  unsigned int **v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  unsigned int v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  JSC::JSRunLoopTimer::Manager::PerVMData *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::expand(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = 0;
  v17 = (unsigned int *)*a2;
  v18 = ~(*a2 << 32) + *a2;
  v19 = 9
      * (((v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13)) ^ (((v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = (v20 >> 31) ^ v20;
  for (i = 1; ; ++i)
  {
    v23 = v21 & v15;
    v24 = (unsigned int **)(v13 + 16 * v23);
    v25 = *v24;
    if (!*v24)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v17 = (unsigned int *)*a2;
        v24 = v16;
      }
      *a2 = 0;
      v26 = *v24;
      *v24 = v17;
      if (v26)
      {
        do
        {
          v45 = __ldaxr(v26);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v26));
        if (!v46)
        {
          atomic_store(1u, v26);
          JSC::JSLock::~JSLock((JSC::JSLock *)v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
      }
      v27 = *a3;
      *a3 = 0;
      v28 = (JSC::JSRunLoopTimer::Manager::PerVMData *)v24[1];
      v24[1] = v27;
      if (v28)
      {
        JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v28);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      v37 = *a1;
      if (*a1)
        v38 = *(_DWORD *)(v37 - 12) + 1;
      else
        v38 = 1;
      *(_DWORD *)(v37 - 12) = v38;
      v39 = *a1;
      if (*a1)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(v39 - 16) + v40);
      v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
          goto LABEL_19;
      }
      else
      {
        if (3 * v42 > 4 * v41)
        {
LABEL_19:
          v43 = v39 + 16 * v42;
          v44 = 1;
          goto LABEL_20;
        }
        if (!(_DWORD)v42)
        {
          v55 = 8;
          goto LABEL_28;
        }
      }
      v55 = ((_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42)));
LABEL_28:
      v24 = (unsigned int **)WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::rehash(a1, v55, (uint64_t)v24, a4, a5, a6, a7, a8);
      v39 = *a1;
      if (*a1)
        v42 = *(unsigned int *)(v39 - 4);
      else
        v42 = 0;
      goto LABEL_19;
    }
    if (v25 != (unsigned int *)-1)
      break;
    v16 = (unsigned int **)(v13 + 16 * v23);
LABEL_7:
    v21 = i + v23;
  }
  if (v25 != v17)
    goto LABEL_7;
  if ((v14 & 1) != 0)
    v56 = 0;
  else
    v56 = *(unsigned int *)(v13 - 4);
  v44 = 0;
  v43 = v13 + 16 * v56;
LABEL_20:
  *(_QWORD *)a9 = v24;
  *(_QWORD *)(a9 + 8) = v43;
  *(_BYTE *)(a9 + 16) = v44;
}

void JSC::JSRunLoopTimer::Manager::unregisterVM(JSC::JSRunLoopTimer::Manager *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_4:
  v11 = *((_QWORD *)this + 1);
  if (!v11)
    goto LABEL_18;
  v12 = *((_QWORD *)a2 + 14);
  v13 = *(_DWORD *)(v11 - 8);
  v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  for (i = 1; ; v17 = (v19 + i++) & v13)
  {
    v19 = v17;
    v20 = *(_QWORD *)(v11 + 16 * v17);
    if (v20 != -1)
    {
      if (!v20)
        goto LABEL_18;
      if (v20 == v12)
        break;
    }
  }
  if ((_DWORD)v19 == *(_DWORD *)(v11 - 4))
  {
LABEL_18:
    __break(0xC471u);
    return;
  }
  WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::remove((uint64_t *)this + 1, (unsigned int **)(v11 + 16 * v19), a3, a4, a5, a6, a7, a8);
  v27 = __ldxr((unsigned __int8 *)this);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, v21, v22, v23, v24, v25, v26);
}

void JSC::JSRunLoopTimer::Manager::cancelTimer(JSC::JSRunLoopTimer::Manager *this, JSC::JSRunLoopTimer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unsigned int j;
  uint64_t v29;
  uint64_t v30;
  JSC::JSRunLoopTimer **v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int **v42;
  unsigned int *v43;
  double v44;
  int v45;
  int v46;
  unsigned int *v47;
  JSC::JSRunLoopTimer *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  char v72;
  char **v73;
  char *v74;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *((_QWORD *)a2 + 2);
    v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v12 & ((v16 >> 31) ^ v16);
    for (i = 1; ; ++i)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v11 + 16 * v17);
      if (v20 != -1)
      {
        if (!v20)
          goto LABEL_35;
        if (v20 == v13)
          break;
      }
      v17 = (v19 + i) & v12;
    }
    if ((_DWORD)v19 != *(_DWORD *)(v11 - 4))
    {
      v21 = *(_QWORD *)(v11 + 16 * v19 + 8);
      if (*(_DWORD *)(v21 + 28))
      {
        v22 = mach_absolute_time();
        v24 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v24 != -1)
        {
          v74 = &v72;
          v73 = &v74;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v73, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v23) = dword_1ECF4400C;
        v25 = (double)(v22 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v23 * 1000000000.0);
        v26 = v25 + 315360000.0;
        LODWORD(v27) = *(_DWORD *)(v21 + 28);
        if ((_DWORD)v27)
        {
          for (j = 0; v27 > j; ++j)
          {
            v29 = j;
            v30 = *(_QWORD *)(v21 + 16);
            v31 = (JSC::JSRunLoopTimer **)(v30 + 16 * j);
            if (*v31 == a2)
            {
              v39 = atomic_load((unsigned int *)a2 + 2);
              if (v39 <= 1)
                goto LABEL_59;
              v40 = *(unsigned int *)(v21 + 28);
              if (!(_DWORD)v40)
              {
                __break(0xC471u);
                JUMPOUT(0x198A68D28);
              }
              v27 = v40 - 1;
              v41 = *(_QWORD *)(v21 + 16);
              v42 = (unsigned int **)(v41 + 16 * v27);
              if (v42 != (unsigned int **)v31)
              {
                v48 = *v31;
                *v31 = 0;
                v49 = *v42;
                *v42 = 0;
                v50 = (unsigned int *)*v31;
                *v31 = (JSC::JSRunLoopTimer *)v49;
                if (v50)
                {
                  v57 = v50 + 2;
                  do
                  {
                    v35 = __ldaxr(v57);
                    v36 = v35 - 1;
                  }
                  while (__stlxr(v36, v57));
                  if (!v36)
                  {
                    atomic_store(1u, v50 + 2);
                    v67 = v26;
                    v70 = v25;
                    v62 = v30;
                    v64 = v27;
                    v59 = (unsigned int **)(v41 + 16 * v27);
                    v60 = v41;
                    (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
                    v42 = v59;
                    v41 = v60;
                    v30 = v62;
                    v27 = v64;
                    v29 = j;
                    v26 = v67;
                    v25 = v70;
                  }
                }
                v51 = *v42;
                *v42 = (unsigned int *)v48;
                if (v51)
                {
                  v58 = v51 + 2;
                  do
                  {
                    v37 = __ldaxr(v58);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v58));
                  if (!v38)
                  {
                    atomic_store(1u, v51 + 2);
                    v68 = v26;
                    v71 = v25;
                    v63 = v30;
                    v65 = v27;
                    v56 = v29;
                    v61 = v41;
                    (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
                    v41 = v61;
                    v30 = v63;
                    v29 = v56;
                    v27 = v65;
                    v26 = v68;
                    v25 = v71;
                  }
                }
                v52 = v30 + 16 * v29;
                v53 = v41 + 16 * v27;
                v54 = *(_QWORD *)(v52 + 8);
                *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 8);
                *(_QWORD *)(v53 + 8) = v54;
                v55 = *(unsigned int *)(v21 + 28);
                if (!(_DWORD)v55)
                {
LABEL_59:
                  __break(0xC471u);
                  JUMPOUT(0x198A68D18);
                }
                v41 = *(_QWORD *)(v21 + 16);
                v27 = v55 - 1;
              }
              v43 = *(unsigned int **)(v41 + 16 * v27);
              *(_QWORD *)(v41 + 16 * v27) = 0;
              if (v43)
              {
                v47 = v43 + 2;
                do
                {
                  v33 = __ldaxr(v47);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, v47));
                if (!v34)
                {
                  atomic_store(1u, v43 + 2);
                  v66 = v26;
                  v69 = v25;
                  v46 = v27;
                  (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
                  LODWORD(v27) = v46;
                  v26 = v66;
                  v25 = v69;
                }
              }
              *(_DWORD *)(v21 + 28) = v27;
              --j;
            }
            else
            {
              if (v27 <= j)
              {
                __break(0xC471u);
                JUMPOUT(0x198A68D20);
              }
              v32 = v30 + 16 * j;
              if (*(double *)(v32 + 8) < v26)
                v26 = *(double *)(v32 + 8);
            }
          }
        }
        v44 = fmax(v26 - v25, 0.0);
      }
      else
      {
        v44 = 315360000.0;
      }
      WTF::RunLoop::TimerBase::start(*(_QWORD *)(v21 + 8), 0, v44);
    }
  }
LABEL_35:
  v45 = __ldxr((unsigned __int8 *)this);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSRunLoopTimer::Manager::timeUntilFire(JSC::JSRunLoopTimer::Manager *this, JSC::JSRunLoopTimer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t result;
  char v32;
  char **v33;
  char *v34;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
LABEL_4:
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *((_QWORD *)a2 + 2);
    v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v12 & ((v16 >> 31) ^ v16);
    for (i = 1; ; ++i)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v11 + 16 * v17);
      if (v20 != -1)
      {
        if (!v20)
          goto LABEL_27;
        if (v20 == v13)
          break;
      }
      v17 = (v19 + i) & v12;
    }
    if ((_DWORD)v19 != *(_DWORD *)(v11 - 4))
    {
      v21 = *(_QWORD *)(v11 + 16 * v19 + 8);
      v22 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v22)
      {
        v23 = (double *)(*(_QWORD *)(v21 + 16) + 8);
        v24 = 16 * v22;
        while (*((JSC::JSRunLoopTimer **)v23 - 1) != a2)
        {
          v23 += 2;
          v24 -= 16;
          if (!v24)
            goto LABEL_15;
        }
        v27 = mach_absolute_time();
        v29 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v29 != -1)
        {
          v34 = &v32;
          v33 = &v34;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v28) = dword_1ECF4400C;
        v26 = COERCE_UNSIGNED_INT64(*v23+ (double)(v27 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v28 * -1000000000.0)) & 0xFFFFFFFFFFFFFF00;
        v25 = COERCE_UNSIGNED_INT64(*v23+ (double)(v27 * WTF::machTimebaseInfo(void)::timebaseInfo)/ ((double)v28* -1000000000.0));
      }
      else
      {
LABEL_15:
        v25 = 0;
        v26 = 0;
      }
      v30 = __ldxr((unsigned __int8 *)this);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)this))
          return v26 | v25;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
      return v26 | v25;
    }
  }
LABEL_27:
  result = 205;
  __break(0xC471u);
  return result;
}

void JSC::JSRunLoopTimer::~JSRunLoopTimer(JSC::JSRunLoopTimer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

uint64_t JSC::JSRunLoopTimer::timeUntilFire(JSC::JSRunLoopTimer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v11;
  char **v12;
  char *v13;

  v9 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v9 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  return JSC::JSRunLoopTimer::Manager::timeUntilFire((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, this, a3, a4, a5, a6, a7, a8);
}

void JSC::JSRunLoopTimer::setTimeUntilFire(uint64_t a1, double a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  _QWORD v62[2];
  char v63;
  _QWORD *v64;

  v5 = (unsigned __int8 *)(a1 + 33);
  if (__ldaxr((unsigned __int8 *)(a1 + 33)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 33);
    goto LABEL_4;
  }
  if (__stxr(1u, v5))
    goto LABEL_3;
LABEL_4:
  *(_BYTE *)(a1 + 34) = 1;
  v7 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v7 != -1)
  {
    v62[0] = &v63;
    v64 = v62;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  v8 = JSC::JSRunLoopTimer::Manager::shared(void)::manager;
  v9 = mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v62[0] = &v63;
    v64 = v62;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v11 = WTF::machTimebaseInfo(void)::timebaseInfo;
  LODWORD(v2) = dword_1ECF4400C;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8);
LABEL_11:
  v13 = *(_QWORD *)(v8 + 8);
  if (!v13)
    goto LABEL_77;
  v14 = (double)(v9 * v11) / ((double)v2 * 1000000000.0);
  v15 = a2 + v14;
  v16 = *(_DWORD *)(v13 - 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v16 & ((v20 >> 31) ^ v20);
  for (i = 1; ; v21 = (v23 + i++) & v16)
  {
    v23 = v21;
    v24 = *(_QWORD *)(v13 + 16 * v21);
    if (v24 != -1)
    {
      if (!v24)
        goto LABEL_77;
      if (v24 == v17)
        break;
    }
  }
  if ((_DWORD)v23 == *(_DWORD *)(v13 - 4))
  {
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x198A694D0);
  }
  v25 = *(_QWORD *)(v13 + 16 * v23 + 8);
  v26 = *(_QWORD **)(v25 + 16);
  v27 = *(unsigned int *)(v25 + 28);
  v28 = a2 + v14;
  if ((_DWORD)v27)
  {
    v29 = 0;
    v30 = &v26[2 * v27];
    v28 = v15;
    while (2)
    {
      v31 = v26;
      while (1)
      {
        v32 = *v31;
        v31 += 2;
        if (v32 == a1)
          break;
        if (*((double *)v26 + 1) < v28)
          v28 = *((double *)v26 + 1);
        v26 = v31;
        if (v31 == v30)
        {
          if ((v29 & 1) == 0)
            goto LABEL_68;
          goto LABEL_35;
        }
      }
      *((double *)v26 + 1) = v15;
      if (v15 < v28)
        v28 = v15;
      v26 += 2;
      v29 = 1;
      if (v31 != v30)
        continue;
      break;
    }
  }
  else
  {
LABEL_68:
    v50 = (unsigned int *)(a1 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
    v62[0] = a1;
    *(double *)&v62[1] = v15;
    v52 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v52 == *(_DWORD *)(v25 + 24))
    {
      v54 = (uint64_t *)WTF::Vector<std::pair<WTF::Ref<JSC::JSRunLoopTimer,WTF::RawPtrTraits<JSC::JSRunLoopTimer>,WTF::DefaultRefDerefTraits<JSC::JSRunLoopTimer>>,WTF::MonotonicTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v52 + 1, (unint64_t)v62);
      v55 = (_QWORD *)(*(_QWORD *)(v25 + 16) + 16 * *(unsigned int *)(v25 + 28));
      v56 = *v54;
      *v54 = 0;
      *v55 = v56;
      v55[1] = v54[1];
      v57 = (unsigned int *)v62[0];
      ++*(_DWORD *)(v25 + 28);
      v62[0] = 0;
      if (v57)
      {
        v58 = v57 + 2;
        do
        {
          v59 = __ldaxr(v58);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v58));
        if (!v60)
        {
          atomic_store(1u, v57 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
        }
      }
    }
    else
    {
      v53 = *(_QWORD *)(v25 + 16) + 16 * v52;
      *(_QWORD *)v53 = a1;
      *(double *)(v53 + 8) = v15;
      ++*(_DWORD *)(v25 + 28);
    }
  }
LABEL_35:
  WTF::RunLoop::TimerBase::start(*(_QWORD *)(v25 + 8), 0, fmax(v28 - v14, 0.0));
  v39 = __ldxr((unsigned __int8 *)v8);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v8, 0, v33, v34, v35, v36, v37, v38);
  v40 = __ldxr(v5);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, v5))
LABEL_44:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v5, 0, v33, v34, v35, v36, v37, v38);
  v41 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
LABEL_47:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
    goto LABEL_48;
  }
  if (__stxr(1u, v41))
    goto LABEL_47;
LABEL_48:
  v43 = *(_QWORD **)(a1 + 24);
  if (!v43)
  {
    v46 = 0;
    v44 = 0;
LABEL_65:
    v45 = &v43[v44];
    goto LABEL_55;
  }
  v44 = *((unsigned int *)v43 - 1);
  v45 = &v43[v44];
  if (!*((_DWORD *)v43 - 3))
  {
    v46 = &v43[v44];
    goto LABEL_65;
  }
  v46 = v43;
  if ((_DWORD)v44)
  {
    v47 = 8 * v44;
    v46 = v43;
    while ((unint64_t)(*v46 + 1) <= 1)
    {
      ++v46;
      v47 -= 8;
      if (!v47)
      {
        v46 = v45;
        break;
      }
    }
  }
LABEL_55:
  if (v43)
    v48 = &v43[*((unsigned int *)v43 - 1)];
  else
    v48 = 0;
  while (v46 != v48)
  {
    v61 = v46 + 1;
    (*(void (**)(_QWORD))(*(_QWORD *)*v46 + 16))(*v46);
    v46 = v45;
    if (v61 != v45)
    {
      v46 = v61;
      while ((unint64_t)(*v46 + 1) <= 1)
      {
        if (++v46 == v45)
        {
          v46 = v45;
          break;
        }
      }
    }
  }
  v49 = __ldxr(v41);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, v41))
LABEL_62:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, v33, v34, v35, v36, v37, v38);
}

void JSC::JSRunLoopTimer::cancelTimer(JSC::JSRunLoopTimer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char **v20;
  char *v21;

  v9 = (unsigned __int8 *)this + 33;
  if (__ldaxr((unsigned __int8 *)this + 33))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 33);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  *((_BYTE *)this + 34) = 0;
  v11 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v11 != -1)
  {
    v21 = &v19;
    v20 = &v21;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, this, a3, a4, a5, a6, a7, a8);
  v18 = __ldxr(v9);
  if (v18 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v12, v13, v14, v15, v16, v17);
}

void JSC::JSRunLoopTimer::addTimerSetNotification(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  int v37;

  v10 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
LABEL_4:
  v14 = *(_QWORD *)(a1 + 24);
  v13 = (uint64_t *)(a1 + 24);
  v12 = v14;
  if (v14
    || (WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::rehash(v13, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v13) != 0))
  {
    v15 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (_QWORD *)(v12 + 8 * v20);
  v22 = *v21;
  if (*v21)
  {
    v36 = 0;
    v37 = 1;
    while (v22 != v16)
    {
      if (v22 == -1)
        v36 = v21;
      v20 = (v20 + v37) & v15;
      v21 = (_QWORD *)(v12 + 8 * v20);
      v22 = *v21;
      ++v37;
      if (!*v21)
      {
        if (v36)
        {
          *v36 = 0;
          --*(_DWORD *)(*v13 - 16);
          v16 = *a2;
          v21 = v36;
        }
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v16)
    {
      v23 = (unsigned int *)(v16 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v25 = (unsigned int *)*v21;
      *v21 = v16;
      if (v25)
      {
        v26 = v25 + 2;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v25 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
      }
    }
    else
    {
      *v21 = 0;
    }
    v29 = *v13;
    if (*v13)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v13;
    if (*v13)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        goto LABEL_22;
    }
    else if (3 * v34 > 4 * v33)
    {
      goto LABEL_22;
    }
    WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::expand(v13, (uint64_t)v21, a3, a4, a5, a6, a7, a8);
  }
LABEL_22:
  v35 = __ldxr(v10);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v10))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::JSRunLoopTimer::removeTimerSetNotification(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v31;
  int v32;

  v10 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 32);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v14 = *(_QWORD *)(a1 + 24);
  v13 = (uint64_t *)(a1 + 24);
  v12 = v14;
  if (v14)
  {
    v15 = *(_DWORD *)(v12 - 8);
    v16 = ~(*a2 << 32) + *a2;
    v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
    v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
    v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ ((_DWORD)v18 + ~((_DWORD)v18 << 27)));
    v20 = *(_QWORD *)(v12 + 8 * v19);
    if (v20 != *a2)
    {
      v32 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v32) & v15;
        v20 = *(_QWORD *)(v12 + 8 * v19);
        ++v32;
        if (v20 == *a2)
          goto LABEL_6;
      }
      v19 = *(unsigned int *)(v12 - 4);
    }
LABEL_6:
    if (v19 != *(_DWORD *)(v12 - 4))
    {
      v21 = *(unsigned int **)(v12 + 8 * v19);
      *(_QWORD *)(v12 + 8 * v19) = -1;
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v21 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      ++*(_DWORD *)(*v13 - 16);
      v25 = *v13;
      if (*v13)
        v26 = *(_DWORD *)(v25 - 12) - 1;
      else
        v26 = -1;
      *(_DWORD *)(v25 - 12) = v26;
      v27 = *v13;
      if (*v13)
      {
        v28 = 6 * *(_DWORD *)(v27 - 12);
        v29 = *(_DWORD *)(v27 - 4);
        if (v28 < v29 && v29 >= 9)
          WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::rehash(v13, v29 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  v31 = __ldxr(v10);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v10))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::JSScope::visitChildren(JSC::JSScope *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSScope::visitChildren(JSC::JSScope *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(JSC::JSScope *this, JSC::JSGlobalObject *a2, JSC::JSScope *a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v11;
  JSC::JSGlobalObject *v12;
  int v13;
  unint64_t v14;
  int hasProperty;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v35;
  int v36;
  unsigned __int8 v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;

  v9 = a2;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v12 = v9;
    v13 = *((unsigned __int8 *)v9 + 5);
    v14 = (unint64_t)v9;
    if (v13 == 56)
      v14 = *((_QWORD *)v9 + 3);
    v9 = (JSC::JSGlobalObject *)*((_QWORD *)v9 + 2);
    if (!v9)
      break;
    if (v13 != 56 && (v13 != 53 || (*(_BYTE *)(*((_QWORD *)v12 + 3) + 21) & 0x1C) != 0x10))
    {
      hasProperty = JSC::JSObject::hasProperty(v14, (uint64_t)this, *(_QWORD *)a3, a4, a5, a6, a7, a8);
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v14 = 0;
        goto LABEL_18;
      }
      if (hasProperty)
      {
        if (*((_BYTE *)v12 + 5) != 56)
          goto LABEL_18;
        v16 = *((_QWORD *)this + 7);
        v17 = JSC::JSObject::get((unsigned int *)v14, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 2784), (uint64_t)a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v16 + 80))
        {
          v39 = v17;
          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            goto LABEL_18;
          }
          v17 = v39;
          if ((v39 & 0xFFFE000000000002) != 0)
            goto LABEL_18;
        }
        else if ((v17 & 0xFFFE000000000002) != 0)
        {
          goto LABEL_18;
        }
        if (*(unsigned __int8 *)(v17 + 5) < 0x17u)
          goto LABEL_18;
        v26 = JSC::JSObject::get((unsigned int *)v17, (uint64_t)this, *(_QWORD *)a3, (uint64_t)a4, a5, a6, a7, a8);
        v40 = v26;
        if (*(_DWORD *)(v16 + 80))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v27, v28, v29, v30, v31, v32, v33))
            goto LABEL_18;
        }
        if (!JSC::JSValue::toBoolean(&v40, (uint64_t)this))
          goto LABEL_18;
      }
      if (*((_BYTE *)v12 + 5) == 53 && (*(_BYTE *)(*((_QWORD *)v12 + 3) + 21) & 0x1C) == 0)
        goto LABEL_18;
    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) + 80);
  if (!v18)
    goto LABEL_18;
  v24 = JSC::JSObject::hasProperty(v14, (uint64_t)this, *(_QWORD *)a3, a4, a5, a6, a7, a8);
  v25 = v24;
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (hasExceptionsAfterHandlingTraps)
      v35 = 0;
    else
      v35 = v14;
    if (((hasExceptionsAfterHandlingTraps | v25) & 1) != 0)
    {
      v18 = v35;
      goto LABEL_44;
    }
  }
  else if ((v24 & 1) != 0)
  {
    v18 = v14;
    goto LABEL_44;
  }
  if (*(_BYTE *)(v18 + 5) == 56)
    v18 = *(_QWORD *)(v18 + 24);
  v36 = JSC::JSObject::hasProperty(v18, (uint64_t)this, *(_QWORD *)a3, a4, a5, a6, a7, a8);
  v37 = v36;
  if (!*((_DWORD *)v11 + 20))
  {
    if (!v36)
      goto LABEL_18;
    goto LABEL_44;
  }
  v38 = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v38)
    v18 = 0;
  if (((v38 | v37) & 1) != 0)
LABEL_44:
    v14 = v18;
LABEL_18:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v19 = *(unsigned __int8 *)(v14 + 5);
  if ((v19 - 57) < 0xFFFFFFFA || v14 == 0 || (v19 - 55) < 0xFFFFFFFC)
    return 10;
  v22 = *(_QWORD *)(v14 + 24);
  if (!v22 || v19 != 51 && (*(_BYTE *)(v22 + 21) & 0x1C) != 0)
    return 10;
  return v14;
}

unsigned int *JSC::JSScope::resolve(JSC::JSScope *this, unsigned int **a2, JSC::JSScope *a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  unsigned int *v13;
  uint64_t v14;
  int hasProperty;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  const JSC::PropertyTable *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _BOOL4 v56;
  uint64_t v57;

  v11 = *((_QWORD *)this + 7);
  while (1)
  {
    v12 = (JSC::JSGlobalObject *)a2;
    v13 = (unsigned int *)a2;
    if (*((_BYTE *)a2 + 5) == 56)
      v13 = a2[3];
    a2 = (unsigned int **)a2[2];
    if (!a2)
      break;
    hasProperty = JSC::JSObject::hasProperty((unint64_t)v13, (uint64_t)this, *(_QWORD *)a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      v36 = *(_DWORD *)(v11 + 80);
      if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    if (hasProperty)
    {
      if (*((_BYTE *)v12 + 5) != 56)
        return v13;
      v16 = *((_QWORD *)this + 7);
      v17 = JSC::JSObject::get(v13, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 2784), (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v16 + 80))
      {
        v37 = v17;
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v18, v19, v20, v21, v22, v23, v24))
          return v13;
        v17 = v37;
        if ((v37 & 0xFFFE000000000002) != 0)
          return v13;
      }
      else if ((v17 & 0xFFFE000000000002) != 0)
      {
        return v13;
      }
      if (*(unsigned __int8 *)(v17 + 5) < 0x17u)
        return v13;
      v57 = JSC::JSObject::get((unsigned int *)v17, (uint64_t)this, *(_QWORD *)a3, v20, v21, v22, v23, v24);
      if (*(_DWORD *)(v16 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v38, v39, v40, v41, v42, v43, v44))
          return v13;
      }
      if ((JSC::JSValue::toBoolean(&v57, (uint64_t)this) & 1) == 0)
        return v13;
    }
  }
  v26 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) + 80);
  if (!v26)
    return v13;
  v27 = JSC::JSObject::hasProperty((unint64_t)v13, (uint64_t)this, *(_QWORD *)a3, a4, a5, a6, a7, a8);
  v35 = v27;
  if (*(_DWORD *)(v11 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v28, v29, (uint64_t)v30, v31, v32, v33, v34);
    if (hasExceptionsAfterHandlingTraps)
      v46 = 0;
    else
      v46 = v13;
    if (((hasExceptionsAfterHandlingTraps | v35) & 1) != 0)
      return v46;
  }
  else if ((v27 & 1) != 0)
  {
    return v13;
  }
  if (*(_BYTE *)(v26 + 5) == 56)
    v26 = *(_QWORD *)(v26 + 24);
  v47 = JSC::JSObject::hasProperty(v26, (uint64_t)this, *(_QWORD *)a3, v30, v31, v32, v33, v34);
  v55 = v47;
  if (!*(_DWORD *)(v11 + 80))
  {
    if (!v47)
      return v13;
    return (unsigned int *)v26;
  }
  v56 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v48, v49, v50, v51, v52, v53, v54);
  if (v56)
    v26 = 0;
  if (((v56 | v55) & 1) != 0)
    return (unsigned int *)v26;
  return v13;
}

void JSC::JSScope::abstractResolve(JSC::VM **a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t *v9;
  const WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  JSC::VM *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BYTE **v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _QWORD **v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  JSC::VM *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  __int16 v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  JSC::AbstractModuleRecord *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  int v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  WTF::StringImpl *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  WTF::StringImpl *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  WTF::StringImpl *v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  int v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  _DWORD *v211;
  _DWORD *v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  JSC::AbstractModuleRecord *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unsigned int v231;
  uint64_t *v232;
  uint64_t v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  WTF::StringImpl *v238;
  int v239;
  unsigned int *v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  int v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  int v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t (*v304)(const WTF::StringImpl *, const WTF::StringImpl *, _QWORD, _BYTE *);
  char v305;
  WTF::StringImpl *v306;
  uint64_t v307;
  unsigned __int8 *v308;
  unsigned int v309;
  unint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  JSC::VM *v318;
  uint64_t v319;
  unsigned int v320;
  _QWORD *v321;
  unint64_t StatusReg;
  _QWORD *v323;
  char v324;
  int v325;
  __int128 v326;
  WTF::StringImpl *v327[2];
  __int128 v328;
  WTF::StringImpl *v329;
  _BYTE v330[56];
  JSC::VM *v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v320 = a7;
  v324 = 0;
  v325 = a5;
  v9 = (unint64_t *)a4;
  v10 = a3;
  v11 = a2;
  v335 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a9 + 8) = 0u;
  v319 = a9 + 8;
  *(_DWORD *)a9 = 12;
  *(_OWORD *)(a9 + 24) = 0u;
  v321 = (_QWORD *)(a9 + 24);
  *(_OWORD *)(a9 + 40) = 0u;
  if (a6 >= 6)
  {
    switch((int)a6)
    {
      case 6:
      case 7:
      case 8:
      case 9:
      case 11:
        v324 = 1;
        break;
      case 10:
        break;
      case 12:
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198A6B7CCLL);
    }
  }
  if (a3)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v323 = (_QWORD *)(a9 + 16);
    while (1)
    {
      v14 = a1[7];
      v15 = *((_DWORD *)v14 + 22);
      *((_DWORD *)v14 + 22) = v15 + 1;
      if (!v15)
      {
        v16 = *((_QWORD *)v14 + 2);
        if (v16)
        {
          if (*((_QWORD *)v14 + 3) == v16)
          {
            *((_QWORD *)v14 + 2) = 0;
            v219 = (unsigned int *)((char *)v14 + 80);
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 & 0xFFFFFFEF, v219));
            *((_BYTE *)v14 + 86) = 1;
          }
        }
      }
      v17 = *((unsigned __int8 *)v10 + 5);
      if ((v17 - 53) <= 1)
      {
        v18 = *((_QWORD *)v10 + 3);
        v19 = (unsigned __int8 *)(v18 + 20);
        if (__ldaxr((unsigned __int8 *)(v18 + 20)))
        {
          __clrex();
          goto LABEL_9;
        }
        if (__stxr(1u, v19))
LABEL_9:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v18 + 20);
        v21 = *(_QWORD *)(v18 + 8);
        if (v21)
        {
          v22 = *v9;
          v23 = *(_DWORD *)(*v9 + 16);
          if ((v23 & 0x20) != 0)
          {
            v24 = *(_DWORD *)(v21 - 8);
            v25 = v24 & (*(_DWORD *)(v22 + 32) >> 8);
            v26 = *(_QWORD *)(v21 + 16 * v25);
            if (v26 != v22)
              goto LABEL_13;
          }
          else
          {
            v24 = *(_DWORD *)(v21 - 8);
            v25 = v24 & (v23 >> 8);
            v26 = *(_QWORD *)(v21 + 16 * v25);
            if (v26 != v22)
            {
LABEL_13:
              v27 = 1;
              while (v26)
              {
                v25 = ((_DWORD)v25 + v27) & v24;
                v26 = *(_QWORD *)(v21 + 16 * v25);
                ++v27;
                if (v26 == v22)
                  goto LABEL_16;
              }
              goto LABEL_74;
            }
          }
LABEL_16:
          if (v25 != *(_DWORD *)(v21 - 4))
          {
            v28 = v21 + 16 * v25;
            v31 = *(unint64_t **)(v28 + 8);
            v29 = (unint64_t *)(v28 + 8);
            v30 = v31;
            if ((v31 & 1) == 0)
              v29 = v30;
            v32 = *v29;
            if (v325 == 1 && (v32 & 2) != 0)
              goto LABEL_420;
            if (v324)
              v33 = 9;
            else
              v33 = 3;
            if ((v30 & 1) != 0)
              v34 = 0;
            else
              v34 = v30[1];
            *(_DWORD *)a9 = v33;
            *(_QWORD *)(a9 + 8) = v11;
            *(_QWORD *)(a9 + 16) = 0;
            *(_QWORD *)(a9 + 24) = v10;
            *(_QWORD *)(a9 + 32) = v34;
            v35 = *(_QWORD *)(a9 + 48);
            *(_QWORD *)(a9 + 40) = (v32 >> 6);
            *(_QWORD *)(a9 + 48) = 0;
            if (!v35)
              goto LABEL_28;
            v36 = *(_DWORD *)v35 - 2;
            if (*(_DWORD *)v35 != 2)
              goto LABEL_27;
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v66 = *(_QWORD *)(StatusReg + 752);
            if (!v66)
              goto LABEL_389;
            if (v35 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v35 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v35)) & 1) == 0)
            {
              if (v35 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v35 >> 24)
                goto LABEL_434;
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v35 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v35) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 != 1)
                goto LABEL_384;
            }
            v67 = *(unsigned int *)(v66 + 8000);
            if (v67 >= 0x3E7)
            {
LABEL_390:
              pas_thread_local_cache_append_deallocation_slow(v66, v35, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              goto LABEL_28;
            }
LABEL_108:
            *(_QWORD *)(v66 + 8 * v67) = v35 | 0x5000000000000;
            *(_DWORD *)(v66 + 8000) = v67 + 1;
            v80 = __ldxr(v19);
            if (v80 == 1)
              goto LABEL_29;
            goto LABEL_109;
          }
        }
LABEL_74:
        v68 = __ldxr(v19);
        if (v68 == 1)
        {
          if (!__stlxr(0, v19))
            goto LABEL_76;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v18 + 20), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_76:
        if (*((_BYTE *)v10 + 5) != 54)
        {
LABEL_77:
          if ((*(_BYTE *)(v18 + 21) & 1) == 0)
          {
            v48 = 0;
            v69 = *((_DWORD *)v14 + 22) - 1;
            *((_DWORD *)v14 + 22) = v69;
            if (!v69)
              goto LABEL_113;
            goto LABEL_114;
          }
          v48 = 0;
          v324 = 1;
          goto LABEL_112;
        }
        v124 = (JSC::AbstractModuleRecord *)*((_QWORD *)v10
                                            + (*(_DWORD *)(*((_QWORD *)v10 + 3) + 16) + 1)
                                            + 4);
        v125 = *((_QWORD *)v124 + 5);
        if (!v125)
          goto LABEL_215;
        v126 = *v9;
        v127 = *(_DWORD *)(*v9 + 16);
        if ((v127 & 0x20) != 0)
          v127 = *(_DWORD *)(v126 + 32);
        v128 = *(_DWORD *)(v125 - 8);
        v129 = v128 & (v127 >> 8);
        v130 = (uint64_t *)(v125 + 40 * v129);
        v131 = *v130;
        if (*v130 != v126)
        {
          v132 = 1;
          while (v131)
          {
            v129 = (v129 + v132) & v128;
            v130 = (uint64_t *)(v125 + 40 * v129);
            v131 = *v130;
            ++v132;
            if (*v130 == v126)
              goto LABEL_214;
          }
          v130 = (uint64_t *)(v125 + 40 * *(unsigned int *)(v125 - 4));
        }
LABEL_214:
        if (v130 == (uint64_t *)(v125 + 40 * *(unsigned int *)(v125 - 4)))
        {
LABEL_215:
          LODWORD(v326) = 1;
          *((_QWORD *)&v326 + 1) = 0;
          v327[0] = 0;
LABEL_216:
          if (*((_QWORD *)v14 + 2))
          {
            __break(0xC471u);
            JUMPOUT(0x198A6B510);
          }
          if (!(_DWORD)v326)
          {
            v191 = *(_QWORD *)(*((_QWORD *)&v326 + 1) + 112);
            v192 = *(_QWORD *)(v191 + 24);
            v193 = (unsigned __int8 *)(v192 + 20);
            if (__ldaxr((unsigned __int8 *)(v192 + 20)))
            {
              __clrex();
              goto LABEL_300;
            }
            if (__stxr(1u, v193))
LABEL_300:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v192 + 20);
            v195 = v327[0];
            v196 = *(_QWORD *)(v192 + 8);
            v197 = *(_DWORD *)(v196 - 8);
            v198 = *((_DWORD *)v327[0] + 4);
            if ((v198 & 0x20) != 0)
              v198 = *((_DWORD *)v327[0] + 8);
            v199 = v197 & (v198 >> 8);
            v200 = *(WTF::StringImpl **)(v196 + 16 * v199);
            if (v200 != v327[0])
            {
              v201 = 1;
              while (v200)
              {
                v199 = ((_DWORD)v199 + v201) & v197;
                v200 = *(WTF::StringImpl **)(v196 + 16 * v199);
                ++v201;
                if (v200 == v327[0])
                  goto LABEL_351;
              }
              v199 = *(unsigned int *)(v196 - 4);
            }
LABEL_351:
            v235 = *(_QWORD *)(v196 + 16 * v199 + 8);
            if ((v235 & 1) != 0)
            {
              v236 = 0;
            }
            else
            {
              v237 = v235;
              v235 = *(_QWORD *)v235;
              v236 = *(_QWORD *)(v237 + 8);
            }
            if (v327[0])
              *(_DWORD *)v327[0] += 2;
            *(_DWORD *)a9 = 5;
            *(_QWORD *)(a9 + 8) = v11;
            *(_QWORD *)(a9 + 16) = 0;
            *(_QWORD *)(a9 + 24) = v191;
            *(_QWORD *)(a9 + 32) = v236;
            v238 = *(WTF::StringImpl **)(a9 + 48);
            *(_QWORD *)(a9 + 40) = (v235 >> 6);
            *(_QWORD *)(a9 + 48) = v195;
            if (v238)
            {
              if (*(_DWORD *)v238 == 2)
              {
                WTF::StringImpl::~StringImpl(v238, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
              }
              else
              {
                *(_DWORD *)v238 -= 2;
              }
            }
            v239 = __ldxr(v193);
            if (v239 == 1)
            {
              if (!__stlxr(0, v193))
                goto LABEL_363;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v192 + 20), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_363:
            if (v327[0])
            {
              if (*(_DWORD *)v327[0] == 2)
              {
                WTF::StringImpl::~StringImpl(v327[0], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v249, v250, v251, v252, v253, v254, v255, v256);
              }
              else
              {
                *(_DWORD *)v327[0] -= 2;
              }
            }
LABEL_111:
            v48 = 1;
            goto LABEL_112;
          }
          if (v327[0])
          {
            if (*(_DWORD *)v327[0] == 2)
            {
              WTF::StringImpl::~StringImpl(v327[0], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
            }
            else
            {
              *(_DWORD *)v327[0] -= 2;
            }
          }
          goto LABEL_77;
        }
        v318 = a1[7];
        v210 = *((_DWORD *)v130 + 2);
        *(_DWORD *)v330 = v210;
        v211 = (_DWORD *)v130[2];
        if (v211)
          *v211 += 2;
        *(_QWORD *)&v330[8] = v211;
        v212 = (_DWORD *)v130[3];
        if (v212)
          *v212 += 2;
        *(_QWORD *)&v330[16] = v212;
        v213 = (WTF::StringImpl *)v130[4];
        if (v213)
          *(_DWORD *)v213 += 2;
        *(_QWORD *)&v330[24] = v213;
        v330[32] = 1;
        if (v210 == 1)
        {
          LODWORD(v326) = 1;
          *((_QWORD *)&v326 + 1) = 0;
          v327[0] = 0;
        }
        else
        {
          v216 = (JSC::AbstractModuleRecord *)JSC::AbstractModuleRecord::hostResolveImportedModule(v124, a1, (JSC::VM **)&v330[8], a4, a5, a6, a7, a8);
          if (*((_DWORD *)v318 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v318, v214, v215, a4, a5, a6, a7, a8))
          {
            LODWORD(v326) = 3;
            *((_QWORD *)&v326 + 1) = 0;
            v327[0] = 0;
          }
          else
          {
            JSC::AbstractModuleRecord::resolveExport(v216, a1, (WTF::StringImpl **)&v330[16], a4, a5, a6, a7, a8, (uint64_t)&v326);
          }
          if (!v330[32])
            goto LABEL_216;
          v213 = *(WTF::StringImpl **)&v330[24];
        }
        *(_QWORD *)&v330[24] = 0;
        if (v213)
        {
          if (*(_DWORD *)v213 == 2)
          {
            WTF::StringImpl::~StringImpl(v213, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
          }
          else
          {
            *(_DWORD *)v213 -= 2;
          }
        }
        v217 = *(WTF::StringImpl **)&v330[16];
        *(_QWORD *)&v330[16] = 0;
        if (v217)
        {
          if (*(_DWORD *)v217 == 2)
          {
            WTF::StringImpl::~StringImpl(v217, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
          }
          else
          {
            *(_DWORD *)v217 -= 2;
          }
        }
        v218 = *(WTF::StringImpl **)&v330[8];
        *(_QWORD *)&v330[8] = 0;
        if (v218)
        {
          if (*(_DWORD *)v218 == 2)
          {
            WTF::StringImpl::~StringImpl(v218, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
          }
          else
          {
            *(_DWORD *)v218 -= 2;
          }
        }
        goto LABEL_216;
      }
      if (v17 == 52)
        break;
      if (v17 == 51)
      {
        v50 = *((_QWORD *)v10 + 3);
        v19 = (unsigned __int8 *)(v50 + 20);
        if (__ldaxr((unsigned __int8 *)(v50 + 20)))
        {
          __clrex();
          goto LABEL_52;
        }
        if (__stxr(1u, v19))
LABEL_52:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v50 + 20);
        v52 = *(_QWORD *)(v50 + 8);
        if (v52)
        {
          v53 = *v9;
          v54 = *(_DWORD *)(*v9 + 16);
          if ((v54 & 0x20) != 0)
            v54 = *(_DWORD *)(v53 + 32);
          v55 = *(_DWORD *)(v52 - 8);
          v56 = v55 & (v54 >> 8);
          v57 = *(_QWORD *)(v52 + 16 * v56);
          if (v57 != v53)
          {
            v58 = 1;
            while (v57)
            {
              v56 = ((_DWORD)v56 + v58) & v55;
              v57 = *(_QWORD *)(v52 + 16 * v56);
              ++v58;
              if (v57 == v53)
                goto LABEL_60;
            }
            goto LABEL_101;
          }
LABEL_60:
          if (v56 == *(_DWORD *)(v52 - 4))
            goto LABEL_101;
          v59 = (_BYTE **)(v52 + 16 * v56 + 8);
          if (v325 == 1)
          {
            v150 = *v59;
            if (((unint64_t)*v59 & 1) != 0)
              v150 = v59;
            if ((*v150 & 2) != 0)
            {
LABEL_420:
              *(_DWORD *)v330 = 12;
              memset(&v330[8], 0, 48);
              JSC::ResolveOp::operator=(a9, (__int128 *)v330, (uint64_t)a3, a4, a5, a6, a7, a8);
              v285 = *(WTF::StringImpl **)&v330[48];
              *(_QWORD *)&v330[48] = 0;
              if (v285)
              {
                if (*(_DWORD *)v285 == 2)
                {
                  WTF::StringImpl::~StringImpl(v285, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
                }
                else
                {
                  *(_DWORD *)v285 -= 2;
                }
              }
              goto LABEL_28;
            }
          }
          if (v324)
            v60 = 7;
          else
            v60 = 1;
          v61 = (unint64_t)*v59;
          if ((v61 & 1) != 0)
          {
            v62 = 0;
          }
          else
          {
            v63 = v61;
            v61 = *(_QWORD *)v61;
            v62 = *(_QWORD *)(v63 + 8);
          }
          v64 = (v61 >> 10) & 0xFFFFFFF;
          if (v64 >= *((unsigned int *)v10 + 13))
          {
            __break(0xC471u);
            JUMPOUT(0x198A6B8E4);
          }
          v65 = *(_QWORD *)(*((_QWORD *)v10 + 5) + 8 * v64) + 8 * ((v61 >> 6) & 0xF);
          *(_DWORD *)a9 = v60;
          *(_QWORD *)(a9 + 8) = v11;
          *v323 = 0;
          *(_QWORD *)(a9 + 24) = 0;
          *(_QWORD *)(a9 + 32) = v62;
          *(_QWORD *)(a9 + 40) = v65;
          v35 = *(_QWORD *)(a9 + 48);
          *(_QWORD *)(a9 + 48) = 0;
          if (v35)
          {
            v36 = *(_DWORD *)v35 - 2;
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v66 = *(_QWORD *)(StatusReg + 752);
              if (v66)
              {
                if (!(v35 >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v35 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v35)) & 1) != 0)
                {
LABEL_72:
                  v67 = *(unsigned int *)(v66 + 8000);
                  if (v67 >= 0x3E7)
                    goto LABEL_390;
                  goto LABEL_108;
                }
                if (v35 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > v35 >> 24)
                {
                  a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v35 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v35) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)a4 == 1)
                    goto LABEL_72;
LABEL_384:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v66, v35, 1, a4, a5, a6, a7, a8);
                  goto LABEL_28;
                }
LABEL_434:
                a4 = 0;
                goto LABEL_384;
              }
LABEL_389:
              pas_try_deallocate_slow_no_cache(v35, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_28;
            }
LABEL_27:
            *(_DWORD *)v35 = v36;
          }
LABEL_28:
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
LABEL_29:
            if (!__stlxr(0, v19))
              goto LABEL_111;
            goto LABEL_110;
          }
LABEL_109:
          __clrex();
LABEL_110:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_111;
        }
LABEL_101:
        v79 = __ldxr(v19);
        if (v79 == 1)
        {
          if (!__stlxr(0, v19))
            goto LABEL_119;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v50 + 20), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_119:
        *(_QWORD *)&v330[16] = 0xFFFFFFFF00000000;
        *(_QWORD *)&v330[24] = v10;
        *(_QWORD *)&v330[32] = 0;
        *(_QWORD *)&v330[40] = 0;
        *(_DWORD *)&v330[48] = 196608;
        v330[52] = 0;
        v333 = 0;
        v334 = 0;
        v331 = v14;
        ++*((_DWORD *)v14 + 1);
        v332 = 1;
        v82 = *v9;
        v83 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v84 = *v9 >> 4;
        if (!(_DWORD)v84)
          goto LABEL_130;
        v85 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
        if ((v84 & ~*(_DWORD *)(v85 + 0x20)) != 0)
          goto LABEL_130;
        v86 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x58);
        if (!v86)
        {
          v147 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40);
          if (!v147 || *(_BYTE *)(v147 + 5) != 1 && *(_DWORD *)(v147 + 80) < 2u)
            goto LABEL_130;
          JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), *((JSC::VM **)v10 + 7), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (!v86)
            goto LABEL_130;
        }
        if (!*(_DWORD *)(v86 + 24))
          goto LABEL_130;
        v87 = *(_QWORD *)(v86 + 16);
        v88 = v87 & 0xFFFFFFFFFFFFFFFELL;
        v89 = *(unsigned int *)(v86 + 8);
        v90 = *(_DWORD *)(v82 + 16);
        if ((v87 & 1) != 0)
        {
          if ((v90 & 0x20) != 0)
            v90 = *(_DWORD *)(v82 + 32);
          v91 = *(_DWORD *)(v86 + 12);
          v92 = (v90 >> 8) & *(_QWORD *)&v91;
          v93 = *(unsigned __int8 *)(v88 + v92);
          if (*(_BYTE *)(v88 + v92))
          {
            v94 = v88 + v89;
            v95 = 1;
            while (1)
            {
              v96 = *(_QWORD *)(v94 + 8 * (v93 - 1));
              if (v82 == (v96 & 0xFFFFFFFFFFFFLL))
                break;
              v92 = ((_DWORD)v92 + v95) & v91;
              v93 = *(unsigned __int8 *)(v88 + v92);
              ++v95;
              if (!*(_BYTE *)(v88 + v92))
                goto LABEL_130;
            }
            a6 = (v96 >> 16) & 0xFF00000000 | HIBYTE(v96);
            goto LABEL_232;
          }
          goto LABEL_130;
        }
        if ((v90 & 0x20) != 0)
          v90 = *(_DWORD *)(v82 + 32);
        v154 = *(_DWORD *)(v86 + 12);
        v155 = v154 & (v90 >> 8);
        v156 = *(_DWORD *)(v88 + 4 * v155);
        if (v156)
        {
          v157 = v88 + 4 * v89;
          v158 = 1;
          while (1)
          {
            v159 = (v156 - 1);
            if (*(_QWORD *)(v157 + 16 * v159) == v82)
              break;
            v155 = (v155 + v158) & v154;
            v156 = *(_DWORD *)(v88 + 4 * v155);
            ++v158;
            if (!v156)
              goto LABEL_130;
          }
          a6 = *(unsigned int *)(v157 + 16 * v159 + 8) | ((unint64_t)*(unsigned __int8 *)(v157 + 16 * v159 + 12) << 32);
LABEL_232:
          if ((_DWORD)a6 != -1)
          {
            if ((int)a6 <= 63)
            {
              v151 = (uint64_t)v10 + 16;
              v152 = a6 << 32;
            }
            else
            {
              v151 = *((_QWORD *)v10 + 1) - 8;
              v152 = 0x3F00000000 - (a6 << 32);
            }
            a5 = HIDWORD(a6);
            a4 = *(_QWORD *)(v151 + (v152 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
            {
LABEL_238:
              *(_QWORD *)v330 = a4;
              *(_QWORD *)&v330[32] = v10;
              *(_DWORD *)&v330[16] = HIDWORD(a6);
              *(_DWORD *)&v330[20] = a6;
              v113 = 1;
              *(_WORD *)&v330[48] = 257;
              if (v332)
                goto LABEL_153;
              goto LABEL_155;
            }
            v153 = *(unsigned __int8 *)(a4 + 5);
            if (v153 != 5)
            {
              if (v153 != 6)
                goto LABEL_238;
              v187 = *(_DWORD *)(v85 + 16) & 3;
              v188 = *(_QWORD *)(a4 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v190 = *(_QWORD *)(a4 + 24);
                v189 = *(_QWORD *)(a4 + 32);
                *(_QWORD *)v330 = *(_QWORD *)(a4 + 8);
                *(_QWORD *)&v330[8] = v188;
                *(_DWORD *)&v330[16] = HIDWORD(a6);
                *(_QWORD *)&v330[32] = v10;
                v330[49] = 3;
                v113 = 1;
                if (v187 != 2)
                  v330[48] = 1;
                v330[51] = 1;
                v333 = v190;
                v334 = v189;
              }
              else
              {
                *(_QWORD *)v330 = *(_QWORD *)(a4 + 8);
                *(_QWORD *)&v330[8] = v188;
                *(_DWORD *)&v330[16] = HIDWORD(a6);
                *(_QWORD *)&v330[32] = v10;
                v113 = 1;
                v330[49] = 3;
                if (v187 != 2)
                  v330[48] = 1;
              }
LABEL_152:
              if (v332)
              {
LABEL_153:
                v115 = *((_DWORD *)v331 + 1);
                if (!v115)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198A6B45CLL);
                }
                *((_DWORD *)v331 + 1) = v115 - 1;
                v331 = 0;
                v332 = 0;
              }
LABEL_155:
              if ((v113 & 1) != 0)
              {
                if (v330[49] == 1 && v330[48] == 1)
                {
                  v116 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                  v117 = *(_DWORD *)(v116 + 0x10);
                  if ((v117 & 3) != 2)
                  {
                    v118 = *(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC);
                    if ((v118 & 8) == 0
                      && ((v118 & 0x10) == 0 || (v118 & 0x20) != 0)
                      && (v325 != 1 || (v117 & 0x10) == 0))
                    {
                      v119 = JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), v14, (JSC::Structure *)*(unsigned int *)&v330[20], a4, a5, a6, a7, a8);
                      if (v325 != 1 || *(_BYTE *)(v119 + 4) != 1)
                      {
                        if (v324)
                          v120 = 6;
                        else
                          v120 = 0;
                        v121 = *(int *)&v330[20];
                        *(_DWORD *)a9 = v120;
                        *(_QWORD *)(a9 + 8) = v11;
                        *(_QWORD *)(a9 + 16) = v116;
                        *v321 = 0;
                        v321[1] = 0;
                        v122 = *(_QWORD *)(a9 + 48);
                        *(_QWORD *)(a9 + 40) = v121;
                        *(_QWORD *)(a9 + 48) = 0;
                        if (!v122)
                          goto LABEL_170;
                        if (*(_DWORD *)v122 != 2)
                        {
                          *(_DWORD *)v122 -= 2;
LABEL_170:
                          if (!v332)
                            goto LABEL_111;
LABEL_171:
                          v123 = *((_DWORD *)v331 + 1);
                          if (!v123)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198A6B47CLL);
                          }
                          *((_DWORD *)v331 + 1) = v123 - 1;
                          goto LABEL_111;
                        }
                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v122, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        v164 = *(_QWORD *)(StatusReg + 752);
                        if (!v164)
                        {
                          pas_try_deallocate_slow_no_cache(v122, (uint64_t)&bmalloc_heap_config, 1);
                          goto LABEL_170;
                        }
                        if (!(v122 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v122 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v122)) & 1) != 0)
                        {
LABEL_265:
                          v165 = *(unsigned int *)(v164 + 8000);
                          if (v165 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v164, v122, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                            goto LABEL_170;
                          }
                          *(_QWORD *)(v164 + 8 * v165) = v122 | 0x5000000000000;
                          *(_DWORD *)(v164 + 8000) = v165 + 1;
                          if (!v332)
                            goto LABEL_111;
                          goto LABEL_171;
                        }
                        if (v122 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v122 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v122 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v122) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_265;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v164, v122, 1, a4, a5, a6, a7, a8);
                        goto LABEL_170;
                      }
                      if (v324)
                        v287 = 6;
                      else
                        v287 = 0;
                      LODWORD(v326) = v287;
                      *((_QWORD *)&v326 + 1) = v11;
                      *(_OWORD *)v327 = 0u;
                      v328 = 0u;
                      v329 = 0;
                      JSC::ResolveOp::operator=(a9, &v326, (uint64_t)a3, a4, a5, a6, a7, a8);
                      v149 = v329;
                      v329 = 0;
                      if (!v149)
                        goto LABEL_170;
LABEL_224:
                      if (*(_DWORD *)v149 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v149, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
                        goto LABEL_170;
                      }
                      *(_DWORD *)v149 -= 2;
                      if (!v332)
                        goto LABEL_111;
                      goto LABEL_171;
                    }
                  }
                }
                if (v324)
                  v148 = 6;
                else
                  v148 = 0;
              }
              else if (v324)
              {
                v148 = 11;
              }
              else
              {
                v148 = 10;
              }
              *(_DWORD *)a9 = v148;
              *(_OWORD *)v319 = 0u;
              *(_OWORD *)(v319 + 16) = 0u;
              *(_QWORD *)(v319 + 32) = 0;
              v149 = *(WTF::StringImpl **)(a9 + 48);
              *(_QWORD *)(a9 + 48) = 0;
              if (!v149)
                goto LABEL_170;
              goto LABEL_224;
            }
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v10, (uint64_t)v83, (uint64_t)v330, a4, SHIDWORD(a6), a6);
LABEL_269:
            v113 = 1;
            if (v332)
              goto LABEL_153;
            goto LABEL_155;
          }
        }
LABEL_130:
        if ((*((_BYTE *)v10 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v10, v83, v82, (uint64_t)v330) & 1) != 0)
        {
          goto LABEL_269;
        }
        if (v82)
        {
          v97 = *(_DWORD *)(v82 + 16);
          if ((v97 & 0x20) == 0)
          {
            v98 = *(_BYTE **)(v82 + 8);
            v99 = *(unsigned int *)(v82 + 4);
            if ((v97 & 4) != 0)
            {
              if (!(_DWORD)v99)
                goto LABEL_458;
              v100 = *v98 - 48;
              if (v100 > 9 || v99 >= 2 && *v98 == 48)
                goto LABEL_136;
              v307 = v99 - 1;
              v308 = v98 + 1;
              while (v307)
              {
                if (v100 > 0x19999999)
                  goto LABEL_136;
                v309 = *v308 - 48;
                if (v309 > 9)
                  goto LABEL_136;
                v101 = 0;
                LODWORD(v99) = 0;
                v102 = 0;
                v136 = __CFADD__(v309, 10 * v100);
                v100 = v309 + 10 * v100;
                --v307;
                ++v308;
                if (v136)
                  goto LABEL_138;
              }
LABEL_211:
              if (v100 == -1)
              {
LABEL_136:
                v101 = 0;
                LODWORD(v99) = 0;
                goto LABEL_137;
              }
              v102 = v100 & 0xFFFFFF00;
              LODWORD(v99) = v100;
              v101 = 0x100000000;
            }
            else
            {
              if ((_DWORD)v99)
              {
                v100 = *(unsigned __int16 *)v98 - 48;
                if (v100 <= 9 && (*(_WORD *)v98 != 48 || v99 <= 1))
                {
                  v133 = (unsigned __int16 *)(v98 + 2);
                  v134 = v99 - 1;
                  while (v134)
                  {
                    if (v100 > 0x19999999)
                      goto LABEL_136;
                    v135 = *v133 - 48;
                    if (v135 > 9)
                      goto LABEL_136;
                    v101 = 0;
                    LODWORD(v99) = 0;
                    v102 = 0;
                    v136 = __CFADD__(v135, 10 * v100);
                    v100 = v135 + 10 * v100;
                    ++v133;
                    --v134;
                    if (v136)
                      goto LABEL_138;
                  }
                  goto LABEL_211;
                }
                goto LABEL_136;
              }
LABEL_458:
              v101 = 0;
LABEL_137:
              v102 = 0;
            }
LABEL_138:
            v103 = v102 | v99;
            if ((v101 & 0x100000000) != 0)
            {
              if (v103 != -1)
              {
                switch(*((_BYTE *)v10 + 4) & 0xF)
                {
                  case 0:
                  case 1:
                  case 3:
                    goto LABEL_139;
                  case 4:
                  case 5:
                  case 8:
                  case 9:
                    v160 = *((_QWORD *)v10 + 1);
                    if (*(_DWORD *)(v160 - 4) > v103)
                    {
                      v161 = *(_QWORD *)(v160 + 8 * v103);
                      if (v161)
                        goto LABEL_251;
                    }
                    goto LABEL_139;
                  case 6:
                  case 7:
                    v284 = *((_QWORD *)v10 + 1);
                    if (*(_DWORD *)(v284 - 4) <= v103)
                      goto LABEL_139;
                    v161 = *(_QWORD *)(v284 + 8 * v103) + 0x2000000000000;
                    goto LABEL_251;
                  case 0xA:
                  case 0xB:
                  case 0xC:
                  case 0xD:
                    v223 = (_QWORD *)*((_QWORD *)v10 + 1);
                    if (*((_DWORD *)v223 - 2) <= v103)
                      goto LABEL_139;
                    if (*((_DWORD *)v223 - 1) > v103)
                    {
                      v161 = v223[v103 + 2];
                      if (v161)
                      {
LABEL_251:
                        *(_QWORD *)v330 = v161;
                        *(_DWORD *)&v330[16] = 0;
                        *(_QWORD *)&v330[32] = v10;
                        v113 = 1;
                        v330[49] = 1;
                        goto LABEL_152;
                      }
                      goto LABEL_139;
                    }
                    v224 = *v223;
                    if (!v224)
                      goto LABEL_139;
                    v225 = *(_QWORD *)(v224 + 8);
                    if (!v225)
                      goto LABEL_139;
                    v226 = v103;
                    v227 = *(_DWORD *)(v225 - 8);
                    v228 = (~(v226 << 32) + v226) ^ ((unint64_t)(~(v226 << 32) + v226) >> 22);
                    v229 = 9 * ((v228 + ~(v228 << 13)) ^ ((v228 + ~(v228 << 13)) >> 8));
                    v230 = (v229 ^ (v229 >> 15)) + ~((v229 ^ (v229 >> 15)) << 27);
                    v231 = v227 & ((v230 >> 31) ^ v230);
                    v232 = (uint64_t *)(v225 + 24 * v231);
                    v233 = *v232;
                    if (*v232 == v226)
                      goto LABEL_376;
                    v234 = 1;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198A6B850);
                }
                while (v233 != -1)
                {
                  v231 = (v231 + v234) & v227;
                  v232 = (uint64_t *)(v225 + 24 * v231);
                  v233 = *v232;
                  ++v234;
                  if (*v232 == v226)
                    goto LABEL_376;
                }
                v232 = (uint64_t *)(v225 + 24 * *(unsigned int *)(v225 - 4));
LABEL_376:
                if (v232 == (uint64_t *)(v225 + 24 * *(unsigned int *)(v225 - 4)))
                  goto LABEL_139;
                v257 = v232[1];
                if ((v257 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v257 + 5) == 5)
                  v258 = 2;
                else
                  v258 = 1;
                v259 = *((_DWORD *)v232 + 4);
                *(_QWORD *)v330 = v257;
                *(_DWORD *)&v330[16] = v259;
                *(_QWORD *)&v330[32] = v10;
                v330[49] = v258;
                goto LABEL_269;
              }
              v304 = *(uint64_t (**)(const WTF::StringImpl *, const WTF::StringImpl *, _QWORD, _BYTE *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0x68);
              JSC::Identifier::from(*((uint64_t ***)v10 + 7), 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v326);
              v305 = v304(v10, v10, v326, v330);
              v306 = (WTF::StringImpl *)v326;
              *(_QWORD *)&v326 = 0;
              if (v306)
              {
                if (*(_DWORD *)v306 == 2)
                {
                  WTF::StringImpl::~StringImpl(v306, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v310, v311, v312, v313, v314, v315, v316, v317);
                }
                else
                {
                  *(_DWORD *)v306 -= 2;
                }
              }
              if ((v305 & 1) != 0)
                goto LABEL_269;
            }
          }
        }
LABEL_139:
        v104 = *((_QWORD *)v10 + 3);
        v105 = (unsigned __int8 *)(v104 + 20);
        if (__ldaxr((unsigned __int8 *)(v104 + 20)))
        {
          __clrex();
          goto LABEL_141;
        }
        if (__stxr(1u, v105))
LABEL_141:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v104 + 20);
        v107 = *(_QWORD *)(v104 + 8);
        if (v107)
        {
          v108 = *(_DWORD *)(v82 + 16);
          if ((v108 & 0x20) != 0)
            v108 = *(_DWORD *)(v82 + 32);
          v109 = *(_DWORD *)(v107 - 8);
          v110 = v109 & (v108 >> 8);
          v111 = *(_QWORD *)(v107 + 16 * v110);
          if (v111 != v82)
          {
            v112 = 1;
            while (v111)
            {
              v110 = ((_DWORD)v110 + v112) & v109;
              v111 = *(_QWORD *)(v107 + 16 * v110);
              ++v112;
              if (v111 == v82)
                goto LABEL_149;
            }
            goto LABEL_150;
          }
LABEL_149:
          if (v110 == *(_DWORD *)(v107 - 4))
            goto LABEL_150;
          v138 = v107 + 16 * v110;
          v141 = *(unint64_t **)(v138 + 8);
          v139 = (unint64_t *)(v138 + 8);
          v140 = v141;
          if ((v141 & 1) == 0)
            v139 = v140;
          v142 = *v139;
          v143 = (v142 >> 6);
          if (v143 == 0xFFFFFFFF || *((_QWORD *)v10 + 4) <= v143)
            goto LABEL_150;
          v144 = v142 & 2;
          if ((v142 & 4) != 0)
            v144 = v142 & 2 | 4;
          v145 = v143 >> 4;
          if (v145 >= *((unsigned int *)v10 + 13))
          {
            __break(0xC471u);
            JUMPOUT(0x198A6B8F4);
          }
          *(_QWORD *)v330 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 5) + 8 * v145) + 8 * ((v142 >> 6) & 0xF));
          *(_DWORD *)&v330[16] = v144 | 8;
          *(_QWORD *)&v330[32] = v10;
          v113 = 1;
          v330[49] = 1;
          v146 = __ldxr(v105);
          if (v146 != 1)
          {
LABEL_205:
            __clrex();
LABEL_206:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v104 + 20), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_152;
          }
        }
        else
        {
LABEL_150:
          v113 = 0;
          v114 = __ldxr(v105);
          if (v114 != 1)
            goto LABEL_205;
        }
        if (!__stlxr(0, v105))
          goto LABEL_152;
        goto LABEL_206;
      }
      *(_DWORD *)v330 = 12;
      memset(&v330[8], 0, 48);
      JSC::ResolveOp::operator=(a9, (__int128 *)v330, (uint64_t)a3, a4, a5, a6, a7, a8);
      v286 = *(WTF::StringImpl **)&v330[48];
      *(_QWORD *)&v330[48] = 0;
      if (v286)
      {
        if (*(_DWORD *)v286 == 2)
        {
          WTF::StringImpl::~StringImpl(v286, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
        }
        else
        {
          *(_DWORD *)v286 -= 2;
        }
      }
      v48 = 1;
LABEL_112:
      v81 = *((_DWORD *)v14 + 22) - 1;
      *((_DWORD *)v14 + 22) = v81;
      if (!v81)
      {
LABEL_113:
        if (*((_BYTE *)v14 + 93441))
        {
          if (*((_BYTE *)v14 + 86))
          {
            v221 = *((_QWORD *)v14 + 3);
            *((_QWORD *)v14 + 2) = v221;
            *((_QWORD *)v14 + 4) = v221;
            if (v221)
            {
              v222 = (unsigned int *)((char *)v14 + 80);
              do
                v162 = __ldaxr(v222);
              while (__stlxr(v162 | 0x10, v222));
            }
            if (*((_BYTE *)v14 + 93443))
              *((_BYTE *)v14 + 93442) = 1;
            *((_BYTE *)v14 + 86) = 0;
          }
          else
          {
            v240 = (unsigned int *)((char *)v14 + 80);
            do
              v168 = __ldaxr(v240);
            while (__stlxr(v168 | 2, v240));
          }
        }
      }
LABEL_114:
      if ((v48 & 1) == 0)
      {
        v11 = (WTF::AtomStringImpl *)((char *)v11 + 1);
        v10 = (const WTF::StringImpl *)*((_QWORD *)v10 + 2);
        if (v10)
          continue;
      }
      return;
    }
    v38 = *((_QWORD *)v10 + 3);
    v39 = (unsigned __int8 *)(v38 + 20);
    if (__ldaxr((unsigned __int8 *)(v38 + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v39))
    {
LABEL_35:
      v41 = *(_QWORD *)(v38 + 8);
      if (!v41)
      {
        v48 = 0;
        v137 = __ldxr(v39);
        if (v137 != 1)
        {
LABEL_97:
          __clrex();
LABEL_98:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_112;
        }
        goto LABEL_45;
      }
      v42 = *v9;
      v43 = *(_DWORD *)(*v9 + 16);
      if ((v43 & 0x20) != 0)
        v43 = *(_DWORD *)(v42 + 32);
      v44 = *(_DWORD *)(v41 - 8);
      v45 = v44 & (v43 >> 8);
      v46 = *(_QWORD *)(v41 + 16 * v45);
      if (v46 != v42)
      {
        v47 = 1;
        while (v46)
        {
          v45 = ((_DWORD)v45 + v47) & v44;
          v46 = *(_QWORD *)(v41 + 16 * v45);
          ++v47;
          if (v46 == v42)
            goto LABEL_42;
        }
        goto LABEL_43;
      }
LABEL_42:
      if (v45 == *(_DWORD *)(v41 - 4))
      {
LABEL_43:
        v48 = 0;
        goto LABEL_44;
      }
      v70 = (_QWORD **)(v41 + 16 * v45 + 8);
      if (v325 == 1)
      {
        v163 = *v70;
        if (((unint64_t)*v70 & 1) != 0)
          v163 = v70;
        if (v320 >= 2 && (*v163 & 2) != 0)
        {
          memset(&v330[4], 0, 40);
          *(_DWORD *)a9 = 12;
          v185 = *(_OWORD *)&v330[16];
          *(_OWORD *)(a9 + 4) = *(_OWORD *)v330;
          *(_OWORD *)(a9 + 20) = v185;
          *(_OWORD *)(a9 + 32) = *(_OWORD *)&v330[28];
          v186 = *(WTF::StringImpl **)(a9 + 48);
          *(_QWORD *)(a9 + 48) = 0;
          if (v186)
          {
            if (*(_DWORD *)v186 == 2)
            {
              WTF::StringImpl::~StringImpl(v186, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
            }
            else
            {
              *(_DWORD *)v186 -= 2;
            }
          }
          v48 = 1;
LABEL_44:
          v49 = __ldxr(v39);
          if (v49 != 1)
            goto LABEL_97;
LABEL_45:
          if (__stlxr(0, v39))
            goto LABEL_98;
          goto LABEL_112;
        }
      }
      v71 = 2;
      if (v320 != 1 && v324)
        v71 = 8;
      v72 = (unint64_t)*v70;
      if ((v72 & 1) != 0)
      {
        v73 = 0;
      }
      else
      {
        v74 = v72;
        v72 = *(_QWORD *)v72;
        v73 = *(_QWORD *)(v74 + 8);
      }
      v75 = (v72 >> 10) & 0xFFFFFFF;
      if (v75 >= *((unsigned int *)v10 + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x198A6B8ECLL);
      }
      v76 = *(_QWORD *)(*((_QWORD *)v10 + 5) + 8 * v75) + 8 * ((v72 >> 6) & 0xF);
      *(_DWORD *)a9 = v71;
      *(_QWORD *)(a9 + 8) = v11;
      *v323 = 0;
      *(_QWORD *)(a9 + 24) = 0;
      *(_QWORD *)(a9 + 32) = v73;
      *(_QWORD *)(a9 + 40) = v76;
      v77 = *(_QWORD *)(a9 + 48);
      *(_QWORD *)(a9 + 48) = 0;
      if (!v77)
        goto LABEL_95;
      if (*(_DWORD *)v77 != 2)
      {
        *(_DWORD *)v77 -= 2;
LABEL_95:
        v48 = 1;
        goto LABEL_96;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v77, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v166 = *(_QWORD *)(StatusReg + 752);
      if (v166)
      {
        if (!(v77 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v77 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v77)) & 1) != 0)
        {
          goto LABEL_274;
        }
        if (v77 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v77 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v77 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v77) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_274:
            v167 = *(unsigned int *)(v166 + 8000);
            if (v167 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v166, v77, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v166 + 8 * v167) = v77 | 0x5000000000000;
              *(_DWORD *)(v166 + 8000) = v167 + 1;
            }
            goto LABEL_95;
          }
        }
        v48 = 1;
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v166, v77, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        v48 = 1;
        pas_try_deallocate_slow_no_cache(v77, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_96:
      v78 = __ldxr(v39);
      if (v78 != 1)
        goto LABEL_97;
      goto LABEL_45;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v38 + 20);
    goto LABEL_35;
  }
}

void JSC::JSScope::collectClosureVariablesUnderTDZ(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE v39[24];

  if (a1)
  {
    v10 = a1;
    while (1)
    {
      v11 = *(unsigned __int8 *)(v10 + 5);
      if ((v11 - 53) > 1)
        goto LABEL_7;
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(unsigned __int8 *)(v12 + 21);
      if ((v13 & 0x1C) == 8)
      {
        if (v11 == 54)
        {
          v35 = *(_QWORD **)(*(_QWORD *)(v10 + 8 * (*(_DWORD *)(v12 + 16) + 1) + 32) + 40);
          v36 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::begin(v35);
          v24 = v36;
          v38 = v37;
          if (v35)
            v35 += 5 * *((unsigned int *)v35 - 1);
          if (v35 != v36)
          {
            do
            {
              WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(a2, (uint64_t)v24, a4, a5, a6, a7, a8, (uint64_t)v39);
              while (1)
              {
                v24 += 5;
                if (v24 == v38)
                  break;
                if ((unint64_t)(*v24 + 1) > 1)
                  goto LABEL_39;
              }
              v24 = v38;
LABEL_39:
              ;
            }
            while (v24 != v35);
            v12 = *(_QWORD *)(v10 + 24);
          }
        }
      }
      else if (v11 != 53 || ((v13 >> 2) & 7) - 3 >= 2)
      {
        goto LABEL_7;
      }
      v14 = (unsigned __int8 *)(v12 + 20);
      if (__ldaxr((unsigned __int8 *)(v12 + 20)))
        break;
      if (__stxr(1u, v14))
        goto LABEL_12;
LABEL_13:
      v16 = *(_QWORD **)(v12 + 8);
      if (v16)
      {
        v17 = *((unsigned int *)v16 - 1);
        v18 = &v16[2 * v17];
        if (*((_DWORD *)v16 - 3))
        {
          if ((_DWORD)v17)
          {
            v19 = 16 * v17;
            while ((unint64_t)(*v16 + 1) <= 1)
            {
              v16 += 2;
              v19 -= 16;
              if (!v19)
              {
                v16 = v18;
                break;
              }
            }
          }
          v20 = v18;
          goto LABEL_21;
        }
        v25 = &v16[2 * v17];
      }
      else
      {
        v18 = 0;
        v25 = 0;
        v17 = 0;
      }
      v20 = &v16[2 * v17];
      v16 = v25;
LABEL_21:
      while (v16 != v18)
      {
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(a2, (uint64_t)v16, a4, a5, a6, a7, a8, (uint64_t)v39);
        v21 = v16 + 2;
        v16 = v20;
        if (v21 != v20)
        {
          v16 = v21;
          while ((unint64_t)(*v16 + 1) <= 1)
          {
            v16 += 2;
            if (v16 == v20)
            {
              v16 = v20;
              break;
            }
          }
        }
      }
      v22 = *(_QWORD *)(v12 + 24);
      if (v22)
      {
        v28 = *(_QWORD *)(v22 + 32);
        v26 = (_QWORD **)(v22 + 32);
        v27 = v28;
        if (v28)
        {
          if (*(_DWORD *)(v27 - 12))
          {
            v29 = v26;
            v30 = (WTF::StringImpl **)WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::begin(v26);
            v31 = v30;
            v33 = v32;
            v34 = *v29 ? *v29 + 16 * *(unsigned int *)(*v29 - 4) : 0;
            if ((WTF::StringImpl **)v34 != v30)
            {
              do
              {
                WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>(a3, v31, (_WORD *)v31 + 4, (uint64_t)v39);
                while (1)
                {
                  v31 += 2;
                  if (v31 == v33)
                    break;
                  if ((unint64_t)*v31 + 1 > 1)
                    goto LABEL_56;
                }
                v31 = v33;
LABEL_56:
                ;
              }
              while (v31 != (WTF::StringImpl **)v34);
            }
          }
        }
      }
      v23 = __ldxr(v14);
      if (v23 == 1)
      {
        if (!__stlxr(0, v14))
          goto LABEL_7;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_7:
      v10 = *(_QWORD *)(v10 + 16);
      if (!v10)
        return;
    }
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
    goto LABEL_13;
  }
}

_QWORD *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[5 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[5 * v1];
  if ((_DWORD)v1)
  {
    v3 = 40 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 5;
      v3 -= 40;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_DWORD *JSC::JSScriptFetchParameters::destroy(JSC::JSScriptFetchParameters *this, JSC::JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *JSC::JSScriptFetcher::destroy(JSC::JSScriptFetcher *this, JSC::JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void JSC::JSSegmentedVariableObject::analyzeHeap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;

  JSC::JSObject::analyzeHeap(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 20);
  if (__ldaxr(v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_5:
  v18 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  if (!v18)
  {
    v20 = 0;
    v30 = 0;
    v19 = 0;
LABEL_37:
    v22 = &v18[2 * v19];
    v18 = v30;
    goto LABEL_13;
  }
  v19 = *((unsigned int *)v18 - 1);
  v20 = &v18[2 * v19];
  if (!*((_DWORD *)v18 - 3))
  {
    v30 = &v18[2 * v19];
    goto LABEL_37;
  }
  if ((_DWORD)v19)
  {
    v21 = 16 * v19;
    while ((unint64_t)(*v18 + 1) <= 1)
    {
      v18 += 2;
      v21 -= 16;
      if (!v21)
      {
        v18 = v20;
        break;
      }
    }
  }
  v22 = v20;
LABEL_13:
  while (v18 != v20)
  {
    v23 = v18 + 1;
    if ((v18[1] & 1) == 0)
      v23 = (unint64_t *)v18[1];
    v24 = *v23;
    v25 = (v24 >> 6);
    if (v25 != 0xFFFFFFFF && *(_QWORD *)(a1 + 32) > v25)
    {
      v26 = v25 >> 4;
      if (v26 >= *(unsigned int *)(a1 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x198A6BEA0);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v26) + 8 * ((v24 >> 6) & 0xF));
      if (v10)
        v27 = (v10 & 0xFFFE000000000002) == 0;
      else
        v27 = 0;
      if (v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
    }
    v28 = v18 + 2;
    v18 = v22;
    if (v28 != v22)
    {
      v18 = v28;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        v18 += 2;
        if (v18 == v22)
        {
          v18 = v22;
          break;
        }
      }
    }
  }
  v29 = __ldxr(v16);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v16))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
}

void JSC::JSSegmentedVariableObject::visitChildren(JSC::JSSegmentedVariableObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  int v23;
  int v24;

  JSC::JSSymbolTableObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v17 = *v16;
    if ((v17 & 0x40) != 0)
      break;
    v18 = __ldaxr(v16);
    if (v18 == v17)
    {
      if (!__stxr(v17 | 0x40, v16))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_8:
  if (!*((_DWORD *)this + 8))
    goto LABEL_21;
  v19 = *((unsigned int *)this + 8) - 1;
  do
  {
    if (v19 >> 4 >= *((unsigned int *)this + 13))
    {
      __break(0xC471u);
      return;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v19 >> 4)) + 8 * (v19 & 0xF));
    if ((v20 & 0xFFFE000000000002) == 0 && v20 != 0)
    {
      if ((v20 & 8) != 0)
      {
        if ((*(_BYTE *)(v20 - 79) & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        v22 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v22, v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
LABEL_19:
          JSC::SlotVisitor::appendHiddenSlow(a2, v20, 0, v11, v12, v13, v14, v15);
      }
    }
    --v19;
  }
  while (v19 != -1);
LABEL_21:
  while (1)
  {
    v23 = *v16;
    if ((v23 & 0xC0) != 0x40)
      break;
    v24 = __ldxr(v16);
    if (v24 == v23)
    {
      if (!__stxr(v23 & 0xBF, v16))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v10, v11, v12, v13, v14, v15);
}

void JSC::JSSegmentedVariableObject::visitChildren(JSC::JSSegmentedVariableObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  char v20;
  _QWORD v21[2];
  _QWORD *v22;
  char v23;
  _QWORD v24[2];
  _QWORD *v25;
  char v26;

  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v19 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  v21[0] = a2;
  v21[1] = this;
  v23 = 0;
  v22 = v18;
  v24[0] = a2;
  v24[1] = this;
  v26 = 0;
  v25 = v21;
  *((_QWORD *)a2 + 11) = v24;
  JSC::JSObject::visitChildren(this, a2, a3);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
  *(_QWORD *)(v24[0] + 88) = v25;
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
  *(_QWORD *)(v21[0] + 88) = v22;
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  if (!*((_DWORD *)this + 8))
    goto LABEL_16;
  v15 = *((unsigned int *)this + 8) - 1;
  do
  {
    if (v15 >> 4 >= *((unsigned int *)this + 13))
    {
      __break(0xC471u);
LABEL_25:
      JUMPOUT(0x198A6C1F8);
    }
    if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v15 >> 4)) + 8 * (v15 & 0xF)) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
    --v15;
  }
  while (v15 != -1);
LABEL_16:
  while (1)
  {
    v16 = *v12;
    if ((v16 & 0xC0) != 0x40)
      break;
    v17 = __ldxr(v12);
    if (v17 == v16)
    {
      if (!__stxr(v16 & 0xBF, v12))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v6, v7, v8, v9, v10, v11);
LABEL_22:
  *(_QWORD *)(v18[0] + 88) = v19;
}

unint64_t JSC::JSSegmentedVariableObject::findVariableIndex(JSC::JSSegmentedVariableObject *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_8:
  v13 = *((unsigned int *)this + 8);
  if (!*((_DWORD *)this + 8)
    || (v14 = v13 - 1, v15 = (unint64_t)(v13 - 1) >> 4, v16 = *((unsigned int *)this + 13), v15 >= v16))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198A6C2A0);
  }
  while ((void *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15) + 8 * (v14 & 0xF)) != a2)
  {
    if (v14)
    {
      v15 = --v14 >> 4;
      if (v14 >> 4 < v16)
        continue;
    }
    goto LABEL_21;
  }
  while (1)
  {
    v17 = *v10;
    if ((v17 & 0xC0) != 0x40)
      break;
    v18 = __ldxr(v10);
    if (v18 == v17)
    {
      if (!__stxr(v17 & 0xBF, v10))
        return v14;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v14;
}

uint64_t JSC::JSSegmentedVariableObject::addVariables(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;

  v6 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_6:
  v9 = *(_QWORD *)(a1 + 32);
  result = WTF::SegmentedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,16ul>::grow(a1 + 32, v9 + a2);
  if (!a2)
    goto LABEL_12;
  v17 = a2;
  v18 = *(unsigned int *)(a1 + 52);
  v19 = v9 - 1;
  do
  {
    v20 = (unint64_t)(v19 + v17) >> 4;
    if (v20 >= v18)
    {
      __break(0xC471u);
      return result;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v20) + 8 * (((_BYTE)v19 + (_BYTE)v17--) & 0xF)) = a3;
  }
  while (v17);
LABEL_12:
  while (1)
  {
    v21 = *v6;
    if ((v21 & 0xC0) != 0x40)
      break;
    v22 = __ldxr(v6);
    if (v22 == v21)
    {
      if (!__stxr(v21 & 0xBF, v6))
        return v9;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v11, v12, v13, v14, v15, v16);
  return v9;
}

uint64_t WTF::SegmentedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,16ul>::grow(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)result + 15;
  v6 = a2 + 15;
  if (v5 >= 0x10)
    v7 = (v5 >> 4) - 1;
  else
    v7 = 0;
  if (v7 < v6 >> 4)
  {
    v8 = v6 >> 4;
    v9 = *(_DWORD *)(result + 20);
    do
    {
      if (v7 == v9)
      {
        result = WTF::fastMalloc((WTF *)0x80);
        v12 = result;
        v10 = *(unsigned int *)(v3 + 20);
        if ((_DWORD)v10 == *(_DWORD *)(v3 + 16))
        {
          result = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 8, v10 + 1, (unint64_t)&v12);
          v10 = *(unsigned int *)(v3 + 20);
          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = result;
        }
        v9 = v10 + 1;
        *(_DWORD *)(v3 + 20) = v9;
      }
      ++v7;
    }
    while (v8 != v7);
    v4 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = a2;
  if (v4 < a2)
  {
    v11 = *(unsigned int *)(v3 + 20);
    while (v4 >> 4 < v11)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * (v4 >> 4)) + 8 * (v4 & 0xF)) = 0;
      if (a2 == ++v4)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t *JSC::JSSegmentedVariableObject::finishCreation(JSC::JSSegmentedVariableObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t SlowCase;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t *result;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v10 = (unint64_t *)((char *)a2 + 40048);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  SlowCase = *v10;
  if (*v10 < *((_QWORD *)a2 + 5007))
    goto LABEL_4;
  SlowCase = *((_QWORD *)a2 + 5008);
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 5009);
    *((_QWORD *)a2 + 5007) = SlowCase + HIDWORD(v19);
    *((_QWORD *)a2 + 5008) = SlowCase + (int)v19;
LABEL_4:
    *v10 = SlowCase + 64;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40024, (uint64_t)a2 + 192, 64, 0, 0, v20, v21, v22);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::SymbolTable::SymbolTable(SlowCase, (uint64_t)a2);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  result = (uint64_t *)(SlowCase + 40);
  v17 = *(_QWORD *)(SlowCase + 40);
  if ((v17 & 1) != 0)
    v18 = (v17 >> 1) & 3;
  else
    v18 = *(unsigned __int8 *)(v17 + 4);
  if (v18 != 2)
  {
    v23[0] = &off_1E3583C90;
    v23[1] = "Allocated a scope";
    result = JSC::InferredValue<JSC::JSScope>::notifyWriteSlow(result, a2, SlowCase, (uint64_t)this, v23, v12, v13, v14, v15);
  }
  *((_QWORD *)this + 3) = SlowCase;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    return (uint64_t *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  return result;
}

unint64_t JSC::JSSet::clone(JSC::JSSet *this, JSC::JSGlobalObject *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::Heap *v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  JSC::VM *v15;
  JSC::JSSet *v16;
  JSC::JSGlobalObject *v17;
  JSC::Structure *v18;
  char *v19;
  uint64_t v20;
  JSC::JSSet *v21;
  JSC::JSGlobalObject *v22;
  JSC::Structure *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t SlowCase;
  JSC::VM *v28;

  v10 = (JSC::Heap *)*((_QWORD *)a3 + 5093);
  if (!v10)
  {
    v15 = a3;
    v16 = this;
    v17 = a2;
    v18 = (JSC::Structure *)a4;
    v10 = JSC::GCClient::Heap::setSpaceSlow((JSC::Heap **)a3 + 4694);
    a4 = (uint64_t)v18;
    a2 = v17;
    this = v16;
    a3 = v15;
  }
  v11 = *((_QWORD *)v10 + 3);
  if (v11 >= *((_QWORD *)v10 + 4))
  {
    v11 = *((_QWORD *)v10 + 5);
    if ((v11 & 1) != 0)
    {
      v19 = (char *)a3 + 192;
      v20 = (uint64_t)v10;
      v28 = a3;
      v21 = this;
      v22 = a2;
      v23 = (JSC::Structure *)a4;
      JSC::sanitizeStackForVM(a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, (uint64_t)v19, 32, 0, 0, v24, v25, v26);
      a4 = (uint64_t)v23;
      a2 = v22;
      this = v21;
      a3 = v28;
      v11 = SlowCase;
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = v11 + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = v11 + (int)v14;
  }
  *((_QWORD *)v10 + 3) = v11 + 32;
LABEL_5:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)v11 = (unint64_t)a4 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  JSC::OrderedHashTable<JSC::SetTraits>::finishCreation(v11, a2, (uint64_t)a3, (uint64_t)this, a5, a6, a7, a8, a9);
  return v11;
}

void JSC::OrderedHashTable<JSC::SetTraits>::finishCreation(unint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int **v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t SlowCase;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v52;

  if (*(_BYTE *)(a3 + 755))
    __dmb(0xAu);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9)
  {
    v12 = *(_QWORD *)(v9 + 16);
    v11 = v9 + 16;
    v10 = v12;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *((_QWORD *)a2 + 7);
    v15 = *(_DWORD *)(v11 + 8);
    v52 = v14;
    v16 = 3 * v13 + 4;
    if (v16 >= 0x10000001)
    {
      JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v52);
      v22 = 0;
      goto LABEL_19;
    }
    v17 = *(_QWORD *)(v14 + 41656);
    v18 = 8 * (3 * v13 + 4);
    v19 = (v18 + 31) & 0xFFFFFFFF0;
    if (v19 <= 0x1F60 && (v20 = *(_QWORD *)(v14 + (((unint64_t)(v18 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
    {
      v21 = *(unsigned int *)(v20 + 60);
      v22 = *(_QWORD *)(v20 + 24);
      if (v22 < *(_QWORD *)(v20 + 32))
      {
        *(_QWORD *)(v20 + 24) = v22 + v21;
LABEL_9:
        if (v22)
        {
LABEL_10:
          *(_DWORD *)v22 = 0;
          v23 = *(_DWORD *)(v17 + 8);
          *(_DWORD *)v22 = v17 >> 4;
          *(_DWORD *)(v22 + 4) = v23;
          *(_DWORD *)(v22 + 8) = v16;
          *(_DWORD *)(v22 + 12) = v16;
          if (3 * (_DWORD)v13 != -4 && (*(_BYTE *)(v22 + 4) & 0xE) == 8)
            bzero((void *)(v22 + 16), 8 * (3 * v13 + 4));
          if (*(_BYTE *)(v14 + 755))
            __dmb(0xAu);
          *(_QWORD *)(v22 + 16) = v10 | 0xFFFE000000000000;
          *(_QWORD *)(v22 + 24) = 0xFFFE000000000000;
          *(_QWORD *)(v22 + 32) = v13 | 0xFFFE000000000000;
          goto LABEL_19;
        }
        JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v52);
LABEL_19:
        if (*(_DWORD *)(v14 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, v19, a4, a5, a6, a7, a8))
        {
LABEL_52:
          v22 = 0;
          goto LABEL_53;
        }
        v25 = v15 + v10;
        if (!(v15 + v10))
        {
LABEL_53:
          if (!*(_DWORD *)(a3 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a3, (uint64_t)a2, v19, a4, a5, a6, a7, a8))
          {
            *(_QWORD *)(a1 + 16) = v22;
            if (a1 && v22 && *(_DWORD *)(a3 + 760) >= *(unsigned __int8 *)(a1 + 7))
              JSC::Heap::writeBarrierSlowPath(a3 + 192, a1);
          }
          return;
        }
        LODWORD(v26) = v13 + 2;
        v27 = v22 + 16;
        v28 = v13 - 1;
        v29 = v13 + 4;
        while (1)
        {
          v30 = *(_QWORD *)(v11 + 8 * v29);
          if ((v30 & 0xFFFE000000000002) != 0)
          {
            v26 = (v26 + 2);
            *(_QWORD *)(v27 + 8 * v26) = v30;
          }
          else
          {
            v31 = *(_QWORD *)(v14 + 41840);
            if (!v31)
            {
              v31 = JSC::Symbol::create((JSC::Symbol *)v14, a2, v19, a4, a5, a6, a7, a8);
              *(_QWORD *)(v14 + 41840) = v31;
            }
            if (v31 == v30)
              goto LABEL_36;
            v26 = (v26 + 2);
            *(_QWORD *)(v27 + 8 * v26) = v30;
            if (v22 && v30 && *(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v22 + 7))
              JSC::Heap::writeBarrierSlowPath(v14 + 192, v22);
            v32 = *(unsigned __int8 *)(v30 + 5);
            if (v32 == 2)
            {
              v33 = (int **)(v30 + 8);
              if ((*(_BYTE *)(v30 + 8) & 1) != 0)
                v33 = JSC::JSRopeString::resolveRope(v30, a2, v19, a4, a9, a5, a6, a7, a8);
              if (*(_DWORD *)(v14 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, v19, a4, a5, a6, a7, a8))
              {
                v35 = -1;
              }
              else
              {
                v34 = (*v33)[4];
                if (v34 < 0x100)
                  v35 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v33);
                else
                  v35 = v34 >> 8;
              }
              goto LABEL_34;
            }
            if (v32 == 3)
            {
              v35 = *(_DWORD *)(v30 + 12);
              if (!v35)
                v35 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v30);
              goto LABEL_34;
            }
          }
          v38 = (v30 + ~(v30 << 32)) ^ ((v30 + ~(v30 << 32)) >> 22);
          v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
          v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
          v35 = (v40 >> 31) ^ v40;
LABEL_34:
          if (*(_DWORD *)(v14 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, v19, a4, a5, a6, a7, a8))
          {
            goto LABEL_52;
          }
          v36 = (v35 & v28) + 4;
          v37 = *(_QWORD *)(v27 + 8 * v36);
          *(_QWORD *)(v27 + 8 * v36) = v26 | 0xFFFE000000000000;
          *(_QWORD *)(v27 + 8 * (v26 + 1)) = v37;
LABEL_36:
          v29 += 2;
          if (!--v25)
            goto LABEL_53;
        }
      }
      v22 = *(_QWORD *)(v20 + 40);
      if ((v22 & 1) == 0)
      {
        v42 = *(_QWORD *)(v22 + 8) ^ *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 32) = v22 + HIDWORD(v42);
        *(_QWORD *)(v20 + 40) = v22 + (int)v42;
        *(_QWORD *)(v20 + 24) = v22 + v21;
        goto LABEL_10;
      }
      v43 = v11;
      v44 = *(unsigned int *)(v20 + 60);
      JSC::sanitizeStackForVM((JSC *)v14, a2, v19, a4, a5, a6, a7, a8);
      v45 = v44;
      v11 = v43;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v14 + 192, v45, 0, 1, v46, v47, v48);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::allocateSlow(v14 + 10792, (JSC *)v14, v19, 0, 1, a6, a7, a8);
    }
    v22 = SlowCase;
    goto LABEL_9;
  }
}

uint64_t JSC::JSGlobalObject::jsSetPrototype(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1552);
  if ((v1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1552;
    v1 = v4(v6);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (v2 == 2)
    return 0;
  else
    return v2;
}

BOOL JSC::JSSet::isIteratorProtocolFastAndNonObservable(JSC::JSSet *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  uint64_t v11;
  const JSC::PropertyTable *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v2 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v3 = *(_QWORD *)(v2 + 0x28);
  v4 = *(_QWORD *)(v3 + 2232);
  if ((v4 & 1) != 0)
    v5 = (v4 >> 1) & 3;
  else
    v5 = *(unsigned __int8 *)(v4 + 4);
  if (v5 == 2)
    return 0;
  v6 = *(JSC::VM **)(v3 + 56);
  v7 = *(_QWORD *)(v3 + 1552);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v10 = (_QWORD *)(v3 - 16);
    v17[0] = *v10;
    v17[1] = v3;
    v17[2] = v3 + 1552;
    v7 = v9(v17);
  }
  if (v7 != v2)
  {
    v11 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v11)
      v11 = *((_QWORD *)this + 2);
    if (v11 == JSC::JSGlobalObject::jsSetPrototype(v3))
      return JSC::JSObject::getDirectOffset(this, v6, *(_QWORD *)(*((_QWORD *)v6 + 5244) + 2712), v12, v13, v14, v15, v16) == -1;
    return 0;
  }
  return 1;
}

void JSC::JSSetIterator::visitChildren(JSC::JSSetIterator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSInternalFieldObjectImpl<4u>::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

unint64_t JSC::JSSetIterator::createWithInitialValues(JSC::JSSetIterator *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unint64_t SlowCase;
  int v10;
  unint64_t v12;
  JSC::JSSetIterator *v13;
  JSC::VM *v14;
  JSC::Heap *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  JSC::JSSetIterator *v21;

  v8 = (JSC::Heap *)*((_QWORD *)this + 5092);
  if (!v8)
  {
    v13 = this;
    v14 = a2;
    v15 = JSC::GCClient::Heap::setIteratorSpaceSlow((JSC::Heap **)this + 4694);
    a2 = v14;
    v8 = v15;
    this = v13;
  }
  SlowCase = *((_QWORD *)v8 + 3);
  if (SlowCase < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v8 + 5);
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v8 + 5) = SlowCase + (int)v12;
LABEL_4:
    *((_QWORD *)v8 + 3) = SlowCase + 48;
    goto LABEL_5;
  }
  v16 = (char *)this + 192;
  v20 = a2;
  v21 = this;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v8, (uint64_t)v16, 48, 0, 0, v17, v18, v19);
  a2 = v20;
  this = v21;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v10 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_1991580B0;
  *(_OWORD *)(SlowCase + 32) = xmmword_1991582D0;
  return SlowCase;
}

uint64_t JSC::JSSetIterator::finishCreation(JSC::JSCell *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::JSCell *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  JSC::JSCell *v19;
  int v20;
  JSC::JSCell *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t SlowCase;
  JSC::JSCell *v35;
  JSC::JSCell *v36;
  unint64_t v37;
  uint64_t v38;
  JSC::JSCell *v39;
  JSC::JSCell *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::JSGlobalObject *v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::JSCell *v57;
  JSC::JSCell *v58;
  JSC::JSCell *v59;
  JSC::JSCell *v60;
  JSC::JSCell *v61;
  JSC::JSCell *v62;
  JSC::JSCell *v63;
  uint64_t v64;

  v8 = a2;
  v9 = a1;
  v10 = *((_QWORD *)a2 + 7);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *((_QWORD *)a1 + 2) = 0xFFFE000000000000;
  *((_QWORD *)a1 + 3) = a3;
  result = v10 + 192;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v9 + 7))
  {
    v58 = v9;
    v48 = a4;
    v21 = (JSC::JSCell *)a3;
    JSC::Heap::writeBarrierSlowPath(result, (unint64_t)v9);
    v8 = a2;
    a3 = (uint64_t)v21;
    result = v10 + 192;
    v9 = v58;
    a4 = v48;
  }
  if (!*(_QWORD *)(a3 + 16))
  {
    v13 = *((_QWORD *)v8 + 7);
    v64 = v13;
    v14 = *(_QWORD *)(v13 + 41656);
    v15 = *(_QWORD *)(v13 + 11000);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 60);
      v17 = *(_QWORD *)(v15 + 24);
      if (v17 < *(_QWORD *)(v15 + 32))
      {
        *(_QWORD *)(v15 + 24) = v17 + v16;
        goto LABEL_14;
      }
      v17 = *(_QWORD *)(v15 + 40);
      if ((v17 & 1) == 0)
      {
        v24 = *(_QWORD *)(v17 + 8) ^ *(_QWORD *)(v15 + 48);
        *(_QWORD *)(v15 + 32) = v17 + HIDWORD(v24);
        *(_QWORD *)(v15 + 40) = v17 + (int)v24;
        *(_QWORD *)(v15 + 24) = v17 + v16;
        goto LABEL_15;
      }
      v38 = v10;
      v40 = (JSC::JSCell *)a3;
      v26 = v13 + 192;
      v54 = result;
      v61 = v9;
      v49 = a4;
      v42 = v13;
      v45 = v8;
      v27 = *(_QWORD *)(v13 + 11000);
      v37 = *(_QWORD *)(v13 + 41656);
      v28 = *(unsigned int *)(v15 + 60);
      JSC::sanitizeStackForVM((JSC *)v13, a2, a3, a4, a5, a6, a7, a8);
      v29 = v26;
      v30 = v28;
      v14 = v37;
      v10 = v38;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, v29, v30, 0, 1, v31, v32, v33);
    }
    else
    {
      v54 = result;
      v61 = v9;
      v40 = (JSC::JSCell *)a3;
      v42 = v13;
      v49 = a4;
      v45 = v8;
      SlowCase = JSC::CompleteSubspace::allocateSlow(v13 + 10792, (JSC *)v13, 0xF0uLL, 0, 1, a6, a7, a8);
    }
    v13 = v42;
    v8 = v45;
    a3 = (uint64_t)v40;
    a4 = v49;
    v17 = SlowCase;
    result = v54;
    v9 = v61;
LABEL_14:
    if (!v17)
    {
      v53 = result;
      v60 = v9;
      v39 = (JSC::JSCell *)a3;
      v41 = v13;
      v25 = a4;
      JSC::throwOutOfMemoryError(v8, (JSC::JSGlobalObject *)&v64);
      a3 = (uint64_t)v39;
      v13 = v41;
      result = v53;
      v9 = v60;
      a4 = v25;
      v17 = 0;
LABEL_20:
      if (!*(_DWORD *)(v13 + 80))
        goto LABEL_21;
      v23 = *(_DWORD *)(v13 + 80);
      if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      {
        v56 = result;
        v63 = v9;
        v43 = v13;
        v46 = v17;
        v51 = a4;
        v36 = (JSC::JSCell *)a3;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v13 = v43;
        v17 = v46;
        a3 = (uint64_t)v36;
        result = v56;
        v9 = v63;
        a4 = v51;
      }
      if (!*(_QWORD *)(v13 + 16))
      {
LABEL_21:
        *(_QWORD *)(a3 + 16) = v17;
        if (a3 && v17 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a3 + 7))
        {
          v52 = result;
          v57 = v9;
          v47 = a4;
          v19 = (JSC::JSCell *)a3;
          JSC::Heap::writeBarrierSlowPath(v13 + 192, a3);
          a3 = (uint64_t)v19;
          result = v52;
          v9 = v57;
          a4 = v47;
        }
      }
      goto LABEL_6;
    }
LABEL_15:
    *(_DWORD *)v17 = 0;
    v18 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)v17 = v14 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0x1C0000001CLL;
    if ((*(_BYTE *)(v17 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v17 + 208) = 0u;
      *(_OWORD *)(v17 + 224) = 0u;
      *(_OWORD *)(v17 + 176) = 0u;
      *(_OWORD *)(v17 + 192) = 0u;
      *(_OWORD *)(v17 + 144) = 0u;
      *(_OWORD *)(v17 + 160) = 0u;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
    }
    if (*(_BYTE *)(v13 + 755))
      __dmb(0xAu);
    *(int64x2_t *)(v17 + 16) = vdupq_n_s64(0xFFFE000000000000);
    *(_QWORD *)(v17 + 32) = 0xFFFE000000000008;
    goto LABEL_20;
  }
LABEL_6:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_7;
  v20 = *(_DWORD *)(v10 + 80);
  if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
  {
    v55 = result;
    v62 = v9;
    v50 = a4;
    v35 = (JSC::JSCell *)a3;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    a3 = (uint64_t)v35;
    result = v55;
    v9 = v62;
    LODWORD(a4) = v50;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_7:
    v12 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v9 + 4) = v12;
    if (v12
      && (v12 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v9 + 7))
    {
      v59 = v9;
      v22 = a4;
      result = JSC::Heap::writeBarrierSlowPath(result, (unint64_t)v9);
      LODWORD(a4) = v22;
      v9 = v59;
    }
    *((_QWORD *)v9 + 5) = a4 | 0xFFFE000000000000;
  }
  return result;
}

unint64_t JSC::setIteratorPrivateFuncSetIteratorNext(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t Sentinel;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  BOOL v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v8 = *((_QWORD *)this + 7);
  v9 = (unint64_t *)(v8 + 41840);
  v10 = *((_QWORD *)a2 + 6);
  Sentinel = *(_QWORD *)(v8 + 41848);
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v8 + 41848) = Sentinel;
  }
  if (Sentinel == v10)
    return v10;
  v12 = *(_QWORD *)(v10 + 32);
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v8 + 41848) = Sentinel;
  }
  if (Sentinel == v12)
    return 7;
  v13 = *(_DWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v12;
    do
    {
      if (v13)
      {
        v23 = *(_DWORD *)(v16 + 24);
        if (v23)
        {
          if (v23 == -1)
          {
            v13 = 0;
          }
          else
          {
            v28 = v23 + 2;
            if ((v23 + 2) >= 3)
            {
              v27 = 0;
              v29 = v13 - v23;
              v25 = (unsigned int *)(v16 + 32);
              v30 = 2 - v28;
              while (1)
              {
                v26 = *v25;
                v25 += 2;
                if (v13 <= v26)
                  break;
                if (v30 == --v27)
                {
                  v13 = v29;
                  goto LABEL_39;
                }
              }
              v13 += v27;
            }
          }
        }
      }
LABEL_39:
      v16 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v24 = (v14 & 0xFFFE000000000002) == 0;
      else
        v24 = 0;
    }
    while (v24);
  }
  else
  {
    v16 = v12;
  }
  v17 = *(_DWORD *)(v16 + 24) + v14;
  if (v13 >= v17)
  {
LABEL_24:
    if (!Sentinel)
    {
      Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(v8 + 41848) = Sentinel;
    }
    *(_QWORD *)(v10 + 32) = Sentinel;
    v21 = 7;
    if (!Sentinel || (Sentinel & 0xFFFE000000000002) != 0)
      return v21;
    if (*(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath(v8 + 192, v10);
    return 7;
  }
  v18 = *(_DWORD *)(v16 + 32) + 2 * v13 + 4;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 16 + 8 * v18);
    if ((v19 & 0xFFFE000000000002) != 0)
      break;
    v20 = *v9;
    if (!*v9)
    {
      v20 = JSC::Symbol::create((JSC::Symbol *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      *v9 = v20;
    }
    if (v20 != v19)
      break;
    ++v13;
    v18 += 2;
    if (v17 == v13)
    {
      Sentinel = *(_QWORD *)(v8 + 41848);
      goto LABEL_24;
    }
  }
  *(_QWORD *)(v10 + 16) = (v13 + 1) | 0xFFFE000000000000;
  if (v16 != v12)
  {
    *(_QWORD *)(v10 + 32) = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath(v8 + 192, v10);
  }
  v21 = 6;
  if (!v19)
    return 7;
  return v21;
}

uint64_t JSC::setIteratorPrivateFuncSetIteratorKey(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t Sentinel;

  v8 = (unint64_t *)*((_QWORD *)this + 7);
  v9 = *((_QWORD *)a2 + 6);
  v10 = v8 + 5231;
  Sentinel = v8[5231];
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *v10 = Sentinel;
  }
  if (Sentinel != v9)
    return *(_QWORD *)(*(_QWORD *)(v9 + 32)
                     + 8 * (*(_DWORD *)(*(_QWORD *)(v9 + 32) + 32) + 2 * *(_DWORD *)(v9 + 16) + 2)
                     + 16);
  return v9;
}

_DWORD *JSC::JSSourceCode::destroy(JSC::JSSourceCode *this, JSC::JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (JSC::JSRunLoopTimer::Manager::*&)(void),JSC::JSRunLoopTimer::Manager*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t JSC::ResolveOp::operator=(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)a1 = v9;
  v11 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v12 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E35A2D90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData()::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E35A2D90;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>()
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  JSC::JSRunLoopTimer::Manager::shared(void)::manager = result;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  return WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  JSC::JSRunLoopTimer::Manager::PerVMData *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  JSC::JSRunLoopTimer::Manager::PerVMData *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  JSC::JSRunLoopTimer::Manager::PerVMData *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v11 + 16 * v22;
      v25 = *(unsigned int **)v24;
      if (*(_QWORD *)v24)
      {
        if (v25 != (unsigned int *)-1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = ((unint64_t)v25 + ~((_QWORD)v25 << 32)) ^ (((unint64_t)v25 + ~((_QWORD)v25 << 32)) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = v26 + 16 * v33;
          v36 = *(JSC::JSRunLoopTimer::Manager::PerVMData **)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v36)
          {
            JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v36);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
            v45 = *(unsigned int **)v35;
            *(_QWORD *)v35 = 0;
            if (v45)
            {
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                atomic_store(1u, v45);
                JSC::JSLock::~JSLock((JSC::JSLock *)v45, v15, v16, v17, v18, v19, v20, v21);
                WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
              }
            }
          }
          else
          {
            *(_QWORD *)v35 = 0;
          }
          v59 = *(unsigned int **)v24;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)v35 = v59;
          v60 = v11 + 16 * v22;
          v61 = *(_QWORD *)(v60 + 8);
          *(_QWORD *)(v60 + 8) = 0;
          *(_QWORD *)(v35 + 8) = v61;
          v62 = *(JSC::JSRunLoopTimer::Manager::PerVMData **)(v60 + 8);
          *(_QWORD *)(v60 + 8) = 0;
          if (v62)
          {
            JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v62);
            WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
          }
          v71 = *(unsigned int **)v24;
          *(_QWORD *)v24 = 0;
          if (v71)
          {
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              atomic_store(1u, v71);
              JSC::JSLock::~JSLock((JSC::JSLock *)v71, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
            }
          }
          if (v24 == a3)
            v23 = v35;
        }
      }
      else
      {
        v48 = *(JSC::JSRunLoopTimer::Manager::PerVMData **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v48)
        {
          JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v48);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
          v25 = *(unsigned int **)v24;
        }
        *(_QWORD *)v24 = 0;
        if (v25)
        {
          do
          {
            v57 = __ldaxr(v25);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v25));
          if (!v58)
          {
            atomic_store(1u, v25);
            JSC::JSLock::~JSLock((JSC::JSLock *)v25, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
          }
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::remove(uint64_t *a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  JSC::JSRunLoopTimer::Manager::PerVMData *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v10 = *a2;
  *a2 = 0;
  if (v10)
  {
    do
    {
      v26 = __ldaxr(v10);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v10));
    if (!v27)
    {
      atomic_store(1u, v10);
      JSC::JSLock::~JSLock((JSC::JSLock *)v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  v11 = (JSC::JSRunLoopTimer::Manager::PerVMData *)a2[1];
  *a2 = (unsigned int *)-1;
  a2[1] = 0;
  if (v11)
  {
    JSC::JSRunLoopTimer::Manager::PerVMData::~PerVMData(v11);
    WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  ++*(_DWORD *)(*a1 - 16);
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) - 1;
  else
    v21 = -1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a1;
  if (*a1)
  {
    v23 = 6 * *(_DWORD *)(v22 - 12);
    v24 = *(_DWORD *)(v22 - 4);
    if (v23 < v24 && v24 >= 9)
      WTF::HashTable<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashMap<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>,std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>,WTF::DefaultHash<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>,WTF::HashTraits<std::unique_ptr<JSC::JSRunLoopTimer::Manager::PerVMData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<JSC::JSLock,WTF::RawPtrTraits<JSC::JSLock>,WTF::DefaultRefDerefTraits<JSC::JSLock>>>>::rehash(a1, v24 >> 1, 0, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::Vector<std::pair<WTF::Ref<JSC::JSRunLoopTimer,WTF::RawPtrTraits<JSC::JSRunLoopTimer>,WTF::DefaultRefDerefTraits<JSC::JSRunLoopTimer>>,WTF::MonotonicTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<std::pair<WTF::Ref<JSC::JSRunLoopTimer,WTF::RawPtrTraits<JSC::JSRunLoopTimer>,WTF::DefaultRefDerefTraits<JSC::JSRunLoopTimer>>,WTF::MonotonicTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<std::pair<WTF::Ref<JSC::JSRunLoopTimer,WTF::RawPtrTraits<JSC::JSRunLoopTimer>,WTF::DefaultRefDerefTraits<JSC::JSRunLoopTimer>>,WTF::MonotonicTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<WTF::Ref<JSC::JSRunLoopTimer,WTF::RawPtrTraits<JSC::JSRunLoopTimer>,WTF::DefaultRefDerefTraits<JSC::JSRunLoopTimer>>,WTF::MonotonicTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int **v24;
  _QWORD *v25;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (unsigned int **)(v7 + 16 * v8);
        v18 = (unsigned int **)v7;
        do
        {
          v19 = *v18;
          *v18 = 0;
          *v9 = v19;
          v9[1] = v18[1];
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            v21 = v20 + 2;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v20 + 2);
              v25 = v9;
              v24 = v17;
              (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
              v17 = v24;
              v9 = v25;
            }
          }
          v9 += 2;
          v18 += 2;
        }
        while (v18 != v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int **v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (unsigned int **)(v10 + 8 * i);
      if (*v22 != (unsigned int *)-1)
      {
        if (*v22)
        {
          WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::reinsert(*a1, (uint64_t *)(v10 + 8 * i));
          v25 = *v22;
          *v22 = 0;
          if (v25)
          {
            v26 = v25 + 2;
            do
            {
              v23 = __ldaxr(v26);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v26));
            if (!v24)
            {
              atomic_store(1u, v25 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
            }
          }
        }
        else
        {
          *v22 = 0;
        }
      }
    }
    goto LABEL_15;
  }
  if (v10)
LABEL_15:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>,WTF::HashTraits<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(a1 + 8 * v7));
  result = (uint64_t *)(a1 + 8 * v7);
  *result = 0;
  v9 = *a2;
  *a2 = 0;
  *result = v9;
  return result;
}

void JSC::JSString::destroy(JSC::JSString *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 != 2)
    {
      *(_DWORD *)v8 -= 2;
      return;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v14)
    {
      pas_try_deallocate_slow_no_cache(v8, (uint64_t)&bmalloc_heap_config, 1);
      return;
    }
    if (!(v8 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v8 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v8)) & 1) != 0)
    {
      goto LABEL_8;
    }
    if (v8 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v8 >> 24)
    {
      v9 = 0;
    }
    else
    {
      v9 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v8 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v8) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v9 == 1)
      {
LABEL_8:
        v15 = *(unsigned int *)(v14 + 8000);
        if (v15 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v14, v8, (os_unfair_lock_s *)5, v9, v10, v11, v12, v13);
        }
        else
        {
          *(_QWORD *)(v14 + 8 * v15) = v8 | 0x5000000000000;
          *(_DWORD *)(v14 + 8000) = v15 + 1;
        }
        return;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, v8, 1, v9, v10, v11, v12, v13);
  }
}

uint64_t JSC::JSString::dumpToStream(JSC::JSString *this, const JSC::JSCell *a2, WTF::PrintStream *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) != 0)
    v6 = (_DWORD *)((char *)this + 16);
  else
    v6 = (_DWORD *)(v5 + 4);
  WTF::PrintStream::printf(a2, "<%p, %s, [%u], ", this, *(const char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)), *v6);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    if ((v7 & 2) != 0)
      WTF::PrintStream::printf(a2, "[substring]");
    else
      WTF::PrintStream::printf(a2, "[rope]", v9);
  }
  else if (v7)
  {
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      WTF::PrintStream::printf(a2, "[8 %p]");
    else
      WTF::PrintStream::printf(a2, "[16 %p]");
  }
  return WTF::PrintStream::printf(a2, ">");
}

uint64_t JSC::JSString::estimatedSize(unint64_t this, JSC::JSCell *a2, JSC::VM *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;

  v4 = *(WTF::StringImpl **)(this + 8);
  if ((this & 8) == 0)
  {
    v5 = 16 * **(unsigned int **)(this & 0xFFFFFFFFFFFFC000);
    if ((v4 & 1) != 0)
      return v5;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(this - 88);
  if ((v4 & 1) == 0)
LABEL_5:
    v5 += WTF::StringImpl::costDuringGC(v4);
  return v5;
}

void JSC::JSString::visitChildren(JSC::JSString *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  JSC::MarkedBlock *v24;
  int v25;
  unint64_t v26;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    a3 = 0;
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
  {
    if (!v12)
      return;
    v19 = WTF::StringImpl::costDuringGC(*((WTF::StringImpl **)this + 1));
    if (!*((_BYTE *)a2 + 184))
      return;
    *((_QWORD *)a2 + 18) += v19;
    v20 = *((_QWORD *)a2 + 20);
    v21 = __CFADD__(v20, v19);
    v22 = v20 + v19;
    if (!v21)
    {
      *((_QWORD *)a2 + 20) = v22;
      return;
    }
    goto LABEL_49;
  }
  if ((v12 & 2) == 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0)
      return;
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF8) - 79) & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_13:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_14;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12 & 0xFFFFFFFFFFFFFFF8, 0, a4, a5, a6, a7, a8);
LABEL_14:
    v14 = *(_QWORD *)((char *)this + 20);
    if ((v14 & 0xFFFFFFFFFLL) == 0)
      return;
    if ((v14 & 8) != 0)
    {
      if ((*(_BYTE *)((v14 & 0xFFFFFFFFFLL) - 79) & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      v15 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v14 & 0xFFFFFC000 | 0x20) != v15)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFC000), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v14 & 0xFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
      {
LABEL_19:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_20;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v14 & 0xFFFFFFFFFLL, 0, a4, a5, a6, a7, a8);
LABEL_20:
    v16 = *((_QWORD *)this + 3);
    if (v16 < 0x10000)
      return;
    v17 = v16 >> 16;
    if ((v16 & 0x80000) != 0)
    {
      if ((*(_BYTE *)(v17 - 79) & 1) == 0)
        goto LABEL_45;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v17 & 0xFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFC000), v18, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v17 & 0xFFFFFFFFC000) + 8 * ((v16 >> 26) & 0xF) + 0x28) >> (v16 >> 20)) & 1) == 0)
        goto LABEL_45;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_45:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v17, 0, a4, a5, a6, a7, a8);
    return;
  }
  v23 = *(_QWORD *)((char *)this + 20);
  v17 = v23 & 0xFFFFFFFFFLL;
  if ((v23 & 0xFFFFFFFFFLL) != 0)
  {
    if ((v23 & 8) != 0)
    {
      if ((*(_BYTE *)(v17 - 79) & 1) == 0)
        goto LABEL_45;
LABEL_37:
      if (*((_QWORD *)a2 + 21))
        goto LABEL_45;
      return;
    }
    v24 = (JSC::MarkedBlock *)(v23 & 0xFFFFFC000);
    v25 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v23 & 0xFFFFFC000 | 0x20) != v25)
      JSC::MarkedBlock::aboutToMarkSlow(v24, v25, (uint64_t)a3, a4, a5, a6, a7, a8);
    v26 = ((v17 - (unint64_t)v24) >> 4);
    if (v26 < 0x400)
    {
      if (((*(_QWORD *)((char *)v24 + ((v26 >> 3) & 0x1FFFFFF8) + 40) >> ((v17 - (unint64_t)v24) >> 4)) & 1) == 0)
        goto LABEL_45;
      goto LABEL_37;
    }
    __break(1u);
LABEL_49:
    *((_BYTE *)a2 + 152) = 1;
  }
}

uint64_t JSC::JSString::visitChildren(JSC::JSString *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (!v5 || !*(_BYTE *)(v5 + 24))
  {
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v13[0] + 88) = v14;
    result = *((_QWORD *)this + 1);
    if ((result & 1) != 0)
    {
      if ((result & 2) != 0)
      {
        v9 = *(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL;
      }
      else
      {
        if ((result & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_13;
        result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, result & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL) == 0)
          goto LABEL_13;
        result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        v8 = *((_QWORD *)this + 3);
        if (v8 < 0x10000)
          goto LABEL_13;
        v9 = v8 >> 16;
      }
      result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
    }
    else if (result)
    {
      v7 = WTF::StringImpl::costDuringGC((WTF::StringImpl *)result);
      result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, v7);
    }
LABEL_13:
    *(_QWORD *)(v10[0] + 88) = v11;
    return result;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::expand(JSC::MarkedVectorBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  JSC::MarkedVectorBase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  _DWORD *v21;
  int v22;
  unint64_t v23;
  BOOL v24;
  unsigned int *v25;
  uint64_t v26;
  JSC::VM *v27;
  int v28;
  uint64_t result;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  JSC::MarkedVectorBase *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int *v48;
  int v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  JSC::MarkedVectorBase *v55;

  if (*(_BYTE *)this)
  {
    __break(0xC471u);
    JUMPOUT(0x198A6E6A4);
  }
  v10 = (JSC::MarkedVectorBase *)((char *)this + 24);
  v9 = *((_DWORD *)this + 6);
  v11 = *((_QWORD *)this + 1);
  if (v9 < 3)
  {
    if (v9)
    {
      v46 = (uint64_t *)*((_QWORD *)this + 4);
      v13 = *v46;
      if (v9 != 1)
      {
        v14 = v46[1];
        v15 = 10;
        v47 = *v46;
LABEL_45:
        v16 = *(_QWORD *)(v47 + 8);
        v48 = (int *)(v47 + 16);
        if ((v16 & 1) == 0)
          v48 = (int *)(v16 + 4);
        v49 = *v48;
        v19 = *(_QWORD *)(v14 + 8);
        v20 = (v19 & 1) == 0;
        v50 = (_DWORD *)(v14 + 16);
        if ((v19 & 1) == 0)
          v50 = (_DWORD *)(v19 + 4);
        v51 = *v50 + v49;
        v23 = MEMORY[0x12];
        v24 = (MEMORY[0x12] & 1) == 0;
        v52 = 26;
        v26 = MEMORY[0x12] + 4;
        if ((MEMORY[0x12] & 1) == 0)
          v52 = MEMORY[0x12] + 4;
        v27 = (JSC::VM *)*(unsigned int *)v52;
        v28 = v51 + (_DWORD)v27;
        if ((v16 & 1) == 0)
          goto LABEL_10;
        result = (v16 >> 2) & 1;
        goto LABEL_11;
      }
      v14 = 10;
      v47 = *v46;
    }
    else
    {
      v14 = 10;
      v13 = 10;
      v47 = 10;
    }
    v15 = 10;
    goto LABEL_45;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 4);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = *(_QWORD *)(*v12 + 8);
  v17 = (int *)(*v12 + 16);
  if ((v16 & 1) == 0)
    v17 = (int *)(v16 + 4);
  v18 = *v17;
  v19 = *(_QWORD *)(v14 + 8);
  v20 = (v19 & 1) == 0;
  v21 = (_DWORD *)(v14 + 16);
  if ((v19 & 1) == 0)
    v21 = (_DWORD *)(v19 + 4);
  v22 = *v21 + v18;
  v23 = *(_QWORD *)(v15 + 8);
  v24 = (v23 & 1) == 0;
  v25 = (unsigned int *)(v15 + 16);
  v26 = v23 + 4;
  if ((v23 & 1) == 0)
    v25 = (unsigned int *)(v23 + 4);
  v27 = (JSC::VM *)*v25;
  v28 = v22 + (_DWORD)v27;
  if ((v16 & 1) == 0)
  {
LABEL_10:
    result = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
    goto LABEL_11;
  }
  result = (v16 >> 2) & 1;
LABEL_11:
  v30 = (uint64_t *)(v11 + 39432);
  if (v20)
    LODWORD(v19) = (*(unsigned __int8 *)(v19 + 16) >> 2) & 1;
  else
    v19 = (v19 >> 2) & 1;
  v31 = result & v19;
  if (v24)
    LODWORD(v23) = (*(unsigned __int8 *)(v23 + 16) >> 2) & 1;
  else
    v23 = (v23 >> 2) & 1;
  v32 = v31 & v23;
  v33 = *v30;
  if ((unint64_t)*v30 < *(_QWORD *)(v11 + 39440))
    goto LABEL_16;
  v33 = *(_QWORD *)(v11 + 39448);
  if ((v33 & 1) == 0)
  {
    v39 = *(_QWORD *)(v33 + 8) ^ *(_QWORD *)(v11 + 39456);
    *(_QWORD *)(v11 + 39440) = v33 + HIDWORD(v39);
    *(_QWORD *)(v11 + 39448) = v33 + (int)v39;
LABEL_16:
    *v30 = v33 + 32;
    goto LABEL_17;
  }
  v40 = v11 + 39408;
  v41 = v11 + 192;
  v53 = v11;
  v42 = v13;
  JSC::sanitizeStackForVM((JSC *)v11, v27, v26, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v40, v41, 32, 0, 0, v43, v44, v45);
  v13 = v42;
  v33 = result;
  v11 = v53;
LABEL_17:
  *(_DWORD *)v33 = (unint64_t)v30[260] >> 4;
  *(_DWORD *)(v33 + 4) = 17302016;
  v34 = 5;
  if (!v32)
    v34 = 1;
  *(_QWORD *)(v33 + 8) = v34 | v13;
  *(_DWORD *)(v33 + 16) = v28;
  *(_DWORD *)(v33 + 20) = v14;
  *(_WORD *)(v33 + 24) = WORD2(v14);
  *(_WORD *)(v33 + 26) = v15;
  *(_DWORD *)(v33 + 28) = v15 >> 16;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_DWORD *)this + 7))
  {
    v35 = (JSC::MarkedVectorBase *)*((_QWORD *)this + 4);
    if (v35 == (JSC::MarkedVectorBase *)((char *)this + 48) || !v35)
    {
      *(_QWORD *)v35 = v33;
      *(_DWORD *)v10 = 1;
      return result;
    }
    v36 = 0;
  }
  else
  {
    result = JSC::MarkedVectorBase::expandCapacity(v10, 0);
    if ((_DWORD)result)
    {
      *((_BYTE *)this + 16) = 1;
      return result;
    }
    v36 = *(_DWORD *)v10;
  }
  *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v36) = v33;
  *((_DWORD *)this + 6) = v36 + 1;
  if ((v33 & 0xFFFE000000000002) == 0 && !*((_QWORD *)this + 5))
  {
    v37 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v33 & 8) != 0)
      v37 = (_QWORD *)(v33 - 16);
    v38 = (uint64_t *)(*v37 + 560);
    *((_QWORD *)this + 5) = v38;
    v55 = v10;
    return (uint64_t)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v38, (uint64_t *)&v55, a4, a5, a6, a7, a8, (uint64_t)v54);
  }
  return result;
}

BOOL JSC::JSString::equalSlowCase(JSC::JSString *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unsigned int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _BOOL8 result;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  int8x16_t *v44;
  unsigned int v45;
  int8x16_t *v46;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  int16x8_t *v52;
  unsigned int v53;
  uint8x8_t *v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  BOOL v58;
  uint8x8_t *v59;
  unsigned int v60;
  int16x8_t *v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  BOOL v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int16x8_t *v74;
  char *v75;
  int16x8_t *v76;
  int v77;
  int v78;
  __int32 v79;
  uint64_t v80;
  int v81;
  int v82;
  uint16x8_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8x16_t v89;
  unsigned int v90;
  uint8x16_t v91;
  BOOL v92;
  __int32 v93;
  __int32 v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint16x8_t v99;
  unsigned int v100;
  uint16x8_t v101;
  BOOL v102;
  char *v103;

  v9 = *((_QWORD *)this + 1);
  v10 = (unsigned int *)((char *)this + 16);
  v11 = (int *)(v9 + 4);
  if ((v9 & 1) != 0)
    v11 = (int *)((char *)this + 16);
  v12 = *v11;
  v13 = *((_QWORD *)a3 + 1);
  v14 = (unint64_t)a3 + 16;
  if ((v13 & 1) != 0)
    v15 = (_DWORD *)((char *)a3 + 16);
  else
    v15 = (_DWORD *)(v13 + 4);
  if (v12 != *v15)
    return 0;
  v18 = a2;
  v19 = *((_QWORD *)a2 + 7);
  if ((v9 & 1) == 0)
  {
    if (v9)
    {
      v20 = *(char **)(v9 + 8);
      LODWORD(v21) = *(_DWORD *)(v9 + 4);
      v22 = ((unint64_t)*(unsigned int *)(v9 + 16) >> 2) & 1;
LABEL_11:
      v23 = v21 | (unint64_t)(v22 << 32);
      goto LABEL_12;
    }
    v20 = 0;
    LODWORD(v21) = 0;
    goto LABEL_93;
  }
  if ((v9 & 2) == 0)
  {
    v21 = *JSC::JSRopeString::resolveRope((unint64_t)this, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v21)
    {
      v51 = v21[4];
      v20 = (char *)*((_QWORD *)v21 + 1);
      LODWORD(v21) = v21[1];
      v22 = (v51 >> 2) & 1;
      goto LABEL_11;
    }
    v20 = 0;
LABEL_93:
    v22 = 1;
    goto LABEL_11;
  }
  v29 = *(_QWORD *)((*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL) + 8);
  if (v29
    && (v30 = *(unsigned int *)(v29 + 4),
        v31 = *((_QWORD *)this + 3),
        v32 = v31 >> 16,
        v30 > (v31 >> 16)))
  {
    v33 = *(unsigned int *)(v29 + 16);
    v20 = *(char **)(v29 + 8);
    v34 = *v10;
    if ((int)v30 - (int)v32 > *v10 || (v34 = v30 - v32, (_DWORD)v32))
    {
      v26 = (char *)(v31 >> 16);
      v23 = v34;
      v35 = v30 - v32;
      if (((v33 >> 2) & 1) != 0)
      {
        if (v35 < v34)
          goto LABEL_161;
        v20 = &v26[(_QWORD)v20];
        v23 = v34 | 0x100000000;
      }
      else
      {
        if (v35 < v34)
          goto LABEL_161;
        v20 += 2 * (_QWORD)v26;
      }
    }
    else
    {
      v23 = v30 & 0xFFFFFFFEFFFFFFFFLL | (((v33 >> 2) & 1) << 32);
    }
  }
  else
  {
    v20 = &str_105_2;
    v23 = 0x100000000;
  }
LABEL_12:
  if (*(_DWORD *)(v19 + 80))
  {
    LODWORD(v26) = *(_DWORD *)(v19 + 80);
    if ((v26 & 0x27) != 0)
      goto LABEL_162;
    goto LABEL_111;
  }
  while (1)
  {
    v24 = (int *)*((_QWORD *)a3 + 1);
    if ((v24 & 1) == 0)
    {
      if (v24)
      {
LABEL_15:
        v25 = v24[4];
        v26 = (char *)*((_QWORD *)v24 + 1);
        LODWORD(v24) = v24[1];
        v27 = (v25 >> 2) & 1;
LABEL_16:
        v14 = v24 | (unint64_t)(v27 << 32);
        v18 = a3;
        goto LABEL_17;
      }
LABEL_57:
      v26 = 0;
      v27 = 1;
      goto LABEL_16;
    }
    if ((v24 & 2) == 0)
    {
      v24 = *JSC::JSRopeString::resolveRope((unint64_t)a3, v18, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v24)
        goto LABEL_15;
      goto LABEL_57;
    }
    v18 = (JSC::JSGlobalObject *)(*(_QWORD *)((_BYTE *)a3 + 20) & 0xFFFFFFFFFLL);
    v36 = *((_QWORD *)v18 + 1);
    if (v36
      && (v37 = *(unsigned int *)(v36 + 4),
          v38 = *((_QWORD *)a3 + 3),
          v39 = v38 >> 16,
          v37 > (v38 >> 16)))
    {
      v40 = *(unsigned int *)(v36 + 16);
      v26 = *(char **)(v36 + 8);
      v41 = *(_DWORD *)v14;
      if ((v37 - v39) > *(_DWORD *)v14 || (v41 = v37 - v39, (_DWORD)v39))
      {
        v42 = (v38 >> 16);
        v14 = v41;
        v43 = v37 - v39;
        if (((v40 >> 2) & 1) != 0)
        {
          if (v43 < v41)
            goto LABEL_161;
          v26 += v42;
          v14 = v41 | 0x100000000;
        }
        else
        {
          if (v43 < v41)
            goto LABEL_161;
          v26 += 2 * v42;
        }
      }
      else
      {
        v14 = v37 & 0xFFFFFFFEFFFFFFFFLL | (((v40 >> 2) & 1) << 32);
      }
    }
    else
    {
      v26 = &str_105_2;
      v14 = 0x100000000;
    }
LABEL_17:
    if (*(_DWORD *)(v19 + 80))
    {
      v77 = *(_DWORD *)(v19 + 80);
      if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      {
        v103 = v26;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v26 = v103;
      }
      if (*(_QWORD *)(v19 + 16))
        return 0;
    }
    result = 1;
    if (!v12 || v20 == v26)
      return result;
    v28 = v14 & 0x100000000;
    if ((v23 & 0x100000000) != 0)
    {
      if (v28)
      {
        if ((_DWORD)v23 && (_DWORD)v14)
        {
          if (*v20 != *v26)
            return 0;
          v44 = (int8x16_t *)(v20 + 1);
          v45 = v14 - 1;
          v46 = (int8x16_t *)(v26 + 1);
          if ((_DWORD)v14 != 2)
          {
            if ((_DWORD)v14 == 1)
              return result;
            v47 = 32 - __clz(v14 - 2);
            if (v47 != 3)
            {
              switch(v47)
              {
                case 1u:
                  v66 = v44->u16[0];
                  v67 = v46->u16[0];
                  return v66 == v67;
                case 2u:
                  if (v44->u16[0] != v46->u16[0])
                    return 0;
                  v48 = *(unsigned __int16 *)&v20[v14 - 2];
                  v49 = *(unsigned __int16 *)&v26[v14 - 2];
                  return v48 == v49;
                case 4u:
                  if (v44->i64[0] != v46->i64[0])
                    return 0;
                  return *(_QWORD *)&v20[v14 - 8] == *(_QWORD *)&v26[v14 - 8];
                case 5u:
                  v83 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v20[v14 - 16], *(int8x16_t *)&v26[v14 - 16]), vceqq_s8(*(int8x16_t *)(v20 + 1), *(int8x16_t *)(v26 + 1)));
                  v83.i8[0] = vminvq_u8((uint8x16_t)v83);
                  return v83.i32[0] != 0;
                default:
                  v89 = (uint8x16_t)vceqq_s8(*v44, *v46);
                  v89.i8[0] = vminvq_u8(v89);
                  if (!v89.i32[0])
                    return 0;
                  if (v45 >= 0x10)
                  {
                    v90 = v45 & 0xF;
                    do
                    {
                      v91 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v44 + v90), *(int8x16_t *)((char *)v46 + v90));
                      v91.i8[0] = vminvq_u8(v91);
                      result = v91.i32[0] != 0;
                      v90 += 16;
                      if (v91.i32[0])
                        v92 = v90 >= v45;
                      else
                        v92 = 1;
                    }
                    while (!v92);
                  }
                  return result;
              }
            }
            if (v44->i32[0] == v46->i32[0])
            {
              v48 = *(_DWORD *)&v20[v14 - 4];
              v49 = *(_DWORD *)&v26[v14 - 4];
              return v48 == v49;
            }
            return 0;
          }
          if (v14 != 1)
          {
            v66 = v44->u8[0];
            v67 = v46->u8[0];
            return v66 == v67;
          }
        }
      }
      else if ((_DWORD)v23 && (_DWORD)v14)
      {
        if (*(_WORD *)v26 != *v20)
          return 0;
        v59 = (uint8x8_t *)(v20 + 1);
        v60 = v14 - 1;
        v61 = (int16x8_t *)(v26 + 2);
        if ((v14 - 1) >= 8)
        {
          v62 = (uint16x8_t)vceqq_s16(*v61, (int16x8_t)vmovl_u8(*v59));
          v62.i16[0] = vminvq_u16(v62);
          if (v62.i32[0])
          {
            v63 = v60 & 7;
            do
            {
              v64 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v61 + 2 * v63), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v59 + v63)));
              v64.i16[0] = vminvq_u16(v64);
              result = v64.i32[0] != 0;
              v63 += 8;
              if (v64.i32[0])
                v65 = v63 >= v60;
              else
                v65 = 1;
            }
            while (!v65);
            return result;
          }
          return 0;
        }
        if (v60 >= 4)
        {
          v68 = (v59->u32[0] | ((unint64_t)v59->u32[0] << 16)) & 0xFFFF0000FFFFLL;
          v50 = ((v68 | (v68 << 8)) & 0xFF00FF00FF00FFLL) == v61->i64[0];
          v69 = v60 & 3;
          v70 = (*(unsigned int *)((char *)v59->u32 + v69) | ((unint64_t)*(unsigned int *)((char *)v59->u32 + v69) << 16)) & 0xFFFF0000FFFFLL;
          v71 = (v70 | (v70 << 8)) & 0xFF00FF00FF00FFLL;
          v72 = *(uint64_t *)((char *)v61->i64 + 2 * v69);
          return v50 && v71 == v72;
        }
        if (v60 >= 2)
        {
          v78 = (v59->u16[0] | (v59->u16[0] << 8)) & 0xFF00FF;
          v79 = v61->i32[0];
          v80 = v60 & 1;
          v81 = (*(unsigned __int16 *)((char *)v59->u16 + v80) | (*(unsigned __int16 *)((char *)v59->u16 + v80) << 8)) & 0xFF00FF;
          v82 = *(__int32 *)((char *)v61->i32 + 2 * v80);
          return v78 == v79 && v81 == v82;
        }
        if ((_DWORD)v14 != 2)
          return result;
        v67 = v59->u8[0];
        v66 = v61->u16[0];
        return v66 == v67;
      }
      goto LABEL_161;
    }
    if (v28)
      break;
    if ((_DWORD)v23 && (_DWORD)v14)
    {
      if (*(unsigned __int16 *)v20 != *(unsigned __int16 *)v26)
        return 0;
      v73 = v14 - 1;
      if ((_DWORD)v14 == 1)
        return result;
      v74 = (int16x8_t *)(v20 + 2);
      v75 = v26;
      v76 = (int16x8_t *)(v26 + 2);
      if ((_DWORD)v14 != 2)
      {
        switch(31 - __clz(v14 - 2))
        {
          case 0u:
            v93 = v74->i32[0];
            v94 = v76->i32[0];
            return v93 == v94;
          case 1u:
            if (v74->i32[0] != v76->i32[0])
              return 0;
            v66 = *(_DWORD *)&v20[2 * v14 - 4];
            v67 = *(_DWORD *)&v75[2 * v14 - 4];
            return v66 == v67;
          case 2u:
            if (v74->i64[0] != v76->i64[0])
              return 0;
            return *(_QWORD *)&v20[2 * v14 - 8] == *(_QWORD *)&v75[2 * v14 - 8];
          case 3u:
            v83 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v20[2 * v14 - 16], *(int16x8_t *)&v75[2 * v14 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v20 + 2), *(int16x8_t *)(v75 + 2)));
            v83.i16[0] = vminvq_u16(v83);
            return v83.i32[0] != 0;
          default:
            v99 = (uint16x8_t)vceqq_s16(*v74, *v76);
            v99.i16[0] = vminvq_u16(v99);
            if (!v99.i32[0])
              return 0;
            if (v73 >= 8)
            {
              v100 = v73 & 7;
              do
              {
                v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v74 + 2 * v100), *(int16x8_t *)((char *)v76 + 2 * v100));
                v101.i16[0] = vminvq_u16(v101);
                result = v101.i32[0] != 0;
                v100 += 8;
                if (v101.i32[0])
                  v102 = v100 >= v73;
                else
                  v102 = 1;
              }
              while (!v102);
            }
            return result;
        }
      }
      v93 = v74->u16[0];
      v94 = v76->u16[0];
      return v93 == v94;
    }
LABEL_161:
    __break(1u);
LABEL_162:
    if ((v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_111:
    if (*(_QWORD *)(v19 + 16))
      return 0;
  }
  if (!(_DWORD)v23 || !(_DWORD)v14)
    goto LABEL_161;
  if (*(_WORD *)v20 != *v26)
    return 0;
  v52 = (int16x8_t *)(v20 + 2);
  v53 = v14 - 1;
  v54 = (uint8x8_t *)(v26 + 1);
  if ((v14 - 1) >= 8)
  {
    v55 = (uint16x8_t)vceqq_s16(*v52, (int16x8_t)vmovl_u8(*v54));
    v55.i16[0] = vminvq_u16(v55);
    if (v55.i32[0])
    {
      v56 = v53 & 7;
      do
      {
        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v52 + 2 * v56), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v54 + v56)));
        v57.i16[0] = vminvq_u16(v57);
        result = v57.i32[0] != 0;
        v56 += 8;
        if (v57.i32[0])
          v58 = v56 >= v53;
        else
          v58 = 1;
      }
      while (!v58);
      return result;
    }
    return 0;
  }
  if (v53 >= 4)
  {
    v84 = (v54->u32[0] | ((unint64_t)v54->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    v85 = v53 & 3;
    v86 = (*(unsigned int *)((char *)v54->u32 + v85) | ((unint64_t)*(unsigned int *)((char *)v54->u32 + v85) << 16)) & 0xFFFF0000FFFFLL;
    v87 = (v86 | (v86 << 8)) & 0xFF00FF00FF00FFLL;
    v88 = *(uint64_t *)((char *)v52->i64 + 2 * v85);
    return ((v84 | (v84 << 8)) & 0xFF00FF00FF00FFLL) == v52->i64[0] && v87 == v88;
  }
  if (v53 >= 2)
  {
    v95 = (v54->u16[0] | (v54->u16[0] << 8)) & 0xFF00FF;
    v96 = v53 & 1;
    v97 = (*(unsigned __int16 *)((char *)v54->u16 + v96) | (*(unsigned __int16 *)((char *)v54->u16 + v96) << 8)) & 0xFF00FF;
    v98 = *(__int32 *)((char *)v52->i32 + 2 * v96);
    return v95 == v52->i32[0] && v97 == v98;
  }
  if ((_DWORD)v14 == 2)
  {
    v94 = v54->u8[0];
    v93 = v52->u16[0];
    return v93 == v94;
  }
  return result;
}

unint64_t WTF::StringImpl::costDuringGC(WTF::StringImpl *this)
{
  unint64_t v1;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(unsigned int *)this;
  if ((v1 & 1) != 0)
    return 0;
  v3 = *((_DWORD *)this + 4);
  if ((v3 & 3) == 2)
  {
    v5 = WTF::StringImpl::costDuringGC(*((WTF::StringImpl **)this + 3));
    v4 = (unint64_t)*(unsigned int *)this >> 1;
    v6 = v4;
  }
  else
  {
    v4 = (unint64_t)*((unsigned int *)this + 1) << ((v3 & 4) == 0);
    v5 = v1 >> 1;
    v6 = v1 >> 1;
  }
  return (v5 + v4 - 1) / v6;
}

void JSC::JSRopeString::resolveRopeToAtomString(JSC::JSRopeString *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  JSC *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  int *v30;
  int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  _QWORD v63[2];
  int v64;
  _QWORD v65[2];
  int v66;
  unsigned __int8 __dst[16];
  unsigned __int8 v68;
  uint64_t v69;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v10 = v2;
  v12 = v11;
  v69 = *MEMORY[0x1E0C80C00];
  v13 = *(unsigned int *)(v2 + 16);
  if (v13 < 0x801)
  {
    v14 = *((_QWORD *)v3 + 7);
    v15 = *(_QWORD *)(v2 + 8);
    if ((v15 & 2) == 0)
    {
      v16 = *(WTF **)(v14 + 8);
      if ((v15 & 1) != 0)
      {
        if ((v15 & 4) != 0)
        {
LABEL_5:
          JSC::JSRopeString::resolveToBuffer<unsigned char>(v15 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(v2 + 24) >> 16, (uint64_t)__dst, v13, v16, v7, v8);
          v18 = *(unsigned int *)(v10 + 16);
          if ((_DWORD)v18)
          {
            v19 = -1640531527;
            v63[0] = __dst;
            v63[1] = v18;
            if ((_DWORD)v18 == 1)
              goto LABEL_7;
            v56 = 0;
            do
            {
              v57 = ((v19 + __dst[v56]) << 16) ^ (__dst[v56 + 1] << 11) ^ (v19 + __dst[v56]);
              v19 = v57 + (v57 >> 11);
              v58 = v56 + 3;
              v56 += 2;
            }
            while (v58 < v18);
            if ((v18 & 1) != 0)
            {
LABEL_7:
              v20 = (v19 + __dst[v18 - 1]) ^ ((v19 + __dst[v18 - 1]) << 11);
              v19 = v20 + (v20 >> 17);
            }
            v21 = (v19 ^ (8 * v19)) + ((v19 ^ (8 * v19)) >> 5);
            v22 = (v21 ^ (4 * v21)) + ((v21 ^ (4 * v21)) >> 15);
            v23 = (v22 ^ (v22 << 10)) & 0xFFFFFF;
            if (!v23)
              v23 = 0x800000;
            v64 = v23;
            if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
            {
              __clrex();
            }
            else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
            {
              goto LABEL_13;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_13:
            v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v25)
              v25 = WTF::Thread::initializeCurrentTLS(0);
            WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v25 + 56), (uint64_t)v63, v17, v13, v6, v7, v8, (uint64_t)v65);
            v28 = v66;
            v29 = (unsigned int *)v65[0];
            goto LABEL_16;
          }
LABEL_42:
          v30 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_43;
        }
      }
      else if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
        goto LABEL_5;
      }
      JSC::JSRopeString::resolveToBuffer<char16_t>(v15 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(v2 + 24) >> 16, (char *)__dst, v13, (unint64_t)v16, v7, v8, v9);
      WTF::AtomStringImpl::add((uint64_t)__dst, *(unsigned int *)(v10 + 16), v49, v50, v51, v52, v53, v65);
      v30 = (int *)v65[0];
      goto LABEL_43;
    }
    v32 = *(_QWORD *)((*(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v32)
    {
      v33 = *(char **)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v33 = 0;
      v34 = 0x100000000;
    }
    v35 = *(_QWORD *)(v10 + 24);
    v36 = v35 >> 16;
    if (v34 <= (v35 >> 16))
    {
      v40 = 0;
      v33 = &str_105_2;
      if (&str_105_2)
        goto LABEL_31;
      goto LABEL_62;
    }
    if (v34 - (v35 >> 16) > v13
      || (v13 = v34 - (v35 >> 16), (_DWORD)v36))
    {
      v37 = (v35 >> 16);
      v38 = v13;
      v39 = v34 - (unint64_t)v36;
      if ((v34 & 0x100000000) != 0)
      {
        if (v39 >= v13)
        {
          v33 += v37;
          v38 = v13 | 0x100000000;
          goto LABEL_29;
        }
LABEL_77:
        __break(1u);
      }
      if (v39 < v13)
        goto LABEL_77;
      v33 += 2 * v37;
    }
    else
    {
      v38 = v34;
    }
LABEL_29:
    v40 = v38;
    if ((v38 & 0x100000000) == 0)
    {
      WTF::AtomStringImpl::add((uint64_t)v33, v38, v5, v13, v6, v7, v8, __dst);
      v30 = *(int **)__dst;
      goto LABEL_43;
    }
    if (v33)
    {
LABEL_31:
      if (!v40)
        goto LABEL_42;
      v41 = -1640531527;
      v65[0] = v33;
      v65[1] = v40;
      if (v40 == 1)
        goto LABEL_33;
      v59 = 0;
      do
      {
        v60 = ((v41 + v33[v59]) << 16) ^ (v33[v59 + 1] << 11) ^ (v41
                                                                                                 + v33[v59]);
        v41 = v60 + (v60 >> 11);
        v61 = v59 + 3;
        v59 += 2;
      }
      while (v61 < v40);
      if ((v40 & 1) != 0)
LABEL_33:
        v41 = ((v41 + v33[v40 - 1]) ^ ((v41 + v33[v40 - 1]) << 11))
            + (((v41 + v33[v40 - 1]) ^ ((v41 + v33[v40 - 1]) << 11)) >> 17);
      v42 = (v41 ^ (8 * v41)) + ((v41 ^ (8 * v41)) >> 5);
      v43 = (v42 ^ (4 * v42)) + ((v42 ^ (4 * v42)) >> 15);
      v44 = (v43 ^ (v43 << 10)) & 0xFFFFFF;
      if (!v44)
        v44 = 0x800000;
      v66 = v44;
      if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
      {
        goto LABEL_39;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_39:
      v46 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v46)
        v46 = WTF::Thread::initializeCurrentTLS(0);
      WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v46 + 56), (uint64_t)v65, v5, v13, v6, v7, v8, (uint64_t)__dst);
      v28 = v68;
      v29 = *(unsigned int **)__dst;
LABEL_16:
      v30 = (int *)(16 * *v29);
      if (!v28)
        *v30 += 2;
      v31 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
      if (v31 == 1)
      {
        if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
        {
LABEL_43:
          *v12 = v30;
          v47 = *v30;
          if (*v30 != 2)
            goto LABEL_44;
          v54 = v30[4];
          v55 = v30;
          if ((v54 & 3) == 2)
          {
            v55 = v30;
            do
            {
              v55 = (int *)*((_QWORD *)v55 + 3);
              v54 = v55[4];
            }
            while ((v54 & 3) == 2);
          }
          if ((v54 & 8) != 0)
          {
LABEL_44:
            v48 = 0;
          }
          else
          {
            v55[4] = v54 | 8;
            v48 = (unint64_t)v55[1] << ((v54 & 4) == 0);
          }
          *v30 = v47 + 2;
          __dmb(0xAu);
          *(_QWORD *)(v10 + 8) = v30;
          if (v48 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(v14 + 192, 0, v10, v48, v13, v6, v7, v8);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v26, v27, v13, v6, v7, v8);
      goto LABEL_43;
    }
LABEL_62:
    v30 = 0;
    goto LABEL_43;
  }
  v62 = *JSC::JSRopeString::resolveRopeWithFunction<true,JSC::JSRopeString::resolveRopeToAtomString(JSC::JSGlobalObject *)::$_1>(v2, v3, v9, v4, v5, v13, v6, v7, v8);
  if (v62)
    *(_DWORD *)v62 += 2;
  *v12 = v62;
}

WTF::StringImpl **JSC::JSRopeString::resolveRopeWithFunction<true,JSC::JSRopeString::resolveRopeToAtomString(JSC::JSGlobalObject *)::$_1>(uint64_t a1, JSC *this, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  char *v18;
  int *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::VM *v63;
  unint64_t OutOfMemoryError;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::Exception *v70;
  WTF::AtomStringImpl *v71;
  char *v72;

  v10 = (uint64_t *)(a1 - 16);
  if ((a1 & 8) == 0)
    v10 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  v12 = (WTF::StringImpl **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  if ((v11 & 2) != 0)
  {
    WTF::String::substringSharingImpl((int **)((*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL) + 8), *(_DWORD *)(a1 + 26), *(_DWORD *)(a1 + 16), (int **)&v71);
    v37 = v71;
    if ((*((_BYTE *)v71 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v71 += 2;
      v38 = v37;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((unint64_t)v71, v31, v32, v33, v34, v35, v36, (WTF *)&v72);
      v38 = (WTF::StringImpl *)v72;
    }
    __dmb(0xAu);
    *v12 = v38;
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, (uint64_t)v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
    return v12;
  }
  v14 = *v10;
  if ((v11 & 1) != 0)
  {
    if ((v11 & 4) == 0)
      goto LABEL_6;
  }
  else if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
LABEL_6:
    v15 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v15)
    {
      v21 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v17 = dword_1ECF2C430;
      if ((dword_1ECF2C430 & 3) == 2)
      {
        v16 = &WTF::StringImpl::s_emptyAtomString;
        do
        {
          v16 = (int *)*((_QWORD *)v16 + 3);
          v17 = v16[4];
        }
        while ((v17 & 3) == 2);
      }
      else
      {
        v16 = &WTF::StringImpl::s_emptyAtomString;
      }
      v19 = &dword_1ECF2C430;
      v20 = 0;
      v18 = 0;
      if ((v17 & 8) != 0)
      {
        v22 = 0;
LABEL_11:
        JSC::JSRopeString::resolveToBuffer<char16_t>(v11 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(a1 + 24) >> 16, v18, v20, *(_QWORD *)(v14 + 8), a8, a9, a3);
        if ((*(_BYTE *)v19 & 0x10) != 0)
        {
          *(_DWORD *)v21 += 2;
          v45 = v21;
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      v15 = v16[1];
LABEL_10:
      v16[4] = v17 | 8;
      v22 = v15 << ((v17 & 4) == 0);
      goto LABEL_11;
    }
    if (v15 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20), &v72);
      v16 = (int *)v72;
      if (v72)
      {
        v17 = 0;
        v18 = v72 + 20;
        *(_DWORD *)v72 = 2;
        v16[1] = v15;
        *((_QWORD *)v16 + 1) = v16 + 5;
        v16[4] = 0;
        v19 = v16 + 4;
        v11 = *(_QWORD *)(a1 + 8);
        v20 = *(unsigned int *)(a1 + 16);
        v21 = (WTF::StringImpl *)v16;
        goto LABEL_10;
      }
    }
    goto LABEL_35;
  }
  v39 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v39)
  {
    v21 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v42 = dword_1ECF2C430;
    if ((dword_1ECF2C430 & 3) == 2)
    {
      v40 = &WTF::StringImpl::s_emptyAtomString;
      do
      {
        v40 = (int *)*((_QWORD *)v40 + 3);
        v42 = v40[4];
      }
      while ((v42 & 3) == 2);
    }
    else
    {
      v40 = &WTF::StringImpl::s_emptyAtomString;
    }
    v43 = &dword_1ECF2C430;
    v44 = 0;
    v41 = 0;
    if ((v42 & 8) != 0)
    {
      v22 = 0;
LABEL_23:
      JSC::JSRopeString::resolveToBuffer<unsigned char>(v11 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(a1 + 24) >> 16, v41, v44, *(WTF **)(v14 + 8), a8, a9);
      if ((*(_BYTE *)v43 & 0x10) != 0)
      {
        *(_DWORD *)v21 += 2;
        v45 = v21;
        goto LABEL_25;
      }
LABEL_24:
      WTF::AtomStringImpl::addSlowCase((unint64_t)v21, v24, v25, v26, v27, v28, v29, (WTF *)&v72);
      v45 = (WTF::StringImpl *)v72;
LABEL_25:
      __dmb(0xAu);
      *v12 = v45;
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
      if (v22 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v14 + 192, 0, a1, v22, v26, v27, v28, v29);
      return v12;
    }
    v39 = v40[1];
LABEL_22:
    v40[4] = v42 | 8;
    v22 = v39 << ((v42 & 4) == 0);
    goto LABEL_23;
  }
  if ((v39 & 0x80000000) == 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v39 + 20), &v72);
    v40 = (int *)v72;
    if (v72)
    {
      v41 = (uint64_t)(v72 + 20);
      *(_DWORD *)v72 = 2;
      v40[1] = v39;
      *((_QWORD *)v40 + 1) = v40 + 5;
      v42 = 4;
      v40[4] = 4;
      v43 = v40 + 4;
      v11 = *(_QWORD *)(a1 + 8);
      v44 = *(unsigned int *)(a1 + 16);
      v21 = (WTF::StringImpl *)v40;
      goto LABEL_22;
    }
  }
LABEL_35:
  if (this)
  {
    v63 = (JSC::VM *)*((_QWORD *)this + 7);
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, this);
    v70 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v70 = (JSC::Exception *)JSC::Exception::create((uint64_t)v63, (JSC::VM *)OutOfMemoryError, 0, v65, v66, v67, v68, v69);
    }
    JSC::VM::throwException(v63, this, v70);
  }
  return (WTF::StringImpl **)&WTF::nullStringData;
}

void JSC::JSRopeString::resolveRopeToExistingAtomString(JSC::JSRopeString *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  JSC *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *__dst[513];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v10 = v2;
  v12 = v11;
  __dst[512] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)v3 + 7);
  v14 = *(unsigned int *)(v2 + 16);
  if (v14 < 0x801)
  {
    v15 = *(_QWORD *)(v2 + 8);
    if ((v15 & 2) == 0)
    {
      v16 = *(WTF **)(v13 + 8);
      if ((v15 & 1) != 0)
      {
        if ((v15 & 4) != 0)
          goto LABEL_5;
      }
      else if ((*(_BYTE *)(v15 + 16) & 4) != 0)
      {
LABEL_5:
        JSC::JSRopeString::resolveToBuffer<unsigned char>(v15 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(v2 + 24) >> 16, (uint64_t)__dst, v14, v16, v7, v8);
        WTF::AtomStringImpl::lookUp((unint64_t)__dst, *(unsigned int *)(v10 + 16), v17, v18, v19, v20, v21, v22, &v61);
LABEL_6:
        v23 = (WTF::StringImpl *)v61;
        goto LABEL_7;
      }
      JSC::JSRopeString::resolveToBuffer<char16_t>(v15 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(v2 + 24) >> 16, (char *)__dst, v14, (unint64_t)v16, v7, v8, v9);
      WTF::AtomStringImpl::lookUp((unint64_t)__dst, *(unsigned int *)(v10 + 16), v24, v25, v26, v27, v28, v29, &v61);
      goto LABEL_6;
    }
    v30 = *(_QWORD *)((*(_QWORD *)(v2 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v30)
    {
      v31 = *(char **)(v30 + 8);
      v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v31 = 0;
      v32 = 0x100000000;
    }
    v33 = *(_QWORD *)(v10 + 24);
    v34 = v33 >> 16;
    if (v32 <= (v33 >> 16))
    {
      v31 = &str_105_2;
      LODWORD(v13) = 0;
      goto LABEL_23;
    }
    if (v32 - (v33 >> 16) > v14
      || (v14 = v32 - (v33 >> 16), (_DWORD)v34))
    {
      v35 = (v33 >> 16);
      v13 = v14;
      v36 = v32 - (unint64_t)v34;
      if ((v32 & 0x100000000) != 0)
      {
        if (v36 >= v14)
        {
          v31 += v35;
          v13 = v14 | 0x100000000;
          goto LABEL_20;
        }
        goto LABEL_29;
      }
      if (v36 < v14)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      v31 += 2 * v35;
    }
    else
    {
      v13 = v32;
    }
LABEL_20:
    if ((v13 & 0x100000000) == 0)
    {
      WTF::AtomStringImpl::lookUp((unint64_t)v31, v13, v4, v5, v14, v6, v7, v8, __dst);
LABEL_24:
      v23 = __dst[0];
LABEL_7:
      *v12 = v23;
      if (v23)
      {
        *(_DWORD *)v23 += 2;
        __dmb(0xAu);
        *(_QWORD *)(v10 + 8) = v23;
      }
      return;
    }
LABEL_23:
    WTF::AtomStringImpl::lookUp((unint64_t)v31, v13, v4, v5, v14, v6, v7, v8, __dst);
    goto LABEL_24;
  }
LABEL_30:
  v61 = __dst;
  __dst[0] = 0;
  v37 = (JSC::VM *)v13;
  JSC::JSRopeString::resolveRopeWithFunction<true,JSC::JSRopeString::resolveRopeToExistingAtomString(JSC::JSGlobalObject *)::$_0>(v10, v3, &v61, v9, v5, v14, v6, v7, v8);
  if (*((_DWORD *)v37 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v37, v38, v39, v40, v41, v42, v43, v44))
  {
    *v12 = 0;
    v52 = __dst[0];
    __dst[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  else
  {
    *v12 = __dst[0];
  }
}

void JSC::JSRopeString::resolveRopeWithFunction<true,JSC::JSRopeString::resolveRopeToExistingAtomString(JSC::JSGlobalObject *)::$_0>(uint64_t a1, JSC *this, WTF::StringImpl ***a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  char *v18;
  int *v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::AtomStringImpl *v33;
  const WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  int *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::VM *v92;
  unint64_t OutOfMemoryError;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  JSC::Exception *v100;
  WTF::AtomStringImpl *v101;
  char *v102;

  v11 = (uint64_t *)(a1 - 16);
  if ((a1 & 8) == 0)
    v11 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 2) == 0)
  {
    v14 = *v11;
    if ((v12 & 1) != 0)
    {
      if ((v12 & 4) == 0)
        goto LABEL_6;
    }
    else if ((*(_BYTE *)(v12 + 16) & 4) == 0)
    {
LABEL_6:
      v15 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v15)
      {
        v21 = (WTF::AtomStringImpl *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        v17 = dword_1ECF2C430;
        if ((dword_1ECF2C430 & 3) == 2)
        {
          v16 = &WTF::StringImpl::s_emptyAtomString;
          do
          {
            v16 = (int *)*((_QWORD *)v16 + 3);
            v17 = v16[4];
          }
          while ((v17 & 3) == 2);
        }
        else
        {
          v16 = &WTF::StringImpl::s_emptyAtomString;
        }
        v19 = &dword_1ECF2C430;
        v20 = 0;
        v18 = 0;
        if ((v17 & 8) != 0)
        {
          v22 = 0;
LABEL_11:
          JSC::JSRopeString::resolveToBuffer<char16_t>(v12 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(a1 + 24) >> 16, v18, v20, *(_QWORD *)(v14 + 8), a8, a9, a4);
          if ((*(_BYTE *)v19 & 0x10) != 0)
          {
            *(_DWORD *)v21 += 2;
            v30 = v21;
          }
          else
          {
            WTF::AtomStringImpl::lookUpSlowCase(v21, v24, v25, v26, v27, v28, v29, &v102);
            v30 = (WTF::StringImpl *)v102;
          }
          v31 = **a3;
          **a3 = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          v32 = **a3;
          if (v32)
          {
LABEL_41:
            *(_DWORD *)v32 += 2;
            __dmb(0xAu);
            *(_QWORD *)(a1 + 8) = v32;
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl(v21, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
              WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
            goto LABEL_46;
          }
LABEL_43:
          __dmb(0xAu);
          *(_QWORD *)(a1 + 8) = v21;
LABEL_46:
          if (v22 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(v14 + 192, 0, a1, v22, v26, v27, v28, v29);
          return;
        }
        v15 = v16[1];
LABEL_10:
        v16[4] = v17 | 8;
        v22 = v15 << ((v17 & 4) == 0);
        goto LABEL_11;
      }
      if (v15 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20), &v102);
        v16 = (int *)v102;
        if (v102)
        {
          v17 = 0;
          v18 = v102 + 20;
          *(_DWORD *)v102 = 2;
          v16[1] = v15;
          *((_QWORD *)v16 + 1) = v16 + 5;
          v16[4] = 0;
          v19 = v16 + 4;
          v12 = *(_QWORD *)(a1 + 8);
          v20 = *(unsigned int *)(a1 + 16);
          v21 = (WTF::AtomStringImpl *)v16;
          goto LABEL_10;
        }
      }
      goto LABEL_54;
    }
    v44 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v44)
    {
      if ((v44 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v44 + 20), &v102), (v45 = (int *)v102) == 0))
      {
LABEL_54:
        if (this)
        {
          v92 = (JSC::VM *)*((_QWORD *)this + 7);
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, this);
          v100 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v100 = (JSC::Exception *)JSC::Exception::create((uint64_t)v92, (JSC::VM *)OutOfMemoryError, 0, v94, v95, v96, v97, v98);
          }
          JSC::VM::throwException(v92, this, v100, v99, v94, v95, v96, v97, v98);
        }
        return;
      }
      v46 = (uint64_t)(v102 + 20);
      *(_DWORD *)v102 = 2;
      v45[1] = v44;
      *((_QWORD *)v45 + 1) = v45 + 5;
      v47 = 4;
      v45[4] = 4;
      v48 = v45 + 4;
      v12 = *(_QWORD *)(a1 + 8);
      v49 = *(unsigned int *)(a1 + 16);
      v21 = (WTF::AtomStringImpl *)v45;
    }
    else
    {
      v21 = (WTF::AtomStringImpl *)&WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v47 = dword_1ECF2C430;
      if ((dword_1ECF2C430 & 3) == 2)
      {
        v45 = &WTF::StringImpl::s_emptyAtomString;
        do
        {
          v45 = (int *)*((_QWORD *)v45 + 3);
          v47 = v45[4];
        }
        while ((v47 & 3) == 2);
      }
      else
      {
        v45 = &WTF::StringImpl::s_emptyAtomString;
      }
      v48 = &dword_1ECF2C430;
      v49 = 0;
      v46 = 0;
      if ((v47 & 8) != 0)
      {
        v22 = 0;
LABEL_35:
        JSC::JSRopeString::resolveToBuffer<unsigned char>(v12 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(a1 + 24) >> 16, v46, v49, *(WTF **)(v14 + 8), a8, a9);
        if ((*(_BYTE *)v48 & 0x10) != 0)
        {
          *(_DWORD *)v21 += 2;
          v50 = v21;
        }
        else
        {
          WTF::AtomStringImpl::lookUpSlowCase(v21, v24, v25, v26, v27, v28, v29, &v102);
          v50 = (WTF::StringImpl *)v102;
        }
        v51 = **a3;
        **a3 = v50;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::~StringImpl(v51, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
        v32 = **a3;
        if (v32)
          goto LABEL_41;
        goto LABEL_43;
      }
      v44 = v45[1];
    }
    v45[4] = v47 | 8;
    v22 = v44 << ((v47 & 4) == 0);
    goto LABEL_35;
  }
  WTF::String::substringSharingImpl((int **)((*(_QWORD *)(a1 + 20) & 0xFFFFFFFFFLL) + 8), *(_DWORD *)(a1 + 26), *(_DWORD *)(a1 + 16), (int **)&v101);
  v40 = v101;
  if (v101)
  {
    if ((*((_BYTE *)v101 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v101 += 2;
      v41 = v40;
    }
    else
    {
      WTF::AtomStringImpl::lookUpSlowCase(v101, v34, v35, v36, v37, v38, v39, &v102);
      v41 = (WTF::StringImpl *)v102;
    }
  }
  else
  {
    v41 = 0;
  }
  v42 = **a3;
  **a3 = v41;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v33, (uint64_t)v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = **a3;
  if (v43)
  {
    *(_DWORD *)v43 += 2;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v43;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, (uint64_t)v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  else
  {
    __dmb(0xAu);
    *(_QWORD *)(a1 + 8) = v40;
  }
}

int **JSC::JSRopeString::resolveRope(unint64_t this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  uint64_t v11;
  int **v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *casual;
  unsigned int v21;
  unsigned int v22;
  int *v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::JSRopeString *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int8x16_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *i;
  __int16 v67;
  uint64_t v68;
  char *v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int *v89;
  int8x16_t *v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  int8x16_t *v98;
  uint64_t v99;
  char *v100;
  size_t v101;
  int8x16_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  _BYTE *v106;
  _BYTE *v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  char *v115;
  char *v116;
  char *v117;
  __int16 v118;
  char *v119;
  char *v120;
  __int128 v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  char *v125;
  char *v126;
  char *v127;
  __int16 v128;
  char *v129;
  char *v130;
  char *v131;
  __int128 v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  char *v136;
  char *v137;
  char *v138;
  __int16 v139;
  int8x16_t *v140;
  uint64_t v141;
  char *v142;
  __int16 v143;
  __int128 v144;
  char *v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  char *v149;
  char *v150;
  char *v151;
  __int16 v152;
  __int128 v153;
  char *v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  char *v158;
  char *v159;
  char *v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  char *v187;
  char *v188;
  char *v189;
  __int16 v190;
  char *v191;
  int8x16_t v192;
  int8x16_t v193;
  __int128 v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unsigned int v199;
  unint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  __int128 v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  char *v225;
  char *v226;
  char *v227;
  __int16 v228;
  uint64_t v229;
  char *v230;
  char *v231;
  __int128 v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  char *v236;
  char *v237;
  char *v238;
  __int16 v239;
  char *v240;
  char *v241;
  __int128 v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  char *v246;
  char *v247;
  char *v248;
  __int16 v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int v259;
  unsigned int v260;
  char *v261;
  char *v262;
  int8x16_t v263;
  int8x16_t v264;
  char *v265;
  char *v266;
  char *v267;
  __int16 v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  WTF *v276;
  char *v278;
  char *v279;
  int8x16_t v280;
  int8x16_t v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  __int16 v286;
  unsigned int v287;
  unint64_t v288;
  uint64_t v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unint64_t v294;
  unint64_t v295;
  unsigned int v296;
  char *v297;
  char *v298;
  int8x16_t v299;
  int8x16_t v300;
  char *v301;
  char *v302;
  char *v303;
  __int16 v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  WTF *v312;
  char *v314;
  char *v315;
  int8x16_t v316;
  int8x16_t v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  __int16 v322;
  uint64_t v323;
  uint64_t v324;
  int8x16_t v325;
  int8x16_t v326;
  uint64_t v327;
  WTF *v328;
  int v329;
  unsigned int v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  int8x16x2_t v334;
  int8x16x2_t v335;
  int8x16x2_t v336;
  int8x16x2_t v337;
  int8x16x2_t v338;
  int8x16x2_t v339;
  int8x16x2_t v340;
  int8x16x2_t v341;
  int8x16x2_t v342;
  int8x16x2_t v343;
  int8x16x2_t v344;
  int8x16x2_t v345;
  int8x16x2_t v346;
  int8x16x2_t v347;
  int8x16x2_t v348;
  int8x16x2_t v349;
  int8x16x2_t v350;
  int8x16x2_t v351;
  int8x16x2_t v352;
  int8x16x2_t v353;
  int8x16x2_t v354;
  int8x16x2_t v355;
  int8x16x2_t v356;
  int8x16x2_t v357;
  int8x16x2_t v358;
  int8x16x2_t v359;
  int8x16x2_t v360;
  int8x16x2_t v361;
  int8x16x2_t v362;
  int8x16x2_t v363;
  int8x16x2_t v364;
  int8x16x2_t v365;
  int8x16x2_t v366;
  int8x16x2_t v367;
  int8x16x2_t v368;
  int8x16x2_t v369;
  int8x16x2_t v370;
  int8x16x2_t v371;
  int8x16x2_t v372;
  int8x16x2_t v373;
  int8x16x2_t v374;
  int8x16x2_t v375;
  int8x16x2_t v376;
  int8x16x2_t v377;
  int8x16x2_t v378;
  int8x16x2_t v379;
  int8x16x2_t v380;
  int8x16x2_t v381;
  int8x16x2_t v382;

  v10 = (uint64_t *)(this - 16);
  if ((this & 8) == 0)
    v10 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  v12 = (int **)(this + 8);
  v11 = *(_QWORD *)(this + 8);
  if ((v11 & 2) != 0)
  {
    v21 = *(_DWORD *)(this + 26);
    v22 = *(_DWORD *)(this + 16);
    v23 = *(int **)((*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL) + 8);
    if (v23)
      v24 = v23[1];
    else
      v24 = 0;
    if (v24 >= v21)
      v25 = v21;
    else
      v25 = v24;
    if (v24 - v25 >= v22)
      v26 = v22;
    else
      v26 = v24 - v25;
    if ((_DWORD)v25)
      v27 = 0;
    else
      v27 = (_DWORD)v26 == v24;
    if (v27)
    {
      if (!v23)
      {
LABEL_32:
        __dmb(0xAu);
        *v12 = v23;
        return v12;
      }
    }
    else
    {
      if ((_DWORD)v26)
      {
        if ((v23[4] & 4) != 0)
        {
          if (v26 <= 0xC)
          {
            v106 = (_BYTE *)(*((_QWORD *)v23 + 1) + v25);
            v23 = (int *)WTF::fastCompactMalloc((WTF *)(v26 + 20));
            v107 = v23 + 5;
            *v23 = 2;
            v23[1] = v26;
            *((_QWORD *)v23 + 1) = v23 + 5;
            v23[4] = 4;
            if ((_DWORD)v26 == 1)
              *v107 = *v106;
            else
              memcpy(v107, v106, v26);
            goto LABEL_32;
          }
        }
        else if (v26 <= 6)
        {
          v28 = (_WORD *)(*((_QWORD *)v23 + 1) + 2 * v25);
          v23 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v26 + 20));
          v29 = v23 + 5;
          *v23 = 2;
          v23[1] = v26;
          *((_QWORD *)v23 + 1) = v23 + 5;
          v23[4] = 0;
          if ((_DWORD)v26 == 1)
            *v29 = *v28;
          else
            memcpy(v29, v28, 2 * v26);
          goto LABEL_32;
        }
        v85 = *(_DWORD **)((*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL) + 8);
        if ((v23[4] & 3) == 2)
          v85 = (_DWORD *)*((_QWORD *)v23 + 3);
        v86 = WTF::fastCompactMalloc((WTF *)0x20);
        v87 = v23[4];
        v88 = *((_QWORD *)v23 + 1);
        *v85 += 2;
        *(_DWORD *)v86 = 2;
        *(_DWORD *)(v86 + 4) = v26;
        if ((v87 & 4) != 0)
        {
          *(_QWORD *)(v86 + 8) = v88 + v25;
          *(_DWORD *)(v86 + 16) = 6;
        }
        else
        {
          *(_QWORD *)(v86 + 8) = v88 + 2 * v25;
          *(_DWORD *)(v86 + 16) = 2;
        }
        *(_QWORD *)(v86 + 24) = v85;
        v23 = (int *)v86;
        goto LABEL_32;
      }
      v23 = &WTF::StringImpl::s_emptyAtomString;
    }
    *v23 += 2;
    goto LABEL_32;
  }
  v14 = *v10;
  if ((v11 & 1) != 0)
  {
    if ((v11 & 4) == 0)
      goto LABEL_6;
  }
  else if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
LABEL_6:
    v15 = *(unsigned int *)(this + 16);
    if ((_DWORD)v15)
    {
      if (v15 > 0x7FFFFFEF)
        goto LABEL_274;
      v16 = 2 * v15;
      v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v17)
      {
        v18 = (unint64_t)(v16 + 35) >> 4;
        if (v15 <= 0xC6)
        {
          v19 = 23 * v18 + 7;
        }
        else
        {
          if (v15 > 0x137E)
            goto LABEL_12;
          v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v18 + 626);
          if (*(_DWORD *)(v17 + 8052) <= v19)
            goto LABEL_12;
        }
        v48 = v17 + 8 * v19;
        v49 = v48 + 8064;
        *(_BYTE *)(v48 + 8064) = 1;
        v50 = *(unsigned int *)(v48 + 8080);
        if ((_DWORD)v50)
        {
          *(_DWORD *)(v49 + 16) = v50 - *(_DWORD *)(v49 + 20);
          casual = (int *)(*(_QWORD *)(v49 + 8) - v50);
          goto LABEL_55;
        }
        v82 = *(_QWORD *)(v49 + 40);
        v83 = *(_QWORD *)(v49 + 24);
        if (v82)
          goto LABEL_91;
        if (*(_BYTE *)(v49 + 5) == 6)
        {
          v204 = *(unsigned int *)(v49 + 32);
          v205 = *(_DWORD *)(v49 + 36);
          if (v204 < v205)
          {
            *(_QWORD *)(v49 + 8 * v204 + 56) = 0;
            v206 = (unint64_t *)(8 * v19 + 8 * v204 + v17 + 8128);
            v207 = v205 - 1 - v204;
            while (v207)
            {
              v83 += 1024;
              v209 = *v206++;
              v208 = v209;
              LODWORD(v204) = v204 + 1;
              --v207;
              if (v209)
              {
                v82 = __rbit64(v208);
                *(_DWORD *)(v49 + 32) = v204;
                *(_QWORD *)(v49 + 24) = v83;
LABEL_91:
                v84 = __clz(v82);
                *(_QWORD *)(v49 + 40) = v82 & ~(0x8000000000000000 >> v84);
                casual = (int *)(v83 + 16 * v84);
LABEL_55:
                *(_BYTE *)v49 = 0;
LABEL_56:
                if (casual)
                {
                  v51 = 0;
                  v52 = (char *)(casual + 5);
                  *casual = 2;
                  casual[1] = v15;
                  *((_QWORD *)casual + 1) = casual + 5;
                  casual[4] = 0;
                  v11 = *(_QWORD *)(this + 8);
                  v44 = *(unsigned int *)(this + 16);
                  v53 = casual;
                  goto LABEL_58;
                }
LABEL_274:
                if (a2)
                {
                  v328 = (WTF *)*((_QWORD *)a2 + 7);
                  JSC::throwOutOfMemoryError(a2, &v328);
                }
                return (int **)&WTF::nullStringData;
              }
            }
            *(_DWORD *)(v49 + 32) = v205;
          }
        }
        *(_BYTE *)v49 = 0;
      }
LABEL_12:
      casual = (int *)bmalloc_try_allocate_casual(v16 + 20, 0);
      goto LABEL_56;
    }
    casual = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    while (1)
    {
      v51 = casual[4];
      if ((v51 & 3) != 2)
        break;
      casual = (int *)*((_QWORD *)casual + 3);
    }
    v44 = 0;
    v52 = 0;
    if ((v51 & 8) != 0)
    {
      v54 = 0;
      v53 = &WTF::StringImpl::s_emptyAtomString;
    }
    else
    {
      v15 = casual[1];
      v53 = &WTF::StringImpl::s_emptyAtomString;
LABEL_58:
      casual[4] = v51 | 8;
      v54 = v15 << ((v51 & 4) == 0);
    }
    v324 = v14;
    v55 = *(_QWORD *)(v14 + 8);
    v56 = v11 & 0xFFFFFFFFFFFFFFF8;
    v57 = (int8x16_t *)(*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL);
    v58 = *(_QWORD *)(this + 24) >> 16;
    if ((unint64_t)&v323 < v55)
    {
LABEL_213:
      JSC::JSRopeString::resolveToBufferSlow<char16_t>(v56, v57, v58, (uint64_t)v52, v44, v55, a8, a9);
      goto LABEL_147;
    }
    v325 = a5;
    v326 = 0u;
    v59 = (uint64_t)v57;
    while (1)
    {
      if (v58)
      {
        v76 = *(_QWORD *)(v56 + 8);
        if ((v76 & 1) != 0)
        {
          v77 = v53;
          v52 += 2 * v44;
          v53 = (int *)&v331;
          v328 = (WTF *)&v331;
          v329 = 32;
          v331 = v56;
          if (v59)
            goto LABEL_85;
          v78 = 1;
        }
        else
        {
          if ((*(_BYTE *)(v59 + 8) & 1) == 0 && (*(_BYTE *)(v58 + 8) & 1) == 0)
          {
            v89 = v53;
            if (v76)
            {
              v90 = *(int8x16_t **)(v76 + 8);
              v91 = *(unsigned int *)(v76 + 4);
              if ((*(_BYTE *)(v76 + 16) & 4) != 0)
              {
                if (v91 >= 0x40)
                {
                  v108 = &v52[2 * (v91 & 0xFFFFFFC0)];
                  v144 = 0uLL;
                  v145 = v52;
                  do
                  {
                    v342.val[0] = *v90;
                    v146 = v90[1];
                    v357.val[0] = v90[2];
                    v147 = v90[3];
                    v90 += 4;
                    v148 = v147;
                    v357.val[1] = 0uLL;
                    v372.val[0] = v146;
                    v342.val[1] = 0uLL;
                    v149 = v145;
                    vst2q_s8(v149, v342);
                    v149 += 32;
                    v372.val[1] = 0uLL;
                    vst2q_s8(v149, v372);
                    v150 = v145 + 64;
                    vst2q_s8(v150, v357);
                    v151 = v145 + 96;
                    vst2q_s8(v151, *(int8x16x2_t *)(&v144 - 1));
                    v145 += 128;
                  }
                  while (v145 != v108);
                }
                else
                {
                  v108 = v52;
                }
                while (v108 != &v52[2 * v91])
                {
                  v152 = v90->u8[0];
                  v90 = (int8x16_t *)((char *)v90 + 1);
                  *(_WORD *)v108 = v152;
                  v108 += 2;
                }
              }
              else if ((_DWORD)v91 == 1)
              {
                *(_WORD *)v52 = v90->i16[0];
                LODWORD(v91) = 1;
              }
              else if ((_DWORD)v91)
              {
                memcpy(v52, v90, 2 * v91);
              }
            }
            else
            {
              LODWORD(v91) = 0;
            }
            v92 = *(_QWORD *)(v59 + 8);
            if (v92)
            {
              v93 = *(int8x16_t **)(v92 + 8);
              v94 = *(unsigned int *)(v92 + 4);
              v95 = v91;
              v96 = &v52[2 * v91];
              if ((*(_BYTE *)(v92 + 16) & 4) != 0)
              {
                v109 = &v96[2 * v94];
                v53 = v89;
                if (v94 >= 0x40)
                {
                  v110 = &v96[2 * (v94 & 0xFFFFFFC0)];
                  v111 = 0uLL;
                  do
                  {
                    v339.val[0] = *v93;
                    v112 = v93[1];
                    v354.val[0] = v93[2];
                    v113 = v93[3];
                    v93 += 4;
                    v114 = v113;
                    v354.val[1] = 0uLL;
                    v369.val[0] = v112;
                    v339.val[1] = 0uLL;
                    v115 = v96;
                    vst2q_s8(v115, v339);
                    v115 += 32;
                    v369.val[1] = 0uLL;
                    vst2q_s8(v115, v369);
                    v116 = v96 + 64;
                    vst2q_s8(v116, v354);
                    v117 = v96 + 96;
                    vst2q_s8(v117, *(int8x16x2_t *)(&v111 - 1));
                    v96 += 128;
                  }
                  while (v96 != v110);
                  v96 = v110;
                }
                while (v96 != v109)
                {
                  v118 = v93->u8[0];
                  v93 = (int8x16_t *)((char *)v93 + 1);
                  *(_WORD *)v96 = v118;
                  v96 += 2;
                }
              }
              else
              {
                v53 = v89;
                if ((_DWORD)v94 == 1)
                {
                  *(_WORD *)v96 = v93->i16[0];
                  LODWORD(v94) = 1;
                }
                else if ((_DWORD)v94)
                {
                  memcpy(v96, v93, 2 * v94);
                }
              }
            }
            else
            {
              LODWORD(v94) = 0;
              v95 = v91;
              v53 = v89;
            }
            v97 = *(_QWORD *)(v58 + 8);
            if (!v97)
              goto LABEL_147;
            v98 = *(int8x16_t **)(v97 + 8);
            v99 = *(unsigned int *)(v97 + 4);
            v100 = &v52[2 * v95 + 2 * v94];
            if ((*(_BYTE *)(v97 + 16) & 4) != 0)
            {
              v119 = &v100[2 * v99];
              if (v99 >= 0x40)
              {
                v120 = &v100[2 * (v99 & 0xFFFFFFC0)];
                v121 = 0uLL;
                do
                {
                  v340.val[0] = *v98;
                  v122 = v98[1];
                  v355.val[0] = v98[2];
                  v123 = v98[3];
                  v98 += 4;
                  v124 = v123;
                  v355.val[1] = 0uLL;
                  v370.val[0] = v122;
                  v340.val[1] = 0uLL;
                  v125 = v100;
                  vst2q_s8(v125, v340);
                  v125 += 32;
                  v370.val[1] = 0uLL;
                  vst2q_s8(v125, v370);
                  v126 = v100 + 64;
                  vst2q_s8(v126, v355);
                  v127 = v100 + 96;
                  vst2q_s8(v127, *(int8x16x2_t *)(&v121 - 1));
                  v100 += 128;
                }
                while (v100 != v120);
                v100 = v120;
              }
              while (v100 != v119)
              {
                v128 = v98->u8[0];
                v98 = (int8x16_t *)((char *)v98 + 1);
                *(_WORD *)v100 = v128;
                v100 += 2;
              }
              goto LABEL_147;
            }
            if ((_DWORD)v99 != 1)
            {
              if (!(_DWORD)v99)
                goto LABEL_147;
              v101 = 2 * v99;
              goto LABEL_125;
            }
            goto LABEL_214;
          }
          v77 = v53;
          v52 += 2 * v44;
          v53 = (int *)&v331;
          v328 = (WTF *)&v331;
          v329 = 32;
          v331 = v56;
LABEL_85:
          v332 = v59;
          v333 = v58;
          v78 = 3;
        }
        v325 = a5;
        v326 = 0u;
        while (1)
        {
          v55 = *((_QWORD *)v328 + v78 - 1);
          v250 = v78 - 1;
          v330 = v78 - 1;
          v251 = *(_QWORD *)(v55 + 8);
          if ((v251 & 1) == 0)
            break;
          if ((v251 & 2) != 0)
          {
            v269 = *(_QWORD *)((*(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL) + 8);
            v270 = *(unsigned int *)(v269 + 4);
            v271 = *(_QWORD *)(v55 + 24);
            v272 = v271 >> 16;
            v273 = *(unsigned int *)(v55 + 16);
            v52 -= 2 * v273;
            if (v270 <= (v271 >> 16))
              goto LABEL_302;
            v57 = *(int8x16_t **)(v269 + 8);
            if ((int)v270 - (int)v272 <= v273)
            {
              if ((_DWORD)v272)
              {
                v273 = (v270 - v272);
                goto LABEL_329;
              }
              v273 = v270 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v269 + 16) >> 2) & 1) << 32);
            }
            else
            {
LABEL_329:
              v274 = (v271 >> 16);
              v275 = v270 - v272;
              if (((*(_DWORD *)(v269 + 16) >> 2) & 1) != 0)
              {
                if (v275 < v273)
                  goto LABEL_407;
                v57 = (int8x16_t *)((char *)v57 + v274);
                v273 |= 0x100000000uLL;
              }
              else
              {
                if (v275 < v273)
                  goto LABEL_407;
                v57 = (int8x16_t *)((char *)v57 + 2 * v274);
              }
            }
            if ((v273 & 0x100000000) != 0)
            {
              if (v273 < 0x40)
              {
                v278 = v52;
              }
              else
              {
                v278 = &v52[2 * (v273 & 0xFFFFFFC0)];
                v279 = v52;
                do
                {
                  v335.val[0] = *v57;
                  v280 = v57[1];
                  v350.val[0] = v57[2];
                  v281 = v57[3];
                  v57 += 4;
                  v365.val[1] = 0uLL;
                  v365.val[0] = v281;
                  v350.val[1] = 0u;
                  v380.val[0] = v280;
                  v335.val[1] = 0u;
                  v282 = v279;
                  vst2q_s8(v282, v335);
                  v282 += 32;
                  v380.val[1] = 0u;
                  vst2q_s8(v282, v380);
                  v283 = v279 + 64;
                  vst2q_s8(v283, v350);
                  v284 = v279 + 96;
                  vst2q_s8(v284, v365);
                  v279 += 128;
                }
                while (v279 != v278);
              }
              v285 = &v52[2 * v273];
              while (v278 != v285)
              {
                v286 = v57->u8[0];
                v57 = (int8x16_t *)((char *)v57 + 1);
                *(_WORD *)v278 = v286;
                v278 += 2;
              }
            }
            else if ((_DWORD)v273 == 1)
            {
              *(_WORD *)v52 = v57->i16[0];
            }
            else if ((_DWORD)v273)
            {
              memcpy(v52, v57, 2 * v273);
            }
LABEL_302:
            v78 = v330;
            if (!v330)
              goto LABEL_335;
            continue;
          }
          if (v251 < 8)
            goto LABEL_302;
          v254 = v251 & 0xFFFFFFFFFFFFFFF8;
          v327 = v254;
          if (v250 == v329)
          {
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
          }
          else
          {
            *((_QWORD *)v328 + v250) = v254;
            v330 = v78;
          }
          v255 = *(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL;
          if (!v255)
            goto LABEL_302;
          v327 = *(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL;
          v256 = v330;
          if (v330 == v329)
          {
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
          }
          else
          {
            *((_QWORD *)v328 + v330) = v255;
            v330 = v256 + 1;
          }
          v257 = *(_QWORD *)(v55 + 24);
          if (v257 < 0x10000)
            goto LABEL_302;
          v258 = v257 >> 16;
          v327 = v258;
          v259 = v330;
          if (v330 == v329)
          {
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
            goto LABEL_302;
          }
          v260 = v330 + 1;
          *((_QWORD *)v328 + v330) = v258;
          v330 = v260;
          v78 = v260;
          if (v259 == -1)
          {
LABEL_335:
            v276 = v328;
            if (&v331 != (unint64_t *)v328 && v328 != 0)
            {
              v328 = 0;
              v329 = 0;
              WTF::fastFree((unint64_t)v276, v57, a3, a4, v44, a7, a8, a9);
            }
            __dmb(0xAu);
            *v12 = v77;
            if (v54 >= 0x101)
            {
LABEL_148:
              v45 = v324 + 192;
              v46 = (JSC::JSRopeString *)this;
              v47 = v54;
LABEL_149:
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v45, 0, (uint64_t)v46, v47, v44, a7, a8, a9);
            }
            return v12;
          }
        }
        v252 = *(unsigned int *)(v251 + 4);
        v57 = *(int8x16_t **)(v251 + 8);
        v253 = &v52[-2 * v252];
        if ((*(_BYTE *)(v251 + 16) & 4) != 0)
        {
          if (v252 >= 0x40)
          {
            v261 = &v253[2 * (v252 & 0xFFFFFFC0)];
            v262 = v253;
            do
            {
              v334.val[0] = *v57;
              v263 = v57[1];
              v349.val[0] = v57[2];
              v264 = v57[3];
              v57 += 4;
              v379.val[1] = v326;
              v379.val[0] = v264;
              v349.val[1] = v326;
              v364.val[0] = v263;
              v334.val[1] = v326;
              v265 = v262;
              vst2q_s8(v265, v334);
              v265 += 32;
              v364.val[1] = v334.val[1];
              vst2q_s8(v265, v364);
              v266 = v262 + 64;
              vst2q_s8(v266, v349);
              v267 = v262 + 96;
              v325 = v379.val[0];
              v326 = v349.val[1];
              vst2q_s8(v267, v379);
              v262 += 128;
            }
            while (v262 != v261);
          }
          else
          {
            v261 = &v52[-2 * v252];
          }
          while (v261 != v52)
          {
            v268 = v57->u8[0];
            v57 = (int8x16_t *)((char *)v57 + 1);
            *(_WORD *)v261 = v268;
            v261 += 2;
          }
        }
        else if ((_DWORD)v252 == 1)
        {
          *(_WORD *)v253 = v57->i16[0];
        }
        else if ((_DWORD)v252)
        {
          memcpy(&v52[-2 * v252], v57, 2 * v252);
        }
        v52 = v253;
        goto LABEL_302;
      }
      v60 = *(_QWORD *)(v56 + 8);
      if (!v59)
        break;
      if ((v60 & 1) != 0)
      {
        v61 = *(_QWORD *)(v59 + 8);
        if ((v61 & 1) != 0)
        {
          v52 += 2 * v44;
          v58 = (unint64_t)&v331;
          v328 = (WTF *)&v331;
          v329 = 32;
          v331 = v56;
          v332 = v59;
          v105 = 2;
          v325 = a5;
          v326 = 0u;
          goto LABEL_363;
        }
        if (v61)
        {
          v57 = *(int8x16_t **)(v61 + 8);
          v62 = *(unsigned int *)(v61 + 4);
          v58 = v56 + 16;
          v63 = *(unsigned int *)(v56 + 16);
          v64 = &v52[2 * v63];
          if ((*(_BYTE *)(v61 + 16) & 4) != 0)
          {
            if (v62 >= 0x40)
            {
              v65 = &v64[2 * (v62 & 0xFFFFFFC0)];
              v69 = &v52[2 * v63];
              do
              {
                a5 = *v57;
                v70 = v57[1];
                v338.val[0] = v57[2];
                v71 = v57[3];
                v57 += 4;
                v368.val[1] = v326;
                v368.val[0] = v71;
                v338.val[1] = v326;
                v353.val[0] = v70;
                v72 = v326;
                v73 = v69;
                vst2q_s8(v73, *(int8x16x2_t *)a5.i8);
                v73 += 32;
                v353.val[1] = v72;
                vst2q_s8(v73, v353);
                v74 = v69 + 64;
                vst2q_s8(v74, v338);
                v75 = v69 + 96;
                v325 = v368.val[0];
                v326 = v338.val[1];
                vst2q_s8(v75, v368);
                v69 += 128;
              }
              while (v69 != v65);
            }
            else
            {
              v65 = &v52[2 * v63];
            }
            for (i = &v64[2 * v62]; v65 != i; v65 += 2)
            {
              v67 = v57->u8[0];
              v57 = (int8x16_t *)((char *)v57 + 1);
              *(_WORD *)v65 = v67;
            }
          }
          else if ((_DWORD)v62 == 1)
          {
            *(_WORD *)v64 = v57->i16[0];
          }
          else if ((_DWORD)v62)
          {
            memcpy(v64, v57, 2 * v62);
          }
        }
        else
        {
          v58 = v56 + 16;
        }
        v60 = *(_QWORD *)(v56 + 8);
        if ((v60 & 2) != 0)
        {
          v210 = *(_QWORD *)((*(_QWORD *)(v56 + 20) & 0xFFFFFFFFFLL) + 8);
          v211 = *(unsigned int *)(v210 + 4);
          v212 = *(_QWORD *)(v56 + 24);
          v213 = v212 >> 16;
          if (v211 <= (v212 >> 16))
            goto LABEL_147;
          v214 = *(unsigned int *)(v210 + 16);
          v98 = *(int8x16_t **)(v210 + 8);
          v215 = *(_DWORD *)v58;
          if ((v211 - v213) <= *(_DWORD *)v58)
          {
            v215 = v211 - v213;
            if (!(_DWORD)v213)
            {
              v170 = v211 & 0xFFFFFFFEFFFFFFFFLL | (((v214 >> 2) & 1) << 32);
              goto LABEL_243;
            }
          }
          v216 = (v214 >> 2) & 1;
          v217 = (v212 >> 16);
          v170 = v215;
          v218 = v211 - v213;
          if ((_DWORD)v216)
          {
            if (v218 >= v215)
            {
              v98 = (int8x16_t *)((char *)v98 + v217);
              v170 = v215 | 0x100000000;
LABEL_243:
              if ((v170 & 0x100000000) != 0)
              {
                v219 = &v52[2 * v170];
                if (v170 >= 0x40)
                {
                  v220 = &v52[2 * (v170 & 0xFFFFFFC0)];
                  v221 = 0uLL;
                  do
                  {
                    v346.val[0] = *v98;
                    v222 = v98[1];
                    v361.val[0] = v98[2];
                    v223 = v98[3];
                    v98 += 4;
                    v224 = v223;
                    v361.val[1] = 0uLL;
                    v376.val[0] = v222;
                    v346.val[1] = 0uLL;
                    v225 = v52;
                    vst2q_s8(v225, v346);
                    v225 += 32;
                    v376.val[1] = 0uLL;
                    vst2q_s8(v225, v376);
                    v226 = v52 + 64;
                    vst2q_s8(v226, v361);
                    v227 = v52 + 96;
                    vst2q_s8(v227, *(int8x16x2_t *)(&v221 - 1));
                    v52 += 128;
                  }
                  while (v52 != v220);
                  v52 = v220;
                }
                while (v52 != v219)
                {
                  v228 = v98->u8[0];
                  v98 = (int8x16_t *)((char *)v98 + 1);
                  *(_WORD *)v52 = v228;
                  v52 += 2;
                }
                goto LABEL_147;
              }
LABEL_194:
              if ((_DWORD)v170 != 1)
              {
                if (!(_DWORD)v170)
                  goto LABEL_147;
                v101 = 2 * v170;
                goto LABEL_197;
              }
LABEL_273:
              *(_WORD *)v52 = v98->i16[0];
              goto LABEL_147;
            }
          }
          else if (v218 >= v215)
          {
            v98 = (int8x16_t *)((char *)v98 + 2 * v217);
            goto LABEL_243;
          }
LABEL_407:
          while (2)
          {
            __break(1u);
LABEL_408:
            WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
LABEL_372:
            v292 = *(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL;
            if (v292)
            {
              v327 = *(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL;
              v293 = v330;
              if (v330 == v329)
              {
                WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
              }
              else
              {
                *((_QWORD *)v328 + v330) = v292;
                v330 = v293 + 1;
              }
              v294 = *(_QWORD *)(v55 + 24);
              if (v294 >= 0x10000)
              {
                v295 = v294 >> 16;
                v327 = v295;
                v296 = v330;
                if (v330 == v329)
                {
                  WTF::Vector<JSC::JSString *,32ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSString *>((uint64_t)&v328, (unint64_t)&v327);
                }
                else
                {
                  *((_QWORD *)v328 + v330) = v295;
                  v330 = v296 + 1;
                }
              }
            }
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_362:
                  v105 = v330;
                  if (!v330)
                  {
                    v312 = v328;
                    if ((WTF *)v58 != v328 && v328 != 0)
                    {
                      v328 = 0;
                      v329 = 0;
                      WTF::fastFree((unint64_t)v312, v57, a3, a4, v44, a7, a8, a9);
                    }
                    goto LABEL_147;
                  }
LABEL_363:
                  v55 = *((_QWORD *)v328 + v105 - 1);
                  v287 = v105 - 1;
                  v330 = v105 - 1;
                  v288 = *(_QWORD *)(v55 + 8);
                  if ((v288 & 1) != 0)
                    break;
                  v289 = *(unsigned int *)(v288 + 4);
                  v57 = *(int8x16_t **)(v288 + 8);
                  v290 = &v52[-2 * v289];
                  if ((*(_BYTE *)(v288 + 16) & 4) != 0)
                  {
                    if (v289 >= 0x40)
                    {
                      v297 = &v290[2 * (v289 & 0xFFFFFFC0)];
                      v298 = v290;
                      do
                      {
                        v336.val[0] = *v57;
                        v299 = v57[1];
                        v351.val[0] = v57[2];
                        v300 = v57[3];
                        v57 += 4;
                        v381.val[1] = v326;
                        v381.val[0] = v300;
                        v351.val[1] = v326;
                        v366.val[0] = v299;
                        v336.val[1] = v326;
                        v301 = v298;
                        vst2q_s8(v301, v336);
                        v301 += 32;
                        v366.val[1] = v336.val[1];
                        vst2q_s8(v301, v366);
                        v302 = v298 + 64;
                        vst2q_s8(v302, v351);
                        v303 = v298 + 96;
                        v325 = v381.val[0];
                        v326 = v351.val[1];
                        vst2q_s8(v303, v381);
                        v298 += 128;
                      }
                      while (v298 != v297);
                    }
                    else
                    {
                      v297 = &v52[-2 * v289];
                    }
                    while (v297 != v52)
                    {
                      v304 = v57->u8[0];
                      v57 = (int8x16_t *)((char *)v57 + 1);
                      *(_WORD *)v297 = v304;
                      v297 += 2;
                    }
                  }
                  else if ((_DWORD)v289 == 1)
                  {
                    *(_WORD *)v290 = v57->i16[0];
                  }
                  else if ((_DWORD)v289)
                  {
                    memcpy(&v52[-2 * v289], v57, 2 * v289);
                  }
                  v52 = v290;
                }
                if ((v288 & 2) != 0)
                  break;
                if (v288 >= 8)
                {
                  v291 = v288 & 0xFFFFFFFFFFFFFFF8;
                  v327 = v291;
                  if (v287 == v329)
                    goto LABEL_408;
                  *((_QWORD *)v328 + v287) = v291;
                  v330 = v105;
                  goto LABEL_372;
                }
              }
              v305 = *(_QWORD *)((*(_QWORD *)(v55 + 20) & 0xFFFFFFFFFLL) + 8);
              v306 = *(unsigned int *)(v305 + 4);
              v307 = *(_QWORD *)(v55 + 24);
              v308 = v307 >> 16;
              v309 = *(unsigned int *)(v55 + 16);
              v52 -= 2 * v309;
            }
            while (v306 <= (v307 >> 16));
            v57 = *(int8x16_t **)(v305 + 8);
            if ((int)v306 - (int)v308 <= v309)
            {
              if ((_DWORD)v308)
              {
                v309 = (v306 - v308);
                goto LABEL_388;
              }
              v309 = v306 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v305 + 16) >> 2) & 1) << 32);
            }
            else
            {
LABEL_388:
              v310 = (v307 >> 16);
              v311 = v306 - v308;
              if (((*(_DWORD *)(v305 + 16) >> 2) & 1) != 0)
              {
                if (v311 < v309)
                  continue;
                v57 = (int8x16_t *)((char *)v57 + v310);
                v309 |= 0x100000000uLL;
              }
              else
              {
                if (v311 < v309)
                  continue;
                v57 = (int8x16_t *)((char *)v57 + 2 * v310);
              }
            }
            break;
          }
          if ((v309 & 0x100000000) != 0)
          {
            if (v309 < 0x40)
            {
              v314 = v52;
            }
            else
            {
              v314 = &v52[2 * (v309 & 0xFFFFFFC0)];
              v315 = v52;
              do
              {
                v337.val[0] = *v57;
                v316 = v57[1];
                v352.val[0] = v57[2];
                v317 = v57[3];
                v57 += 4;
                v367.val[1] = 0uLL;
                v367.val[0] = v317;
                v352.val[1] = 0u;
                v382.val[0] = v316;
                v337.val[1] = 0u;
                v318 = v315;
                vst2q_s8(v318, v337);
                v318 += 32;
                v382.val[1] = 0u;
                vst2q_s8(v318, v382);
                v319 = v315 + 64;
                vst2q_s8(v319, v352);
                v320 = v315 + 96;
                vst2q_s8(v320, v367);
                v315 += 128;
              }
              while (v315 != v314);
            }
            v321 = &v52[2 * v309];
            while (v314 != v321)
            {
              v322 = v57->u8[0];
              v57 = (int8x16_t *)((char *)v57 + 1);
              *(_WORD *)v314 = v322;
              v314 += 2;
            }
          }
          else if ((_DWORD)v309 == 1)
          {
            *(_WORD *)v52 = v57->i16[0];
          }
          else if ((_DWORD)v309)
          {
            memcpy(v52, v57, 2 * v309);
          }
          goto LABEL_362;
        }
LABEL_71:
        v44 = *(unsigned int *)(v56 + 16);
        v58 = *(_QWORD *)(v56 + 24) >> 16;
        v59 = *(_QWORD *)(v56 + 20) & 0xFFFFFFFFFLL;
        v56 = v60 & 0xFFFFFFFFFFFFFFF8;
        if ((unint64_t)&v323 < v55)
        {
          v57 = (int8x16_t *)v59;
          goto LABEL_213;
        }
      }
      else
      {
        v68 = *(_QWORD *)(v59 + 8);
        if ((v68 & 1) == 0)
        {
          if (v60)
          {
            v102 = *(int8x16_t **)(v60 + 8);
            v103 = *(unsigned int *)(v60 + 4);
            if ((*(_BYTE *)(v60 + 16) & 4) != 0)
            {
              if (v103 >= 0x40)
              {
                v129 = &v52[2 * (v103 & 0xFFFFFFC0)];
                v153 = 0uLL;
                v154 = v52;
                do
                {
                  v343.val[0] = *v102;
                  v155 = v102[1];
                  v358.val[0] = v102[2];
                  v156 = v102[3];
                  v102 += 4;
                  v157 = v156;
                  v358.val[1] = 0uLL;
                  v373.val[0] = v155;
                  v343.val[1] = 0uLL;
                  v158 = v154;
                  vst2q_s8(v158, v343);
                  v158 += 32;
                  v373.val[1] = 0uLL;
                  vst2q_s8(v158, v373);
                  v159 = v154 + 64;
                  vst2q_s8(v159, v358);
                  v160 = v154 + 96;
                  vst2q_s8(v160, *(int8x16x2_t *)(&v153 - 1));
                  v154 += 128;
                }
                while (v154 != v129);
              }
              else
              {
                v129 = v52;
              }
              while (v129 != &v52[2 * v103])
              {
                v161 = v102->u8[0];
                v102 = (int8x16_t *)((char *)v102 + 1);
                *(_WORD *)v129 = v161;
                v129 += 2;
              }
            }
            else if ((_DWORD)v103 == 1)
            {
              *(_WORD *)v52 = v102->i16[0];
              LODWORD(v103) = 1;
            }
            else if ((_DWORD)v103)
            {
              memcpy(v52, v102, 2 * v103);
            }
            v68 = *(_QWORD *)(v59 + 8);
          }
          else
          {
            LODWORD(v103) = 0;
          }
          if (!v68)
            goto LABEL_147;
          v98 = *(int8x16_t **)(v68 + 8);
          v104 = *(unsigned int *)(v68 + 4);
          v100 = &v52[2 * v103];
          if ((*(_BYTE *)(v68 + 16) & 4) != 0)
          {
            v130 = &v100[2 * v104];
            if (v104 >= 0x40)
            {
              v131 = &v100[2 * (v104 & 0xFFFFFFC0)];
              v132 = 0uLL;
              do
              {
                v341.val[0] = *v98;
                v133 = v98[1];
                v356.val[0] = v98[2];
                v134 = v98[3];
                v98 += 4;
                v135 = v134;
                v356.val[1] = 0uLL;
                v371.val[0] = v133;
                v341.val[1] = 0uLL;
                v136 = v100;
                vst2q_s8(v136, v341);
                v136 += 32;
                v371.val[1] = 0uLL;
                vst2q_s8(v136, v371);
                v137 = v100 + 64;
                vst2q_s8(v137, v356);
                v138 = v100 + 96;
                vst2q_s8(v138, *(int8x16x2_t *)(&v132 - 1));
                v100 += 128;
              }
              while (v100 != v131);
              v100 = v131;
            }
            while (v100 != v130)
            {
              v139 = v98->u8[0];
              v98 = (int8x16_t *)((char *)v98 + 1);
              *(_WORD *)v100 = v139;
              v100 += 2;
            }
            goto LABEL_147;
          }
          if ((_DWORD)v104 != 1)
          {
            if (!(_DWORD)v104)
              goto LABEL_147;
            v101 = 2 * v104;
            goto LABEL_125;
          }
LABEL_214:
          *(_WORD *)v100 = v98->i16[0];
          goto LABEL_147;
        }
        if (v60)
        {
          v140 = *(int8x16_t **)(v60 + 8);
          v58 = *(unsigned int *)(v60 + 4);
          if ((*(_BYTE *)(v60 + 16) & 4) != 0)
          {
            if (v58 >= 0x40)
            {
              v142 = &v52[2 * (v58 & 0xFFFFFFC0)];
              v191 = v52;
              do
              {
                a5 = *v140;
                v192 = v140[1];
                v345.val[0] = v140[2];
                v193 = v140[3];
                v140 += 4;
                v360.val[1] = 0uLL;
                v360.val[0] = v193;
                v345.val[1] = 0u;
                v375.val[0] = v192;
                v194 = 0u;
                v195 = v191;
                vst2q_s8(v195, *(int8x16x2_t *)a5.i8);
                v195 += 32;
                v375.val[1] = 0u;
                vst2q_s8(v195, v375);
                v196 = v191 + 64;
                vst2q_s8(v196, v345);
                v197 = v191 + 96;
                vst2q_s8(v197, v360);
                v191 += 128;
              }
              while (v191 != v142);
            }
            else
            {
              v142 = v52;
            }
            while (v142 != &v52[2 * v58])
            {
              v143 = v140->u8[0];
              v140 = (int8x16_t *)((char *)v140 + 1);
              *(_WORD *)v142 = v143;
              v142 += 2;
            }
          }
          else if (v58 == 1)
          {
            *(_WORD *)v52 = v140->i16[0];
          }
          else if (*(_DWORD *)(v60 + 4))
          {
            memcpy(v52, v140, 2 * v58);
          }
        }
        else
        {
          v58 = 0;
        }
        v52 += 2 * v58;
        v141 = *(_QWORD *)(v59 + 8);
        if ((v141 & 2) != 0)
        {
          v162 = *(_QWORD *)((*(_QWORD *)(v59 + 20) & 0xFFFFFFFFFLL) + 8);
          v163 = *(unsigned int *)(v162 + 4);
          v164 = *(_QWORD *)(v59 + 24);
          v165 = v164 >> 16;
          if (v163 <= (v164 >> 16))
            goto LABEL_147;
          v166 = *(unsigned int *)(v162 + 16);
          v98 = *(int8x16_t **)(v162 + 8);
          v167 = *(_DWORD *)(v59 + 16);
          if ((int)v163 - (int)v165 > v167 || (v167 = v163 - v165, (_DWORD)v165))
          {
            v168 = (v166 >> 2) & 1;
            v169 = (v164 >> 16);
            v170 = v167;
            v171 = v163 - v165;
            if ((_DWORD)v168)
            {
              if (v171 < v167)
                goto LABEL_407;
              v98 = (int8x16_t *)((char *)v98 + v169);
              v170 = v167 | 0x100000000;
            }
            else
            {
              if (v171 < v167)
                goto LABEL_407;
              v98 = (int8x16_t *)((char *)v98 + 2 * v169);
            }
          }
          else
          {
            v170 = v163 & 0xFFFFFFFEFFFFFFFFLL | (((v166 >> 2) & 1) << 32);
          }
          if ((v170 & 0x100000000) == 0)
            goto LABEL_194;
          v240 = &v52[2 * v170];
          if (v170 >= 0x40)
          {
            v241 = &v52[2 * (v170 & 0xFFFFFFC0)];
            v242 = 0uLL;
            do
            {
              v348.val[0] = *v98;
              v243 = v98[1];
              v363.val[0] = v98[2];
              v244 = v98[3];
              v98 += 4;
              v245 = v244;
              v363.val[1] = 0uLL;
              v378.val[0] = v243;
              v348.val[1] = 0uLL;
              v246 = v52;
              vst2q_s8(v246, v348);
              v246 += 32;
              v378.val[1] = 0uLL;
              vst2q_s8(v246, v378);
              v247 = v52 + 64;
              vst2q_s8(v247, v363);
              v248 = v52 + 96;
              vst2q_s8(v248, *(int8x16x2_t *)(&v242 - 1));
              v52 += 128;
            }
            while (v52 != v241);
            v52 = v241;
          }
          while (v52 != v240)
          {
            v249 = v98->u8[0];
            v98 = (int8x16_t *)((char *)v98 + 1);
            *(_WORD *)v52 = v249;
            v52 += 2;
          }
          goto LABEL_147;
        }
        v56 = v141 & 0xFFFFFFFFFFFFFFF8;
        v57 = (int8x16_t *)(*(_QWORD *)(v59 + 20) & 0xFFFFFFFFFLL);
        v58 = *(_QWORD *)(v59 + 24) >> 16;
        v44 = *(unsigned int *)(v59 + 16);
        v59 = (uint64_t)v57;
        if ((unint64_t)&v323 < v55)
          goto LABEL_213;
      }
    }
    if ((v60 & 1) == 0)
    {
      if (!v60)
        goto LABEL_147;
      v98 = *(int8x16_t **)(v60 + 8);
      v229 = *(unsigned int *)(v60 + 4);
      if ((*(_BYTE *)(v60 + 16) & 4) != 0)
      {
        v230 = &v52[2 * v229];
        if (v229 >= 0x40)
        {
          v231 = &v52[2 * (v229 & 0xFFFFFFC0)];
          v232 = 0uLL;
          do
          {
            v347.val[0] = *v98;
            v233 = v98[1];
            v362.val[0] = v98[2];
            v234 = v98[3];
            v98 += 4;
            v235 = v234;
            v362.val[1] = 0uLL;
            v377.val[0] = v233;
            v347.val[1] = 0uLL;
            v236 = v52;
            vst2q_s8(v236, v347);
            v236 += 32;
            v377.val[1] = 0uLL;
            vst2q_s8(v236, v377);
            v237 = v52 + 64;
            vst2q_s8(v237, v362);
            v238 = v52 + 96;
            vst2q_s8(v238, *(int8x16x2_t *)(&v232 - 1));
            v52 += 128;
          }
          while (v52 != v231);
          v52 = v231;
        }
        while (v52 != v230)
        {
          v239 = v98->u8[0];
          v98 = (int8x16_t *)((char *)v98 + 1);
          *(_WORD *)v52 = v239;
          v52 += 2;
        }
        goto LABEL_147;
      }
      if ((_DWORD)v229 == 1)
        goto LABEL_273;
      if (!(_DWORD)v229)
        goto LABEL_147;
      v101 = 2 * v229;
LABEL_197:
      v100 = v52;
LABEL_125:
      memcpy(v100, v98, v101);
      __dmb(0xAu);
      *v12 = v53;
      if (v54 >= 0x101)
        goto LABEL_148;
      return v12;
    }
    if ((v60 & 2) != 0)
    {
      v172 = *(_QWORD *)((*(_QWORD *)(v56 + 20) & 0xFFFFFFFFFLL) + 8);
      v173 = *(unsigned int *)(v172 + 4);
      v174 = *(_QWORD *)(v56 + 24);
      v175 = v174 >> 16;
      if (v173 <= (v174 >> 16))
        goto LABEL_147;
      v176 = *(unsigned int *)(v172 + 16);
      v98 = *(int8x16_t **)(v172 + 8);
      v177 = *(_DWORD *)(v56 + 16);
      if ((int)v173 - (int)v175 > v177 || (v177 = v173 - v175, (_DWORD)v175))
      {
        v178 = (v176 >> 2) & 1;
        v179 = (v174 >> 16);
        v170 = v177;
        v180 = v173 - v175;
        if ((_DWORD)v178)
        {
          if (v180 < v177)
            goto LABEL_407;
          v98 = (int8x16_t *)((char *)v98 + v179);
          v170 = v177 | 0x100000000;
        }
        else
        {
          if (v180 < v177)
            goto LABEL_407;
          v98 = (int8x16_t *)((char *)v98 + 2 * v179);
        }
      }
      else
      {
        v170 = v173 & 0xFFFFFFFEFFFFFFFFLL | (((v176 >> 2) & 1) << 32);
      }
      if ((v170 & 0x100000000) == 0)
        goto LABEL_194;
      v181 = &v52[2 * v170];
      if (v170 >= 0x40)
      {
        v182 = &v52[2 * (v170 & 0xFFFFFFC0)];
        v183 = 0uLL;
        do
        {
          v344.val[0] = *v98;
          v184 = v98[1];
          v359.val[0] = v98[2];
          v185 = v98[3];
          v98 += 4;
          v186 = v185;
          v359.val[1] = 0uLL;
          v374.val[0] = v184;
          v344.val[1] = 0uLL;
          v187 = v52;
          vst2q_s8(v187, v344);
          v187 += 32;
          v374.val[1] = 0uLL;
          vst2q_s8(v187, v374);
          v188 = v52 + 64;
          vst2q_s8(v188, v359);
          v189 = v52 + 96;
          vst2q_s8(v189, *(int8x16x2_t *)(&v183 - 1));
          v52 += 128;
        }
        while (v52 != v182);
        v52 = v182;
      }
      while (v52 != v181)
      {
        v190 = v98->u8[0];
        v98 = (int8x16_t *)((char *)v98 + 1);
        *(_WORD *)v52 = v190;
        v52 += 2;
      }
LABEL_147:
      __dmb(0xAu);
      *v12 = v53;
      if (v54 >= 0x101)
        goto LABEL_148;
      return v12;
    }
    goto LABEL_71;
  }
  v31 = *(unsigned int *)(this + 16);
  if ((_DWORD)v31)
  {
    if ((v31 & 0x80000000) != 0)
      goto LABEL_274;
    v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v32)
      goto LABEL_42;
    v33 = (unint64_t)(v31 + 35) >> 4;
    if (v31 <= 0x18C)
    {
      v34 = 23 * v33 + 7;
    }
    else if (v31 > 0x26FC
           || (v34 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v33 + 626),
               *(_DWORD *)(v32 + 8052) <= v34))
    {
LABEL_42:
      v35 = (int *)bmalloc_try_allocate_casual(v31 + 20, 0);
LABEL_47:
      if (!v35)
        goto LABEL_274;
      v39 = (uint64_t)(v35 + 5);
      *v35 = 2;
      v35[1] = v31;
      *((_QWORD *)v35 + 1) = v35 + 5;
      v40 = 4;
      v35[4] = 4;
      v11 = *(_QWORD *)(this + 8);
      v41 = *(unsigned int *)(this + 16);
      v42 = v35;
      goto LABEL_49;
    }
    v36 = v32 + 8 * v34;
    v37 = v36 + 8064;
    *(_BYTE *)(v36 + 8064) = 1;
    v38 = *(unsigned int *)(v36 + 8080);
    if ((_DWORD)v38)
    {
      *(_DWORD *)(v37 + 16) = v38 - *(_DWORD *)(v37 + 20);
      v35 = (int *)(*(_QWORD *)(v37 + 8) - v38);
    }
    else
    {
      v79 = *(_QWORD *)(v37 + 40);
      v80 = *(_QWORD *)(v37 + 24);
      if (!v79)
      {
        if (*(_BYTE *)(v37 + 5) == 6)
        {
          v198 = *(unsigned int *)(v37 + 32);
          v199 = *(_DWORD *)(v37 + 36);
          if (v198 < v199)
          {
            *(_QWORD *)(v37 + 8 * v198 + 56) = 0;
            v200 = (unint64_t *)(8 * v34 + 8 * v198 + v32 + 8128);
            v201 = v199 - 1 - v198;
            while (v201)
            {
              v80 += 1024;
              v203 = *v200++;
              v202 = v203;
              LODWORD(v198) = v198 + 1;
              --v201;
              if (v203)
              {
                v79 = __rbit64(v202);
                *(_DWORD *)(v37 + 32) = v198;
                *(_QWORD *)(v37 + 24) = v80;
                goto LABEL_89;
              }
            }
            *(_DWORD *)(v37 + 32) = v199;
          }
        }
        *(_BYTE *)v37 = 0;
        goto LABEL_42;
      }
LABEL_89:
      v81 = __clz(v79);
      *(_QWORD *)(v37 + 40) = v79 & ~(0x8000000000000000 >> v81);
      v35 = (int *)(v80 + 16 * v81);
    }
    *(_BYTE *)v37 = 0;
    goto LABEL_47;
  }
  v35 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
  while (1)
  {
    v40 = v35[4];
    if ((v40 & 3) != 2)
      break;
    v35 = (int *)*((_QWORD *)v35 + 3);
  }
  v41 = 0;
  v39 = 0;
  if ((v40 & 8) == 0)
  {
    v31 = v35[1];
    v42 = &WTF::StringImpl::s_emptyAtomString;
LABEL_49:
    v35[4] = v40 | 8;
    v43 = v31 << ((v40 & 4) == 0);
    goto LABEL_50;
  }
  v43 = 0;
  v42 = &WTF::StringImpl::s_emptyAtomString;
LABEL_50:
  JSC::JSRopeString::resolveToBuffer<unsigned char>(v11 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(this + 24) >> 16, v39, v41, *(WTF **)(v14 + 8), a8, a9);
  __dmb(0xAu);
  *(_QWORD *)(this + 8) = v42;
  if (v43 >= 0x101)
  {
    v45 = v14 + 192;
    v46 = (JSC::JSRopeString *)this;
    v47 = v43;
    goto LABEL_149;
  }
  return v12;
}

char *JSC::JSRopeString::resolveRopeWithoutGC(unint64_t this, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v31;

  v10 = (uint64_t *)(this - 16);
  if ((this & 8) == 0)
    v10 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  v12 = (char *)(this + 8);
  v11 = *(_QWORD *)(this + 8);
  if ((v11 & 2) == 0)
  {
    v13 = *v10;
    if ((v11 & 1) != 0)
    {
      if ((v11 & 4) == 0)
        goto LABEL_6;
    }
    else if ((*(_BYTE *)(v11 + 16) & 4) == 0)
    {
LABEL_6:
      v14 = *(unsigned int *)(this + 16);
      if (!(_DWORD)v14)
      {
        v15 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        while (1)
        {
          v16 = v15[4];
          if ((v16 & 3) != 2)
            break;
          v15 = (int *)*((_QWORD *)v15 + 3);
        }
        v18 = 0;
        v17 = 0;
        v20 = 0;
        v21 = 0;
        v19 = &WTF::StringImpl::s_emptyAtomString;
        if ((v16 & 8) != 0)
          goto LABEL_11;
        goto LABEL_10;
      }
      if (v14 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20), &v31);
        v15 = v31;
        if (v31)
        {
          v16 = 0;
          v17 = v31 + 5;
          *v31 = 2;
          v15[1] = v14;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 0;
          v11 = *(_QWORD *)(this + 8);
          v18 = *(unsigned int *)(this + 16);
          v19 = v15;
LABEL_10:
          v15[4] = v16 | 8;
          v20 = v18;
          v21 = (char *)v17;
LABEL_11:
          JSC::JSRopeString::resolveToBuffer<char16_t>(v11 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(this + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(this + 24) >> 16, v21, v20, *(_QWORD *)(v13 + 8), a8, a9, a2);
          __dmb(0xAu);
LABEL_20:
          *(_QWORD *)(this + 8) = v19;
          return v12;
        }
      }
      return (char *)&WTF::nullStringData;
    }
    v23 = *(unsigned int *)(this + 16);
    if ((_DWORD)v23)
    {
      if ((v23 & 0x80000000) != 0)
        return (char *)&WTF::nullStringData;
      WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v31);
      v24 = v31;
      if (!v31)
        return (char *)&WTF::nullStringData;
      v25 = v31 + 5;
      *v31 = 2;
      v24[1] = v23;
      *((_QWORD *)v24 + 1) = v24 + 5;
      v26 = 4;
      v24[4] = 4;
      v11 = *(_QWORD *)(this + 8);
      v27 = *(unsigned int *)(this + 16);
      v19 = v24;
    }
    else
    {
      v24 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      while (1)
      {
        v26 = v24[4];
        if ((v26 & 3) != 2)
          break;
        v24 = (int *)*((_QWORD *)v24 + 3);
      }
      v27 = 0;
      v25 = 0;
      v28 = 0;
      v29 = 0;
      v19 = &WTF::StringImpl::s_emptyAtomString;
      if ((v26 & 8) != 0)
        goto LABEL_19;
    }
    v24[4] = v26 | 8;
    v28 = v27;
    v29 = (uint64_t)v25;
LABEL_19:
    JSC::JSRopeString::resolveToBuffer<unsigned char>(v11 & 0xFFFFFFFFFFFFFFF8, (char *)(*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(this + 24) >> 16, v29, v28, *(WTF **)(v13 + 8), a8, a9);
    __dmb(0xAu);
    goto LABEL_20;
  }
  WTF::String::substringSharingImpl((int **)((*(_QWORD *)(this + 20) & 0xFFFFFFFFFLL) + 8), *(_DWORD *)(this + 26), *(_DWORD *)(this + 16), &v31);
  v22 = v31;
  __dmb(0xAu);
  *(_QWORD *)(this + 8) = v22;
  return v12;
}

void JSC::JSString::toNumber(JSC::JSString *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unint64_t v37;

  v10 = *((_QWORD *)a2 + 7);
  v11 = (int *)*((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
  {
    if (v11)
    {
LABEL_3:
      v12 = (char *)*((_QWORD *)v11 + 1);
      v13 = v11[1] | ((unint64_t)((v11[4] >> 2) & 1) << 32);
      goto LABEL_4;
    }
LABEL_24:
    v12 = 0;
    v13 = 0x100000000;
    goto LABEL_4;
  }
  if ((v11 & 2) == 0)
  {
    v11 = *JSC::JSRopeString::resolveRope((unint64_t)this, a2, a3, a4, a9, a5, a6, a7, a8);
    if (v11)
      goto LABEL_3;
    goto LABEL_24;
  }
  v16 = *(_QWORD *)((*(_QWORD *)((_BYTE *)this + 20) & 0xFFFFFFFFFLL) + 8);
  if (v16)
  {
    v12 = *(char **)(v16 + 8);
    v17 = *(unsigned int *)(v16 + 4) | ((unint64_t)((*(_DWORD *)(v16 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v17 = 0x100000000;
  }
  v18 = *((_QWORD *)this + 3);
  v19 = v18 >> 16;
  if (v17 <= (v18 >> 16))
  {
    v13 = 0x100000000;
    v12 = &str_105_2;
  }
  else
  {
    v20 = *((_DWORD *)this + 4);
    if (v17 - (v18 >> 16) > v20 || (v20 = v17 - (v18 >> 16), (_DWORD)v19))
    {
      v21 = (v18 >> 16);
      v13 = v20;
      v22 = v17 - (unint64_t)v19;
      if ((v17 & 0x100000000) != 0)
      {
        if (v22 < v20)
          goto LABEL_75;
        v12 += v21;
        v13 = v20 | 0x100000000;
      }
      else
      {
        if (v22 < v20)
          goto LABEL_75;
        v12 += 2 * v21;
      }
    }
    else
    {
      v13 = v17;
    }
  }
LABEL_4:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_5;
  v23 = *(_DWORD *)(v10 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_5:
    v14 = v13;
    if ((v13 & 0x100000000) != 0)
    {
      switch((_DWORD)v13)
      {
        case 1:
          return;
        case 2:
          if (*v12 == 45)
            return;
          break;
        case 0:
          return;
      }
      v13 = 0;
      for (i = (unsigned __int8 *)v12; ; ++i)
      {
        v25 = v12[v13];
        if ((v25 - 9) >= 5 && v25 != 32 && v25 != 160)
          break;
        if (v14 == ++v13)
          return;
      }
      v9 = v14 - v13;
      v35 = i;
      v36 = v14 - v13;
      if (v14 - v13 >= 3 && v25 == 48)
      {
        v32 = v12[v13 + 1] & 0xDF;
        if (v32 == 66)
        {
          if ((v12[v13 + 2] & 0xFE) == 0x30)
          {
            JSC::jsBinaryIntegerLiteral<unsigned char>((unint64_t *)&v35);
            goto LABEL_96;
          }
        }
        else if (v32 == 88)
        {
          v33 = v12[v13 + 2];
          if ((v33 - 48) < 0xA || (v33 | 0x20u) - 97 <= 5)
          {
            JSC::jsHexIntegerLiteral<unsigned char>((unint64_t *)&v35);
            goto LABEL_96;
          }
        }
        else if (v32 == 79 && (v12[v13 + 2] & 0xF8) == 0x30)
        {
          JSC::jsOctalIntegerLiteral<unsigned char>((unint64_t *)&v35);
          goto LABEL_96;
        }
        JSC::jsStrDecimalLiteral<unsigned char>(&v35);
LABEL_96:
        v28 = v36;
LABEL_55:
        if (v28)
        {
          v29 = v35;
          do
          {
            v30 = *v29;
            if ((v30 - 9) >= 5 && v30 != 32 && v30 != 160)
              break;
            ++v29;
            --v28;
          }
          while (v28);
        }
        return;
      }
      v37 = 0;
      v34 = v14;
      v26 = fast_float::from_chars_advanced<double,char>(i, &i[v14 - v13], &v37, 0x2E00000005);
      v27 = v26 - i;
      if (v26 == i)
      {
        v31 = v12[v13];
        if (v31 != 43)
        {
          if (v31 == 45)
          {
            v28 = v9 - 9;
            if (v9 - 9 <= 0xFFFFFFFFFFFFFFF7
              && v12[v13 + 1] == 73
              && v12[v13 + 2] == 110
              && v12[v13 + 3] == 102
              && v12[v13 + 4] == 105
              && v12[v13 + 5] == 110
              && v12[v13 + 6] == 105
              && v12[v13 + 7] == 116
              && v12[v13 + 8] == 121)
            {
              goto LABEL_95;
            }
          }
          else if (v31 == 73)
          {
            v28 = v9 - 8;
            if (v9 >= 8
              && v12[v13 + 1] == 110
              && v12[v13 + 2] == 102
              && v12[v13 + 3] == 105
              && v12[v13 + 4] == 110
              && v12[v13 + 5] == 105
              && v12[v13 + 6] == 116
              && v12[v13 + 7] == 121)
            {
              v27 = 8;
              goto LABEL_54;
            }
          }
          goto LABEL_96;
        }
        goto LABEL_76;
      }
      if (v9 >= v27)
      {
        v28 = v34 + i - v26 - v13;
LABEL_54:
        v35 = (unsigned __int8 *)&v12[v13 + v27];
        v36 = v28;
        goto LABEL_55;
      }
LABEL_75:
      __break(1u);
LABEL_76:
      v28 = v9 - 9;
      if (v9 - 9 <= 0xFFFFFFFFFFFFFFF7
        && v12[v13 + 1] == 73
        && v12[v13 + 2] == 110
        && v12[v13 + 3] == 102
        && v12[v13 + 4] == 105
        && v12[v13 + 5] == 110
        && v12[v13 + 6] == 105
        && v12[v13 + 7] == 116
        && v12[v13 + 8] == 121)
      {
LABEL_95:
        v27 = 9;
        goto LABEL_54;
      }
      goto LABEL_96;
    }
    if ((_DWORD)v13 == 1)
    {
      v24 = *(unsigned __int16 *)v12;
      if (v24 - 48 > 9 && v24 > 0xFF)
        u_charType(v24);
    }
    else if ((_DWORD)v13 != 2 || *(_WORD *)v12 != 45)
    {
      JSC::toDouble<char16_t>((uint64_t)v12, v13);
    }
  }
}

unint64_t JSC::JSString::toObject(unint64_t this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t SlowCase;
  JSC::JSGlobalObject *v19;
  JSC::JSString *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v9 = *((_QWORD *)a2 + 7);
  v10 = v9 + 192;
  v11 = *(_QWORD *)(v9 + 39784);
  if (v11 < *(_QWORD *)(v9 + 39792))
    goto LABEL_2;
  v11 = *(_QWORD *)(v9 + 39800);
  if ((v11 & 1) == 0)
  {
    v16 = *(_QWORD *)(v11 + 8) ^ *(_QWORD *)(v9 + 39808);
    *(_QWORD *)(v9 + 39792) = v11 + HIDWORD(v16);
    *(_QWORD *)(v9 + 39800) = v11 + (int)v16;
LABEL_2:
    *(_QWORD *)(v9 + 39784) = v11 + 32;
    goto LABEL_3;
  }
  v17 = v9 + 39760;
  v21 = *((_QWORD *)a2 + 7);
  v23 = v9 + 192;
  v19 = a2;
  v20 = (JSC::JSString *)this;
  JSC::sanitizeStackForVM((JSC *)v9, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v23, 32, 0, 0);
  a2 = v19;
  this = (unint64_t)v20;
  v11 = SlowCase;
  v9 = v21;
  v10 = v23;
LABEL_3:
  *(_DWORD *)v11 = 0;
  v12 = *((_DWORD *)a2 + 290);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v11 = v13 >> 4;
  *(_DWORD *)(v11 + 4) = v14;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v11 + 16) = this;
  if (this
    && (this & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v11 + 7))
  {
    v22 = v11;
    JSC::Heap::writeBarrierSlowPath(v10, v11);
    return v22;
  }
  return v11;
}

char *JSC::JSString::tryGetValueWithoutGC@<X0>(JSC::JSString *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int8x16_t a10@<Q0>)
{
  char *result;
  char v13;

  v13 = *((_BYTE *)this + 8);
  result = (char *)this + 8;
  if ((v13 & 1) != 0)
    result = JSC::JSRopeString::resolveRopeWithoutGC((unint64_t)this, a10, a2, a3, a4, a5, a6, a7, a8);
  *a9 = this;
  a9[1] = result;
  return result;
}

uint64_t JSC::jsStringWithCacheSlowCase(JSC *this, JSC::VM *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  int v9;
  JSC::VM *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t *v25;
  JSC *v26;

  v8 = (uint64_t *)((char *)this + 39696);
  *(_DWORD *)a2 += 2;
  v9 = *((_DWORD *)a2 + 4);
  v10 = a2;
  if ((v9 & 3) == 2)
  {
    v10 = a2;
    do
    {
      v10 = (JSC::VM *)*((_QWORD *)v10 + 3);
      v9 = *((_DWORD *)v10 + 4);
    }
    while ((v9 & 3) == 2);
  }
  if ((v9 & 8) != 0)
  {
    v11 = 0;
  }
  else
  {
    *((_DWORD *)v10 + 4) = v9 | 8;
    v11 = (unint64_t)*((unsigned int *)v10 + 1) << ((v9 & 4) == 0);
  }
  v12 = (char *)this + 192;
  v13 = *v8;
  if ((unint64_t)*v8 < *((_QWORD *)this + 4963))
    goto LABEL_5;
  v13 = *((_QWORD *)this + 4964);
  if ((v13 & 1) == 0)
  {
    v15 = *(_QWORD *)(v13 + 8) ^ *((_QWORD *)this + 4965);
    *((_QWORD *)this + 4963) = v13 + HIDWORD(v15);
    *((_QWORD *)this + 4964) = v13 + (int)v15;
LABEL_5:
    *v8 = v13 + 16;
    goto LABEL_6;
  }
  v25 = (uint64_t *)((char *)this + 39696);
  v26 = this;
  v16 = (char *)this + 39672;
  v23 = v11;
  v24 = a2;
  v17 = (char *)this + 192;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, v11, a5, a6, a7, a8);
  v18 = (uint64_t)v16;
  v8 = v25;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v18, (uint64_t)v17, 16, 0, 0, v19, v20, v21);
  v12 = v17;
  v11 = v23;
  a2 = v24;
  v13 = SlowCase;
  this = v26;
LABEL_6:
  *(_DWORD *)v13 = (unint64_t)v8[227] >> 4;
  *(_DWORD *)(v13 + 4) = 17302016;
  *(_QWORD *)(v13 + 8) = a2;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v11 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v12, 0, v13, v11, a5, a6, a7, a8);
  v8[3133] = v13;
  return v13;
}

void JSC::JSStringIterator::visitChildren(JSC::JSStringIterator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

unint64_t JSC::JSStringIterator::create(JSC::JSStringIterator *this, JSC::VM *a2, uint64_t a3, JSC::JSString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v11;
  char *v12;
  unint64_t SlowCase;
  int v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = (JSC::Heap *)*((_QWORD *)this + 5096);
  if (!v11)
    v11 = JSC::GCClient::Heap::stringIteratorSpaceSlow((JSC::Heap **)this + 4694);
  v12 = (char *)this + 192;
  SlowCase = *((_QWORD *)v11 + 3);
  if (SlowCase < *((_QWORD *)v11 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v11 + 5);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 4) = SlowCase + HIDWORD(v16);
    *((_QWORD *)v11 + 5) = SlowCase + (int)v16;
LABEL_4:
    *((_QWORD *)v11 + 3) = SlowCase + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v18, v19, v20);
  v12 = (char *)this + 192;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v14 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = 0xFFFE000000000000;
  *(_QWORD *)(SlowCase + 24) = a3;
  if (a3
    && (a3 & 0xFFFE000000000002) == 0
    && *((_DWORD *)this + 190) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v17 = SlowCase;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12, SlowCase);
    return v17;
  }
  return SlowCase;
}

unint64_t JSC::JSStringJoiner::joinSlow(JSC::JSStringJoiner *this, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *casual;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t SlowCase;
  int8x16_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t i;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *n;
  unint64_t ii;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t OutOfMemoryError;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  JSC::Exception *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  JSC::Exception *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  unint64_t j;
  uint64_t v114;
  int v115;
  int8x16_t *v116;
  char *v117;
  char *v118;
  __int16 v119;
  uint64_t v120;
  char *v121;
  __int16 v122;
  char *v123;
  int8x16_t v124;
  int8x16_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  char *v139;
  unint64_t k;
  uint64_t v141;
  int v142;
  int v143;
  char *v144;
  uint64_t v145;
  char *v146;
  __int16 v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int8x16_t *v155;
  int v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  uint64_t v160;
  int8x16_t *v161;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int8x16_t *v169;
  __int128 v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  int8x16_t *v188;
  _WORD *v189;
  char *v190;
  char *v191;
  _WORD *v192;
  uint64_t v193;
  _WORD *v194;
  int8x16_t *v195;
  __int16 v196;
  char *v197;
  int8x16_t v198;
  int8x16_t v199;
  char *v200;
  char *v201;
  char *v202;
  __int128 v203;
  char *v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  char *v208;
  char *v209;
  char *v210;
  __int16 v211;
  char *v212;
  int8x16_t v213;
  int8x16_t v214;
  char *v215;
  char *v216;
  char *v217;
  __int128 v218;
  char *v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  char *v223;
  char *v224;
  char *v225;
  __int16 v226;
  __int128 v227;
  char *v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  char *v232;
  char *v233;
  char *v234;
  __int16 v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  char *v244;
  int8x16_t *v245;
  char *v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  __int16 v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t m;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  char *v265;
  __int16 v266;
  char *v267;
  int8x16_t v268;
  int8x16_t v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  int v278;
  uint64_t v279;
  int v280;
  char *v281;
  __int16 v282;
  uint64_t v283;
  char *v284;
  int8x16_t v285;
  int8x16_t v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  __int16 v293;
  JSC::JSGlobalObject *v294;
  unint64_t *v295;
  void *__dst[4];
  int8x16x2_t v297;
  int8x16x2_t v298;
  int8x16x2_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;
  int8x16x2_t v303;
  int8x16x2_t v304;
  int8x16x2_t v305;
  int8x16x2_t v306;
  int8x16x2_t v307;
  int8x16x2_t v308;
  int8x16x2_t v309;
  int8x16x2_t v310;
  int8x16x2_t v311;
  int8x16x2_t v312;
  int8x16x2_t v313;
  int8x16x2_t v314;
  int8x16x2_t v315;
  int8x16x2_t v316;
  int8x16x2_t v317;
  int8x16x2_t v318;
  int8x16x2_t v319;
  int8x16x2_t v320;
  int8x16x2_t v321;
  int8x16x2_t v322;
  int8x16x2_t v323;
  int8x16x2_t v324;
  int8x16x2_t v325;
  int8x16x2_t v326;
  int8x16x2_t v327;
  int8x16x2_t v328;
  int8x16x2_t v329;
  int8x16x2_t v330;
  int8x16x2_t v331;

  v8 = (JSC::JSGlobalObject *)a2;
  __dst[2] = *(void **)MEMORY[0x1E0C80C00];
  v9 = a2[3].i64[1];
  if (*((_BYTE *)this + 560))
    goto LABEL_125;
  if (*((_BYTE *)this + 552))
  {
    __break(0xC471u);
    JUMPOUT(0x198A73B5CLL);
  }
  v11 = *((_DWORD *)this + 139);
  if (v11)
  {
    v12 = *((_DWORD *)this + 2);
    if ((v12 & 0x80000000) == 0)
    {
      v13 = v12 * (unint64_t)(v11 - 1);
      if (!(v13 >> 31) && !*((_BYTE *)this + 544))
      {
        v14 = v13 + *((unsigned int *)this + 137);
        if (!(v14 >> 31))
          goto LABEL_8;
      }
    }
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, (JSC::JSGlobalObject *)a2);
    v98 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v98 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v92, v93, v94, v95, v96);
    }
    JSC::VM::throwException((JSC::VM *)v9, v8, v98, v97, v92, v93, v94, v95, v96);
  }
  LODWORD(v14) = 0;
LABEL_8:
  if (*(_DWORD *)(v9 + 80))
  {
    v99 = *(_DWORD *)(v9 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (!(_DWORD)v14)
    return *(_QWORD *)(v9 + 41968);
  v294 = v8;
  v295 = (unint64_t *)(v9 + 41968);
  if (!*((_BYTE *)this + 561))
  {
    v53 = *(int8x16_t **)this;
    v54 = *((unsigned int *)this + 2);
    if (*((_BYTE *)this + 12))
    {
      if (v14 <= 0x7FFFFFEF)
      {
        v55 = 2 * v14;
        v56 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v56)
        {
          v57 = (unint64_t)(v55 + 35) >> 4;
          if (v14 <= 0xC6)
          {
            v58 = 23 * v57 + 7;
          }
          else
          {
            if (v14 > 0x137E)
              goto LABEL_71;
            v58 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v57 + 626);
            if (*(_DWORD *)(v56 + 8052) <= v58)
              goto LABEL_71;
          }
          v62 = v56 + 8 * v58;
          v63 = v62 + 8064;
          *(_BYTE *)(v62 + 8064) = 1;
          v64 = *(unsigned int *)(v62 + 8080);
          if ((_DWORD)v64)
          {
            *(_DWORD *)(v63 + 16) = v64 - *(_DWORD *)(v63 + 20);
            casual = (char *)(*(_QWORD *)(v63 + 8) - v64);
          }
          else
          {
            v68 = *(_QWORD *)(v63 + 40);
            v69 = *(_QWORD *)(v63 + 24);
            if (!v68)
            {
              if (*(_BYTE *)(v63 + 5) == 6)
              {
                v180 = *(unsigned int *)(v63 + 32);
                v181 = *(_DWORD *)(v63 + 36);
                if (v180 < v181)
                {
                  *(_QWORD *)(v63 + 8 * v180 + 56) = 0;
                  v182 = (unint64_t *)(8 * v58 + 8 * v180 + v56 + 8128);
                  v183 = v181 - 1 - v180;
                  while (v183)
                  {
                    v69 += 1024;
                    v185 = *v182++;
                    v184 = v185;
                    LODWORD(v180) = v180 + 1;
                    --v183;
                    if (v185)
                    {
                      v68 = __rbit64(v184);
                      *(_DWORD *)(v63 + 32) = v180;
                      *(_QWORD *)(v63 + 24) = v69;
                      goto LABEL_86;
                    }
                  }
                  *(_DWORD *)(v63 + 32) = v181;
                }
              }
              *(_BYTE *)v63 = 0;
              goto LABEL_71;
            }
LABEL_86:
            v70 = __clz(v68);
            *(_QWORD *)(v63 + 40) = v68 & ~(0x8000000000000000 >> v70);
            casual = (char *)(v69 + 16 * v70);
          }
          *(_BYTE *)v63 = 0;
          goto LABEL_81;
        }
LABEL_71:
        casual = (char *)bmalloc_try_allocate_casual(v55 + 20, 0);
LABEL_81:
        if (!casual)
          goto LABEL_50;
        v65 = casual + 20;
        __dst[0] = casual + 20;
        *(_DWORD *)casual = 2;
        *((_DWORD *)casual + 1) = v14;
        *((_QWORD *)casual + 1) = casual + 20;
        *((_DWORD *)casual + 4) = 0;
        v66 = *((unsigned int *)this + 7);
        if (!(_DWORD)v54)
        {
          if ((_DWORD)v66)
          {
            for (i = 0; i != v66; ++i)
            {
              if (i >= *((unsigned int *)this + 7))
              {
LABEL_395:
                __break(0xC471u);
                JUMPOUT(0x198A73B48);
              }
              v283 = *((_QWORD *)this + 2) + 32 * i;
              v280 = *(unsigned __int16 *)(v283 + 24);
              do
              {
                v278 = v280;
                a2 = *(int8x16_t **)(v283 + 8);
                v279 = *(_QWORD *)(v283 + 16);
                if ((v279 & 0xFF00000000) != 0)
                {
                  v281 = v65;
                  if (v279 >= 0x40)
                  {
                    v281 = &v65[2 * (*(_QWORD *)(v283 + 16) & 0xFFFFFFC0)];
                    v284 = v65;
                    do
                    {
                      v302.val[0] = *a2;
                      v285 = a2[1];
                      v312.val[0] = a2[2];
                      v286 = a2[3];
                      a2 += 4;
                      v331.val[1] = 0u;
                      v331.val[0] = v286;
                      v312.val[1] = 0u;
                      v322.val[0] = v285;
                      v302.val[1] = 0u;
                      v287 = v284;
                      vst2q_s8(v287, v302);
                      v287 += 32;
                      v322.val[1] = 0u;
                      vst2q_s8(v287, v322);
                      v288 = v284 + 64;
                      vst2q_s8(v288, v312);
                      v289 = v284 + 96;
                      vst2q_s8(v289, v331);
                      v284 += 128;
                    }
                    while (v284 != v281);
                  }
                  while (v281 != &v65[2 * v279])
                  {
                    v282 = a2->u8[0];
                    a2 = (int8x16_t *)((char *)a2 + 1);
                    *(_WORD *)v281 = v282;
                    v281 += 2;
                  }
                }
                else if ((_DWORD)v279 == 1)
                {
                  *(_WORD *)v65 = a2->i16[0];
                }
                else if ((_DWORD)v279)
                {
                  memcpy(v65, a2, 2 * *(_QWORD *)(v283 + 16));
                }
                v65 += 2 * v279;
                __dst[0] = v65;
                v280 = v278 - 1;
              }
              while (v278);
            }
          }
          goto LABEL_50;
        }
        if ((_DWORD)v54 != 1)
        {
          if (!(_DWORD)v66)
          {
            __break(0xC471u);
            JUMPOUT(0x198A73BA8);
          }
          v109 = *((_QWORD *)this + 2);
          v110 = *(unsigned __int16 *)(v109 + 24);
          a2 = *(int8x16_t **)(v109 + 8);
          v111 = *(_QWORD *)(v109 + 16);
          if ((v111 & 0xFF00000000) != 0)
          {
            if (v111 >= 0x40)
            {
              v186 = &v65[2 * (*(_QWORD *)(v109 + 16) & 0xFFFFFFC0)];
              v203 = 0uLL;
              v204 = casual + 20;
              do
              {
                v306.val[0] = *a2;
                v205 = a2[1];
                v316.val[0] = a2[2];
                v206 = a2[3];
                a2 += 4;
                v207 = v206;
                v316.val[1] = 0uLL;
                v325.val[0] = v205;
                v306.val[1] = 0uLL;
                v208 = v204;
                vst2q_s8(v208, v306);
                v208 += 32;
                v325.val[1] = 0uLL;
                vst2q_s8(v208, v325);
                v209 = v204 + 64;
                vst2q_s8(v209, v316);
                v210 = v204 + 96;
                vst2q_s8(v210, *(int8x16x2_t *)(&v203 - 1));
                v204 += 128;
              }
              while (v204 != v186);
            }
            else
            {
              v186 = casual + 20;
            }
            while (v186 != &v65[2 * v111])
            {
              v211 = a2->u8[0];
              a2 = (int8x16_t *)((char *)a2 + 1);
              *(_WORD *)v186 = v211;
              v186 += 2;
            }
          }
          else if ((_DWORD)v111 == 1)
          {
            *(_WORD *)v65 = a2->i16[0];
          }
          else if ((_DWORD)v111)
          {
            memcpy(casual + 20, a2, 2 * *(_QWORD *)(v109 + 16));
          }
          __dst[0] = &v65[2 * v111];
          while (v110)
          {
            --v110;
            JSC::appendStringToData<char16_t,unsigned char>((char **)__dst, v53, v54);
            JSC::appendStringToData<char16_t>((char **)__dst, *(int8x16_t **)(v109 + 8), *(_QWORD *)(v109 + 16));
          }
          if (v66 >= 2)
          {
            v112 = (char *)__dst[0];
            for (j = 1; j != v66; ++j)
            {
              if (j >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x198A73BA0);
              }
              v114 = *((_QWORD *)this + 2) + 32 * j;
              v115 = *(unsigned __int16 *)(v114 + 24);
              do
              {
                v291 = v115;
                v116 = v53;
                v117 = v112;
                if (v54 >= 0x40)
                {
                  v117 = &v112[2 * (v54 & 0xFFFFFFC0)];
                  v116 = v53;
                  v123 = v112;
                  do
                  {
                    v297.val[0] = *v116;
                    v124 = v116[1];
                    v303.val[0] = v116[2];
                    v125 = v116[3];
                    v116 += 4;
                    v323.val[1] = 0u;
                    v323.val[0] = v125;
                    v303.val[1] = 0u;
                    v313.val[0] = v124;
                    v297.val[1] = 0u;
                    v126 = v123;
                    vst2q_s8(v126, v297);
                    v126 += 32;
                    v313.val[1] = 0u;
                    vst2q_s8(v126, v313);
                    v127 = v123 + 64;
                    vst2q_s8(v127, v303);
                    v128 = v123 + 96;
                    vst2q_s8(v128, v323);
                    v123 += 128;
                  }
                  while (v123 != v117);
                }
                v118 = &v112[2 * v54];
                while (v117 != v118)
                {
                  v119 = v116->u8[0];
                  v116 = (int8x16_t *)((char *)v116 + 1);
                  *(_WORD *)v117 = v119;
                  v117 += 2;
                }
                __dst[0] = &v112[2 * v54];
                a2 = *(int8x16_t **)(v114 + 8);
                v120 = *(_QWORD *)(v114 + 16);
                if ((v120 & 0xFF00000000) != 0)
                {
                  if (v120 >= 0x40)
                  {
                    v121 = &v118[2 * (*(_QWORD *)(v114 + 16) & 0xFFFFFFC0)];
                    v197 = v118;
                    do
                    {
                      v299.val[0] = *a2;
                      v198 = a2[1];
                      v305.val[0] = a2[2];
                      v199 = a2[3];
                      a2 += 4;
                      v315.val[0] = v199;
                      v305.val[1] = 0u;
                      v324.val[0] = v198;
                      v299.val[1] = 0u;
                      v200 = v197;
                      vst2q_s8(v200, v299);
                      v200 += 32;
                      v315.val[1] = 0u;
                      v324.val[1] = 0u;
                      vst2q_s8(v200, v324);
                      v201 = v197 + 64;
                      vst2q_s8(v201, v305);
                      v202 = v197 + 96;
                      v197 += 128;
                      vst2q_s8(v202, v315);
                    }
                    while (v197 != v121);
                  }
                  else
                  {
                    v121 = &v112[2 * v54];
                  }
                  while (v121 != &v118[2 * v120])
                  {
                    v122 = a2->u8[0];
                    a2 = (int8x16_t *)((char *)a2 + 1);
                    *(_WORD *)v121 = v122;
                    v121 += 2;
                  }
                }
                else if ((_DWORD)v120 == 1)
                {
                  *(_WORD *)v118 = a2->i16[0];
                }
                else if ((_DWORD)v120)
                {
                  memcpy(v118, a2, 2 * *(_QWORD *)(v114 + 16));
                }
                v112 = &v118[2 * v120];
                __dst[0] = v112;
                v115 = v291 - 1;
              }
              while (v291);
            }
          }
          goto LABEL_50;
        }
        if (!(_DWORD)v66)
        {
          __break(0xC471u);
          JUMPOUT(0x198A73BC0);
        }
        v293 = v53->u8[0];
        v148 = *((_QWORD *)this + 2);
        v149 = *(unsigned __int16 *)(v148 + 24);
        a2 = *(int8x16_t **)(v148 + 8);
        v150 = *(_QWORD *)(v148 + 16);
        if ((v150 & 0xFF00000000) != 0)
        {
          if (v150 >= 0x40)
          {
            v191 = &v65[2 * (*(_QWORD *)(v148 + 16) & 0xFFFFFFC0)];
            v227 = 0uLL;
            v228 = casual + 20;
            do
            {
              v309.val[0] = *a2;
              v229 = a2[1];
              v319.val[0] = a2[2];
              v230 = a2[3];
              a2 += 4;
              v231 = v230;
              v319.val[1] = 0uLL;
              v328.val[0] = v229;
              v309.val[1] = 0uLL;
              v232 = v228;
              vst2q_s8(v232, v309);
              v232 += 32;
              v328.val[1] = 0uLL;
              vst2q_s8(v232, v328);
              v233 = v228 + 64;
              vst2q_s8(v233, v319);
              v234 = v228 + 96;
              vst2q_s8(v234, *(int8x16x2_t *)(&v227 - 1));
              v228 += 128;
            }
            while (v228 != v191);
          }
          else
          {
            v191 = casual + 20;
          }
          while (v191 != &v65[2 * v150])
          {
            v235 = a2->u8[0];
            a2 = (int8x16_t *)((char *)a2 + 1);
            *(_WORD *)v191 = v235;
            v191 += 2;
          }
        }
        else if ((_DWORD)v150 == 1)
        {
          *(_WORD *)v65 = a2->i16[0];
        }
        else if ((_DWORD)v150)
        {
          memcpy(casual + 20, a2, 2 * *(_QWORD *)(v148 + 16));
        }
        v151 = &v65[2 * v150];
        if (v149)
        {
          v188 = *(int8x16_t **)(v148 + 8);
          v187 = *(_QWORD *)(v148 + 16);
          if ((v187 & 0xFF00000000) != 0)
          {
            if (v187 >= 0x40)
            {
              v239 = v187 & 0xFFFFFFC0;
              v240 = v187 >> 6;
              v241 = (uint64_t)&casual[128 * v240 + 22 + 2 * v150];
              v242 = 2 * v187 - (v240 << 7);
              v243 = 0uLL;
              do
              {
                *(_WORD *)v151 = v293;
                v244 = v151 + 2;
                __dst[0] = v244;
                v245 = v188;
                v246 = v244;
                do
                {
                  v310.val[0] = *v245;
                  v247 = v245[1];
                  v320.val[0] = v245[2];
                  v248 = v245[3];
                  v245 += 4;
                  v249 = v248;
                  v320.val[1] = 0uLL;
                  v329.val[0] = v247;
                  v310.val[1] = 0uLL;
                  v250 = v246;
                  vst2q_s8(v250, v310);
                  v250 += 32;
                  v329.val[1] = 0uLL;
                  vst2q_s8(v250, v329);
                  v251 = v246 + 64;
                  vst2q_s8(v251, v320);
                  v252 = v246 + 96;
                  vst2q_s8(v252, *(int8x16x2_t *)(&v243 - 1));
                  v246 += 128;
                }
                while (v246 != &v244[2 * v239]);
                if (v239 != v187)
                {
                  v253 = 0;
                  v254 = v242;
                  do
                  {
                    *(_WORD *)(v241 + 2 * v253) = v245->u8[v253];
                    ++v253;
                    v254 -= 2;
                  }
                  while (v254);
                }
                v151 = &v244[2 * v187];
                __dst[0] = v151;
                v241 += 2 * v187 + 2;
                --v149;
              }
              while (v149);
            }
            else if (*(_QWORD *)(v148 + 16))
            {
              do
              {
                *(_WORD *)v151 = v293;
                v192 = v151 + 2;
                v193 = 2 * v187;
                v194 = v192;
                v195 = v188;
                do
                {
                  v196 = v195->u8[0];
                  v195 = (int8x16_t *)((char *)v195 + 1);
                  *v194++ = v196;
                  v193 -= 2;
                }
                while (v193);
                v151 = (char *)&v192[v187];
                --v149;
              }
              while (v149);
            }
            else
            {
              do
              {
                *(_WORD *)v151 = v293;
                v151 += 2;
                --v149;
              }
              while (v149);
            }
          }
          else
          {
            do
            {
              *(_WORD *)v151 = v293;
              v189 = v151 + 2;
              if ((_DWORD)v187 == 1)
              {
                *v189 = v188->i16[0];
              }
              else if ((_DWORD)v187)
              {
                memcpy(v189, v188, 2 * v187);
              }
              v151 += 2 * v187 + 2;
              --v149;
            }
            while (v149);
          }
        }
        if (v66 < 2)
        {
LABEL_50:
          if (casual)
          {
            LODWORD(v14) = *((_DWORD *)casual + 1);
            goto LABEL_52;
          }
          goto LABEL_124;
        }
        v152 = 1;
        while (1)
        {
          if (v152 >= *((unsigned int *)this + 7))
          {
            __break(0xC471u);
            JUMPOUT(0x198A73B84);
          }
          v153 = *((_QWORD *)this + 2) + 32 * v152;
          v155 = *(int8x16_t **)(v153 + 8);
          v154 = *(_QWORD *)(v153 + 16);
          v156 = *(unsigned __int16 *)(v153 + 24) + 1;
          v157 = v154;
          if ((v154 & 0xFF00000000) != 0)
          {
            if (v154 >= 0x40)
            {
              v163 = v154 & 0xFFFFFFC0;
              v164 = 2 * v154 + 2;
              v165 = v154 >> 6;
              v166 = (uint64_t)&v151[128 * v165 + 2];
              v167 = 2 * v157 - (v165 << 7);
              do
              {
                *(_WORD *)v151 = v293;
                __dst[0] = v151 + 2;
                v168 = 2;
                v169 = v155;
                v170 = 0u;
                do
                {
                  v298.val[0] = *v169;
                  v171 = v169[1];
                  v304.val[0] = v169[2];
                  v172 = v169[3];
                  v169 += 4;
                  v173 = v172;
                  v304.val[1] = 0u;
                  v314.val[0] = v171;
                  v298.val[1] = 0u;
                  v174 = &v151[v168];
                  vst2q_s8(v174, v298);
                  v174 += 32;
                  v175 = &v151[v168 + 64];
                  v314.val[1] = 0u;
                  vst2q_s8(v174, v314);
                  v176 = &v151[v168 + 96];
                  v177 = (uint64_t)&v151[v168 + 128];
                  vst2q_s8(v175, v304);
                  vst2q_s8(v176, *(int8x16x2_t *)(&v170 - 1));
                  v168 += 128;
                }
                while ((char *)v177 != &v151[2 * v163 + 2]);
                if (v163 != v157)
                {
                  v178 = 0;
                  v179 = v167;
                  do
                  {
                    *(_WORD *)(v166 + 2 * v178) = v169->u8[v178];
                    ++v178;
                    v179 -= 2;
                  }
                  while (v179);
                }
                v151 += v164;
                __dst[0] = v151;
                v166 += v164;
                --v156;
              }
              while (v156);
              goto LABEL_210;
            }
            if ((_DWORD)v154)
            {
              v159 = 2 * v154;
              do
              {
                v160 = 0;
                *(_WORD *)v151 = v293;
                v161 = v155;
                do
                {
                  v162 = v161->u8[0];
                  v161 = (int8x16_t *)((char *)v161 + 1);
                  *(_WORD *)&v151[v160 + 2] = v162;
                  v160 += 2;
                }
                while (v159 != v160);
                v151 += v159 + 2;
                --v156;
              }
              while (v156);
            }
            else
            {
              do
              {
                *(_WORD *)v151 = v293;
                v151 += 2;
                --v156;
              }
              while (v156);
            }
          }
          else if ((_DWORD)v154 == 1)
          {
            do
            {
              *(_WORD *)v151 = v293;
              *((_WORD *)v151 + 1) = v155->i16[0];
              v151 += 4;
              --v156;
            }
            while (v156);
          }
          else if ((_DWORD)v154)
          {
            v158 = 2 * v154;
            do
            {
              --v156;
              *(_WORD *)v151 = v293;
              memcpy(v151 + 2, v155, v158);
              v151 += v158 + 2;
            }
            while (v156);
          }
          else
          {
            do
            {
              *(_WORD *)v151 = v293;
              v151 += 2;
              --v156;
            }
            while (v156);
          }
          __dst[0] = v151;
LABEL_210:
          if (++v152 == v66)
            goto LABEL_50;
        }
      }
    }
    else if (v14 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20), __dst);
      casual = (char *)__dst[0];
      if (__dst[0])
      {
        v135 = (char *)__dst[0] + 20;
        __dst[0] = (char *)__dst[0] + 20;
        *(_DWORD *)casual = 2;
        *((_DWORD *)casual + 1) = v14;
        *((_QWORD *)casual + 1) = casual + 20;
        *((_DWORD *)casual + 4) = 0;
        v292 = *((unsigned int *)this + 7);
        if ((_DWORD)v54 == 1)
        {
          if (!(_DWORD)v292)
          {
            __break(0xC471u);
            JUMPOUT(0x198A73BD8);
          }
          v255 = v53->i16[0];
          v256 = *((_QWORD *)this + 2);
          v257 = *(unsigned __int16 *)(v256 + 24);
          JSC::appendStringToData<char16_t>((char **)__dst, *(int8x16_t **)(v256 + 8), *(_QWORD *)(v256 + 16));
          JSC::appendStringToDataWithOneCharacterSeparatorRepeatedly<char16_t>((_WORD **)__dst, v255, *(int8x16_t **)(v256 + 8), *(_QWORD *)(v256 + 16), v257);
          if ((_DWORD)v292 != 1)
          {
            v258 = 0;
            v259 = 1;
            do
            {
              if (v259 >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x198A73BD0);
              }
              JSC::appendStringToDataWithOneCharacterSeparatorRepeatedly<char16_t>((_WORD **)__dst, v255, *(int8x16_t **)(*((_QWORD *)this + 2) + v258 + 40), *(_QWORD *)(*((_QWORD *)this + 2) + v258 + 48), *(unsigned __int16 *)(*((_QWORD *)this + 2) + v258 + 56) + 1);
              ++v259;
              v258 += 32;
            }
            while (32 * v292 - 32 != v258);
          }
        }
        else if ((_DWORD)v54)
        {
          if (!(_DWORD)v292)
          {
            __break(0xC471u);
            JUMPOUT(0x198A73BB0);
          }
          v136 = *((_QWORD *)this + 2);
          v137 = *(unsigned __int16 *)(v136 + 24);
          a2 = *(int8x16_t **)(v136 + 8);
          v138 = *(_QWORD *)(v136 + 16);
          if ((v138 & 0xFF00000000) != 0)
          {
            if (v138 >= 0x40)
            {
              v190 = &v135[2 * (*(_QWORD *)(v136 + 16) & 0xFFFFFFC0)];
              v218 = 0uLL;
              v219 = casual + 20;
              do
              {
                v308.val[0] = *a2;
                v220 = a2[1];
                v318.val[0] = a2[2];
                v221 = a2[3];
                a2 += 4;
                v222 = v221;
                v318.val[1] = 0uLL;
                v327.val[0] = v220;
                v308.val[1] = 0uLL;
                v223 = v219;
                vst2q_s8(v223, v308);
                v223 += 32;
                v327.val[1] = 0uLL;
                vst2q_s8(v223, v327);
                v224 = v219 + 64;
                vst2q_s8(v224, v318);
                v225 = v219 + 96;
                vst2q_s8(v225, *(int8x16x2_t *)(&v218 - 1));
                v219 += 128;
              }
              while (v219 != v190);
            }
            else
            {
              v190 = casual + 20;
            }
            while (v190 != &v135[2 * v138])
            {
              v226 = a2->u8[0];
              a2 = (int8x16_t *)((char *)a2 + 1);
              *(_WORD *)v190 = v226;
              v190 += 2;
            }
          }
          else if ((_DWORD)v138 == 1)
          {
            *(_WORD *)v135 = a2->i16[0];
          }
          else if ((_DWORD)v138)
          {
            memcpy(casual + 20, a2, 2 * *(_QWORD *)(v136 + 16));
          }
          __dst[0] = &v135[2 * v138];
          while (v137)
          {
            v273 = (char *)__dst[0];
            memcpy(__dst[0], v53, 2 * v54);
            --v137;
            __dst[0] = &v273[2 * v54];
            JSC::appendStringToData<char16_t>((char **)__dst, *(int8x16_t **)(v136 + 8), *(_QWORD *)(v136 + 16));
          }
          if (v292 >= 2)
          {
            v139 = (char *)__dst[0];
            for (k = 1; k != v292; ++k)
            {
              if (k >= *((unsigned int *)this + 7))
              {
                __break(0xC471u);
                JUMPOUT(0x198A73BB8);
              }
              v141 = *((_QWORD *)this + 2) + 32 * k;
              v142 = *(unsigned __int16 *)(v141 + 24);
              do
              {
                v143 = v142;
                memcpy(v139, v53, 2 * v54);
                v144 = &v139[2 * v54];
                __dst[0] = v144;
                a2 = *(int8x16_t **)(v141 + 8);
                v145 = *(_QWORD *)(v141 + 16);
                if ((v145 & 0xFF00000000) != 0)
                {
                  if (v145 >= 0x40)
                  {
                    v146 = &v144[2 * (*(_QWORD *)(v141 + 16) & 0xFFFFFFC0)];
                    v212 = v144;
                    do
                    {
                      v300.val[0] = *a2;
                      v213 = a2[1];
                      v307.val[0] = a2[2];
                      v214 = a2[3];
                      a2 += 4;
                      v326.val[1] = 0u;
                      v326.val[0] = v214;
                      v307.val[1] = 0u;
                      v317.val[0] = v213;
                      v300.val[1] = 0u;
                      v215 = v212;
                      vst2q_s8(v215, v300);
                      v215 += 32;
                      v317.val[1] = 0u;
                      vst2q_s8(v215, v317);
                      v216 = v212 + 64;
                      vst2q_s8(v216, v307);
                      v217 = v212 + 96;
                      vst2q_s8(v217, v326);
                      v212 += 128;
                    }
                    while (v212 != v146);
                  }
                  else
                  {
                    v146 = v144;
                  }
                  while (v146 != &v144[2 * v145])
                  {
                    v147 = a2->u8[0];
                    a2 = (int8x16_t *)((char *)a2 + 1);
                    *(_WORD *)v146 = v147;
                    v146 += 2;
                  }
                }
                else if ((_DWORD)v145 == 1)
                {
                  *(_WORD *)v144 = a2->i16[0];
                }
                else if ((_DWORD)v145)
                {
                  memcpy(v144, a2, 2 * *(_QWORD *)(v141 + 16));
                }
                v139 = &v144[2 * v145];
                __dst[0] = v139;
                v142 = v143 - 1;
              }
              while (v143);
            }
          }
        }
        else if ((_DWORD)v292)
        {
          for (m = 0; m != v292; ++m)
          {
            if (m >= *((unsigned int *)this + 7))
            {
              __break(0xC471u);
              JUMPOUT(0x198A73BC8);
            }
            v261 = *((_QWORD *)this + 2) + 32 * m;
            v262 = *(unsigned __int16 *)(v261 + 24);
            do
            {
              v263 = v262;
              a2 = *(int8x16_t **)(v261 + 8);
              v264 = *(_QWORD *)(v261 + 16);
              if ((v264 & 0xFF00000000) != 0)
              {
                v265 = v135;
                if (v264 >= 0x40)
                {
                  v265 = &v135[2 * (*(_QWORD *)(v261 + 16) & 0xFFFFFFC0)];
                  v267 = v135;
                  do
                  {
                    v301.val[0] = *a2;
                    v268 = a2[1];
                    v311.val[0] = a2[2];
                    v269 = a2[3];
                    a2 += 4;
                    v330.val[1] = 0u;
                    v330.val[0] = v269;
                    v311.val[1] = 0u;
                    v321.val[0] = v268;
                    v301.val[1] = 0u;
                    v270 = v267;
                    vst2q_s8(v270, v301);
                    v270 += 32;
                    v321.val[1] = 0u;
                    vst2q_s8(v270, v321);
                    v271 = v267 + 64;
                    vst2q_s8(v271, v311);
                    v272 = v267 + 96;
                    vst2q_s8(v272, v330);
                    v267 += 128;
                  }
                  while (v267 != v265);
                }
                while (v265 != &v135[2 * v264])
                {
                  v266 = a2->u8[0];
                  a2 = (int8x16_t *)((char *)a2 + 1);
                  *(_WORD *)v265 = v266;
                  v265 += 2;
                }
              }
              else if ((_DWORD)v264 == 1)
              {
                *(_WORD *)v135 = a2->i16[0];
              }
              else if ((_DWORD)v264)
              {
                memcpy(v135, a2, 2 * *(_QWORD *)(v261 + 16));
              }
              v135 += 2 * v264;
              __dst[0] = v135;
              v262 = v263 - 1;
            }
            while (v263);
          }
        }
      }
      goto LABEL_50;
    }
    casual = 0;
    goto LABEL_50;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_124:
    v8 = v294;
LABEL_125:
    v100 = JSC::createOutOfMemoryError((unint64_t)v8, (JSC::JSGlobalObject *)a2);
    v107 = (JSC::Exception *)v100;
    if ((v100 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C)))
    {
      v107 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v100, 0, v101, v102, v103, v104, v105);
    }
    JSC::VM::throwException((JSC::VM *)v9, v8, v107, v106, v101, v102, v103, v104, v105);
    return 0;
  }
  v15 = *(char **)this;
  v16 = *((unsigned int *)this + 2);
  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v17)
    goto LABEL_16;
  v18 = ((unint64_t)v14 + 35) >> 4;
  if (v14 <= 0x18C)
  {
    v19 = 23 * v18 + 7;
  }
  else if (v14 > 0x26FC
         || (v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v18 + 626),
             *(_DWORD *)(v17 + 8052) <= v19))
  {
LABEL_16:
    casual = (char *)bmalloc_try_allocate_casual(v14 + 20, 0);
    goto LABEL_21;
  }
  v21 = v17 + 8 * v19;
  v22 = v21 + 8064;
  *(_BYTE *)(v21 + 8064) = 1;
  v23 = *(unsigned int *)(v21 + 8080);
  if ((_DWORD)v23)
  {
    *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
    casual = (char *)(*(_QWORD *)(v22 + 8) - v23);
  }
  else
  {
    v59 = *(_QWORD *)(v22 + 40);
    v60 = *(_QWORD *)(v22 + 24);
    if (!v59)
    {
      if (*(_BYTE *)(v22 + 5) == 6)
      {
        v129 = *(unsigned int *)(v22 + 32);
        v130 = *(_DWORD *)(v22 + 36);
        if (v129 < v130)
        {
          *(_QWORD *)(v22 + 8 * v129 + 56) = 0;
          v131 = (unint64_t *)(8 * v19 + 8 * v129 + v17 + 8128);
          v132 = v130 - 1 - v129;
          while (v132)
          {
            v60 += 1024;
            v134 = *v131++;
            v133 = v134;
            LODWORD(v129) = v129 + 1;
            --v132;
            if (v134)
            {
              v59 = __rbit64(v133);
              *(_DWORD *)(v22 + 32) = v129;
              *(_QWORD *)(v22 + 24) = v60;
              goto LABEL_73;
            }
          }
          *(_DWORD *)(v22 + 32) = v130;
        }
      }
      *(_BYTE *)v22 = 0;
      goto LABEL_16;
    }
LABEL_73:
    v61 = __clz(v59);
    *(_QWORD *)(v22 + 40) = v59 & ~(0x8000000000000000 >> v61);
    casual = (char *)(v60 + 16 * v61);
  }
  *(_BYTE *)v22 = 0;
LABEL_21:
  if (!casual)
    goto LABEL_124;
  v24 = casual + 20;
  *(_DWORD *)casual = 2;
  *((_DWORD *)casual + 1) = v14;
  *((_QWORD *)casual + 1) = casual + 20;
  *((_DWORD *)casual + 4) = 4;
  v25 = *((unsigned int *)this + 7);
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == 1)
    {
      if (!(_DWORD)v25)
      {
        __break(0xC471u);
        JUMPOUT(0x198A73B6CLL);
      }
      v31 = *v15;
      v32 = *((_QWORD *)this + 2);
      v33 = *(unsigned __int16 *)(v32 + 24);
      a2 = *(int8x16_t **)(v32 + 8);
      v34 = *(_QWORD *)(v32 + 16);
      v35 = v34;
      if ((_DWORD)v34 == 1)
      {
        *v24 = a2->i8[0];
      }
      else if ((_DWORD)v34)
      {
        memcpy(casual + 20, a2, *(_QWORD *)(v32 + 16));
      }
      v36 = &v24[v35];
      v37 = *(char **)(v32 + 8);
      v38 = *(unsigned int *)(v32 + 16);
      if (v33 >= 5)
      {
        switch((_DWORD)v38)
        {
          case 3:
            LOBYTE(__dst[0]) = v31;
            memcpy((char *)__dst + 1, v37, v38);
            memset_pattern4(v36, __dst, 4 * v33);
            v36 += 4 * v33;
            goto LABEL_40;
          case 7:
            LOBYTE(__dst[0]) = v31;
            memcpy((char *)__dst + 1, v37, v38);
            memset_pattern8(v36, __dst, 8 * v33);
            v36 += 8 * v33;
            goto LABEL_40;
          case 0xF:
            LOBYTE(__dst[0]) = v31;
            memcpy((char *)__dst + 1, v37, v38);
            memset_pattern16(v36, __dst, 16 * v33);
            v36 += 16 * v33;
            goto LABEL_40;
        }
      }
      else if (!(_DWORD)v33)
      {
        goto LABEL_40;
      }
      if ((_DWORD)v38 == 1)
      {
        do
        {
          *v36 = v31;
          v36[1] = *v37;
          v36 += v38 + 1;
          LODWORD(v33) = v33 - 1;
        }
        while ((_DWORD)v33);
      }
      else if ((_DWORD)v38)
      {
        do
        {
          LODWORD(v33) = v33 - 1;
          *v36 = v31;
          v277 = v36 + 1;
          memcpy(v277, v37, v38);
          v36 = &v277[v38];
        }
        while ((_DWORD)v33);
      }
      else
      {
        do
        {
          *v36 = v31;
          v36 += v38 + 1;
          LODWORD(v33) = v33 - 1;
        }
        while ((_DWORD)v33);
      }
LABEL_40:
      if (v25 >= 2)
      {
        v39 = 1;
        while (1)
        {
          if (v39 >= *((unsigned int *)this + 7))
          {
            __break(0xC471u);
            JUMPOUT(0x198A73B64);
          }
          v40 = *((_QWORD *)this + 2) + 32 * v39;
          v41 = *(unsigned __int16 *)(v40 + 24);
          v43 = *(char **)(v40 + 8);
          v42 = *(_QWORD *)(v40 + 16);
          v44 = v42;
          v45 = v41 + 1;
          if (v41 < 4)
            break;
          switch((_DWORD)v42)
          {
            case 3:
              LOBYTE(__dst[0]) = v31;
              memcpy((char *)__dst + 1, v43, v42);
              memset_pattern4(v36, __dst, (4 * v45));
              v36 += (4 * v45);
              break;
            case 7:
              LOBYTE(__dst[0]) = v31;
              memcpy((char *)__dst + 1, v43, v42);
              memset_pattern8(v36, __dst, (8 * v45));
              v36 += (8 * v45);
              break;
            case 0xF:
              LOBYTE(__dst[0]) = v31;
              memcpy((char *)__dst + 1, v43, v42);
              memset_pattern16(v36, __dst, 16 * v45);
              v36 += 16 * v45;
              break;
            default:
              goto LABEL_44;
          }
LABEL_49:
          if (++v39 == v25)
            goto LABEL_50;
        }
LABEL_44:
        if ((_DWORD)v42 == 1)
        {
          do
          {
            *v36 = v31;
            v36[1] = *v43;
            v36 += v42 + 1;
            LODWORD(v45) = v45 - 1;
          }
          while ((_DWORD)v45);
        }
        else if ((_DWORD)v42)
        {
          do
          {
            LODWORD(v45) = v45 - 1;
            *v36 = v31;
            v46 = v36 + 1;
            memcpy(v46, v43, v44);
            v36 = &v46[v44];
          }
          while ((_DWORD)v45);
        }
        else
        {
          do
          {
            *v36 = v31;
            v36 += v42 + 1;
            LODWORD(v45) = v45 - 1;
          }
          while ((_DWORD)v45);
        }
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (!(_DWORD)v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198A73B7CLL);
    }
    v81 = *((_QWORD *)this + 2);
    v82 = *(unsigned __int16 *)(v81 + 24);
    a2 = *(int8x16_t **)(v81 + 8);
    v83 = *(_QWORD *)(v81 + 16);
    v84 = v83;
    if ((_DWORD)v83 == 1)
    {
      *v24 = a2->i8[0];
    }
    else if ((_DWORD)v83)
    {
      memcpy(casual + 20, a2, *(_QWORD *)(v81 + 16));
    }
    for (n = &v24[v84]; v82; --v82)
    {
      memcpy(n, v15, v16);
      v236 = &n[v16];
      a2 = *(int8x16_t **)(v81 + 8);
      v237 = *(_QWORD *)(v81 + 16);
      v238 = v237;
      if ((_DWORD)v237 == 1)
      {
        *v236 = a2->i8[0];
      }
      else if ((_DWORD)v237)
      {
        memcpy(v236, a2, *(_QWORD *)(v81 + 16));
      }
      n = &v236[v238];
    }
    if (v25 >= 2)
    {
      for (ii = 1; ii != v25; ++ii)
      {
        if (ii >= *((unsigned int *)this + 7))
        {
          __break(0xC471u);
          JUMPOUT(0x198A73B74);
        }
        v290 = *((_QWORD *)this + 2) + 32 * ii;
        v87 = *(unsigned __int16 *)(v290 + 24) + 1;
        do
        {
          memcpy(n, v15, v16);
          v88 = &n[v16];
          a2 = *(int8x16_t **)(v290 + 8);
          v89 = *(_QWORD *)(v290 + 16);
          v90 = v89;
          if ((_DWORD)v89 == 1)
          {
            *v88 = a2->i8[0];
          }
          else if ((_DWORD)v89)
          {
            memcpy(v88, a2, *(_QWORD *)(v290 + 16));
          }
          n = &v88[v90];
          --v87;
        }
        while (v87);
      }
    }
    goto LABEL_50;
  }
  if ((_DWORD)v25)
  {
    v26 = 0;
    while (1)
    {
      if (v26 >= *((unsigned int *)this + 7))
        goto LABEL_395;
      v30 = *((_QWORD *)this + 2) + 32 * v26;
      v29 = *(unsigned __int16 *)(v30 + 24) + 1;
      do
      {
        while (1)
        {
          a2 = *(int8x16_t **)(v30 + 8);
          v27 = *(_QWORD *)(v30 + 16);
          v28 = v27;
          if ((_DWORD)v27 != 1)
            break;
          *v24 = a2->i8[0];
LABEL_27:
          v24 += v27;
          if (!--v29)
            goto LABEL_31;
        }
        if (!(_DWORD)v27)
          goto LABEL_27;
        memcpy(v24, a2, *(_QWORD *)(v30 + 16));
        v24 += v28;
        --v29;
      }
      while (v29);
LABEL_31:
      if (++v26 == v25)
        goto LABEL_50;
    }
  }
LABEL_52:
  if ((_DWORD)v14 != 1)
  {
    if ((_DWORD)v14)
    {
      v47 = *((_DWORD *)casual + 4);
      goto LABEL_55;
    }
LABEL_91:
    SlowCase = *v295;
    if (*(_DWORD *)casual == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)casual, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)casual -= 2;
    }
    return SlowCase;
  }
  v47 = *((_DWORD *)casual + 4);
  v71 = (unsigned __int8 *)*((_QWORD *)casual + 1);
  if ((v47 & 4) != 0)
  {
    v72 = *v71;
LABEL_90:
    v295 = (unint64_t *)(v9 + 8 * v72 + 42216);
    goto LABEL_91;
  }
  v72 = *(unsigned __int16 *)v71;
  if (v72 <= 0xFF)
    goto LABEL_90;
LABEL_55:
  v48 = (unint64_t *)(v9 + 39696);
  v49 = casual;
  if ((v47 & 3) == 2)
  {
    v49 = casual;
    do
    {
      v49 = (char *)*((_QWORD *)v49 + 3);
      v47 = *((_DWORD *)v49 + 4);
    }
    while ((v47 & 3) == 2);
  }
  if ((v47 & 8) != 0)
  {
    v50 = 0;
  }
  else
  {
    *((_DWORD *)v49 + 4) = v47 | 8;
    v50 = (unint64_t)*((unsigned int *)v49 + 1) << ((v47 & 4) == 0);
  }
  SlowCase = *v48;
  if (*v48 >= *(_QWORD *)(v9 + 39704))
  {
    SlowCase = *(_QWORD *)(v9 + 39712);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39672, v9 + 192, 16, 0, 0, v274, v275, v276);
      goto LABEL_60;
    }
    v108 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 39720);
    *(_QWORD *)(v9 + 39704) = SlowCase + HIDWORD(v108);
    *(_QWORD *)(v9 + 39712) = SlowCase + (int)v108;
  }
  *v48 = SlowCase + 16;
LABEL_60:
  *(_DWORD *)SlowCase = *(_QWORD *)(v9 + 41512) >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = casual;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  if (v50 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v9 + 192, 0, SlowCase, v50, a5, a6, a7, a8);
  return SlowCase;
}

uint64_t JSC::JSSymbolTableObject::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = (unsigned __int8 *)(v12 + 20);
  if (__ldaxr((unsigned __int8 *)(v12 + 20)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v13))
    goto LABEL_3;
LABEL_4:
  v15 = *(_QWORD *)(v12 + 8);
  if (v15)
  {
    v19 = *(_DWORD *)(v15 - 8);
    v20 = *(_DWORD *)(a3 + 16);
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(a3 + 32);
    v21 = v19 & (v20 >> 8);
    v22 = *(_QWORD *)(v15 + 16 * v21);
    if (v22 == a3)
    {
      v16 = 1;
    }
    else
    {
      v23 = 1;
      do
      {
        v16 = v22 != 0;
        if (!v22)
          break;
        v21 = (v21 + v23) & v19;
        v22 = *(_QWORD *)(v15 + 16 * v21);
        ++v23;
      }
      while (v22 != a3);
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v13))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v16)
    return 0;
  else
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSSymbolTableObject::getOwnSpecialPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  WTF::AtomStringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  _BYTE *v73;
  uint64_t **v74;
  WTF::StringImpl *v75[2];
  char v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unsigned __int8 *v79;
  char v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (unsigned __int8 *)(v7 + 20);
  v81 = 0;
  v79 = (unsigned __int8 *)(v7 + 20);
  v80 = 1;
  if (__ldaxr((unsigned __int8 *)(v7 + 20)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8);
    goto LABEL_4;
  }
  if (__stxr(1u, v8))
    goto LABEL_3;
LABEL_4:
  v81 = 1;
  v10 = *(_QWORD *)(v7 + 8);
  if (v10)
    v11 = (uint64_t *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  else
    v11 = 0;
  v12 = JSC::SymbolTable::begin(v7);
  if (v11 != v12)
  {
    v20 = v12;
    v21 = (uint64_t *)v13;
    v74 = (uint64_t **)(v6 + 41912);
    v22 = a3 + 1;
    while (1)
    {
      if (!a4)
        goto LABEL_10;
      v73 = v20 + 1;
      if ((v20[1] & 1) == 0)
        v73 = (_BYTE *)v20[1];
      if ((*v73 & 4) == 0)
      {
LABEL_10:
        if ((a3[3] & 1) != 0 || (*(_BYTE *)(*v20 + 16) & 0x20) == 0)
          break;
      }
LABEL_11:
      while (1)
      {
        v20 += 2;
        if (v20 == v21)
          break;
        if ((unint64_t)(*v20 + 1) > 1)
          goto LABEL_15;
      }
      v20 = v21;
LABEL_15:
      if (v20 == v11)
        goto LABEL_57;
    }
    if (*((_BYTE *)a3 + 25) == 1)
    {
      v23 = *(_QWORD *)(v7 + 24);
      v24 = (WTF::StringImpl *)*v20;
      if (v23
        && (WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::contains(*(_QWORD *)(v23 + 32), *v20) & 1) != 0)
      {
        goto LABEL_11;
      }
    }
    else
    {
      v24 = (WTF::StringImpl *)*v20;
    }
    v25 = *((_DWORD *)v24 + 4);
    if ((v25 & 0x20) != 0)
    {
      v26 = *(_DWORD *)v24 + 2;
    }
    else
    {
      if ((v25 & 0x10) != 0)
      {
        *(_DWORD *)v24 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*v74, (unint64_t)v24, v14, v15, v16, v17, v18, v19, v75);
        v24 = v75[0];
      }
      v26 = *(_DWORD *)v24;
      *(_DWORD *)v24 += 2;
      if (!v26)
      {
        WTF::StringImpl::~StringImpl(v24, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
LABEL_24:
        v78 = v24;
        v27 = *((_DWORD *)v24 + 4);
        if ((v27 & 0x20) != 0)
        {
          if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v24 + 36) & 4) != 0)
            goto LABEL_41;
        }
        else if ((a3[3] & 2) == 0)
        {
          goto LABEL_41;
        }
        v28 = *a3;
        v29 = *(unsigned int *)(*a3 + 20);
        if (v29 > 0x13)
        {
          if (!*v22 || !*(_DWORD *)(*v22 - 12))
          {
            v35 = *(uint64_t **)(v28 + 8);
            v36 = 8 * v29;
            do
            {
              v37 = *v35++;
              v77 = v37;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v77, v15, v16, v17, v18, v19, (uint64_t)v75);
              v36 -= 8;
            }
            while (v36);
          }
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)&v78, v15, v16, v17, v18, v19, (uint64_t)v75);
          if (!v76)
            goto LABEL_41;
          v30 = v78;
          v28 = *a3;
          v27 = *((_DWORD *)v78 + 4);
LABEL_31:
          if ((v27 & 0x20) != 0)
          {
            v31 = *(_DWORD *)v30 + 2;
          }
          else
          {
            if ((v27 & 0x10) != 0)
            {
              *(_DWORD *)v30 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v30, v14, v15, v16, v17, v18, v19, v75);
              v30 = v75[0];
            }
            v31 = *(_DWORD *)v30;
            *(_DWORD *)v30 += 2;
            if (!v31)
            {
              WTF::StringImpl::~StringImpl(v30, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
              goto LABEL_36;
            }
          }
          *(_DWORD *)v30 = v31;
LABEL_36:
          v75[0] = v30;
          v32 = *(unsigned int *)(v28 + 20);
          if ((_DWORD)v32 == *(_DWORD *)(v28 + 16))
          {
            WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v28 + 8, (unint64_t)v75);
          }
          else
          {
            v33 = *(_QWORD *)(v28 + 8);
            v75[0] = 0;
            *(_QWORD *)(v33 + 8 * v32) = v30;
            *(_DWORD *)(v28 + 20) = v32 + 1;
          }
          v34 = v75[0];
          v75[0] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          goto LABEL_41;
        }
        if (!(_DWORD)v29)
        {
LABEL_52:
          v30 = v24;
          goto LABEL_31;
        }
        v38 = *(WTF::StringImpl ***)(v28 + 8);
        while (*v38 != v24)
        {
          ++v38;
          if (!--v29)
            goto LABEL_52;
        }
LABEL_41:
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
        goto LABEL_11;
      }
    }
    *(_DWORD *)v24 = v26;
    goto LABEL_24;
  }
LABEL_57:
  if (v81 && v80)
  {
    v71 = v79;
    v72 = __ldxr(v79);
    if (v72 == 1)
    {
      if (!__stlxr(0, v79))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v71, 0, (uint64_t)v14, v15, v16, v17, v18, v19);
  }
}

void JSC::JSSymbolTableObject::visitChildren(JSC::JSSymbolTableObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 3);
  if (!v18)
    return;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      goto LABEL_17;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_17:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::JSSymbolTableObject::visitChildren(JSC::JSSymbolTableObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSObject::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::JSTemplateObjectDescriptor::destroy(JSC::JSTemplateObjectDescriptor *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::TemplateObjectDescriptor *v9;

  v9 = (JSC::TemplateObjectDescriptor *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v9, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSTemplateObjectDescriptor::create(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t result;
  unint64_t v12;
  int v13;
  uint64_t v14;

  v8 = a3;
  result = JSC::allocateCell<JSC::JSTemplateObjectDescriptor>((JSC::Heap **)a1, (JSC::VM *)0x18, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 41704);
  v13 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)result = v12 >> 4;
  *(_DWORD *)(result + 4) = v13;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 16) = v8;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::allocateCell<JSC::JSTemplateObjectDescriptor>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  JSC::Heap **v15;
  JSC::Heap *v16;
  JSC *v17;
  unint64_t v18;

  v10 = a1[5100];
  if (!v10)
    v10 = JSC::GCClient::Heap::templateObjectDescriptorSpaceSlow(a1 + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = a1 + 24;
      v16 = v10;
      v17 = (JSC *)a1;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, v15, v18, 0, 0);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

JSC::JSObject *JSC::JSTemplateObjectDescriptor::createTemplateObject(JSC::JSTemplateObjectDescriptor *this, JSC::JSGlobalObject *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  __n128 v21;
  uint64_t v22;
  const WTF::String *v23;
  const JSC::PropertyTable *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::JSObject *v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  WTF::AtomStringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  unint64_t v64;
  uint64_t v65;
  const JSC::PropertyTable *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  WTF::StringImpl *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v82;
  JSC::JSObject *v83;
  int v84;
  int v85;
  uint64_t v86;

  v11 = *((_QWORD *)a2 + 7);
  v12 = *(unsigned int *)(*((_QWORD *)this + 1) + 68);
  v20 = (JSC::JSObject *)JSC::constructEmptyArray((unint64_t)a2, 0, v12, 0, a6, a7, a8, a9, a3);
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v13, v14, v15, v16, v17, v18, v19))
  {
    return 0;
  }
  v29 = (JSC::JSObject *)JSC::constructEmptyArray((unint64_t)a2, 0, v12, 0, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v11 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v22, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28))
      return 0;
  }
  if ((_DWORD)v12)
  {
    v31 = 0;
    do
    {
      v32 = *((_QWORD *)this + 1);
      if (v31 >= *(unsigned int *)(v32 + 68))
      {
LABEL_55:
        __break(0xC471u);
        JUMPOUT(0x198A74884);
      }
      v33 = *(_QWORD *)(v32 + 56) + 16 * v31;
      LOBYTE(v82) = 0;
      LOBYTE(v83) = 0;
      if (*(_BYTE *)(v33 + 8))
      {
        v34 = *(WTF::StringImpl **)v33;
        if (v34)
          *(_DWORD *)v34 += 2;
        v82 = v34;
        LOBYTE(v83) = 1;
        v35 = JSC::jsString((JSC *)v11, (JSC::VM *)&v82, v23, (uint64_t)v24, v25, v26, v27, v28);
      }
      else
      {
        v35 = 10;
      }
      JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(v20, (unint64_t)a2, (JSC::VM *)v31, v35, 10, 0, v27, v28, (int32x4_t)v30);
      if (*(_DWORD *)(v11 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v36, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28))
        {
          goto LABEL_44;
        }
      }
      v37 = *((_QWORD *)this + 1);
      if (v31 >= *(unsigned int *)(v37 + 20))
        goto LABEL_55;
      v38 = JSC::jsString((JSC *)v11, (JSC::VM *)(*(_QWORD *)(v37 + 8) + 8 * v31), v23, (uint64_t)v24, v25, v26, v27, v28);
      JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(v29, (unint64_t)a2, (JSC::VM *)v31, v38, 10, 0, v39, v40, v41);
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v42, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28))
      {
LABEL_44:
        v43 = 0;
      }
      else
      {
        v43 = 1;
      }
      if ((_BYTE)v83)
      {
        v44 = v82;
        v82 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v42, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      if ((v43 & 1) == 0)
        return 0;
    }
    while (++v31 != v12);
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v82 = v53;
  if (v29)
    v54 = *((_BYTE *)v29 + 5) == 24;
  else
    v54 = 0;
  if (v54 && (*((_BYTE *)v29 + 4) & 0xE) == 0)
  {
    JSC::JSObject::freeze(v29, v53, (uint64_t)v23, v24, v25, v26, v27, v28, v30);
    goto LABEL_32;
  }
  v55 = JSC::setIntegrityLevel<(JSC::IntegrityLevel)1>((uint64_t)a2, v53, v29);
  if (*((_DWORD *)v53 + 20))
  {
    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v53, v56, v57, v58, v59, v60, v61, v62) | v55) & 1) != 0)
      goto LABEL_32;
    goto LABEL_29;
  }
  if ((v55 & 1) == 0)
LABEL_29:
    JSC::throwTypeError((unint64_t)a2, &v82, (uint64_t)"Unable to prevent extension in Object.freeze", 45);
LABEL_32:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v56, v57, v58, v59, v60, v61, v62))
  {
    return 0;
  }
  v64 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2168);
  v82 = 0;
  v83 = v20;
  v84 = -1;
  v63.n128_u64[0] = 0x100000001000000;
  v85 = 0x1000000;
  v86 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v20, v11, v64, (uint64_t)v29, 14, (uint64_t)&v82, v61, v62, v63);
  v72 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v82 = v72;
  if (v20 && *((_BYTE *)v20 + 5) == 24 && (*((_BYTE *)v20 + 4) & 0xE) == 0)
  {
    JSC::JSObject::freeze(v20, v72, v65, v66, v67, v68, v69, v70, v71);
    return v20;
  }
  v73 = JSC::setIntegrityLevel<(JSC::IntegrityLevel)1>((uint64_t)a2, v72, v20);
  if (*((_DWORD *)v72 + 20))
  {
    if (((JSC::VM::hasExceptionsAfterHandlingTraps(v72, v74, v75, v76, v77, v78, v79, v80) | v73) & 1) != 0)
      return v20;
    goto LABEL_37;
  }
  if ((v73 & 1) == 0)
LABEL_37:
    JSC::throwTypeError((unint64_t)a2, &v82, (uint64_t)"Unable to prevent extension in Object.freeze", 45);
  return v20;
}

uint64_t WTF::printInternal(uint64_t this, WTF::PrintStream *a2, JSType a3)
{
  uint64_t v3;
  const char *v4;
  WTF::PrintStream *v5;

  if (((_BYTE)a2 + 1) <= 0x4Eu)
  {
    v3 = this;
    v4 = off_1E35A50B0[(char)((_BYTE)a2 + 1)];
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
    WTF::PrintStream::printf(v5, "%s", v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return this;
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::contains(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 0x20) != 0)
    v3 = *(_DWORD *)(a2 + 32);
  v4 = v2 & (v3 >> 8);
  v5 = *(_QWORD *)(a1 + 16 * v4);
  if (v5 == a2)
    return 1;
  v6 = 1;
  do
  {
    v7 = v5 != 0;
    if (!v5)
      break;
    v4 = (v4 + v6) & v2;
    v5 = *(_QWORD *)(a1 + 16 * v4);
    ++v6;
  }
  while (v5 != a2);
  return v7;
}

char *JSC::appendStringToData<char16_t>(char **a1, int8x16_t *a2, uint64_t a3)
{
  unsigned int v3;
  char *result;
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  int8x16x2_t v16;
  int8x16x2_t v17;
  int8x16x2_t v18;

  v3 = a3;
  result = *a1;
  if ((a3 & 0xFF00000000) != 0)
  {
    v6 = &result[2 * a3];
    if (a3 >= 0x40)
    {
      v7 = &result[2 * (a3 & 0xFFFFFFC0)];
      v8 = 0uLL;
      do
      {
        v16.val[0] = *a2;
        v9 = a2[1];
        v17.val[0] = a2[2];
        v10 = a2[3];
        a2 += 4;
        v11 = v10;
        v17.val[1] = 0uLL;
        v18.val[0] = v9;
        v16.val[1] = 0uLL;
        v12 = result;
        vst2q_s8(v12, v16);
        v12 += 32;
        v18.val[1] = 0uLL;
        vst2q_s8(v12, v18);
        v13 = result + 64;
        vst2q_s8(v13, v17);
        v14 = result + 96;
        vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
        result += 128;
      }
      while (result != v7);
      result = v7;
    }
    while (result != v6)
    {
      v15 = a2->u8[0];
      a2 = (int8x16_t *)((char *)a2 + 1);
      *(_WORD *)result = v15;
      result += 2;
    }
  }
  else if ((_DWORD)a3 == 1)
  {
    *(_WORD *)result = a2->i16[0];
  }
  else if ((_DWORD)a3)
  {
    result = (char *)memcpy(result, a2, 2 * a3);
  }
  *a1 += 2 * v3;
  return result;
}

_WORD **JSC::appendStringToDataWithOneCharacterSeparatorRepeatedly<char16_t>(_WORD **result, __int16 a2, int8x16_t *__src, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int8x16_t *v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  _WORD *v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;

  if (a5)
  {
    v5 = a5;
    v6 = a4;
    v9 = result;
    v10 = a4;
    if ((a4 & 0xFF00000000) != 0)
    {
      v12 = *result;
      if (a4 >= 0x40)
      {
        v16 = a4 & 0xFFFFFFC0;
        v17 = 0uLL;
        do
        {
          *v12 = a2;
          v18 = v12 + 1;
          *result = v18;
          v19 = &v18[v16];
          v20 = __src;
          do
          {
            v29.val[0] = *v20;
            v21 = v20[1];
            v30.val[0] = v20[2];
            v22 = v20[3];
            v20 += 4;
            v23 = v22;
            v30.val[1] = 0uLL;
            v31.val[0] = v21;
            v29.val[1] = 0uLL;
            v24 = (char *)v18;
            vst2q_s8(v24, v29);
            v24 += 32;
            v31.val[1] = 0uLL;
            vst2q_s8(v24, v31);
            v25 = (char *)(v18 + 32);
            vst2q_s8(v25, v30);
            v26 = (char *)(v18 + 48);
            vst2q_s8(v26, *(int8x16x2_t *)(&v17 - 1));
            v18 += 64;
          }
          while (v18 != v19);
          if (v16 != a4)
          {
            v27 = 0;
            v28 = 2 * a4 - ((unint64_t)(a4 >> 6) << 7);
            do
            {
              v19[v27] = v20->u8[v27];
              ++v27;
              v28 -= 2;
            }
            while (v28);
          }
          v12 = &(*result)[a4];
          *result = v12;
          --v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          *v12 = a2;
          *result = v12 + 1;
          if ((_DWORD)a4)
          {
            v13 = 0;
            v14 = __src;
            do
            {
              v15 = v14->u8[0];
              v14 = (int8x16_t *)((char *)v14 + 1);
              v12[++v13] = v15;
            }
            while (a4 != v13);
          }
          v12 += a4 + 1;
          *result = v12;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      result = (_WORD **)*result;
      do
      {
        *(_WORD *)result = a2;
        v11 = (_WORD *)result + 1;
        *v9 = v11;
        if (v6 == 1)
        {
          *v11 = __src->i16[0];
        }
        else if (v6)
        {
          memcpy(v11, __src, 2 * v6);
          v11 = (_WORD *)*v9;
        }
        result = (_WORD **)&v11[v10];
        *v9 = result;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

char **JSC::appendStringToData<char16_t,unsigned char>(char **result, int8x16_t *a2, unint64_t a3)
{
  char *v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v3 = *result;
  v4 = (uint64_t)&(*result)[2 * a3];
  if (a3 >= 0x40)
  {
    v5 = &v3[2 * (a3 & 0x7FFFFFFFFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v14.val[0] = *a2;
      v7 = a2[1];
      v15.val[0] = a2[2];
      v8 = a2[3];
      a2 += 4;
      v9 = v8;
      v15.val[1] = 0uLL;
      v16.val[0] = v7;
      v14.val[1] = 0uLL;
      v10 = v3;
      vst2q_s8(v10, v14);
      v10 += 32;
      v16.val[1] = 0uLL;
      vst2q_s8(v10, v16);
      v11 = v3 + 64;
      vst2q_s8(v11, v15);
      v12 = v3 + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      v3 += 128;
    }
    while (v3 != v5);
    v3 = v5;
  }
  while (v3 != (char *)v4)
  {
    v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v3 = v13;
    v3 += 2;
  }
  *result += 2 * a3;
  return result;
}

uint64_t JSC::constructTypedArrayView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"%TypedArray% should not be called directly", 43);
}

void JSC::JSTypedArrayViewConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, uint64_t a4)
{
  JSC::BuiltinExecutables **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  double v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  double v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  WTF::StringImpl *v124;
  __int128 v125;

  v8 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v9 = (char *)a2 + 41952;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "TypedArray";
  *(_DWORD *)(v10 + 16) = 4;
  v124 = (WTF::StringImpl *)v10;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v124, 1, v11, v12, v13);
  v22 = v124;
  v124 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v9 + 2160), a4, 14, v18, v19, v20, v21);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v9 + 2752), *(_QWORD *)(a3 + 1624), (const JSC::PropertyTable *)0x16, v23, v24, v25, v26);
  v28 = *(WTF::StringImpl **)(*(_QWORD *)v9 + 2056);
  if (v28)
  {
    *(_DWORD *)v28 += 2;
    v29 = JSC::BuiltinExecutables::typedArrayConstructorOfCodeExecutable(*v8);
    v30 = (WTF::StringImpl *)*((_QWORD *)*v8 + 1);
    ++*((_DWORD *)v30 + 2);
    v124 = v30;
    v125 = xmmword_199125590;
    v39 = JSC::UnlinkedFunctionExecutable::link(v29, (uint64_t)a2, 0, (uint64_t)&v124, 0, 0, 0, v31, COERCE_DOUBLE(0x1CDBE0001CC48), v32, v33);
    v40 = v124;
    v124 = 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
      else
        --*((_DWORD *)v40 + 2);
    }
    v41 = JSC::JSFunction::create((uint64_t)a2, v39, (_DWORD *)a3, v34, v35, v36, v37, v38);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v28, v41, 4, v42, v43, v44, v45);
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  else
  {
    v102 = JSC::typedArrayConstructorOfCodeGenerator((JSC::BuiltinExecutables **)a2, v27);
    v108 = JSC::JSFunction::create((uint64_t)a2, v102, (_DWORD *)a3, v103, v104, v105, v106, v107);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, 0, v108, 4, v109, v110, v111, v112);
  }
  v53 = *(WTF::StringImpl **)(*(_QWORD *)v9 + 1360);
  if (v53)
  {
    *(_DWORD *)v53 += 2;
    v54 = JSC::BuiltinExecutables::typedArrayConstructorFromCodeExecutable(*v8);
    v55 = (WTF::StringImpl *)*((_QWORD *)*v8 + 1);
    ++*((_DWORD *)v55 + 2);
    v124 = v55;
    v125 = xmmword_199125260;
    v64 = JSC::UnlinkedFunctionExecutable::link(v54, (uint64_t)a2, 0, (uint64_t)&v124, 0, 0, 0, v56, COERCE_DOUBLE(0x151B400014A80), v57, v58);
    v65 = v124;
    v124 = 0;
    if (v65)
    {
      if (*((_DWORD *)v65 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
      else
        --*((_DWORD *)v65 + 2);
    }
    v66 = JSC::JSFunction::create((uint64_t)a2, v64, (_DWORD *)a3, v59, v60, v61, v62, v63);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v53, v66, 4, v67, v68, v69, v70);
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  else
  {
    v113 = JSC::typedArrayConstructorFromCodeGenerator((JSC::BuiltinExecutables **)a2, v46);
    v119 = JSC::JSFunction::create((uint64_t)a2, v113, (_DWORD *)a3, v114, v115, v116, v117, v118);
    JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, 0, v119, 4, v120, v121, v122, v123);
  }
  JSC::JSGlobalObject::installTypedArrayConstructorSpeciesWatchpoint((_QWORD *)a3, (uint64_t)a1, v72, v73, v74, v75, v76, v77);
}

uint64_t JSC::JSTypedArrayViewConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSTypedArrayViewConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::typedArrayViewPrivateFuncIsTypedArrayView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 6;
  if ((*(_BYTE *)(v3 + 5) - 39) >= 0xBu)
    return 6;
  return 7;
}

uint64_t JSC::typedArrayViewPrivateFuncIsSharedTypedArrayView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) - 39 > 0xA)
    return 6;
  result = 6;
  v5 = *(unsigned __int8 *)(v3 + 40) - 88;
  if (v5 > 0x35)
    return result;
  if (((1 << v5) & 0x3D) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 8) - 8);
  }
  else
  {
    if (((1 << v5) & 0x3D000000000000) == 0)
      return result;
    v6 = *(_QWORD *)(v3 + 48);
  }
  if (!(*(_QWORD *)(v6 + 32)
       ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
       : 0))
    return 6;
  return 7;
}

uint64_t JSC::typedArrayViewPrivateFuncIsResizableOrGrowableSharedTypedArrayView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v3 + 5) - 39 > 0xA)
    return 6;
  if ((*(_BYTE *)(v3 + 40) & 6) != 0)
    return 7;
  return 6;
}

uint64_t JSC::typedArrayViewPrivateFuncTypedArrayFromFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Uninitialized;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  JSC::VM **v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  int v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  int v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  char v377;
  int v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char v393;
  int v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  int v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  JSC::VM *v425;
  JSC::VM *v426;
  char v427;
  JSC::VM *v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v425 = v8;
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0)
    return 10;
  v10 = (unint64_t)this;
  v11 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
  v12 = (char **)(16 * *(unsigned int *)(v11 + 76));
  if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::s_info)
  {
    v13 = 39;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>::s_info)
  {
    v13 = 40;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::s_info)
  {
    v13 = 41;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::s_info)
  {
    v13 = 42;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::s_info)
  {
    v13 = 43;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::s_info)
  {
    v13 = 44;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::s_info)
  {
    v13 = 45;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info)
  {
    v13 = 46;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info)
  {
    v13 = 47;
  }
  else if (v12 == &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info)
  {
    v13 = 48;
  }
  else
  {
    if (v12 != &JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info)
      return 10;
    v13 = 49;
  }
  if (*(JSC **)(v11 + 40) != this)
    return 10;
  if (v13 != 44)
  {
    switch(v13)
    {
      case '\'':
        v426 = v8;
        v40 = *((_QWORD *)a2 + 7);
        if ((v40 & 0xFFFE000000000002) != 0)
          return 10;
        v41 = *(unsigned __int8 *)(v40 + 5);
        if ((v41 - 39) >= 0xC)
        {
          if (v41 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v298 = *(_BYTE *)(v40 + 4);
          if ((v298 & 0xC) != 4)
            return 10;
          v299 = v298 & 0xE;
          if ((*(_BYTE *)(v40 + 4) & 0xE) != 0)
            v300 = *(unsigned int *)(*(_QWORD *)(v40 + 8) - 8);
          else
            v300 = 0;
          v301 = JSC::JSGlobalObject::typedArrayStructure(v10, 1, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v301, v300, v302, v303, v304, v305, v306);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v307, v308, v309, v310, v311, v312, v313))
          {
            if (v299 == 4)
              JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::copyFromInt32ShapeArray(*(int8x8_t **)(Uninitialized + 16), v40, v300);
            else
              JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::copyFromDoubleShapeArray(Uninitialized, v40, v300);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v40, (uint64_t)&v429, v42, v43, v44, v45, v46, v47);
          if (!v49)
            goto LABEL_114;
          v50 = v48;
          v51 = JSC::JSGlobalObject::typedArrayStructure(v10, 1, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v51, v50, v52, v53, v54, v55, v56);
          if (!*((_DWORD *)v8 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v57, v58, v59, v60, v61, v62, v63))
          {
            JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v40, 0, v50, 1, v63);
            return Uninitialized;
          }
        }
        return 0;
      case '(':
        v426 = v8;
        v85 = *((_QWORD *)a2 + 7);
        if ((v85 & 0xFFFE000000000002) != 0)
          return 10;
        v86 = *(unsigned __int8 *)(v85 + 5);
        if ((v86 - 39) >= 0xC)
        {
          if (v86 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v314 = *(_BYTE *)(v85 + 4);
          if ((v314 & 0xC) != 4)
            return 10;
          v315 = v314 & 0xE;
          if ((*(_BYTE *)(v85 + 4) & 0xE) != 0)
            v316 = *(unsigned int *)(*(_QWORD *)(v85 + 8) - 8);
          else
            v316 = 0;
          v317 = JSC::JSGlobalObject::typedArrayStructure(v10, 2, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v317, v316, v318, v319, v320, v321, v322);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v323, v324, v325, v326, v327, v328, v329))
          {
            if (v315 == 4)
              JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromInt32ShapeArray(Uninitialized, 0, v85, 0, v316);
            else
              JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromDoubleShapeArray(Uninitialized, 0, v85, 0, v316);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v93 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v85, (uint64_t)&v429, v87, v88, v89, v90, v91, v92);
          if (!v94)
            goto LABEL_114;
          v95 = v93;
          v96 = JSC::JSGlobalObject::typedArrayStructure(v10, 2, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v96, v95, v97, v98, v99, v100, v101);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v102, v103, v104, v105, v106, v107, v108))
          {
            JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(Uninitialized, (JSC::JSGlobalObject *)v10, 0, v85, 0, v95, 1, v108);
            return Uninitialized;
          }
        }
        return 0;
      case ')':
        v426 = v8;
        v109 = *((_QWORD *)a2 + 7);
        if ((v109 & 0xFFFE000000000002) != 0)
          return 10;
        v110 = *(unsigned __int8 *)(v109 + 5);
        if ((v110 - 39) >= 0xC)
        {
          if (v110 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v330 = *(_BYTE *)(v109 + 4);
          if ((v330 & 0xC) != 4)
            return 10;
          v331 = v330 & 0xE;
          if ((*(_BYTE *)(v109 + 4) & 0xE) != 0)
            v332 = *(unsigned int *)(*(_QWORD *)(v109 + 8) - 8);
          else
            v332 = 0;
          v333 = JSC::JSGlobalObject::typedArrayStructure(v10, 3, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v333, v332, v334, v335, v336, v337, v338);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v339, v340, v341, v342, v343, v344, v345))
          {
            if (v331 == 4)
              JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::copyFromInt32ShapeArray(Uninitialized, v109, v332);
            else
              JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::copyFromDoubleShapeArray(Uninitialized, v109, v332);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v117 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v109, (uint64_t)&v429, v111, v112, v113, v114, v115, v116);
          if (!v118)
            goto LABEL_114;
          v119 = v117;
          v120 = JSC::JSGlobalObject::typedArrayStructure(v10, 3, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v120, v119, v121, v122, v123, v124, v125);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v126, v127, v128, v129, v130, v131, v132))
          {
            JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(Uninitialized, v10, 0, v109, 0, v119, 1, v132);
            return Uninitialized;
          }
        }
        return 0;
      case '*':
        v426 = v8;
        v133 = *((_QWORD *)a2 + 7);
        if ((v133 & 0xFFFE000000000002) != 0)
          return 10;
        v134 = *(unsigned __int8 *)(v133 + 5);
        if ((v134 - 39) >= 0xC)
        {
          if (v134 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v346 = *(_BYTE *)(v133 + 4);
          if ((v346 & 0xC) != 4)
            return 10;
          v347 = v346 & 0xE;
          if ((*(_BYTE *)(v133 + 4) & 0xE) != 0)
            v348 = *(unsigned int *)(*(_QWORD *)(v133 + 8) - 8);
          else
            v348 = 0;
          v349 = JSC::JSGlobalObject::typedArrayStructure(v10, 4, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v349, v348, v350, v351, v352, v353, v354);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v355, v356, v357, v358, v359, v360, v361))
          {
            if (v347 != 4)
              goto LABEL_206;
            goto LABEL_146;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v141 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v133, (uint64_t)&v429, v135, v136, v137, v138, v139, v140);
          if (!v142)
            goto LABEL_114;
          v143 = v141;
          v144 = JSC::JSGlobalObject::typedArrayStructure(v10, 4, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v144, v143, v145, v146, v147, v148, v149);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v150, v151, v152, v153, v154, v155, v156))
          {
            JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v133, 0, v143, 1, v156);
            return Uninitialized;
          }
        }
        return 0;
      case '+':
        v426 = v8;
        v133 = *((_QWORD *)a2 + 7);
        if ((v133 & 0xFFFE000000000002) != 0)
          return 10;
        v157 = *(unsigned __int8 *)(v133 + 5);
        if ((v157 - 39) >= 0xC)
        {
          if (v157 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v362 = *(_BYTE *)(v133 + 4);
          if ((v362 & 0xC) != 4)
            return 10;
          v363 = v362 & 0xE;
          if ((*(_BYTE *)(v133 + 4) & 0xE) != 0)
            v348 = *(unsigned int *)(*(_QWORD *)(v133 + 8) - 8);
          else
            v348 = 0;
          v364 = JSC::JSGlobalObject::typedArrayStructure(v10, 5, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v364, v348, v365, v366, v367, v368, v369);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v370, v371, v372, v373, v374, v375, v376))
          {
            if (v363 == 4)
LABEL_146:
              JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromInt32ShapeArray(*(_QWORD *)(Uninitialized + 16), v133, v348);
            else
LABEL_206:
              JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromDoubleShapeArray(Uninitialized, 0, v133, 0, v348);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v164 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v133, (uint64_t)&v429, v158, v159, v160, v161, v162, v163);
          if (!v165)
            goto LABEL_114;
          v166 = v164;
          v167 = JSC::JSGlobalObject::typedArrayStructure(v10, 5, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v167, v166, v168, v169, v170, v171, v172);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v173, v174, v175, v176, v177, v178, v179))
          {
            JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v133, 0, v166, 1, v179);
            return Uninitialized;
          }
        }
        return 0;
      case '-':
        v426 = v8;
        v251 = *((_QWORD *)a2 + 7);
        if ((v251 & 0xFFFE000000000002) != 0)
          return 10;
        v252 = *(unsigned __int8 *)(v251 + 5);
        if ((v252 - 39) >= 0xC)
        {
          if (v252 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v409 = *(_BYTE *)(v251 + 4);
          if ((v409 & 0xC) != 4)
            return 10;
          v410 = v409 & 0xE;
          if ((*(_BYTE *)(v251 + 4) & 0xE) != 0)
            v411 = *(unsigned int *)(*(_QWORD *)(v251 + 8) - 8);
          else
            v411 = 0;
          v412 = JSC::JSGlobalObject::typedArrayStructure(v10, 7, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v412, v411, v413, v414, v415, v416, v417);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v418, v419, v420, v421, v422, v423, v424))
          {
            if (v410 == 4)
              JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::copyFromInt32ShapeArray(*(_QWORD *)(Uninitialized + 16), v251, v411);
            else
              JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::copyFromDoubleShapeArray(Uninitialized, 0, v251, 0, v411);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v259 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v251, (uint64_t)&v429, v253, v254, v255, v256, v257, v258);
          if (!v260)
            goto LABEL_114;
          v261 = v259;
          v262 = JSC::JSGlobalObject::typedArrayStructure(v10, 7, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v262, v261, v263, v264, v265, v266, v267);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v268, v269, v270, v271, v272, v273, v274))
          {
            JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v251, 0, v261, 1, v274);
            return Uninitialized;
          }
        }
        return 0;
      case '.':
        v426 = v8;
        v180 = *((_QWORD *)a2 + 7);
        if ((v180 & 0xFFFE000000000002) != 0)
          return 10;
        v181 = *(unsigned __int8 *)(v180 + 5);
        if ((v181 - 39) >= 0xC)
        {
          if (v181 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v377 = *(_BYTE *)(v180 + 4);
          if ((v377 & 0xC) != 4)
            return 10;
          v378 = v377 & 0xE;
          if ((*(_BYTE *)(v180 + 4) & 0xE) != 0)
            v379 = *(unsigned int *)(*(_QWORD *)(v180 + 8) - 8);
          else
            v379 = 0;
          v380 = JSC::JSGlobalObject::typedArrayStructure(v10, 8, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v380, v379, v381, v382, v383, v384, v385);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v386, v387, v388, v389, v390, v391, v392))
          {
            if (v378 == 4)
              JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::copyFromInt32ShapeArray(Uninitialized, v180, v379);
            else
              JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::copyFromDoubleShapeArray(Uninitialized, v180, v379);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v188 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v180, (uint64_t)&v429, v182, v183, v184, v185, v186, v187);
          if (!v189)
            goto LABEL_114;
          v190 = v188;
          v191 = JSC::JSGlobalObject::typedArrayStructure(v10, 8, 0);
          Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v191, v190, v192, v193, v194, v195, v196);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v197, v198, v199, v200, v201, v202, v203))
          {
            JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(Uninitialized, (JSC::JSGlobalObject *)v10, 0, v180, 0, v190, 1, v203);
            return Uninitialized;
          }
        }
        return 0;
      case '/':
        v426 = v8;
        v204 = *((_QWORD *)a2 + 7);
        if ((v204 & 0xFFFE000000000002) != 0)
          return 10;
        v205 = *(unsigned __int8 *)(v204 + 5);
        if ((v205 - 39) >= 0xC)
        {
          if (v205 != 36)
            return 10;
          if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          v393 = *(_BYTE *)(v204 + 4);
          if ((v393 & 0xC) != 4)
            return 10;
          v394 = v393 & 0xE;
          if ((*(_BYTE *)(v204 + 4) & 0xE) != 0)
            v395 = *(unsigned int *)(*(_QWORD *)(v204 + 8) - 8);
          else
            v395 = 0;
          v396 = JSC::JSGlobalObject::typedArrayStructure(v10, 9, 0);
          Uninitialized = (uint64_t)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v396, v395, v397, v398, v399, v400, v401);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v402, v403, v404, v405, v406, v407, v408))
          {
            if (v394 == 4)
              JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::copyFromInt32ShapeArray(Uninitialized, v204, v395);
            else
              JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::copyFromDoubleShapeArray(*(_QWORD *)(Uninitialized + 16), v204, v395);
            return Uninitialized;
          }
        }
        else
        {
          if (!JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
          LOBYTE(v429) = 0;
          LOBYTE(v430) = 0;
          v212 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v204, (uint64_t)&v429, v206, v207, v208, v209, v210, v211);
          if (!v213)
          {
LABEL_114:
            v80 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
            v81 = &v426;
            goto LABEL_35;
          }
          v214 = v212;
          v215 = JSC::JSGlobalObject::typedArrayStructure(v10, 9, 0);
          Uninitialized = (uint64_t)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v215, v214, v216, v217, v218, v219, v220);
          if (!*((_DWORD *)v8 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v221, v222, v223, v224, v225, v226, v227))
          {
            JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v204, 0, v214, 1, v227);
            return Uninitialized;
          }
        }
        break;
      case '0':
        v426 = v8;
        v228 = *((_QWORD *)a2 + 7);
        if ((v228 & 0xFFFE000000000002) != 0
          || *(unsigned __int8 *)(v228 + 5) - 39 > 0xB
          || !JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          return 10;
        }
        LOBYTE(v429) = 0;
        LOBYTE(v430) = 0;
        v235 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v228, (uint64_t)&v429, v229, v230, v231, v232, v233, v234);
        if (!v236)
          goto LABEL_114;
        v237 = v235;
        v238 = JSC::JSGlobalObject::typedArrayStructure(v10, 10, 0);
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v238, v237, v239, v240, v241, v242, v243);
        if (*((_DWORD *)v8 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v244, v245, v246, v247, v248, v249, v250))
        {
          return 0;
        }
        JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v228, 0, v237, 1, v250);
        return Uninitialized;
      case '1':
        v426 = v8;
        v275 = *((_QWORD *)a2 + 7);
        if ((v275 & 0xFFFE000000000002) != 0
          || *(unsigned __int8 *)(v275 + 5) - 39 > 0xB
          || !JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          return 10;
        }
        LOBYTE(v429) = 0;
        LOBYTE(v430) = 0;
        v282 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v275, (uint64_t)&v429, v276, v277, v278, v279, v280, v281);
        if (!v283)
          goto LABEL_114;
        v284 = v282;
        v285 = JSC::JSGlobalObject::typedArrayStructure(v10, 11, 0);
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v285, v284, v286, v287, v288, v289, v290);
        if (*((_DWORD *)v8 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v291, v292, v293, v294, v295, v296, v297))
        {
          return 0;
        }
        JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(Uninitialized, v10, 0, v275, 0, v284, 1, v297);
        return Uninitialized;
      default:
        v80 = "Receiver should be a typed array view";
        v81 = &v425;
        v82 = 38;
        return JSC::throwTypeError((unint64_t)this, v81, (uint64_t)v80, v82);
    }
    return 0;
  }
  v428 = v8;
  v14 = *((_QWORD *)a2 + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    return 10;
  v15 = *(unsigned __int8 *)(v14 + 5);
  if ((v15 - 39) < 0xC)
  {
    if (JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(*((JSC::JSArrayBufferView **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      LOBYTE(v426) = 0;
      v427 = 0;
      v22 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)&v426, v16, v17, v18, v19, v20, v21);
      if (v28)
      {
        v29 = v22;
        v30 = *(_QWORD *)(v10 + 1784);
        if ((v30 & 1) != 0)
        {
          v83 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v10 & 8) != 0)
            v84 = (uint64_t *)(v10 - 16);
          else
            v84 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
          v429 = *v84;
          v430 = v10;
          v431 = v10 + 1784;
          v30 = v83(&v429);
        }
        Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v30, v29, v23, v24, v25, v26, v27);
        if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v31, v32, v33, v34, v35, v36, v37))
          return 0;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(Uninitialized, (JSC::JSGlobalObject *)v10, 0, v14, 0, v29, 1, v37);
      }
      else
      {
        v80 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
        v81 = &v428;
LABEL_35:
        this = (JSC *)v10;
        v82 = 72;
        return JSC::throwTypeError((unint64_t)this, v81, (uint64_t)v80, v82);
      }
      return Uninitialized;
    }
    return 10;
  }
  if (v15 != 36)
    return 10;
  if (!JSC::JSArray::isIteratorProtocolFastAndNonObservable(*((JSC::JSArray **)a2 + 7), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))return 10;
  v64 = *(_BYTE *)(v14 + 4);
  if ((v64 & 0xC) != 4)
    return 10;
  v65 = v64 & 0xE;
  if ((*(_BYTE *)(v14 + 4) & 0xE) != 0)
    v66 = *(unsigned int *)(*(_QWORD *)(v14 + 8) - 8);
  else
    v66 = 0;
  v67 = JSC::JSGlobalObject::typedArrayStructure(v10, 6, 0);
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized((JSC::JSGlobalObject *)v10, v67, v66, v68, v69, v70, v71, v72);
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v73, v74, v75, v76, v77, v78, v79))
    return 0;
  if (v65 == 4)
    JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromInt32ShapeArray(Uninitialized, 0, v14, 0, v66);
  else
    JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromDoubleShapeArray(Uninitialized, 0, v14, 0, v66);
  return Uninitialized;
}

