void JSC::HeapSnapshotBuilder::setLabelForCell(JSC::HeapSnapshotBuilder *this, JSC::JSCell *a2, JSC::JSCell **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  JSC::JSCell **v17;
  JSC::JSCell *v18;
  JSC::JSCell **v19;
  int v20;
  JSC::JSCell *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  JSC::JSCell *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = (uint64_t *)((char *)this + 72);
  v10 = *((_QWORD *)this + 9);
  if (v10
    || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::String>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::String,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)this + 9, 8uLL, 0, a4, a5, a6, a7, a8), (v10 = *v11) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (JSC::JSCell **)(v10 + 16 * v16);
  v18 = *v17;
  if (!*v17)
  {
LABEL_12:
    *v17 = a2;
    v21 = *a3;
    if (*a3)
      *(_DWORD *)v21 += 2;
    v22 = v17[1];
    v17[1] = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    v23 = *v11;
    if (*v11)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v27 = *v11;
    if (*v11)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return;
    }
    else
    {
      if (3 * v30 > 4 * v29)
        return;
      if (!(_DWORD)v30)
      {
        v31 = 8;
        goto LABEL_35;
      }
    }
    v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
LABEL_35:
    WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::String>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::String,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v11, v31, (uint64_t)v17, a4, a5, a6, a7, a8);
    return;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != a2)
  {
    if (v18 == (JSC::JSCell *)-1)
      v19 = v17;
    v16 = (v16 + v20) & v12;
    v17 = (JSC::JSCell **)(v10 + 16 * v16);
    v18 = *v17;
    ++v20;
    if (!*v17)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v11 - 16);
        v17 = v19;
      }
      goto LABEL_12;
    }
  }
  v25 = *a3;
  if (*a3)
    *(_DWORD *)v25 += 2;
  v26 = v17[1];
  v17[1] = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
}

int *JSC::HeapSnapshotBuilder::descriptionForCell@<X0>(JSC::JSCell *a1@<X1>, int **a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *result;

  if (*((_BYTE *)a1 + 5) == 2)
    goto LABEL_15;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &JSC::Structure::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &JSC::Structure::s_info && v6 != 0);
  }
  if (!v5)
    goto LABEL_15;
  v9 = *(_QWORD *)(16 * *((unsigned int *)a1 + 19) + 8);
  if (!v9)
  {
    result = 0;
    goto LABEL_16;
  }
  v10 = v9 - 1;
  if (v9 == 1)
  {
LABEL_15:
    result = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v11 = *(_QWORD *)(16 * *((unsigned int *)a1 + 19));
    result = (int *)WTF::fastCompactMalloc((WTF *)0x20);
    *result = 2;
    result[1] = v10;
    *((_QWORD *)result + 1) = v11;
    result[4] = 4;
  }
LABEL_16:
  *a2 = result;
  return result;
}

void WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = v12 + 16 * (v15 & v13);
    v20 = *(WTF **)v19;
    if (*(_QWORD *)v19 != -1)
      break;
    v16 = (_QWORD *)(v12 + 16 * v18);
LABEL_12:
    v15 = i + v18;
  }
  if (!v20)
  {
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v19 = (uint64_t)v16;
    }
    v21 = *a3;
    *a3 = 0;
    v22 = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    *(_DWORD *)(v19 + 8) = *a4;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_29;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_35:
        v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v31, v19, (uint64_t)a4, a5, a6, a7, a8);
        v27 = *a2;
        if (*a2)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
      goto LABEL_35;
    }
LABEL_38:
    v33 = v27 + 16 * v30;
    v32 = 1;
    goto LABEL_39;
  }
  if (!WTF::equal(v20, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_12;
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v32 = 0;
  v33 = v25 + 16 * v26;
LABEL_39:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v32;
}

uint64_t JSC::IncrementalSweeper::IncrementalSweeper(uint64_t this, JSC::Heap *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E35A2D40;
  v2 = (unsigned int *)*((_QWORD *)a2 - 10);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(this + 16) = v2;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  *(_QWORD *)this = off_1E3590BC0;
  *(_QWORD *)(this + 40) = 0;
  *(_WORD *)(this + 48) = 0;
  return this;
}

{
  unsigned int *v2;
  unsigned int v3;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E35A2D40;
  v2 = (unsigned int *)*((_QWORD *)a2 - 10);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *(_QWORD *)(this + 16) = v2;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  *(_QWORD *)this = off_1E3590BC0;
  *(_QWORD *)(this + 40) = 0;
  *(_WORD *)(this + 48) = 0;
  return this;
}

void JSC::IncrementalSweeper::doSweep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint32x4_t a11)
{
  int v11;
  WTF::AtomStringImpl *v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  unint64_t v33;
  JSC::MarkedBlock::Handle *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  JSC::MarkedSpace *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF::PrintStream *v114;
  int v115;
  int v116;
  int v117;
  char v118;
  int **v119;
  int *v120;

  v11 = a3;
  LOBYTE(v117) = 0;
  v118 = 0;
  if (BYTE2(dword_1ECF4C723))
  {
    v115 = 2512;
    v116 = 2511;
    v120 = (int *)JSC::Heap::size((uint64_t **)(a2 + 192), a9, a10, a11);
    v119 = (int **)JSC::Heap::capacity((JSC::Heap *)(a2 + 192));
    std::optional<WTF::TraceScope>::emplace[abi:sn180100]<TracePointCode,TracePointCode,unsigned long,unsigned long,void>((uint64_t)&v117, (uint64_t)&v116, &v115);
  }
  if ((v11 & 1) != 0)
  {
    while (1)
    {
      if (*(_DWORD *)(a2 + 1096) != 4)
      {
        do
        {
          v15 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(a2 + 1096));
          if ((v15 & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1985DEA50);
          }
          if ((v15 & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1985DEA70);
          }
          v16 = JSC::Heap::handleNeedFinalize((JSC::Heap *)(a2 + 192), v15, a3, a4, a5, a6, a7, a8);
          v18 = v16;
          if ((v15 & 1) != 0 && (v16 & 1) == 0)
            JSC::Heap::collectInMutatorThread((JSC::Heap *)(a2 + 192), v17, a3, a4, a5, a6, a7, a8);
        }
        while ((v18 & 1) != 0);
        v19 = atomic_load((unsigned int *)(a2 + 1096));
        if ((v19 & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985DEA90);
        }
        v20 = atomic_load((unsigned int *)(a2 + 1096));
        if ((v20 & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985DEAB0);
        }
        do
          v21 = (WTF::AtomStringImpl *)atomic_load((unsigned int *)(a2 + 1096));
        while ((JSC::Heap::handleNeedFinalize((JSC::Heap *)(a2 + 192), v21, a3, a4, a5, a6, a7, a8) & 1) != 0);
        *(_BYTE *)(a2 + 1197) = 1;
      }
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
        break;
LABEL_59:
      if (!JSC::Heap::sweepNextLogicallyEmptyWeakBlock((JSC::Heap *)(a2 + 192), (void *)a2, a3, a4, a5, a6, a7, a8))goto LABEL_60;
LABEL_53:
      v52 = mach_absolute_time();
      v54 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v54 != -1)
      {
        v120 = &v116;
        v119 = &v120;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v53) = dword_1ECF4400C;
      if ((double)(v52 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v53 * 1000000000.0) >= a9)
        goto LABEL_136;
    }
    while (1)
    {
      v23 = (unsigned __int8 *)(v22 + 56);
      if (__ldaxr((unsigned __int8 *)(v22 + 56)))
        break;
      if (__stxr(1u, v23))
        goto LABEL_18;
LABEL_19:
      v25 = *(_QWORD *)(v22 + 32);
      v26 = *(unsigned int *)(v22 + 48);
      v27 = *(unsigned int *)(v22 + 68);
      v28 = v27 >> 5;
      if (v27 >> 5 >= (unint64_t)(v26 + 31) >> 5)
        goto LABEL_32;
      v29 = *(_DWORD *)(v25 + 40 * v28 + 24) & ~*(_DWORD *)(v25 + 40 * v28 + 28);
      if (!v29 || (v33 = (v27 & 0x1F) + __clz(__rbit32(v29 >> (v27 & 0x1F))), v33 >= 0x20))
      {
        v30 = (unint64_t)(v26 + 31) >> 5;
        if (v28 + 1 == v30)
          goto LABEL_32;
        v31 = (_DWORD *)(v25 + 40 * v28++ + 68);
        while (1)
        {
          v32 = *(v31 - 1) & ~*v31;
          if (v32)
            break;
          v31 += 10;
          if (v30 == ++v28)
            goto LABEL_32;
        }
        LODWORD(v33) = __clz(__rbit32(v32));
      }
      LODWORD(v26) = v33 + 32 * v28;
LABEL_32:
      *(_DWORD *)(v22 + 68) = v26;
      if (*(unsigned int *)(v22 + 12) > (unint64_t)v26)
      {
        *(_DWORD *)(v25 + 40 * (v26 >> 5) + 28) |= 1 << v26;
        v36 = *(unsigned int *)(v22 + 68);
        if (*(_DWORD *)(v22 + 12) <= v36)
        {
          __break(0xC471u);
          JUMPOUT(0x1985DEB1CLL);
        }
        v34 = *(JSC::MarkedBlock::Handle **)(*(_QWORD *)v22 + 8 * v36);
      }
      else
      {
        v34 = 0;
      }
      v35 = __ldxr(v23);
      if (v35 == 1)
      {
        if (!__stlxr(0, v23))
          goto LABEL_36;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, a3, a4, a5, a6, a7, a8);
LABEL_36:
      if (v34)
      {
        ++*(_DWORD *)(a2 + 916);
        JSC::MarkedBlock::Handle::sweep(v34, 0, a3, a4, a5, a6, a7, a8);
        v43 = *(_QWORD *)(a1 + 40);
        v44 = (unsigned __int8 *)(v43 + 56);
        if (__ldaxr((unsigned __int8 *)(v43 + 56)))
        {
          __clrex();
          goto LABEL_45;
        }
        if (__stxr(1u, v44))
LABEL_45:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v43 + 56);
        v46 = *(_QWORD *)(v43 + 32) + 40 * (*((_DWORD *)v34 + 3) >> 5);
        v49 = *(_DWORD *)(v46 + 28);
        v47 = (int *)(v46 + 28);
        v48 = v49;
        v50 = 1 << *((_DWORD *)v34 + 3);
        if ((v49 & v50) != 0)
        {
          *v47 = v48 & ~v50;
          v51 = __ldxr(v44);
          if (v51 == 1)
          {
            if (!__stlxr(0, v44))
            {
LABEL_52:
              --*(_DWORD *)(a2 + 916);
              goto LABEL_53;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v43 + 56), 0, v37, v38, v39, v40, v41, v42);
          goto LABEL_52;
        }
        LODWORD(v120) = *((_DWORD *)v34 + 3);
        v113 = (WTF *)WTF::dataLogLn<char [44],unsigned int>("Finish using on a block that's not in use: ", &v120);
        v114 = (WTF::PrintStream *)WTF::dataFile(v113);
        JSC::BlockDirectory::dumpBits((JSC::BlockDirectory *)v43, v114);
        __break(0xC471u);
LABEL_146:
        JUMPOUT(0x1985DEA30);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
      *(_QWORD *)(a1 + 40) = v22;
      if (!v22)
        goto LABEL_59;
    }
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v22 + 56);
    goto LABEL_19;
  }
  v78 = (JSC::MarkedSpace *)(a2 + 352);
LABEL_80:
  if (*(_DWORD *)(a2 + 1096) != 4)
    JSC::Heap::stopIfNecessarySlow((JSC::Heap *)(a2 + 192), a2, a3, a4, a5, a6, a7, a8);
  v79 = *(_QWORD *)(a1 + 40);
  if (v79)
  {
    while (1)
    {
      v80 = (unsigned __int8 *)(v79 + 56);
      if (__ldaxr((unsigned __int8 *)(v79 + 56)))
        break;
      if (__stxr(1u, v80))
        goto LABEL_85;
LABEL_86:
      v82 = *(_QWORD *)(v79 + 32);
      v83 = *(unsigned int *)(v79 + 48);
      v84 = *(unsigned int *)(v79 + 68);
      v85 = v84 >> 5;
      if (v84 >> 5 >= (unint64_t)(v83 + 31) >> 5)
        goto LABEL_99;
      v86 = *(_DWORD *)(v82 + 40 * v85 + 24) & ~*(_DWORD *)(v82 + 40 * v85 + 28);
      if (!v86 || (v90 = (v84 & 0x1F) + __clz(__rbit32(v86 >> (v84 & 0x1F))), v90 >= 0x20))
      {
        v87 = (unint64_t)(v83 + 31) >> 5;
        if (v85 + 1 == v87)
          goto LABEL_99;
        v88 = (_DWORD *)(v82 + 40 * v85++ + 68);
        while (1)
        {
          v89 = *(v88 - 1) & ~*v88;
          if (v89)
            break;
          v88 += 10;
          if (v87 == ++v85)
            goto LABEL_99;
        }
        LODWORD(v90) = __clz(__rbit32(v89));
      }
      LODWORD(v83) = v90 + 32 * v85;
LABEL_99:
      *(_DWORD *)(v79 + 68) = v83;
      if (*(unsigned int *)(v79 + 12) > (unint64_t)v83)
      {
        *(_DWORD *)(v82 + 40 * (v83 >> 5) + 28) |= 1 << v83;
        v93 = *(unsigned int *)(v79 + 68);
        if (*(_DWORD *)(v79 + 12) <= v93)
        {
          __break(0xC471u);
          goto LABEL_146;
        }
        v91 = *(_QWORD *)(*(_QWORD *)v79 + 8 * v93);
      }
      else
      {
        v91 = 0;
      }
      v92 = __ldxr(v80);
      if (v92 == 1)
      {
        if (!__stlxr(0, v80))
          goto LABEL_103;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v80, 0, a3, a4, a5, a6, a7, a8);
LABEL_103:
      if (v91)
      {
        ++*(_DWORD *)(a2 + 916);
        JSC::MarkedBlock::Handle::sweep((JSC::MarkedBlock::Handle *)v91, 0, a3, a4, a5, a6, a7, a8);
        if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 24) + 32) + 40 * (*(_DWORD *)(v91 + 12) >> 5) + 4) >> *(_DWORD *)(v91 + 12)) & 1) != 0)
        {
          JSC::MarkedSpace::freeBlock(v78, (JSC::MarkedBlock::Handle *)v91, v95, v96, v97, v98, v99, v100);
          goto LABEL_112;
        }
        v104 = *(_QWORD *)(v91 + 64);
        if (!v104)
        {
          *(_QWORD *)(v91 + 48) = 0;
          *(_QWORD *)(v91 + 56) = 0;
          goto LABEL_119;
        }
        do
        {
          v111 = v104;
          v104 = *(_QWORD *)(v104 + 16);
          if (*(_BYTE *)(v111 + 24) && *(_QWORD *)(v111 + 32))
          {
            v107 = *(_QWORD *)(v111 + 8);
            if (v107)
            {
              *(_QWORD *)(v107 + 16) = v104;
              v108 = *(_QWORD *)(v111 + 16);
            }
            else
            {
              *(_QWORD *)(v91 + 64) = v104;
              v108 = v104;
            }
            if (v108)
              v109 = (_QWORD *)(v108 + 8);
            else
              v109 = (_QWORD *)(v91 + 72);
            *v109 = v107;
            v110 = *(_QWORD *)(v91 + 80);
            WTF::fastFree(v111, v94, v95, v96, v97, v98, v99, v100);
            *(_QWORD *)(v110 + 1072) -= 1024;
            v78 = (JSC::MarkedSpace *)(a2 + 352);
          }
        }
        while (v104);
        v112 = *(_QWORD *)(v91 + 64);
        *(_QWORD *)(v91 + 48) = 0;
        *(_QWORD *)(v91 + 56) = v112;
        if (!v112)
        {
LABEL_119:
          v105 = *(_QWORD **)(v91 + 40);
          if (v105)
          {
            v106 = *(_QWORD *)(v91 + 32);
            *v105 = v106;
            *(_QWORD *)(v106 + 8) = v105;
            *(_QWORD *)(v91 + 32) = 0;
            *(_QWORD *)(v91 + 40) = 0;
          }
        }
        JSC::BlockDirectory::didFinishUsingBlock(*(JSC::BlockDirectory **)(a1 + 40), (JSC::MarkedBlock::Handle *)v91, v95, v96, v97, v98, v99, v100);
LABEL_112:
        --*(_DWORD *)(a2 + 916);
LABEL_113:
        v101 = mach_absolute_time();
        v103 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v103 != -1)
        {
          v120 = &v116;
          v119 = &v120;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v102) = dword_1ECF4400C;
        if ((double)(v101 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v102 * 1000000000.0) >= a9)
        {
LABEL_136:
          if ((v11 & 1) != 0)
            *(_BYTE *)(a1 + 48) = 0;
          else
            JSC::JSRunLoopTimer::setTimeUntilFire(a1, 0.1);
          goto LABEL_74;
        }
        goto LABEL_80;
      }
      v79 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80);
      *(_QWORD *)(a1 + 40) = v79;
      if (!v79)
        goto LABEL_122;
    }
    __clrex();
LABEL_85:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v79 + 56);
    goto LABEL_86;
  }
LABEL_122:
  if (JSC::Heap::sweepNextLogicallyEmptyWeakBlock((JSC::Heap *)(a2 + 192), (void *)a2, a3, a4, a5, a6, a7, a8))goto LABEL_113;
LABEL_60:
  if (v11)
    *(_BYTE *)(a1 + 48) = 1;
  pas_thread_local_cache_flush_deallocation_log(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752), 0, v55, v56, v57, v58, v59, v60);
  if (*(_BYTE *)(a1 + 49))
  {
    WTF::releaseFastMallocFreeMemory(v61);
    *(_BYTE *)(a1 + 49) = 0;
  }
  v68 = (unsigned __int8 *)(a1 + 33);
  if (__ldaxr((unsigned __int8 *)(a1 + 33)))
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stxr(1u, v68))
LABEL_66:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 33);
  *(_BYTE *)(a1 + 34) = 0;
  v70 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v70 != -1)
  {
    v120 = &v116;
    v119 = &v120;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)a1, v62, v63, v64, v65, v66, v67);
  v77 = __ldxr(v68);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_73;
  }
  if (__stlxr(0, v68))
LABEL_73:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 33), 0, v71, v72, v73, v74, v75, v76);
LABEL_74:
  if (v118)
    kdebug_trace();
}

void JSC::IncrementalSweeper::doWork(JSC::IncrementalSweeper *this, JSC::VM *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint32x4_t v11;
  unint64_t v12;
  char v13;
  char **v14;
  char *v15;

  if (*((_BYTE *)this + 48))
  {
    *((_BYTE *)this + 48) = 0;
    JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)this, 0.1);
  }
  else
  {
    v9 = mach_absolute_time();
    v12 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v12 != -1)
    {
      v15 = &v13;
      v14 = &v15;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v10) = dword_1ECF4400C;
    v11.i64[0] = 0x41CDCD6500000000;
    JSC::IncrementalSweeper::doSweep((uint64_t)this, (uint64_t)a2, 0, v4, v5, v6, v7, v8, (double)(v9 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v10 * 1000000000.0) + 0.01, 0.01, v11);
  }
}

uint64_t std::optional<WTF::TraceScope>::emplace[abi:sn180100]<TracePointCode,TracePointCode,unsigned long,unsigned long,void>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_BYTE *)(a1 + 4))
  {
    kdebug_trace();
    *(_BYTE *)(a1 + 4) = 0;
  }
  *(_DWORD *)a1 = *a3;
  kdebug_trace();
  *(_BYTE *)(a1 + 4) = 1;
  return a1;
}

void JSC::IncrementalSweeper::startSweeping(JSC::IncrementalSweeper *this, JSC::Heap *a2)
{
  JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)this, 0.1);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 38);
}

void JSC::IncrementalSweeper::~IncrementalSweeper(JSC::IncrementalSweeper *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *,false>(__n128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __n128 *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __n128 *v86;
  __n128 *v87;
  __n128 *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  __n128 *v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  BOOL v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned __int32 v136;
  uint64_t v137;
  __n128 *v138;
  __n128 *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 16;
      if (*(_QWORD *)(a2 - 16) < *(_QWORD *)a1)
        goto LABEL_6;
      return result;
    case 3:
      v7 = (__int128 *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      v6 = a2 - 16;
      v9 = *(_QWORD *)(a2 - 16);
      if (v8 >= *(_QWORD *)a1)
      {
        if (v9 < v8)
        {
          v38 = (__n128)*v7;
          v22 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v7 = *(_QWORD *)v6;
          *(_DWORD *)(a1 + 24) = v22;
          *(_QWORD *)v6 = v38.n128_u64[0];
          *(_DWORD *)(a2 - 8) = v38.n128_u32[2];
          if (*(_QWORD *)(a1 + 16) < *(_QWORD *)a1)
          {
            v39 = *(__n128 *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v7;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            *(_QWORD *)v7 = v39.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v39.n128_u32[2];
          }
        }
      }
      else
      {
        if (v9 < v8)
        {
LABEL_6:
          v32 = *(__n128 *)a1;
          v10 = *(_DWORD *)(v6 + 8);
          *(_QWORD *)a1 = *(_QWORD *)v6;
          *(_DWORD *)(a1 + 8) = v10;
LABEL_7:
          *(_QWORD *)v6 = v32.n128_u64[0];
          *(_DWORD *)(v6 + 8) = v32.n128_u32[2];
          return result;
        }
        v42 = *(__n128 *)a1;
        *(_QWORD *)a1 = *(_QWORD *)v7;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
        *(_QWORD *)v7 = v42.n128_u64[0];
        *(_DWORD *)(a1 + 24) = v42.n128_u32[2];
        if (*(_QWORD *)v6 < *(_QWORD *)(a1 + 16))
        {
          v32 = (__n128)*v7;
          v23 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v7 = *(_QWORD *)v6;
          *(_DWORD *)(a1 + 24) = v23;
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>((__n128 *)a1, (__n128 *)(a1 + 16), (__int128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      v16 = (__int128 *)(a1 + 16);
      v17 = (__int128 *)(a1 + 32);
      v18 = (__int128 *)(a1 + 48);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>((__n128 *)a1, (__n128 *)(a1 + 16), (__int128 *)(a1 + 32), a1 + 48);
      v20 = *(_QWORD *)(a2 - 16);
      v19 = a2 - 16;
      if (v20 < *(_QWORD *)(a1 + 48))
      {
        v34 = *v18;
        v21 = *(_DWORD *)(v19 + 8);
        *(_QWORD *)v18 = *(_QWORD *)v19;
        *(_DWORD *)(a1 + 56) = v21;
        *(_QWORD *)v19 = v34;
        *(_DWORD *)(v19 + 8) = DWORD2(v34);
        if (*(_QWORD *)v18 < *(_QWORD *)v17)
        {
          v35 = *v17;
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 56);
          *(_QWORD *)v18 = v35;
          *(_DWORD *)(a1 + 56) = DWORD2(v35);
          if (*(_QWORD *)v17 < *(_QWORD *)v16)
          {
            v36 = *v16;
            *(_QWORD *)v16 = *(_QWORD *)v17;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)v17 = v36;
            *(_DWORD *)(a1 + 40) = DWORD2(v36);
            if (*(_QWORD *)(a1 + 16) < *(_QWORD *)a1)
            {
              v37 = *(__n128 *)a1;
              *(_QWORD *)a1 = *(_QWORD *)v16;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
              *(_QWORD *)v16 = v37.n128_u64[0];
              *(_DWORD *)(a1 + 24) = v37.n128_u32[2];
            }
          }
        }
      }
      return 1;
    default:
      v11 = (unint64_t *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = (__n128 *)(a1 + 16);
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_QWORD *)a1;
      if (v14 >= *(_QWORD *)a1)
      {
        if (v12 < v14)
        {
          v40 = *v13;
          v13->n128_u64[0] = *v11;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
          *v11 = v40.n128_u64[0];
          *(_DWORD *)(a1 + 40) = v40.n128_u32[2];
          if (v13->n128_u64[0] < v15)
          {
            v41 = *(__n128 *)a1;
            *(_QWORD *)a1 = v13->n128_u64[0];
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            v13->n128_u64[0] = v41.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v41.n128_u32[2];
          }
        }
      }
      else
      {
        if (v12 >= v14)
        {
          v43 = *(__n128 *)a1;
          *(_QWORD *)a1 = v13->n128_u64[0];
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
          v13->n128_u64[0] = v43.n128_u64[0];
          *(_DWORD *)(a1 + 24) = v43.n128_u32[2];
          if (v12 >= *(_QWORD *)(a1 + 16))
            goto LABEL_28;
          v33 = *v13;
          v13->n128_u64[0] = *v11;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v33 = *(__n128 *)a1;
          *(_QWORD *)a1 = *v11;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 40);
        }
        *v11 = v33.n128_u64[0];
        *(_DWORD *)(a1 + 40) = v33.n128_u32[2];
      }
LABEL_28:
      v24 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v25 = 0;
      v26 = 0;
      while (1)
      {
        v27 = *(_QWORD *)v24;
        if (*(_QWORD *)v24 < *v11)
        {
          v28 = *(_DWORD *)(v24 + 8);
          v29 = v25;
          while (1)
          {
            v30 = a1 + v29;
            *(_QWORD *)(v30 + 48) = *(_QWORD *)(a1 + v29 + 32);
            *(_DWORD *)(v30 + 56) = *(_DWORD *)(a1 + v29 + 40);
            if (v29 == -32)
              break;
            v29 -= 16;
            if (v27 >= *(_QWORD *)(v30 + 16))
            {
              v31 = a1 + v29 + 48;
              goto LABEL_36;
            }
          }
          v31 = a1;
LABEL_36:
          *(_QWORD *)v31 = v27;
          *(_DWORD *)(v31 + 8) = v28;
          if (++v26 == 8)
            return v24 + 16 == a2;
        }
        v11 = (unint64_t *)v24;
        v25 += 16;
        v24 += 16;
        if (v24 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshot::finalize(void)::$_0 &,JSC::HeapSnapshotNode *>(__n128 *a1, __n128 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  int v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;

  v4 = a2->n128_u64[0];
  v5 = *(_QWORD *)a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v5 < v4)
    {
      result = *a2;
      v16 = *a2;
      v8 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v8;
      *(_QWORD *)a3 = v16.n128_u64[0];
      *((_DWORD *)a3 + 2) = v16.n128_u32[2];
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        v17 = *a1;
        v9 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v9;
        a2->n128_u64[0] = v17.n128_u64[0];
        a2->n128_u32[2] = v17.n128_u32[2];
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      result = *a1;
      v15 = *a1;
      v7 = *((_DWORD *)a3 + 2);
      a1->n128_u64[0] = *(_QWORD *)a3;
      a1->n128_u32[2] = v7;
LABEL_9:
      *(_QWORD *)a3 = v15.n128_u64[0];
      *((_DWORD *)a3 + 2) = v15.n128_u32[2];
      goto LABEL_10;
    }
    result = *a1;
    v18 = *a1;
    v10 = a2->n128_u32[2];
    a1->n128_u64[0] = a2->n128_u64[0];
    a1->n128_u32[2] = v10;
    a2->n128_u64[0] = v18.n128_u64[0];
    a2->n128_u32[2] = v18.n128_u32[2];
    if (*(_QWORD *)a3 < a2->n128_u64[0])
    {
      result = *a2;
      v15 = *a2;
      v11 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    result = (__n128)*a3;
    v19 = *a3;
    v12 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v12;
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = DWORD2(v19);
    if (*(_QWORD *)a3 < a2->n128_u64[0])
    {
      result = *a2;
      v20 = *a2;
      v13 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v13;
      *(_QWORD *)a3 = v20.n128_u64[0];
      *((_DWORD *)a3 + 2) = v20.n128_u32[2];
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        v21 = *a1;
        v14 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v14;
        a2->n128_u64[0] = v21.n128_u64[0];
        a2->n128_u32[2] = v21.n128_u32[2];
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v25 + 4);
          if (v28 < 0x100)
            v29 = WTF::StringImpl::hashSlowCase(v25);
          else
            v29 = v28 >> 8;
          v30 = 0;
          do
          {
            v31 = v29 & v27;
            v29 = ++v30 + v31;
          }
          while (*(_QWORD *)(v26 + 16 * v31));
          v32 = v26 + 16 * v31;
          *(_QWORD *)v32 = 0;
          v33 = *v24;
          *v24 = 0;
          *(_QWORD *)v32 = v33;
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v11 + 16 * v22 + 8);
          v34 = *v24;
          *v24 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
        }
        else
        {
          *v24 = 0;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *,false>(uint64_t a1, unsigned int *a2, uint64_t a3, char a4, __n128 a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  unsigned int *v45;
  _OWORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  __int128 v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  __int128 v73;
  BOOL v74;
  __n128 v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  __int128 v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  _OWORD *v92;
  _OWORD *v93;
  _OWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  BOOL v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  BOOL v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  __int128 v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  __int128 v148;
  _BYTE v149[28];
  _BYTE v150[28];
  _BYTE v151[28];
  _BYTE v152[32];
  _BYTE v153[32];
  _BYTE v154[32];
  _BYTE v155[32];
  _BYTE v156[32];
  _BYTE v157[32];
  _BYTE v158[32];
  _BYTE v159[32];
  _BYTE v160[32];
  _BYTE v161[32];
  _BYTE v162[32];
  _BYTE v163[32];
  _BYTE v164[32];
  _BYTE v165[32];
  _BYTE v166[32];
  _BYTE v167[32];
  _BYTE v168[32];
  _BYTE v169[32];
  _BYTE v170[32];
  _BYTE v171[32];
  _BYTE v172[32];
  _BYTE v173[32];
  _BYTE v174[32];
  _BYTE v175[32];
  _BYTE v176[32];
  _BYTE v177[32];
  _BYTE v178[32];
  _BYTE v179[32];
  _BYTE v180[28];
  _BYTE v181[28];
  _BYTE v182[32];
  _BYTE v183[32];
  _BYTE v184[32];
  _BYTE v185[28];
  _BYTE v186[32];

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>(uint64_t a1, _OWORD *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  _OWORD *v7;
  _OWORD *v8;
  unsigned int v9;
  _OWORD *v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  _OWORD *v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[28];
  _BYTE v56[32];

  v5 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 2;
      if (*((_DWORD *)a2 - 8) < *(_DWORD *)a1)
        goto LABEL_9;
      return result;
    case 3:
      v14 = (_OWORD *)(a1 + 32);
      v15 = *(_DWORD *)(a1 + 32);
      v7 = a2 - 2;
      v16 = *((_DWORD *)a2 - 8);
      if (v15 >= *(_DWORD *)a1)
      {
        if (v16 < v15)
        {
          *(_OWORD *)v52 = *v14;
          v31 = *v14;
          *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 48);
          v32 = *(_OWORD *)((char *)a2 - 23);
          *v14 = *v7;
          *(_OWORD *)(a1 + 41) = v32;
          *v7 = v31;
          *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v52[9];
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)a1)
          {
            *(_OWORD *)v53 = *(_OWORD *)a1;
            v33 = *(_OWORD *)a1;
            *(_OWORD *)&v53[16] = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
            *v14 = v33;
            *(_OWORD *)(a1 + 41) = *(_OWORD *)&v53[9];
          }
        }
      }
      else
      {
        if (v16 < v15)
        {
LABEL_9:
          v17 = *(_OWORD *)a1;
          *(_OWORD *)v45 = *(_OWORD *)a1;
          *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 16);
          v18 = *(_OWORD *)((char *)v7 + 9);
          *(_OWORD *)a1 = *v7;
          *(_OWORD *)(a1 + 9) = v18;
LABEL_10:
          *v7 = v17;
          *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)&v45[9];
          return result;
        }
        *(_OWORD *)v56 = *(_OWORD *)a1;
        v42 = *(_OWORD *)a1;
        *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
        *v14 = v42;
        *(_OWORD *)(a1 + 41) = *(_OWORD *)&v56[9];
        if (*(_DWORD *)v7 < *(_DWORD *)(a1 + 32))
        {
          v17 = *v14;
          *(_OWORD *)v45 = *v14;
          *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 48);
          v43 = *(_OWORD *)((char *)a2 - 23);
          *v14 = *v7;
          *(_OWORD *)(a1 + 41) = v43;
          goto LABEL_10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>((_OWORD *)a1, (int *)(a1 + 32), (int *)(a1 + 64), a2 - 2, a3);
      return 1;
    case 5:
      v19 = (_OWORD *)(a1 + 32);
      v20 = (_OWORD *)(a1 + 64);
      v21 = (_OWORD *)(a1 + 96);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>((_OWORD *)a1, (int *)(a1 + 32), (int *)(a1 + 64), (_OWORD *)(a1 + 96), a3);
      v23 = *((_DWORD *)a2 - 8);
      v22 = a2 - 2;
      if (v23 < *(_DWORD *)(a1 + 96))
      {
        *(_OWORD *)v46 = *v21;
        v24 = *v21;
        *(_OWORD *)&v46[16] = *(_OWORD *)(a1 + 112);
        v25 = *(_OWORD *)((char *)v22 + 9);
        *v21 = *v22;
        *(_OWORD *)(a1 + 105) = v25;
        *v22 = v24;
        *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)&v46[9];
        if (*(_DWORD *)v21 < *(_DWORD *)v20)
        {
          *(_OWORD *)v47 = *v20;
          v26 = *v20;
          *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
          *v20 = *v21;
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a1 + 105);
          *v21 = v26;
          *(_OWORD *)(a1 + 105) = *(_OWORD *)&v47[9];
          if (*(_DWORD *)v20 < *(_DWORD *)v19)
          {
            *(_OWORD *)v48 = *v19;
            v27 = *v19;
            *(_OWORD *)&v48[16] = *(_OWORD *)(a1 + 48);
            *v19 = *v20;
            *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
            *v20 = v27;
            *(_OWORD *)(a1 + 73) = *(_OWORD *)&v48[9];
            if (*(_DWORD *)(a1 + 32) < *(_DWORD *)a1)
            {
              *(_OWORD *)v49 = *(_OWORD *)a1;
              v28 = *(_OWORD *)a1;
              *(_OWORD *)&v49[16] = *(_OWORD *)(a1 + 16);
              *(_OWORD *)a1 = *v19;
              *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
              *v19 = v28;
              *(_OWORD *)(a1 + 41) = *(_OWORD *)&v49[9];
            }
          }
        }
      }
      return 1;
    default:
      v8 = (_OWORD *)(a1 + 64);
      v9 = *(_DWORD *)(a1 + 64);
      v10 = (_OWORD *)(a1 + 32);
      v11 = *(_DWORD *)(a1 + 32);
      v12 = *(_DWORD *)a1;
      if (v11 >= *(_DWORD *)a1)
      {
        if (v9 < v11)
        {
          *(_OWORD *)v50 = *v10;
          v29 = *v10;
          *(_OWORD *)&v50[16] = *(_OWORD *)(a1 + 48);
          *v10 = *v8;
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
          *v8 = v29;
          *(_OWORD *)(a1 + 73) = *(_OWORD *)&v50[9];
          if (*(_DWORD *)v10 < v12)
          {
            *(_OWORD *)v51 = *(_OWORD *)a1;
            v30 = *(_OWORD *)a1;
            *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
            *v10 = v30;
            *(_OWORD *)(a1 + 41) = *(_OWORD *)&v51[9];
          }
        }
      }
      else
      {
        if (v9 >= v11)
        {
          *(_OWORD *)v54 = *(_OWORD *)a1;
          v34 = *(_OWORD *)a1;
          *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v10;
          *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
          *v10 = v34;
          *(_OWORD *)(a1 + 41) = *(_OWORD *)&v54[9];
          if (v9 >= *(_DWORD *)(a1 + 32))
            goto LABEL_26;
          v13 = *v10;
          *(_OWORD *)v44 = *v10;
          *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 48);
          *v10 = *v8;
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
        }
        else
        {
          v13 = *(_OWORD *)a1;
          *(_OWORD *)v44 = *(_OWORD *)a1;
          *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v8;
          *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 73);
        }
        *v8 = v13;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)&v44[9];
      }
LABEL_26:
      v35 = (_OWORD *)(a1 + 96);
      if ((_OWORD *)(a1 + 96) == a2)
        return 1;
      v36 = 0;
      v37 = 0;
      while (1)
      {
        v38 = *(_DWORD *)v35;
        if (*(_DWORD *)v35 < *(_DWORD *)v8)
        {
          *(_OWORD *)v55 = *(_OWORD *)((char *)v35 + 4);
          *(_OWORD *)&v55[12] = v35[1];
          v39 = v36;
          while (1)
          {
            v40 = a1 + v39;
            *(_OWORD *)(v40 + 96) = *(_OWORD *)(a1 + v39 + 64);
            *(_OWORD *)(v40 + 105) = *(_OWORD *)(a1 + v39 + 73);
            if (v39 == -64)
              break;
            v39 -= 32;
            if (v38 >= *(_DWORD *)(v40 + 32))
            {
              v41 = a1 + v39 + 96;
              goto LABEL_34;
            }
          }
          v41 = a1;
LABEL_34:
          *(_DWORD *)v41 = v38;
          *(_OWORD *)(v41 + 4) = *(_OWORD *)v55;
          *(_QWORD *)(v41 + 17) = *(_QWORD *)&v55[13];
          if (++v37 == 8)
            return v35 + 2 == a2;
        }
        v8 = v35;
        v36 += 32;
        v35 += 2;
        if (v35 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::HeapSnapshotBuilder::json(WTF::Function<BOOL ()(JSC::HeapSnapshotNode const&)>)::$_0 &,JSC::HeapSnapshotEdge *>(_OWORD *a1, int *a2, int *a3, _OWORD *a4, __n128 result)
{
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[32];
  _BYTE v28[32];

  v5 = *a2;
  v6 = *a3;
  if (*a2 >= *(_DWORD *)a1)
  {
    if (v6 < v5)
    {
      *(_OWORD *)v23 = *(_OWORD *)a2;
      v9 = *(_OWORD *)a2;
      *(_OWORD *)&v23[16] = *((_OWORD *)a2 + 1);
      v10 = *(_OWORD *)((char *)a3 + 9);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a2 + 9) = v10;
      *(_OWORD *)a3 = v9;
      result = *(__n128 *)&v23[9];
      *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)&v23[9];
      if (*a2 < *(_DWORD *)a1)
      {
        *(_OWORD *)v24 = *a1;
        v11 = *a1;
        *(_OWORD *)&v24[16] = a1[1];
        v12 = *(_OWORD *)((char *)a2 + 9);
        *a1 = *(_OWORD *)a2;
        *(_OWORD *)((char *)a1 + 9) = v12;
        *(_OWORD *)a2 = v11;
        result = *(__n128 *)&v24[9];
        *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v24[9];
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *a1;
      *(_OWORD *)v22 = *a1;
      *(_OWORD *)&v22[16] = a1[1];
      v8 = *(_OWORD *)((char *)a3 + 9);
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a1 + 9) = v8;
LABEL_9:
      *(_OWORD *)a3 = v7;
      result = *(__n128 *)&v22[9];
      *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)&v22[9];
      goto LABEL_10;
    }
    *(_OWORD *)v25 = *a1;
    v13 = *a1;
    *(_OWORD *)&v25[16] = a1[1];
    v14 = *(_OWORD *)((char *)a2 + 9);
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 9) = v14;
    *(_OWORD *)a2 = v13;
    result = *(__n128 *)&v25[9];
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v25[9];
    if (*a3 < *a2)
    {
      v7 = *(_OWORD *)a2;
      *(_OWORD *)v22 = *(_OWORD *)a2;
      *(_OWORD *)&v22[16] = *((_OWORD *)a2 + 1);
      v15 = *(_OWORD *)((char *)a3 + 9);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a2 + 9) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *a3)
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v16 = *(_OWORD *)a3;
    *(_OWORD *)&v26[16] = *((_OWORD *)a3 + 1);
    v17 = *(_OWORD *)((char *)a4 + 9);
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)((char *)a3 + 9) = v17;
    *a4 = v16;
    result = *(__n128 *)&v26[9];
    *(_OWORD *)((char *)a4 + 9) = *(_OWORD *)&v26[9];
    if (*a3 < *a2)
    {
      *(_OWORD *)v27 = *(_OWORD *)a2;
      v18 = *(_OWORD *)a2;
      *(_OWORD *)&v27[16] = *((_OWORD *)a2 + 1);
      v19 = *(_OWORD *)((char *)a3 + 9);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)((char *)a2 + 9) = v19;
      *(_OWORD *)a3 = v18;
      result = *(__n128 *)&v27[9];
      *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)&v27[9];
      if (*a2 < *(_DWORD *)a1)
      {
        *(_OWORD *)v28 = *a1;
        v20 = *a1;
        *(_OWORD *)&v28[16] = a1[1];
        v21 = *(_OWORD *)((char *)a2 + 9);
        *a1 = *(_OWORD *)a2;
        *(_OWORD *)((char *)a1 + 9) = v21;
        *(_OWORD *)a2 = v20;
        result = *(__n128 *)&v28[9];
        *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v28[9];
      }
    }
  }
  return result;
}

_OWORD *WTF::HashMap<WTF::UniquedStringImpl *,unsigned int,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v12 - 4);
        v32 = 0;
        v31 = v12 + 16 * v33;
        goto LABEL_26;
      }
      if (v21 == -1)
        v22 = (_QWORD *)v20;
      v19 = (v19 + v23) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v23;
    }
    while (*(_QWORD *)v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v22;
    }
  }
  *(_QWORD *)v20 = v15;
  *(_DWORD *)(v20 + 8) = *a4;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_29;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
      goto LABEL_20;
    }
LABEL_29:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
LABEL_20:
    result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, v30, v20, (uint64_t)a4, a5, a6, a7, a8);
    v20 = (uint64_t)result;
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
  }
  v31 = v26 + 16 * v29;
  v32 = 1;
LABEL_26:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v31;
  *((_BYTE *)v11 + 16) = v32;
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned char,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, unsigned int *a2, char *a3, unsigned int *a4, char *a5, unsigned __int8 *a6, char *a7, uint64_t a8)
{
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *result;
  uint64_t v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  unsigned __int8 v36;
  __int16 v37;
  unsigned int v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  _WORD *v42;
  unsigned int v43;
  _WORD *v44;
  int v45;
  uint64_t v46;
  _WORD *v47;
  unsigned __int8 v48;
  unsigned int v49;
  _WORD *v50;
  int v51;
  unsigned int v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  char v58;
  unsigned __int8 v59;
  char v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  _BYTE *v64;
  unsigned int v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  unsigned __int8 v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE v75[13];
  uint64_t v76;

  v14 = 0;
  v76 = *MEMORY[0x1E0C80C00];
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *a2;
  do
  {
    ++v14;
    v17 = v16 > 9;
    v16 /= 0xAu;
  }
  while (v17);
  v18 = 0;
  v19 = *a4;
  do
  {
    ++v18;
    v17 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v17);
  v20 = *a6;
  v21 = 2;
  do
  {
    ++v21;
    v17 = v20 > 9;
    v20 /= 0xAu;
  }
  while (v17);
  if (v21 - 1 < (v21 - 2) || !v21)
    v21 = -1;
  v22 = __CFADD__(v21, v18);
  v23 = v21 + v18;
  v24 = v22;
  v22 = __CFADD__(v23, 1);
  v25 = v23 + 1;
  v26 = v22;
  if ((v24 & 1) != 0 || v26)
    v25 = -1;
  v22 = __CFADD__(v25, v14);
  v27 = v25 + v14;
  if (v22)
    v27 = -1;
  v28 = (v27 + v15);
  if (__CFADD__(v27, v15))
    v28 = 0xFFFFFFFFLL;
  v29 = *(_QWORD *)(a1 + 8);
  if ((v29 || (v29 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v29 + 16) & 4) == 0)
  {
    result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v28, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (result)
    {
      v31 = 0;
      v32 = *a2;
      v33 = *a3;
      v34 = *a4;
      v35 = *a5;
      v36 = *a6;
      v37 = *a7;
      v38 = *a2;
      do
      {
        v75[v31-- + 12] = (v38 % 0xA) | 0x30;
        v17 = v38 > 9;
        v38 /= 0xAu;
      }
      while (v17);
      if (v31 + 14 <= 13)
      {
        v39 = result;
        do
        {
          *v39++ = *((unsigned __int8 *)&v76 + v31);
          v22 = __CFADD__(v31++, 1);
        }
        while (!v22);
      }
      v40 = 0;
      do
      {
        ++v40;
        v17 = v32 > 9;
        v32 /= 0xAu;
      }
      while (v17);
      v41 = 0;
      v42 = &result[2 * v40];
      *v42 = v33;
      v43 = v34;
      do
      {
        v75[v41-- + 12] = (v43 % 0xA) | 0x30;
        v17 = v43 > 9;
        v43 /= 0xAu;
      }
      while (v17);
      if (v41 + 14 <= 13)
      {
        v44 = v42 + 1;
        do
        {
          *v44++ = *((unsigned __int8 *)&v76 + v41);
          v22 = __CFADD__(v41++, 1);
        }
        while (!v22);
      }
      v45 = 0;
      do
      {
        ++v45;
        v17 = v34 > 9;
        v34 /= 0xAu;
      }
      while (v17);
      v46 = 0;
      v47 = &v42[v45 + 1];
      *v47 = v35;
      v48 = v36;
      do
      {
        v49 = v48;
        result = &v75[v46];
        v75[v46-- + 3] = (v48 % 0xAu) | 0x30;
        v48 /= 0xAu;
      }
      while (v49 > 9);
      if (v46 + 5 <= 4)
      {
        v50 = v47 + 1;
        do
        {
          *v50++ = v75[v46 + 4];
          v22 = __CFADD__(v46++, 1);
        }
        while (!v22);
      }
      v51 = 0;
      do
      {
        ++v51;
        v52 = v36;
        v36 /= 0xAu;
      }
      while (v52 > 9);
      v47[v51 + 1] = v37;
    }
  }
  else
  {
    result = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v28, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (result)
    {
      v53 = result;
      v54 = 0;
      v55 = *a2;
      v56 = *a3;
      v57 = *a4;
      v58 = *a5;
      v59 = *a6;
      v60 = *a7;
      v61 = v55;
      do
      {
        v75[v54-- + 12] = (v61 % 0xA) | 0x30;
        v17 = v61 > 9;
        v61 /= 0xAu;
      }
      while (v17);
      if (v54 + 14 <= 13)
        result = memcpy(result, &v75[v54 + 13], -v54);
      v62 = 0;
      do
      {
        ++v62;
        v17 = v55 > 9;
        v55 /= 0xAu;
      }
      while (v17);
      v63 = 0;
      v64 = &v53[v62];
      *v64 = v56;
      v65 = v57;
      do
      {
        v75[v63-- + 12] = (v65 % 0xA) | 0x30;
        v17 = v65 > 9;
        v65 /= 0xAu;
      }
      while (v17);
      v66 = v64 + 1;
      if (v63 + 14 <= 13)
        result = memcpy(v66, &v75[v63 + 13], -v63);
      v67 = 0;
      do
      {
        ++v67;
        v17 = v57 > 9;
        v57 /= 0xAu;
      }
      while (v17);
      v68 = 0;
      v69 = &v66[v67];
      *v69 = v58;
      v70 = v59;
      do
      {
        v71 = v70;
        v75[v68-- + 3] = (v70 % 0xAu) | 0x30;
        v70 /= 0xAu;
      }
      while (v71 > 9);
      v72 = v69 + 1;
      if (v68 + 5 <= 4)
        result = memcpy(v72, &v75[v68 + 4], -v68);
      v73 = 0;
      do
      {
        ++v73;
        v74 = v59;
        v59 /= 0xAu;
      }
      while (v74 > 9);
      *((_BYTE *)v72 + v73) = v60;
    }
  }
  return result;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  WTF *v43;
  const char *v44;
  const char *v45;
  char v46;
  WTF::PrintStream *v47;
  WTF *v48;
  const char *v49;
  const char *v50;
  WTF *v51;
  const char *v52;
  const char *v53;
  WTF::PrintStream *v54;
  WTF *v55;
  const char *v56;
  const char *v57;
  char v58;
  char **v59;
  char *v60;

  v9 = *a1;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v19 = 1024 - v9;
    v20 = a1[1];
    if (1024 - v9 >= v20)
    {
      do
      {
        v21 = (_DWORD *)(v11 + 16 * v19);
        if (*v21)
        {
          (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v21 & 0xFFFFFFFE) + 0x4C) + 0x30))(v11 + 16 * v19);
          *v21 = 0;
          v21[2] = 1;
          v9 = *a1;
          v20 = a1[1];
        }
        v19 -= v9;
      }
      while (v19 >= v20);
      v10 = *((_QWORD *)a1 + 10);
    }
    if (*(_BYTE *)(v10 + 445))
    {
      v22 = (unsigned int *)(v11 + 24);
      while (1)
      {
        v23 = *v22;
        if ((*v22 & 3) != 1)
          break;
        v24 = __ldxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 & 0xFFFFFFFE, v22))
            goto LABEL_54;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_54:
    v33 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, v33))
    {
      goto LABEL_58;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_58:
    v35 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v36 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v36 + 24) &= ~(1 << a1[3]);
    v37 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v37 + 16) &= ~(1 << a1[3]);
    v38 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v38 + 4) &= ~(1 << a1[3]);
    v39 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v39 + 4) |= 1 << a1[3];
    LODWORD(v39) = __ldxr(v33);
    if ((_DWORD)v39 == 1)
    {
      if (!__stlxr(0, v33))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v11 + 40)
    || *(_QWORD *)(v11 + 48)
    || *(_QWORD *)(v11 + 56)
    || *(_QWORD *)(v11 + 64)
    || *(_QWORD *)(v11 + 72)
    || *(_QWORD *)(v11 + 80)
    || *(_QWORD *)(v11 + 88)
    || *(_QWORD *)(v11 + 96)
    || *(_QWORD *)(v11 + 104)
    || *(_QWORD *)(v11 + 112)
    || *(_QWORD *)(v11 + 120)
    || *(_QWORD *)(v11 + 128)
    || *(_QWORD *)(v11 + 136)
    || *(_QWORD *)(v11 + 144)
    || *(_QWORD *)(v11 + 152)
    || *(_QWORD *)(v11 + 160))
  {
    v41 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v41 != -1)
    {
      v60 = &v58;
      v59 = &v60;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v43 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v43, (WTF::PrintStream *)"Block ", v44);
    WTF::printInternal(v43, (const void *)v11);
    WTF::printInternal(v43, (WTF::PrintStream *)": marks not empty!\n", v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v46 = atomic_load((unsigned int *)(v11 + 24));
    v47 = (WTF::PrintStream *)(v46 & 1);
    v48 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v48, (WTF::PrintStream *)"Block lock is held: ", v49);
    WTF::printInternal(v48, v47);
    WTF::printInternal(v48, (WTF::PrintStream *)"\n", v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v51 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v51, (WTF::PrintStream *)"Marking version of block: ", v52);
    WTF::printInternal(v51, (WTF::PrintStream *)*(unsigned int *)(v11 + 32));
    WTF::printInternal(v51, (WTF::PrintStream *)"\n", v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v55 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v55, (WTF::PrintStream *)"Marking version of heap: ", v56);
    WTF::printInternal(v55, v54);
    WTF::printInternal(v55, (WTF::PrintStream *)"\n", v57);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x1985E2568);
  }
  v14 = (16 * v9);
  v15 = a1[1];
  v16 = (_DWORD *)(v11 + 16 * v15);
  if ((unint64_t)(16 * v15 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  v17 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_35;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_35:
  v25 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v26 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v26 + 24) &= ~(1 << a1[3]);
  v27 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v27 + 16) &= ~(1 << a1[3]);
  v28 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 4) &= ~(1 << a1[3]);
  v29 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 4) |= 1 << a1[3];
  LODWORD(v29) = __ldxr(v17);
  if ((_DWORD)v29 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
LABEL_40:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v30 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v31 = *v30;
      if ((*v30 & 3) != 1)
        break;
      v32 = __ldxr(v30);
      if (v32 == v31)
      {
        if (!__stxr(v31 & 0xFFFFFFFE, v30))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v30, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_48:
  if (v15 <= 0x3FF)
  {
    do
    {
      if (*v16)
      {
        (*(void (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*v16 & 0xFFFFFFFE) + 0x4C) + 0x30))(v16);
        *v16 = 0;
        v16[2] = 1;
      }
      v16 = (_DWORD *)((char *)v16 + v14);
    }
    while ((unint64_t)v16 < v11 + 0x4000);
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  signed int v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  WTF *v57;
  const char *v58;
  const char *v59;
  char v60;
  WTF::PrintStream *v61;
  WTF *v62;
  const char *v63;
  const char *v64;
  WTF *v65;
  const char *v66;
  const char *v67;
  WTF::PrintStream *v68;
  WTF *v69;
  const char *v70;
  const char *v71;
  char v73;
  char **v74;
  char *v75;

  v8 = a2;
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = v15;
  v16 = v15 + v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v24 = 1024 - v10;
    if (1024 - (int)v10 >= (int)a1[1])
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      v36 = 0;
      do
      {
        v25 = (_DWORD *)(v12 + 16 * v24);
        if (*v25)
        {
          (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v25 & 0xFFFFFFFE) + 0x4C) + 0x30))(v12 + 16 * v24);
          *v25 = 0;
          v25[2] = 1;
          v10 = *a1;
        }
        v37 = v24;
        if (v24 + (unint64_t)v10 >= v36)
        {
          v40 = v10;
        }
        else
        {
          v38 = v12 + 16 * v36;
          v39 = (v34 << 36) | 1;
          if (v35)
            v39 = ((int)v35 - (int)v38) | (unint64_t)(v34 << 36);
          *(_QWORD *)(v38 + 8) = v39 ^ v16;
          v26 += 16 * v34;
          v40 = *a1;
          v35 = (_DWORD *)(v12 + 16 * v36);
          v34 = 0;
        }
        v34 += v10;
        v24 -= v40;
        v10 = v40;
        v36 = v37;
      }
      while (v24 >= (int)a1[1]);
      if (v34)
      {
        v41 = (v34 << 36) | 1;
        if (v35)
          v41 = ((int)v35 - (int)v25) | (unint64_t)(v34 << 36);
        *((_QWORD *)v25 + 1) = v41 ^ v16;
        v26 += 16 * v34;
      }
      else
      {
        v25 = v35;
      }
      v8 = a2;
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
    {
      v42 = (unsigned int *)(v12 + 24);
      while (1)
      {
        v43 = *v42;
        if ((*v42 & 3) != 1)
          break;
        v44 = __ldxr(v42);
        if (v44 == v43)
        {
          if (!__stxr(v43 & 0xFFFFFFFE, v42))
            goto LABEL_68;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_68:
    if (v25)
    {
      v46 = *((_QWORD *)v25 + 1) ^ v16;
      *(_QWORD *)v8 = v25;
      *(_QWORD *)(v8 + 8) = (char *)v25 + HIDWORD(v46);
      v47 = (uint64_t)v25 + (int)v46;
    }
    else
    {
      v16 = 0;
      v26 = 0;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v47 = 1;
    }
    *(_QWORD *)(v8 + 16) = v47;
    *(_QWORD *)(v8 + 24) = v16;
    *(_DWORD *)(v8 + 32) = v26;
    v48 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, v48))
    {
      goto LABEL_74;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v48);
LABEL_74:
    v50 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v51 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v51 + 24) &= ~(1 << a1[3]);
    v52 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v52 + 16) &= ~(1 << a1[3]);
    v53 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v53 + 4) &= ~(1 << a1[3]);
    *((_BYTE *)a1 + 10) = 1;
    LODWORD(v53) = __ldxr(v48);
    if ((_DWORD)v53 == 1)
    {
      if (!__stlxr(0, v48))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v12 + 40)
    || *(_QWORD *)(v12 + 48)
    || *(_QWORD *)(v12 + 56)
    || *(_QWORD *)(v12 + 64)
    || *(_QWORD *)(v12 + 72)
    || *(_QWORD *)(v12 + 80)
    || *(_QWORD *)(v12 + 88)
    || *(_QWORD *)(v12 + 96)
    || *(_QWORD *)(v12 + 104)
    || *(_QWORD *)(v12 + 112)
    || *(_QWORD *)(v12 + 120)
    || *(_QWORD *)(v12 + 128)
    || *(_QWORD *)(v12 + 136)
    || *(_QWORD *)(v12 + 144)
    || *(_QWORD *)(v12 + 152)
    || *(_QWORD *)(v12 + 160))
  {
    v55 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v55 != -1)
    {
      v75 = &v73;
      v74 = &v75;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v74, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v57 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v57, (WTF::PrintStream *)"Block ", v58);
    WTF::printInternal(v57, (const void *)v12);
    WTF::printInternal(v57, (WTF::PrintStream *)": marks not empty!\n", v59);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v60 = atomic_load((unsigned int *)(v12 + 24));
    v61 = (WTF::PrintStream *)(v60 & 1);
    v62 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v62, (WTF::PrintStream *)"Block lock is held: ", v63);
    WTF::printInternal(v62, v61);
    WTF::printInternal(v62, (WTF::PrintStream *)"\n", v64);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v65 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v65, (WTF::PrintStream *)"Marking version of block: ", v66);
    WTF::printInternal(v65, (WTF::PrintStream *)*(unsigned int *)(v12 + 32));
    WTF::printInternal(v65, (WTF::PrintStream *)"\n", v67);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v68 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v69 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v69, (WTF::PrintStream *)"Marking version of heap: ", v70);
    WTF::printInternal(v69, v68);
    WTF::printInternal(v69, (WTF::PrintStream *)"\n", v71);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x1985E2C3CLL);
  }
  v17 = (16 * v10);
  v18 = v12 + 0x4000;
  v19 = a1[1];
  v20 = v12 + 16 * v19;
  v21 = 0x4000 - 16 * v19;
  if (v21 >= 0x3ED1)
  {
    __break(0xC471u);
    goto LABEL_84;
  }
  v22 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
LABEL_25:
  v27 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v28 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 24) &= ~(1 << a1[3]);
  v29 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 16) &= ~(1 << a1[3]);
  v30 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v30 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v30) = __ldxr(v22);
  if ((_DWORD)v30 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v31 = (unsigned int *)(v12 + 24);
    while (1)
    {
      v32 = *v31;
      if ((*v31 & 3) != 1)
        break;
      v33 = __ldxr(v31);
      if (v33 == v32)
      {
        if (!__stxr(v32 & 0xFFFFFFFE, v31))
          goto LABEL_60;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_60:
  if (v19 <= 0x3FF)
  {
    v45 = (_DWORD *)(v12 + 16 * v19);
    do
    {
      if (*v45)
      {
        (*(void (**)(_DWORD *))(16 * *(unsigned int *)(16 * (*v45 & 0xFFFFFFFE) + 0x4C) + 0x30))(v45);
        *v45 = 0;
        v45[2] = 1;
      }
      v45 = (_DWORD *)((char *)v45 + v17);
    }
    while ((unint64_t)v45 < v18);
  }
  *(_QWORD *)(v20 + 8) = ((v21 << 32) | 1) ^ v16;
  *(_QWORD *)v8 = v20;
  *(_QWORD *)(v8 + 8) = v20 + v21;
  *(_QWORD *)(v8 + 16) = v20 + 1;
  *(_QWORD *)(v8 + 24) = v16;
  *(_DWORD *)(v8 + 32) = v21;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 11);
  v11 = *(_QWORD *)(v9 + 168);
  v12 = *(_QWORD *)(v9 + 160) ^ (*(_QWORD *)(v9 + 160) << 23);
  *(_QWORD *)(v9 + 160) = v11;
  *(_QWORD *)(v9 + 168) = (v11 >> 26) ^ (v12 >> 17) ^ v11 ^ v12;
  v13 = *a1;
  v14 = a1[1];
  v15 = 1024 - *a1;
  if (v15 >= v14)
  {
    do
    {
      v16 = (_DWORD *)(v10 + 16 * v15);
      if (*v16)
      {
        (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v16 & 0xFFFFFFFE) + 0x4C) + 0x30))(v10 + 16 * v15);
        *v16 = 0;
        v16[2] = 1;
        v13 = *a1;
        v14 = a1[1];
      }
      v15 -= v13;
    }
    while (v15 >= v14);
    v9 = *((_QWORD *)a1 + 10);
  }
  if (*(_BYTE *)(v9 + 445))
  {
    v17 = (unsigned int *)(v10 + 24);
    while (1)
    {
      v18 = *v17;
      if ((*v17 & 3) != 1)
        break;
      v19 = __ldxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 & 0xFFFFFFFE, v17))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_14:
  v20 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, v20))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
LABEL_18:
  v22 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v23 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v23 + 24) &= ~(1 << a1[3]);
  v24 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v24 + 16) &= ~(1 << a1[3]);
  v25 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v25 + 4) &= ~(1 << a1[3]);
  v26 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v26 + 4) |= 1 << a1[3];
  LODWORD(v26) = __ldxr(v20);
  if ((_DWORD)v26 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v20))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v20, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  signed int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = a2;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  v14 = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = v14;
  v15 = v14 + v12;
  v16 = *a1;
  v17 = 1024 - v16;
  if (1024 - (int)v16 >= (int)a1[1])
  {
    v20 = 0;
    v19 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v18 = (_DWORD *)(v11 + 16 * v17);
      if (*v18)
      {
        (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v18 & 0xFFFFFFFE) + 0x4C) + 0x30))(v11 + 16 * v17);
        *v18 = 0;
        v18[2] = 1;
        v16 = *a1;
      }
      v23 = v17;
      if (v17 + (unint64_t)v16 >= v22)
      {
        v26 = v16;
      }
      else
      {
        v24 = v11 + 16 * v22;
        v25 = (v20 << 36) | 1;
        if (v21)
          v25 = ((int)v21 - (int)v24) | (unint64_t)(v20 << 36);
        *(_QWORD *)(v24 + 8) = v25 ^ v15;
        v19 += 16 * v20;
        v26 = *a1;
        v21 = (_DWORD *)(v11 + 16 * v22);
        v20 = 0;
      }
      v20 += v16;
      v17 -= v26;
      v16 = v26;
      v22 = v23;
    }
    while (v17 >= (int)a1[1]);
    if (v20)
    {
      v27 = (v20 << 36) | 1;
      if (v21)
        v27 = ((int)v21 - (int)v18) | (unint64_t)(v20 << 36);
      *((_QWORD *)v18 + 1) = v27 ^ v15;
      v19 += 16 * v20;
    }
    else
    {
      v18 = v21;
    }
    v8 = a2;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v28 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v29 = *v28;
      if ((*v28 & 3) != 1)
        break;
      v30 = __ldxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 & 0xFFFFFFFE, v28))
          goto LABEL_26;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v28, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_26:
  if (v18)
  {
    v31 = *((_QWORD *)v18 + 1) ^ v15;
    *(_QWORD *)v8 = v18;
    *(_QWORD *)(v8 + 8) = (char *)v18 + HIDWORD(v31);
    v32 = (uint64_t)v18 + (int)v31;
  }
  else
  {
    v15 = 0;
    v19 = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v32 = 1;
  }
  *(_QWORD *)(v8 + 16) = v32;
  *(_QWORD *)(v8 + 24) = v15;
  *(_DWORD *)(v8 + 32) = v19;
  v33 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_32;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_32:
  v35 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v36 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v36 + 24) &= ~(1 << a1[3]);
  v37 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v37 + 16) &= ~(1 << a1[3]);
  v38 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v38 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v38) = __ldxr(v33);
  if ((_DWORD)v38 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v33))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, a3, a4, a5, a6, a7, a8);
}

BOOL WTF::BitSet<1024ul,unsigned long long>::isEmpty(_QWORD *a1)
{
  return !*a1
      && !a1[1]
      && !a1[2]
      && !a1[3]
      && !a1[4]
      && !a1[5]
      && !a1[6]
      && !a1[7]
      && !a1[8]
      && !a1[9]
      && !a1[10]
      && !a1[11]
      && !a1[12]
      && !a1[13]
      && !a1[14]
      && a1[15] == 0;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v5 & 0xFFFFFFFE) + 0x4C) + 0x30))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v5 & 0xFFFFFFFE) + 0x4C) + 0x30))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::DefaultDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::DefaultDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(16 * *(unsigned int *)(16 * (*v5 & 0xFFFFFFFE) + 0x4C) + 0x30))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::heapHelperPool(void)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = WTF::fastMalloc((WTF *)0x70);
  JSC::heapHelperPool(void)::helperPool = WTF::ParallelHelperPool::ParallelHelperPool(v0, (uint64_t)"Heap Helper Thread", 19);
  WTF::ParallelHelperPool::ensureThreads((WTF::ParallelHelperPool *)JSC::heapHelperPool(void)::helperPool, dword_1ECF4C578 - 1, v1, v2, v3, v4, v5, v6);
}

_OWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,JSC::HeapSnapshotBuilder::RootData,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::HeapSnapshotBuilder::RootData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 32 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v6 + 32 * v19;
      if ((unint64_t)(*(_QWORD *)v21 + 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (~(*(_QWORD *)v21 << 32) + *(_QWORD *)v21) ^ ((~(*(_QWORD *)v21 << 32) + *(_QWORD *)v21) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = v27;
          v30 = *(_QWORD *)(v22 + 32 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (v30);
        v31 = (_OWORD *)(v22 + 32 * v29);
        v32 = *(_OWORD *)(v21 + 16);
        *v31 = *(_OWORD *)v21;
        v31[1] = v32;
        if (v21 == a3)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (_QWORD *)(v10 + 16 * i);
      if ((unint64_t)(*v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(*v22 << 32) + *v22) ^ ((~(*v22 << 32) + *v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v31);
        *(_OWORD *)(v23 + 16 * v30) = *(_OWORD *)v22;
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::Detail::CallableWrapper<JSC::HeapSnapshotBuilder::json(void)::$_0,BOOL,JSC::HeapSnapshotNode const&>::call()
{
  return 1;
}

void WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::String>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::String,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 16 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = (uint64_t *)(v26 + 16 * v33);
          v36 = (WTF::StringImpl *)v35[1];
          v35[1] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::~StringImpl(v36, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v36 -= 2;
            }
          }
          *v35 = *v22;
          v37 = v10 + 16 * v21;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          v35[1] = v38;
          v25 = *(WTF::StringImpl **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (!v25)
            goto LABEL_22;
          if (*(_DWORD *)v25 == 2)
          {
LABEL_24:
            WTF::StringImpl::~StringImpl(v25, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
            goto LABEL_22;
          }
          *(_DWORD *)v25 -= 2;
        }
        else
        {
          v24 = v10 + 16 * v21;
          v25 = *(WTF::StringImpl **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              goto LABEL_24;
            *(_DWORD *)v25 -= 2;
          }
        }
      }
LABEL_22:
      if (++v21 == v11)
        goto LABEL_28;
    }
  }
  if (v10)
LABEL_28:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void JSC::IsoAlignedMemoryAllocator::~IsoAlignedMemoryAllocator(JSC::IsoAlignedMemoryAllocator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (*((_DWORD *)this + 13))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
      v11 = *((_QWORD *)this + 8);
      if (v11 >= 0)
        v12 = (char *)(2 * v11 + 8);
      else
        v12 = (char *)this + 64;
      if (((*(_QWORD *)&v12[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v9) & 1) == 0)
        (*(void (**)(JSC::IsoAlignedMemoryAllocator *, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9));
      (*(void (**)(JSC::IsoAlignedMemoryAllocator *, uint64_t))(*(_QWORD *)this + 72))(this, v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 13));
  }
  *(_QWORD *)this = off_1E3590CB0;
  v13 = *((_QWORD *)this + 8);
  if ((v13 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v13, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 7);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::IsoAlignedMemoryAllocator::~IsoAlignedMemoryAllocator(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::IsoAlignedMemoryAllocator::dump(JSC::IsoAlignedMemoryAllocator *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Iso(");
  WTF::PrintStream::printf(v4, "%p", this);
  WTF::PrintStream::printf(v4, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::IsoAlignedMemoryAllocator::tryAllocateMemory(JSC::IsoAlignedMemoryAllocator *this, WTF *a2)
{
  uint64_t v3;

  WTF::tryFastCompactMalloc(a2, &v3);
  return v3;
}

void JSC::IsoAlignedMemoryAllocator::freeMemory(JSC::IsoAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastFree((unint64_t)a2, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::IsoAlignedMemoryAllocator::tryReallocateMemory(JSC::IsoAlignedMemoryAllocator *this, void *a2)
{
  __break(0xC471u);
}

void *JSC::IsoAlignedMemoryAllocator::tryMallocBlock(JSC::IsoAlignedMemoryAllocator *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WTF::tryFastCompactAlignedMalloc(0x4000uLL, 0x4000uLL, a3, a4, a5, a6, a7, a8);
}

void JSC::IsoAlignedMemoryAllocator::freeBlock(JSC::IsoAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastAlignedFree((unint64_t)a2, a2, a3, a4, a5, a6, a7, a8);
}

int *JSC::IsoAlignedMemoryAllocator::decommitBlock(JSC::IsoAlignedMemoryAllocator *this, void *a2)
{
  int *result;

  do
  {
    result = (int *)madvise(a2, 0x4000uLL, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

uint64_t JSC::IsoCellSet::IsoCellSet(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (unint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = (unint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v6 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc((WTF *)(((v6 + 31) >> 3) & 0x3FFFFFFC));
    bzero(v7, ((v6 + 31) >> 3) & 0x3FFFFFFC);
    if (*v4)
      WTF::fastFree(*v4, v8, v9, v10, v11, v12, v13, v14);
    *v4 = (unint64_t)v7;
    v15 = *v5;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(a1 + 40) = v6;
  if (v15 != v6)
  {
    WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::ensureSegmentsFor(v5, v6);
    v16 = *v5;
    *v5 = v6;
    if (v16 < v6)
    {
      v17 = *(_QWORD *)(a1 + 56);
      do
      {
        *(_QWORD *)(*(_QWORD *)(v17 + (v16 & 0xFFFFFFFFFFFFFFF8) + 8) + 8 * (v16 & 7)) = 0;
        ++v16;
      }
      while (v6 != v16);
    }
  }
  v18 = *(_QWORD **)(a2 + 240);
  *(_QWORD *)a1 = a2 + 232;
  *(_QWORD *)(a1 + 8) = v18;
  *v18 = a1;
  *(_QWORD *)(a2 + 240) = a1;
  return a1;
}

void JSC::IsoCellSet::~IsoCellSet(JSC::IsoCellSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *(_QWORD *)this;
    *v9 = *(_QWORD *)this;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v11 = (unint64_t *)*((_QWORD *)this + 7);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = 0;
      do
      {
        v14 = &v11[v13];
        v15 = (unint64_t *)v14[1];
        v14[1] = 0;
        if (v15)
        {
          v16 = WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment::~Segment(v15, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree((unint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
          v12 = *v11;
        }
        ++v13;
      }
      while (v13 < v12);
    }
  }
  v24 = (unint64_t *)*((_QWORD *)this + 8);
  v25 = *((unsigned int *)this + 19);
  if ((_DWORD)v25)
  {
    v26 = 8 * v25;
    do
    {
      v27 = *v24++;
      WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
      v26 -= 8;
    }
    while (v26);
    v24 = (unint64_t *)*((_QWORD *)this + 8);
  }
  if (v24)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = *((_QWORD *)this + 4);
  if (v28)
    WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::IsoCellSet::parallelNotEmptyMarkedBlockSource@<X0>(JSC::IsoCellSet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3590D58;
  *(_QWORD *)(result + 16) = this;
  *(_QWORD *)(result + 24) = *((_QWORD *)this + 3) + 88;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

_OWORD *JSC::IsoCellSet::addSlow(JSC::IsoCellSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  void *v15;
  unint64_t v16;
  int v17;

  v10 = (unsigned __int8 *)(*((_QWORD *)this + 3) + 144);
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *(_QWORD *)(*((_QWORD *)this + 7) + (a2 & 0xFFFFFFF8) + 8);
  v13 = a2 & 7;
  v14 = *(_OWORD **)(v12 + 8 * v13);
  if (!v14)
  {
    v14 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    *v14 = 0u;
    v14[1] = 0u;
    v14[2] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v16 = *(_QWORD *)(v12 + 8 * v13);
    *(_QWORD *)(v12 + 8 * v13) = v14;
    if (v16)
    {
      WTF::fastFree(v16, v15, a3, a4, a5, a6, a7, a8);
      v14 = *(_OWORD **)(v12 + 8 * v13);
    }
    __dmb(0xAu);
    *(_DWORD *)(*((_QWORD *)this + 4) + (((unint64_t)a2 >> 3) & 0x1FFFFFFC)) |= 1 << a2;
  }
  v17 = __ldxr(v10);
  if (v17 == 1)
  {
    if (!__stlxr(0, v10))
      return v14;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v14;
}

uint64_t WTF::dataLog<char [24],unsigned int,char [3]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: for block index ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ":\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [12],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Bits says: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::IsoHeapCellType::IsoHeapCellType(uint64_t result, unsigned __int8 a2, uint64_t a3)
{
  *(_WORD *)(result + 8) = a2;
  *(_QWORD *)result = off_1E3590C80;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_WORD *)(result + 8) = a2;
  *(_QWORD *)result = off_1E3590C80;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

void JSC::IsoHeapCellType::finishSweep(JSC::IsoHeapCellType *this, JSC::MarkedBlock::Handle *a2, JSC::FreeList *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FreeList *v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  BOOL v25;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  signed int v32;
  int v33;
  unint64_t v34;
  int v35;
  char v36;
  unint64_t v37;
  _DWORD *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  signed int v60;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  unsigned __int8 *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  JSC::IsoHeapCellType *v101;
  _DWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  _BOOL4 v106;
  int v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  signed int v115;
  char v116;
  _BOOL4 v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::IsoHeapCellType *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unsigned __int8 *v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  _BOOL8 isEmpty;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  int v150;
  int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  JSC::FreeList *v155;
  char v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned __int16 *v167;
  unint64_t v168;
  _DWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned __int16 *v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  unsigned __int16 *v207;
  unsigned int v208;
  _DWORD *v209;
  int *v210;
  uint64_t v211;
  unsigned __int16 *v212;
  unsigned int v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int16 *v220;
  unsigned int v221;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  size_t __len;
  char v230;
  char v231;
  unint64_t v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t *v241;
  _QWORD *v242;
  uint64_t *v243;
  uint64_t *v244;
  int *v245;
  JSC::IsoHeapCellType **v246;
  unint64_t *v247;
  int *v248;
  unsigned int *v249;
  JSC::IsoHeapCellType **v250;
  unint64_t *v251;
  uint64_t *v252;
  unint64_t *v253;
  _QWORD *v254;
  uint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  JSC::IsoHeapCellType *v258;
  uint64_t v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  _QWORD v264[256];
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD v268[2];

  v8 = a3;
  v10 = a3 != 0;
  v11 = *((unsigned __int8 *)a2 + 8);
  v12 = *((_QWORD *)a2 + 10);
  v13 = *((_QWORD *)a2 + 11);
  if (*(_BYTE *)(v12 + 445))
    v14 = 2;
  else
    v14 = 1;
  if ((_DWORD)v11 == 1)
    v15 = v14;
  else
    v15 = 0;
  v16 = *((_QWORD *)a2 + 3);
  v17 = ~*(_DWORD *)(*(_QWORD *)(v16 + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5) + 4) >> *((_DWORD *)a2 + 3);
  v18 = *(_QWORD *)(v13 + 8);
  v19 = *(_DWORD *)(v18 + 436);
  v20 = *(_DWORD *)(v12 + 432);
  v22 = *(_DWORD *)(v13 + 32);
  v21 = *(unsigned int *)(v13 + 36);
  v23 = v22 == v20;
  if (*(_BYTE *)(v12 + 445))
  {
    v104 = *(unsigned __int8 *)(v18 + 347);
    v105 = v22 + 1;
    if (v22 == -1)
      v105 = 2;
    v106 = v105 == v20;
    if (v22)
      v107 = v106;
    else
      v107 = 1;
    if (v104 == 1)
      v108 = v107;
    else
      v108 = 0;
    if (v22 == v20)
      v23 = 1;
    else
      v23 = v108;
    v24 = byte_1ECF4C400 == 0;
LABEL_130:
    LODWORD(v257) = a3 != 0;
    if (!a3 && (_DWORD)v11 != 1)
    {
      __break(0xC471u);
      goto LABEL_403;
    }
    v109 = *(_DWORD *)a2;
    __len = (16 * *(_DWORD *)a2);
    v110 = *(_QWORD *)(v12 + 168);
    v111 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v112 = (v110 >> 26) ^ (v111 >> 17) ^ v110 ^ v111;
    *(_QWORD *)(v12 + 160) = v110;
    *(_QWORD *)(v12 + 168) = v112;
    v237 = v112 + v110;
    if ((_DWORD)v21 != v19 && (v17 & 1) == 0 && BYTE1(qword_1ECF4C414) != 0)
    {
      v125 = v11;
      if (v23)
      {
        isEmpty = WTF::BitSet<1024ul,unsigned long long>::isEmpty((_QWORD *)(v13 + 40));
        if (!isEmpty)
        {
          v141 = WTF::dataFile((WTF *)isEmpty);
          v264[0] = v13;
          v264[1] = v13;
          v264[2] = a2;
          v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 32))(v141);
          JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()((uint64_t)v264, v142);
        }
      }
      v126 = v13 + 0x4000;
      v127 = *((unsigned int *)a2 + 1);
      v128 = (_QWORD *)(v13 + 16 * v127);
      v235 = 0x4000 - 16 * v127;
      if (v235 < 0x3ED1)
      {
        v129 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v129))
        {
          __clrex();
        }
        else if (!__stxr(1u, v129))
        {
LABEL_190:
          v131 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v132 = v131 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v132 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
          v133 = v131 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v133 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
          v134 = v131 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v134 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
          if ((_DWORD)v257 == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v135 = v131 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v135 + 4) |= 1 << *((_DWORD *)a2 + 3);
          }
          v136 = __ldxr(v129);
          if (v136 == 1)
          {
            if (!__stlxr(0, v129))
              goto LABEL_197;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v129, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_197:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v137 = (unsigned int *)(v13 + 24);
            while (1)
            {
              v138 = *v137;
              if ((*v137 & 3) != 1)
                break;
              v139 = __ldxr(v137);
              if (v139 == v138)
              {
                if (!__stxr(v138 & 0xFFFFFFFE, v137))
                  goto LABEL_353;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v137, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
LABEL_353:
          if (v125 == 1 && v127 <= 0x3FF)
          {
            v209 = (_DWORD *)(v13 + 16 * v127);
            do
            {
              if (*v209)
              {
                (*((void (**)(_DWORD *))this + 2))(v209);
                *v209 = 0;
                v209[2] = 1;
              }
              v209 = (_DWORD *)((char *)v209 + __len);
            }
            while ((unint64_t)v209 < v126);
          }
          if ((_DWORD)v257 == 1)
          {
            if (!v24 && (_DWORD)v127 != 1024)
              memset_pattern16(v128, &unk_1991567C0, v235);
            v210 = (int *)v237;
            v128[1] = v237 ^ ((v235 << 32) | 1);
            *(_QWORD *)v8 = v128;
            *((_QWORD *)v8 + 1) = (char *)v128 + v235;
            *((_QWORD *)v8 + 2) = (char *)v128 + 1;
            *((_QWORD *)v8 + 3) = v210;
            *((_DWORD *)v8 + 8) = v235;
          }
          return;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v129);
        goto LABEL_190;
      }
      goto LABEL_402;
    }
    v258 = 0;
    v267 = 0;
    v268[0] = 0;
    v266 = 0;
    v265 = 0;
    v244 = &v257;
    v245 = (int *)&v267;
    v246 = (JSC::IsoHeapCellType **)v13;
    v247 = &v266;
    v248 = (int *)v268;
    v249 = (unsigned int *)&v237;
    v250 = &v258;
    v115 = 1024 - v109;
    if (1024 - v109 >= *((_DWORD *)a2 + 1))
    {
      v232 = 0;
      if ((_DWORD)__len)
        v116 = v24;
      else
        v116 = 1;
      v117 = a3 != 0;
      v230 = 1;
      v231 = v116;
      v233 = v21;
      v234 = v19;
      while (1)
      {
        if ((v17 & 1) == 0)
          goto LABEL_152;
        if (v23)
        {
          if (v115 >= 0x400)
            goto LABEL_401;
          if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v115 >> 3) & 0x1FFFFFF8)) >> v115) & 1) != 0)
            goto LABEL_165;
        }
        if ((_DWORD)v21 != v19)
          goto LABEL_152;
        if (v115 >= 0x400)
          goto LABEL_401;
        if (((*(_QWORD *)(v13 + 168 + (((unint64_t)v115 >> 3) & 0x1FFFFFF8)) >> v115) & 1) != 0)
        {
LABEL_165:
          v230 = 0;
        }
        else
        {
LABEL_152:
          if (v15 == 2)
          {
            v265 = v232 + 1;
            if (v232 >= 0x400)
              goto LABEL_401;
            *((_WORD *)v264 + v232++) = v115;
          }
          else
          {
            v118 = (_DWORD *)(v13 + 16 * v115);
            if ((_DWORD)v11 == 1 && *v118)
            {
              v119 = v11;
              (*((void (**)(uint64_t))this + 2))(v13 + 16 * v115);
              LODWORD(v21) = v233;
              v19 = v234;
              v11 = v119;
              *v118 = 0;
              v118[2] = 1;
              v10 = v257;
              v117 = v257;
            }
            if (v117)
            {
              if ((v231 & 1) == 0)
              {
                v227 = v11;
                memset_pattern16((void *)(v13 + 16 * v115), &unk_1991567C0, __len);
                LODWORD(v21) = v233;
                v19 = v234;
                v11 = v227;
              }
              v120 = *(unsigned int *)a2;
              v121 = v267;
              if (v120 + v115 < v266)
              {
                v122 = v13 + 16 * v266;
                if (v268[0])
                  v123 = LODWORD(v268[0]) - (int)v122;
                else
                  v123 = 1;
                *(_QWORD *)(v122 + 8) = (v123 | (v267 << 36)) ^ v237;
                v258 = (JSC::IsoHeapCellType *)((char *)v258 + 16 * v121);
                v268[0] = v122;
                v121 = 0;
              }
              v266 = v115;
              v267 = v121 + v120;
              v117 = 1;
            }
          }
        }
        v115 -= *(_DWORD *)a2;
        if (v115 < *((_DWORD *)a2 + 1))
          goto LABEL_231;
      }
    }
    v232 = 0;
    v230 = 1;
LABEL_231:
    v155 = a3;
    v156 = v24;
    if (v15 != 2)
    {
      if (!v10)
        goto LABEL_233;
      if (v267)
      {
        v180 = 16 * v267;
        v181 = v13 + 16 * v266;
        v182 = (LODWORD(v268[0]) - (int)v181) | (unint64_t)(v267 << 36);
        if (!v268[0])
          v182 = (v267 << 36) | 1;
        *(_QWORD *)(v181 + 8) = v182 ^ v237;
        v258 = (JSC::IsoHeapCellType *)((char *)v258 + v180);
        v268[0] = v181;
      }
    }
    if ((_DWORD)v21 == v19 && v10)
      *(_DWORD *)(v13 + 36) = 0;
LABEL_233:
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v163 = (unsigned int *)(v13 + 24);
      while (1)
      {
        v164 = *v163;
        if ((*v163 & 3) != 1)
          break;
        v165 = __ldxr(v163);
        if (v165 == v164)
        {
          if (!__stxr(v164 & 0xFFFFFFFE, v163))
            goto LABEL_234;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v163, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
LABEL_234:
    if (v15 == 2)
    {
      if (v232)
      {
        if (!(_DWORD)__len)
          v156 = 1;
        v166 = 2 * v232;
        v167 = (unsigned __int16 *)v264;
        do
        {
          v168 = *v167;
          v169 = (_DWORD *)(v13 + 16 * v168);
          if (*v169)
          {
            (*((void (**)(unint64_t))this + 2))(v13 + 16 * v168);
            *v169 = 0;
            v169[2] = 1;
          }
          if ((_DWORD)v257 == 1)
          {
            if ((v156 & 1) == 0)
              memset_pattern16((void *)(v13 + 16 * v168), &unk_1991567C0, __len);
            v170 = *(unsigned int *)a2;
            v171 = v267;
            if (v170 + v168 < v266)
            {
              v172 = v13 + 16 * v266;
              if (v268[0])
                v173 = LODWORD(v268[0]) - (int)v172;
              else
                v173 = 1;
              *(_QWORD *)(v172 + 8) = (v173 | (v267 << 36)) ^ v237;
              v258 = (JSC::IsoHeapCellType *)((char *)v258 + 16 * v171);
              v268[0] = v172;
              v171 = 0;
            }
            v266 = v168;
            v267 = v171 + v170;
          }
          ++v167;
          v166 -= 2;
        }
        while (v166);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v244);
      v155 = a3;
    }
    if ((_DWORD)v257 == 1)
    {
      v174 = v268[0];
      if (v268[0])
      {
        v175 = (int)v258;
        v176 = (int *)v237;
        v177 = *(_QWORD *)(v268[0] + 8) ^ v237;
        v178 = v268[0] + HIDWORD(v177);
        *(_QWORD *)v155 = v268[0];
        *((_QWORD *)v155 + 1) = v178;
        v179 = v174 + (int)v177;
      }
      else
      {
        v176 = 0;
        v175 = 0;
        *(_QWORD *)v155 = 0;
        *((_QWORD *)v155 + 1) = 0;
        v179 = 1;
      }
      *((_QWORD *)v155 + 2) = v179;
      *((_QWORD *)v155 + 3) = v176;
      *((_DWORD *)v155 + 8) = v175;
    }
    v94 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
    if (__ldaxr(v94))
    {
      __clrex();
    }
    else if (!__stxr(1u, v94))
    {
LABEL_239:
      v96 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v158 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v158 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v159 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v159 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v160 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v160 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if ((_DWORD)v257 != 1)
      {
        if ((v230 & 1) != 0)
          goto LABEL_241;
        goto LABEL_98;
      }
LABEL_388:
      *((_BYTE *)a2 + 10) = 1;
      goto LABEL_98;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v94);
    goto LABEL_239;
  }
  v24 = byte_1ECF4C400 == 0;
  if (byte_1ECF4C400)
    v25 = 1;
  else
    v25 = (_DWORD)v21 == v19;
  if (v25 || (_DWORD)v11 != 1)
    goto LABEL_130;
  if ((v17 & 1) == 0)
  {
    if (a3)
    {
      if (v22 == v20)
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>((unsigned int *)a2, (uint64_t)a3, (uint64_t)this, a4, a5, a6, a7, a8);
        return;
      }
      v263 = 1;
      v262 = 1;
      v261 = 0;
      v39 = *(_DWORD *)a2;
      v260 = 16 * *(_DWORD *)a2;
      v40 = *(_QWORD *)(v12 + 168);
      v41 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
      v42 = (v40 >> 26) ^ (v41 >> 17) ^ v40 ^ v41;
      *(_QWORD *)(v12 + 160) = v40;
      *(_QWORD *)(v12 + 168) = v42;
      v268[0] = v42 + v40;
      v258 = this;
      v259 = v12;
      if (BYTE1(qword_1ECF4C414))
      {
        v44 = v13 + 0x4000;
        v45 = *((unsigned int *)a2 + 1);
        v46 = (_QWORD *)(v13 + 16 * v45);
        v47 = 0x4000 - 16 * v45;
        if (v47 >= 0x3ED1)
        {
          __break(0xC471u);
          JUMPOUT(0x1985E5AF0);
        }
        v48 = (unsigned __int8 *)(v16 + 56);
        if (__ldaxr((unsigned __int8 *)(v16 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v48))
        {
LABEL_39:
          v50 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v51 = v50 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v51 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
          v52 = v50 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v52 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
          v53 = v50 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v53 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
          if (v263 == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v183 = v50 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v183 + 4) |= 1 << *((_DWORD *)a2 + 3);
          }
          v54 = __ldxr(v48);
          if (v54 == 1)
          {
            if (!__stlxr(0, v48))
              goto LABEL_108;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_108:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v184 = (unsigned int *)(v13 + 24);
            while (1)
            {
              v185 = *v184;
              if ((*v184 & 3) != 1)
                break;
              v186 = __ldxr(v184);
              if (v186 == v185)
              {
                if (!__stxr(v185 & 0xFFFFFFFE, v184))
                  goto LABEL_109;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v184, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
LABEL_109:
          if (v45 <= 0x3FF && v262)
          {
            v101 = v258;
            v102 = (_DWORD *)(v13 + 16 * v45);
            do
            {
              if (*v102)
              {
                (*((void (**)(_DWORD *))v101 + 2))(v102);
                *v102 = 0;
                v102[2] = 1;
              }
              v102 = (_DWORD *)((char *)v102 + v260);
            }
            while ((unint64_t)v102 < v44);
          }
          if (v263 == 1)
          {
            if (v261 == 1 && (_DWORD)v45 != 1024)
              memset_pattern16(v46, &unk_1991567C0, 0x4000 - 16 * v45);
            v103 = v268[0];
            v46[1] = v268[0] ^ ((v47 << 32) | 1);
            *(_QWORD *)a3 = v46;
            *((_QWORD *)a3 + 1) = (char *)v46 + v47;
            *((_QWORD *)a3 + 2) = (char *)v46 + 1;
            *((_QWORD *)a3 + 3) = v103;
            *((_DWORD *)a3 + 8) = v47;
          }
          return;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 56);
        goto LABEL_39;
      }
      v143 = 0;
      v266 = 0;
      v267 = 0;
      v256 = 0;
      v257 = 0;
      v265 = 0;
      v244 = (uint64_t *)v13;
      v245 = &v262;
      v246 = &v258;
      v247 = (unint64_t *)&v263;
      v248 = &v261;
      v249 = &v260;
      v250 = (JSC::IsoHeapCellType **)a2;
      v251 = &v256;
      v252 = &v257;
      v253 = &v266;
      v254 = v268;
      v255 = &v267;
      v237 = (unint64_t)&v263;
      v238 = &v257;
      v239 = v13;
      v240 = &v256;
      v241 = &v266;
      v242 = v268;
      v243 = &v267;
      v144 = 1024 - v39;
      v145 = *((_DWORD *)a2 + 1);
      if (1024 - v39 < v145)
        goto LABEL_212;
      v143 = 0;
      do
      {
        if (v262 == 2)
        {
          v265 = v143 + 1;
          if (v143 >= 0x400)
            goto LABEL_401;
          *((_WORD *)v264 + v143++) = v144;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v144);
          v39 = *(_DWORD *)a2;
          v145 = *((_DWORD *)a2 + 1);
        }
        v144 -= v39;
      }
      while (v144 >= v145);
      if (v262 != 2)
LABEL_212:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v146 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v147 = *v146;
          if ((*v146 & 3) != 1)
            break;
          v148 = __ldxr(v146);
          if (v148 == v147)
          {
            if (!__stxr(v147 & 0xFFFFFFFE, v146))
              goto LABEL_366;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v146, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_366:
      if (v262 == 2)
      {
        if (v143)
        {
          v211 = 2 * v143;
          v212 = (unsigned __int16 *)v264;
          do
          {
            v213 = *v212++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v213);
            v211 -= 2;
          }
          while (v211);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
      }
      if (v263 == 1)
      {
        v214 = v266;
        if (v266)
        {
          v215 = v267;
          v216 = v268[0];
          v217 = *(_QWORD *)(v266 + 8) ^ v268[0];
          *(_QWORD *)v8 = v266;
          *((_QWORD *)v8 + 1) = v214 + HIDWORD(v217);
          v218 = v214 + (int)v217;
        }
        else
        {
          v216 = 0;
          v215 = 0;
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = 0;
          v218 = 1;
        }
        *((_QWORD *)v8 + 2) = v218;
        *((_QWORD *)v8 + 3) = v216;
        *((_DWORD *)v8 + 8) = v215;
      }
LABEL_384:
      v94 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
      if (__ldaxr(v94))
      {
        __clrex();
      }
      else if (!__stxr(1u, v94))
      {
LABEL_387:
        v223 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v224 = v223 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v224 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
        v225 = v223 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v225 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
        v226 = v223 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v226 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
        if (v263 != 1)
        {
          v161 = v223 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          v162 = 1 << *((_DWORD *)a2 + 3);
          goto LABEL_242;
        }
        goto LABEL_388;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v94);
      goto LABEL_387;
    }
    if (v22 == v20)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>((int *)a2, (uint64_t)this, 0, a4, a5, a6, a7, a8);
      return;
    }
    v263 = 0;
    v262 = 1;
    v261 = 0;
    v71 = *(_DWORD *)a2;
    v260 = 16 * *(_DWORD *)a2;
    v72 = *(_QWORD *)(v12 + 168);
    v73 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v74 = (v72 >> 26) ^ (v73 >> 17) ^ v72 ^ v73;
    *(_QWORD *)(v12 + 160) = v72;
    *(_QWORD *)(v12 + 168) = v74;
    v268[0] = v74 + v72;
    v258 = this;
    v259 = v12;
    if (!BYTE1(qword_1ECF4C414))
    {
      v149 = 0;
      v266 = 0;
      v267 = 0;
      v256 = 0;
      v257 = 0;
      v265 = 0;
      v244 = (uint64_t *)v13;
      v245 = &v262;
      v246 = &v258;
      v247 = (unint64_t *)&v263;
      v248 = &v261;
      v249 = &v260;
      v250 = (JSC::IsoHeapCellType **)a2;
      v251 = &v256;
      v252 = &v257;
      v253 = &v266;
      v254 = v268;
      v255 = &v267;
      v237 = (unint64_t)&v263;
      v238 = &v257;
      v239 = v13;
      v240 = &v256;
      v241 = &v266;
      v242 = v268;
      v243 = &v267;
      v150 = 1024 - v71;
      v151 = *((_DWORD *)a2 + 1);
      if (1024 - v71 < v151)
        goto LABEL_221;
      v149 = 0;
      do
      {
        if (v262 == 2)
        {
          v265 = v149 + 1;
          if (v149 >= 0x400)
            goto LABEL_401;
          *((_WORD *)v264 + v149++) = v150;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v150);
          v71 = *(_DWORD *)a2;
          v151 = *((_DWORD *)a2 + 1);
        }
        v150 -= v71;
      }
      while (v150 >= v151);
      if (v262 != 2)
LABEL_221:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v152 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v153 = *v152;
          if ((*v152 & 3) != 1)
            break;
          v154 = __ldxr(v152);
          if (v154 == v153)
          {
            if (!__stxr(v153 & 0xFFFFFFFE, v152))
              goto LABEL_377;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v152, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_377:
      if (v262 == 2)
      {
        if (v149)
        {
          v219 = 2 * v149;
          v220 = (unsigned __int16 *)v264;
          do
          {
            v221 = *v220++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v221);
            v219 -= 2;
          }
          while (v219);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
      }
      if (v263 == 1)
      {
        MEMORY[8] = 0;
        MEMORY[0] = 0;
        MEMORY[0x10] = 1;
        MEMORY[0x18] = 0;
        MEMORY[0x20] = 0;
      }
      goto LABEL_384;
    }
    v75 = v13 + 0x4000;
    v76 = *((unsigned int *)a2 + 1);
    v77 = (_DWORD *)(v13 + 16 * v76);
    if ((unint64_t)(16 * v76 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
    {
      __break(0xC471u);
LABEL_401:
      __break(1u);
LABEL_402:
      __break(0xC471u);
LABEL_403:
      JUMPOUT(0x1985E58BCLL);
    }
    v78 = (unsigned __int8 *)(v16 + 56);
    if (__ldaxr((unsigned __int8 *)(v16 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v78))
    {
LABEL_76:
      v80 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v81 = v80 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v81 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v82 = v80 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v82 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v83 = v80 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v83 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if (v263 == 1)
      {
        *((_BYTE *)a2 + 10) = 1;
      }
      else
      {
        v84 = v80 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v84 + 4) |= 1 << *((_DWORD *)a2 + 3);
      }
      v85 = __ldxr(v78);
      if (v85 == 1)
      {
        if (!__stlxr(0, v78))
          goto LABEL_173;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v78, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_173:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v187 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v188 = *v187;
          if ((*v187 & 3) != 1)
            break;
          v189 = __ldxr(v187);
          if (v189 == v188)
          {
            if (!__stxr(v188 & 0xFFFFFFFE, v187))
              goto LABEL_174;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v187, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
LABEL_174:
      if (v76 <= 0x3FF && v262)
      {
        v124 = v258;
        do
        {
          if (*v77)
          {
            (*((void (**)(_DWORD *))v124 + 2))(v77);
            *v77 = 0;
            v77[2] = 1;
          }
          v77 = (_DWORD *)((char *)v77 + v260);
        }
        while ((unint64_t)v77 < v75);
      }
      return;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 56);
    goto LABEL_76;
  }
  if (a3)
  {
    if (v22 != v20)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>((unsigned int *)a2, (uint64_t)a3, (uint64_t)this, a4, a5, a6, a7, a8);
      return;
    }
    v55 = 1;
    v263 = 1;
    v262 = 1;
    v261 = 0;
    v56 = *(_DWORD *)a2;
    v260 = 16 * *(_DWORD *)a2;
    v57 = *(_QWORD *)(v12 + 168);
    v58 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v59 = (v57 >> 26) ^ (v58 >> 17) ^ v57 ^ v58;
    *(_QWORD *)(v12 + 160) = v57;
    *(_QWORD *)(v12 + 168) = v59;
    v267 = 0;
    v268[0] = v59 + v57;
    v258 = this;
    v259 = v12;
    v266 = 0;
    v256 = 0;
    v257 = 0;
    v265 = 0;
    v244 = (uint64_t *)v13;
    v245 = &v262;
    v246 = &v258;
    v247 = (unint64_t *)&v263;
    v248 = &v261;
    v249 = &v260;
    v250 = (JSC::IsoHeapCellType **)a2;
    v251 = &v256;
    v252 = &v257;
    v253 = &v266;
    v254 = v268;
    v255 = &v267;
    v237 = (unint64_t)&v263;
    v238 = &v257;
    v239 = v13;
    v240 = &v256;
    v241 = &v266;
    v242 = v268;
    v243 = &v267;
    v60 = 1024 - v56;
    if (v60 < *((_DWORD *)a2 + 1))
    {
      v62 = 0;
      v36 = 1;
    }
    else
    {
      v62 = 0;
      v63 = 1;
      v64 = 1;
      v36 = 1;
      do
      {
        if (v60 >= 0x400)
          goto LABEL_401;
        v65 = v60;
        if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
        {
          v36 = 0;
        }
        else if (v262 == 2)
        {
          v265 = v62 + 1;
          if (v62 >= 0x400)
            goto LABEL_401;
          *((_WORD *)v264 + v62++) = v60;
        }
        else
        {
          v66 = (_DWORD *)(v13 + 16 * v60);
          if (v262 && *v66)
          {
            (*((void (**)(uint64_t, uint64_t))v258 + 2))(v13 + 16 * v60, v21);
            *v66 = 0;
            v66[2] = 1;
            v63 = v263;
            v64 = v263;
          }
          if (v64 == 1)
          {
            if (v261 == 1 && v260 >= 8)
              memset_pattern16((void *)(v13 + 16 * v65), &unk_1991567C0, v260 & 0xFFFFFFF8);
            v67 = *(unsigned int *)a2;
            v68 = v257;
            if (v67 + v65 < v256)
            {
              v69 = v13 + 16 * v256;
              if (v266)
                v70 = (int)v266 - (int)v69;
              else
                v70 = 1;
              *(_QWORD *)(v69 + 8) = (v70 | (v257 << 36)) ^ v268[0];
              v266 = v69;
              v267 += 16 * v68;
              v68 = 0;
            }
            v256 = v65;
            v257 = v68 + v67;
            v64 = 1;
          }
        }
        v60 = v65 - *(_DWORD *)a2;
      }
      while (v60 >= *((_DWORD *)a2 + 1));
      v55 = v262;
      if (v262 == 2)
      {
        v8 = a3;
      }
      else
      {
        v8 = a3;
        if (v63 == 1 && v257)
        {
          v86 = 16 * v257;
          v87 = v13 + 16 * v256;
          v88 = ((int)v266 - (int)v87) | (unint64_t)(v257 << 36);
          if (!v266)
            v88 = (v257 << 36) | 1;
          *(_QWORD *)(v87 + 8) = v88 ^ v268[0];
          v266 = v87;
          v267 += v86;
        }
      }
    }
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v203 = (unsigned int *)(v13 + 24);
      while (1)
      {
        v204 = *v203;
        if ((*v203 & 3) != 1)
          break;
        v205 = __ldxr(v203);
        if (v205 == v204)
        {
          if (!__stxr(v204 & 0xFFFFFFFE, v203))
            goto LABEL_88;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v203, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      v55 = v262;
    }
LABEL_88:
    if (v55 == 2)
    {
      if (v62)
      {
        v206 = 2 * v62;
        v207 = (unsigned __int16 *)v264;
        do
        {
          v208 = *v207++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v208);
          v206 -= 2;
        }
        while (v206);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
    }
    if (v263 == 1)
    {
      v89 = v266;
      if (v266)
      {
        v90 = v267;
        v91 = v268[0];
        v92 = *(_QWORD *)(v266 + 8) ^ v268[0];
        *(_QWORD *)v8 = v266;
        *((_QWORD *)v8 + 1) = v89 + HIDWORD(v92);
        v93 = v89 + (int)v92;
      }
      else
      {
        v91 = 0;
        v90 = 0;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        v93 = 1;
      }
      *((_QWORD *)v8 + 2) = v93;
      *((_QWORD *)v8 + 3) = v91;
      *((_DWORD *)v8 + 8) = v90;
    }
  }
  else
  {
    if (v22 != v20)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>((int *)a2, (uint64_t)this, 0, a4, a5, a6, a7, a8);
      return;
    }
    v263 = 0;
    v27 = 1;
    v262 = 1;
    v261 = 0;
    v28 = *(_DWORD *)a2;
    v260 = 16 * *(_DWORD *)a2;
    v29 = *(_QWORD *)(v12 + 168);
    v30 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v31 = (v29 >> 26) ^ (v30 >> 17) ^ v29 ^ v30;
    *(_QWORD *)(v12 + 160) = v29;
    *(_QWORD *)(v12 + 168) = v31;
    v267 = 0;
    v268[0] = v31 + v29;
    v258 = this;
    v259 = v12;
    v266 = 0;
    v256 = 0;
    v257 = 0;
    v265 = 0;
    v244 = (uint64_t *)v13;
    v245 = &v262;
    v246 = &v258;
    v247 = (unint64_t *)&v263;
    v248 = &v261;
    v249 = &v260;
    v250 = (JSC::IsoHeapCellType **)a2;
    v251 = &v256;
    v252 = &v257;
    v253 = &v266;
    v254 = v268;
    v255 = &v267;
    v237 = (unint64_t)&v263;
    v238 = &v257;
    v239 = v13;
    v240 = &v256;
    v241 = &v266;
    v242 = v268;
    v243 = &v267;
    v32 = 1024 - v28;
    if (v32 < *((_DWORD *)a2 + 1))
    {
      v34 = 0;
      v36 = 1;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 1;
      do
      {
        if (v32 >= 0x400)
          goto LABEL_401;
        v37 = v32;
        if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
        {
          v36 = 0;
        }
        else if (v262 == 2)
        {
          v265 = v34 + 1;
          if (v34 >= 0x400)
            goto LABEL_401;
          *((_WORD *)v264 + v34++) = v32;
        }
        else
        {
          v38 = (_DWORD *)(v13 + 16 * v32);
          if (v262 && *v38)
          {
            (*((void (**)(uint64_t, uint64_t))v258 + 2))(v13 + 16 * v32, v21);
            *v38 = 0;
            v38[2] = 1;
            v33 = v263;
            v35 = v263;
          }
          if (v35 == 1)
          {
            if (v261 == 1 && v260 >= 8)
              memset_pattern16((void *)(v13 + 16 * v37), &unk_1991567C0, v260 & 0xFFFFFFF8);
            v196 = *(unsigned int *)a2;
            v197 = v257;
            if (v196 + v37 < v256)
            {
              v198 = v13 + 16 * v256;
              if (v266)
                v199 = (int)v266 - (int)v198;
              else
                v199 = 1;
              *(_QWORD *)(v198 + 8) = (v199 | (v257 << 36)) ^ v268[0];
              v266 = v198;
              v267 += 16 * v197;
              v197 = 0;
            }
            v256 = v37;
            v257 = v197 + v196;
            v35 = 1;
          }
        }
        v32 = v37 - *(_DWORD *)a2;
      }
      while (v32 >= *((_DWORD *)a2 + 1));
      v27 = v262;
      if (v262 != 2 && v33 == 1 && v257)
      {
        v200 = 16 * v257;
        v201 = v13 + 16 * v256;
        v202 = ((int)v266 - (int)v201) | (unint64_t)(v257 << 36);
        if (!v266)
          v202 = (v257 << 36) | 1;
        *(_QWORD *)(v201 + 8) = v202 ^ v268[0];
        v266 = v201;
        v267 += v200;
      }
    }
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v190 = (unsigned int *)(v13 + 24);
      while (1)
      {
        v191 = *v190;
        if ((*v190 & 3) != 1)
          break;
        v192 = __ldxr(v190);
        if (v192 == v191)
        {
          if (!__stxr(v191 & 0xFFFFFFFE, v190))
            goto LABEL_47;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v190, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      v27 = v262;
    }
LABEL_47:
    if (v27 == 2)
    {
      if (v34)
      {
        v193 = 2 * v34;
        v194 = (unsigned __int16 *)v264;
        do
        {
          v195 = *v194++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v244, v195);
          v193 -= 2;
        }
        while (v193);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v237);
    }
    if (v263 == 1)
    {
      MEMORY[8] = 0;
      MEMORY[0] = 0;
      MEMORY[0x10] = 1;
      MEMORY[0x18] = 0;
      MEMORY[0x20] = 0;
    }
  }
  v94 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
  if (__ldaxr(v94))
  {
    __clrex();
LABEL_95:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v94);
    goto LABEL_96;
  }
  if (__stxr(1u, v94))
    goto LABEL_95;
LABEL_96:
  v96 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v97 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v97 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
  v98 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v98 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
  v99 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v99 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
  if (v263 == 1)
    goto LABEL_388;
  if ((v36 & 1) != 0)
  {
LABEL_241:
    v161 = v96 + 40 * (*((_DWORD *)a2 + 3) >> 5);
    v162 = 1 << *((_DWORD *)a2 + 3);
LABEL_242:
    *(_DWORD *)(v161 + 4) |= v162;
  }
LABEL_98:
  v100 = __ldxr(v94);
  if (v100 == 1)
  {
    if (!__stlxr(0, v94))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v94, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::IsoHeapCellType::destroy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a3);
}

uint64_t JSC::IsoMemoryAllocatorBase::tryAllocateAlignedMemory(JSC::IsoMemoryAllocatorBase *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  char *v49;
  char *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  if (a2 != 0x4000)
  {
    __break(0xC471u);
    JUMPOUT(0x1985E5F50);
  }
  if (a3 != 0x4000)
  {
    __break(0xC471u);
    JUMPOUT(0x1985E5F70);
  }
  v4 = (unsigned __int8 *)this + 76;
  if (__ldaxr((unsigned __int8 *)this + 76))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 76);
    goto LABEL_6;
  }
  if (__stxr(1u, v4))
    goto LABEL_5;
LABEL_6:
  v7 = (uint64_t *)((char *)this + 64);
  v6 = *((_QWORD *)this + 8);
  v8 = *((unsigned int *)this + 18);
  v9 = (unint64_t *)(2 * v6);
  if (v6 < 0)
  {
    v10 = __clz(__rbit64(~((unint64_t)v6 >> v8))) + v8;
    if (v10 >= 0x3F)
      LODWORD(v10) = 63;
  }
  else
  {
    v10 = *v9;
    v11 = *v9 + 63;
    v12 = v8 >> 6;
    if (v8 >> 6 >= v11 >> 6)
      goto LABEL_11;
    v13 = *(_QWORD *)(2 * v6 + 8 * v12 + 8);
    if (v13 != -1)
    {
      v14 = __clz(__rbit64(~(v13 >> v8))) + (v8 & 0x3F);
      if (v14 < 0x40)
        goto LABEL_10;
    }
    if (v12 + 1 != v11 >> 6)
    {
      while (1)
      {
        v54 = *(_QWORD *)(2 * v6 + 0x10 + 8 * v12);
        if (v54 != -1)
        {
          v14 = __clz(__rbit64(~v54));
          if (v14 <= 0x3F)
            break;
        }
        if ((v11 >> 6) - 1 == ++v12)
          goto LABEL_11;
      }
      LODWORD(v12) = v12 + 1;
LABEL_10:
      LODWORD(v10) = v14 + ((_DWORD)v12 << 6);
    }
  }
LABEL_11:
  *((_DWORD *)this + 18) = v10;
  if (v10 < (unint64_t)*((unsigned int *)this + 13))
  {
    v49 = (char *)(v9 + 1);
    if (v6 >= 0)
      v50 = v49;
    else
      v50 = (char *)this + 64;
    *(_QWORD *)&v50[((unint64_t)v10 >> 3) & 0x1FFFFFF8] |= 1 << v10;
    v46 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v10);
    (*(void (**)(JSC::IsoMemoryAllocatorBase *, uint64_t))(*(_QWORD *)this + 80))(this, v46);
    goto LABEL_34;
  }
  v15 = (*(uint64_t (**)(JSC::IsoMemoryAllocatorBase *))(*(_QWORD *)this + 64))(this);
  v56 = v15;
  if (!v15)
  {
    v46 = 0;
    goto LABEL_34;
  }
  v22 = v15;
  v23 = (_QWORD *)((char *)this + 40);
  v24 = *((unsigned int *)this + 13);
  if ((_DWORD)v24 == *((_DWORD *)this + 12))
  {
    v53 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v56);
    v22 = *((unsigned int *)this + 13);
    *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v22) = *v53;
  }
  else
  {
    *(_QWORD *)(*v23 + 8 * v24) = v22;
    LODWORD(v22) = v24;
  }
  v25 = v22 + 1;
  v27 = (uint64_t *)((char *)this + 56);
  v26 = *((_QWORD *)this + 7);
  *((_DWORD *)this + 13) = v25;
  if (v26
    || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash((uint64_t *)this + 7, 8uLL, 0, v17, v18, v19, v20, v21), (v26 = *v27) != 0))
  {
    v28 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = v56;
  v30 = (~(v56 << 32) + v56) ^ ((unint64_t)(~(v56 << 32) + v56) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v28 & ((v32 >> 31) ^ v32);
  v16 = v26 + 16 * v33;
  v34 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v51 = 0;
    v52 = 1;
    while (v34 != v56)
    {
      if (v34 == -1)
        v51 = (_QWORD *)v16;
      v33 = (v33 + v52) & v28;
      v16 = v26 + 16 * v33;
      v34 = *(_QWORD *)v16;
      ++v52;
      if (!*(_QWORD *)v16)
      {
        if (v51)
        {
          *v51 = 0;
          v51[1] = 0;
          --*(_DWORD *)(*v27 - 16);
          v16 = (uint64_t)v51;
        }
        goto LABEL_18;
      }
    }
    goto LABEL_24;
  }
LABEL_18:
  *(_QWORD *)v16 = v29;
  *(_DWORD *)(v16 + 8) = v24;
  v35 = *v27;
  if (*v27)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *v27;
  if (*v27)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 > 2 * v39)
      goto LABEL_24;
    goto LABEL_66;
  }
  if (3 * v40 <= 4 * v39)
  {
    if (!(_DWORD)v40)
    {
      v55 = 8;
      goto LABEL_72;
    }
LABEL_66:
    v55 = ((_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40)));
LABEL_72:
    WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash((uint64_t *)this + 7, v55, v16, v17, v18, v19, v20, v21);
  }
LABEL_24:
  v41 = *((unsigned int *)this + 12);
  v42 = *((_QWORD *)this + 8);
  v43 = (uint64_t *)(2 * v42);
  if (v42 < 0)
    v44 = 63;
  else
    v44 = *v43;
  if (v44 != v41)
  {
    if (v41 <= 0x3F)
    {
      if ((v42 & 0x8000000000000000) == 0)
      {
        *v7 = *(_QWORD *)(2 * v42 + 8) | 0x8000000000000000;
        WTF::fastFree((unint64_t)v43, (void *)v41, v16, v17, v18, v19, v20, v21);
      }
    }
    else
    {
      WTF::BitVector::resizeOutOfLine((JSC::IsoMemoryAllocatorBase *)((char *)this + 64), v41, 0);
    }
    v42 = *v7;
  }
  if (v42 >= 0)
    v45 = (char *)(2 * v42 + 8);
  else
    v45 = (char *)this + 64;
  *(_QWORD *)&v45[(v24 >> 3) & 0x1FFFFFF8] |= 1 << v24;
  v46 = v56;
LABEL_34:
  v47 = __ldxr(v4);
  if (v47 == 1)
  {
    if (!__stlxr(0, v4))
      return v46;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v16, v17, v18, v19, v20, v21);
  return v46;
}

void JSC::IsoMemoryAllocatorBase::freeAlignedMemory(JSC::IsoMemoryAllocatorBase *this, void *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v4 = (unsigned __int8 *)this + 76;
  if (__ldaxr((unsigned __int8 *)this + 76))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 76);
LABEL_4:
  v6 = *((_QWORD *)this + 7);
  if (!v6)
    goto LABEL_22;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(void **)(v6 + 16 * v11);
  if (v12 != a2)
  {
    v23 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v23) & v7;
      v12 = *(void **)(v6 + 16 * v11);
      ++v23;
      if (v12 == a2)
        goto LABEL_6;
    }
    v11 = *(unsigned int *)(v6 - 4);
  }
LABEL_6:
  if (v11 == *(_DWORD *)(v6 - 4))
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1985E6100);
  }
  v13 = *(unsigned int *)(v6 + 16 * v11 + 8);
  v14 = (char *)this + 64;
  v15 = *((_QWORD *)this + 8);
  if (v15 >= 0)
    v14 = (char *)(2 * v15 + 8);
  *(_QWORD *)&v14[(v13 >> 3) & 0x1FFFFFF8] &= ~(1 << v13);
  if (*((_DWORD *)this + 18) < v13)
    LODWORD(v13) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = v13;
  (*(void (**)(JSC::IsoMemoryAllocatorBase *, void *))(*(_QWORD *)this + 88))(this, a2);
  v22 = __ldxr(v4);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v4))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v16, v17, v18, v19, v20, v21);
}

uint64_t JSC::IsoSubspace::IsoSubspace(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  char v9;
  int v10;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t i;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v9 = a6;
  v10 = a5;
  v14 = *a2;
  if (*a2)
    ++*v14;
  *(_QWORD *)a1 = off_1E3591150;
  *(_QWORD *)(a1 + 8) = a3 + 160;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (v14)
  {
    v15 = (*v14)++;
    *(_QWORD *)(a1 + 80) = v14;
    if (v15)
      *v14 = v15;
    else
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, (uint64_t)a7, a8);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = off_1E3590D20;
  *(_OWORD *)(a1 + 88) = 0u;
  v16 = a1 + 88;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = (v10 + 15) & 0xFFFFFFF0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 192) = a1 + 192;
  *(_QWORD *)(a1 + 200) = a1 + 192;
  *(_QWORD *)(a1 + 184) = 0;
  v17 = (_QWORD *)*a7;
  if (*a7)
  {
    *a7 = 0;
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x50);
    v17 = (_QWORD *)v18;
    v20 = *a2;
    if (v20)
    {
      *v20 += 2;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_QWORD *)v18 = off_1E3590CB0;
      *(_QWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 64) = 0x8000000000000000;
      *(_DWORD *)(v18 + 72) = 0;
      *(_BYTE *)(v18 + 76) = 0;
      v21 = *v20 - 1;
      if (*v20 == 1)
      {
        WTF::fastFree((unint64_t)v20, v19, a3, a4, a5, a6, (uint64_t)a7, a8);
        v21 = *v20;
      }
      else
      {
        *v20 = v21;
      }
      *v17 = off_1E3590C10;
      v22 = v21 - 1;
      if (v22)
        *v20 = v22;
      else
        WTF::fastFree((unint64_t)v20, v19, a3, a4, a5, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_QWORD *)(v18 + 56) = 0;
      *(_QWORD *)(v18 + 64) = 0x8000000000000000;
      *(_DWORD *)(v18 + 72) = 0;
      *(_BYTE *)(v18 + 76) = 0;
      *(_QWORD *)v18 = off_1E3590C10;
    }
  }
  *(_QWORD *)(a1 + 208) = v17;
  *(_QWORD *)(a1 + 216) = a1 + 216;
  *(_QWORD *)(a1 + 232) = a1 + 232;
  *(_QWORD *)(a1 + 240) = a1 + 232;
  *(_QWORD *)(a1 + 224) = a1 + 216;
  *(_BYTE *)(a1 + 65) = v9;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 40) = v17[1];
  v23 = *(_QWORD *)(a1 + 8);
  v24 = v23 - 160;
  v43 = a1;
  v25 = *(unsigned int *)(v23 + 12);
  if ((_DWORD)v25 == *(_DWORD *)(v23 + 8))
  {
    v42 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v25 + 1, (unint64_t)&v43);
    v25 = *(unsigned int *)(v24 + 172);
    *(_QWORD *)(*(_QWORD *)(v24 + 160) + 8 * v25) = *v42;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v23 + 8 * v25) = a1;
  }
  *(_DWORD *)(v24 + 172) = v25 + 1;
  if (*(_QWORD *)(a1 + 72))
  {
    __break(0xC471u);
    JUMPOUT(0x1985E6480);
  }
  v26 = *(_QWORD *)(a1 + 24);
  v27 = (_QWORD *)(v26 + 24);
  v28 = *(_QWORD *)(v26 + 32);
  if (*(_QWORD *)(v26 + 24))
  {
    v27 = (_QWORD *)(v28 + 72);
  }
  else if (v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1985E64C0);
  }
  *v27 = a1;
  *(_QWORD *)(v26 + 32) = a1;
  v29 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 94);
  if (__ldaxr(v29))
  {
    __clrex();
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v29);
    goto LABEL_20;
  }
  if (__stxr(1u, v29))
    goto LABEL_19;
LABEL_20:
  v31 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(a1 + 146) = *(_WORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_QWORD *)(a1 + 160) = a1;
  *(_QWORD *)(a1 + 168) = 0;
  __dmb(0xAu);
  v32 = (_QWORD *)(v31 + 144);
  v33 = *(_QWORD *)(v31 + 152);
  if (*(_QWORD *)(v31 + 144))
  {
    v32 = (_QWORD *)(v33 + 80);
  }
  else if (v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1985E63C8);
  }
  *v32 = v16;
  *(_QWORD *)(v31 + 152) = v16;
  if (*(_QWORD *)(a1 + 184))
  {
    __break(0xC471u);
    JUMPOUT(0x1985E64A0);
  }
  v34 = *(_QWORD **)(a1 + 24);
  v35 = v34 + 1;
  if (v34[1])
  {
    v41 = v34[2];
    v37 = v34 + 2;
    v35 = (_QWORD *)(v41 + 96);
  }
  else
  {
    for (i = v34[3]; i; i = *(_QWORD *)(i + 72))
      *(_QWORD *)(i + 40) = v16;
    v38 = v34[2];
    v37 = v34 + 2;
    if (v38)
    {
      __break(0xC471u);
      JUMPOUT(0x1985E64E0);
    }
  }
  *v35 = v16;
  *v37 = v16;
  *(_QWORD *)(a1 + 32) = v16;
  v39 = __ldxr(v29);
  if (v39 == 1)
  {
    if (!__stlxr(0, v29))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, a3, a4, a5, a6, (uint64_t)a7, a8);
  return a1;
}

void JSC::IsoSubspace::~IsoSubspace(JSC::IsoSubspace *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  *(_QWORD *)this = off_1E3590D20;
  v9 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  JSC::BlockDirectory::~BlockDirectory((JSC::IsoSubspace *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E3591150;
  v17 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    else
      --*v17;
  }
}

{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  *(_QWORD *)this = off_1E3590D20;
  v9 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  JSC::BlockDirectory::~BlockDirectory((JSC::IsoSubspace *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E3591150;
  v17 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    else
      --*v17;
  }
}

{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  *(_QWORD *)this = off_1E3590D20;
  v9 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  JSC::BlockDirectory::~BlockDirectory((JSC::IsoSubspace *)((char *)this + 88), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = off_1E3591150;
  v17 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
    else
      --*v17;
  }
  WTF::fastFree((unint64_t)this, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::IsoSubspace::didResizeBits(JSC::IsoSubspace *this, unsigned int a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v2 = (char *)this + 232;
  v3 = (char *)*((_QWORD *)this + 29);
  if (v3 != (char *)this + 232)
  {
    v4 = a2;
    v5 = a2 + 31;
    v6 = v5 >> 5;
    do
    {
      v7 = *(char **)v3;
      v8 = *((_QWORD *)v3 + 5) + 31;
      if ((v8 ^ v5) >= 0x20)
      {
        if (v6 < v8 >> 5)
        {
          __break(0xC471u);
          return;
        }
        v9 = v8 >> 5;
        v10 = (char *)WTF::fastMalloc((WTF *)(4 * (v5 >> 5)));
        memcpy(v10, *((const void **)v3 + 4), 4 * v9);
        bzero(&v10[4 * v9], 4 * (v6 - v9));
        v18 = *((_QWORD *)v3 + 4);
        if (v18)
          WTF::fastFree(v18, v11, v12, v13, v14, v15, v16, v17);
        *((_QWORD *)v3 + 4) = v10;
      }
      v20 = (unint64_t *)(v3 + 48);
      v19 = *((_QWORD *)v3 + 6);
      *((_QWORD *)v3 + 5) = v4;
      if (v19 != v4)
      {
        WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::ensureSegmentsFor((_QWORD *)v3 + 6, v4);
        v21 = *v20;
        *v20 = v4;
        if (v21 < v4)
        {
          v22 = *((_QWORD *)v3 + 7);
          do
          {
            *(_QWORD *)(*(_QWORD *)(v22 + (v21 & 0xFFFFFFFFFFFFFFF8) + 8) + 8 * (v21 & 7)) = 0;
            ++v21;
          }
          while (v4 != v21);
        }
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
}

void JSC::IsoSubspace::didRemoveBlock(JSC::IsoSubspace *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char **v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t StatusReg;
  char *v15;
  unsigned __int8 *v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (char *)this + 232;
  v9 = (char **)*((_QWORD *)this + 29);
  if (v9 != (char **)((char *)this + 232))
  {
    v10 = ~(1 << a2);
    v11 = (unint64_t)a2 >> 3;
    v12 = 4 * ((unint64_t)a2 >> 5);
    v13 = 8 * (a2 & 7);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v15 = *v9;
      v16 = (unsigned __int8 *)(v9[3] + 144);
      if (__ldaxr(v16))
        break;
      if (__stxr(1u, v16))
        goto LABEL_6;
LABEL_7:
      *(_DWORD *)&v9[4][v12] &= v10;
      v18 = __ldxr(v16);
      if (v18 == 1)
      {
        if (!__stlxr(0, v16))
          goto LABEL_9;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, a3, a4, a5, a6, a7, a8);
LABEL_9:
      v19 = *(_QWORD *)&v9[7][8 * v11 + 8];
      v20 = *(_QWORD *)(v19 + v13);
      *(_QWORD *)(v19 + v13) = 0;
      if (v20)
      {
        v21 = *(_QWORD *)(StatusReg + 752);
        if (v21)
        {
          if (!(v20 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
          {
LABEL_13:
            v22 = *(unsigned int *)(v21 + 8000);
            if (v22 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v21, v20, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v21 + 8 * v22) = v20 | 0x5000000000000;
              *(_DWORD *)(v21 + 8000) = v22 + 1;
            }
            goto LABEL_3;
          }
          if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_13;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v20, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_3:
      v9 = (char **)v15;
      if (v15 == v8)
        return;
    }
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
    goto LABEL_7;
  }
}

void JSC::IsoSubspace::didBeginSweepingToFreeList(JSC::IsoSubspace *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char **v9;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  BOOL v116;
  unsigned __int8 *v117;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  const void *v159;
  char v160;
  int v161;

  v8 = (char *)this + 232;
  v9 = (char **)*((_QWORD *)this + 29);
  if (v9 != (char **)((char *)this + 232))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v14 = *((unsigned int *)a2 + 3);
      v15 = v14 >> 5;
      v16 = 1 << v14;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5) + 8) & v16) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985E7240);
      }
      v17 = *v9;
      if ((*(_DWORD *)&v9[4][4 * v15] & v16) == 0)
        goto LABEL_5;
      __dmb(0xBu);
      v18 = *((_DWORD *)a2 + 3);
      v19 = *(unint64_t **)(*(_QWORD *)&v9[7][(v18 & 0xFFFFFFF8) + 8] + 8 * (v18 & 7));
      if (!v19)
      {
        v161 = *((_DWORD *)a2 + 3);
        WTF::dataLog<char [24],unsigned int,char [3]>(&v161);
        v160 = (*(_DWORD *)&v9[4][((unint64_t)*((unsigned int *)a2 + 3) >> 3) & 0x1FFFFFFC] >> *((_DWORD *)a2 + 3)) & 1;
        WTF::dataLog<char [32],BOOL,char [2]>("Blocks with bits says: ", &v160, "\n");
        v159 = *(const void **)(*(_QWORD *)&v9[7][(*((_DWORD *)a2 + 3) & 0xFFFFFFF8) + 8]
                              + 8 * (*((_DWORD *)a2 + 3) & 7));
        WTF::dataLog<char [12],WTF::RawPointer,char [2]>(&v159);
        __break(0xC471u);
        JUMPOUT(0x1985E7548);
      }
      v20 = *((_QWORD *)a2 + 11);
      v21 = *(_QWORD *)(v20 + 8);
      if (*(_DWORD *)(v20 + 36) == *(_DWORD *)(v21 + 436))
      {
        while (1)
        {
          v70 = *(_QWORD *)(v20 + 168);
          if (!v70)
            break;
          v71 = *v19 & v70;
          if (*v19 == v71)
            goto LABEL_75;
          v143 = __ldxr(v19);
          if (v143 == *v19)
          {
            if (!__stxr(v71, v19))
              goto LABEL_75;
          }
          else
          {
            __clrex();
          }
        }
        *v19 = 0;
LABEL_75:
        v72 = v19 + 1;
        while (1)
        {
          v73 = *(_QWORD *)(v20 + 176);
          if (!v73)
            break;
          v74 = *v72 & v73;
          if (*v72 == v74)
            goto LABEL_78;
          v144 = __ldxr(v72);
          if (v144 == *v72)
          {
            if (!__stxr(v74, v72))
              goto LABEL_78;
          }
          else
          {
            __clrex();
          }
        }
        *v72 = 0;
LABEL_78:
        v75 = v19 + 2;
        while (1)
        {
          v76 = *(_QWORD *)(v20 + 184);
          if (!v76)
            break;
          v77 = *v75 & v76;
          if (*v75 == v77)
            goto LABEL_81;
          v145 = __ldxr(v75);
          if (v145 == *v75)
          {
            if (!__stxr(v77, v75))
              goto LABEL_81;
          }
          else
          {
            __clrex();
          }
        }
        *v75 = 0;
LABEL_81:
        v78 = v19 + 3;
        while (1)
        {
          v79 = *(_QWORD *)(v20 + 192);
          if (!v79)
            break;
          v80 = *v78 & v79;
          if (*v78 == v80)
            goto LABEL_84;
          v146 = __ldxr(v78);
          if (v146 == *v78)
          {
            if (!__stxr(v80, v78))
              goto LABEL_84;
          }
          else
          {
            __clrex();
          }
        }
        *v78 = 0;
LABEL_84:
        v81 = v19 + 4;
        while (1)
        {
          v82 = *(_QWORD *)(v20 + 200);
          if (!v82)
            break;
          v83 = *v81 & v82;
          if (*v81 == v83)
            goto LABEL_87;
          v147 = __ldxr(v81);
          if (v147 == *v81)
          {
            if (!__stxr(v83, v81))
              goto LABEL_87;
          }
          else
          {
            __clrex();
          }
        }
        *v81 = 0;
LABEL_87:
        v84 = v19 + 5;
        while (1)
        {
          v85 = *(_QWORD *)(v20 + 208);
          if (!v85)
            break;
          v86 = *v84 & v85;
          if (*v84 == v86)
            goto LABEL_90;
          v148 = __ldxr(v84);
          if (v148 == *v84)
          {
            if (!__stxr(v86, v84))
              goto LABEL_90;
          }
          else
          {
            __clrex();
          }
        }
        *v84 = 0;
LABEL_90:
        v87 = v19 + 6;
        while (1)
        {
          v88 = *(_QWORD *)(v20 + 216);
          if (!v88)
            break;
          v89 = *v87 & v88;
          if (*v87 == v89)
            goto LABEL_93;
          v149 = __ldxr(v87);
          if (v149 == *v87)
          {
            if (!__stxr(v89, v87))
              goto LABEL_93;
          }
          else
          {
            __clrex();
          }
        }
        *v87 = 0;
LABEL_93:
        v90 = v19 + 7;
        while (1)
        {
          v91 = *(_QWORD *)(v20 + 224);
          if (!v91)
            break;
          v92 = *v90 & v91;
          if (*v90 == v92)
            goto LABEL_96;
          v150 = __ldxr(v90);
          if (v150 == *v90)
          {
            if (!__stxr(v92, v90))
              goto LABEL_96;
          }
          else
          {
            __clrex();
          }
        }
        *v90 = 0;
LABEL_96:
        v93 = v19 + 8;
        while (1)
        {
          v94 = *(_QWORD *)(v20 + 232);
          if (!v94)
            break;
          v95 = *v93 & v94;
          if (*v93 == v95)
            goto LABEL_99;
          v151 = __ldxr(v93);
          if (v151 == *v93)
          {
            if (!__stxr(v95, v93))
              goto LABEL_99;
          }
          else
          {
            __clrex();
          }
        }
        *v93 = 0;
LABEL_99:
        v96 = v19 + 9;
        while (1)
        {
          v97 = *(_QWORD *)(v20 + 240);
          if (!v97)
            break;
          v98 = *v96 & v97;
          if (*v96 == v98)
            goto LABEL_102;
          v152 = __ldxr(v96);
          if (v152 == *v96)
          {
            if (!__stxr(v98, v96))
              goto LABEL_102;
          }
          else
          {
            __clrex();
          }
        }
        *v96 = 0;
LABEL_102:
        v99 = v19 + 10;
        while (1)
        {
          v100 = *(_QWORD *)(v20 + 248);
          if (!v100)
            break;
          v101 = *v99 & v100;
          if (*v99 == v101)
            goto LABEL_105;
          v153 = __ldxr(v99);
          if (v153 == *v99)
          {
            if (!__stxr(v101, v99))
              goto LABEL_105;
          }
          else
          {
            __clrex();
          }
        }
        *v99 = 0;
LABEL_105:
        v102 = v19 + 11;
        while (1)
        {
          v103 = *(_QWORD *)(v20 + 256);
          if (!v103)
            break;
          v104 = *v102 & v103;
          if (*v102 == v104)
            goto LABEL_108;
          v154 = __ldxr(v102);
          if (v154 == *v102)
          {
            if (!__stxr(v104, v102))
              goto LABEL_108;
          }
          else
          {
            __clrex();
          }
        }
        *v102 = 0;
LABEL_108:
        v105 = v19 + 12;
        while (1)
        {
          v106 = *(_QWORD *)(v20 + 264);
          if (!v106)
            break;
          v107 = *v105 & v106;
          if (*v105 == v107)
            goto LABEL_111;
          v155 = __ldxr(v105);
          if (v155 == *v105)
          {
            if (!__stxr(v107, v105))
              goto LABEL_111;
          }
          else
          {
            __clrex();
          }
        }
        *v105 = 0;
LABEL_111:
        v108 = v19 + 13;
        while (1)
        {
          v109 = *(_QWORD *)(v20 + 272);
          if (!v109)
            break;
          v110 = *v108 & v109;
          if (*v108 == v110)
            goto LABEL_114;
          v156 = __ldxr(v108);
          if (v156 == *v108)
          {
            if (!__stxr(v110, v108))
              goto LABEL_114;
          }
          else
          {
            __clrex();
          }
        }
        *v108 = 0;
LABEL_114:
        v111 = v19 + 14;
        while (1)
        {
          v112 = *(_QWORD *)(v20 + 280);
          if (!v112)
            break;
          v113 = *v111 & v112;
          if (*v111 == v113)
            goto LABEL_117;
          v157 = __ldxr(v111);
          if (v157 == *v111)
          {
            if (!__stxr(v113, v111))
              goto LABEL_117;
          }
          else
          {
            __clrex();
          }
        }
        *v111 = 0;
LABEL_117:
        v69 = v19 + 15;
        while (1)
        {
          v114 = *(_QWORD *)(v20 + 288);
          if (!v114)
            goto LABEL_121;
          v115 = *v69 & v114;
          if (*v69 == v115)
            goto LABEL_5;
          v158 = __ldxr(v69);
          if (v158 == *v69)
          {
            if (!__stxr(v115, v69))
              goto LABEL_5;
          }
          else
          {
            __clrex();
          }
        }
      }
      if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5) + 4) >> v18) & 1) == 0)
      {
        v22 = *((_QWORD *)a2 + 10);
        v23 = *(_DWORD *)(v22 + 432);
        v24 = *(_DWORD *)(v20 + 32);
        if (*(_BYTE *)(v22 + 445))
        {
          if (*(_BYTE *)(v21 + 347) == 1)
          {
            if (!v24)
              goto LABEL_13;
            v126 = v24 + 1;
            if (v24 == -1)
              v126 = 2;
            v116 = v126 == v23;
          }
          else
          {
            v116 = 0;
          }
          if (v24 == v23 || v116)
          {
LABEL_13:
            while (1)
            {
              v25 = *(_QWORD *)(v20 + 40);
              if (!v25)
                break;
              v26 = *v19 & v25;
              if (*v19 == v26)
                goto LABEL_15;
              v128 = __ldxr(v19);
              if (v128 == *v19)
              {
                if (!__stxr(v26, v19))
                  goto LABEL_15;
              }
              else
              {
                __clrex();
              }
            }
            *v19 = 0;
LABEL_15:
            v27 = v19 + 1;
            while (1)
            {
              v28 = *(_QWORD *)(v20 + 48);
              if (!v28)
                break;
              v29 = *v27 & v28;
              if (*v27 == v29)
                goto LABEL_18;
              v129 = __ldxr(v27);
              if (v129 == *v27)
              {
                if (!__stxr(v29, v27))
                  goto LABEL_18;
              }
              else
              {
                __clrex();
              }
            }
            *v27 = 0;
LABEL_18:
            v30 = v19 + 2;
            while (1)
            {
              v31 = *(_QWORD *)(v20 + 56);
              if (!v31)
                break;
              v32 = *v30 & v31;
              if (*v30 == v32)
                goto LABEL_21;
              v130 = __ldxr(v30);
              if (v130 == *v30)
              {
                if (!__stxr(v32, v30))
                  goto LABEL_21;
              }
              else
              {
                __clrex();
              }
            }
            *v30 = 0;
LABEL_21:
            v33 = v19 + 3;
            while (1)
            {
              v34 = *(_QWORD *)(v20 + 64);
              if (!v34)
                break;
              v35 = *v33 & v34;
              if (*v33 == v35)
                goto LABEL_24;
              v131 = __ldxr(v33);
              if (v131 == *v33)
              {
                if (!__stxr(v35, v33))
                  goto LABEL_24;
              }
              else
              {
                __clrex();
              }
            }
            *v33 = 0;
LABEL_24:
            v36 = v19 + 4;
            while (1)
            {
              v37 = *(_QWORD *)(v20 + 72);
              if (!v37)
                break;
              v38 = *v36 & v37;
              if (*v36 == v38)
                goto LABEL_27;
              v132 = __ldxr(v36);
              if (v132 == *v36)
              {
                if (!__stxr(v38, v36))
                  goto LABEL_27;
              }
              else
              {
                __clrex();
              }
            }
            *v36 = 0;
LABEL_27:
            v39 = v19 + 5;
            while (1)
            {
              v40 = *(_QWORD *)(v20 + 80);
              if (!v40)
                break;
              v41 = *v39 & v40;
              if (*v39 == v41)
                goto LABEL_30;
              v133 = __ldxr(v39);
              if (v133 == *v39)
              {
                if (!__stxr(v41, v39))
                  goto LABEL_30;
              }
              else
              {
                __clrex();
              }
            }
            *v39 = 0;
LABEL_30:
            v42 = v19 + 6;
            while (1)
            {
              v43 = *(_QWORD *)(v20 + 88);
              if (!v43)
                break;
              v44 = *v42 & v43;
              if (*v42 == v44)
                goto LABEL_33;
              v134 = __ldxr(v42);
              if (v134 == *v42)
              {
                if (!__stxr(v44, v42))
                  goto LABEL_33;
              }
              else
              {
                __clrex();
              }
            }
            *v42 = 0;
LABEL_33:
            v45 = v19 + 7;
            while (1)
            {
              v46 = *(_QWORD *)(v20 + 96);
              if (!v46)
                break;
              v47 = *v45 & v46;
              if (*v45 == v47)
                goto LABEL_36;
              v135 = __ldxr(v45);
              if (v135 == *v45)
              {
                if (!__stxr(v47, v45))
                  goto LABEL_36;
              }
              else
              {
                __clrex();
              }
            }
            *v45 = 0;
LABEL_36:
            v48 = v19 + 8;
            while (1)
            {
              v49 = *(_QWORD *)(v20 + 104);
              if (!v49)
                break;
              v50 = *v48 & v49;
              if (*v48 == v50)
                goto LABEL_39;
              v136 = __ldxr(v48);
              if (v136 == *v48)
              {
                if (!__stxr(v50, v48))
                  goto LABEL_39;
              }
              else
              {
                __clrex();
              }
            }
            *v48 = 0;
LABEL_39:
            v51 = v19 + 9;
            while (1)
            {
              v52 = *(_QWORD *)(v20 + 112);
              if (!v52)
                break;
              v53 = *v51 & v52;
              if (*v51 == v53)
                goto LABEL_42;
              v137 = __ldxr(v51);
              if (v137 == *v51)
              {
                if (!__stxr(v53, v51))
                  goto LABEL_42;
              }
              else
              {
                __clrex();
              }
            }
            *v51 = 0;
LABEL_42:
            v54 = v19 + 10;
            while (1)
            {
              v55 = *(_QWORD *)(v20 + 120);
              if (!v55)
                break;
              v56 = *v54 & v55;
              if (*v54 == v56)
                goto LABEL_45;
              v138 = __ldxr(v54);
              if (v138 == *v54)
              {
                if (!__stxr(v56, v54))
                  goto LABEL_45;
              }
              else
              {
                __clrex();
              }
            }
            *v54 = 0;
LABEL_45:
            v57 = v19 + 11;
            while (1)
            {
              v58 = *(_QWORD *)(v20 + 128);
              if (!v58)
                break;
              v59 = *v57 & v58;
              if (*v57 == v59)
                goto LABEL_48;
              v139 = __ldxr(v57);
              if (v139 == *v57)
              {
                if (!__stxr(v59, v57))
                  goto LABEL_48;
              }
              else
              {
                __clrex();
              }
            }
            *v57 = 0;
LABEL_48:
            v60 = v19 + 12;
            while (1)
            {
              v61 = *(_QWORD *)(v20 + 136);
              if (!v61)
                break;
              v62 = *v60 & v61;
              if (*v60 == v62)
                goto LABEL_51;
              v140 = __ldxr(v60);
              if (v140 == *v60)
              {
                if (!__stxr(v62, v60))
                  goto LABEL_51;
              }
              else
              {
                __clrex();
              }
            }
            *v60 = 0;
LABEL_51:
            v63 = v19 + 13;
            while (1)
            {
              v64 = *(_QWORD *)(v20 + 144);
              if (!v64)
                break;
              v65 = *v63 & v64;
              if (*v63 == v65)
                goto LABEL_54;
              v141 = __ldxr(v63);
              if (v141 == *v63)
              {
                if (!__stxr(v65, v63))
                  goto LABEL_54;
              }
              else
              {
                __clrex();
              }
            }
            *v63 = 0;
LABEL_54:
            v66 = v19 + 14;
            while (1)
            {
              v67 = *(_QWORD *)(v20 + 152);
              if (!v67)
                break;
              v68 = *v66 & v67;
              if (*v66 == v68)
                goto LABEL_57;
              v142 = __ldxr(v66);
              if (v142 == *v66)
              {
                if (!__stxr(v68, v66))
                  goto LABEL_57;
              }
              else
              {
                __clrex();
              }
            }
            *v66 = 0;
LABEL_57:
            v69 = v19 + 15;
            while (1)
            {
              v12 = *(_QWORD *)(v20 + 160);
              if (!v12)
                break;
              v13 = *v69 & v12;
              if (*v69 == v13)
                goto LABEL_5;
              v127 = __ldxr(v69);
              if (v127 == *v69)
              {
                if (!__stxr(v13, v69))
                  goto LABEL_5;
              }
              else
              {
                __clrex();
              }
            }
LABEL_121:
            *v69 = 0;
            goto LABEL_5;
          }
        }
        else if (v24 == v23)
        {
          goto LABEL_13;
        }
      }
      v117 = (unsigned __int8 *)(v9[3] + 144);
      if (__ldaxr(v117))
        break;
      if (__stxr(1u, v117))
        goto LABEL_128;
LABEL_129:
      *(_DWORD *)&v9[4][((unint64_t)*((unsigned int *)a2 + 3) >> 3) & 0x1FFFFFFC] &= ~(1 << *((_DWORD *)a2 + 3));
      v119 = __ldxr(v117);
      if (v119 != 1)
      {
        __clrex();
LABEL_133:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v117, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_134;
      }
      if (__stlxr(0, v117))
        goto LABEL_133;
LABEL_134:
      v120 = *((_DWORD *)a2 + 3);
      v121 = *(_QWORD *)&v9[7][(v120 & 0xFFFFFFF8) + 8];
      v122 = v120 & 7;
      v123 = *(_QWORD *)(v121 + 8 * v122);
      *(_QWORD *)(v121 + 8 * v122) = 0;
      if (v123)
      {
        v124 = *(_QWORD *)(StatusReg + 752);
        if (v124)
        {
          if (!(v123 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v123 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v123)) & 1) != 0)
          {
LABEL_138:
            v125 = *(unsigned int *)(v124 + 8000);
            if (v125 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v124, v123, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v124 + 8 * v125) = v123 | 0x5000000000000;
              *(_DWORD *)(v124 + 8000) = v125 + 1;
            }
            goto LABEL_5;
          }
          if (v123 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v123 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v123 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v123) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_138;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v124, v123, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v123, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_5:
      v9 = (char **)v17;
      if (v17 == v8)
        return;
    }
    __clrex();
LABEL_128:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v117);
    goto LABEL_129;
  }
}

JSC::GCClient::IsoSubspace *JSC::GCClient::IsoSubspace::IsoSubspace(JSC::GCClient::IsoSubspace *this, JSC::IsoSubspace *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned __int8 *v11;
  _QWORD *v13;
  int v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v10 = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 2) = (char *)a2 + 88;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 15) = v10;
  v11 = (unsigned __int8 *)a2 + 145;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 145))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 145);
    goto LABEL_4;
  }
  if (__stxr(1u, v11))
    goto LABEL_3;
LABEL_4:
  v13 = (_QWORD *)*((_QWORD *)a2 + 25);
  *(_QWORD *)this = (char *)a2 + 192;
  *((_QWORD *)this + 1) = v13;
  *v13 = this;
  *((_QWORD *)a2 + 25) = this;
  v14 = __ldxr(v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, v11))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return this;
}

{
  int v10;
  unsigned __int8 *v11;
  _QWORD *v13;
  int v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v10 = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 2) = (char *)a2 + 88;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_DWORD *)this + 15) = v10;
  v11 = (unsigned __int8 *)a2 + 145;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (__ldaxr((unsigned __int8 *)a2 + 145))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 145);
LABEL_5:
  v13 = (_QWORD *)*((_QWORD *)a2 + 25);
  *(_QWORD *)this = (char *)a2 + 192;
  *((_QWORD *)this + 1) = v13;
  *v13 = this;
  *((_QWORD *)a2 + 25) = this;
  v14 = __ldxr(v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, v11))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return this;
}

uint64_t JSC::IsoSubspacePerVM::IsoSubspacePerVM(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

{
  uint64_t v2;

  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

void JSC::IsoSubspacePerVM::~IsoSubspacePerVM(JSC::IsoSubspacePerVM *this)
{
  __break(0xC471u);
}

{
  __break(0xC471u);
}

JSC::VM *JSC::IsoSubspacePerVM::clientIsoSubspaceforVM(JSC::IsoSubspacePerVM *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  JSC::VM **v18;
  JSC::VM *v19;
  JSC::VM **v20;
  int v21;
  uint64_t v22;
  int v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char **v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  char **v39;
  char *v40;
  char **v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v62;
  char *v63;
  int v64;
  WTF *v65;
  char *v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t *v71;
  int v72;
  char **v73;
  uint64_t v74;
  char *v75;
  int v76;
  JSC::IsoSubspacePerVM *v78;
  WTF *v79;
  WTF *v80[3];

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_5:
  v12 = (uint64_t *)((char *)this + 16);
  v11 = *((_QWORD *)this + 2);
  if (v11
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *v12) != 0))
  {
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = (JSC::VM **)(v11 + 16 * v17);
  v19 = *v18;
  if (!*v18)
  {
LABEL_16:
    *v18 = a2;
    v18[1] = 0;
    v22 = *v12;
    if (*v12)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *v12;
    if (*v12)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_31;
    }
    else
    {
      if (3 * v28 > 4 * v27)
        goto LABEL_31;
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_30;
      }
    }
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_30:
    v18 = (JSC::VM **)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 2, v29, (uint64_t)v18, a4, a5, a6, a7, a8);
    goto LABEL_31;
  }
  v20 = 0;
  v21 = 1;
  while (v19 != a2)
  {
    if (v19 == (JSC::VM *)-1)
      v20 = v18;
    v17 = (v17 + v21) & v13;
    v18 = (JSC::VM **)(v11 + 16 * v17);
    v19 = *v18;
    ++v21;
    if (!*v18)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        --*(_DWORD *)(*v12 - 16);
        v18 = v20;
      }
      goto LABEL_16;
    }
  }
  v24 = v18[1];
  if (v24)
    goto LABEL_90;
LABEL_31:
  v30 = (char **)((char *)a2 + 37536);
  v31 = (char *)a2 + 192;
  v33 = (uint64_t *)((char *)this + 8);
  v32 = *((_QWORD *)this + 1);
  if (v32
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 1, 8uLL, 0, a4, a5, a6, a7, a8), (v32 = *v33) != 0))
  {
    v34 = *(_DWORD *)(v32 - 8);
  }
  else
  {
    v34 = 0;
  }
  v35 = (unint64_t)&v31[~((_QWORD)v31 << 32)] ^ ((unint64_t)&v31[~((_QWORD)v31 << 32)] >> 22);
  v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
  v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
  v38 = v34 & ((v37 >> 31) ^ v37);
  v39 = (char **)(v32 + 16 * v38);
  v40 = *v39;
  if (!*v39)
  {
LABEL_42:
    *v39 = v31;
    v39[1] = 0;
    v43 = *v33;
    if (*v33)
      v44 = *(_DWORD *)(v43 - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(v43 - 12) = v44;
    v45 = *v33;
    if (*v33)
      v46 = *(_DWORD *)(v45 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v45 - 16) + v46);
    v48 = *(unsigned int *)(v45 - 4);
    if (v48 > 0x400)
    {
      if (v48 > 2 * v47)
      {
LABEL_55:
        (*(void (**)(WTF **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 3) + 16))(v80, *((_QWORD *)this + 3), (char *)a2 + 192);
        v50 = WTF::fastMalloc((WTF *)0xF8);
        v52 = v80[0];
        if (v80[0])
          ++*(_DWORD *)v80[0];
        v78 = 0;
        v79 = v52;
        v39[1] = (char *)JSC::IsoSubspace::IsoSubspace(v50, (_DWORD **)&v79, (uint64_t)a2 + 192, (uint64_t)v80[1], (uint64_t)v80[2], 0, &v78, v51);
        if (v78)
          (*(void (**)(JSC::IsoSubspacePerVM *))(*(_QWORD *)v78 + 8))(v78);
        v79 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 1)
            WTF::fastFree((unint64_t)v52, v53, v54, v55, v56, v57, v58, v59);
          else
            --*(_DWORD *)v52;
        }
        v60 = (unsigned __int8 *)a2 + 200;
        if (__ldaxr(v60))
        {
          __clrex();
        }
        else if (!__stxr(1u, v60))
        {
          goto LABEL_66;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v60);
LABEL_66:
        v78 = this;
        v62 = *((unsigned int *)v30 + 3);
        if ((_DWORD)v62 == *((_DWORD *)v30 + 2))
        {
          v63 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v62 + 1, (unint64_t)&v78);
          v62 = *((unsigned int *)v30 + 3);
          *(_QWORD *)&(*v30)[8 * v62] = *(_QWORD *)v63;
        }
        else
        {
          *(_QWORD *)&(*v30)[8 * v62] = this;
        }
        *((_DWORD *)v30 + 3) = v62 + 1;
        v64 = __ldxr(v60);
        if (v64 == 1)
        {
          if (!__stlxr(0, v60))
          {
LABEL_74:
            v65 = v80[0];
            v80[0] = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 1)
                WTF::fastFree((unint64_t)v65, v53, v54, v55, v56, v57, v58, v59);
              else
                --*(_DWORD *)v65;
            }
            goto LABEL_77;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v60, 0, v54, v55, v56, v57, v58, v59);
        goto LABEL_74;
      }
    }
    else
    {
      if (3 * v48 > 4 * v47)
        goto LABEL_55;
      if (!(_DWORD)v48)
      {
        v49 = 8;
        goto LABEL_54;
      }
    }
    v49 = ((_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48)));
LABEL_54:
    v39 = (char **)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 1, v49, (uint64_t)v39, a4, a5, a6, a7, a8);
    goto LABEL_55;
  }
  v41 = 0;
  v42 = 1;
  while (v40 != v31)
  {
    if (v40 == (char *)-1)
      v41 = v39;
    v38 = (v38 + v42) & v34;
    v39 = (char **)(v32 + 16 * v38);
    v40 = *v39;
    ++v42;
    if (!*v39)
    {
      if (v41)
      {
        *v41 = 0;
        v41[1] = 0;
        --*(_DWORD *)(*v33 - 16);
        v39 = v41;
      }
      goto LABEL_42;
    }
  }
LABEL_77:
  v66 = v39[1];
  v67 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = v66 + 88;
  v68 = *((_DWORD *)v66 + 37);
  *(_QWORD *)(v67 + 24) = 0;
  *(_QWORD *)(v67 + 32) = 0;
  *(_QWORD *)(v67 + 40) = 1;
  *(_QWORD *)(v67 + 48) = 0;
  *(_DWORD *)(v67 + 56) = 0;
  *(_DWORD *)(v67 + 60) = v68;
  v69 = (unsigned __int8 *)(v66 + 145);
  *(_QWORD *)(v67 + 64) = 0;
  *(_QWORD *)(v67 + 72) = 0;
  *(_DWORD *)(v67 + 80) = 0;
  if (__ldaxr((unsigned __int8 *)v66 + 145))
  {
    __clrex();
  }
  else if (!__stxr(1u, v69))
  {
    goto LABEL_81;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v66 + 145));
LABEL_81:
  v71 = (uint64_t *)*((_QWORD *)v66 + 25);
  *(_QWORD *)v67 = v66 + 192;
  *(_QWORD *)(v67 + 8) = v71;
  *v71 = v67;
  *((_QWORD *)v66 + 25) = v67;
  v72 = __ldxr(v69);
  if (v72 == 1)
  {
    if (!__stlxr(0, v69))
      goto LABEL_86;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v66 + 145, 0, a3, a4, a5, a6, a7, a8);
LABEL_86:
  v18[1] = (JSC::VM *)v67;
  v73 = v30 + 486;
  v80[0] = this;
  v74 = *((unsigned int *)v30 + 975);
  if ((_DWORD)v74 == *((_DWORD *)v30 + 974))
  {
    v75 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73, v74 + 1, (unint64_t)v80);
    v74 = *((unsigned int *)v30 + 975);
    *(_QWORD *)&v30[486][8 * v74] = *(_QWORD *)v75;
  }
  else
  {
    *(_QWORD *)&(*v73)[8 * v74] = this;
  }
  *((_DWORD *)v30 + 975) = v74 + 1;
  v24 = v18[1];
LABEL_90:
  v76 = __ldxr((unsigned __int8 *)this);
  if (v76 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)this))
      return v24;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
  return v24;
}

void JSC::IsoSubspacePerVM::releaseIsoSubspace(JSC::IsoSubspacePerVM *this, JSC::Heap *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::Heap *v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_5:
  v11 = (uint64_t *)((char *)this + 8);
  v12 = *((_QWORD *)this + 1);
  if (!v12)
    goto LABEL_13;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(JSC::Heap **)(v12 + 16 * v17);
  if (v18 != a2)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(JSC::Heap **)(v12 + 16 * v17);
      ++v19;
      if (v18 == a2)
        goto LABEL_12;
    }
    v17 = *(unsigned int *)(v12 - 4);
  }
LABEL_12:
  if (v17 != *(_DWORD *)(v12 - 4))
  {
    v22 = (_QWORD *)(v12 + 16 * v17);
    v20 = v22[1];
    *v22 = -1;
    ++*(_DWORD *)(*v11 - 16);
    v23 = *v11;
    if (*v11)
      v24 = *(_DWORD *)(v23 - 12) - 1;
    else
      v24 = -1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v11;
    if (*v11)
    {
      v26 = 6 * *(_DWORD *)(v25 - 12);
      v27 = *(_DWORD *)(v25 - 4);
      if (v26 < v27 && v27 >= 9)
        WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v11, v27 >> 1, 0, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_13:
    v20 = 0;
  }
  v21 = __ldxr((unsigned __int8 *)this);
  if (v21 != 1)
  {
    __clrex();
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
    if (v20)
      goto LABEL_17;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
    goto LABEL_19;
  if (v20)
LABEL_17:
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

void JSC::IsoSubspacePerVM::releaseClientIsoSubspace(JSC::IsoSubspacePerVM *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  int v19;
  JSC::LocalAllocator *v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_5:
  v11 = (uint64_t *)((char *)this + 16);
  v12 = *((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_13;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(JSC::VM **)(v12 + 16 * v17);
  if (v18 != (JSC::VM *)a2)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(JSC::VM **)(v12 + 16 * v17);
      ++v19;
      if (v18 == (JSC::VM *)a2)
        goto LABEL_12;
    }
    v17 = *(unsigned int *)(v12 - 4);
  }
LABEL_12:
  if (v17 != *(_DWORD *)(v12 - 4))
  {
    v30 = (_QWORD *)(v12 + 16 * v17);
    v20 = (JSC::LocalAllocator *)v30[1];
    *v30 = -1;
    ++*(_DWORD *)(*v11 - 16);
    v31 = *v11;
    if (*v11)
      v32 = *(_DWORD *)(v31 - 12) - 1;
    else
      v32 = -1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *v11;
    if (*v11)
    {
      v34 = 6 * *(_DWORD *)(v33 - 12);
      v35 = *(_DWORD *)(v33 - 4);
      if (v34 < v35 && v35 >= 9)
        WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::CodeBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::CodeBlock *>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::CodeBlock *,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v11, v35 >> 1, 0, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_13:
    v20 = 0;
  }
  v21 = __ldxr((unsigned __int8 *)this);
  if (v21 != 1)
  {
    __clrex();
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, a3, a4, a5, a6, a7, a8);
    if (v20)
      goto LABEL_17;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
    goto LABEL_19;
  if (v20)
  {
LABEL_17:
    JSC::LocalAllocator::~LocalAllocator(v20, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
}

void JSC::JITStubRoutineSet::~JITStubRoutineSet(JSC::JITStubRoutineSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  JSC::GCAwareJITStubRoutineWithExceptionHandler *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  JSC::GCAwareJITStubRoutineWithExceptionHandler *v18;
  char v19;

  v9 = *((unsigned int *)this + 3);
  if ((_DWORD)v9)
  {
    v16 = 16 * v9;
    v17 = *(_QWORD *)this + 8;
    do
    {
      v18 = *(JSC::GCAwareJITStubRoutineWithExceptionHandler **)v17;
      v19 = *(_BYTE *)(*(_QWORD *)v17 + 40);
      *(_BYTE *)(*(_QWORD *)v17 + 40) = v19 & 0xFE;
      if ((v19 & 2) != 0)
        JSC::JITStubRoutine::operator delete(v18, a2, a3, a4, a5, a6, a7, a8);
      else
        *((_BYTE *)v18 + 40) = v19 & 0xFC | 2;
      v17 += 16;
      v16 -= 16;
    }
    while (v16);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *((unsigned int *)this + 7);
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    do
    {
      v14 = *(JSC::GCAwareJITStubRoutineWithExceptionHandler **)v10;
      v15 = *(_BYTE *)(*(_QWORD *)v10 + 40);
      *(_BYTE *)(*(_QWORD *)v10 + 40) = v15 & 0xFE;
      if ((v15 & 2) != 0)
        JSC::JITStubRoutine::operator delete(v14, a2, a3, a4, a5, a6, a7, a8);
      else
        *((_BYTE *)v14 + 40) = v15 & 0xFC | 2;
      v10 += 8;
      v13 -= 8;
    }
    while (v13);
    v10 = *((_QWORD *)this + 2);
  }
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JITStubRoutineSet::add(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = a2;
  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!result)
    result = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(result + 5) & 8) != 0)
  {
    result = 63;
    __break(0xC471u);
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    v5 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v5 == *(_DWORD *)(a1 + 24))
    {
      result = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, v5 + 1, (unint64_t)&v12);
      v10 = *(unsigned int *)(a1 + 28);
      v6 = v10 + 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *(_QWORD *)result;
    }
    else
    {
      v6 = v5 + 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
    }
    *(_DWORD *)(a1 + 28) = v6;
  }
  else
  {
    *(_QWORD *)&v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    *((_QWORD *)&v11 + 1) = a2;
    v7 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 8))
    {
      result = WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v11);
      v7 = *(unsigned int *)(a1 + 12);
      v8 = *(_QWORD *)a1;
      v9 = *(_OWORD *)result;
    }
    else
    {
      v8 = *(_QWORD *)a1;
      v9 = v11;
    }
    *(_OWORD *)(v8 + 16 * v7) = v9;
    ++*(_DWORD *)(a1 + 12);
  }
  return result;
}

uint64_t JSC::JITStubRoutineSet::markSlow(uint64_t this, unint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(unint64_t **)this;
  v3 = *(unint64_t **)this;
  v4 = *(unsigned int *)(this + 12);
  if (v4 < 2)
  {
    if (!v3)
      return this;
  }
  else
  {
    v5 = 0;
    v6 = *(unsigned int *)(this + 12);
    while (1)
    {
      v7 = v6 - 1;
      v8 = v3[2 * v5 + 2 * ((v6 - 1) >> 1)];
      if (v8 == a2)
        break;
      v6 -= (v7 >> 1) + 1;
      if (v8 <= a2)
      {
        v9 = (v7 >> 1) + 1;
      }
      else
      {
        v6 = v7 >> 1;
        v9 = 0;
      }
      v5 += v9;
      if (v6 <= 1)
        goto LABEL_17;
    }
    v5 += (v6 - 1) >> 1;
LABEL_17:
    v3 = &v2[2 * v5];
    if (v5 >= 1 && *(v3 - 2) <= a2)
    {
      v10 = *(v3 - 1);
      if ((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 + 8) + 4) + *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) > a2)
        goto LABEL_20;
    }
  }
  if (*v3 <= a2
    && (v10 = v3[1],
        (unint64_t)*(unsigned int *)(*(_QWORD *)(v10 + 8) + 4) + *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) > a2)
    || v3 + 2 < &v2[2 * v4]
    && v3[2] <= a2
    && (v10 = v3[3],
        (unint64_t)*(unsigned int *)(*(_QWORD *)(v10 + 8) + 4) + *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) > a2))
  {
LABEL_20:
    *(_BYTE *)(v10 + 40) |= 1u;
  }
  return this;
}

void JSC::JITStubRoutineSet::deleteUnmarkedJettisonedStubRoutines(JSC::JITStubRoutineSet *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  JSC::GCAwareJITStubRoutineWithExceptionHandler *v18;
  char v19;
  char v20;
  BOOL v21;
  char *v22;
  JSC::GCAwareJITStubRoutine **v23;
  uint64_t v24;
  JSC::GCAwareJITStubRoutine **v25;
  int v26;
  uint64_t v27;
  JSC::GCAwareJITStubRoutine **v28;
  JSC::GCAwareJITStubRoutine **v29;
  JSC::GCAwareJITStubRoutine *v30;
  char v31;
  char v32;
  JSC::GCAwareJITStubRoutine **v33;
  JSC::GCAwareJITStubRoutine **v34;

  v11 = *(_QWORD *)this;
  v12 = *((unsigned int *)this + 3);
  v13 = (char *)(*(_QWORD *)this + 16 * v12);
  v14 = 0;
  if ((_DWORD)v12)
  {
    v15 = (char *)(v11 + 16);
    v16 = (char *)(*(_QWORD *)this + 16 * v12);
    v17 = v16;
    while (1)
    {
      v18 = (JSC::GCAwareJITStubRoutineWithExceptionHandler *)*((_QWORD *)v15 - 1);
      v19 = *((_BYTE *)v18 + 40);
      if ((v19 & 4) == 0)
      {
        if (JSC::GCAwareJITStubRoutine::removeDeadOwners(*((JSC::GCAwareJITStubRoutine **)v15 - 1), a2, a9))v20 = 4;
        else
          v20 = 0;
        v19 = *((_BYTE *)v18 + 40) & 0xFB | v20;
        *((_BYTE *)v18 + 40) = v19;
      }
      if ((v19 & 1) != 0)
        goto LABEL_18;
      if ((v19 & 2) != 0)
        break;
      if ((v19 & 4) != 0)
      {
        *((_BYTE *)v18 + 40) = v19 | 2;
LABEL_13:
        if (v17 == (char *)(*(_QWORD *)this + 16 * *((unsigned int *)this + 3)))
        {
          v17 = v15 - 16;
        }
        else if (v15 - 16 != v16)
        {
          memmove(v17, v16, v11 - (_QWORD)v16);
          v17 += v11 - (_QWORD)v16;
        }
        ++v14;
        v16 = v15;
      }
LABEL_18:
      v11 += 16;
      v21 = v15 >= v13;
      v15 += 16;
      if (v21)
      {
        v11 = *(_QWORD *)this;
        LODWORD(v12) = *((_DWORD *)this + 3);
        v13 = v17;
        goto LABEL_21;
      }
    }
    JSC::JITStubRoutine::operator delete(v18, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v16 = (char *)(*(_QWORD *)this + 16 * v12);
LABEL_21:
  v22 = (char *)(v11 + 16 * v12);
  if (v16 != v22)
  {
    memmove(v13, v16, v22 - v16);
    LODWORD(v12) = *((_DWORD *)this + 3);
  }
  *((_DWORD *)this + 3) = v12 - v14;
  v23 = (JSC::GCAwareJITStubRoutine **)*((_QWORD *)this + 2);
  v24 = *((unsigned int *)this + 7);
  v25 = &v23[v24];
  v26 = 0;
  if ((_DWORD)v24)
  {
    v27 = *((_QWORD *)this + 2);
    v28 = &v23[v24];
    v29 = v28;
    while (1)
    {
      v30 = *v23;
      v31 = *((_BYTE *)*v23 + 40);
      if ((v31 & 4) == 0)
      {
        if (JSC::GCAwareJITStubRoutine::removeDeadOwners(*v23, a2, a9))
          v32 = 4;
        else
          v32 = 0;
        v31 = *((_BYTE *)v30 + 40) & 0xFB | v32;
        *((_BYTE *)v30 + 40) = v31;
      }
      if ((v31 & 1) != 0)
        goto LABEL_39;
      if ((v31 & 2) != 0)
        break;
      if ((v31 & 4) != 0)
      {
        *((_BYTE *)v30 + 40) = v31 | 2;
LABEL_35:
        v33 = v23;
        if (v29 != (JSC::GCAwareJITStubRoutine **)(*((_QWORD *)this + 2) + 8 * *((unsigned int *)this + 7)))
        {
          if (v23 == v28)
          {
            v33 = v29;
          }
          else
          {
            memmove(v29, v28, v27 - (_QWORD)v28);
            v33 = (JSC::GCAwareJITStubRoutine **)((char *)v29 + v27 - (_QWORD)v28);
          }
        }
        v28 = v23 + 1;
        ++v26;
        v29 = v33;
      }
LABEL_39:
      ++v23;
      v27 += 8;
      if (v23 >= v25)
      {
        v23 = (JSC::GCAwareJITStubRoutine **)*((_QWORD *)this + 2);
        LODWORD(v24) = *((_DWORD *)this + 7);
        v25 = v29;
        goto LABEL_42;
      }
    }
    JSC::JITStubRoutine::operator delete(v30, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_35;
  }
  v28 = &v23[v24];
LABEL_42:
  v34 = &v23[v24];
  if (v28 != v34)
  {
    memmove(v25, v28, (char *)v34 - (char *)v28);
    LODWORD(v24) = *((_DWORD *)this + 7);
  }
  *((_DWORD *)this + 7) = v24 - v26;
}

void JSC::LocalAllocator::~LocalAllocator(JSC::LocalAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 *v10;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;

  if (!*((_QWORD *)this + 1))
    goto LABEL_2;
  v10 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 57);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_13:
  v13 = *(_QWORD *)this;
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  *v12 = *(_QWORD *)this;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  LODWORD(v12) = __ldxr(v10);
  if ((_DWORD)v12 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_2:
  if (*((_QWORD *)this + 3) >= *((_QWORD *)this + 4) && (*((_BYTE *)this + 40) & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    v14 = this;
    WTF::dataLog<char [8],WTF::RawPointer,char [44]>(&v14);
    v9 = 0;
  }
  if (*((_QWORD *)this + 8))
  {
    v14 = this;
    WTF::dataLog<char [8],WTF::RawPointer,char [47]>(&v14);
    if (!*((_QWORD *)this + 9))
      goto LABEL_18;
LABEL_17:
    v14 = this;
    WTF::dataLog<char [8],WTF::RawPointer,char [51]>(&v14);
    goto LABEL_18;
  }
  if (*((_QWORD *)this + 9))
    goto LABEL_17;
  if ((v9 & 1) == 0)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1985E861CLL);
  }
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [44]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "->~LocalAllocator has non-empty free-list.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [47]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "->~LocalAllocator has non-null current block.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [51]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "->~LocalAllocator has non-null last active block.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

unint64_t JSC::LocalAllocator::allocateSlowCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  double *v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  JSC::BlockDirectory *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t result;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int v59;
  kern_return_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  JSC::BlockDirectory *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unsigned __int8 **v83;
  JSC::MarkedBlock::Handle *EmptyBlockToSteal;
  double v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t **v104;
  _QWORD *v105;
  unint64_t v106;
  double v107;
  char v108;
  JSC::MarkedBlock::Handle *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  WTF *v118;
  WTF::PrintStream *v119;
  uint64_t Block;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  JSC::SlotVisitor *v131;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  unsigned int *v134;
  unint64_t v135;
  char v136;
  _QWORD *v137;
  _QWORD v138[2];

  if (dword_1ECF4C598)
  {
    if (!JSC::LocalAllocator::doTestCollectionsIfNeeded(JSC::Heap &,JSC::GCDeferralContext *)::allocationCount
      && !*(_DWORD *)(a2 + 724))
    {
      if (a4)
      {
        *(_BYTE *)(a4 + 8) = 1;
      }
      else
      {
        LOWORD(task_info_out[0]) = 257;
        v134 = 0;
        JSC::Heap::collectNow((JSC::Heap *)a2, (void *)1, (uint64_t)task_info_out, 0, a5, a6, a7, a8);
        v127 = v134;
        v134 = 0;
        if (v127)
        {
          v128 = v127 + 2;
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (!v130)
          {
            atomic_store(1u, v127 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v127 + 8))(v127);
          }
        }
      }
    }
    if (++JSC::LocalAllocator::doTestCollectionsIfNeeded(JSC::Heap &,JSC::GCDeferralContext *)::allocationCount >= dword_1ECF4C598)
      JSC::LocalAllocator::doTestCollectionsIfNeeded(JSC::Heap &,JSC::GCDeferralContext *)::allocationCount = 0;
  }
  v13 = *(unsigned int *)(a1 + 56);
  v14 = *(double **)(a2 + 640);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 88) + *(_QWORD *)(a2 + 80);
    if (!v15)
      v15 = 1;
    v16 = (*(double (**)(_QWORD, uint64_t))(*(_QWORD *)v14 + 48))(*(_QWORD *)(a2 + 640), a2) * (double)v15;
    v17 = (*(double (**)(double *, uint64_t))(*(_QWORD *)v14 + 32))(v14, a2);
    v18 = v17
        / (*(double (**)(double *, unint64_t))(*(_QWORD *)v14 + 40))(v14, (unint64_t)v16);
    v19 = v14[5];
    if (v18 + v18 <= v19)
    {
      v14[5] = v18;
      v106 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
      if (v106 != -1)
      {
        *(_QWORD *)task_info_out = &v137;
        v138[0] = task_info_out;
        std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, v138, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
      }
      v107 = COERCE_DOUBLE(JSC::JSRunLoopTimer::Manager::timeUntilFire((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v14, a3, a4, a5, a6, a7, a8))- (v19- v18);
      if (!v108)
        v107 = v18;
      JSC::JSRunLoopTimer::setTimeUntilFire((uint64_t)v14, v107);
    }
  }
  *(_QWORD *)(a2 + 80) += v13;
  if (*(_BYTE *)(a2 + 253))
    v20 = *(_DWORD *)(a2 + 724) == 0;
  else
    v20 = 0;
  if (v20)
  {
    v85 = *(double *)(a2 + 144) + (double)v13 * *(double *)&qword_1ECF4C3F8;
    *(double *)(a2 + 144) = v85;
    if (fabs(v85) == INFINITY)
    {
      *(_QWORD *)(a2 + 144) = 0;
    }
    else if (v85 >= *(double *)&xmmword_1ECF4C3E8 && v85 > 0.0)
    {
      if (*((double *)&xmmword_1ECF4C3E8 + 1) < v85)
        v85 = *((double *)&xmmword_1ECF4C3E8 + 1);
      v131 = *(JSC::SlotVisitor **)(a2 + 408);
      *((_BYTE *)v131 + 187) = 1;
      *(double *)(a2 + 144) = *(double *)(a2 + 144)
                            - (double)(unint64_t)JSC::SlotVisitor::performIncrementOfDraining(v131, (unint64_t)v85, a3, a4, a5, a6, a7, a8);
      *((_BYTE *)v131 + 187) = 0;
    }
  }
  v21 = *(_QWORD *)(a1 + 64);
  if (!v21)
    goto LABEL_29;
  v22 = (unsigned int *)(*(_QWORD *)(v21 + 88) + 24);
  while (1)
  {
    v23 = *v22;
    if ((*v22 & 1) != 0)
      break;
    v24 = __ldaxr(v22);
    if (v24 == v23)
    {
      if (!__stxr((v23 | 1) + 4, v22))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)v22);
LABEL_16:
  *(_BYTE *)(v21 + 10) = 0;
  v25 = (unsigned __int8 *)(*(_QWORD *)(v21 + 24) + 56);
  if (__ldaxr(v25))
  {
    __clrex();
LABEL_18:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v25);
    goto LABEL_19;
  }
  if (__stxr(1u, v25))
    goto LABEL_18;
LABEL_19:
  v27 = *(JSC::BlockDirectory **)(v21 + 24);
  v28 = *((_QWORD *)v27 + 4);
  v29 = v28 + 40 * (*(_DWORD *)(v21 + 12) >> 5);
  *(_DWORD *)(v29 + 8) |= 1 << *(_DWORD *)(v21 + 12);
  v30 = v28 + 40 * (*(_DWORD *)(v21 + 12) >> 5);
  v33 = *(_DWORD *)(v30 + 28);
  v31 = (int *)(v30 + 28);
  v32 = v33;
  v34 = 1 << *(_DWORD *)(v21 + 12);
  if ((v34 & v33) == 0)
  {
    task_info_out[0] = *(_DWORD *)(v21 + 12);
    v118 = (WTF *)WTF::dataLogLn<char [44],unsigned int>("Finish using on a block that's not in use: ", task_info_out);
    v119 = (WTF::PrintStream *)WTF::dataFile(v118);
    JSC::BlockDirectory::dumpBits(v27, v119);
    __break(0xC471u);
    JUMPOUT(0x1985E9200);
  }
  *v31 = v32 & ~v34;
  v35 = __ldxr(v25);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v25))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, a3, a4, a5, a6, a7, a8);
  while (1)
  {
    v36 = *v22;
    if ((*v22 & 3) != 1)
      break;
    v37 = __ldxr(v22);
    if (v37 == v36)
    {
      if (!__stxr(v36 & 0xFFFFFFFE, v22))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
LABEL_29:
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 10))
  {
    __break(0xC471u);
    goto LABEL_162;
  }
  *(_BYTE *)(a2 + 10) = 1;
  if (*(_BYTE *)(a2 + 561) && HIBYTE(word_1ECF4C5CC))
  {
    if (*(_DWORD *)(a2 + 904) != 4)
    {
      if (a4)
      {
        *(_BYTE *)(a4 + 8) = 1;
      }
      else if (*(_DWORD *)(a2 + 724))
      {
        *(_BYTE *)(a2 + 1006) = 1;
      }
      else
      {
        JSC::Heap::stopIfNecessary(a2, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if ((_DWORD)qword_1ECF4C5D4)
    {
      if (*(_QWORD *)(a2 + 80) <= (unint64_t)qword_1ECF4C5D4)
        goto LABEL_32;
      goto LABEL_93;
    }
    v58 = *(_QWORD *)(a2 + 96);
    v59 = *(_DWORD *)(a2 + 1120) + 1;
    *(_DWORD *)(a2 + 1120) = v59;
    if (v59 <= 0x63)
    {
      if (!*(_BYTE *)(a2 + 1124))
        goto LABEL_92;
    }
    else
    {
      task_info_outCnt = 93;
      v60 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
      v61 = v135;
      v62 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
      if (v62 != -1)
      {
        v137 = v138;
        v138[0] = &v136;
        std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v137, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
      }
      v63 = (double)v61;
      if (v60)
        v63 = 0.0;
      v64 = v63 / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
      if (v64 > 1.0)
        v64 = 1.0;
      v65 = *(double *)&xmmword_1ECF4C398;
      *(_BYTE *)(a2 + 1124) = *(double *)&xmmword_1ECF4C398 < v64;
      *(_DWORD *)(a2 + 1120) = 0;
      if (v65 >= v64)
      {
LABEL_92:
        if (*(_QWORD *)(a2 + 80) <= v58)
          goto LABEL_32;
LABEL_93:
        if (a4)
        {
          *(_BYTE *)(a4 + 8) = 1;
        }
        else if (*(_DWORD *)(a2 + 724))
        {
          *(_BYTE *)(a2 + 1006) = 1;
        }
        else
        {
          LOWORD(task_info_out[0]) = 0;
          v134 = 0;
          JSC::Heap::collectAsync(a2, (unsigned __int8 *)task_info_out, a3, a4, a5, a6, a7, a8);
          JSC::Heap::stopIfNecessary(a2, v87, v88, v89, v90, v91, v92, v93);
        }
        goto LABEL_32;
      }
    }
    if (v58 >= *(_QWORD *)(a2 + 104))
      v58 = *(_QWORD *)(a2 + 104);
    goto LABEL_92;
  }
LABEL_32:
  if (*(_QWORD *)(a1 + 64))
  {
    result = *(_QWORD *)(a1 + 24);
    if (result >= *(_QWORD *)(a1 + 32))
    {
      result = *(_QWORD *)(a1 + 40);
      if ((result & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)(a2 - 192), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
        result = JSC::LocalAllocator::allocateSlowCase(a1, a2, a3, a4, a5);
      }
      else
      {
        v126 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = result + HIDWORD(v126);
        *(_QWORD *)(a1 + 40) = result + (int)v126;
        *(_QWORD *)(a1 + 24) = result + a3;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = result + a3;
    }
    goto LABEL_137;
  }
  while (1)
  {
    v38 = *(_QWORD *)(a1 + 16);
    v39 = (unsigned __int8 *)(v38 + 56);
    if (__ldaxr((unsigned __int8 *)(v38 + 56)))
    {
      __clrex();
LABEL_35:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v38 + 56);
      goto LABEL_36;
    }
    if (__stxr(1u, v39))
      goto LABEL_35;
LABEL_36:
    v41 = *(_QWORD *)(v38 + 32);
    v42 = *(unsigned int *)(v38 + 48);
    v43 = *(unsigned int *)(a1 + 80);
    v44 = v43 >> 5;
    if (v43 >> 5 >= (unint64_t)(v42 + 31) >> 5)
      goto LABEL_46;
    v45 = (*(_DWORD *)(v41 + 40 * v44 + 4) | *(_DWORD *)(v41 + 40 * v44 + 12)) & ~*(_DWORD *)(v41 + 40 * v44 + 28);
    if (!v45 || (v46 = (v43 & 0x1F) + __clz(__rbit32(v45 >> (v43 & 0x1F))), v46 >= 0x20))
    {
      v47 = (unint64_t)(v42 + 31) >> 5;
      if (v44 + 1 == v47)
        goto LABEL_46;
      v48 = (_DWORD *)(v41 + 40 * v44++ + 44);
      while (1)
      {
        v49 = (*v48 | v48[2]) & ~v48[6];
        if (v49)
          break;
        v48 += 10;
        if (v47 == ++v44)
          goto LABEL_46;
      }
      LODWORD(v46) = __clz(__rbit32(v49));
    }
    LODWORD(v42) = v46 + 32 * v44;
LABEL_46:
    *(_DWORD *)(a1 + 80) = v42;
    if (v42 >= (unint64_t)*(unsigned int *)(v38 + 12))
    {
      v50 = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 80) = v42 + 1;
      v50 = *(_QWORD *)(*(_QWORD *)v38 + 8 * v42);
      v51 = v41 + 40 * (v42 >> 5);
      v52 = 1 << v42;
      *(_DWORD *)(v51 + 12) &= ~v52;
      *(_DWORD *)(v51 + 28) |= v52;
    }
    v53 = __ldxr(v39);
    if (v53 == 1)
    {
      if (!__stlxr(0, v39))
        goto LABEL_50;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, a3, a4, a5, a6, a7, a8);
LABEL_50:
    if (!v50)
      break;
    JSC::MarkedBlock::Handle::sweep((JSC::MarkedBlock::Handle *)v50, (JSC::FreeList *)(a1 + 24), a3, a4, a5, a6, a7, a8);
    result = *(_QWORD *)(a1 + 24);
    if (result >= *(_QWORD *)(a1 + 32))
    {
      result = *(_QWORD *)(a1 + 40);
      if ((result & 1) == 0)
      {
        *(_QWORD *)(a1 + 64) = v50;
        v86 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = result + HIDWORD(v86);
        *(_QWORD *)(a1 + 40) = result + (int)v86;
        goto LABEL_53;
      }
      JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated((JSC::MarkedBlock::Handle *)v50, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = v50;
LABEL_53:
      *(_QWORD *)(a1 + 24) = result + a3;
      v55 = *(_QWORD *)(a1 + 16);
      v56 = *(_QWORD *)(v55 + 32) + 40 * (*(_DWORD *)(v50 + 12) >> 5);
      *(_DWORD *)(v56 + 20) |= 1 << *(_DWORD *)(v50 + 12);
      v57 = *(_QWORD **)(v50 + 40);
      if (v57)
      {
        v94 = *(_QWORD *)(*(_QWORD *)(v55 + 72) + 8);
        v96 = *(_QWORD *)(v50 + 32);
        v95 = (_QWORD *)(v50 + 32);
        *v57 = v96;
        *(_QWORD *)(v96 + 8) = v57;
        *v95 = 0;
        v95[1] = 0;
        v97 = *(_QWORD **)(v94 + 136);
        *v95 = v94 + 128;
        v95[1] = v97;
        *v97 = v95;
        *(_QWORD *)(v94 + 136) = v95;
      }
      if (result)
        goto LABEL_137;
    }
  }
  v66 = *(JSC::BlockDirectory **)(a1 + 16);
  if (BYTE2(qword_1ECF4C414) && (v67 = *((_QWORD *)v66 + 9), (v68 = *(_QWORD *)(v67 + 40)) != 0))
  {
    while (1)
    {
      EmptyBlockToSteal = (JSC::MarkedBlock::Handle *)JSC::BlockDirectory::findEmptyBlockToSteal(v68, a2, a3, a4, a5, a6, a7, a8);
      if (EmptyBlockToSteal)
        break;
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 40) + 96);
      *(_QWORD *)(v67 + 40) = v68;
      if (!v68)
      {
        v66 = *(JSC::BlockDirectory **)(a1 + 16);
        goto LABEL_77;
      }
    }
    v109 = EmptyBlockToSteal;
    if (*((_QWORD *)EmptyBlockToSteal + 2) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1985E92D0);
    }
    JSC::MarkedBlock::Handle::sweep(EmptyBlockToSteal, 0, a3, a4, a5, a6, a7, a8);
    v116 = *((_QWORD *)v109 + 3);
    if (v116)
      JSC::BlockDirectory::removeBlock(v116, (uint64_t)v109, 0);
LABEL_136:
    JSC::BlockDirectory::addBlock(*(JSC::BlockDirectory **)(a1 + 16), v109, v110, v111, v112, v113, v114, v115);
    result = JSC::LocalAllocator::allocateIn((JSC::LocalAllocator *)a1, v109, a3, v121, v122, v123, v124, v125);
  }
  else
  {
LABEL_77:
    v69 = *((_QWORD *)v66 + 9);
    if (!*(_BYTE *)(v69 + 64))
      goto LABEL_134;
    v70 = *(uint64_t **)(v69 + 216);
    if (v70 == (uint64_t *)(v69 + 216))
    {
      if (*(_BYTE *)(v69 + 65))
      {
        v71 = *(_QWORD *)(v69 + 8) - 160;
        v72 = *(unsigned int *)(v69 + 148);
        v73 = *(_BYTE *)(v69 + 65) - 1;
        *(_BYTE *)(v69 + 65) = v73;
        v74 = JSC::PreciseAllocation::tryCreateForLowerTier(v71, v72, v69, v73);
        if (v74)
        {
          v138[0] = v74;
          *((_DWORD *)v74 + 4) = *(_DWORD *)(*(_QWORD *)(v69 + 8) + 36);
          v74[32] |= 2u;
          v80 = *(_QWORD *)(v69 + 8);
          v81 = *(unsigned int *)(v80 + 36);
          if ((_DWORD)v81 == *(_DWORD *)(v80 + 32))
          {
            v105 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80 + 24, v81 + 1, (unint64_t)v138);
            v81 = *(unsigned int *)(v80 + 36);
            *(_QWORD *)(*(_QWORD *)(v80 + 24) + 8 * v81) = *v105;
            v74 = (unsigned __int8 *)v138[0];
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v80 + 24) + 8 * v81) = v74;
          }
          *(_DWORD *)(v80 + 36) = v81 + 1;
          v82 = *(uint64_t **)(*(_QWORD *)(v69 + 8) + 16);
          if (v82)
          {
            v137 = v74 + 112;
            WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v82, (uint64_t *)&v137, v75, v76, v77, v78, v79, (uint64_t)task_info_out);
            v74 = (unsigned __int8 *)v138[0];
          }
          v83 = *(unsigned __int8 ***)(v69 + 56);
          *(_QWORD *)v74 = v69 + 48;
          *((_QWORD *)v74 + 1) = v83;
          *v83 = v74;
          *(_QWORD *)(v69 + 56) = v74;
          goto LABEL_86;
        }
        v66 = *(JSC::BlockDirectory **)(a1 + 16);
      }
LABEL_134:
      Block = JSC::BlockDirectory::tryAllocateBlock(v66, (JSC::Heap *)a2);
      if (Block)
      {
        v109 = (JSC::MarkedBlock::Handle *)Block;
        goto LABEL_136;
      }
      if ((_DWORD)a5)
      {
        result = 0;
        goto LABEL_137;
      }
      __break(0xC471u);
LABEL_162:
      JUMPOUT(0x1985E91A4);
    }
    v99 = *v70;
    v98 = (uint64_t *)v70[1];
    *v98 = *v70;
    *(_QWORD *)(v99 + 8) = v98;
    *v70 = 0;
    v70[1] = 0;
    v138[0] = v70;
    *((_DWORD *)v70 + 4) = *(_DWORD *)(*(_QWORD *)(v69 + 8) + 36);
    *((_BYTE *)v70 + 32) |= 2u;
    v100 = *(_QWORD *)(v69 + 8);
    v101 = (_QWORD *)(v100 + 24);
    v102 = *(unsigned int *)(v100 + 36);
    if ((_DWORD)v102 == *(_DWORD *)(v100 + 32))
    {
      v117 = (_QWORD *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)v138);
      v102 = *(unsigned int *)(v100 + 36);
      *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * v102) = *v117;
      v70 = (uint64_t *)v138[0];
    }
    else
    {
      *(_QWORD *)(*v101 + 8 * v102) = v70;
    }
    *(_DWORD *)(v100 + 36) = v102 + 1;
    v103 = *(uint64_t **)(*(_QWORD *)(v69 + 8) + 16);
    if (v103)
    {
      v137 = v70 + 14;
      WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v103, (uint64_t *)&v137, a4, a5, a6, a7, a8, (uint64_t)task_info_out);
      v70 = (uint64_t *)v138[0];
    }
    v104 = *(uint64_t ***)(v69 + 56);
    *v70 = v69 + 48;
    v70[1] = (uint64_t)v104;
    *v104 = v70;
    *(_QWORD *)(v69 + 56) = v70;
LABEL_86:
    result = v138[0] + 112;
  }
LABEL_137:
  if (*(_BYTE *)(a2 + 10) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1985E92A0);
  }
  *(_BYTE *)(a2 + 10) = 0;
  return result;
}

unint64_t JSC::LocalAllocator::allocateIn(JSC::LocalAllocator *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  JSC::MarkedBlock::Handle::sweep(a2, (JSC::LocalAllocator *)((char *)this + 24), a3, a4, a5, a6, a7, a8);
  result = *((_QWORD *)this + 3);
  if (result >= *((_QWORD *)this + 4))
  {
    result = *((_QWORD *)this + 5);
    if ((result & 1) != 0)
    {
      JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated(a2, v11, v12, v13, v14, v15, v16, v17);
LABEL_10:
      result = 219;
      __break(0xC471u);
      return result;
    }
    *((_QWORD *)this + 8) = a2;
    v22 = *(_QWORD *)(result + 8) ^ *((_QWORD *)this + 6);
    *((_QWORD *)this + 4) = result + HIDWORD(v22);
    *((_QWORD *)this + 5) = result + (int)v22;
  }
  else
  {
    *((_QWORD *)this + 8) = a2;
  }
  *((_QWORD *)this + 3) = result + a3;
  v19 = *((_QWORD *)this + 2);
  v20 = *(_QWORD *)(v19 + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v20 + 20) |= 1 << *((_DWORD *)a2 + 3);
  v21 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v21)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v19 + 72) + 8);
    v25 = *((_QWORD *)a2 + 4);
    v24 = (_QWORD *)((char *)a2 + 32);
    *v21 = v25;
    *(_QWORD *)(v25 + 8) = v21;
    *v24 = 0;
    v24[1] = 0;
    v26 = *(_QWORD **)(v23 + 136);
    *v24 = v23 + 128;
    v24[1] = v26;
    *v26 = v24;
    *(_QWORD *)(v23 + 136) = v24;
  }
  if (!result)
    goto LABEL_10;
  return result;
}

uint64_t JSC::IsoCellSet::parallelNotEmptyMarkedBlockSource(void)::Task::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  if (*(_BYTE *)(a1 + 41))
    return 0;
  v9 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 40);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 48);
  v13 = *(_QWORD *)(a1 + 32) >> 5;
  if (v13 < (v12 + 31) >> 5)
  {
    v14 = *(_QWORD *)(v11 + 32);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    v16 = *(_DWORD *)(v15 + 4 * v13) & *(_DWORD *)(v14 + 40 * v13 + 32);
    if (v16)
    {
      v17 = (*(_QWORD *)(a1 + 32) & 0x1FLL) + __clz(__rbit32(v16 >> (*(_QWORD *)(a1 + 32) & 0x1F)));
      if (v17 < 0x20)
      {
LABEL_12:
        v12 = v17 + 32 * v13;
        goto LABEL_13;
      }
    }
    v18 = (v12 + 31) >> 5;
    if (v13 + 1 != v18)
    {
      v19 = (int *)(v14 + 40 * v13++ + 72);
      while (1)
      {
        v20 = *v19;
        v19 += 10;
        v21 = *(_DWORD *)(v15 + 4 * v13) & v20;
        if (v21)
          break;
        if (v18 == ++v13)
          goto LABEL_13;
      }
      v17 = __clz(__rbit32(v21));
      goto LABEL_12;
    }
  }
LABEL_13:
  *(_QWORD *)(a1 + 32) = v12;
  if (v12 >= *(unsigned int *)(v11 + 12))
  {
    v22 = 0;
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12 + 1;
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v12);
  }
  v23 = __ldxr(v9);
  if (v23 == 1)
  {
    if (!__stlxr(0, v9))
      return v22;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v22;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  __n128 *v40;
  uint64_t v41;
  unint64_t v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  unint64_t v50;
  unint64_t v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  unint64_t v55;
  __n128 *v56;
  unint64_t v57;
  unint64_t n128_u64;
  __n128 *v59;
  unint64_t v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 *v69;
  __n128 *v70;
  __n128 *v71;
  __n128 *v72;
  unint64_t v73;
  BOOL v75;
  uint64_t v76;
  __n128 *v77;
  __n128 *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __n128 *v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  __n128 *v87;
  unint64_t v88;
  BOOL v89;
  __n128 *v90;
  unint64_t v91;
  uint64_t v92;
  __n128 *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  __n128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __n128 *v106;
  unint64_t v107;
  unint64_t v108;
  __n128 *v109;
  uint64_t v110;
  uint64_t v111;
  __n128 *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  __n128 *v116;
  __n128 *v117;
  unint64_t v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  __int128 v31;
  __n128 v32;
  __n128 *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_u64[0] < a1->n128_u64[0])
        goto LABEL_6;
      return result;
    case 3:
      v8 = (__int128 *)&a1[1];
      v9 = a1[1].n128_u64[0];
      v7 = a2 - 1;
      v10 = a2[-1].n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v10 < v9)
        {
          v27 = *v8;
          *v8 = (__int128)*v7;
          *v7 = (__n128)v27;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            v28 = (__int128)*a1;
            *a1 = (__n128)*v8;
            *v8 = v28;
          }
        }
      }
      else
      {
        if (v10 < v9)
        {
LABEL_6:
          v11 = *a1;
          *a1 = *v7;
LABEL_7:
          *v7 = v11;
          return result;
        }
        v31 = (__int128)*a1;
        *a1 = (__n128)*v8;
        *v8 = v31;
        if (v7->n128_u64[0] < a1[1].n128_u64[0])
        {
          v11 = (__n128)*v8;
          *v8 = (__int128)*v7;
          goto LABEL_7;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, a3);
      v22 = a2[-1].n128_u64[0];
      v21 = a2 - 1;
      if (v22 < a1[3].n128_u64[0])
      {
        v23 = *v20;
        *v20 = *v21;
        *v21 = v23;
        if (v20->n128_u64[0] < v19->n128_u64[0])
        {
          v24 = *v19;
          *v19 = *v20;
          *v20 = v24;
          if (v19->n128_u64[0] < v18->n128_u64[0])
          {
            v25 = *v18;
            *v18 = *v19;
            *v19 = v25;
            if (a1[1].n128_u64[0] < a1->n128_u64[0])
            {
              v26 = *a1;
              *a1 = *v18;
              *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2].n128_u64[0];
      v14 = a1 + 1;
      v15 = a1[1].n128_u64[0];
      v16 = a1->n128_u64[0];
      if (v15 >= a1->n128_u64[0])
      {
        if (v13 < v15)
        {
          v29 = *v14;
          *v14 = *v12;
          *v12 = v29;
          if (v14->n128_u64[0] < v16)
          {
            v30 = *a1;
            *a1 = *v14;
            *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          v32 = *a1;
          *a1 = *v14;
          *v14 = v32;
          if (v13 >= a1[1].n128_u64[0])
            goto LABEL_28;
          v17 = *v14;
          *v14 = *v12;
        }
        else
        {
          v17 = *a1;
          *a1 = *v12;
        }
        *v12 = v17;
      }
LABEL_28:
      v33 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v34 = 0;
      v35 = 0;
      while (1)
      {
        v36 = v33->n128_u64[0];
        if (v33->n128_u64[0] < v12->n128_u64[0])
        {
          v37 = v33->n128_i64[1];
          v38 = v34;
          while (1)
          {
            *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
            if (v38 == -32)
              break;
            v39 = *(unint64_t *)((char *)a1[1].n128_u64 + v38);
            v38 -= 16;
            if (v36 >= v39)
            {
              v40 = (unint64_t *)((char *)a1[3].n128_u64 + v38);
              goto LABEL_36;
            }
          }
          v40 = (unint64_t *)a1;
LABEL_36:
          *v40 = v36;
          v40[1] = v37;
          if (++v35 == 8)
            return &v33[1] == a2;
        }
        v12 = v33;
        v34 += 16;
        if (++v33 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::JITStubRoutineSet::prepareForConservativeScan(void)::$_0 &,JSC::JITStubRoutineSet::Routine *>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;

  v5 = a2->n128_u64[0];
  v6 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

unint64_t *WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment::~Segment(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v9 = a1[7];
  a1[7] = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[6];
  a1[6] = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = a1[5];
  a1[5] = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = a1[4];
  a1[4] = 0;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = a1[3];
  a1[3] = 0;
  if (v13)
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  v14 = a1[2];
  a1[2] = 0;
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  v15 = a1[1];
  a1[1] = 0;
  if (v15)
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  v16 = *a1;
  *a1 = 0;
  if (v16)
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::ensureSegmentsFor(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a1 + 7;
  v3 = a2 + 7;
  if (v2 >= 8)
    v4 = (v2 >> 3) - 1;
  else
    v4 = 0;
  if (v4 < v3 >> 3)
  {
    v6 = v3 >> 3;
    v7 = a1 + 1;
    do
    {
      v8 = v4 + 1;
      if (v4 == a1[4])
      {
        v9 = *v7;
        if (!*v7 || (v9 = *(_QWORD *)v9, v9 <= v4))
        {
          if (2 * v9 <= v8)
            v10 = v4 + 1;
          else
            v10 = 2 * v9;
          WTF::ConcurrentBuffer<std::unique_ptr<WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment,std::default_delete<WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment>>>::growExact(v7, v10);
        }
        v18 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
        *v18 = 0u;
        v18[1] = 0u;
        v18[2] = 0u;
        v18[3] = 0u;
        v19 = a1[4];
        a1[4] = v19 + 1;
        v20 = a1[1] + 8 * v19;
        v21 = *(unint64_t **)(v20 + 8);
        *(_QWORD *)(v20 + 8) = v18;
        if (v21)
        {
          v22 = WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment::~Segment(v21, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree((unint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
        }
      }
      v4 = v8;
    }
    while (v6 != v8);
  }
}

_QWORD *WTF::ConcurrentBuffer<std::unique_ptr<WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment,std::default_delete<WTF::ConcurrentVector<std::unique_ptr<WTF::BitSet<1024ul,unsigned long long>>,8ul>::Segment>>>::growExact(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = result;
  v4 = (unint64_t *)*result;
  if (!*result || *v4 < a2)
  {
    if (a2 >> 61 || 8 * a2 >= 0xFFFFFFFFFFFFFFF8)
    {
      __break(0xC471u);
      JUMPOUT(0x1985EA840);
    }
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2 + 8));
    v6 = v5;
    *v5 = a2;
    v9 = v5;
    if (v4)
    {
      memcpy(v5 + 1, v4 + 1, 8 * *v4);
      v7 = *v4;
    }
    else
    {
      v7 = 0;
    }
    if (v7 < a2)
      bzero(&v6[v7 + 1], 8 * a2 - 8 * v7);
    __dmb(0xAu);
    *v3 = v6;
    __dmb(0xAu);
    result = v3 + 1;
    v8 = *((unsigned int *)v3 + 5);
    if ((_DWORD)v8 == *((_DWORD *)v3 + 4))
    {
      result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v8 + 1, (unint64_t)&v9);
      v8 = *((unsigned int *)v3 + 5);
      *(_QWORD *)(v3[1] + 8 * v8) = *result;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v8) = v6;
    }
    *((_DWORD *)v3 + 5) = v8 + 1;
  }
  return result;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  WTF *v43;
  const char *v44;
  const char *v45;
  char v46;
  WTF::PrintStream *v47;
  WTF *v48;
  const char *v49;
  const char *v50;
  WTF *v51;
  const char *v52;
  const char *v53;
  WTF::PrintStream *v54;
  WTF *v55;
  const char *v56;
  const char *v57;
  char v58;
  char **v59;
  char *v60;

  v10 = *a1;
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  if (!BYTE1(qword_1ECF4C414))
  {
    v20 = 1024 - v10;
    v21 = a1[1];
    if (1024 - v10 >= v21)
    {
      do
      {
        v22 = (_DWORD *)(v12 + 16 * v20);
        if (*v22)
        {
          (*(void (**)(uint64_t))(a2 + 16))(v12 + 16 * v20);
          *v22 = 0;
          v22[2] = 1;
          v10 = *a1;
          v21 = a1[1];
        }
        v20 -= v10;
      }
      while (v20 >= v21);
      v11 = *((_QWORD *)a1 + 10);
    }
    if (*(_BYTE *)(v11 + 445))
    {
      v23 = (unsigned int *)(v12 + 24);
      while (1)
      {
        v24 = *v23;
        if ((*v23 & 3) != 1)
          break;
        v25 = __ldxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 & 0xFFFFFFFE, v23))
            goto LABEL_54;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v23, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_54:
    v34 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v34))
    {
      __clrex();
    }
    else if (!__stxr(1u, v34))
    {
      goto LABEL_58;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v34);
LABEL_58:
    v36 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v37 = v36 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v37 + 24) &= ~(1 << a1[3]);
    v38 = v36 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v38 + 16) &= ~(1 << a1[3]);
    v39 = v36 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v39 + 4) &= ~(1 << a1[3]);
    v40 = v36 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v40 + 4) |= 1 << a1[3];
    LODWORD(v40) = __ldxr(v34);
    if ((_DWORD)v40 == 1)
    {
      if (!__stlxr(0, v34))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v34, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v12 + 40)
    || *(_QWORD *)(v12 + 48)
    || *(_QWORD *)(v12 + 56)
    || *(_QWORD *)(v12 + 64)
    || *(_QWORD *)(v12 + 72)
    || *(_QWORD *)(v12 + 80)
    || *(_QWORD *)(v12 + 88)
    || *(_QWORD *)(v12 + 96)
    || *(_QWORD *)(v12 + 104)
    || *(_QWORD *)(v12 + 112)
    || *(_QWORD *)(v12 + 120)
    || *(_QWORD *)(v12 + 128)
    || *(_QWORD *)(v12 + 136)
    || *(_QWORD *)(v12 + 144)
    || *(_QWORD *)(v12 + 152)
    || *(_QWORD *)(v12 + 160))
  {
    v41 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v41 != -1)
    {
      v60 = &v58;
      v59 = &v60;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v43 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v43, (WTF::PrintStream *)"Block ", v44);
    WTF::printInternal(v43, (const void *)v12);
    WTF::printInternal(v43, (WTF::PrintStream *)": marks not empty!\n", v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v46 = atomic_load((unsigned int *)(v12 + 24));
    v47 = (WTF::PrintStream *)(v46 & 1);
    v48 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v48, (WTF::PrintStream *)"Block lock is held: ", v49);
    WTF::printInternal(v48, v47);
    WTF::printInternal(v48, (WTF::PrintStream *)"\n", v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v51 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v51, (WTF::PrintStream *)"Marking version of block: ", v52);
    WTF::printInternal(v51, (WTF::PrintStream *)*(unsigned int *)(v12 + 32));
    WTF::printInternal(v51, (WTF::PrintStream *)"\n", v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v55 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v55, (WTF::PrintStream *)"Marking version of heap: ", v56);
    WTF::printInternal(v55, v54);
    WTF::printInternal(v55, (WTF::PrintStream *)"\n", v57);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x1985EADE4);
  }
  v15 = (16 * v10);
  v16 = a1[1];
  v17 = (_DWORD *)(v12 + 16 * v16);
  if ((unint64_t)(16 * v16 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  v18 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_35;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
LABEL_35:
  v26 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v27 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v27 + 24) &= ~(1 << a1[3]);
  v28 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 16) &= ~(1 << a1[3]);
  v29 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 4) &= ~(1 << a1[3]);
  v30 = v26 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v30 + 4) |= 1 << a1[3];
  LODWORD(v30) = __ldxr(v18);
  if ((_DWORD)v30 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, a7, a8);
LABEL_40:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v31 = (unsigned int *)(v12 + 24);
    while (1)
    {
      v32 = *v31;
      if ((*v31 & 3) != 1)
        break;
      v33 = __ldxr(v31);
      if (v33 == v32)
      {
        if (!__stxr(v32 & 0xFFFFFFFE, v31))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_48:
  if (v16 <= 0x3FF)
  {
    do
    {
      if (*v17)
      {
        (*(void (**)(_DWORD *))(a2 + 16))(v17);
        *v17 = 0;
        v17[2] = 1;
      }
      v17 = (_DWORD *)((char *)v17 + v15);
    }
    while ((unint64_t)v17 < v12 + 0x4000);
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  signed int v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  WTF *v58;
  const char *v59;
  const char *v60;
  char v61;
  WTF::PrintStream *v62;
  WTF *v63;
  const char *v64;
  const char *v65;
  WTF *v66;
  const char *v67;
  const char *v68;
  WTF::PrintStream *v69;
  WTF *v70;
  const char *v71;
  const char *v72;
  unint64_t v74;
  unint64_t v75;
  char v76;
  char **v77;
  char *v78;

  v9 = a2;
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 10);
  v13 = (unsigned int *)*((_QWORD *)a1 + 11);
  v14 = *(_QWORD *)(v12 + 168);
  v15 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
  v16 = (v14 >> 26) ^ (v15 >> 17) ^ v14 ^ v15;
  *(_QWORD *)(v12 + 160) = v14;
  *(_QWORD *)(v12 + 168) = v16;
  v17 = v16 + v14;
  if (!BYTE1(qword_1ECF4C414))
  {
    v25 = 1024 - v11;
    if (1024 - (int)v11 >= (int)a1[1])
    {
      v75 = v16 + v14;
      v35 = 0;
      v27 = 0;
      v36 = 0;
      v37 = 0;
      do
      {
        v26 = &v13[4 * v25];
        if (*v26)
        {
          (*(void (**)(unsigned int *))(a3 + 16))(&v13[4 * v25]);
          *v26 = 0;
          v26[2] = 1;
          v11 = *a1;
        }
        v38 = v25;
        if (v25 + (unint64_t)v11 >= v37)
        {
          v41 = v11;
        }
        else
        {
          v39 = &v13[4 * v37];
          v40 = (v35 << 36) | 1;
          if (v36)
            v40 = ((int)v36 - (int)v39) | (unint64_t)(v35 << 36);
          *((_QWORD *)v39 + 1) = v40 ^ v75;
          v27 += 16 * v35;
          v41 = *a1;
          v36 = &v13[4 * v37];
          v35 = 0;
        }
        v35 += v11;
        v25 -= v41;
        v11 = v41;
        v37 = v38;
      }
      while (v25 >= (int)a1[1]);
      if (v35)
      {
        v42 = (v35 << 36) | 1;
        if (v36)
          v42 = ((int)v36 - (int)v26) | (unint64_t)(v35 << 36);
        v9 = a2;
        v17 = v75;
        *((_QWORD *)v26 + 1) = v42 ^ v75;
        v27 += 16 * v35;
      }
      else
      {
        v26 = v36;
        v9 = a2;
        v17 = v75;
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
    {
      v43 = v13 + 6;
      while (1)
      {
        v44 = *v43;
        if ((*v43 & 3) != 1)
          break;
        v45 = __ldxr(v43);
        if (v45 == v44)
        {
          if (!__stxr(v44 & 0xFFFFFFFE, v43))
            goto LABEL_67;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v43, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_67:
    if (v26)
    {
      v47 = *((_QWORD *)v26 + 1) ^ v17;
      *(_QWORD *)v9 = v26;
      *(_QWORD *)(v9 + 8) = (char *)v26 + HIDWORD(v47);
      v48 = (uint64_t)v26 + (int)v47;
    }
    else
    {
      v17 = 0;
      v27 = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v48 = 1;
    }
    *(_QWORD *)(v9 + 16) = v48;
    *(_QWORD *)(v9 + 24) = v17;
    *(_DWORD *)(v9 + 32) = v27;
    v49 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v49))
    {
      __clrex();
    }
    else if (!__stxr(1u, v49))
    {
      goto LABEL_73;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v49);
LABEL_73:
    v51 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v52 = v51 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v52 + 24) &= ~(1 << a1[3]);
    v53 = v51 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v53 + 16) &= ~(1 << a1[3]);
    v54 = v51 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v54 + 4) &= ~(1 << a1[3]);
    *((_BYTE *)a1 + 10) = 1;
    LODWORD(v54) = __ldxr(v49);
    if ((_DWORD)v54 == 1)
    {
      if (!__stlxr(0, v49))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v49, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*((_QWORD *)v13 + 5)
    || *((_QWORD *)v13 + 6)
    || *((_QWORD *)v13 + 7)
    || *((_QWORD *)v13 + 8)
    || *((_QWORD *)v13 + 9)
    || *((_QWORD *)v13 + 10)
    || *((_QWORD *)v13 + 11)
    || *((_QWORD *)v13 + 12)
    || *((_QWORD *)v13 + 13)
    || *((_QWORD *)v13 + 14)
    || *((_QWORD *)v13 + 15)
    || *((_QWORD *)v13 + 16)
    || *((_QWORD *)v13 + 17)
    || *((_QWORD *)v13 + 18)
    || *((_QWORD *)v13 + 19)
    || *((_QWORD *)v13 + 20))
  {
    v56 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v56 != -1)
    {
      v78 = &v76;
      v77 = &v78;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v58 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    WTF::printInternal(v58, (WTF::PrintStream *)"Block ", v59);
    WTF::printInternal(v58, v13);
    WTF::printInternal(v58, (WTF::PrintStream *)": marks not empty!\n", v60);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    v61 = atomic_load(v13 + 6);
    v62 = (WTF::PrintStream *)(v61 & 1);
    v63 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    WTF::printInternal(v63, (WTF::PrintStream *)"Block lock is held: ", v64);
    WTF::printInternal(v63, v62);
    WTF::printInternal(v63, (WTF::PrintStream *)"\n", v65);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    v66 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    WTF::printInternal(v66, (WTF::PrintStream *)"Marking version of block: ", v67);
    WTF::printInternal(v66, (WTF::PrintStream *)v13[8]);
    WTF::printInternal(v66, (WTF::PrintStream *)"\n", v68);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    v69 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v70 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    WTF::printInternal(v70, (WTF::PrintStream *)"Marking version of heap: ", v71);
    WTF::printInternal(v70, v69);
    WTF::printInternal(v70, (WTF::PrintStream *)"\n", v72);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
    __break(0xC471u);
LABEL_83:
    JUMPOUT(0x1985EB4B0);
  }
  v74 = v16 + v14;
  v18 = (16 * v11);
  v19 = (unint64_t)(v13 + 4096);
  v20 = a1[1];
  v21 = &v13[4 * v20];
  v22 = 0x4000 - 16 * v20;
  if (v22 >= 0x3ED1)
  {
    __break(0xC471u);
    goto LABEL_83;
  }
  v23 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v23);
LABEL_25:
  v28 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v29 = v28 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 24) &= ~(1 << a1[3]);
  v30 = v28 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v30 + 16) &= ~(1 << a1[3]);
  v31 = v28 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v31 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v31) = __ldxr(v23);
  if ((_DWORD)v31 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v32 = v13 + 6;
    while (1)
    {
      v33 = *v32;
      if ((*v32 & 3) != 1)
        break;
      v34 = __ldxr(v32);
      if (v34 == v33)
      {
        if (!__stxr(v33 & 0xFFFFFFFE, v32))
          goto LABEL_59;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v32, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_59:
  if (v20 <= 0x3FF)
  {
    v46 = &v13[4 * v20];
    do
    {
      if (*v46)
      {
        (*(void (**)(unsigned int *))(a3 + 16))(v46);
        *v46 = 0;
        v46[2] = 1;
      }
      v46 = (unsigned int *)((char *)v46 + v18);
    }
    while ((unint64_t)v46 < v19);
  }
  *((_QWORD *)v21 + 1) = ((v22 << 32) | 1) ^ v74;
  *(_QWORD *)v9 = v21;
  *(_QWORD *)(v9 + 8) = (char *)v21 + v22;
  *(_QWORD *)(v9 + 16) = (char *)v21 + 1;
  *(_QWORD *)(v9 + 24) = v74;
  *(_DWORD *)(v9 + 32) = v22;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 11);
  v11 = *(_QWORD *)(v9 + 168);
  v12 = *(_QWORD *)(v9 + 160) ^ (*(_QWORD *)(v9 + 160) << 23);
  *(_QWORD *)(v9 + 160) = v11;
  *(_QWORD *)(v9 + 168) = (v11 >> 26) ^ (v12 >> 17) ^ v11 ^ v12;
  v13 = *a1;
  v14 = a1[1];
  v15 = 1024 - *a1;
  if (v15 >= v14)
  {
    do
    {
      v17 = (_DWORD *)(v10 + 16 * v15);
      if (*v17)
      {
        (*(void (**)(uint64_t))(a2 + 16))(v10 + 16 * v15);
        *v17 = 0;
        v17[2] = 1;
        v13 = *a1;
        v14 = a1[1];
      }
      v15 -= v13;
    }
    while (v15 >= v14);
    v9 = *((_QWORD *)a1 + 10);
  }
  if (*(_BYTE *)(v9 + 445))
  {
    v18 = (unsigned int *)(v10 + 24);
    while (1)
    {
      v19 = *v18;
      if ((*v18 & 3) != 1)
        break;
      v20 = __ldxr(v18);
      if (v20 == v19)
      {
        if (!__stxr(v19 & 0xFFFFFFFE, v18))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v18, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_14:
  v21 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
LABEL_18:
  v23 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v24 = v23 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v24 + 24) &= ~(1 << a1[3]);
  v25 = v23 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v25 + 16) &= ~(1 << a1[3]);
  v26 = v23 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v26 + 4) &= ~(1 << a1[3]);
  v27 = v23 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v27 + 4) |= 1 << a1[3];
  LODWORD(v27) = __ldxr(v21);
  if ((_DWORD)v27 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v21))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  signed int v17;
  _DWORD *v18;
  int v19;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;

  v8 = a2;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  v14 = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = v14;
  v15 = v14 + v12;
  v16 = *a1;
  v17 = 1024 - v16;
  if (1024 - (int)v16 >= (int)a1[1])
  {
    v41 = v14 + v12;
    v21 = 0;
    v19 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      v18 = (_DWORD *)(v11 + 16 * v17);
      if (*v18)
      {
        (*(void (**)(uint64_t))(a3 + 16))(v11 + 16 * v17);
        *v18 = 0;
        v18[2] = 1;
        v16 = *a1;
      }
      v24 = v17;
      if (v17 + (unint64_t)v16 >= v23)
      {
        v27 = v16;
      }
      else
      {
        v25 = v11 + 16 * v23;
        v26 = (v21 << 36) | 1;
        if (v22)
          v26 = ((int)v22 - (int)v25) | (unint64_t)(v21 << 36);
        *(_QWORD *)(v25 + 8) = v26 ^ v41;
        v19 += 16 * v21;
        v27 = *a1;
        v22 = (_DWORD *)(v11 + 16 * v23);
        v21 = 0;
      }
      v21 += v16;
      v17 -= v27;
      v16 = v27;
      v23 = v24;
    }
    while (v17 >= (int)a1[1]);
    if (v21)
    {
      v28 = (v21 << 36) | 1;
      if (v22)
        v28 = ((int)v22 - (int)v18) | (unint64_t)(v21 << 36);
      v8 = a2;
      v15 = v41;
      *((_QWORD *)v18 + 1) = v28 ^ v41;
      v19 += 16 * v21;
    }
    else
    {
      v18 = v22;
      v8 = a2;
      v15 = v41;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v29 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v30 = *v29;
      if ((*v29 & 3) != 1)
        break;
      v31 = __ldxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 & 0xFFFFFFFE, v29))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v29, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_25:
  if (v18)
  {
    v32 = *((_QWORD *)v18 + 1) ^ v15;
    *(_QWORD *)v8 = v18;
    *(_QWORD *)(v8 + 8) = (char *)v18 + HIDWORD(v32);
    v33 = (uint64_t)v18 + (int)v32;
  }
  else
  {
    v15 = 0;
    v19 = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v33 = 1;
  }
  *(_QWORD *)(v8 + 16) = v33;
  *(_QWORD *)(v8 + 24) = v15;
  *(_DWORD *)(v8 + 32) = v19;
  v34 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, v34))
  {
    goto LABEL_31;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v34);
LABEL_31:
  v36 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v37 = v36 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v37 + 24) &= ~(1 << a1[3]);
  v38 = v36 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v38 + 16) &= ~(1 << a1[3]);
  v39 = v36 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v39 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v39) = __ldxr(v34);
  if ((_DWORD)v39 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v34))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v34, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoHeapCellType>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoHeapCellType const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *v5)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)a1 + 16 * a2);
    *v5 = 0;
    v5[2] = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MachineThreads::tryCopyOtherThreadStack(JSC::MachineThreads *this, uint64_t **a2, WTF::Thread *a3, unint64_t a4, __uint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  __uint64_t sp;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  __uint64_t v16;
  __darwin_arm_thread_state64 v17;

  WTF::Thread::getRegisters((WTF::Thread *)a2, this, &v17);
  sp = v17.__sp;
  if (v17.__sp)
  {
    v12 = v10;
    v13 = a2[2];
    if (((v17.__sp + 7) & 0xFFFFFFFFFFFFFFF8) - 128 >= (unint64_t)a2[3])
      v14 = (uint64_t *)(((v17.__sp + 7) & 0xFFFFFFFFFFFFFFF8) - 128);
    else
      v14 = a2[3];
    v15 = (char *)v13 - (char *)v14;
    sp = *a5 + v10 + (char *)v13 - (char *)v14;
    if (sp <= a4)
    {
      JSC::copyMemory((WTF::Thread *)((char *)a3 + *a5), (uint64_t *)&v17, v10);
      v16 = *a5 + v12;
      *a5 = v16;
      JSC::copyMemory((WTF::Thread *)((char *)a3 + v16), v14, v15);
      sp = *a5 + v15;
    }
  }
  *a5 = sp;
}

_QWORD *JSC::copyMemory(_QWORD *this, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;

  if ((_QWORD *)(((unint64_t)this + 7) & 0xFFFFFFFFFFFFFFF8) != this)
    goto LABEL_10;
  if ((uint64_t *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1985EBE58);
  }
  if (((a3 + 7) & 0xFFFFFFFFFFFFFFF8) != a3)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1985EBE38);
  }
  if (a3 >= 8)
  {
    v3 = a3 >> 3;
    do
    {
      v4 = *a2++;
      *this++ = v4;
      --v3;
    }
    while (v3);
  }
  return this;
}

BOOL JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::Thread *a1, unint64_t a2, WTF::Thread *a3, unint64_t a4, __uint64_t *a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  WTF::Thread *v11;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const void **v19;
  int v20;
  unsigned int v21;
  __uint64_t v22;
  int v23;
  unsigned int v24;
  WTF::Thread *v25;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v42;
  char v43;
  char v44;
  uint64_t v45;

  v11 = a1;
  if (__ldaxr(JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock))
  {
    goto LABEL_4;
  }
  a1 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock);
LABEL_4:
  *a5 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS(a1);
  v15 = *(_QWORD *)v11;
  v16 = *(_QWORD *)(*(_QWORD *)v11 + 24);
  if (v16)
  {
    a2 = *(unsigned int *)(v16 - 12);
    v45 = 0x8000000000000000;
    if (a2 >= 0x40)
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v45, a2, 0);
  }
  else
  {
    v45 = 0x8000000000000000;
  }
  v17 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
  {
    if (!__stxr(v17, (unsigned int *)&pas_thread_suspend_lock))
      goto LABEL_14;
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_14:
  v19 = *(const void ***)(v15 + 32);
  if (v19)
  {
    v24 = 0;
    do
    {
      v25 = (WTF::Thread *)*v19;
      if (*v19 != (const void *)v14 && v25 != (WTF::Thread *)a6)
      {
        WTF::Thread::suspend(v25, (uint64_t)&v42);
        if (v43)
        {
          v40 = *(_QWORD *)(v15 + 24);
          if (v40)
            LODWORD(v40) = *(_DWORD *)(v40 - 12);
          WTFReportError("./heap/MachineStackMarker.cpp", 162, "BOOL JSC::MachineThreads::tryCopyOtherThreadStacks(const AbstractLocker &, void *, size_t, size_t *, Thread &)", "JavaScript garbage collection encountered an invalid thread (err 0x%x): Thread [%d/%d: %p].", v42, v24, v40, *v19);
        }
        else
        {
          WTF::BitVector::set((WTF::BitVector *)&v45, v24);
        }
      }
      ++v24;
      v19 = (const void **)v19[2];
    }
    while (v19);
    v27 = *(_QWORD *)(v15 + 32);
    if (v27)
    {
      v28 = 0;
      do
      {
        v29 = (_QWORD *)(2 * v45);
        if (v45 < 0)
          v30 = 63;
        else
          v30 = *v29;
        v31 = v28;
        if (v30 > v28)
        {
          v32 = v29 + 1;
          if (v45 < 0)
            v32 = &v45;
          if (((*(unint64_t *)((char *)v32 + ((v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) != 0)
            JSC::MachineThreads::tryCopyOtherThreadStack((JSC::MachineThreads *)&v44, *(uint64_t ***)v27, a3, a4, a5, a6);
        }
        v28 = v31 + 1;
        v27 = *(_QWORD *)(v27 + 16);
      }
      while (v27);
      v34 = *(_QWORD *)(v15 + 32);
      if (v34)
      {
        v35 = 0;
        do
        {
          v36 = (_QWORD *)(2 * v45);
          if (v45 < 0)
            v37 = 63;
          else
            v37 = *v36;
          v38 = v35;
          if (v37 > v35)
          {
            v39 = v36 + 1;
            if (v45 < 0)
              v39 = &v45;
            if (((*(unint64_t *)((char *)v39 + ((v38 >> 3) & 0x1FFFFFF8)) >> v38) & 1) != 0)
              WTF::Thread::resume(*(WTF::Thread **)v34, (const WTF::ThreadSuspendLocker *)&v44);
          }
          v35 = v38 + 1;
          v34 = *(_QWORD *)(v34 + 16);
        }
        while (v34);
      }
    }
  }
  v20 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v21 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
    if (v21 != v20)
      break;
    if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
      goto LABEL_20;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_20:
  v22 = *a5;
  if ((v45 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v45, (void *)a2, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  v23 = __ldxr(JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock);
  if (v23 == 1)
  {
    if (!__stlxr(0, JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock))return v22 <= a4;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::MachineThreads::tryCopyOtherThreadStacks(WTF::AbstractLocker const&,void *,unsigned long,unsigned long *,WTF::Thread &)::suspendLock, 0, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  return v22 <= a4;
}

void JSC::MachineThreads::gatherConservativeRoots(WTF::Thread *a1, JSC::ConservativeRoots *a2, JSC *a3, unsigned __int8 *a4, const char **a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  const char *v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  const char *v21;
  const char *v22;
  const char **v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  WTF::WordLock *v32;
  const char *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  JSC *v52;
  unsigned __int8 *v53;
  void **v54;
  void *v55;
  char v56;

  if (a5)
  {
    v14 = a5[2];
    if (!v14)
      goto LABEL_12;
    v15 = a4 + 16;
    v55 = a4 + 16;
    v56 = 1;
    if (__ldaxr(a4 + 16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
LABEL_6:
      v52 = a3;
      v53 = a4;
      v54 = &v55;
      JSC::ConservativeRoots::genericAddSpan<JSC::CompositeMarkHook>(a2, v14, (const char *)((unint64_t)(v14 + 87) & 0xFFFFFFFFFFFFFFF8), (uint64_t)&v52, (uint64_t)a5, (uint64_t)a6, a7, a8);
      if (!v56)
        goto LABEL_12;
      v19 = (unsigned __int8 *)v55;
      v20 = __ldxr((unsigned __int8 *)v55);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v55))
        {
LABEL_12:
          v23 = a5;
          v21 = *a5;
          v22 = v23[1];
          v24 = a4 + 16;
          v55 = a4 + 16;
          v56 = 1;
          if (__ldaxr(a4 + 16))
          {
            __clrex();
          }
          else if (!__stxr(1u, v24))
          {
LABEL_15:
            v52 = a3;
            v53 = a4;
            v54 = &v55;
            JSC::ConservativeRoots::genericAddSpan<JSC::CompositeMarkHook>(a2, v22, v21, (uint64_t)&v52, (uint64_t)a5, (uint64_t)a6, a7, a8);
            if (!v56)
              goto LABEL_21;
            v30 = (unsigned __int8 *)v55;
            v31 = __ldxr((unsigned __int8 *)v55);
            if (v31 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v55))
                goto LABEL_21;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v30, 0, v26, v27, v28, v29, a7, a8);
            goto LABEL_21;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
          goto LABEL_15;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v17, v18, (uint64_t)a5, (uint64_t)a6, a7, a8);
      goto LABEL_12;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
    goto LABEL_6;
  }
LABEL_21:
  v51 = 0;
  v52 = 0;
  v55 = 0;
  v32 = (WTF::WordLock *)(*(_QWORD *)a1 + 16);
  if (__ldaxr((unint64_t *)v32))
  {
    __clrex();
LABEL_23:
    WTF::WordLock::lockSlow(v32);
    goto LABEL_24;
  }
  if (__stxr(1uLL, (unint64_t *)v32))
    goto LABEL_23;
LABEL_24:
  v34 = (const char *)v51;
  if (!JSC::MachineThreads::tryCopyOtherThreadStacks(a1, (unint64_t)a2, v51, (unint64_t)v55, (__uint64_t *)&v52, a6, a7, a8))
  {
    do
    {
      JSC::growBuffer(v52, &v51, &v55, v35, v36, v37, v38, v39);
      v34 = (const char *)v51;
    }
    while (!JSC::MachineThreads::tryCopyOtherThreadStacks(a1, v41, v51, (unint64_t)v55, (__uint64_t *)&v52, a6, v42, v43));
  }
  if (v34)
  {
    JSC::ConservativeRoots::add(a2, v34, (const char *)v52 + (_QWORD)v34, a3, (JSC::CodeBlockSet *)a4, v37, v38, v39);
    WTF::fastFree((unint64_t)v34, v44, v45, v46, v47, v48, v49, v50);
  }
  v40 = __ldxr((unint64_t *)v32);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unint64_t *)v32))
LABEL_31:
    WTF::WordLock::unlockSlow(v32);
}

WTF *JSC::growBuffer(JSC *this, WTF **a2, void **a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v11;
  unint64_t v12;
  void *v13;
  WTF *result;

  v11 = *a2;
  if (*a2)
    WTF::fastFree((unint64_t)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = WTF::pageSize(v11);
  v13 = (void *)((v12 + 2 * (_QWORD)this - 1) & -(uint64_t)v12);
  *a3 = v13;
  result = (WTF *)WTF::fastMalloc((WTF *)v13);
  *a2 = result;
  return result;
}

uint64_t JSC::callWithCurrentThreadState(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[10];
  _QWORD v14[2];
  _QWORD *v15;

  v14[0] = 0;
  v14[1] = v14;
  v15 = 0;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  v14[0] = *(_QWORD *)(v11 + 16);
  v13[0] = a1;
  v13[1] = v1;
  v13[2] = v2;
  v13[3] = v3;
  v13[4] = v4;
  v13[5] = v5;
  v13[6] = v6;
  v13[7] = v7;
  v13[8] = v8;
  v13[9] = v9;
  v15 = v13;
  (*(void (**)(_QWORD, _QWORD *))a1)(*(_QWORD *)(a1 + 8), v14);
  return 42;
}

uint64_t *JSC::MarkStackArray::transferTo(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;

  if (a1 == a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1985EC6ACLL);
  }
  v10 = *a1;
  if (*a1)
  {
    v11 = *v10;
    v12 = (uint64_t *)v10[1];
    if (*v10)
    {
      *(_QWORD *)(v11 + 8) = v12;
      v12 = (uint64_t *)v10[1];
    }
    else
    {
      *a1 = v12;
    }
    if (!v12)
      v12 = (uint64_t *)(a1 + 1);
    *v12 = v11;
  }
  v13 = *a2;
  if (*a2)
  {
    v14 = *v13;
    v15 = (uint64_t *)v13[1];
    if (*v13)
    {
      *(_QWORD *)(v14 + 8) = v15;
      v15 = (uint64_t *)v13[1];
    }
    else
    {
      *a2 = v15;
    }
    if (!v15)
      v15 = (uint64_t *)(a2 + 1);
    *v15 = v14;
  }
  a1[3] = (uint64_t *)((char *)a1[3] - 1);
  a2[3] = (uint64_t *)((char *)a2[3] - 1);
  v16 = *a1;
  if (*a1)
  {
    v27 = a1[1];
    if (*a2)
    {
      *a1 = 0;
      a1[1] = 0;
      v31 = a2[1];
      v31[1] = (uint64_t)v16;
      *v16 = (uint64_t)v31;
      a2[1] = v27;
    }
    else
    {
      *a2 = v16;
      a2[1] = v27;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  a2[3] = (uint64_t *)((char *)a1[3] + (_QWORD)a2[3]);
  a1[3] = 0;
  a1[1] = v10;
  *a1 = v10;
  *v10 = 0;
  v10[1] = 0;
  v17 = *a2;
  if (*a2)
    v18 = *a2;
  else
    v18 = a2 + 1;
  *v18 = v13;
  *a2 = v13;
  *v13 = 0;
  v13[1] = (uint64_t)v17;
  v19 = (uint64_t)a1[2];
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  a2[3] = (uint64_t *)((char *)a2[3] + 1);
  while (1)
  {
    if (v19)
      goto LABEL_22;
    result = *a1;
    v21 = (uint64_t *)(*a1)[1];
    if (!v21)
      return result;
    v32 = *result;
    if (*result)
    {
      *(_QWORD *)(v32 + 8) = v21;
      v21 = (uint64_t *)result[1];
    }
    else
    {
      *a1 = v21;
    }
    if (!v21)
      v21 = (uint64_t *)(a1 + 1);
    *v21 = v32;
    WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
    a1[3] = (uint64_t *)((char *)a1[3] - 1);
    v19 = 510;
    do
    {
LABEL_22:
      v22 = v19 - 1;
      v23 = (uint64_t)&(*a1)[v22];
      a1[2] = (uint64_t *)v22;
      v24 = *(_QWORD *)(v23 + 16);
      v25 = a2[2];
      if (v25 == (uint64_t *)510)
      {
        v28 = (uint64_t *)WTF::fastMalloc((WTF *)0x1000);
        v25 = 0;
        *v28 = 0;
        v28[1] = 0;
        a2[3] = (uint64_t *)((char *)a2[3] + 1);
        v29 = *a2;
        if (*a2)
          v30 = *a2;
        else
          v30 = (uint64_t *)(a2 + 1);
        *v30 = (uint64_t)v28;
        *a2 = v28;
        *v28 = 0;
        v28[1] = (uint64_t)v29;
      }
      v26 = (uint64_t)&(*a2)[(_QWORD)v25];
      a2[2] = (uint64_t *)((char *)v25 + 1);
      *(_QWORD *)(v26 + 16) = v24;
      v19 = (uint64_t)a1[2];
    }
    while (v19);
  }
}

unint64_t JSC::MarkStackArray::transferTo(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;

  v8 = a3;
  if (a3)
  {
    v11 = 0;
    v12 = a1 + 1;
    v13 = a2 + 1;
    v14 = a1[2];
    do
    {
      if (!v14)
      {
        v15 = (uint64_t *)*a1;
        v16 = *(_QWORD **)(*a1 + 8);
        if (!v16)
          break;
        v17 = *v15;
        if (*v15)
        {
          *(_QWORD *)(v17 + 8) = v16;
          v16 = (_QWORD *)v15[1];
        }
        else
        {
          *a1 = v16;
        }
        if (!v16)
          v16 = v12;
        *v16 = v17;
        WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
        v18 = a1[3] - 1;
        a1[2] = 510;
        a1[3] = v18;
        v14 = 510;
      }
      if (v11 < v8)
      {
        while (1)
        {
          v14 = a1[2];
          if (!v14)
            break;
          v19 = v14 - 1;
          v20 = *a1 + 8 * v19;
          a1[2] = v19;
          v21 = *(_QWORD *)(v20 + 16);
          v22 = a2[2];
          if (v22 == 510)
          {
            v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
            v22 = 0;
            *v24 = 0;
            v24[1] = 0;
            ++a2[3];
            v25 = (_QWORD *)*a2;
            if (*a2)
              v26 = (_QWORD *)*a2;
            else
              v26 = v13;
            *v26 = v24;
            *a2 = v24;
            *v24 = 0;
            v24[1] = v25;
          }
          v23 = *a2 + 8 * v22;
          a2[2] = v22 + 1;
          *(_QWORD *)(v23 + 16) = v21;
          if (v8 == ++v11)
            return v8;
        }
      }
    }
    while (v11 < v8);
    v27 = v11 > v8;
    v8 = v11;
    if (v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1985EC848);
    }
  }
  return v8;
}

uint64_t JSC::MarkStackArray::donateSomeCellsTo(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 24);
  if (v4 > 1)
  {
    v12 = *(uint64_t **)result;
    if (*(_QWORD *)result)
    {
      v13 = *v12;
      v14 = (_QWORD *)v12[1];
      if (*v12)
      {
        *(_QWORD *)(v13 + 8) = v14;
        v14 = (_QWORD *)v12[1];
      }
      else
      {
        *(_QWORD *)result = v14;
      }
      if (!v14)
        v14 = (_QWORD *)(result + 8);
      *v14 = v13;
    }
    v15 = v4 >> 1;
    v16 = *(uint64_t **)a2;
    if (*(_QWORD *)a2)
    {
      v17 = *v16;
      v18 = (uint64_t *)v16[1];
      if (*v16)
      {
        *(_QWORD *)(v17 + 8) = v18;
        v18 = (uint64_t *)v16[1];
      }
      else
      {
        *(_QWORD *)a2 = v18;
      }
      if (!v18)
        v18 = (uint64_t *)(a2 + 8);
      *v18 = v17;
    }
    v19 = (_QWORD *)(result + 8);
    do
    {
      v20 = *(uint64_t **)result;
      if (*(_QWORD *)result)
      {
        v21 = *v20;
        v22 = (_QWORD *)v20[1];
        if (*v20)
        {
          *(_QWORD *)(v21 + 8) = v22;
          v22 = (_QWORD *)v20[1];
        }
        else
        {
          *(_QWORD *)result = v22;
        }
        if (!v22)
          v22 = (_QWORD *)(result + 8);
        *v22 = v21;
      }
      v23 = *(uint64_t **)a2;
      if (*(_QWORD *)a2)
        v24 = *(uint64_t **)a2;
      else
        v24 = (uint64_t *)(a2 + 8);
      *v24 = (uint64_t)v20;
      *(_QWORD *)a2 = v20;
      *v20 = 0;
      v20[1] = (uint64_t)v23;
      --*(_QWORD *)(result + 24);
      ++*(_QWORD *)(a2 + 24);
      --v15;
    }
    while (v15);
    v25 = *(uint64_t **)result;
    if (*(_QWORD *)result)
      v19 = *(_QWORD **)result;
    *v19 = v12;
    *(_QWORD *)result = v12;
    *v12 = 0;
    v12[1] = (uint64_t)v25;
    v26 = *(uint64_t **)a2;
    if (*(_QWORD *)a2)
      v27 = *(_QWORD **)a2;
    else
      v27 = (_QWORD *)(a2 + 8);
    *v27 = v16;
    *(_QWORD *)a2 = v16;
    *v16 = 0;
    v16[1] = (uint64_t)v26;
  }
  else
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5 >= 2)
    {
      v6 = v5 >> 1;
      do
      {
        v7 = v3[2] - 1;
        v8 = *v3 + 8 * v7;
        v3[2] = v7;
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(_QWORD *)(a2 + 16);
        if (v10 == 510)
        {
          result = WTF::fastMalloc((WTF *)0x1000);
          v10 = 0;
          *(_QWORD *)result = 0;
          *(_QWORD *)(result + 8) = 0;
          ++*(_QWORD *)(a2 + 24);
          v28 = *(uint64_t **)a2;
          if (*(_QWORD *)a2)
            v29 = *(uint64_t **)a2;
          else
            v29 = (uint64_t *)(a2 + 8);
          *v29 = result;
          *(_QWORD *)a2 = result;
          *(_QWORD *)result = 0;
          *(_QWORD *)(result + 8) = v28;
        }
        v11 = *(_QWORD *)a2 + 8 * v10;
        *(_QWORD *)(a2 + 16) = v10 + 1;
        *(_QWORD *)(v11 + 16) = v9;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t **JSC::MarkStackArray::stealSomeCellsFrom(uint64_t **result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  unint64_t v34;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= 2)
  {
    v12 = *(uint64_t **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = *v12;
      v14 = (_QWORD *)v12[1];
      if (*v12)
      {
        *(_QWORD *)(v13 + 8) = v14;
        v14 = (_QWORD *)v12[1];
      }
      else
      {
        *(_QWORD *)a2 = v14;
      }
      if (!v14)
        v14 = (_QWORD *)(a2 + 8);
      *v14 = v13;
    }
    v15 = *result;
    if (*result)
    {
      v16 = *v15;
      v17 = (uint64_t *)v15[1];
      if (*v15)
      {
        *(_QWORD *)(v16 + 8) = v17;
        v17 = (uint64_t *)v15[1];
      }
      else
      {
        *result = v17;
      }
      if (!v17)
        v17 = (uint64_t *)(result + 1);
      *v17 = v16;
    }
    v18 = *(uint64_t **)a2;
    if (*(_QWORD *)a2)
    {
      v19 = *v18;
      v20 = (_QWORD *)v18[1];
      if (*v18)
      {
        *(_QWORD *)(v19 + 8) = v20;
        v20 = (_QWORD *)v18[1];
      }
      else
      {
        *(_QWORD *)a2 = v20;
      }
      if (!v20)
        v20 = (_QWORD *)(a2 + 8);
      *v20 = v19;
    }
    v21 = *result;
    if (*result)
      v22 = *result;
    else
      v22 = result + 1;
    *v22 = v18;
    *result = v18;
    *v18 = 0;
    v18[1] = (uint64_t)v21;
    result[3] = (uint64_t *)((char *)result[3] + 1);
    --*(_QWORD *)(a2 + 24);
    v23 = *result;
    if (*result)
      v24 = *result;
    else
      v24 = result + 1;
    *v24 = v15;
    *result = v15;
    *v15 = 0;
    v15[1] = (uint64_t)v23;
    v25 = *(uint64_t **)a2;
    v26 = (_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2)
      v26 = *(_QWORD **)a2;
    *v26 = v12;
    *(_QWORD *)a2 = v12;
    *v12 = 0;
    v12[1] = (uint64_t)v25;
  }
  else
  {
    v4 = a3 + 510 * v3 + *(_QWORD *)(a2 + 16) - 511;
    if (v4 >= a3)
    {
      v5 = v4 / a3;
      do
      {
        v6 = *(_QWORD *)(a2 + 16);
        if (!v6)
          break;
        v7 = v6 - 1;
        v8 = *(_QWORD *)a2 + 8 * v7;
        *(_QWORD *)(a2 + 16) = v7;
        v9 = *(_QWORD *)(v8 + 16);
        v10 = result[2];
        if (v10 == (uint64_t *)510)
        {
          v27 = (uint64_t *)(result + 1);
          v31 = a2;
          v32 = result;
          v33 = v9;
          v34 = v5;
          v28 = (uint64_t *)WTF::fastMalloc((WTF *)0x1000);
          a2 = v31;
          result = v32;
          v10 = 0;
          *v28 = 0;
          v28[1] = 0;
          v32[3] = (uint64_t *)((char *)v32[3] + 1);
          v29 = *v32;
          if (*v32)
            v30 = *v32;
          else
            v30 = v27;
          *v30 = (uint64_t)v28;
          *v32 = v28;
          *v28 = 0;
          v28[1] = (uint64_t)v29;
          v9 = v33;
          v5 = v34;
        }
        v11 = (uint64_t)&(*result)[(_QWORD)v10];
        result[2] = (uint64_t *)((char *)v10 + 1);
        *(_QWORD *)(v11 + 16) = v9;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t JSC::MarkingConstraint::MarkingConstraint(uint64_t result, _DWORD **a2, uint64_t *a3, char a4, char a5, char a6)
{
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)result = off_1E3590DC0;
  v6 = *a2;
  if (*a2)
    ++*v6;
  *(_QWORD *)(result + 8) = v6;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_BYTE *)(result + 36) = a4;
  *(_BYTE *)(result + 37) = a5;
  *(_BYTE *)(result + 38) = a6;
  *(_BYTE *)(result + 39) = 0;
  return result;
}

void JSC::MarkingConstraint::~MarkingConstraint(JSC::MarkingConstraint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;

  *(_QWORD *)this = off_1E3590DC0;
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v10;
  }
}

void JSC::MarkStackMergingConstraint::~MarkStackMergingConstraint(JSC::MarkStackMergingConstraint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;

  *(_QWORD *)this = off_1E3590DC0;
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v10;
  }
}

{
  _DWORD *v9;
  _DWORD *v10;

  *(_QWORD *)this = off_1E3590DC0;
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v10;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::MarkStackMergingConstraint::quickWorkEstimate(uint64_t a1)
{
  return (double)(unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 416) + 16)
                                  + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 424) + 16)
                                  + 510
                                  * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 424) + 24)
                                   + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 416) + 24))
                                  - 1020);
}

uint64_t JSC::MarkStackMergingConstraint::prepareToExecuteImpl(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 416) + 16)
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 424) + 16)
     + 510
     * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 424) + 24)
      + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 416) + 24))
     - 1020;
  *(_QWORD *)(a3 + 72) += v3;
  if ((_BYTE)word_1ECF4C5CC)
    return WTF::dataLog<char [2],unsigned long,char [2]>(&v3);
  return result;
}

uint64_t WTF::dataLog<char [2],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "(");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", ")");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t *JSC::MarkStackMergingConstraint::executeImpl(uint64_t *this, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = this[5];
  if (!*(_BYTE *)(v8 + 564))
  {
    v9 = this;
    v10 = a2 + 5;
    JSC::MarkStackArray::transferTo(*(uint64_t ***)(v8 + 416), a2 + 5, a3, a4, a5, a6, a7, a8);
    return JSC::MarkStackArray::transferTo(*(uint64_t ***)(v9[5] + 424), v10, v11, v12, v13, v14, v15, v16);
  }
  return this;
}

{
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = this[5];
  if (!*(_BYTE *)(v8 + 564))
  {
    v9 = this;
    v10 = a2 + 5;
    JSC::MarkStackArray::transferTo(*(uint64_t ***)(v8 + 416), a2 + 5, a3, a4, a5, a6, a7, a8);
    return JSC::MarkStackArray::transferTo(*(uint64_t ***)(v9[5] + 424), v10, v11, v12, v13, v14, v15, v16);
  }
  return this;
}

void JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated(JSC::MarkedBlock::Handle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  WTF *v18;
  WTF::PrintStream *v19;
  int v20;

  if (!*((_BYTE *)this + 10))
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  *((_BYTE *)this + 10) = 0;
  v9 = *((_QWORD *)this + 3);
  v10 = (unsigned __int8 *)(v9 + 56);
  if (__ldaxr((unsigned __int8 *)(v9 + 56)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 56);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  v12 = *(_QWORD *)(v9 + 32) + 40 * (*((_DWORD *)this + 3) >> 5);
  v15 = *(_DWORD *)(v12 + 28);
  v13 = (int *)(v12 + 28);
  v14 = v15;
  v16 = 1 << *((_DWORD *)this + 3);
  if ((v15 & v16) == 0)
  {
    v20 = *((_DWORD *)this + 3);
    v18 = (WTF *)WTF::dataLogLn<char [44],unsigned int>("Finish using on a block that's not in use: ", &v20);
    v19 = (WTF::PrintStream *)WTF::dataFile(v18);
    JSC::BlockDirectory::dumpBits((JSC::BlockDirectory *)v9, v19);
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x1985ED0B0);
  }
  *v13 = v14 & ~v16;
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v10))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 56), 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::stopAllocating(JSC::MarkedBlock::Handle *this, const JSC::FreeList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  WTF::PrintStream *v40;
  int v41;

  v11 = (unsigned int *)(*((_QWORD *)this + 11) + 24);
  while (1)
  {
    v12 = *v11;
    if ((*v11 & 1) != 0)
      break;
    v13 = __ldaxr(v11);
    if (v13 == v12)
    {
      if (!__stxr((v12 | 1) + 4, v11))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)v11);
LABEL_8:
  if (!*((_BYTE *)this + 10))
    goto LABEL_32;
  v14 = (_OWORD *)*((_QWORD *)this + 11);
  *(_OWORD *)((char *)v14 + 168) = 0u;
  v14 = (_OWORD *)((char *)v14 + 168);
  v14[6] = 0u;
  v14[7] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[1] = 0u;
  v15 = *((_QWORD *)this + 11);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(*((_QWORD *)this + 10) + 436);
  v16 = *((unsigned int *)this + 1);
  if (v16 <= 0x3FF)
  {
    v17 = *(unsigned int *)this;
    do
    {
      *(_QWORD *)(v15 + 168 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v16 += v17;
    }
    while (v16 < 0x400);
  }
  v18 = *((_QWORD *)a2 + 1);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v15 + 168;
  for (i = *(_DWORD **)a2; ; i = (_DWORD *)v22)
  {
    v22 = v19;
    if ((unint64_t)i < v18)
    {
      if (*((_BYTE *)this + 8) == 1)
      {
        while (1)
        {
          *i = 0;
          i[2] = 2;
          v29 = (((unint64_t)i - v15) >> 4);
          if (v29 > 0x3FF)
            break;
          *(_QWORD *)(v20 + ((v29 >> 3) & 0x1FFFFFF8)) &= ~(1 << (((unint64_t)i - v15) >> 4));
          i = (_DWORD *)((char *)i + *((unsigned int *)a2 + 9));
          if ((unint64_t)i >= v18)
            goto LABEL_18;
        }
      }
      else
      {
        v23 = 0;
        v24 = *((unsigned int *)a2 + 9);
        v25 = (char *)i - v15;
        while (1)
        {
          v26 = ((unint64_t)&v25[v23] >> 4);
          if (v26 >= 0x400)
            break;
          v27 = (v26 >> 3) & 0x1FFFFFF8;
          a4 = *(_QWORD *)(v20 + v27);
          a3 = a4 & ~(1 << ((unint64_t)&v25[v23] >> 4));
          *(_QWORD *)(v20 + v27) = a3;
          v23 += v24;
          if ((unint64_t)i + v23 >= v18)
            goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_40;
    }
LABEL_18:
    if ((v22 & 1) != 0)
      break;
    v28 = *(_QWORD *)(v22 + 8) ^ *((_QWORD *)a2 + 3);
    v18 = v22 + HIDWORD(v28);
    v19 = v22 + (int)v28;
  }
  *((_BYTE *)this + 10) = 0;
  v8 = *((_QWORD *)this + 3);
  v30 = (unsigned __int8 *)(v8 + 56);
  if (__ldaxr((unsigned __int8 *)(v8 + 56)))
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stxr(1u, v30))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 56);
  LODWORD(v15) = *((_DWORD *)this + 3);
  v32 = *(_QWORD *)(v8 + 32) + 40 * (v15 >> 5);
  v35 = *(_DWORD *)(v32 + 28);
  v33 = (int *)(v32 + 28);
  v34 = v35;
  if ((v35 & (1 << v15)) == 0)
  {
LABEL_40:
    v41 = v15;
    v39 = (WTF *)WTF::dataLogLn<char [44],unsigned int>("Finish using on a block that's not in use: ", &v41);
    v40 = (WTF::PrintStream *)WTF::dataFile(v39);
    JSC::BlockDirectory::dumpBits((JSC::BlockDirectory *)v8, v40);
    __break(0xC471u);
    JUMPOUT(0x1985ED3B4);
  }
  *v33 = v34 & ~(1 << v15);
  v36 = __ldxr(v30);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v30))
LABEL_31:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 56), 0, a3, a4, a5, a6, a7, a8);
LABEL_32:
  while (1)
  {
    v37 = *v11;
    if ((*v11 & 3) != 1)
      break;
    v38 = __ldxr(v11);
    if (v38 == v37)
    {
      if (!__stxr(v37 & 0xFFFFFFFE, v11))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
}

unsigned int **WTF::Locker<WTF::CountingLock,void>::~Locker(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *a1;
  if (v9)
  {
    while (1)
    {
      v10 = *v9;
      if ((*v9 & 3) != 1)
        break;
      v11 = __ldxr(v9);
      if (v11 == v10)
      {
        if (!__stxr(v10 & 0xFFFFFFFE, v9))
          return a1;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::MarkedBlock::Handle::lastChanceToFinalize(JSC::MarkedBlock::Handle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;

  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  v10 = v9 + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v10 + 8) &= ~(1 << *((_DWORD *)this + 3));
  v11 = v9 + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v11 + 16) |= 1 << *((_DWORD *)this + 3);
  v12 = *((_QWORD *)this + 11);
  v13 = 0uLL;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v15 = *((_QWORD *)this + 10);
  v14 = *((_QWORD *)this + 11);
  *(_WORD *)(v14 + 28) = *(_WORD *)(v14 + 30);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 432);
  v16 = *((_QWORD *)this + 8);
  if (v16)
  {
    do
    {
      for (i = 0; i != 960; i += 24)
      {
        v20 = *(_QWORD *)(v16 + i + 56);
        if ((v20 & 2) == 0)
        {
          *(_QWORD *)(v16 + i + 56) = v20 & 0xFFFFFFFFFFFFFFFCLL | 2;
          if ((v20 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFCLL) + 24))(v20 & 0xFFFFFFFFFFFFFFFCLL, v16 + 48 + i, *(_QWORD *)(v16 + i + 64));
            v13 = 0uLL;
          }
        }
      }
      v16 = *(_QWORD *)(v16 + 16);
    }
    while (v16);
    v14 = *((_QWORD *)this + 11);
  }
  *(_OWORD *)(v14 + 168) = v13;
  v17 = (_OWORD *)(v14 + 168);
  v17[6] = v13;
  v17[7] = v13;
  v17[4] = v13;
  v17[5] = v13;
  v17[2] = v13;
  v17[3] = v13;
  v17[1] = v13;
  *(_DWORD *)(*((_QWORD *)this + 11) + 36) = *(_DWORD *)(*((_QWORD *)this + 10) + 436);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 32) + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v18 + 28) |= 1 << *((_DWORD *)this + 3);
  JSC::MarkedBlock::Handle::sweep(this, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::sweep(JSC::MarkedBlock::Handle *this, JSC::FreeList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FreeList *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  signed int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  int v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::FreeList *v81;
  uint64_t v82;
  int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  size_t v99;
  BOOL v100;
  BOOL v101;
  unsigned int v102;
  signed int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  JSC::FreeList *v110;
  uint64_t v111;
  int v112;
  _BOOL4 v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  WTF *v219;
  const char *v220;
  const char *v221;
  char v222;
  WTF::PrintStream *v223;
  WTF *v224;
  const char *v225;
  const char *v226;
  WTF *v227;
  const char *v228;
  const char *v229;
  WTF::PrintStream *v230;
  WTF *v231;
  const char *v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  WTF *v236;
  const char *v237;
  const char *v238;
  char v239;
  WTF::PrintStream *v240;
  WTF *v241;
  const char *v242;
  const char *v243;
  WTF *v244;
  const char *v245;
  const char *v246;
  WTF::PrintStream *v247;
  WTF *v248;
  const char *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  int v262;
  WTF *v263;
  WTF *v264;
  unsigned int v265;
  int v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  JSC::FreeList *v271;
  const void *v272;

  v8 = a2;
  v10 = *((_QWORD *)this + 10);
  v11 = *(unsigned __int8 *)(v10 + 202);
  *(_BYTE *)(v10 + 202) = 2;
  if (*((_BYTE *)this + 8) == 1)
    v12 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 16) >> *((_DWORD *)this + 3)) & 1;
  else
    v12 = 0;
  v13 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_5;
  }
  v268 = v10;
  do
  {
    v55 = v13;
    v56 = *((_QWORD *)this + 10);
    v57 = *(_QWORD *)(v56 + 800);
    if (v57 != -1)
    {
      v201 = *(unsigned int *)(v56 + 796);
      if (v57 >= v201)
      {
        __break(0xC471u);
        JUMPOUT(0x1985EEB7CLL);
      }
      v202 = *(_QWORD *)(*(_QWORD *)(v56 + 784) + 8 * v57);
      if (!*(_BYTE *)(v202 + 24) || !*(_QWORD *)(v202 + 32))
      {
        v71 = 0;
        v70 = 0;
        v263 = *(WTF **)(*(_QWORD *)(v56 + 784) + 8 * v57);
        v203 = v202 + 48;
        v266 = 1;
        v72 = 1;
        do
        {
          v66 = v11;
          v67 = (_QWORD *)(v203 + v71);
          v68 = *(_QWORD *)(v203 + v71 + 8);
          if ((v68 & 3) == 1)
          {
            v73 = v68 & 0xFFFFFFFFFFFFFFFCLL;
            v100 = (v68 & 0xFFFFFFFFFFFFFFFCLL) == 0;
            v68 = v68 & 0xFFFFFFFFFFFFFFFCLL | 2;
            v67[1] = v68;
            if (!v100)
            {
              (*(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)v73 + 24))(v73, v203 + v71, *(_QWORD *)(v203 + v71 + 16));
              v68 = v67[1];
            }
          }
          v69 = v68 & 3;
          if (v69 == 3)
          {
            *v67 = v70;
            v70 = v203 + v71;
          }
          else
          {
            if (!v69)
              v72 = 0;
            v266 = 0;
          }
          v11 = v66;
          v71 += 24;
        }
        while (v71 != 960);
        v202 = (unint64_t)v263;
        *((_BYTE *)v263 + 24) = v266;
        *((_BYTE *)v263 + 25) = v72;
        *((_QWORD *)v263 + 4) = v70;
        if (!v266)
        {
          v57 = *(_QWORD *)(v56 + 800);
          goto LABEL_328;
        }
        v57 = *(_QWORD *)(v56 + 800);
        if (!v70)
        {
LABEL_328:
          v210 = v57 + 1;
          *(_QWORD *)(v56 + 800) = v210;
LABEL_329:
          if (v210 >= *(unsigned int *)(v56 + 796))
            *(_QWORD *)(v56 + 800) = -1;
          goto LABEL_63;
        }
        v201 = *(unsigned int *)(v56 + 796);
      }
      if (v57 >= v201)
      {
        __break(0xC471u);
        JUMPOUT(0x1985EEC20);
      }
      if (!(_DWORD)v201)
        goto LABEL_360;
      v251 = *(_QWORD *)(v56 + 784);
      v252 = v251 + 8 * v201;
      v253 = *(_QWORD *)(v251 + 8 * v57);
      *(_QWORD *)(v251 + 8 * v57) = *(_QWORD *)(v252 - 8);
      *(_QWORD *)(v252 - 8) = v253;
      *(_DWORD *)(v56 + 796) = v201 - 1;
      WTF::fastFree(v202, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(v56 + 1072) -= 1024;
      v210 = *(_QWORD *)(v56 + 800);
      goto LABEL_329;
    }
LABEL_63:
    v13 = (_QWORD *)v55[2];
    if (*((_BYTE *)v55 + 24) && v55[4])
      goto LABEL_88;
    v265 = v11;
    v58 = 0;
    v59 = 0;
    v60 = v55 + 6;
    v61 = 1;
    v62 = 1;
    do
    {
      v63 = &v60[v58];
      v64 = v60[v58 + 1];
      if ((v64 & 3) != 1
        || (v65 = v64 & 0xFFFFFFFFFFFFFFFCLL,
            v100 = (v64 & 0xFFFFFFFFFFFFFFFCLL) == 0,
            v64 = v64 & 0xFFFFFFFFFFFFFFFCLL | 2,
            v63[1] = v64,
            v100))
      {
        LODWORD(v64) = v64 & 3;
        if ((_DWORD)v64 == 3)
          goto LABEL_66;
      }
      else
      {
        (*(void (**)(unint64_t, _QWORD *, _QWORD))(*(_QWORD *)v65 + 24))(v65, &v60[v58], v60[v58 + 2]);
        v64 = v63[1] & 3;
        if ((_DWORD)v64 == 3)
        {
LABEL_66:
          *v63 = v59;
          v59 = &v60[v58];
          goto LABEL_67;
        }
      }
      if (!(_DWORD)v64)
        v62 = 0;
      v61 = 0;
LABEL_67:
      v58 += 3;
    }
    while (v58 != 120);
    *((_BYTE *)v55 + 24) = v61;
    *((_BYTE *)v55 + 25) = v62;
    v55[4] = v59;
    v11 = v265;
    if (!v61 && v62)
    {
      v204 = v55[1];
      v205 = v55[2];
      if (v204)
      {
        *(_QWORD *)(v204 + 16) = v205;
        v205 = v55[2];
      }
      else
      {
        *((_QWORD *)this + 8) = v205;
      }
      if (v205)
        v206 = (_QWORD *)(v205 + 8);
      else
        v206 = (_QWORD *)((char *)this + 72);
      *v206 = v204;
      v207 = *((_QWORD *)this + 10);
      v272 = v55;
      v208 = (_QWORD *)(v207 + 784);
      v209 = *(unsigned int *)(v207 + 796);
      if ((_DWORD)v209 == *(_DWORD *)(v207 + 792))
      {
        v211 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v208, v209 + 1, (unint64_t)&v272);
        v209 = *(unsigned int *)(v207 + 796);
        *(_QWORD *)(*(_QWORD *)(v207 + 784) + 8 * v209) = *v211;
      }
      else
      {
        *(_QWORD *)(*v208 + 8 * v209) = v55;
      }
      *(_DWORD *)(v207 + 796) = v209 + 1;
      *v55 = 0;
    }
LABEL_88:
    v10 = v268;
  }
  while (v13);
  v14 = *((_QWORD *)this + 8);
  v8 = a2;
LABEL_5:
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = v14;
  if (v8)
    v15 = 1;
  else
    v15 = v12;
  if ((v15 & 1) == 0)
  {
    v52 = (unsigned __int8 *)(*((_QWORD *)this + 3) + 56);
    if (__ldaxr(v52))
    {
      __clrex();
    }
    else if (!__stxr(1u, v52))
    {
      goto LABEL_59;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v52);
LABEL_59:
    v54 = *(_QWORD *)(*((_QWORD *)this + 3) + 32) + 40 * (*((_DWORD *)this + 3) >> 5);
    *(_DWORD *)(v54 + 24) &= ~(1 << *((_DWORD *)this + 3));
    goto LABEL_113;
  }
  if (*((_BYTE *)this + 10))
  {
    v272 = this;
    WTF::dataLog<char [8],WTF::RawPointer,char [32]>(&v272);
    __break(0xC471u);
    JUMPOUT(0x1985EEB48);
  }
  if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 8) >> *((_DWORD *)this + 3)) & 1) != 0)
  {
    v272 = this;
    WTF::dataLog<char [8],WTF::RawPointer,char [30]>(&v272);
    __break(0xC471u);
    JUMPOUT(0x1985EEB74);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
  {
    v95 = (unsigned int *)(*((_QWORD *)this + 11) + 24);
    while (1)
    {
      v96 = *v95;
      if ((*v95 & 1) != 0)
        break;
      v97 = __ldaxr(v95);
      if (v97 == v96)
      {
        if (!__stxr((v96 | 1) + 4, v95))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)v95);
  }
LABEL_12:
  v16 = (WTF *)(*(uint64_t (**)(_QWORD, JSC::MarkedBlock::Handle *))(**(_QWORD **)(*((_QWORD *)this + 3) + 72)
                                                                             + 32))(*(_QWORD *)(*((_QWORD *)this + 3) + 72), this);
  v17 = *((_QWORD *)this + 3);
  if (v12)
  {
    (*(void (**)(_QWORD, JSC::MarkedBlock::Handle *, JSC::FreeList *))(**(_QWORD **)(*(_QWORD *)(v17 + 72)
                                                                                              + 16)
                                                                                + 16))(*(_QWORD *)(*(_QWORD *)(v17 + 72) + 16), this, v8);
    goto LABEL_118;
  }
  v18 = *((_QWORD *)this + 10);
  v19 = *((_QWORD *)this + 11);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(_DWORD *)(v18 + 432);
  v22 = *(_DWORD *)(v19 + 32);
  v23 = v22 == v21;
  if (*(_BYTE *)(v18 + 445))
  {
    v112 = v22 + 1;
    if (v22 == -1)
      v112 = 2;
    v113 = v112 == v21;
    if (v22)
      v114 = v113;
    else
      v114 = 1;
    if (*(_BYTE *)(v20 + 347) == 1)
      v115 = v114;
    else
      v115 = 0;
    if (v22 == v21)
      v23 = 1;
    else
      v23 = v115;
  }
  if (!v8)
  {
LABEL_360:
    __break(0xC471u);
    JUMPOUT(0x1985EE098);
  }
  v24 = ~*(_DWORD *)(*(_QWORD *)(v17 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 4) >> *((_DWORD *)this + 3);
  v25 = byte_1ECF4C400;
  v26 = *(_DWORD *)(v19 + 36);
  v27 = *(_DWORD *)(v20 + 436);
  v28 = *(_QWORD *)(v18 + 168);
  v29 = *(_QWORD *)(v18 + 160) ^ (*(_QWORD *)(v18 + 160) << 23);
  v30 = (v28 >> 26) ^ (v29 >> 17) ^ v28 ^ v29;
  v31 = v30 + v28;
  if (byte_1ECF4C400 || v26 == v27)
  {
    v98 = *(_DWORD *)this;
    v99 = (16 * *(_DWORD *)this);
    *(_QWORD *)(v18 + 160) = v28;
    *(_QWORD *)(v18 + 168) = v30;
    v100 = v26 != v27 && (v24 & 1) == 0;
    v101 = !v100 || BYTE1(qword_1ECF4C414) == 0;
    v271 = v8;
    if (!v101)
    {
      if (v23
        && (*(_QWORD *)(v19 + 40)
         || *(_QWORD *)(v19 + 48)
         || *(_QWORD *)(v19 + 56)
         || *(_QWORD *)(v19 + 64)
         || *(_QWORD *)(v19 + 72)
         || *(_QWORD *)(v19 + 80)
         || *(_QWORD *)(v19 + 88)
         || *(_QWORD *)(v19 + 96)
         || *(_QWORD *)(v19 + 104)
         || *(_QWORD *)(v19 + 112)
         || *(_QWORD *)(v19 + 120)
         || *(_QWORD *)(v19 + 128)
         || *(_QWORD *)(v19 + 136)
         || *(_QWORD *)(v19 + 144)
         || *(_QWORD *)(v19 + 152)
         || *(_QWORD *)(v19 + 160)))
      {
        v234 = WTF::dataFile(v16);
        v235 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v234 + 32))(v234);
        v236 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32))(v235);
        WTF::printInternal(v236, (WTF::PrintStream *)"Block ", v237);
        WTF::printInternal(v236, (const void *)v19);
        WTF::printInternal(v236, (WTF::PrintStream *)": marks not empty!\n", v238);
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
        v239 = atomic_load((unsigned int *)(v19 + 24));
        v240 = (WTF::PrintStream *)(v239 & 1);
        v241 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32))(v235);
        WTF::printInternal(v241, (WTF::PrintStream *)"Block lock is held: ", v242);
        WTF::printInternal(v241, v240);
        WTF::printInternal(v241, (WTF::PrintStream *)"\n", v243);
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
        v244 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32))(v235);
        WTF::printInternal(v244, (WTF::PrintStream *)"Marking version of block: ", v245);
        WTF::printInternal(v244, (WTF::PrintStream *)*(unsigned int *)(v19 + 32));
        WTF::printInternal(v244, (WTF::PrintStream *)"\n", v246);
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
        v247 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)this + 10) + 432);
        v248 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 32))(v235);
        WTF::printInternal(v248, (WTF::PrintStream *)"Marking version of heap: ", v249);
        WTF::printInternal(v248, v247);
        WTF::printInternal(v248, (WTF::PrintStream *)"\n", v250);
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
        __break(0xC471u);
        JUMPOUT(0x1985EEB1CLL);
      }
      v154 = *((unsigned int *)this + 1);
      v155 = v19 + 16 * v154;
      v156 = 0x4000 - 16 * v154;
      if (v156 >= 0x3ED1)
        goto LABEL_354;
      v157 = v30 + v28;
      v158 = (unsigned __int8 *)(v17 + 56);
      if (__ldaxr((unsigned __int8 *)(v17 + 56)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v158))
      {
LABEL_244:
        v160 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
        v161 = v160 + 40 * (*((_DWORD *)this + 3) >> 5);
        *(_DWORD *)(v161 + 24) &= ~(1 << *((_DWORD *)this + 3));
        v162 = v160 + 40 * (*((_DWORD *)this + 3) >> 5);
        *(_DWORD *)(v162 + 16) &= ~(1 << *((_DWORD *)this + 3));
        v163 = v160 + 40 * (*((_DWORD *)this + 3) >> 5);
        *(_DWORD *)(v163 + 4) &= ~(1 << *((_DWORD *)this + 3));
        *((_BYTE *)this + 10) = 1;
        LODWORD(v163) = __ldxr(v158);
        if ((_DWORD)v163 == 1)
        {
          if (!__stlxr(0, v158))
            goto LABEL_299;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v158, 0, a3, a4, a5, a6, a7, a8);
LABEL_299:
        v196 = v157;
        if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
        {
          v197 = (unsigned int *)(v19 + 24);
          while (1)
          {
            v198 = *v197;
            if ((*v197 & 3) != 1)
              break;
            v199 = __ldxr(v197);
            if (v199 == v198)
            {
              if (!__stxr(v198 & 0xFFFFFFFE, v197))
                goto LABEL_305;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v197, 0, a3, a4, a5, a6, a7, a8);
          v196 = v157;
        }
LABEL_305:
        if (v25 && (_DWORD)v154 != 1024)
        {
          memset_pattern16((void *)(v19 + 16 * v154), &memset_pattern, 0x4000 - 16 * v154);
          v196 = v157;
        }
        *(_QWORD *)(v155 + 8) = ((v156 << 32) | 1) ^ v196;
        *(_QWORD *)v271 = v155;
        *((_QWORD *)v271 + 1) = v155 + v156;
        *((_QWORD *)v271 + 2) = v155 + 1;
        *((_QWORD *)v271 + 3) = v196;
        *((_DWORD *)v271 + 8) = v156;
        goto LABEL_118;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v158);
      goto LABEL_244;
    }
    v267 = v11;
    v102 = 1024 - v98;
    v103 = *((_DWORD *)this + 1);
    if ((int)(1024 - v98) >= v103)
    {
      v269 = v10;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v104 = 0;
      v191 = v19 + 40;
      a3 = v19 + 168;
      if (v25)
        v192 = (_DWORD)v99 == 0;
      else
        v192 = 1;
      a4 = v192;
      a5 = 1;
      v193 = v98;
      do
      {
        if ((v24 & 1) == 0)
          goto LABEL_281;
        if (!v23)
          goto LABEL_295;
        if (v102 > 0x3FF)
          goto LABEL_353;
        if (((*(_QWORD *)(v191 + (((unint64_t)v102 >> 3) & 0x1FFFFFF8)) >> v102) & 1) == 0)
        {
LABEL_295:
          if (v26 != v27)
            goto LABEL_281;
          if (v102 > 0x3FF)
            goto LABEL_353;
          if (((*(_QWORD *)(a3 + (((unint64_t)v102 >> 3) & 0x1FFFFFF8)) >> v102) & 1) == 0)
          {
LABEL_281:
            if ((a4 & 1) == 0)
            {
              v256 = v191;
              v257 = v190;
              v264 = (WTF *)v99;
              v255 = a3;
              v261 = v27;
              v262 = v26;
              v259 = v104;
              v260 = v31;
              v258 = v98;
              v254 = a4;
              memset_pattern16((void *)(v19 + 16 * (int)v102), &memset_pattern, v99);
              a5 = 1;
              a4 = v254;
              a3 = v255;
              v191 = v256;
              v190 = v257;
              v98 = v258;
              v104 = v259;
              v31 = v260;
              v27 = v261;
              v26 = v262;
              v99 = (size_t)v264;
            }
            if ((int)v102 + (unint64_t)v193 < v189)
            {
              v194 = v19 + 16 * v189;
              v195 = (v188 << 36) | 1;
              if (v190)
                v195 = ((int)v190 - (int)v194) | (unint64_t)(v188 << 36);
              *(_QWORD *)(v194 + 8) = v195 ^ v31;
              v104 += 16 * v188;
              v98 = *(_DWORD *)this;
              v103 = *((_DWORD *)this + 1);
              v190 = v19 + 16 * v189;
              v188 = 0;
            }
            v188 += v193;
            v193 = v98;
            v189 = (int)v102;
          }
        }
        v102 -= v193;
      }
      while ((int)v102 >= v103);
      if (v188)
      {
        v105 = v19 + 16 * v189;
        LOBYTE(v11) = v267;
        if (v190)
          v200 = (int)v190 - (int)v105;
        else
          v200 = 1;
        v10 = v269;
        *(_QWORD *)(v105 + 8) = (v200 | (v188 << 36)) ^ v31;
        LODWORD(v104) = 16 * v188 + v104;
        goto LABEL_140;
      }
      v105 = v190;
      v10 = v269;
    }
    else
    {
      LODWORD(v104) = 0;
      v105 = 0;
    }
    LOBYTE(v11) = v267;
LABEL_140:
    if (v26 == v27)
      *(_DWORD *)(v19 + 36) = 0;
    if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
    {
      v106 = (unsigned int *)(v19 + 24);
      while (1)
      {
        v107 = *v106;
        if ((*v106 & 3) != 1)
          break;
        v108 = __ldxr(v106);
        if (v108 == v107)
        {
          if (!__stxr(v107 & 0xFFFFFFFE, v106))
            goto LABEL_148;
        }
        else
        {
          __clrex();
        }
      }
      v215 = v31;
      v216 = v104;
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v106, 0, a3, a4, a5, a6, a7, a8);
      LODWORD(v104) = v216;
      v31 = v215;
    }
LABEL_148:
    if (v105)
    {
      v109 = *(_QWORD *)(v105 + 8) ^ v31;
      v110 = v271;
      *(_QWORD *)v271 = v105;
      *((_QWORD *)v271 + 1) = v105 + HIDWORD(v109);
      v111 = v105 + (int)v109;
    }
    else
    {
      v31 = 0;
      LODWORD(v104) = 0;
      v110 = v271;
      *(_QWORD *)v271 = 0;
      *((_QWORD *)v271 + 1) = 0;
      v111 = 1;
    }
    *((_QWORD *)v110 + 2) = v111;
    *((_QWORD *)v110 + 3) = v31;
    *((_DWORD *)v110 + 8) = v104;
    goto LABEL_109;
  }
  v32 = *(unsigned int *)this;
  *(_QWORD *)(v18 + 160) = v28;
  *(_QWORD *)(v18 + 168) = v30;
  if ((v24 & 1) != 0)
  {
    v43 = 1024 - v32;
    v44 = *((_DWORD *)this + 1);
    if (v23)
    {
      if (v43 >= v44)
      {
        v116 = 0;
        v46 = 0;
        v45 = 0;
        v117 = 0;
        v118 = v32;
        do
        {
          if (v43 >= 0x400)
            goto LABEL_353;
          if (((*(_QWORD *)(v19 + 40 + (((unint64_t)v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
          {
            if (v43 + (unint64_t)v118 < v117)
            {
              v119 = 16 * v116;
              v120 = v19 + 16 * v117;
              v121 = (v116 << 36) | 1;
              v122 = ((int)v45 - (int)v120) | (unint64_t)(v116 << 36);
              if (v45)
                v121 = v122;
              *(_QWORD *)(v120 + 8) = v121 ^ v31;
              v46 += v119;
              LODWORD(v32) = *(_DWORD *)this;
              v44 = *((_DWORD *)this + 1);
              v45 = v120;
              v116 = 0;
            }
            v116 += v118;
            v118 = v32;
            v117 = v43;
          }
          v43 -= v118;
        }
        while (v43 >= v44);
        if (v116)
        {
          v135 = 16 * v116;
          v136 = v19 + 16 * v117;
          v137 = (v116 << 36) | 1;
          v138 = ((int)v45 - (int)v136) | (unint64_t)(v116 << 36);
          if (v45)
            v137 = v138;
          *(_QWORD *)(v136 + 8) = v137 ^ v31;
          v46 += v135;
          v45 = v19 + 16 * v117;
        }
      }
      else
      {
        v45 = 0;
        v46 = 0;
      }
      if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
      {
        v47 = (unsigned int *)(v19 + 24);
        while (1)
        {
          v48 = *v47;
          if ((*v47 & 3) != 1)
            break;
          v49 = __ldxr(v47);
          if (v49 == v48)
          {
            if (!__stxr(v48 & 0xFFFFFFFE, v47))
              goto LABEL_53;
          }
          else
          {
            __clrex();
          }
        }
        v213 = v31;
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v47, 0, a3, a4, a5, a6, a7, a8);
        v31 = v213;
      }
LABEL_53:
      if (v45)
      {
        v50 = *(_QWORD *)(v45 + 8) ^ v31;
        *(_QWORD *)v8 = v45;
        *((_QWORD *)v8 + 1) = v45 + HIDWORD(v50);
        v51 = v45 + (int)v50;
      }
      else
      {
        v31 = 0;
        v46 = 0;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        v51 = 1;
      }
      *((_QWORD *)v8 + 2) = v51;
      *((_QWORD *)v8 + 3) = v31;
      *((_DWORD *)v8 + 8) = v46;
      goto LABEL_109;
    }
    v81 = v8;
    if (v43 >= v44)
    {
      v123 = 0;
      v83 = 0;
      v82 = 0;
      v124 = 0;
      do
      {
        v125 = v43;
        v126 = v32;
        if (v43 + (unint64_t)v32 < v124)
        {
          v127 = 16 * v123;
          v128 = v19 + 16 * v124;
          v129 = (v123 << 36) | 1;
          v130 = ((int)v82 - (int)v128) | (unint64_t)(v123 << 36);
          if (v82)
            v129 = v130;
          *(_QWORD *)(v128 + 8) = v129 ^ v31;
          v83 += v127;
          LODWORD(v32) = *(_DWORD *)this;
          v44 = *((_DWORD *)this + 1);
          v82 = v128;
          v123 = 0;
        }
        v123 += v126;
        v43 -= v32;
        v124 = v125;
      }
      while ((int)v125 - (int)v32 >= v44);
      if (v123)
      {
        v131 = 16 * v123;
        v132 = v19 + 16 * v125;
        v133 = (v123 << 36) | 1;
        v134 = ((int)v82 - (int)v132) | (unint64_t)(v123 << 36);
        if (v82)
          v133 = v134;
        *(_QWORD *)(v132 + 8) = v133 ^ v31;
        v83 += v131;
        v82 = v19 + 16 * v125;
      }
    }
    else
    {
      v82 = 0;
      v83 = 0;
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 10) + 445))
      goto LABEL_106;
    v84 = (unsigned int *)(v19 + 24);
    while (1)
    {
      v85 = *v84;
      if ((*v84 & 3) != 1)
        goto LABEL_336;
      v86 = __ldxr(v84);
      if (v86 == v85)
      {
        if (!__stxr(v85 & 0xFFFFFFFE, v84))
          goto LABEL_106;
      }
      else
      {
        __clrex();
      }
    }
  }
  if (!v23)
  {
    if (BYTE1(qword_1ECF4C414))
    {
      v74 = *((unsigned int *)this + 1);
      v34 = v19 + 16 * v74;
      v35 = 0x4000 - 16 * v74;
      if (v35 < 0x3ED1)
      {
        v36 = v30 + v28;
        v75 = (unsigned __int8 *)(v17 + 56);
        if (__ldaxr((unsigned __int8 *)(v17 + 56)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v75))
        {
LABEL_95:
          v77 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
          v78 = v77 + 40 * (*((_DWORD *)this + 3) >> 5);
          *(_DWORD *)(v78 + 24) &= ~(1 << *((_DWORD *)this + 3));
          v79 = v77 + 40 * (*((_DWORD *)this + 3) >> 5);
          *(_DWORD *)(v79 + 16) &= ~(1 << *((_DWORD *)this + 3));
          v80 = v77 + 40 * (*((_DWORD *)this + 3) >> 5);
          *(_DWORD *)(v80 + 4) &= ~(1 << *((_DWORD *)this + 3));
          *((_BYTE *)this + 10) = 1;
          LODWORD(v80) = __ldxr(v75);
          if ((_DWORD)v80 == 1)
          {
            if (!__stlxr(0, v75))
              goto LABEL_207;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v75, 0, a3, a4, a5, a6, a7, a8);
LABEL_207:
          v148 = v36;
          if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
          {
            v149 = (unsigned int *)(v19 + 24);
            while (1)
            {
              v150 = *v149;
              if ((*v149 & 3) != 1)
                break;
              v151 = __ldxr(v149);
              if (v151 == v150)
              {
                if (!__stxr(v150 & 0xFFFFFFFE, v149))
                  goto LABEL_222;
              }
              else
              {
                __clrex();
              }
            }
LABEL_337:
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v149, 0, a3, a4, a5, a6, a7, a8);
            v148 = v36;
          }
LABEL_222:
          *(_QWORD *)(v34 + 8) = ((v35 << 32) | 1) ^ v148;
          *(_QWORD *)v8 = v34;
          *((_QWORD *)v8 + 1) = v34 + v35;
          *((_QWORD *)v8 + 2) = v34 + 1;
          *((_QWORD *)v8 + 3) = v148;
          *((_DWORD *)v8 + 8) = v35;
          goto LABEL_118;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v75);
        goto LABEL_95;
      }
      __break(0xC471u);
LABEL_353:
      __break(1u);
LABEL_354:
      __break(0xC471u);
      JUMPOUT(0x1985EEBD0);
    }
    v81 = v8;
    v144 = 1024 - v32;
    v145 = *((_DWORD *)this + 1);
    if (1024 - (int)v32 >= v145)
    {
      v176 = 0;
      v83 = 0;
      v82 = 0;
      v177 = 0;
      do
      {
        v178 = v144;
        if (v144 + (unint64_t)v32 >= v177)
        {
          v183 = v32;
        }
        else
        {
          v179 = 16 * v176;
          v180 = v19 + 16 * v177;
          v181 = (v176 << 36) | 1;
          v182 = ((int)v82 - (int)v180) | (unint64_t)(v176 << 36);
          if (!v82)
            v182 = v181;
          *(_QWORD *)(v180 + 8) = v182 ^ v31;
          v83 += v179;
          v183 = *(unsigned int *)this;
          v145 = *((_DWORD *)this + 1);
          v82 = v180;
          v176 = 0;
        }
        v176 += v32;
        v144 = v178 - v183;
        v32 = v183;
        v177 = v178;
      }
      while (v144 >= v145);
      if (v176)
      {
        v184 = 16 * v176;
        v185 = v19 + 16 * v178;
        v186 = (v176 << 36) | 1;
        v187 = ((int)v82 - (int)v185) | (unint64_t)(v176 << 36);
        if (!v82)
          v187 = v186;
        *(_QWORD *)(v185 + 8) = v187 ^ v31;
        v83 += v184;
        v82 = v19 + 16 * v178;
      }
    }
    else
    {
      v82 = 0;
      v83 = 0;
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 10) + 445))
    {
LABEL_106:
      if (!v82)
        goto LABEL_194;
      goto LABEL_107;
    }
    v84 = (unsigned int *)(v19 + 24);
    while (1)
    {
      v146 = *v84;
      if ((*v84 & 3) != 1)
        break;
      v147 = __ldxr(v84);
      if (v147 == v146)
      {
        if (!__stxr(v146 & 0xFFFFFFFE, v84))
          goto LABEL_106;
      }
      else
      {
        __clrex();
      }
    }
LABEL_336:
    v212 = v31;
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v84, 0, a3, a4, a5, a6, a7, a8);
    v31 = v212;
    goto LABEL_106;
  }
  if (BYTE1(qword_1ECF4C414))
  {
    if (*(_QWORD *)(v19 + 40)
      || *(_QWORD *)(v19 + 48)
      || *(_QWORD *)(v19 + 56)
      || *(_QWORD *)(v19 + 64)
      || *(_QWORD *)(v19 + 72)
      || *(_QWORD *)(v19 + 80)
      || *(_QWORD *)(v19 + 88)
      || *(_QWORD *)(v19 + 96)
      || *(_QWORD *)(v19 + 104)
      || *(_QWORD *)(v19 + 112)
      || *(_QWORD *)(v19 + 120)
      || *(_QWORD *)(v19 + 128)
      || *(_QWORD *)(v19 + 136)
      || *(_QWORD *)(v19 + 144)
      || *(_QWORD *)(v19 + 152)
      || *(_QWORD *)(v19 + 160))
    {
      v217 = WTF::dataFile(v16);
      v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 32))(v217);
      v219 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 32))(v218);
      WTF::printInternal(v219, (WTF::PrintStream *)"Block ", v220);
      WTF::printInternal(v219, (const void *)v19);
      WTF::printInternal(v219, (WTF::PrintStream *)": marks not empty!\n", v221);
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
      v222 = atomic_load((unsigned int *)(v19 + 24));
      v223 = (WTF::PrintStream *)(v222 & 1);
      v224 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 32))(v218);
      WTF::printInternal(v224, (WTF::PrintStream *)"Block lock is held: ", v225);
      WTF::printInternal(v224, v223);
      WTF::printInternal(v224, (WTF::PrintStream *)"\n", v226);
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
      v227 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 32))(v218);
      WTF::printInternal(v227, (WTF::PrintStream *)"Marking version of block: ", v228);
      WTF::printInternal(v227, (WTF::PrintStream *)*(unsigned int *)(v19 + 32));
      WTF::printInternal(v227, (WTF::PrintStream *)"\n", v229);
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
      v230 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)this + 10) + 432);
      v231 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 32))(v218);
      WTF::printInternal(v231, (WTF::PrintStream *)"Marking version of heap: ", v232);
      WTF::printInternal(v231, v230);
      WTF::printInternal(v231, (WTF::PrintStream *)"\n", v233);
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
      __break(0xC471u);
      JUMPOUT(0x1985EE9ACLL);
    }
    v33 = *((unsigned int *)this + 1);
    v34 = v19 + 16 * v33;
    v35 = 0x4000 - 16 * v33;
    if (v35 >= 0x3ED1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985EEB98);
    }
    v36 = v30 + v28;
    v37 = (unsigned __int8 *)(v17 + 56);
    if (__ldaxr((unsigned __int8 *)(v17 + 56)))
    {
      __clrex();
      goto LABEL_39;
    }
    if (__stxr(1u, v37))
LABEL_39:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v37);
    v39 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    v40 = v39 + 40 * (*((_DWORD *)this + 3) >> 5);
    *(_DWORD *)(v40 + 24) &= ~(1 << *((_DWORD *)this + 3));
    v41 = v39 + 40 * (*((_DWORD *)this + 3) >> 5);
    *(_DWORD *)(v41 + 16) &= ~(1 << *((_DWORD *)this + 3));
    v42 = v39 + 40 * (*((_DWORD *)this + 3) >> 5);
    *(_DWORD *)(v42 + 4) &= ~(1 << *((_DWORD *)this + 3));
    *((_BYTE *)this + 10) = 1;
    LODWORD(v42) = __ldxr(v37);
    if ((_DWORD)v42 == 1)
    {
      if (!__stlxr(0, v37))
      {
LABEL_216:
        v148 = v36;
        if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
        {
          v149 = (unsigned int *)(v19 + 24);
          while (1)
          {
            v152 = *v149;
            if ((*v149 & 3) != 1)
              goto LABEL_337;
            v153 = __ldxr(v149);
            if (v153 == v152)
            {
              if (!__stxr(v152 & 0xFFFFFFFE, v149))
                goto LABEL_222;
            }
            else
            {
              __clrex();
            }
          }
        }
        goto LABEL_222;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_216;
  }
  v81 = v8;
  v139 = 1024 - v32;
  v140 = *((_DWORD *)this + 1);
  if (1024 - (int)v32 >= v140)
  {
    v164 = 0;
    v83 = 0;
    v82 = 0;
    v165 = 0;
    do
    {
      v166 = v139;
      if (v139 + (unint64_t)v32 >= v165)
      {
        v171 = v32;
      }
      else
      {
        v167 = 16 * v164;
        v168 = v19 + 16 * v165;
        v169 = (v164 << 36) | 1;
        v170 = ((int)v82 - (int)v168) | (unint64_t)(v164 << 36);
        if (!v82)
          v170 = v169;
        *(_QWORD *)(v168 + 8) = v170 ^ v31;
        v83 += v167;
        v171 = *(unsigned int *)this;
        v140 = *((_DWORD *)this + 1);
        v82 = v168;
        v164 = 0;
      }
      v164 += v32;
      v139 = v166 - v171;
      v32 = v171;
      v165 = v166;
    }
    while (v139 >= v140);
    if (v164)
    {
      v172 = 16 * v164;
      v173 = v19 + 16 * v166;
      v174 = (v164 << 36) | 1;
      v175 = ((int)v82 - (int)v173) | (unint64_t)(v164 << 36);
      if (!v82)
        v175 = v174;
      *(_QWORD *)(v173 + 8) = v175 ^ v31;
      v83 += v172;
      v82 = v19 + 16 * v166;
    }
  }
  else
  {
    v82 = 0;
    v83 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 10) + 445))
  {
    v141 = (unsigned int *)(v19 + 24);
    while (1)
    {
      v142 = *v141;
      if ((*v141 & 3) != 1)
        break;
      v143 = __ldxr(v141);
      if (v143 == v142)
      {
        if (!__stxr(v142 & 0xFFFFFFFE, v141))
          goto LABEL_193;
      }
      else
      {
        __clrex();
      }
    }
    v214 = v31;
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v141, 0, a3, a4, a5, a6, a7, a8);
    v31 = v214;
  }
LABEL_193:
  if (v82)
  {
LABEL_107:
    v87 = *(_QWORD *)(v82 + 8) ^ v31;
    *(_QWORD *)v81 = v82;
    *((_QWORD *)v81 + 1) = v82 + HIDWORD(v87);
    v88 = v82 + (int)v87;
    goto LABEL_108;
  }
LABEL_194:
  v31 = 0;
  v83 = 0;
  *(_QWORD *)v81 = 0;
  *((_QWORD *)v81 + 1) = 0;
  v88 = 1;
LABEL_108:
  *((_QWORD *)v81 + 2) = v88;
  *((_QWORD *)v81 + 3) = v31;
  *((_DWORD *)v81 + 8) = v83;
LABEL_109:
  v52 = (unsigned __int8 *)(*((_QWORD *)this + 3) + 56);
  if (__ldaxr(v52))
  {
    __clrex();
    goto LABEL_111;
  }
  if (__stxr(1u, v52))
LABEL_111:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v52);
  v90 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  v91 = v90 + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v91 + 24) &= ~(1 << *((_DWORD *)this + 3));
  v92 = v90 + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v92 + 16) &= ~(1 << *((_DWORD *)this + 3));
  v93 = v90 + 40 * (*((_DWORD *)this + 3) >> 5);
  *(_DWORD *)(v93 + 4) &= ~(1 << *((_DWORD *)this + 3));
  *((_BYTE *)this + 10) = 1;
LABEL_113:
  v94 = __ldxr(v52);
  if (v94 == 1)
  {
    if (!__stlxr(0, v52))
      goto LABEL_118;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v52, 0, a3, a4, a5, a6, a7, a8);
LABEL_118:
  *(_BYTE *)(v10 + 202) = v11;
}

void JSC::MarkedBlock::Handle::resumeAllocating(JSC::MarkedBlock::Handle *this, JSC::FreeList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;

  v10 = *((_QWORD *)this + 3);
  v11 = (unsigned int *)(*((_QWORD *)this + 11) + 24);
  v17 = v11;
  while (1)
  {
    v12 = *v11;
    if ((*v11 & 1) != 0)
      break;
    v13 = __ldaxr(v11);
    if (v13 == v12)
    {
      if (!__stxr((v12 | 1) + 4, v11))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)v11);
LABEL_8:
  if (*(_DWORD *)(*((_QWORD *)this + 11) + 36) == *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 436))
  {
    if (v17)
    {
      while (1)
      {
        v14 = *v17;
        if ((*v17 & 3) != 1)
          break;
        v15 = __ldxr(v17);
        if (v15 == v14)
        {
          if (!__stxr(v14 & 0xFFFFFFFE, v17))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_16:
    v16 = *(_QWORD *)(v10 + 32) + 40 * (*((_DWORD *)this + 3) >> 5);
    *(_DWORD *)(v16 + 28) |= 1 << *((_DWORD *)this + 3);
    JSC::MarkedBlock::Handle::sweep(this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 1;
    *((_QWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 8) = 0;
    WTF::Locker<WTF::CountingLock,void>::~Locker(&v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::MarkedBlock::aboutToMarkSlow(JSC::MarkedBlock *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;

  v10 = (_OWORD *)((char *)this + 264);
  v11 = (unsigned int *)((char *)this + 24);
  while (1)
  {
    v12 = *v11;
    if ((*v11 & 1) != 0)
      break;
    v13 = __ldaxr(v11);
    if (v13 == v12)
    {
      if (!__stxr((v12 | 1) + 4, v11))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow((uint64_t)this + 24);
LABEL_6:
  if (*((_DWORD *)this + 8) == a2)
    goto LABEL_26;
  v14 = *(_QWORD *)(*(_QWORD *)this + 24);
  v15 = (unsigned __int8 *)(v14 + 56);
  if (__ldaxr((unsigned __int8 *)(v14 + 56)))
  {
    __clrex();
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 56);
    goto LABEL_10;
  }
  if (__stxr(1u, v15))
    goto LABEL_9;
LABEL_10:
  v17 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)this + 12) >> 5) + 8) & (1 << *(_DWORD *)(*(_QWORD *)this + 12));
  v18 = __ldxr(v15);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v15))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v14 + 56), 0, a3, a4, a5, a6, a7, a8);
  if (v17)
    goto LABEL_13;
  v24 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v24 + 347) != 1)
    goto LABEL_13;
  v25 = *((_DWORD *)this + 8);
  if (v25)
  {
    v26 = __CFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      v27 = 2;
    if (v27 != a2)
      goto LABEL_13;
  }
  v28 = *(_DWORD *)(v24 + 436);
  if (*((_DWORD *)this + 9) == v28)
  {
LABEL_13:
    *(_OWORD *)((char *)this + 152) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  else
  {
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 200) = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)this + 88);
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)this + 104);
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 248) = *(_OWORD *)((char *)this + 120);
    *(_OWORD *)((char *)this + 120) = 0u;
    v29 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)((char *)this + 136) = 0u;
    v30 = *(_OWORD *)((char *)this + 152);
    *v10 = v29;
    v10[1] = v30;
    *(_OWORD *)((char *)this + 152) = 0u;
    *((_DWORD *)this + 9) = v28;
  }
  *((_WORD *)this + 14) = *((_WORD *)this + 15);
  __dmb(0xAu);
  *((_DWORD *)this + 8) = a2;
  if (__ldaxr(v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 56);
LABEL_17:
  v20 = *(_QWORD *)(v14 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)this + 12) >> 5);
  *(_DWORD *)(v20 + 32) |= 1 << *(_DWORD *)(*(_QWORD *)this + 12);
  v21 = __ldxr(v15);
  if (v21 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v14 + 56), 0, a3, a4, a5, a6, a7, a8);
LABEL_26:
  while (1)
  {
    v22 = *v11;
    if ((*v11 & 3) != 1)
      break;
    v23 = __ldxr(v11);
    if (v23 == v22)
    {
      if (!__stxr(v22 & 0xFFFFFFFE, v11))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::MarkedBlock::areMarksStale(JSC::MarkedBlock *this)
{
  return *((_DWORD *)this + 8) != *(_DWORD *)(*((_QWORD *)this + 1) + 432);
}

BOOL JSC::MarkedBlock::Handle::areMarksStale(JSC::MarkedBlock::Handle *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 11) + 32) != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 432);
}

void JSC::MarkedBlock::noteMarkedSlow(JSC::MarkedBlock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;

  v9 = *(_QWORD *)(*(_QWORD *)this + 24);
  v10 = (unsigned __int8 *)(v9 + 56);
  if (__ldaxr((unsigned __int8 *)(v9 + 56)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *(_QWORD *)(v9 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)this + 12) >> 5);
  *(_DWORD *)(v12 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)this + 12);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v10))
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 56), 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::dumpState(JSC::MarkedBlock::Handle *this, WTF::PrintStream *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  char *v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  WTF::PrintStream *v13;
  float v14;
  WTF::PrintStream *v15;
  float v16;
  size_t v17;
  int v18;
  char *v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  float v23;
  WTF::PrintStream *v24;
  float v25;
  WTF::PrintStream *v26;
  float v27;
  size_t v28;
  int v29;
  char *v30;
  WTF::PrintStream *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  WTF::PrintStream *v35;
  float v36;
  WTF::PrintStream *v37;
  float v38;
  size_t v39;
  int v40;
  char *v41;
  WTF::PrintStream *v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  float v45;
  WTF::PrintStream *v46;
  float v47;
  WTF::PrintStream *v48;
  float v49;
  size_t v50;
  int v51;
  char *v52;
  WTF::PrintStream *v53;
  uint64_t v54;
  WTF::PrintStream *v55;
  float v56;
  WTF::PrintStream *v57;
  float v58;
  WTF::PrintStream *v59;
  float v60;
  size_t v61;
  int v62;
  char *v63;
  WTF::PrintStream *v64;
  uint64_t v65;
  WTF::PrintStream *v66;
  float v67;
  WTF::PrintStream *v68;
  float v69;
  WTF::PrintStream *v70;
  float v71;
  size_t v72;
  int v73;
  char *v74;
  WTF::PrintStream *v75;
  uint64_t v76;
  WTF::PrintStream *v77;
  float v78;
  WTF::PrintStream *v79;
  float v80;
  WTF::PrintStream *v81;
  float v82;
  size_t v83;
  int v84;
  char *v85;
  WTF::PrintStream *v86;
  uint64_t v87;
  WTF::PrintStream *v88;
  float v89;
  WTF::PrintStream *v90;
  float v91;
  WTF::PrintStream *v92;
  float v93;
  size_t v94;
  int v95;
  char *v96;
  WTF::PrintStream *v97;
  uint64_t v98;
  WTF::PrintStream *v99;
  float v100;
  WTF::PrintStream *v101;
  float v102;
  WTF::PrintStream *v103;
  float v104;
  size_t v105;
  int v106;
  char *v107;
  WTF::PrintStream *v108;
  uint64_t v109;
  WTF::PrintStream *v110;
  float v111;
  WTF::PrintStream *v112;
  float v113;
  WTF::PrintStream *v114;
  float v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  char v126;

  v4 = (unsigned __int8 *)(*((_QWORD *)this + 3) + 56);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
LABEL_5:
  v6 = *((_QWORD *)this + 3);
  v7 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5));
  if (v7)
    v8 = "YES";
  else
    v8 = "no";
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v10 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v124, v12);
  WTF::printExpectedCStringHelper(v11, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  WTF::PrintStream::printf(v9, "%s", "Live");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v14);
  WTF::printExpectedCStringHelper(v13, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  if (v7)
    v17 = 3;
  else
    v17 = 2;
  WTF::StringImpl::utf8ForCharacters(v8, v17, (uint64_t)&v124, v16);
  WTF::printExpectedCStringHelper(v15, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v18 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 4);
  if (v18)
    v19 = "YES";
  else
    v19 = "no";
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v21 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v23);
  WTF::printExpectedCStringHelper(v22, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
  WTF::PrintStream::printf(v20, "%s", "Empty");
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
  if (v18)
    v28 = 3;
  else
    v28 = 2;
  WTF::StringImpl::utf8ForCharacters(v19, v28, (uint64_t)&v124, v27);
  WTF::printExpectedCStringHelper(v26, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v29 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 8);
  if (v29)
    v30 = "YES";
  else
    v30 = "no";
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v32 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 32))(v31);
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v34);
  WTF::printExpectedCStringHelper(v33, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 40))(v31);
  WTF::PrintStream::printf(v31, "%s", "Allocated");
  v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 32))(v31);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v36);
  WTF::printExpectedCStringHelper(v35, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 40))(v31);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 32))(v31);
  if (v29)
    v39 = 3;
  else
    v39 = 2;
  WTF::StringImpl::utf8ForCharacters(v30, v39, (uint64_t)&v124, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 40))(v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v40 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 12);
  if (v40)
    v41 = "YES";
  else
    v41 = "no";
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v43 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 32))(v42);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 40))(v42);
  WTF::PrintStream::printf(v42, "%s", "CanAllocateButNotEmpty");
  v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v47);
  WTF::printExpectedCStringHelper(v46, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 40))(v42);
  v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 32))(v42);
  if (v40)
    v50 = 3;
  else
    v50 = 2;
  WTF::StringImpl::utf8ForCharacters(v41, v50, (uint64_t)&v124, v49);
  WTF::printExpectedCStringHelper(v48, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 40))(v42);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v51 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 16);
  if (v51)
    v52 = "YES";
  else
    v52 = "no";
  v53 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v54 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 32))(v53);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 40))(v53);
  WTF::PrintStream::printf(v53, "%s", "Destructible");
  v57 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 32))(v53);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v58);
  WTF::printExpectedCStringHelper(v57, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 40))(v53);
  v59 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 32))(v53);
  if (v51)
    v61 = 3;
  else
    v61 = 2;
  WTF::StringImpl::utf8ForCharacters(v52, v61, (uint64_t)&v124, v60);
  WTF::printExpectedCStringHelper(v59, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 40))(v53);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v62 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 20);
  if (v62)
    v63 = "YES";
  else
    v63 = "no";
  v64 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v65 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 32))(v64);
  v66 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v67);
  WTF::printExpectedCStringHelper(v66, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 40))(v64);
  WTF::PrintStream::printf(v64, "%s", "Eden");
  v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v69);
  WTF::printExpectedCStringHelper(v68, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 40))(v64);
  v70 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 32))(v64);
  if (v62)
    v72 = 3;
  else
    v72 = 2;
  WTF::StringImpl::utf8ForCharacters(v63, v72, (uint64_t)&v124, v71);
  WTF::printExpectedCStringHelper(v70, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 40))(v64);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v73 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 24);
  if (v73)
    v74 = "YES";
  else
    v74 = "no";
  v75 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v76 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 32))(v75);
  v77 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v78);
  WTF::printExpectedCStringHelper(v77, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 40))(v75);
  WTF::PrintStream::printf(v75, "%s", "Unswept");
  v79 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 32))(v75);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v80);
  WTF::printExpectedCStringHelper(v79, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 40))(v75);
  v81 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 32))(v75);
  if (v73)
    v83 = 3;
  else
    v83 = 2;
  WTF::StringImpl::utf8ForCharacters(v74, v83, (uint64_t)&v124, v82);
  WTF::printExpectedCStringHelper(v81, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v75 + 40))(v75);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v84 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 28);
  if (v84)
    v85 = "YES";
  else
    v85 = "no";
  v86 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v87 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 32))(v86);
  v88 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v89);
  WTF::printExpectedCStringHelper(v88, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v87 + 40))(v87);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 40))(v86);
  WTF::PrintStream::printf(v86, "%s", "InUse");
  v90 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 32))(v86);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v91);
  WTF::printExpectedCStringHelper(v90, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 40))(v86);
  v92 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 32))(v86);
  if (v84)
    v94 = 3;
  else
    v94 = 2;
  WTF::StringImpl::utf8ForCharacters(v85, v94, (uint64_t)&v124, v93);
  WTF::printExpectedCStringHelper(v92, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v86 + 40))(v86);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v95 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 32);
  if (v95)
    v96 = "YES";
  else
    v96 = "no";
  v97 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v98 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 32))(v97);
  v99 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 32))(v98);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v100);
  WTF::printExpectedCStringHelper(v99, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
  WTF::PrintStream::printf(v97, "%s", "MarkingNotEmpty");
  v101 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 32))(v97);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v102);
  WTF::printExpectedCStringHelper(v101, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
  v103 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 32))(v97);
  if (v95)
    v105 = 3;
  else
    v105 = 2;
  WTF::StringImpl::utf8ForCharacters(v96, v105, (uint64_t)&v124, v104);
  WTF::printExpectedCStringHelper(v103, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v97 + 40))(v97);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v106 = (1 << *((_DWORD *)this + 3)) & *(_DWORD *)(*(_QWORD *)(v6 + 32) + 40 * (*((_DWORD *)this + 3) >> 5) + 36);
  if (v106)
    v107 = "YES";
  else
    v107 = "no";
  v108 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v109 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 32))(v108);
  v110 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v124, v111);
  WTF::printExpectedCStringHelper(v110, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 40))(v108);
  WTF::PrintStream::printf(v108, "%s", "MarkingRetired");
  v112 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 32))(v108);
  WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v124, v113);
  WTF::printExpectedCStringHelper(v112, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 40))(v108);
  v114 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 32))(v108);
  if (v106)
    v116 = 3;
  else
    v116 = 2;
  WTF::StringImpl::utf8ForCharacters(v107, v116, (uint64_t)&v124, v115);
  WTF::printExpectedCStringHelper(v114, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v108 + 40))(v108);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v123 = __ldxr(v4);
  if (v123 != 1)
  {
    __clrex();
    goto LABEL_129;
  }
  if (__stlxr(0, v4))
LABEL_129:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v117, v118, v119, v120, v121, v122);
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [32]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "->sweep: block is free-listed.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [8],WTF::RawPointer,char [30]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "->sweep: block is allocated.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::MarkedSpace::freeMemory(JSC::MarkedSpace *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t StatusReg;
  int v116;

  v9 = *((_QWORD *)this + 18);
  if (v9)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v10 = *(unsigned int *)(v9 + 48);
      if ((_DWORD)v10)
        break;
LABEL_84:
      v9 = *(_QWORD *)(v9 + 80);
      if (!v9)
        goto LABEL_97;
    }
    v11 = 0;
    v112 = (unint64_t)(v10 + 31) >> 5;
    v113 = *(_QWORD *)(v9 + 32);
    while (1)
    {
      v114 = v11;
      v12 = *(_DWORD *)(v113 + 40 * v11);
      if (v12)
        break;
LABEL_75:
      v11 = v114 + 1;
      if (v114 + 1 == v112)
        goto LABEL_84;
    }
    v13 = 32 * v11;
    while (1)
    {
      if ((v12 & 1) == 0)
        goto LABEL_7;
      if (v13 >= *(unsigned int *)(v9 + 12))
        goto LABEL_129;
      v15 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v13);
      *((_QWORD *)this + 9) -= 0x4000;
      v16 = *((_QWORD *)this + 13);
      if (v16)
      {
        v17 = *(_QWORD *)(v15 + 88);
        v18 = *(_DWORD *)(v16 - 8);
        v19 = *(unsigned int *)(v16 - 4);
        v20 = v18 & (v17 >> 14);
        v21 = *(_QWORD *)(v16 + 8 * v20);
        if (v21 == v17)
        {
LABEL_16:
          if (v20 == v19)
            goto LABEL_26;
          *(_QWORD *)(v16 + 8 * v20) = -1;
          ++*(_DWORD *)(*((_QWORD *)this + 13) - 16);
          v23 = *((_QWORD *)this + 13);
          if (v23)
            v24 = *(_DWORD *)(v23 - 12) - 1;
          else
            v24 = -1;
          *(_DWORD *)(v23 - 12) = v24;
          v25 = (_QWORD *)*((_QWORD *)this + 13);
          if (v25)
          {
            v26 = v9;
            v27 = *((_DWORD *)v25 - 3);
            v28 = *((unsigned int *)v25 - 1);
            if (6 * v27 >= v28 || v28 < 9)
            {
              v9 = v26;
              goto LABEL_25;
            }
            v75 = WTF::fastZeroedMalloc(8 * (v28 >> 1) + 16, a2, a3, a4, a5, a6, a7, a8);
            v54 = 0;
            *((_QWORD *)this + 13) = v75 + 16;
            *(_DWORD *)(v75 + 12) = v28 >> 1;
            *(_DWORD *)(*((_QWORD *)this + 13) - 8) = (v28 >> 1) - 1;
            *(_DWORD *)(*((_QWORD *)this + 13) - 16) = 0;
            *(_DWORD *)(*((_QWORD *)this + 13) - 12) = v27;
            v9 = v26;
            do
            {
              v55 = v25[v54];
              if (v55 + 1 >= 2)
              {
                v56 = *((_QWORD *)this + 13);
                if (v56)
                  v57 = *(_DWORD *)(v56 - 8);
                else
                  v57 = 0;
                v58 = v57 & (v55 >> 14);
                v59 = 1;
                do
                {
                  v60 = v58;
                  v61 = *(_QWORD *)(v56 + 8 * v58);
                  v58 = (v58 + v59++) & v57;
                }
                while (v61);
                *(_QWORD *)(v56 + 8 * v60) = v55;
              }
              ++v54;
            }
            while (v54 != v28);
            WTF::fastFree((unint64_t)(v25 - 2), v76, v77, v78, v79, v80, v81, v82);
            v25 = (_QWORD *)*((_QWORD *)this + 13);
            if (v25)
            {
              LODWORD(v28) = *((_DWORD *)v25 - 1);
LABEL_25:
              if ((_DWORD)v28 == (_DWORD)v19)
                goto LABEL_26;
              if (!*((_DWORD *)v25 - 3))
                goto LABEL_125;
              v71 = v25;
              if ((_DWORD)v28)
              {
                v72 = 8 * v28;
                v71 = v25;
                while ((unint64_t)(*v71 + 1) <= 1)
                {
                  ++v71;
                  v72 -= 8;
                  if (!v72)
                    goto LABEL_67;
                }
              }
              v73 = &v25[v28];
              if (v73 == v71)
              {
LABEL_125:
                v72 = 0;
              }
              else
              {
                v72 = 0;
                v74 = *v71;
LABEL_70:
                v72 |= v74;
                while (++v71 != v73)
                {
                  v74 = *v71;
                  if ((unint64_t)(*v71 + 1) > 1)
                  {
                    if (v71 != v73)
                      goto LABEL_70;
                    break;
                  }
                }
              }
LABEL_67:
              *((_QWORD *)this + 12) = v72;
              goto LABEL_26;
            }
          }
          if ((_DWORD)v19)
            goto LABEL_125;
        }
        else
        {
          v22 = 1;
          while (v21)
          {
            v20 = ((_DWORD)v20 + v22) & v18;
            v21 = *(_QWORD *)(v16 + 8 * v20);
            ++v22;
            if (v21 == v17)
              goto LABEL_16;
          }
        }
      }
LABEL_26:
      v30 = *(_QWORD *)(v15 + 80);
      v31 = *(_QWORD *)(v15 + 24);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v31 + 72) + 24))(*(_QWORD *)(v31 + 72), *(unsigned int *)(v15 + 12));
      v38 = *(unsigned int *)(v15 + 12);
      if (*(_DWORD *)(v31 + 12) <= v38)
      {
LABEL_129:
        __break(0xC471u);
        JUMPOUT(0x1985F0DC4);
      }
      *(_QWORD *)(*(_QWORD *)v31 + 8 * v38) = 0;
      v39 = (_QWORD *)(v31 + 16);
      v116 = v38;
      v40 = *(unsigned int *)(v31 + 28);
      if ((_DWORD)v40 == *(_DWORD *)(v31 + 24))
      {
        *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4 * (*(_DWORD *)(v31 + 28))++) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v116);
        v41 = (unsigned __int8 *)(v31 + 56);
        if (__ldaxr((unsigned __int8 *)(v31 + 56)))
        {
LABEL_29:
          __clrex();
LABEL_30:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v41);
          goto LABEL_31;
        }
      }
      else
      {
        *(_DWORD *)(*v39 + 4 * v40) = v38;
        ++*(_DWORD *)(v31 + 28);
        v41 = (unsigned __int8 *)(v31 + 56);
        if (__ldaxr((unsigned __int8 *)(v31 + 56)))
          goto LABEL_29;
      }
      if (__stxr(1u, v41))
        goto LABEL_30;
LABEL_31:
      v43 = *(_QWORD *)(v31 + 32);
      v44 = 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v43 + v44) &= ~(1 << *(_DWORD *)(v15 + 12));
      v45 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v45 + 4) &= ~(1 << *(_DWORD *)(v15 + 12));
      v46 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v46 + 8) &= ~(1 << *(_DWORD *)(v15 + 12));
      v47 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v47 + 12) &= ~(1 << *(_DWORD *)(v15 + 12));
      v48 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v48 + 16) &= ~(1 << *(_DWORD *)(v15 + 12));
      v49 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v49 + 20) &= ~(1 << *(_DWORD *)(v15 + 12));
      v50 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v50 + 24) &= ~(1 << *(_DWORD *)(v15 + 12));
      v51 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v51 + 28) &= ~(1 << *(_DWORD *)(v15 + 12));
      v52 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v52 + 32) &= ~(1 << *(_DWORD *)(v15 + 12));
      v53 = v43 + 40 * (*(_DWORD *)(v15 + 12) >> 5);
      *(_DWORD *)(v53 + 36) &= ~(1 << *(_DWORD *)(v15 + 12));
      LODWORD(v53) = __ldxr(v41);
      if ((_DWORD)v53 != 1)
      {
        __clrex();
LABEL_42:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, v32, v33, v34, v35, v36, v37);
        goto LABEL_43;
      }
      if (__stlxr(0, v41))
        goto LABEL_42;
LABEL_43:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v15 + 16) + 24))(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 88));
      *(_QWORD *)(v30 + 1072) -= 0x4000;
      v62 = *(_QWORD **)(v15 + 40);
      if (v62)
      {
        v70 = *(_QWORD *)(v15 + 32);
        *v62 = v70;
        *(_QWORD *)(v70 + 8) = v62;
        *(_QWORD *)(v15 + 32) = 0;
        *(_QWORD *)(v15 + 40) = 0;
      }
      v63 = *(_QWORD *)(v15 + 64);
      if (v63)
      {
        v67 = *(_QWORD *)(v15 + 80);
        do
        {
          a2 = v63;
          v63 = *(_QWORD *)(v63 + 16);
          v68 = *(_QWORD *)(StatusReg + 752);
          if (v68)
          {
            if (!(a2 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
            {
LABEL_58:
              v69 = *(unsigned int *)(v68 + 8000);
              if (v69 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v68, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v68 + 8 * v69) = a2 | 0x5000000000000;
                *(_DWORD *)(v68 + 8000) = v69 + 1;
              }
              goto LABEL_60;
            }
            if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_58;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v68, a2, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_60:
          *(_QWORD *)(v67 + 1072) -= 1024;
        }
        while (v63);
      }
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 72) = 0;
      v64 = *(_QWORD *)(StatusReg + 752);
      if (v64)
      {
        if (!(v15 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v15 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v15)) & 1) != 0)
        {
LABEL_49:
          v65 = *(unsigned int *)(v64 + 8000);
          if (v65 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v64, v15, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v64 + 8 * v65) = v15 | 0x5000000000000;
            *(_DWORD *)(v64 + 8000) = v65 + 1;
          }
          goto LABEL_7;
        }
        if (v15 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v15 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v15 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v15) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_49;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v64, v15, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v15, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_7:
      ++v13;
      v14 = v12 > 1;
      v12 >>= 1;
      if (!v14)
        goto LABEL_75;
    }
  }
LABEL_97:
  v83 = *((unsigned int *)this + 9);
  if ((_DWORD)v83)
  {
    v84 = (uint64_t **)*((_QWORD *)this + 3);
    v85 = &v84[v83];
    do
    {
      v86 = *v84;
      v87 = *(_QWORD *)((*v84)[5] + 24);
      v88 = *((unsigned __int8 *)*v84 + 32);
      v89 = (uint64_t *)(*v84)[1];
      if (v89)
      {
        v90 = *v86;
        *v89 = *v86;
        *(_QWORD *)(v90 + 8) = v89;
        *v86 = 0;
        v86[1] = 0;
      }
      v91 = (_QWORD *)v86[7];
      if (v91)
      {
        v95 = v86[6];
        *v91 = v95;
        *(_QWORD *)(v95 + 8) = v91;
        v86[6] = 0;
        v86[7] = 0;
      }
      v92 = v86[10];
      if (v92)
      {
        v93 = v86[12];
        do
        {
          v94 = *(_QWORD *)(v92 + 16);
          WTF::fastFree(v92, (void *)a2, a3, a4, a5, a6, a7, a8);
          *(_QWORD *)(v93 + 1072) -= 1024;
          v92 = v94;
        }
        while (v94);
      }
      v86[10] = 0;
      v86[11] = 0;
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 48))(v87, (unint64_t)v86 - ((v88 >> 2) & 0x1F));
      ++v84;
    }
    while (v84 != v85);
  }
  v96 = *((unsigned int *)this + 3);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)this;
    v98 = *(_QWORD *)this + 8 * v96;
    do
    {
      v99 = *v97;
      if (*(_BYTE *)(*v97 + 64))
      {
        v102 = *(uint64_t **)(v99 + 216);
        v100 = (uint64_t *)(v99 + 216);
        v101 = v102;
        if (v102 != v100)
        {
          do
          {
            v107 = *(_QWORD *)(v101[5] + 24);
            v108 = *((unsigned __int8 *)v101 + 32);
            v110 = (uint64_t *)*v101;
            v109 = (uint64_t **)v101[1];
            if (v109)
            {
              *v109 = v110;
              v110[1] = (uint64_t)v109;
              *v101 = 0;
              v101[1] = 0;
            }
            v111 = (_QWORD *)v101[7];
            if (v111)
            {
              v106 = v101[6];
              *v111 = v106;
              *(_QWORD *)(v106 + 8) = v111;
              v101[6] = 0;
              v101[7] = 0;
            }
            v105 = v101[10];
            if (v105)
            {
              v103 = v101[12];
              do
              {
                v104 = *(_QWORD *)(v105 + 16);
                WTF::fastFree(v105, (void *)a2, a3, a4, a5, a6, a7, a8);
                *(_QWORD *)(v103 + 1072) -= 1024;
                v105 = v104;
              }
              while (v104);
            }
            v101[10] = 0;
            v101[11] = 0;
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 48))(v107, (unint64_t)v101 - ((v108 >> 2) & 0x1F));
            v101 = v110;
          }
          while (v110 != v100);
        }
      }
      ++v97;
    }
    while (v97 != (uint64_t *)v98);
  }
}

void JSC::MarkedSpace::sweepBlocks(JSC::MarkedSpace *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::BlockDirectory *i;
  char v22;
  char **v23;
  char *v24;

  v9 = *((_QWORD *)this + 61);
  *(_QWORD *)(v9 + 40) = 0;
  v10 = (unsigned __int8 *)(v9 + 33);
  if (__ldaxr((unsigned __int8 *)(v9 + 33)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 33);
LABEL_5:
  *(_BYTE *)(v9 + 34) = 0;
  v12 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v12 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v9, a3, a4, a5, a6, a7, a8);
  v20 = __ldxr(v10);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v10))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 33), 0, v14, v15, v16, v17, v18, v19);
  for (i = (JSC::BlockDirectory *)*((_QWORD *)this + 18); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 10))
    JSC::BlockDirectory::sweep(i, v13, v14, v15, v16, v17, v18, v19);
}

void JSC::MarkedSpace::sweepPreciseAllocations(JSC::MarkedSpace *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  JSC::PreciseAllocation *v22;
  JSC::PreciseAllocation **v23;
  int v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;

  v8 = *((unsigned int *)this + 10);
  if (*((_DWORD *)this + 9) != v8)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  v10 = *((unsigned int *)this + 12);
  if (v8 > v10)
  {
    for (i = *((unsigned int *)this + 12); i < v8; ++i)
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i);
      JSC::WeakSet::sweep((JSC::WeakSet *)(v12 + 48), a2, a3, a4, a5, a6, a7, a8);
      v13 = *(unsigned __int8 *)(v12 + 32);
      if ((v13 & 2) != 0 && ((*(unsigned __int8 *)(v12 + 33) | v13) & 1) == 0)
      {
        if (*(_BYTE *)(v12 + 34) == 1)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 40) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16), *(_QWORD *)(v12 + 96), v12 + 112);
        v14 = *(unsigned __int8 *)(v12 + 36);
        if ((_DWORD)v14 != 255)
        {
          v15 = *(_QWORD *)(v12 + 40);
          v18 = *(_QWORD **)(v15 + 232);
          v16 = (_QWORD *)(v15 + 232);
          v17 = v18;
          if (v18 != v16)
          {
            v24 = 1 << v14;
            v25 = v14 >> 5;
            do
            {
              v26 = (char *)v17 + 4 * v25;
              v17 = (_QWORD *)*v17;
              v27 = (unsigned int *)(v26 + 16);
              while (1)
              {
                v28 = *v27;
                if ((*v27 & v24) == 0)
                  break;
                v29 = __ldxr(v27);
                if (v29 == v28)
                {
                  if (!__stxr(v28 & ~v24, v27))
                    break;
                }
                else
                {
                  __clrex();
                }
              }
            }
            while (v17 != v16);
          }
        }
        LOBYTE(v13) = *(_BYTE *)(v12 + 32) & 0xFD;
        *(_BYTE *)(v12 + 32) = v13;
      }
      if ((*(_BYTE *)(v12 + 33) & 1) == 0)
      {
        v19 = *(_QWORD *)(v12 + 80);
        if (v19)
        {
          while (*(_BYTE *)(v19 + 24) && *(_QWORD *)(v19 + 32))
          {
            v19 = *(_QWORD *)(v19 + 16);
            if (!v19)
              goto LABEL_17;
          }
        }
        else
        {
LABEL_17:
          if ((v13 & 1) == 0)
          {
            v20 = (uint64_t *)*((_QWORD *)this + 2);
            if (v20)
            {
              v31 = v12 + 112;
              WTF::HashSet<JSC::HeapCell *,WTF::DefaultHash<JSC::HeapCell *>,WTF::HashTraits<JSC::HeapCell *>,WTF::HashTableTraits>::remove(v20, &v31, a3, a4, a5, a6, a7, a8);
            }
            if (*(unsigned __int8 *)(v12 + 36) == 255)
            {
              *((_QWORD *)this + 9) -= *(_QWORD *)(v12 + 24);
              JSC::PreciseAllocation::destroy((JSC::PreciseAllocation *)v12, a2, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v21 = *(_QWORD *)(v12 + 40);
              v22 = JSC::PreciseAllocation::reuseForLowerTier((JSC::PreciseAllocation *)v12, a2, a3, a4, a5, a6, a7, a8);
              v23 = *(JSC::PreciseAllocation ***)(v21 + 224);
              *(_QWORD *)v22 = v21 + 216;
              *((_QWORD *)v22 + 1) = v23;
              *v23 = v22;
              *(_QWORD *)(v21 + 224) = v22;
            }
            goto LABEL_14;
          }
        }
      }
      *(_DWORD *)(v12 + 16) = v10;
      if (*((unsigned int *)this + 9) <= v10)
      {
        __break(0xC471u);
LABEL_46:
        JUMPOUT(0x1985F10DCLL);
      }
      *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v10++) = v12;
LABEL_14:
      v8 = *((unsigned int *)this + 9);
    }
  }
  if (*((unsigned int *)this + 8) > v10)
  {
    if (v8 > v10)
      *((_DWORD *)this + 9) = v10;
    v30 = *((_QWORD *)this + 3);
    if (v10)
    {
      *((_DWORD *)this + 8) = v10;
      *((_QWORD *)this + 3) = WTF::fastRealloc(v30, 8 * v10, a3, a4, a5, a6, a7, a8);
    }
    else if (v30)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *((_DWORD *)this + 10) = *((_DWORD *)this + 9);
}

uint64_t **JSC::MarkedSpace::prepareForAllocation(uint64_t **this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *j;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;

  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1)
  {
    v2 = *this;
    v3 = (uint64_t)&(*this)[v1];
    do
    {
      v4 = *v2;
      for (i = *(_QWORD *)(*v2 + 32); i; i = *(_QWORD *)(i + 88))
      {
        for (j = *(uint64_t **)(i + 104); j != (uint64_t *)(i + 104); j = (uint64_t *)*j)
        {
          j[3] = 0;
          j[4] = 0;
          j[5] = 1;
          j[6] = 0;
          *((_DWORD *)j + 14) = 0;
          j[8] = 0;
          j[9] = 0;
          *((_DWORD *)j + 20) = 0;
        }
        *(_QWORD *)(i + 64) = 0;
        v7 = *(unsigned int *)(i + 48);
        if ((_DWORD)v7)
        {
          v8 = (unint64_t)(v7 + 31) >> 5;
          v9 = (_DWORD *)(*(_QWORD *)(i + 32) + 20);
          do
          {
            *v9 = 0;
            v9 += 10;
            --v8;
          }
          while (v8);
        }
        if (HIBYTE(dword_1ECF4C5C0))
        {
          __break(0xC471u);
          JUMPOUT(0x1985F122CLL);
        }
      }
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
      ++v2;
    }
    while (v2 != (uint64_t *)v3);
  }
  v10 = (uint64_t **)this[16];
  if (v10 != this + 16)
  {
    *this[15] = (uint64_t)v10;
    this[16][1] = (uint64_t)this[15];
    v11 = this[17];
    *v11 = (uint64_t)(this + 14);
    this[15] = v11;
    this[16] = (uint64_t *)(this + 16);
    this[17] = (uint64_t *)(this + 16);
  }
  if (*((_BYTE *)this - 5))
    v12 = 0;
  else
    v12 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 12) = v12;
  *((_DWORD *)this + 10) = *((_DWORD *)this + 9);
  return this;
}

void JSC::MarkedSpace::stopAllocatingForGood(JSC::MarkedSpace *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BlockDirectory *i;

  for (i = (JSC::BlockDirectory *)*((_QWORD *)this + 18); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 10))
    JSC::BlockDirectory::stopAllocatingForGood(i, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedSpace::freeBlock(JSC::MarkedSpace *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *((_QWORD *)this + 9) -= 0x4000;
  JSC::MarkedBlockSet::remove((JSC::MarkedSpace *)((char *)this + 96), *((_QWORD *)a2 + 11), a3, a4, a5, a6, a7, a8);
  v9 = *((_QWORD *)a2 + 10);
  JSC::BlockDirectory::removeBlock(*((_QWORD *)a2 + 3), (uint64_t)a2, 1);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 24))(*((_QWORD *)a2 + 2), *((_QWORD *)a2 + 11));
  *(_QWORD *)(v9 + 1072) -= 0x4000;
  v17 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v17)
  {
    v19 = *((_QWORD *)a2 + 4);
    *v17 = v19;
    *(_QWORD *)(v19 + 8) = v17;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
  }
  v18 = *((_QWORD *)a2 + 8);
  if (v18)
  {
    v20 = *((_QWORD *)a2 + 10);
    do
    {
      v21 = *(_QWORD *)(v18 + 16);
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
      *(_QWORD *)(v20 + 1072) -= 1024;
      v18 = v21;
    }
    while (v21);
  }
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  WTF::fastFree((unint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::MarkedBlockSet::remove(JSC::MarkedBlockSet *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::MarkedBlock *v13;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;

  v8 = *((_QWORD *)this + 1);
  if (!v8)
    return;
  v10 = *(_DWORD *)(v8 - 8);
  v11 = *(unsigned int *)(v8 - 4);
  v12 = v10 & (a2 >> 14);
  v13 = *(JSC::MarkedBlock **)(v8 + 8 * v12);
  if (v13 == (JSC::MarkedBlock *)a2)
  {
LABEL_6:
    if (v12 == v11)
      return;
    *(_QWORD *)(v8 + 8 * v12) = -1;
    ++*(_DWORD *)(*((_QWORD *)this + 1) - 16);
    v15 = *((_QWORD *)this + 1);
    if (v15)
      v16 = *(_DWORD *)(v15 - 12) - 1;
    else
      v16 = -1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = (_QWORD *)*((_QWORD *)this + 1);
    if (!v17)
      goto LABEL_41;
    v18 = *((_DWORD *)v17 - 3);
    v19 = *((unsigned int *)v17 - 1);
    if (6 * v18 >= v19 || v19 < 9)
      goto LABEL_14;
    v27 = WTF::fastZeroedMalloc(8 * (v19 >> 1) + 16, a2, a3, a4, a5, a6, a7, a8);
    v35 = 0;
    *((_QWORD *)this + 1) = v27 + 16;
    *(_DWORD *)(v27 + 12) = v19 >> 1;
    *(_DWORD *)(*((_QWORD *)this + 1) - 8) = (v19 >> 1) - 1;
    *(_DWORD *)(*((_QWORD *)this + 1) - 16) = 0;
    *(_DWORD *)(*((_QWORD *)this + 1) - 12) = v18;
    do
    {
      v36 = v17[v35];
      if (v36 + 1 >= 2)
      {
        v37 = *((_QWORD *)this + 1);
        if (v37)
          v38 = *(_DWORD *)(v37 - 8);
        else
          v38 = 0;
        v39 = v38 & (v36 >> 14);
        v40 = 1;
        do
        {
          v41 = v39;
          v42 = *(_QWORD *)(v37 + 8 * v39);
          v39 = (v39 + v40++) & v38;
        }
        while (v42);
        *(_QWORD *)(v37 + 8 * v41) = v36;
      }
      ++v35;
    }
    while (v35 != v19);
    WTF::fastFree((unint64_t)(v17 - 2), v28, v29, v30, v31, v32, v33, v34);
    v17 = (_QWORD *)*((_QWORD *)this + 1);
    if (v17)
    {
LABEL_14:
      v21 = *((unsigned int *)v17 - 1);
      if ((_DWORD)v21 == (_DWORD)v11)
        return;
      if (*((_DWORD *)v17 - 3))
      {
        v22 = v17;
        if ((_DWORD)v21)
        {
          v23 = 8 * v21;
          v22 = v17;
          while ((unint64_t)(*v22 + 1) <= 1)
          {
            ++v22;
            v23 -= 8;
            if (!v23)
              goto LABEL_21;
          }
        }
        v25 = &v17[v21];
        if (v25 != v22)
        {
          v24 = 0;
LABEL_25:
          v26 = *v22++;
          v24 |= v26;
          while (v22 != v25)
          {
            if ((unint64_t)(*v22 + 1) > 1)
            {
              if (v22 != v25)
                goto LABEL_25;
              goto LABEL_22;
            }
            ++v22;
          }
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_41:
      if (!(_DWORD)v11)
        return;
    }
LABEL_21:
    v24 = 0;
LABEL_22:
    *(_QWORD *)this = v24;
    return;
  }
  v14 = 1;
  while (v13)
  {
    v12 = ((_DWORD)v12 + v14) & v10;
    v13 = *(JSC::MarkedBlock **)(v8 + 8 * v12);
    ++v14;
    if (v13 == (JSC::MarkedBlock *)a2)
      goto LABEL_6;
  }
}

uint64_t JSC::MarkedSpace::beginMarking(uint64_t this)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(unsigned __int8 *)(this - 5);
  if (!*(_BYTE *)(this - 5))
  {
    v2 = *(_DWORD *)(this + 88);
    v3 = __CFADD__(v2, 1);
    v4 = v2 + 1;
    if (v3)
      v4 = 2;
    *(_DWORD *)(this + 88) = v4;
    goto LABEL_6;
  }
  if (v1 == 1)
  {
    v5 = *(_QWORD *)(this + 144);
    if (v5)
    {
      v6 = *(_QWORD *)(this + 144);
      do
      {
        v7 = *(unsigned int *)(v6 + 48);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD *)(v6 + 32);
          v9 = (unint64_t)(v7 + 31) >> 5;
          v10 = (_DWORD *)(v8 + 32);
          do
          {
            *v10 = 0;
            v10 += 10;
            --v9;
          }
          while (v9);
          v11 = *(unsigned int *)(v6 + 48);
          if ((_DWORD)v11)
          {
            v12 = (unint64_t)(v11 + 31) >> 5;
            v13 = (_DWORD *)(v8 + 36);
            do
            {
              *v13 = 0;
              v13 += 10;
              --v12;
            }
            while (v12);
          }
        }
        v6 = *(_QWORD *)(v6 + 80);
      }
      while (v6);
    }
    v14 = *(_DWORD *)(this + 80);
    if (v14 != 1 && v14 != -1)
      goto LABEL_21;
  }
  else
  {
    if (v1 != 255)
      goto LABEL_6;
    this = std::__throw_bad_optional_access[abi:sn180100]();
  }
  v21 = this;
  JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::beginMarking(void)::$_1>(v5);
  this = v21;
  v14 = *(_DWORD *)(v21 + 80);
LABEL_21:
  v16 = v14 + 1;
  if (v14 == -1)
    v16 = 2;
  *(_DWORD *)(this + 80) = v16;
  v17 = *(unsigned int *)(this + 36);
  if ((_DWORD)v17)
  {
    v18 = *(uint64_t **)(this + 24);
    v19 = 8 * v17;
    do
    {
      v20 = *v18++;
      *(_BYTE *)(v20 + 32) |= *(_BYTE *)(v20 + 33) & 1;
      *(_BYTE *)(v20 + 33) = 0;
      v19 -= 8;
    }
    while (v19);
  }
LABEL_6:
  *(_BYTE *)(this + 93) = 1;
  return this;
}

uint64_t JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::beginMarking(void)::$_1>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  for (; result; result = *(_QWORD *)(result + 80))
  {
    v1 = *(unsigned int *)(result + 48);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = *(_QWORD *)(result + 32);
      v4 = (unint64_t)(v1 + 31) >> 5;
      do
      {
        v5 = *(_DWORD *)(v3 + 40 * v2);
        if (v5)
        {
          v6 = 32 * v2;
          do
          {
            if ((v5 & 1) != 0)
            {
              if (v6 >= *(unsigned int *)(result + 12))
              {
                __break(0xC471u);
                return result;
              }
              v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 8 * v6) + 88);
              if (*(_DWORD *)(v7 + 32) != *(_DWORD *)(*(_QWORD *)(v7 + 8) + 432))
              {
                *(_OWORD *)(v7 + 152) = 0uLL;
                *(_OWORD *)(v7 + 136) = 0uLL;
                *(_OWORD *)(v7 + 120) = 0uLL;
                *(_OWORD *)(v7 + 104) = 0uLL;
                *(_OWORD *)(v7 + 88) = 0uLL;
                *(_OWORD *)(v7 + 72) = 0uLL;
                *(_OWORD *)(v7 + 56) = 0uLL;
                *(_OWORD *)(v7 + 40) = 0uLL;
              }
              *(_DWORD *)(v7 + 32) = 0;
            }
            ++v6;
            v8 = v5 > 1;
            v5 >>= 1;
          }
          while (v8);
        }
        ++v2;
      }
      while (v2 != v4);
    }
  }
  return result;
}

uint64_t JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::endMarking(void)::$_0>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _OWORD *v7;
  BOOL v8;

  for (; result; result = *(_QWORD *)(result + 80))
  {
    v1 = *(unsigned int *)(result + 48);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = *(_QWORD *)(result + 32);
      v4 = (unint64_t)(v1 + 31) >> 5;
      do
      {
        v5 = *(_DWORD *)(v3 + 40 * v2);
        if (v5)
        {
          v6 = 32 * v2;
          do
          {
            if ((v5 & 1) != 0)
            {
              if (v6 >= *(unsigned int *)(result + 12))
              {
                __break(0xC471u);
                return result;
              }
              v7 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)result + 8 * v6) + 88);
              *(_OWORD *)((char *)v7 + 168) = 0uLL;
              v7 = (_OWORD *)((char *)v7 + 168);
              v7[6] = 0uLL;
              v7[7] = 0uLL;
              v7[4] = 0uLL;
              v7[5] = 0uLL;
              v7[2] = 0uLL;
              v7[3] = 0uLL;
              v7[1] = 0uLL;
              *((_DWORD *)v7 - 33) = 0;
            }
            ++v6;
            v8 = v5 > 1;
            v5 >>= 1;
          }
          while (v8);
        }
        ++v2;
      }
      while (v2 != v4);
    }
  }
  return result;
}

void JSC::MarkedSpace::willStartIterating(JSC::MarkedSpace *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BlockDirectory *i;

  for (i = (JSC::BlockDirectory *)*((_QWORD *)this + 18); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 10))
    JSC::BlockDirectory::stopAllocating(i, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 92) = 1;
}

void JSC::MarkedSpace::didFinishIterating(JSC::MarkedSpace *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BlockDirectory *i;

  for (i = (JSC::BlockDirectory *)*((_QWORD *)this + 18); i; i = (JSC::BlockDirectory *)*((_QWORD *)i + 10))
    JSC::BlockDirectory::resumeAllocating(i, a2, a3, a4, a5, a6, a7, a8);
  *((_BYTE *)this + 92) = 0;
}

uint64_t JSC::MarkedSpace::objectCount(uint64_t **this, double a2, double a3, uint32x4_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v9 = &v10;
  v10 = 0;
  JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::objectCount(void)::$_0>(this[18], &v9, a2, a3, a4);
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v6 = this[3];
    v7 = 8 * v5;
    do
    {
      if ((*(_BYTE *)(*v6 + 33) & 1) != 0)
        ++v10;
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return v10;
}

uint64_t *JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::objectCount(void)::$_0>(uint64_t *result, _QWORD **a2, double a3, double a4, uint32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int32 v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  int64x2_t v21;
  uint64_t v22;
  uint8x8_t v23;
  __int32 v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  __int32 v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint32x4_t v32;
  unsigned int v33;
  int32x4_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;

  for (; result; result = (uint64_t *)result[10])
  {
    v5 = *((unsigned int *)result + 12);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = result[4];
      v8 = (unint64_t)(v5 + 31) >> 5;
      do
      {
        v9 = *(_DWORD *)(v7 + 40 * v6);
        if (v9)
        {
          v10 = 32 * v6;
          v11 = *a2;
          v12 = *((unsigned int *)result + 3);
          v13 = *result;
          do
          {
            if ((v9 & 1) != 0)
            {
              if (v10 >= v12)
              {
                __break(0xC471u);
                return result;
              }
              v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v10) + 88);
              if (*(_DWORD *)(v14 + 32) == *(_DWORD *)(*(_QWORD *)(v14 + 8) + 432))
              {
                v17 = *(_QWORD *)(v14 + 80);
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)*(_QWORD *)(v14 + 72));
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v18 = a5.i32[0];
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)(v14 + 72)));
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v19 = a5.i32[0];
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)v17);
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v20 = vaddvq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v14 + 40)))), vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v14 + 56)))))+ v18+ v19+ a5.i32[0];
                v21 = (int64x2_t)vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v14 + 88)));
                v22 = *(_QWORD *)(v14 + 112);
                v23 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)(v14 + 104));
                v23.i16[0] = vaddlv_u8(v23);
                v24 = v23.i32[0];
                v25 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)(v14 + 104)));
                v25.i16[0] = vaddlv_u8(v25);
                v26 = v25.i32[0];
                v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
                v27.i16[0] = vaddlv_u8(v27);
                v28 = v27.i32[0];
                v29 = *(int32x4_t *)(v14 + 120);
                *(uint32x2_t *)a5.i8 = vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vmovn_s64((int64x2_t)v29))));
                v30 = *(int32x4_t *)(v14 + 152);
                v31 = *(int32x4_t *)(v14 + 136);
                v32 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vuzp1q_s32(v31, v30))));
                v33 = vaddlvq_u16((uint16x8_t)v21) + v24 + v26 + v28;
                v21.i64[0] = v17;
                v34 = (int32x4_t)vzip1q_s64(v21, (int64x2_t)v29);
                v29.i64[0] = vdupq_laneq_s64((int64x2_t)v29, 1).u64[0];
                v29.i64[1] = v22;
                v35 = (int8x16_t)vuzp2q_s32(v34, v29);
                v36 = vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vuzp2q_s32(v31, v30)));
                v30.i32[0] = v20;
                v37 = (uint32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL), (int8x16_t)a5, 0xCuLL);
                v37.i32[3] = v33;
                a5 = vpadalq_u16(v37, vpaddlq_u8((uint8x16_t)vcntq_s8(v35)));
                v38 = vpadalq_u16(v32, v36);
                v15 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)a5.i8, *(uint32x2_t *)v38.i8), (int64x2_t)vaddl_high_u32(a5, v38)));
              }
              else
              {
                v15 = 0;
              }
              *v11 += v15;
            }
            ++v10;
            v16 = v9 > 1;
            v9 >>= 1;
          }
          while (v16);
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
  return result;
}

uint64_t JSC::MarkedSpace::size(uint64_t **this, double a2, double a3, uint32x4_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v9 = &v10;
  v10 = 0;
  JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::size(void)::$_0>(this[18], &v9, a2, a3, a4);
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v6 = this[3];
    v7 = 8 * v5;
    do
    {
      if ((*(_BYTE *)(*v6 + 33) & 1) != 0)
        v10 += *(_QWORD *)(*v6 + 24);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return v10;
}

uint64_t *JSC::MarkedSpace::forEachBlock<JSC::MarkedSpace::size(void)::$_0>(uint64_t *result, _QWORD **a2, double a3, double a4, uint32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  int64x2_t v22;
  uint64_t v23;
  uint8x8_t v24;
  __int32 v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  __int32 v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint32x4_t v33;
  unsigned int v34;
  int32x4_t v35;
  int8x16_t v36;
  uint16x8_t v37;
  uint32x4_t v38;
  uint32x4_t v39;

  for (; result; result = (uint64_t *)result[10])
  {
    v5 = *((unsigned int *)result + 12);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = result[4];
      v8 = (unint64_t)(v5 + 31) >> 5;
      do
      {
        v9 = *(_DWORD *)(v7 + 40 * v6);
        if (v9)
        {
          v10 = 32 * v6;
          v11 = *a2;
          v12 = *((unsigned int *)result + 3);
          v13 = *result;
          do
          {
            if ((v9 & 1) != 0)
            {
              if (v10 >= v12)
              {
                __break(0xC471u);
                return result;
              }
              v14 = *(unsigned int **)(v13 + 8 * v10);
              v15 = *((_QWORD *)v14 + 11);
              if (*(_DWORD *)(v15 + 32) == *(_DWORD *)(*(_QWORD *)(v15 + 8) + 432))
              {
                v18 = *(_QWORD *)(v15 + 80);
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)*(_QWORD *)(v15 + 72));
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v19 = a5.i32[0];
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)(v15 + 72)));
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v20 = a5.i32[0];
                *(int8x8_t *)a5.i8 = vcnt_s8((int8x8_t)v18);
                a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
                v21 = vaddvq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v15 + 40)))), vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v15 + 56)))))+ v19+ v20+ a5.i32[0];
                v22 = (int64x2_t)vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v15 + 88)));
                v23 = *(_QWORD *)(v15 + 112);
                v24 = (uint8x8_t)vcnt_s8((int8x8_t)*(_QWORD *)(v15 + 104));
                v24.i16[0] = vaddlv_u8(v24);
                v25 = v24.i32[0];
                v26 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(*(_QWORD *)(v15 + 104)));
                v26.i16[0] = vaddlv_u8(v26);
                v27 = v26.i32[0];
                v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
                v28.i16[0] = vaddlv_u8(v28);
                v29 = v28.i32[0];
                v30 = *(int32x4_t *)(v15 + 120);
                *(uint32x2_t *)a5.i8 = vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)vmovn_s64((int64x2_t)v30))));
                v31 = *(int32x4_t *)(v15 + 152);
                v32 = *(int32x4_t *)(v15 + 136);
                v33 = vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vuzp1q_s32(v32, v31))));
                v34 = vaddlvq_u16((uint16x8_t)v22) + v25 + v27 + v29;
                v22.i64[0] = v18;
                v35 = (int32x4_t)vzip1q_s64(v22, (int64x2_t)v30);
                v30.i64[0] = vdupq_laneq_s64((int64x2_t)v30, 1).u64[0];
                v30.i64[1] = v23;
                v36 = (int8x16_t)vuzp2q_s32(v35, v30);
                v37 = vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vuzp2q_s32(v32, v31)));
                v31.i32[0] = v21;
                v38 = (uint32x4_t)vextq_s8(vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), (int8x16_t)a5, 0xCuLL);
                v38.i32[3] = v34;
                a5 = vpadalq_u16(v38, vpaddlq_u8((uint8x16_t)vcntq_s8(v36)));
                v39 = vpadalq_u16(v33, v37);
                v16 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)a5.i8, *(uint32x2_t *)v39.i8), (int64x2_t)vaddl_high_u32(a5, v39)));
              }
              else
              {
                v16 = 0;
              }
              *v11 += 16 * *v14 * v16;
            }
            ++v10;
            v17 = v9 > 1;
            v9 >>= 1;
          }
          while (v17);
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
  return result;
}

uint64_t JSC::MarkedSpace::capacity(JSC::MarkedSpace *this)
{
  return *((_QWORD *)this + 9);
}

double JSC::MarkingConstraint::quickWorkEstimate()
{
  return 0.0;
}

void JSC::MarkingConstraintSet::~MarkingConstraintSet(JSC::MarkingConstraintSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((unsigned int *)this + 9);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 3);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v16, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v17, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkingConstraintSet::didStartMarking(JSC::MarkingConstraintSet *this)
{
  uint64_t v2;
  WTF::BitVector *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v3 = (JSC::MarkingConstraintSet *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2 < 0)
    *(_QWORD *)v3 = 0x8000000000000000;
  else
    bzero((void *)(2 * v2 + 8), (unint64_t)(*(_QWORD *)(2 * v2) + 7) >> 3);
  v5 = (uint64_t *)((char *)this + 16);
  v4 = *((_QWORD *)this + 2);
  if (v4 < 0)
    *v5 = 0x8000000000000000;
  else
    bzero((void *)(2 * v4 + 8), (unint64_t)(*(_QWORD *)(2 * v4) + 7) >> 3);
  v6 = *((unsigned int *)this + 9);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 3);
    v8 = 8 * v6;
    while (1)
    {
      v9 = *v7;
      *(_QWORD *)(v9 + 24) = 0;
      v10 = *(unsigned __int8 *)(v9 + 36);
      if (v10 == 1)
        break;
      if (v10 == 2)
      {
        v11 = *v5;
        if (*v5 < 0)
          v12 = 63;
        else
          v12 = *(_QWORD *)(2 * v11);
        v13 = *(unsigned int *)(v9 + 32);
        if (v12 > v13)
        {
          v14 = (uint64_t *)((char *)this + 16);
LABEL_17:
          if (v11 >= 0)
            v16 = 2 * v11 + 8;
          else
            v16 = (uint64_t)v14;
          *(_QWORD *)(v16 + ((v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
          goto LABEL_21;
        }
        WTF::BitVector::resizeOutOfLine((JSC::MarkingConstraintSet *)((char *)this + 16), v13 + 1, 0);
        v14 = (uint64_t *)((char *)this + 16);
        goto LABEL_29;
      }
LABEL_21:
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_25;
    }
    v11 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0x8000000000000000) != 0)
      v15 = 63;
    else
      v15 = *(_QWORD *)(2 * v11);
    v13 = *(unsigned int *)(v9 + 32);
    if (v15 > v13)
    {
      v14 = (uint64_t *)v3;
      goto LABEL_17;
    }
    WTF::BitVector::resizeOutOfLine(v3, v13 + 1, 0);
    v14 = (uint64_t *)v3;
LABEL_29:
    v11 = *v14;
    goto LABEL_17;
  }
LABEL_25:
  *((_DWORD *)this + 18) = 1;
}

_QWORD *JSC::MarkingConstraintSet::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = (unint64_t)a2;
  v4 = *a2;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 36);
  v5 = (_QWORD *)(a1 + 40);
  v16 = v4;
  v6 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 48))
  {
    v14 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v16);
    v6 = *(unsigned int *)(a1 + 52);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = *v14;
  }
  else
  {
    *(_QWORD *)(*v5 + 8 * v6) = v4;
  }
  *(_DWORD *)(a1 + 52) = v6 + 1;
  v7 = *(_QWORD *)v2;
  if (*(_BYTE *)(*(_QWORD *)v2 + 36) == 2)
  {
    v12 = (_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)v2;
    v13 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 64))
    {
      v15 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v16);
      v13 = *(unsigned int *)(a1 + 68);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13) = *v15;
    }
    else
    {
      *(_QWORD *)(*v12 + 8 * v13) = v7;
    }
    *(_DWORD *)(a1 + 68) = v13 + 1;
  }
  result = (_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 32))
  {
    result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v9 + 1, v2);
    v2 = (unint64_t)result;
    v9 = *(unsigned int *)(a1 + 36);
    v10 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v9);
  }
  else
  {
    v10 = (_QWORD *)(*result + 8 * v9);
  }
  v11 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v10 = v11;
  *(_DWORD *)(a1 + 36) = v9 + 1;
  return result;
}

BOOL JSC::MarkingConstraintSet::executeConvergenceImpl(unint64_t ***this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t **v19;
  uint64_t v20;
  unint64_t *v21;
  double v22;
  double v23;
  BOOL v24;
  char *v25;
  JSC::MarkingConstraint ***v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  WTF::BitVector *v47;
  unint64_t v48;
  unint64_t v50;
  unint64_t v52;
  WTF *v53;
  char *v54;
  WTF *v55;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  _OWORD *v64;
  unsigned int **v65;
  unsigned int **v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  int v76;
  unint64_t **v77;
  unint64_t *v78;
  JSC::MarkingConstraintSet *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[512];
  _WORD *v86;
  uint64_t v87;
  _WORD v88[65];
  char v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD v93[32];
  __int128 v94;
  unint64_t ***v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;

  v10 = (*this)[50];
  v77 = *this;
  v78 = v10;
  v79 = (JSC::MarkingConstraintSet *)this;
  v80 = 0x8000000000000000;
  v81 = 0;
  v82 = 0;
  v83 = (WTF *)v85;
  v84 = 32;
  v86 = v88;
  v87 = 32;
  v88[64] = 0;
  v89 = 1;
  v90 = 0;
  v91 = v93;
  v11 = v10[9];
  v93[0] = v10;
  v93[1] = v11;
  v12 = v77[51][9];
  v93[2] = v77[51];
  v93[3] = v12;
  v13 = v77[56];
  v14 = *((unsigned int *)v77 + 115);
  v92 = 0x200000010;
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = 2;
    do
    {
      *(_QWORD *)&v94 = *v13;
      *((_QWORD *)&v94 + 1) = *(_QWORD *)(v94 + 72);
      if (v16 == (_DWORD)v92)
      {
        v64 = (_OWORD *)WTF::Vector<JSC::VisitCounter,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, (void *)(v16 + 1), (unint64_t)&v94, a4, a5, a6, a7, a8);
        *(_OWORD *)&v91[2 * HIDWORD(v92)] = *v64;
      }
      else
      {
        *(_OWORD *)&v91[2 * v16] = v94;
      }
      v16 = ++HIDWORD(v92);
      ++v13;
      v15 -= 8;
    }
    while (v15);
  }
  v17 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = v17 + 1;
  v76 = v17;
  if ((_BYTE)word_1ECF4C5CC)
    WTF::dataLog<char [3],unsigned int,char [2]>(&v76);
  if (v17 == 1)
  {
    v47 = (WTF::BitVector *)(this + 1);
LABEL_37:
    JSC::MarkingConstraintSolver::drain((JSC::MarkingConstraintSolver *)&v77, v47, a3, a4, a5, a6, a7, a8);
    v45 = 0;
    goto LABEL_38;
  }
  if (v17 == 2)
  {
    v47 = (WTF::BitVector *)(this + 2);
    goto LABEL_37;
  }
  v18 = *((unsigned int *)this + 17);
  if ((_DWORD)v18)
  {
    v19 = this[7];
    v20 = 8 * v18 - 8;
    do
    {
      v21 = *v19++;
      v22 = (double)v21[3];
      v23 = (*(double (**)(unint64_t *, JSC::SlotVisitor *))(*v21 + 16))(v21, a2) + v22;
      LOBYTE(v18) = v23 != 0.0;
      v24 = v23 != 0.0 || v20 == 0;
      v20 -= 8;
    }
    while (!v24);
  }
  v75 = v18;
  v26 = (JSC::MarkingConstraint ***)(this + 5);
  v25 = (char *)this[5];
  v27 = *((unsigned int *)this + 13);
  *(_QWORD *)&v94 = &v75;
  *((_QWORD *)&v94 + 1) = a2;
  v28 = 126 - 2 * __clz(v27);
  if ((_DWORD)v27)
    v29 = v28;
  else
    v29 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,false>(v25, &v25[8 * v27], (uint64_t)&v94, v29, 1);
  v37 = v91;
  v38 = HIDWORD(v92);
  if (HIDWORD(v92))
  {
    v39 = &v91[2 * HIDWORD(v92)];
    v40 = v91;
    while (*(_QWORD *)(*v40 + 72) == v40[1])
    {
      v40 += 2;
      if (v40 == v39)
        goto LABEL_24;
    }
    goto LABEL_30;
  }
LABEL_24:
  if (!*((_DWORD *)this + 13))
  {
    v41 = HIDWORD(v92);
    goto LABEL_28;
  }
  v98 = 0;
  if ((*(double (**)(JSC::MarkingConstraint *, unint64_t *))(*(_QWORD *)**v26 + 16))(**v26, v78) > 0.0)
  {
    v98 = 1;
    if (!*((_DWORD *)this + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x1985F25D8);
    }
    JSC::MarkingConstraintSolver::execute((JSC::MarkingConstraintSolver *)&v77, **v26);
    if (v81 == v82)
    {
      v37 = v91;
      v41 = HIDWORD(v92);
      if (!*((_DWORD *)this + 13))
        goto LABEL_27;
      if (HIDWORD(v92))
      {
        v63 = v91;
        while (*(_QWORD *)(*v63 + 72) == v63[1])
        {
          v63 += 2;
          if (v63 == &v91[2 * HIDWORD(v92)])
            goto LABEL_26;
        }
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  *(_QWORD *)&v94 = WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::converge(WTF::Vector<JSC::MarkingConstraint *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>::implFunction;
  *((_QWORD *)&v94 + 1) = &v94;
  v95 = &v77;
  v96 = &v98;
  v97 = (char *)(this + 5);
  JSC::MarkingConstraintSolver::execute((uint64_t)&v77, 0, (uint64_t)WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::converge(WTF::Vector<JSC::MarkingConstraint *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>::implFunction, (uint64_t)&v94, v33, v34, v35, v36);
  v37 = v91;
  v41 = HIDWORD(v92);
LABEL_27:
  v38 = v41;
LABEL_28:
  if (!v41)
  {
    v45 = 1;
    goto LABEL_38;
  }
  v39 = &v37[2 * v38];
  do
  {
LABEL_30:
    v42 = *v37;
    v43 = v37[1];
    v37 += 2;
    v44 = *(_QWORD *)(v42 + 72);
    v45 = v44 == v43;
  }
  while (v44 == v43 && v37 != v39);
LABEL_38:
  v48 = (unint64_t)v91;
  if (v93 != v91 && v91 != 0)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree(v48, v30, v31, v32, v33, v34, v35, v36);
  }
  v50 = (unint64_t)v86;
  if (v88 != v86 && v86 != 0)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v50, v30, v31, v32, v33, v34, v35, v36);
  }
  v52 = v81;
  v53 = v83;
  v54 = (char *)v83 + 16 * v82;
  if (v81 > v82)
  {
    if (v82)
    {
      do
      {
        v71 = *(unsigned int **)v53;
        *(_QWORD *)v53 = 0;
        if (v71)
        {
          v72 = v71 + 2;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            atomic_store(1u, v71 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
          }
        }
        v53 = (WTF *)((char *)v53 + 16);
      }
      while (v53 != (WTF *)v54);
      v53 = v83;
      v52 = v81;
    }
    if (v52 != v84)
    {
      v65 = (unsigned int **)((char *)v53 + 16 * v84);
      v66 = (unsigned int **)((char *)v53 + 16 * v52);
      do
      {
        v67 = *v66;
        *v66 = 0;
        if (v67)
        {
          v68 = v67 + 2;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            atomic_store(1u, v67 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
          }
        }
        v66 += 2;
      }
      while (v66 != v65);
    }
  }
  else if (v81 != v82)
  {
    v58 = (unsigned int **)((char *)v83 + 16 * v81);
    do
    {
      v59 = *v58;
      *v58 = 0;
      if (v59)
      {
        v60 = v59 + 2;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v59 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
        }
      }
      v58 += 2;
    }
    while (v58 != (unsigned int **)v54);
  }
  v55 = v83;
  if (v85 != (_BYTE *)v83 && v83 != 0)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v55, v30, v31, v32, v33, v34, v35, v36);
  }
  if ((v80 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v80, v30, v31, v32, v33, v34, v35, v36);
  return v45;
}

uint64_t WTF::dataLog<char [3],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "i#");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", ":");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::MarkingConstraintSolver::drain(JSC::MarkingConstraintSolver *this, WTF::BitVector *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[4];
  _QWORD v20[2];
  _QWORD v21[2];

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
  {
    v15 = __clz(__rbit64(v9));
    v11 = 63;
    if (v15 >= 0x3F)
      v15 = 63;
  }
  else
  {
    v10 = 2 * v9;
    v11 = *(_QWORD *)(2 * v9);
    if ((unint64_t)(v11 + 63) < 0x40)
      return;
    v12 = *(_QWORD *)(v10 + 8);
    if (v12 && (v13 = __clz(__rbit64(v12)), v13 < 0x40))
    {
      v14 = 0;
LABEL_6:
      v15 = v13 + (v14 << 6);
    }
    else
    {
      if ((unint64_t)(v11 + 63) >> 6 == 1)
        return;
      v16 = 0;
      v17 = v10 + 16;
      do
      {
        v18 = *(_QWORD *)(v17 + 8 * v16);
        if (v18)
        {
          v13 = __clz(__rbit64(v18));
          if (v13 <= 0x3F)
          {
            v14 = v16 + 1;
            goto LABEL_6;
          }
        }
        ++v16;
      }
      while (((unint64_t)(v11 + 63) >> 6) - 1 != v16);
      v15 = v11;
    }
  }
  v21[0] = a2;
  v21[1] = v15;
  v20[0] = a2;
  v20[1] = v11;
  if (v15 != v11)
  {
    v19[0] = WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::drain(WTF::BitVector &)::$_0>::implFunction;
    v19[1] = v19;
    v19[2] = v21;
    v19[3] = v20;
    JSC::MarkingConstraintSolver::execute((uint64_t)this, 1, (uint64_t)WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::drain(WTF::BitVector &)::$_0>::implFunction, (uint64_t)v19, a5, a6, a7, a8);
    if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
      *(_QWORD *)a2 = 0x8000000000000000;
    else
      bzero((void *)(2 * *(_QWORD *)a2 + 8), (unint64_t)(*(_QWORD *)(2 * *(_QWORD *)a2) + 7) >> 3);
  }
}

void JSC::MarkingConstraintSolver::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  int v35;
  _QWORD v36[2];
  unsigned int *v37;

  v36[0] = a3;
  v36[1] = a4;
  v35 = a2;
  *(_BYTE *)(a1 + 722) = 1;
  if (*(_DWORD *)(a1 + 724))
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  if (byte_1ECF4C57C)
  {
    if ((_BYTE)word_1ECF4C5CC)
    {
      if ((_DWORD)a2)
        v34 = "N";
      else
        v34 = "P";
      WTF::dataLog<char [88],char [2]>(v34, "<");
    }
    v9 = *(_QWORD *)a1;
    v10 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v10 + 8) = 1;
    *(_QWORD *)v10 = off_1E3590E00;
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = &v35;
    *(_QWORD *)(v10 + 32) = v36;
    v37 = (unsigned int *)v10;
    JSC::Heap::runTaskInParallel(v9, &v37, v11, v12, v13, v14, v15, v16);
    v17 = v37;
    v37 = 0;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    if ((_BYTE)word_1ECF4C5CC)
      WTF::dataLog<char [16]>(">");
  }
  else
  {
    JSC::MarkingConstraintSolver::runExecutionThread(a1, *(_QWORD **)(a1 + 8), a2, a3, a4, a6, a7, a8);
  }
  if (*(_BYTE *)(a1 + 722))
  {
    __break(0xC471u);
    JUMPOUT(0x1985F29F0);
  }
  if (*(_DWORD *)(a1 + 724))
  {
    __break(0xC471u);
    JUMPOUT(0x1985F2A48);
  }
  v21 = *(unsigned int *)(a1 + 588);
  if ((_DWORD)v21)
  {
    v22 = *(unsigned int **)(a1 + 576);
    v23 = 4 * v21;
    while (1)
    {
      v24 = *v22;
      v25 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v25 + 36) <= v24)
        break;
      JSC::MarkingConstraintSolver::execute((JSC::MarkingConstraintSolver *)a1, *(JSC::MarkingConstraint **)(*(_QWORD *)(v25 + 24) + 8 * v24));
      ++v22;
      v23 -= 4;
      if (!v23)
      {
        if (*(_DWORD *)(a1 + 584))
        {
          if (*(_DWORD *)(a1 + 588))
            *(_DWORD *)(a1 + 588) = 0;
          v33 = *(_QWORD *)(a1 + 576);
          if (a1 + 592 != v33 && v33)
          {
            *(_QWORD *)(a1 + 576) = 0;
            *(_DWORD *)(a1 + 584) = 0;
            WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
            v33 = *(_QWORD *)(a1 + 576);
          }
          if (!v33)
          {
            *(_QWORD *)(a1 + 576) = a1 + 592;
            *(_DWORD *)(a1 + 584) = 32;
          }
        }
        goto LABEL_14;
      }
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x1985F29D0);
  }
LABEL_14:
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x1985F2A84);
  }
}

void JSC::MarkingConstraintSolver::runExecutionThread(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  unsigned __int8 *v12;
  WTF::BitVector *v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  WTF::BitVector *v21;
  WTF::BitVector *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  unsigned __int8 *v34;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  WTF::BitVector *v43;
  WTF::BitVector *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int **v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF::ParkingLot *v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned int *v82;
  char v83;
  int v84;
  unsigned __int8 *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;

  v8 = a5;
  v9 = (uint64_t (*)(uint64_t))a4;
  v10 = a3;
  v12 = (unsigned __int8 *)(a1 + 720);
  v13 = (WTF::BitVector *)(a1 + 24);
  v79 = (unsigned __int8 *)(a1 + 721);
  v80 = (unsigned __int8 *)(a1 + 720);
  v77 = a1 + 576;
  v78 = a2 + 13;
  do
  {
    v85 = v12;
    v86 = 1;
    if (__ldaxr(v12))
    {
      __clrex();
LABEL_4:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
      goto LABEL_5;
    }
    if (__stxr(1u, v12))
      goto LABEL_4;
LABEL_5:
    if (!(_DWORD)v10)
    {
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (v15 != *(_QWORD *)(a1 + 40))
          break;
        if (*(_BYTE *)(a1 + 722))
        {
          v16 = v9(v8);
          v87 = v16;
          if ((v16 & 0xFF00000000) != 0)
          {
            v17 = v16;
            do
            {
              v19 = (unint64_t *)(2 * *(_QWORD *)v13);
              if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                v20 = 63;
              else
                v20 = *v19;
              if (v20 <= v17
                || ((v21 = (WTF::BitVector *)(v19 + 1), *(uint64_t *)v13 >= 0) ? (v22 = v21) : (v22 = v13),
                    ((*(_QWORD *)((char *)v22 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0))
              {
                v23 = *(_QWORD *)(a1 + 16);
                if (*(_DWORD *)(v23 + 36) <= v17)
                  goto LABEL_137;
                v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * v17);
                if (*(_BYTE *)(v24 + 37))
                  goto LABEL_121;
                v25 = *(unsigned int *)(a1 + 588);
                if ((_DWORD)v25 == *(_DWORD *)(a1 + 584))
                {
                  WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(v77, (unint64_t)&v87);
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v25) = v17;
                  ++*(_DWORD *)(a1 + 588);
                }
              }
              v18 = v9(v8);
              v17 = v18;
              v87 = v18;
            }
            while ((v18 & 0xFF00000000) != 0);
          }
          *(_BYTE *)(a1 + 722) = 0;
        }
        if (!*(_DWORD *)(a1 + 724))
          goto LABEL_25;
        v88 = 0x7FF0000000000000;
        v89 = 0;
        WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v79, v12, (WTF::TimeWithDynamicClockType *)&v88);
      }
      v37 = *(_QWORD *)(a1 + 48);
      v26 = *(unsigned int **)(v37 + 16 * v15);
      if (v26)
      {
        v38 = v26 + 2;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
      }
      goto LABEL_44;
    }
    while (1)
    {
      if (!*(_BYTE *)(a1 + 722))
        goto LABEL_65;
      v40 = v9(v8);
      v87 = v40;
      if ((v40 & 0xFF00000000) != 0)
        break;
LABEL_64:
      *(_BYTE *)(a1 + 722) = 0;
LABEL_65:
      v15 = *(_QWORD *)(a1 + 32);
      if (v15 != *(_QWORD *)(a1 + 40))
      {
        v37 = *(_QWORD *)(a1 + 48);
        v26 = *(unsigned int **)(v37 + 16 * v15);
        if (v26)
        {
          v73 = v26 + 2;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 + 1, v73));
        }
LABEL_44:
        v24 = *(_QWORD *)(v37 + 16 * v15 + 8);
        v83 = 0;
        v84 = 1;
        v82 = (unsigned int *)v24;
        goto LABEL_26;
      }
      if (!*(_DWORD *)(a1 + 724))
      {
LABEL_25:
        v82 = 0;
        v26 = 0;
        v24 = 0;
        v83 = 1;
        v84 = 0;
LABEL_26:
        v17 = -1;
        goto LABEL_27;
      }
      v88 = 0x7FF0000000000000;
      v89 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v79, v12, (WTF::TimeWithDynamicClockType *)&v88);
    }
    v17 = v40;
    while (1)
    {
      v41 = (unint64_t *)(2 * *(_QWORD *)v13);
      if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
        v42 = 63;
      else
        v42 = *v41;
      if (v42 > v17)
      {
        v43 = (WTF::BitVector *)(v41 + 1);
        v44 = *(uint64_t *)v13 >= 0 ? v43 : v13;
        if (((*(_QWORD *)((char *)v44 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
          goto LABEL_57;
      }
      v46 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v46 + 36) <= v17)
      {
LABEL_137:
        __break(0xC471u);
        JUMPOUT(0x1985F31C0);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v46 + 24) + 8 * v17);
      if (*(_BYTE *)(v24 + 37))
        break;
      v47 = *(unsigned int *)(a1 + 588);
      if ((_DWORD)v47 == *(_DWORD *)(a1 + 584))
      {
        WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(v77, (unint64_t)&v87);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v47) = v17;
        ++*(_DWORD *)(a1 + 588);
      }
LABEL_57:
      v45 = v9(v8);
      v17 = v45;
      v87 = v45;
      if ((v45 & 0xFF00000000) == 0)
        goto LABEL_64;
    }
LABEL_121:
    if (*(_BYTE *)(v24 + 38) == 1)
      ++*(_DWORD *)(a1 + 724);
    if ((_BYTE)word_1ECF4C5CC)
    {
      v75 = *(_QWORD *)(v24 + 8);
      if (v75)
        v76 = (const char *)(v75 + 16);
      else
        v76 = 0;
      v88 = (uint64_t)v76;
      WTF::dataLog<char const*>((const char **)&v88);
    }
    v71 = a2[9];
    (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *))(*(_QWORD *)v24 + 40))(v24, &v85, a2);
    v82 = 0;
    v26 = 0;
    *(_QWORD *)(v24 + 24) = a2[9] - v71;
    v83 = 1;
    v84 = 1;
    v12 = v80;
LABEL_27:
    if (v86)
    {
      v27 = v85;
      v28 = __ldxr(v85);
      if (v28 == 1)
      {
        if (!__stlxr(0, v85))
          goto LABEL_33;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_33:
    if (v84)
    {
      if ((v83 & 1) == 0)
      {
        v29 = v9;
        v30 = v8;
        v31 = v10;
        v32 = a2[9];
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 16))(v26);
        v34 = (unsigned __int8 *)(v24 + 39);
        if (__ldaxr((unsigned __int8 *)(v24 + 39)))
        {
          __clrex();
          goto LABEL_37;
        }
        if (__stxr(1u, v34))
LABEL_37:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v24 + 39);
        *(_QWORD *)(v24 + 24) += a2[9] - v32;
        v36 = __ldxr(v34);
        if (v36 == 1)
        {
          v10 = v31;
          v8 = v30;
          v9 = v29;
          if (!__stlxr(0, v34))
            goto LABEL_70;
        }
        else
        {
          __clrex();
          v10 = v31;
          v8 = v30;
          v9 = v29;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v24 + 39), 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_70;
      }
      if (*(_BYTE *)(v24 + 38) == 1)
      {
        a2[13] = v24;
        a2[14] = a1;
      }
      v62 = a2[9];
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 32))(v24, a2);
      *(_QWORD *)(v24 + 24) += a2[9] - v62;
      *v78 = 0;
      v78[1] = 0;
LABEL_70:
      v12 = v80;
      if (__ldaxr(v80))
      {
        __clrex();
        goto LABEL_72;
      }
      if (__stxr(1u, v80))
LABEL_72:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v80);
      if ((v83 & 1) != 0)
      {
        if (*(_BYTE *)(v24 + 38) == 1)
          --*(_DWORD *)(a1 + 724);
        v63 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          v64 = 63;
        else
          v64 = *(_QWORD *)(2 * v63);
        if (v64 <= v17)
        {
          WTF::BitVector::resizeOutOfLine(v13, v17 + 1, 0);
          v63 = *(_QWORD *)v13;
        }
        if (v63 >= 0)
          v65 = 2 * v63 + 8;
        else
          v65 = (uint64_t)v13;
        *(_QWORD *)(v65 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) |= 1 << v17;
      }
      else
      {
        v49 = *(_QWORD *)(a1 + 32);
        if (v49 != *(_QWORD *)(a1 + 40))
        {
          v50 = (unsigned int **)(*(_QWORD *)(a1 + 48) + 16 * v49);
          if (v26 == *v50 && v82 == v50[1])
          {
            *v50 = 0;
            v51 = *(_QWORD *)(a1 + 48);
            v52 = 16 * v49;
            v53 = *(unsigned int **)(v51 + v52);
            *(_QWORD *)(v51 + v52) = 0;
            if (v53)
            {
              v54 = v53 + 2;
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                atomic_store(1u, v53 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
              }
            }
            v57 = *(_QWORD *)(a1 + 32);
            if (v57 == *(unsigned int *)(a1 + 56) - 1)
              v58 = 0;
            else
              v58 = v57 + 1;
            *(_QWORD *)(a1 + 32) = v58;
            if (v26)
            {
              v59 = v26 + 2;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                atomic_store(1u, v26 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
              }
            }
          }
        }
      }
      v66 = atomic_load(v79);
      if ((v66 & 1) != 0)
      {
        v72 = (WTF::ParkingLot *)v79;
        atomic_store(0, v79);
        WTF::ParkingLot::unparkAll(v72, v33, a3, a4, a5, a6, a7, a8);
      }
      v67 = __ldxr(v80);
      if (v67 == 1)
      {
        if (!__stlxr(0, v80))
          goto LABEL_112;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v80, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_112:
    if (v26)
    {
      v68 = v26 + 2;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v26 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
    }
  }
  while ((v84 & 1) != 0);
}

void JSC::MarkingConstraintSolver::execute(JSC::MarkingConstraintSolver *this, JSC::MarkingConstraint *a2)
{
  uint64_t v4;
  WTF::BitVector *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v21;
  const char *v22;

  v5 = (JSC::MarkingConstraintSolver *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  v6 = *((unsigned int *)a2 + 8);
  v7 = (unint64_t *)(2 * v4);
  if (v4 < 0)
    v8 = 63;
  else
    v8 = *v7;
  if (v8 <= v6
    || ((v9 = (char *)(v7 + 1), v4 >= 0) ? (v10 = v9) : (v10 = (char *)this + 24),
        ((*(_QWORD *)&v10[(v6 >> 3) & 0x1FFFFFF8] >> v6) & 1) == 0))
  {
    v11 = *((_QWORD *)this + 1);
    if ((_BYTE)word_1ECF4C5CC)
    {
      v19 = *((_QWORD *)a2 + 1);
      if (v19)
        v20 = (const char *)(v19 + 16);
      else
        v20 = 0;
      v22 = v20;
      WTF::dataLog<char const*>(&v22);
    }
    v12 = *(_QWORD *)(v11 + 72);
    (*(void (**)(JSC::MarkingConstraint *, char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v21, v11);
    *((_QWORD *)a2 + 3) = *(_QWORD *)(v11 + 72) - v12;
    v13 = *((_QWORD *)this + 1);
    v14 = *(_QWORD *)(v13 + 72);
    (*(void (**)(JSC::MarkingConstraint *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v13);
    *((_QWORD *)a2 + 3) += *(_QWORD *)(v13 + 72) - v14;
    v15 = *((unsigned int *)a2 + 8);
    v16 = *((_QWORD *)this + 3);
    if (v16 < 0)
      v17 = 63;
    else
      v17 = *(_QWORD *)(2 * v16);
    if (v17 <= v15)
    {
      WTF::BitVector::resizeOutOfLine(v5, v15 + 1, 0);
      v16 = *(_QWORD *)v5;
    }
    if (v16 >= 0)
      v18 = 2 * v16 + 8;
    else
      v18 = (uint64_t)v5;
    *(_QWORD *)(v18 + ((v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = *(a2 - 1);
        v64 = *v8;
        if (v63 < *v8)
        {
          *v8 = v63;
          *(a2 - 1) = v64;
        }
        return result;
      case 3:
        v65 = *v8;
        v66 = v8[1];
        v67 = *(a2 - 1);
        if (v66 >= *v8)
        {
          if (v67 < v66)
          {
            v8[1] = v67;
            *(a2 - 1) = v66;
            v115 = v8[1];
            goto LABEL_212;
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v8 = v66;
            v8[1] = v65;
            v124 = *(a2 - 1);
            if (v124 >= v65)
              return result;
            v8[1] = v124;
          }
          else
          {
            *v8 = v67;
          }
          *(a2 - 1) = v65;
        }
        return result;
      case 4:
        v41 = v8 + 1;
        v77 = v8[1];
        v43 = (unint64_t)(v8 + 2);
        v13 = v8[2];
        v78 = *v8;
        if (v77 >= *v8)
        {
          if (v13 >= v77)
            goto LABEL_191;
          *v41 = v13;
          *(_QWORD *)v43 = v77;
          v79 = v8;
          v80 = v8 + 1;
          result = v77;
          if (v13 >= v78)
            goto LABEL_192;
        }
        else
        {
          v79 = v8;
          v80 = v8 + 2;
          result = *v8;
          if (v13 >= v77)
          {
            *v8 = v77;
            v8[1] = v78;
            v79 = v8 + 1;
            v80 = v8 + 2;
            result = v78;
            if (v13 >= v78)
            {
LABEL_191:
              v77 = v13;
LABEL_192:
              v120 = *(a2 - 1);
              if (v120 < v77)
              {
                *(_QWORD *)v43 = v120;
                *(a2 - 1) = v77;
                v121 = *(_QWORD *)v43;
                v122 = *v41;
                if (v121 < v122)
                {
                  v7[1] = v121;
                  v7[2] = v122;
                  v123 = *v7;
                  if (v121 < *v7)
                  {
                    *v7 = v121;
                    v7[1] = v123;
                  }
                }
              }
              return result;
            }
          }
        }
        *v79 = v13;
        *v80 = v78;
        v77 = result;
        goto LABEL_192;
      case 5:
        v68 = v8 + 1;
        v69 = v8[1];
        v71 = v8 + 2;
        v70 = v8[2];
        v72 = *v8;
        if (v69 >= *v8)
        {
          if (v70 < v69)
          {
            v73 = v8;
            v74 = v8 + 1;
            *v68 = v70;
            *v71 = v69;
            v75 = v70;
            result = v72;
            v76 = v69;
            if (v70 >= v72)
            {
              v75 = v72;
              v72 = v70;
              v70 = v69;
              goto LABEL_203;
            }
            goto LABEL_200;
          }
          v75 = *v8;
          v72 = v8[1];
        }
        else
        {
          if (v70 < v69)
          {
            v73 = v8;
            v74 = v8 + 2;
            v75 = v8[2];
            result = v8[1];
            v76 = *v8;
LABEL_200:
            *v73 = v70;
            *v74 = v72;
            v72 = result;
            v70 = v76;
            goto LABEL_203;
          }
          v73 = v8 + 1;
          v74 = v8 + 2;
          *v8 = v69;
          v8[1] = v72;
          v75 = v69;
          result = v70;
          v76 = v72;
          if (v70 < v72)
            goto LABEL_200;
          v75 = v69;
        }
LABEL_203:
        v125 = v8[3];
        if (v125 >= v70)
        {
          v70 = v8[3];
        }
        else
        {
          v8[2] = v125;
          v8[3] = v70;
          if (v125 < v72)
          {
            *v68 = v125;
            *v71 = v72;
            if (v125 < v75)
            {
              *v8 = v125;
              v8[1] = v75;
            }
          }
        }
        v126 = *(a2 - 1);
        if (v126 < v70)
        {
          v8[3] = v126;
          *(a2 - 1) = v70;
          v127 = v8[2];
          v115 = v8[3];
          if (v115 < v127)
          {
            v8[2] = v115;
            v8[3] = v127;
            v128 = v8[1];
            if (v115 < v128)
            {
              v8[1] = v115;
              v8[2] = v128;
LABEL_212:
              v129 = *v8;
              if (v115 < *v8)
              {
                *v8 = v115;
                v8[1] = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v90 = (unint64_t)(v10 - 2) >> 1;
              v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  v92 = (2 * v91) | 1;
                  v93 = &v8[v92];
                  v94 = *v93;
                  if (2 * v91 + 2 < v10 && v94 < v93[1])
                  {
                    v94 = v93[1];
                    ++v93;
                    v92 = 2 * v91 + 2;
                  }
                  v95 = &v8[v91];
                  v96 = *v95;
                  if (v94 >= *v95)
                  {
                    do
                    {
                      v97 = v93;
                      *v95 = v94;
                      if (v90 < v92)
                        break;
                      v98 = (2 * v92) | 1;
                      v93 = &v8[v98];
                      v92 = 2 * v92 + 2;
                      v94 = *v93;
                      if (v92 >= v10)
                      {
                        v92 = v98;
                      }
                      else
                      {
                        result = (uint64_t)(v93 + 1);
                        if (v94 >= v93[1])
                        {
                          v92 = v98;
                        }
                        else
                        {
                          v94 = v93[1];
                          ++v93;
                        }
                      }
                      v95 = v97;
                    }
                    while (v94 >= v96);
                    *v97 = v96;
                  }
                }
                v99 = v91-- <= 0;
              }
              while (!v99);
              v100 = (unint64_t)v9 >> 3;
              do
              {
                v101 = 0;
                v102 = *v8;
                v103 = v8;
                do
                {
                  v104 = &v103[v101];
                  v107 = v104[1];
                  v105 = v104 + 1;
                  v106 = v107;
                  v108 = (2 * v101) | 1;
                  v101 = 2 * v101 + 2;
                  if (v101 >= v100)
                  {
                    v101 = v108;
                  }
                  else if (v106 >= v105[1])
                  {
                    v101 = v108;
                  }
                  else
                  {
                    v106 = v105[1];
                    ++v105;
                  }
                  *v103 = v106;
                  v103 = v105;
                }
                while (v101 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                if (v105 == --a2)
                {
                  *v105 = v102;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v102;
                  v109 = (char *)v105 - (char *)v8 + 8;
                  if (v109 >= 9)
                  {
                    v110 = (((unint64_t)v109 >> 3) - 2) >> 1;
                    v111 = &v8[v110];
                    v112 = *v111;
                    v113 = *v105;
                    if (*v111 < *v105)
                    {
                      do
                      {
                        v114 = v111;
                        *v105 = v112;
                        if (!v110)
                          break;
                        v110 = (v110 - 1) >> 1;
                        v111 = &v8[v110];
                        v112 = *v111;
                        v105 = v114;
                      }
                      while (*v111 < v113);
                      *v114 = v113;
                    }
                  }
                }
                v99 = v100-- <= 2;
              }
              while (!v99);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 >= 0x401)
          {
            v14 = *v12;
            v15 = *v8;
            if (*v12 >= *v8)
            {
              if (v13 < v14)
              {
                *v12 = v13;
                *(a2 - 1) = v14;
                v18 = *v8;
                if (*v12 < *v8)
                {
                  *v8 = *v12;
                  *v12 = v18;
                }
              }
            }
            else
            {
              if (v13 >= v14)
              {
                *v8 = v14;
                *v12 = v15;
                v20 = *(a2 - 1);
                if (v20 >= v15)
                  goto LABEL_22;
                *v12 = v20;
              }
              else
              {
                *v8 = v13;
              }
              *(a2 - 1) = v15;
            }
LABEL_22:
            v21 = &v8[v11];
            v24 = *(v21 - 1);
            v22 = v21 - 1;
            v23 = v24;
            v25 = v8[1];
            v26 = *(a2 - 2);
            if (v24 >= v25)
            {
              if (v26 < v23)
              {
                *v22 = v26;
                *(a2 - 2) = v23;
                v27 = v8[1];
                if (*v22 < v27)
                {
                  v8[1] = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v26 >= v23)
              {
                v8[1] = v23;
                *v22 = v25;
                v29 = *(a2 - 2);
                if (v29 >= v25)
                  goto LABEL_34;
                *v22 = v29;
              }
              else
              {
                v8[1] = v26;
              }
              *(a2 - 2) = v25;
            }
LABEL_34:
            v30 = &v8[v11];
            v33 = v30[1];
            v31 = v30 + 1;
            v32 = v33;
            v34 = v8[2];
            v35 = *(a2 - 3);
            if (v33 >= v34)
            {
              if (v35 < v32)
              {
                *v31 = v35;
                *(a2 - 3) = v32;
                v36 = v8[2];
                if (*v31 < v36)
                {
                  v8[2] = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v35 >= v32)
              {
                v8[2] = v32;
                *v31 = v34;
                v37 = *(a2 - 3);
                if (v37 >= v34)
                  goto LABEL_43;
                *v31 = v37;
              }
              else
              {
                v8[2] = v35;
              }
              *(a2 - 3) = v34;
            }
LABEL_43:
            v13 = *v12;
            v38 = *v22;
            v39 = *v31;
            if (*v12 >= *v22)
            {
              if (v39 >= v13)
                goto LABEL_50;
              *v12 = v39;
              *v31 = v13;
              v31 = v12;
              v13 = v38;
              if (v39 >= v38)
              {
                v13 = v39;
                goto LABEL_50;
              }
            }
            else if (v39 >= v13)
            {
              *v22 = v13;
              *v12 = v38;
              v22 = v12;
              v13 = v39;
              if (v39 >= v38)
              {
                v13 = v38;
LABEL_50:
                v40 = *v8;
                *v8 = v13;
                *v12 = v40;
                goto LABEL_51;
              }
            }
            *v22 = v39;
            *v31 = v38;
            goto LABEL_50;
          }
          v16 = *v8;
          v17 = *v12;
          if (*v8 >= *v12)
          {
            if (v13 < v16)
            {
              *v8 = v13;
              *(a2 - 1) = v16;
              v19 = *v12;
              if (*v8 < *v12)
              {
                *v12 = *v8;
                *v8 = v19;
              }
            }
          }
          else
          {
            if (v13 < v16)
            {
              *v12 = v13;
LABEL_30:
              *(a2 - 1) = v17;
              goto LABEL_51;
            }
            *v12 = v16;
            *v8 = v17;
            v28 = *(a2 - 1);
            if (v28 < v17)
            {
              *v8 = v28;
              goto LABEL_30;
            }
          }
LABEL_51:
          --a3;
          v41 = (unint64_t *)*v8;
          if ((a4 & 1) == 0 && *(v8 - 1) >= (unint64_t)v41)
          {
            if ((unint64_t)v41 >= *(a2 - 1))
            {
              v56 = v8 + 1;
              do
              {
                v8 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while ((unint64_t)v41 >= *v8);
            }
            else
            {
              v43 = (unint64_t)(v8 + 1);
              do
              {
                if ((unint64_t *)v43 == a2)
                  goto LABEL_190;
                v55 = *(_QWORD *)v43;
                v43 += 8;
              }
              while ((unint64_t)v41 >= v55);
              v8 = (unint64_t *)(v43 - 8);
            }
            v43 = (unint64_t)a2;
            if (v8 < a2)
            {
              v43 = (unint64_t)a2;
              while ((unint64_t *)v43 != v7)
              {
                v57 = *(_QWORD *)(v43 - 8);
                v43 -= 8;
                if ((unint64_t)v41 >= v57)
                  goto LABEL_93;
              }
              goto LABEL_190;
            }
LABEL_93:
            if ((unint64_t)v8 < v43)
            {
              v58 = *v8;
              v13 = *(_QWORD *)v43;
              do
              {
                *v8 = v13;
                v59 = v8 + 1;
                *(_QWORD *)v43 = v58;
                do
                {
                  if (v59 == a2)
                    goto LABEL_190;
                  v60 = *v59++;
                  v58 = v60;
                }
                while ((unint64_t)v41 >= v60);
                v8 = v59 - 1;
                do
                {
                  if ((unint64_t *)v43 == v7)
                    goto LABEL_190;
                  v61 = *(_QWORD *)(v43 - 8);
                  v43 -= 8;
                  v13 = v61;
                }
                while ((unint64_t)v41 < v61);
              }
              while ((unint64_t)v8 < v43);
            }
            v62 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v62;
            a4 = 0;
            *v62 = (unint64_t)v41;
            continue;
          }
          v42 = 0;
          do
          {
            v43 = (unint64_t)&v8[v42 + 1];
            if ((unint64_t *)v43 == a2)
              goto LABEL_190;
            v13 = *(_QWORD *)v43;
            ++v42;
          }
          while (*(_QWORD *)v43 < (unint64_t)v41);
          v43 = (unint64_t)&v8[v42];
          v44 = a2;
          if (v42 != 1)
          {
            while (v44 != v8)
            {
              v45 = *--v44;
              if (v45 < (unint64_t)v41)
                goto LABEL_63;
            }
            goto LABEL_190;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unint64_t)v44)
              break;
            v46 = *--v44;
          }
          while (v46 >= (unint64_t)v41);
LABEL_63:
          if (v43 >= (unint64_t)v44)
          {
            v53 = (unint64_t *)(v43 - 8);
          }
          else
          {
            v47 = *v44;
            v48 = &v8[v42];
            v49 = v44;
            do
            {
              *v48 = v47;
              *v49 = v13;
              v50 = v48 + 1;
              do
              {
                if (v50 == a2)
                  goto LABEL_190;
                v51 = *v50++;
                v13 = v51;
              }
              while (v51 < (unint64_t)v41);
              v48 = v50 - 1;
              do
              {
                if (v49 == v8)
                  goto LABEL_190;
                v52 = *--v49;
                v47 = v52;
              }
              while (v52 >= (unint64_t)v41);
            }
            while (v48 < v49);
            v53 = v50 - 2;
          }
          if (v53 != v8)
            *v8 = *v53;
          *v53 = (unint64_t)v41;
          if (v43 < (unint64_t)v44)
          {
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **,false>(v7, v53, a3, a4 & 1);
            a4 = 0;
            v8 = v53 + 1;
            continue;
          }
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **>(v8, v53);
          v8 = v53 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **>(v53 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v54)
              goto LABEL_79;
            continue;
          }
          a2 = v53;
          if (v54)
            return result;
          goto LABEL_2;
        }
        v41 = v8 + 1;
        v82 = v8 == a2 || v41 == a2;
        if ((a4 & 1) == 0)
        {
          if (v82)
            return result;
          v43 = 0;
          v116 = 1;
          while (1)
          {
            v13 = v8[v43];
            v43 = v116;
            v117 = *v41;
            if (*v41 < v13)
              break;
LABEL_188:
            v116 = v43 + 1;
            if (++v41 == a2)
              return result;
          }
          v118 = 0;
          while (1)
          {
            v119 = &v41[v118];
            *v119 = v13;
            if (!(v43 + v118))
              break;
            v13 = *(v119 - 2);
            --v118;
            if (v117 >= v13)
            {
              v41[v118] = v117;
              goto LABEL_188;
            }
          }
LABEL_190:
          __break(1u);
          goto LABEL_191;
        }
        if (!v82)
        {
          v83 = 8;
          v84 = v8;
          do
          {
            v85 = *v84;
            v84 = v41;
            v86 = *v41;
            if (v86 < v85)
            {
              v87 = v83;
              while (1)
              {
                *(unint64_t *)((char *)v8 + v87) = v85;
                v88 = v87 - 8;
                if (v87 == 8)
                  break;
                v85 = *(unint64_t *)((char *)v8 + v87 - 16);
                v87 -= 8;
                if (v86 >= v85)
                {
                  v89 = (unint64_t *)((char *)v8 + v88);
                  goto LABEL_135;
                }
              }
              v89 = v8;
LABEL_135:
              *v89 = v86;
            }
            v41 = v84 + 1;
            v83 += 8;
          }
          while (v84 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkedSpace::prepareForConservativeScan(void)::$_0 &,JSC::PreciseAllocation **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  int v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v40 = a1[1];
        goto LABEL_62;
      }
      if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v45 = *(a2 - 1);
        if (v45 >= v11)
          return 1;
        a1[1] = v45;
      }
      else
      {
        *a1 = v13;
      }
      *(a2 - 1) = v11;
      return 1;
    case 4:
      v24 = a1 + 1;
      v25 = a1[1];
      v26 = a1 + 2;
      v27 = a1[2];
      v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
          goto LABEL_40;
        *v24 = v27;
        *v26 = v25;
        v29 = a1;
        v30 = a1 + 1;
        v31 = v25;
        if (v27 >= v28)
          goto LABEL_41;
      }
      else
      {
        v29 = a1;
        v30 = a1 + 2;
        v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          v29 = a1 + 1;
          v30 = a1 + 2;
          v31 = v28;
          if (v27 >= v28)
          {
LABEL_40:
            v25 = v27;
LABEL_41:
            v41 = *(a2 - 1);
            if (v41 < v25)
            {
              *v26 = v41;
              *(a2 - 1) = v25;
              v42 = *v26;
              v43 = *v24;
              if (v42 < v43)
              {
                a1[1] = v42;
                a1[2] = v43;
                v44 = *a1;
                if (v42 < *a1)
                {
                  *a1 = v42;
                  a1[1] = v44;
                }
              }
            }
            return 1;
          }
        }
      }
      *v29 = v27;
      *v30 = v28;
      v25 = v31;
      goto LABEL_41;
    case 5:
      v14 = a1 + 1;
      v15 = a1[1];
      v17 = a1 + 2;
      v16 = a1[2];
      v18 = *a1;
      if (v15 >= *a1)
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 1;
          *v14 = v16;
          *v17 = v15;
          v21 = v16;
          v22 = v18;
          v23 = v15;
          if (v16 >= v18)
          {
            v21 = v18;
            v18 = v16;
            v16 = v15;
            goto LABEL_53;
          }
          goto LABEL_49;
        }
        v21 = *a1;
        v18 = a1[1];
      }
      else
      {
        if (v16 < v15)
        {
          v19 = a1;
          v20 = a1 + 2;
          v21 = a1[2];
          v22 = a1[1];
          v23 = *a1;
LABEL_49:
          *v19 = v16;
          *v20 = v18;
          v18 = v22;
          v16 = v23;
          goto LABEL_53;
        }
        v19 = a1 + 1;
        v20 = a1 + 2;
        *a1 = v15;
        a1[1] = v18;
        v21 = v15;
        v22 = v16;
        v23 = v18;
        if (v16 < v18)
          goto LABEL_49;
        v21 = v15;
      }
LABEL_53:
      v46 = a1[3];
      if (v46 >= v16)
      {
        v16 = a1[3];
      }
      else
      {
        a1[2] = v46;
        a1[3] = v16;
        if (v46 < v18)
        {
          *v14 = v46;
          *v17 = v18;
          if (v46 < v21)
          {
            *a1 = v46;
            a1[1] = v21;
          }
        }
      }
      v47 = *(a2 - 1);
      if (v47 < v16)
      {
        a1[3] = v47;
        *(a2 - 1) = v16;
        v48 = a1[2];
        v40 = a1[3];
        if (v40 < v48)
        {
          a1[2] = v40;
          a1[3] = v48;
          v49 = a1[1];
          if (v40 < v49)
          {
            a1[1] = v40;
            a1[2] = v49;
LABEL_62:
            v50 = *a1;
            if (v40 < *a1)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_21;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_20;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_21;
LABEL_20:
      *v9 = v5;
      *v10 = v8;
LABEL_21:
      v32 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v33 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v32;
        v36 = *v6;
        if (*v32 < v36)
        {
          v37 = i;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v37) = v36;
            v38 = v37 - 8;
            if (v37 == 8)
              break;
            v36 = *(unint64_t *)((char *)a1 + v37 - 16);
            v37 -= 8;
            if (v35 >= v36)
            {
              v39 = (unint64_t *)((char *)a1 + v38);
              goto LABEL_29;
            }
          }
          v39 = a1;
LABEL_29:
          *v39 = v35;
          if (++v33 == 8)
            break;
        }
        v6 = v32++;
        if (v32 == a2)
          return 1;
      }
      return v32 + 1 == a2;
  }
}

uint64_t *WTF::HashTable<JSC::MarkedBlock *,JSC::MarkedBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::MarkedBlock *,JSC::MarkedBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = v14 & ((unint64_t)*a2 >> 14);
  v17 = (uint64_t *)(v12 + 8 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == v15)
      {
        if ((v13 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v12 - 4);
        v28 = 0;
        v27 = v12 + 8 * v29;
        goto LABEL_18;
      }
      if (v18 == -1)
        v19 = v17;
      v16 = (v16 + v20) & v14;
      v17 = (uint64_t *)(v12 + 8 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *v19 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v17 = v19;
    }
  }
  *v17 = v15;
  v21 = *v10;
  if (*v10)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v10;
  if (*v10)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_17;
LABEL_20:
    result = (uint64_t *)WTF::HashTable<JSC::MarkedBlock *,JSC::MarkedBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>>::expand(v10, (unint64_t)v17, a3, a4, a5, a6, a7, a8);
    v17 = result;
    v23 = *v10;
    if (*v10)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
    goto LABEL_17;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_20;
LABEL_17:
  v27 = v23 + 8 * v26;
  v28 = 1;
LABEL_18:
  *(_QWORD *)a9 = v17;
  *(_QWORD *)(a9 + 8) = v27;
  *(_BYTE *)(a9 + 16) = v28;
  return result;
}

unint64_t *WTF::HashTable<JSC::MarkedBlock *,JSC::MarkedBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;

  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
    if (v11)
    {
      v13 = v11 << (6 * v12 >= (2 * v11));
      goto LABEL_4;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 8;
LABEL_4:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (unint64_t *)(v10 + 8 * v22);
      v25 = *v24;
      if (*v24 + 1 >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = v27 & (v25 >> 14);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v26 + 8 * v28);
          v28 = (v28 + v29++) & v27;
        }
        while (v31);
        v32 = (unint64_t *)(v26 + 8 * v30);
        *v32 = v25;
        if (v24 == (unint64_t *)a2)
          v23 = v32;
      }
      ++v22;
    }
    while (v22 != v11);
  }
  else
  {
    v23 = 0;
  }
  if (v10)
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,false>(char *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  double v27;
  double v28;
  double v29;
  char *v31;
  char *j;
  uint64_t v33;
  int v34;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char v49;
  char *v50;
  char *v51;
  uint64_t v52;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v59;
  int v60;
  double v62;
  double v63;
  double v64;
  double v65;
  char *v67;
  BOOL v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  double v82;
  double v83;
  double v84;
  double v85;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v97;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v104;
  int v105;
  double v107;
  double v108;
  double v109;
  double v110;
  char *v112;
  uint64_t v113;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v120;
  uint64_t v121;
  char *v123;
  BOOL v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  double v134;
  double v135;
  double v136;
  double v137;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  double v146;
  double v147;
  double v148;
  double v149;
  int64_t v151;
  int64_t v152;
  int64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  BOOL v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  BOOL v170;
  double v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  BOOL v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  int v189;
  int v190;
  char *v192;
  double v193;
  double v194;
  double v195;
  double v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  double v210;
  double v211;
  double v212;
  double v213;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  double v226;
  double v227;
  double v228;
  double v229;
  uint64_t v231;
  char *v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  double v238;
  double v239;
  double v240;
  double v241;
  BOOL v243;
  double v244;
  double v245;
  double v246;
  double v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  double v256;
  double v257;
  double v258;
  double v259;
  uint64_t v261;
  uint64_t v262;
  int v263;
  double v265;
  double v266;
  double v267;
  double v268;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  uint64_t v274;
  int64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v280;

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = *(unsigned __int8 *)(*a5 + 36);
  v15 = *(unsigned __int8 *)(*a4 + 36);
  if ((v14 == 2) == (v15 == 2))
  {
    v17 = (double)*(unint64_t *)(v12 + 24);
    v18 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v12 + 16))(*a5, *(_QWORD *)(a6 + 8)) + v17;
    v19 = (double)*(unint64_t *)(v13 + 24);
    v20 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *(_QWORD *)(a6 + 8)) + v19;
    if (v18 == v20)
    {
      if (*(unsigned __int8 *)(v12 + 36) <= *(unsigned __int8 *)(v13 + 36))
        return;
    }
    else if (v18 <= v20)
    {
      return;
    }
  }
  else if (**(_BYTE **)a6)
  {
    if (v14 != 2 || v15 == 2)
      return;
  }
  else if (v15 != 2 || v14 == 2)
  {
    return;
  }
  v22 = *a4;
  *a4 = *a5;
  *a5 = v22;
  v23 = *a4;
  v24 = *a3;
  v25 = *(unsigned __int8 *)(*a4 + 36);
  v26 = *(unsigned __int8 *)(*a3 + 36);
  if ((v25 == 2) == (v26 == 2))
  {
    v28 = (double)*(unint64_t *)(v23 + 24);
    v29 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v23 + 16))(*a4, *(_QWORD *)(a6 + 8)) + v28;
    v30 = (double)*(unint64_t *)(v24 + 24);
    v31 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, *(_QWORD *)(a6 + 8)) + v30;
    if (v29 == v31)
    {
      if (*(unsigned __int8 *)(v23 + 36) <= *(unsigned __int8 *)(v24 + 36))
        return;
    }
    else if (v29 <= v31)
    {
      return;
    }
  }
  else if (**(_BYTE **)a6)
  {
    if (v25 != 2 || v26 == 2)
      return;
  }
  else if (v26 != 2 || v25 == 2)
  {
    return;
  }
  v33 = *a3;
  *a3 = *a4;
  *a4 = v33;
  v34 = *a3;
  v35 = *a2;
  v36 = *(unsigned __int8 *)(*a3 + 36);
  v37 = *(unsigned __int8 *)(*a2 + 36);
  if ((v36 == 2) == (v37 == 2))
  {
    v38 = (double)*(unint64_t *)(v34 + 24);
    v39 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v34 + 16))(*a3, *(_QWORD *)(a6 + 8)) + v38;
    v40 = (double)*(unint64_t *)(v35 + 24);
    v41 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, *(_QWORD *)(a6 + 8)) + v40;
    if (v39 == v41)
    {
      if (*(unsigned __int8 *)(v34 + 36) <= *(unsigned __int8 *)(v35 + 36))
        return;
    }
    else if (v39 <= v41)
    {
      return;
    }
    goto LABEL_49;
  }
  if (**(_BYTE **)a6)
  {
    if (v36 != 2 || v37 == 2)
      return;
LABEL_49:
    v42 = *a2;
    *a2 = *a3;
    *a3 = v42;
    v43 = *a2;
    v44 = *a1;
    v45 = *(unsigned __int8 *)(*a2 + 36);
    v46 = *(unsigned __int8 *)(*a1 + 36);
    if ((v45 == 2) == (v46 == 2))
    {
      v47 = (double)*(unint64_t *)(v43 + 24);
      v48 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v43 + 16))(*a2, *(_QWORD *)(a6 + 8)) + v47;
      v49 = (double)*(unint64_t *)(v44 + 24);
      v50 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 16))(v44, *(_QWORD *)(a6 + 8)) + v49;
      if (v48 == v50)
      {
        if (*(unsigned __int8 *)(v43 + 36) <= *(unsigned __int8 *)(v44 + 36))
          return;
      }
      else if (v48 <= v50)
      {
        return;
      }
    }
    else if (**(_BYTE **)a6)
    {
      if (v45 != 2 || v46 == 2)
        return;
    }
    else if (v46 != 2 || v45 == 2)
    {
      return;
    }
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    return;
  }
  if (v37 == 2 && v36 != 2)
    goto LABEL_49;
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;

  v6 = a2;
  v7 = a1;
  v8 = *a2;
  v9 = *a1;
  v10 = *(unsigned __int8 *)(*a2 + 36);
  v11 = *(unsigned __int8 *)(*a1 + 36);
  if ((v10 == 2) == (v11 == 2))
  {
    v18 = (double)*(unint64_t *)(v8 + 24);
    v19 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, *(_QWORD *)(a4 + 8)) + v18;
    v20 = (double)*(unint64_t *)(v9 + 24);
    v21 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, *(_QWORD *)(a4 + 8)) + v20;
    if (v19 == v21)
    {
      if (*(unsigned __int8 *)(v8 + 36) > *(unsigned __int8 *)(v9 + 36))
        goto LABEL_7;
    }
    else if (v19 > v21)
    {
      goto LABEL_7;
    }
  }
  else if (**(_BYTE **)a4)
  {
    if (v10 == 2 && v11 != 2)
      goto LABEL_7;
  }
  else if (v11 == 2 && v10 != 2)
  {
LABEL_7:
    v13 = *a3;
    v14 = *v6;
    v15 = *(unsigned __int8 *)(*a3 + 36);
    v16 = *(unsigned __int8 *)(*v6 + 36);
    if ((v15 == 2) != (v16 == 2))
    {
      if (**(_BYTE **)a4)
      {
        if (v15 == 2 && v16 != 2)
          goto LABEL_13;
      }
      else if (v16 == 2 && v15 != 2)
      {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
    v27 = (double)*(unint64_t *)(v13 + 24);
    v28 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v13 + 16))(*a3, *(_QWORD *)(a4 + 8)) + v27;
    v29 = (double)*(unint64_t *)(v14 + 24);
    v30 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, *(_QWORD *)(a4 + 8)) + v29;
    if (v28 == v30)
    {
      if (*(unsigned __int8 *)(v13 + 36) <= *(unsigned __int8 *)(v14 + 36))
        goto LABEL_26;
    }
    else if (v28 <= v30)
    {
LABEL_26:
      v31 = *v7;
      *v7 = *v6;
      *v6 = v31;
      v32 = *a3;
      v33 = *(unsigned __int8 *)(*a3 + 36);
      v34 = *(unsigned __int8 *)(v31 + 36);
      if ((v33 == 2) != (v34 == 2))
      {
        if (**(_BYTE **)a4)
        {
          if (v33 != 2)
            return;
          v7 = v6;
          v6 = a3;
LABEL_61:
          if (v34 == 2)
            return;
          goto LABEL_72;
        }
        if (v34 != 2)
          return;
        v7 = v6;
        v6 = a3;
        goto LABEL_71;
      }
      v40 = (double)*(unint64_t *)(v32 + 24);
      v41 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v32 + 16))(*a3, *(_QWORD *)(a4 + 8)) + v40;
      v42 = (double)*(unint64_t *)(v31 + 24);
      v43 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, *(_QWORD *)(a4 + 8)) + v42;
      v44 = v41 <= v43;
      if (v41 != v43)
      {
        v7 = v6;
        v6 = a3;
        goto LABEL_64;
      }
      v54 = *(unsigned __int8 *)(v32 + 36);
      v55 = *(unsigned __int8 *)(v31 + 36);
      v7 = v6;
      v6 = a3;
      goto LABEL_75;
    }
LABEL_13:
    v6 = a3;
LABEL_72:
    v56 = *v7;
    *v7 = *v6;
    *v6 = v56;
    return;
  }
  v22 = *a3;
  v23 = *v6;
  v24 = *(unsigned __int8 *)(*a3 + 36);
  v25 = *(unsigned __int8 *)(*v6 + 36);
  if ((v24 == 2) == (v25 == 2))
  {
    v35 = (double)*(unint64_t *)(v22 + 24);
    v36 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v22 + 16))(*a3, *(_QWORD *)(a4 + 8)) + v35;
    v37 = (double)*(unint64_t *)(v23 + 24);
    v38 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, *(_QWORD *)(a4 + 8)) + v37;
    if (v36 == v38)
    {
      if (*(unsigned __int8 *)(v22 + 36) <= *(unsigned __int8 *)(v23 + 36))
        return;
    }
    else if (v36 <= v38)
    {
      return;
    }
    goto LABEL_58;
  }
  if (**(_BYTE **)a4)
  {
    if (v24 == 2 && v25 != 2)
    {
LABEL_58:
      v47 = *v6;
      *v6 = *a3;
      *a3 = v47;
      v48 = *v6;
      v49 = *v7;
      v33 = *(unsigned __int8 *)(*v6 + 36);
      v34 = *(unsigned __int8 *)(*v7 + 36);
      if ((v33 == 2) != (v34 == 2))
      {
        if (**(_BYTE **)a4)
        {
          if (v33 != 2)
            return;
          goto LABEL_61;
        }
        if (v34 != 2)
          return;
LABEL_71:
        if (v33 == 2)
          return;
        goto LABEL_72;
      }
      v50 = (double)*(unint64_t *)(v48 + 24);
      v51 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v48 + 16))(*v6, *(_QWORD *)(a4 + 8)) + v50;
      v52 = (double)*(unint64_t *)(v49 + 24);
      v53 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, *(_QWORD *)(a4 + 8)) + v52;
      v44 = v51 <= v53;
      if (v51 != v53)
      {
LABEL_64:
        if (v44)
          return;
        goto LABEL_72;
      }
      v54 = *(unsigned __int8 *)(v48 + 36);
      v55 = *(unsigned __int8 *)(v49 + 36);
LABEL_75:
      if (v54 <= v55)
        return;
      goto LABEL_72;
    }
  }
  else if (v25 == 2 && v24 != 2)
  {
    goto LABEL_58;
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v44;
  _QWORD *v45;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(unsigned __int8 *)(v8 + 36);
      v11 = *(unsigned __int8 *)(*a1 + 36);
      if ((v10 == 2) == (v11 == 2))
      {
        v39 = (double)*(unint64_t *)(v8 + 24);
        v40 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v8 + 16))(*(a2 - 1), *(_QWORD *)(a3 + 8)) + v39;
        v41 = (double)*(unint64_t *)(v9 + 24);
        v42 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, *(_QWORD *)(a3 + 8)) + v41;
        if (v40 == v42)
        {
          if (*(unsigned __int8 *)(v8 + 36) <= *(unsigned __int8 *)(v9 + 36))
            return 1;
        }
        else if (v40 <= v42)
        {
          return 1;
        }
        goto LABEL_71;
      }
      if (**(_BYTE **)a3)
      {
        if (v10 == 2 && v11 != 2)
        {
LABEL_71:
          v44 = *a1;
          *a1 = *(v4 - 1);
          *(v4 - 1) = v44;
          return 1;
        }
      }
      else if (v11 == 2 && v10 != 2)
      {
        goto LABEL_71;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, a1 + 1, a1 + 2, a3);
      v14 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v15 = 0;
      v16 = 0;
      v45 = v4;
      break;
  }
LABEL_12:
  v17 = *v14;
  v18 = *v13;
  v19 = *(unsigned __int8 *)(*v14 + 36);
  v20 = *(unsigned __int8 *)(*v13 + 36);
  if ((v19 == 2) == (v20 == 2))
  {
    v22 = (double)*(unint64_t *)(v17 + 24);
    v23 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v17 + 16))(*v14, *(_QWORD *)(a3 + 8)) + v22;
    v24 = (double)*(unint64_t *)(v18 + 24);
    v25 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, *(_QWORD *)(a3 + 8)) + v24;
    if (v23 == v25)
    {
      if (*(unsigned __int8 *)(v17 + 36) <= *(unsigned __int8 *)(v18 + 36))
        goto LABEL_55;
    }
    else if (v23 <= v25)
    {
      goto LABEL_55;
    }
  }
  else if (**(_BYTE **)a3)
  {
    if (v19 != 2 || v20 == 2)
      goto LABEL_55;
  }
  else if (v20 != 2 || v19 == 2)
  {
    goto LABEL_55;
  }
  v27 = *v14;
  *v14 = *v13;
  v28 = a1;
  if (v13 == a1)
    goto LABEL_54;
  v29 = v15;
  while (1)
  {
    v30 = *(_QWORD *)((char *)a1 + v29 + 8);
    v31 = *(unsigned __int8 *)(v27 + 36);
    v32 = *(unsigned __int8 *)(v30 + 36);
    if ((v31 == 2) == (v32 == 2))
    {
      v34 = (double)*(unint64_t *)(v27 + 24);
      v35 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, *(_QWORD *)(a3 + 8)) + v34;
      v36 = (double)*(unint64_t *)(v30 + 24);
      v37 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, *(_QWORD *)(a3 + 8)) + v36;
      if (v35 == v37)
      {
        if (*(unsigned __int8 *)(v27 + 36) <= *(unsigned __int8 *)(v30 + 36))
          goto LABEL_52;
      }
      else if (v35 <= v37)
      {
        v28 = (_QWORD *)((char *)a1 + v29 + 16);
        goto LABEL_53;
      }
    }
    else if (**(_BYTE **)a3)
    {
      if (v31 != 2 || v32 == 2)
        goto LABEL_52;
    }
    else if (v32 != 2 || v31 == 2)
    {
LABEL_52:
      v28 = v13;
LABEL_53:
      v4 = v45;
LABEL_54:
      *v28 = v27;
      if (++v16 == 8)
        return v14 + 1 == v4;
LABEL_55:
      v13 = v14;
      v15 += 8;
      if (++v14 == v4)
        return 1;
      goto LABEL_12;
    }
    --v13;
    *(_QWORD *)((char *)a1 + v29 + 16) = *(_QWORD *)((char *)a1 + v29 + 8);
    v29 -= 8;
    if (v29 == -16)
    {
      v28 = a1;
      goto LABEL_53;
    }
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::MarkingConstraintSet::executeConvergenceImpl(JSC::SlotVisitor &)::$_0 &,JSC::MarkingConstraint **>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *(unsigned __int8 *)(*a4 + 36);
  v13 = *(unsigned __int8 *)(*a3 + 36);
  if ((v12 == 2) == (v13 == 2))
  {
    v15 = (double)*(unint64_t *)(v10 + 24);
    v16 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v10 + 16))(*a4, *(_QWORD *)(a5 + 8)) + v15;
    v17 = (double)*(unint64_t *)(v11 + 24);
    v18 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *(_QWORD *)(a5 + 8)) + v17;
    if (v16 == v18)
    {
      if (*(unsigned __int8 *)(v10 + 36) <= *(unsigned __int8 *)(v11 + 36))
        return;
    }
    else if (v16 <= v18)
    {
      return;
    }
  }
  else if (**(_BYTE **)a5)
  {
    if (v12 != 2 || v13 == 2)
      return;
  }
  else if (v13 != 2 || v12 == 2)
  {
    return;
  }
  v20 = *a3;
  *a3 = *a4;
  *a4 = v20;
  v21 = *a3;
  v22 = *a2;
  v23 = *(unsigned __int8 *)(*a3 + 36);
  v24 = *(unsigned __int8 *)(*a2 + 36);
  if ((v23 == 2) == (v24 == 2))
  {
    v26 = (double)*(unint64_t *)(v21 + 24);
    v27 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v21 + 16))(*a3, *(_QWORD *)(a5 + 8)) + v26;
    v28 = (double)*(unint64_t *)(v22 + 24);
    v29 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, *(_QWORD *)(a5 + 8)) + v28;
    if (v27 == v29)
    {
      if (*(unsigned __int8 *)(v21 + 36) <= *(unsigned __int8 *)(v22 + 36))
        return;
    }
    else if (v27 <= v29)
    {
      return;
    }
  }
  else if (**(_BYTE **)a5)
  {
    if (v23 != 2 || v24 == 2)
      return;
  }
  else if (v24 != 2 || v23 == 2)
  {
    return;
  }
  v31 = *a2;
  *a2 = *a3;
  *a3 = v31;
  v32 = *a2;
  v33 = *a1;
  v34 = *(unsigned __int8 *)(*a2 + 36);
  v35 = *(unsigned __int8 *)(*a1 + 36);
  if ((v34 == 2) == (v35 == 2))
  {
    v36 = (double)*(unint64_t *)(v32 + 24);
    v37 = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)v32 + 16))(*a2, *(_QWORD *)(a5 + 8)) + v36;
    v38 = (double)*(unint64_t *)(v33 + 24);
    v39 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, *(_QWORD *)(a5 + 8)) + v38;
    if (v37 == v39)
    {
      if (*(unsigned __int8 *)(v32 + 36) <= *(unsigned __int8 *)(v33 + 36))
        return;
    }
    else if (v37 <= v39)
    {
      return;
    }
    goto LABEL_49;
  }
  if (**(_BYTE **)a5)
  {
    if (v34 != 2 || v35 == 2)
      return;
LABEL_49:
    v40 = *a1;
    *a1 = *a2;
    *a2 = v40;
    return;
  }
  if (v35 == 2 && v34 != 2)
    goto LABEL_49;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::MarkedSpace::initializeSizeClassForStepSize(void)::$_0 &&>>()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  WTF *v18;
  int v19;
  unsigned int v20;

  v7 = v18;
  v8 = 0;
  if (v20)
  {
    v9 = v18;
    v10 = (WTF *)((char *)v18 + 8 * v20);
    while (1)
    {
      v11 = *(_QWORD *)v9;
      if (HIDWORD(*(_QWORD *)v9))
      {
        __break(0xC471u);
        goto LABEL_17;
      }
      v12 = (unint64_t)(v11 + 15) >> 4;
      if (v8 <= v12)
        break;
LABEL_9:
      v8 = v12 + 1;
      v9 = (WTF *)((char *)v9 + 8);
      if (v9 == v10)
        goto LABEL_10;
    }
    v13 = &JSC::MarkedSpace::s_sizeClassForSizeStep[v8];
    v14 = v12 - v8 + 1;
    v15 = 503 - v8;
    if (v8 > 0x1F7)
      v15 = 0;
    while (v15)
    {
      *v13++ = v11;
      --v15;
      if (!--v14)
        goto LABEL_9;
    }
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_10:
    if (v7)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree((unint64_t)v7, v0, v1, v2, v3, v4, v5, v6);
    }
    if (v8 <= 0x1F6)
    {
      v16 = v8;
      v17 = 16 * v8;
      do
      {
        JSC::MarkedSpace::s_sizeClassForSizeStep[v16++] = v17;
        v17 += 16;
      }
      while (v16 != 503);
    }
  }
}

void JSC::`anonymous namespace'::sizeClasses(JSC::_anonymous_namespace_ *this)
{
  unsigned int i;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unint64_t *v34;
  _QWORD v35[5];
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  JSC::_anonymous_namespace_ *v44;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if ((_BYTE)qword_1ECF4C414)
  {
    WTF::dataLog<char [13],unsigned long,char [2]>();
    v35[0] = 304;
    WTF::dataLog<char [14],unsigned long,char [2]>(v35);
  }
  v44 = this;
  if ((_BYTE)qword_1ECF4C414)
  {
    v35[0] = 16080;
    WTF::dataLog<char [17],unsigned long,char [2]>("    Marked block payload size: ", v35, "\n");
  }
  for (i = 0; ; ++i)
  {
    v43 = pow(*(long double *)&qword_1ECF4C408, (double)i) * 80.0;
    v3 = (unint64_t)v43;
    if ((_BYTE)qword_1ECF4C414)
    {
      WTF::dataLog<char [34],double,char [2]>(&v43);
      v42 = v3;
      if ((_BYTE)qword_1ECF4C414)
        WTF::dataLog<char [31],unsigned long,char [2]>(&v42);
    }
    if (v3 <= 0x4F)
      goto LABEL_69;
    if (v3 >= 0x1F61)
      goto LABEL_32;
    v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    v41 = v4;
    if ((_BYTE)qword_1ECF4C414)
    {
      WTF::dataLog<char [17],unsigned long,char [2]>("    Size class: ", &v41, "\n");
      v5 = qword_1ECF4C414;
      v4 = v41;
      v6 = 0x3ED0 / v41;
      v7 = (0x3ED0 / (0x3ED0 / v41)) & 0x3FF0;
      v40 = v7;
      if ((_BYTE)qword_1ECF4C414)
      {
        WTF::dataLog<char [17],unsigned long,char [2]>("    Possibly better size class: ", &v40, "\n");
        v7 = v40;
        v4 = v41;
        v5 = qword_1ECF4C414;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0x3ED0u / (unsigned __int16)v4;
      v7 = (0x3ED0 / v6) & 0x3FF0;
      v40 = v7;
    }
    v8 = 16080 - v6 * v4;
    v9 = (v7 - v4) * v6;
    v38 = v9;
    v39 = v8;
    if (v5)
    {
      WTF::dataLog<char [23],unsigned long,char [16],unsigned long,char [2]>(&v39, &v38);
      v34 = &v40;
      if (v9 > v8)
        v34 = &v41;
      v10 = *v34;
      v37 = *v34;
      if ((_BYTE)qword_1ECF4C414)
        WTF::dataLog<char [26],unsigned long,char [2]>(&v37);
    }
    else
    {
      v10 = v9 <= v8 ? v7 : v4;
    }
    v11 = *((unsigned int *)this + 3);
    if (!(_DWORD)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1985F6EB8);
    }
    if (v10 != *(_QWORD *)(*(_QWORD *)this + 8 * v11 - 8))
      break;
LABEL_30:
    ;
  }
  if (v10 <= 0x1F60 && v10 <= dword_1ECF4C410)
  {
    v13 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    v35[0] = v13;
    if ((_BYTE)qword_1ECF4C414)
    {
      WTF::dataLog<char [36],unsigned long,char [2]>(v35);
      v13 = v35[0];
    }
    if ((v13 & 0xF) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985F6E00);
    }
    v14 = *((unsigned int *)this + 3);
    if (v13 != 16 && (_DWORD)v14 == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985F6E20);
    }
    if ((_DWORD)v14 == *((_DWORD *)this + 2))
    {
      WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>((uint64_t)this, (unint64_t)v35);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v14) = v13;
      *((_DWORD *)this + 3) = v14 + 1;
    }
    goto LABEL_30;
  }
LABEL_32:
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v22 = *(_QWORD *)this;
  v23 = *((unsigned int *)this + 3);
  if ((_DWORD)v23)
  {
    v24 = (uint64_t *)(v22 + 8 * v23);
    v25 = 8 * v23 - 16;
    v26 = *(uint64_t **)this;
    while (1)
    {
      v27 = v26++;
      if (v26 == v24)
        break;
      v28 = v25;
      v29 = *v27;
      v25 -= 8;
      if (*v27 == v27[1])
      {
        if (v27 + 2 != v24)
        {
          v30 = 1;
          do
          {
            v31 = v29;
            v29 = v26[v30];
            if (v31 != v29)
            {
              v27[1] = v29;
              ++v27;
            }
            ++v30;
            v28 -= 8;
          }
          while (v28);
        }
        v24 = v27 + 1;
        break;
      }
    }
  }
  else
  {
    v24 = *(uint64_t **)this;
  }
  WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this, ((uint64_t)v24 - v22) >> 3, v16, v17, v18, v19, v20, v21);
  if ((_BYTE)qword_1ECF4C414)
  {
    v35[0] = this;
    v35[1] = ", ";
    v35[2] = 3;
    v35[3] = "";
    v35[4] = 1;
    v36 = 0;
    WTF::dataLog<char [39],WTF::ListDump<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>((uint64_t)v35);
  }
  v32 = *((_DWORD *)this + 3);
  if (!v32)
    goto LABEL_69;
  v33 = *(_QWORD **)this;
  if (**(_QWORD **)this != 16)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1985F6E40);
  }
  if (v32 == 1)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x1985F6D3CLL);
  }
  if (v33[1] != 32)
    goto LABEL_67;
  if (v32 == 2)
    goto LABEL_69;
  if (v33[2] != 48)
    goto LABEL_67;
  if (v32 == 3)
    goto LABEL_69;
  if (v33[3] != 64)
    goto LABEL_67;
  if (v32 == 4)
    goto LABEL_69;
  if (v33[4] != 80)
    goto LABEL_67;
}

uint64_t WTF::dataLog<char [13],unsigned long,char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Block size: ");
  WTF::PrintStream::printf(v2, "%lu", 0x4000);
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [14],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Header size: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::`anonymous namespace'::sizeClasses(void)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v7;

  v3 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = v3;
  if ((_BYTE)qword_1ECF4C414)
    WTF::dataLog<char [36],unsigned long,char [2]>(&v7);
  result = *a1;
  v5 = *(unsigned int *)(*a1 + 12);
  if (v3 != 16 && (_DWORD)v5 == 0)
  {
    result = 53;
    __break(0xC471u);
  }
  else if ((_DWORD)v5 == *(_DWORD *)(result + 8))
  {
    return WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(result, (unint64_t)&v7);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v5) = v3;
    *(_DWORD *)(result + 12) = v5 + 1;
  }
  return result;
}

void WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      *(_DWORD *)(a1 + 12) = a2;
    v9 = *(_QWORD *)a1;
    if (a2)
    {
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = WTF::fastRealloc(v9, 8 * a2, a3, a4, a5, a6, a7, a8);
    }
    else if (v9)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v9, 0, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::dataLog<char [36],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Adding JSC MarkedSpace size class: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(const void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<char [34],double,char [2]>(double *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Next size class as a double: ");
  WTF::PrintStream::printf(v4, "%lf", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [31],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Next size class as bytes: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [23],unsigned long,char [16],unsigned long,char [2]>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    Original wastage: ");
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", ", new wastage: ");
  WTF::PrintStream::printf(v6, "%lu", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [26],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Choosing size class: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [39],WTF::ListDump<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  WTF::PrintStream *v3;
  uint64_t *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v22 = WTF::s_file;
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(void))(*(_QWORD *)WTF::s_file + 32))();
  WTF::PrintStream::printf(v3, "%s", "JSC Heap MarkedSpace size class dump: ");
  if (*(_DWORD *)(*(_QWORD *)a1 + 12))
  {
    v4 = **(uint64_t ***)a1;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 32))(v3);
      v6 = *(unsigned __int8 *)(a1 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v11 = *(char **)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        v12 = (WTF::PrintStream *)v9(v7);
        if (v11)
        {
          v14 = v10 - 1;
          if (!v10)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v11, v14, (uint64_t)&v25, v13);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v25, &str_25, 0);
          v26 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v25);
        if (v26 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v16 = *(char **)(a1 + 24);
        v15 = *(_QWORD *)(a1 + 32);
        v17 = (WTF::PrintStream *)v9(v7);
        if (v16)
        {
          v19 = v15 - 1;
          if (!v15)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v16, v19, (uint64_t)&v25, v18);
        }
        else
        {
          WTF::CString::CString((uint64_t *)&v25, &str_25, 0);
          v26 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v25);
        if (v26 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *(_BYTE *)(a1 + 40) = 1;
      }
      v20 = *v4++;
      WTF::PrintStream::printf(v5, "%lu", v20);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v3 + 40))(v3);
    }
    while (v4 != (uint64_t *)(**(_QWORD **)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 + 12)));
  }
  WTF::PrintStream::printf(v3, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
}

uint64_t WTF::Vector<JSC::VisitCounter,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x1985F7BECLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 0x11)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void WTF::SharedTaskFunctor<void ()(JSC::SlotVisitor &),JSC::MarkingConstraintSolver::execute(JSC::MarkingConstraintSolver::SchedulerPreference,WTF::ScopedLambda<std::optional<unsigned int> ()(void)>)::$_0>::run(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkingConstraintSolver::runExecutionThread(*(_QWORD *)(a1 + 16), a2, **(unsigned int **)(a1 + 24), **(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a6, a7, a8);
}

uint64_t WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::drain(WTF::BitVector &)::$_0>::implFunction(uint64_t a1)
{
  unint64_t **v1;
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = *(unint64_t ***)(a1 + 16);
  v2 = (uint64_t *)v1[1];
  if (v2 == *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8))
    return 0;
  v4 = (unint64_t)v2 + 1;
  v5 = **v1;
  if ((v5 & 0x8000000000000000) != 0)
  {
    v7 = __clz(__rbit64(v5 >> v4)) + v4;
    if (v7 >= 0x3F)
      v7 = 63;
    goto LABEL_8;
  }
  v6 = 2 * v5;
  v7 = *(_QWORD *)(2 * v5);
  v8 = v7 + 63;
  v9 = v4 >> 6;
  if (v4 >> 6 < (v7 + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9 + 8);
    if (!v10 || (v11 = __clz(__rbit64(v10 >> v4)) + (v4 & 0x3F), v11 >= 0x40))
    {
      if (v9 + 1 == v8 >> 6)
        goto LABEL_8;
      v12 = v6 + 16;
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 8 * v9);
        if (v13)
        {
          v11 = __clz(__rbit64(v13));
          if (v11 <= 0x3F)
            break;
        }
        if ((v8 >> 6) - 1 == ++v9)
          goto LABEL_8;
      }
      ++v9;
    }
    v7 = v11 + (v9 << 6);
  }
LABEL_8:
  v1[1] = (unint64_t *)v7;
  return v2 | 0x100000000;
}

uint64_t WTF::ScopedLambdaFunctor<std::optional<unsigned int> ()(void),JSC::MarkingConstraintSolver::converge(WTF::Vector<JSC::MarkingConstraint *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>::implFunction(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v1 = a1[2];
  v2 = *(unsigned int *)(v1 + 740);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)(v1 + 728);
    v4 = &v3[2 * v2];
    while (*(_QWORD *)(*v3 + 72) == v3[1])
    {
      v3 += 2;
      if (v3 == v4)
        goto LABEL_5;
    }
    goto LABEL_7;
  }
LABEL_5:
  v5 = (uint64_t *)a1[3];
  v6 = a1[4];
  v7 = *v5;
  if (*v5 >= (unint64_t)*(unsigned int *)(v6 + 12))
  {
LABEL_7:
    v9 = 0;
    v10 = 0;
    v8 = 0;
    return v10 | v8 | v9;
  }
  *v5 = v7 + 1;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8 * v7) + 32);
  v8 = v9 & 0xFFFFFF00;
  v9 = v9;
  v10 = 0x100000000;
  return v10 | v8 | v9;
}

void WTF::Deque<JSC::MarkingConstraintSolver::TaskWithConstraint,32ul>::expandCapacity(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 *v24;
  __int128 v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  __int128 *v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  v9 = *((unsigned int *)a1 + 6);
  v10 = a1[2];
  v11 = v9 + (v9 >> 2);
  if (v11 <= 0xF)
    v11 = 15;
  if (v11 < 0x20)
  {
    v13 = a1 + 4;
    a1[2] = (uint64_t)(a1 + 4);
    v12 = 32;
    *((_DWORD *)a1 + 6) = 32;
  }
  else
  {
    if (v11 >= 0xFFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    v12 = v11 + 1;
    v13 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * (v11 + 1)));
    *((_DWORD *)a1 + 6) = v12;
    a1[2] = (uint64_t)v13;
  }
  v14 = *a1;
  v15 = a1[1];
  v16 = (__int128 *)(v10 + 16 * v15);
  if (*a1 > v15)
  {
    if (v15)
    {
      v24 = (__int128 *)v10;
      do
      {
        v25 = *v24;
        *(_QWORD *)v24 = 0;
        *v13 = v25;
        v26 = *(unsigned int **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        ++v13;
        ++v24;
      }
      while (v24 != v16);
      v12 = *((_DWORD *)a1 + 6);
      v14 = *a1;
      v13 = (_OWORD *)a1[2];
    }
    v30 = v14 - v9 + v12;
    if (v14 != v9)
    {
      v31 = (__int128 *)(v10 + 16 * v9);
      v32 = &v13[v30];
      v33 = (__int128 *)(v10 + 16 * v14);
      do
      {
        v34 = *v33;
        *(_QWORD *)v33 = 0;
        *v32 = v34;
        v35 = *(unsigned int **)v33;
        *(_QWORD *)v33 = 0;
        if (v35)
        {
          v36 = v35 + 2;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v35 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
          }
        }
        ++v32;
        ++v33;
      }
      while (v33 != v31);
    }
    *a1 = v30;
  }
  else if (*a1 != v15)
  {
    v17 = &v13[v14];
    v18 = (__int128 *)(v10 + 16 * v14);
    do
    {
      v19 = *v18;
      *(_QWORD *)v18 = 0;
      *v17 = v19;
      v20 = *(unsigned int **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
      }
      ++v17;
      ++v18;
    }
    while (v18 != v16);
  }
  if (a1 + 4 != (uint64_t *)v10 && v10)
  {
    if (a1[2] == v10)
    {
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

unsigned __int8 *JSC::PreciseAllocation::tryCreateForLowerTier(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  BOOL v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24), a2 + 136);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1985F8100);
  }
  v9 = (unsigned __int8 *)(v8 + 8);
  v10 = (v8 + 8) & 0xF;
  if (!v10)
    v9 = (unsigned __int8 *)v8;
  v11 = ((_BYTE)v9 + 48) & 0x3F;
  if (v11 >= 0x31)
    v12 = v9 + 16;
  else
    v12 = v9;
  if (byte_1ECF4C400)
    v13 = a2 >= 8;
  else
    v13 = 0;
  if (v13)
    memset_pattern16(v12, &memset_pattern_0, a2 & 0xFFFFFFFFFFFFFFF8);
  v14 = 8 * (v10 != 0);
  *((_DWORD *)v12 + 4) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 3) = a2;
  if (v11 >= 0x31)
    v14 = (8 * (v10 != 0)) | 0x10;
  v12[32] = v12[32] & 0x80 | (32 * ((v14 >> 3) & 3)) | 3;
  v12[33] = 0;
  *((_WORD *)v12 + 17) = *(_WORD *)(*(_QWORD *)(a3 + 16) + 8);
  v12[36] = -1;
  *((_QWORD *)v12 + 5) = a3;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_QWORD *)v12 + 12) = a1 - 192;
  atomic_store(0, v12 + 33);
  v12[36] = a4;
  return v12;
}

JSC::PreciseAllocation *JSC::PreciseAllocation::reuseForLowerTier(JSC::PreciseAllocation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v21;
  uint64_t v22;

  v9 = *((_QWORD *)this + 12);
  v10 = *((_QWORD *)this + 3);
  v11 = *((_QWORD *)this + 5);
  v12 = *((_BYTE *)this + 32);
  v13 = *((_BYTE *)this + 36);
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *(_QWORD *)this;
    *v14 = *(_QWORD *)this;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 7);
  if (v16)
  {
    v22 = *((_QWORD *)this + 6);
    *v16 = v22;
    *(_QWORD *)(v22 + 8) = v16;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  v18 = (_QWORD *)((char *)this + 80);
  v17 = *((_QWORD *)this + 10);
  if (v17)
  {
    do
    {
      v21 = *(_QWORD *)(v17 + 16);
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(v9 + 1072) -= 1024;
      v17 = v21;
    }
    while (v21);
  }
  *v18 = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = v10;
  v19 = *((_BYTE *)this + 32) & 0x80 | v12 & 0x7C;
  *((_BYTE *)this + 32) = v19 | 3;
  *((_BYTE *)this + 33) = 0;
  *((_WORD *)this + 17) = *(_WORD *)(*(_QWORD *)(v11 + 16) + 8);
  *((_BYTE *)this + 36) = -1;
  *((_QWORD *)this + 5) = v11;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = v9;
  atomic_store(0, (unsigned __int8 *)this + 33);
  *((_BYTE *)this + 36) = v13;
  *((_BYTE *)this + 32) = v19 | 1;
  return this;
}

void JSC::PreciseAllocation::lastChanceToFinalize(JSC::PreciseAllocation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::WeakSet *v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t j;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v9 = (JSC::PreciseAllocation *)((char *)this + 48);
  for (i = *((_QWORD *)this + 10); i; i = *(_QWORD *)(i + 16))
  {
    for (j = 0; j != 960; j += 24)
    {
      v18 = *(_QWORD *)(i + j + 56);
      if ((v18 & 2) == 0)
      {
        *(_QWORD *)(i + j + 56) = v18 & 0xFFFFFFFFFFFFFFFCLL | 2;
        if ((v18 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFCLL) + 24))(v18 & 0xFFFFFFFFFFFFFFFCLL, i + 48 + j, *(_QWORD *)(i + j + 64));
      }
    }
  }
  atomic_store(0, (unsigned __int8 *)this + 33);
  *((_BYTE *)this + 32) &= ~1u;
  JSC::WeakSet::sweep(v9, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((unsigned __int8 *)this + 32);
  if ((v11 & 2) != 0 && ((*((unsigned __int8 *)this + 33) | v11) & 1) == 0)
  {
    if (*((_BYTE *)this + 34) == 1)
      (*(void (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 5) + 16) + 24))(*(_QWORD *)(*((_QWORD *)this + 5) + 16), *((_QWORD *)this + 12), (char *)this + 112);
    v12 = *((unsigned __int8 *)this + 36);
    if ((_DWORD)v12 != 255)
    {
      v13 = *((_QWORD *)this + 5);
      v16 = *(_QWORD **)(v13 + 232);
      v14 = (_QWORD *)(v13 + 232);
      v15 = v16;
      if (v16 != v14)
      {
        v19 = 1 << v12;
        v20 = v12 >> 5;
        do
        {
          v21 = (char *)v15 + 4 * v20;
          v15 = (_QWORD *)*v15;
          v22 = (unsigned int *)(v21 + 16);
          while (1)
          {
            v23 = *v22;
            if ((*v22 & v19) == 0)
              break;
            v24 = __ldxr(v22);
            if (v24 == v23)
            {
              if (!__stxr(v23 & ~v19, v22))
                break;
            }
            else
            {
              __clrex();
            }
          }
        }
        while (v15 != v14);
      }
    }
    *((_BYTE *)this + 32) &= ~2u;
  }
}

void JSC::PreciseAllocation::sweep(JSC::PreciseAllocation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  JSC::WeakSet::sweep((JSC::PreciseAllocation *)((char *)this + 48), a2, a3, a4, a5, a6, a7, a8);
  v9 = *((unsigned __int8 *)this + 32);
  if ((v9 & 2) != 0 && ((*((unsigned __int8 *)this + 33) | v9) & 1) == 0)
  {
    if (*((_BYTE *)this + 34) == 1)
      (*(void (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(*((_QWORD *)this + 5) + 16) + 24))(*(_QWORD *)(*((_QWORD *)this + 5) + 16), *((_QWORD *)this + 12), (char *)this + 112);
    v10 = *((unsigned __int8 *)this + 36);
    if ((_DWORD)v10 != 255)
    {
      v11 = *((_QWORD *)this + 5);
      v14 = *(_QWORD **)(v11 + 232);
      v12 = (_QWORD *)(v11 + 232);
      v13 = v14;
      if (v14 != v12)
      {
        v15 = 1 << v10;
        v16 = v10 >> 5;
        do
        {
          v17 = (char *)v13 + 4 * v16;
          v13 = (_QWORD *)*v13;
          v18 = (unsigned int *)(v17 + 16);
          while (1)
          {
            v19 = *v18;
            if ((*v18 & v15) == 0)
              break;
            v20 = __ldxr(v18);
            if (v20 == v19)
            {
              if (!__stxr(v19 & ~v15, v18))
                break;
            }
            else
            {
              __clrex();
            }
          }
        }
        while (v13 != v12);
      }
    }
    *((_BYTE *)this + 32) &= ~2u;
  }
}

uint64_t JSC::PreciseAllocation::destroy(JSC::PreciseAllocation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v10 = *((unsigned __int8 *)this + 32);
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  if (v11)
  {
    v12 = *(_QWORD *)this;
    *v11 = *(_QWORD *)this;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v13 = (_QWORD *)*((_QWORD *)this + 7);
  if (v13)
  {
    v17 = *((_QWORD *)this + 6);
    *v13 = v17;
    *(_QWORD *)(v17 + 8) = v13;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  v15 = (_QWORD *)((char *)this + 80);
  v14 = *((_QWORD *)this + 10);
  if (v14)
  {
    v18 = *((_QWORD *)this + 12);
    do
    {
      v19 = *(_QWORD *)(v14 + 16);
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(v18 + 1072) -= 1024;
      v14 = v19;
    }
    while (v19);
  }
  *v15 = 0;
  *((_QWORD *)this + 11) = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, (char *)this - ((v10 >> 2) & 0x1F));
}

uint64_t JSC::SimpleMarkingConstraint::SimpleMarkingConstraint(uint64_t a1, _DWORD **a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a2;
  *a2 = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = off_1E3590DC0;
  if (v10)
    ++*v10;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 36) = a5;
  *(_BYTE *)(a1 + 37) = a6;
  *(_BYTE *)(a1 + 38) = a7;
  *(_BYTE *)(a1 + 39) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    else
      --*v10;
  }
  *(_QWORD *)a1 = off_1E3590E28;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 48) = v13;
  return a1;
}

{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a2;
  *a2 = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = off_1E3590DC0;
  if (v10)
    ++*v10;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 36) = a5;
  *(_BYTE *)(a1 + 37) = a6;
  *(_BYTE *)(a1 + 38) = a7;
  *(_BYTE *)(a1 + 39) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    else
      --*v10;
  }
  *(_QWORD *)a1 = off_1E3590E28;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 48) = v13;
  return a1;
}

void JSC::SimpleMarkingConstraint::~SimpleMarkingConstraint(JSC::SimpleMarkingConstraint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = off_1E3590DC0;
  v11 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v11;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v12;
  }
}

{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = off_1E3590DC0;
  v11 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v11;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v12;
  }
}

{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = off_1E3590DC0;
  v11 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v11;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v12;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::SimpleMarkingConstraint::executeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t JSC::SlotVisitor::SlotVisitor(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v5 = *a3;
  if (*a3)
    ++*v5;
  v6 = a2 + 760;
  *(_QWORD *)a1 = off_1E3591008;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v7 = 0;
  v7[1] = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)(a1 + 16);
  if (v8)
    v9 = *(_QWORD **)(a1 + 8);
  *v9 = v7;
  *(_QWORD *)(a1 + 8) = v7;
  *v7 = 0;
  v7[1] = v8;
  ++*(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v10 = 0;
  v10[1] = 0;
  v18 = *(_QWORD *)(a1 + 40);
  v19 = (_QWORD *)(a1 + 48);
  if (v18)
    v19 = *(_QWORD **)(a1 + 40);
  *v19 = v10;
  *(_QWORD *)(a1 + 40) = v10;
  *v10 = 0;
  v10[1] = v18;
  ++*(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  if (v5)
  {
    ++*v5;
    *(_QWORD *)(a1 + 96) = v5;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = v6;
    *(_DWORD *)(a1 + 128) = 0;
    if (*v5 == 1)
      WTF::fastFree((unint64_t)v5, v11, v12, v13, v14, v15, v16, v17);
    else
      --*v5;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = v6;
    *(_DWORD *)(a1 + 128) = 0;
  }
  *(_QWORD *)a1 = off_1E3590E68;
  *(_DWORD *)(a1 + 132) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 181) = 0;
  return a1;
}

void JSC::SlotVisitor::~SlotVisitor(JSC::SlotVisitor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD **v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD **v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (v9)
  {
    v10 = (_QWORD **)(v9 + 1);
    for (i = v9[1]; i; v9 = (_QWORD *)v15)
    {
      v15 = i;
      v16 = *v9;
      if (*v9)
      {
        *(_QWORD *)(v16 + 8) = v15;
        v17 = *v10;
      }
      else
      {
        *((_QWORD *)this + 1) = v15;
        v17 = (_QWORD *)v15;
      }
      if (!v17)
        v17 = (_QWORD *)((char *)this + 16);
      *v17 = v16;
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
      v10 = (_QWORD **)(v15 + 8);
      i = *(_QWORD *)(v15 + 8);
    }
    *(_OWORD *)((char *)this + 24) = xmmword_19914FB90;
  }
  v12 = (_QWORD *)*((_QWORD *)this + 5);
  if (v12)
  {
    v13 = (_QWORD **)(v12 + 1);
    for (j = v12[1]; j; v12 = (_QWORD *)v18)
    {
      v18 = j;
      v19 = *v12;
      if (*v12)
      {
        *(_QWORD *)(v19 + 8) = v18;
        v20 = *v13;
      }
      else
      {
        *((_QWORD *)this + 5) = v18;
        v20 = (_QWORD *)v18;
      }
      if (!v20)
        v20 = (_QWORD *)((char *)this + 48);
      *v20 = v19;
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      v13 = (_QWORD **)(v18 + 8);
      j = *(_QWORD *)(v18 + 8);
    }
    *(_OWORD *)((char *)this + 56) = xmmword_19914FB90;
  }
  JSC::AbstractSlotVisitor::~AbstractSlotVisitor(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::SlotVisitor::~SlotVisitor(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::AbstractSlotVisitor::~AbstractSlotVisitor(JSC::AbstractSlotVisitor *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  *(_QWORD *)this = off_1E3591008;
  v9 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *v10;
    v12 = (_QWORD *)v10[1];
    if (*v10)
    {
      *(_QWORD *)(v11 + 8) = v12;
      v12 = (_QWORD *)v10[1];
    }
    else
    {
      *((_QWORD *)this + 5) = v12;
    }
    if (!v12)
      v12 = (_QWORD *)((char *)this + 48);
    *v12 = v11;
  }
  WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  --*((_QWORD *)this + 8);
  v20 = (uint64_t *)*((_QWORD *)this + 1);
  if (v20)
  {
    v21 = *v20;
    v22 = (_QWORD *)v20[1];
    if (*v20)
    {
      *(_QWORD *)(v21 + 8) = v22;
      v22 = (_QWORD *)v20[1];
    }
    else
    {
      *((_QWORD *)this + 1) = v22;
    }
    if (!v22)
      v22 = (_QWORD *)((char *)this + 16);
    *v22 = v21;
  }
  WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  --*((_QWORD *)this + 4);
}

double JSC::SlotVisitor::append(JSC::SlotVisitor *this, const JSC::ConservativeRoots *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  double result;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  int v39;
  unint64_t v40;

  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
    return result;
  v10 = 0;
  v11 = *(_QWORD *)a2;
  while (1)
  {
    v12 = *(_QWORD *)(v11 + 8 * v10);
    if (v12)
    {
      if ((v12 & 8) == 0)
      {
        v13 = *((_DWORD *)this + 33);
        v14 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFC000);
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
        v15 = 1 << (v12 >> 4);
        v16 = &v14[((v12 >> 10) & 0xF) + 5];
        while (1)
        {
          v17 = *v16;
          if ((*v16 & v15) != 0)
            goto LABEL_18;
          v18 = __ldxr(v16);
          if (v18 == v17)
          {
            if (!__stxr(v17 | v15, v16))
            {
              v19 = *v14 + 8;
              goto LABEL_13;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      if ((*(_BYTE *)(v12 - 79) & 1) == 0)
        break;
    }
LABEL_18:
    if (++v10 == v8)
      return result;
  }
  v24 = (unsigned __int8 *)(v12 - 79);
  do
  {
    if (__ldaxr(v24))
    {
      __clrex();
      goto LABEL_18;
    }
  }
  while (__stlxr(1u, v24));
  v19 = v12 - 78;
LABEL_13:
  v20 = *(char *)(v19 + 1);
  if (v20 >= 2)
  {
    if (v20 == 2)
      *(_QWORD *)&result = JSC::SlotVisitor::noteLiveAuxiliaryCell((uint64_t)this, v12, a3, a4, a5, a6, a7, a8).u64[0];
    goto LABEL_18;
  }
  v40 = v12;
  v21 = *(_DWORD *)v12;
  v39 = v21;
  v38[0] = (uint64_t)this;
  v38[1] = (uint64_t)&v40;
  v38[2] = (uint64_t)&v39;
  if (v21)
  {
    if ((v21 & 1) != 0)
      goto LABEL_36;
    *(_BYTE *)(v12 + 7) = 2;
    if ((v12 & 8) != 0)
    {
      ++*((_QWORD *)this + 9);
      *((_QWORD *)this + 17) += *(_QWORD *)(v12 - 88);
      v22 = *((_QWORD *)this + 3);
      if (v22 == 510)
      {
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
        v22 = 0;
        *v27 = 0;
        v27[1] = 0;
        ++*((_QWORD *)this + 4);
        v28 = *((_QWORD *)this + 1);
        if (v28)
          v29 = (_QWORD *)*((_QWORD *)this + 1);
        else
          v29 = (_QWORD *)((char *)this + 16);
        *v29 = v27;
        *((_QWORD *)this + 1) = v27;
        *v27 = 0;
        v27[1] = v28;
      }
      v23 = *((_QWORD *)this + 1) + 8 * v22;
      *((_QWORD *)this + 3) = v22 + 1;
      *(_QWORD *)(v23 + 16) = v12;
    }
    else
    {
      JSC::SlotVisitor::appendToMarkStack<JSC::MarkedBlock>(this, (JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v12, a4, a5, a6, a7, a8);
    }
    goto LABEL_18;
  }
  JSC::SlotVisitor::appendJSCellOrAuxiliary(JSC::HeapCell *)::$_0::operator() const(JSC::JSCell *)::{lambda(char const*)#1}::operator()(v38, "GC scan found corrupt object: structureID is zero!\n");
LABEL_36:
  JSC::SlotVisitor::appendJSCellOrAuxiliary(JSC::HeapCell *)::$_0::operator() const(JSC::JSCell *)::{lambda(char const*)#1}::operator()(v38, "GC scan found object in bad state: structureID is nuked!\n");
  *(_QWORD *)&result = JSC::SlotVisitor::noteLiveAuxiliaryCell(v30, v31, v32, v33, v34, v35, v36, v37).u64[0];
  return result;
}

int64x2_t JSC::SlotVisitor::noteLiveAuxiliaryCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v10;
  unint64_t v11;
  int64x2_t result;

  if ((a2 & 8) != 0)
    v9 = (a2 - 112) | 1;
  else
    v9 = a2 & 0xFFFFFFFFFFFFC000;
  if ((v9 & 1) != 0)
  {
    ++*(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(v9 + 23);
  }
  else
  {
    v10 = (unsigned __int16)(*(_WORD *)(v9 + 28))++ + 1;
    if ((v10 & 0x10000) != 0)
      JSC::MarkedBlock::noteMarkedSlow((JSC::MarkedBlock *)v9, a2, a3, a4, a5, a6, a7, a8);
    ++*(_QWORD *)(a1 + 72);
    v11 = 16 * **(unsigned int **)v9;
  }
  result = vaddq_s64(*(int64x2_t *)(a1 + 136), vdupq_n_s64(v11));
  *(int64x2_t *)(a1 + 136) = result;
  return result;
}

void JSC::SlotVisitor::appendSlow(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v30;
  int v31;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 168);
  if (v11)
    (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, *(_QWORD *)(a1 + 176), a2, *(unsigned __int8 *)(a1 + 128));
  if ((a2 & 8) == 0)
  {
    v12 = (unsigned int **)(a2 & 0xFFFFFFFFFFFFC000);
    v13 = 1 << (a2 >> 4);
    v14 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFC000) + v8 + 8 * ((a2 >> 10) & 0xF) + 40);
    do
    {
      while (1)
      {
        v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + v8 + 8 * ((a2 >> 10) & 0xF) + 0x28);
        if ((v15 & v13) != 0)
          return;
        v16 = __ldxr(v14);
        if (v16 == v15)
          break;
        __clrex();
      }
    }
    while (__stxr(v15 | v13, v14));
    *(_BYTE *)(a2 + 7) = 2;
    v17 = (unsigned __int16)(*(_WORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
    if ((v17 & 0x10000) == 0)
      goto LABEL_10;
    v27 = *((_QWORD *)*v12 + 3);
    v28 = (unsigned __int8 *)(v27 + 56);
    if (__ldaxr((unsigned __int8 *)(v27 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v28))
    {
      goto LABEL_26;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v27 + 56);
LABEL_26:
    v30 = *(_QWORD *)(v27 + 32) + 40 * ((*v12)[3] >> 5);
    *(_DWORD *)(v30 + 36) |= 1 << (*v12)[3];
    v31 = __ldxr(v28);
    if (v31 == 1)
    {
      if (!__stlxr(0, v28))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v27 + 56), 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
    v19 = (_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 24);
    ++*(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 136) + 16 * **v12;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a2 - 79) & 1) == 0)
  {
    v22 = (unsigned __int8 *)(a2 - 79);
    do
    {
      if (__ldaxr(v22))
      {
        __clrex();
        return;
      }
    }
    while (__stlxr(1u, v22));
    *(_BYTE *)(a2 + 7) = 2;
    v19 = (_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 24);
    ++*(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a2 - 88);
LABEL_11:
    v19[14] = v20;
    if (v18 == 510)
    {
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
      *v24 = 0;
      v24[1] = 0;
      ++*(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 8);
      v26 = (_QWORD *)(a1 + 16);
      if (v25)
        v26 = *(_QWORD **)(a1 + 8);
      *v26 = v24;
      *(_QWORD *)(a1 + 8) = v24;
      v18 = 0;
      *v24 = 0;
      v24[1] = v25;
    }
    v21 = *(v19 - 2) + 8 * v18;
    *v19 = v18 + 1;
    *(_QWORD *)(v21 + 16) = a2;
  }
}

void JSC::SlotVisitor::appendHiddenSlow(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v28;
  int v29;

  if ((a2 & 8) == 0)
  {
    v10 = (unsigned int **)(a2 & 0xFFFFFFFFFFFFC000);
    v11 = 1 << (a2 >> 4);
    v12 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFC000) + a3 + 8 * ((a2 >> 10) & 0xF) + 40);
    do
    {
      while (1)
      {
        v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + a3 + 8 * ((a2 >> 10) & 0xF) + 0x28);
        if ((v13 & v11) != 0)
          return;
        v14 = __ldxr(v12);
        if (v14 == v13)
          break;
        __clrex();
      }
    }
    while (__stxr(v13 | v11, v12));
    *(_BYTE *)(a2 + 7) = 2;
    v15 = (unsigned __int16)(*(_WORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
    if ((v15 & 0x10000) == 0)
      goto LABEL_9;
    v25 = *((_QWORD *)*v10 + 3);
    v26 = (unsigned __int8 *)(v25 + 56);
    if (__ldaxr((unsigned __int8 *)(v25 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_25;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v25 + 56);
LABEL_25:
    v28 = *(_QWORD *)(v25 + 32) + 40 * ((*v10)[3] >> 5);
    *(_DWORD *)(v28 + 36) |= 1 << (*v10)[3];
    v29 = __ldxr(v26);
    if (v29 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_9;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v25 + 56), 0, a3, a4, a5, a6, a7, a8);
LABEL_9:
    v17 = a1 + 3;
    v16 = a1[3];
    ++a1[9];
    v18 = a1[17] + 16 * **v10;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a2 - 79) & 1) == 0)
  {
    v20 = (unsigned __int8 *)(a2 - 79);
    do
    {
      if (__ldaxr(v20))
      {
        __clrex();
        return;
      }
    }
    while (__stlxr(1u, v20));
    *(_BYTE *)(a2 + 7) = 2;
    v17 = a1 + 3;
    v16 = a1[3];
    ++a1[9];
    v18 = a1[17] + *(_QWORD *)(a2 - 88);
LABEL_10:
    v17[14] = v18;
    if (v16 == 510)
    {
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
      *v22 = 0;
      v22[1] = 0;
      ++a1[4];
      v23 = a1[1];
      v24 = a1 + 2;
      if (v23)
        v24 = (_QWORD *)a1[1];
      *v24 = v22;
      a1[1] = v22;
      v16 = 0;
      *v22 = 0;
      v22[1] = v23;
    }
    v19 = *(v17 - 2) + 8 * v16;
    *v17 = v16 + 1;
    *(_QWORD *)(v19 + 16) = a2;
  }
}

void JSC::SlotVisitor::appendToMarkStack<JSC::MarkedBlock>(_QWORD *a1, JSC::MarkedBlock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v11 = (unsigned __int16)(*((_WORD *)this + 14))++ + 1;
  if ((v11 & 0x10000) != 0)
    JSC::MarkedBlock::noteMarkedSlow(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  ++a1[9];
  a1[17] += 16 * **(unsigned int **)this;
  v12 = a1[3];
  if (v12 == 510)
  {
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
    v12 = 0;
    *v14 = 0;
    v14[1] = 0;
    ++a1[4];
    v15 = a1[1];
    v16 = a1 + 2;
    if (v15)
      v16 = (_QWORD *)a1[1];
    *v16 = v14;
    a1[1] = v14;
    *v14 = 0;
    v14[1] = v15;
  }
  v13 = a1[1] + 8 * v12;
  a1[3] = v12 + 1;
  *(_QWORD *)(v13 + 16) = a3;
}

void JSC::SlotVisitor::markAuxiliary(JSC::SlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  int v24;

  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) == 0)
    {
      v16 = (unsigned __int8 *)(a2 - 79);
      while (!__ldaxr(v16))
      {
        if (!__stlxr(1u, v16))
        {
          v11 = (a2 - 112) | 1;
LABEL_15:
          if ((v11 & 1) == 0)
          {
            v18 = (unsigned __int16)(*(_WORD *)(v11 + 28))++ + 1;
            if ((v18 & 0x10000) == 0)
              goto LABEL_17;
            v20 = *(_QWORD *)(*(_QWORD *)v11 + 24);
            v21 = (unsigned __int8 *)(v20 + 56);
            if (__ldaxr((unsigned __int8 *)(v20 + 56)))
            {
              __clrex();
              goto LABEL_23;
            }
            if (__stxr(1u, v21))
LABEL_23:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v20 + 56);
            v23 = *(_QWORD *)(v20 + 32) + 40 * (*(_DWORD *)(*(_QWORD *)v11 + 12) >> 5);
            *(_DWORD *)(v23 + 36) |= 1 << *(_DWORD *)(*(_QWORD *)v11 + 12);
            v24 = __ldxr(v21);
            if (v24 == 1)
            {
              if (!__stlxr(0, v21))
              {
LABEL_17:
                ++*((_QWORD *)this + 9);
                v19 = 16 * **(unsigned int **)v11;
LABEL_18:
                *(int64x2_t *)((char *)this + 136) = vaddq_s64(*(int64x2_t *)((char *)this + 136), vdupq_n_s64(v19));
                return;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v20 + 56), 0, a3, a4, a5, a6, a7, a8);
            goto LABEL_17;
          }
          ++*((_QWORD *)this + 9);
          v19 = *(_QWORD *)(v11 + 23);
          goto LABEL_18;
        }
      }
      __clrex();
    }
  }
  else
  {
    v10 = *((_DWORD *)this + 33);
    v11 = a2 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) != v10)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000), v10, a3, a4, a5, a6, a7, a8);
    v12 = 1 << (a2 >> 4);
    v13 = (unint64_t *)(v11 + 8 * ((a2 >> 10) & 0xF) + 40);
    while (1)
    {
      v14 = *v13;
      if ((*v13 & v12) != 0)
        break;
      v15 = __ldxr(v13);
      if (v15 == v14)
      {
        if (!__stxr(v14 | v12, v13))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
    }
  }
}

uint64_t JSC::SlotVisitor::visitAsConstraint(JSC::SlotVisitor *this, const JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t result;

  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 22) = a2;
  *((_BYTE *)a2 + 7) = 0;
  __dmb(0xBu);
  v10 = *((unsigned __int8 *)a2 + 5);
  switch(v10)
  {
    case 24:
      JSC::JSFinalObject::visitChildren(a2, this, a3, a4, a5, a6, a7, a8);
      break;
    case 2:
      JSC::JSString::visitChildren(a2, this, a3, a4, a5, a6, a7, a8);
      break;
    case 36:
      JSC::JSObject::visitChildren(a2, this, a3, a4, a5, a6, a7, a8);
      break;
    default:
      (*(void (**)(const JSC::JSCell *, JSC::SlotVisitor *))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xD0))(a2, this);
      break;
  }
  result = *((_QWORD *)this + 21);
  if (result && *((_BYTE *)this + 184))
    result = (*(uint64_t (**)(uint64_t, const JSC::JSCell *))(*(_QWORD *)result + 16))(result, a2);
  *((_QWORD *)this + 22) = 0;
  return result;
}

void JSC::SlotVisitor::donateKnownParallel(JSC::SlotVisitor *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  JSC::SlotVisitor *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  JSC::SlotVisitor *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  int v34;

  if ((unint64_t)(*((_QWORD *)this + 3) + 510 * *((_QWORD *)this + 4) - 510) >= 2)
  {
    v1 = *((_QWORD *)this + 10);
    v2 = *(_QWORD *)(v1 + 736);
    if (*(_QWORD *)(v2 + 16) - 510 == -510 * *(_QWORD *)(v2 + 24))
    {
      v3 = (unsigned __int8 *)(v1 + 909);
      while (1)
      {
        v4 = *v3;
        if ((v4 & 1) != 0)
          break;
        v5 = __ldaxr(v3);
        if (v5 == v4)
        {
          if (!__stxr(v4 | 1, v3))
          {
            v6 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 909);
            v7 = this;
            JSC::MarkStackArray::donateSomeCellsTo((uint64_t)this + 8, v2);
            v15 = (unsigned __int8 *)(*((_QWORD *)v7 + 10) + 910);
            v16 = atomic_load(v15);
            if ((v16 & 1) != 0)
            {
              atomic_store(0, v15);
              WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v15, v8, v9, v10, v11, v12, v13, v14);
            }
            v17 = __ldxr(v6);
            if (v17 == 1)
            {
              this = v7;
              if (!__stlxr(0, v6))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v9, v10, v11, v12, v13, v14);
            this = v7;
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if ((unint64_t)(*((_QWORD *)this + 7) + 510 * *((_QWORD *)this + 8) - 510) >= 2)
  {
    v18 = *((_QWORD *)this + 10);
    v19 = *(_QWORD *)(v18 + 744);
    if (*(_QWORD *)(v19 + 16) - 510 == -510 * *(_QWORD *)(v19 + 24))
    {
      v20 = (unsigned __int8 *)(v18 + 909);
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v23 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 909);
            v24 = this;
            JSC::MarkStackArray::donateSomeCellsTo((uint64_t)this + 40, v19);
            v32 = (unsigned __int8 *)(*((_QWORD *)v24 + 10) + 910);
            v33 = atomic_load(v32);
            if ((v33 & 1) != 0)
            {
              atomic_store(0, v32);
              WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v32, v25, v26, v27, v28, v29, v30, v31);
            }
            v34 = __ldxr(v23);
            if (v34 == 1)
            {
              if (!__stlxr(0, v23))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v26, v27, v28, v29, v30, v31);
            return;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
}

void JSC::SlotVisitor::drain(uint64_t a1, unint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  JSC::MarkedBlock *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::MarkedBlock *v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 v88;
  unsigned __int8 *v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t StatusReg;
  _QWORD *v94;
  char v95;
  char **v96;
  char *v97;

  if (*(_BYTE *)(a1 + 187))
  {
    v15 = a9;
    v10 = a1;
    v9 = (unsigned __int8 *)(a1 + 188);
    if (__ldaxr((unsigned __int8 *)(a1 + 188)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_5:
      if (v15 > 0.0)
      {
        v11 = v10 + 8;
        v94 = (_QWORD *)(v10 + 16);
        v91 = (_QWORD *)(v10 + 48);
        v92 = v10 + 40;
        v12 = fabs(v15) == INFINITY;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v16 = 1000000000.0;
        goto LABEL_7;
      }
      goto LABEL_157;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 188);
    goto LABEL_5;
  }
  WTF::dataLog<char [16]>("FATAL: attempting to drain when not in parallel mode.\n");
  a2 = (unint64_t)"./heap/SlotVisitor.cpp";
  a3 = (JSC::SlotVisitor *)"void JSC::SlotVisitor::drain(MonotonicTime)";
  a4 = 335;
  __break(0xC471u);
LABEL_215:
  __break(1u);
LABEL_216:
  *(_BYTE *)(v10 + 152) = 1;
LABEL_36:
  v33 = *(_QWORD *)(v10 + 168);
  if (v33 && *(_BYTE *)(v10 + 184))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v14);
LABEL_37:
  *(_QWORD *)(v10 + 176) = 0;
  v23 = *(_QWORD *)(v10 + 24);
  if (v23)
  {
    v29 = v13 - 1;
    if (v13)
      goto LABEL_31;
  }
LABEL_134:
  if (*(_BYTE *)(v10 + 184))
    goto LABEL_135;
  while (1)
  {
LABEL_139:
    if ((*v9 & 2) != 0)
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::safepointSlow(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((unint64_t)(*(_QWORD *)(v10 + 24) + 510 * *(_QWORD *)(v10 + 32) - 510) >= 2)
    {
      v73 = *(_QWORD *)(v10 + 80);
      a2 = *(_QWORD *)(v73 + 736);
      if (*(_QWORD *)(a2 + 16) - 510 == -510 * *(_QWORD *)(a2 + 24))
      {
        v83 = (unsigned __int8 *)(v73 + 909);
        while (1)
        {
          v84 = *v83;
          if ((v84 & 1) != 0)
            break;
          v85 = __ldaxr(v83);
          if (v85 == v84)
          {
            if (!__stxr(v84 | 1, v83))
            {
              v86 = *(_QWORD *)(v10 + 80);
              JSC::MarkStackArray::donateSomeCellsTo(v11, a2);
              v87 = (unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 910);
              v88 = atomic_load(v87);
              if ((v88 & 1) != 0)
              {
                atomic_store(0, v87);
                WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v87, (const void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v89 = (unsigned __int8 *)(v86 + 909);
              v90 = __ldxr((unsigned __int8 *)(v86 + 909));
              if (v90 == 1)
              {
                if (!__stlxr(0, v89))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v89, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    if ((unint64_t)(*(_QWORD *)(v10 + 56) + 510 * *(_QWORD *)(v10 + 64) - 510) >= 2)
    {
      v69 = *(_QWORD *)(v10 + 80);
      a2 = *(_QWORD *)(v69 + 744);
      if (*(_QWORD *)(a2 + 16) - 510 == -510 * *(_QWORD *)(a2 + 24))
      {
        v75 = (unsigned __int8 *)(v69 + 909);
        while (1)
        {
          v76 = *v75;
          if ((v76 & 1) != 0)
            break;
          v77 = __ldaxr(v75);
          if (v77 == v76)
          {
            if (!__stxr(v76 | 1, v75))
            {
              v78 = *(_QWORD *)(v10 + 80);
              JSC::MarkStackArray::donateSomeCellsTo(v92, a2);
              v79 = (unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 910);
              v80 = atomic_load(v79);
              if ((v80 & 1) != 0)
              {
                atomic_store(0, v79);
                WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v79, (const void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v81 = (unsigned __int8 *)(v78 + 909);
              v82 = __ldxr((unsigned __int8 *)(v78 + 909));
              if (v82 == 1)
              {
                if (!__stlxr(0, v81))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v81, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
    }
LABEL_7:
    if (!v12)
    {
      v18 = mach_absolute_time();
      v20 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v20 != -1)
      {
        v97 = &v95;
        v96 = &v97;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v96, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v19) = dword_1ECF4400C;
      if (v15 <= (double)(v18 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v19 * v16))
        goto LABEL_157;
    }
    if (*(_BYTE *)(*(_QWORD *)(v10 + 80) + 908))
      v21 = *(_BYTE *)(v10 + 186) == 0;
    else
      v21 = 1;
    v22 = !v21;
    *(_BYTE *)(v10 + 185) = v22;
    v23 = *(_QWORD *)(v10 + 24);
    if (v23)
      goto LABEL_29;
    a2 = *(_QWORD *)v11;
    v24 = *(_QWORD **)(*(_QWORD *)v11 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(v25 + 8) = v24;
        v24 = *(_QWORD **)(a2 + 8);
      }
      else
      {
        *(_QWORD *)v11 = v24;
      }
      if (!v24)
        v24 = v94;
      *v24 = v25;
      v26 = *(_QWORD *)(StatusReg + 752);
      if (v26)
      {
        if (a2 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
        {
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
LABEL_197:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, a2, 1, a4, a5, a6, a7, a8);
            goto LABEL_28;
          }
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 != 1)
            goto LABEL_197;
        }
        v27 = *(unsigned int *)(v26 + 8000);
        if (v27 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v26, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v26 + 8 * v27) = a2 | 0x5000000000000;
          *(_DWORD *)(v26 + 8000) = v27 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_28:
      v28 = *(_QWORD *)(v10 + 32) - 1;
      *(_QWORD *)(v10 + 24) = 510;
      *(_QWORD *)(v10 + 32) = v28;
      v23 = 510;
LABEL_29:
      *(_BYTE *)(v10 + 184) = 1;
      if (!HIDWORD(qword_1ECF4C570))
      {
LABEL_135:
        v67 = 0;
        goto LABEL_136;
      }
      v29 = HIDWORD(qword_1ECF4C570) - 1;
LABEL_31:
      v13 = v29;
      v30 = v23 - 1;
      v31 = *(_QWORD *)(v10 + 8) + 8 * v30;
      *(_QWORD *)(v10 + 24) = v30;
      v14 = *(_QWORD *)(v31 + 16);
      *(_QWORD *)(v10 + 176) = v14;
      *(_BYTE *)(v14 + 7) = 0;
      __dmb(0xBu);
      v32 = *(unsigned __int8 *)(v14 + 5);
      if (v32 == 24)
      {
        JSC::JSFinalObject::visitChildren((JSC::JSFinalObject *)v14, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
        goto LABEL_36;
      }
      if (v32 != 2)
      {
        if (v32 == 36)
          JSC::JSObject::visitChildren((JSC::JSObject *)v14, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
        else
          (*(void (**)(uint64_t, uint64_t))(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                   + 0xD0))(v14, v10);
        goto LABEL_36;
      }
      v34 = *(_DWORD *)v14 & 0xFFFFFFFE;
      if ((*(_DWORD *)v14 & 0xFFFFFFFE) != 0)
      {
        a2 = *(unsigned int *)(v10 + 132);
        if (*(_DWORD *)((16 * v34) & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v34) & 0xFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        a3 = 0;
        if (((*(_QWORD *)(((16 * v34) & 0xFFFFFC000) + 8 * ((v34 >> 6) & 0xF) + 0x28) >> (v34 & 0x3E)) & 1) == 0
          || *(_QWORD *)(v10 + 168))
        {
          JSC::SlotVisitor::appendSlow(v10, 16 * v34, 0, a4, a5, a6, a7, a8);
        }
      }
      v35 = *(_QWORD *)(v14 + 8);
      if ((v35 & 1) == 0)
      {
        if (!v35)
          goto LABEL_36;
        v39 = WTF::StringImpl::costDuringGC(*(WTF::StringImpl **)(v14 + 8));
        if (!*(_BYTE *)(v10 + 184))
          goto LABEL_36;
        *(_QWORD *)(v10 + 144) += v39;
        v40 = *(_QWORD *)(v10 + 160);
        v41 = __CFADD__(v40, v39);
        v42 = v40 + v39;
        if (!v41)
        {
          *(_QWORD *)(v10 + 160) = v42;
          goto LABEL_36;
        }
        goto LABEL_216;
      }
      if ((v35 & 2) == 0)
      {
        if ((v35 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_36;
        if ((v35 & 8) != 0)
        {
          if ((*(_BYTE *)((v35 & 0xFFFFFFFFFFFFFFF8) - 79) & 1) != 0)
            goto LABEL_52;
        }
        else
        {
          a2 = *(unsigned int *)(v10 + 132);
          if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != (_DWORD)a2)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v35 & 0xFFFFFFFFFFFFC000) + 8 * ((v35 >> 10) & 0xF) + 0x28) >> (v35 >> 4)) & 1) != 0)
          {
LABEL_52:
            if (!*(_QWORD *)(v10 + 168))
              goto LABEL_53;
          }
        }
        JSC::SlotVisitor::appendSlow(v10, v35 & 0xFFFFFFFFFFFFFFF8, 0, a4, a5, a6, a7, a8);
LABEL_53:
        v36 = *(_QWORD *)(v14 + 20);
        if ((v36 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_36;
        if ((v36 & 8) != 0)
        {
          if ((*(_BYTE *)((v36 & 0xFFFFFFFFFLL) - 79) & 1) != 0)
            goto LABEL_58;
        }
        else
        {
          a2 = *(unsigned int *)(v10 + 132);
          if (*(_DWORD *)(v36 & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v36 & 0xFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v36 & 0xFFFFFC000) + 8 * ((v36 >> 10) & 0xF) + 0x28) >> (v36 >> 4)) & 1) != 0)
          {
LABEL_58:
            if (!*(_QWORD *)(v10 + 168))
            {
LABEL_59:
              v37 = *(_QWORD *)(v14 + 24);
              if (v37 < 0x10000)
                goto LABEL_36;
              v38 = v37 >> 16;
              if ((v37 & 0x80000) != 0)
                goto LABEL_188;
              a2 = *(unsigned int *)(v10 + 132);
              if (*(_DWORD *)(v38 & 0xFFFFFFFFC000 | 0x20) != (_DWORD)a2)
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v38 & 0xFFFFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (((*(_QWORD *)((v38 & 0xFFFFFFFFC000) + 8 * ((v37 >> 26) & 0xF) + 0x28) >> (v37 >> 20)) & 1) == 0)
              {
LABEL_189:
                JSC::SlotVisitor::appendSlow(v10, v38, 0, a4, a5, a6, a7, a8);
                goto LABEL_36;
              }
              goto LABEL_64;
            }
          }
        }
        JSC::SlotVisitor::appendSlow(v10, v36 & 0xFFFFFFFFFLL, 0, a4, a5, a6, a7, a8);
        goto LABEL_59;
      }
      v43 = *(_QWORD *)(v14 + 20);
      v38 = v43 & 0xFFFFFFFFFLL;
      if ((v43 & 0xFFFFFFFFFLL) == 0)
        goto LABEL_36;
      if ((v43 & 8) != 0)
      {
LABEL_188:
        if ((*(_BYTE *)(v38 - 79) & 1) == 0)
          goto LABEL_189;
        goto LABEL_64;
      }
      v44 = (JSC::MarkedBlock *)(v43 & 0xFFFFFC000);
      a2 = *(unsigned int *)(v10 + 132);
      if (*(_DWORD *)(v43 & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
        JSC::MarkedBlock::aboutToMarkSlow(v44, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v45 = ((v38 - (unint64_t)v44) >> 4);
      if (v45 >= 0x400)
        goto LABEL_215;
      if (((*(_QWORD *)((char *)v44 + ((v45 >> 3) & 0x1FFFFFF8) + 40) >> ((v38 - (unint64_t)v44) >> 4)) & 1) == 0)
        goto LABEL_189;
LABEL_64:
      if (*(_QWORD *)(v10 + 168))
        goto LABEL_189;
      goto LABEL_37;
    }
    v46 = *(_QWORD *)(v10 + 56);
    if (!v46)
      break;
LABEL_85:
    *(_BYTE *)(v10 + 184) = 0;
    if (HIDWORD(qword_1ECF4C570))
    {
      v51 = HIDWORD(qword_1ECF4C570) - 1;
      while (1)
      {
        v13 = v51;
        v52 = v46 - 1;
        v53 = *(_QWORD *)(v10 + 40) + 8 * v52;
        *(_QWORD *)(v10 + 56) = v52;
        v14 = *(_QWORD *)(v53 + 16);
        *(_QWORD *)(v10 + 176) = v14;
        *(_BYTE *)(v14 + 7) = 0;
        __dmb(0xBu);
        v54 = *(unsigned __int8 *)(v14 + 5);
        if (v54 == 24)
        {
          JSC::JSFinalObject::visitChildren((JSC::JSFinalObject *)v14, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
          goto LABEL_92;
        }
        if (v54 != 2)
        {
          if (v54 == 36)
            JSC::JSObject::visitChildren((JSC::JSObject *)v14, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
          else
            (*(void (**)(uint64_t, uint64_t))(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                     + 0xD0))(v14, v10);
LABEL_92:
          v55 = *(_QWORD *)(v10 + 168);
          if (v55 && *(_BYTE *)(v10 + 184))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v14);
          goto LABEL_93;
        }
        v56 = *(_DWORD *)v14 & 0xFFFFFFFE;
        if ((*(_DWORD *)v14 & 0xFFFFFFFE) != 0)
        {
          a2 = *(unsigned int *)(v10 + 132);
          if (*(_DWORD *)((16 * v56) & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v56) & 0xFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          a3 = 0;
          if (((*(_QWORD *)(((16 * v56) & 0xFFFFFC000) + 8 * ((v56 >> 6) & 0xF) + 0x28) >> (v56 & 0x3E)) & 1) == 0
            || *(_QWORD *)(v10 + 168))
          {
            JSC::SlotVisitor::appendSlow(v10, 16 * v56, 0, a4, a5, a6, a7, a8);
          }
        }
        v57 = *(_QWORD *)(v14 + 8);
        if ((v57 & 1) == 0)
        {
          if (v57)
          {
            v61 = WTF::StringImpl::costDuringGC(*(WTF::StringImpl **)(v14 + 8));
            if (*(_BYTE *)(v10 + 184))
            {
              *(_QWORD *)(v10 + 144) += v61;
              v62 = *(_QWORD *)(v10 + 160);
              v41 = __CFADD__(v62, v61);
              v63 = v62 + v61;
              if (v41)
                *(_BYTE *)(v10 + 152) = 1;
              else
                *(_QWORD *)(v10 + 160) = v63;
            }
          }
          goto LABEL_92;
        }
        if ((v57 & 2) == 0)
          break;
        v64 = *(_QWORD *)(v14 + 20);
        v60 = v64 & 0xFFFFFFFFFLL;
        if ((v64 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_92;
        if ((v64 & 8) != 0)
        {
LABEL_202:
          if ((*(_BYTE *)(v60 - 79) & 1) == 0)
            goto LABEL_203;
          goto LABEL_120;
        }
        v65 = (JSC::MarkedBlock *)(v64 & 0xFFFFFC000);
        a2 = *(unsigned int *)(v10 + 132);
        if (*(_DWORD *)(v64 & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
          JSC::MarkedBlock::aboutToMarkSlow(v65, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v66 = ((v60 - (unint64_t)v65) >> 4);
        if (v66 >= 0x400)
          goto LABEL_215;
        if (((*(_QWORD *)((char *)v65 + ((v66 >> 3) & 0x1FFFFFF8) + 40) >> ((v60 - (unint64_t)v65) >> 4)) & 1) == 0)
        {
LABEL_203:
          JSC::SlotVisitor::appendSlow(v10, v60, 0, a4, a5, a6, a7, a8);
          goto LABEL_92;
        }
LABEL_120:
        if (*(_QWORD *)(v10 + 168))
          goto LABEL_203;
LABEL_93:
        *(_QWORD *)(v10 + 176) = 0;
        v46 = *(_QWORD *)(v10 + 56);
        if (v46)
        {
          v51 = v13 - 1;
          if (v13)
            continue;
        }
        goto LABEL_134;
      }
      if ((v57 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_92;
      if ((v57 & 8) != 0)
      {
        if ((*(_BYTE *)((v57 & 0xFFFFFFFFFFFFFFF8) - 79) & 1) != 0)
          goto LABEL_108;
      }
      else
      {
        a2 = *(unsigned int *)(v10 + 132);
        if (*(_DWORD *)(v57 & 0xFFFFFFFFFFFFC000 | 0x20) != (_DWORD)a2)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v57 & 0xFFFFFFFFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v57 & 0xFFFFFFFFFFFFC000) + 8 * ((v57 >> 10) & 0xF) + 0x28) >> (v57 >> 4)) & 1) != 0)
        {
LABEL_108:
          if (!*(_QWORD *)(v10 + 168))
            goto LABEL_109;
        }
      }
      JSC::SlotVisitor::appendSlow(v10, v57 & 0xFFFFFFFFFFFFFFF8, 0, a4, a5, a6, a7, a8);
LABEL_109:
      v58 = *(_QWORD *)(v14 + 20);
      if ((v58 & 0xFFFFFFFFFLL) == 0)
        goto LABEL_92;
      if ((v58 & 8) != 0)
      {
        if ((*(_BYTE *)((v58 & 0xFFFFFFFFFLL) - 79) & 1) != 0)
          goto LABEL_114;
      }
      else
      {
        a2 = *(unsigned int *)(v10 + 132);
        if (*(_DWORD *)(v58 & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v58 & 0xFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v58 & 0xFFFFFC000) + 8 * ((v58 >> 10) & 0xF) + 0x28) >> (v58 >> 4)) & 1) != 0)
        {
LABEL_114:
          if (!*(_QWORD *)(v10 + 168))
          {
LABEL_115:
            v59 = *(_QWORD *)(v14 + 24);
            if (v59 < 0x10000)
              goto LABEL_92;
            v60 = v59 >> 16;
            if ((v59 & 0x80000) != 0)
              goto LABEL_202;
            a2 = *(unsigned int *)(v10 + 132);
            if (*(_DWORD *)(v60 & 0xFFFFFFFFC000 | 0x20) != (_DWORD)a2)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v60 & 0xFFFFFFFFC000), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v60 & 0xFFFFFFFFC000) + 8 * ((v59 >> 26) & 0xF) + 0x28) >> (v59 >> 20)) & 1) == 0)
              goto LABEL_203;
            goto LABEL_120;
          }
        }
      }
      JSC::SlotVisitor::appendSlow(v10, v58 & 0xFFFFFFFFFLL, 0, a4, a5, a6, a7, a8);
      goto LABEL_115;
    }
  }
  v47 = *(uint64_t **)v92;
  v48 = *(_QWORD **)(*(_QWORD *)v92 + 8);
  if (v48)
  {
    v49 = *v47;
    if (*v47)
    {
      *(_QWORD *)(v49 + 8) = v48;
      v48 = (_QWORD *)v47[1];
    }
    else
    {
      *(_QWORD *)v92 = v48;
    }
    if (!v48)
      v48 = v91;
    *v48 = v49;
    WTF::fastFree((unint64_t)v47, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v50 = *(_QWORD *)(v10 + 64) - 1;
    *(_QWORD *)(v10 + 56) = 510;
    *(_QWORD *)(v10 + 64) = v50;
    v46 = 510;
    goto LABEL_85;
  }
  if (!*(_BYTE *)(v10 + 184))
    goto LABEL_157;
  v67 = 1;
LABEL_136:
  if (*(_BYTE *)(v10 + 152))
  {
    v68 = -1;
  }
  else
  {
    v68 = *(_QWORD *)(v10 + 160);
    if (!v68)
      goto LABEL_138;
  }
  v70 = (unint64_t *)(*(_QWORD *)(v10 + 80) + 344);
  do
  {
    while (1)
    {
      v71 = *v70 + v68;
      if (__CFADD__(*v70, v68))
        v71 = -1;
      v72 = __ldxr(v70);
      if (v72 == *v70)
        break;
      __clrex();
    }
  }
  while (__stxr(v71, v70));
LABEL_138:
  *(_BYTE *)(v10 + 152) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  if ((v67 & 1) == 0)
    goto LABEL_139;
LABEL_157:
  v74 = __ldxr(v9);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_161;
  }
  if (__stlxr(0, v9))
LABEL_161:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::SlotVisitor::propagateExternalMemoryVisitedIfNecessary(uint64_t this)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  if (*(_BYTE *)(this + 184))
  {
    if (*(_BYTE *)(this + 152))
    {
      v1 = -1;
    }
    else
    {
      v1 = *(_QWORD *)(this + 160);
      if (!v1)
      {
LABEL_4:
        *(_BYTE *)(this + 152) = 0;
        *(_QWORD *)(this + 160) = 0;
        return this;
      }
    }
    v2 = (unint64_t *)(*(_QWORD *)(this + 80) + 344);
    do
    {
      while (1)
      {
        v3 = *v2 + v1;
        if (__CFADD__(*v2, v1))
          v3 = -1;
        v4 = __ldxr(v2);
        if (v4 == *v2)
          break;
        __clrex();
      }
    }
    while (__stxr(v3, v2));
    goto LABEL_4;
  }
  return this;
}

uint64_t JSC::SlotVisitor::performIncrementOfDraining(JSC::SlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::SlotVisitor *v18;
  int v19;
  unsigned __int8 *v20;
  BOOL v22;
  char v23;
  JSC::SlotVisitor *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  int v50;
  uint64_t result;
  _QWORD v52[3];
  uint64_t **v53;
  uint64_t *v54;
  uint64_t *v55;
  JSC::SlotVisitor *v56;
  uint64_t v57;
  unint64_t v58;

  v58 = a2;
  if (*((_BYTE *)this + 187))
  {
    v9 = a2 >> 4;
    v10 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 909);
    if (__ldaxr(v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_6:
    v12 = JSC::MarkStackArray::transferTo(*(_QWORD **)(*((_QWORD *)this + 10) + 736), (_QWORD *)this + 1, v9, a4, a5, a6, a7, a8);
    v18 = (JSC::SlotVisitor *)(v9 - v12);
    if (v9 != v12)
      JSC::MarkStackArray::transferTo(*(_QWORD **)(*((_QWORD *)this + 10) + 744), (_QWORD *)this + 5, (uint64_t)v18, v13, v14, v15, v16, v17);
    v19 = __ldxr(v10);
    if (v19 == 1)
    {
      if (!__stlxr(0, v10))
      {
LABEL_13:
        v56 = this;
        v57 = 0;
        *((_QWORD *)this + 18) = 0;
        v55 = &v57;
        v53 = &v55;
        v54 = (uint64_t *)&v58;
        v20 = (unsigned __int8 *)this + 188;
        if (__ldaxr((unsigned __int8 *)this + 188))
        {
          __clrex();
        }
        else if (!__stxr(1u, v20))
        {
          goto LABEL_17;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 188);
LABEL_17:
        while (v53[1][18] + **v53 < (unint64_t)*v54)
        {
          if (*(_BYTE *)(*((_QWORD *)this + 10) + 908))
            v22 = *((_BYTE *)this + 186) == 0;
          else
            v22 = 1;
          v23 = !v22;
          *((_BYTE *)this + 185) = v23;
          v52[0] = &v53;
          v52[1] = this;
          v52[2] = &v57;
          if (JSC::SlotVisitor::performIncrementOfDraining(unsigned long)::$_3::operator()((uint64_t)v52, (_QWORD *)this + 1, v18, v13, v14, v15, v16, v17))
          {
            JSC::SlotVisitor::propagateExternalMemoryVisitedIfNecessary((uint64_t)this);
          }
          else
          {
            v31 = JSC::SlotVisitor::performIncrementOfDraining(unsigned long)::$_3::operator()((uint64_t)v52, (_QWORD *)this + 5, v24, v25, v26, v27, v28, v29);
            JSC::SlotVisitor::propagateExternalMemoryVisitedIfNecessary((uint64_t)this);
            if (!v31)
              break;
          }
          if ((*v20 & 2) != 0)
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::safepointSlow((unsigned __int8 *)this + 188, v30, (uint64_t)v18, v13, v14, v15, v16, v17);
          JSC::SlotVisitor::donateKnownParallel(this);
        }
        v32 = __ldxr(v20);
        if (v32 == 1)
        {
          if (!__stlxr(0, v20))
            goto LABEL_35;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 188, 0, (uint64_t)v18, v13, v14, v15, v16, v17);
LABEL_35:
        if (!*((_QWORD *)this + 3)
          && !*(_QWORD *)(*((_QWORD *)this + 1) + 8)
          && !*((_QWORD *)this + 7)
          && !*(_QWORD *)(*((_QWORD *)this + 5) + 8))
        {
          return *((_QWORD *)v56 + 18) + *v55;
        }
        v33 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 909);
        if (__ldaxr(v33))
        {
          __clrex();
        }
        else if (!__stxr(1u, v33))
        {
          goto LABEL_43;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_43:
        JSC::MarkStackArray::transferTo((uint64_t **)this + 1, *(uint64_t ***)(*((_QWORD *)this + 10) + 736), (uint64_t)v18, v13, v14, v15, v16, v17);
        JSC::MarkStackArray::transferTo((uint64_t **)this + 5, *(uint64_t ***)(*((_QWORD *)this + 10) + 744), v35, v36, v37, v38, v39, v40);
        v48 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 910);
        v49 = atomic_load(v48);
        if ((v49 & 1) != 0)
        {
          atomic_store(0, v48);
          WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v48, v41, v42, v43, v44, v45, v46, v47);
        }
        v50 = __ldxr(v33);
        if (v50 == 1)
        {
          if (!__stlxr(0, v33))
            return *((_QWORD *)v56 + 18) + *v55;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, v42, v43, v44, v45, v46, v47);
        return *((_QWORD *)v56 + 18) + *v55;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, (uint64_t)v18, v13, v14, v15, v16, v17);
    goto LABEL_13;
  }
  result = 521;
  __break(0xC471u);
  return result;
}

BOOL JSC::SlotVisitor::didReachTermination(JSC::SlotVisitor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  _QWORD *v15;
  _QWORD *v16;

  v9 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 909);
  if (__ldaxr(v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_4:
  v11 = *((_QWORD *)this + 10);
  v12 = !*(_DWORD *)(v11 + 752)
     && !*((_QWORD *)this + 3)
     && !*(_QWORD *)(*((_QWORD *)this + 1) + 8)
     && !*((_QWORD *)this + 7)
     && !*(_QWORD *)(*((_QWORD *)this + 5) + 8)
     && (v15 = *(_QWORD **)(v11 + 736), !v15[2])
     && !*(_QWORD *)(*v15 + 8)
     && (v16 = *(_QWORD **)(v11 + 744), !v16[2])
     && *(_QWORD *)(*v16 + 8) == 0;
  v13 = __ldxr(v9);
  if (v13 == 1)
  {
    if (!__stlxr(0, v9))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v12;
}

uint64_t JSC::SlotVisitor::drainFromShared(_QWORD *a1, const void *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  int v11;
  char v13;
  uint64_t **v14;
  uint64_t **v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  const WTF::TimeWithDynamicClockType *v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  unsigned __int8 v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  uint64_t v65;
  double v66;
  int v67;
  char v68;
  double *v69;

  v11 = (int)a2;
  v13 = 0;
  v14 = (uint64_t **)(a1 + 1);
  v15 = (uint64_t **)(a1 + 5);
  v16 = fabs(a9) == INFINITY;
  while (1)
  {
    v17 = (unsigned __int8 *)(a1[10] + 909);
    if (__ldaxr(v17))
    {
      __clrex();
LABEL_4:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
      goto LABEL_5;
    }
    if (__stxr(1u, v17))
      goto LABEL_4;
LABEL_5:
    v19 = a1[10];
    if ((v13 & 1) != 0)
      --*(_DWORD *)(v19 + 752);
    ++*(_DWORD *)(v19 + 756);
    if (v11 == 1)
    {
      v66 = a9;
      v31 = 1;
      v67 = 1;
      if (!WTF::hasElapsed((WTF *)&v66, (const WTF::TimeWithDynamicClockType *)a2))
      {
        while (1)
        {
          v29 = a1[10];
          v33 = a1[3];
          if (*(_DWORD *)(v29 + 752))
          {
            if (v33 || (*v14)[1])
              goto LABEL_99;
          }
          else
          {
            if (v33 || (*v14)[1] || a1[7])
              goto LABEL_99;
            if (!(*v15)[1])
            {
              v58 = *(_QWORD **)(v29 + 736);
              if (!v58[2] && !*(_QWORD *)(*v58 + 8))
              {
                v59 = *(_QWORD **)(v29 + 744);
                if (!v59[2] && !*(_QWORD *)(*v59 + 8))
                {
                  v60 = (unsigned __int8 *)(v29 + 910);
                  v61 = atomic_load((unsigned __int8 *)(v29 + 910));
                  if ((v61 & 1) != 0)
                  {
                    atomic_store(0, v60);
                    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v60, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                  v28 = 0;
                  goto LABEL_29;
                }
              }
            }
          }
          if (a1[7])
            goto LABEL_99;
          if ((*v15)[1])
            goto LABEL_47;
          v34 = *(_QWORD **)(v29 + 736);
          if (v34[2])
            goto LABEL_47;
          if (*(_QWORD *)(*v34 + 8))
            goto LABEL_47;
          v35 = *(_QWORD **)(v29 + 744);
          if (v35[2] || *(_QWORD *)(*v35 + 8))
            goto LABEL_47;
          v66 = a9;
          v31 = 1;
          v67 = 1;
          WTF::Condition::waitUntilUnchecked<WTF::Lock>(v29 + 910, (unsigned __int8 *)(v29 + 909), (WTF::TimeWithDynamicClockType *)&v66);
          v66 = a9;
          v67 = 1;
          v28 = 0;
          v30 = 0;
          if (WTF::hasElapsed((WTF *)&v66, v36))
            goto LABEL_30;
        }
      }
      v28 = 0;
      v30 = 0;
    }
    else
    {
      if (a9 > 0.0)
      {
        if (v16)
          goto LABEL_14;
        v20 = mach_absolute_time();
        v22 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v22 != -1)
        {
          v66 = COERCE_DOUBLE(&v68);
          v69 = &v66;
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v69, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        LODWORD(v21) = dword_1ECF4400C;
        if (a9 > (double)(v20 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v21 * 1000000000.0))
        {
          v19 = a1[10];
LABEL_14:
          if (!*(_DWORD *)(v19 + 752) && !a1[3] && !(*v14)[1] && !a1[7] && !(*v15)[1])
          {
            v41 = *(_QWORD **)(v19 + 736);
            if (!v41[2] && !*(_QWORD *)(*v41 + 8))
            {
              v62 = *(_QWORD **)(v19 + 744);
              if (!v62[2] && !*(_QWORD *)(*v62 + 8))
              {
                v63 = (unsigned __int8 *)(v19 + 910);
                v64 = atomic_load((unsigned __int8 *)(v19 + 910));
                if ((v64 & 1) != 0)
                {
                  atomic_store(0, v63);
                  WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v63, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                }
                v65 = *(_QWORD *)(a1[10] + 656);
                if (!*(_BYTE *)(v65 + 35))
                {
                  if (*(_BYTE *)(v65 + 34))
                    __dmb(0xBu);
                  else
                    JSC::JSRunLoopTimer::setTimeUntilFire(v65, 0.0);
                }
                v19 = a1[10];
              }
            }
          }
          v66 = a9;
          v67 = 1;
          do
          {
            if (a1[3])
              goto LABEL_27;
            v23 = *v14;
            if (!(*v14)[1] && !a1[7] && !(*v15)[1])
            {
              v24 = a1[10];
              v25 = *(_QWORD **)(v24 + 736);
              if (!v25[2] && !*(_QWORD *)(*v25 + 8))
              {
                v37 = *(_QWORD **)(v24 + 744);
                if (!v37[2] && !*(_QWORD *)(*v37 + 8) && !*(_QWORD *)(v24 + 872) && !*(_BYTE *)(v24 + 1125))
                  continue;
              }
            }
            goto LABEL_22;
          }
          while ((WTF::Condition::waitUntilUnchecked<WTF::Lock>(v19 + 910, (unsigned __int8 *)(v19 + 909), (WTF::TimeWithDynamicClockType *)&v66) & 1) != 0);
          if (a1[3])
            goto LABEL_27;
          v23 = *v14;
LABEL_22:
          if (v23[1]
            || a1[7]
            || (*v15)[1]
            || (v26 = (_QWORD *)a1[10], v27 = (_QWORD *)v26[92], v27[2])
            || *(_QWORD *)(*v27 + 8)
            || (v38 = (_QWORD *)v26[93], v38[2])
            || *(_QWORD *)(*v38 + 8))
          {
LABEL_27:
            v28 = 0;
            goto LABEL_28;
          }
          v28 = (unsigned int *)v26[109];
          if (v28)
          {
            v39 = v28 + 2;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 + 1, v39));
          }
LABEL_28:
          v29 = a1[10];
          if (*(_BYTE *)(v29 + 1125))
          {
LABEL_29:
            v30 = 0;
            v31 = 0;
            goto LABEL_30;
          }
          if (!v28)
          {
            if (!a1[3] && !(*v14)[1])
            {
LABEL_47:
              if (!a1[7] && !(*v15)[1])
              {
                JSC::MarkStackArray::stealSomeCellsFrom(v14, *(_QWORD *)(v29 + 736), *(unsigned int *)(v29 + 756));
                JSC::MarkStackArray::stealSomeCellsFrom(v15, *(_QWORD *)(a1[10] + 744), *(unsigned int *)(a1[10] + 756));
                v28 = 0;
                v29 = a1[10];
                goto LABEL_100;
              }
            }
LABEL_99:
            v28 = 0;
          }
LABEL_100:
          *(int32x2_t *)(v29 + 752) = vadd_s32(*(int32x2_t *)(v29 + 752), (int32x2_t)0xFFFFFFFF00000001);
          v30 = 1;
          v31 = v9;
          goto LABEL_30;
        }
      }
      v28 = 0;
      v30 = 0;
      v31 = 1;
    }
LABEL_30:
    v32 = __ldxr(v17);
    if (v32 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_32;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_32:
    if (!v30)
      break;
    if (v28)
    {
      (*(void (**)(unsigned int *, _QWORD *))(*(_QWORD *)v28 + 16))(v28, a1);
      v42 = (unsigned __int8 *)(a1[10] + 909);
      if (__ldaxr(v42))
      {
        __clrex();
      }
      else if (!__stxr(1u, v42))
      {
        goto LABEL_84;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v42);
LABEL_84:
      v44 = a1[10];
      if (*(unsigned int **)(v44 + 872) == v28)
      {
        *(_QWORD *)(v44 + 872) = 0;
        v51 = v28 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v28 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      v45 = v28 + 2;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
      }
      v48 = (unsigned __int8 *)(a1[10] + 910);
      v49 = atomic_load(v48);
      if ((v49 & 1) != 0)
      {
        atomic_store(0, v48);
        WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      v50 = __ldxr(v42);
      if (v50 != 1)
      {
        __clrex();
LABEL_95:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_39;
      }
      v13 = 1;
      v9 = v31;
      if (__stlxr(0, v42))
        goto LABEL_95;
    }
    else
    {
      if (!a1[3] && !(*v14)[1] && !a1[7] && !(*v15)[1])
      {
        __break(0xC471u);
        JUMPOUT(0x1985FB090);
      }
      JSC::SlotVisitor::drain((uint64_t)a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_39:
      v13 = 1;
      v9 = v31;
    }
  }
  if (v28)
  {
    v54 = v28 + 2;
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  return v31;
}

uint64_t JSC::SlotVisitor::drainInParallelPassively(uint64_t a1, unint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v11;
  JSC::SlotVisitor *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 v37;
  int v38;

  if (dword_1ECF4C578 != 1)
  {
    v11 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 80) + 904));
    if ((v11 & 0x10) == 0)
    {
      v19 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 80) + 904));
      if ((v19 & 4) != 0)
      {
        v20 = *(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(v20 + 908))
        {
          v21 = (unsigned __int8 *)(v20 + 909);
          if (__ldaxr((unsigned __int8 *)(v20 + 909)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v21))
          {
LABEL_12:
            JSC::MarkStackArray::transferTo((uint64_t **)(a1 + 8), *(uint64_t ***)(*(_QWORD *)(a1 + 80) + 736), (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::MarkStackArray::transferTo((uint64_t **)(a1 + 40), *(uint64_t ***)(*(_QWORD *)(a1 + 80) + 744), v23, v24, v25, v26, v27, v28);
            v36 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 910);
            v37 = atomic_load(v36);
            if ((v37 & 1) != 0)
            {
              atomic_store(0, v36);
              WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v36, v29, v30, v31, v32, v33, v34, v35);
            }
            v38 = __ldxr(v21);
            if (v38 == 1)
            {
              if (!__stlxr(0, v21))
                return JSC::SlotVisitor::waitForTermination((_QWORD *)a1, v29, v30, v31, v32, v33, v34, v35, a9);
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v30, v31, v32, v33, v34, v35);
            return JSC::SlotVisitor::waitForTermination((_QWORD *)a1, v29, v30, v31, v32, v33, v34, v35, a9);
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v21);
          goto LABEL_12;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 187))
  {
    if (dword_1ECF4C578 != 1)
      JSC::SlotVisitor::donateKnownParallel((JSC::SlotVisitor *)a1);
    JSC::SlotVisitor::drain(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    return JSC::SlotVisitor::drainFromShared((_QWORD *)a1, (const void *)1, v12, v13, v14, v15, v16, v17, a9);
  }
  else
  {
    WTF::dataLog<char [16]>("FATAL: Attempting to donate when not in parallel mode.\n");
    result = 768;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::SlotVisitor::waitForTermination(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned __int8 *v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  _QWORD *v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned __int8 v28;
  int v29;
  double v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD v36[3];

  v11 = (unsigned __int8 *)(a1[10] + 909);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_4:
  v13 = 1;
  if (a9 <= 0.0)
    goto LABEL_37;
  v14 = fabs(a9) == INFINITY;
  while (1)
  {
    if (!v14)
    {
      v15 = mach_absolute_time();
      v17 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v17 != -1)
      {
        v36[0] = &v31;
        v35[0] = v36;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v16) = dword_1ECF4400C;
      if (a9 <= (double)(v15 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v16 * 1000000000.0))
      {
        v13 = 1;
        goto LABEL_37;
      }
    }
    v18 = a1[10];
    if (!*(_DWORD *)(v18 + 752) && !a1[3] && !*(_QWORD *)(a1[1] + 8) && !a1[7] && !*(_QWORD *)(a1[5] + 8))
    {
      v25 = *(_QWORD **)(v18 + 736);
      if (!v25[2] && !*(_QWORD *)(*v25 + 8))
      {
        v26 = *(_QWORD **)(v18 + 744);
        if (!v26[2] && !*(_QWORD *)(*v26 + 8))
          break;
      }
    }
    v31 = a9;
    v32 = 1;
    v19 = mach_absolute_time();
    v21 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v21 != -1)
    {
      v36[0] = &v34;
      v35[0] = v36;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    if (v32 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1985FB550);
    }
    v22 = (unsigned __int8 *)(v18 + 909);
    LODWORD(v20) = dword_1ECF4400C;
    if (v31 >= (double)(v19 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v20 * 1000000000.0))
    {
      v33 = v18 + 909;
      v34 = v18 + 910;
      v36[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      v36[1] = v36;
      v36[2] = &v34;
      v35[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v35[1] = v35;
      v35[2] = &v33;
      WTF::ParkingLot::parkConditionallyImpl(v18 + 910, (uint64_t)v36, (uint64_t)v35, (WTF::TimeWithDynamicClockType *)&v31);
      goto LABEL_19;
    }
    v23 = __ldxr(v22);
    if (v23 != 1)
    {
      __clrex();
LABEL_25:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v18 + 909), 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_19;
    }
    if (__stlxr(0, v22))
      goto LABEL_25;
LABEL_19:
    if (__ldaxr(v22))
    {
      __clrex();
      goto LABEL_21;
    }
    if (__stxr(1u, v22))
LABEL_21:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v18 + 909);
  }
  v27 = (unsigned __int8 *)(v18 + 910);
  v28 = atomic_load((unsigned __int8 *)(v18 + 910));
  if ((v28 & 1) != 0)
  {
    atomic_store(0, v27);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = 0;
LABEL_37:
  v29 = __ldxr(v11);
  if (v29 == 1)
  {
    if (!__stlxr(0, v11))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

void JSC::SlotVisitor::didRace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE *v20;
  WTF::PrintStream *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  const void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  void (**v35)(WTF::StringPrintStream *__hidden);
  _BYTE *v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C358))
  {
    v35 = off_1E3572250;
    v36 = v38;
    v37 = xmmword_199122F80;
    v38[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v35, "%s", "GC visit race: ");
    v20 = *(_BYTE **)a2;
    v21 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v35[4])(&v35);
    WTF::PrintStream::printf(v21, "%p", v20);
    WTF::PrintStream::printf(v21, "%s", "(");
    WTF::PrintStream::printf(v21, "%s", *(const char **)(a2 + 8));
    WTF::PrintStream::printf(v21, "%s", ")");
    v35[5]((WTF::StringPrintStream *)&v35);
    v35[5]((WTF::StringPrintStream *)&v35);
    v30 = v36;
    v29 = v37;
    v34 = 0;
    if (v36)
    {
      if ((unint64_t)v37 > 0xFFFFFFFFFFFFFFEELL)
      {
        __break(0xC471u);
        JUMPOUT(0x1985FB820);
      }
      v31 = WTF::fastMalloc((WTF *)(v37 + 17));
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = v29;
      v34 = v31;
      memcpy((void *)(v31 + 16), v30, v29);
      *(_BYTE *)(v31 + 16 + v29) = 0;
      v32 = (unint64_t)v36;
      if (v36 == v38)
      {
        WTF::dataLog<WTF::CString,char [2]>(&v34);
        v34 = 0;
LABEL_21:
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v33, a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v31;
        goto LABEL_2;
      }
    }
    else
    {
      v32 = 0;
      v31 = 0;
    }
    WTF::fastFree(v32, v22, v23, v24, v25, v26, v27, v28);
    WTF::dataLog<WTF::CString,char [2]>(&v34);
    v34 = 0;
    if (!v31)
      goto LABEL_2;
    goto LABEL_21;
  }
LABEL_2:
  v10 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 157);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_6:
  v12 = *(_BYTE **)a2;
  v12[7] = 2;
  v13 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 424);
  v14 = v13[2];
  if (v14 == 510)
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
    v14 = 0;
    *v17 = 0;
    v17[1] = 0;
    ++v13[3];
    v18 = (_QWORD *)*v13;
    v19 = v13 + 1;
    if (*v13)
      v19 = (_QWORD *)*v13;
    *v19 = v17;
    *v13 = v17;
    *v17 = 0;
    v17[1] = v18;
  }
  v15 = *v13 + 8 * v14;
  v13[2] = v14 + 1;
  *(_QWORD *)(v15 + 16) = v12;
  v16 = __ldxr(v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v10))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::SlotVisitor::dump(JSC::SlotVisitor *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;
  uint64_t *v5[5];
  char v6;
  uint64_t *v7[5];
  char v8;

  v7[0] = (uint64_t *)((char *)this + 8);
  v7[1] = (uint64_t *)", ";
  v7[2] = (uint64_t *)3;
  v7[3] = (uint64_t *)"";
  v7[4] = (uint64_t *)1;
  v8 = 0;
  v5[0] = (uint64_t *)((char *)this + 40);
  v5[1] = (uint64_t *)", ";
  v5[2] = (uint64_t *)3;
  v5[3] = (uint64_t *)"";
  v5[4] = (uint64_t *)1;
  v6 = 0;
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "Collector: [");
  WTF::PrintStream::printImpl<WTF::PointerListDump<JSC::MarkStackArray>,char [14],WTF::PointerListDump<JSC::MarkStackArray>,char [2]>(v3, v7, "], Mutator: [", v5, "]");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::SlotVisitor::addParallelConstraintTask()
{
  __break(0xC471u);
}

void JSC::SlotVisitor::addParallelConstraintTask(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;

  v8 = *(_QWORD *)(a1 + 112);
  if (!v8)
    goto LABEL_29;
  if (!*(_QWORD *)(a1 + 104))
  {
    __break(0xC471u);
    JUMPOUT(0x1985FBA58);
  }
  v9 = *a2;
  if (!*a2)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1985FBA38);
  }
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(a1 + 104);
  v13 = (unsigned __int8 *)(v8 + 720);
  if (__ldaxr((unsigned __int8 *)(v8 + 720)))
  {
    __clrex();
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 720);
    goto LABEL_9;
  }
  if (__stxr(1u, v13))
    goto LABEL_8;
LABEL_9:
  v16 = *(_QWORD *)(v8 + 32);
  v15 = *(_QWORD *)(v8 + 40);
  if (v16)
  {
    if (v15 + 1 != v16)
      goto LABEL_16;
  }
  else
  {
    v17 = *(unsigned int *)(v8 + 56);
    if (v15)
    {
      if (v15 != v17 - 1)
        goto LABEL_16;
    }
    else if ((_DWORD)v17)
    {
      v15 = 0;
      goto LABEL_16;
    }
  }
  WTF::Deque<JSC::MarkingConstraintSolver::TaskWithConstraint,32ul>::expandCapacity((uint64_t *)(v8 + 32), a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(v8 + 40);
LABEL_16:
  v18 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
  *v18 = v9;
  v18[1] = v12;
  if (v15 == *(unsigned int *)(v8 + 56) - 1)
    v19 = 0;
  else
    v19 = v15 + 1;
  *(_QWORD *)(v8 + 40) = v19;
  v20 = __ldxr(v13);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v13))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 720), 0, a3, a4, a5, a6, a7, a8);
}

double JSC::SpaceTimeMutatorScheduler::SpaceTimeMutatorScheduler(JSC::SpaceTimeMutatorScheduler *this, JSC::Heap *a2)
{
  double result;

  *(_QWORD *)this = off_1E3590F18;
  *((_QWORD *)this + 1) = a2;
  result = *(double *)&qword_1ECF4C3C8 / 1000.0;
  *((double *)this + 2) = *(double *)&qword_1ECF4C3C8 / 1000.0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t JSC::SpaceTimeMutatorScheduler::state(JSC::SpaceTimeMutatorScheduler *this)
{
  return *((unsigned int *)this + 6);
}

void JSC::SpaceTimeMutatorScheduler::beginCollection(JSC::SpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  char **v8;
  char *v9;

  if (*((_DWORD *)this + 6))
  {
    __break(0xC471u);
  }
  else
  {
    *((_DWORD *)this + 6) = 1;
    v2 = mach_absolute_time();
    v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v4 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v3) = dword_1ECF4400C;
    *((double *)this + 6) = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo)
                          / ((double)v3
                           * 1000000000.0);
    v5 = *((_QWORD *)this + 1);
    v6 = (double)*(unint64_t *)(v5 + 80);
    *((double *)this + 4) = v6;
    if (v6 < (double)*(unint64_t *)(v5 + 96))
      v6 = (double)*(unint64_t *)(v5 + 96);
    *((double *)this + 5) = *((double *)&xmmword_1ECF4C3B8 + 1) * v6;
  }
}

uint64_t JSC::SpaceTimeMutatorScheduler::didStop(uint64_t this)
{
  if ((*(_DWORD *)(this + 24) - 3) <= 0xFFFFFFFD)
  {
    this = 85;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 24) = 1;
  }
  return this;
}

uint64_t JSC::SpaceTimeMutatorScheduler::willResume(uint64_t this)
{
  if ((*(_DWORD *)(this + 24) - 3) <= 0xFFFFFFFD)
  {
    this = 91;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 24) = 2;
  }
  return this;
}

double JSC::SpaceTimeMutatorScheduler::didExecuteConstraints(JSC::SpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double result;
  char v6;
  char **v7;
  char *v8;

  v2 = mach_absolute_time();
  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v3) = dword_1ECF4400C;
  result = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v3 * 1000000000.0);
  *((double *)this + 6) = result;
  return result;
}

void JSC::SpaceTimeMutatorScheduler::timeToStop(JSC::SpaceTimeMutatorScheduler *this)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    if (v1 == 2)
    {
      v4 = mach_absolute_time();
      v6 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v6 != -1)
      {
        v9 = &v7;
        v8 = &v9;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v5) = dword_1ECF4400C;
      fmod((double)(v4 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v5 * 1000000000.0)- *((double *)this + 6), *((long double *)this + 2));
    }
    else if (v1 == 1)
    {
      mach_absolute_time();
      v2 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v2 != -1)
      {
        v9 = &v7;
        v8 = &v9;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::SpaceTimeMutatorScheduler::timeToResume(JSC::SpaceTimeMutatorScheduler *this)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  v1 = *((_DWORD *)this + 6);
  if (v1 == 2)
  {
LABEL_4:
    mach_absolute_time();
    v2 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v2 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    return;
  }
  if (v1 != 1)
  {
    if (v1)
    {
      __break(0xC471u);
      return;
    }
    goto LABEL_4;
  }
  v4 = mach_absolute_time();
  v6 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v5) = dword_1ECF4400C;
  fmod((double)(v4 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v5 * 1000000000.0)- *((double *)this + 6), *((long double *)this + 2));
}

uint64_t JSC::SpaceTimeMutatorScheduler::log(JSC::SpaceTimeMutatorScheduler *this)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  mach_absolute_time();
  v2 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v2 != -1)
  {
    v11[0] = v9;
    v10[0] = v11;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v3 = *((double *)this + 4);
  v4 = *((double *)this + 5);
  v5 = (double)*(unint64_t *)(*((_QWORD *)this + 1) + 80) - v3;
  v11[0] = "%.0lf";
  *(double *)&v11[1] = v5 * 0.0009765625;
  v6 = v5 / (v4 - v3);
  if (v6 < 0.0)
    v6 = 0.0;
  v10[0] = "%.3lf";
  v10[1] = fmin(v6, 1.0);
  if (v6 > 1.0)
    v7 = 0.0;
  else
    v7 = 1.0 - v6;
  v9[0] = "%.3lf";
  *(double *)&v9[1] = *(double *)&xmmword_1ECF4C3A8
                    + v7 * (*((double *)&xmmword_1ECF4C3A8 + 1) - *(double *)&xmmword_1ECF4C3A8);
  return WTF::dataLog<char [3],WTF::FormatImpl<char const*,double>,char [4],char [4],WTF::FormatImpl<char const*,double>,char [2],char [4],WTF::FormatImpl<char const*,double>,char [2]>((uint64_t)v11, (uint64_t)v10, (uint64_t)v9);
}

uint64_t WTF::dataLog<char [3],WTF::FormatImpl<char const*,double>,char [4],char [4],WTF::FormatImpl<char const*,double>,char [2],char [4],WTF::FormatImpl<char const*,double>,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "a=");
  WTF::PrintStream::printfVariableFormat(v8, *(const char **)a1, *(_QWORD *)(a1 + 8));
  WTF::PrintStream::printf(v8, "%s", "kb ");
  WTF::PrintStream::printf(v8, "%s", "hf=");
  WTF::PrintStream::printfVariableFormat(v8, *(const char **)a2, *(_QWORD *)(a2 + 8));
  WTF::PrintStream::printf(v8, "%s", " ");
  WTF::PrintStream::printf(v8, "%s", "mu=");
  WTF::PrintStream::printfVariableFormat(v8, *(const char **)a3, *(_QWORD *)(a3 + 8));
  WTF::PrintStream::printf(v8, "%s", " ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

double JSC::SpaceTimeMutatorScheduler::endCollection(JSC::SpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double result;
  char v6;
  char **v7;
  char *v8;

  *((_DWORD *)this + 6) = 0;
  v2 = mach_absolute_time();
  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v3) = dword_1ECF4400C;
  result = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v3 * 1000000000.0);
  *((double *)this + 6) = result;
  return result;
}

uint64_t JSC::StochasticSpaceTimeMutatorScheduler::state(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  return *((unsigned int *)this + 4);
}

double JSC::StochasticSpaceTimeMutatorScheduler::beginCollection(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double result;
  char v10;
  double v11;
  double v12;

  if (*((_DWORD *)this + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x1985FC494);
  }
  *((_DWORD *)this + 4) = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = (double)*(unint64_t *)(v2 + 80);
  *((double *)this + 9) = v3;
  v4 = (double)*(unint64_t *)(v2 + 96);
  if (v3 >= v4)
    v4 = v3;
  v5 = *((double *)&xmmword_1ECF4C3B8 + 1) * v4;
  *((double *)this + 10) = *((double *)&xmmword_1ECF4C3B8 + 1) * v4;
  if ((_BYTE)word_1ECF4C5CC)
  {
    v11 = (v5 - v3) * 0.0009765625;
    v12 = v3 * 0.0009765625;
    WTF::dataLog<char [4],double,char [6],double,char [4]>(&v12, &v11);
  }
  v6 = mach_absolute_time();
  v8 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v8 != -1)
  {
    v12 = COERCE_DOUBLE(&v10);
    v11 = COERCE_DOUBLE(&v12);
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v7) = dword_1ECF4400C;
  result = (double)(v6 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v7 * 1000000000.0);
  *((double *)this + 11) = result;
  return result;
}

uint64_t WTF::dataLog<char [4],double,char [6],double,char [4]>(double *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "ca=");
  WTF::PrintStream::printf(v6, "%lf", *a1);
  WTF::PrintStream::printf(v6, "%s", "kb h=");
  WTF::PrintStream::printf(v6, "%lf", *a2);
  WTF::PrintStream::printf(v6, "%s", "kb ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t JSC::StochasticSpaceTimeMutatorScheduler::didStop(uint64_t this)
{
  if ((*(_DWORD *)(this + 16) - 3) <= 0xFFFFFFFD)
  {
    this = 88;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 16) = 1;
  }
  return this;
}

uint64_t JSC::StochasticSpaceTimeMutatorScheduler::willResume(uint64_t this)
{
  if ((*(_DWORD *)(this + 16) - 1) >= 2)
  {
    this = 94;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 16) = 2;
  }
  return this;
}

double JSC::StochasticSpaceTimeMutatorScheduler::didReachTermination(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double result;
  char v6;
  char **v7;
  char *v8;

  v2 = mach_absolute_time();
  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v3) = dword_1ECF4400C;
  result = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v3 * 1000000000.0);
  *((double *)this + 11) = result;
  return result;
}

double JSC::StochasticSpaceTimeMutatorScheduler::didExecuteConstraints(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double result;
  char v8;
  double *v9;
  double v10;

  v2 = mach_absolute_time();
  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v10 = COERCE_DOUBLE(&v8);
    v9 = &v10;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v3) = dword_1ECF4400C;
  v5 = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v3 * 1000000000.0);
  v6 = *((double *)this + 7) * (v5 - *((double *)this + 11));
  if (v6 < *((double *)this + 6))
    v6 = *((double *)this + 6);
  *((double *)this + 8) = v6;
  if ((_BYTE)word_1ECF4C5CC)
  {
    v10 = v6 * 1000.0;
    WTF::dataLog<char [4],double,char [4]>(&v10);
    v6 = *((double *)this + 8);
  }
  result = v5 + v6;
  *((double *)this + 12) = result;
  return result;
}

uint64_t WTF::dataLog<char [4],double,char [4]>(double *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "tp=");
  WTF::PrintStream::printf(v4, "%lf", *a1);
  WTF::PrintStream::printf(v4, "%s", "ms ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::StochasticSpaceTimeMutatorScheduler::synchronousDrainingDidStall(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char **v12;
  char *v13;

  v2 = mach_absolute_time();
  v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v3 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v4 = ((double)*(unint64_t *)(*((_QWORD *)this + 1) + 80) - *((double *)this + 9))
     / (*((double *)this + 10) - *((double *)this + 9));
  if (v4 < 0.0)
  {
    v4 = 0.0;
  }
  else if (v4 > 1.0)
  {
    v4 = 1.0;
  }
  v5 = *(double *)&xmmword_1ECF4C3A8
     + (1.0 - v4) * (*((double *)&xmmword_1ECF4C3A8 + 1) - *(double *)&xmmword_1ECF4C3A8);
  HIDWORD(v6) = DWORD1(xmmword_1ECF4C3B8);
  if (v5 < *(double *)&xmmword_1ECF4C3B8)
  {
    v7 = INFINITY;
  }
  else
  {
    LODWORD(v6) = dword_1ECF4400C;
    v7 = (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v6 * 1000000000.0);
    v8 = *((_QWORD *)this + 5);
    v9 = *((_QWORD *)this + 4) ^ (*((_QWORD *)this + 4) << 23);
    v10 = (v8 >> 26) ^ (v9 >> 17) ^ v8 ^ v9;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v10;
    if ((double)((v10 + v8) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 >= v5)
      v7 = v7 + *((double *)this + 8);
  }
  *((double *)this + 12) = v7;
}

void JSC::StochasticSpaceTimeMutatorScheduler::timeToStop(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  int v1;
  unint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v8;
  double v9;
  unint64_t v10;
  char v11;
  char **v12;
  char *v13;

  v1 = *((_DWORD *)this + 4);
  if (v1 != 2)
  {
    if (!v1)
      return;
    if (v1 != 1)
    {
      __break(0xC471u);
      return;
    }
    goto LABEL_21;
  }
  mach_absolute_time();
  v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v3 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v4 = *((_QWORD *)this + 1);
  v5 = ((double)*(unint64_t *)(v4 + 80) - *((double *)this + 9))
     / (*((double *)this + 10) - *((double *)this + 9));
  v6 = 0.0;
  if (v5 <= 1.0 && v5 >= 0.0)
    v6 = ((double)*(unint64_t *)(v4 + 80) - *((double *)this + 9))
       / (*((double *)this + 10) - *((double *)this + 9));
  if (v5 > 1.0)
    v8 = 1.0;
  else
    v8 = ((double)*(unint64_t *)(v4 + 80) - *((double *)this + 9))
       / (*((double *)this + 10) - *((double *)this + 9));
  if (v5 < 0.0)
    v8 = v6;
  if (v5 > 1.0)
    v9 = v8;
  else
    v9 = v6;
  if (*(double *)&xmmword_1ECF4C3A8
     + (1.0 - v9) * (*((double *)&xmmword_1ECF4C3A8 + 1) - *(double *)&xmmword_1ECF4C3A8) < *(double *)&xmmword_1ECF4C3B8)
  {
LABEL_21:
    mach_absolute_time();
    v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v10 != -1)
    {
      v13 = &v11;
      v12 = &v13;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
  }
}

void JSC::StochasticSpaceTimeMutatorScheduler::timeToResume(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  int v1;

  v1 = *((_DWORD *)this + 4);
  if (v1 != 1)
  {
    if (v1 == 2 || v1 == 0)
      WTF::MonotonicTime::now(this);
    else
      __break(0xC471u);
  }
}

uint64_t JSC::StochasticSpaceTimeMutatorScheduler::log(JSC::StochasticSpaceTimeMutatorScheduler *this)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  _QWORD v8[2];
  const char *v9;
  uint64_t v10;
  _QWORD v11[2];

  mach_absolute_time();
  v2 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v2 != -1)
  {
    v11[0] = v8;
    v9 = (const char *)v11;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v3 = *((double *)this + 9);
  v4 = *((double *)this + 10);
  v5 = (double)*(unint64_t *)(*((_QWORD *)this + 1) + 80) - v3;
  *(double *)&v11[1] = v5 * 0.0009765625;
  v11[0] = "%.0lf";
  v6 = v5 / (v4 - v3);
  if (v6 < 0.0)
  {
    v9 = "%.3lf";
    v10 = 0;
    v6 = 0.0;
  }
  else
  {
    v9 = "%.3lf";
    if (v6 > 1.0)
    {
      v10 = 0x3FF0000000000000;
      v6 = 1.0;
    }
    else
    {
      v10 = *(_QWORD *)&v6;
    }
  }
  v8[0] = "%.3lf";
  *(double *)&v8[1] = *(double *)&xmmword_1ECF4C3A8
                    + (1.0 - v6) * (*((double *)&xmmword_1ECF4C3A8 + 1) - *(double *)&xmmword_1ECF4C3A8);
  return WTF::dataLog<char [3],WTF::FormatImpl<char const*,double>,char [4],char [4],WTF::FormatImpl<char const*,double>,char [2],char [4],WTF::FormatImpl<char const*,double>,char [2]>((uint64_t)v11, (uint64_t)&v9, (uint64_t)v8);
}

uint64_t JSC::StochasticSpaceTimeMutatorScheduler::endCollection(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void JSC::SlotVisitor::appendUnbarriered(JSC::SlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;

  if (!a2)
    return;
  if ((a2 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 - 79) & 1) != 0 && !*((_QWORD *)this + 21))
      return;
LABEL_10:
    JSC::SlotVisitor::appendSlow((uint64_t)this, a2, 0, a4, a5, a6, a7, a8);
    return;
  }
  v10 = *((_DWORD *)this + 33);
  if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) != v10)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000), v10, a3, a4, a5, a6, a7, a8);
  if (((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) == 0
    || *((_QWORD *)this + 21))
  {
    goto LABEL_10;
  }
}

uint64_t JSC::SlotVisitor::isFirstVisit(JSC::SlotVisitor *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t JSC::SlotVisitor::isMarked(JSC::SlotVisitor *this, unint64_t a2)
{
  if ((a2 & 8) != 0)
    return *(_BYTE *)(a2 - 79) & 1;
  if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*((_QWORD *)this + 10) + 240))
    return (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1;
  return 0;
}

uint64_t JSC::SlotVisitor::isMarked(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (*(_DWORD *)(a2 + 32) != *(_DWORD *)(result + 132))
    return 0;
  v3 = ((unint64_t)(a3 - a2) >> 4);
  if (v3 < 0x400)
    return (*(_QWORD *)(a2 + ((v3 >> 3) & 0x1FFFFFF8) + 40) >> ((unint64_t)(a3 - a2) >> 4)) & 1;
  __break(1u);
  return result;
}

uint64_t JSC::SlotVisitor::isMarked(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 33) & 1;
}

void JSC::SlotVisitor::appendHiddenUnbarriered(JSC::SlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int **v10;
  int v11;
  unsigned int **v12;
  unint64_t *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v31;
  int v32;

  if (!a2)
    return;
  if ((a2 & 8) == 0)
  {
    v10 = (unsigned int **)(a2 & 0xFFFFFFFFFFFFC000);
    v11 = *((_DWORD *)this + 33);
    if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000), v11, a3, a4, a5, a6, a7, a8);
    v12 = &v10[(a2 >> 10) & 0xF];
    v14 = v12[5];
    v13 = (unint64_t *)(v12 + 5);
    v15 = 1 << (a2 >> 4);
    if (((unint64_t)v14 & v15) != 0)
      return;
    do
    {
      while (1)
      {
        v16 = *v13;
        if ((*v13 & v15) != 0)
          return;
        v17 = __ldxr(v13);
        if (v17 == v16)
          break;
        __clrex();
      }
    }
    while (__stxr(v16 | v15, v13));
    *(_BYTE *)(a2 + 7) = 2;
    v18 = (unsigned __int16)(*(_WORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
    if ((v18 & 0x10000) == 0)
      goto LABEL_12;
    v28 = *((_QWORD *)*v10 + 3);
    v29 = (unsigned __int8 *)(v28 + 56);
    if (__ldaxr((unsigned __int8 *)(v28 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v29))
    {
      goto LABEL_26;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v28 + 56);
LABEL_26:
    v31 = *(_QWORD *)(v28 + 32) + 40 * ((*v10)[3] >> 5);
    *(_DWORD *)(v31 + 36) |= 1 << (*v10)[3];
    v32 = __ldxr(v29);
    if (v32 == 1)
    {
      if (!__stlxr(0, v29))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v28 + 56), 0, a3, a4, a5, a6, a7, a8);
LABEL_12:
    v20 = (_QWORD *)((char *)this + 24);
    v19 = *((_QWORD *)this + 3);
    ++*((_QWORD *)this + 9);
    v21 = *((_QWORD *)this + 17) + 16 * **v10;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(a2 - 79) & 1) == 0)
  {
    v23 = (unsigned __int8 *)(a2 - 79);
    do
    {
      if (__ldaxr(v23))
      {
        __clrex();
        return;
      }
    }
    while (__stlxr(1u, v23));
    *(_BYTE *)(a2 + 7) = 2;
    v20 = (_QWORD *)((char *)this + 24);
    v19 = *((_QWORD *)this + 3);
    ++*((_QWORD *)this + 9);
    v21 = *((_QWORD *)this + 17) + *(_QWORD *)(a2 - 88);
LABEL_13:
    v20[14] = v21;
    if (v19 == 510)
    {
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
      *v25 = 0;
      v25[1] = 0;
      ++*((_QWORD *)this + 4);
      v26 = *((_QWORD *)this + 1);
      v27 = (_QWORD *)((char *)this + 16);
      if (v26)
        v27 = (_QWORD *)*((_QWORD *)this + 1);
      *v27 = v25;
      *((_QWORD *)this + 1) = v25;
      v19 = 0;
      *v25 = 0;
      v25[1] = v26;
    }
    v22 = *(v20 - 2) + 8 * v19;
    *v20 = v19 + 1;
    *(_QWORD *)(v22 + 16) = a2;
  }
}

uint64_t JSC::SlotVisitor::reportExtraMemoryVisited(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 184))
  {
    *(_QWORD *)(this + 144) += a2;
    v2 = *(_QWORD *)(this + 160);
    v3 = __CFADD__(v2, a2);
    v4 = v2 + a2;
    if (v3)
      *(_BYTE *)(this + 152) = 1;
    else
      *(_QWORD *)(this + 160) = v4;
  }
  return this;
}

uint64_t JSC::SlotVisitor::reportExternalMemoryVisited(uint64_t this, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  if (*(_BYTE *)(this + 184))
  {
    v2 = (unint64_t *)(*(_QWORD *)(this + 80) + 888);
    do
    {
      while (1)
      {
        v3 = *v2;
        v4 = __ldxr(v2);
        if (v4 == v3)
          break;
        __clrex();
      }
    }
    while (__stxr(v3 + a2, v2));
  }
  return this;
}

uint64_t JSC::SlotVisitor::mutatorIsStopped(JSC::SlotVisitor *this)
{
  return *((unsigned __int8 *)this + 185);
}

void JSC::SlotVisitor::appendJSCellOrAuxiliary(JSC::HeapCell *)::$_0::operator() const(JSC::JSCell *)::{lambda(char const*)#1}::operator()(uint64_t *a1, const char *a2)
{
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  int *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  const char *v10;
  int v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  unint64_t v14;
  WTF::PrintStream *v15;
  const char *v16;
  WTF::PrintStream *v17;
  uint64_t *v18;
  WTF::PrintStream *v19;
  int v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  uint64_t v23;
  WTF::PrintStream *v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  WTF::PrintStream *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  const char *v32;
  WTF::PrintStream *v33;
  unint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  const char *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  WTF::PrintStream *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  WTF::PrintStream *v44;
  const char *v45;
  WTF::PrintStream *v46;
  int v47;
  WTF::PrintStream *v48;
  WTF::PrintStream *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF::PrintStream *v53;
  const char *v54;
  WTF::PrintStream *v55;
  int v56;
  WTF::PrintStream *v57;
  int v58;
  WTF::PrintStream *v59;
  const char *v60;
  char v61;
  char **v62;
  char *v63;

  v4 = *a1;
  v5 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v5 != -1)
  {
    v63 = &v61;
    v62 = &v63;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v62, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v6 = (const char *)a1[1];
  v7 = (int *)a1[2];
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v9, "%s", a2);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v10 = (const char *)*(unsigned __int8 *)(*(_QWORD *)(v4 + 80) + 155);
  if ((_DWORD)v10 == 255)
    v11 = 0;
  else
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 80) + 155);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v12, "%s", "GC type: ");
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  v15 = v13;
  if ((_DWORD)v10 == 255)
  {
    WTF::PrintStream::printf(v13, "%s", "<nullopt>");
  }
  else
  {
    if (v11)
    {
      if (v11 != 1)
      {
        __break(0xC471u);
        goto LABEL_18;
      }
      v16 = "Full";
    }
    else
    {
      v16 = "Eden";
    }
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v13 + 32))(v13);
    WTF::PrintStream::printf(v17, "%s", v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 40))(v15);
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  v10 = "\n";
  WTF::PrintStream::printf(v12, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v18 = *(uint64_t **)v6;
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v19, "%s", "Object at: ");
  WTF::PrintStream::printf(v19, "%p", v18);
  WTF::PrintStream::printf(v19, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v20 = *v7;
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v21, "%s", "Structure ID: ");
  WTF::PrintStream::printf(v21, "%u", v20);
  WTF::PrintStream::printf(v21, "%s", " (");
  WTF::PrintStream::printf(v21, "%p", (const void *)(16 * (v20 & 0xFFFFFFFE)));
  WTF::PrintStream::printf(v21, "%s", ")\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v22, "%s", "Object contents:");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v23 = **(_QWORD **)v6;
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v24, "%s", " ");
  WTF::PrintStream::printfVariableFormat(v24, "0x%016llx", v23);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v25 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v26, "%s", " ");
  WTF::PrintStream::printfVariableFormat(v26, "0x%016llx", v25);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v27, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  v14 = *(_QWORD *)v6;
  if ((*(_QWORD *)v6 & 8) != 0)
    goto LABEL_19;
  v28 = v14 & 0xFFFFFFFFFFFFC000;
  if (*(_DWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 0x20) == *(_DWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8)
                                                                     + 432))
  {
    v29 = v14 - v28;
    v14 = ((v14 - v28) >> 4);
    if (v14 >= 0x400)
      goto LABEL_18;
    v30 = (*(_QWORD *)(v28 + ((v14 >> 3) & 0x1FFFFFF8) + 40) >> (v29 >> 4)) & 1;
  }
  else
  {
    LODWORD(v30) = 0;
  }
  while (1)
  {
    v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v31, "%s", "Is marked: ");
    if ((_DWORD)v30)
      v32 = "true";
    else
      v32 = "false";
    v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 32))(v31);
    WTF::PrintStream::printf(v33, "%s", v32);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v31 + 40))(v31);
    WTF::PrintStream::printf(v31, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    if ((v28 & 1) != 0)
    {
      LODWORD(v35) = *(_BYTE *)(v28 + 31) & 1;
    }
    else if (*(_DWORD *)(v28 + 36) == *(_DWORD *)(*(_QWORD *)(v28 + 8) + 436))
    {
      v14 = *(_QWORD *)v6 - v28;
      v34 = (v14 >> 4);
      if (v34 >= 0x400)
        goto LABEL_18;
      v35 = (*(_QWORD *)(v28 + ((v34 >> 3) & 0x1FFFFFF8) + 168) >> (v14 >> 4)) & 1;
    }
    else
    {
      LODWORD(v35) = 0;
    }
    v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v36, "%s", "Is newly allocated: ");
    if ((_DWORD)v35)
      v37 = "true";
    else
      v37 = "false";
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v36 + 32))(v36);
    WTF::PrintStream::printf(v38, "%s", v37);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v36 + 40))(v36);
    WTF::PrintStream::printf(v36, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    if (!v28 || (v28 & 1) != 0)
      goto LABEL_43;
    v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v39, "%s", "Block: ");
    WTF::PrintStream::printf(v39, "%p", (const void *)v28);
    WTF::PrintStream::printf(v39, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    JSC::MarkedBlock::Handle::dumpState(*(JSC::MarkedBlock::Handle **)v28, v8);
    v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v40, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    v14 = *(_QWORD *)v6 - v28;
    v41 = (v14 >> 4);
    if (v41 < 0x400)
    {
      v42 = v14 >> 4;
      v60 = v6;
      v6 = v10;
      v10 = (const char *)v4;
      v43 = *(_QWORD *)(v28 + ((v41 >> 3) & 0x1FFFFFF8) + 40);
      v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      WTF::PrintStream::printf(v44, "%s", "Is marked raw: ");
      v45 = ((v43 >> v42) & 1) != 0 ? "true" : "false";
      v46 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v44 + 32))(v44);
      WTF::PrintStream::printf(v46, "%s", v45);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v44 + 40))(v44);
      WTF::PrintStream::printf(v44, "%s", v6);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      v47 = *(_DWORD *)(v28 + 32);
      v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      WTF::PrintStream::printf(v48, "%s", "Marking version: ");
      WTF::PrintStream::printf(v48, "%u", v47);
      WTF::PrintStream::printf(v48, "%s", v6);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      v4 = *(unsigned int *)(*((_QWORD *)v10 + 10) + 240);
      v49 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      WTF::PrintStream::printf(v49, "%s", "Heap marking version: ");
      WTF::PrintStream::printf(v49, "%u", v4);
      WTF::PrintStream::printf(v49, "%s", v6);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      v14 = *(_QWORD *)v60 - v28;
      v50 = (v14 >> 4);
      if (v50 < 0x400)
      {
        v51 = v14 >> 4;
        v52 = *(_QWORD *)(v28 + ((v50 >> 3) & 0x1FFFFFF8) + 168);
        v53 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
        WTF::PrintStream::printf(v53, "%s", "Is newly allocated raw: ");
        if (((v52 >> v51) & 1) != 0)
          v54 = "true";
        else
          v54 = "false";
        v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 32))(v53);
        WTF::PrintStream::printf(v55, "%s", v54);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 40))(v53);
        WTF::PrintStream::printf(v53, "%s", v6);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
        v56 = *(_DWORD *)(v28 + 36);
        v57 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
        WTF::PrintStream::printf(v57, "%s", "Newly allocated version: ");
        WTF::PrintStream::printf(v57, "%u", v56);
        WTF::PrintStream::printf(v57, "%s", v6);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
        v58 = *(_DWORD *)(*((_QWORD *)v10 + 10) + 244);
        v59 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
        WTF::PrintStream::printf(v59, "%s", "Heap newly allocated version: ");
        WTF::PrintStream::printf(v59, "%u", v58);
        WTF::PrintStream::printf(v59, "%s", v6);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x1985FDA90);
      }
    }
LABEL_18:
    __break(1u);
LABEL_19:
    v28 = (v14 - 112) | 1;
    LODWORD(v30) = *(_BYTE *)(v28 + 0x20) & 1;
  }
}

uint64_t JSC::SlotVisitor::performIncrementOfDraining(unsigned long)::$_3::operator()(uint64_t a1, _QWORD *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = a2[2];
  if (!v11 && !*(_QWORD *)(*a2 + 8)
    || *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 8) + 144) + ****(_QWORD ****)a1 >= **(_QWORD **)(*(_QWORD *)a1 + 8))
  {
    return 0;
  }
  if (!v11)
  {
    v21 = (uint64_t *)*a2;
    if (*a2)
    {
      v22 = *v21;
      v23 = (_QWORD *)v21[1];
      if (*v21)
      {
        *(_QWORD *)(v22 + 8) = v23;
        v23 = (_QWORD *)v21[1];
      }
      else
      {
        *a2 = v23;
      }
      if (!v23)
        v23 = a2 + 1;
      *v23 = v22;
    }
    WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v24 = a2[3] - 1;
    a2[2] = 510;
    a2[3] = v24;
  }
  *(_BYTE *)(v10 + 184) = v10 + 8 == (_QWORD)a2;
  for (i = HIDWORD(qword_1ECF4C570); i; --i)
  {
    v13 = a2[2];
    if (!v13
      || *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 8) + 144) + ****(_QWORD ****)a1 >= **(_QWORD **)(*(_QWORD *)a1 + 8))
    {
      break;
    }
    v14 = v13 - 1;
    v15 = *a2 + 8 * v14;
    a2[2] = v14;
    v16 = *(unsigned __int8 **)(v15 + 16);
    v17 = (v16 & 8) != 0
        ? *((_QWORD *)v16 - 11)
        : 16 * **(unsigned int **)((unint64_t)v16 & 0xFFFFFFFFFFFFC000);
    **(_QWORD **)(a1 + 16) += v17;
    *(_QWORD *)(v10 + 176) = v16;
    v16[7] = 0;
    __dmb(0xBu);
    v18 = v16[5];
    switch(v18)
    {
      case 24:
        JSC::JSFinalObject::visitChildren((JSC::JSFinalObject *)v16, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
        break;
      case 2:
        JSC::JSString::visitChildren((JSC::JSString *)v16, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
        break;
      case 36:
        JSC::JSObject::visitChildren((JSC::JSObject *)v16, (JSC::JSCell *)v10, a3, a4, a5, a6, a7, a8);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0xD0))(v16, v10);
        break;
    }
    v19 = *(_QWORD *)(v10 + 168);
    if (v19)
    {
      if (*(_BYTE *)(v10 + 184))
        (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v19 + 16))(v19, v16);
    }
    *(_QWORD *)(v10 + 176) = 0;
  }
  return 1;
}

uint64_t WTF::dataLog<WTF::CString,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  const char *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = v4;
  if (*a1)
    v6 = (const char *)(*a1 + 16);
  else
    v6 = 0;
  WTF::PrintStream::printf(v4, "%s", v6);
  WTF::PrintStream::printf(v5, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::PrintStream::printImpl<WTF::PointerListDump<JSC::MarkStackArray>,char [14],WTF::PointerListDump<JSC::MarkStackArray>,char [2]>(WTF::PrintStream *this, uint64_t **a2, const char *a3, uint64_t **a4, const char *a5)
{
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v9 = **a2;
  v10 = (*a2)[2];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v16 = 0;
    v17 = (uint64_t)(a2 + 1);
    while (1)
    {
      while (1)
      {
        v22 = *(_DWORD **)(v9 + 8 * v16 + 16);
        v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::JSCell>>(v18, v17, &v22);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        if (++v16 < v10)
          break;
        v16 = 0;
        v9 = *(_QWORD *)(v9 + 8);
        v10 = 510;
        if (!v9)
          goto LABEL_14;
      }
      if (!v9)
      {
LABEL_14:
        if (!v16)
          break;
      }
    }
  }
  WTF::PrintStream::printf(this, "%s", a3);
  v12 = **a4;
  v13 = (*a4)[2];
  if (v13)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v19 = 0;
    v20 = (uint64_t)(a4 + 1);
    while (1)
    {
      while (1)
      {
        v22 = *(_DWORD **)(v12 + 8 * v19 + 16);
        v21 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)this + 32))(this);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::PointerDump<JSC::JSCell>>(v21, v20, &v22);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)this + 40))(this);
        if (++v19 < v13)
          break;
        v19 = 0;
        v12 = *(_QWORD *)(v12 + 8);
        v13 = 510;
        if (!v12)
          goto LABEL_20;
      }
      if (!v12)
      {
LABEL_20:
        if (!v19)
          return WTF::PrintStream::printf(this, "%s", a5);
      }
    }
  }
  return WTF::PrintStream::printf(this, "%s", a5);
}

void JSC::StopIfNecessaryTimer::doWork(JSC::StopIfNecessaryTimer *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char **v22;
  char *v23;

  v10 = (unsigned __int8 *)this + 33;
  if (__ldaxr((unsigned __int8 *)this + 33))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 33);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  *((_BYTE *)this + 34) = 0;
  v12 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
  if (v12 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
  }
  JSC::JSRunLoopTimer::Manager::cancelTimer((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, this, a3, a4, a5, a6, a7, a8);
  v20 = __ldxr(v10);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v10))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v14, v15, v16, v17, v18, v19);
  __dmb(0xAu);
  if (*((_DWORD *)a2 + 274) != 4)
    JSC::Heap::stopIfNecessarySlow((JSC::VM *)((char *)a2 + 192), v13, v14, v15, v16, v17, v18, v19);
}

uint64_t JSC::StopIfNecessaryTimer::disable(uint64_t this)
{
  *(_BYTE *)(this + 35) = 1;
  return this;
}

void JSC::StructureAlignedMemoryAllocator::~StructureAlignedMemoryAllocator(JSC::StructureAlignedMemoryAllocator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (*((_DWORD *)this + 13))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
      v11 = *((_QWORD *)this + 8);
      if (v11 >= 0)
        v12 = (char *)(2 * v11 + 8);
      else
        v12 = (char *)this + 64;
      if (((*(_QWORD *)&v12[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v9) & 1) == 0)
        (*(void (**)(JSC::StructureAlignedMemoryAllocator *, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9));
      (*(void (**)(JSC::StructureAlignedMemoryAllocator *, uint64_t))(*(_QWORD *)this + 72))(this, v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 13));
  }
  *(_QWORD *)this = off_1E3590CB0;
  v13 = *((_QWORD *)this + 8);
  if ((v13 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v13, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 7);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (*((_DWORD *)this + 13))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
      v11 = *((_QWORD *)this + 8);
      if (v11 >= 0)
        v12 = (char *)(2 * v11 + 8);
      else
        v12 = (char *)this + 64;
      if (((*(_QWORD *)&v12[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v9) & 1) == 0)
        (*(void (**)(JSC::StructureAlignedMemoryAllocator *, _QWORD))(*(_QWORD *)this + 80))(this, *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9));
      (*(void (**)(JSC::StructureAlignedMemoryAllocator *, uint64_t))(*(_QWORD *)this + 72))(this, v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 13));
  }
  *(_QWORD *)this = off_1E3590CB0;
  v13 = *((_QWORD *)this + 8);
  if ((v13 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v13, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 7);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::StructureAlignedMemoryAllocator::dump(JSC::StructureAlignedMemoryAllocator *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Structure(");
  WTF::PrintStream::printf(v4, "%p", this);
  WTF::PrintStream::printf(v4, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::StructureAlignedMemoryAllocator::tryAllocateMemory(JSC::StructureAlignedMemoryAllocator *this)
{
  return 0;
}

void JSC::StructureAlignedMemoryAllocator::freeMemory(JSC::StructureAlignedMemoryAllocator *this, void *a2)
{
  __break(0xC471u);
}

void JSC::StructureAlignedMemoryAllocator::tryReallocateMemory(JSC::StructureAlignedMemoryAllocator *this, void *a2)
{
  __break(0xC471u);
}

void *JSC::StructureAlignedMemoryAllocator::tryMallocBlock(JSC::StructureAlignedMemoryAllocator *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WTF::tryFastAlignedMalloc(0x4000uLL, 0x4000uLL, a3, a4, a5, a6, a7, a8);
}

void JSC::StructureAlignedMemoryAllocator::freeBlock(JSC::StructureAlignedMemoryAllocator *this, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::fastAlignedFree((unint64_t)a2, a2, a3, a4, a5, a6, a7, a8);
}

int *JSC::StructureAlignedMemoryAllocator::decommitBlock(JSC::StructureAlignedMemoryAllocator *this, void *a2)
{
  int *result;

  do
  {
    result = (int *)madvise(a2, 0x4000uLL, 7);
    if ((_DWORD)result != -1)
      break;
    result = __error();
  }
  while (*result == 35);
  return result;
}

void JSC::Subspace::~Subspace(JSC::Subspace *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  *(_QWORD *)this = off_1E3591150;
  v9 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
}

{
  _DWORD *v9;

  *(_QWORD *)this = off_1E3591150;
  v9 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
}

{
  _DWORD *v9;

  *(_QWORD *)this = off_1E3591150;
  v9 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Subspace::parallelNotEmptyMarkedBlockSource@<X0>(JSC::Subspace *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  v5 = (unsigned int *)(v4 + 8);
  v6 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = off_1E35912B0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  result = WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  do
    v9 = __ldaxr(v5);
  while (__stlxr(v9 + 1, v5));
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35912D8;
  do
    v10 = __ldaxr(v5);
  while (__stlxr(v10 + 1, v5));
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 33) = 0;
  do
  {
    v11 = __ldaxr(v5);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v5));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *a2 = v8;
  do
  {
    v13 = __ldaxr(v5);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v5));
  if (!v14)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t JSC::SynchronousStopTheWorldMutatorScheduler::SynchronousStopTheWorldMutatorScheduler(uint64_t this)
{
  *(_QWORD *)this = off_1E3591188;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t JSC::SynchronousStopTheWorldMutatorScheduler::state(JSC::SynchronousStopTheWorldMutatorScheduler *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t JSC::SynchronousStopTheWorldMutatorScheduler::beginCollection(uint64_t this)
{
  if (*(_DWORD *)(this + 8))
  {
    this = 46;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(this + 8) = 1;
  }
  return this;
}

double JSC::SynchronousStopTheWorldMutatorScheduler::timeToStop(JSC::SynchronousStopTheWorldMutatorScheduler *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v5;
  char **v6;
  char *v7;

  if (!*((_DWORD *)this + 2))
    return INFINITY;
  v1 = mach_absolute_time();
  v3 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v2) = dword_1ECF4400C;
  return (double)(v1 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v2 * 1000000000.0);
}

double JSC::SynchronousStopTheWorldMutatorScheduler::timeToResume(JSC::SynchronousStopTheWorldMutatorScheduler *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char **v6;
  char *v7;

  if (*((_DWORD *)this + 2))
    return INFINITY;
  v2 = mach_absolute_time();
  v4 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v4 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v3) = dword_1ECF4400C;
  return (double)(v2 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v3 * 1000000000.0);
}

uint64_t JSC::SynchronousStopTheWorldMutatorScheduler::endCollection(uint64_t this)
{
  if (*(_DWORD *)(this + 8) == 1)
  {
    *(_DWORD *)(this + 8) = 0;
  }
  else
  {
    this = 62;
    __break(0xC471u);
  }
  return this;
}

JSC::VerifierSlotVisitor *JSC::VerifierSlotVisitor::VerifierSlotVisitor(JSC::VerifierSlotVisitor *this, JSC::Heap *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  *(_QWORD *)this = off_1E3591200;
  v4 = WTF::fastMalloc((WTF *)0x19);
  *(_DWORD *)v4 = 1;
  *(_OWORD *)(v4 + 8) = xmmword_1991569A0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)this = off_1E3591008;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v5 = 0;
  v5[1] = 0;
  v6 = *((_QWORD *)this + 1);
  v7 = (_QWORD *)((char *)this + 16);
  if (v6)
    v7 = (_QWORD *)*((_QWORD *)this + 1);
  *v7 = v5;
  *((_QWORD *)this + 1) = v5;
  *v5 = 0;
  v5[1] = v6;
  ++*((_QWORD *)this + 4);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
  *v8 = 0;
  v8[1] = 0;
  v16 = *((_QWORD *)this + 5);
  v17 = (_QWORD *)((char *)this + 48);
  if (v16)
    v17 = (_QWORD *)*((_QWORD *)this + 5);
  *v17 = v8;
  *((_QWORD *)this + 5) = v8;
  *v8 = 0;
  v8[1] = v16;
  ++*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = a2;
  *((_QWORD *)this + 11) = 0;
  ++*(_DWORD *)v4;
  *((_QWORD *)this + 12) = v4;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 160;
  *((_DWORD *)this + 32) = 0;
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v9, v10, v11, v12, v13, v14, v15);
  else
    --*(_DWORD *)v4;
  *(_QWORD *)this = off_1E3591200;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 176;
  *((_QWORD *)this + 21) = 4;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 240) = 0;
  WTF::ConcurrentPtrHashSet::initialize((JSC::VerifierSlotVisitor *)((char *)this + 160));
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = (char *)this + 280;
  *((_QWORD *)this + 34) = 32;
  *((_BYTE *)this + 131) = 1;
  return this;
}

void JSC::VerifierSlotVisitor::~VerifierSlotVisitor(JSC::VerifierSlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  JSC::VerifierSlotVisitor *v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  JSC::VerifierSlotVisitor *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t StatusReg;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int **v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;

  *(_QWORD *)this = off_1E3591200;
  for (i = *(uint64_t **)(*((_QWORD *)this + 10) + 304); i; i = (uint64_t *)i[10])
  {
    v10 = *((unsigned int *)i + 12);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = i[4];
      v13 = (unint64_t)(v10 + 31) >> 5;
      do
      {
        v14 = *(_DWORD *)(v12 + 40 * v11);
        if (v14)
        {
          v15 = 32 * v11;
          v16 = *((unsigned int *)i + 3);
          v17 = *i;
          do
          {
            if ((v14 & 1) != 0)
            {
              if (v15 >= v16)
              {
                __break(0xC471u);
                return;
              }
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v15) + 88) + 296) = 0;
            }
            ++v15;
            v18 = v14 > 1;
            v14 >>= 1;
          }
          while (v18);
        }
        ++v11;
      }
      while (v11 != v13);
    }
  }
  v19 = *((_QWORD *)this + 31);
  v20 = *((_QWORD *)this + 32);
  v21 = (unsigned int **)*((_QWORD *)this + 33);
  v22 = &v21[v20];
  if (v19 <= v20)
  {
    if (v19 != v20)
    {
      v27 = &v21[v19];
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          v29 = v28 + 2;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            atomic_store(1u, v28 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
          }
        }
        ++v27;
      }
      while (v27 != v22);
    }
  }
  else
  {
    if (v20)
    {
      do
      {
        v23 = *v21;
        *v21 = 0;
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v23 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      v21 = (unsigned int **)*((_QWORD *)this + 33);
      v19 = *((_QWORD *)this + 31);
    }
    v32 = *((unsigned int *)this + 68);
    if (v19 != v32)
    {
      v63 = &v21[v32];
      v64 = &v21[v19];
      do
      {
        v65 = *v64;
        *v64 = 0;
        if (v65)
        {
          v66 = v65 + 2;
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            atomic_store(1u, v65 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
          }
        }
        ++v64;
      }
      while (v64 != v63);
    }
  }
  v33 = (JSC::VerifierSlotVisitor *)*((_QWORD *)this + 33);
  if ((JSC::VerifierSlotVisitor *)((char *)this + 280) != v33 && v33 != 0)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree((unint64_t)v33, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v35 = *((unsigned int *)this + 43);
  if ((_DWORD)v35)
  {
    v36 = (unint64_t *)*((_QWORD *)this + 20);
    v37 = 8 * v35;
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
        WTF::fastFree(v38, (void *)a2, a3, a4, a5, a6, a7, a8);
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  v39 = (JSC::VerifierSlotVisitor *)*((_QWORD *)this + 20);
  if ((JSC::VerifierSlotVisitor *)((char *)this + 176) != v39 && v39 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree((unint64_t)v39, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v41 = *((_QWORD *)this + 19);
  if (v41)
  {
    v42 = *(unsigned int *)(v41 - 4);
    if ((_DWORD)v42)
    {
      v43 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if (*(_QWORD *)(v41 + 16 * v43) != -1)
        {
          v45 = v41 + 16 * v43;
          v46 = *(_QWORD *)(v45 + 8);
          *(_QWORD *)(v45 + 8) = 0;
          if (v46)
          {
            v47 = *(unsigned int *)(v46 + 148);
            if ((_DWORD)v47)
            {
              v48 = 16 * v47;
              v49 = (unint64_t *)(*(_QWORD *)(v46 + 136) + 8);
              do
              {
                a2 = *v49;
                *v49 = 0;
                if (a2)
                {
                  v50 = *(_QWORD *)(StatusReg + 752);
                  if (v50)
                  {
                    if (!(a2 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
                    {
LABEL_57:
                      v51 = *(unsigned int *)(v50 + 8000);
                      if (v51 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v50, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        *(_QWORD *)(v50 + 8 * v51) = a2 | 0x5000000000000;
                        *(_DWORD *)(v50 + 8000) = v51 + 1;
                      }
                      goto LABEL_59;
                    }
                    if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
                    {
                      a4 = 0;
                    }
                    else
                    {
                      a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                      + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                      + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)a4 == 1)
                        goto LABEL_57;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v50, a2, 1, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
LABEL_59:
                v49 += 2;
                v48 -= 16;
              }
              while (v48);
            }
            v52 = *(_QWORD *)(v46 + 136);
            if (v52)
            {
              *(_QWORD *)(v46 + 136) = 0;
              *(_DWORD *)(v46 + 144) = 0;
              WTF::fastFree(v52, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v46, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        ++v43;
      }
      while (v43 != v42);
    }
    WTF::fastFree(v41 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v53 = *((_QWORD *)this + 18);
  if (v53)
  {
    v54 = *(unsigned int *)(v53 - 4);
    if ((_DWORD)v54)
    {
      v55 = (unint64_t *)(v53 + 8);
      do
      {
        if (*(v55 - 1) != -1)
        {
          v56 = *v55;
          *v55 = 0;
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 16);
            *(_QWORD *)(v56 + 16) = 0;
            if (v57)
              WTF::fastFree(v57, (void *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v56, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v55 += 2;
        --v54;
      }
      while (v54);
    }
    WTF::fastFree(v53 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v58 = *((_QWORD *)this + 17);
  if (v58)
  {
    v59 = *(unsigned int *)(v58 - 4);
    if ((_DWORD)v59)
    {
      v60 = (unint64_t *)(v58 + 8);
      do
      {
        if (*(v60 - 1) != -1)
        {
          v61 = *v60;
          *v60 = 0;
          if (v61)
          {
            v62 = *(_QWORD *)(v61 + 8);
            *(_QWORD *)(v61 + 8) = 0;
            if (v62)
              WTF::fastFree(v62, (void *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v61, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v60 += 2;
        --v59;
      }
      while (v59);
    }
    WTF::fastFree(v58 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractSlotVisitor::~AbstractSlotVisitor(this, (void *)a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::VerifierSlotVisitor::~VerifierSlotVisitor(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::VerifierSlotVisitor::addParallelConstraintTask(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 248);
  v5 = *(_QWORD *)(a1 + 256);
  if (v4)
  {
    if (v5 + 1 != v4)
      goto LABEL_23;
    LODWORD(v6) = *(_DWORD *)(a1 + 272);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 272);
    if (v5)
    {
      if (v5 != v6 - 1)
        goto LABEL_23;
    }
    else
    {
      if ((_DWORD)v6)
        goto LABEL_23;
      v5 = 0;
    }
  }
  v7 = v6;
  v8 = *(char **)(a1 + 264);
  v9 = ((unint64_t)v6 >> 2) + v6;
  if (v9 <= 0xF)
    v9 = 15;
  if (v9 < 0x20)
  {
    v11 = (char *)(a1 + 280);
    *(_QWORD *)(a1 + 264) = a1 + 280;
    *(_DWORD *)(a1 + 272) = 32;
  }
  else
  {
    if (v9 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    v10 = v9 + 1;
    v11 = (char *)WTF::fastMalloc((WTF *)(8 * (v9 + 1)));
    *(_DWORD *)(a1 + 272) = v10;
    *(_QWORD *)(a1 + 264) = v11;
    v4 = *(_QWORD *)(a1 + 248);
    v5 = *(_QWORD *)(a1 + 256);
  }
  if (v4 <= v5)
  {
    memcpy(&v11[8 * v4], &v8[8 * v4], 8 * v5 - 8 * v4);
  }
  else
  {
    memcpy(v11, v8, 8 * v5);
    v12 = *(_QWORD *)(a1 + 248);
    v13 = v12 - v7 + *(unsigned int *)(a1 + 272);
    memcpy((void *)(*(_QWORD *)(a1 + 264) + 8 * v13), &v8[8 * v12], 8 * v7 - 8 * v12);
    *(_QWORD *)(a1 + 248) = v13;
  }
  if ((char *)(a1 + 280) != v8 && v8)
  {
    if (*(char **)(a1 + 264) == v8)
    {
      *(_QWORD *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
    }
    WTF::fastFree((unint64_t)v8, v14, v15, v16, v17, v18, v19, v20);
  }
LABEL_23:
  v22 = *(_QWORD *)(a1 + 256);
  v21 = *(_QWORD *)(a1 + 264);
  v23 = *a2;
  *a2 = 0;
  *(_QWORD *)(v21 + 8 * v22) = v23;
  if (v22 == *(unsigned int *)(a1 + 272) - 1)
    v24 = 0;
  else
    v24 = v22 + 1;
  *(_QWORD *)(a1 + 256) = v24;
}

void JSC::VerifierSlotVisitor::addParallelConstraintTask()
{
  __break(0xC471u);
}

void JSC::VerifierSlotVisitor::append(JSC::VerifierSlotVisitor *this, const JSC::ConservativeRoots *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = *((_QWORD *)a2 + 1);
  if (v8)
  {
    v10 = *(uint64_t **)a2;
    v11 = (char *)this + 16;
    do
    {
      v12 = *v10;
      if (*v10)
      {
        if ((v12 & 8) != 0)
        {
          if (!JSC::VerifierSlotVisitor::testAndSetMarked(this, (JSC::PreciseAllocation *)(v12 - 112), a3, a4, a5, a6, a7, a8))
          {
            v14 = (unsigned __int16 *)(v12 - 78);
LABEL_9:
            if (*v14 <= 0x1FFu)
            {
              v15 = *((_QWORD *)this + 3);
              if (v15 == 510)
              {
                v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                v15 = 0;
                *v17 = 0;
                v17[1] = 0;
                ++*((_QWORD *)this + 4);
                v18 = *((_QWORD *)this + 1);
                if (v18)
                  v19 = (_QWORD *)*((_QWORD *)this + 1);
                else
                  v19 = v11;
                *v19 = v17;
                *((_QWORD *)this + 1) = v17;
                *v17 = 0;
                v17[1] = v18;
              }
              v16 = *((_QWORD *)this + 1) + 8 * v15;
              *((_QWORD *)this + 3) = v15 + 1;
              *(_QWORD *)(v16 + 16) = v12;
            }
          }
        }
        else
        {
          JSC::VerifierSlotVisitor::testAndSetMarked((uint64_t)this, v12 & 0xFFFFFFFFFFFFC000, *v10, a4, a5, a6, a7, a8);
          if ((v13 & 1) == 0)
          {
            v14 = (unsigned __int16 *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFC000) + 8);
            goto LABEL_9;
          }
        }
      }
      ++v10;
      --v8;
    }
    while (v8);
  }
}

void JSC::VerifierSlotVisitor::appendUnbarriered(JSC::VerifierSlotVisitor *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  JSC::JSCell *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;

  if (!a2)
    return;
  if ((a2 & 8) != 0)
  {
    v17 = *((_QWORD *)this + 18);
    if (!v17)
    {
      if (*((_BYTE *)this + 129))
        return;
      goto LABEL_26;
    }
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ~((a2 - 112) << 32) + a2 - 112;
    v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
    v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
    v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
    v23 = *(JSC::JSCell **)(v17 + 16 * v22);
    if (v23 == (JSC::JSCell *)(a2 - 112))
      return;
    v24 = 1;
    while (v23)
    {
      v22 = (v22 + v24) & v18;
      v23 = *(JSC::JSCell **)(v17 + 16 * v22);
      ++v24;
      if (v23 == (JSC::JSCell *)(a2 - 112))
        return;
    }
LABEL_14:
    if (*((_BYTE *)this + 129))
      return;
    if ((a2 & 8) == 0)
    {
      v10 = a2 & 0xFFFFFFFFFFFFC000;
LABEL_17:
      JSC::VerifierSlotVisitor::testAndSetMarked((uint64_t)this, v10, a2, a4, a5, a6, a7, a8);
      if ((v16 & 1) != 0)
        return;
LABEL_27:
      v25 = *((_QWORD *)this + 3);
      if (v25 == 510)
      {
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
        v25 = 0;
        *v27 = 0;
        v27[1] = 0;
        ++*((_QWORD *)this + 4);
        v28 = *((_QWORD *)this + 1);
        v29 = (_QWORD *)((char *)this + 16);
        if (v28)
          v29 = (_QWORD *)*((_QWORD *)this + 1);
        *v29 = v27;
        *((_QWORD *)this + 1) = v27;
        *v27 = 0;
        v27[1] = v28;
      }
      v26 = *((_QWORD *)this + 1) + 8 * v25;
      *((_QWORD *)this + 3) = v25 + 1;
      *(_QWORD *)(v26 + 16) = a2;
      return;
    }
LABEL_26:
    if (JSC::VerifierSlotVisitor::testAndSetMarked(this, (JSC::PreciseAllocation *)(a2 - 112), a3, a4, a5, a6, a7, a8))
      return;
    goto LABEL_27;
  }
  v10 = a2 & 0xFFFFFFFFFFFFC000;
  v11 = *((_QWORD *)this + 19);
  if (!v11)
  {
    if (*((_BYTE *)this + 129))
      return;
    goto LABEL_17;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = v12 & (a2 >> 14);
  v14 = *(_QWORD *)(v11 + 16 * v13);
  if (v14 != v10)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v12;
      v14 = *(_QWORD *)(v11 + 16 * v13);
      ++v15;
      if (v14 == v10)
        goto LABEL_12;
    }
    v13 = *(unsigned int *)(v11 - 4);
  }
LABEL_12:
  if (v13 == *(_DWORD *)(v11 - 4)
    || ((*(_QWORD *)(*(_QWORD *)(v11 + 16 * v13 + 8) + 8 * ((a2 >> 10) & 0xF) + 8) >> (a2 >> 4)) & 1) == 0)
  {
    goto LABEL_14;
  }
}

BOOL JSC::VerifierSlotVisitor::isMarked(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 144);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
  }
  while (v8 != a2);
  return result;
}

uint64_t JSC::VerifierSlotVisitor::isMarked(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(result + 152);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = v4 & (a2 >> 14);
  v6 = *(_QWORD *)(v3 + 16 * v5);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v7) & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      ++v7;
      if (v6 == a2)
        goto LABEL_8;
    }
    v5 = *(unsigned int *)(v3 - 4);
  }
LABEL_8:
  if (v5 == *(_DWORD *)(v3 - 4))
    return 0;
  if (((a3 - a2) & 0xFFFFFC000) == 0)
    return (*(_QWORD *)(*(_QWORD *)(v3 + 16 * v5 + 8) + 8 * (((a3 - a2) >> 10) & 0x3FFFFFF) + 8) >> ((a3 - a2) >> 4)) & 1;
  __break(1u);
  return result;
}

void JSC::VerifierSlotVisitor::didAddOpaqueRoot(JSC::VerifierSlotVisitor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;

  if (!HIBYTE(word_1ECF4C610))
    return;
  v11 = (uint64_t *)((char *)this + 136);
  v10 = *((_QWORD *)this + 17);
  if (v10
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this + 17, 8uLL, 0, a4, a5, a6, a7, a8), (v10 = *v11) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v10 + 16 * v16);
  v18 = (void *)*v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != (void *)a2)
    {
      if (v18 == (void *)-1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (uint64_t *)(v10 + 16 * v16);
      v18 = (void *)*v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          v17 = v19;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_30;
  }
LABEL_13:
  v21 = v17[1];
  *v17 = a2;
  v17[1] = 0;
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;
    if (v22)
      WTF::fastFree(v22, (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v21, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_30;
    goto LABEL_26;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
      goto LABEL_29;
    }
LABEL_26:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_29:
    v17 = WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v11, v29, (uint64_t)v17, a4, a5, a6, a7, a8);
  }
LABEL_30:
  v30 = (_QWORD *)v17[1];
  if (!v30)
  {
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v31 = 0;
    v31[1] = 0;
    v39 = v17[1];
    v17[1] = (uint64_t)v31;
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 8);
      *(_QWORD *)(v39 + 8) = 0;
      if (v40)
        WTF::fastFree(v40, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v39, v32, v33, v34, v35, v36, v37, v38);
      v30 = (_QWORD *)v17[1];
    }
    else
    {
      v30 = v31;
    }
  }
  v41 = *((_QWORD *)this + 11);
  if (v41)
    v42 = *(_QWORD *)(v41 + 8);
  else
    v42 = 0;
  WTF::StackTrace::captureStackTrace((WTF::StackTrace *)0x64, 1, (uint64_t *)&v60);
  v50 = v60;
  v60 = 0;
  v51 = v30[1];
  *v30 = v42;
  v30[1] = v50;
  if (v51)
  {
    WTF::fastFree(v51, v43, v44, v45, v46, v47, v48, v49);
    v59 = v60;
    v60 = 0;
    if (v59)
      WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  }
}

uint64_t JSC::VerifierSlotVisitor::didFindOpaqueRoot(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24) || *(_QWORD *)(v2 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1985FF504);
  }
  *(_QWORD *)(v2 + 8) = a2 | 1;
  return this;
}

uint64_t JSC::VerifierSlotVisitor::dump(JSC::VerifierSlotVisitor *this, WTF::PrintStream *a2)
{
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (*((_QWORD *)this + 7) || *(_QWORD *)(*((_QWORD *)this + 5) + 8))
  {
    result = 224;
    __break(0xC471u);
  }
  else
  {
    v3 = *((_QWORD *)this + 3) + 510 * *((_QWORD *)this + 4) - 510;
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v4, "%s", "Verifier collector stack: ");
    WTF::PrintStream::printf(v4, "%lu", v3);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

uint64_t JSC::VerifierSlotVisitor::dumpMarkerData(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  char v46;
  uint64_t v47;
  const void *v48;
  uint64_t result;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  const void *v59[3];
  char v60;
  const void **v61;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v59[0] = &v60;
    v61 = v59;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v61, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)WTF::s_file + 24))(WTF::s_file);
  v5 = 0;
  while (a2)
  {
    if ((a2 & 8) != 0)
      v6 = (unsigned __int16 *)(a2 - 78);
    else
      v6 = (unsigned __int16 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFC000) + 8);
    if (*v6 <= 0x1FFu)
    {
      v59[0] = (const void *)a2;
      WTF::dataLog<JSC::JSValue,char [2]>((JSC::JSValue *)v59, "\n");
    }
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) != 0)
        v59[0] = "was";
      else
        v59[0] = "was NOT";
      v61 = (const void **)a2;
      WTF::dataLog<char [22],WTF::RawPointer,char [2],char const*,char [9],char [2]>((const void **)&v61, (const char **)v59);
      v50 = a1[18];
      if (!v50)
        goto LABEL_88;
      v51 = *(_DWORD *)(v50 - 8);
      v52 = ~((a2 - 112) << 32) + a2 - 112;
      v53 = (v52 ^ (v52 >> 22)) + ~((v52 ^ (v52 >> 22)) << 13);
      v54 = (9 * (v53 ^ (v53 >> 8))) ^ ((9 * (v53 ^ (v53 >> 8))) >> 15);
      v55 = v51 & (((v54 + ~(v54 << 27)) >> 31) ^ ((_DWORD)v54 + ~((_DWORD)v54 << 27)));
      v56 = *(_QWORD *)(v50 + 16 * v55);
      if (v56 != a2 - 112)
      {
        v57 = 1;
        while (v56)
        {
          v55 = ((_DWORD)v55 + v57) & v51;
          v56 = *(_QWORD *)(v50 + 16 * v55);
          ++v57;
          if (v56 == a2 - 112)
            goto LABEL_85;
        }
        v55 = *(unsigned int *)(v50 - 4);
      }
LABEL_85:
      if (v55 == *(_DWORD *)(v50 - 4))
        goto LABEL_88;
      v58 = *(_QWORD *)(v50 + 16 * v55 + 8);
      if (!*(_QWORD *)(v58 + 16))
        goto LABEL_88;
      v24 = (_QWORD *)(v58 + 8);
    }
    else
    {
      v7 = a2 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a1[10] + 240)
        && ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) != 0)
      {
        v59[0] = "was";
      }
      else
      {
        v59[0] = "was NOT";
      }
      v61 = (const void **)a2;
      WTF::dataLog<char [22],WTF::RawPointer,char [2],char const*,char [9],char [2]>((const void **)&v61, (const char **)v59);
      v17 = a1[19];
      if (!v17)
        goto LABEL_88;
      v18 = *(_DWORD *)(v17 - 8);
      v19 = v18 & (a2 >> 14);
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v20 != v7)
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v18;
          v20 = *(_QWORD *)(v17 + 16 * v19);
          ++v21;
          if (v20 == v7)
            goto LABEL_28;
        }
        v19 = *(unsigned int *)(v17 - 4);
      }
LABEL_28:
      if (v19 == *(_DWORD *)(v17 - 4))
        goto LABEL_88;
      v22 = (a2 >> 4) & 0x3FF;
      v23 = *(_QWORD *)(v17 + 16 * v19 + 8);
      if (*(_DWORD *)(v23 + 148) <= v22)
      {
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x1985FFB1CLL);
      }
      v24 = (_QWORD *)(*(_QWORD *)(v23 + 136) + 16 * v22);
      if (!v24[1])
      {
LABEL_88:
        v61 = (const void **)a2;
        return WTF::dataLog<char [39],WTF::RawPointer,char [2]>((const void **)&v61);
      }
    }
    v61 = (const void **)a2;
    WTF::dataLog<char [26],WTF::RawPointer,char [13]>((const void **)&v61);
LABEL_54:
    v43 = *v24 & 3;
    a2 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
    if (v43)
      v44 = 1;
    else
      v44 = a2 == 0;
    if (v44)
    {
      if (v43 != 1 || a2 == 0)
      {
        if (v43 == 2)
          v46 = *v24 >> 2;
        else
          v46 = 0;
        LOBYTE(v59[0]) = v46;
        if (v46)
          WTF::dataLog<char [15],JSC::RootMarkReason,char [11],char [2]>((unsigned __int8 *)v59);
        else
          WTF::dataLog<char [5],char [2]>();
        v5 = 0;
      }
      else
      {
        v59[0] = (const void *)(*v24 & 0xFFFFFFFFFFFFFFFCLL);
        WTF::dataLog<char [18],WTF::RawPointer,char [5],char [2]>(v59);
        v5 = a2;
      }
      a2 = 0;
    }
    else
    {
      v59[0] = (const void *)(*v24 & 0xFFFFFFFFFFFFFFFCLL);
      WTF::dataLog<char [11],WTF::RawPointer,char [5],char [2]>(v59);
      v5 = 0;
    }
    v47 = v24[1];
    v48 = *(const void **)v47;
    v59[0] = (const void *)(v47 + 8 * *(_QWORD *)(v47 + 8) + 16);
    v59[1] = v48;
    v59[2] = "    ";
    result = WTF::dataLog<WTF::StackTracePrinter,char [2]>((WTF::StackTracePrinter *)v59);
    if (!(v5 | a2))
      return result;
  }
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1985FFB3CLL);
  }
  v8 = a1[10];
  v9 = *(_QWORD *)(v8 + 808);
  v10 = ~(v5 << 32);
  if (v8 + 816 == v9)
  {
    v25 = (unsigned __int8 *)(v8 + 840);
    if (__ldaxr((unsigned __int8 *)(v8 + 840)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_37;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 840);
LABEL_37:
    v34 = WTF::ConcurrentPtrHashSet::containsImpl((WTF::ConcurrentPtrHashSet *)(v8 + 760), (void *)v5);
    v35 = __ldxr(v25);
    if (v35 == 1)
    {
      if (!__stlxr(0, v25))
      {
LABEL_42:
        v27 = "was NOT";
        if (v34)
LABEL_43:
          v27 = "was";
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v28, v29, v30, v31, v32, v33);
    goto LABEL_42;
  }
  v11 = *(_DWORD *)(v9 + 4);
  v12 = ((v10 + v5) ^ ((v10 + v5) >> 22)) + ~(((v10 + v5) ^ ((v10 + v5) >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v11 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  v15 = v14;
  while (1)
  {
    v16 = *(void **)(v9 + 8 * v15 + 16);
    if (!v16)
      break;
    if ((void *)v5 == v16)
      goto LABEL_43;
    v15 = (v15 + 1) & v11;
    if (v15 == v14)
      goto LABEL_91;
  }
  v27 = "was NOT";
LABEL_44:
  v59[0] = v27;
  v61 = (const void **)v5;
  WTF::dataLog<char [29],WTF::RawPointer,char [2],char const*,char [35],char [2]>((const void **)&v61, (const char **)v59);
  v36 = a1[17];
  if (v36)
  {
    v37 = *(_DWORD *)(v36 - 8);
    v38 = ((v10 + v5) ^ ((v10 + v5) >> 22)) + ~(((v10 + v5) ^ ((v10 + v5) >> 22)) << 13);
    v39 = (9 * (v38 ^ (v38 >> 8))) ^ ((9 * (v38 ^ (v38 >> 8))) >> 15);
    v40 = v37 & (((v39 + ~(v39 << 27)) >> 31) ^ ((_DWORD)v39 + ~((_DWORD)v39 << 27)));
    v41 = *(void **)(v36 + 16 * v40);
    if (v41 != (void *)v5)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v37;
        v41 = *(void **)(v36 + 16 * v40);
        ++v42;
        if (v41 == (void *)v5)
          goto LABEL_51;
      }
      v40 = *(unsigned int *)(v36 - 4);
    }
LABEL_51:
    if (v40 != *(_DWORD *)(v36 - 4))
    {
      v24 = *(_QWORD **)(v36 + 16 * v40 + 8);
      if (v24[1])
      {
        v61 = (const void **)v5;
        WTF::dataLog<char [33],WTF::RawPointer,char [11]>((const void **)&v61);
        goto LABEL_54;
      }
    }
  }
  v61 = (const void **)v5;
  return WTF::dataLog<char [46],WTF::RawPointer,char [2]>((const void **)&v61);
}

uint64_t WTF::dataLog<char [26],WTF::RawPointer,char [13]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "In the verifier GC, cell ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " was visited");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [33],WTF::RawPointer,char [11]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "In the verifier GC, opaque root ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " was added");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::VerifierSlotVisitor::isFirstVisit(JSC::VerifierSlotVisitor *this)
{
  return 0;
}

BOOL JSC::VerifierSlotVisitor::isMarked(JSC::VerifierSlotVisitor *this, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  int v14;
  _BOOL8 result;

  if ((a2 & 8) != 0)
  {
    v7 = *((_QWORD *)this + 18);
    if (!v7)
      return 0;
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ~((a2 - 112) << 32) + a2 - 112;
    v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
    v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
    v12 = v8 & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~((_DWORD)v11 << 27)));
    v13 = *(_BYTE **)(v7 + 16 * v12);
    if (v13 == (_BYTE *)(a2 - 112))
    {
      return 1;
    }
    else
    {
      v14 = 1;
      do
      {
        result = v13 != 0;
        if (!v13)
          break;
        v12 = (v12 + v14) & v8;
        v13 = *(_BYTE **)(v7 + 16 * v12);
        ++v14;
      }
      while (v13 != (_BYTE *)(a2 - 112));
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 19);
    if (!v2)
      return 0;
    v3 = *(_DWORD *)(v2 - 8);
    v4 = v3 & (a2 >> 14);
    v5 = *(_QWORD *)(v2 + 16 * v4);
    if (v5 != (a2 & 0xFFFFFFFFFFFFC000))
    {
      v6 = 1;
      while (v5)
      {
        v4 = ((_DWORD)v4 + v6) & v3;
        v5 = *(_QWORD *)(v2 + 16 * v4);
        ++v6;
        if (v5 == (a2 & 0xFFFFFFFFFFFFC000))
          goto LABEL_16;
      }
      v4 = *(unsigned int *)(v2 - 4);
    }
LABEL_16:
    if (v4 == *(_DWORD *)(v2 - 4))
      return 0;
    return (*(_QWORD *)(*(_QWORD *)(v2 + 16 * v4 + 8) + 8 * ((a2 >> 10) & 0xF) + 8) >> (a2 >> 4)) & 1;
  }
  return result;
}

void JSC::VerifierSlotVisitor::markAuxiliary(JSC::VerifierSlotVisitor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 8) != 0)
    JSC::VerifierSlotVisitor::testAndSetMarked(this, (JSC::PreciseAllocation *)(a2 - 112), a2, a4, a5, a6, a7, a8);
  else
    JSC::VerifierSlotVisitor::testAndSetMarked((uint64_t)this, a2 & 0xFFFFFFFFFFFFC000, a2, a4, a5, a6, a7, a8);
}

uint64_t JSC::VerifierSlotVisitor::mutatorIsStopped(JSC::VerifierSlotVisitor *this)
{
  return 1;
}

BOOL JSC::VerifierSlotVisitor::testAndSetMarked(JSC::VerifierSlotVisitor *this, JSC::PreciseAllocation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  JSC::PreciseAllocation *v44;
  WTF *v45[3];

  v43 = 0;
  v44 = a2;
  WTF::HashMap<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashTraits<JSC::PreciseAllocation *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)this + 18, (uint64_t *)&v44, (uint64_t)&v43, a4, a5, a6, a7, a8, (uint64_t)v45);
  v10 = v45[0];
  v11 = *((_QWORD *)v45[0] + 1);
  if (!v11)
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = a2;
    v20 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v12;
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v20 + 16) = 0;
      if (v21)
        WTF::fastFree(v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
    }
    if (HIBYTE(word_1ECF4C610))
    {
      v23 = *((_QWORD *)v10 + 1);
      v24 = *((_QWORD *)this + 11);
      if (v24)
        v25 = *(_QWORD *)(v24 + 8);
      else
        v25 = 0;
      WTF::StackTrace::captureStackTrace((WTF::StackTrace *)0x64, 2, (uint64_t *)v45);
      v33 = v45[0];
      v45[0] = 0;
      v34 = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 8) = v25;
      *(_QWORD *)(v23 + 16) = v33;
      if (v34)
      {
        WTF::fastFree(v34, v26, v27, v28, v29, v30, v31, v32);
        v42 = v45[0];
        v45[0] = 0;
        if (v42)
          WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
      }
    }
  }
  return v11 != 0;
}

void JSC::VerifierSlotVisitor::testAndSetMarked(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  WTF *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  WTF *v73;
  WTF *v74;

  v11 = *(_QWORD *)(a2 + 296);
  if (v11)
    goto LABEL_2;
  v18 = (uint64_t *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 152);
  if (v17
    || (WTF::HashTable<JSC::MarkedBlock *,WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashMap<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MarkedBlock *>>::rehash((uint64_t *)(a1 + 152), 8uLL, 0, a4, a5, a6, a7, a8), (v17 = *v18) != 0))
  {
    v19 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = v19 & (a2 >> 14);
  v21 = (unint64_t *)(v17 + 16 * v20);
  v22 = (_QWORD *)*v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    while (v22 != (_QWORD *)a2)
    {
      if (v22 == (_QWORD *)-1)
        v23 = v21;
      v20 = (v20 + v24) & v19;
      v21 = (unint64_t *)(v17 + 16 * v20);
      v22 = (_QWORD *)*v21;
      ++v24;
      if (!*v21)
      {
        if (v23)
        {
          *v23 = 0;
          v23[1] = 0;
          --*(_DWORD *)(*v18 - 16);
          v21 = v23;
        }
        goto LABEL_20;
      }
    }
    goto LABEL_65;
  }
LABEL_20:
  v25 = v21[1];
  *v21 = a2;
  v21[1] = 0;
  if (v25)
  {
    v26 = *(unsigned int *)(v25 + 148);
    if ((_DWORD)v26)
    {
      v27 = 16 * v26;
      v28 = (unint64_t *)(*(_QWORD *)(v25 + 136) + 8);
      do
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
          WTF::fastFree(v29, (void *)a2, a3, a4, a5, a6, a7, a8);
        v28 += 2;
        v27 -= 16;
      }
      while (v27);
    }
    v30 = *(_QWORD *)(v25 + 136);
    if (v30)
    {
      *(_QWORD *)(v25 + 136) = 0;
      *(_DWORD *)(v25 + 144) = 0;
      WTF::fastFree(v30, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = *v18;
  if (*v18)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v35 = *v18;
  if (*v18)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 > 2 * v37)
      goto LABEL_65;
    goto LABEL_40;
  }
  if (3 * v38 <= 4 * v37)
  {
    if (!(_DWORD)v38)
    {
      v39 = 8;
      goto LABEL_64;
    }
LABEL_40:
    v39 = ((_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38)));
LABEL_64:
    v21 = WTF::HashTable<JSC::MarkedBlock *,WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashMap<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MarkedBlock *>>::rehash((uint64_t *)(a1 + 152), v39, (uint64_t)v21, a4, a5, a6, a7, a8);
  }
LABEL_65:
  if (v21[1])
  {
    __break(0xC471u);
    goto LABEL_80;
  }
  v59 = WTF::fastMalloc((WTF *)0x98);
  *(_QWORD *)v59 = a2;
  *(_OWORD *)(v59 + 8) = 0u;
  *(_OWORD *)(v59 + 24) = 0u;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_OWORD *)(v59 + 104) = 0u;
  *(_OWORD *)(v59 + 120) = 0u;
  *(_OWORD *)(v59 + 136) = 0u;
  v67 = v21[1];
  v21[1] = v59;
  if (v67)
  {
    v68 = *(unsigned int *)(v67 + 148);
    if ((_DWORD)v68)
    {
      v69 = 16 * v68;
      v70 = (unint64_t *)(*(_QWORD *)(v67 + 136) + 8);
      do
      {
        v71 = *v70;
        *v70 = 0;
        if (v71)
          WTF::fastFree(v71, v60, v61, v62, v63, v64, v65, v66);
        v70 += 2;
        v69 -= 16;
      }
      while (v69);
    }
    v72 = *(_QWORD *)(v67 + 136);
    if (v72)
    {
      *(_QWORD *)(v67 + 136) = 0;
      *(_DWORD *)(v67 + 144) = 0;
      WTF::fastFree(v72, v60, v61, v62, v63, v64, v65, v66);
    }
    WTF::fastFree(v67, v60, v61, v62, v63, v64, v65, v66);
    v11 = v21[1];
  }
  else
  {
    v11 = v59;
  }
  *(_QWORD *)(a2 + 296) = v11;
LABEL_2:
  v12 = a3 - a2;
  v13 = v12 >> 4;
  if ((v12 >> 4) >= 0x400)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v14 = v11 + ((v12 >> 7) & 0x1FFFFFF8);
  v15 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v14 + 8) = v15 | (1 << v13);
  if ((v15 & (1 << v13)) != 0 || HIBYTE(word_1ECF4C610) == 0)
    return;
  v33 = *(_QWORD *)(a1 + 88);
  if (v33)
    v34 = *(_QWORD *)(v33 + 8);
  else
    v34 = 0;
  WTF::StackTrace::captureStackTrace((WTF::StackTrace *)0x64, 2, (uint64_t *)&v74);
  v47 = v74;
  v74 = 0;
  v48 = *(_DWORD *)(v11 + 148);
  if (!v48)
  {
    v73 = v47;
    v49 = *(unsigned int *)(v11 + 144);
    if (v49 <= 0x3FF)
    {
      v50 = v49 + (v49 >> 2);
      v51 = 1023;
      if (v50 > 0x3FF)
        v51 = v50;
      if (v50 >= 0x10)
        v52 = v51 + 1;
      else
        v52 = 1024;
      v53 = *(_QWORD *)(v11 + 136);
      v54 = WTF::fastMalloc((WTF *)(16 * v52));
      *(_DWORD *)(v11 + 144) = v52;
      *(_QWORD *)(v11 + 136) = v54;
      if (!v53)
        goto LABEL_54;
      if (v54 == v53)
      {
        *(_QWORD *)(v11 + 136) = 0;
        *(_DWORD *)(v11 + 144) = 0;
      }
      WTF::fastFree(v53, v40, v41, v42, v43, v44, v45, v46);
    }
    v54 = *(_QWORD *)(v11 + 136);
    if (!v54)
    {
LABEL_56:
      v48 = 1024;
      *(_DWORD *)(v11 + 148) = 1024;
      v47 = v73;
      goto LABEL_57;
    }
LABEL_54:
    v55 = *(unsigned int *)(v11 + 148);
    if ((_DWORD)v55 != 1024)
      bzero((void *)(v54 + 16 * v55), ((-16 * v55 + 16368) & 0xFFFFFFFFFFFFFFF0) + 16);
    goto LABEL_56;
  }
LABEL_57:
  if (v48 <= v13)
  {
LABEL_81:
    __break(0xC471u);
    return;
  }
  v56 = (_QWORD *)(*(_QWORD *)(v11 + 136) + 16 * (v12 >> 4));
  v57 = v56[1];
  *v56 = v34;
  v56[1] = v47;
  if (v57)
    WTF::fastFree(v57, v40, v41, v42, v43, v44, v45, v46);
  v58 = v74;
  v74 = 0;
  if (v58)
    WTF::fastFree((unint64_t)v58, v40, v41, v42, v43, v44, v45, v46);
}

void WTF::HashMap<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashTraits<JSC::PreciseAllocation *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::PreciseAllocation *,WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashMap<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashTraits<JSC::PreciseAllocation *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PreciseAllocation *>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v12 - 4);
        v34 = 0;
        v35 = v12 + 16 * v28;
        goto LABEL_36;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  v24 = v20[1];
  *v20 = v15;
  v20[1] = 0;
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 16);
    *(_QWORD *)(v24 + 16) = 0;
    if (v25)
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      goto LABEL_27;
  }
  else if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v33 = 8;
LABEL_32:
      v20 = WTF::HashTable<JSC::PreciseAllocation *,WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashMap<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashTraits<JSC::PreciseAllocation *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PreciseAllocation *>>::rehash(a1, v33, (uint64_t)v20, a4, a5, a6, a7, a8);
      v29 = *a1;
      if (*a1)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_35;
    }
LABEL_27:
    v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
    goto LABEL_32;
  }
LABEL_35:
  v35 = v29 + 16 * v32;
  v34 = 1;
LABEL_36:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 16) = v34;
}

uint64_t JSC::VerifierSlotVisitor::visitAsConstraint(JSC::VerifierSlotVisitor *this, const JSC::JSCell *a2)
{
  uint64_t result;

  if (JSC::VerifierSlotVisitor::isMarked(this, (unint64_t)a2))
    return (*(uint64_t (**)(const JSC::JSCell *, JSC::VerifierSlotVisitor *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xD8))(a2, this);
  result = 414;
  __break(0xC471u);
  return result;
}

uint64_t JSC::WeakBlock::WeakBlock(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  *(_WORD *)(result + 24) = 257;
  *(_QWORD *)(result + 56) = 3;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 72) = result + 48;
  *(_QWORD *)(result + 80) = 3;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 104) = 3;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = result + 72;
  *(_QWORD *)(result + 128) = 3;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = result + 96;
  *(_QWORD *)(result + 152) = 3;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 144) = result + 120;
  *(_QWORD *)(result + 176) = 3;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = result + 144;
  *(_QWORD *)(result + 200) = 3;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 192) = result + 168;
  *(_QWORD *)(result + 216) = result + 192;
  *(_QWORD *)(result + 224) = 3;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 248) = 3;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 240) = result + 216;
  *(_QWORD *)(result + 264) = result + 240;
  *(_QWORD *)(result + 272) = 3;
  *(_QWORD *)(result + 296) = 3;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 288) = result + 264;
  *(_QWORD *)(result + 312) = result + 288;
  *(_QWORD *)(result + 320) = 3;
  *(_QWORD *)(result + 344) = 3;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = result + 312;
  *(_QWORD *)(result + 360) = result + 336;
  *(_QWORD *)(result + 368) = 3;
  *(_QWORD *)(result + 392) = 3;
  *(_QWORD *)(result + 400) = 0;
  *(_QWORD *)(result + 376) = 0;
  *(_QWORD *)(result + 384) = result + 360;
  *(_QWORD *)(result + 408) = result + 384;
  *(_QWORD *)(result + 416) = 3;
  *(_QWORD *)(result + 440) = 3;
  *(_QWORD *)(result + 448) = 0;
  *(_QWORD *)(result + 424) = 0;
  *(_QWORD *)(result + 432) = result + 408;
  *(_QWORD *)(result + 456) = result + 432;
  *(_QWORD *)(result + 464) = 3;
  *(_QWORD *)(result + 488) = 3;
  *(_QWORD *)(result + 496) = 0;
  *(_QWORD *)(result + 472) = 0;
  *(_QWORD *)(result + 480) = result + 456;
  *(_QWORD *)(result + 520) = 0;
  *(_QWORD *)(result + 504) = result + 480;
  *(_QWORD *)(result + 512) = 3;
  *(_QWORD *)(result + 536) = 3;
  *(_QWORD *)(result + 544) = 0;
  *(_QWORD *)(result + 528) = result + 504;
  *(_QWORD *)(result + 560) = 3;
  *(_QWORD *)(result + 568) = 0;
  *(_QWORD *)(result + 552) = result + 528;
  *(_QWORD *)(result + 584) = 3;
  *(_QWORD *)(result + 592) = 0;
  *(_QWORD *)(result + 576) = result + 552;
  *(_QWORD *)(result + 608) = 3;
  *(_QWORD *)(result + 616) = 0;
  *(_QWORD *)(result + 600) = result + 576;
  *(_QWORD *)(result + 632) = 3;
  *(_QWORD *)(result + 640) = 0;
  *(_QWORD *)(result + 624) = result + 600;
  *(_QWORD *)(result + 656) = 3;
  *(_QWORD *)(result + 664) = 0;
  *(_QWORD *)(result + 648) = result + 624;
  *(_QWORD *)(result + 680) = 3;
  *(_QWORD *)(result + 688) = 0;
  *(_QWORD *)(result + 672) = result + 648;
  *(_QWORD *)(result + 704) = 3;
  *(_QWORD *)(result + 712) = 0;
  *(_QWORD *)(result + 696) = result + 672;
  *(_QWORD *)(result + 728) = 3;
  *(_QWORD *)(result + 736) = 0;
  *(_QWORD *)(result + 720) = result + 696;
  *(_QWORD *)(result + 752) = 3;
  *(_QWORD *)(result + 760) = 0;
  *(_QWORD *)(result + 744) = result + 720;
  *(_QWORD *)(result + 776) = 3;
  *(_QWORD *)(result + 784) = 0;
  *(_QWORD *)(result + 768) = result + 744;
  *(_QWORD *)(result + 800) = 3;
  *(_QWORD *)(result + 808) = 0;
  *(_QWORD *)(result + 792) = result + 768;
  *(_QWORD *)(result + 824) = 3;
  *(_QWORD *)(result + 832) = 0;
  *(_QWORD *)(result + 816) = result + 792;
  *(_QWORD *)(result + 848) = 3;
  *(_QWORD *)(result + 856) = 0;
  *(_QWORD *)(result + 840) = result + 816;
  *(_QWORD *)(result + 872) = 3;
  *(_QWORD *)(result + 880) = 0;
  *(_QWORD *)(result + 864) = result + 840;
  *(_QWORD *)(result + 896) = 3;
  *(_QWORD *)(result + 904) = 0;
  *(_QWORD *)(result + 888) = result + 864;
  *(_QWORD *)(result + 920) = 3;
  *(_QWORD *)(result + 928) = 0;
  *(_QWORD *)(result + 912) = result + 888;
  *(_QWORD *)(result + 944) = 3;
  *(_QWORD *)(result + 952) = 0;
  *(_QWORD *)(result + 936) = result + 912;
  *(_QWORD *)(result + 968) = 3;
  *(_QWORD *)(result + 976) = 0;
  *(_QWORD *)(result + 960) = result + 936;
  *(_QWORD *)(result + 992) = 3;
  *(_QWORD *)(result + 1000) = 0;
  *(_QWORD *)(result + 984) = result + 960;
  *(_QWORD *)(result + 32) = result + 984;
  return result;
}

uint64_t JSC::WeakBlock::visit(uint64_t this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(this + 24) || !*(_QWORD *)(this + 32))
  {
    v3 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) != 0)
      return JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::AbstractSlotVisitor>(this, v3 - 1, a2);
    else
      return JSC::WeakBlock::specializedVisit<JSC::MarkedBlock,JSC::AbstractSlotVisitor>(this, v3, a2);
  }
  return this;
}

void JSC::WeakBlock::visit(JSC::WeakBlock *this, JSC::SlotVisitor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;

  if (!*((_BYTE *)this + 24) || !*((_QWORD *)this + 4))
  {
    v4 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) == 0)
    {
      v5 = 0;
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 92936);
      v7 = v4 + 40;
      while (1)
      {
        v8 = *(_QWORD *)((char *)this + v5 + 56);
        v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v8 & 3) != 0 || v9 == 0)
          goto LABEL_7;
        v11 = *(_QWORD *)((char *)this + v5 + 48);
        v22 = v11;
        if (*(_DWORD *)(v4 + 32) != *((_DWORD *)a2 + 33))
          goto LABEL_35;
        v12 = v11 - v4;
        v13 = ((v11 - v4) >> 4);
        if (v13 >= 0x400)
        {
          __break(1u);
LABEL_26:
          if ((v22 & 0xFFFE000000000002) == 0)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
          goto LABEL_7;
        }
        if (((*(_QWORD *)(v7 + ((v13 >> 3) & 0x1FFFFFF8)) >> (v12 >> 4)) & 1) == 0)
        {
LABEL_35:
          if ((*(unsigned int (**)(unint64_t, unint64_t *, _QWORD, JSC::SlotVisitor *))(*(_QWORD *)v9 + 16))(v9, &v22, *(_QWORD *)((char *)this + v5 + 64), a2))
          {
            break;
          }
        }
LABEL_7:
        v5 += 24;
        if (v5 == 960)
          return;
      }
      v20 = v22;
      if ((v22 & 0xFFFE000000000002) == 0 && v22)
      {
        if ((v22 & 8) == 0)
        {
          v21 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v21, v14, v15, v16, v17, v18, v19);
          if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
          {
            v7 = v4 + 40;
            if (!*((_QWORD *)a2 + 21))
              goto LABEL_6;
          }
          else
          {
            v7 = v4 + 40;
          }
          goto LABEL_32;
        }
        if ((*(_BYTE *)(v22 - 79) & 1) == 0 || *((_QWORD *)a2 + 21))
LABEL_32:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v15, v16, v17, v18, v19);
      }
LABEL_6:
      if (v6)
        goto LABEL_26;
      goto LABEL_7;
    }
    JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::SlotVisitor>((uint64_t)this, v4 - 1, (uint64_t)a2);
  }
}

uint64_t *JSC::WeakBlock::reap(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (!*((_BYTE *)this + 24) || !this[4])
  {
    v1 = 0;
    if ((*this & 1) != 0)
      v2 = *this + 95;
    else
      v2 = *this + 8;
    v3 = *(_DWORD *)(*(_QWORD *)v2 + 432);
    do
    {
      v4 = &this[v1];
      if ((this[v1 + 7] & 2) != 0)
        goto LABEL_9;
      v5 = *this;
      if ((*this & 1) != 0)
      {
        if ((*(_BYTE *)(v5 + 32) & 1) == 0)
          goto LABEL_8;
      }
      else
      {
        if (*(_DWORD *)(v5 + 32) != v3)
          goto LABEL_8;
        v6 = v4[6] - v5;
        v7 = (v6 >> 4);
        if (v7 >= 0x400)
        {
          __break(1u);
          return this;
        }
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFF8) + 40) >> (v6 >> 4)) & 1) == 0)
LABEL_8:
          v4[7] = v4[7] & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
LABEL_9:
      v1 += 3;
    }
    while (v1 != 120);
  }
  return this;
}

void JSC::StopIfNecessaryTimer::~StopIfNecessaryTimer(JSC::StopIfNecessaryTimer *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E35A2D40;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(unsigned int **)(v9 + 8 * i);
        if (v12 != (unsigned int *)-1)
        {
          *(_QWORD *)(v9 + 8 * i) = 0;
          if (v12)
          {
            v13 = v12 + 2;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
            }
          }
        }
      }
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      JSC::JSLock::~JSLock((JSC::JSLock *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Subspace::parallelDirectorySource(void)::Task::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;

  v9 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 24);
    goto LABEL_4;
  }
  if (__stxr(1u, v9))
    goto LABEL_3;
LABEL_4:
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 + 88);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      return v11;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  return v11;
}

uint64_t JSC::ParallelSourceAdapter<JSC::BlockDirectory *,JSC::MarkedBlock::Handle *,JSC::Subspace::parallelNotEmptyMarkedBlockSource(void)::$_0>::~ParallelSourceAdapter(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

void JSC::ParallelSourceAdapter<JSC::BlockDirectory *,JSC::MarkedBlock::Handle *,JSC::Subspace::parallelNotEmptyMarkedBlockSource(void)::$_0>::~ParallelSourceAdapter(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v9 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::ParallelSourceAdapter<JSC::BlockDirectory *,JSC::MarkedBlock::Handle *,JSC::Subspace::parallelNotEmptyMarkedBlockSource(void)::$_0>::run(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  v2 = (unsigned __int8 *)(a1 + 33);
  if (__ldaxr((unsigned __int8 *)(a1 + 33)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 33);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  v4 = *(_QWORD *)(a1 + 24);
  while (!v4)
  {
LABEL_13:
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
    if (v4)
    {
      v16 = v4;
      v4 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v4 + 8) = 1;
      *(_QWORD *)v4 = off_1E35903A8;
      *(_QWORD *)(v4 + 16) = v16;
      *(_QWORD *)(v4 + 24) = 0;
      *(_WORD *)(v4 + 32) = 0;
    }
    v17 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
      v4 = *(_QWORD *)(a1 + 24);
    }
    if (!v4)
    {
      v21 = 0;
      goto LABEL_24;
    }
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (!v5)
  {
    v12 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    goto LABEL_13;
  }
  v21 = v5;
LABEL_24:
  v22 = __ldxr(v2);
  if (v22 == 1)
  {
    if (!__stlxr(0, v2))
      return v21;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v6, v7, v8, v9, v10, v11);
  return v21;
}

uint64_t *WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::OpaqueRootData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *result;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (uint64_t *)(v10 + 16 * v21);
      v24 = *v23;
      if (*v23 != -1)
      {
        if (v24)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = v37[1];
          v37[1] = 0;
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            if (v39)
              WTF::fastFree(v39, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v38, v14, v15, v16, v17, v18, v19, v20);
          }
          *v37 = *v23;
          v40 = v10 + 16 * v21;
          v41 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          v37[1] = v41;
          v42 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 8);
            *(_QWORD *)(v42 + 8) = 0;
            if (v43)
              WTF::fastFree(v43, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v42, v14, v15, v16, v17, v18, v19, v20);
          }
          if (v23 == (uint64_t *)a3)
            v22 = v37;
        }
        else
        {
          v25 = v10 + 16 * v21;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)(v26 + 8) = 0;
            if (v27)
              WTF::fastFree(v27, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v26, v14, v15, v16, v17, v18, v19, v20);
          }
        }
      }
      ++v21;
    }
    while (v21 != v11);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v10)
      return result;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

uint64_t WTF::dataLog<JSC::JSValue,char [2]>(JSC::JSValue *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  BOOL v7;
  JSC::Structure *v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  if (*(_QWORD *)a1)
    v7 = (*(_QWORD *)a1 & 0xFFFE000000000002) == 0;
  else
    v7 = 0;
  if (v7)
    v8 = (JSC::Structure *)(16 * (**(_DWORD **)a1 & 0xFFFFFFFE));
  else
    v8 = 0;
  JSC::JSValue::dumpInContextAssumingStructure(a1, v6, 0, v8);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [22],WTF::RawPointer,char [2],char const*,char [9],char [2]>(const void **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "In the real GC, cell ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " ");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", " marked.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [39],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Marker data is not available for cell ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [29],WTF::RawPointer,char [2],char const*,char [35],char [2]>(const void **a1, const char **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "In the real GC, opaque root ");
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", " ");
  WTF::PrintStream::printf(v6, "%s", *a2);
  WTF::PrintStream::printf(v6, "%s", " added to the heap's opaque roots.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [46],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Marker data is not available for opaque root ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [11],WTF::RawPointer,char [5],char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " via cell ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " at:");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [18],WTF::RawPointer,char [5],char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " via opaque root ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", " at:");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [15],JSC::RootMarkReason,char [11],char [2]>(unsigned __int8 *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " from scan of ");
  WTF::printInternal((uint64_t)v4, *a1);
  WTF::PrintStream::printf(v4, "%s", " roots at:");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [5],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", " at:");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<WTF::StackTracePrinter,char [2]>(WTF::StackTracePrinter *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::StackTracePrinter::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t *WTF::HashTable<JSC::PreciseAllocation *,WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashMap<JSC::PreciseAllocation *,std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>,WTF::DefaultHash<JSC::PreciseAllocation *>,WTF::HashTraits<JSC::PreciseAllocation *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::PreciseAllocationData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PreciseAllocation *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *result;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (uint64_t *)(v10 + 16 * v21);
      v24 = *v23;
      if (*v23 != -1)
      {
        if (v24)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = v37[1];
          v37[1] = 0;
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 16);
            *(_QWORD *)(v38 + 16) = 0;
            if (v39)
              WTF::fastFree(v39, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v38, v14, v15, v16, v17, v18, v19, v20);
          }
          *v37 = *v23;
          v40 = v10 + 16 * v21;
          v41 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          v37[1] = v41;
          v42 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 16);
            *(_QWORD *)(v42 + 16) = 0;
            if (v43)
              WTF::fastFree(v43, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v42, v14, v15, v16, v17, v18, v19, v20);
          }
          if (v23 == (uint64_t *)a3)
            v22 = v37;
        }
        else
        {
          v25 = v10 + 16 * v21;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 16);
            *(_QWORD *)(v26 + 16) = 0;
            if (v27)
              WTF::fastFree(v27, v14, v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v26, v14, v15, v16, v17, v18, v19, v20);
          }
        }
      }
      ++v21;
    }
    while (v21 != v11);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v10)
      return result;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

unint64_t *WTF::HashTable<JSC::MarkedBlock *,WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashMap<JSC::MarkedBlock *,std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>,WTF::DefaultHash<JSC::MarkedBlock *>,WTF::HashTraits<JSC::MarkedBlock *>,WTF::HashTraits<std::unique_ptr<JSC::VerifierSlotVisitor::MarkedBlockData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MarkedBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (!v10)
  {
    v21 = 0;
    if (!v9)
      return v21;
    goto LABEL_44;
  }
  v20 = 0;
  v21 = 0;
  v22 = v10;
  do
  {
    v23 = (unint64_t *)(v9 + 16 * v20);
    v24 = *v23;
    if (*v23 != -1)
    {
      if (v24)
      {
        v32 = *a1;
        if (*a1)
          v33 = *(_DWORD *)(v32 - 8);
        else
          v33 = 0;
        v34 = v33 & (v24 >> 14);
        v35 = 1;
        do
        {
          v36 = v34;
          v37 = *(_QWORD *)(v32 + 16 * v34);
          v34 = (v34 + v35++) & v33;
        }
        while (v37);
        v38 = (unint64_t *)(v32 + 16 * v36);
        v39 = v38[1];
        v38[1] = 0;
        if (v39)
        {
          v40 = *(unsigned int *)(v39 + 148);
          if ((_DWORD)v40)
          {
            v41 = 16 * v40;
            v42 = (unint64_t *)(*(_QWORD *)(v39 + 136) + 8);
            do
            {
              v43 = *v42;
              *v42 = 0;
              if (v43)
                WTF::fastFree(v43, v13, v14, v15, v16, v17, v18, v19);
              v42 += 2;
              v41 -= 16;
            }
            while (v41);
          }
          v44 = *(_QWORD *)(v39 + 136);
          if (v44)
          {
            *(_QWORD *)(v39 + 136) = 0;
            *(_DWORD *)(v39 + 144) = 0;
            WTF::fastFree(v44, v13, v14, v15, v16, v17, v18, v19);
          }
          WTF::fastFree(v39, v13, v14, v15, v16, v17, v18, v19);
        }
        *v38 = *v23;
        v45 = v9 + 16 * v20;
        v46 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)(v45 + 8) = 0;
        v38[1] = v46;
        v47 = *(_QWORD *)(v45 + 8);
        *(_QWORD *)(v45 + 8) = 0;
        if (v47)
        {
          v48 = *(unsigned int *)(v47 + 148);
          if ((_DWORD)v48)
          {
            v49 = 16 * v48;
            v50 = (unint64_t *)(*(_QWORD *)(v47 + 136) + 8);
            do
            {
              v51 = *v50;
              *v50 = 0;
              if (v51)
                WTF::fastFree(v51, v13, v14, v15, v16, v17, v18, v19);
              v50 += 2;
              v49 -= 16;
            }
            while (v49);
          }
          v52 = *(_QWORD *)(v47 + 136);
          if (v52)
          {
            *(_QWORD *)(v47 + 136) = 0;
            *(_DWORD *)(v47 + 144) = 0;
            WTF::fastFree(v52, v13, v14, v15, v16, v17, v18, v19);
          }
          WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
        }
        if (v23 == (unint64_t *)a3)
          v21 = v38;
      }
      else
      {
        v25 = v9 + 16 * v20;
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        if (v26)
        {
          v27 = *(unsigned int *)(v26 + 148);
          if ((_DWORD)v27)
          {
            v28 = 16 * v27;
            v29 = (unint64_t *)(*(_QWORD *)(v26 + 136) + 8);
            do
            {
              v30 = *v29;
              *v29 = 0;
              if (v30)
                WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
              v29 += 2;
              v28 -= 16;
            }
            while (v28);
          }
          v31 = *(_QWORD *)(v26 + 136);
          if (v31)
          {
            *(_QWORD *)(v26 + 136) = 0;
            *(_DWORD *)(v26 + 144) = 0;
            WTF::fastFree(v31, v13, v14, v15, v16, v17, v18, v19);
          }
          WTF::fastFree(v26, v13, v14, v15, v16, v17, v18, v19);
        }
      }
    }
    ++v20;
  }
  while (v20 != v22);
  if (v9)
LABEL_44:
    WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

uint64_t JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  uint64_t v17;

  v5 = result;
  v6 = 0;
  v7 = *(_QWORD *)(a3[10] + 92936);
  while (1)
  {
    v8 = *(_QWORD *)(v5 + v6 + 56);
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v8 & 3) == 0 && v9 != 0)
    {
      v17 = *(_QWORD *)(v5 + v6 + 48);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 56))(a3, a2);
      if ((result & 1) == 0)
        break;
    }
LABEL_7:
    v6 += 24;
    if (v6 == 960)
      return result;
  }
  v16[0] = &str_34_10;
  v16[1] = 1;
  if (v7)
    v11 = v16;
  else
    v11 = 0;
  v13[0] = a3;
  v13[1] = 0;
  v15 = 1;
  v12 = a3[11];
  v14 = v12;
  if (!v12 || !*(_BYTE *)(v12 + 24))
  {
    a3[11] = v13;
    result = (*(uint64_t (**)(unint64_t, uint64_t *, _QWORD, _QWORD *, _QWORD *))(*(_QWORD *)v9 + 16))(v9, &v17, *(_QWORD *)(v5 + v6 + 64), a3, v11);
    if ((_DWORD)result)
    {
      if ((v17 & 0xFFFE000000000002) == 0)
        result = (*(uint64_t (**)(_QWORD *))(*a3 + 24))(a3);
      if (v7)
      {
        if ((v17 & 0xFFFE000000000002) == 0)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      }
    }
    *(_QWORD *)(v13[0] + 88) = v14;
    goto LABEL_7;
  }
  result = 89;
  __break(0xC471u);
  return result;
}

uint64_t JSC::WeakBlock::specializedVisit<JSC::MarkedBlock,JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  uint64_t v17;

  v5 = result;
  v6 = 0;
  v7 = *(_QWORD *)(a3[10] + 92936);
  while (1)
  {
    v8 = *(_QWORD *)(v5 + v6 + 56);
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v8 & 3) == 0 && v9 != 0)
    {
      v17 = *(_QWORD *)(v5 + v6 + 48);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 48))(a3, a2);
      if ((result & 1) == 0)
        break;
    }
LABEL_7:
    v6 += 24;
    if (v6 == 960)
      return result;
  }
  v16[0] = &str_34_10;
  v16[1] = 1;
  if (v7)
    v11 = v16;
  else
    v11 = 0;
  v13[0] = a3;
  v13[1] = 0;
  v15 = 1;
  v12 = a3[11];
  v14 = v12;
  if (!v12 || !*(_BYTE *)(v12 + 24))
  {
    a3[11] = v13;
    result = (*(uint64_t (**)(unint64_t, uint64_t *, _QWORD, _QWORD *, _QWORD *))(*(_QWORD *)v9 + 16))(v9, &v17, *(_QWORD *)(v5 + v6 + 64), a3, v11);
    if ((_DWORD)result)
    {
      if ((v17 & 0xFFFE000000000002) == 0)
        result = (*(uint64_t (**)(_QWORD *))(*a3 + 24))(a3);
      if (v7)
      {
        if ((v17 & 0xFFFE000000000002) == 0)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      }
    }
    *(_QWORD *)(v13[0] + 88) = v14;
    goto LABEL_7;
  }
  result = 89;
  __break(0xC471u);
  return result;
}

void JSC::WeakBlock::specializedVisit<JSC::PreciseAllocation,JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  unint64_t v24;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 80) + 92936);
  do
  {
    v8 = *(_QWORD *)(a1 + v6 + 56);
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v8 & 3) == 0 && v9 != 0)
    {
      v24 = *(_QWORD *)(a1 + v6 + 48);
      if ((*(_BYTE *)(a2 + 33) & 1) == 0)
      {
        v23[0] = &str_34_10;
        v23[1] = 1;
        v11 = v7 ? v23 : 0;
        if ((*(unsigned int (**)(unint64_t, unint64_t *, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, &v24, *(_QWORD *)(a1 + v6 + 64), a3, v11))
        {
          v18 = v24;
          if ((v24 & 0xFFFE000000000002) == 0 && v24)
          {
            if ((v24 & 8) == 0)
            {
              v19 = v24 & 0xFFFFFFFFFFFFC000;
              v20 = *(_DWORD *)(a3 + 132);
              if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
              {
                v21 = v24;
                v22 = v24 & 0xFFFFFFFFFFFFC000;
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v20, v12, v13, v14, v15, v16, v17);
                v18 = v21;
                v19 = v22;
              }
              if (((*(_QWORD *)(v19 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0 && !*(_QWORD *)(a3 + 168))
                goto LABEL_20;
              goto LABEL_26;
            }
            if ((*(_BYTE *)(v24 - 79) & 1) == 0 || *(_QWORD *)(a3 + 168))
LABEL_26:
              JSC::SlotVisitor::appendSlow(a3, v18, 0, v13, v14, v15, v16, v17);
          }
LABEL_20:
          if (v7)
          {
            if ((v24 & 0xFFFE000000000002) == 0)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
          }
        }
      }
    }
    v6 += 24;
  }
  while (v6 != 960);
}

void JSC::WeakHandleOwner::~WeakHandleOwner(JSC::WeakHandleOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::WeakHandleOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void JSC::WeakSet::sweep(JSC::WeakSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    while (1)
    {
      v11 = v9;
      v12 = *((_QWORD *)this + 6);
      v13 = *(_QWORD *)(v12 + 800);
      if (v13 != -1)
        break;
LABEL_5:
      v9 = *(_QWORD *)(v11 + 16);
      if (*(_BYTE *)(v11 + 24) && *(_QWORD *)(v11 + 32))
        goto LABEL_30;
      v14 = 0;
      v15 = 0;
      v16 = v11 + 48;
      v17 = 1;
      v18 = 1;
      do
      {
        v19 = (_QWORD *)(v16 + v14);
        v20 = *(_QWORD *)(v16 + v14 + 8);
        if ((v20 & 3) != 1
          || (v22 = v20 & 0xFFFFFFFFFFFFFFFCLL,
              v21 = (v20 & 0xFFFFFFFFFFFFFFFCLL) == 0,
              v20 = v20 & 0xFFFFFFFFFFFFFFFCLL | 2,
              v19[1] = v20,
              v21))
        {
          LODWORD(v20) = v20 & 3;
          if ((_DWORD)v20 == 3)
            goto LABEL_8;
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 24))(v22, v16 + v14, *(_QWORD *)(v16 + v14 + 16));
          v20 = v19[1] & 3;
          if ((_DWORD)v20 == 3)
          {
LABEL_8:
            *v19 = v15;
            v15 = v16 + v14;
            goto LABEL_9;
          }
        }
        if (!(_DWORD)v20)
          v18 = 0;
        v17 = 0;
LABEL_9:
        v14 += 24;
      }
      while (v14 != 960);
      *(_BYTE *)(v11 + 24) = v17;
      *(_BYTE *)(v11 + 25) = v18;
      *(_QWORD *)(v11 + 32) = v15;
      if (!v17 && *(_BYTE *)(v11 + 25))
      {
        v34 = *(_QWORD *)(v11 + 8);
        v35 = *(_QWORD *)(v11 + 16);
        if (v34)
        {
          *(_QWORD *)(v34 + 16) = v35;
          v35 = *(_QWORD *)(v11 + 16);
        }
        else
        {
          *((_QWORD *)this + 4) = v35;
        }
        if (v35)
          v36 = (_QWORD *)(v35 + 8);
        else
          v36 = (_QWORD *)((char *)this + 40);
        *v36 = v34;
        v37 = *((_QWORD *)this + 6);
        v45 = v11;
        v38 = (_QWORD *)(v37 + 784);
        v39 = *(unsigned int *)(v37 + 796);
        if ((_DWORD)v39 == *(_DWORD *)(v37 + 792))
        {
          v41 = (_QWORD *)WTF::Vector<JSC::StatementNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v45);
          v39 = *(unsigned int *)(v37 + 796);
          *(_QWORD *)(*(_QWORD *)(v37 + 784) + 8 * v39) = *v41;
        }
        else
        {
          *(_QWORD *)(*v38 + 8 * v39) = v11;
        }
        *(_DWORD *)(v37 + 796) = v39 + 1;
        *(_QWORD *)v11 = 0;
      }
LABEL_30:
      if (!v9)
      {
        v10 = *((_QWORD *)this + 4);
        goto LABEL_3;
      }
    }
    v31 = *(unsigned int *)(v12 + 796);
    if (v13 >= v31)
      goto LABEL_58;
    v32 = *(_QWORD *)(*(_QWORD *)(v12 + 784) + 8 * v13);
    if (!*(_BYTE *)(v32 + 24) || !*(_QWORD *)(v32 + 32))
    {
      v27 = 0;
      v26 = 0;
      v33 = v32 + 48;
      v29 = 1;
      v28 = 1;
      do
      {
        v23 = (_QWORD *)(v33 + v27);
        v24 = *(_QWORD *)(v33 + v27 + 8);
        if ((v24 & 3) == 1)
        {
          v30 = v24 & 0xFFFFFFFFFFFFFFFCLL;
          v21 = (v24 & 0xFFFFFFFFFFFFFFFCLL) == 0;
          v24 = v24 & 0xFFFFFFFFFFFFFFFCLL | 2;
          v23[1] = v24;
          if (!v21)
          {
            (*(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)v30 + 24))(v30, v33 + v27, *(_QWORD *)(v33 + v27 + 16));
            v24 = v23[1];
          }
        }
        v25 = v24 & 3;
        if (v25 == 3)
        {
          *v23 = v26;
          v26 = v33 + v27;
        }
        else
        {
          if (!v25)
            v28 = 0;
          v29 = 0;
        }
        v27 += 24;
      }
      while (v27 != 960);
      *(_BYTE *)(v32 + 24) = v29;
      *(_BYTE *)(v32 + 25) = v28;
      *(_QWORD *)(v32 + 32) = v26;
      if (!v29)
      {
        v13 = *(_QWORD *)(v12 + 800);
        goto LABEL_46;
      }
      v13 = *(_QWORD *)(v12 + 800);
      if (!v26)
      {
LABEL_46:
        v40 = v13 + 1;
        *(_QWORD *)(v12 + 800) = v40;
LABEL_47:
        if (v40 >= *(unsigned int *)(v12 + 796))
          *(_QWORD *)(v12 + 800) = -1;
        goto LABEL_5;
      }
      v31 = *(unsigned int *)(v12 + 796);
    }
    if (v13 >= v31)
    {
      __break(0xC471u);
      JUMPOUT(0x1986027D0);
    }
    if (!(_DWORD)v31)
    {
LABEL_58:
      __break(0xC471u);
      JUMPOUT(0x19860277CLL);
    }
    v42 = *(_QWORD *)(v12 + 784);
    v43 = v42 + 8 * v31;
    v44 = *(_QWORD *)(v42 + 8 * v13);
    *(_QWORD *)(v42 + 8 * v13) = *(_QWORD *)(v43 - 8);
    *(_QWORD *)(v43 - 8) = v44;
    *(_DWORD *)(v12 + 796) = v31 - 1;
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v12 + 1072) -= 1024;
    v40 = *(_QWORD *)(v12 + 800);
    goto LABEL_47;
  }
  v10 = 0;
LABEL_3:
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v10;
}

uint64_t JSC::WeakSet::findAllocator(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  while (1)
  {
    v4 = (_QWORD *)a1[3];
    if (!v4)
      break;
    a1[3] = v4[2];
    result = v4[4];
    v4[3] = 257;
    v4[4] = 0;
    if (result)
      return result;
  }
  v6 = a1[6];
  if (!a1[1])
  {
    v7 = *(_QWORD **)(v6 + 488);
    *a1 = v6 + 480;
    a1[1] = v7;
    *v7 = a1;
    *(_QWORD *)(v6 + 488) = a1;
  }
  *(_QWORD *)(v6 + 1072) += 1024;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
  JSC::WeakBlock::WeakBlock((uint64_t)v8, a2);
  JSC::Heap::didAllocate((JSC::Heap *)(a1[6] + 192), 0x400uLL, v9, v10, v11, v12, v13, v14);
  v15 = a1 + 4;
  v16 = a1[5];
  if (v16)
    v15 = (_QWORD *)(v16 + 16);
  *v15 = v8;
  a1[5] = v8;
  v8[1] = v16;
  v8[2] = 0;
  result = v8[4];
  v8[3] = 257;
  v8[4] = 0;
  return result;
}

void Inspector::AsyncStackTrace::create(uint64_t *a1@<X0>, char a2@<W1>, Inspector::AsyncStackTrace **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  Inspector::AsyncStackTrace *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = WTF::fastMalloc((WTF *)0x20);
  v9 = *a3;
  *a3 = 0;
  *(_DWORD *)v8 = 1;
  v10 = *a1;
  *a1 = 0;
  *(_QWORD *)(v8 + 8) = v10;
  if (v9)
  {
    ++*(_DWORD *)v9;
    *(_DWORD *)(v8 + 24) = 0;
    ++*((_DWORD *)v9 + 6);
    *(_QWORD *)(v8 + 16) = v9;
    *(_WORD *)(v8 + 28) = 0;
    *(_BYTE *)(v8 + 30) = a2;
    *a4 = v8;
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::AsyncStackTrace::~AsyncStackTrace(v9);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  else
  {
    *(_QWORD *)(v8 + 22) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 30) = a2;
    *a4 = v8;
  }
}

uint64_t Inspector::AsyncStackTrace::AsyncStackTrace(uint64_t result, uint64_t *a2, char a3, _DWORD **a4)
{
  uint64_t v4;
  _DWORD *v5;

  *(_DWORD *)result = 1;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v4;
  v5 = *a4;
  if (*a4)
  {
    ++*v5;
    *(_DWORD *)(result + 24) = 0;
    ++v5[6];
  }
  else
  {
    *(_DWORD *)(result + 24) = 0;
  }
  *(_QWORD *)(result + 16) = v5;
  *(_WORD *)(result + 28) = 0;
  *(_BYTE *)(result + 30) = a3;
  return result;
}

{
  uint64_t v4;
  _DWORD *v5;

  *(_DWORD *)result = 1;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v4;
  v5 = *a4;
  if (*a4)
  {
    ++*v5;
    *(_DWORD *)(result + 24) = 0;
    ++v5[6];
  }
  else
  {
    *(_DWORD *)(result + 24) = 0;
  }
  *(_QWORD *)(result + 16) = v5;
  *(_WORD *)(result + 28) = 0;
  *(_BYTE *)(result + 30) = a3;
  return result;
}

void Inspector::AsyncStackTrace::~AsyncStackTrace(Inspector::AsyncStackTrace *this)
{
  Inspector::AsyncStackTrace *v2;
  uint64_t v3;
  Inspector::AsyncStackTrace *v4;
  Inspector::AsyncStackTrace *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Inspector::ScriptCallStack *v30;

  v2 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
  if (v2)
  {
    --*((_DWORD *)v2 + 6);
    *((_QWORD *)this + 2) = 0;
    if (*(_DWORD *)v2 == 1)
    {
      Inspector::AsyncStackTrace::~AsyncStackTrace(v2);
      WTF::fastFree(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    v3 = *((_QWORD *)this + 1);
    v4 = *(Inspector::AsyncStackTrace **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v4);
        WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    v5 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v5);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v30 = (Inspector::ScriptCallStack *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v30)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v30);
}

void Inspector::AsyncStackTrace::remove(Inspector::AsyncStackTrace *this)
{
  Inspector::AsyncStackTrace *v2;
  uint64_t v3;
  Inspector::AsyncStackTrace *v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
  if (v2)
  {
    --*((_DWORD *)v2 + 6);
    *((_QWORD *)this + 2) = 0;
    if (*(_DWORD *)v2 == 1)
    {
      Inspector::AsyncStackTrace::~AsyncStackTrace(v2);
      WTF::fastFree(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    v3 = *((_QWORD *)this + 1);
    v4 = *(Inspector::AsyncStackTrace **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v4);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
}

BOOL Inspector::AsyncStackTrace::isPending(Inspector::AsyncStackTrace *this)
{
  return *((_BYTE *)this + 28) == 0;
}

BOOL Inspector::AsyncStackTrace::isLocked(Inspector::AsyncStackTrace *this)
{
  return *((unsigned __int8 *)this + 28) < 2u || *((_DWORD *)this + 6) > 1u;
}

unint64_t Inspector::AsyncStackTrace::at(unint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (*(unsigned int *)(v2 + 20) > a2)
    return *(_QWORD *)(v2 + 8) + 40 * a2;
  __break(0xC471u);
  return this;
}

uint64_t Inspector::AsyncStackTrace::size(Inspector::AsyncStackTrace *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 20);
}

uint64_t Inspector::AsyncStackTrace::topCallFrameIsBoundary(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (*(_DWORD *)(v1 + 20))
    return WTF::equal(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8), "[native code]", 13);
  __break(0xC471u);
  return this;
}

void Inspector::AsyncStackTrace::willDispatchAsyncCall(Inspector::AsyncStackTrace *this, unint64_t a2)
{
  *((_BYTE *)this + 28) = 1;
  Inspector::AsyncStackTrace::truncate(this, a2);
}

void Inspector::AsyncStackTrace::truncate(Inspector::AsyncStackTrace *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  Inspector::AsyncStackTrace *v4;
  uint64_t v5;
  Inspector::AsyncStackTrace *v6;
  int v7;
  uint64_t v8;
  Inspector::AsyncStackTrace *v9;
  _DWORD *v10;
  uint64_t v11;
  Inspector::AsyncStackTrace *v12;
  Inspector::AsyncStackTrace *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Inspector::AsyncStackTrace *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (!this)
    return;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    v4 = this;
    v5 = *((_QWORD *)this + 1);
    this = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
    v2 += *(unsigned int *)(v5 + 20);
    if (v2 >= a2)
      break;
    if (!v3 && this)
    {
      if (*((unsigned __int8 *)this + 28) >= 2u && *((_DWORD *)this + 6) < 2u)
        v3 = 0;
      else
        v3 = (uint64_t)v4;
    }
    if (!this)
      return;
  }
  if (!this)
    return;
  if (v3)
  {
    v6 = *(Inspector::AsyncStackTrace **)(v3 + 16);
    if (!v6)
    {
LABEL_40:
      *(_BYTE *)(v3 + 29) = 1;
      return;
    }
    v7 = (*(_DWORD *)v6)++;
    --*((_DWORD *)v6 + 6);
    *(_QWORD *)(v3 + 16) = 0;
    if (v7)
    {
      *(_DWORD *)v6 = v7;
    }
    else
    {
      Inspector::AsyncStackTrace::~AsyncStackTrace(v6);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    v8 = *(_QWORD *)(v3 + 8);
    v9 = *(Inspector::AsyncStackTrace **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v9);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    while (1)
    {
      v10 = (_DWORD *)*((_QWORD *)v6 + 1);
      ++*v10;
      v11 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 22) = 0;
      *(_BYTE *)(v11 + 30) = 1;
      v12 = *(Inspector::AsyncStackTrace **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v11;
      if (!v12)
        goto LABEL_23;
      if (*(_DWORD *)v12 != 1)
        break;
      Inspector::AsyncStackTrace::~AsyncStackTrace(v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
      v3 = *(_QWORD *)(v3 + 16);
LABEL_24:
      *(_DWORD *)(v3 + 24) = 1;
      if (v6 == v4)
      {
        *(_BYTE *)(v3 + 29) = 1;
        if (*(_DWORD *)v4 != 1)
        {
          --*(_DWORD *)v4;
          return;
        }
        v30 = v4;
LABEL_46:
        Inspector::AsyncStackTrace::~AsyncStackTrace(v30);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        return;
      }
      v13 = (Inspector::AsyncStackTrace *)*((_QWORD *)v6 + 2);
      if (v13)
        ++*(_DWORD *)v13;
      if (*(_DWORD *)v6 == 1)
      {
        Inspector::AsyncStackTrace::~AsyncStackTrace(v6);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        --*(_DWORD *)v6;
      }
      v6 = v13;
      if (!v13)
        goto LABEL_40;
    }
    --*(_DWORD *)v12;
LABEL_23:
    v3 = v11;
    goto LABEL_24;
  }
  *((_BYTE *)v4 + 29) = 1;
  --*((_DWORD *)this + 6);
  *((_QWORD *)v4 + 2) = 0;
  if (*(_DWORD *)this == 1)
  {
    Inspector::AsyncStackTrace::~AsyncStackTrace(this);
    WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    v5 = *((_QWORD *)v4 + 1);
  }
  else
  {
    --*(_DWORD *)this;
  }
  v30 = *(Inspector::AsyncStackTrace **)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 != 1)
    {
      --*(_DWORD *)v30;
      return;
    }
    goto LABEL_46;
  }
}

void Inspector::AsyncStackTrace::didDispatchAsyncCall(Inspector::AsyncStackTrace *this)
{
  Inspector::AsyncStackTrace *v2;
  uint64_t v3;
  Inspector::AsyncStackTrace *v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*((_BYTE *)this + 28) == 1 && !*((_BYTE *)this + 30))
  {
    *((_BYTE *)this + 28) = 0;
  }
  else
  {
    *((_BYTE *)this + 28) = 2;
    if (!*((_DWORD *)this + 6))
    {
      v2 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
      if (v2)
      {
        --*((_DWORD *)v2 + 6);
        *((_QWORD *)this + 2) = 0;
        if (*(_DWORD *)v2 == 1)
        {
          Inspector::AsyncStackTrace::~AsyncStackTrace(v2);
          WTF::fastFree(v5, v6, v7, v8, v9, v10, v11, v12);
        }
        else
        {
          --*(_DWORD *)v2;
        }
        v3 = *((_QWORD *)this + 1);
        v4 = *(Inspector::AsyncStackTrace **)(v3 + 32);
        *(_QWORD *)(v3 + 32) = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 1)
          {
            Inspector::AsyncStackTrace::~AsyncStackTrace(v4);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
      }
    }
  }
}

void Inspector::AsyncStackTrace::didCancelAsyncCall(Inspector::AsyncStackTrace *this)
{
  Inspector::AsyncStackTrace *v2;
  uint64_t v3;
  Inspector::AsyncStackTrace *v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*((_BYTE *)this + 28) != 3)
  {
    if (!*((_BYTE *)this + 28) && !*((_DWORD *)this + 6))
    {
      v2 = (Inspector::AsyncStackTrace *)*((_QWORD *)this + 2);
      if (v2)
      {
        --*((_DWORD *)v2 + 6);
        *((_QWORD *)this + 2) = 0;
        if (*(_DWORD *)v2 == 1)
        {
          Inspector::AsyncStackTrace::~AsyncStackTrace(v2);
          WTF::fastFree(v5, v6, v7, v8, v9, v10, v11, v12);
        }
        else
        {
          --*(_DWORD *)v2;
        }
        v3 = *((_QWORD *)this + 1);
        v4 = *(Inspector::AsyncStackTrace **)(v3 + 32);
        *(_QWORD *)(v3 + 32) = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 1)
          {
            Inspector::AsyncStackTrace::~AsyncStackTrace(v4);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
      }
    }
    *((_BYTE *)this + 28) = 3;
  }
}

void Inspector::AsyncStackTrace::buildInspectorObject(Inspector::AsyncStackTrace *this@<X0>, uint64_t *a2@<X8>)
{
  Inspector::AsyncStackTrace *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF *v53[2];
  char v54;

  if (!this)
  {
    *a2 = 0;
    return;
  }
  v3 = this;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (WTF *)v4;
    v7 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v7 = 0x500000001;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 2) = 0;
    v53[0] = v7;
    Inspector::ScriptCallStack::buildInspectorArray(*((Inspector::ScriptCallStack **)v3 + 1), &v52);
    v8 = Inspector::Protocol::Console::StackTrace::Builder<0>::setCallFrames((uint64_t *)v53, &v52);
    v4 = *v8;
    *v8 = 0;
    v16 = v52;
    v52 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::JSONImpl::Value::operator delete(v16, v9, v10, v11, v12, v13, v14, v15);
      else
        --*(_DWORD *)v16;
    }
    v17 = v53[0];
    v53[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::JSONImpl::Value::operator delete(v17, v9, v10, v11, v12, v13, v14, v15);
      else
        --*(_DWORD *)v17;
    }
    if (*((_BYTE *)v3 + 29))
      Inspector::Protocol::Console::StackTrace::setTruncated((Inspector::Protocol::Console::StackTrace *)v4, 1);
    v18 = *((_QWORD *)v3 + 1);
    if (!*(_DWORD *)(v18 + 20))
    {
      __break(0xC471u);
      return;
    }
    if (WTF::equal(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8), "[native code]", 13))
    {
      v26 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v26 = 0x1600000002;
      *(_QWORD *)(v26 + 8) = "topCallFrameIsBoundary";
      *(_DWORD *)(v26 + 16) = 4;
      v51 = (WTF::StringImpl *)v26;
      v27 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = 0x100000001;
      *((_BYTE *)v27 + 8) = 1;
      v52 = v27;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v51, (const WTF::StringImpl *)&v52, v28, v29, v30, v31, v32, (uint64_t)v53);
      if (v54)
      {
        v33 = (uint64_t *)(v4 + 24);
        v34 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v34 == *(_DWORD *)(v4 + 32))
        {
          v48 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v51);
          v34 = *(unsigned int *)(v4 + 36);
          v49 = *(_QWORD *)(v4 + 24);
          v50 = *v48;
          if (*v48)
            *v50 += 2;
          *(_QWORD *)(v49 + 8 * v34) = v50;
        }
        else
        {
          v35 = *v33;
          v36 = v51;
          if (v51)
            *(_DWORD *)v51 += 2;
          *(_QWORD *)(v35 + 8 * v34) = v36;
        }
        *(_DWORD *)(v4 + 36) = v34 + 1;
      }
      v37 = v52;
      v52 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::JSONImpl::Value::operator delete(v37, v19, v20, v21, v22, v23, v24, v25);
        else
          --*(_DWORD *)v37;
      }
      v38 = v51;
      v51 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          if (v5)
            goto LABEL_28;
          goto LABEL_26;
        }
        *(_DWORD *)v38 -= 2;
      }
    }
    if (v5)
      goto LABEL_28;
LABEL_26:
    if (v4)
    {
      ++*(_DWORD *)v4;
      v5 = v4;
    }
    else
    {
      v5 = 0;
    }
LABEL_28:
    if (v6)
    {
      ++*(_DWORD *)v4;
      v53[0] = (WTF *)v4;
      Inspector::Protocol::Console::StackTrace::setParentStackTrace((uint64_t)v6, v53);
      v39 = v53[0];
      v53[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
          WTF::JSONImpl::Value::operator delete(v39, v19, v20, v21, v22, v23, v24, v25);
        else
          --*(_DWORD *)v39;
      }
      if (*(_DWORD *)v6 == 1)
        WTF::JSONImpl::Value::operator delete(v6, v19, v20, v21, v22, v23, v24, v25);
      else
        --*(_DWORD *)v6;
    }
    v3 = (Inspector::AsyncStackTrace *)*((_QWORD *)v3 + 2);
  }
  while (v3);
  *a2 = v5;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::JSONImpl::Value::operator delete((WTF *)v4, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v4;
  }
}

uint64_t *Inspector::Protocol::Console::StackTrace::Builder<0>::setCallFrames(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xA00000002;
  *(_QWORD *)(v5 + 8) = "callFrames";
  *(_DWORD *)(v5 + 16) = 4;
  v6 = *a2;
  *a2 = 0;
  v37 = v6;
  v38 = (WTF::StringImpl *)v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v38, (const WTF::StringImpl *)&v37, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v38);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v37;
  v37 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v38;
  v38 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

void Inspector::Protocol::Console::StackTrace::setTruncated(Inspector::Protocol::Console::StackTrace *this, char a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  _BYTE v37[24];

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x900000002;
  *(_QWORD *)(v4 + 8) = "truncated";
  *(_DWORD *)(v4 + 16) = 4;
  v35 = (WTF::StringImpl *)v4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x100000001;
  *((_BYTE *)v5 + 8) = a2;
  v36 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, (WTF::AtomStringImpl *)&v35, (const WTF::StringImpl *)&v36, v6, v7, v8, v9, v10, (uint64_t)v37);
  if (v37[16])
  {
    v18 = (uint64_t *)((char *)this + 24);
    v19 = *((unsigned int *)this + 9);
    if ((_DWORD)v19 == *((_DWORD *)this + 8))
    {
      v32 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v35);
      v19 = *((unsigned int *)this + 9);
      v33 = *((_QWORD *)this + 3);
      v34 = *v32;
      if (*v32)
        *v34 += 2;
      *(_QWORD *)(v33 + 8 * v19) = v34;
    }
    else
    {
      v20 = *v18;
      v21 = v35;
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)this + 9) = v19 + 1;
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

void Inspector::Protocol::Console::StackTrace::setParentStackTrace(uint64_t a1, WTF **a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  _BYTE v37[24];

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1000000002;
  *(_QWORD *)(v4 + 8) = "parentStackTrace";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = *a2;
  *a2 = 0;
  v35 = v5;
  v36 = (WTF::StringImpl *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(a1 + 16), (WTF::AtomStringImpl *)&v36, (const WTF::StringImpl *)&v35, v6, v7, v8, v9, v10, (uint64_t)v37);
  if (v37[16])
  {
    v18 = (uint64_t *)(a1 + 24);
    v19 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 32))
    {
      v32 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v36);
      v19 = *(unsigned int *)(a1 + 36);
      v33 = *(_QWORD *)(a1 + 24);
      v34 = *v32;
      if (*v32)
        *v34 += 2;
      *(_QWORD *)(v33 + 8 * v19) = v34;
    }
    else
    {
      v20 = *v18;
      v21 = v36;
      if (v36)
        *(_DWORD *)v36 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(a1 + 36) = v19 + 1;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

uint64_t Inspector::ConsoleMessage::ConsoleMessage(uint64_t a1, char a2, char a3, char a4, _DWORD **a5, unint64_t a6, double a7)
{
  _DWORD *v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  timespec __tp;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a4;
  v9 = *a5;
  if (*a5)
    *v9 += 2;
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  v10 = (_QWORD *)(a1 + 80);
  if (a6)
  {
    __tp.tv_sec = (__darwin_time_t)"0.";
    __tp.tv_nsec = 3;
    v12 = a6;
    result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&__tp, &v12, (int **)(a1 + 80));
    if (!*v10)
    {
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    *v10 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (a7 == 0.0)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    a7 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  }
  *(double *)(a1 + 88) = a7;
  return a1;
}

{
  _DWORD *v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  timespec __tp;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a4;
  v9 = *a5;
  if (*a5)
    *v9 += 2;
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  v10 = (_QWORD *)(a1 + 80);
  if (a6)
  {
    __tp.tv_sec = (__darwin_time_t)"0.";
    __tp.tv_nsec = 3;
    v12 = a6;
    result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&__tp, &v12, (int **)(a1 + 80));
    if (!*v10)
    {
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    *v10 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (a7 == 0.0)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    a7 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  }
  *(double *)(a1 + 88) = a7;
  return a1;
}

unint64_t Inspector::IdentifiersFactory::requestId@<X0>(unint64_t this@<X0>, int **a2@<X8>)
{
  if (this)
    return Inspector::addPrefixToIdentifier(a2, this);
  *a2 = 0;
  return this;
}

uint64_t Inspector::ConsoleMessage::ConsoleMessage(uint64_t a1, char a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, double a9, JSC::VM **a10, unint64_t a11)
{
  _DWORD *v13;
  double v14;
  _DWORD *v15;
  int **v16;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a4;
  v13 = (_DWORD *)*a5;
  if (*a5)
    *v13 += 2;
  *(_QWORD *)(a1 + 8) = v13;
  v14 = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v15 = (_DWORD *)*a6;
  if (*a6)
    *v15 += 2;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = a7;
  *(_DWORD *)(a1 + 68) = a8;
  v16 = (int **)(a1 + 80);
  *(_DWORD *)(a1 + 72) = 1;
  if (a11)
    v16 = (int **)Inspector::addPrefixToIdentifier(v16, a11);
  else
    *v16 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (a9 == 0.0)
  {
    v14 = WTF::WallTime::now((WTF::WallTime *)v16);
    a9 = v14;
  }
  *(double *)(a1 + 88) = a9;
  Inspector::ConsoleMessage::autogenerateMetadata((Inspector::ConsoleMessage *)a1, a10, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v14);
  return a1;
}

{
  return Inspector::ConsoleMessage::ConsoleMessage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

double Inspector::ConsoleMessage::autogenerateMetadata(Inspector::ConsoleMessage *this, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double result)
{
  uint64_t v10;
  Inspector::ScriptCallStack *v11;
  Inspector::ScriptCallStack *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Inspector::ScriptCallStack *v21;

  if (a2 && *((_BYTE *)this + 1) != 7)
  {
    Inspector::createScriptCallStackForConsole(a2, (JSC::JSGlobalObject *)0xC8, a3, a4, a5, a6, a7, a8, (uint64_t *)&v21, result);
    v10 = (uint64_t)v21;
    v21 = 0;
    v11 = (Inspector::ScriptCallStack *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v10;
    if (v11)
    {
      WTF::RefCounted<Inspector::ScriptCallStack>::deref(v11);
      v12 = v21;
      v21 = 0;
      if (v12)
        WTF::RefCounted<Inspector::ScriptCallStack>::deref(v12);
    }
    v13 = Inspector::ScriptCallStack::firstNonNativeCallFrame(*((Inspector::ScriptCallStack **)this + 3));
    if (v13)
    {
      v20 = v13;
      WTF::String::operator=((unint64_t *)this + 6, (WTF::AtomStringImpl *)(v13 + 8), v14, v15, v16, v17, v18, v19);
      result = *(double *)(v20 + 28);
      *((double *)this + 8) = result;
    }
  }
  return result;
}

uint64_t Inspector::ConsoleMessage::ConsoleMessage(uint64_t a1, char a2, char a3, char a4, _DWORD **a5, uint64_t *a6, unint64_t a7, double a8)
{
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  Inspector::ScriptCallStack *v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  timespec __tp;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a4;
  v10 = *a5;
  if (*a5)
    *v10 += 2;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  v12 = (_QWORD *)(a1 + 80);
  if (a7)
  {
    __tp.tv_sec = (__darwin_time_t)"0.";
    __tp.tv_nsec = 3;
    v34 = a7;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&__tp, &v34, (int **)(a1 + 80));
    if (!*v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198603A90);
    }
  }
  else
  {
    *v12 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (a8 == 0.0)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    a8 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  }
  *(double *)(a1 + 88) = a8;
  v13 = *(Inspector::ScriptCallStack **)(a1 + 24);
  if (v13)
  {
    v14 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v13);
    if (v14)
    {
      v22 = v14;
      v23 = *(_DWORD **)(v14 + 8);
      if (v23)
        *v23 += 2;
      v24 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v22 + 28);
    }
  }
  return a1;
}

uint64_t Inspector::ConsoleMessage::ConsoleMessage(uint64_t a1, char a2, char a3, char a4, _DWORD **a5, uint64_t *a6, uint64_t *a7, unint64_t a8, double a9)
{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Inspector::ScriptCallStack *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  timespec __tp;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_BYTE *)(a1 + 2) = a4;
  v11 = *a5;
  if (*a5)
    *v11 += 2;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 16) = v12;
  v13 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  v14 = (_QWORD *)(a1 + 80);
  if (a8)
  {
    __tp.tv_sec = (__darwin_time_t)"0.";
    __tp.tv_nsec = 3;
    v36 = a8;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&__tp, &v36, (int **)(a1 + 80));
    if (!*v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198603BECLL);
    }
  }
  else
  {
    *v14 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (a9 == 0.0)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    a9 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  }
  *(double *)(a1 + 88) = a9;
  v15 = *(Inspector::ScriptCallStack **)(a1 + 24);
  if (v15)
  {
    v16 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v15);
    if (v16)
    {
      v24 = v16;
      v25 = *(_DWORD **)(v16 + 8);
      if (v25)
        *v25 += 2;
      v26 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v24 + 28);
    }
  }
  return a1;
}

Inspector::ConsoleMessage *Inspector::ConsoleMessage::ConsoleMessage(Inspector::ConsoleMessage *this, char a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, JSC::VM **a7, unint64_t a8, double a9)
{
  _DWORD *v12;
  uint64_t v13;
  double v14;
  int **v15;

  *(_BYTE *)this = a2;
  *((_BYTE *)this + 1) = a3;
  *((_BYTE *)this + 2) = a4;
  v12 = (_DWORD *)*a5;
  if (*a5)
    *v12 += 2;
  *((_QWORD *)this + 1) = v12;
  v13 = *a6;
  *a6 = 0;
  *((_QWORD *)this + 2) = v13;
  v14 = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1;
  v15 = (int **)((char *)this + 80);
  if (a8)
    v15 = (int **)Inspector::addPrefixToIdentifier(v15, a8);
  else
    *v15 = 0;
  *((_QWORD *)this + 11) = 0;
  if (a9 == 0.0)
  {
    v14 = WTF::WallTime::now((WTF::WallTime *)v15);
    a9 = v14;
  }
  *((double *)this + 11) = a9;
  Inspector::ConsoleMessage::autogenerateMetadata(this, a7, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v14);
  return this;
}

uint64_t Inspector::ConsoleMessage::ConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  WTF::StringImpl **v13;
  _QWORD **v14;
  int **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __darwin_time_t v44;
  BOOL v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *tv_sec;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *tv_nsec;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t *v99;
  size_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::AtomStringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  timespec __tp;
  unsigned int v178;
  char v179;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  v13 = (WTF::StringImpl **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v14 = (_QWORD **)(a1 + 56);
  *(_BYTE *)(a1 + 2) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1;
  v15 = (int **)(a1 + 80);
  *(_OWORD *)(a1 + 40) = 0u;
  if (a7)
  {
    __tp.tv_sec = (__darwin_time_t)"0.";
    __tp.tv_nsec = 3;
    v175 = a7;
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&__tp, (unint64_t *)&v175, v15);
    if (!*v15)
      goto LABEL_125;
  }
  else
  {
    *v15 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (a9 == 0.0)
  {
    __tp.tv_sec = 0;
    __tp.tv_nsec = 0;
    clock_gettime(_CLOCK_REALTIME, &__tp);
    a9 = (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
  }
  *(double *)(a1 + 88) = a9;
  if (a6)
  {
    JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::Strong(&__tp, *(_QWORD *)(a6 + 56), a6, a4, a5, a6, a7, a8);
    if (__tp.tv_sec)
    {
      v23 = *(_QWORD *)__tp.tv_sec;
      if (!*v14)
      {
        v24 = **(_QWORD **)(((__tp.tv_sec - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v25 = *(_QWORD **)(v24 + 712);
        if (!v25)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v24 + 672), v16, v17, v18, v19, v20, v21, v22);
          v25 = *(_QWORD **)(v24 + 712);
        }
        *(_QWORD *)(v24 + 712) = *v25;
        *v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
        *v14 = v25 + 2;
      }
      JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::set(v14, v23);
      if (__tp.tv_sec)
      {
        v26 = (uint64_t *)(__tp.tv_sec - 16);
        v27 = *(_QWORD *)(((__tp.tv_sec - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v28 = *(uint64_t **)(__tp.tv_sec - 8);
        if (v28)
        {
          v29 = *v26;
          *v28 = *v26;
          *(_QWORD *)(v29 + 8) = v28;
          *v26 = 0;
          v26[1] = 0;
        }
        *v26 = *(_QWORD *)(v27 + 40);
        *(_QWORD *)(v27 + 40) = v26;
      }
    }
    else
    {
      v30 = *v14;
      if (*v14)
      {
        v171 = v30 - 2;
        v172 = *(_QWORD *)(((unint64_t)(v30 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v173 = (uint64_t *)*(v30 - 1);
        if (v173)
        {
          v174 = *v171;
          *v173 = *v171;
          *(_QWORD *)(v174 + 8) = v173;
          *v171 = 0;
          v171[1] = 0;
        }
        *v171 = *(_QWORD *)(v172 + 40);
        *(_QWORD *)(v172 + 40) = v171;
        *v14 = 0;
      }
    }
  }
  v31 = *(unsigned int *)(a5 + 12);
  if (!(_DWORD)v31)
    return a1;
  if (v31 >> 28)
  {
LABEL_125:
    __break(0xC471u);
    JUMPOUT(0x1986041A0);
  }
  v32 = (uint64_t *)(a1 + 32);
  v33 = WTF::fastMalloc((WTF *)(16 * v31));
  *(_DWORD *)(a1 + 40) = v31;
  *(_QWORD *)(a1 + 32) = v33;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  v178 = 0;
  v179 = 1;
  v41 = *(unsigned int *)(a5 + 12);
  if (!(_DWORD)v41)
    goto LABEL_92;
  v42 = *(_QWORD *)a5;
  v43 = 16 * v41;
  do
  {
    if (*(_DWORD *)v42 == 1)
    {
      v34 = (WTF::AtomStringImpl *)v178;
      if ((v178 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1986042C8);
      }
      if (v178)
      {
        LODWORD(v175) = 0;
        tv_sec = (WTF::StringImpl *)__tp.tv_sec;
        if (__tp.tv_sec)
          goto LABEL_38;
        if (__tp.tv_nsec && *(_DWORD *)(__tp.tv_nsec + 4) > v178 + (v178 >> 2))
        {
          if ((*(_BYTE *)(__tp.tv_nsec + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&__tp, (WTF::AtomStringImpl *)v178, v35, v36, v37, v38, v39, v40);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&__tp, (WTF::AtomStringImpl *)v178, v35, v36, v37, v38, v39, v40);
          v101 = (WTF::StringImpl *)__tp.tv_sec;
          __tp.tv_sec = __tp.tv_nsec;
          __tp.tv_nsec = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
            {
              WTF::StringImpl::~StringImpl(v101, v92, v93, v94, v95, v96, v97, v98);
              WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
            }
            else
            {
              *(_DWORD *)v101 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__tp);
        tv_sec = (WTF::StringImpl *)__tp.tv_sec;
        if (__tp.tv_sec)
LABEL_38:
          *(_DWORD *)tv_sec += 2;
        v176 = tv_sec;
        v48 = *(unsigned int *)(a1 + 44);
        if ((_DWORD)v48 == *(_DWORD *)(a1 + 40))
        {
          v49 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v48 + 1, (unint64_t)&v175);
          v48 = *(unsigned int *)(a1 + 44);
          v50 = *(_QWORD *)(a1 + 32) + 16 * v48;
          *(_DWORD *)v50 = *(_DWORD *)v49;
          v51 = *(_QWORD *)(v49 + 8);
          *(_QWORD *)(v49 + 8) = 0;
          *(_QWORD *)(v50 + 8) = v51;
        }
        else
        {
          v52 = *v32 + 16 * v48;
          *(_DWORD *)v52 = v175;
          v176 = 0;
          *(_QWORD *)(v52 + 8) = tv_sec;
        }
        *(_DWORD *)(a1 + 44) = v48 + 1;
        v53 = v176;
        v176 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
        }
        v54 = (WTF::StringImpl *)__tp.tv_sec;
        __tp.tv_sec = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
        tv_nsec = (WTF::StringImpl *)__tp.tv_nsec;
        __tp.tv_nsec = 0;
        if (tv_nsec)
        {
          if (*(_DWORD *)tv_nsec == 2)
          {
            WTF::StringImpl::~StringImpl(tv_nsec, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          }
          else
          {
            *(_DWORD *)tv_nsec -= 2;
          }
        }
        v178 = 0;
      }
      v56 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v56 == *(_DWORD *)(a1 + 40))
      {
        v57 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v56 + 1, v42);
        v56 = *(unsigned int *)(a1 + 44);
        v58 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(v58 + 16 * v56) = *(_DWORD *)v57;
        v59 = *(_DWORD **)(v57 + 8);
        if (!v59)
        {
LABEL_55:
          *(_QWORD *)(v58 + 16 * v56 + 8) = v59;
          *(_DWORD *)(a1 + 44) = v56 + 1;
          goto LABEL_56;
        }
      }
      else
      {
        v58 = *v32;
        *(_DWORD *)(*v32 + 16 * v56) = *(_DWORD *)v42;
        v59 = *(_DWORD **)(v42 + 8);
        if (!v59)
          goto LABEL_55;
      }
      *v59 += 2;
      goto LABEL_55;
    }
    if (*(_DWORD *)v42)
      goto LABEL_56;
    v44 = *(_QWORD *)(v42 + 8);
    if (v178)
      v45 = 0;
    else
      v45 = __tp.tv_nsec == 0;
    if (v45)
    {
      if (v44)
        *(_DWORD *)v44 += 2;
      v46 = (WTF::StringImpl *)__tp.tv_sec;
      __tp.tv_sec = v44;
      if (v46)
      {
        if (*(_DWORD *)v46 != 2)
        {
          *(_DWORD *)v46 -= 2;
          goto LABEL_32;
        }
        WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        v44 = *(_QWORD *)(v42 + 8);
        if (!v44)
        {
LABEL_34:
          v178 = v44;
          goto LABEL_56;
        }
      }
      else
      {
LABEL_32:
        if (!v44)
          goto LABEL_34;
      }
      LODWORD(v44) = *(_DWORD *)(v44 + 4);
      goto LABEL_34;
    }
    if (!v44)
    {
      v99 = 0;
      v100 = 0;
LABEL_71:
      WTF::StringBuilder::append((uint64_t)&__tp, v99, v100, v36, v37, v38, v39, v40);
      goto LABEL_56;
    }
    v99 = *(int8x16_t **)(v44 + 8);
    v100 = *(unsigned int *)(v44 + 4);
    if ((*(_BYTE *)(v44 + 16) & 4) != 0)
      goto LABEL_71;
    WTF::StringBuilder::append((uint64_t)&__tp, v99, v100, v36, v37, v38, v39, v40);
LABEL_56:
    v42 += 16;
    v43 -= 16;
  }
  while (v43);
  v34 = (WTF::AtomStringImpl *)v178;
  if ((v178 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19860432CLL);
  }
  if (v178)
  {
    LODWORD(v175) = 0;
    v110 = (WTF::StringImpl *)__tp.tv_sec;
    if (__tp.tv_sec)
      goto LABEL_84;
    if (__tp.tv_nsec && *(_DWORD *)(__tp.tv_nsec + 4) > v178 + (v178 >> 2))
    {
      if ((*(_BYTE *)(__tp.tv_nsec + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&__tp, (WTF::AtomStringImpl *)v178, v35, v36, v37, v38, v39, v40);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&__tp, (WTF::AtomStringImpl *)v178, v35, v36, v37, v38, v39, v40);
      v162 = (WTF::StringImpl *)__tp.tv_sec;
      __tp.tv_sec = __tp.tv_nsec;
      __tp.tv_nsec = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 2)
        {
          WTF::StringImpl::~StringImpl(v162, v155, v156, v157, v158, v159, v160, v161);
          WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
        }
        else
        {
          *(_DWORD *)v162 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__tp);
    v110 = (WTF::StringImpl *)__tp.tv_sec;
    if (__tp.tv_sec)
LABEL_84:
      *(_DWORD *)v110 += 2;
    v176 = v110;
    v111 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v111 == *(_DWORD *)(a1 + 40))
    {
      v112 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v111 + 1, (unint64_t)&v175);
      v113 = *(unsigned int *)(a1 + 44);
      v114 = *(_QWORD *)(a1 + 32) + 16 * v113;
      *(_DWORD *)v114 = *(_DWORD *)v112;
      v115 = *(_QWORD *)(v112 + 8);
      *(_QWORD *)(v112 + 8) = 0;
      *(_QWORD *)(v114 + 8) = v115;
      v116 = v176;
      *(_DWORD *)(a1 + 44) = v113 + 1;
      v176 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
        {
          WTF::StringImpl::~StringImpl(v116, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        }
        else
        {
          *(_DWORD *)v116 -= 2;
        }
      }
    }
    else
    {
      v117 = *(_QWORD *)(a1 + 32) + 16 * v111;
      *(_DWORD *)v117 = 0;
      *(_QWORD *)(v117 + 8) = v110;
      *(_DWORD *)(a1 + 44) = v111 + 1;
    }
  }
LABEL_92:
  if (*(_DWORD *)(a1 + 44))
  {
    v118 = *(WTF::StringImpl **)(*v32 + 8);
    if (v118)
      *(_DWORD *)v118 += 2;
    v119 = *v13;
    *v13 = v118;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
      {
        WTF::StringImpl::~StringImpl(v119, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      else
      {
        *(_DWORD *)v119 -= 2;
      }
    }
  }
  v120 = (WTF::StringImpl *)__tp.tv_nsec;
  __tp.tv_nsec = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  v121 = (WTF::StringImpl *)__tp.tv_sec;
  __tp.tv_sec = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  return a1;
}

uint64_t *JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *result = 0;
  }
  return result;
}

void Inspector::ConsoleMessage::~ConsoleMessage(Inspector::ConsoleMessage *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Inspector::ScriptCallStack *v25;
  Inspector::ScriptArguments *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::~Strong((uint64_t *)this + 7);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v10, v11, v12, v13, v14, v15, v16);
  v25 = (Inspector::ScriptCallStack *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v25);
  v26 = (Inspector::ScriptArguments *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v26)
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v26, v18, v19, v20, v21, v22, v23, v24);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
}

void Inspector::ConsoleMessage::addToFrontend(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, int a4)
{
  WTF *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  int v14;
  char *v15;
  int *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  char *v39;
  int v40;
  char *v41;
  int *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  char **v86;
  char *v87;
  int v88;
  char *v89;
  int *v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  int v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  int v131;
  uint64_t v132;
  double *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  WTF *v150;
  WTF *v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  int v173;
  uint64_t v174;
  double *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::AtomStringImpl *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  double *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::AtomStringImpl *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  WTF *v207;
  WTF *v208;
  WTF *v209;
  uint64_t v210;
  JSC::JSGlobalObject **v211;
  JSC::JSGlobalObject *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  const void **v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t **v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  WTF *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  const void *v235;
  void *v236;
  WTF **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  const char *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  WTF *v343;
  WTF *v344;
  unint64_t v345;
  const char *v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  const void *v350;
  void *v351;
  WTF **v352;
  unint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  WTF::StringImpl *v361;
  _DWORD **v362;
  uint64_t v363;
  _DWORD *v364;
  _DWORD **v365;
  uint64_t v366;
  _DWORD *v367;
  _DWORD **v368;
  uint64_t v369;
  _DWORD *v370;
  _DWORD **v371;
  uint64_t v372;
  _DWORD *v373;
  _DWORD **v374;
  uint64_t v375;
  _DWORD *v376;
  _DWORD **v377;
  uint64_t v378;
  _DWORD *v379;
  _DWORD **v380;
  uint64_t v381;
  _DWORD *v382;
  _DWORD **v383;
  uint64_t v384;
  _DWORD *v385;
  uint64_t v386;
  WTF *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _DWORD *v393;
  WTF::AtomStringImpl *v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  WTF *v398;
  WTF *v399;
  WTF *v400;
  _DWORD **v401;
  uint64_t v402;
  _DWORD *v403;
  uint64_t v404;
  WTF *v405;
  WTF *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  const void *v411;
  void *v412;
  WTF **v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  WTF::AtomStringImpl *v425;
  const WTF::String *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  const WTF::String *v434;
  const char *v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  unsigned __int8 *v439;
  uint64_t v440;
  uint64_t v441;
  WTF *v442;
  WTF *v443;
  unint64_t v444;
  unsigned __int8 *v445;
  const char *v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  const void *v450;
  void *v451;
  WTF **v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  WTF *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  WTF *v471;
  WTF *v472;
  WTF *v473;
  unint64_t v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  WTF::StringImpl *v482;
  Inspector::ScriptCallStack *v483;
  WTF *v484;
  uint64_t v485;
  WTF *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  WTF::AtomStringImpl *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  WTF *v502;
  WTF *v503;
  WTF::StringImpl *v504;
  WTF *v505;
  unint64_t v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  void *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _DWORD **v522;
  uint64_t v523;
  _DWORD *v524;
  _DWORD **v525;
  uint64_t v526;
  _DWORD *v527;
  unint64_t v528;
  void *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  _DWORD **v544;
  uint64_t v545;
  _DWORD *v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  WTF *v551;
  uint64_t *v552;
  void (**v554)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v555;
  char v556;
  _QWORD *v557;
  WTF *v558;
  WTF *v559;
  WTF *v560[2];
  char v561;
  WTF *v562;

  v7 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = 0x500000001;
  *((_QWORD *)v7 + 2) = 0;
  v8 = (uint64_t *)((char *)v7 + 16);
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  v9 = *a1;
  if (v9 >= 0x11)
    v10 = 97;
  else
    v10 = v9 + 81;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000002;
  *(_QWORD *)(v11 + 8) = "source";
  *(_DWORD *)(v11 + 16) = 4;
  v562 = (WTF *)v11;
  v12 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v10];
  v13 = v12[1];
  if (v13)
  {
    v14 = (_DWORD)v13 - 1;
    if (v13 == (char *)1)
    {
      v16 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v15 = *v12;
      v16 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v16 = 2;
      v16[1] = v14;
      *((_QWORD *)v16 + 1) = v15;
      v16[4] = 4;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = 0x400000001;
  *((_QWORD *)v17 + 1) = v16;
  if (v16)
    *v16 += 2;
  v560[0] = v17;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v18, v19, v20, v21, v22, (uint64_t)&v554);
  if (v556)
  {
    v30 = (uint64_t *)((char *)v7 + 24);
    v31 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v31 == *((_DWORD *)v7 + 8))
    {
      v362 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v562);
      v31 = *((unsigned int *)v7 + 9);
      v363 = *((_QWORD *)v7 + 3);
      v364 = *v362;
      if (*v362)
        *v364 += 2;
      *(_QWORD *)(v363 + 8 * v31) = v364;
    }
    else
    {
      v32 = *v30;
      v33 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v32 + 8 * v31) = v33;
    }
    *((_DWORD *)v7 + 9) = v31 + 1;
  }
  v34 = v560[0];
  v560[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v34, v23, v24, v25, v26, v27, v28, v29);
      if (!v16)
        goto LABEL_21;
      goto LABEL_19;
    }
    --*(_DWORD *)v34;
  }
  if (!v16)
    goto LABEL_21;
LABEL_19:
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
  }
  else
  {
    *v16 -= 2;
  }
LABEL_21:
  v35 = v562;
  v562 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  if ((a1[2] - 1) > 3u)
    v36 = 103;
  else
    v36 = *(_QWORD *)&aI_2[8 * (char)(a1[2] - 1)];
  v37 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v37 = 0x500000002;
  *(_QWORD *)(v37 + 8) = "level";
  *(_DWORD *)(v37 + 16) = 4;
  v562 = (WTF *)v37;
  v38 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v36];
  v39 = v38[1];
  if (v39)
  {
    v40 = (_DWORD)v39 - 1;
    if (v39 == (char *)1)
    {
      v42 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v41 = *v38;
      v42 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v42 = 2;
      v42[1] = v40;
      *((_QWORD *)v42 + 1) = v41;
      v42[4] = 4;
    }
  }
  else
  {
    v42 = 0;
  }
  v43 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v43 = 0x400000001;
  *((_QWORD *)v43 + 1) = v42;
  if (v42)
    *v42 += 2;
  v560[0] = v43;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v44, v45, v46, v47, v48, (uint64_t)&v554);
  if (v556)
  {
    v56 = (uint64_t *)((char *)v7 + 24);
    v57 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v57 == *((_DWORD *)v7 + 8))
    {
      v365 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)&v562);
      v57 = *((unsigned int *)v7 + 9);
      v366 = *((_QWORD *)v7 + 3);
      v367 = *v365;
      if (*v365)
        *v367 += 2;
      *(_QWORD *)(v366 + 8 * v57) = v367;
    }
    else
    {
      v58 = *v56;
      v59 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v58 + 8 * v57) = v59;
    }
    *((_DWORD *)v7 + 9) = v57 + 1;
  }
  v60 = v560[0];
  v560[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v60, v49, v50, v51, v52, v53, v54, v55);
      if (!v42)
        goto LABEL_44;
      goto LABEL_42;
    }
    --*(_DWORD *)v60;
  }
  if (!v42)
    goto LABEL_44;
LABEL_42:
  if (*v42 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v42, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
  }
  else
  {
    *v42 -= 2;
  }
LABEL_44:
  v61 = v562;
  v562 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v62 = 0x400000002;
  *(_QWORD *)(v62 + 8) = "text";
  *(_DWORD *)(v62 + 16) = 4;
  v562 = (WTF *)v62;
  v63 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v63 = 0x400000001;
  v69 = (_DWORD *)*((_QWORD *)a1 + 1);
  *((_QWORD *)v63 + 1) = v69;
  if (v69)
    *v69 += 2;
  v560[0] = v63;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v64, v65, v66, v67, v68, (uint64_t)&v554);
  if (v556)
  {
    v77 = (uint64_t *)((char *)v7 + 24);
    v78 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v78 == *((_DWORD *)v7 + 8))
    {
      v368 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v562);
      v78 = *((unsigned int *)v7 + 9);
      v369 = *((_QWORD *)v7 + 3);
      v370 = *v368;
      if (*v368)
        *v370 += 2;
      *(_QWORD *)(v369 + 8 * v78) = v370;
    }
    else
    {
      v79 = *v77;
      v80 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v79 + 8 * v78) = v80;
    }
    *((_DWORD *)v7 + 9) = v78 + 1;
  }
  v81 = v560[0];
  v560[0] = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 1)
      WTF::JSONImpl::Value::operator delete(v81, v70, v71, v72, v73, v74, v75, v76);
    else
      --*(_DWORD *)v81;
  }
  v82 = v562;
  v562 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v558 = v7;
  v83 = a1[1] - 1;
  if (v83 > 0xC)
    v84 = 103;
  else
    v84 = *(_QWORD *)&aL_0[8 * (char)v83];
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x400000002;
  *(_QWORD *)(v85 + 8) = "type";
  *(_DWORD *)(v85 + 16) = 4;
  v562 = (WTF *)v85;
  v86 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v84];
  v87 = v86[1];
  if (v87)
  {
    v88 = (_DWORD)v87 - 1;
    if (v87 == (char *)1)
    {
      v90 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v89 = *v86;
      v90 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v90 = 2;
      v90[1] = v88;
      *((_QWORD *)v90 + 1) = v89;
      v90[4] = 4;
    }
  }
  else
  {
    v90 = 0;
  }
  v91 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v91 = 0x400000001;
  *((_QWORD *)v91 + 1) = v90;
  if (v90)
    *v90 += 2;
  v560[0] = v91;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v92, v93, v94, v95, v96, (uint64_t)&v554);
  if (v556)
  {
    v104 = (uint64_t *)((char *)v7 + 24);
    v105 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v105 == *((_DWORD *)v7 + 8))
    {
      v371 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v105 + 1, (unint64_t)&v562);
      v105 = *((unsigned int *)v7 + 9);
      v372 = *((_QWORD *)v7 + 3);
      v373 = *v371;
      if (*v371)
        *v373 += 2;
      *(_QWORD *)(v372 + 8 * v105) = v373;
    }
    else
    {
      v106 = *v104;
      v107 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v106 + 8 * v105) = v107;
    }
    *((_DWORD *)v7 + 9) = v105 + 1;
  }
  v108 = v560[0];
  v560[0] = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v108, v97, v98, v99, v100, v101, v102, v103);
      if (!v90)
        goto LABEL_81;
      goto LABEL_79;
    }
    --*(_DWORD *)v108;
  }
  if (!v90)
    goto LABEL_81;
LABEL_79:
  if (*v90 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v90, v97, v98, v99, v100, v101, v102, v103);
    WTF::fastFree(v282, v283, v284, v285, v286, v287, v288, v289);
  }
  else
  {
    *v90 -= 2;
  }
LABEL_81:
  v109 = v562;
  v562 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = *((_DWORD *)a1 + 16);
  v111 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v111 = 0x400000002;
  *(_QWORD *)(v111 + 8) = "line";
  *(_DWORD *)(v111 + 16) = 4;
  v562 = (WTF *)v111;
  v112 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v112 = 0x300000001;
  v112[1] = (double)v110;
  v560[0] = (WTF *)v112;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v113, v114, v115, v116, v117, (uint64_t)&v554);
  if (v556)
  {
    v125 = (uint64_t *)((char *)v7 + 24);
    v126 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v126 == *((_DWORD *)v7 + 8))
    {
      v374 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, v126 + 1, (unint64_t)&v562);
      v126 = *((unsigned int *)v7 + 9);
      v375 = *((_QWORD *)v7 + 3);
      v376 = *v374;
      if (*v374)
        *v376 += 2;
      *(_QWORD *)(v375 + 8 * v126) = v376;
    }
    else
    {
      v127 = *v125;
      v128 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v127 + 8 * v126) = v128;
    }
    *((_DWORD *)v7 + 9) = v126 + 1;
  }
  v129 = v560[0];
  v560[0] = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 1)
      WTF::JSONImpl::Value::operator delete(v129, v118, v119, v120, v121, v122, v123, v124);
    else
      --*(_DWORD *)v129;
  }
  v130 = v562;
  v562 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = *((_DWORD *)a1 + 17);
  v132 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v132 = 0x600000002;
  *(_QWORD *)(v132 + 8) = "column";
  *(_DWORD *)(v132 + 16) = 4;
  v562 = (WTF *)v132;
  v133 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v133 = 0x300000001;
  v133[1] = (double)v131;
  v560[0] = (WTF *)v133;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v134, v135, v136, v137, v138, (uint64_t)&v554);
  if (v556)
  {
    v146 = (uint64_t *)((char *)v7 + 24);
    v147 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v147 == *((_DWORD *)v7 + 8))
    {
      v377 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v562);
      v147 = *((unsigned int *)v7 + 9);
      v378 = *((_QWORD *)v7 + 3);
      v379 = *v377;
      if (*v377)
        *v379 += 2;
      *(_QWORD *)(v378 + 8 * v147) = v379;
    }
    else
    {
      v148 = *v146;
      v149 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v148 + 8 * v147) = v149;
    }
    *((_DWORD *)v7 + 9) = v147 + 1;
  }
  v150 = v560[0];
  v560[0] = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 1)
      WTF::JSONImpl::Value::operator delete(v150, v139, v140, v141, v142, v143, v144, v145);
    else
      --*(_DWORD *)v150;
  }
  v151 = v562;
  v562 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v139, v140, v141, v142, v143, v144, v145);
      WTF::fastFree(v306, v307, v308, v309, v310, v311, v312, v313);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  v152 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v152 = 0x300000002;
  *(_QWORD *)(v152 + 8) = "url";
  *(_DWORD *)(v152 + 16) = 4;
  v562 = (WTF *)v152;
  v153 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v153 = 0x400000001;
  v159 = (_DWORD *)*((_QWORD *)a1 + 6);
  *((_QWORD *)v153 + 1) = v159;
  if (v159)
    *v159 += 2;
  v560[0] = v153;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v154, v155, v156, v157, v158, (uint64_t)&v554);
  if (v556)
  {
    v167 = (uint64_t *)((char *)v7 + 24);
    v168 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v168 == *((_DWORD *)v7 + 8))
    {
      v380 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v167, v168 + 1, (unint64_t)&v562);
      v168 = *((unsigned int *)v7 + 9);
      v381 = *((_QWORD *)v7 + 3);
      v382 = *v380;
      if (*v380)
        *v382 += 2;
      *(_QWORD *)(v381 + 8 * v168) = v382;
    }
    else
    {
      v169 = *v167;
      v170 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v169 + 8 * v168) = v170;
    }
    *((_DWORD *)v7 + 9) = v168 + 1;
  }
  v171 = v560[0];
  v560[0] = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 1)
      WTF::JSONImpl::Value::operator delete(v171, v160, v161, v162, v163, v164, v165, v166);
    else
      --*(_DWORD *)v171;
  }
  v172 = v562;
  v562 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v160, v161, v162, v163, v164, v165, v166);
      WTF::fastFree(v314, v315, v316, v317, v318, v319, v320, v321);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  v173 = *((_DWORD *)a1 + 18);
  v174 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v174 = 0xB00000002;
  *(_QWORD *)(v174 + 8) = "repeatCount";
  *(_DWORD *)(v174 + 16) = 4;
  v562 = (WTF *)v174;
  v175 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v175 = 0x300000001;
  v175[1] = (double)v173;
  v560[0] = (WTF *)v175;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v176, v177, v178, v179, v180, (uint64_t)&v554);
  if (v556)
  {
    v188 = (uint64_t *)((char *)v7 + 24);
    v189 = *((unsigned int *)v7 + 9);
    if ((_DWORD)v189 == *((_DWORD *)v7 + 8))
    {
      v383 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)&v562);
      v189 = *((unsigned int *)v7 + 9);
      v384 = *((_QWORD *)v7 + 3);
      v385 = *v383;
      if (*v383)
        *v385 += 2;
      *(_QWORD *)(v384 + 8 * v189) = v385;
    }
    else
    {
      v190 = *v188;
      v191 = v562;
      if (v562)
        *(_DWORD *)v562 += 2;
      *(_QWORD *)(v190 + 8 * v189) = v191;
    }
    *((_DWORD *)v7 + 9) = v189 + 1;
  }
  v192 = v560[0];
  v560[0] = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 1)
      WTF::JSONImpl::Value::operator delete(v192, v181, v182, v183, v184, v185, v186, v187);
    else
      --*(_DWORD *)v192;
  }
  v193 = v562;
  v562 = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v181, v182, v183, v184, v185, v186, v187);
      WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  if (*a1 == 2)
  {
    v194 = *((_QWORD *)a1 + 10);
    if (v194)
    {
      if (*(_DWORD *)(v194 + 4))
      {
        v386 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v386 = 0x1000000002;
        *(_QWORD *)(v386 + 8) = "networkRequestId";
        *(_DWORD *)(v386 + 16) = 4;
        v562 = (WTF *)v386;
        v387 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v387 = 0x400000001;
        v393 = (_DWORD *)*((_QWORD *)a1 + 10);
        *((_QWORD *)v387 + 1) = v393;
        if (v393)
          *v393 += 2;
        v560[0] = v387;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v388, v389, v390, v391, v392, (uint64_t)&v554);
        if (v556)
        {
          v395 = (uint64_t *)((char *)v7 + 24);
          v396 = *((unsigned int *)v7 + 9);
          if ((_DWORD)v396 == *((_DWORD *)v7 + 8))
          {
            v544 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v395, v396 + 1, (unint64_t)&v562);
            v396 = *((unsigned int *)v7 + 9);
            v545 = *((_QWORD *)v7 + 3);
            v546 = *v544;
            if (*v544)
              *v546 += 2;
            *(_QWORD *)(v545 + 8 * v396) = v546;
          }
          else
          {
            v397 = *v395;
            v398 = v562;
            if (v562)
              *(_DWORD *)v562 += 2;
            *(_QWORD *)(v397 + 8 * v396) = v398;
          }
          *((_DWORD *)v7 + 9) = v396 + 1;
        }
        v399 = v560[0];
        v560[0] = 0;
        if (v399)
        {
          if (*(_DWORD *)v399 == 1)
            WTF::JSONImpl::Value::operator delete(v399, v394, v182, v183, v184, v185, v186, v187);
          else
            --*(_DWORD *)v399;
        }
        v400 = v562;
        v562 = 0;
        if (v400)
        {
          if (*(_DWORD *)v400 == 2)
          {
            WTF::StringImpl::~StringImpl(v400, v394, v182, v183, v184, v185, v186, v187);
            WTF::fastFree(v528, v529, v530, v531, v532, v533, v534, v535);
          }
          else
          {
            *(_DWORD *)v400 -= 2;
          }
        }
      }
    }
  }
  v195 = *((double *)a1 + 11);
  if (v195 != 0.0)
  {
    v196 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v196 = 0x900000002;
    *(_QWORD *)(v196 + 8) = "timestamp";
    *(_DWORD *)(v196 + 16) = 4;
    v562 = (WTF *)v196;
    v197 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v197 = 0x200000001;
    v197[1] = v195;
    v560[0] = (WTF *)v197;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v8, (WTF::AtomStringImpl *)&v562, (const WTF::StringImpl *)v560, v198, v199, v200, v201, v202, (uint64_t)&v554);
    if (v556)
    {
      v204 = (uint64_t *)((char *)v7 + 24);
      v205 = *((unsigned int *)v7 + 9);
      if ((_DWORD)v205 == *((_DWORD *)v7 + 8))
      {
        v401 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v204, v205 + 1, (unint64_t)&v562);
        v205 = *((unsigned int *)v7 + 9);
        v402 = *((_QWORD *)v7 + 3);
        v403 = *v401;
        if (*v401)
          *v403 += 2;
        *(_QWORD *)(v402 + 8 * v205) = v403;
      }
      else
      {
        v206 = *v204;
        v207 = v562;
        if (v562)
          *(_DWORD *)v562 += 2;
        *(_QWORD *)(v206 + 8 * v205) = v207;
      }
      *((_DWORD *)v7 + 9) = v205 + 1;
    }
    v208 = v560[0];
    v560[0] = 0;
    if (v208)
    {
      if (*(_DWORD *)v208 == 1)
        WTF::JSONImpl::Value::operator delete(v208, v203, v182, v183, v184, v185, v186, v187);
      else
        --*(_DWORD *)v208;
    }
    v209 = v562;
    v562 = 0;
    if (v209)
    {
      if (*(_DWORD *)v209 == 2)
      {
        WTF::StringImpl::~StringImpl(v209, v203, v182, v183, v184, v185, v186, v187);
        WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
      }
      else
      {
        *(_DWORD *)v209 -= 2;
      }
    }
  }
  v210 = *((_QWORD *)a1 + 2);
  if (v210)
  {
    if (!*(_DWORD *)(v210 + 28) && !*((_DWORD *)a1 + 11))
      goto LABEL_370;
    v211 = *(JSC::JSGlobalObject ***)(v210 + 8);
    if (v211)
      goto LABEL_153;
  }
  else
  {
    if (!*((_DWORD *)a1 + 11))
      goto LABEL_370;
    v211 = (JSC::JSGlobalObject **)*((_QWORD *)a1 + 7);
    if (v211)
    {
LABEL_153:
      v212 = *v211;
      goto LABEL_157;
    }
  }
  v212 = 0;
LABEL_157:
  Inspector::InjectedScriptManager::injectedScriptFor(a3, v212, v182, v183, v184, v185, v186, v187, (uint64_t)&v554);
  v220 = v557;
  if (v557)
  {
    if (!*v557)
    {
      v554 = &off_1E3591350;
LABEL_184:
      v238 = v220 - 2;
      v239 = *(_QWORD *)(((unint64_t)(v220 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v240 = (uint64_t *)*(v220 - 1);
      if (v240)
      {
        v241 = *v238;
        *v240 = *v238;
        *(_QWORD *)(v241 + 8) = v240;
        *v238 = 0;
        v238[1] = 0;
      }
      *v238 = *(_QWORD *)(v239 + 40);
      *(_QWORD *)(v239 + 40) = v238;
      v557 = 0;
      goto LABEL_367;
    }
    v552 = a2;
    v221 = WTF::fastMalloc((WTF *)0x20);
    v222 = 0x600000001;
    *(_QWORD *)v221 = 0x600000001;
    *(_QWORD *)(v221 + 16) = 0;
    v223 = (const void **)(v221 + 16);
    *(_QWORD *)(v221 + 24) = 0;
    v224 = *((_QWORD *)a1 + 2);
    if (v224)
    {
      v225 = *(_DWORD *)(v224 + 28);
      if (v225)
      {
        if (a1[1] != 3 || (a4 & 1) == 0)
        {
          v338 = 0;
          v339 = "console";
          while (v338 < *(unsigned int *)(v224 + 28))
          {
            v340 = *(uint64_t **)(*(_QWORD *)(v224 + 16) + 8 * v338);
            if (v340)
              v341 = *v340;
            else
              v341 = 0;
            v342 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v342 = 0x700000002;
            *(_QWORD *)(v342 + 8) = v339;
            *(_DWORD *)(v342 + 16) = 4;
            v562 = (WTF *)v342;
            Inspector::InjectedScript::wrapObject((uint64_t)&v554, v341, (const WTF::String *)&v562, a4, v560);
            v343 = v562;
            v562 = 0;
            if (v343)
            {
              if (*(_DWORD *)v343 == 2)
              {
                WTF::StringImpl::~StringImpl(v343, v213, v214, v215, v216, v217, v218, v219);
                WTF::fastFree(v353, v354, v355, v356, v357, v358, v359, v360);
              }
              else
              {
                *(_DWORD *)v343 -= 2;
              }
            }
            v344 = v560[0];
            if (!v560[0])
              goto LABEL_237;
            v345 = *(unsigned int *)(v221 + 28);
            if ((_DWORD)v345 == *(_DWORD *)(v221 + 24))
            {
              v346 = v339;
              v347 = v345 + (v345 >> 2);
              if (v347 >= 0x10)
                v348 = v347 + 1;
              else
                v348 = 16;
              if (v348 <= v345 + 1)
                v349 = v345 + 1;
              else
                v349 = v348;
              if (v349 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198605BE8);
              }
              v350 = *v223;
              v351 = (void *)WTF::fastMalloc((WTF *)(8 * v349));
              *(_DWORD *)(v221 + 24) = v349;
              *(_QWORD *)(v221 + 16) = v351;
              memcpy(v351, v350, 8 * v345);
              v339 = v346;
              if (v350)
              {
                if (*v223 == v350)
                {
                  *(_QWORD *)(v221 + 16) = 0;
                  *(_DWORD *)(v221 + 24) = 0;
                }
                WTF::fastFree((unint64_t)v350, v213, v214, v215, v216, v217, v218, v219);
              }
              v345 = *(unsigned int *)(v221 + 28);
              v352 = (WTF **)(*(_QWORD *)(v221 + 16) + 8 * v345);
            }
            else
            {
              v352 = (WTF **)((char *)*v223 + 8 * v345);
            }
            *v352 = v344;
            *(_DWORD *)(v221 + 28) = v345 + 1;
            ++v338;
            v224 = *((_QWORD *)a1 + 2);
            if (v338 >= *(unsigned int *)(v224 + 28))
              goto LABEL_309;
          }
          goto LABEL_422;
        }
        v226 = *(uint64_t ***)(v224 + 16);
        if (*v226)
          v227 = **v226;
        else
          v227 = 0;
        if (v225 >= 2 && (v228 = v226[1]) != 0)
          v229 = *v228;
        else
          v229 = 0;
        Inspector::InjectedScript::wrapTable((uint64_t)&v554, v227, v229, v560);
        v230 = v560[0];
        if (!v560[0])
        {
LABEL_237:
          if (*(_DWORD *)v221 == 1)
            WTF::JSONImpl::Value::operator delete((WTF *)v221, v213, v214, v215, v216, v217, v218, v219);
          else
            --*(_DWORD *)v221;
          v554 = &off_1E3591350;
          if (v557)
          {
            v547 = v557 - 2;
            v548 = *(_QWORD *)(((unint64_t)(v557 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v549 = (uint64_t *)*(v557 - 1);
            if (v549)
            {
              v550 = *v547;
              *v549 = *v547;
              *(_QWORD *)(v550 + 8) = v549;
              *v547 = 0;
              v547[1] = 0;
            }
            *v547 = *(_QWORD *)(v548 + 40);
            *(_QWORD *)(v548 + 40) = v547;
            v557 = 0;
          }
          v361 = v555;
          v555 = 0;
          if (v361)
          {
            if (*(_DWORD *)v361 == 2)
            {
              WTF::StringImpl::~StringImpl(v361, v213, v214, v215, v216, v217, v218, v219);
              WTF::fastFree(v414, v415, v416, v417, v418, v419, v420, v421);
            }
            else
            {
              *(_DWORD *)v361 -= 2;
            }
          }
          v558 = 0;
          goto LABEL_387;
        }
        v231 = *(unsigned int *)(v221 + 28);
        if ((_DWORD)v231 == *(_DWORD *)(v221 + 24))
        {
          v232 = v231 + (v231 >> 2);
          if (v232 >= 0x10)
            v233 = v232 + 1;
          else
            v233 = 16;
          if (v233 <= v231 + 1)
            v234 = v231 + 1;
          else
            v234 = v233;
          if (v234 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198605BF8);
          }
          v235 = *v223;
          v236 = (void *)WTF::fastMalloc((WTF *)(8 * v234));
          *(_DWORD *)(v221 + 24) = v234;
          *(_QWORD *)(v221 + 16) = v236;
          memcpy(v236, v235, 8 * v231);
          if (v235)
          {
            if (*v223 == v235)
            {
              *(_QWORD *)(v221 + 16) = 0;
              *(_DWORD *)(v221 + 24) = 0;
            }
            WTF::fastFree((unint64_t)v235, v213, v214, v215, v216, v217, v218, v219);
          }
          v231 = *(unsigned int *)(v221 + 28);
          v237 = (WTF **)(*(_QWORD *)(v221 + 16) + 8 * v231);
        }
        else
        {
          v237 = (WTF **)((char *)*v223 + 8 * v231);
        }
        *v237 = v230;
        *(_DWORD *)(v221 + 28) = v231 + 1;
        if (*(_DWORD *)(*((_QWORD *)a1 + 2) + 28) >= 2u)
        {
          v404 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v404 = 0x700000002;
          *(_QWORD *)(v404 + 8) = "console";
          *(_DWORD *)(v404 + 16) = 4;
          v559 = (WTF *)v404;
          Inspector::InjectedScript::wrapObject((uint64_t)&v554, v229, (const WTF::String *)&v559, 1, &v562);
          v405 = v559;
          v559 = 0;
          if (v405)
          {
            if (*(_DWORD *)v405 == 2)
            {
              WTF::StringImpl::~StringImpl(v405, v213, v214, v215, v216, v217, v218, v219);
              WTF::fastFree(v536, v537, v538, v539, v540, v541, v542, v543);
            }
            else
            {
              *(_DWORD *)v405 -= 2;
            }
          }
          v406 = v562;
          if (v562)
          {
            v562 = 0;
            v407 = *(unsigned int *)(v221 + 28);
            if ((_DWORD)v407 != *(_DWORD *)(v221 + 24))
            {
              v413 = (WTF **)((char *)*v223 + 8 * v407);
LABEL_308:
              *v413 = v406;
              *(_DWORD *)(v221 + 28) = v407 + 1;
              goto LABEL_309;
            }
            v408 = v407 + (v407 >> 2);
            if (v408 >= 0x10)
              v409 = v408 + 1;
            else
              v409 = 16;
            if (v409 <= v407 + 1)
              v410 = v407 + 1;
            else
              v410 = v409;
            if (!(v410 >> 29))
            {
              v411 = *v223;
              v412 = (void *)WTF::fastMalloc((WTF *)(8 * v410));
              *(_DWORD *)(v221 + 24) = v410;
              *(_QWORD *)(v221 + 16) = v412;
              memcpy(v412, v411, 8 * v407);
              if (v411)
              {
                if (*v223 == v411)
                {
                  *(_QWORD *)(v221 + 16) = 0;
                  *(_DWORD *)(v221 + 24) = 0;
                }
                WTF::fastFree((unint64_t)v411, v213, v214, v215, v216, v217, v218, v219);
              }
              v407 = *(unsigned int *)(v221 + 28);
              v413 = (WTF **)(*(_QWORD *)(v221 + 16) + 8 * v407);
              goto LABEL_308;
            }
LABEL_422:
            __break(0xC471u);
            JUMPOUT(0x198605BE0);
          }
        }
      }
    }
LABEL_309:
    if (*((_DWORD *)a1 + 11))
    {
      v422 = *((_QWORD *)a1 + 2);
      v423 = a1 + 56;
      if (v422)
        v424 = (unsigned __int8 *)(v422 + 8);
      else
        v424 = a1 + 56;
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v560, *(JSC::VM **)(**(_QWORD **)v424 + 56), v214, v215, v216, v217, v218, v219, *(double *)&v222);
      v432 = *((unsigned int *)a1 + 11);
      if ((_DWORD)v432)
      {
        v433 = 16 * v432;
        v434 = (const WTF::String *)(*((_QWORD *)a1 + 4) + 8);
        v435 = "console";
        while (1)
        {
          if (!*(_QWORD *)v434 || !*(_DWORD *)(*(_QWORD *)v434 + 4))
            goto LABEL_316;
          v436 = *((_DWORD *)v434 - 2);
          if (v436)
          {
            if (v436 != 1)
              goto LABEL_316;
            v437 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v437 = 0x700000002;
            *(_QWORD *)(v437 + 8) = v435;
            *(_DWORD *)(v437 + 16) = 4;
            v559 = (WTF *)v437;
            Inspector::InjectedScript::wrapJSONString((Inspector::InjectedScript *)&v554, v434, (const WTF::String *)&v559, a4, &v562);
          }
          else
          {
            v438 = *((_QWORD *)a1 + 2);
            if (v438)
              v439 = (unsigned __int8 *)(v438 + 8);
            else
              v439 = v423;
            v440 = JSC::jsString(*(JSC **)(**(_QWORD **)v439 + 56), v434, v426, v427, v428, v429, v430, v431);
            v441 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v441 = 0x700000002;
            *(_QWORD *)(v441 + 8) = v435;
            *(_DWORD *)(v441 + 16) = 4;
            v559 = (WTF *)v441;
            Inspector::InjectedScript::wrapObject((uint64_t)&v554, v440, (const WTF::String *)&v559, a4, &v562);
          }
          v442 = v562;
          v443 = v559;
          v559 = 0;
          if (!v443)
            goto LABEL_329;
          if (*(_DWORD *)v443 != 2)
            break;
          WTF::StringImpl::~StringImpl(v443, v425, (uint64_t)v426, v427, v428, v429, v430, v431);
          WTF::fastFree(v453, v454, v455, v456, v457, v458, v459, v460);
          if (v442)
          {
LABEL_330:
            v444 = *(unsigned int *)(v221 + 28);
            if ((_DWORD)v444 == *(_DWORD *)(v221 + 24))
            {
              v551 = v442;
              v445 = v423;
              v446 = v435;
              v447 = v444 + (v444 >> 2);
              if (v447 >= 0x10)
                v448 = v447 + 1;
              else
                v448 = 16;
              if (v448 <= v444 + 1)
                v449 = v444 + 1;
              else
                v449 = v448;
              if (v449 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198605BF0);
              }
              v450 = *v223;
              v451 = (void *)WTF::fastMalloc((WTF *)(8 * v449));
              *(_DWORD *)(v221 + 24) = v449;
              *(_QWORD *)(v221 + 16) = v451;
              memcpy(v451, v450, 8 * v444);
              v435 = v446;
              v423 = v445;
              if (v450)
              {
                if (*v223 == v450)
                {
                  *(_QWORD *)(v221 + 16) = 0;
                  *(_DWORD *)(v221 + 24) = 0;
                }
                WTF::fastFree((unint64_t)v450, v425, (uint64_t)v426, v427, v428, v429, v430, v431);
              }
              v444 = *(unsigned int *)(v221 + 28);
              v452 = (WTF **)(*(_QWORD *)(v221 + 16) + 8 * v444);
              v442 = v551;
            }
            else
            {
              v452 = (WTF **)((char *)*v223 + 8 * v444);
            }
            *v452 = v442;
            *(_DWORD *)(v221 + 28) = v444 + 1;
          }
LABEL_316:
          v434 = (const WTF::String *)((char *)v434 + 16);
          v433 -= 16;
          if (!v433)
            goto LABEL_347;
        }
        *(_DWORD *)v443 -= 2;
LABEL_329:
        if (v442)
          goto LABEL_330;
        goto LABEL_316;
      }
LABEL_347:
      JSC::JSLockHolder::~JSLockHolder((unsigned int **)v560, v425, (uint64_t)v426, v427, v428, v429, v430, v431);
    }
    a2 = v552;
    if (*(_DWORD *)(v221 + 28))
    {
      v461 = v558;
      v462 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v462 = 0xA00000002;
      *(_QWORD *)(v462 + 8) = "parameters";
      *(_DWORD *)(v462 + 16) = 4;
      v562 = (WTF *)v462;
      v559 = (WTF *)v221;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v461 + 2, &v562, (const WTF::StringImpl *)&v559, v463, v464, v465, v466, v467, (uint64_t)v560);
      if (v561)
      {
        v468 = (uint64_t *)((char *)v461 + 24);
        v469 = *((unsigned int *)v461 + 9);
        if ((_DWORD)v469 == *((_DWORD *)v461 + 8))
        {
          v525 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v468, v469 + 1, (unint64_t)&v562);
          v469 = *((unsigned int *)v461 + 9);
          v526 = *((_QWORD *)v461 + 3);
          v527 = *v525;
          if (*v525)
            *v527 += 2;
          *(_QWORD *)(v526 + 8 * v469) = v527;
        }
        else
        {
          v470 = *v468;
          v471 = v562;
          if (v562)
            *(_DWORD *)v562 += 2;
          *(_QWORD *)(v470 + 8 * v469) = v471;
        }
        *((_DWORD *)v461 + 9) = v469 + 1;
      }
      v472 = v559;
      v559 = 0;
      if (v472)
      {
        if (*(_DWORD *)v472 == 1)
          WTF::JSONImpl::Value::operator delete(v472, v213, v214, v215, v216, v217, v218, v219);
        else
          --*(_DWORD *)v472;
      }
      v473 = v562;
      v562 = 0;
      if (v473)
      {
        if (*(_DWORD *)v473 == 2)
        {
          WTF::StringImpl::~StringImpl(v473, v213, v214, v215, v216, v217, v218, v219);
          WTF::fastFree(v474, v475, v476, v477, v478, v479, v480, v481);
        }
        else
        {
          *(_DWORD *)v473 -= 2;
        }
      }
    }
    else if (*(_DWORD *)v221 == 1)
    {
      WTF::JSONImpl::Value::operator delete((WTF *)v221, v213, v214, v215, v216, v217, v218, v219);
    }
    else
    {
      --*(_DWORD *)v221;
    }
    v220 = v557;
    v554 = &off_1E3591350;
    if (!v557)
      goto LABEL_367;
    goto LABEL_184;
  }
  v554 = &off_1E3591350;
LABEL_367:
  v482 = v555;
  v555 = 0;
  if (v482)
  {
    if (*(_DWORD *)v482 == 2)
    {
      WTF::StringImpl::~StringImpl(v482, v213, v214, v215, v216, v217, v218, v219);
      WTF::fastFree(v506, v507, v508, v509, v510, v511, v512, v513);
    }
    else
    {
      *(_DWORD *)v482 -= 2;
    }
  }
LABEL_370:
  v483 = (Inspector::ScriptCallStack *)*((_QWORD *)a1 + 3);
  if (v483)
  {
    v484 = v558;
    Inspector::ScriptCallStack::buildInspectorObject(v483, &v559);
    v485 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v485 = 0xA00000002;
    *(_QWORD *)(v485 + 8) = "stackTrace";
    *(_DWORD *)(v485 + 16) = 4;
    v486 = v559;
    v559 = 0;
    v560[0] = (WTF *)v485;
    v562 = v486;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)v484 + 2, (WTF::AtomStringImpl *)v560, (const WTF::StringImpl *)&v562, v487, v488, v489, v490, v491, (uint64_t)&v554);
    if (v556)
    {
      v499 = (uint64_t *)((char *)v484 + 24);
      v500 = *((unsigned int *)v484 + 9);
      if ((_DWORD)v500 == *((_DWORD *)v484 + 8))
      {
        v522 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v499, v500 + 1, (unint64_t)v560);
        v500 = *((unsigned int *)v484 + 9);
        v523 = *((_QWORD *)v484 + 3);
        v524 = *v522;
        if (*v522)
          *v524 += 2;
        *(_QWORD *)(v523 + 8 * v500) = v524;
      }
      else
      {
        v501 = *v499;
        v502 = v560[0];
        if (v560[0])
          *(_DWORD *)v560[0] += 2;
        *(_QWORD *)(v501 + 8 * v500) = v502;
      }
      *((_DWORD *)v484 + 9) = v500 + 1;
    }
    v503 = v562;
    v562 = 0;
    if (v503)
    {
      if (*(_DWORD *)v503 == 1)
        WTF::JSONImpl::Value::operator delete(v503, v492, v493, v494, v495, v496, v497, v498);
      else
        --*(_DWORD *)v503;
    }
    v504 = v560[0];
    v560[0] = 0;
    if (v504)
    {
      if (*(_DWORD *)v504 == 2)
      {
        WTF::StringImpl::~StringImpl(v504, v492, v493, v494, v495, v496, v497, v498);
        WTF::fastFree(v514, v515, v516, v517, v518, v519, v520, v521);
      }
      else
      {
        *(_DWORD *)v504 -= 2;
      }
    }
    v505 = v559;
    v559 = 0;
    if (v505)
    {
      if (*(_DWORD *)v505 == 1)
        WTF::JSONImpl::Value::operator delete(v505, v492, v493, v494, v495, v496, v497, v498);
      else
        --*(_DWORD *)v505;
    }
  }
  Inspector::ConsoleFrontendDispatcher::messageAdded(a2, &v558);
  v7 = v558;
  v558 = 0;
  if (v7)
  {
LABEL_387:
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete(v7, v213, v214, v215, v216, v217, v218, v219);
    else
      --*(_DWORD *)v7;
  }
}

uint64_t Inspector::InjectedScriptManager::injectedScriptFor@<X0>(uint64_t this@<X0>, JSC::JSGlobalObject *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t *v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  float v59;
  WTF::AtomStringImpl *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  char v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  WTF::StringImpl *v140;
  _DWORD *v141;
  uint64_t v142;
  int v143;

  v11 = (uint64_t *)this;
  v13 = *(_QWORD *)(this + 16);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 - 8);
    v15 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(JSC::JSGlobalObject **)(v13 + 16 * v18);
    if (v19 != a2)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(JSC::JSGlobalObject **)(v13 + 16 * v18);
        ++v20;
        if (v19 == a2)
          goto LABEL_8;
      }
      v18 = *(unsigned int *)(v13 - 4);
    }
LABEL_8:
    if (v18 != *(_DWORD *)(v13 - 4))
    {
      v21 = *(_QWORD *)(this + 8);
      if (v21)
      {
        v22 = v13 + 16 * v18;
        v23 = *(_DWORD *)(v21 - 8);
        v24 = *(_DWORD *)(v22 + 8);
        v25 = 9 * ((v24 + ~(v24 << 15)) ^ ((v24 + ~(v24 << 15)) >> 10));
        v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
        v27 = (v26 ^ HIWORD(v26)) & v23;
        v9 = v21 + 48 * v27;
        v28 = *(_DWORD *)v9;
        if (*(_DWORD *)v9 != v24)
        {
          v29 = 1;
          while (v28)
          {
            v27 = (v27 + v29) & v23;
            v9 = v21 + 48 * v27;
            v28 = *(_DWORD *)v9;
            ++v29;
            if (*(_DWORD *)v9 == v24)
              goto LABEL_16;
          }
          v9 = v21 + 48 * *(unsigned int *)(v21 - 4);
        }
LABEL_16:
        if (v9 != v21 + 48 * *(unsigned int *)(v21 - 4))
        {
          v30 = *(_DWORD **)(v9 + 16);
          if (v30)
            *v30 += 2;
          *(_QWORD *)(a9 + 8) = v30;
          *(_QWORD *)(a9 + 16) = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(a9 + 24) = 0;
          v31 = *(_QWORD *)(v9 + 32);
          if (v31)
          {
            v32 = (v31 - 16) & 0xFFFFFFFFFFFFF000;
            v33 = *(_QWORD *)(v32 + 16);
            v34 = *(_QWORD **)(v33 + 40);
            if (!v34)
            {
              this = (uint64_t)JSC::HandleSet::grow(*(JSC::HandleSet **)(v32 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v34 = *(_QWORD **)(v33 + 40);
            }
            *(_QWORD *)(v33 + 40) = *v34;
            v34[2] = 0;
            v35 = v34 + 2;
            *v34 = 0;
            v34[1] = 0;
            *(_QWORD *)(a9 + 24) = v34 + 2;
            v36 = *(_QWORD **)(v9 + 32);
            if (v36)
            {
              v36 = (_QWORD *)*v36;
              if (v36)
              {
                v105 = *(_QWORD **)(((unint64_t)(v35 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v106 = v105[3];
                v105 += 3;
                *(v35 - 2) = v106;
                *(v35 - 1) = v105;
                *v105 = v35 - 2;
                *(_QWORD *)(v106 + 8) = v35 - 2;
              }
            }
            *v35 = v36;
          }
          *(_QWORD *)(a9 + 32) = *(_QWORD *)(v9 + 40);
          goto LABEL_32;
        }
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *))(**(_QWORD **)(this + 24) + 24))(*(_QWORD *)(this + 24), a2) & 1) == 0)
  {
LABEL_31:
    this = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)(this + 4) = 14;
    *(_QWORD *)(this + 8) = "InjectedScript";
    *(_DWORD *)(this + 16) = 4;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 32) = 0;
    *(_QWORD *)(a9 + 8) = this;
    *(_QWORD *)(a9 + 16) = 0;
    *(_DWORD *)this = 2;
LABEL_32:
    *(_QWORD *)a9 = &off_1E3591330;
    return this;
  }
  v43 = Inspector::InjectedScriptManager::injectedScriptIdFor((Inspector::InjectedScriptManager *)v11, a2, v37, v38, v39, v40, v41, v42);
  v44 = v43;
  Inspector::InjectedScriptManager::createInjectedScript((Inspector::InjectedScriptHost **)v11, (uint64_t)a2, v43, v45, v46, v47, v48, v49, (uint64_t)&v142, v50);
  if (v143)
  {
    if (v143 == 1)
    {
      v9 = v142;
      if (*(_QWORD *)(*((_QWORD *)a2 + 7) + 24) == v142)
        goto LABEL_31;
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    if (*(_DWORD *)(v9 + 28))
    {
      v107 = *(_QWORD *)(v9 + 16);
      v108 = *(_QWORD *)(v107 + 8);
      if (v108)
      {
        v109 = *(_DWORD *)(v107 + 32) >> 2;
        v110 = *(_QWORD *)(v108 + 56);
        if (v109 >= *(_DWORD *)(*(_QWORD *)(v110 + 80) + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1986062FCLL);
        }
        JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v110 + 160), v109);
      }
    }
    v111 = *(_QWORD *)(v9 + 8);
    v139 = v111;
    if ((v111 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v111 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v139, a2, v52, v53, v54, v55, v56, v57, (int **)&v140);
LABEL_87:
      WTF::String::utf8((uint64_t *)&v140, 0, v53, v54, v55, v56, v57, &v141, v59);
      v120 = v141;
      v121 = (_BYTE)v141 + 16;
      if (!v141)
        v121 = 0;
      WTFLogAlways("Error when creating injected script: %s (%d:%d)\n", v113, v114, v115, v116, v117, v118, v119, v121);
      if (v120)
      {
        if (*v120 == 1)
          WTF::fastFree((unint64_t)v120, v122, v123, v124, v125, v126, v127, v128);
        else
          --*v120;
      }
      v129 = v140;
      v140 = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 2)
        {
          WTF::StringImpl::~StringImpl(v129, (WTF::AtomStringImpl *)v122, v123, v124, v125, v126, v127, v128);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v129 -= 2;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19860628CLL);
    }
    v112 = *(int **)(v111 + 8);
    if ((v112 & 1) != 0)
    {
      v112 = *JSC::JSRopeString::resolveRope(v111, a2, (uint64_t)v52, v53, v58, v54, v55, v56, v57);
      if (!v112)
        goto LABEL_86;
    }
    else if (!v112)
    {
LABEL_86:
      v140 = (WTF::StringImpl *)v112;
      goto LABEL_87;
    }
    *v112 += 2;
    goto LABEL_86;
  }
  if (!v142)
  {
    WTFLogAlways("Missing injected script object", v51, 0, v53, v54, v55, v56, v57, v138);
    __break(0xC471u);
    JUMPOUT(0x19860614CLL);
  }
  Inspector::InjectedScript::InjectedScript((_QWORD *)a9, (uint64_t)a2, v142, v11[3]);
  v68 = v11 + 1;
  v67 = v11[1];
  if (v67
    || (WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v11 + 1, 8u, 0), (v67 = *v68) != 0))
  {
    v69 = *(_DWORD *)(v67 - 8);
  }
  else
  {
    v69 = 0;
  }
  v70 = 9 * ((v44 + ~(v44 << 15)) ^ ((v44 + ~(v44 << 15)) >> 10));
  v71 = (v70 ^ (v70 >> 6)) + ~((v70 ^ (v70 >> 6)) << 11);
  v72 = v69 & (v71 ^ HIWORD(v71));
  v73 = v67 + 48 * v72;
  v74 = *(_DWORD *)v73;
  if (*(_DWORD *)v73)
  {
    v75 = 0;
    v76 = 1;
    while (v74 != v44)
    {
      if (v74 == -1)
        v75 = v73;
      v72 = (v72 + v76) & v69;
      v73 = v67 + 48 * v72;
      v74 = *(_DWORD *)v73;
      ++v76;
      if (!*(_DWORD *)v73)
      {
        if (v75)
        {
          *(_DWORD *)v75 = 0;
          v77 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)(v77 + 8) = "InjectedScript";
          *(_DWORD *)(v77 + 16) = 4;
          *(_QWORD *)(v75 + 16) = v77;
          *(_QWORD *)(v75 + 24) = 0;
          *(_QWORD *)(v75 + 32) = 0;
          *(_QWORD *)(v75 + 40) = 0;
          *(_QWORD *)v77 = 0xE00000002;
          *(_QWORD *)(v75 + 8) = &off_1E3591330;
          --*(_DWORD *)(*v68 - 16);
          v73 = v75;
        }
        goto LABEL_45;
      }
    }
    v82 = *(_DWORD **)(a9 + 8);
    if (v82)
      *v82 += 2;
    v83 = *(WTF::StringImpl **)(v73 + 16);
    *(_QWORD *)(v73 + 16) = v82;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::~StringImpl(v83, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
      }
      else
      {
        *(_DWORD *)v83 -= 2;
      }
    }
    *(_QWORD *)(v73 + 24) = *(_QWORD *)(a9 + 16);
    JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(v73 + 32), (uint64_t **)(a9 + 24), v61, v62, v63, v64, v65, v66);
    *(_QWORD *)(v73 + 40) = *(_QWORD *)(a9 + 32);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*v11 + 40))(v11, a9);
  }
LABEL_45:
  *(_DWORD *)v73 = v44;
  v78 = *(_DWORD **)(a9 + 8);
  if (v78)
    *v78 += 2;
  v79 = *(WTF::StringImpl **)(v73 + 16);
  *(_QWORD *)(v73 + 16) = v78;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  *(_QWORD *)(v73 + 24) = *(_QWORD *)(a9 + 16);
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((_QWORD **)(v73 + 32), (uint64_t **)(a9 + 24), v61, v62, v63, v64, v65, v66);
  *(_QWORD *)(v73 + 40) = *(_QWORD *)(a9 + 32);
  v80 = *v68;
  if (*v68)
    v81 = *(_DWORD *)(v80 - 12) + 1;
  else
    v81 = 1;
  *(_DWORD *)(v80 - 12) = v81;
  v84 = *v68;
  if (*v68)
    v85 = *(_DWORD *)(v84 - 12);
  else
    v85 = 0;
  v86 = (*(_DWORD *)(v84 - 16) + v85);
  v87 = *(unsigned int *)(v84 - 4);
  if (v87 > 0x400)
  {
    if (v87 > 2 * v86)
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v11 + 40))(v11, a9);
    goto LABEL_65;
  }
  if (3 * v87 <= 4 * v86)
  {
    if (!(_DWORD)v87)
    {
      v88 = 8;
      goto LABEL_68;
    }
LABEL_65:
    v88 = (_DWORD)v87 << (6 * *(_DWORD *)(v84 - 12) >= (2 * v87));
LABEL_68:
    WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v11 + 1, v88, (_DWORD *)v73);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*v11 + 40))(v11, a9);
}

uint64_t Inspector::ConsoleMessage::globalObject(Inspector::ConsoleMessage *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return *(_QWORD *)v2;
  }
  else
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
      return *(_QWORD *)v2;
  }
  return 0;
}

void Inspector::InjectedScript::wrapTable(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF **a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _OWORD *v30;
  _OWORD *v31;
  unsigned int v32;
  _OWORD *v33;
  _OWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  JSC::JSGlobalObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  int v78;
  int v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  WTF *v88;
  char v89[8];
  uint64_t v90;
  _OWORD *v91;
  _OWORD v92[4];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  int v99;
  unsigned int *v100;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x900000002;
  *(_QWORD *)(v11 + 8) = "wrapTable";
  *(_DWORD *)(v11 + 16) = 4;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v89[0] = 0;
  v90 = 0x800000000;
  v91 = (_OWORD *)((char *)v92 + 8);
  v20 = 0.0;
  memset(v92, 0, sizeof(v92));
  v93 = 0;
  v94 = v9;
  v95 = v12;
  v21 = *(_QWORD *)(v9 + 56);
  v22 = *(_QWORD *)(v21 + 712);
  if (!v22)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v21 + 672), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v22 = *(_QWORD *)(v21 + 712);
  }
  *(_QWORD *)(v21 + 712) = *(_QWORD *)v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  v96 = (_QWORD *)(v22 + 16);
  if ((v10 != 0) != (*(_QWORD *)(v22 + 16) != 0))
  {
    if (v10)
    {
      v24 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
      *v24 = v22;
      *(_QWORD *)(v25 + 8) = v22;
    }
    else
    {
      v87 = *(_QWORD *)v22;
      v86 = *(_QWORD **)(v22 + 8);
      *v86 = *(_QWORD *)v22;
      *(_QWORD *)(v87 + 8) = v86;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = v96;
    }
  }
  *v23 = v10;
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v97 = (WTF::StringImpl *)v11;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  v27 = *(_QWORD *)(a1 + 32);
  if (v27)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 24))(v27, *(_QWORD *)(a1 + 16)))
      v28 = 7;
    else
      v28 = 6;
  }
  else
  {
    v28 = 6;
  }
  v29 = v90;
  if ((_DWORD)v90 != HIDWORD(v90))
  {
    v30 = v91;
    if (v91 == (_OWORD *)((char *)v92 + 8) || !v91)
    {
      *((_QWORD *)v91 + v90) = v28;
LABEL_20:
      LODWORD(v90) = ++v29;
      goto LABEL_21;
    }
LABEL_78:
    *((_QWORD *)v30 + v29) = v28;
    goto LABEL_20;
  }
  if (!(v90 >> 30))
  {
    v79 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v90, 2 * (int)v90);
    v29 = v90;
    if (!v79)
    {
      v30 = v91;
      goto LABEL_78;
    }
  }
  v89[0] = 1;
LABEL_21:
  if (v29 == HIDWORD(v90))
  {
    if (v29 >> 30 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v90, 2 * v29))
    {
      v89[0] = 1;
      goto LABEL_25;
    }
    v29 = v90;
    v31 = v91;
  }
  else
  {
    v31 = v91;
    if (v91 == (_OWORD *)((char *)v92 + 8) || !v91)
    {
      *((_QWORD *)v91 + v29) = a2;
      LODWORD(v90) = v29 + 1;
      goto LABEL_25;
    }
  }
  *((_QWORD *)v31 + v29) = a2;
  LODWORD(v90) = v29 + 1;
  if (!*(_QWORD *)&v92[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v85 = (_QWORD *)(a2 - 16);
    else
      v85 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v92[0] = *v85 + 560;
    v100 = (unsigned int *)&v90;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v92[0], (uint64_t *)&v100, v15, v16, v17, v18, v19, (uint64_t)&v98);
  }
LABEL_25:
  v32 = v90;
  if (!a3)
  {
    if ((_DWORD)v90 == HIDWORD(v90))
    {
      if (v90 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v90, 2 * (int)v90))
      {
        goto LABEL_76;
      }
      v32 = v90;
      v34 = v91;
    }
    else
    {
      v34 = v91;
      if (v91 == (_OWORD *)((char *)v92 + 8) || !v91)
      {
        *((_QWORD *)v91 + v90) = 6;
        goto LABEL_34;
      }
    }
    *((_QWORD *)v34 + v32) = 6;
    goto LABEL_34;
  }
  if ((_DWORD)v90 == HIDWORD(v90))
  {
    if (!(v90 >> 30)
      && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v90, 2 * (int)v90))
    {
      v32 = v90;
      v33 = v91;
      goto LABEL_66;
    }
LABEL_76:
    v89[0] = 1;
    goto LABEL_35;
  }
  v33 = v91;
  if (v91 == (_OWORD *)((char *)v92 + 8) || !v91)
  {
    *((_QWORD *)v91 + v90) = a3;
LABEL_34:
    LODWORD(v90) = v32 + 1;
    goto LABEL_35;
  }
LABEL_66:
  *((_QWORD *)v33 + v32) = a3;
  LODWORD(v90) = v32 + 1;
  if (!*(_QWORD *)&v92[0] && (a3 & 0xFFFE000000000002) == 0)
  {
    if ((a3 & 8) != 0)
      v80 = (_QWORD *)(a3 - 16);
    else
      v80 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v92[0] = *v80 + 560;
    v100 = (unsigned int *)&v90;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v92[0], (uint64_t *)&v100, v15, v16, v17, v18, v19, (uint64_t)&v98);
  }
LABEL_35:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(a1, (WTF::AtomStringImpl *)v89, v14, v15, v16, v17, v18, v19, (uint64_t)&v98, v20);
  if (v99
    || (v44 = v98) == 0
    || (v45 = *(JSC::JSGlobalObject **)(a1 + 16),
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v100, v45, v36, v37, v38, v39, v40, v41, v42),
        Inspector::jsToInspectorValue((uint64_t *)&v88, v45, v44, 1000, v46, v47, v48, v49, v50),
        JSC::JSLockHolder::~JSLockHolder(&v100, v51, v52, v53, v54, v55, v56, v57),
        (v58 = v88) == 0))
  {
    *a4 = 0;
    goto LABEL_37;
  }
  v59 = *((_DWORD *)v88 + 1);
  if (v59 >= 5)
  {
    if (v59 == 5)
    {
      v76 = *(_DWORD *)v88;
      *(_DWORD *)v88 += 2;
      *a4 = v58;
      v77 = __CFADD__(v76, 1);
      v78 = v76 + 1;
      if (v77)
        WTF::JSONImpl::Value::operator delete(v58, v35, v36, v37, v38, v39, v40, v41);
      else
        *(_DWORD *)v58 = v78;
      goto LABEL_46;
    }
    if (v59 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x19860664CLL);
    }
  }
  *a4 = 0;
LABEL_46:
  if (*(_DWORD *)v58 == 1)
    WTF::JSONImpl::Value::operator delete(v58, v35, v36, v37, v38, v39, v40, v41);
  else
    --*(_DWORD *)v58;
LABEL_37:
  v43 = v97;
  v97 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  if (v96)
  {
    v81 = v96 - 2;
    v82 = *(_QWORD *)(((unint64_t)(v96 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v83 = (uint64_t *)*(v96 - 1);
    if (v83)
    {
      v84 = *v81;
      *v83 = *v81;
      *(_QWORD *)(v84 + 8) = v83;
      *v81 = 0;
      v81[1] = 0;
    }
    *v81 = *(_QWORD *)(v82 + 40);
    *(_QWORD *)(v82 + 40) = v81;
    v96 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v90, v35, v36, v37, v38, v39, v40, v41);
}

void Inspector::InjectedScript::wrapObject(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::String *a3@<X2>, int a4@<W3>, WTF **a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _OWORD *v41;
  uint64_t v42;
  _OWORD *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  WTF *v96;
  char v97[8];
  uint64_t v98;
  _OWORD *v99;
  _OWORD v100[4];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  int v107;
  unsigned int *v108[2];

  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t **)(a1 + 24);
  if (v10)
    v12 = *v10;
  else
    v12 = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xA00000002;
  *(_QWORD *)(v13 + 8) = "wrapObject";
  *(_DWORD *)(v13 + 16) = 4;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v97[0] = 0;
  v98 = 0x800000000;
  v99 = (_OWORD *)((char *)v100 + 8);
  v22 = 0.0;
  memset(v100, 0, sizeof(v100));
  v101 = 0;
  v102 = v11;
  v103 = v14;
  v23 = *(_QWORD *)(v11 + 56);
  v24 = *(_QWORD *)(v23 + 712);
  if (!v24)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v23 + 672), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
    v24 = *(_QWORD *)(v23 + 712);
  }
  *(_QWORD *)(v23 + 712) = *(_QWORD *)v24;
  *(_QWORD *)(v24 + 16) = 0;
  v25 = (_QWORD *)(v24 + 16);
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  v104 = (_QWORD *)(v24 + 16);
  if ((v12 != 0) != (*(_QWORD *)(v24 + 16) != 0))
  {
    if (v12)
    {
      v26 = *(unint64_t **)((v24 & 0xFFFFFFFFFFFFF000) + 0x10);
      v27 = v26[3];
      v26 += 3;
      *(_QWORD *)v24 = v27;
      *(_QWORD *)(v24 + 8) = v26;
      *v26 = v24;
      *(_QWORD *)(v27 + 8) = v24;
    }
    else
    {
      v95 = *(_QWORD *)v24;
      v94 = *(_QWORD **)(v24 + 8);
      *v94 = *(_QWORD *)v24;
      *(_QWORD *)(v95 + 8) = v94;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      v25 = v104;
    }
  }
  *v25 = v12;
  v28 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 2;
  v105 = (WTF::StringImpl *)v13;
  if (v28)
  {
    *(_DWORD *)v13 = v28;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
  v29 = v98;
  if ((_DWORD)v98 == HIDWORD(v98))
  {
    if (v98 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v98, 2 * (int)v98))
    {
      v97[0] = 1;
      goto LABEL_15;
    }
    v29 = v98;
    v30 = v99;
  }
  else
  {
    v30 = v99;
    if (v99 == (_OWORD *)((char *)v100 + 8) || !v99)
    {
      *((_QWORD *)v99 + v98) = a2;
      LODWORD(v98) = v29 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v30 + v29) = a2;
  LODWORD(v98) = v29 + 1;
  if (!*(_QWORD *)&v100[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v93 = (_QWORD *)(a2 - 16);
    else
      v93 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v100[0] = *v93 + 560;
    v108[0] = (unsigned int *)&v98;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v100[0], (uint64_t *)v108, v17, v18, v19, v20, v21, (uint64_t)&v106);
  }
LABEL_15:
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v97, a3, v16, v17, v18, v19, v20, v21, v22);
  v38 = *(_QWORD *)(a1 + 32);
  if (v38)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 24))(v38, *(_QWORD *)(a1 + 16)))
      v39 = 7;
    else
      v39 = 6;
  }
  else
  {
    v39 = 6;
  }
  v40 = v98;
  if ((_DWORD)v98 != HIDWORD(v98))
  {
    v41 = v99;
    if (v99 == (_OWORD *)((char *)v100 + 8) || !v99)
    {
      *((_QWORD *)v99 + v98) = v39;
LABEL_24:
      LODWORD(v98) = ++v40;
      goto LABEL_25;
    }
LABEL_73:
    *((_QWORD *)v41 + v40) = v39;
    goto LABEL_24;
  }
  if (!(v98 >> 30))
  {
    v88 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v98, 2 * (int)v98);
    v40 = v98;
    if (!v88)
    {
      v41 = v99;
      goto LABEL_73;
    }
  }
  v97[0] = 1;
LABEL_25:
  if (a4)
    v42 = 7;
  else
    v42 = 6;
  if (v40 == HIDWORD(v98))
  {
    if (v40 >> 30 || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v98, 2 * v40))
    {
      v97[0] = 1;
      goto LABEL_31;
    }
    v40 = v98;
    v43 = v99;
  }
  else
  {
    v43 = v99;
  }
  *((_QWORD *)v43 + v40) = v42;
  LODWORD(v98) = v40 + 1;
LABEL_31:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(a1, (WTF::AtomStringImpl *)v97, v31, v32, v33, v34, v35, v36, (uint64_t)&v106, v37);
  if (v107
    || (v53 = v106) == 0
    || (v54 = *(JSC::JSGlobalObject **)(a1 + 16),
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v108, v54, v45, v46, v47, v48, v49, v50, v51),
        Inspector::jsToInspectorValue((uint64_t *)&v96, v54, v53, 1000, v55, v56, v57, v58, v59),
        JSC::JSLockHolder::~JSLockHolder(v108, v60, v61, v62, v63, v64, v65, v66),
        (v67 = v96) == 0))
  {
    *a5 = 0;
    goto LABEL_33;
  }
  v68 = *((_DWORD *)v96 + 1);
  if (v68 >= 5)
  {
    if (v68 == 5)
    {
      v85 = *(_DWORD *)v96;
      *(_DWORD *)v96 += 2;
      *a5 = v67;
      v86 = __CFADD__(v85, 1);
      v87 = v85 + 1;
      if (v86)
        WTF::JSONImpl::Value::operator delete(v67, v44, v45, v46, v47, v48, v49, v50);
      else
        *(_DWORD *)v67 = v87;
      goto LABEL_42;
    }
    if (v68 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x198606B3CLL);
    }
  }
  *a5 = 0;
LABEL_42:
  if (*(_DWORD *)v67 == 1)
    WTF::JSONImpl::Value::operator delete(v67, v44, v45, v46, v47, v48, v49, v50);
  else
    --*(_DWORD *)v67;
LABEL_33:
  v52 = v105;
  v105 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  if (v104)
  {
    v89 = v104 - 2;
    v90 = *(_QWORD *)(((unint64_t)(v104 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v91 = (uint64_t *)*(v104 - 1);
    if (v91)
    {
      v92 = *v89;
      *v91 = *v89;
      *(_QWORD *)(v92 + 8) = v91;
      *v89 = 0;
      v89[1] = 0;
    }
    *v89 = *(_QWORD *)(v90 + 40);
    *(_QWORD *)(v90 + 40) = v89;
    v104 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v98, v44, v45, v46, v47, v48, v49, v50);
}

void Inspector::InjectedScript::wrapJSONString(Inspector::InjectedScript *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, int a4@<W3>, WTF **a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  unsigned int v44;
  _OWORD *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  JSC::JSGlobalObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unsigned int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  WTF *v96;
  unint64_t v97;
  int v98;
  char v99[8];
  uint64_t v100;
  _OWORD *v101;
  _OWORD v102[4];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  WTF::StringImpl *v107;
  unsigned int *v108[2];

  v11 = *((_QWORD *)this + 2);
  v10 = (uint64_t *)*((_QWORD *)this + 3);
  if (v10)
    v12 = *v10;
  else
    v12 = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xE00000002;
  *(_QWORD *)(v13 + 8) = "wrapJSONString";
  *(_DWORD *)(v13 + 16) = 4;
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v99[0] = 0;
  v100 = 0x800000000;
  v101 = (_OWORD *)((char *)v102 + 8);
  v22 = 0.0;
  memset(v102, 0, sizeof(v102));
  v103 = 0;
  v104 = v11;
  v105 = v14;
  v23 = *(_QWORD *)(v11 + 56);
  v24 = *(_QWORD *)(v23 + 712);
  if (!v24)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v23 + 672), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
    v24 = *(_QWORD *)(v23 + 712);
  }
  *(_QWORD *)(v23 + 712) = *(_QWORD *)v24;
  *(_QWORD *)(v24 + 16) = 0;
  v25 = (_QWORD *)(v24 + 16);
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  v106 = (_QWORD *)(v24 + 16);
  if ((v12 != 0) != (*(_QWORD *)(v24 + 16) != 0))
  {
    if (v12)
    {
      v26 = *(unint64_t **)((v24 & 0xFFFFFFFFFFFFF000) + 0x10);
      v27 = v26[3];
      v26 += 3;
      *(_QWORD *)v24 = v27;
      *(_QWORD *)(v24 + 8) = v26;
      *v26 = v24;
      *(_QWORD *)(v27 + 8) = v24;
    }
    else
    {
      v95 = *(_QWORD *)v24;
      v94 = *(_QWORD **)(v24 + 8);
      *v94 = *(_QWORD *)v24;
      *(_QWORD *)(v95 + 8) = v94;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      v25 = v106;
    }
  }
  *v25 = v12;
  v28 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 2;
  v107 = (WTF::StringImpl *)v13;
  if (v28)
  {
    *(_DWORD *)v13 = v28;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v99, a2, v16, v17, v18, v19, v20, v21, v22);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v99, a3, v29, v30, v31, v32, v33, v34, v35);
  if (a4)
    v43 = 7;
  else
    v43 = 6;
  v44 = v100;
  if ((_DWORD)v100 == HIDWORD(v100))
  {
    if (v100 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v100, 2 * (int)v100))
    {
      v99[0] = 1;
      goto LABEL_19;
    }
    v44 = v100;
    v45 = v101;
    goto LABEL_49;
  }
  v45 = v101;
  if (v101 != (_OWORD *)((char *)v102 + 8) && v101)
  {
LABEL_49:
    *((_QWORD *)v45 + v44) = v43;
    goto LABEL_18;
  }
  *((_QWORD *)v101 + v100) = v43;
LABEL_18:
  LODWORD(v100) = v44 + 1;
LABEL_19:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)this, (WTF::AtomStringImpl *)v99, v36, v37, v38, v39, v40, v41, (uint64_t)&v97, v42);
  if (v98
    || (v55 = v97, v97 == 2)
    || !v97
    || (v56 = (JSC::JSGlobalObject *)*((_QWORD *)this + 2),
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v108, v56, v47, v48, v49, v50, v51, v52, v53),
        Inspector::jsToInspectorValue((uint64_t *)&v96, v56, v55, 1000, v57, v58, v59, v60, v61),
        JSC::JSLockHolder::~JSLockHolder(v108, v62, v63, v64, v65, v66, v67, v68),
        (v69 = v96) == 0))
  {
    *a5 = 0;
    goto LABEL_21;
  }
  v70 = *((_DWORD *)v96 + 1);
  if (v70 >= 5)
  {
    if (v70 == 5)
    {
      v87 = *(_DWORD *)v96;
      *(_DWORD *)v96 += 2;
      *a5 = v69;
      v88 = __CFADD__(v87, 1);
      v89 = v87 + 1;
      if (v88)
        WTF::JSONImpl::Value::operator delete(v69, v46, v47, v48, v49, v50, v51, v52);
      else
        *(_DWORD *)v69 = v89;
      goto LABEL_31;
    }
    if (v70 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x198606F58);
    }
  }
  *a5 = 0;
LABEL_31:
  if (*(_DWORD *)v69 == 1)
    WTF::JSONImpl::Value::operator delete(v69, v46, v47, v48, v49, v50, v51, v52);
  else
    --*(_DWORD *)v69;
LABEL_21:
  v54 = v107;
  v107 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  if (v106)
  {
    v90 = v106 - 2;
    v91 = *(_QWORD *)(((unint64_t)(v106 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v92 = (uint64_t *)*(v106 - 1);
    if (v92)
    {
      v93 = *v90;
      *v92 = *v90;
      *(_QWORD *)(v93 + 8) = v92;
      *v90 = 0;
      v90[1] = 0;
    }
    *v90 = *(_QWORD *)(v91 + 40);
    *(_QWORD *)(v91 + 40) = v90;
    v106 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v100, v46, v47, v48, v49, v50, v51, v52);
}

void Inspector::InjectedScript::~InjectedScript(Inspector::InjectedScript *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  JUMPOUT(0x19AEBAEF0);
}

void Inspector::ConsoleMessage::toString(Inspector::ConsoleMessage *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  char v64;

  v10 = *((unsigned int *)this + 11);
  if ((_DWORD)v10)
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 1;
    v11 = 16 * v10;
    v12 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    while (1)
    {
      v13 = *v12;
      if (!v63 && v62 == 0)
        break;
      if (v13)
      {
        v24 = *(int8x16_t **)(v13 + 8);
        v25 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v61, v24, v25, a4, a5, a6, a7, a8);
          goto LABEL_16;
        }
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      WTF::StringBuilder::append((uint64_t)&v61, v24, v25, a4, a5, a6, a7, a8);
LABEL_16:
      v12 += 2;
      v11 -= 16;
      if (!v11)
      {
        v26 = v61;
        if (v61)
          goto LABEL_26;
        if ((v63 & 0x80000000) == 0 && v62 && *((_DWORD *)v62 + 1) > v63 + (v63 >> 2))
        {
          if ((*((_BYTE *)v62 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v61, (WTF::AtomStringImpl *)v63, a3, a4, a5, a6, a7, a8);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v61, (WTF::AtomStringImpl *)v63, a3, a4, a5, a6, a7, a8);
          v52 = v61;
          v61 = v62;
          v62 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
              WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            }
            else
            {
              *(_DWORD *)v52 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v61);
        v26 = v61;
        if (v61)
LABEL_26:
          *(_DWORD *)v26 += 2;
        *a9 = v26;
        v27 = v62;
        v62 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            v26 = v61;
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        v61 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        return;
      }
    }
    if (v13)
      *(_DWORD *)v13 += 2;
    v15 = v61;
    v61 = (WTF::StringImpl *)v13;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        v13 = *v12;
        if (!*v12)
          goto LABEL_15;
        goto LABEL_14;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (!v13)
    {
LABEL_15:
      v63 = v13;
      goto LABEL_16;
    }
LABEL_14:
    LODWORD(v13) = *(_DWORD *)(v13 + 4);
    goto LABEL_15;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (v28)
    *(_DWORD *)v28 += 2;
  *a9 = v28;
}

void Inspector::ConsoleMessage::updateRepeatCountInConsole(uint64_t a1, uint64_t *a2)
{
  int v4;
  timespec v5;

  v5.tv_sec = 0;
  v5.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v5);
  v4 = *(_DWORD *)(a1 + 72);
  *(double *)&v5.tv_sec = (double)v5.tv_nsec / 1000000000.0 + (double)v5.tv_sec;
  LOBYTE(v5.tv_nsec) = 1;
  Inspector::ConsoleFrontendDispatcher::messageRepeatCountUpdated(a2, v4, &v5.tv_sec);
}

uint64_t Inspector::ConsoleMessage::isEqual(Inspector::ConsoleMessage *this, Inspector::ConsoleMessage *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t result;
  JSC::JSGlobalObject ***v13;
  const Inspector::ScriptArguments *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Inspector::ScriptCallStack *v19;
  Inspector::ScriptCallStack *v20;
  const WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  const WTF::StringImpl *v26;

  if (*((_BYTE *)this + 1) == 8)
    return 0;
  if ((*((_BYTE *)this + 1) - 5) < 3u || *((unsigned __int8 *)a2 + 1) - 5 < 4)
    return 0;
  v13 = (JSC::JSGlobalObject ***)*((_QWORD *)this + 2);
  v14 = (const Inspector::ScriptArguments *)*((_QWORD *)a2 + 2);
  if (v13)
  {
    if (!v14)
      return 0;
    result = Inspector::ScriptArguments::isEqual(v13, v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      return result;
    v15 = *((_QWORD *)this + 2);
    v16 = *(unsigned int *)(v15 + 28);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v15 + 16);
      do
      {
        v18 = *v17;
        if (!*v17 || (v18 = *(_QWORD *)v18, (v18 & 0xFFFE000000000002) == 0))
        {
          if (*(unsigned __int8 *)(v18 + 5) > 0x16u)
            return 0;
        }
        ++v17;
      }
      while (--v16);
    }
  }
  else if (v14)
  {
    return 0;
  }
  v19 = (Inspector::ScriptCallStack *)*((_QWORD *)this + 3);
  v20 = (Inspector::ScriptCallStack *)*((_QWORD *)a2 + 3);
  if (v19)
  {
    if (!Inspector::ScriptCallStack::isEqual(v19, v20, a3))
      return 0;
  }
  else if (v20)
  {
    return 0;
  }
  if (*((_DWORD *)this + 11)
    || *((_DWORD *)a2 + 11)
    || *(unsigned __int8 *)a2 != *(unsigned __int8 *)this
    || *((unsigned __int8 *)a2 + 1) != *((unsigned __int8 *)this + 1)
    || *((unsigned __int8 *)a2 + 2) != *((unsigned __int8 *)this + 2))
  {
    return 0;
  }
  v21 = (const WTF::StringImpl *)*((_QWORD *)a2 + 1);
  v22 = (const WTF::StringImpl *)*((_QWORD *)this + 1);
  if (v21 != v22)
  {
    result = 0;
    if (!v21)
      return result;
    if (!v22)
      return result;
    result = WTF::equal(*((WTF **)a2 + 1), v22, a3);
    if (!(_DWORD)result)
      return result;
  }
  if (*((_DWORD *)a2 + 16) != *((_DWORD *)this + 16) || *((_DWORD *)a2 + 17) != *((_DWORD *)this + 17))
    return 0;
  v23 = (const WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v24 = (const WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v23 == v24 || (result = 0, v23) && v24 && (result = WTF::equal(*((WTF **)a2 + 6), v24, a3), (_DWORD)result))
  {
    v25 = (const WTF::StringImpl *)*((_QWORD *)a2 + 10);
    v26 = (const WTF::StringImpl *)*((_QWORD *)this + 10);
    if (v25 == v26)
    {
      return 1;
    }
    else
    {
      result = 0;
      if (v25)
      {
        if (v26)
          return WTF::equal(*((WTF **)a2 + 10), v26, a3);
      }
    }
  }
  return result;
}

void Inspector::ConsoleMessage::clear(Inspector::ConsoleMessage *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  Inspector::ScriptArguments *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*((_QWORD *)this + 1))
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v9 = 0x1300000002;
    *(_QWORD *)(v9 + 8) = "<message collected>";
    *(_DWORD *)(v9 + 16) = 4;
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  v11 = (Inspector::ScriptArguments *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 7);
  v13 = (uint64_t *)((char *)this + 56);
  v12 = v14;
  if (v14)
  {
    if (*v12)
      JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear(v13);
  }
}

uint64_t *JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::clear(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = (uint64_t *)(v1 - 16);
    v3 = *(_QWORD *)(((v1 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = *(uint64_t **)(v1 - 8);
    if (v4)
    {
      v5 = *v2;
      *v4 = *v2;
      *(_QWORD *)(v5 + 8) = v4;
      *v2 = 0;
      v2[1] = 0;
    }
    *v2 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    *result = 0;
  }
  return result;
}

uint64_t Inspector::ConsoleMessage::argumentCount(Inspector::ConsoleMessage *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return *(unsigned int *)(v1 + 28);
  else
    return 0;
}

unint64_t Inspector::ContentSearchUtilities::textPositionFromOffset(unint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *((unsigned int *)a2 + 3);
  if (v2 < 2)
  {
    v3 = 0;
LABEL_11:
    if (v3 >= v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1986076ACLL);
    }
    v4 = *a2;
    v10 = *(_QWORD *)(*a2 + 8 * v3);
  }
  else
  {
    v3 = 0;
    v4 = *a2;
    v5 = *((unsigned int *)a2 + 3);
    while (1)
    {
      v6 = v5 - 1;
      v7 = v3 + ((v5 - 1) >> 1);
      if (v7 >= v2)
        goto LABEL_23;
      v8 = *(_QWORD *)(v4 + 8 * v7);
      if (v8 == a1)
        break;
      v5 -= (v6 >> 1) + 1;
      if (v8 <= a1)
      {
        v9 = (v6 >> 1) + 1;
      }
      else
      {
        v5 = v6 >> 1;
        v9 = 0;
      }
      v3 += v9;
      if (v5 <= 1)
        goto LABEL_11;
    }
    v10 = a1;
    v3 = v7;
  }
  if (v10 <= a1)
    ++v3;
  if (v3)
  {
    if (v3 - 1 >= v2)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x1986076A4);
    }
    v11 = *(_QWORD *)(v4 + 8 * (v3 - 1));
  }
  else
  {
    LODWORD(v11) = 0;
  }
  return v3 | ((unint64_t)(a1 - v11) << 32);
}

uint64_t *Inspector::ContentSearchUtilities::lineEndings@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = this;
  v8 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  while (1)
  {
    v9 = *v6;
    v10 = *v6 ? *(unsigned int *)(v9 + 4) : 0;
    if (v8 >= v10)
      break;
    v24 = 0;
    this = (uint64_t *)WTF::String::find((uint64_t)v6, 0xAu, v8, a3, a4, a5);
    v24 = (uint64_t)this;
    v9 = *v6;
    if (this == (uint64_t *)-1
      || (!v9 ? (v11 = 0) : (v11 = *(_DWORD *)(v9 + 4)), this == (uint64_t *)(v11 - 1)))
    {
      if (v9)
        v13 = *(unsigned int *)(v9 + 4);
      else
        v13 = 0;
      v14 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 8))
      {
        v15 = v14 + (v14 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        this = (uint64_t *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, v17);
        v14 = *(unsigned int *)(a2 + 12);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
        v9 = *v6;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
      }
      *(_DWORD *)(a2 + 12) = v14 + 1;
      break;
    }
    v24 = (uint64_t)this + 1;
    v12 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
    {
      this = (uint64_t *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(a2, (unint64_t)&v24);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = (char *)this + 1;
      *(_DWORD *)(a2 + 12) = v12 + 1;
    }
    v8 = v24;
  }
  if (v9)
    v18 = *(unsigned int *)(v9 + 4);
  else
    v18 = 0;
  v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(a2 + 8))
  {
    v20 = v19 + (v19 >> 2);
    if (v20 >= 0x10)
      v21 = v20 + 1;
    else
      v21 = 16;
    if (v21 <= v19 + 1)
      v22 = v19 + 1;
    else
      v22 = v21;
    this = (uint64_t *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, v22);
    v19 = *(unsigned int *)(a2 + 12);
    v23 = (_QWORD *)(*(_QWORD *)a2 + 8 * v19);
  }
  else
  {
    v23 = (_QWORD *)(*(_QWORD *)a2 + 8 * v19);
  }
  *v23 = v18;
  *(_DWORD *)(a2 + 12) = v19 + 1;
  return this;
}

void Inspector::ContentSearchUtilities::createRegularExpressionForSearchString(const WTF::String *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  int *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int *v65;
  char v66;
  char v67;
  __int128 v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  if ((_DWORD)a3 == 2)
  {
    Inspector::ContentSearchUtilities::escapeStringForRegularExpressionSource((Inspector::ContentSearchUtilities *)&v68, a1, a3, a4, a5, a6, a7, a8);
    v11 = (int *)v68;
LABEL_13:
    if ((a2 & 1) == 0)
      goto LABEL_21;
LABEL_14:
    if (v11)
    {
      v20 = (char *)*((_QWORD *)v11 + 1);
      v21 = v11[1];
      v22 = (unint64_t)((v11[4] >> 2) & 1) << 32;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = 0x100000000;
    }
    goto LABEL_18;
  }
  if ((_DWORD)a3 == 1)
  {
    Inspector::ContentSearchUtilities::escapeStringForRegularExpressionSource((Inspector::ContentSearchUtilities *)&v64, a1, a3, a4, a5, a6, a7, a8);
    v67 = 94;
    v12 = v64;
    *(_QWORD *)&v68 = v64;
    v66 = 36;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v67, (uint64_t *)&v68, &v66, &v65);
    v11 = v65;
    if (!v65)
    {
      __break(0xC471u);
      return;
    }
    v64 = 0;
    v65 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        if ((a2 & 1) == 0)
          goto LABEL_21;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
        if ((a2 & 1) == 0)
        {
LABEL_21:
          if (v11)
          {
            v23 = (char *)*((_QWORD *)v11 + 1);
            v24 = v11[1];
            v22 = (unint64_t)((v11[4] >> 2) & 1) << 32;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v22 = 0x100000000;
          }
LABEL_23:
          v47 = v22 | v24;
          v26 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)v26 = 1;
          *(_BYTE *)(v26 + 4) = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_DWORD *)(v26 + 16) = -1;
          v27 = (_QWORD *)(v26 + 24);
          LOBYTE(v68) = 0;
          WORD1(v68) = 4;
          *((_QWORD *)&v68 + 1) = 0;
          DWORD1(v68) = 0;
          v69 = v71;
          v70 = 4;
          v72 = 0u;
          v73 = 0u;
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          v77 = 0u;
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          v48 = JSC::Yarr::YarrPattern::compile((unsigned __int16 *)&v68, v23, v47);
          *(_BYTE *)(v26 + 4) = v48;
          if (!v48)
          {
            *(_DWORD *)(v26 + 20) = DWORD1(v68);
            v36 = (uint64_t *)(v26 + 24);
            v37 = v26 + 8;
            v38 = (_BYTE *)(v26 + 4);
            goto LABEL_25;
          }
          goto LABEL_31;
        }
      }
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if ((_DWORD)a3)
  {
    v11 = 0;
  }
  else
  {
    v11 = *(int **)a1;
    if (*(_QWORD *)a1)
    {
      *v11 += 2;
      if ((a2 & 1) == 0)
        goto LABEL_21;
      goto LABEL_14;
    }
  }
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0x100000000;
  if ((a2 & 1) == 0)
    goto LABEL_23;
LABEL_18:
  v25 = v22 | v21;
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v26 = 1;
  *(_BYTE *)(v26 + 4) = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 16) = -1;
  v27 = (_QWORD *)(v26 + 24);
  LOBYTE(v68) = 0;
  *(_QWORD *)((char *)&v68 + 2) = 0;
  *((_QWORD *)&v68 + 1) = 0;
  v69 = v71;
  v70 = 4;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v28 = JSC::Yarr::YarrPattern::compile((unsigned __int16 *)&v68, v20, v25);
  *(_BYTE *)(v26 + 4) = v28;
  if (!v28)
  {
    *(_DWORD *)(v26 + 20) = DWORD1(v68);
    v36 = (uint64_t *)(v26 + 24);
    v37 = v26 + 8;
    v38 = (_BYTE *)(v26 + 4);
LABEL_25:
    JSC::Yarr::byteCompile((unint64_t)&v68, v37, v38, 0, v36);
    goto LABEL_26;
  }
LABEL_31:
  *v27 = 0;
LABEL_26:
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)&v68, v29, v30, v31, v32, v33, v34, v35);
  *a9 = v26;
  if (v11)
  {
    if (*v11 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *v11 -= 2;
    }
  }
}

void Inspector::ContentSearchUtilities::escapeStringForRegularExpressionSource(Inspector::ContentSearchUtilities *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  char v60;
  int8x16_t v61;

  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 1;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v11 = 0;
    while (1)
    {
      if (v11 >= *(unsigned int *)(v9 + 4))
      {
LABEL_31:
        v22 = v57;
        if (v57)
          goto LABEL_32;
        v40 = (WTF::AtomStringImpl *)v59;
        if ((v59 & 0x80000000) != 0)
          goto LABEL_52;
        goto LABEL_43;
      }
      v12 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        v13 = *(unsigned __int8 *)(v12 + v11);
      else
        v13 = *(unsigned __int16 *)(v12 + 2 * v11);
      if (v13 <= 0x7F && memchr("[](){}+-*.,?\\^$|", v13, 0x11uLL))
      {
        v61.i8[0] = 92;
        if (v58 && ((v14 = v59, v59 < *((_DWORD *)v58 + 1)) ? (v15 = v57 == 0) : (v15 = 0), v15))
        {
          v16 = *((_DWORD *)v58 + 4);
          v17 = *((_QWORD *)v58 + 1);
          ++v59;
          if ((v16 & 4) != 0)
            *(_BYTE *)(v17 + v14) = 92;
          else
            *(_WORD *)(v17 + 2 * v14) = 92;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v57, &v61, 1uLL, a4, a5, a6, a7, a8);
        }
      }
      v61.i16[0] = v13;
      if (v58)
      {
        v18 = v59;
        if (v59 < *((_DWORD *)v58 + 1) && v57 == 0)
        {
          if ((*((_BYTE *)v58 + 16) & 4) == 0)
          {
            v20 = *((_QWORD *)v58 + 1);
            ++v59;
            *(_WORD *)(v20 + 2 * v18) = v13;
            goto LABEL_22;
          }
          if (v13 <= 0xFF)
          {
            v21 = *((_QWORD *)v58 + 1);
            ++v59;
            *(_BYTE *)(v21 + v18) = v13;
            goto LABEL_22;
          }
        }
      }
      WTF::StringBuilder::append((uint64_t)&v57, &v61, 1uLL, a4, a5, a6, a7, a8);
LABEL_22:
      ++v11;
      v9 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_31;
    }
  }
  v40 = 0;
LABEL_43:
  if (v58 && *((_DWORD *)v58 + 1) > v40 + (v40 >> 2))
  {
    if ((*((_BYTE *)v58 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v57, v40, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v57, v40, a3, a4, a5, a6, a7, a8);
    v48 = v57;
    v57 = v58;
    v58 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
LABEL_52:
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v57);
  v22 = v57;
  if (v57)
LABEL_32:
    *(_DWORD *)v22 += 2;
  *(_QWORD *)this = v22;
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      v22 = v57;
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v57 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

uint64_t Inspector::ContentSearchUtilities::countRegularExpressionMatches(Inspector::ContentSearchUtilities *this, const JSC::Yarr::RegularExpression *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t i;
  int v17;
  unsigned int v18;
  int v19;

  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v8 + 4))
    return 0;
  v9 = 0;
  v13 = 0;
  v19 = 0;
  if (!v8)
    goto LABEL_17;
LABEL_6:
  v14 = *(unsigned int *)(v8 + 16);
  v15 = *(void **)(v8 + 8);
  v8 = *(unsigned int *)(v8 + 4);
  for (i = (v14 >> 2) & 1; ; i = 1)
  {
    v17 = JSC::Yarr::RegularExpression::match((uint64_t *)this, v15, v8 | (i << 32), v13, &v19, a6, a7, a8);
    if (v17 == -1)
      break;
    v8 = *(_QWORD *)a2;
    v18 = *(_QWORD *)a2 ? *(_DWORD *)(v8 + 4) : 0;
    if (v13 >= v18)
      break;
    if (v19 <= 0)
      v9 = v9;
    else
      v9 = (v9 + 1);
    v13 = (v17 + 1);
    if (v8)
      goto LABEL_6;
LABEL_17:
    v15 = 0;
  }
  return v9;
}

void Inspector::ContentSearchUtilities::searchInTextByLines(Inspector::ContentSearchUtilities *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  char v7;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  float v27;
  WTF *v28;
  JSC::Yarr::BytecodePattern *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  WTF *v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int *v53;
  char *v54;
  char *v55;
  size_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  WTF **v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  const void *v117;
  void *v118;
  uint64_t *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _DWORD **v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD **v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  WTF::StringImpl **v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  size_t __n;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  uint64_t v158;
  WTF *v159;
  WTF *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF *v163;
  int v164;
  unsigned int v165;
  char v166;

  v7 = (char)a3;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = 0x600000001;
  v11[2] = 0;
  v11[3] = 0;
  *a5 = (uint64_t)v11;
  if (a4)
    v17 = 0;
  else
    v17 = 2;
  Inspector::ContentSearchUtilities::createRegularExpressionForSearchString(a2, v7, v17, v12, v13, v14, v15, v16, (uint64_t *)&v159);
  v157 = 0;
  v158 = 0;
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v153 = a5;
    Inspector::ContentSearchUtilities::lineEndings((uint64_t *)this, (uint64_t)&v163, v25, v26, v27);
    v39 = (WTF *)v165;
    if (v165)
    {
      v155 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      while (1)
      {
        if ((unint64_t)v42 >= v165)
        {
          __break(0xC471u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(0xC471u);
          JUMPOUT(0x1986085ACLL);
        }
        v43 = *((_QWORD *)v163 + (_QWORD)v42);
        v44 = v5 & 0xFFFFFF0000000000;
        v45 = *(_QWORD *)this;
        if (!*(_QWORD *)this)
          break;
        v46 = *(unsigned int *)(v45 + 4);
        v47 = ((unint64_t)*(unsigned int *)(v45 + 16) >> 2) & 1;
        v5 = v44 | (v47 << 32) | v46;
        if (v46 <= v41)
          goto LABEL_28;
        v48 = *(char **)(v45 + 8);
        v49 = v43 - v41;
        if (v46 - v41 > v43 - v41 || (v49 = v46 - v41, v41))
        {
          v50 = v41;
          v51 = v49;
          v52 = v46 - v41;
          if ((_DWORD)v47)
          {
            if (v52 < v49)
              goto LABEL_123;
            v48 += v50;
            v51 = v49 | 0x100000000;
          }
          else
          {
            if (v52 < v49)
              goto LABEL_123;
            v48 += 2 * v50;
          }
        }
        else
        {
          v51 = v5;
        }
LABEL_29:
        LODWORD(v162) = 0;
        if (JSC::Yarr::RegularExpression::match((uint64_t *)&v159, v48, v51, 0, (int *)&v162, v22, v23, v24) != -1)
        {
          if ((v51 & 0xFF00000000) != 0)
          {
            if (v48)
            {
              if ((_DWORD)v51)
              {
                if ((unint64_t)v51 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986085B4);
                }
                v53 = (int *)WTF::fastCompactMalloc((WTF *)(v51 + 20));
                v54 = (char *)(v53 + 5);
                *v53 = 2;
                v53[1] = v51;
                *((_QWORD *)v53 + 1) = v53 + 5;
                v53[4] = 4;
                if (v51 == 1)
                {
                  *v54 = *v48;
                  goto LABEL_46;
                }
                v55 = v48;
                v56 = v51;
LABEL_45:
                memcpy(v54, v55, v56);
                goto LABEL_46;
              }
              goto LABEL_42;
            }
          }
          else if (v48)
          {
            if ((_DWORD)v51)
            {
              if (v51 >= 0x7FFFFFF0uLL)
                goto LABEL_126;
              v53 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v51 + 20));
              v54 = (char *)(v53 + 5);
              *v53 = 2;
              v53[1] = v51;
              *((_QWORD *)v53 + 1) = v53 + 5;
              v53[4] = 0;
              if (v51 != 1)
              {
                v55 = v48;
                v56 = 2 * v51;
                goto LABEL_45;
              }
              *(_WORD *)v54 = *(_WORD *)v48;
LABEL_46:
              v160 = v42;
              v161 = (WTF::StringImpl *)v53;
              if (v40 == (_DWORD)v158)
              {
                v57 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v157, v40 + 1, (unint64_t)&v160);
                v40 = HIDWORD(v158);
                v155 = v157;
                v58 = (_QWORD *)((char *)v157 + 16 * HIDWORD(v158));
                *v58 = *(_QWORD *)v57;
                v59 = *((_QWORD *)v57 + 1);
                *((_QWORD *)v57 + 1) = 0;
                v58[1] = v59;
              }
              else
              {
                v60 = (WTF **)((char *)v155 + 16 * v40);
                *v60 = v42;
                v161 = 0;
                v60[1] = (WTF *)v53;
              }
              HIDWORD(v158) = ++v40;
              v61 = v161;
              v161 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                {
                  WTF::StringImpl::~StringImpl(v61, v18, v19, v20, v21, v22, v23, v24);
                  WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                }
                else
                {
                  *(_DWORD *)v61 -= 2;
                }
              }
              goto LABEL_52;
            }
LABEL_42:
            v53 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_46;
          }
          v53 = 0;
          goto LABEL_46;
        }
LABEL_52:
        v42 = (WTF *)((char *)v42 + 1);
        v41 = v43;
        if (v39 == v42)
          goto LABEL_58;
      }
      v5 = v44 | 0x100000000;
LABEL_28:
      v51 = 0x100000000;
      v48 = "";
      goto LABEL_29;
    }
    v40 = 0;
LABEL_58:
    v72 = v163;
    if (v163)
    {
      v163 = 0;
      v164 = 0;
      WTF::fastFree((unint64_t)v72, v18, v19, v20, v21, v22, v23, v24);
    }
    v73 = v157;
    if (v40)
    {
      __n = v40;
      v74 = (WTF *)((char *)v157 + 16 * v40);
      v75 = *v153;
      v156 = v157;
      v76 = v157;
      do
      {
        v77 = *(_QWORD *)v76;
        v78 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v78 = 0x500000001;
        *(_QWORD *)(v78 + 16) = 0;
        *(_QWORD *)(v78 + 24) = 0;
        *(_QWORD *)(v78 + 32) = 0;
        v79 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v79 = 0xA00000002;
        *(_QWORD *)(v79 + 8) = "lineNumber";
        *(_DWORD *)(v79 + 16) = 4;
        v162 = (WTF::StringImpl *)v79;
        v80 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v80 = 0x200000001;
        v80[1] = (double)v77;
        v160 = (WTF *)v80;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v78 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v160, v81, v82, v83, v84, v85, (uint64_t)&v163);
        if (v166)
        {
          v93 = (uint64_t *)(v78 + 24);
          v94 = *(unsigned int *)(v78 + 36);
          if ((_DWORD)v94 == *(_DWORD *)(v78 + 32))
          {
            v136 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v162);
            v94 = *(unsigned int *)(v78 + 36);
            v137 = *(_QWORD *)(v78 + 24);
            v138 = *v136;
            if (*v136)
              *v138 += 2;
            *(_QWORD *)(v137 + 8 * v94) = v138;
          }
          else
          {
            v95 = *v93;
            v96 = v162;
            if (v162)
              *(_DWORD *)v162 += 2;
            *(_QWORD *)(v95 + 8 * v94) = v96;
          }
          *(_DWORD *)(v78 + 36) = v94 + 1;
        }
        v97 = v160;
        v160 = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 1)
            WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
          else
            --*(_DWORD *)v97;
        }
        v98 = v162;
        v162 = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
          {
            WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
            WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          }
          else
          {
            *(_DWORD *)v98 -= 2;
          }
        }
        v99 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v99 = 0xB00000002;
        *(_QWORD *)(v99 + 8) = "lineContent";
        *(_DWORD *)(v99 + 16) = 4;
        v162 = (WTF::StringImpl *)v99;
        v100 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v100 = 0x400000001;
        v106 = (_DWORD *)*((_QWORD *)v76 + 1);
        *((_QWORD *)v100 + 1) = v106;
        if (v106)
          *v106 += 2;
        v160 = v100;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v78 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v160, v101, v102, v103, v104, v105, (uint64_t)&v163);
        if (v166)
        {
          v107 = (uint64_t *)(v78 + 24);
          v108 = *(unsigned int *)(v78 + 36);
          if ((_DWORD)v108 == *(_DWORD *)(v78 + 32))
          {
            v139 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v162);
            v108 = *(unsigned int *)(v78 + 36);
            v140 = *(_QWORD *)(v78 + 24);
            v141 = *v139;
            if (*v139)
              *v141 += 2;
            *(_QWORD *)(v140 + 8 * v108) = v141;
          }
          else
          {
            v109 = *v107;
            v110 = v162;
            if (v162)
              *(_DWORD *)v162 += 2;
            *(_QWORD *)(v109 + 8 * v108) = v110;
          }
          *(_DWORD *)(v78 + 36) = v108 + 1;
        }
        v111 = v160;
        v160 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 1)
            WTF::JSONImpl::Value::operator delete(v111, v18, v19, v20, v21, v22, v23, v24);
          else
            --*(_DWORD *)v111;
        }
        v112 = v162;
        v162 = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
          {
            WTF::StringImpl::~StringImpl(v112, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
          }
          else
          {
            *(_DWORD *)v112 -= 2;
          }
        }
        v113 = *(unsigned int *)(v75 + 28);
        if ((_DWORD)v113 == *(_DWORD *)(v75 + 24))
        {
          v114 = v113 + (v113 >> 2);
          if (v114 >= 0x10)
            v115 = v114 + 1;
          else
            v115 = 16;
          if (v115 <= v113 + 1)
            v116 = v113 + 1;
          else
            v116 = v115;
          if (v116 >> 29)
            goto LABEL_124;
          v117 = *(const void **)(v75 + 16);
          v118 = (void *)WTF::fastMalloc((WTF *)(8 * v116));
          *(_DWORD *)(v75 + 24) = v116;
          *(_QWORD *)(v75 + 16) = v118;
          memcpy(v118, v117, 8 * v113);
          if (v117)
          {
            if (*(const void **)(v75 + 16) == v117)
            {
              *(_QWORD *)(v75 + 16) = 0;
              *(_DWORD *)(v75 + 24) = 0;
            }
            WTF::fastFree((unint64_t)v117, v18, v19, v20, v21, v22, v23, v24);
          }
          v113 = *(unsigned int *)(v75 + 28);
          v119 = (uint64_t *)(*(_QWORD *)(v75 + 16) + 8 * v113);
        }
        else
        {
          v119 = (uint64_t *)(*(_QWORD *)(v75 + 16) + 8 * v113);
        }
        *v119 = v78;
        *(_DWORD *)(v75 + 28) = v113 + 1;
        v76 = (WTF *)((char *)v76 + 16);
      }
      while (v76 != v74);
      v73 = v156;
      v142 = 16 * __n;
      v143 = (WTF::StringImpl **)((char *)v156 + 8);
      do
      {
        v144 = *v143;
        *v143 = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
          {
            WTF::StringImpl::~StringImpl(v144, v18, v19, v20, v21, v22, v23, v24);
            WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
          }
          else
          {
            *(_DWORD *)v144 -= 2;
          }
        }
        v143 += 2;
        v142 -= 16;
      }
      while (v142);
    }
    if (v73)
      WTF::fastFree((unint64_t)v73, v18, v19, v20, v21, v22, v23, v24);
  }
  v28 = v159;
  if (v159)
  {
    if (*(_DWORD *)v159 == 1)
    {
      v29 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v159 + 3);
      *((_QWORD *)v159 + 3) = 0;
      if (v29)
      {
        JSC::Yarr::BytecodePattern::~BytecodePattern(v29, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      v38 = (_QWORD *)*((_QWORD *)v28 + 1);
      if (v38)
      {
        v70 = (void *)v38[5];
        v71 = v38[6];
        v38[5] = 0;
        v38[6] = 0;
        v38[4] = 0;
        if (munmap(v70, v71) == -1)
        {
LABEL_126:
          __break(0xC471u);
          JUMPOUT(0x198608208);
        }
      }
      WTF::fastFree((unint64_t)v28, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      --*(_DWORD *)v159;
    }
  }
}

void Inspector::ContentSearchUtilities::findStylesheetSourceMapURL(Inspector::ContentSearchUtilities *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Yarr::BytecodePattern *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  JSC::Yarr::BytecodePattern *v34;
  char v35;
  uint64_t v36;
  unsigned __int16 v37[2];
  int v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE v42[176];

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    LOBYTE(v37[0]) = 0;
    v37[1] = 8;
    v39 = 0;
    v38 = 0;
    v40 = v42;
    v41 = 4;
    memset(&v42[32], 0, 144);
    JSC::Yarr::YarrPattern::compile(v37, "/\\*[#@][ \t]sourceMappingURL=[ \t]*([^\\s'\"]*)[ \t]*\\*/", 0x100000033);
    v36 = 0;
    v35 = 0;
    JSC::Yarr::byteCompile((unint64_t)v37, (uint64_t)&v36, &v35, 0, (uint64_t *)&v34);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x19860876CLL);
    }
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    if (JSC::Yarr::interpret((uint64_t)v34, v9, v10, 0, (uint64_t)&v31, v5, v6, v7) == -1
      || (v18 = *(_QWORD *)this) == 0)
    {
      *a2 = 0;
    }
    else
    {
      v11 = (void *)v32;
      v12 = v33 - v32;
      if (v32 || *(_DWORD *)(v18 + 4) > v12)
      {
        WTF::StringImpl::substring((_QWORD *)v18, v32, v12, a2);
      }
      else
      {
        *(_DWORD *)v18 += 2;
        *a2 = v18;
      }
    }
    v19 = v34;
    v34 = 0;
    if (v19)
    {
      JSC::Yarr::BytecodePattern::~BytecodePattern(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    v28 = v36;
    if (v36)
    {
      v29 = *(void **)(v36 + 40);
      v30 = *(_QWORD *)(v36 + 48);
      *(_QWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      if (munmap(v29, v30) == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198608740);
      }
    }
    JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v37, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t Inspector::IdentifiersFactory::createIdentifier@<X0>(int **a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = "0.";
  v5[1] = 3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v5, (unint64_t *)&v4, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t Inspector::addPrefixToIdentifier(int **this, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = "0.";
  v5[1] = 3;
  v4 = a2;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v5, &v4, this);
  if (!*this)
    __break(0xC471u);
  return result;
}

Inspector::InjectedScript *Inspector::InjectedScript::InjectedScript(Inspector::InjectedScript *this)
{
  uint64_t v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v2 + 8) = "InjectedScript";
  *(_DWORD *)(v2 + 16) = 4;
  *(_QWORD *)v2 = 0xE00000004;
  *(_QWORD *)this = &off_1E3591350;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v2, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    *(_DWORD *)v2 -= 2;
  }
  *(_QWORD *)this = &off_1E3591330;
  return this;
}

{
  uint64_t v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v2 + 8) = "InjectedScript";
  *(_DWORD *)(v2 + 16) = 4;
  *(_QWORD *)v2 = 0xE00000004;
  *(_QWORD *)this = &off_1E3591350;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  if (*(_DWORD *)v2 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v2, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    *(_DWORD *)v2 -= 2;
  }
  *(_QWORD *)this = &off_1E3591330;
  return this;
}

_QWORD *Inspector::InjectedScriptBase::InjectedScriptBase(_QWORD *this, const WTF::String *a2)
{
  _DWORD *v2;

  *this = &off_1E3591350;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  this[1] = v2;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

{
  _DWORD *v2;

  *this = &off_1E3591350;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  this[1] = v2;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

_QWORD *Inspector::InjectedScript::InjectedScript(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::AtomStringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v15 + 8) = "InjectedScript";
  *(_DWORD *)(v15 + 16) = 4;
  *(_QWORD *)v15 = 0xE00000004;
  *a1 = &off_1E3591350;
  a1[1] = v15;
  a1[2] = a2;
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 712);
  if (!v17)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v16 + 672), (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    v17 = *(_QWORD *)(v16 + 712);
  }
  *(_QWORD *)(v16 + 712) = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (_QWORD *)(v17 + 16);
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  a1[3] = v17 + 16;
  if ((a3 != 0) != (*(_QWORD *)(v17 + 16) != 0))
  {
    if (a3)
    {
      v19 = *(unint64_t **)((v17 & 0xFFFFFFFFFFFFF000) + 0x10);
      v20 = v19[3];
      v19 += 3;
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v19;
      *v19 = v17;
      *(_QWORD *)(v20 + 8) = v17;
    }
    else
    {
      v31 = *(_QWORD *)v17;
      v30 = *(_QWORD **)(v17 + 8);
      *v30 = *(_QWORD *)v17;
      *(_QWORD *)(v31 + 8) = v30;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v18 = (_QWORD *)a1[3];
    }
  }
  *v18 = a3;
  a1[4] = a4;
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v8, v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  else
  {
    *(_DWORD *)v15 -= 2;
  }
  *a1 = &off_1E3591330;
  return a1;
}

_QWORD *Inspector::InjectedScriptBase::InjectedScriptBase(_QWORD *result, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = (_DWORD *)*a2;
  *result = &off_1E3591350;
  if (v8)
    *v8 += 2;
  result[1] = v8;
  result[2] = a3;
  v9 = *(_QWORD *)(a3 + 56);
  v10 = *(_QWORD *)(v9 + 712);
  if (!v10)
  {
    v19 = result;
    v17 = *(_QWORD *)(a3 + 56);
    v18 = a5;
    v16 = a4;
    JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a4 = v16;
    v9 = v17;
    result = v19;
    a5 = v18;
    v10 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v9 + 712) = *(_QWORD *)v10;
  *(_QWORD *)(v10 + 16) = 0;
  v11 = (uint64_t *)(v10 + 16);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  result[3] = v10 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v10 + 16) != 0))
  {
    if (a4)
    {
      v12 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = v12[3];
      v12 += 3;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v12;
      *v12 = v10;
      *(_QWORD *)(v13 + 8) = v10;
    }
    else
    {
      v15 = *(_QWORD *)v10;
      v14 = *(_QWORD **)(v10 + 8);
      *v14 = *(_QWORD *)v10;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v11 = (uint64_t *)result[3];
    }
  }
  *v11 = a4;
  result[4] = a5;
  return result;
}

{
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = (_DWORD *)*a2;
  *result = &off_1E3591350;
  if (v8)
    *v8 += 2;
  result[1] = v8;
  result[2] = a3;
  v9 = *(_QWORD *)(a3 + 56);
  v10 = *(_QWORD *)(v9 + 712);
  if (!v10)
  {
    v19 = result;
    v17 = *(_QWORD *)(a3 + 56);
    v18 = a5;
    v16 = a4;
    JSC::HandleSet::grow((JSC::HandleSet *)(v9 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a4 = v16;
    v9 = v17;
    result = v19;
    a5 = v18;
    v10 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v9 + 712) = *(_QWORD *)v10;
  *(_QWORD *)(v10 + 16) = 0;
  v11 = (uint64_t *)(v10 + 16);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  result[3] = v10 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v10 + 16) != 0))
  {
    if (a4)
    {
      v12 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = v12[3];
      v12 += 3;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v12;
      *v12 = v10;
      *(_QWORD *)(v13 + 8) = v10;
    }
    else
    {
      v15 = *(_QWORD *)v10;
      v14 = *(_QWORD **)(v10 + 8);
      *v14 = *(_QWORD *)v10;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v11 = (uint64_t *)result[3];
    }
  }
  *v11 = a4;
  result[4] = a5;
  return result;
}

void Inspector::InjectedScriptBase::~InjectedScriptBase(Inspector::InjectedScriptBase *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  JUMPOUT(0x19AEBAEF0);
}

void Inspector::InjectedScript::execute(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::String *a3, uint64_t a4, WTF **a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned int v46;
  _OWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  JSC::VM *v73;
  unint64_t v74;
  unsigned int v75;
  _OWORD *v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  char v117[8];
  uint64_t v118;
  _OWORD *v119;
  _OWORD v120[4];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  WTF::StringImpl *v125;
  unsigned int *v126[3];
  uint64_t v127[2];

  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t **)(a1 + 24);
  if (v10)
    v14 = *v10;
  else
    v14 = 0;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x700000002;
  *(_QWORD *)(v15 + 8) = "execute";
  *(_DWORD *)(v15 + 16) = 4;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v117[0] = 0;
  v118 = 0x800000000;
  v119 = (_OWORD *)((char *)v120 + 8);
  v24 = 0.0;
  memset(v120, 0, sizeof(v120));
  v121 = 0;
  v122 = v11;
  v123 = v16;
  v25 = *(_QWORD *)(v11 + 56);
  v26 = *(_QWORD *)(v25 + 712);
  if (!v26)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v25 + 672), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    v26 = *(_QWORD *)(v25 + 712);
  }
  *(_QWORD *)(v25 + 712) = *(_QWORD *)v26;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = (_QWORD *)(v26 + 16);
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  v124 = (_QWORD *)(v26 + 16);
  if ((v14 != 0) != (*(_QWORD *)(v26 + 16) != 0))
  {
    if (v14)
    {
      v28 = *(unint64_t **)((v26 & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(_QWORD *)v26 = v29;
      *(_QWORD *)(v26 + 8) = v28;
      *v28 = v26;
      *(_QWORD *)(v29 + 8) = v26;
    }
    else
    {
      v114 = *(_QWORD *)v26;
      v113 = *(_QWORD **)(v26 + 8);
      *v113 = *(_QWORD *)v26;
      *(_QWORD *)(v114 + 8) = v113;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = v124;
    }
  }
  *v27 = v14;
  v30 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  v125 = (WTF::StringImpl *)v15;
  if (v30)
  {
    *(_DWORD *)v15 = v30;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v117, a3, v18, v19, v20, v21, v22, v23, v24);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v117, (const WTF::String *)a4, v31, v32, v33, v34, v35, v36, v37);
  if (*(_BYTE *)(a4 + 8))
    v45 = 7;
  else
    v45 = 6;
  v46 = v118;
  if ((_DWORD)v118 != HIDWORD(v118))
  {
    v47 = v119;
    if (v119 == (_OWORD *)((char *)v120 + 8) || !v119)
    {
      *((_QWORD *)v119 + v118) = v45;
LABEL_18:
      LODWORD(v118) = ++v46;
      goto LABEL_19;
    }
LABEL_83:
    *((_QWORD *)v47 + v46) = v45;
    goto LABEL_18;
  }
  if (!(v118 >> 30))
  {
    v105 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * (int)v118);
    v46 = v118;
    if (!v105)
    {
      v47 = v119;
      goto LABEL_83;
    }
  }
  v117[0] = 1;
LABEL_19:
  if (*(_BYTE *)(a4 + 9))
    v48 = 7;
  else
    v48 = 6;
  if (v46 != HIDWORD(v118))
  {
    v49 = v119;
LABEL_24:
    *((_QWORD *)v49 + v46++) = v48;
    LODWORD(v118) = v46;
    goto LABEL_25;
  }
  if (!(v46 >> 30))
  {
    v106 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * v46);
    v46 = v118;
    if (!v106)
    {
      v49 = v119;
      goto LABEL_24;
    }
  }
  v117[0] = 1;
LABEL_25:
  if (*(_BYTE *)(a4 + 10))
    v50 = 7;
  else
    v50 = 6;
  if (v46 != HIDWORD(v118))
  {
    v51 = v119;
LABEL_30:
    *((_QWORD *)v51 + v46++) = v50;
    LODWORD(v118) = v46;
    goto LABEL_31;
  }
  if (!(v46 >> 30))
  {
    v107 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * v46);
    v46 = v118;
    if (!v107)
    {
      v51 = v119;
      goto LABEL_30;
    }
  }
  v117[0] = 1;
LABEL_31:
  if (*(_BYTE *)(a4 + 11))
    v52 = 7;
  else
    v52 = 6;
  if (v46 != HIDWORD(v118))
  {
    v53 = v119;
LABEL_36:
    *((_QWORD *)v53 + v46) = v52;
    LODWORD(v118) = v46 + 1;
    goto LABEL_37;
  }
  if (!(v46 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * v46))
  {
    v46 = v118;
    v53 = v119;
    goto LABEL_36;
  }
  v117[0] = 1;
LABEL_37:
  v54 = *(_QWORD *)(a1 + 16);
  if (v54)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v126, *(JSC::JSGlobalObject **)(a1 + 16), v38, v39, v40, v41, v42, v43, v44);
    v60 = JSC::constructEmptyArray(v54, 0, 0, 0, v55, v56, v57, v58, v59);
    if (v60)
    {
      v69 = v60;
      v70 = *(unsigned int *)(a4 + 28);
      if ((_DWORD)v70)
      {
        v71 = *(unint64_t **)(a4 + 16);
        v72 = 8 * v70;
        do
        {
          if ((*(_BYTE *)(v69 + 4) & 0xE) != 0)
            v73 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v69 + 8) - 8);
          else
            v73 = 0;
          v74 = *v71++;
          JSC::JSObject::putDirectIndex(v69, v54, v73, v74, v64, v65, v66, v67, v68);
          v72 -= 8;
        }
        while (v72);
      }
    }
    else
    {
      v69 = 10;
    }
    JSC::JSLockHolder::~JSLockHolder(v126, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    v69 = 10;
  }
  v75 = v118;
  if ((_DWORD)v118 == HIDWORD(v118))
  {
    if (v118 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * (int)v118))
    {
      v117[0] = 1;
      goto LABEL_53;
    }
    v75 = v118;
    v76 = v119;
  }
  else
  {
    v76 = v119;
    if (v119 == (_OWORD *)((char *)v120 + 8) || !v119)
    {
      *((_QWORD *)v119 + v118) = v69;
      LODWORD(v118) = v75 + 1;
      goto LABEL_53;
    }
  }
  *((_QWORD *)v76 + v75) = v69;
  LODWORD(v118) = v75 + 1;
  if ((v69 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v120[0])
  {
    v112 = (_QWORD *)(v69 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v69 & 8) != 0)
      v112 = (_QWORD *)(v69 - 16);
    *(_QWORD *)&v120[0] = *v112 + 560;
    v127[0] = (uint64_t)&v118;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v120[0], v127, v39, v40, v41, v42, v43, (uint64_t)v126);
  }
LABEL_53:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v117, v127);
  v77 = (WTF *)v127[0];
  v126[0] = (unsigned int *)v127[0];
  Inspector::InjectedScriptBase::checkCallResult(v78, a2, (uint64_t *)v126, a5, a6, a7, v79, v80);
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
      WTF::JSONImpl::Value::operator delete(v77, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v77;
  }
  v88 = v125;
  v125 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  if (v124)
  {
    v108 = v124 - 2;
    v109 = *(_QWORD *)(((unint64_t)(v124 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v110 = (uint64_t *)*(v124 - 1);
    if (v110)
    {
      v111 = *v108;
      *v110 = *v108;
      *(_QWORD *)(v111 + 8) = v110;
      *v108 = 0;
      v108[1] = 0;
    }
    *v108 = *(_QWORD *)(v109 + 40);
    *(_QWORD *)(v109 + 40) = v108;
    v124 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v118, v81, v82, v83, v84, v85, v86, v87);
}

uint64_t Inspector::InjectedScriptBase::injectedScriptObject(Inspector::InjectedScriptBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t Inspector::InjectedScript::arrayFromVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  unsigned int *v32;

  v9 = *(JSC::JSGlobalObject **)(a1 + 16);
  if (!v9)
    return 10;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, v9, a3, a4, a5, a6, a7, a8, a9);
  v16 = JSC::constructEmptyArray((unint64_t)v9, 0, 0, 0, v11, v12, v13, v14, v15);
  if (v16)
  {
    v25 = v16;
    v26 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v26)
    {
      v27 = *(unint64_t **)a2;
      v28 = 8 * v26;
      do
      {
        if ((*(_BYTE *)(v25 + 4) & 0xE) != 0)
          v29 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v25 + 8) - 8);
        else
          v29 = 0;
        v30 = *v27++;
        JSC::JSObject::putDirectIndex(v25, (unint64_t)v9, v29, v30, v20, v21, v22, v23, v24);
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    v25 = 10;
  }
  JSC::JSLockHolder::~JSLockHolder(&v32, v17, v18, v19, v20, v21, v22, v23);
  return v25;
}

void Inspector::InjectedScriptBase::makeEvalCall(_QWORD *a1, WTF::AtomStringImpl *a2, WTF::AtomStringImpl *a3, WTF **a4, uint64_t a5, uint64_t a6)
{
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  Inspector::InjectedScriptBase::makeCall(a1, a3, &v21);
  v10 = (WTF *)v21;
  v22 = v21;
  Inspector::InjectedScriptBase::checkCallResult(v11, a2, &v22, a4, a5, a6, v12, v13);
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v10;
  }
}

void Inspector::InjectedScript::evaluate(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::String *a3, const WTF::String *a4, int a5, int a6, int a7, int a8, WTF **a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unsigned int v43;
  _OWORD *v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  WTF::AtomStringImpl *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char v92[8];
  uint64_t v93;
  _OWORD *v94;
  _OWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;

  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(uint64_t **)(a1 + 24);
  if (v16)
    v18 = *v16;
  else
    v18 = 0;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x800000002;
  *(_QWORD *)(v19 + 8) = "evaluate";
  *(_DWORD *)(v19 + 16) = 4;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v92[0] = 0;
  v93 = 0x800000000;
  v94 = (_OWORD *)((char *)v95 + 8);
  v28 = 0.0;
  memset(v95, 0, sizeof(v95));
  v96 = 0;
  v97 = v17;
  v98 = v20;
  v29 = *(_QWORD *)(v17 + 56);
  v30 = *(_QWORD *)(v29 + 712);
  if (!v30)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v29 + 672), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_QWORD *)(v29 + 712);
  }
  *(_QWORD *)(v29 + 712) = *(_QWORD *)v30;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (_QWORD *)(v30 + 16);
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  v99 = (_QWORD *)(v30 + 16);
  if ((v18 != 0) != (*(_QWORD *)(v30 + 16) != 0))
  {
    if (v18)
    {
      v32 = *(unint64_t **)((v30 & 0xFFFFFFFFFFFFF000) + 0x10);
      v33 = v32[3];
      v32 += 3;
      *(_QWORD *)v30 = v33;
      *(_QWORD *)(v30 + 8) = v32;
      *v32 = v30;
      *(_QWORD *)(v33 + 8) = v30;
    }
    else
    {
      v88 = *(_QWORD *)v30;
      v87 = *(_QWORD **)(v30 + 8);
      *v87 = *(_QWORD *)v30;
      *(_QWORD *)(v88 + 8) = v87;
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      v31 = v99;
    }
  }
  *v31 = v18;
  v34 = *(_DWORD *)v19;
  *(_DWORD *)v19 += 2;
  v100 = (WTF::StringImpl *)v19;
  if (v34)
  {
    *(_DWORD *)v19 = v34;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v92, a3, v22, v23, v24, v25, v26, v27, v28);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v92, a4, v35, v36, v37, v38, v39, v40, v41);
  if (a5)
    v42 = 7;
  else
    v42 = 6;
  v43 = v93;
  if ((_DWORD)v93 != HIDWORD(v93))
  {
    v44 = v94;
    if (v94 == (_OWORD *)((char *)v95 + 8) || !v94)
    {
      *((_QWORD *)v94 + v93) = v42;
LABEL_18:
      LODWORD(v93) = ++v43;
      goto LABEL_19;
    }
LABEL_67:
    *((_QWORD *)v44 + v43) = v42;
    goto LABEL_18;
  }
  if (!(v93 >> 30))
  {
    v80 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * (int)v93);
    v43 = v93;
    if (!v80)
    {
      v44 = v94;
      goto LABEL_67;
    }
  }
  v92[0] = 1;
LABEL_19:
  if (a6)
    v45 = 7;
  else
    v45 = 6;
  if (v43 != HIDWORD(v93))
  {
    v46 = v94;
LABEL_24:
    *((_QWORD *)v46 + v43++) = v45;
    LODWORD(v93) = v43;
    goto LABEL_25;
  }
  if (!(v43 >> 30))
  {
    v81 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * v43);
    v43 = v93;
    if (!v81)
    {
      v46 = v94;
      goto LABEL_24;
    }
  }
  v92[0] = 1;
LABEL_25:
  if (a7)
    v47 = 7;
  else
    v47 = 6;
  if (v43 != HIDWORD(v93))
  {
    v48 = v94;
LABEL_30:
    *((_QWORD *)v48 + v43++) = v47;
    LODWORD(v93) = v43;
    goto LABEL_31;
  }
  if (!(v43 >> 30))
  {
    v82 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * v43);
    v43 = v93;
    if (!v82)
    {
      v48 = v94;
      goto LABEL_30;
    }
  }
  v92[0] = 1;
LABEL_31:
  if (a8)
    v49 = 7;
  else
    v49 = 6;
  if (v43 != HIDWORD(v93))
  {
    v50 = v94;
    if (v94 == (_OWORD *)((char *)v95 + 8) || !v94)
    {
      *((_QWORD *)v94 + v43) = v49;
      LODWORD(v93) = v43 + 1;
      v51 = a2;
      goto LABEL_38;
    }
    v51 = a2;
    goto LABEL_47;
  }
  v51 = a2;
  if (!(v43 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v93, 2 * v43))
  {
    v43 = v93;
    v50 = v94;
LABEL_47:
    *((_QWORD *)v50 + v43) = v49;
    LODWORD(v93) = v43 + 1;
    goto LABEL_38;
  }
  v92[0] = 1;
LABEL_38:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v92, &v101);
  v52 = (WTF *)v101;
  v102 = v101;
  Inspector::InjectedScriptBase::checkCallResult(v53, v51, &v102, a9, a10, a11, v54, v55);
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete(v52, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v52;
  }
  v63 = v100;
  v100 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  if (v99)
  {
    v83 = v99 - 2;
    v84 = *(_QWORD *)(((unint64_t)(v99 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v85 = (uint64_t *)*(v99 - 1);
    if (v85)
    {
      v86 = *v83;
      *v85 = *v83;
      *(_QWORD *)(v86 + 8) = v85;
      *v83 = 0;
      v83[1] = 0;
    }
    *v83 = *(_QWORD *)(v84 + 40);
    *(_QWORD *)(v84 + 40) = v83;
    v99 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v93, v56, v57, v58, v59, v60, v61, v62);
}

void Inspector::InjectedScript::awaitPromise(uint64_t a1, const WTF::String *a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char v71[8];
  uint64_t v72;
  _OWORD *v73;
  _OWORD v74[4];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  WTF::StringImpl *v79;

  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t **)(a1 + 24);
  if (v11)
    v13 = *v11;
  else
    v13 = 0;
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0xC00000002;
  *(_QWORD *)(v14 + 8) = "awaitPromise";
  *(_DWORD *)(v14 + 16) = 4;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v71[0] = 0;
  v72 = 0x800000000;
  v73 = (_OWORD *)((char *)v74 + 8);
  v23 = 0.0;
  memset(v74, 0, sizeof(v74));
  v75 = 0;
  v76 = v12;
  v77 = v15;
  v24 = *(_QWORD *)(v12 + 56);
  v25 = *(_QWORD *)(v24 + 712);
  if (!v25)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v24 + 672), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_QWORD *)(v24 + 712);
  }
  *(_QWORD *)(v24 + 712) = *(_QWORD *)v25;
  *(_QWORD *)(v25 + 16) = 0;
  v26 = (_QWORD *)(v25 + 16);
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  v78 = (_QWORD *)(v25 + 16);
  if ((v13 != 0) != (*(_QWORD *)(v25 + 16) != 0))
  {
    if (v13)
    {
      v27 = *(unint64_t **)((v25 & 0xFFFFFFFFFFFFF000) + 0x10);
      v28 = v27[3];
      v27 += 3;
      *(_QWORD *)v25 = v28;
      *(_QWORD *)(v25 + 8) = v27;
      *v27 = v25;
      *(_QWORD *)(v28 + 8) = v25;
    }
    else
    {
      v69 = *(_QWORD *)v25;
      v68 = *(_QWORD **)(v25 + 8);
      *v68 = *(_QWORD *)v25;
      *(_QWORD *)(v69 + 8) = v68;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
      v26 = v78;
    }
  }
  *v26 = v13;
  v29 = *(_DWORD *)v14;
  *(_DWORD *)v14 += 2;
  v79 = (WTF::StringImpl *)v14;
  if (v29)
  {
    *(_DWORD *)v14 = v29;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v71, a2, v17, v18, v19, v20, v21, v22, v23);
  if (a3)
    v30 = 7;
  else
    v30 = 6;
  v31 = v72;
  if ((_DWORD)v72 != HIDWORD(v72))
  {
    v32 = v73;
    if (v73 == (_OWORD *)((char *)v74 + 8) || !v73)
    {
      *((_QWORD *)v73 + v72) = v30;
LABEL_18:
      LODWORD(v72) = ++v31;
      goto LABEL_19;
    }
LABEL_54:
    *((_QWORD *)v32 + v31) = v30;
    goto LABEL_18;
  }
  if (!(v72 >> 30))
  {
    v62 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v72, 2 * (int)v72);
    v31 = v72;
    if (!v62)
    {
      v32 = v73;
      goto LABEL_54;
    }
  }
  v71[0] = 1;
LABEL_19:
  if (a4)
    v33 = 7;
  else
    v33 = 6;
  if (v31 != HIDWORD(v72))
  {
    v34 = v73;
LABEL_24:
    *((_QWORD *)v34 + v31++) = v33;
    LODWORD(v72) = v31;
    goto LABEL_25;
  }
  if (!(v31 >> 30))
  {
    v63 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v72, 2 * v31);
    v31 = v72;
    if (!v63)
    {
      v34 = v73;
      goto LABEL_24;
    }
  }
  v71[0] = 1;
LABEL_25:
  if (a5)
    v35 = 7;
  else
    v35 = 6;
  if (v31 != HIDWORD(v72))
  {
    v36 = v73;
    if (v73 == (_OWORD *)((char *)v74 + 8) || !v73)
    {
      *((_QWORD *)v73 + v31) = v35;
      LODWORD(v72) = v31 + 1;
      v37 = a6;
      goto LABEL_32;
    }
    v37 = a6;
    goto LABEL_38;
  }
  v37 = a6;
  if (!(v31 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v72, 2 * v31))
  {
    v31 = v72;
    v36 = v73;
LABEL_38:
    *((_QWORD *)v36 + v31) = v35;
    LODWORD(v72) = v31 + 1;
    goto LABEL_32;
  }
  v71[0] = 1;
LABEL_32:
  Inspector::InjectedScriptBase::makeAsyncCall((_QWORD *)a1, (uint64_t)v71, v37);
  v45 = v79;
  v79 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (v78)
  {
    v64 = v78 - 2;
    v65 = *(_QWORD *)(((unint64_t)(v78 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v66 = (uint64_t *)*(v78 - 1);
    if (v66)
    {
      v67 = *v64;
      *v66 = *v64;
      *(_QWORD *)(v67 + 8) = v66;
      *v64 = 0;
      v64[1] = 0;
    }
    *v64 = *(_QWORD *)(v65 + 40);
    *(_QWORD *)(v65 + 40) = v64;
    v78 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v72, v38, v39, v40, v41, v42, v43, v44);
}

void Inspector::InjectedScriptBase::makeAsyncCall(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD *v62;
  WTF *v63;
  unsigned int *v64;
  int v65;
  WTF::StringImpl *v66;

  v4 = (_QWORD *)a1[3];
  if (!v4
    || !*v4
    || (v6 = a1[4]) == 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, a1[2]) & 1) == 0)
  {
    v39 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v39 = 1;
    v63 = v39;
    Inspector::InjectedScriptBase::checkAsyncCallResult((uint64_t)v39, &v63, a3, v40, v41, v42, v43, v44);
    if (*(_DWORD *)v39 == 1)
      WTF::JSONImpl::Value::operator delete(v39, v45, v46, v47, v48, v49, v50, v51);
    else
      --*(_DWORD *)v39;
    return;
  }
  v15 = a1[2];
  v16 = *(JSC::VM **)(v15 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v64, v16, v8, v9, v10, v11, v12, v13, v14);
  v66 = 0;
  v17 = *a3;
  *a3 = 0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v18 = &off_1E35913B0;
  v18[1] = v17;
  v18[2] = a1;
  v62 = v18;
  v27 = JSC::JSNativeStdFunction::create((uint64_t)v16, v15, 1, &v66, (uint64_t *)&v62, 0, (unint64_t)JSC::callHostFunctionAsConstructor, v19);
  if (v62)
    (*(void (**)(_QWORD *))(*v62 + 8))(v62);
  v28 = v66;
  v66 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v64, v20, v21, v22, v23, v24, v25, v26);
  v37 = *(unsigned int *)(a2 + 8);
  v36 = (WTF::StringImpl *)(a2 + 8);
  if ((_DWORD)v37 == *(_DWORD *)(a2 + 12))
  {
    if (v37 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(a2 + 8), 2 * (int)v37))
    {
      *(_BYTE *)a2 = 1;
      goto LABEL_14;
    }
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
    v38 = *(_QWORD *)(a2 + 16);
    v36 = (WTF::StringImpl *)(a2 + 8);
LABEL_26:
    *(_QWORD *)(v38 + 8 * v37) = v27;
    *(_DWORD *)(a2 + 8) = v37 + 1;
    if (!*(_QWORD *)(a2 + 24) && (v27 & 0xFFFE000000000002) == 0 && v27)
    {
      v60 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v27 & 8) != 0)
        v60 = (_QWORD *)(v27 - 16);
      v61 = (uint64_t *)(*v60 + 560);
      *(_QWORD *)(a2 + 24) = v61;
      v66 = v36;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v61, (uint64_t *)&v66, v30, v31, v32, v33, v34, (uint64_t)&v64);
    }
    goto LABEL_14;
  }
  v38 = *(_QWORD *)(a2 + 16);
  if (v38 != a2 + 32 && v38)
    goto LABEL_26;
  *(_QWORD *)(v38 + 8 * v37) = v27;
  *(_DWORD *)v36 = v37 + 1;
LABEL_14:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)a1, (WTF::AtomStringImpl *)a2, v29, v30, v31, v32, v33, v34, (uint64_t)&v64, v35);
  if (v65 || !v64)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v27 + 32) + 16))(*(_QWORD *)(v27 + 32), v15, 0);
}

void Inspector::InjectedScript::callFunctionOn(uint64_t a1, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, int a5, int a6, int a7, uint64_t *a8)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unsigned int v47;
  _OWORD *v48;
  int v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v90[8];
  uint64_t v91;
  _OWORD *v92;
  _OWORD v93[4];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  WTF::StringImpl *v98;

  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(uint64_t **)(a1 + 24);
  if (v13)
    v15 = *v13;
  else
    v15 = 0;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0xE00000002;
  *(_QWORD *)(v16 + 8) = "callFunctionOn";
  *(_DWORD *)(v16 + 16) = 4;
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v90[0] = 0;
  v91 = 0x800000000;
  v92 = (_OWORD *)((char *)v93 + 8);
  v25 = 0.0;
  memset(v93, 0, sizeof(v93));
  v94 = 0;
  v95 = v14;
  v96 = v17;
  v26 = *(_QWORD *)(v14 + 56);
  v27 = *(_QWORD *)(v26 + 712);
  if (!v27)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v26 + 672), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    v27 = *(_QWORD *)(v26 + 712);
  }
  *(_QWORD *)(v26 + 712) = *(_QWORD *)v27;
  *(_QWORD *)(v27 + 16) = 0;
  v28 = (_QWORD *)(v27 + 16);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  v97 = (_QWORD *)(v27 + 16);
  if ((v15 != 0) != (*(_QWORD *)(v27 + 16) != 0))
  {
    if (v15)
    {
      v29 = *(unint64_t **)((v27 & 0xFFFFFFFFFFFFF000) + 0x10);
      v30 = v29[3];
      v29 += 3;
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
      *v29 = v27;
      *(_QWORD *)(v30 + 8) = v27;
    }
    else
    {
      v86 = *(_QWORD *)v27;
      v85 = *(_QWORD **)(v27 + 8);
      *v85 = *(_QWORD *)v27;
      *(_QWORD *)(v86 + 8) = v85;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      v28 = v97;
    }
  }
  *v28 = v15;
  v31 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  v98 = (WTF::StringImpl *)v16;
  if (v31)
  {
    *(_DWORD *)v16 = v31;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v90, a2, v19, v20, v21, v22, v23, v24, v25);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v90, a3, v32, v33, v34, v35, v36, v37, v38);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v90, a4, v39, v40, v41, v42, v43, v44, v45);
  if (a5)
    v46 = 7;
  else
    v46 = 6;
  v47 = v91;
  if ((_DWORD)v91 == HIDWORD(v91))
  {
    if (v91 >> 30
      || (v79 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v91, 2 * (int)v91), v47 = v91, v79))
    {
      v90[0] = 1;
      goto LABEL_18;
    }
    v48 = v92;
  }
  else
  {
    v48 = v92;
    if (v92 == (_OWORD *)((char *)v93 + 8) || !v92)
    {
      *((_QWORD *)v92 + v91) = v46;
      LODWORD(v91) = ++v47;
LABEL_18:
      v49 = a6;
      goto LABEL_19;
    }
  }
  v49 = a6;
  *((_QWORD *)v48 + v47++) = v46;
  LODWORD(v91) = v47;
LABEL_19:
  if (v49)
    v50 = 7;
  else
    v50 = 6;
  if (v47 != HIDWORD(v91))
  {
    v51 = v92;
LABEL_24:
    *((_QWORD *)v51 + v47++) = v50;
    LODWORD(v91) = v47;
    goto LABEL_25;
  }
  if (!(v47 >> 30))
  {
    v80 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v91, 2 * v47);
    v47 = v91;
    if (!v80)
    {
      v51 = v92;
      goto LABEL_24;
    }
  }
  v90[0] = 1;
LABEL_25:
  if (a7)
    v52 = 7;
  else
    v52 = 6;
  if (v47 != HIDWORD(v91))
  {
    v53 = v92;
    if (v92 == (_OWORD *)((char *)v93 + 8) || !v92)
    {
      *((_QWORD *)v92 + v47) = v52;
      LODWORD(v91) = v47 + 1;
      v54 = a8;
      goto LABEL_32;
    }
    v54 = a8;
    goto LABEL_38;
  }
  v54 = a8;
  if (!(v47 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v91, 2 * v47))
  {
    v47 = v91;
    v53 = v92;
LABEL_38:
    *((_QWORD *)v53 + v47) = v52;
    LODWORD(v91) = v47 + 1;
    goto LABEL_32;
  }
  v90[0] = 1;
LABEL_32:
  Inspector::InjectedScriptBase::makeAsyncCall((_QWORD *)a1, (uint64_t)v90, v54);
  v62 = v98;
  v98 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  if (v97)
  {
    v81 = v97 - 2;
    v82 = *(_QWORD *)(((unint64_t)(v97 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v83 = (uint64_t *)*(v97 - 1);
    if (v83)
    {
      v84 = *v81;
      *v83 = *v81;
      *(_QWORD *)(v84 + 8) = v83;
      *v81 = 0;
      v81[1] = 0;
    }
    *v81 = *(_QWORD *)(v82 + 40);
    *(_QWORD *)(v82 + 40) = v81;
    v97 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v91, v55, v56, v57, v58, v59, v60, v61);
}

void Inspector::InjectedScript::evaluateOnCallFrame(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, const WTF::String *a4, const WTF::String *a5, const WTF::String *a6, int a7, int a8, char a9, char a10, WTF **a11, uint64_t a12, uint64_t a13)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  unsigned int v54;
  _OWORD *v55;
  int v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  _OWORD *v62;
  WTF::AtomStringImpl *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char v105[8];
  uint64_t v106;
  _OWORD *v107;
  _OWORD v108[4];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  WTF::StringImpl *v113;
  uint64_t v114[3];
  uint64_t v115[2];

  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(uint64_t **)(a1 + 24);
  if (v16)
    v20 = *v16;
  else
    v20 = 0;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1300000002;
  *(_QWORD *)(v21 + 8) = "evaluateOnCallFrame";
  *(_DWORD *)(v21 + 16) = 4;
  v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v105[0] = 0;
  v106 = 0x800000000;
  v107 = (_OWORD *)((char *)v108 + 8);
  v30 = 0.0;
  memset(v108, 0, sizeof(v108));
  v109 = 0;
  v110 = v17;
  v111 = v22;
  v31 = *(_QWORD *)(v17 + 56);
  v32 = *(_QWORD *)(v31 + 712);
  if (!v32)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v31 + 672), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
    v32 = *(_QWORD *)(v31 + 712);
  }
  *(_QWORD *)(v31 + 712) = *(_QWORD *)v32;
  *(_QWORD *)(v32 + 16) = 0;
  v33 = (_QWORD *)(v32 + 16);
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  v112 = (_QWORD *)(v32 + 16);
  if ((v20 != 0) != (*(_QWORD *)(v32 + 16) != 0))
  {
    if (v20)
    {
      v34 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFF000) + 0x10);
      v35 = v34[3];
      v34 += 3;
      *(_QWORD *)v32 = v35;
      *(_QWORD *)(v32 + 8) = v34;
      *v34 = v32;
      *(_QWORD *)(v35 + 8) = v32;
    }
    else
    {
      v101 = *(_QWORD *)v32;
      v100 = *(_QWORD **)(v32 + 8);
      *v100 = *(_QWORD *)v32;
      *(_QWORD *)(v101 + 8) = v100;
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      v33 = v112;
    }
  }
  *v33 = v20;
  v36 = *(_DWORD *)v21;
  *(_DWORD *)v21 += 2;
  v113 = (WTF::StringImpl *)v21;
  if (v36)
  {
    *(_DWORD *)v21 = v36;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  v37 = v106;
  if ((_DWORD)v106 == HIDWORD(v106))
  {
    if (v106 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v106, 2 * (int)v106))
    {
      v105[0] = 1;
      goto LABEL_15;
    }
    v37 = v106;
    v38 = v107;
  }
  else
  {
    v38 = v107;
    if (v107 == (_OWORD *)((char *)v108 + 8) || !v107)
    {
      *((_QWORD *)v107 + v106) = a3;
      LODWORD(v106) = v37 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v38 + v37) = a3;
  LODWORD(v106) = v37 + 1;
  if (!*(_QWORD *)&v108[0] && (a3 & 0xFFFE000000000002) == 0 && a3)
  {
    v99 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v99 = (_QWORD *)(a3 - 16);
    *(_QWORD *)&v108[0] = *v99 + 560;
    v115[0] = (uint64_t)&v106;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v108[0], v115, v25, v26, v27, v28, v29, (uint64_t)v114);
  }
LABEL_15:
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v105, a4, v24, v25, v26, v27, v28, v29, v30);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v105, a5, v39, v40, v41, v42, v43, v44, v45);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v105, a6, v46, v47, v48, v49, v50, v51, v52);
  if (a7)
    v53 = 7;
  else
    v53 = 6;
  v54 = v106;
  if ((_DWORD)v106 == HIDWORD(v106))
  {
    if (v106 >> 30
      || (v92 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v106, 2 * (int)v106), v54 = v106, v92))
    {
      v105[0] = 1;
      goto LABEL_22;
    }
    v55 = v107;
  }
  else
  {
    v55 = v107;
    if (v107 == (_OWORD *)((char *)v108 + 8) || !v107)
    {
      *((_QWORD *)v107 + v106) = v53;
      LODWORD(v106) = ++v54;
LABEL_22:
      v56 = a8;
      goto LABEL_23;
    }
  }
  v56 = a8;
  *((_QWORD *)v55 + v54++) = v53;
  LODWORD(v106) = v54;
LABEL_23:
  if (v56)
    v57 = 7;
  else
    v57 = 6;
  if (v54 != HIDWORD(v106))
  {
    v58 = v107;
LABEL_28:
    *((_QWORD *)v58 + v54++) = v57;
    LODWORD(v106) = v54;
    goto LABEL_29;
  }
  if (!(v54 >> 30))
  {
    v93 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v106, 2 * v54);
    v54 = v106;
    if (!v93)
    {
      v58 = v107;
      goto LABEL_28;
    }
  }
  v105[0] = 1;
LABEL_29:
  if (a9)
    v59 = 7;
  else
    v59 = 6;
  if (v54 != HIDWORD(v106))
  {
    v60 = v107;
LABEL_34:
    *((_QWORD *)v60 + v54++) = v59;
    LODWORD(v106) = v54;
    goto LABEL_35;
  }
  if (!(v54 >> 30))
  {
    v94 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v106, 2 * v54);
    v54 = v106;
    if (!v94)
    {
      v60 = v107;
      goto LABEL_34;
    }
  }
  v105[0] = 1;
LABEL_35:
  if (a10)
    v61 = 7;
  else
    v61 = 6;
  if (v54 != HIDWORD(v106))
  {
    v62 = v107;
    if (v107 == (_OWORD *)((char *)v108 + 8) || !v107)
    {
      *((_QWORD *)v107 + v54) = v61;
      LODWORD(v106) = v54 + 1;
      v63 = a2;
      goto LABEL_42;
    }
    v63 = a2;
    goto LABEL_51;
  }
  v63 = a2;
  if (!(v54 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v106, 2 * v54))
  {
    v54 = v106;
    v62 = v107;
LABEL_51:
    *((_QWORD *)v62 + v54) = v61;
    LODWORD(v106) = v54 + 1;
    goto LABEL_42;
  }
  v105[0] = 1;
LABEL_42:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v105, v115);
  v64 = (WTF *)v115[0];
  v114[0] = v115[0];
  Inspector::InjectedScriptBase::checkCallResult(v65, v63, v114, a11, a12, a13, v66, v67);
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v64;
  }
  v75 = v113;
  v113 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  if (v112)
  {
    v95 = v112 - 2;
    v96 = *(_QWORD *)(((unint64_t)(v112 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v97 = (uint64_t *)*(v112 - 1);
    if (v97)
    {
      v98 = *v95;
      *v97 = *v95;
      *(_QWORD *)(v98 + 8) = v97;
      *v95 = 0;
      v95[1] = 0;
    }
    *v95 = *(_QWORD *)(v96 + 40);
    *(_QWORD *)(v96 + 40) = v95;
    v112 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v106, v68, v69, v70, v71, v72, v73, v74);
}

void Inspector::InjectedScript::getFunctionDetails(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, WTF **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  WTF *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  WTF *v80;
  char v81[8];
  _QWORD v82[13];
  _QWORD *v83;
  WTF::StringImpl *v84;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x1200000002;
  *(_QWORD *)(v11 + 8) = "getFunctionDetails";
  *(_DWORD *)(v11 + 16) = 4;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v81[0] = 0;
  v82[0] = 0x800000000;
  v82[1] = &v82[3];
  v20 = 0.0;
  memset(&v82[2], 0, 72);
  v82[11] = v9;
  v82[12] = v12;
  v21 = *(_QWORD *)(v9 + 56);
  v22 = *(_QWORD *)(v21 + 712);
  if (!v22)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v21 + 672), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v22 = *(_QWORD *)(v21 + 712);
  }
  *(_QWORD *)(v21 + 712) = *(_QWORD *)v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  v83 = (_QWORD *)(v22 + 16);
  if ((v10 != 0) != (*(_QWORD *)(v22 + 16) != 0))
  {
    if (v10)
    {
      v24 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
      *v24 = v22;
      *(_QWORD *)(v25 + 8) = v22;
    }
    else
    {
      v79 = *(_QWORD *)v22;
      v78 = *(_QWORD **)(v22 + 8);
      *v78 = *(_QWORD *)v22;
      *(_QWORD *)(v79 + 8) = v78;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = v83;
    }
  }
  *v23 = v10;
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v84 = (WTF::StringImpl *)v11;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v81, a3, v14, v15, v16, v17, v18, v19, v20);
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v81, &v80);
  v34 = v80;
  if (v80)
  {
    v35 = *((_DWORD *)v80 + 1);
    if (v35 == 5)
    {
      ++*(_DWORD *)v80;
      v36 = *a4;
      *a4 = v34;
      if (!v36)
        goto LABEL_29;
      v37 = *(_DWORD *)v36 - 1;
      if (*(_DWORD *)v36 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v36, v27, v28, v29, v30, v31, v32, v33);
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v35 = MEMORY[4];
  }
  if (v35 == 4)
  {
    v38 = (WTF::StringImpl *)*((_QWORD *)v80 + 1);
    if (v38)
      *(_DWORD *)v38 += 2;
  }
  else
  {
    v38 = 0;
  }
  v39 = *a2;
  *a2 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    v38 = *a2;
  }
  if (!v38)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0xE00000002;
    *(_QWORD *)(v40 + 8) = "Internal error";
    *(_DWORD *)(v40 + 16) = 4;
    v36 = *a2;
    *a2 = (WTF::StringImpl *)v40;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2)
      {
LABEL_28:
        *(_DWORD *)v36 = v37;
        goto LABEL_29;
      }
      WTF::StringImpl::~StringImpl(v36, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
  }
LABEL_29:
  if (*(_DWORD *)v34 == 1)
    WTF::JSONImpl::Value::operator delete(v34, v27, v28, v29, v30, v31, v32, v33);
  else
    --*(_DWORD *)v34;
  v41 = v84;
  v84 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  if (v83)
  {
    v74 = v83 - 2;
    v75 = *(_QWORD *)(((unint64_t)(v83 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v76 = (uint64_t *)*(v83 - 1);
    if (v76)
    {
      v77 = *v74;
      *v76 = *v74;
      *(_QWORD *)(v77 + 8) = v76;
      *v74 = 0;
      v74[1] = 0;
    }
    *v74 = *(_QWORD *)(v75 + 40);
    *(_QWORD *)(v75 + 40) = v74;
    v83 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v82, v27, v28, v29, v30, v31, v32, v33);
}

void Inspector::InjectedScriptBase::makeCall(_QWORD *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  JSC::JSGlobalObject *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  unint64_t v23;
  int *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int *v49;
  _QWORD *v50;
  int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  int v62;
  int *v63;

  v4 = (_QWORD *)a1[3];
  if (!v4)
    goto LABEL_19;
  if (!*v4)
    goto LABEL_19;
  v6 = a1[4];
  if (!v6 || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, a1[2]) & 1) == 0)
    goto LABEL_19;
  v15 = (JSC::JSGlobalObject *)a1[2];
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)a1, a2, v8, v9, v10, v11, v12, v13, (uint64_t)&v61, v14);
  if (!v62)
  {
    v35 = v61;
    if (v61)
    {
      JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v63, v15, (uint64_t)v16, v17, v18, v19, v20, v21, *(double *)v22.i64);
      Inspector::jsToInspectorValue((uint64_t *)&v60, v15, v35, 1000, v36, v37, v38, v39, v40);
      JSC::JSLockHolder::~JSLockHolder((unsigned int **)&v63, v41, v42, v43, v44, v45, v46, v47);
      v32 = v60;
      if (v60)
        goto LABEL_18;
      WTF::tryFastCompactMalloc((WTF *)0x56, &v63);
      v49 = v63;
      if (v63)
      {
        *(_QWORD *)v63 = 0x4200000002;
        qmemcpy(v49 + 5, "Object has too long reference chain (must not be longer than 1000)", 66);
        *((_QWORD *)v49 + 1) = v49 + 5;
        v49[4] = 4;
        v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v50 = 0x400000001;
        v50[1] = v49;
        v51 = *v49;
        *v49 += 2;
        *a3 = v50;
        if (v51)
        {
          *v49 = v51;
          return;
        }
        v33 = (WTF::StringImpl *)v49;
        goto LABEL_27;
      }
      goto LABEL_29;
    }
LABEL_19:
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v48 = 1;
    *a3 = v48;
    return;
  }
  if (v62 == 1)
  {
    v23 = *(_QWORD *)(v61 + 8);
    v60 = (_QWORD *)v23;
    if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v60, v15, v16, v17, v18, v19, v20, v21, &v63);
LABEL_13:
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = 0x400000001;
      v33 = (WTF::StringImpl *)v63;
      v32[1] = v63;
      if (v33)
      {
        v34 = *(_DWORD *)v33;
        *(_DWORD *)v33 += 2;
        *a3 = v32;
        v63 = 0;
        if (v34)
        {
          *(_DWORD *)v33 = v34;
          return;
        }
LABEL_27:
        WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        return;
      }
LABEL_18:
      *a3 = v32;
      return;
    }
    v24 = *(int **)(v23 + 8);
    if ((v24 & 1) != 0)
    {
      v24 = *JSC::JSRopeString::resolveRope(v23, v15, (uint64_t)v16, v17, v22, v18, v19, v20, v21);
      if (!v24)
        goto LABEL_12;
    }
    else if (!v24)
    {
LABEL_12:
      v63 = v24;
      goto LABEL_13;
    }
    *v24 += 2;
    goto LABEL_12;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
  __break(0xC471u);
}

void Inspector::InjectedScript::functionDetails(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, WTF **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  _OWORD *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  WTF *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  _OWORD *v84;
  _OWORD v85[4];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  WTF::StringImpl *v90;
  _QWORD v91[3];
  uint64_t *v92;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0xF00000002;
  *(_QWORD *)(v11 + 8) = "functionDetails";
  *(_DWORD *)(v11 + 16) = 4;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v82[0] = 0;
  v83 = 0x800000000;
  v84 = (_OWORD *)((char *)v85 + 8);
  memset(v85, 0, sizeof(v85));
  v86 = 0;
  v87 = v9;
  v88 = v12;
  v20 = *(_QWORD *)(v9 + 56);
  v21 = *(_QWORD *)(v20 + 712);
  if (!v21)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v20 + 672), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v21 = *(_QWORD *)(v20 + 712);
  }
  *(_QWORD *)(v20 + 712) = *(_QWORD *)v21;
  *(_QWORD *)(v21 + 16) = 0;
  v22 = (_QWORD *)(v21 + 16);
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  v89 = (_QWORD *)(v21 + 16);
  if ((v10 != 0) != (*(_QWORD *)(v21 + 16) != 0))
  {
    if (v10)
    {
      v23 = *(unint64_t **)((v21 & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = v23[3];
      v23 += 3;
      *(_QWORD *)v21 = v24;
      *(_QWORD *)(v21 + 8) = v23;
      *v23 = v21;
      *(_QWORD *)(v24 + 8) = v21;
    }
    else
    {
      v81 = *(_QWORD *)v21;
      v80 = *(_QWORD **)(v21 + 8);
      *v80 = *(_QWORD *)v21;
      *(_QWORD *)(v81 + 8) = v80;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v22 = v89;
    }
  }
  *v22 = v10;
  v25 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v90 = (WTF::StringImpl *)v11;
  if (v25)
  {
    *(_DWORD *)v11 = v25;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
  }
  v26 = v83;
  if ((_DWORD)v83 == HIDWORD(v83))
  {
    if (v83 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v83, 2 * (int)v83))
    {
      v82[0] = 1;
      goto LABEL_15;
    }
    v26 = v83;
    v27 = v84;
  }
  else
  {
    v27 = v84;
    if (v84 == (_OWORD *)((char *)v85 + 8) || !v84)
    {
      *((_QWORD *)v84 + v83) = a3;
      LODWORD(v83) = v26 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v27 + v26) = a3;
  LODWORD(v83) = v26 + 1;
  if (!*(_QWORD *)&v85[0] && (a3 & 0xFFFE000000000002) == 0 && a3)
  {
    if ((a3 & 8) != 0)
      v79 = (_QWORD *)(a3 - 16);
    else
      v79 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v85[0] = *v79 + 560;
    v92 = &v83;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v85[0], (uint64_t *)&v92, v15, v16, v17, v18, v19, (uint64_t)v91);
  }
LABEL_15:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v82, v91);
  v35 = (WTF *)v91[0];
  if (v91[0])
  {
    v36 = *(_DWORD *)(v91[0] + 4);
    if (v36 == 5)
    {
      ++*(_DWORD *)v91[0];
      v37 = *a4;
      *a4 = v35;
      if (!v37)
        goto LABEL_33;
      v38 = *(_DWORD *)v37 - 1;
      if (*(_DWORD *)v37 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v37, v28, v29, v30, v31, v32, v33, v34);
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  else
  {
    v36 = MEMORY[4];
  }
  if (v36 == 4)
  {
    v39 = *(WTF::StringImpl **)(v91[0] + 8);
    if (v39)
      *(_DWORD *)v39 += 2;
  }
  else
  {
    v39 = 0;
  }
  v40 = *a2;
  *a2 = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    v39 = *a2;
  }
  if (!v39)
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v41 = 0xE00000002;
    *(_QWORD *)(v41 + 8) = "Internal error";
    *(_DWORD *)(v41 + 16) = 4;
    v37 = *a2;
    *a2 = (WTF::StringImpl *)v41;
    if (v37)
    {
      v38 = *(_DWORD *)v37 - 2;
      if (*(_DWORD *)v37 != 2)
      {
LABEL_32:
        *(_DWORD *)v37 = v38;
        goto LABEL_33;
      }
      WTF::StringImpl::~StringImpl(v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
  }
LABEL_33:
  if (*(_DWORD *)v35 == 1)
    WTF::JSONImpl::Value::operator delete(v35, v28, v29, v30, v31, v32, v33, v34);
  else
    --*(_DWORD *)v35;
  v42 = v90;
  v90 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  if (v89)
  {
    v75 = v89 - 2;
    v76 = *(_QWORD *)(((unint64_t)(v89 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v77 = (uint64_t *)*(v89 - 1);
    if (v77)
    {
      v78 = *v75;
      *v77 = *v75;
      *(_QWORD *)(v78 + 8) = v77;
      *v75 = 0;
      v75[1] = 0;
    }
    *v75 = *(_QWORD *)(v76 + 40);
    *(_QWORD *)(v76 + 40) = v75;
    v89 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v83, v28, v29, v30, v31, v32, v33, v34);
}

void Inspector::InjectedScript::getPreview(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, WTF **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  WTF *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  WTF *v80;
  char v81[8];
  _QWORD v82[13];
  _QWORD *v83;
  WTF::StringImpl *v84;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0xA00000002;
  *(_QWORD *)(v11 + 8) = "getPreview";
  *(_DWORD *)(v11 + 16) = 4;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v81[0] = 0;
  v82[0] = 0x800000000;
  v82[1] = &v82[3];
  v20 = 0.0;
  memset(&v82[2], 0, 72);
  v82[11] = v9;
  v82[12] = v12;
  v21 = *(_QWORD *)(v9 + 56);
  v22 = *(_QWORD *)(v21 + 712);
  if (!v22)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v21 + 672), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v22 = *(_QWORD *)(v21 + 712);
  }
  *(_QWORD *)(v21 + 712) = *(_QWORD *)v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  v83 = (_QWORD *)(v22 + 16);
  if ((v10 != 0) != (*(_QWORD *)(v22 + 16) != 0))
  {
    if (v10)
    {
      v24 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
      *v24 = v22;
      *(_QWORD *)(v25 + 8) = v22;
    }
    else
    {
      v79 = *(_QWORD *)v22;
      v78 = *(_QWORD **)(v22 + 8);
      *v78 = *(_QWORD *)v22;
      *(_QWORD *)(v79 + 8) = v78;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = v83;
    }
  }
  *v23 = v10;
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v84 = (WTF::StringImpl *)v11;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v81, a3, v14, v15, v16, v17, v18, v19, v20);
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v81, &v80);
  v34 = v80;
  if (v80)
  {
    v35 = *((_DWORD *)v80 + 1);
    if (v35 == 5)
    {
      ++*(_DWORD *)v80;
      v36 = *a4;
      *a4 = v34;
      if (!v36)
        goto LABEL_29;
      v37 = *(_DWORD *)v36 - 1;
      if (*(_DWORD *)v36 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v36, v27, v28, v29, v30, v31, v32, v33);
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v35 = MEMORY[4];
  }
  if (v35 == 4)
  {
    v38 = (WTF::StringImpl *)*((_QWORD *)v80 + 1);
    if (v38)
      *(_DWORD *)v38 += 2;
  }
  else
  {
    v38 = 0;
  }
  v39 = *a2;
  *a2 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    v38 = *a2;
  }
  if (!v38)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0xE00000002;
    *(_QWORD *)(v40 + 8) = "Internal error";
    *(_DWORD *)(v40 + 16) = 4;
    v36 = *a2;
    *a2 = (WTF::StringImpl *)v40;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 != 2)
      {
LABEL_28:
        *(_DWORD *)v36 = v37;
        goto LABEL_29;
      }
      WTF::StringImpl::~StringImpl(v36, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
  }
LABEL_29:
  if (*(_DWORD *)v34 == 1)
    WTF::JSONImpl::Value::operator delete(v34, v27, v28, v29, v30, v31, v32, v33);
  else
    --*(_DWORD *)v34;
  v41 = v84;
  v84 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  if (v83)
  {
    v74 = v83 - 2;
    v75 = *(_QWORD *)(((unint64_t)(v83 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v76 = (uint64_t *)*(v83 - 1);
    if (v76)
    {
      v77 = *v74;
      *v76 = *v74;
      *(_QWORD *)(v77 + 8) = v76;
      *v74 = 0;
      v74[1] = 0;
    }
    *v74 = *(_QWORD *)(v75 + 40);
    *(_QWORD *)(v75 + 40) = v74;
    v83 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v82, v27, v28, v29, v30, v31, v32, v33);
}

void Inspector::InjectedScript::getProperties(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, int a4, unsigned int a5, unsigned int a6, int a7, WTF **a8)
{
  uint64_t *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unsigned int v40;
  _OWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _OWORD *v51;
  JSC::JSLockHolder *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  _OWORD *v69;
  uint64_t v70;
  unsigned int v71;
  _OWORD *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char v118[8];
  uint64_t v119;
  _OWORD *v120;
  _OWORD v121[4];
  uint64_t v122;
  JSC::JSGlobalObject *v123;
  uint64_t v124;
  _QWORD *v125;
  WTF::StringImpl *v126;
  unsigned int *v127[2];

  v14 = *(JSC::JSGlobalObject **)(a1 + 16);
  v13 = *(uint64_t **)(a1 + 24);
  if (v13)
    v15 = *v13;
  else
    v15 = 0;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0xD00000002;
  *(_QWORD *)(v16 + 8) = "getProperties";
  *(_DWORD *)(v16 + 16) = 4;
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v118[0] = 0;
  v119 = 0x800000000;
  v120 = (_OWORD *)((char *)v121 + 8);
  v25 = 0.0;
  memset(v121, 0, sizeof(v121));
  v122 = 0;
  v123 = v14;
  v124 = v17;
  v26 = *((_QWORD *)v14 + 7);
  v27 = *(_QWORD *)(v26 + 712);
  if (!v27)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v26 + 672), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    v27 = *(_QWORD *)(v26 + 712);
  }
  *(_QWORD *)(v26 + 712) = *(_QWORD *)v27;
  *(_QWORD *)(v27 + 16) = 0;
  v28 = (_QWORD *)(v27 + 16);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  v125 = (_QWORD *)(v27 + 16);
  if ((v15 != 0) != (*(_QWORD *)(v27 + 16) != 0))
  {
    if (v15)
    {
      v29 = *(unint64_t **)((v27 & 0xFFFFFFFFFFFFF000) + 0x10);
      v30 = v29[3];
      v29 += 3;
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
      *v29 = v27;
      *(_QWORD *)(v30 + 8) = v27;
    }
    else
    {
      v114 = *(_QWORD *)v27;
      v113 = *(_QWORD **)(v27 + 8);
      *v113 = *(_QWORD *)v27;
      *(_QWORD *)(v114 + 8) = v113;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      v28 = v125;
    }
  }
  *v28 = v15;
  v31 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  v126 = (WTF::StringImpl *)v16;
  if (v31)
  {
    *(_DWORD *)v16 = v31;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v118, a3, v19, v20, v21, v22, v23, v24, v25);
  if (a4)
    v39 = 7;
  else
    v39 = 6;
  v40 = v119;
  if ((_DWORD)v119 != HIDWORD(v119))
  {
    v41 = v120;
    if (v120 == (_OWORD *)((char *)v121 + 8) || !v120)
    {
      *((_QWORD *)v120 + v119) = v39;
LABEL_18:
      LODWORD(v119) = v40 + 1;
      goto LABEL_19;
    }
LABEL_74:
    *((_QWORD *)v41 + v40) = v39;
    goto LABEL_18;
  }
  if (!(v119 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v119, 2 * (int)v119))
  {
    v40 = v119;
    v41 = v120;
    goto LABEL_74;
  }
  v118[0] = 1;
LABEL_19:
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v127, v123, v32, v33, v34, v35, v36, v37, v38);
  v49 = a5 | 0xFFFE000000000000;
  v50 = v119;
  if ((_DWORD)v119 != HIDWORD(v119))
  {
    v51 = v120;
    if (v120 == (_OWORD *)((char *)v121 + 8) || !v120)
    {
      *((_QWORD *)v120 + v119) = v49;
LABEL_23:
      LODWORD(v119) = v50 + 1;
      goto LABEL_24;
    }
LABEL_76:
    *((_QWORD *)v51 + v50) = v49;
    goto LABEL_23;
  }
  if (!(v119 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v119, 2 * (int)v119))
  {
    v50 = v119;
    v51 = v120;
    goto LABEL_76;
  }
  v118[0] = 1;
LABEL_24:
  JSC::JSLockHolder::~JSLockHolder(v127, v42, v43, v44, v45, v46, v47, v48);
  JSC::JSLockHolder::JSLockHolder(v52, v123, v53, v54, v55, v56, v57, v58, v59);
  v67 = a6 | 0xFFFE000000000000;
  v68 = v119;
  if ((_DWORD)v119 != HIDWORD(v119))
  {
    v69 = v120;
    if (v120 == (_OWORD *)((char *)v121 + 8) || !v120)
    {
      *((_QWORD *)v120 + v119) = v67;
LABEL_28:
      LODWORD(v119) = v68 + 1;
      goto LABEL_29;
    }
LABEL_78:
    *((_QWORD *)v69 + v68) = v67;
    goto LABEL_28;
  }
  if (!(v119 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v119, 2 * (int)v119))
  {
    v68 = v119;
    v69 = v120;
    goto LABEL_78;
  }
  v118[0] = 1;
LABEL_29:
  JSC::JSLockHolder::~JSLockHolder(v127, v60, v61, v62, v63, v64, v65, v66);
  if (a7)
    v70 = 7;
  else
    v70 = 6;
  v71 = v119;
  if ((_DWORD)v119 == HIDWORD(v119))
  {
    if (v119 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v119, 2 * (int)v119))
    {
      v118[0] = 1;
      goto LABEL_37;
    }
    v71 = v119;
    v72 = v120;
    goto LABEL_80;
  }
  v72 = v120;
  if (v120 != (_OWORD *)((char *)v121 + 8) && v120)
  {
LABEL_80:
    *((_QWORD *)v72 + v71) = v70;
    goto LABEL_36;
  }
  *((_QWORD *)v120 + v119) = v70;
LABEL_36:
  LODWORD(v119) = v71 + 1;
LABEL_37:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v118, v127);
  v80 = (WTF *)v127[0];
  if (v127[0] && v127[0][1] == 6)
  {
    ++*v127[0];
    v81 = *a8;
    *a8 = v80;
    if (v81)
    {
      if (*(_DWORD *)v81 == 1)
        WTF::JSONImpl::Value::operator delete(v81, v73, v74, v75, v76, v77, v78, v79);
      else
        --*(_DWORD *)v81;
    }
LABEL_46:
    if (*(_DWORD *)v80 == 1)
      WTF::JSONImpl::Value::operator delete(v80, v73, v74, v75, v76, v77, v78, v79);
    else
      --*(_DWORD *)v80;
    goto LABEL_48;
  }
  v82 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v82 = 0xE00000002;
  *(_QWORD *)(v82 + 8) = "Internal error";
  *(_DWORD *)(v82 + 16) = 4;
  v83 = *a2;
  *a2 = (WTF::StringImpl *)v82;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  if (v80)
    goto LABEL_46;
LABEL_48:
  v84 = v126;
  v126 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  if (v125)
  {
    v109 = v125 - 2;
    v110 = *(_QWORD *)(((unint64_t)(v125 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v111 = (uint64_t *)*(v125 - 1);
    if (v111)
    {
      v112 = *v109;
      *v111 = *v109;
      *(_QWORD *)(v112 + 8) = v111;
      *v109 = 0;
      v109[1] = 0;
    }
    *v109 = *(_QWORD *)(v110 + 40);
    *(_QWORD *)(v110 + 40) = v109;
    v125 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v119, v73, v74, v75, v76, v77, v78, v79);
}

void Inspector::InjectedScript::getDisplayableProperties(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, unsigned int a4, unsigned int a5, int a6, WTF **a7)
{
  uint64_t *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  _OWORD *v47;
  JSC::JSLockHolder *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  _OWORD *v65;
  uint64_t v66;
  unsigned int v67;
  _OWORD *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char v113[8];
  uint64_t v114;
  _OWORD *v115;
  _OWORD v116[4];
  uint64_t v117;
  JSC::JSGlobalObject *v118;
  uint64_t v119;
  _QWORD *v120;
  WTF::StringImpl *v121;
  unsigned int *v122[2];

  v13 = *(JSC::JSGlobalObject **)(a1 + 16);
  v12 = *(uint64_t **)(a1 + 24);
  if (v12)
    v14 = *v12;
  else
    v14 = 0;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x1800000002;
  *(_QWORD *)(v15 + 8) = "getDisplayableProperties";
  *(_DWORD *)(v15 + 16) = 4;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v113[0] = 0;
  v114 = 0x800000000;
  v115 = (_OWORD *)((char *)v116 + 8);
  v24 = 0.0;
  memset(v116, 0, sizeof(v116));
  v117 = 0;
  v118 = v13;
  v119 = v16;
  v25 = *((_QWORD *)v13 + 7);
  v26 = *(_QWORD *)(v25 + 712);
  if (!v26)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v25 + 672), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    v26 = *(_QWORD *)(v25 + 712);
  }
  *(_QWORD *)(v25 + 712) = *(_QWORD *)v26;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = (_QWORD *)(v26 + 16);
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  v120 = (_QWORD *)(v26 + 16);
  if ((v14 != 0) != (*(_QWORD *)(v26 + 16) != 0))
  {
    if (v14)
    {
      v28 = *(unint64_t **)((v26 & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(_QWORD *)v26 = v29;
      *(_QWORD *)(v26 + 8) = v28;
      *v28 = v26;
      *(_QWORD *)(v29 + 8) = v26;
    }
    else
    {
      v110 = *(_QWORD *)v26;
      v109 = *(_QWORD **)(v26 + 8);
      *v109 = *(_QWORD *)v26;
      *(_QWORD *)(v110 + 8) = v109;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = v120;
    }
  }
  *v27 = v14;
  v30 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  v121 = (WTF::StringImpl *)v15;
  if (v30)
  {
    *(_DWORD *)v15 = v30;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v113, a3, v18, v19, v20, v21, v22, v23, v24);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v122, v118, v31, v32, v33, v34, v35, v36, v37);
  v45 = a4 | 0xFFFE000000000000;
  v46 = v114;
  if ((_DWORD)v114 != HIDWORD(v114))
  {
    v47 = v115;
    if (v115 == (_OWORD *)((char *)v116 + 8) || !v115)
    {
      *((_QWORD *)v115 + v114) = v45;
LABEL_15:
      LODWORD(v114) = v46 + 1;
      goto LABEL_16;
    }
LABEL_63:
    *((_QWORD *)v47 + v46) = v45;
    goto LABEL_15;
  }
  if (!(v114 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v114, 2 * (int)v114))
  {
    v46 = v114;
    v47 = v115;
    goto LABEL_63;
  }
  v113[0] = 1;
LABEL_16:
  JSC::JSLockHolder::~JSLockHolder(v122, v38, v39, v40, v41, v42, v43, v44);
  JSC::JSLockHolder::JSLockHolder(v48, v118, v49, v50, v51, v52, v53, v54, v55);
  v63 = a5 | 0xFFFE000000000000;
  v64 = v114;
  if ((_DWORD)v114 != HIDWORD(v114))
  {
    v65 = v115;
    if (v115 == (_OWORD *)((char *)v116 + 8) || !v115)
    {
      *((_QWORD *)v115 + v114) = v63;
LABEL_20:
      LODWORD(v114) = v64 + 1;
      goto LABEL_21;
    }
LABEL_65:
    *((_QWORD *)v65 + v64) = v63;
    goto LABEL_20;
  }
  if (!(v114 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v114, 2 * (int)v114))
  {
    v64 = v114;
    v65 = v115;
    goto LABEL_65;
  }
  v113[0] = 1;
LABEL_21:
  JSC::JSLockHolder::~JSLockHolder(v122, v56, v57, v58, v59, v60, v61, v62);
  if (a6)
    v66 = 7;
  else
    v66 = 6;
  v67 = v114;
  if ((_DWORD)v114 == HIDWORD(v114))
  {
    if (v114 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v114, 2 * (int)v114))
    {
      v113[0] = 1;
      goto LABEL_29;
    }
    v67 = v114;
    v68 = v115;
    goto LABEL_67;
  }
  v68 = v115;
  if (v115 != (_OWORD *)((char *)v116 + 8) && v115)
  {
LABEL_67:
    *((_QWORD *)v68 + v67) = v66;
    goto LABEL_28;
  }
  *((_QWORD *)v115 + v114) = v66;
LABEL_28:
  LODWORD(v114) = v67 + 1;
LABEL_29:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v113, v122);
  v76 = (WTF *)v122[0];
  if (v122[0] && v122[0][1] == 6)
  {
    ++*v122[0];
    v77 = *a7;
    *a7 = v76;
    if (v77)
    {
      if (*(_DWORD *)v77 == 1)
        WTF::JSONImpl::Value::operator delete(v77, v69, v70, v71, v72, v73, v74, v75);
      else
        --*(_DWORD *)v77;
    }
LABEL_38:
    if (*(_DWORD *)v76 == 1)
      WTF::JSONImpl::Value::operator delete(v76, v69, v70, v71, v72, v73, v74, v75);
    else
      --*(_DWORD *)v76;
    goto LABEL_40;
  }
  v78 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v78 = 0xE00000002;
  *(_QWORD *)(v78 + 8) = "Internal error";
  *(_DWORD *)(v78 + 16) = 4;
  v79 = *a2;
  *a2 = (WTF::StringImpl *)v78;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (v76)
    goto LABEL_38;
LABEL_40:
  v80 = v121;
  v121 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  if (v120)
  {
    v105 = v120 - 2;
    v106 = *(_QWORD *)(((unint64_t)(v120 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v107 = (uint64_t *)*(v120 - 1);
    if (v107)
    {
      v108 = *v105;
      *v107 = *v105;
      *(_QWORD *)(v108 + 8) = v107;
      *v105 = 0;
      v105[1] = 0;
    }
    *v105 = *(_QWORD *)(v106 + 40);
    *(_QWORD *)(v106 + 40) = v105;
    v120 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v114, v69, v70, v71, v72, v73, v74, v75);
}

void Inspector::InjectedScript::getInternalProperties(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, int a4, WTF **a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  WTF *v75;
  char v76[8];
  uint64_t v77;
  _OWORD *v78;
  _OWORD v79[4];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  WTF::StringImpl *v84;

  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(uint64_t **)(a1 + 24);
  if (v10)
    v12 = *v10;
  else
    v12 = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1500000002;
  *(_QWORD *)(v13 + 8) = "getInternalProperties";
  *(_DWORD *)(v13 + 16) = 4;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v76[0] = 0;
  v77 = 0x800000000;
  v78 = (_OWORD *)((char *)v79 + 8);
  v22 = 0.0;
  memset(v79, 0, sizeof(v79));
  v80 = 0;
  v81 = v11;
  v82 = v14;
  v23 = *(_QWORD *)(v11 + 56);
  v24 = *(_QWORD *)(v23 + 712);
  if (!v24)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v23 + 672), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
    v24 = *(_QWORD *)(v23 + 712);
  }
  *(_QWORD *)(v23 + 712) = *(_QWORD *)v24;
  *(_QWORD *)(v24 + 16) = 0;
  v25 = (_QWORD *)(v24 + 16);
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  v83 = (_QWORD *)(v24 + 16);
  if ((v12 != 0) != (*(_QWORD *)(v24 + 16) != 0))
  {
    if (v12)
    {
      v26 = *(unint64_t **)((v24 & 0xFFFFFFFFFFFFF000) + 0x10);
      v27 = v26[3];
      v26 += 3;
      *(_QWORD *)v24 = v27;
      *(_QWORD *)(v24 + 8) = v26;
      *v26 = v24;
      *(_QWORD *)(v27 + 8) = v24;
    }
    else
    {
      v74 = *(_QWORD *)v24;
      v73 = *(_QWORD **)(v24 + 8);
      *v73 = *(_QWORD *)v24;
      *(_QWORD *)(v74 + 8) = v73;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      v25 = v83;
    }
  }
  *v25 = v12;
  v28 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 2;
  v84 = (WTF::StringImpl *)v13;
  if (v28)
  {
    *(_DWORD *)v13 = v28;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v76, a3, v16, v17, v18, v19, v20, v21, v22);
  if (a4)
    v29 = 7;
  else
    v29 = 6;
  v30 = v77;
  if ((_DWORD)v77 == HIDWORD(v77))
  {
    if (v77 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v77, 2 * (int)v77))
    {
      v76[0] = 1;
      goto LABEL_19;
    }
    v30 = v77;
    v31 = v78;
    goto LABEL_51;
  }
  v31 = v78;
  if (v78 != (_OWORD *)((char *)v79 + 8) && v78)
  {
LABEL_51:
    *((_QWORD *)v31 + v30) = v29;
    goto LABEL_18;
  }
  *((_QWORD *)v78 + v77) = v29;
LABEL_18:
  LODWORD(v77) = v30 + 1;
LABEL_19:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v76, &v75);
  v39 = v75;
  if (v75 && *((_DWORD *)v75 + 1) == 6)
  {
    v40 = (*(_DWORD *)v75)++;
    if (v40)
      *(_DWORD *)v39 = v40;
    else
      WTF::JSONImpl::Value::operator delete(v39, v32, v33, v34, v35, v36, v37, v38);
    if (*((_DWORD *)v39 + 7))
    {
      v41 = *a5;
      *a5 = v39;
      if (!v41)
        goto LABEL_33;
      if (*(_DWORD *)v41 != 1)
      {
        --*(_DWORD *)v41;
        goto LABEL_33;
      }
LABEL_41:
      WTF::JSONImpl::Value::operator delete(v41, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_33;
    }
LABEL_31:
    if (*(_DWORD *)v39 != 1)
    {
      --*(_DWORD *)v39;
      goto LABEL_33;
    }
    v41 = v39;
    goto LABEL_41;
  }
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xE00000002;
  *(_QWORD *)(v42 + 8) = "Internal error";
  *(_DWORD *)(v42 + 16) = 4;
  v43 = *a2;
  *a2 = (WTF::StringImpl *)v42;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  if (v39)
    goto LABEL_31;
LABEL_33:
  v44 = v84;
  v84 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (v83)
  {
    v69 = v83 - 2;
    v70 = *(_QWORD *)(((unint64_t)(v83 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v71 = (uint64_t *)*(v83 - 1);
    if (v71)
    {
      v72 = *v69;
      *v71 = *v69;
      *(_QWORD *)(v72 + 8) = v71;
      *v69 = 0;
      v69[1] = 0;
    }
    *v69 = *(_QWORD *)(v70 + 40);
    *(_QWORD *)(v70 + 40) = v69;
    v83 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v77, v32, v33, v34, v35, v36, v37, v38);
}

void Inspector::InjectedScript::getCollectionEntries(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, const WTF::String *a4, unsigned int a5, unsigned int a6, WTF **a7)
{
  uint64_t *v12;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  _OWORD *v54;
  JSC::JSLockHolder *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  _OWORD *v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char v117[8];
  uint64_t v118;
  _OWORD *v119;
  _OWORD v120[4];
  uint64_t v121;
  JSC::JSGlobalObject *v122;
  uint64_t v123;
  _QWORD *v124;
  WTF::StringImpl *v125;
  unsigned int *v126[2];

  v13 = *(JSC::JSGlobalObject **)(a1 + 16);
  v12 = *(uint64_t **)(a1 + 24);
  if (v12)
    v14 = *v12;
  else
    v14 = 0;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x1400000002;
  *(_QWORD *)(v15 + 8) = "getCollectionEntries";
  *(_DWORD *)(v15 + 16) = 4;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v117[0] = 0;
  v118 = 0x800000000;
  v119 = (_OWORD *)((char *)v120 + 8);
  v24 = 0.0;
  memset(v120, 0, sizeof(v120));
  v121 = 0;
  v122 = v13;
  v123 = v16;
  v25 = *((_QWORD *)v13 + 7);
  v26 = *(_QWORD *)(v25 + 712);
  if (!v26)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v25 + 672), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    v26 = *(_QWORD *)(v25 + 712);
  }
  *(_QWORD *)(v25 + 712) = *(_QWORD *)v26;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = (_QWORD *)(v26 + 16);
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  v124 = (_QWORD *)(v26 + 16);
  if ((v14 != 0) != (*(_QWORD *)(v26 + 16) != 0))
  {
    if (v14)
    {
      v28 = *(unint64_t **)((v26 & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(_QWORD *)v26 = v29;
      *(_QWORD *)(v26 + 8) = v28;
      *v28 = v26;
      *(_QWORD *)(v29 + 8) = v26;
    }
    else
    {
      v114 = *(_QWORD *)v26;
      v113 = *(_QWORD **)(v26 + 8);
      *v113 = *(_QWORD *)v26;
      *(_QWORD *)(v114 + 8) = v113;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = v124;
    }
  }
  *v27 = v14;
  v30 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  v125 = (WTF::StringImpl *)v15;
  if (v30)
  {
    *(_DWORD *)v15 = v30;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v117, a3, v18, v19, v20, v21, v22, v23, v24);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v117, a4, v31, v32, v33, v34, v35, v36, v37);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v126, v122, v38, v39, v40, v41, v42, v43, v44);
  v52 = a5 | 0xFFFE000000000000;
  v53 = v118;
  if ((_DWORD)v118 != HIDWORD(v118))
  {
    v54 = v119;
    if (v119 == (_OWORD *)((char *)v120 + 8) || !v119)
    {
      *((_QWORD *)v119 + v118) = v52;
LABEL_15:
      LODWORD(v118) = v53 + 1;
      goto LABEL_16;
    }
LABEL_52:
    *((_QWORD *)v54 + v53) = v52;
    goto LABEL_15;
  }
  if (!(v118 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * (int)v118))
  {
    v53 = v118;
    v54 = v119;
    goto LABEL_52;
  }
  v117[0] = 1;
LABEL_16:
  JSC::JSLockHolder::~JSLockHolder(v126, v45, v46, v47, v48, v49, v50, v51);
  JSC::JSLockHolder::JSLockHolder(v55, v122, v56, v57, v58, v59, v60, v61, v62);
  v70 = a6 | 0xFFFE000000000000;
  v71 = v118;
  if ((_DWORD)v118 == HIDWORD(v118))
  {
    if (v118 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v118, 2 * (int)v118))
    {
      v117[0] = 1;
      goto LABEL_21;
    }
    v71 = v118;
    v72 = v119;
    goto LABEL_54;
  }
  v72 = v119;
  if (v119 != (_OWORD *)((char *)v120 + 8) && v119)
  {
LABEL_54:
    *((_QWORD *)v72 + v71) = v70;
    goto LABEL_20;
  }
  *((_QWORD *)v119 + v118) = v70;
LABEL_20:
  LODWORD(v118) = v71 + 1;
LABEL_21:
  JSC::JSLockHolder::~JSLockHolder(v126, v63, v64, v65, v66, v67, v68, v69);
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v117, v126);
  v80 = (WTF *)v126[0];
  if (v126[0] && v126[0][1] == 6)
  {
    ++*v126[0];
    v81 = *a7;
    *a7 = v80;
    if (v81)
    {
      if (*(_DWORD *)v81 == 1)
        WTF::JSONImpl::Value::operator delete(v81, v73, v74, v75, v76, v77, v78, v79);
      else
        --*(_DWORD *)v81;
    }
LABEL_30:
    if (*(_DWORD *)v80 == 1)
      WTF::JSONImpl::Value::operator delete(v80, v73, v74, v75, v76, v77, v78, v79);
    else
      --*(_DWORD *)v80;
    goto LABEL_32;
  }
  v82 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v82 = 0xE00000002;
  *(_QWORD *)(v82 + 8) = "Internal error";
  *(_DWORD *)(v82 + 16) = 4;
  v83 = *a2;
  *a2 = (WTF::StringImpl *)v82;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  if (v80)
    goto LABEL_30;
LABEL_32:
  v84 = v125;
  v125 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v73, v74, v75, v76, v77, v78, v79);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  if (v124)
  {
    v109 = v124 - 2;
    v110 = *(_QWORD *)(((unint64_t)(v124 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v111 = (uint64_t *)*(v124 - 1);
    if (v111)
    {
      v112 = *v109;
      *v111 = *v109;
      *(_QWORD *)(v112 + 8) = v111;
      *v109 = 0;
      v109[1] = 0;
    }
    *v109 = *(_QWORD *)(v110 + 40);
    *(_QWORD *)(v110 + 40) = v109;
    v124 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v118, v73, v74, v75, v76, v77, v78, v79);
}

void Inspector::InjectedScript::saveResult(uint64_t a1, WTF::StringImpl **a2, const WTF::String *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  WTF *v69;
  char v70[8];
  _QWORD v71[13];
  _QWORD *v72;
  WTF::StringImpl *v73;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
    v10 = *v8;
  else
    v10 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0xA00000002;
  *(_QWORD *)(v11 + 8) = "saveResult";
  *(_DWORD *)(v11 + 16) = 4;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v70[0] = 0;
  v71[0] = 0x800000000;
  v71[1] = &v71[3];
  v20 = 0.0;
  memset(&v71[2], 0, 72);
  v71[11] = v9;
  v71[12] = v12;
  v21 = *(_QWORD *)(v9 + 56);
  v22 = *(_QWORD *)(v21 + 712);
  if (!v22)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v21 + 672), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v22 = *(_QWORD *)(v21 + 712);
  }
  *(_QWORD *)(v21 + 712) = *(_QWORD *)v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  v72 = (_QWORD *)(v22 + 16);
  if ((v10 != 0) != (*(_QWORD *)(v22 + 16) != 0))
  {
    if (v10)
    {
      v24 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
      *v24 = v22;
      *(_QWORD *)(v25 + 8) = v22;
    }
    else
    {
      v68 = *(_QWORD *)v22;
      v67 = *(_QWORD **)(v22 + 8);
      *v67 = *(_QWORD *)v22;
      *(_QWORD *)(v68 + 8) = v67;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = v72;
    }
  }
  *v23 = v10;
  v26 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  v73 = (WTF::StringImpl *)v11;
  if (v26)
  {
    *(_DWORD *)v11 = v26;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v70, a3, v14, v15, v16, v17, v18, v19, v20);
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v70, &v69);
  v34 = v69;
  if (v69 && *((_DWORD *)v69 + 1) == 3)
  {
    v35 = (int)*((double *)v69 + 1);
    *(_BYTE *)(a4 + 4) = 1;
    *(_DWORD *)a4 = v35;
  }
  else
  {
    v36 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v36 = 0xE00000002;
    *(_QWORD *)(v36 + 8) = "Internal error";
    *(_DWORD *)(v36 + 16) = 4;
    v37 = *a2;
    *a2 = (WTF::StringImpl *)v36;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::~StringImpl(v37, v27, v28, v29, v30, v31, v32, v33);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        if (!v34)
          goto LABEL_20;
        goto LABEL_18;
      }
      *(_DWORD *)v37 -= 2;
    }
    if (!v34)
      goto LABEL_20;
  }
LABEL_18:
  if (*(_DWORD *)v34 == 1)
    WTF::JSONImpl::Value::operator delete(v34, v27, v28, v29, v30, v31, v32, v33);
  else
    --*(_DWORD *)v34;
LABEL_20:
  v38 = v73;
  v73 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v72)
  {
    v63 = v72 - 2;
    v64 = *(_QWORD *)(((unint64_t)(v72 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v65 = (uint64_t *)*(v72 - 1);
    if (v65)
    {
      v66 = *v63;
      *v65 = *v63;
      *(_QWORD *)(v66 + 8) = v65;
      *v63 = 0;
      v63[1] = 0;
    }
    *v63 = *(_QWORD *)(v64 + 40);
    *(_QWORD *)(v64 + 40) = v63;
    v72 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v71, v27, v28, v29, v30, v31, v32, v33);
}

void Inspector::InjectedScript::wrapCallFrames(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  WTF *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  JSC::JSGlobalObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  WTF *v83;
  char v84[8];
  uint64_t v85;
  _OWORD *v86;
  _OWORD v87[4];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  int v94;
  unsigned int *v95;

  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v8 = *v6;
  else
    v8 = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0xE00000002;
  *(_QWORD *)(v9 + 8) = "wrapCallFrames";
  *(_DWORD *)(v9 + 16) = 4;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v84[0] = 0;
  v85 = 0x800000000;
  v86 = (_OWORD *)((char *)v87 + 8);
  v18 = 0.0;
  memset(v87, 0, sizeof(v87));
  v88 = 0;
  v89 = v7;
  v90 = v10;
  v19 = *(_QWORD *)(v7 + 56);
  v20 = *(_QWORD *)(v19 + 712);
  if (!v20)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v19 + 672), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_QWORD *)(v19 + 712);
  }
  *(_QWORD *)(v19 + 712) = *(_QWORD *)v20;
  *(_QWORD *)(v20 + 16) = 0;
  v21 = (_QWORD *)(v20 + 16);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  v91 = (_QWORD *)(v20 + 16);
  if ((v8 != 0) != (*(_QWORD *)(v20 + 16) != 0))
  {
    if (v8)
    {
      v22 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFF000) + 0x10);
      v23 = v22[3];
      v22 += 3;
      *(_QWORD *)v20 = v23;
      *(_QWORD *)(v20 + 8) = v22;
      *v22 = v20;
      *(_QWORD *)(v23 + 8) = v20;
    }
    else
    {
      v82 = *(_QWORD *)v20;
      v81 = *(_QWORD **)(v20 + 8);
      *v81 = *(_QWORD *)v20;
      *(_QWORD *)(v82 + 8) = v81;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      v21 = v91;
    }
  }
  *v21 = v8;
  v24 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  v92 = (WTF::StringImpl *)v9;
  if (v24)
  {
    *(_DWORD *)v9 = v24;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  v25 = v85;
  if ((_DWORD)v85 == HIDWORD(v85))
  {
    if (v85 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v85, 2 * (int)v85))
    {
      v84[0] = 1;
      goto LABEL_15;
    }
    v25 = v85;
    v26 = v86;
  }
  else
  {
    v26 = v86;
    if (v86 == (_OWORD *)((char *)v87 + 8) || !v86)
    {
      *((_QWORD *)v86 + v85) = a2;
      LODWORD(v85) = v25 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v26 + v25) = a2;
  LODWORD(v85) = v25 + 1;
  if (!*(_QWORD *)&v87[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v80 = (_QWORD *)(a2 - 16);
    else
      v80 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v87[0] = *v80 + 560;
    v95 = (unsigned int *)&v85;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v87[0], (uint64_t *)&v95, v13, v14, v15, v16, v17, (uint64_t)&v93);
  }
LABEL_15:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(a1, (WTF::AtomStringImpl *)v84, v12, v13, v14, v15, v16, v17, (uint64_t)&v93, v18);
  if (v94
    || (v43 = v93) == 0
    || (v44 = *(JSC::JSGlobalObject **)(a1 + 16),
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v95, v44, v27, v28, v29, v30, v31, v32, v33),
        Inspector::jsToInspectorValue((uint64_t *)&v83, v44, v43, 1000, v45, v46, v47, v48, v49),
        JSC::JSLockHolder::~JSLockHolder(&v95, v50, v51, v52, v53, v54, v55, v56),
        (v57 = v83) == 0))
  {
    v34 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x600000001;
    *((_QWORD *)v34 + 2) = 0;
    *((_QWORD *)v34 + 3) = 0;
    *a3 = v34;
    goto LABEL_17;
  }
  if (*((_DWORD *)v83 + 1) == 6)
  {
    v58 = (*(_DWORD *)v83)++;
    *a3 = v57;
    if (!v58)
    {
LABEL_26:
      WTF::JSONImpl::Value::operator delete(v57, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_17;
    }
  }
  else
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v75 = 0x600000001;
    *((_QWORD *)v75 + 2) = 0;
    *((_QWORD *)v75 + 3) = 0;
    *a3 = v75;
    v58 = *(_DWORD *)v57 - 1;
    if (*(_DWORD *)v57 == 1)
      goto LABEL_26;
  }
  *(_DWORD *)v57 = v58;
LABEL_17:
  v42 = v92;
  v92 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  if (v91)
  {
    v76 = v91 - 2;
    v77 = *(_QWORD *)(((unint64_t)(v91 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v78 = (uint64_t *)*(v91 - 1);
    if (v78)
    {
      v79 = *v76;
      *v78 = *v76;
      *(_QWORD *)(v79 + 8) = v78;
      *v76 = 0;
      v76[1] = 0;
    }
    *v76 = *(_QWORD *)(v77 + 40);
    *(_QWORD *)(v77 + 40) = v76;
    v91 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v85, v35, v36, v37, v38, v39, v40, v41);
}

void Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v12 = *(_QWORD *)(a1 + 16);
  if (v12 && !*(_BYTE *)(v12 + 3169))
  {
    *(_BYTE *)(v12 + 3169) = 1;
    v13 = *(WTF::StringImpl **)(v12 + 3184);
    if (v13)
    {
      v14 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      if (v14)
      {
        *(_DWORD *)v13 = v14;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    Inspector::ScriptFunctionCall::call(a2, a3, a4, a5, a6, a7, a8, a9, a10);
    *(_BYTE *)(v12 + 3169) = 0;
    v22 = *(WTF::StringImpl **)(v12 + 3184);
    if (v22)
    {
      v23 = *(_DWORD *)v22;
      *(_DWORD *)v22 += 2;
      if (v23)
      {
        *(_DWORD *)v22 = v23;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
  }
  else
  {
    Inspector::ScriptFunctionCall::call(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
}

void Inspector::toInspectorValue(JSC::JSGlobalObject *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, double a10@<D0>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v25, a1, a3, a4, a5, a6, a7, a8, a10);
  Inspector::jsToInspectorValue(a9, a1, a2, 1000, v13, v14, v15, v16, v17);
  JSC::JSLockHolder::~JSLockHolder(&v25, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t Inspector::InjectedScriptBase::hasAccessToInspectedScriptState(Inspector::InjectedScriptBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, *((_QWORD *)this + 2));
  return result;
}

void Inspector::InjectedScript::previewValue(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF **a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  _OWORD *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unsigned int v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  WTF *v78;
  char v79[8];
  uint64_t v80;
  _OWORD *v81;
  _OWORD v82[4];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  int v89;
  unsigned int *v90;

  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v8 = *v6;
  else
    v8 = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0xC00000002;
  *(_QWORD *)(v9 + 8) = "previewValue";
  *(_DWORD *)(v9 + 16) = 4;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v79[0] = 0;
  v80 = 0x800000000;
  v81 = (_OWORD *)((char *)v82 + 8);
  v18 = 0.0;
  memset(v82, 0, sizeof(v82));
  v83 = 0;
  v84 = v7;
  v85 = v10;
  v19 = *(_QWORD *)(v7 + 56);
  v20 = *(_QWORD *)(v19 + 712);
  if (!v20)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v19 + 672), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_QWORD *)(v19 + 712);
  }
  *(_QWORD *)(v19 + 712) = *(_QWORD *)v20;
  *(_QWORD *)(v20 + 16) = 0;
  v21 = (_QWORD *)(v20 + 16);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  v86 = (_QWORD *)(v20 + 16);
  if ((v8 != 0) != (*(_QWORD *)(v20 + 16) != 0))
  {
    if (v8)
    {
      v22 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFF000) + 0x10);
      v23 = v22[3];
      v22 += 3;
      *(_QWORD *)v20 = v23;
      *(_QWORD *)(v20 + 8) = v22;
      *v22 = v20;
      *(_QWORD *)(v23 + 8) = v20;
    }
    else
    {
      v77 = *(_QWORD *)v20;
      v76 = *(_QWORD **)(v20 + 8);
      *v76 = *(_QWORD *)v20;
      *(_QWORD *)(v77 + 8) = v76;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      v21 = v86;
    }
  }
  *v21 = v8;
  v24 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  v87 = (WTF::StringImpl *)v9;
  if (v24)
  {
    *(_DWORD *)v9 = v24;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v9, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  v25 = v80;
  if ((_DWORD)v80 == HIDWORD(v80))
  {
    if (v80 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v80, 2 * (int)v80))
    {
      v79[0] = 1;
      goto LABEL_15;
    }
    v25 = v80;
    v26 = v81;
  }
  else
  {
    v26 = v81;
    if (v81 == (_OWORD *)((char *)v82 + 8) || !v81)
    {
      *((_QWORD *)v81 + v80) = a2;
      LODWORD(v80) = v25 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v26 + v25) = a2;
  LODWORD(v80) = v25 + 1;
  if (!*(_QWORD *)&v82[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v75 = (_QWORD *)(a2 - 16);
    else
      v75 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v82[0] = *v75 + 560;
    v90 = (unsigned int *)&v80;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v82[0], (uint64_t *)&v90, v13, v14, v15, v16, v17, (uint64_t)&v88);
  }
LABEL_15:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(a1, (WTF::AtomStringImpl *)v79, v12, v13, v14, v15, v16, v17, (uint64_t)&v88, v18);
  if (v89
    || (v36 = v88) == 0
    || (v37 = *(JSC::JSGlobalObject **)(a1 + 16),
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v90, v37, v28, v29, v30, v31, v32, v33, v34),
        Inspector::jsToInspectorValue((uint64_t *)&v78, v37, v36, 1000, v38, v39, v40, v41, v42),
        JSC::JSLockHolder::~JSLockHolder(&v90, v43, v44, v45, v46, v47, v48, v49),
        (v50 = v78) == 0))
  {
    *a3 = 0;
    goto LABEL_17;
  }
  v51 = *((_DWORD *)v78 + 1);
  if (v51 >= 5)
  {
    if (v51 == 5)
    {
      v68 = *(_DWORD *)v78;
      *(_DWORD *)v78 += 2;
      *a3 = v50;
      v69 = __CFADD__(v68, 1);
      v70 = v68 + 1;
      if (v69)
        WTF::JSONImpl::Value::operator delete(v50, v27, v28, v29, v30, v31, v32, v33);
      else
        *(_DWORD *)v50 = v70;
      goto LABEL_26;
    }
    if (v51 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x19860CC74);
    }
  }
  *a3 = 0;
LABEL_26:
  if (*(_DWORD *)v50 == 1)
    WTF::JSONImpl::Value::operator delete(v50, v27, v28, v29, v30, v31, v32, v33);
  else
    --*(_DWORD *)v50;
LABEL_17:
  v35 = v87;
  v87 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v86)
  {
    v71 = v86 - 2;
    v72 = *(_QWORD *)(((unint64_t)(v86 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v73 = (uint64_t *)*(v86 - 1);
    if (v73)
    {
      v74 = *v71;
      *v73 = *v71;
      *(_QWORD *)(v74 + 8) = v73;
      *v71 = 0;
      v71[1] = 0;
    }
    *v71 = *(_QWORD *)(v72 + 40);
    *(_QWORD *)(v72 + 40) = v71;
    v86 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v80, v27, v28, v29, v30, v31, v32, v33);
}

void Inspector::InjectedScript::setEventValue(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF *v55;
  char v56[8];
  uint64_t v57;
  _OWORD *v58;
  _OWORD v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  char v65[24];
  uint64_t *v66;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xD00000002;
  *(_QWORD *)(v7 + 8) = "setEventValue";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v56[0] = 0;
  v57 = 0x800000000;
  v58 = (_OWORD *)((char *)v59 + 8);
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v61 = v5;
  v62 = v8;
  v16 = *(_QWORD *)(v5 + 56);
  v17 = *(_QWORD *)(v16 + 712);
  if (!v17)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v16 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v17 = *(_QWORD *)(v16 + 712);
  }
  *(_QWORD *)(v16 + 712) = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (_QWORD *)(v17 + 16);
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  v63 = (_QWORD *)(v17 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v17 + 16) != 0))
  {
    if (v6)
    {
      v19 = *(unint64_t **)((v17 & 0xFFFFFFFFFFFFF000) + 0x10);
      v20 = v19[3];
      v19 += 3;
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v19;
      *v19 = v17;
      *(_QWORD *)(v20 + 8) = v17;
    }
    else
    {
      v54 = *(_QWORD *)v17;
      v53 = *(_QWORD **)(v17 + 8);
      *v53 = *(_QWORD *)v17;
      *(_QWORD *)(v54 + 8) = v53;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v18 = v63;
    }
  }
  *v18 = v6;
  v21 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v64 = (WTF::StringImpl *)v7;
  if (v21)
  {
    *(_DWORD *)v7 = v21;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  v22 = v57;
  if ((_DWORD)v57 == HIDWORD(v57))
  {
    if (v57 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v57, 2 * (int)v57))
    {
      v56[0] = 1;
      goto LABEL_15;
    }
    v22 = v57;
    v23 = v58;
  }
  else
  {
    v23 = v58;
    if (v58 == (_OWORD *)((char *)v59 + 8) || !v58)
    {
      *((_QWORD *)v58 + v57) = a2;
      LODWORD(v57) = v22 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v23 + v22) = a2;
  LODWORD(v57) = v22 + 1;
  if (!*(_QWORD *)&v59[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v52 = (_QWORD *)(a2 - 16);
    else
      v52 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v59[0] = *v52 + 560;
    v66 = &v57;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v59[0], (uint64_t *)&v66, v11, v12, v13, v14, v15, (uint64_t)v65);
  }
LABEL_15:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v56, &v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete(v55, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v55;
  }
  v31 = v64;
  v64 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (v63)
  {
    v48 = v63 - 2;
    v49 = *(_QWORD *)(((unint64_t)(v63 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v50 = (uint64_t *)*(v63 - 1);
    if (v50)
    {
      v51 = *v48;
      *v50 = *v48;
      *(_QWORD *)(v51 + 8) = v50;
      *v48 = 0;
      v48[1] = 0;
    }
    *v48 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v49 + 40) = v48;
    v63 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v57, v24, v25, v26, v27, v28, v29, v30);
}

void Inspector::InjectedScript::clearEventValue(Inspector::InjectedScript *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  char v51[8];
  _QWORD v52[13];
  _QWORD *v53;
  WTF::StringImpl *v54;

  v3 = *((_QWORD *)this + 2);
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2)
    v4 = *v2;
  else
    v4 = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xF00000002;
  *(_QWORD *)(v5 + 8) = "clearEventValue";
  *(_DWORD *)(v5 + 16) = 4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v51[0] = 0;
  v52[0] = 0x800000000;
  v52[1] = &v52[3];
  memset(&v52[2], 0, 72);
  v52[11] = v3;
  v52[12] = v6;
  v14 = *(_QWORD *)(v3 + 56);
  v15 = *(_QWORD *)(v14 + 712);
  if (!v15)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v14 + 672), (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v15 = *(_QWORD *)(v14 + 712);
  }
  *(_QWORD *)(v14 + 712) = *(_QWORD *)v15;
  *(_QWORD *)(v15 + 16) = 0;
  v16 = (_QWORD *)(v15 + 16);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  v53 = (_QWORD *)(v15 + 16);
  if ((v4 != 0) != (*(_QWORD *)(v15 + 16) != 0))
  {
    if (v4)
    {
      v17 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
      v18 = v17[3];
      v17 += 3;
      *(_QWORD *)v15 = v18;
      *(_QWORD *)(v15 + 8) = v17;
      *v17 = v15;
      *(_QWORD *)(v18 + 8) = v15;
    }
    else
    {
      v49 = *(_QWORD *)v15;
      v48 = *(_QWORD **)(v15 + 8);
      *v48 = *(_QWORD *)v15;
      *(_QWORD *)(v49 + 8) = v48;
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = v53;
    }
  }
  *v16 = v4;
  v19 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  v54 = (WTF::StringImpl *)v5;
  if (v19)
  {
    *(_DWORD *)v5 = v19;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v5, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  Inspector::InjectedScriptBase::makeCall(this, (WTF::AtomStringImpl *)v51, &v50);
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v20, v21, v22, v23, v24, v25, v26);
    else
      --*(_DWORD *)v50;
  }
  v27 = v54;
  v54 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  if (v53)
  {
    v44 = v53 - 2;
    v45 = *(_QWORD *)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v46 = (uint64_t *)*(v53 - 1);
    if (v46)
    {
      v47 = *v44;
      *v46 = *v44;
      *(_QWORD *)(v47 + 8) = v46;
      *v44 = 0;
      v44[1] = 0;
    }
    *v44 = *(_QWORD *)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;
    v53 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v52, v20, v21, v22, v23, v24, v25, v26);
}

void Inspector::InjectedScript::setExceptionValue(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF *v55;
  char v56[8];
  uint64_t v57;
  _OWORD *v58;
  _OWORD v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  char v65[24];
  uint64_t *v66;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1100000002;
  *(_QWORD *)(v7 + 8) = "setExceptionValue";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v56[0] = 0;
  v57 = 0x800000000;
  v58 = (_OWORD *)((char *)v59 + 8);
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v61 = v5;
  v62 = v8;
  v16 = *(_QWORD *)(v5 + 56);
  v17 = *(_QWORD *)(v16 + 712);
  if (!v17)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v16 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v17 = *(_QWORD *)(v16 + 712);
  }
  *(_QWORD *)(v16 + 712) = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (_QWORD *)(v17 + 16);
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  v63 = (_QWORD *)(v17 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v17 + 16) != 0))
  {
    if (v6)
    {
      v19 = *(unint64_t **)((v17 & 0xFFFFFFFFFFFFF000) + 0x10);
      v20 = v19[3];
      v19 += 3;
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v19;
      *v19 = v17;
      *(_QWORD *)(v20 + 8) = v17;
    }
    else
    {
      v54 = *(_QWORD *)v17;
      v53 = *(_QWORD **)(v17 + 8);
      *v53 = *(_QWORD *)v17;
      *(_QWORD *)(v54 + 8) = v53;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v18 = v63;
    }
  }
  *v18 = v6;
  v21 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v64 = (WTF::StringImpl *)v7;
  if (v21)
  {
    *(_DWORD *)v7 = v21;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  v22 = v57;
  if ((_DWORD)v57 == HIDWORD(v57))
  {
    if (v57 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v57, 2 * (int)v57))
    {
      v56[0] = 1;
      goto LABEL_15;
    }
    v22 = v57;
    v23 = v58;
  }
  else
  {
    v23 = v58;
    if (v58 == (_OWORD *)((char *)v59 + 8) || !v58)
    {
      *((_QWORD *)v58 + v57) = a2;
      LODWORD(v57) = v22 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v23 + v22) = a2;
  LODWORD(v57) = v22 + 1;
  if (!*(_QWORD *)&v59[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v52 = (_QWORD *)(a2 - 16);
    else
      v52 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v59[0] = *v52 + 560;
    v66 = &v57;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v59[0], (uint64_t *)&v66, v11, v12, v13, v14, v15, (uint64_t)v65);
  }
LABEL_15:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v56, &v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete(v55, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v55;
  }
  v31 = v64;
  v64 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (v63)
  {
    v48 = v63 - 2;
    v49 = *(_QWORD *)(((unint64_t)(v63 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v50 = (uint64_t *)*(v63 - 1);
    if (v50)
    {
      v51 = *v48;
      *v50 = *v48;
      *(_QWORD *)(v51 + 8) = v50;
      *v48 = 0;
      v48[1] = 0;
    }
    *v48 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v49 + 40) = v48;
    v63 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v57, v24, v25, v26, v27, v28, v29, v30);
}

void Inspector::InjectedScript::clearExceptionValue(Inspector::InjectedScript *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  char v51[8];
  _QWORD v52[13];
  _QWORD *v53;
  WTF::StringImpl *v54;

  v3 = *((_QWORD *)this + 2);
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2)
    v4 = *v2;
  else
    v4 = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1300000002;
  *(_QWORD *)(v5 + 8) = "clearExceptionValue";
  *(_DWORD *)(v5 + 16) = 4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v51[0] = 0;
  v52[0] = 0x800000000;
  v52[1] = &v52[3];
  memset(&v52[2], 0, 72);
  v52[11] = v3;
  v52[12] = v6;
  v14 = *(_QWORD *)(v3 + 56);
  v15 = *(_QWORD *)(v14 + 712);
  if (!v15)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v14 + 672), (uint64_t)v7, v8, v9, v10, v11, v12, v13);
    v15 = *(_QWORD *)(v14 + 712);
  }
  *(_QWORD *)(v14 + 712) = *(_QWORD *)v15;
  *(_QWORD *)(v15 + 16) = 0;
  v16 = (_QWORD *)(v15 + 16);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  v53 = (_QWORD *)(v15 + 16);
  if ((v4 != 0) != (*(_QWORD *)(v15 + 16) != 0))
  {
    if (v4)
    {
      v17 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
      v18 = v17[3];
      v17 += 3;
      *(_QWORD *)v15 = v18;
      *(_QWORD *)(v15 + 8) = v17;
      *v17 = v15;
      *(_QWORD *)(v18 + 8) = v15;
    }
    else
    {
      v49 = *(_QWORD *)v15;
      v48 = *(_QWORD **)(v15 + 8);
      *v48 = *(_QWORD *)v15;
      *(_QWORD *)(v49 + 8) = v48;
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = v53;
    }
  }
  *v16 = v4;
  v19 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  v54 = (WTF::StringImpl *)v5;
  if (v19)
  {
    *(_DWORD *)v5 = v19;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v5, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  Inspector::InjectedScriptBase::makeCall(this, (WTF::AtomStringImpl *)v51, &v50);
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v20, v21, v22, v23, v24, v25, v26);
    else
      --*(_DWORD *)v50;
  }
  v27 = v54;
  v54 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  if (v53)
  {
    v44 = v53 - 2;
    v45 = *(_QWORD *)(((unint64_t)(v53 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v46 = (uint64_t *)*(v53 - 1);
    if (v46)
    {
      v47 = *v44;
      *v46 = *v44;
      *(_QWORD *)(v47 + 8) = v46;
      *v44 = 0;
      v44[1] = 0;
    }
    *v44 = *(_QWORD *)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;
    v53 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v52, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t Inspector::InjectedScript::findObjectById(Inspector::InjectedScript *this, const WTF::String *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65[8];
  _QWORD v66[13];
  _QWORD *v67;
  WTF::StringImpl *v68;

  v5 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xE00000002;
  *(_QWORD *)(v7 + 8) = "findObjectById";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v65[0] = 0;
  v66[0] = 0x800000000;
  v66[1] = &v66[3];
  v16 = 0.0;
  memset(&v66[2], 0, 72);
  v66[11] = v5;
  v66[12] = v8;
  v17 = *(_QWORD *)(v5 + 56);
  v18 = *(_QWORD *)(v17 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v18 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v67 = (_QWORD *)(v18 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (v6)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v62 = *(_QWORD *)v18;
      v61 = *(_QWORD **)(v18 + 8);
      *v61 = *(_QWORD *)v18;
      *(_QWORD *)(v62 + 8) = v61;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = v67;
    }
  }
  *v19 = v6;
  v22 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v68 = (WTF::StringImpl *)v7;
  if (v22)
  {
    *(_DWORD *)v7 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v65, a2, v10, v11, v12, v13, v14, v15, v16);
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)this, (WTF::AtomStringImpl *)v65, v23, v24, v25, v26, v27, v28, (uint64_t)&v63, v29);
  v37 = v64;
  v38 = v63;
  v39 = v68;
  v68 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  if (v67)
  {
    v57 = v67 - 2;
    v58 = *(_QWORD *)(((unint64_t)(v67 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v59 = (uint64_t *)*(v67 - 1);
    if (v59)
    {
      v60 = *v57;
      *v59 = *v57;
      *(_QWORD *)(v60 + 8) = v59;
      *v57 = 0;
      v57[1] = 0;
    }
    *v57 = *(_QWORD *)(v58 + 40);
    *(_QWORD *)(v58 + 40) = v57;
    v67 = 0;
  }
  if (v37)
    v38 = 0;
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v66, v30, v31, v32, v33, v34, v35, v36);
  return v38;
}

void Inspector::InjectedScript::inspectObject(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF *v55;
  char v56[8];
  uint64_t v57;
  _OWORD *v58;
  _OWORD v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  char v65[24];
  uint64_t *v66;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xD00000002;
  *(_QWORD *)(v7 + 8) = "inspectObject";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v56[0] = 0;
  v57 = 0x800000000;
  v58 = (_OWORD *)((char *)v59 + 8);
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v61 = v5;
  v62 = v8;
  v16 = *(_QWORD *)(v5 + 56);
  v17 = *(_QWORD *)(v16 + 712);
  if (!v17)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v16 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v17 = *(_QWORD *)(v16 + 712);
  }
  *(_QWORD *)(v16 + 712) = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (_QWORD *)(v17 + 16);
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  v63 = (_QWORD *)(v17 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v17 + 16) != 0))
  {
    if (v6)
    {
      v19 = *(unint64_t **)((v17 & 0xFFFFFFFFFFFFF000) + 0x10);
      v20 = v19[3];
      v19 += 3;
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v19;
      *v19 = v17;
      *(_QWORD *)(v20 + 8) = v17;
    }
    else
    {
      v54 = *(_QWORD *)v17;
      v53 = *(_QWORD **)(v17 + 8);
      *v53 = *(_QWORD *)v17;
      *(_QWORD *)(v54 + 8) = v53;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v18 = v63;
    }
  }
  *v18 = v6;
  v21 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v64 = (WTF::StringImpl *)v7;
  if (v21)
  {
    *(_DWORD *)v7 = v21;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  v22 = v57;
  if ((_DWORD)v57 == HIDWORD(v57))
  {
    if (v57 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v57, 2 * (int)v57))
    {
      v56[0] = 1;
      goto LABEL_15;
    }
    v22 = v57;
    v23 = v58;
  }
  else
  {
    v23 = v58;
    if (v58 == (_OWORD *)((char *)v59 + 8) || !v58)
    {
      *((_QWORD *)v58 + v57) = a2;
      LODWORD(v57) = v22 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v23 + v22) = a2;
  LODWORD(v57) = v22 + 1;
  if (!*(_QWORD *)&v59[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v52 = (_QWORD *)(a2 - 16);
    else
      v52 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v59[0] = *v52 + 560;
    v66 = &v57;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v59[0], (uint64_t *)&v66, v11, v12, v13, v14, v15, (uint64_t)v65);
  }
LABEL_15:
  Inspector::InjectedScriptBase::makeCall((_QWORD *)a1, (WTF::AtomStringImpl *)v56, &v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete(v55, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v55;
  }
  v31 = v64;
  v64 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (v63)
  {
    v48 = v63 - 2;
    v49 = *(_QWORD *)(((unint64_t)(v63 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v50 = (uint64_t *)*(v63 - 1);
    if (v50)
    {
      v51 = *v48;
      *v50 = *v48;
      *(_QWORD *)(v51 + 8) = v50;
      *v48 = 0;
      v48[1] = 0;
    }
    *v48 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v49 + 40) = v48;
    v63 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v57, v24, v25, v26, v27, v28, v29, v30);
}

void Inspector::InjectedScript::releaseObject(Inspector::InjectedScript *this, const WTF::String *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  WTF *v53;
  char v54[8];
  _QWORD v55[13];
  _QWORD *v56;
  WTF::StringImpl *v57;

  v5 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xD00000002;
  *(_QWORD *)(v7 + 8) = "releaseObject";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v54[0] = 0;
  v55[0] = 0x800000000;
  v55[1] = &v55[3];
  v16 = 0.0;
  memset(&v55[2], 0, 72);
  v55[11] = v5;
  v55[12] = v8;
  v17 = *(_QWORD *)(v5 + 56);
  v18 = *(_QWORD *)(v17 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v18 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v56 = (_QWORD *)(v18 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (v6)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v52 = *(_QWORD *)v18;
      v51 = *(_QWORD **)(v18 + 8);
      *v51 = *(_QWORD *)v18;
      *(_QWORD *)(v52 + 8) = v51;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = v56;
    }
  }
  *v19 = v6;
  v22 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v57 = (WTF::StringImpl *)v7;
  if (v22)
  {
    *(_DWORD *)v7 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v54, a2, v10, v11, v12, v13, v14, v15, v16);
  Inspector::InjectedScriptBase::makeCall(this, (WTF::AtomStringImpl *)v54, &v53);
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v23, v24, v25, v26, v27, v28, v29);
    else
      --*(_DWORD *)v53;
  }
  v30 = v57;
  v57 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (v56)
  {
    v47 = v56 - 2;
    v48 = *(_QWORD *)(((unint64_t)(v56 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v49 = (uint64_t *)*(v56 - 1);
    if (v49)
    {
      v50 = *v47;
      *v49 = *v47;
      *(_QWORD *)(v50 + 8) = v49;
      *v47 = 0;
      v47[1] = 0;
    }
    *v47 = *(_QWORD *)(v48 + 40);
    *(_QWORD *)(v48 + 40) = v47;
    v56 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v55, v23, v24, v25, v26, v27, v28, v29);
}

void Inspector::InjectedScript::releaseObjectGroup(Inspector::InjectedScript *this, const WTF::String *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char v61[8];
  _QWORD v62[13];
  _QWORD *v63;
  WTF::StringImpl *v64;

  v5 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1200000002;
  *(_QWORD *)(v7 + 8) = "releaseObjectGroup";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v61[0] = 0;
  v62[0] = 0x800000000;
  v62[1] = &v62[3];
  v16 = 0.0;
  memset(&v62[2], 0, 72);
  v62[11] = v5;
  v62[12] = v8;
  v17 = *(_QWORD *)(v5 + 56);
  v18 = *(_QWORD *)(v17 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v18 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v63 = (_QWORD *)(v18 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (v6)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v59 = *(_QWORD *)v18;
      v58 = *(_QWORD **)(v18 + 8);
      *v58 = *(_QWORD *)v18;
      *(_QWORD *)(v59 + 8) = v58;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = v63;
    }
  }
  *v19 = v6;
  v22 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v64 = (WTF::StringImpl *)v7;
  if (v22)
  {
    *(_DWORD *)v7 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v61, a2, v10, v11, v12, v13, v14, v15, v16);
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)this, (WTF::AtomStringImpl *)v61, v23, v24, v25, v26, v27, v28, (uint64_t)&v60, v29);
  v37 = v64;
  v64 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  if (v63)
  {
    v54 = v63 - 2;
    v55 = *(_QWORD *)(((unint64_t)(v63 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v56 = (uint64_t *)*(v63 - 1);
    if (v56)
    {
      v57 = *v54;
      *v56 = *v54;
      *(_QWORD *)(v57 + 8) = v56;
      *v54 = 0;
      v54[1] = 0;
    }
    *v54 = *(_QWORD *)(v55 + 40);
    *(_QWORD *)(v55 + 40) = v54;
    v63 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v62, v30, v31, v32, v33, v34, v35, v36);
}

uint64_t Inspector::InjectedScript::createCommandLineAPIObject(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  _OWORD *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  uint64_t v60;
  _OWORD *v61;
  _OWORD v62[4];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v6 = *v4;
  else
    v6 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1A00000002;
  *(_QWORD *)(v7 + 8) = "createCommandLineAPIObject";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v59[0] = 0;
  v60 = 0x800000000;
  v61 = (_OWORD *)((char *)v62 + 8);
  v16 = 0.0;
  memset(v62, 0, sizeof(v62));
  v63 = 0;
  v64 = v5;
  v65 = v8;
  v17 = *(_QWORD *)(v5 + 56);
  v18 = *(_QWORD *)(v17 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v18 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  v66 = (_QWORD *)(v18 + 16);
  if ((v6 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (v6)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v58 = *(_QWORD *)v18;
      v57 = *(_QWORD **)(v18 + 8);
      *v57 = *(_QWORD *)v18;
      *(_QWORD *)(v58 + 8) = v57;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = v66;
    }
  }
  *v19 = v6;
  v22 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  v67 = (WTF::StringImpl *)v7;
  if (v22)
  {
    *(_DWORD *)v7 = v22;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  v23 = v60;
  if ((_DWORD)v60 == HIDWORD(v60))
  {
    if (v60 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v60, 2 * (int)v60))
    {
      v59[0] = 1;
      goto LABEL_15;
    }
    v23 = v60;
    v24 = v61;
  }
  else
  {
    v24 = v61;
    if (v61 == (_OWORD *)((char *)v62 + 8) || !v61)
    {
      *((_QWORD *)v61 + v60) = a2;
      LODWORD(v60) = v23 + 1;
      goto LABEL_15;
    }
  }
  *((_QWORD *)v24 + v23) = a2;
  LODWORD(v60) = v23 + 1;
  if (!*(_QWORD *)&v62[0] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    if ((a2 & 8) != 0)
      v56 = (_QWORD *)(a2 - 16);
    else
      v56 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v62[0] = *v56 + 560;
    v70 = &v60;
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v62[0], (uint64_t *)&v70, v11, v12, v13, v14, v15, (uint64_t)&v68);
  }
LABEL_15:
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled(a1, (WTF::AtomStringImpl *)v59, v10, v11, v12, v13, v14, v15, (uint64_t)&v68, v16);
  v32 = v69;
  v33 = v68;
  v34 = v67;
  v67 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (v66)
  {
    v52 = v66 - 2;
    v53 = *(_QWORD *)(((unint64_t)(v66 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v54 = (uint64_t *)*(v66 - 1);
    if (v54)
    {
      v55 = *v52;
      *v54 = *v52;
      *(_QWORD *)(v55 + 8) = v54;
      *v52 = 0;
      v52[1] = 0;
    }
    *v52 = *(_QWORD *)(v53 + 40);
    *(_QWORD *)(v53 + 40) = v52;
    v66 = 0;
  }
  if (v32)
    v33 = 0;
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v60, v25, v26, v27, v28, v29, v30, v31);
  return v33;
}

void Inspector::jsToInspectorValue(uint64_t *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v14;
  int **v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t Index;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF **v33;
  WTF **v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *v45;
  _DWORD **v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  WTF *v70[2];
  char v71;

  if (!a3 || !(_DWORD)a4)
    goto LABEL_34;
  v10 = a3;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = 1;
LABEL_11:
    *a1 = v11;
    return;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v12 = a3 == 7;
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = 0x100000001;
    *(_BYTE *)(v11 + 8) = v12;
    goto LABEL_11;
  }
  if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = 0x200000001;
    *(_QWORD *)(v11 + 8) = v10 - 0x2000000000000;
    goto LABEL_11;
  }
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = 0x300000001;
    *(double *)(v11 + 8) = (double)(int)v10;
    goto LABEL_11;
  }
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v14 = *(unsigned __int8 *)(a3 + 5);
  if (v14 == 2)
  {
    v15 = (int **)(a3 + 8);
    if ((*(_BYTE *)(a3 + 8) & 1) != 0)
      v15 = JSC::JSRopeString::resolveRope(a3, a2, a3, a4, a9, a5, a6, a7, a8);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = 0x400000001;
    v17 = *v15;
    v16[1] = *v15;
    if (v17)
      *v17 += 2;
    *a1 = (uint64_t)v16;
    return;
  }
  if (v14 < 0x17)
  {
LABEL_34:
    *a1 = 0;
    return;
  }
  v18 = (a4 - 1);
  if (v14 == 36)
  {
    v24 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x600000001;
    *(_QWORD *)(v24 + 16) = 0;
    v25 = (_QWORD *)(v24 + 16);
    *(_QWORD *)(v24 + 24) = 0;
    if ((*(_BYTE *)(v10 + 4) & 0xE) == 0 || (v26 = *(unsigned int *)(*(_QWORD *)(v10 + 8) - 8), !(_DWORD)v26))
    {
LABEL_56:
      *a1 = v24;
      return;
    }
    v27 = 0;
    while (1)
    {
      Index = JSC::JSObject::getIndex((JSC::JSObject *)v10, a2, v27, v19, v20, v21, v22, v23);
      Inspector::jsToInspectorValue(&v66, a2, Index, v18);
      v31 = v66;
      if (!v66)
        break;
      v70[0] = v66;
      v66 = 0;
      v32 = *(unsigned int *)(v24 + 28);
      if ((_DWORD)v32 == *(_DWORD *)(v24 + 24))
      {
        v33 = (WTF **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v32 + 1, (unint64_t)v70);
        v32 = *(unsigned int *)(v24 + 28);
        v34 = (WTF **)(*(_QWORD *)(v24 + 16) + 8 * v32);
        v31 = *v33;
      }
      else
      {
        v34 = (WTF **)(*v25 + 8 * v32);
        v33 = v70;
      }
      *v33 = 0;
      *v34 = v31;
      *(_DWORD *)(v24 + 28) = v32 + 1;
      v35 = v70[0];
      v70[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
          WTF::JSONImpl::Value::operator delete(v35, v29, v30, v19, v20, v21, v22, v23);
        else
          --*(_DWORD *)v35;
      }
      if (v26 == ++v27)
        goto LABEL_56;
    }
    *a1 = 0;
    goto LABEL_66;
  }
  v36 = *((_QWORD *)a2 + 7);
  v24 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)v24 = 0x500000001;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
    v10 = 0;
  v37 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v37 = 1;
  *((_QWORD *)v37 + 1) = (char *)v37 + 24;
  *((_QWORD *)v37 + 2) = 20;
  v66 = v37;
  v67 = 0;
  v68 = v36;
  v69 = 258;
  (*(void (**)(unint64_t, JSC::JSGlobalObject *, WTF **, uint64_t))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0x78))(v10, a2, &v66, 1);
  v38 = *((unsigned int *)v66 + 5);
  if ((_DWORD)v38)
  {
    v39 = (unint64_t *)*((_QWORD *)v66 + 1);
    v40 = 8 * v38;
    while (1)
    {
      v41 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)a2, *v39, v19, v20, v21, v22, v23);
      Inspector::jsToInspectorValue(&v65, a2, v41, v18);
      if (!v65)
        break;
      v64 = v65;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v24 + 16), (WTF::AtomStringImpl *)v39, (const WTF::StringImpl *)&v64, v19, v20, v21, v22, v23, (uint64_t)v70);
      if (v71)
      {
        v42 = *(unsigned int *)(v24 + 36);
        if ((_DWORD)v42 == *(_DWORD *)(v24 + 32))
        {
          v46 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 24, v42 + 1, (unint64_t)v39);
          v42 = *(unsigned int *)(v24 + 36);
          v47 = *(_QWORD *)(v24 + 24);
          v48 = *v46;
          if (*v46)
            *v48 += 2;
          *(_QWORD *)(v47 + 8 * v42) = v48;
        }
        else
        {
          v43 = *(_QWORD *)(v24 + 24);
          v44 = (_DWORD *)*v39;
          if (*v39)
            *v44 += 2;
          *(_QWORD *)(v43 + 8 * v42) = v44;
        }
        *(_DWORD *)(v24 + 36) = v42 + 1;
      }
      v45 = v64;
      v64 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
          WTF::JSONImpl::Value::operator delete(v45, v29, v30, v19, v20, v21, v22, v23);
        else
          --*(_DWORD *)v45;
      }
      ++v39;
      v40 -= 8;
      if (!v40)
        goto LABEL_57;
    }
    *a1 = 0;
  }
  else
  {
LABEL_57:
    *a1 = v24;
    v24 = 0;
  }
  if (v67)
    WTF::fastFree(v67 - 16, v29, v30, v19, v20, v21, v22, v23);
  v49 = v66;
  v66 = 0;
  if (!v49)
  {
LABEL_65:
    if (!v24)
      return;
    goto LABEL_66;
  }
  if (*(_DWORD *)v49 != 1)
  {
    --*(_DWORD *)v49;
    goto LABEL_65;
  }
  v50 = *((unsigned int *)v49 + 5);
  if ((_DWORD)v50)
  {
    v51 = (WTF::StringImpl **)*((_QWORD *)v49 + 1);
    v52 = 8 * v50;
    do
    {
      v53 = *v51;
      *v51 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, v29, v30, v19, v20, v21, v22, v23);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
      ++v51;
      v52 -= 8;
    }
    while (v52);
  }
  v62 = *((_QWORD *)v49 + 1);
  if ((WTF *)((char *)v49 + 24) != (WTF *)v62 && v62 != 0)
  {
    *((_QWORD *)v49 + 1) = 0;
    *((_DWORD *)v49 + 4) = 0;
    WTF::fastFree(v62, v29, v30, v19, v20, v21, v22, v23);
  }
  WTF::fastFree((unint64_t)v49, v29, v30, v19, v20, v21, v22, v23);
  if (v24)
  {
LABEL_66:
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete((WTF *)v24, v29, v30, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v24;
  }
}

void Inspector::InjectedScriptBase::checkCallResult(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, WTF **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  const WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  const WTF::StringImpl *v37;
  __int16 Boolean;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  unsigned int v47;
  WTF *v48;
  uint64_t v49;
  const WTF::StringImpl *v50;
  uint64_t Integer;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;

  v9 = *a3;
  if (*a3)
  {
    switch(*(_DWORD *)(v9 + 4))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
        v10 = WTF::fastCompactMalloc((WTF *)0x20);
        v11 = (_DWORD *)v10;
        v12 = 0x2700000002;
        v13 = "Internal error: result is not an Object";
        goto LABEL_5;
      case 4:
        v11 = *(_DWORD **)(v9 + 8);
        if (v11)
          *v11 += 2;
        goto LABEL_6;
      case 5:
        ++*(_DWORD *)v9;
        v26 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v26 = 0x600000002;
        *(_QWORD *)(v26 + 8) = "result";
        *(_DWORD *)(v26 + 16) = 4;
        v95 = (WTF::StringImpl *)v26;
        WTF::JSONImpl::ObjectBase::getObject((WTF::JSONImpl::ObjectBase *)v9, &v95, v27, &v96);
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, v28, v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
        v35 = v96;
        if (!v96)
        {
          v59 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v59 = 0x4000000002;
          *(_QWORD *)(v59 + 8) = "Internal error: result is not a pair of value and wasThrown flag";
          *(_DWORD *)(v59 + 16) = 4;
          v60 = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = v59;
          if (!v60)
            goto LABEL_44;
          if (*(_DWORD *)v60 != 2)
          {
            *(_DWORD *)v60 -= 2;
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        v36 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v36 = 0x900000002;
        *(_QWORD *)(v36 + 8) = "wasThrown";
        *(_DWORD *)(v36 + 16) = 4;
        v95 = (WTF::StringImpl *)v36;
        Boolean = WTF::JSONImpl::ObjectBase::getBoolean((WTF::JSONImpl::ObjectBase *)v9, &v95, v37);
        *(_WORD *)a5 = Boolean;
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v36, v39, v40, v41, v42, v43, v44, v45);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          if (*(_BYTE *)(a5 + 1))
          {
LABEL_18:
            v46 = 0;
            v47 = *((_DWORD *)v35 + 1);
            if (v47 >= 5 && v47 != 6)
            {
              if (v47 != 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19860EE44);
              }
              ++*(_DWORD *)v35;
              v46 = v35;
            }
            v48 = *a4;
            *a4 = v46;
            if (v48)
            {
              if (*(_DWORD *)v48 == 1)
                WTF::JSONImpl::Value::operator delete(v48, v39, v40, v41, v42, v43, v44, v45);
              else
                --*(_DWORD *)v48;
            }
            if (*(_DWORD *)v35 == 1)
              WTF::JSONImpl::Value::operator delete(v35, v39, v40, v41, v42, v43, v44, v45);
            else
              --*(_DWORD *)v35;
            v49 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v49 = 0x1000000002;
            *(_QWORD *)(v49 + 8) = "savedResultIndex";
            *(_DWORD *)(v49 + 16) = 4;
            v95 = (WTF::StringImpl *)v49;
            Integer = WTF::JSONImpl::ObjectBase::getInteger((WTF::JSONImpl::ObjectBase *)v9, &v95, v50);
            *(_DWORD *)a6 = Integer;
            *(_BYTE *)(a6 + 4) = BYTE4(Integer);
            if (*(_DWORD *)v49 != 2)
            {
              *(_DWORD *)v49 -= 2;
              goto LABEL_44;
            }
            v60 = (WTF::StringImpl *)v49;
LABEL_42:
            WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            goto LABEL_44;
          }
        }
        else
        {
          *(_DWORD *)v36 -= 2;
          if (HIBYTE(Boolean))
            goto LABEL_18;
        }
        v77 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v77 = 0x4000000002;
        *(_QWORD *)(v77 + 8) = "Internal error: result is not a pair of value and wasThrown flag";
        *(_DWORD *)(v77 + 16) = 4;
        v78 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = v77;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::~StringImpl(v78, v52, v53, v54, v55, v56, v57, v58);
            WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
          }
          else
          {
            *(_DWORD *)v78 -= 2;
          }
        }
        if (*(_DWORD *)v35 == 1)
          WTF::JSONImpl::Value::operator delete(v35, v52, v53, v54, v55, v56, v57, v58);
        else
          --*(_DWORD *)v35;
LABEL_44:
        if (*(_DWORD *)v9 == 1)
          WTF::JSONImpl::Value::operator delete((WTF *)v9, v52, v53, v54, v55, v56, v57, v58);
        else
          --*(_DWORD *)v9;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19860EE24);
    }
  }
  else
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    v11 = (_DWORD *)v10;
    v12 = 0x2500000002;
    v13 = "Internal error: result value is empty";
LABEL_5:
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_DWORD *)(v10 + 16) = 4;
LABEL_6:
    v14 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void Inspector::InjectedScriptBase::checkAsyncCallResult(uint64_t a1, WTF **a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  _BYTE v35[10];
  __int16 v36;
  WTF *v37;
  WTF::StringImpl *v38;

  v38 = 0;
  v37 = 0;
  v36 = 0;
  v35[0] = 0;
  v35[4] = 0;
  v9 = *a2;
  if (*a2)
  {
    ++*(_DWORD *)v9;
    v34 = v9;
    Inspector::InjectedScriptBase::checkCallResult(a1, (WTF::AtomStringImpl *)&v38, (uint64_t *)&v34, &v37, (uint64_t)&v36, (uint64_t)v35, a7, a8);
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete(v9, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v9;
  }
  else
  {
    v34 = 0;
    Inspector::InjectedScriptBase::checkCallResult(a1, (WTF::AtomStringImpl *)&v38, (uint64_t *)&v34, &v37, (uint64_t)&v36, (uint64_t)v35, a7, a8);
  }
  (*(void (**)(_QWORD, WTF::StringImpl **, WTF **, __int16 *, _BYTE *))(*(_QWORD *)*a3 + 16))(*a3, &v38, &v37, &v36, v35);
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v24;
  }
  v25 = v38;
  v38 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void Inspector::InjectedScriptHost::~InjectedScriptHost(Inspector::InjectedScriptHost *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  *(_QWORD *)this = off_1E35913D8;
  if (*((_BYTE *)this + 32))
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    v19 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)(v10 + 8);
      do
      {
        if (*(v20 - 1) != -1)
        {
          v21 = *v20;
          if (*v20)
          {
            v22 = (uint64_t *)(v21 - 16);
            v23 = *(_QWORD *)(((v21 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v24 = *(uint64_t **)(v21 - 8);
            if (v24)
            {
              v25 = *v22;
              *v24 = *v22;
              *(_QWORD *)(v25 + 8) = v24;
              *v22 = 0;
              v22[1] = 0;
            }
            *v22 = *(_QWORD *)(v23 + 40);
            *(_QWORD *)(v23 + 40) = v22;
            *v20 = 0;
          }
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InjectedScriptHost::~InjectedScriptHost(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

unint64_t Inspector::InjectedScriptHost::wrapper(Inspector::InjectedScriptHost *this, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t Structure;
  JSC::Structure *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t SlowCase;
  JSC::VM *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD v69[6];
  uint64_t *v70;
  uint64_t v71;

  v12 = (uint64_t *)((char *)this + 16);
  v11 = *((_QWORD *)this + 2);
  if (!v11)
    goto LABEL_11;
  v13 = *(_DWORD *)(v11 - 8);
  v14 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(JSC::JSGlobalObject **)(v11 + 16 * v17);
  if (v18 != (JSC::JSGlobalObject *)a2)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(JSC::JSGlobalObject **)(v11 + 16 * v17);
      ++v19;
      if (v18 == (JSC::JSGlobalObject *)a2)
        goto LABEL_8;
    }
    v17 = *(unsigned int *)(v11 - 4);
  }
LABEL_8:
  if (v17 == *(_DWORD *)(v11 - 4) || (v20 = *(unint64_t **)(v11 + 16 * v17 + 8)) == 0 || (v21 = *v20) == 0)
  {
LABEL_11:
    v22 = *(_QWORD *)(a2 + 56);
    v23 = (unint64_t *)(v22 + 40136);
    Structure = Inspector::JSInjectedScriptHostPrototype::createStructure((unint64_t *)v22, (JSC::VM *)a2, *(_QWORD *)(a2 + 656), a5, a6, a7, a8, a9, a3);
    v30 = Inspector::JSInjectedScriptHostPrototype::create((Inspector::JSInjectedScriptHostPrototype *)v22, (JSC::VM *)a2, Structure, v25, v26, v27, v28, v29);
    v39 = v30;
    v69[0] = 23;
    if ((v30 & 0xFFFE000000000002) == 0 && v30 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v22, v38, v32, v33, v34, v35, v36, v37);
    SlowCase = *v23;
    if (*v23 >= *(_QWORD *)(v22 + 40144))
    {
      SlowCase = *(_QWORD *)(v22 + 40152);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v22, v31, v32, v33, v34, v35, v36, v37);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v22 + 40112, v22 + 192, 128, 0, 0, v62, v63, v64);
LABEL_20:
        *(_DWORD *)SlowCase = 0;
        JSC::Structure::Structure(SlowCase, v22, a2, v39, (uint64_t)v69, (unint64_t)&Inspector::JSInjectedScriptHost::s_info, 0, 0);
        if (*(_BYTE *)(v22 + 755))
          __dmb(0xAu);
        ++*((_DWORD *)this + 2);
        v49 = *(_QWORD **)(v22 + 40504);
        if (!v49)
          v49 = (_QWORD *)JSC::GCClient::Heap::injectedScriptHostSpaceSlow((JSC::Heap **)(v22 + 37552));
        v21 = v49[3];
        if (v21 >= v49[4])
        {
          v21 = v49[5];
          if ((v21 & 1) != 0)
          {
            v65 = (uint64_t)v49;
            JSC::sanitizeStackForVM((JSC *)v22, v42, v43, v44, v45, v46, v47, v48);
            v21 = JSC::LocalAllocator::allocateSlowCase(v65, v22 + 192, 32, 0, 0, v66, v67, v68);
            goto LABEL_26;
          }
          v57 = *(_QWORD *)(v21 + 8) ^ v49[6];
          v49[4] = v21 + HIDWORD(v57);
          v49[5] = v21 + (int)v57;
        }
        v49[3] = v21 + 32;
LABEL_26:
        *(_DWORD *)v21 = 0;
        v50 = *(_DWORD *)(SlowCase + 8);
        *(_DWORD *)v21 = SlowCase >> 4;
        *(_DWORD *)(v21 + 4) = v50;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = this;
        if (*(_BYTE *)(v22 + 755))
          __dmb(0xAu);
        v71 = a2;
        v51 = *(_QWORD *)(a2 + 56);
        v52 = *(_QWORD *)(v51 + 712);
        if (!v52)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v51 + 672), (uint64_t)v42, v43, v44, v45, v46, v47, v48);
          v52 = *(_QWORD *)(v51 + 712);
        }
        *(_QWORD *)(v51 + 712) = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v52 + 16) = 0;
        v53 = *(unint64_t **)((v52 & 0xFFFFFFFFFFFFF000) + 0x10);
        v54 = v53[3];
        v53 += 3;
        v70 = (uint64_t *)(v52 + 16);
        *(_QWORD *)v52 = v54;
        *(_QWORD *)(v52 + 8) = v53;
        *v53 = v52;
        *(_QWORD *)(v54 + 8) = v52;
        *(_QWORD *)(v52 + 16) = v21;
        WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::add<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>&>(v12, &v71, &v70, v44, v45, v46, v47, v48, (uint64_t)v69);
        if (v70)
        {
          v58 = v70 - 2;
          v59 = *(_QWORD *)(((unint64_t)(v70 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
          v60 = (uint64_t *)*(v70 - 1);
          if (v60)
          {
            v61 = *v58;
            *v60 = *v58;
            *(_QWORD *)(v61 + 8) = v60;
            *v58 = 0;
            v58[1] = 0;
          }
          *v58 = *(_QWORD *)(v59 + 40);
          *(_QWORD *)(v59 + 40) = v58;
        }
        return v21;
      }
      v56 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v22 + 40160);
      *(_QWORD *)(v22 + 40144) = SlowCase + HIDWORD(v56);
      *(_QWORD *)(v22 + 40152) = SlowCase + (int)v56;
    }
    *v23 = SlowCase + 128;
    goto LABEL_20;
  }
  return v21;
}

void Inspector::InjectedScriptHost::clearAllWrappers(Inspector::InjectedScriptHost *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::deallocateTable(v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Inspector::InjectedScriptManager::InjectedScriptManager(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)result = off_1E3591370;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 40) = 1;
  return result;
}

{
  uint64_t v3;

  *(_QWORD *)result = off_1E3591370;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 40) = 1;
  return result;
}

void Inspector::InjectedScriptManager::~InjectedScriptManager(Inspector::InjectedScriptManager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3591370;
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::~HashTable((uint64_t *)this + 1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3591370;
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::~HashTable((uint64_t *)this + 1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591370;
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::~HashTable((uint64_t *)this + 1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t Inspector::InjectedScriptManager::disconnect(Inspector::InjectedScriptManager *this)
{
  return (*(uint64_t (**)(Inspector::InjectedScriptManager *))(*(_QWORD *)this + 32))(this);
}

void Inspector::InjectedScriptManager::discardInjectedScripts(Inspector::InjectedScriptManager *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *((_QWORD *)this + 4);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = 0;
    WTF::HashTable<JSC::JSGlobalObject *,WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashMap<JSC::JSGlobalObject *,JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSGlobalObject *>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 1) = 0;
    WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Inspector::InjectedScriptManager::injectedScriptHost(Inspector::InjectedScriptManager *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t Inspector::InjectedScriptManager::injectedScriptForId@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::HandleSet *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int *v35;
  JSC::HandleSet *v36;

  v10 = *(_QWORD *)(this + 8);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 - 8);
    v12 = 9 * ((~((_DWORD)a2 << 15) + a2) ^ ((~((_DWORD)a2 << 15) + a2) >> 10));
    v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    v14 = v11 & (v13 ^ HIWORD(v13));
    v15 = (int *)(v10 + 48 * v14);
    v16 = *v15;
    if (*v15 != (_DWORD)a2)
    {
      v17 = 1;
      while (v16)
      {
        v14 = (v14 + v17) & v11;
        v15 = (int *)(v10 + 48 * v14);
        v16 = *v15;
        ++v17;
        if (*v15 == (_DWORD)a2)
          goto LABEL_8;
      }
      v15 = (int *)(v10 + 48 * *(unsigned int *)(v10 - 4));
    }
LABEL_8:
    if (v15 != (int *)(v10 + 48 * *(unsigned int *)(v10 - 4)))
    {
      v18 = (_DWORD *)*((_QWORD *)v15 + 2);
      if (v18)
        *v18 += 2;
      a9[3] = 0;
      v20 = *((_QWORD *)v15 + 3);
      v19 = *((_QWORD *)v15 + 4);
      a9[1] = v18;
      a9[2] = v20;
      if (v19)
      {
        v21 = *(JSC::HandleSet **)(((v19 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v22 = (_QWORD *)*((_QWORD *)v21 + 5);
        if (!v22)
        {
          v35 = v15;
          v36 = v21;
          this = (uint64_t)JSC::HandleSet::grow(v21, a2, a3, a4, a5, a6, a7, a8);
          v15 = v35;
          v21 = v36;
          v22 = (_QWORD *)*((_QWORD *)v36 + 5);
        }
        *((_QWORD *)v21 + 5) = *v22;
        v22[2] = 0;
        v23 = v22 + 2;
        *v22 = 0;
        v22[1] = 0;
        a9[3] = v22 + 2;
        v24 = (_QWORD *)*((_QWORD *)v15 + 4);
        if (v24)
        {
          v24 = (_QWORD *)*v24;
          if (v24)
          {
            v33 = *(_QWORD **)(((unint64_t)(v23 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v34 = v33[3];
            v33 += 3;
            *(v23 - 2) = v34;
            *(v23 - 1) = v33;
            *v33 = v23 - 2;
            *(_QWORD *)(v34 + 8) = v23 - 2;
          }
        }
        *v23 = v24;
      }
      a9[4] = *((_QWORD *)v15 + 5);
      goto LABEL_46;
    }
  }
  v25 = *(_QWORD *)(this + 16);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    v27 = v25 + 16 * v26;
    if (*(_DWORD *)(v25 - 12))
    {
      v28 = *(_QWORD *)(this + 16);
      if ((_DWORD)v26)
      {
        v29 = 16 * v26;
        v28 = *(_QWORD *)(this + 16);
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 16;
          v29 -= 16;
          if (!v29)
          {
            v28 = v27;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v28 = v25 + 16 * v26;
  }
  else
  {
    v28 = 0;
    v26 = 0;
  }
  v27 = v25 + 16 * v26;
  if (!v25)
  {
    if (v28)
    {
LABEL_39:
      while (*(_DWORD *)(v28 + 8) != (_DWORD)a2)
      {
        v32 = v28 + 16;
        v28 = v27;
        if (v32 != v27)
        {
          v28 = v32;
          while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
          {
            v28 += 16;
            if (v28 == v27)
            {
              v28 = v27;
              goto LABEL_39;
            }
          }
        }
      }
      return Inspector::InjectedScriptManager::injectedScriptFor(this, *(JSC::JSGlobalObject **)v28, a3, a4, a5, a6, a7, a8, (uint64_t)a9);
    }
LABEL_45:
    this = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)(this + 4) = 14;
    *(_QWORD *)(this + 8) = "InjectedScript";
    *(_DWORD *)(this + 16) = 4;
    a9[3] = 0;
    a9[4] = 0;
    a9[2] = 0;
    *(_DWORD *)this = 2;
    a9[1] = this;
LABEL_46:
    *a9 = &off_1E3591330;
    return this;
  }
LABEL_26:
  v30 = v25 + 16 * *(unsigned int *)(v25 - 4);
  if (v30 == v28)
    goto LABEL_45;
  while (*(_DWORD *)(v28 + 8) != (_DWORD)a2)
  {
    v31 = v28 + 16;
    v28 = v27;
    if (v31 != v27)
    {
      v28 = v31;
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 += 16;
        if (v28 == v27)
        {
          v28 = v27;
          break;
        }
      }
    }
    if (v28 == v30)
      goto LABEL_45;
  }
  return Inspector::InjectedScriptManager::injectedScriptFor(this, *(JSC::JSGlobalObject **)v28, a3, a4, a5, a6, a7, a8, (uint64_t)a9);
}

uint64_t Inspector::InjectedScriptManager::injectedScriptIdFor(Inspector::InjectedScriptManager *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v11 = (uint64_t *)((char *)this + 16);
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    v12 = *(_DWORD *)(v10 - 8);
    v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(JSC::JSGlobalObject **)(v10 + 16 * v16);
    if (v17 != a2)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(JSC::JSGlobalObject **)(v10 + 16 * v16);
        ++v18;
        if (v17 == a2)
          goto LABEL_10;
      }
      v16 = *(unsigned int *)(v10 - 4);
    }
LABEL_10:
    if (v16 != *(_DWORD *)(v10 - 4))
      return *(unsigned int *)(v10 + 16 * v16 + 8);
    v19 = *((unsigned int *)this + 10);
    *((_DWORD *)this + 10) = v19 + 1;
    goto LABEL_12;
  }
  v19 = *((unsigned int *)this + 10);
  *((_DWORD *)this + 10) = v19 + 1;
  WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash((uint64_t *)this + 2, 8uLL, 0, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
LABEL_12:
    v20 = *(_DWORD *)(v10 - 8);
    goto LABEL_13;
  }
  v20 = 0;
LABEL_13:
  v21 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = v20 & ((v23 >> 31) ^ v23);
  v25 = v10 + 16 * v24;
  v26 = *(JSC::JSGlobalObject **)v25;
  if (*(_QWORD *)v25)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v26 == a2)
      {
        *(_DWORD *)(v25 + 8) = v19;
        return v19;
      }
      if (v26 == (JSC::JSGlobalObject *)-1)
        v27 = (_QWORD *)v25;
      v24 = (v24 + v28) & v20;
      v25 = v10 + 16 * v24;
      v26 = *(JSC::JSGlobalObject **)v25;
      ++v28;
    }
    while (*(_QWORD *)v25);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v25 = (uint64_t)v27;
    }
  }
  *(_QWORD *)v25 = a2;
  *(_DWORD *)(v25 + 8) = v19;
  v29 = *v11;
  if (*v11)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v11;
  if (*v11)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      return v19;
    goto LABEL_32;
  }
  if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v35 = 8;
      goto LABEL_34;
    }
LABEL_32:
    v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
LABEL_34:
    WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,void *>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,void *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(v11, v35, v25, a4, a5, a6, a7, a8);
  }
  return v19;
}

void Inspector::InjectedScriptManager::injectedScriptForObjectId(Inspector::InjectedScriptManager *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF::JSONImpl::ObjectBase *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t Integer;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::HandleSet *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::JSONImpl::ObjectBase *v51;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WTF::JSONImpl::Value::parseJSON(v6, v7, (uint64_t *)&v51);
  v8 = v51;
  if (!v51)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v18 + 8) = "InjectedScript";
    *(_DWORD *)(v18 + 16) = 4;
    a3[3] = 0;
    a3[4] = 0;
    a3[1] = v18;
    a3[2] = 0;
    *(_QWORD *)v18 = 0xE00000002;
    *a3 = &off_1E3591330;
    return;
  }
  v9 = *((_DWORD *)v51 + 1);
  if (v9 < 5)
    goto LABEL_5;
  if (v9 == 5)
  {
    ++*(_DWORD *)v51;
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x1000000002;
    *(_QWORD *)(v19 + 8) = "injectedScriptId";
    *(_DWORD *)(v19 + 16) = 4;
    v50 = (WTF::StringImpl *)v19;
    Integer = WTF::JSONImpl::ObjectBase::getInteger(v8, &v50, v20);
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
    if ((Integer & 0xFF00000000) != 0)
    {
      v22 = *((_QWORD *)this + 1);
      if (!v22)
      {
LABEL_33:
        v39 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)(v39 + 8) = "InjectedScript";
        *(_DWORD *)(v39 + 16) = 4;
        a3[3] = 0;
        a3[4] = 0;
        a3[1] = v39;
        a3[2] = 0;
        *a3 = &off_1E3591330;
        *(_QWORD *)v39 = 0xE00000002;
LABEL_34:
        if (*(_DWORD *)v8 == 1)
          WTF::JSONImpl::Value::operator delete(v8, v11, v12, v13, v14, v15, v16, v17);
        else
          --*(_DWORD *)v8;
        goto LABEL_6;
      }
      v23 = *(_DWORD *)(v22 - 8);
      v24 = 9 * ((~((_DWORD)Integer << 15) + Integer) ^ ((~((_DWORD)Integer << 15) + Integer) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = v23 & (v25 ^ HIWORD(v25));
      v27 = *(_DWORD *)(v22 + 48 * v26);
      if (v27 != (_DWORD)Integer)
      {
        v28 = 1;
        while (v27)
        {
          v26 = (v26 + v28) & v23;
          v27 = *(_DWORD *)(v22 + 48 * v26);
          ++v28;
          if (v27 == (_DWORD)Integer)
            goto LABEL_21;
        }
        goto LABEL_33;
      }
LABEL_21:
      v29 = v22 + 48 * v26;
      v30 = (_QWORD *)(v29 + 8);
      v31 = *(_DWORD **)(v29 + 16);
      if (v31)
        *v31 += 2;
      v33 = v30[2];
      v32 = v30[3];
      a3[1] = v31;
      a3[2] = v33;
      a3[3] = 0;
      if (v32)
      {
        v34 = *(JSC::HandleSet **)(((v32 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v35 = (_QWORD *)*((_QWORD *)v34 + 5);
        if (!v35)
        {
          JSC::HandleSet::grow(v34, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
          v35 = (_QWORD *)*((_QWORD *)v34 + 5);
        }
        *((_QWORD *)v34 + 5) = *v35;
        v35[2] = 0;
        v36 = v35 + 2;
        *v35 = 0;
        v35[1] = 0;
        a3[3] = v35 + 2;
        v37 = (_QWORD *)v30[3];
        if (v37)
        {
          v37 = (_QWORD *)*v37;
          if (v37)
          {
            v48 = *(_QWORD **)(((unint64_t)(v36 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v49 = v48[3];
            v48 += 3;
            *(v36 - 2) = v49;
            *(v36 - 1) = v48;
            *v48 = v36 - 2;
            *(_QWORD *)(v49 + 8) = v36 - 2;
          }
        }
        *v36 = v37;
      }
      a3[4] = v30[4];
    }
    else
    {
      v38 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)(v38 + 8) = "InjectedScript";
      *(_DWORD *)(v38 + 16) = 4;
      a3[3] = 0;
      a3[4] = 0;
      a3[1] = v38;
      a3[2] = 0;
      *(_QWORD *)v38 = 0xE00000002;
    }
    *a3 = &off_1E3591330;
    goto LABEL_34;
  }
  if (v9 != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x19860FC1CLL);
  }
LABEL_5:
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v10 + 8) = "InjectedScript";
  *(_DWORD *)(v10 + 16) = 4;
  a3[3] = 0;
  a3[4] = 0;
  a3[1] = v10;
  a3[2] = 0;
  *(_QWORD *)v10 = 0xE00000002;
  *a3 = &off_1E3591330;
LABEL_6:
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete(v8, v11, v12, v13, v14, v15, v16, v17);
  else
    --*(_DWORD *)v8;
}

void Inspector::InjectedScriptManager::releaseObjectGroup(Inspector::InjectedScriptManager *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    v6 = 0;
    LODWORD(v4) = 0;
LABEL_10:
    v5 = (_DWORD *)(v3 + 48 * v4);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_DWORD *)(v3 + 48 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_DWORD *)(v3 + 48 * v4);
    goto LABEL_10;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v4)
  {
    v7 = 48 * v4;
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    while ((*v6 + 1) <= 1)
    {
      v6 += 12;
      v7 -= 48;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v8 = (_DWORD *)(v3 + 48 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  while (v6 != v8)
  {
    Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v6 + 2), a2);
    v9 = v6 + 12;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((*v6 + 1) <= 1)
      {
        v6 += 12;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
}

void Inspector::InjectedScriptManager::clearEventValue(Inspector::InjectedScriptManager *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
LABEL_10:
    v3 = (_DWORD *)(v1 + 48 * v2);
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_DWORD *)(v1 + 48 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_DWORD *)(v1 + 48 * v2);
    goto LABEL_10;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v2)
  {
    v5 = 48 * v2;
    v4 = (_DWORD *)*((_QWORD *)this + 1);
    while ((*v4 + 1) <= 1)
    {
      v4 += 12;
      v5 -= 48;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = (_DWORD *)(v1 + 48 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  while (v4 != v6)
  {
    Inspector::InjectedScript::clearEventValue((Inspector::InjectedScript *)(v4 + 2));
    v7 = v4 + 12;
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((*v4 + 1) <= 1)
      {
        v4 += 12;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
}

void Inspector::InjectedScriptManager::clearExceptionValue(Inspector::InjectedScriptManager *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
LABEL_10:
    v3 = (_DWORD *)(v1 + 48 * v2);
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_DWORD *)(v1 + 48 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_DWORD *)(v1 + 48 * v2);
    goto LABEL_10;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v2)
  {
    v5 = 48 * v2;
    v4 = (_DWORD *)*((_QWORD *)this + 1);
    while ((*v4 + 1) <= 1)
    {
      v4 += 12;
      v5 -= 48;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = (_DWORD *)(v1 + 48 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  while (v4 != v6)
  {
    Inspector::InjectedScript::clearExceptionValue((Inspector::InjectedScript *)(v4 + 2));
    v7 = v4 + 12;
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((*v4 + 1) <= 1)
      {
        v4 += 12;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
}

void Inspector::InjectedScriptManager::createInjectedScript(Inspector::InjectedScriptHost **this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  unsigned int v10;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  _OWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t *);
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  _OWORD *v67;
  unsigned int v68;
  uint64_t v69[2];

  v10 = a3;
  v14 = *(_QWORD *)(a2 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v66, (JSC::VM *)v14, a3, a4, a5, a6, a7, a8, a10);
  v22 = *(_QWORD *)(a2 + 1960);
  if (*(_DWORD *)v22 <= 0x1Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x1986103C0);
  }
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(v22 + 256);
  if ((v24 & 1) != 0)
  {
    v50 = *(uint64_t (**)(uint64_t *))(v24 & 0xFFFFFFFFFFFFFFFCLL);
    v51 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v51 = (uint64_t *)(a2 - 16);
    v58 = *v51;
    v59 = a2;
    v60 = (_OWORD *)(v22 + 256);
    v24 = v50(&v58);
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v52 = *(_DWORD *)(v14 + 80);
    if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v16, v17, v18, v19, v20, v21);
    v53 = *(_QWORD *)(v14 + 16);
    if (v53)
    {
      *(_QWORD *)a9 = v53;
      *(_DWORD *)(a9 + 8) = 1;
      goto LABEL_33;
    }
  }
  if (!v24)
    goto LABEL_32;
  if (*(_BYTE *)(v24 + 5) != 26)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v63, v24);
    if ((_BYTE)v63)
      goto LABEL_11;
LABEL_32:
    *(_QWORD *)a9 = 0;
    *(_DWORD *)(a9 + 8) = 0;
    goto LABEL_33;
  }
  v25 = *(_QWORD *)(v24 + 24);
  if ((v25 & 1) != 0)
    v25 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v25 + 5) == 8)
  {
    LOBYTE(v63) = 1;
    v64 = *(_QWORD *)(v25 + 40);
    LOBYTE(v65) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE)
                                                                             + 0x4C));
  }
  else
  {
    LOBYTE(v63) = 2;
    v26 = *(_QWORD *)(v24 + 16);
    v64 = v25;
    v65 = v26;
  }
LABEL_11:
  LOBYTE(v58) = 0;
  v59 = 0x800000000;
  v60 = (_OWORD *)((char *)v61 + 8);
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  v27 = Inspector::InjectedScriptHost::wrapper(this[4], a2, 0.0, v16, v17, v18, v19, v20, v21);
  v33 = v27;
  v35 = v59;
  v34 = HIDWORD(v59);
  if ((_DWORD)v59 != HIDWORD(v59))
  {
    if (v60 == (_OWORD *)((char *)v61 + 8) || !v60)
    {
      *((_QWORD *)v60 + v59) = v27;
      v36 = v35 + 1;
      LODWORD(v59) = v36;
      goto LABEL_15;
    }
    goto LABEL_54;
  }
  if (!(v59 >> 30)
    && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v59, 2 * (int)v59))
  {
    v35 = v59;
LABEL_54:
    *((_QWORD *)v60 + v35) = v33;
    LODWORD(v59) = v35 + 1;
    if (!*(_QWORD *)&v61[0] && (v33 & 0xFFFE000000000002) == 0 && v33)
    {
      v56 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v33 & 8) != 0)
        v56 = (_QWORD *)(v33 - 16);
      *(_QWORD *)&v61[0] = *v56 + 560;
      v69[0] = (uint64_t)&v59;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v61[0], v69, v28, v29, v30, v31, v32, (uint64_t)&v67);
    }
    goto LABEL_56;
  }
  LOBYTE(v58) = 1;
LABEL_56:
  v36 = v59;
  v34 = HIDWORD(v59);
LABEL_15:
  if (v36 != v34)
  {
    if (v60 == (_OWORD *)((char *)v61 + 8) || !v60)
    {
      *((_QWORD *)v60 + v36) = v23;
      v37 = v36 + 1;
      LODWORD(v59) = v37;
      goto LABEL_19;
    }
    goto LABEL_62;
  }
  if (!(v34 >> 30) && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v59, 2 * v34))
  {
    v36 = v59;
LABEL_62:
    *((_QWORD *)v60 + v36) = v23;
    LODWORD(v59) = v36 + 1;
    if (!*(_QWORD *)&v61[0] && (v23 & 0xFFFE000000000002) == 0 && v23)
    {
      v57 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v23 & 8) != 0)
        v57 = (_QWORD *)(v23 - 16);
      *(_QWORD *)&v61[0] = *v57 + 560;
      v69[0] = (uint64_t)&v59;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v61[0], v69, v28, v29, v30, v31, v32, (uint64_t)&v67);
    }
    goto LABEL_64;
  }
  LOBYTE(v58) = 1;
LABEL_64:
  v37 = v59;
  v34 = HIDWORD(v59);
LABEL_19:
  v38 = v10 | 0xFFFE000000000000;
  if (v37 != v34)
  {
    v39 = v60;
    if (v60 == (_OWORD *)((char *)v61 + 8) || !v60)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!(v34 >> 30))
  {
    v54 = JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v59, 2 * v34);
    v37 = v59;
    v34 = v59;
    if (!v54)
    {
LABEL_22:
      v39 = v60;
LABEL_23:
      *((_QWORD *)v39 + v37) = v38;
      v34 = v37 + 1;
      LODWORD(v59) = v37 + 1;
      goto LABEL_24;
    }
  }
  LOBYTE(v58) = 1;
  v39 = v60;
LABEL_24:
  v67 = v39;
  v68 = v34;
  v47 = JSC::call((uint64_t *)a2, v24, (unsigned __int8 *)&v63, v23, (uint64_t)&v67, v30, v31, v32);
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_25;
  v55 = *(_DWORD *)(v14 + 80);
  if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v41, v42, v43, v44, v45, v46);
  v49 = *(_QWORD *)(v14 + 16);
  if (v49)
  {
    v48 = 1;
  }
  else
  {
LABEL_25:
    if ((v47 & 0xFFFE000000000002) != 0)
    {
      v49 = 0;
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (*(unsigned __int8 *)(v47 + 5) <= 0x16u)
        v49 = 0;
      else
        v49 = v47;
    }
  }
  *(_QWORD *)a9 = v49;
  *(_DWORD *)(a9 + 8) = v48;
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v59, v40, v41, v42, v43, v44, v45, v46);
LABEL_33:
  JSC::JSLockHolder::~JSLockHolder(&v66, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t Inspector::InjectedScriptHost::subtype()
{
  return 10;
}

uint64_t Inspector::InjectedScriptHost::getInternalProperties()
{
  return 0;
}

uint64_t Inspector::InjectedScriptHost::isHTMLAllCollection()
{
  return 0;
}

void WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  int i;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_DWORD *)*a2 + 4);
  if (v15 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v16 = v15 >> 8;
  v17 = 0;
  for (i = 1; ; ++i)
  {
    v19 = v16 & v14;
    v20 = (WTF::StringImpl **)(v13 + 16 * v19);
    v21 = *v20;
    if (*v20 != (WTF::StringImpl *)-1)
      break;
    v17 = (WTF::StringImpl **)(v13 + 16 * v19);
LABEL_12:
    v16 = i + v19;
  }
  if (!v21)
  {
    if (v17)
    {
      *v17 = 0;
      v17[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v20 = v17;
    }
    v22 = *a2;
    if (*a2)
      *(_DWORD *)v22 += 2;
    *v20 = v22;
    v23 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    v24 = v20[1];
    v20[1] = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete(v24, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v24;
    }
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v29 = *a1;
    if (*a1)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31)
        goto LABEL_31;
    }
    else if (3 * v32 <= 4 * v31)
    {
      if (!(_DWORD)v32)
      {
        v33 = 8;
LABEL_39:
        v20 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v33, (uint64_t)v20, a4, a5, a6, a7, a8);
        v29 = *a1;
        if (*a1)
          v32 = *(unsigned int *)(v29 - 4);
        else
          v32 = 0;
        goto LABEL_42;
      }
LABEL_31:
      v33 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
      goto LABEL_39;
    }
LABEL_42:
    *(_QWORD *)a9 = v20;
    *(_QWORD *)(a9 + 8) = v29 + 16 * v32;
    *(_BYTE *)(a9 + 16) = 1;
    return;
  }
  if (!WTF::equal(v21, *a2, a3))
    goto LABEL_12;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v27 + 16 * v28;
  *(_BYTE *)(a9 + 16) = 0;
  v34 = v13 + 16 * v19;
  v35 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v36 = *(WTF **)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete(v36, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      --*(_DWORD *)v36;
  }
}

void JSC::Yarr::BytecodePattern::~BytecodePattern(JSC::Yarr::BytecodePattern *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::Yarr::CharacterClass **v10;
  uint64_t v11;
  JSC::Yarr::CharacterClass *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v9 = *((unsigned int *)this + 27);
  if ((_DWORD)v9)
  {
    v10 = (JSC::Yarr::CharacterClass **)*((_QWORD *)this + 12);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v21 = *((_QWORD *)this + 12);
  if (v21)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = *((unsigned int *)this + 23);
  if ((_DWORD)v22)
    WTF::VectorDestructor<true,std::unique_ptr<JSC::Yarr::ByteDisjunction>>::destruct(*((unint64_t **)this + 10), (unint64_t *)(*((_QWORD *)this + 10) + 8 * v22), a3, a4, a5, a6, a7, a8);
  v23 = *((_QWORD *)this + 10);
  if (v23)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = *((_QWORD *)this + 6);
  if (v24)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v25)
  {
    v26 = *(_QWORD *)v25;
    if (*(_QWORD *)v25)
    {
      *(_QWORD *)v25 = 0;
      *(_DWORD *)(v25 + 8) = 0;
      WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Yarr::CharacterClass::~CharacterClass(JSC::Yarr::CharacterClass *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *((unsigned int *)this + 3);
  v14 = *(_QWORD *)this;
  if (!(_DWORD)v13)
  {
    if (!v14)
      return;
LABEL_17:
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v15 = 16 * v13;
  do
  {
    v16 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *(_DWORD *)(v14 + 8) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    v14 += 16;
    v15 -= 16;
  }
  while (v15);
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    goto LABEL_17;
}

void WTF::VectorDestructor<true,std::unique_ptr<JSC::Yarr::ByteDisjunction>>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        v11 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *(_DWORD *)(v10 + 8) = 0;
          WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v9;
    }
    while (v9 != a2);
  }
}

void JSC::Yarr::YarrPattern::~YarrPattern(JSC::Yarr::YarrPattern *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  JSC::Yarr::CharacterClass **v15;
  uint64_t v16;
  JSC::Yarr::CharacterClass *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = *((_QWORD *)this + 26);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 14);
  if (v10)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 13);
  if (v11)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((unsigned int *)this + 25);
  if ((_DWORD)v12)
  {
    v27 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    v28 = 8 * v12;
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::~StringImpl(v29, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v29 -= 2;
        }
      }
      ++v27;
      v28 -= 8;
    }
    while (v28);
  }
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((unsigned int *)this + 21);
  if ((_DWORD)v14)
  {
    v15 = (JSC::Yarr::CharacterClass **)*((_QWORD *)this + 9);
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        JSC::Yarr::CharacterClass::~CharacterClass(v17, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = a1;
  v9 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v9)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
      a1 += 3;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree((unint64_t)(v8 - 2), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::Yarr::PatternDisjunction>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)a1;
    v11 = *(_QWORD *)a1 + 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v13)
        {
          v14 = *(unint64_t **)v12;
          v15 = 8 * v13;
          do
          {
            v16 = *v14;
            *v14 = 0;
            if (v16)
            {
              v17 = *(_QWORD *)v16;
              if (*(_QWORD *)v16)
              {
                *(_QWORD *)v16 = 0;
                *(_DWORD *)(v16 + 8) = 0;
                WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
              }
              WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
            }
            ++v14;
            v15 -= 8;
          }
          while (v15);
        }
        v18 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v10;
    }
    while (v10 != (unint64_t *)v11);
  }
  v19 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v19 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE **)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v8 = *a2;
    v9 = *a2;
    do
    {
      ++v7;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
    if ((v7 & 0x80000000) == 0)
    {
      v11 = (v6 + v7);
      if (!__OFADD__((_DWORD)v6, v7))
      {
        if (!(_DWORD)v11)
        {
          v12 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_16;
        }
        if ((v11 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20), v15);
          v12 = (int *)v15[0];
          if (v15[0])
          {
            v13 = (_BYTE *)(v15[0] + 20);
            *(_DWORD *)v15[0] = 2;
            v12[1] = v11;
            *((_QWORD *)v12 + 1) = v12 + 5;
            v12[4] = 4;
            if ((_DWORD)v6 == 1)
            {
              *v13 = *v5;
            }
            else if ((_DWORD)v6)
            {
              result = (uint64_t)memcpy(v12 + 5, v5, v6);
            }
            v14 = 0;
            do
            {
              *((_BYTE *)&v15[3] + v14--) = (v8 % 0xA) | 0x30;
              v10 = v8 > 9;
              v8 /= 0xAuLL;
            }
            while (v10);
            if (v14 + 26 <= 25)
              result = (uint64_t)memcpy(&v13[v6], (char *)&v15[3] + v14 + 1, -v14);
          }
          goto LABEL_16;
        }
      }
    }
    v12 = 0;
LABEL_16:
    *a3 = v12;
    return result;
  }
  v6 = v4 - 1;
  if (!((unint64_t)(v4 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::~HashTable(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v9 = *a1;
  if (*a1)
  {
    v11 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v11)
    {
      v12 = v9 + 16;
      do
      {
        if (*(_DWORD *)(v12 - 16) != -1)
        {
          *(_QWORD *)(v12 - 8) = &off_1E3591350;
          v13 = *(_QWORD *)(v12 + 16);
          if (v13)
          {
            v23 = (uint64_t *)(v13 - 16);
            v24 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v25 = *(uint64_t **)(v13 - 8);
            if (v25)
            {
              v26 = *v23;
              *v25 = *v23;
              *(_QWORD *)(v26 + 8) = v25;
              *v23 = 0;
              v23[1] = 0;
            }
            *v23 = *(_QWORD *)(v24 + 40);
            *(_QWORD *)(v24 + 40) = v23;
            *(_QWORD *)(v12 + 16) = 0;
          }
          v14 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
        v12 += 48;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = a1 + 16;
    do
    {
      if (*(_DWORD *)(v10 - 16) != -1)
      {
        *(_QWORD *)(v10 - 8) = &off_1E3591350;
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v21 = (uint64_t *)(v11 - 16);
          v22 = *(_QWORD *)(((v11 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v23 = *(uint64_t **)(v11 - 8);
          if (v23)
          {
            v24 = *v21;
            *v23 = *v21;
            *(_QWORD *)(v24 + 8) = v23;
            *v21 = 0;
            v21[1] = 0;
          }
          *v21 = *(_QWORD *)(v22 + 40);
          *(_QWORD *)(v22 + 40) = v21;
          *(_QWORD *)(v10 + 16) = 0;
        }
        v12 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::RefCounted<Inspector::ScriptCallStack>::deref(Inspector::ScriptCallStack *a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 == 1)
  {
    Inspector::ScriptCallStack::~ScriptCallStack(a1);
    WTF::fastFree(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

void WTF::RefCounted<Inspector::ScriptArguments>::deref(Inspector::ScriptArguments *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)a1 == 1)
  {
    Inspector::ScriptArguments::~ScriptArguments(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::AtomStringImpl *v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<WTF::JSONLogValue>::destruct(*(WTF::AtomStringImpl **)a1, (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 16 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(WTF::AtomStringImpl **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<WTF::JSONLogValue>::destruct(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v9 = (WTF::StringImpl **)a1;
    do
    {
      v10 = v9[1];
      v9[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v9 += 2;
    }
    while (v9 != (WTF::StringImpl **)a2);
  }
}

_QWORD **JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::Strong(_QWORD **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;

  v9 = *(_QWORD **)(a2 + 712);
  if (!v9)
  {
    v11 = a2;
    v12 = a3;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), a2, a3, a4, a5, a6, a7, a8);
    a2 = v11;
    a3 = v12;
    v9 = *(_QWORD **)(v11 + 712);
  }
  *(_QWORD *)(a2 + 712) = *v9;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  *a1 = v9 + 2;
  JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::set(a1, a3);
  return a1;
}

_QWORD **JSC::Strong<JSC::JSGlobalObject,(JSC::ShouldStrongDestructorGrabLock)0>::set(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *result;
  v3 = (uint64_t)(*result - 2);
  if ((a2 != 0) != (**result != 0))
  {
    if (a2)
    {
      v4 = *(uint64_t **)((v3 & 0xFFFFFFFFFFFFF000) + 0x10);
      v5 = v4[3];
      v4 += 3;
      *(_QWORD *)v3 = v5;
      *(_QWORD *)(v3 + 8) = v4;
      *v4 = v3;
      *(_QWORD *)(v5 + 8) = v3;
    }
    else
    {
      v7 = *(_QWORD *)v3;
      v6 = (_QWORD *)*(*result - 1);
      *v6 = *(_QWORD *)v3;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v2 = *result;
    }
  }
  *v2 = a2;
  return result;
}

unint64_t WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7 + 16 * v8;
        v19 = v7;
        do
        {
          *(_DWORD *)v17 = *(_DWORD *)v19;
          v20 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v17 + 8) = v20;
          v21 = *(WTF::StringImpl **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl(v21, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
          v19 += 16;
          v17 += 16;
        }
        while (v19 != v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, int **a4@<X8>)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if (v5 < 0)
    {
LABEL_9:
      *a4 = 0;
      return result;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    goto LABEL_9;
  v6 = __OFADD__(v7, 1);
  v8 = (v7 + 1);
  if (v6)
    goto LABEL_9;
  v9 = !v4 || (*(_BYTE *)(v4 + 16) & 4) != 0;
  return (char *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v8, v9, *result, v4, *a3, a4);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v14);
        v11 = (int *)v14;
        if (v14)
        {
          *(_BYTE *)(v14 + 20) = a3;
          *v11 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          v14 = a4;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v14, (char *)v11 + 21);
          v12 = v14;
          if (v14)
            v12 = *(unsigned int *)(v14 + 4);
          *((_BYTE *)v11 + v12 + 21) = a5;
        }
        goto LABEL_8;
      }
LABEL_14:
      v11 = 0;
      goto LABEL_8;
    }
LABEL_13:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_8;
  }
  if (!(_DWORD)result)
    goto LABEL_13;
  if (result > 0x7FFFFFEF)
    goto LABEL_14;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v14);
  v11 = (int *)v14;
  if (v14)
  {
    v13 = (_WORD *)(v14 + 20);
    *(_DWORD *)v14 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v13, a3, a4, a5);
  }
LABEL_8:
  *a6 = v11;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(_WORD *result, char a2, uint64_t a3, char a4)
{
  _WORD *v5;
  int8x16_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  uint64_t v20;
  int8x16x2_t v21;
  int8x16x2_t v22;
  int8x16x2_t v23;

  *result = a2;
  v5 = result + 1;
  if (a3)
  {
    v7 = *(int8x16_t **)(a3 + 8);
    v8 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v9 = (char *)&v5[v8];
      if (v8 >= 0x40)
      {
        v10 = (char *)&v5[v8 & 0xFFFFFFC0];
        v11 = 0uLL;
        v12 = (char *)(result + 1);
        do
        {
          v21.val[0] = *v7;
          v13 = v7[1];
          v22.val[0] = v7[2];
          v14 = v7[3];
          v7 += 4;
          v15 = v14;
          v22.val[1] = 0uLL;
          v23.val[0] = v13;
          v21.val[1] = 0uLL;
          v16 = v12;
          vst2q_s8(v16, v21);
          v16 += 32;
          v23.val[1] = 0uLL;
          vst2q_s8(v16, v23);
          v17 = v12 + 64;
          vst2q_s8(v17, v22);
          v18 = v12 + 96;
          vst2q_s8(v18, *(int8x16x2_t *)(&v11 - 1));
          v12 += 128;
        }
        while (v12 != v10);
      }
      else
      {
        v10 = (char *)(result + 1);
      }
      while (v10 != v9)
      {
        v19 = v7->u8[0];
        v7 = (int8x16_t *)((char *)v7 + 1);
        *(_WORD *)v10 = v19;
        v10 += 2;
      }
    }
    else if ((_DWORD)v8 == 1)
    {
      *v5 = v7->i16[0];
    }
    else if ((_DWORD)v8)
    {
      result = memcpy(result + 1, v7, 2 * v8);
    }
    v20 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v20 = 0;
  }
  v5[v20] = a4;
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  char *v5;
  char *v6;
  unsigned __int128 v7;
  char v8;

  v2 = *result;
  if (*result)
  {
    v3 = *(char **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v4 == 1)
      {
        *__dst = *v3;
      }
      else if ((_DWORD)v4)
      {
        return (uint64_t *)memcpy(__dst, v3, v4);
      }
    }
    else
    {
      v5 = &__dst[v4];
      if (v4 >= 0x10)
      {
        v6 = &__dst[v4 & 0xFFFFFFF0];
        do
        {
          v7 = (unsigned __int128)vld2q_s8(v3);
          v3 += 32;
          *(_OWORD *)__dst = v7;
          __dst += 16;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v8 = *v3;
        v3 += 2;
        *__dst++ = v8;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::InjectedScriptBase::makeAsyncCall(Inspector::ScriptFunctionCall &,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)> &&)::$_0,long long,JSC::JSGlobalObject *,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)>::CallFrame *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E35913B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::InjectedScriptBase::makeAsyncCall(Inspector::ScriptFunctionCall &,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)> &&)::$_0,long long,JSC::JSGlobalObject *,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)>::CallFrame *>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E35913B0;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<Inspector::InjectedScriptBase::makeAsyncCall(Inspector::ScriptFunctionCall &,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)> &&)::$_0,long long,JSC::JSGlobalObject *,WTF::Function<void ()(WTF::String &,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<Inspector::Protocol::Runtime::RemoteObject>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Runtime::RemoteObject>> &&,std::optional<BOOL> &&,std::__1<int> &&)>::CallFrame *>::call(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int *v63;

  v9 = (_QWORD *)(a1 + 8);
  if (!a3)
  {
    WTF::tryFastCompactMalloc((WTF *)0x32, &v63);
    v30 = v63;
    if (v63)
    {
      *(_QWORD *)v63 = 0x1E00000002;
      *((_QWORD *)v30 + 1) = v30 + 5;
      v30[4] = 4;
      qmemcpy(v30 + 5, "Exception while making a call.", 30);
      goto LABEL_13;
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x1986118D4);
  }
  if (*(_DWORD *)(a3 + 32) == 1)
    v11 = 10;
  else
    v11 = *(_QWORD *)(a3 + 48);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v63, a2, a3, a4, a5, a6, a7, a8, a9);
  Inspector::jsToInspectorValue((uint64_t *)&v62, a2, v11, 1000, v12, v13, v14, v15, v16);
  JSC::JSLockHolder::~JSLockHolder(&v63, v17, v18, v19, v20, v21, v22, v23);
  v30 = v62;
  if (!v62)
  {
    WTF::tryFastCompactMalloc((WTF *)0x56, &v63);
    v30 = v63;
    if (v63)
    {
      *(_QWORD *)v63 = 0x4200000002;
      qmemcpy(v30 + 5, "Object has too long reference chain (must not be longer than 1000)", 66);
      *((_QWORD *)v30 + 1) = v30 + 5;
      v30[4] = 4;
LABEL_13:
      v40 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = 0x400000001;
      *(_QWORD *)(v40 + 8) = v30;
      *v30 += 2;
      v63 = (unsigned int *)v40;
      Inspector::InjectedScriptBase::checkAsyncCallResult(v40, (WTF **)&v63, v9, v41, v42, v43, v44, v45);
      if (*(_DWORD *)v40 == 1)
        WTF::JSONImpl::Value::operator delete((WTF *)v40, v46, v47, v48, v49, v50, v51, v52);
      else
        --*(_DWORD *)v40;
      v39 = *v30 - 2;
      if (*v30 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v30, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        return 10;
      }
      goto LABEL_16;
    }
    __break(0xC471u);
    goto LABEL_24;
  }
  ++*v62;
  v63 = v30;
  Inspector::InjectedScriptBase::checkAsyncCallResult(v24, (WTF **)&v63, v9, v25, v26, v27, v28, v29);
  v38 = *v30 - 1;
  if (*v30 == 1)
  {
    WTF::JSONImpl::Value::operator delete((WTF *)v30, v31, v32, v33, v34, v35, v36, v37);
    v38 = *v30;
  }
  else
  {
    *v30 = v38;
  }
  v39 = v38 - 1;
  if (v39)
  {
LABEL_16:
    *v30 = v39;
    return 10;
  }
  WTF::JSONImpl::Value::operator delete((WTF *)v30, v31, v32, v33, v34, v35, v36, v37);
  return 10;
}

void WTF::HashTable<int,WTF::KeyValuePair<int,Inspector::InjectedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,Inspector::InjectedScript>>,WTF::DefaultHash<int>,WTF::HashMap<int,Inspector::InjectedScript,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<Inspector::InjectedScript>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void (**v8)(Inspector::InjectedScriptBase *__hidden);
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  _QWORD *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::StringImpl **v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD **v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v112;

  v4 = *a1;
  v112 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0;
      v19 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)(v19 + 8) = "InjectedScript";
      *(_DWORD *)(v19 + 16) = 4;
      v18[3] = 0;
      v18[4] = 0;
      v18[1] = v19;
      v18[2] = 0;
      *v18 = &off_1E3591330;
      v18 += 6;
      *(_QWORD *)v19 = 0xE00000002;
      --v17;
    }
    while (v17);
  }
  v21 = a1;
  v20 = v112;
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v22 = 0;
    v23 = 0;
    v24 = v5;
    v8 = &off_1E3591350;
    v110 = v5;
    do
    {
      v9 = (_DWORD *)(v20 + 48 * v22);
      v25 = *v9;
      if (*v9 != -1)
      {
        if (v25)
        {
          v32 = *v21;
          if (*v21)
            v33 = *(_DWORD *)(v32 - 8);
          else
            v33 = 0;
          v34 = 0;
          v35 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
          v36 = ((v35 ^ (v35 >> 6)) + ~((v35 ^ (v35 >> 6)) << 11)) ^ (((v35 ^ (v35 >> 6)) + ~((v35 ^ (v35 >> 6)) << 11)) >> 16);
          do
          {
            v37 = v36 & v33;
            v38 = (_DWORD *)(v32 + 48 * (v36 & v33));
            v36 = ++v34 + (v36 & v33);
          }
          while (*v38);
          v39 = v32 + 48 * v37;
          *(_QWORD *)(v39 + 8) = &off_1E3591350;
          v40 = (_QWORD *)(v39 + 8);
          v42 = v40 + 3;
          v41 = v40[3];
          if (v41)
          {
            v98 = (uint64_t *)(v41 - 16);
            v99 = *(_QWORD *)(((v41 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v100 = *(uint64_t **)(v41 - 8);
            if (v100)
            {
              v101 = *v98;
              *v100 = *v98;
              *(_QWORD *)(v101 + 8) = v100;
              *v98 = 0;
              v98[1] = 0;
            }
            *v98 = *(_QWORD *)(v99 + 40);
            *(_QWORD *)(v99 + 40) = v98;
            *v42 = 0;
          }
          v43 = v32 + 48 * v37;
          v46 = *(WTF::StringImpl **)(v43 + 16);
          v45 = (_QWORD *)(v43 + 16);
          v44 = v46;
          *v45 = 0;
          if (v46)
          {
            if (*(_DWORD *)v44 == 2)
            {
              v74 = v23;
              v75 = (_DWORD *)(v20 + 48 * v22);
              WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)&off_1E3591350, (uint64_t)v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
              v9 = v75;
              v8 = &off_1E3591350;
              v24 = v110;
              v21 = a1;
              v23 = v74;
              v20 = v112;
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          *v38 = *v9;
          *v40 = &off_1E3591350;
          v47 = v20 + 48 * v22;
          v50 = *(_DWORD **)(v47 + 16);
          v49 = (WTF::StringImpl **)(v47 + 16);
          v48 = v50;
          if (v50)
            *v48 += 2;
          *v45 = v48;
          v51 = v20 + 48 * v22;
          *v42 = 0;
          v54 = *(_QWORD **)(v51 + 32);
          v53 = (_QWORD **)(v51 + 32);
          v52 = v54;
          *(_QWORD *)(v32 + 48 * v37 + 24) = *(v53 - 1);
          if (v54)
          {
            v55 = (unint64_t)(v52 - 2) & 0xFFFFFFFFFFFFF000;
            v56 = *(_QWORD *)(v55 + 16);
            v57 = *(_QWORD **)(v56 + 40);
            if (!v57)
            {
              v108 = v9;
              v109 = v23;
              JSC::HandleSet::grow(*(JSC::HandleSet **)(v55 + 16), (uint64_t)&off_1E3591350, (unint64_t)v9, v10, v11, v12, v13, v14);
              v9 = v108;
              v23 = v109;
              v8 = &off_1E3591350;
              v24 = v110;
              v21 = a1;
              v20 = v112;
              v57 = *(_QWORD **)(v56 + 40);
            }
            *(_QWORD *)(v56 + 40) = *v57;
            v57[2] = 0;
            v58 = v57 + 2;
            *v57 = 0;
            v57[1] = 0;
            *v42 = v57 + 2;
            v59 = *v53;
            if (*v53)
              v59 = (_QWORD *)*v59;
            v60 = (unint64_t)(v58 - 2);
            if ((v59 != 0) != (*v58 != 0))
            {
              if (v59)
              {
                v61 = *(unint64_t **)((v60 & 0xFFFFFFFFFFFFF000) + 0x10);
                v62 = v61[3];
                v61 += 3;
                *(_QWORD *)v60 = v62;
                *(v58 - 1) = v61;
                *v61 = v60;
                *(_QWORD *)(v62 + 8) = v60;
              }
              else
              {
                v107 = *(_QWORD *)v60;
                v106 = (_QWORD *)*(v58 - 1);
                *v106 = *(_QWORD *)v60;
                *(_QWORD *)(v107 + 8) = v106;
                *(_QWORD *)v60 = 0;
                *(_QWORD *)(v60 + 8) = 0;
                v58 = (_QWORD *)*v42;
              }
            }
            *v58 = v59;
            v52 = *v53;
          }
          v63 = v20 + 48 * v22;
          *(_QWORD *)(v32 + 48 * v37 + 40) = *(_QWORD *)(v63 + 40);
          *v40 = &off_1E3591330;
          *(_QWORD *)(v63 + 8) = &off_1E3591350;
          if (v52)
          {
            v102 = v52 - 2;
            v103 = *(_QWORD *)(((unint64_t)(v52 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v104 = (uint64_t *)*(v52 - 1);
            if (v104)
            {
              v105 = *v102;
              *v104 = *v102;
              *(_QWORD *)(v105 + 8) = v104;
              *v102 = 0;
              v102[1] = 0;
            }
            *v102 = *(_QWORD *)(v103 + 40);
            *(_QWORD *)(v103 + 40) = v102;
            *v53 = 0;
          }
          v64 = *v49;
          *v49 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
            {
              v84 = v23;
              v85 = v9;
              WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)&off_1E3591350, (uint64_t)v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
              v9 = v85;
              v8 = &off_1E3591350;
              v24 = v110;
              v21 = a1;
              v23 = v84;
              v20 = v112;
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
          }
          if (v9 == a3)
            v23 = v38;
        }
        else
        {
          v26 = v20 + 48 * v22;
          v29 = *(_QWORD *)(v26 + 32);
          v27 = (_QWORD *)(v26 + 32);
          v28 = v29;
          *(v27 - 3) = &off_1E3591350;
          if (v29)
          {
            v94 = (uint64_t *)(v28 - 16);
            v95 = *(_QWORD *)(((v28 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v96 = *(uint64_t **)(v28 - 8);
            if (v96)
            {
              v97 = *v94;
              *v96 = *v94;
              *(_QWORD *)(v97 + 8) = v96;
              *v94 = 0;
              v94[1] = 0;
            }
            *v94 = *(_QWORD *)(v95 + 40);
            *(_QWORD *)(v95 + 40) = v94;
            *v27 = 0;
          }
          v30 = v20 + 48 * v22;
          v31 = *(WTF::StringImpl **)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              v65 = v23;
              WTF::StringImpl::~StringImpl(v31, (WTF::AtomStringImpl *)&off_1E3591350, (uint64_t)v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
              v8 = &off_1E3591350;
              v24 = v110;
              v21 = a1;
              v23 = v65;
              v20 = v112;
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else if (!v112)
  {
    return;
  }
  WTF::fastFree(v20 - 16, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
}

_QWORD **JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(_QWORD **result, uint64_t **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2)
  {
    v11 = *v8;
    v10 = (unint64_t)(v8 - 2);
    v9 = v11;
    v12 = *result;
    if (!*result)
    {
      v13 = **(_QWORD **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v14 = *(_QWORD **)(v13 + 712);
      if (!v14)
      {
        v27 = v9;
        v25 = v13;
        v26 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(v13 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v13 = v25;
        result = v26;
        v9 = v27;
        v14 = *(_QWORD **)(v25 + 712);
      }
      *(_QWORD *)(v13 + 712) = *v14;
      v14[2] = 0;
      v12 = v14 + 2;
      *v14 = 0;
      v14[1] = 0;
      *result = v14 + 2;
    }
    v15 = (unint64_t)(v12 - 2);
    if ((v9 != 0) != (*v12 != 0))
    {
      if (v9)
      {
        v16 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
        v17 = v16[3];
        v16 += 3;
        *(_QWORD *)v15 = v17;
        *(v12 - 1) = v16;
        *v16 = v15;
        *(_QWORD *)(v17 + 8) = v15;
      }
      else
      {
        v24 = *(_QWORD *)v15;
        v23 = (_QWORD *)*(v12 - 1);
        *v23 = *(_QWORD *)v15;
        *(_QWORD *)(v24 + 8) = v23;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        v12 = *result;
      }
    }
    *v12 = v9;
  }
  else
  {
    v18 = *result;
    if (*result)
    {
      v19 = v18 - 2;
      v20 = *(_QWORD *)(((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = (uint64_t *)*(v18 - 1);
      if (v21)
      {
        v22 = *v19;
        *v21 = *v19;
        *(_QWORD *)(v22 + 8) = v21;
        *v19 = 0;
        v19[1] = 0;
      }
      *v19 = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;
      *result = 0;
    }
  }
  return result;
}

_QWORD *Inspector::InjectedScriptModule::InjectedScriptModule(_QWORD *this, const WTF::String *a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  this[3] = 0;
  this[4] = 0;
  this[1] = v2;
  this[2] = 0;
  *this = off_1E3591410;
  return this;
}

void Inspector::InjectedScriptModule::~InjectedScriptModule(Inspector::InjectedScriptModule *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_1E3591350;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v19 = (uint64_t *)(v9 - 16);
    v20 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v21 = *(uint64_t **)(v9 - 8);
    if (v21)
    {
      v22 = *v19;
      *v21 = *v19;
      *(_QWORD *)(v22 + 8) = v21;
      *v19 = 0;
      v19[1] = 0;
    }
    *v19 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;
    *((_QWORD *)this + 3) = 0;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void Inspector::InjectedScriptModule::ensureInjected(Inspector::InjectedScriptModule *this, Inspector::InjectedScriptManager *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (**v36)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v37;
  uint64_t v38;

  Inspector::InjectedScriptManager::injectedScriptFor((uint64_t)a2, a3, (unint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v36);
  Inspector::InjectedScriptModule::ensureInjected(this, a2, (const Inspector::InjectedScript *)&v36, v10, v11, v12, v13, v14, v15);
  v36 = &off_1E3591350;
  if (v38)
  {
    v32 = (uint64_t *)(v38 - 16);
    v33 = *(_QWORD *)(((v38 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v34 = *(uint64_t **)(v38 - 8);
    if (v34)
    {
      v35 = *v32;
      *v34 = *v32;
      *(_QWORD *)(v35 + 8) = v34;
      *v32 = 0;
      v32[1] = 0;
    }
    *v32 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v33 + 40) = v32;
    v38 = 0;
  }
  v23 = v37;
  v37 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

void Inspector::InjectedScriptModule::ensureInjected(Inspector::InjectedScriptModule *this, Inspector::InjectedScriptManager *a2, const Inspector::InjectedScript *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  unsigned int v85;
  _OWORD *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  const WTF::String *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int8x16_t v161;
  float v162;
  char v163;
  unint64_t v164;
  JSC::JSGlobalObject *v165;
  int *v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  const WTF::String *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int8x16_t v208;
  float v209;
  char v210;
  unint64_t v211;
  JSC::JSGlobalObject *v212;
  int *v213;
  _DWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  _OWORD *v250;
  _OWORD v251[4];
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  WTF::StringImpl *v256;
  _DWORD *v257;
  uint64_t v258;
  int v259;
  char v260[8];
  _QWORD v261[13];
  _QWORD *v262;
  WTF::StringImpl *v263;
  unsigned int *v264;
  uint64_t v265;
  int v266;
  int *v267[2];

  v9 = (_QWORD *)*((_QWORD *)a3 + 3);
  if (!v9 || !*v9)
    return;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v264, *((JSC::JSGlobalObject **)a3 + 2), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v14 = *((_QWORD *)a3 + 2);
  v13 = (uint64_t *)*((_QWORD *)a3 + 3);
  if (v13)
    v15 = *v13;
  else
    v15 = 0;
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x1100000002;
  *(_QWORD *)(v16 + 8) = "hasInjectedModule";
  *(_DWORD *)(v16 + 16) = 4;
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 32))(*((_QWORD *)a2 + 3));
  v260[0] = 0;
  v261[0] = 0x800000000;
  v261[1] = &v261[3];
  v261[11] = v14;
  v25 = 0.0;
  memset(&v261[2], 0, 72);
  v261[12] = v17;
  v26 = *(_QWORD *)(v14 + 56);
  v27 = *(_QWORD *)(v26 + 712);
  if (!v27)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v26 + 672), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    v27 = *(_QWORD *)(v26 + 712);
  }
  *(_QWORD *)(v26 + 712) = *(_QWORD *)v27;
  *(_QWORD *)(v27 + 16) = 0;
  v28 = (_QWORD *)(v27 + 16);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  v262 = (_QWORD *)(v27 + 16);
  if ((v15 != 0) != (*(_QWORD *)(v27 + 16) != 0))
  {
    if (v15)
    {
      v29 = *(unint64_t **)((v27 & 0xFFFFFFFFFFFFF000) + 0x10);
      v30 = v29[3];
      v29 += 3;
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
      *v29 = v27;
      *(_QWORD *)(v30 + 8) = v27;
    }
    else
    {
      v147 = *(_QWORD *)v27;
      v146 = *(_QWORD **)(v27 + 8);
      *v146 = *(_QWORD *)v27;
      *(_QWORD *)(v147 + 8) = v146;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      v28 = v262;
    }
  }
  *v28 = v15;
  v31 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  v263 = (WTF::StringImpl *)v16;
  if (v31)
  {
    *(_DWORD *)v16 = v31;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  v32 = (uint64_t *)((char *)this + 8);
  Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)v260, (Inspector::InjectedScriptModule *)((char *)this + 8), v19, v20, v21, v22, v23, v24, v25);
  Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)a3, (WTF::AtomStringImpl *)v260, v33, v34, v35, v36, v37, v38, (uint64_t)&v258, v39);
  if (v259)
  {
    if (v259 == 1)
    {
      v150 = v258;
      if (!*(_DWORD *)(v258 + 28))
        goto LABEL_88;
      goto LABEL_85;
    }
LABEL_84:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
    v151 = *(_QWORD *)(v150 + 16);
    v152 = *(_QWORD *)(v151 + 8);
    if (v152)
    {
      v153 = *(_DWORD *)(v151 + 32) >> 2;
      v154 = *(_QWORD *)(v152 + 56);
      if (v153 >= *(_DWORD *)(*(_QWORD *)(v154 + 80) + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x198612A08);
      }
      JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v154 + 160), v153);
    }
LABEL_88:
    WTF::String::utf8(v32, 0, v42, v43, v44, v45, v46, &v248, v47);
    if (v248)
      v163 = v248 + 16;
    else
      v163 = 0;
    v164 = *(_QWORD *)(v258 + 8);
    v257 = (_DWORD *)v164;
    v165 = (JSC::JSGlobalObject *)*((_QWORD *)a3 + 2);
    if ((v164 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v164 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v257, v165, v155, v156, v157, v158, v159, v160, v267);
LABEL_97:
      WTF::String::utf8((uint64_t *)v267, 0, v156, v157, v158, v159, v160, &v265, v162);
      v167 = (_DWORD *)v265;
      WTFLogAlways("Error when calling 'hasInjectedModule' for '%s': %s (%d:%d)\n", v168, v169, v170, v171, v172, v173, v174, v163);
      if (v167)
      {
        if (*v167 == 1)
          WTF::fastFree((unint64_t)v167, v175, v176, v177, v178, v179, v180, v181);
        else
          --*v167;
      }
      v182 = (WTF::StringImpl *)v267[0];
      v267[0] = 0;
      if (v182)
      {
        if (*(_DWORD *)v182 == 2)
        {
          WTF::StringImpl::~StringImpl(v182, (WTF::AtomStringImpl *)v175, v176, v177, v178, v179, v180, v181);
          WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
        }
        else
        {
          *(_DWORD *)v182 -= 2;
        }
      }
      WTF::CString::~CString((WTF::CString *)&v248, v175, v176, v177, v178, v179, v180, v181);
      __break(0xC471u);
      JUMPOUT(0x198612780);
    }
    v166 = *(int **)(v164 + 8);
    if ((v166 & 1) != 0)
    {
      v166 = *JSC::JSRopeString::resolveRope(v164, v165, (uint64_t)v155, v156, v161, v157, v158, v159, v160);
      if (!v166)
        goto LABEL_96;
    }
    else if (!v166)
    {
LABEL_96:
      v267[0] = v166;
      goto LABEL_97;
    }
    *v166 += 2;
    goto LABEL_96;
  }
  if (v258 != 7)
  {
    if (!v258)
    {
      WTF::String::utf8((uint64_t *)this + 1, 0, v42, v43, v44, v45, v46, &v248, v47);
      if (v248)
        v190 = v248 + 16;
      else
        v190 = 0;
      WTFLogAlways("VM is terminated when calling 'injectModule' for '%s'\n", v183, v184, v185, v186, v187, v188, v189, v190);
      WTF::CString::~CString((WTF::CString *)&v248, v191, v192, v193, v194, v195, v196, v197);
      __break(0xC471u);
      JUMPOUT(0x1986127D8);
    }
    v49 = *((_QWORD *)a3 + 2);
    v48 = (uint64_t *)*((_QWORD *)a3 + 3);
    if (v48)
      v50 = *v48;
    else
      v50 = 0;
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0xC00000002;
    *(_QWORD *)(v51 + 8) = "injectModule";
    *(_DWORD *)(v51 + 16) = 4;
    v52 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 32))(*((_QWORD *)a2 + 3));
    LOBYTE(v248) = 0;
    v249 = 0x800000000;
    v250 = (_OWORD *)((char *)v251 + 8);
    v60 = 0.0;
    memset(v251, 0, sizeof(v251));
    v252 = 0;
    v253 = v49;
    v254 = v52;
    v61 = *(_QWORD *)(v49 + 56);
    v62 = *(_QWORD *)(v61 + 712);
    if (!v62)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v61 + 672), (uint64_t)v53, v54, v55, v56, v57, v58, v59);
      v62 = *(_QWORD *)(v61 + 712);
    }
    *(_QWORD *)(v61 + 712) = *(_QWORD *)v62;
    *(_QWORD *)(v62 + 16) = 0;
    v63 = (_QWORD *)(v62 + 16);
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 8) = 0;
    v255 = (_QWORD *)(v62 + 16);
    if ((v50 != 0) != (*(_QWORD *)(v62 + 16) != 0))
    {
      if (v50)
      {
        v64 = *(unint64_t **)((v62 & 0xFFFFFFFFFFFFF000) + 0x10);
        v65 = v64[3];
        v64 += 3;
        *(_QWORD *)v62 = v65;
        *(_QWORD *)(v62 + 8) = v64;
        *v64 = v62;
        *(_QWORD *)(v65 + 8) = v62;
      }
      else
      {
        v149 = *(_QWORD *)v62;
        v148 = *(_QWORD **)(v62 + 8);
        *v148 = *(_QWORD *)v62;
        *(_QWORD *)(v149 + 8) = v148;
        *(_QWORD *)v62 = 0;
        *(_QWORD *)(v62 + 8) = 0;
        v63 = v255;
      }
    }
    *v63 = v50;
    v66 = *(_DWORD *)v51;
    *(_DWORD *)v51 += 2;
    v256 = (WTF::StringImpl *)v51;
    if (v66)
    {
      *(_DWORD *)v51 = v66;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v51, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    Inspector::ScriptCallArgumentHandler::appendArgument((Inspector::ScriptCallArgumentHandler *)&v248, (Inspector::InjectedScriptModule *)((char *)this + 8), v54, v55, v56, v57, v58, v59, v60);
    v67 = (*(uint64_t (**)(Inspector::InjectedScriptModule *, _QWORD))(*(_QWORD *)this + 16))(this, *((_QWORD *)a3 + 2));
    v73 = v67;
    v74 = v249;
    if ((_DWORD)v249 == HIDWORD(v249))
    {
      if (v249 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v249, 2 * (int)v249))
      {
        LOBYTE(v248) = 1;
        goto LABEL_30;
      }
      v74 = v249;
      v75 = v250;
    }
    else
    {
      v75 = v250;
      if (v250 == (_OWORD *)((char *)v251 + 8) || !v250)
      {
        *((_QWORD *)v250 + v249) = v67;
        LODWORD(v249) = v74 + 1;
        goto LABEL_30;
      }
    }
    *((_QWORD *)v75 + v74) = v73;
    LODWORD(v249) = v74 + 1;
    if (!*(_QWORD *)&v251[0] && (v73 & 0xFFFE000000000002) == 0 && v73)
    {
      if ((v73 & 8) != 0)
        v144 = (_QWORD *)(v73 - 16);
      else
        v144 = (_QWORD *)(v73 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v251[0] = *v144 + 560;
      v267[0] = (int *)&v249;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v251[0], (uint64_t *)v267, v68, v69, v70, v71, v72, (uint64_t)&v265);
    }
LABEL_30:
    v76 = (*(uint64_t (**)(Inspector::InjectedScriptModule *, Inspector::InjectedScriptManager *, _QWORD))(*(_QWORD *)this + 24))(this, a2, *((_QWORD *)a3 + 2));
    v84 = v76;
    v85 = v249;
    if ((_DWORD)v249 == HIDWORD(v249))
    {
      if (v249 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v249, 2 * (int)v249))
      {
        LOBYTE(v248) = 1;
        goto LABEL_34;
      }
      v85 = v249;
      v86 = v250;
    }
    else
    {
      v86 = v250;
      if (v250 == (_OWORD *)((char *)v251 + 8) || !v250)
      {
        *((_QWORD *)v250 + v249) = v76;
        LODWORD(v249) = v85 + 1;
        goto LABEL_34;
      }
    }
    *((_QWORD *)v86 + v85) = v84;
    LODWORD(v249) = v85 + 1;
    if (!*(_QWORD *)&v251[0] && (v84 & 0xFFFE000000000002) == 0 && v84)
    {
      if ((v84 & 8) != 0)
        v145 = (_QWORD *)(v84 - 16);
      else
        v145 = (_QWORD *)(v84 & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)&v251[0] = *v145 + 560;
      v267[0] = (int *)&v249;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v251[0], (uint64_t *)v267, v78, v79, v80, v81, v82, (uint64_t)&v265);
    }
LABEL_34:
    Inspector::InjectedScriptBase::callFunctionWithEvalEnabled((uint64_t)a3, (WTF::AtomStringImpl *)&v248, v77, v78, v79, v80, v81, v82, (uint64_t)&v265, v83);
    if (!v266)
    {
      v95 = v256;
      v256 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
        {
          WTF::StringImpl::~StringImpl(v95, v87, v88, v89, v90, v91, v92, v93);
          WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
        }
        else
        {
          *(_DWORD *)v95 -= 2;
        }
      }
      if (v255)
      {
        v140 = v255 - 2;
        v141 = *(_QWORD *)(((unint64_t)(v255 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v142 = (uint64_t *)*(v255 - 1);
        if (v142)
        {
          v143 = *v140;
          *v142 = *v140;
          *(_QWORD *)(v143 + 8) = v142;
          *v140 = 0;
          v140[1] = 0;
        }
        *v140 = *(_QWORD *)(v141 + 40);
        *(_QWORD *)(v141 + 40) = v140;
        v255 = 0;
      }
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v249, v87, v88, v89, v90, v91, v92, v93);
      goto LABEL_40;
    }
    if (v266 == 1)
    {
      if (*(_DWORD *)(v265 + 28))
      {
        v198 = *(_QWORD *)(v265 + 16);
        v199 = *(_QWORD *)(v198 + 8);
        if (v199)
        {
          v200 = *(_DWORD *)(v198 + 32) >> 2;
          v201 = *(_QWORD *)(v199 + 56);
          if (v200 >= *(_DWORD *)(*(_QWORD *)(v201 + 80) + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x198612A3CLL);
          }
          JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v201 + 160), v200);
        }
      }
      WTF::String::utf8(v32, 0, v89, v90, v91, v92, v93, v267, v94);
      if (v267[0])
        v210 = LOBYTE(v267[0]) + 16;
      else
        v210 = 0;
      v211 = *(_QWORD *)(v265 + 8);
      v246 = v211;
      v212 = (JSC::JSGlobalObject *)*((_QWORD *)a3 + 2);
      if ((v211 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v211 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v246, v212, v202, v203, v204, v205, v206, v207, (int **)&v247);
LABEL_122:
        WTF::String::utf8((uint64_t *)&v247, 0, v203, v204, v205, v206, v207, &v257, v209);
        v214 = v257;
        WTFLogAlways("Error when calling 'injectModule' for '%s': %s (%d:%d)\n", v215, v216, v217, v218, v219, v220, v221, v210);
        if (v214)
        {
          if (*v214 == 1)
            WTF::fastFree((unint64_t)v214, v222, v223, v224, v225, v226, v227, v228);
          else
            --*v214;
        }
        v229 = v247;
        v247 = 0;
        if (v229)
        {
          if (*(_DWORD *)v229 == 2)
          {
            WTF::StringImpl::~StringImpl(v229, (WTF::AtomStringImpl *)v222, v223, v224, v225, v226, v227, v228);
            WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
          }
          else
          {
            *(_DWORD *)v229 -= 2;
          }
        }
        WTF::CString::~CString((WTF::CString *)v267, v222, v223, v224, v225, v226, v227, v228);
        __break(0xC471u);
        JUMPOUT(0x198612958);
      }
      v213 = *(int **)(v211 + 8);
      if ((v213 & 1) != 0)
      {
        v213 = *JSC::JSRopeString::resolveRope(v211, v212, (uint64_t)v202, v203, v208, v204, v205, v206, v207);
        if (!v213)
          goto LABEL_121;
      }
      else if (!v213)
      {
LABEL_121:
        v247 = (WTF::StringImpl *)v213;
        goto LABEL_122;
      }
      *v213 += 2;
      goto LABEL_121;
    }
    goto LABEL_84;
  }
LABEL_40:
  v96 = v263;
  v263 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  if (v262)
  {
    v136 = v262 - 2;
    v137 = *(_QWORD *)(((unint64_t)(v262 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v138 = (uint64_t *)*(v262 - 1);
    if (v138)
    {
      v139 = *v136;
      *v138 = *v136;
      *(_QWORD *)(v139 + 8) = v138;
      *v136 = 0;
      v136[1] = 0;
    }
    *v136 = *(_QWORD *)(v137 + 40);
    *(_QWORD *)(v137 + 40) = v136;
    v262 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v261, v40, v41, v42, v43, v44, v45, v46);
  JSC::JSLockHolder::~JSLockHolder(&v264, v97, v98, v99, v100, v101, v102, v103);
}

_QWORD *Inspector::AgentRegistry::AgentRegistry(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void Inspector::AgentRegistry::~AgentRegistry(uint64_t **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *this;
  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      v12 = *v9++;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v11 -= 8;
    }
    while (v11);
    v13 = *((unsigned int *)this + 3);
    v9 = *this;
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        v15 = *v9;
        *v9 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v9;
        v14 -= 8;
      }
      while (v14);
      v9 = *this;
    }
  }
  if (v9)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *this;
  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      v12 = *v9++;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v11 -= 8;
    }
    while (v11);
    v13 = *((unsigned int *)this + 3);
    v9 = *this;
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        v15 = *v9;
        *v9 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v9;
        v14 -= 8;
      }
      while (v14);
      v9 = *this;
    }
  }
  if (v9)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t Inspector::AgentRegistry::append(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (uint64_t *)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v4 + 1, a2);
    v2 = (uint64_t *)result;
    v4 = *(unsigned int *)(v3 + 12);
    v5 = (_QWORD *)(*(_QWORD *)v3 + 8 * v4);
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
  }
  v6 = *v2;
  *v2 = 0;
  *v5 = v6;
  *(_DWORD *)(v3 + 12) = v4 + 1;
  return result;
}

uint64_t Inspector::AgentRegistry::didCreateFrontendAndBackend(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)result;
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t Inspector::AgentRegistry::willDestroyFrontendAndBackend(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)result;
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t Inspector::AgentRegistry::discardValues(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 12);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)this;
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t Inspector::SupplementalBackendDispatcher::SupplementalBackendDispatcher(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3591440;
  ++*a2;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void Inspector::SupplementalBackendDispatcher::~SupplementalBackendDispatcher(Inspector::SupplementalBackendDispatcher *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::BackendDispatcher *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_1E3591440;
  v9 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

uint64_t Inspector::BackendDispatcher::CallbackBase::CallbackBase(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3591468;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3591468;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

BOOL Inspector::BackendDispatcher::CallbackBase::isActive(Inspector::BackendDispatcher::CallbackBase *this)
{
  return !*((_BYTE *)this + 32) && *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 20) != 0;
}

BOOL Inspector::BackendDispatcher::isActive(Inspector::BackendDispatcher *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 1) + 20) != 0;
}

void Inspector::BackendDispatcher::CallbackBase::sendFailure(Inspector::BackendDispatcher::CallbackBase *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;

  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    v3 = *((_QWORD *)this + 2);
    if (!*(_BYTE *)(v3 + 48))
    {
      *(_QWORD *)(v3 + 40) = *((_QWORD *)this + 3);
      *(_BYTE *)(v3 + 48) = 1;
    }
    v27 = 5;
    v4 = *a2;
    if (*a2)
      *(_DWORD *)v4 += 2;
    v28 = v4;
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5 == *(_DWORD *)(v3 + 32))
    {
      v6 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 24, v5 + 1, (unint64_t)&v27);
      v14 = *(unsigned int *)(v3 + 36);
      v15 = *(_QWORD *)(v3 + 24) + 16 * v14;
      *(_DWORD *)v15 = *(_DWORD *)v6;
      v16 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v15 + 8) = v16;
      v17 = v28;
      *(_DWORD *)(v3 + 36) = v14 + 1;
      v28 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v7, v8, v9, v10, v11, v12, v13);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      v18 = *(_QWORD *)(v3 + 24) + 16 * v5;
      *(_DWORD *)v18 = 5;
      *(_QWORD *)(v18 + 8) = v4;
      *(_DWORD *)(v3 + 36) = v5 + 1;
    }
    Inspector::BackendDispatcher::sendPendingErrors(*((Inspector::BackendDispatcher **)this + 2));
  }
}

void Inspector::BackendDispatcher::reportProtocolError(uint64_t a1, uint64_t a2, char a3, int a4, WTF::StringImpl **a5)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;

  if (!*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(a1 + 40) = a2;
    *(_BYTE *)(a1 + 48) = a3;
  }
  v29 = a4;
  v6 = *a5;
  if (*a5)
    *(_DWORD *)v6 += 2;
  v30 = v6;
  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 32))
  {
    v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v7 + 1, (unint64_t)&v29);
    v16 = *(unsigned int *)(a1 + 36);
    v17 = *(_QWORD *)(a1 + 24) + 16 * v16;
    *(_DWORD *)v17 = *(_DWORD *)v8;
    v18 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v17 + 8) = v18;
    v19 = v30;
    *(_DWORD *)(a1 + 36) = v16 + 1;
    v30 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 24) + 16 * v7;
    *(_DWORD *)v20 = a4;
    *(_QWORD *)(v20 + 8) = v6;
    *(_DWORD *)(a1 + 36) = v7 + 1;
  }
}

void Inspector::BackendDispatcher::sendPendingErrors(Inspector::BackendDispatcher *this)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const char *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  const void *v57;
  void *v58;
  uint64_t *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  WTF *v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  WTF *v150;
  WTF *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  uint64_t v173;
  int v174;
  double *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  WTF *v193;
  uint64_t v194;
  WTF *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  WTF *v204;
  WTF *v205;
  uint64_t v206;
  WTF::AtomStringImpl *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl **v221;
  WTF::StringImpl *v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _DWORD **v288;
  uint64_t v289;
  _DWORD *v290;
  _DWORD **v291;
  uint64_t v292;
  _DWORD *v293;
  _DWORD **v294;
  uint64_t v295;
  _DWORD *v296;
  _DWORD **v297;
  uint64_t v298;
  _DWORD *v299;
  _DWORD **v300;
  uint64_t v301;
  _DWORD *v302;
  _DWORD **v303;
  uint64_t v304;
  _DWORD *v305;
  Inspector::BackendDispatcher *v306;
  unsigned int *v307;
  WTF *v308;
  WTF *v309;
  WTF::StringImpl *v310[2];
  char v311;

  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000001;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (const void **)(v9 + 16);
  *(_QWORD *)(v9 + 24) = 0;
  v11 = *((unsigned int *)this + 9);
  v12 = "message";
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 3);
    v306 = this;
    v307 = &v14[4 * v11];
    do
    {
      v15 = *v14;
      v16 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
      if (v16)
        *(_DWORD *)v16 += 2;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl(v13, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v17 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v17 = 0x500000001;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      v18 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v18 = 0x400000002;
      *(_QWORD *)(v18 + 8) = "code";
      *(_DWORD *)(v18 + 16) = 4;
      v308 = (WTF *)v18;
      v19 = Inspector::BackendDispatcher::sendPendingErrors(void)::errorCodes[v15];
      v20 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v20 = 0x300000001;
      v20[1] = (double)v19;
      v309 = (WTF *)v20;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), (WTF::AtomStringImpl *)&v308, (const WTF::StringImpl *)&v309, v21, v22, v23, v24, v25, (uint64_t)v310);
      if (v311)
      {
        v33 = (uint64_t *)(v17 + 24);
        v34 = *(unsigned int *)(v17 + 36);
        if ((_DWORD)v34 == *(_DWORD *)(v17 + 32))
        {
          v84 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v308);
          v34 = *(unsigned int *)(v17 + 36);
          v85 = *(_QWORD *)(v17 + 24);
          v86 = *v84;
          if (*v84)
            *v86 += 2;
          *(_QWORD *)(v85 + 8 * v34) = v86;
        }
        else
        {
          v35 = *v33;
          v36 = v308;
          if (v308)
            *(_DWORD *)v308 += 2;
          *(_QWORD *)(v35 + 8 * v34) = v36;
        }
        *(_DWORD *)(v17 + 36) = v34 + 1;
      }
      v37 = v309;
      v309 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::JSONImpl::Value::operator delete(v37, v26, v27, v28, v29, v30, v31, v32);
        else
          --*(_DWORD *)v37;
      }
      v38 = v308;
      v308 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      v39 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v39 = 0x700000002;
      *(_QWORD *)(v39 + 8) = v12;
      *(_DWORD *)(v39 + 16) = 4;
      v308 = (WTF *)v39;
      v40 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = 0x400000001;
      *((_QWORD *)v40 + 1) = v16;
      if (v16)
        *(_DWORD *)v16 += 2;
      v309 = v40;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), (WTF::AtomStringImpl *)&v308, (const WTF::StringImpl *)&v309, v41, v42, v43, v44, v45, (uint64_t)v310);
      if (v311)
      {
        v46 = (uint64_t *)(v17 + 24);
        v47 = *(unsigned int *)(v17 + 36);
        if ((_DWORD)v47 == *(_DWORD *)(v17 + 32))
        {
          v87 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v308);
          v47 = *(unsigned int *)(v17 + 36);
          v88 = *(_QWORD *)(v17 + 24);
          v89 = *v87;
          if (*v87)
            *v89 += 2;
          *(_QWORD *)(v88 + 8 * v47) = v89;
        }
        else
        {
          v48 = *v46;
          v49 = v308;
          if (v308)
            *(_DWORD *)v308 += 2;
          *(_QWORD *)(v48 + 8 * v47) = v49;
        }
        *(_DWORD *)(v17 + 36) = v47 + 1;
      }
      v50 = v309;
      v309 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
          WTF::JSONImpl::Value::operator delete(v50, v2, v3, v4, v5, v6, v7, v8);
        else
          --*(_DWORD *)v50;
      }
      v51 = v308;
      v308 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      v52 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v52 == *(_DWORD *)(v9 + 24))
      {
        v53 = v12;
        v54 = v52 + (v52 >> 2);
        if (v54 >= 0x10)
          v55 = v54 + 1;
        else
          v55 = 16;
        if (v55 <= v52 + 1)
          v56 = v52 + 1;
        else
          v56 = v55;
        if (v56 >> 29)
          goto LABEL_195;
        v57 = *v10;
        v58 = (void *)WTF::fastMalloc((WTF *)(8 * v56));
        *(_DWORD *)(v9 + 24) = v56;
        *(_QWORD *)(v9 + 16) = v58;
        memcpy(v58, v57, 8 * v52);
        v12 = v53;
        if (v57)
        {
          if (*v10 == v57)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
          }
          WTF::fastFree((unint64_t)v57, v2, v3, v4, v5, v6, v7, v8);
        }
        v52 = *(unsigned int *)(v9 + 28);
        v59 = (uint64_t *)(*(_QWORD *)(v9 + 16) + 8 * v52);
      }
      else
      {
        v59 = (uint64_t *)((char *)*v10 + 8 * v52);
      }
      *v59 = v17;
      *(_DWORD *)(v9 + 28) = v52 + 1;
      v14 += 4;
      v13 = v16;
    }
    while (v14 != v307);
    this = v306;
  }
  else
  {
    v16 = 0;
    LODWORD(v15) = 4;
  }
  v90 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v90 = 0x500000001;
  *(_QWORD *)(v90 + 16) = 0;
  v91 = (uint64_t *)(v90 + 16);
  *(_QWORD *)(v90 + 24) = 0;
  *(_QWORD *)(v90 + 32) = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x400000002;
  *(_QWORD *)(v92 + 8) = "code";
  *(_DWORD *)(v92 + 16) = 4;
  v308 = (WTF *)v92;
  v93 = Inspector::BackendDispatcher::sendPendingErrors(void)::errorCodes[v15];
  v94 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v94 = 0x300000001;
  v94[1] = (double)v93;
  v309 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v90 + 16), (WTF::AtomStringImpl *)&v308, (const WTF::StringImpl *)&v309, v95, v96, v97, v98, v99, (uint64_t)v310);
  if (v311)
  {
    v107 = (uint64_t *)(v90 + 24);
    v108 = *(unsigned int *)(v90 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v90 + 32))
    {
      v288 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v308);
      v108 = *(unsigned int *)(v90 + 36);
      v289 = *(_QWORD *)(v90 + 24);
      v290 = *v288;
      if (*v288)
        *v290 += 2;
      *(_QWORD *)(v289 + 8 * v108) = v290;
    }
    else
    {
      v109 = *v107;
      v110 = v308;
      if (v308)
        *(_DWORD *)v308 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v90 + 36) = v108 + 1;
  }
  v111 = v309;
  v309 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v308;
  v308 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v113 = 0x700000002;
  *(_QWORD *)(v113 + 8) = v12;
  *(_DWORD *)(v113 + 16) = 4;
  v308 = (WTF *)v113;
  v114 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v114 = 0x400000001;
  *((_QWORD *)v114 + 1) = v16;
  if (v16)
    *(_DWORD *)v16 += 2;
  v309 = v114;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v91, (WTF::AtomStringImpl *)&v308, (const WTF::StringImpl *)&v309, v115, v116, v117, v118, v119, (uint64_t)v310);
  if (v311)
  {
    v127 = (uint64_t *)(v90 + 24);
    v128 = *(unsigned int *)(v90 + 36);
    if ((_DWORD)v128 == *(_DWORD *)(v90 + 32))
    {
      v291 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v127, v128 + 1, (unint64_t)&v308);
      v128 = *(unsigned int *)(v90 + 36);
      v292 = *(_QWORD *)(v90 + 24);
      v293 = *v291;
      if (*v291)
        *v293 += 2;
      *(_QWORD *)(v292 + 8 * v128) = v293;
    }
    else
    {
      v129 = *v127;
      v130 = v308;
      if (v308)
        *(_DWORD *)v308 += 2;
      *(_QWORD *)(v129 + 8 * v128) = v130;
    }
    *(_DWORD *)(v90 + 36) = v128 + 1;
  }
  v131 = v309;
  v309 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 1)
      WTF::JSONImpl::Value::operator delete(v131, v120, v121, v122, v123, v124, v125, v126);
    else
      --*(_DWORD *)v131;
  }
  v132 = v308;
  v308 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v120, v121, v122, v123, v124, v125, v126);
      WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v133 = 0x400000002;
  *(_QWORD *)(v133 + 8) = "data";
  *(_DWORD *)(v133 + 16) = 4;
  v308 = (WTF *)v9;
  v309 = (WTF *)v133;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v91, &v309, (const WTF::StringImpl *)&v308, v134, v135, v136, v137, v138, (uint64_t)v310);
  if (v311)
  {
    v146 = (uint64_t *)(v90 + 24);
    v147 = *(unsigned int *)(v90 + 36);
    if ((_DWORD)v147 == *(_DWORD *)(v90 + 32))
    {
      v294 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v309);
      v147 = *(unsigned int *)(v90 + 36);
      v295 = *(_QWORD *)(v90 + 24);
      v296 = *v294;
      if (*v294)
        *v296 += 2;
      *(_QWORD *)(v295 + 8 * v147) = v296;
    }
    else
    {
      v148 = *v146;
      v149 = v309;
      if (v309)
        *(_DWORD *)v309 += 2;
      *(_QWORD *)(v148 + 8 * v147) = v149;
    }
    *(_DWORD *)(v90 + 36) = v147 + 1;
  }
  v150 = v308;
  v308 = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 1)
      WTF::JSONImpl::Value::operator delete(v150, v139, v140, v141, v142, v143, v144, v145);
    else
      --*(_DWORD *)v150;
  }
  v151 = v309;
  v309 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v139, v140, v141, v142, v143, v144, v145);
      WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  v152 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v152 = 0x500000001;
  *(_QWORD *)(v152 + 16) = 0;
  v153 = (uint64_t *)(v152 + 16);
  *(_QWORD *)(v152 + 24) = 0;
  *(_QWORD *)(v152 + 32) = 0;
  v154 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v154 = 0x500000002;
  *(_QWORD *)(v154 + 8) = "error";
  *(_DWORD *)(v154 + 16) = 4;
  v308 = (WTF *)v90;
  v309 = (WTF *)v154;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v152 + 16), (WTF::AtomStringImpl *)&v309, (const WTF::StringImpl *)&v308, v155, v156, v157, v158, v159, (uint64_t)v310);
  if (v311)
  {
    v167 = (uint64_t *)(v152 + 24);
    v168 = *(unsigned int *)(v152 + 36);
    if ((_DWORD)v168 == *(_DWORD *)(v152 + 32))
    {
      v297 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v167, v168 + 1, (unint64_t)&v309);
      v168 = *(unsigned int *)(v152 + 36);
      v298 = *(_QWORD *)(v152 + 24);
      v299 = *v297;
      if (*v297)
        *v299 += 2;
      *(_QWORD *)(v298 + 8 * v168) = v299;
    }
    else
    {
      v169 = *v167;
      v170 = v309;
      if (v309)
        *(_DWORD *)v309 += 2;
      *(_QWORD *)(v169 + 8 * v168) = v170;
    }
    *(_DWORD *)(v152 + 36) = v168 + 1;
  }
  v171 = v308;
  v308 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 1)
      WTF::JSONImpl::Value::operator delete(v171, v160, v161, v162, v163, v164, v165, v166);
    else
      --*(_DWORD *)v171;
  }
  v172 = v309;
  v309 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v160, v161, v162, v163, v164, v165, v166);
      WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  if (!*((_BYTE *)this + 48))
  {
    v194 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v194 = 0x200000002;
    *(_QWORD *)(v194 + 8) = "id";
    *(_DWORD *)(v194 + 16) = 4;
    v309 = (WTF *)v194;
    v195 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v195 = 1;
    v308 = v195;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v153, (WTF::AtomStringImpl *)&v309, (const WTF::StringImpl *)&v308, v196, v197, v198, v199, v200, (uint64_t)v310);
    if (v311)
    {
      v201 = (uint64_t *)(v152 + 24);
      v202 = *(unsigned int *)(v152 + 36);
      if ((_DWORD)v202 == *(_DWORD *)(v152 + 32))
      {
        v303 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v201, v202 + 1, (unint64_t)&v309);
        v202 = *(unsigned int *)(v152 + 36);
        v304 = *(_QWORD *)(v152 + 24);
        v305 = *v303;
        if (*v303)
          *v305 += 2;
        *(_QWORD *)(v304 + 8 * v202) = v305;
      }
      else
      {
        v203 = *v201;
        v204 = v309;
        if (v309)
          *(_DWORD *)v309 += 2;
        *(_QWORD *)(v203 + 8 * v202) = v204;
      }
      *(_DWORD *)(v152 + 36) = v202 + 1;
    }
    v205 = v308;
    v308 = 0;
    if (v205)
    {
      if (*(_DWORD *)v205 == 1)
        WTF::JSONImpl::Value::operator delete(v205, v181, v182, v183, v184, v185, v186, v187);
      else
        --*(_DWORD *)v205;
    }
    v193 = v309;
    v309 = 0;
    if (!v193)
      goto LABEL_137;
    goto LABEL_135;
  }
  v173 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v173 = 0x200000002;
  *(_QWORD *)(v173 + 8) = "id";
  *(_DWORD *)(v173 + 16) = 4;
  v308 = (WTF *)v173;
  if (!*((_BYTE *)this + 48))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_195:
    __break(0xC471u);
    return;
  }
  v174 = *((_DWORD *)this + 10);
  v175 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v175 = 0x300000001;
  v175[1] = (double)v174;
  v309 = (WTF *)v175;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v153, (WTF::AtomStringImpl *)&v308, (const WTF::StringImpl *)&v309, v176, v177, v178, v179, v180, (uint64_t)v310);
  if (v311)
  {
    v188 = (uint64_t *)(v152 + 24);
    v189 = *(unsigned int *)(v152 + 36);
    if ((_DWORD)v189 == *(_DWORD *)(v152 + 32))
    {
      v300 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v188, v189 + 1, (unint64_t)&v308);
      v189 = *(unsigned int *)(v152 + 36);
      v301 = *(_QWORD *)(v152 + 24);
      v302 = *v300;
      if (*v300)
        *v302 += 2;
      *(_QWORD *)(v301 + 8 * v189) = v302;
    }
    else
    {
      v190 = *v188;
      v191 = v308;
      if (v308)
        *(_DWORD *)v308 += 2;
      *(_QWORD *)(v190 + 8 * v189) = v191;
    }
    *(_DWORD *)(v152 + 36) = v189 + 1;
  }
  v192 = v309;
  v309 = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 1)
      WTF::JSONImpl::Value::operator delete(v192, v181, v182, v183, v184, v185, v186, v187);
    else
      --*(_DWORD *)v192;
  }
  v193 = v308;
  v308 = 0;
  if (v193)
  {
LABEL_135:
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v181, v182, v183, v184, v185, v186, v187);
      WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
LABEL_137:
  v206 = *((_QWORD *)this + 1);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v152, v182, v183, v184, v185, v186, v187, v310);
  v214 = *(unsigned int *)(v206 + 20);
  if ((_DWORD)v214)
  {
    v215 = *(uint64_t **)(v206 + 8);
    v216 = 8 * v214;
    do
    {
      v217 = *v215++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v217 + 24))(v217, v310);
      v216 -= 8;
    }
    while (v216);
  }
  v218 = v310[0];
  v310[0] = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
    {
      WTF::StringImpl::~StringImpl(v218, v207, v208, v209, v210, v211, v212, v213);
      WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
    }
    else
    {
      *(_DWORD *)v218 -= 2;
    }
  }
  if (*((_DWORD *)this + 8))
  {
    v219 = *((unsigned int *)this + 9);
    if ((_DWORD)v219)
    {
      v220 = 16 * v219;
      v221 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
      do
      {
        v222 = *v221;
        *v221 = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2)
          {
            WTF::StringImpl::~StringImpl(v222, v207, v208, v209, v210, v211, v212, v213);
            WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
          }
          else
          {
            *(_DWORD *)v222 -= 2;
          }
        }
        v221 += 2;
        v220 -= 16;
      }
      while (v220);
      *((_DWORD *)this + 9) = 0;
    }
    v231 = *((_QWORD *)this + 3);
    if (v231)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v231, v207, v208, v209, v210, v211, v212, v213);
    }
  }
  if (*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 0;
  if (*(_DWORD *)v152 == 1)
  {
    WTF::JSONImpl::Value::operator delete((WTF *)v152, v207, v208, v209, v210, v211, v212, v213);
    if (!v16)
      return;
  }
  else
  {
    --*(_DWORD *)v152;
    if (!v16)
      return;
  }
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::~StringImpl(v16, v207, v208, v209, v210, v211, v212, v213);
    WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
  }
  else
  {
    *(_DWORD *)v16 -= 2;
  }
}

void Inspector::BackendDispatcher::CallbackBase::sendSuccess(uint64_t a1, WTF **a2)
{
  if (!*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 1;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  }
}

void Inspector::BackendDispatcher::sendResponse(uint64_t a1, int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD **v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  WTF *v90;
  WTF *v91;
  WTF::StringImpl *v92[2];
  char v93;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "result";
  *(_DWORD *)(v7 + 16) = 4;
  v8 = *a3;
  *a3 = 0;
  v90 = v8;
  v91 = (WTF *)v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v91, (const WTF::StringImpl *)&v90, v9, v10, v11, v12, v13, (uint64_t)v92);
  if (v93)
  {
    v21 = (uint64_t *)(v6 + 24);
    v22 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v22 == *(_DWORD *)(v6 + 32))
    {
      v84 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v91);
      v22 = *(unsigned int *)(v6 + 36);
      v85 = *(_QWORD *)(v6 + 24);
      v86 = *v84;
      if (*v84)
        *v86 += 2;
      *(_QWORD *)(v85 + 8 * v22) = v86;
    }
    else
    {
      v23 = *v21;
      v24 = v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *(_DWORD *)(v6 + 36) = v22 + 1;
  }
  v25 = v90;
  v90 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v25;
  }
  v26 = v91;
  v91 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x200000002;
  *(_QWORD *)(v27 + 8) = "id";
  *(_DWORD *)(v27 + 16) = 4;
  v90 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x300000001;
  v28[1] = (double)a2;
  v91 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v90, (const WTF::StringImpl *)&v91, v29, v30, v31, v32, v33, (uint64_t)v92);
  if (v93)
  {
    v41 = (uint64_t *)(v6 + 24);
    v42 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v6 + 32))
    {
      v87 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v90);
      v42 = *(unsigned int *)(v6 + 36);
      v88 = *(_QWORD *)(v6 + 24);
      v89 = *v87;
      if (*v87)
        *v89 += 2;
      *(_QWORD *)(v88 + 8 * v42) = v89;
    }
    else
    {
      v43 = *v41;
      v44 = v90;
      if (v90)
        *(_DWORD *)v90 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v6 + 36) = v42 + 1;
  }
  v45 = v91;
  v91 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v90;
  v90 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = *(_QWORD *)(a1 + 8);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v35, v36, v37, v38, v39, v40, v92);
  v55 = *(unsigned int *)(v47 + 20);
  if ((_DWORD)v55)
  {
    v56 = *(uint64_t **)(v47 + 8);
    v57 = 8 * v55;
    do
    {
      v58 = *v56++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v58 + 24))(v58, v92);
      v57 -= 8;
    }
    while (v57);
  }
  v59 = v92[0];
  v92[0] = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v48, v49, v50, v51, v52, v53, v54);
  else
    --*(_DWORD *)v6;
}

{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v10 = *a3;
  *a3 = 0;
  Inspector::BackendDispatcher::sendResponse(a1, a2, &v10);
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v10;
  }
}

{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v10 = *a3;
  *a3 = 0;
  Inspector::BackendDispatcher::sendResponse(a1, a2, &v10);
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::JSONImpl::Value::operator delete(v10, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v10;
  }
}

{
  Inspector::BackendDispatcher::sendResponse(a1, a2, a3);
}

uint64_t Inspector::BackendDispatcher::BackendDispatcher(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_DWORD *)result = 1;
  v2 = *a2;
  *a2 = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)result = 1;
  v2 = *a2;
  *a2 = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

uint64_t Inspector::BackendDispatcher::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)result = 1;
  v5 = *a1;
  *a1 = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *a2 = result;
  return result;
}

void Inspector::BackendDispatcher::registerDispatcherForDomain(Inspector::BackendDispatcher *this, WTF::StringImpl **a2, Inspector::SupplementalBackendDispatcher *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  Inspector::SupplementalBackendDispatcher *v9;

  v9 = a3;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, a2, (const WTF::StringImpl *)&v9, a4, a5, a6, a7, a8, (uint64_t)&v8);
}

void Inspector::BackendDispatcher::dispatch(Inspector::BackendDispatcher *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const WTF::StringImpl *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  const WTF::StringImpl *v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  int i;
  uint64_t v76;
  WTF *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  double v91;
  double v92;
  float v93;
  const WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  int *v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int j;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  int v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::AtomStringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  WTF *v203;
  WTF::StringImpl *v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::AtomStringImpl *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  int v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  WTF *v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  WTF::StringImpl *v329;
  WTF *v330;
  WTF::StringImpl *v331;
  BOOL v332;
  int v333;
  WTF::AtomStringImpl *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  WTF *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  WTF *v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  WTF *v406;
  WTF *v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  __int128 v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;

  ++*(_DWORD *)this;
  v410 = *(_OWORD *)((char *)this + 40);
  if (*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(unsigned int *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
    v6 = (v4 >> 2) & 1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  v7 = (_QWORD *)((char *)this + 40);
  WTF::JSONImpl::Value::parseJSON(v5, v3 | (unint64_t)(v6 << 32), (uint64_t *)&v407);
  v8 = v407;
  if (!v407)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x20);
    v28 = (WTF::StringImpl *)v20;
    *(_QWORD *)v20 = 0x1E00000002;
    *(_QWORD *)(v20 + 8) = "Message must be in JSON format";
    v29 = 4;
    *(_DWORD *)(v20 + 16) = 4;
    if (!*((_BYTE *)this + 48))
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v29 = *(_DWORD *)v20 + 2;
    }
    LODWORD(v411) = 0;
    *(_DWORD *)v20 = v29;
    v412 = (WTF::StringImpl *)v20;
    v30 = *((unsigned int *)this + 9);
    if ((_DWORD)v30 == *((_DWORD *)this + 8))
    {
      v31 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v30 + 1, (unint64_t)&v411);
      v32 = *((unsigned int *)this + 9);
      v33 = *((_QWORD *)this + 3) + 16 * v32;
      *(_DWORD *)v33 = *(_DWORD *)v31;
      v34 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)(v31 + 8) = 0;
      *(_QWORD *)(v33 + 8) = v34;
      v35 = v412;
      *((_DWORD *)this + 9) = v32 + 1;
      v412 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    else
    {
      v69 = *((_QWORD *)this + 3) + 16 * v30;
      *(_DWORD *)v69 = 0;
      *(_QWORD *)(v69 + 8) = v20;
      *((_DWORD *)this + 9) = v30 + 1;
    }
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    *v7 = v410;
    *((_BYTE *)this + 48) = BYTE8(v410);
    goto LABEL_136;
  }
  v9 = *((_DWORD *)v407 + 1);
  if (v9 < 5)
    goto LABEL_7;
  if (v9 != 5)
  {
    if (v9 != 6)
      goto LABEL_227;
LABEL_7:
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    v18 = (WTF::StringImpl *)v10;
    *(_QWORD *)v10 = 0x2200000002;
    *(_QWORD *)(v10 + 8) = "Message must be a JSONified object";
    *(_DWORD *)(v10 + 16) = 4;
    if (*((_BYTE *)this + 48))
    {
      v19 = 2;
    }
    else
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v19 = *(_DWORD *)v10;
    }
    LODWORD(v411) = 1;
    *(_DWORD *)v10 = v19 + 2;
    v412 = (WTF::StringImpl *)v10;
    v36 = *((unsigned int *)this + 9);
    if ((_DWORD)v36 == *((_DWORD *)this + 8))
    {
      v37 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v36 + 1, (unint64_t)&v411);
      v38 = *((unsigned int *)this + 9);
      v39 = *((_QWORD *)this + 3) + 16 * v38;
      *(_DWORD *)v39 = *(_DWORD *)v37;
      v40 = *(_QWORD *)(v37 + 8);
      *(_QWORD *)(v37 + 8) = 0;
      *(_QWORD *)(v39 + 8) = v40;
      v41 = v412;
      *((_DWORD *)this + 9) = v38 + 1;
      v412 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
    else
    {
      v42 = *((_QWORD *)this + 3) + 16 * v36;
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = v10;
      *((_DWORD *)this + 9) = v36 + 1;
    }
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    v50 = 0;
    v51 = 0;
    v52 = 1;
    goto LABEL_24;
  }
  ++*(_DWORD *)v407;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  v71 = (const WTF::StringImpl *)v70;
  *(_QWORD *)v70 = 0x200000002;
  *(_QWORD *)(v70 + 8) = "id";
  *(_DWORD *)(v70 + 16) = 4;
  v72 = *((_QWORD *)v8 + 2);
  if (!v72)
    goto LABEL_109;
  v73 = *(_DWORD *)(v72 - 8);
  v74 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v70);
  for (i = 0; ; v74 = i + v76)
  {
    v76 = v74 & v73;
    v77 = *(WTF **)(v72 + 16 * v76);
    if (v77 == (WTF *)-1)
      goto LABEL_48;
    if (!v77)
      break;
    if (WTF::equal(v77, v71, v44))
    {
      v185 = v72 + 16 * v76;
      v183 = *((_QWORD *)v8 + 2);
      if (!v183)
        goto LABEL_107;
      v184 = *(unsigned int *)(v183 - 4);
LABEL_106:
      if (v185 != v183 + 16 * v184)
      {
LABEL_107:
        v72 = *(_QWORD *)(v185 + 8);
        ++*(_DWORD *)v72;
        goto LABEL_109;
      }
      goto LABEL_108;
    }
LABEL_48:
    ++i;
  }
  v183 = *((_QWORD *)v8 + 2);
  if (v183)
  {
    v184 = *(unsigned int *)(v183 - 4);
    v185 = v183 + 16 * v184;
    goto LABEL_106;
  }
LABEL_108:
  v72 = 0;
LABEL_109:
  if (*(_DWORD *)v71 == 2)
  {
    WTF::StringImpl::~StringImpl(v71, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
    if (!v72)
      goto LABEL_143;
LABEL_111:
    if ((*(_DWORD *)(v72 + 4) & 0xFFFFFFFE) == 2)
    {
      v52 = 0;
      v51 = (int)*(double *)(v72 + 8);
    }
    else
    {
      v186 = WTF::fastCompactMalloc((WTF *)0x20);
      v194 = (WTF::StringImpl *)v186;
      *(_QWORD *)v186 = 0x2900000002;
      *(_QWORD *)(v186 + 8) = "The type of 'id' property must be integer";
      *(_DWORD *)(v186 + 16) = 4;
      if (*((_BYTE *)this + 48))
      {
        v195 = 2;
      }
      else
      {
        *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
        v195 = *(_DWORD *)v186;
      }
      LODWORD(v411) = 1;
      *(_DWORD *)v186 = v195 + 2;
      v412 = (WTF::StringImpl *)v186;
      v262 = *((unsigned int *)this + 9);
      if ((_DWORD)v262 == *((_DWORD *)this + 8))
      {
        v263 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v262 + 1, (unint64_t)&v411);
        v264 = *((unsigned int *)this + 9);
        v265 = *((_QWORD *)this + 3) + 16 * v264;
        *(_DWORD *)v265 = *(_DWORD *)v263;
        v266 = *(_QWORD *)(v263 + 8);
        *(_QWORD *)(v263 + 8) = 0;
        *(_QWORD *)(v265 + 8) = v266;
        v267 = v412;
        *((_DWORD *)this + 9) = v264 + 1;
        v412 = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
          {
            WTF::StringImpl::~StringImpl(v267, v187, v188, v189, v190, v191, v192, v193);
            WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
          }
          else
          {
            *(_DWORD *)v267 -= 2;
          }
        }
      }
      else
      {
        v268 = *((_QWORD *)this + 3) + 16 * v262;
        *(_DWORD *)v268 = 1;
        *(_QWORD *)(v268 + 8) = v186;
        *((_DWORD *)this + 9) = v262 + 1;
      }
      if (*(_DWORD *)v194 == 2)
      {
        WTF::StringImpl::~StringImpl(v194, v187, v188, v189, v190, v191, v192, v193);
        WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
      }
      else
      {
        *(_DWORD *)v194 -= 2;
      }
      Inspector::BackendDispatcher::sendPendingErrors(this);
      v51 = 0;
      v52 = 1;
    }
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete((WTF *)v72, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
    else
      --*(_DWORD *)v72;
  }
  else
  {
    *(_DWORD *)v71 -= 2;
    if (v72)
      goto LABEL_111;
LABEL_143:
    v229 = WTF::fastCompactMalloc((WTF *)0x20);
    v237 = (WTF::StringImpl *)v229;
    *(_QWORD *)v229 = 0x1B00000002;
    *(_QWORD *)(v229 + 8) = "'id' property was not found";
    *(_DWORD *)(v229 + 16) = 4;
    if (*((_BYTE *)this + 48))
    {
      v238 = 2;
    }
    else
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v238 = *(_DWORD *)v229;
    }
    LODWORD(v411) = 1;
    *(_DWORD *)v229 = v238 + 2;
    v412 = (WTF::StringImpl *)v229;
    v247 = *((unsigned int *)this + 9);
    if ((_DWORD)v247 == *((_DWORD *)this + 8))
    {
      v248 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v247 + 1, (unint64_t)&v411);
      v249 = *((unsigned int *)this + 9);
      v250 = *((_QWORD *)this + 3) + 16 * v249;
      *(_DWORD *)v250 = *(_DWORD *)v248;
      v251 = *(_QWORD *)(v248 + 8);
      *(_QWORD *)(v248 + 8) = 0;
      *(_QWORD *)(v250 + 8) = v251;
      v252 = v412;
      *((_DWORD *)this + 9) = v249 + 1;
      v412 = 0;
      if (v252)
      {
        if (*(_DWORD *)v252 == 2)
        {
          WTF::StringImpl::~StringImpl(v252, v230, v231, v232, v233, v234, v235, v236);
          WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
        }
        else
        {
          *(_DWORD *)v252 -= 2;
        }
      }
    }
    else
    {
      v253 = *((_QWORD *)this + 3) + 16 * v247;
      *(_DWORD *)v253 = 1;
      *(_QWORD *)(v253 + 8) = v229;
      *((_DWORD *)this + 9) = v247 + 1;
    }
    if (*(_DWORD *)v237 == 2)
    {
      WTF::StringImpl::~StringImpl(v237, v230, v231, v232, v233, v234, v235, v236);
      WTF::fastFree(v304, v305, v306, v307, v308, v309, v310, v311);
    }
    else
    {
      *(_DWORD *)v237 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    v51 = 0;
    v52 = 1;
  }
  v50 = v8;
LABEL_24:
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete(v8, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
  else
    --*(_DWORD *)v8;
  *v7 = v410;
  *((_BYTE *)this + 48) = BYTE8(v410);
  if (v52)
    goto LABEL_133;
  v410 = *(_OWORD *)v7;
  if (!*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 1;
  v53 = v51;
  *v7 = v51;
  v54 = WTF::fastCompactMalloc((WTF *)0x20);
  v62 = (const WTF::StringImpl *)v54;
  *(_QWORD *)v54 = 0x600000002;
  *(_QWORD *)(v54 + 8) = "method";
  *(_DWORD *)(v54 + 16) = 4;
  v63 = *((_QWORD *)v50 + 2);
  if (!v63)
    goto LABEL_57;
  v64 = *(_DWORD *)(v63 - 8);
  v65 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v54);
  v66 = 0;
  while (2)
  {
    v67 = v65 & v64;
    v68 = *(WTF **)(v63 + 16 * v67);
    if (v68 == (WTF *)-1)
    {
LABEL_34:
      v65 = ++v66 + v67;
      continue;
    }
    break;
  }
  if (v68)
  {
    if (WTF::equal(v68, v62, v56))
    {
      v88 = v63 + 16 * v67;
      v86 = *((_QWORD *)v50 + 2);
      if (!v86)
        goto LABEL_55;
      v87 = *(unsigned int *)(v86 - 4);
LABEL_54:
      if (v88 != v86 + 16 * v87)
      {
LABEL_55:
        v63 = *(_QWORD *)(v88 + 8);
        ++*(_DWORD *)v63;
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    goto LABEL_34;
  }
  v86 = *((_QWORD *)v50 + 2);
  if (v86)
  {
    v87 = *(unsigned int *)(v86 - 4);
    v88 = v86 + 16 * v87;
    goto LABEL_54;
  }
LABEL_56:
  v63 = 0;
LABEL_57:
  if (*(_DWORD *)v62 == 2)
  {
    WTF::StringImpl::~StringImpl(v62, v55, (uint64_t)v56, v57, v58, v59, v60, v61);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    if (v63)
      goto LABEL_59;
    goto LABEL_91;
  }
  *(_DWORD *)v62 -= 2;
  if (!v63)
  {
LABEL_91:
    v158 = WTF::fastCompactMalloc((WTF *)0x20);
    v166 = (WTF::StringImpl *)v158;
    *(_QWORD *)v158 = 0x1E00000002;
    *(_QWORD *)(v158 + 8) = "'method' property wasn't found";
    v167 = 4;
    *(_DWORD *)(v158 + 16) = 4;
    if (!*((_BYTE *)this + 48))
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v167 = *(_DWORD *)v158 + 2;
    }
    LODWORD(v411) = 1;
    *(_DWORD *)v158 = v167;
    v412 = (WTF::StringImpl *)v158;
    v168 = *((unsigned int *)this + 9);
    if ((_DWORD)v168 == *((_DWORD *)this + 8))
    {
      v169 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v168 + 1, (unint64_t)&v411);
      v170 = *((unsigned int *)this + 9);
      v171 = *((_QWORD *)this + 3) + 16 * v170;
      *(_DWORD *)v171 = *(_DWORD *)v169;
      v172 = *(_QWORD *)(v169 + 8);
      *(_QWORD *)(v169 + 8) = 0;
      *(_QWORD *)(v171 + 8) = v172;
      v173 = v412;
      *((_DWORD *)this + 9) = v170 + 1;
      v412 = 0;
      if (v173)
      {
        if (*(_DWORD *)v173 == 2)
        {
          WTF::StringImpl::~StringImpl(v173, v159, v160, v161, v162, v163, v164, v165);
          WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
        }
        else
        {
          *(_DWORD *)v173 -= 2;
        }
      }
    }
    else
    {
      v174 = *((_QWORD *)this + 3) + 16 * v168;
      *(_DWORD *)v174 = 1;
      *(_QWORD *)(v174 + 8) = v158;
      *((_DWORD *)this + 9) = v168 + 1;
    }
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, v159, v160, v161, v162, v163, v164, v165);
      WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    goto LABEL_132;
  }
LABEL_59:
  if (*(_DWORD *)(v63 + 4) != 4 || (v89 = *(WTF::StringImpl **)(v63 + 8)) == 0)
  {
    v409 = 0;
    v107 = WTF::fastCompactMalloc((WTF *)0x20);
    v115 = (WTF::StringImpl *)v107;
    *(_QWORD *)v107 = 0x2C00000002;
    *(_QWORD *)(v107 + 8) = "The type of 'method' property must be string";
    v116 = 4;
    *(_DWORD *)(v107 + 16) = 4;
    if (!*((_BYTE *)this + 48))
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v116 = *(_DWORD *)v107 + 2;
    }
    LODWORD(v411) = 1;
    *(_DWORD *)v107 = v116;
    v412 = (WTF::StringImpl *)v107;
    v117 = *((unsigned int *)this + 9);
    if ((_DWORD)v117 == *((_DWORD *)this + 8))
    {
      v118 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v117 + 1, (unint64_t)&v411);
      v119 = *((unsigned int *)this + 9);
      v120 = *((_QWORD *)this + 3) + 16 * v119;
      *(_DWORD *)v120 = *(_DWORD *)v118;
      v121 = *(_QWORD *)(v118 + 8);
      *(_QWORD *)(v118 + 8) = 0;
      *(_QWORD *)(v120 + 8) = v121;
      v122 = v412;
      *((_DWORD *)this + 9) = v119 + 1;
      v412 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
        {
          WTF::StringImpl::~StringImpl(v122, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
        }
        else
        {
          *(_DWORD *)v122 -= 2;
        }
      }
    }
    else
    {
      v149 = *((_QWORD *)this + 3) + 16 * v117;
      *(_DWORD *)v149 = 1;
      *(_QWORD *)(v149 + 8) = v107;
      *((_DWORD *)this + 9) = v117 + 1;
    }
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v108, v109, v110, v111, v112, v113, v114);
      WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    goto LABEL_127;
  }
  *(_DWORD *)v89 += 2;
  v408 = 0;
  v409 = v89;
  v407 = 0;
  v90 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v90 = off_1E3572828;
  *((_QWORD *)v90 + 1) = &v407;
  v411 = v90;
  WTF::String::splitInternal<true>((uint64_t *)&v409, 0x2Eu, &v411, v91, v92, v93);
  v95 = v411;
  v411 = 0;
  if (v95)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v95 + 8))(v95);
  if (HIDWORD(v408) != 2
    || (v96 = *(int **)v407) == 0
    || (v97 = v96[1]) == 0
    || (v98 = *((_QWORD *)v407 + 1)) == 0
    || !*(_DWORD *)(v98 + 4))
  {
    v123 = WTF::fastCompactMalloc((WTF *)0x20);
    v131 = (WTF::StringImpl *)v123;
    *(_QWORD *)v123 = 0x4D00000002;
    *(_QWORD *)(v123 + 8) = "The 'method' property was formatted incorrectly. It should be 'Domain.method'";
    *(_DWORD *)(v123 + 16) = 4;
    if (*((_BYTE *)this + 48))
    {
      v132 = 2;
    }
    else
    {
      *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v132 = *(_DWORD *)v123;
    }
    LODWORD(v411) = 1;
    *(_DWORD *)v123 = v132 + 2;
    v412 = (WTF::StringImpl *)v123;
    v196 = *((unsigned int *)this + 9);
    if ((_DWORD)v196 == *((_DWORD *)this + 8))
    {
      v197 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v196 + 1, (unint64_t)&v411);
      v198 = *((unsigned int *)this + 9);
      v199 = *((_QWORD *)this + 3) + 16 * v198;
      *(_DWORD *)v199 = *(_DWORD *)v197;
      v200 = *(_QWORD *)(v197 + 8);
      *(_QWORD *)(v197 + 8) = 0;
      *(_QWORD *)(v199 + 8) = v200;
      v201 = v412;
      *((_DWORD *)this + 9) = v198 + 1;
      v412 = 0;
      if (v201)
      {
        if (*(_DWORD *)v201 == 2)
        {
          WTF::StringImpl::~StringImpl(v201, v124, v125, v126, v127, v128, v129, v130);
          WTF::fastFree(v312, v313, v314, v315, v316, v317, v318, v319);
        }
        else
        {
          *(_DWORD *)v201 -= 2;
        }
      }
    }
    else
    {
      v202 = *((_QWORD *)this + 3) + 16 * v196;
      *(_DWORD *)v202 = 1;
      *(_QWORD *)(v202 + 8) = v123;
      *((_DWORD *)this + 9) = v196 + 1;
    }
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v124, v125, v126, v127, v128, v129, v130);
      WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
    Inspector::BackendDispatcher::sendPendingErrors(this);
    goto LABEL_124;
  }
  v99 = *v96 + 2;
  *v96 = v99;
  v100 = *((_QWORD *)this + 2);
  if (v100)
  {
    v101 = *(_DWORD *)(v100 - 8);
    v102 = v96[4];
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v96);
    else
      v103 = v102 >> 8;
    for (j = 0; ; v103 = j + v105)
    {
      v105 = v103 & v101;
      v106 = *(WTF **)(v100 + 16 * v105);
      if (v106 != (WTF *)-1)
      {
        if (!v106)
          goto LABEL_196;
        if (WTF::equal(v106, (const WTF::StringImpl *)v96, v94))
          break;
      }
      ++j;
    }
    v328 = *(_QWORD *)(v100 + 16 * v105 + 8);
    if (v328)
    {
      if (HIDWORD(v408) > 1)
      {
        v329 = (WTF::StringImpl *)*((_QWORD *)v407 + 1);
        if (v329)
          *(_DWORD *)v329 += 2;
        v411 = v329;
        v406 = v50;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)v328 + 16))(v328, v53, &v411, &v406);
        v330 = v406;
        v406 = 0;
        if (v330)
        {
          if (*(_DWORD *)v330 == 1)
            WTF::JSONImpl::Value::operator delete(v330, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
          else
            --*(_DWORD *)v330;
        }
        if (*((_DWORD *)this + 9))
          Inspector::BackendDispatcher::sendPendingErrors(this);
        v331 = v411;
        v411 = 0;
        if (v331)
        {
          if (*(_DWORD *)v331 == 2)
          {
            WTF::StringImpl::~StringImpl(v331, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
            WTF::fastFree(v398, v399, v400, v401, v402, v403, v404, v405);
          }
          else
          {
            *(_DWORD *)v331 -= 2;
          }
        }
        v50 = 0;
        goto LABEL_214;
      }
LABEL_227:
      __break(0xC471u);
      JUMPOUT(0x1986142ACLL);
    }
LABEL_196:
    v99 = *v96;
    v97 = v96[1];
  }
  *v96 = v99 + 2;
  if (v97 < 0 || (v332 = __OFADD__(v97, 22), v333 = v97 + 22, v332) || __OFADD__(v333, 1))
  {
    v406 = 0;
    goto LABEL_226;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v333 + 1), (v96[4] >> 2) & 1, 39, (uint64_t)v96, (int8x16_t *)"' domain was not found", 0x16u, (int **)&v406);
  v341 = v406;
  if (!v406)
  {
LABEL_226:
    __break(0xC471u);
    JUMPOUT(0x198614E28);
  }
  if (!*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
  LODWORD(v411) = 2;
  *(_DWORD *)v341 += 2;
  v412 = v341;
  v342 = *((unsigned int *)this + 9);
  if ((_DWORD)v342 == *((_DWORD *)this + 8))
  {
    v343 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v342 + 1, (unint64_t)&v411);
    v344 = *((unsigned int *)this + 9);
    v345 = *((_QWORD *)this + 3) + 16 * v344;
    *(_DWORD *)v345 = *(_DWORD *)v343;
    v346 = *(_QWORD *)(v343 + 8);
    *(_QWORD *)(v343 + 8) = 0;
    *(_QWORD *)(v345 + 8) = v346;
    v347 = v412;
    *((_DWORD *)this + 9) = v344 + 1;
    v412 = 0;
    if (v347)
    {
      if (*(_DWORD *)v347 == 2)
      {
        WTF::StringImpl::~StringImpl(v347, v334, v335, v336, v337, v338, v339, v340);
        WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
      }
      else
      {
        *(_DWORD *)v347 -= 2;
      }
    }
  }
  else
  {
    v348 = *((_QWORD *)this + 3) + 16 * v342;
    *(_DWORD *)v348 = 2;
    *(_QWORD *)(v348 + 8) = v341;
    *((_DWORD *)this + 9) = v342 + 1;
  }
  v349 = v406;
  v406 = 0;
  if (v349)
  {
    if (*(_DWORD *)v349 == 2)
    {
      WTF::StringImpl::~StringImpl(v349, v334, v335, v336, v337, v338, v339, v340);
      WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
    }
    else
    {
      *(_DWORD *)v349 -= 2;
    }
  }
  if (*v96 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v96, v334, v335, v336, v337, v338, v339, v340);
    WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
  }
  else
  {
    *v96 -= 2;
  }
  Inspector::BackendDispatcher::sendPendingErrors(this);
LABEL_214:
  if (*v96 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v96, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
  }
  else
  {
    *v96 -= 2;
  }
LABEL_124:
  if (HIDWORD(v408))
  {
    v269 = v407;
    v270 = 8 * HIDWORD(v408);
    do
    {
      v271 = *(WTF::StringImpl **)v269;
      *(_QWORD *)v269 = 0;
      if (v271)
      {
        if (*(_DWORD *)v271 == 2)
        {
          WTF::StringImpl::~StringImpl(v271, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
          WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
        }
        else
        {
          *(_DWORD *)v271 -= 2;
        }
      }
      v269 = (WTF *)((char *)v269 + 8);
      v270 -= 8;
    }
    while (v270);
  }
  v203 = v407;
  if (v407)
  {
    v407 = 0;
    LODWORD(v408) = 0;
    WTF::fastFree((unint64_t)v203, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
  }
LABEL_127:
  v204 = v409;
  v409 = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  if (*(_DWORD *)v63 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v63, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
  else
    --*(_DWORD *)v63;
LABEL_132:
  *v7 = v410;
  *((_BYTE *)this + 48) = BYTE8(v410);
LABEL_133:
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
    else
      --*(_DWORD *)v50;
  }
LABEL_136:
  if (*(_DWORD *)this == 1)
  {
    Inspector::BackendDispatcher::~BackendDispatcher(this, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

void Inspector::BackendDispatcher::reportProtocolError(uint64_t a1, int a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;

  if (!*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 48);
  v27 = a2;
  v4 = *a3;
  if (*a3)
    *(_DWORD *)v4 += 2;
  v28 = v4;
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 32))
  {
    v6 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v5 + 1, (unint64_t)&v27);
    v14 = *(unsigned int *)(a1 + 36);
    v15 = *(_QWORD *)(a1 + 24) + 16 * v14;
    *(_DWORD *)v15 = *(_DWORD *)v6;
    v16 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v15 + 8) = v16;
    v17 = v28;
    *(_DWORD *)(a1 + 36) = v14 + 1;
    v28 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24) + 16 * v5;
    *(_DWORD *)v18 = a2;
    *(_QWORD *)(v18 + 8) = v4;
    *(_DWORD *)(a1 + 36) = v5 + 1;
  }
}

uint64_t Inspector::FrontendRouter::sendResponse(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 20);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 8);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t Inspector::BackendDispatcher::getBoolean(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &unk_1E3593AB8;
  v8[1] = WTF::JSONImpl::Value::asBoolean;
  v8[2] = 0;
  v9 = v8;
  v4 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>((uint64_t)this, (uint64_t)a2, a3, a4, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

uint64_t Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unsigned __int8 v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;

  if (!a2)
  {
    if (!a4)
      goto LABEL_46;
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Boolean", 8, (int8x16_t *)"'.", 3);
    v25 = v105;
    if (!v105)
      goto LABEL_65;
LABEL_35:
    if (!*(_BYTE *)(a1 + 48))
      *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 48);
    v106 = 3;
    *(_DWORD *)v25 += 2;
    v107 = v25;
    v48 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(a1 + 32))
    {
      v49 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v48 + 1, (unint64_t)&v106);
      v50 = *(unsigned int *)(a1 + 36);
      v51 = *(_QWORD *)(a1 + 24) + 16 * v50;
      *(_DWORD *)v51 = *(_DWORD *)v49;
      v52 = *(_QWORD *)(v49 + 8);
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v51 + 8) = v52;
      v53 = v107;
      *(_DWORD *)(a1 + 36) = v50 + 1;
      v107 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
    }
    else
    {
      v54 = *(_QWORD *)(a1 + 24) + 16 * v48;
      *(_DWORD *)v54 = 3;
      *(_QWORD *)(v54 + 8) = v25;
      *(_DWORD *)(a1 + 36) = v48 + 1;
    }
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      if (v17)
      {
LABEL_44:
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v25 -= 2;
      if (v17)
        goto LABEL_44;
    }
LABEL_46:
    v31 = 0;
    goto LABEL_47;
  }
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    goto LABEL_31;
  v11 = *(_DWORD *)(v9 - 8);
  v12 = *((_DWORD *)*a3 + 4);
  v13 = v12 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v12 >> 8;
  for (i = 0; ; v13 = i + v15)
  {
    v15 = v13 & v11;
    v16 = *(WTF **)(v9 + 16 * v15);
    if (v16 == (WTF *)-1)
      goto LABEL_9;
    if (!v16)
    {
      v26 = *(_QWORD *)(a2 + 16);
      if (v26)
      {
        v27 = *(unsigned int *)(v26 - 4);
        v28 = v26 + 16 * v27;
        goto LABEL_19;
      }
      goto LABEL_31;
    }
    if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_9:
    ++i;
  }
  v28 = v9 + 16 * v15;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
LABEL_19:
    if (v28 == v26 + 16 * v27)
    {
LABEL_31:
      if (!a4)
        goto LABEL_46;
      v17 = *a3;
      if (*a3)
        *(_DWORD *)v17 += 2;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"Parameter '", 12, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Boolean", 8, (int8x16_t *)"' was not found.", 17);
      v25 = v105;
      if (!v105)
      {
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x1986154E8);
      }
      goto LABEL_35;
    }
  }
  v29 = *(_QWORD *)(a5 + 24);
  if (!v29)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_64;
  }
  v30 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, *(_QWORD *)(v28 + 8));
  v31 = v30;
  v32 = HIBYTE(v30);
  if (HIBYTE(v30))
    return v31 | (v32 << 8);
  v33 = *a3;
  if (v33)
    *(_DWORD *)v33 += 2;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"Parameter '", 12, (uint64_t)v33, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Boolean", 8, (int8x16_t *)"'.", 3);
  v41 = v105;
  if (!v105)
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x1986151A0);
  }
  if (!*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 48);
  v106 = 3;
  *(_DWORD *)v41 += 2;
  v107 = v41;
  v42 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v42 == *(_DWORD *)(a1 + 32))
  {
    v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v42 + 1, (unint64_t)&v106);
    v44 = *(unsigned int *)(a1 + 36);
    v45 = *(_QWORD *)(a1 + 24) + 16 * v44;
    *(_DWORD *)v45 = *(_DWORD *)v43;
    v46 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v45 + 8) = v46;
    v47 = v107;
    *(_DWORD *)(a1 + 36) = v44 + 1;
    v107 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  else
  {
    v72 = *(_QWORD *)(a1 + 24) + 16 * v42;
    *(_DWORD *)v72 = 3;
    *(_QWORD *)(v72 + 8) = v41;
    *(_DWORD *)(a1 + 36) = v42 + 1;
  }
  if (*(_DWORD *)v41 == 2)
  {
    WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    if (v33)
      goto LABEL_56;
  }
  else
  {
    *(_DWORD *)v41 -= 2;
    if (v33)
    {
LABEL_56:
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
LABEL_47:
  v32 = 0;
  return v31 | (v32 << 8);
}

uint64_t Inspector::BackendDispatcher::getInteger(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E3593B00;
  v8[1] = WTF::JSONImpl::Value::asInteger;
  v8[2] = 0;
  v9 = v8;
  v4 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>((uint64_t)this, (uint64_t)a2, a3, a4, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

uint64_t Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;

  if (!a2)
  {
    if (!a4)
      goto LABEL_38;
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v106, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Integer", 8, (int8x16_t *)"'.", 3);
    v25 = v106;
    if (!v106)
      goto LABEL_66;
LABEL_27:
    if (!*(_BYTE *)(a1 + 48))
      *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 48);
    v107 = 3;
    *(_DWORD *)v25 += 2;
    v108 = v25;
    v34 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v34 == *(_DWORD *)(a1 + 32))
    {
      v35 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v34 + 1, (unint64_t)&v107);
      v36 = *(unsigned int *)(a1 + 36);
      v37 = *(_QWORD *)(a1 + 24) + 16 * v36;
      *(_DWORD *)v37 = *(_DWORD *)v35;
      v38 = *(_QWORD *)(v35 + 8);
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v37 + 8) = v38;
      v39 = v108;
      *(_DWORD *)(a1 + 36) = v36 + 1;
      v108 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 24) + 16 * v34;
      *(_DWORD *)v40 = 3;
      *(_QWORD *)(v40 + 8) = v25;
      *(_DWORD *)(a1 + 36) = v34 + 1;
    }
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      if (v17)
      {
LABEL_36:
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v25 -= 2;
      if (v17)
        goto LABEL_36;
    }
LABEL_38:
    v31 = 0;
    v33 = 0;
    LODWORD(v32) = 0;
    return v33 & 0xFF00000000 | v31 | ((_DWORD)v32 << 8);
  }
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    goto LABEL_23;
  v11 = *(_DWORD *)(v9 - 8);
  v12 = *((_DWORD *)*a3 + 4);
  v13 = v12 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v12 >> 8;
  for (i = 0; ; v13 = i + v15)
  {
    v15 = v13 & v11;
    v16 = *(WTF **)(v9 + 16 * v15);
    if (v16 == (WTF *)-1)
      goto LABEL_9;
    if (!v16)
    {
      v26 = *(_QWORD *)(a2 + 16);
      if (v26)
      {
        v27 = *(unsigned int *)(v26 - 4);
        v28 = v26 + 16 * v27;
        goto LABEL_19;
      }
      goto LABEL_23;
    }
    if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_9:
    ++i;
  }
  v28 = v9 + 16 * v15;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
LABEL_19:
    if (v28 == v26 + 16 * v27)
    {
LABEL_23:
      if (!a4)
        goto LABEL_38;
      v17 = *a3;
      if (*a3)
        *(_DWORD *)v17 += 2;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v106, (int8x16_t *)"Parameter '", 12, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Integer", 8, (int8x16_t *)"' was not found.", 17);
      v25 = v106;
      if (!v106)
      {
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x1986159ECLL);
      }
      goto LABEL_27;
    }
  }
  v29 = *(_QWORD *)(a5 + 24);
  if (!v29)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_65;
  }
  v30 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, *(_QWORD *)(v28 + 8));
  v31 = v30;
  v32 = v30 >> 8;
  if ((v30 & 0xFF00000000) == 0)
  {
    v42 = *a3;
    if (v42)
      *(_DWORD *)v42 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v106, (int8x16_t *)"Parameter '", 12, (uint64_t)v42, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Integer", 8, (int8x16_t *)"'.", 3);
    v50 = v106;
    if (v106)
    {
      if (!*(_BYTE *)(a1 + 48))
        *(_BYTE *)(a1 + 48) = *(_QWORD *)(a1 + 48);
      v107 = 3;
      *(_DWORD *)v50 += 2;
      v108 = v50;
      v51 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v51 == *(_DWORD *)(a1 + 32))
      {
        v52 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v51 + 1, (unint64_t)&v107);
        v53 = *(unsigned int *)(a1 + 36);
        v54 = *(_QWORD *)(a1 + 24) + 16 * v53;
        *(_DWORD *)v54 = *(_DWORD *)v52;
        v55 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v54 + 8) = v55;
        v56 = v108;
        *(_DWORD *)(a1 + 36) = v53 + 1;
        v108 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, v43, v44, v45, v46, v47, v48, v49);
            WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
      }
      else
      {
        v73 = *(_QWORD *)(a1 + 24) + 16 * v51;
        *(_DWORD *)v73 = 3;
        *(_QWORD *)(v73 + 8) = v50;
        *(_DWORD *)(a1 + 36) = v51 + 1;
      }
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        if (v42)
        {
LABEL_56:
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, v43, v44, v45, v46, v47, v48, v49);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v50 -= 2;
        if (v42)
          goto LABEL_56;
      }
      v33 = 0;
      return v33 & 0xFF00000000 | v31 | ((_DWORD)v32 << 8);
    }
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x198615688);
  }
  v33 = v30 & 0xFFFFFFFF00000000;
  return v33 & 0xFF00000000 | v31 | ((_DWORD)v32 << 8);
}

unint64_t Inspector::BackendDispatcher::getDouble(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, WTF::StringImpl **a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  _QWORD v108[3];
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v108[0] = &off_1E3593B48;
  v108[1] = WTF::JSONImpl::Value::asDouble;
  v108[2] = 0;
  v109 = v108;
  if (!a2)
  {
    if (!a4)
    {
      v29 = 0;
      v28 = 0;
      v38 = v108;
      v39 = 4;
      goto LABEL_44;
    }
    v15 = *a3;
    if (*a3)
      *(_DWORD *)v15 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v15, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Number", 7, (int8x16_t *)"'.", 3);
    v23 = v105;
    if (!v105)
    {
LABEL_72:
      __break(0xC471u);
      JUMPOUT(0x198615B0CLL);
    }
    goto LABEL_27;
  }
  v8 = *((_QWORD *)a2 + 2);
  if (!v8)
    goto LABEL_23;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *((_DWORD *)*a3 + 4);
  v11 = v10 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v10 >> 8;
  for (i = 0; ; v11 = i + v13)
  {
    v13 = v11 & v9;
    v14 = *(WTF **)(v8 + 16 * v13);
    if (v14 == (WTF *)-1)
      goto LABEL_9;
    if (!v14)
    {
      v24 = *((_QWORD *)a2 + 2);
      if (v24)
      {
        v25 = *(unsigned int *)(v24 - 4);
        v26 = v24 + 16 * v25;
        goto LABEL_19;
      }
      goto LABEL_23;
    }
    if (WTF::equal(v14, *a3, (const WTF::StringImpl *)a3))
      break;
LABEL_9:
    ++i;
  }
  v26 = v8 + 16 * v13;
  v24 = *((_QWORD *)a2 + 2);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
LABEL_19:
    if (v26 == v24 + 16 * v25)
    {
LABEL_23:
      if (!a4)
        goto LABEL_38;
      v15 = *a3;
      if (*a3)
        *(_DWORD *)v15 += 2;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"Parameter '", 12, (uint64_t)v15, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Number", 7, (int8x16_t *)"' was not found.", 17);
      v23 = v105;
      if (!v105)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x198615ECCLL);
      }
LABEL_27:
      if (!*((_BYTE *)this + 48))
        *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
      v106 = 3;
      *(_DWORD *)v23 += 2;
      v107 = v23;
      v31 = *((unsigned int *)this + 9);
      if ((_DWORD)v31 == *((_DWORD *)this + 8))
      {
        v32 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v31 + 1, (unint64_t)&v106);
        v33 = *((unsigned int *)this + 9);
        v34 = *((_QWORD *)this + 3) + 16 * v33;
        *(_DWORD *)v34 = *(_DWORD *)v32;
        v35 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v34 + 8) = v35;
        v36 = v107;
        *((_DWORD *)this + 9) = v33 + 1;
        v107 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      else
      {
        v37 = *((_QWORD *)this + 3) + 16 * v31;
        *(_DWORD *)v37 = 3;
        *(_QWORD *)(v37 + 8) = v23;
        *((_DWORD *)this + 9) = v31 + 1;
      }
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        if (v15)
        {
LABEL_36:
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::~StringImpl(v15, v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v23 -= 2;
        if (v15)
          goto LABEL_36;
      }
LABEL_38:
      v28 = 0;
      v29 = 0;
      goto LABEL_39;
    }
  }
  if (!v109)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_71;
  }
  v27 = (*(uint64_t (**)(_QWORD *, _QWORD))(*v109 + 48))(v109, *(_QWORD *)(v26 + 8));
  v28 = v27;
  v29 = v27 >> 8;
  if (v30)
    goto LABEL_39;
  v41 = *a3;
  if (v41)
    *(_DWORD *)v41 += 2;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v105, (int8x16_t *)"Parameter '", 12, (uint64_t)v41, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Number", 7, (int8x16_t *)"'.", 3);
  v49 = v105;
  if (!v105)
    goto LABEL_72;
  if (!*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
  v106 = 3;
  *(_DWORD *)v49 += 2;
  v107 = v49;
  v50 = *((unsigned int *)this + 9);
  if ((_DWORD)v50 == *((_DWORD *)this + 8))
  {
    v51 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v50 + 1, (unint64_t)&v106);
    v52 = *((unsigned int *)this + 9);
    v53 = *((_QWORD *)this + 3) + 16 * v52;
    *(_DWORD *)v53 = *(_DWORD *)v51;
    v54 = *(_QWORD *)(v51 + 8);
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v53 + 8) = v54;
    v55 = v107;
    *((_DWORD *)this + 9) = v52 + 1;
    v107 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
    }
  }
  else
  {
    v72 = *((_QWORD *)this + 3) + 16 * v50;
    *(_DWORD *)v72 = 3;
    *(_QWORD *)(v72 + 8) = v49;
    *((_DWORD *)this + 9) = v50 + 1;
  }
  if (*(_DWORD *)v49 == 2)
  {
    WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    if (v41)
      goto LABEL_62;
  }
  else
  {
    *(_DWORD *)v49 -= 2;
    if (v41)
    {
LABEL_62:
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
LABEL_39:
  v38 = v109;
  if (v109 == v108)
  {
    v39 = 4;
    v38 = v108;
LABEL_44:
    (*(void (**)(void))(*v38 + 8 * v39))();
    return v28 | (v29 << 8);
  }
  if (v109)
  {
    v39 = 5;
    goto LABEL_44;
  }
  return v28 | (v29 << 8);
}

_QWORD *Inspector::BackendDispatcher::getString@<X0>(Inspector::BackendDispatcher *this@<X0>, WTF::JSONImpl::Object *a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3593B90;
  v7[1] = WTF::JSONImpl::Value::asString;
  v7[2] = 0;
  v8 = v7;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(a5, (uint64_t)this, a2, a3, a4, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void Inspector::BackendDispatcher::getPropertyValue<WTF::String>(_QWORD *a1, uint64_t a2, const WTF::StringImpl *a3, WTF::StringImpl **a4, int a5, uint64_t a6)
{
  uint64_t v10;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;

  *a1 = 0;
  if (a3)
  {
    v10 = *((_QWORD *)a3 + 2);
    if (v10)
    {
      v13 = *(_DWORD *)(v10 - 8);
      v14 = *((_DWORD *)*a4 + 4);
      if (v14 < 0x100)
        v15 = WTF::StringImpl::hashSlowCase(*a4);
      else
        v15 = v14 >> 8;
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v13;
        v18 = *(WTF **)(v10 + 16 * v17);
        if (v18 != (WTF *)-1)
        {
          if (!v18)
          {
            v28 = *((_QWORD *)a3 + 2);
            if (v28)
            {
              v29 = *(unsigned int *)(v28 - 4);
              v30 = v28 + 16 * v29;
              goto LABEL_19;
            }
            goto LABEL_26;
          }
          if (WTF::equal(v18, *a4, a3))
            break;
        }
        ++i;
      }
      v30 = v10 + 16 * v17;
      v28 = *((_QWORD *)a3 + 2);
      if (!v28)
        goto LABEL_20;
      v29 = *(unsigned int *)(v28 - 4);
LABEL_19:
      if (v30 != v28 + 16 * v29)
      {
LABEL_20:
        v31 = *(_QWORD *)(a6 + 24);
        if (v31)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v31 + 48))(&v65, v31, *(_QWORD *)(v30 + 8));
          v32 = v65;
          *a1 = v65;
          if (!v32)
          {
            v19 = *a4;
            if (v19)
              *(_DWORD *)v19 += 2;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"String", 7, (int8x16_t *)"'.", 3);
            v27 = v64;
            if (!v64)
            {
              __break(0xC471u);
              JUMPOUT(0x19861613CLL);
            }
            goto LABEL_30;
          }
          return;
        }
        std::__throw_bad_function_call[abi:sn180100]();
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x198616080);
      }
    }
LABEL_26:
    if (!a5)
      return;
    v19 = *a4;
    if (v19)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"String", 7, (int8x16_t *)"' was not found.", 17);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
  else
  {
    if (!a5)
      return;
    v19 = *a4;
    if (*a4)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"String", 7, (int8x16_t *)"'.", 3);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
LABEL_30:
  if (!*(_BYTE *)(a2 + 48))
    *(_BYTE *)(a2 + 48) = *(_QWORD *)(a2 + 48);
  LODWORD(v65) = 3;
  *(_DWORD *)v27 += 2;
  v66 = v27;
  v33 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v33 == *(_DWORD *)(a2 + 32))
  {
    v34 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 24, v33 + 1, (unint64_t)&v65);
    v35 = *(unsigned int *)(a2 + 36);
    v36 = *(_QWORD *)(a2 + 24) + 16 * v35;
    *(_DWORD *)v36 = *(_DWORD *)v34;
    v37 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v36 + 8) = v37;
    v38 = v66;
    *(_DWORD *)(a2 + 36) = v35 + 1;
    v66 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  else
  {
    v39 = *(_QWORD *)(a2 + 24) + 16 * v33;
    *(_DWORD *)v39 = 3;
    *(_QWORD *)(v39 + 8) = v27;
    *(_DWORD *)(a2 + 36) = v33 + 1;
  }
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    if (!v19)
      return;
  }
  else
  {
    *(_DWORD *)v27 -= 2;
    if (!v19)
      return;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
}

_QWORD *Inspector::BackendDispatcher::getValue@<X0>(Inspector::BackendDispatcher *this@<X0>, WTF::JSONImpl::Object *a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v66[0] = &off_1E3593BD8;
  v66[1] = WTF::JSONImpl::Value::asValue;
  v66[2] = 0;
  v67 = v66;
  *a5 = 0;
  if (a2)
  {
    v10 = *((_QWORD *)a2 + 2);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = *((_DWORD *)*a3 + 4);
      if (v12 < 0x100)
        v13 = WTF::StringImpl::hashSlowCase(*a3);
      else
        v13 = v12 >> 8;
      for (i = 0; ; v13 = i + v15)
      {
        v15 = v13 & v11;
        v16 = *(WTF **)(v10 + 16 * v15);
        if (v16 != (WTF *)-1)
        {
          if (!v16)
          {
            v26 = *((_QWORD *)a2 + 2);
            if (v26)
            {
              v27 = *(unsigned int *)(v26 - 4);
              v28 = v26 + 16 * v27;
              goto LABEL_19;
            }
            goto LABEL_26;
          }
          if (WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
            break;
        }
        ++i;
      }
      v28 = v10 + 16 * v15;
      v26 = *((_QWORD *)a2 + 2);
      if (!v26)
        goto LABEL_20;
      v27 = *(unsigned int *)(v26 - 4);
LABEL_19:
      if (v28 != v26 + 16 * v27)
      {
LABEL_20:
        if (v67)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*v67 + 48))(&v64, v67, *(_QWORD *)(v28 + 8));
          v29 = v64;
          *a5 = v64;
          if (!v29)
          {
            v17 = *a3;
            if (v17)
              *(_DWORD *)v17 += 2;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v63, (int8x16_t *)"Parameter '", 12, (uint64_t)v17, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Value", 6, (int8x16_t *)"'.", 3);
            v25 = v63;
            if (!v63)
            {
              __break(0xC471u);
              JUMPOUT(0x1986164A8);
            }
            goto LABEL_30;
          }
          goto LABEL_41;
        }
        std::__throw_bad_function_call[abi:sn180100]();
LABEL_54:
        __break(0xC471u);
        JUMPOUT(0x1986163ECLL);
      }
    }
LABEL_26:
    if (!a4)
      goto LABEL_41;
    v17 = *a3;
    if (v17)
      *(_DWORD *)v17 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v63, (int8x16_t *)"Parameter '", 12, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Value", 6, (int8x16_t *)"' was not found.", 17);
    v25 = v63;
    if (!v63)
      goto LABEL_54;
  }
  else
  {
    if (!a4)
    {
      result = v66;
      v38 = 4;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v63, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v17, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Value", 6, (int8x16_t *)"'.", 3);
    v25 = v63;
    if (!v63)
      goto LABEL_54;
  }
LABEL_30:
  if (!*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = *((_QWORD *)this + 6);
  LODWORD(v64) = 3;
  *(_DWORD *)v25 += 2;
  v65 = v25;
  v30 = *((unsigned int *)this + 9);
  if ((_DWORD)v30 == *((_DWORD *)this + 8))
  {
    v31 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v30 + 1, (unint64_t)&v64);
    v32 = *((unsigned int *)this + 9);
    v33 = *((_QWORD *)this + 3) + 16 * v32;
    *(_DWORD *)v33 = *(_DWORD *)v31;
    v34 = *(_QWORD *)(v31 + 8);
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v33 + 8) = v34;
    v35 = v65;
    *((_DWORD *)this + 9) = v32 + 1;
    v65 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  else
  {
    v36 = *((_QWORD *)this + 3) + 16 * v30;
    *(_DWORD *)v36 = 3;
    *(_QWORD *)(v36 + 8) = v25;
    *((_DWORD *)this + 9) = v30 + 1;
  }
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    if (!v17)
      goto LABEL_41;
  }
  else
  {
    *(_DWORD *)v25 -= 2;
    if (!v17)
      goto LABEL_41;
  }
  if (*(_DWORD *)v17 == 2)
  {
    WTF::StringImpl::~StringImpl(v17, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
  }
  else
  {
    *(_DWORD *)v17 -= 2;
  }
LABEL_41:
  result = v67;
  if (v67 == v66)
  {
    v38 = 4;
    result = v66;
  }
  else
  {
    if (!v67)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

_DWORD *WTF::JSONImpl::Value::asValue@<X0>(_DWORD *this@<X0>, _QWORD *a2@<X8>)
{
  if (this)
    ++*this;
  *a2 = this;
  return this;
}

_QWORD *Inspector::BackendDispatcher::getObject@<X0>(Inspector::BackendDispatcher *this@<X0>, WTF::JSONImpl::Object *a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3593C20;
  v8 = v7;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(a5, (uint64_t)this, a2, a3, a4, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(_QWORD *a1, uint64_t a2, const WTF::StringImpl *a3, WTF::StringImpl **a4, int a5, uint64_t a6)
{
  uint64_t v10;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;

  *a1 = 0;
  if (a3)
  {
    v10 = *((_QWORD *)a3 + 2);
    if (v10)
    {
      v13 = *(_DWORD *)(v10 - 8);
      v14 = *((_DWORD *)*a4 + 4);
      if (v14 < 0x100)
        v15 = WTF::StringImpl::hashSlowCase(*a4);
      else
        v15 = v14 >> 8;
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v13;
        v18 = *(WTF **)(v10 + 16 * v17);
        if (v18 != (WTF *)-1)
        {
          if (!v18)
          {
            v28 = *((_QWORD *)a3 + 2);
            if (v28)
            {
              v29 = *(unsigned int *)(v28 - 4);
              v30 = v28 + 16 * v29;
              goto LABEL_19;
            }
            goto LABEL_26;
          }
          if (WTF::equal(v18, *a4, a3))
            break;
        }
        ++i;
      }
      v30 = v10 + 16 * v17;
      v28 = *((_QWORD *)a3 + 2);
      if (!v28)
        goto LABEL_20;
      v29 = *(unsigned int *)(v28 - 4);
LABEL_19:
      if (v30 != v28 + 16 * v29)
      {
LABEL_20:
        v31 = *(_QWORD *)(a6 + 24);
        if (v31)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v31 + 48))(&v65, v31, *(_QWORD *)(v30 + 8));
          v32 = v65;
          *a1 = v65;
          if (!v32)
          {
            v19 = *a4;
            if (v19)
              *(_DWORD *)v19 += 2;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Object", 7, (int8x16_t *)"'.", 3);
            v27 = v64;
            if (!v64)
            {
              __break(0xC471u);
              JUMPOUT(0x198616904);
            }
            goto LABEL_30;
          }
          return;
        }
        std::__throw_bad_function_call[abi:sn180100]();
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x198616848);
      }
    }
LABEL_26:
    if (!a5)
      return;
    v19 = *a4;
    if (v19)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Object", 7, (int8x16_t *)"' was not found.", 17);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
  else
  {
    if (!a5)
      return;
    v19 = *a4;
    if (*a4)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Object", 7, (int8x16_t *)"'.", 3);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
LABEL_30:
  if (!*(_BYTE *)(a2 + 48))
    *(_BYTE *)(a2 + 48) = *(_QWORD *)(a2 + 48);
  LODWORD(v65) = 3;
  *(_DWORD *)v27 += 2;
  v66 = v27;
  v33 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v33 == *(_DWORD *)(a2 + 32))
  {
    v34 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 24, v33 + 1, (unint64_t)&v65);
    v35 = *(unsigned int *)(a2 + 36);
    v36 = *(_QWORD *)(a2 + 24) + 16 * v35;
    *(_DWORD *)v36 = *(_DWORD *)v34;
    v37 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v36 + 8) = v37;
    v38 = v66;
    *(_DWORD *)(a2 + 36) = v35 + 1;
    v66 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  else
  {
    v39 = *(_QWORD *)(a2 + 24) + 16 * v33;
    *(_DWORD *)v39 = 3;
    *(_QWORD *)(v39 + 8) = v27;
    *(_DWORD *)(a2 + 36) = v33 + 1;
  }
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    if (!v19)
      return;
  }
  else
  {
    *(_DWORD *)v27 -= 2;
    if (!v19)
      return;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
}

_QWORD *Inspector::BackendDispatcher::getArray@<X0>(Inspector::BackendDispatcher *this@<X0>, WTF::JSONImpl::Object *a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3593C68;
  v7[1] = WTF::JSONImpl::Value::asArray;
  v7[2] = 0;
  v8 = v7;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(a5, (uint64_t)this, a2, a3, a4, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(_QWORD *a1, uint64_t a2, const WTF::StringImpl *a3, WTF::StringImpl **a4, int a5, uint64_t a6)
{
  uint64_t v10;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;

  *a1 = 0;
  if (a3)
  {
    v10 = *((_QWORD *)a3 + 2);
    if (v10)
    {
      v13 = *(_DWORD *)(v10 - 8);
      v14 = *((_DWORD *)*a4 + 4);
      if (v14 < 0x100)
        v15 = WTF::StringImpl::hashSlowCase(*a4);
      else
        v15 = v14 >> 8;
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v13;
        v18 = *(WTF **)(v10 + 16 * v17);
        if (v18 != (WTF *)-1)
        {
          if (!v18)
          {
            v28 = *((_QWORD *)a3 + 2);
            if (v28)
            {
              v29 = *(unsigned int *)(v28 - 4);
              v30 = v28 + 16 * v29;
              goto LABEL_19;
            }
            goto LABEL_26;
          }
          if (WTF::equal(v18, *a4, a3))
            break;
        }
        ++i;
      }
      v30 = v10 + 16 * v17;
      v28 = *((_QWORD *)a3 + 2);
      if (!v28)
        goto LABEL_20;
      v29 = *(unsigned int *)(v28 - 4);
LABEL_19:
      if (v30 != v28 + 16 * v29)
      {
LABEL_20:
        v31 = *(_QWORD *)(a6 + 24);
        if (v31)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v31 + 48))(&v65, v31, *(_QWORD *)(v30 + 8));
          v32 = v65;
          *a1 = v65;
          if (!v32)
          {
            v19 = *a4;
            if (v19)
              *(_DWORD *)v19 += 2;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' has wrong type. It must be '", 31, (int8x16_t *)"Array", 6, (int8x16_t *)"'.", 3);
            v27 = v64;
            if (!v64)
            {
              __break(0xC471u);
              JUMPOUT(0x198616CF8);
            }
            goto LABEL_30;
          }
          return;
        }
        std::__throw_bad_function_call[abi:sn180100]();
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x198616C3CLL);
      }
    }
LABEL_26:
    if (!a5)
      return;
    v19 = *a4;
    if (v19)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"Parameter '", 12, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Array", 6, (int8x16_t *)"' was not found.", 17);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
  else
  {
    if (!a5)
      return;
    v19 = *a4;
    if (*a4)
      *(_DWORD *)v19 += 2;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v64, (int8x16_t *)"'params' object must contain required parameter '", 50, (uint64_t)v19, (int8x16_t *)"' with type '", 14, (int8x16_t *)"Array", 6, (int8x16_t *)"'.", 3);
    v27 = v64;
    if (!v64)
      goto LABEL_48;
  }
LABEL_30:
  if (!*(_BYTE *)(a2 + 48))
    *(_BYTE *)(a2 + 48) = *(_QWORD *)(a2 + 48);
  LODWORD(v65) = 3;
  *(_DWORD *)v27 += 2;
  v66 = v27;
  v33 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v33 == *(_DWORD *)(a2 + 32))
  {
    v34 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 24, v33 + 1, (unint64_t)&v65);
    v35 = *(unsigned int *)(a2 + 36);
    v36 = *(_QWORD *)(a2 + 24) + 16 * v35;
    *(_DWORD *)v36 = *(_DWORD *)v34;
    v37 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v36 + 8) = v37;
    v38 = v66;
    *(_DWORD *)(a2 + 36) = v35 + 1;
    v66 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  else
  {
    v39 = *(_QWORD *)(a2 + 24) + 16 * v33;
    *(_DWORD *)v39 = 3;
    *(_QWORD *)(v39 + 8) = v27;
    *(_DWORD *)(a2 + 36) = v33 + 1;
  }
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    if (!v19)
      return;
  }
  else
  {
    *(_DWORD *)v27 -= 2;
    if (!v19)
      return;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
}

uint64_t WTF::JSONImpl::Value::asArray@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;

  v2 = *(_DWORD *)(this + 4);
  if (v2 < 6)
  {
    this = 0;
LABEL_3:
    *a2 = this;
    return this;
  }
  if (v2 == 6)
  {
    ++*(_DWORD *)this;
    goto LABEL_3;
  }
  this = 526;
  __break(0xC471u);
  return this;
}

void Inspector::AnimationBackendDispatcher::create(Inspector::AnimationBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591488;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "Animation";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::AnimationBackendDispatcher *Inspector::AnimationBackendDispatcher::AnimationBackendDispatcher(Inspector::AnimationBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::AnimationBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::AnimationBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591488;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "Animation";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::AnimationBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591488;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "Animation";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::AnimationBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((_MergedGlobals_35 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::AnimationBackendDispatcher::enable;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::AnimationBackendDispatcher::disable;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x1300000002;
  *(_QWORD *)(v87 + 8) = "requestEffectTarget";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::AnimationBackendDispatcher::requestEffectTarget;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1000000002;
  *(_QWORD *)(v88 + 8) = "resolveAnimation";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::AnimationBackendDispatcher::resolveAnimation;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xD00000002;
  *(_QWORD *)(v89 + 8) = "startTracking";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::AnimationBackendDispatcher::startTracking;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0xC00000002;
  *(_QWORD *)(v90 + 8) = "stopTracking";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::AnimationBackendDispatcher::stopTracking;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_70;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_86;
LABEL_70:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_81:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_85;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_81;
      v112 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_86:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58800 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  _MergedGlobals_35 = 1;
LABEL_4:
  v17 = qword_1ECF58800;
  if (!qword_1ECF58800)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58800 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58800;
    if (qword_1ECF58800)
    {
      v26 = *(_DWORD *)(qword_1ECF58800 - 4);
      v23 = qword_1ECF58800 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58800;
  if (qword_1ECF58800)
  {
    v26 = *(_DWORD *)(qword_1ECF58800 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_115;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 11))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 11), v42, (int8x16_t *)"'Animation.", 0xBu, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x198617A18);
      }
LABEL_115:
      v168 = 0;
      goto LABEL_116;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::AnimationBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::AnimationBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::AnimationBackendDispatcher::requestEffectTarget(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xB00000002;
  *(_QWORD *)(v7 + 8) = "animationId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4B00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Animation.requestEffectTarget' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::AnimationBackendDispatcher::resolveAnimation(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xC00000002;
      *(_QWORD *)(v80 + 8) = "effectTarget";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593798[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 32))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::AnimationBackendDispatcher::resolveAnimation(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  WTF *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t (**v157)();
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t (***v160)();
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "animationId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v153 = (WTF::StringImpl *)v8;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v156, v6, v7, &v153, 1, (uint64_t)&v157);
  v17 = v160;
  if (v160 == &v157)
  {
    v17 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "objectGroup";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v153 = (WTF::StringImpl *)v20;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v155, v18, v19, &v153, 0, (uint64_t)&v157);
  v29 = v160;
  if (v160 == &v157)
  {
    v29 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4800000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Animation.resolveAnimation' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v157) = 3;
    *(_DWORD *)v31 = v40;
    v158 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v157);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v158;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v158 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v153, *(_QWORD *)(a1 + 32), &v156, &v155);
    if (v154)
    {
      if (v154 != 1)
      {
        v149 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::AnimationBackendDispatcher::startTracking(v149);
        return;
      }
      v83 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v83 + 48))
        *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
      LODWORD(v157) = 5;
      v84 = v153;
      if (v153)
        *(_DWORD *)v153 += 2;
      v158 = v84;
      v85 = *(unsigned int *)(v83 + 36);
      if ((_DWORD)v85 == *(_DWORD *)(v83 + 32))
      {
        v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v157);
        v87 = *(unsigned int *)(v83 + 36);
        v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
        *(_DWORD *)v88 = *(_DWORD *)v86;
        v89 = *(_QWORD *)(v86 + 8);
        *(_QWORD *)(v86 + 8) = 0;
        *(_QWORD *)(v88 + 8) = v89;
        v90 = v158;
        *(_DWORD *)(v83 + 36) = v87 + 1;
        v158 = 0;
        if (!v90)
          goto LABEL_66;
        v91 = *(_DWORD *)v90 - 2;
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          goto LABEL_66;
        }
        goto LABEL_63;
      }
      v137 = *(_QWORD *)(v83 + 24) + 16 * v85;
      *(_DWORD *)v137 = 5;
      *(_QWORD *)(v137 + 8) = v84;
      *(_DWORD *)(v83 + 36) = v85 + 1;
    }
    else
    {
      v108 = v153;
      v153 = 0;
      v109 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v109 = 0x500000001;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 16) = 0;
      v152 = (WTF *)v109;
      v110 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v110 = 0x600000002;
      *(_QWORD *)(v110 + 8) = "object";
      *(_DWORD *)(v110 + 16) = 4;
      v150 = v108;
      v151 = (WTF::StringImpl *)v110;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v109 + 16), (WTF::AtomStringImpl *)&v151, (const WTF::StringImpl *)&v150, v111, v112, v113, v114, v115, (uint64_t)&v157);
      if ((_BYTE)v159)
      {
        v123 = (uint64_t *)(v109 + 24);
        v124 = *(unsigned int *)(v109 + 36);
        if ((_DWORD)v124 == *(_DWORD *)(v109 + 32))
        {
          v146 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v151);
          v124 = *(unsigned int *)(v109 + 36);
          v147 = *(_QWORD *)(v109 + 24);
          v148 = *v146;
          if (*v146)
            *v148 += 2;
          *(_QWORD *)(v147 + 8 * v124) = v148;
        }
        else
        {
          v125 = *v123;
          v126 = v151;
          if (v151)
            *(_DWORD *)v151 += 2;
          *(_QWORD *)(v125 + 8 * v124) = v126;
        }
        *(_DWORD *)(v109 + 36) = v124 + 1;
      }
      v127 = v150;
      v150 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 1)
          WTF::JSONImpl::Value::operator delete(v127, v116, v117, v118, v119, v120, v121, v122);
        else
          --*(_DWORD *)v127;
      }
      v128 = v151;
      v151 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
        {
          WTF::StringImpl::~StringImpl(v128, v116, v117, v118, v119, v120, v121, v122);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v128 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v90 = v152;
      if (!v152)
        goto LABEL_66;
      v91 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 != 1)
      {
LABEL_63:
        *(_DWORD *)v90 = v91;
        goto LABEL_66;
      }
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_66:
    if (v154 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937A8[v154])(&v157, &v153);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 40))(v47, a2, &v156, &v155);
LABEL_27:
  v49 = v155;
  v155 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v156;
  v156 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::AnimationBackendDispatcher::startTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::AnimationBackendDispatcher::stopTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 40))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ApplicationCacheBackendDispatcher::create(Inspector::ApplicationCacheBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35914B0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1000000002;
  *(_QWORD *)(v8 + 8) = "ApplicationCache";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::ApplicationCacheBackendDispatcher *Inspector::ApplicationCacheBackendDispatcher::ApplicationCacheBackendDispatcher(Inspector::ApplicationCacheBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::ApplicationCacheBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ApplicationCacheBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35914B0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1000000002;
  *(_QWORD *)(v5 + 8) = "ApplicationCache";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ApplicationCacheBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35914B0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1000000002;
  *(_QWORD *)(v5 + 8) = "ApplicationCache";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::ApplicationCacheBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"getFramesWithManifests", 22))
  {
    Inspector::ApplicationCacheBackendDispatcher::getFramesWithManifests(a1, a2);
    goto LABEL_35;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::ApplicationCacheBackendDispatcher::enable(a1, a2);
    goto LABEL_35;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::ApplicationCacheBackendDispatcher::disable(a1, a2);
    goto LABEL_35;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"getManifestForFrame", 19))
  {
    Inspector::ApplicationCacheBackendDispatcher::getManifestForFrame(a1, a2, &v72);
    goto LABEL_35;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"getApplicationCacheForFrame", 27))
  {
    Inspector::ApplicationCacheBackendDispatcher::getApplicationCacheForFrame(a1, a2, &v72);
    goto LABEL_35;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_47:
      v71 = 0;
      goto LABEL_48;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 18))
    goto LABEL_47;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 18), v37, (int8x16_t *)"'ApplicationCache.", 0x12u, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_48:
    __break(0xC471u);
    JUMPOUT(0x198619104);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_35;
      goto LABEL_33;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_35:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::ApplicationCacheBackendDispatcher::getFramesWithManifests(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::ApplicationCacheBackendDispatcher::enable(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x800000002;
    *(_QWORD *)(v31 + 8) = "frameIds";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E35937B8[v74])(&v75, &v73);
}

void Inspector::ApplicationCacheBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ApplicationCacheBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ApplicationCacheBackendDispatcher::getManifestForFrame(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "frameId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x5200000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'ApplicationCache.getManifestForFrame' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::ApplicationCacheBackendDispatcher::getApplicationCacheForFrame(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0xB00000002;
    *(_QWORD *)(v71 + 8) = "manifestURL";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 40))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::ApplicationCacheBackendDispatcher::getApplicationCacheForFrame(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  Inspector::AuditBackendDispatcher *v119;
  Inspector::BackendDispatcher *v120;
  Inspector::AuditBackendDispatcherHandler *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t (**v128)();
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "frameId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v125 = (WTF::StringImpl *)v7;
  v128 = &off_1E3593B90;
  v129 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v130 = 0;
  v131 = &v128;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v127, v5, v6, &v125, 1, (uint64_t)&v128);
  v16 = v131;
  if (v131 == &v128)
  {
    v16 = &v128;
  }
  else
  {
    if (!v131)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x5A00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'ApplicationCache.getApplicationCacheForFrame' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v128) = 3;
    *(_DWORD *)v18 = v27;
    v129 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v128);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v129;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v129 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 32))(&v125, *(_QWORD *)(a1 + 32), &v127);
    if (v126)
    {
      if (v126 != 1)
      {
        v119 = (Inspector::AuditBackendDispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::AuditBackendDispatcher::create(v119, v120, v121);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v128) = 5;
      v54 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      v129 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v128);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v129;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v129 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v125;
      v125 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v124 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x1000000002;
      *(_QWORD *)(v80 + 8) = "applicationCache";
      *(_DWORD *)(v80 + 16) = 4;
      v122 = v78;
      v123 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v123, (const WTF::StringImpl *)&v122, v81, v82, v83, v84, v85, (uint64_t)&v128);
      if ((_BYTE)v130)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v123);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v123;
          if (v123)
            *(_DWORD *)v123 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v122;
      v122 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v123;
      v123 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v124);
      v60 = v124;
      if (!v124)
        goto LABEL_54;
      v61 = *(_DWORD *)v124 - 1;
      if (*(_DWORD *)v124 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v124, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v126 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937D8[v126])(&v128, &v125);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 48))(v34, a2, &v127);
LABEL_20:
  v36 = v127;
  v127 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::AuditBackendDispatcher::create(Inspector::AuditBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35914D8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x500000002;
  *(_QWORD *)(v8 + 8) = "Audit";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::AuditBackendDispatcher *Inspector::AuditBackendDispatcher::AuditBackendDispatcher(Inspector::AuditBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::AuditBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::AuditBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35914D8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x500000002;
  *(_QWORD *)(v5 + 8) = "Audit";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::AuditBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35914D8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x500000002;
  *(_QWORD *)(v5 + 8) = "Audit";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::AuditBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"setup", 5))
  {
    Inspector::AuditBackendDispatcher::setup(a1, a2, (uint64_t *)&v72);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"run", 3))
  {
    Inspector::AuditBackendDispatcher::run(a1, a2, &v72);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"teardown", 8))
  {
    Inspector::AuditBackendDispatcher::teardown(a1, a2);
    goto LABEL_31;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_43:
      v71 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 7))
    goto LABEL_43;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 7), v37, (int8x16_t *)"'Audit.", 7u, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x19861A684);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_31:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::AuditBackendDispatcher::setup(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "contextId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v84 = (WTF *)&off_1E3593B00;
  v85 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v86 = 0;
  v87 = &v84;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 0, (uint64_t)&v84);
  v17 = v87;
  if (v87 == &v84)
  {
    v17 = &v84;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  v83 = v16;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3900000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Audit.setup' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v84) = 3;
    *(_DWORD *)v19 = v28;
    v85 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v84);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v85;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v85 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_32:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 16))(v35, a2, &v83);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t *))(a1 + 32))(&v81, *(_QWORD *)(a1 + 32), &v83);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v84 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v84);
    v52 = v84;
    if (!v84)
      goto LABEL_38;
    v53 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v84) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v85 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_38;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v84);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v85;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v85 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_38;
    }
LABEL_35:
    *(_DWORD *)v52 = v53;
  }
LABEL_38:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_32;
    }
  }
}

void Inspector::AuditBackendDispatcher::run(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  WTF *v140;
  WTF *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD **v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD **v170;
  uint64_t v171;
  _DWORD *v172;
  uint64_t v173;
  WTF *v174;
  WTF *v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  WTF *v178;
  WTF::StringImpl *v179;
  unsigned __int16 v180;
  int v181;
  uint64_t (**v182)();
  WTF::StringImpl *v183;
  uint64_t v184;
  uint64_t (***v185)();
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "test";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v179 = (WTF::StringImpl *)v8;
  v182 = &off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v177, v6, v7, &v179, 1, (uint64_t)&v182);
  v17 = v185;
  if (v185 == &v182)
  {
    v17 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "contextId";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v179 = (WTF::StringImpl *)v20;
  v182 = &off_1E3593B00;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v184 = 0;
  v185 = &v182;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, &v179, 0, (uint64_t)&v182);
  v30 = v185;
  if (v185 == &v182)
  {
    v30 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  v176 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3700000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Audit.run' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v182) = 3;
    *(_DWORD *)v32 = v41;
    v183 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v182);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v183;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v183 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_27;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t *))(**(_QWORD **)(a1 + 32)
                                                                                                  + 8))(&v179, *(_QWORD *)(a1 + 32), &v177, &v176);
    if (v181)
    {
      if (v181 != 1)
      {
        v173 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::AuditBackendDispatcher::teardown(v173);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v182) = 5;
      v76 = v179;
      if (v179)
        *(_DWORD *)v179 += 2;
      v183 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v182);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v183;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v183 = 0;
        if (!v82)
          goto LABEL_75;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_75;
        }
        goto LABEL_72;
      }
      v150 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v150 = 5;
      *(_QWORD *)(v150 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = v179;
      v179 = 0;
      v101 = v180;
      v102 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v102 = 0x500000001;
      *(_QWORD *)(v102 + 16) = 0;
      *(_QWORD *)(v102 + 24) = 0;
      *(_QWORD *)(v102 + 32) = 0;
      v175 = (WTF *)v102;
      v103 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v103 = 0x600000002;
      *(_QWORD *)(v103 + 8) = "result";
      *(_DWORD *)(v103 + 16) = 4;
      v178 = (WTF *)v103;
      v174 = v100;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v102 + 16), (WTF::AtomStringImpl *)&v178, (const WTF::StringImpl *)&v174, v104, v105, v106, v107, v108, (uint64_t)&v182);
      if ((_BYTE)v184)
      {
        v116 = (uint64_t *)(v102 + 24);
        v117 = *(unsigned int *)(v102 + 36);
        if ((_DWORD)v117 == *(_DWORD *)(v102 + 32))
        {
          v167 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v178);
          v117 = *(unsigned int *)(v102 + 36);
          v168 = *(_QWORD *)(v102 + 24);
          v169 = *v167;
          if (*v167)
            *v169 += 2;
          *(_QWORD *)(v168 + 8 * v117) = v169;
        }
        else
        {
          v118 = *v116;
          v119 = v178;
          if (v178)
            *(_DWORD *)v178 += 2;
          *(_QWORD *)(v118 + 8 * v117) = v119;
        }
        *(_DWORD *)(v102 + 36) = v117 + 1;
      }
      v120 = v174;
      v174 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 1)
          WTF::JSONImpl::Value::operator delete(v120, v109, v110, v111, v112, v113, v114, v115);
        else
          --*(_DWORD *)v120;
      }
      v121 = v178;
      v178 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
        {
          WTF::StringImpl::~StringImpl(v121, v109, v110, v111, v112, v113, v114, v115);
          WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
      }
      if (v101 >= 0x100)
      {
        v122 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v122 = 0x900000002;
        *(_QWORD *)(v122 + 8) = "wasThrown";
        *(_DWORD *)(v122 + 16) = 4;
        v174 = (WTF *)v122;
        v123 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v123 = 0x100000001;
        *((_BYTE *)v123 + 8) = v101 != 0;
        v178 = v123;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v102 + 16), (WTF::AtomStringImpl *)&v174, (const WTF::StringImpl *)&v178, v124, v125, v126, v127, v128, (uint64_t)&v182);
        if ((_BYTE)v184)
        {
          v136 = (uint64_t *)(v102 + 24);
          v137 = *(unsigned int *)(v102 + 36);
          if ((_DWORD)v137 == *(_DWORD *)(v102 + 32))
          {
            v170 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v174);
            v137 = *(unsigned int *)(v102 + 36);
            v171 = *(_QWORD *)(v102 + 24);
            v172 = *v170;
            if (*v170)
              *v172 += 2;
            *(_QWORD *)(v171 + 8 * v137) = v172;
          }
          else
          {
            v138 = *v136;
            v139 = v174;
            if (v174)
              *(_DWORD *)v174 += 2;
            *(_QWORD *)(v138 + 8 * v137) = v139;
          }
          *(_DWORD *)(v102 + 36) = v137 + 1;
        }
        v140 = v178;
        v178 = 0;
        if (v140)
        {
          if (*(_DWORD *)v140 == 1)
            WTF::JSONImpl::Value::operator delete(v140, v129, v130, v131, v132, v133, v134, v135);
          else
            --*(_DWORD *)v140;
        }
        v141 = v174;
        v174 = 0;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2)
          {
            WTF::StringImpl::~StringImpl(v141, v129, v130, v131, v132, v133, v134, v135);
            WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
          }
          else
          {
            *(_DWORD *)v141 -= 2;
          }
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v175);
      v82 = v175;
      if (!v175)
        goto LABEL_75;
      v83 = *(_DWORD *)v175 - 1;
      if (*(_DWORD *)v175 != 1)
      {
LABEL_72:
        *(_DWORD *)v82 = v83;
        goto LABEL_75;
      }
      WTF::JSONImpl::Value::operator delete(v175, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_75:
    if (v181 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937E8[v181])(&v182, &v179);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v48 + 24))(v48, a2, &v177, &v176);
LABEL_27:
  v50 = v177;
  v177 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::AuditBackendDispatcher::teardown(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::BrowserBackendDispatcher::create(Inspector::BrowserBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591500;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "Browser";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::BrowserBackendDispatcher *Inspector::BrowserBackendDispatcher::BrowserBackendDispatcher(Inspector::BrowserBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::BrowserBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::BrowserBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591500;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Browser";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::BrowserBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591500;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Browser";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::BrowserBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::BrowserBackendDispatcher::enable(a1, a2);
    goto LABEL_29;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::BrowserBackendDispatcher::disable(a1, a2);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *a3;
  if (*a3)
  {
    v26 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)v25 += 2;
    if (v26 < 0)
    {
LABEL_41:
      v71 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = __OFADD__(v26, 15);
  v28 = v26 + 15;
  if (v27 || __OFADD__(v28, 9))
    goto LABEL_41;
  v29 = !v25 || (*(_BYTE *)(v25 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 9), v29, (int8x16_t *)"'Browser.", 9u, v25, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v30 = v71;
  if (!v71)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x19861B7CCLL);
  }
  if (!*(_BYTE *)(v24 + 48))
    *(_BYTE *)(v24 + 48) = *(_QWORD *)(v24 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v30 += 2;
  v74 = v30;
  v31 = *(unsigned int *)(v24 + 36);
  if ((_DWORD)v31 == *(_DWORD *)(v24 + 32))
  {
    v32 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 24, v31 + 1, (unint64_t)&v73);
    v33 = *(unsigned int *)(v24 + 36);
    v34 = *(_QWORD *)(v24 + 24) + 16 * v33;
    *(_DWORD *)v34 = *(_DWORD *)v32;
    v35 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v34 + 8) = v35;
    v36 = v74;
    *(_DWORD *)(v24 + 36) = v33 + 1;
    v74 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v24 + 24) + 16 * v31;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v30;
    *(_DWORD *)(v24 + 36) = v31 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v25)
        goto LABEL_29;
      goto LABEL_27;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v25)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
LABEL_29:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::BrowserBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::BrowserBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CPUProfilerBackendDispatcher::create(Inspector::CPUProfilerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591528;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "CPUProfiler";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::CPUProfilerBackendDispatcher *Inspector::CPUProfilerBackendDispatcher::CPUProfilerBackendDispatcher(Inspector::CPUProfilerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::CPUProfilerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CPUProfilerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591528;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xB00000002;
  *(_QWORD *)(v5 + 8) = "CPUProfiler";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CPUProfilerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591528;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xB00000002;
  *(_QWORD *)(v5 + 8) = "CPUProfiler";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::CPUProfilerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"startTracking", 13))
  {
    Inspector::CPUProfilerBackendDispatcher::startTracking(a1, a2);
    goto LABEL_29;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"stopTracking", 12))
  {
    Inspector::CPUProfilerBackendDispatcher::stopTracking(a1, a2);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *a3;
  if (*a3)
  {
    v26 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)v25 += 2;
    if (v26 < 0)
    {
LABEL_41:
      v71 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = __OFADD__(v26, 15);
  v28 = v26 + 15;
  if (v27 || __OFADD__(v28, 13))
    goto LABEL_41;
  v29 = !v25 || (*(_BYTE *)(v25 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 13), v29, (int8x16_t *)"'CPUProfiler.", 0xDu, v25, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v30 = v71;
  if (!v71)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x19861C044);
  }
  if (!*(_BYTE *)(v24 + 48))
    *(_BYTE *)(v24 + 48) = *(_QWORD *)(v24 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v30 += 2;
  v74 = v30;
  v31 = *(unsigned int *)(v24 + 36);
  if ((_DWORD)v31 == *(_DWORD *)(v24 + 32))
  {
    v32 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 24, v31 + 1, (unint64_t)&v73);
    v33 = *(unsigned int *)(v24 + 36);
    v34 = *(_QWORD *)(v24 + 24) + 16 * v33;
    *(_DWORD *)v34 = *(_DWORD *)v32;
    v35 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v34 + 8) = v35;
    v36 = v74;
    *(_DWORD *)(v24 + 36) = v33 + 1;
    v74 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v24 + 24) + 16 * v31;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v30;
    *(_DWORD *)(v24 + 36) = v31 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v25)
        goto LABEL_29;
      goto LABEL_27;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v25)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
LABEL_29:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::CPUProfilerBackendDispatcher::startTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CPUProfilerBackendDispatcher::stopTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CSSBackendDispatcher::create(Inspector::CSSBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591550;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "CSS";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::CSSBackendDispatcher *Inspector::CSSBackendDispatcher::CSSBackendDispatcher(Inspector::CSSBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::CSSBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CSSBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591550;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x300000002;
  *(_QWORD *)(v5 + 8) = "CSS";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CSSBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591550;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x300000002;
  *(_QWORD *)(v5 + 8) = "CSS";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::CSSBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl **v114;
  const WTF::StringImpl *v115;
  unsigned int v116;
  unsigned int v117;
  char *v118;
  int i;
  unsigned int v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _OWORD *v296;
  char *v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  WTF *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  void (*v305)(uint64_t, uint64_t);
  uint64_t v306;
  WTF::StringImpl *v307;
  void (*v308)(uint64_t, uint64_t, uint64_t *);
  uint64_t v309;
  WTF::StringImpl *v310;
  void (*v311)(uint64_t, uint64_t, uint64_t *);
  uint64_t v312;
  WTF::StringImpl *v313;
  void (*v314)(uint64_t, uint64_t, uint64_t *);
  uint64_t v315;
  WTF::StringImpl *v316;
  void (*v317)(uint64_t, uint64_t, uint64_t *);
  uint64_t v318;
  WTF::StringImpl *v319;
  void (*v320)(uint64_t, uint64_t);
  uint64_t v321;
  WTF::StringImpl *v322;
  void (*v323)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v324;
  WTF::StringImpl *v325;
  void (*v326)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v327;
  WTF::StringImpl *v328;
  void (*v329)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v330;
  WTF::StringImpl *v331;
  void (*v332)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v333;
  WTF::StringImpl *v334;
  void (*v335)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v336;
  WTF::StringImpl *v337;
  void (*v338)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v339;
  WTF::StringImpl *v340;
  void (*v341)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v342;
  WTF::StringImpl *v343;
  void (*v344)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v345;
  WTF::StringImpl *v346;
  void (*v347)(uint64_t, uint64_t);
  uint64_t v348;
  WTF::StringImpl *v349;
  void (*v350)(uint64_t, uint64_t);
  uint64_t v351;
  WTF::StringImpl *v352;
  void (*v353)(uint64_t *, uint64_t, uint64_t *);
  uint64_t v354;
  WTF::StringImpl *v355;
  void (*v356)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v357;
  uint64_t v358;

  v358 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v301 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v301, v9, &v300);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587F1 & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x600000002;
  *(_QWORD *)(v86 + 8) = "enable";
  *(_DWORD *)(v86 + 16) = 4;
  v301 = (WTF::StringImpl *)v86;
  v302 = (WTF::StringImpl *)Inspector::CSSBackendDispatcher::enable;
  v303 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x700000002;
  *(_QWORD *)(v87 + 8) = "disable";
  *(_DWORD *)(v87 + 16) = 4;
  v304 = (WTF::StringImpl *)v87;
  v305 = Inspector::CSSBackendDispatcher::disable;
  v306 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1700000002;
  *(_QWORD *)(v88 + 8) = "getMatchedStylesForNode";
  *(_DWORD *)(v88 + 16) = 4;
  v307 = (WTF::StringImpl *)v88;
  v308 = Inspector::CSSBackendDispatcher::getMatchedStylesForNode;
  v309 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1600000002;
  *(_QWORD *)(v89 + 8) = "getInlineStylesForNode";
  *(_DWORD *)(v89 + 16) = 4;
  v310 = (WTF::StringImpl *)v89;
  v311 = Inspector::CSSBackendDispatcher::getInlineStylesForNode;
  v312 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1700000002;
  *(_QWORD *)(v90 + 8) = "getComputedStyleForNode";
  *(_DWORD *)(v90 + 16) = 4;
  v313 = (WTF::StringImpl *)v90;
  v314 = Inspector::CSSBackendDispatcher::getComputedStyleForNode;
  v315 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0x1200000002;
  *(_QWORD *)(v91 + 8) = "getFontDataForNode";
  *(_DWORD *)(v91 + 16) = 4;
  v316 = (WTF::StringImpl *)v91;
  v317 = Inspector::CSSBackendDispatcher::getFontDataForNode;
  v318 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x1100000002;
  *(_QWORD *)(v92 + 8) = "getAllStyleSheets";
  *(_DWORD *)(v92 + 16) = 4;
  v319 = (WTF::StringImpl *)v92;
  v320 = Inspector::CSSBackendDispatcher::getAllStyleSheets;
  v321 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0xD00000002;
  *(_QWORD *)(v93 + 8) = "getStyleSheet";
  *(_DWORD *)(v93 + 16) = 4;
  v322 = (WTF::StringImpl *)v93;
  v323 = Inspector::CSSBackendDispatcher::getStyleSheet;
  v324 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x1100000002;
  *(_QWORD *)(v94 + 8) = "getStyleSheetText";
  *(_DWORD *)(v94 + 16) = 4;
  v325 = (WTF::StringImpl *)v94;
  v326 = Inspector::CSSBackendDispatcher::getStyleSheetText;
  v327 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x1100000002;
  *(_QWORD *)(v95 + 8) = "setStyleSheetText";
  *(_DWORD *)(v95 + 16) = 4;
  v328 = (WTF::StringImpl *)v95;
  v329 = Inspector::CSSBackendDispatcher::setStyleSheetText;
  v330 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xC00000002;
  *(_QWORD *)(v96 + 8) = "setStyleText";
  *(_DWORD *)(v96 + 16) = 4;
  v331 = (WTF::StringImpl *)v96;
  v332 = Inspector::CSSBackendDispatcher::setStyleText;
  v333 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0xF00000002;
  *(_QWORD *)(v97 + 8) = "setRuleSelector";
  *(_DWORD *)(v97 + 16) = 4;
  v334 = (WTF::StringImpl *)v97;
  v335 = Inspector::CSSBackendDispatcher::setRuleSelector;
  v336 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x1500000002;
  *(_QWORD *)(v98 + 8) = "setGroupingHeaderText";
  *(_DWORD *)(v98 + 16) = 4;
  v337 = (WTF::StringImpl *)v98;
  v338 = Inspector::CSSBackendDispatcher::setGroupingHeaderText;
  v339 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x1000000002;
  *(_QWORD *)(v99 + 8) = "createStyleSheet";
  *(_DWORD *)(v99 + 16) = 4;
  v340 = (WTF::StringImpl *)v99;
  v341 = Inspector::CSSBackendDispatcher::createStyleSheet;
  v342 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x700000002;
  *(_QWORD *)(v100 + 8) = "addRule";
  *(_DWORD *)(v100 + 16) = 4;
  v343 = (WTF::StringImpl *)v100;
  v344 = Inspector::CSSBackendDispatcher::addRule;
  v345 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x1900000002;
  *(_QWORD *)(v101 + 8) = "getSupportedCSSProperties";
  *(_DWORD *)(v101 + 16) = 4;
  v346 = (WTF::StringImpl *)v101;
  v347 = Inspector::CSSBackendDispatcher::getSupportedCSSProperties;
  v348 = 0;
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0x2100000002;
  *(_QWORD *)(v102 + 8) = "getSupportedSystemFontFamilyNames";
  *(_DWORD *)(v102 + 16) = 4;
  v349 = (WTF::StringImpl *)v102;
  v350 = Inspector::CSSBackendDispatcher::getSupportedSystemFontFamilyNames;
  v351 = 0;
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0x1000000002;
  *(_QWORD *)(v103 + 8) = "forcePseudoState";
  *(_DWORD *)(v103 + 16) = 4;
  v352 = (WTF::StringImpl *)v103;
  v353 = Inspector::CSSBackendDispatcher::forcePseudoState;
  v354 = 0;
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v104 = 0x1F00000002;
  *(_QWORD *)(v104 + 8) = "setLayoutContextTypeChangedMode";
  *(_DWORD *)(v104 + 16) = 4;
  v355 = (WTF::StringImpl *)v104;
  v356 = Inspector::CSSBackendDispatcher::setLayoutContextTypeChangedMode;
  v357 = 0;
  v105 = (_OWORD *)WTF::fastMalloc((WTF *)0x310);
  bzero(v105 + 1, 0x300uLL);
  v298 = 0;
  v299 = (WTF::StringImpl *)(v105 + 1);
  *v105 = xmmword_199156B90;
  do
  {
    v112 = v299;
    if (v299
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v299, 8u), (v112 = v299) != 0))
    {
      v113 = *((_DWORD *)v112 - 2);
    }
    else
    {
      v113 = 0;
    }
    v114 = &v301 + 3 * v298;
    v115 = *v114;
    v116 = *((_DWORD *)*v114 + 4);
    if (v116 < 0x100)
      v117 = WTF::StringImpl::hashSlowCase(*v114);
    else
      v117 = v116 >> 8;
    v118 = 0;
    v296 = v114 + 1;
    for (i = 1; ; ++i)
    {
      v120 = v117 & v113;
      v121 = (WTF *)*((_QWORD *)v112 + 3 * (v117 & v113));
      if (v121 == (WTF *)-1)
      {
        v118 = (char *)v112 + 24 * v120;
        goto LABEL_70;
      }
      if (!v121)
        break;
      if (WTF::equal(v121, v115, v11))
        goto LABEL_86;
LABEL_70:
      v117 = i + v120;
    }
    v297 = (char *)v112 + 24 * v120;
    if (v118)
    {
      *(_QWORD *)v118 = 0;
      *((_QWORD *)v118 + 1) = 0;
      *((_QWORD *)v118 + 2) = 0;
      --*((_DWORD *)v112 - 4);
      v297 = v118;
    }
    if (v115)
      *(_DWORD *)v115 += 2;
    *(_QWORD *)v297 = v115;
    *(_OWORD *)(v297 + 8) = *v296;
    v122 = v299;
    if (v299)
      v123 = *((_DWORD *)v299 - 3) + 1;
    else
      v123 = 1;
    *((_DWORD *)v299 - 3) = v123;
    v124 = (*((_DWORD *)v122 - 4) + v123);
    v125 = *((unsigned int *)v122 - 1);
    if (v125 > 0x400)
    {
      if (v125 <= 2 * v124)
      {
LABEL_81:
        v126 = (_DWORD)v125 << (6 * v123 >= (2 * v125));
        goto LABEL_85;
      }
    }
    else if (3 * v125 <= 4 * v124)
    {
      if ((_DWORD)v125)
        goto LABEL_81;
      v126 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v299, v126);
    }
LABEL_86:
    ++v298;
  }
  while (v298 != 19);
  v127 = v299;
  v299 = 0;
  qword_1ECF58808 = (uint64_t)v127;
  v128 = v355;
  v355 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v352;
  v352 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v349;
  v349 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v346;
  v346 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = v343;
  v343 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = v340;
  v340 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = v337;
  v337 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v334;
  v334 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = v331;
  v331 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = v328;
  v328 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = v325;
  v325 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = v322;
  v322 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v319;
  v319 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = v316;
  v316 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = v313;
  v313 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = v310;
  v310 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
    {
      WTF::StringImpl::~StringImpl(v307, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
    }
    else
    {
      *(_DWORD *)v307 -= 2;
    }
  }
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
    {
      WTF::StringImpl::~StringImpl(v304, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
    }
    else
    {
      *(_DWORD *)v304 -= 2;
    }
  }
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, v106, (uint64_t)v11, v107, v108, v109, v110, v111);
      WTF::fastFree(v288, v289, v290, v291, v292, v293, v294, v295);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
  byte_1ECF587F1 = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[257];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[257];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[257];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_167;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 5))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 5), v43, (int8x16_t *)"'CSS.", 5u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v299);
        v44 = v299;
        if (v299)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v301) = 2;
          *(_DWORD *)v44 += 2;
          v302 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v301);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v302;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v302 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v299;
          v299 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_168:
        __break(0xC471u);
        JUMPOUT(0x19861D20CLL);
      }
LABEL_167:
      v299 = 0;
      goto LABEL_168;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v300);
LABEL_41:
  v53 = v300;
  v300 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::CSSBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CSSBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CSSBackendDispatcher::getMatchedStylesForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  unint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF *v179;
  WTF::StringImpl *v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _DWORD **v221;
  uint64_t v222;
  _DWORD *v223;
  _DWORD **v224;
  uint64_t v225;
  _DWORD *v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v230;
  WTF *v232;
  WTF::StringImpl *v233;
  WTF *v234;
  __int16 v235;
  __int16 v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  char v239;
  WTF::StringImpl *v240[2];
  WTF *v241;
  WTF::StringImpl **v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v237 = (WTF::StringImpl *)v7;
  v240[0] = (WTF::StringImpl *)&off_1E3593B00;
  v240[1] = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v241 = 0;
  v242 = v240;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v237, 1, (uint64_t)v240);
  v17 = v242;
  if (v242 == v240)
  {
    v17 = v240;
  }
  else
  {
    if (!v242)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xD00000002;
  *(_QWORD *)(v20 + 8) = "includePseudo";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v237 = (WTF::StringImpl *)v20;
  v240[0] = (WTF::StringImpl *)&unk_1E3593AB8;
  v240[1] = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v241 = 0;
  v242 = v240;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v237, 0, (uint64_t)v240);
  v30 = v242;
  if (v242 == v240)
  {
    v30 = v240;
  }
  else
  {
    if (!v242)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v236 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = *a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x1000000002;
  *(_QWORD *)(v33 + 8) = "includeInherited";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v237 = (WTF::StringImpl *)v33;
  v240[0] = (WTF::StringImpl *)&unk_1E3593AB8;
  v240[1] = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v241 = 0;
  v242 = v240;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v31, v32, &v237, 0, (uint64_t)v240);
  v43 = v242;
  if (v242 == v240)
  {
    v43 = v240;
  }
  else
  {
    if (!v242)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v43 + v34))();
LABEL_20:
  v235 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x4900000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'CSS.getMatchedStylesForNode' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v240[0]) = 3;
    *(_DWORD *)v45 = v54;
    v240[1] = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)v240);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v240[1];
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v240[1] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
    return;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (v61)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)v61 + 32))(v61, a2, v16, &v236, &v235);
      return;
    }
LABEL_114:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_114;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32)
                                                                                                + 16))(v240, *(_QWORD *)(a1 + 32), v16, &v236, &v235);
  if ((_DWORD)v242)
  {
    if ((_DWORD)v242 != 1)
    {
      v230 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::getInlineStylesForNode(v230);
      return;
    }
    v87 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v87 + 48))
      *(_BYTE *)(v87 + 48) = *(_QWORD *)(v87 + 48);
    LODWORD(v237) = 5;
    v88 = v240[0];
    if (v240[0])
      *(_DWORD *)v240[0] += 2;
    v238 = v88;
    v89 = *(unsigned int *)(v87 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v87 + 32))
    {
      v90 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87 + 24, v89 + 1, (unint64_t)&v237);
      v98 = *(unsigned int *)(v87 + 36);
      v99 = *(_QWORD *)(v87 + 24) + 16 * v98;
      *(_DWORD *)v99 = *(_DWORD *)v90;
      v100 = *(_QWORD *)(v90 + 8);
      *(_QWORD *)(v90 + 8) = 0;
      *(_QWORD *)(v99 + 8) = v100;
      v101 = v238;
      *(_DWORD *)(v87 + 36) = v98 + 1;
      v238 = 0;
      if (!v101)
        goto LABEL_95;
      v102 = *(_DWORD *)v101 - 2;
      if (*(_DWORD *)v101 == 2)
      {
        WTF::StringImpl::~StringImpl(v101, v91, v92, v93, v94, v95, v96, v97);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        goto LABEL_95;
      }
      goto LABEL_92;
    }
    v196 = *(_QWORD *)(v87 + 24) + 16 * v89;
    *(_DWORD *)v196 = 5;
    *(_QWORD *)(v196 + 8) = v88;
    *(_DWORD *)(v87 + 36) = v89 + 1;
    goto LABEL_95;
  }
  v120 = v240[0];
  v119 = v240[1];
  *(_OWORD *)v240 = 0u;
  v121 = v241;
  v241 = 0;
  v122 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v122 = 0x500000001;
  *(_QWORD *)(v122 + 16) = 0;
  v123 = (uint64_t *)(v122 + 16);
  *(_OWORD *)(v122 + 24) = 0u;
  v234 = (WTF *)v122;
  if (v120)
  {
    v124 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v124 = 0xF00000002;
    *(_QWORD *)(v124 + 8) = "matchedCSSRules";
    *(_DWORD *)(v124 + 16) = 4;
    v232 = v120;
    v233 = (WTF::StringImpl *)v124;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v123, &v233, (const WTF::StringImpl *)&v232, v125, v126, v127, v128, v129, (uint64_t)&v237);
    if (v239)
    {
      v137 = (uint64_t *)(v122 + 24);
      v138 = *(unsigned int *)(v122 + 36);
      if ((_DWORD)v138 == *(_DWORD *)(v122 + 32))
      {
        v221 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v233);
        v138 = *(unsigned int *)(v122 + 36);
        v222 = *(_QWORD *)(v122 + 24);
        v223 = *v221;
        if (*v221)
          *v223 += 2;
        *(_QWORD *)(v222 + 8 * v138) = v223;
      }
      else
      {
        v139 = *v137;
        v140 = v233;
        if (v233)
          *(_DWORD *)v233 += 2;
        *(_QWORD *)(v139 + 8 * v138) = v140;
      }
      *(_DWORD *)(v122 + 36) = v138 + 1;
    }
    v141 = v232;
    v232 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 1)
        WTF::JSONImpl::Value::operator delete(v141, v130, v131, v132, v133, v134, v135, v136);
      else
        --*(_DWORD *)v141;
    }
    v142 = v233;
    v233 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
      {
        WTF::StringImpl::~StringImpl(v142, v130, v131, v132, v133, v134, v135, v136);
        WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
        if (v119)
          goto LABEL_65;
        goto LABEL_77;
      }
      *(_DWORD *)v142 -= 2;
    }
  }
  if (v119)
  {
LABEL_65:
    v143 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v143 = 0xE00000002;
    *(_QWORD *)(v143 + 8) = "pseudoElements";
    *(_DWORD *)(v143 + 16) = 4;
    v232 = v119;
    v233 = (WTF::StringImpl *)v143;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v123, &v233, (const WTF::StringImpl *)&v232, v144, v145, v146, v147, v148, (uint64_t)&v237);
    if (v239)
    {
      v156 = (uint64_t *)(v122 + 24);
      v157 = *(unsigned int *)(v122 + 36);
      if ((_DWORD)v157 == *(_DWORD *)(v122 + 32))
      {
        v224 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v156, v157 + 1, (unint64_t)&v233);
        v157 = *(unsigned int *)(v122 + 36);
        v225 = *(_QWORD *)(v122 + 24);
        v226 = *v224;
        if (*v224)
          *v226 += 2;
        *(_QWORD *)(v225 + 8 * v157) = v226;
      }
      else
      {
        v158 = *v156;
        v159 = v233;
        if (v233)
          *(_DWORD *)v233 += 2;
        *(_QWORD *)(v158 + 8 * v157) = v159;
      }
      *(_DWORD *)(v122 + 36) = v157 + 1;
    }
    v160 = v232;
    v232 = 0;
    if (v160)
    {
      if (*(_DWORD *)v160 == 1)
        WTF::JSONImpl::Value::operator delete(v160, v149, v150, v151, v152, v153, v154, v155);
      else
        --*(_DWORD *)v160;
    }
    v161 = v233;
    v233 = 0;
    if (v161)
    {
      if (*(_DWORD *)v161 == 2)
      {
        WTF::StringImpl::~StringImpl(v161, v149, v150, v151, v152, v153, v154, v155);
        WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
      }
      else
      {
        *(_DWORD *)v161 -= 2;
      }
    }
  }
LABEL_77:
  if (v121)
  {
    v162 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v162 = 0x900000002;
    *(_QWORD *)(v162 + 8) = "inherited";
    *(_DWORD *)(v162 + 16) = 4;
    v232 = v121;
    v233 = (WTF::StringImpl *)v162;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v123, &v233, (const WTF::StringImpl *)&v232, v163, v164, v165, v166, v167, (uint64_t)&v237);
    if (v239)
    {
      v175 = (uint64_t *)(v122 + 24);
      v176 = *(unsigned int *)(v122 + 36);
      if ((_DWORD)v176 == *(_DWORD *)(v122 + 32))
      {
        v227 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v175, v176 + 1, (unint64_t)&v233);
        v176 = *(unsigned int *)(v122 + 36);
        v228 = *(_QWORD *)(v122 + 24);
        v229 = *v227;
        if (*v227)
          *v229 += 2;
        *(_QWORD *)(v228 + 8 * v176) = v229;
      }
      else
      {
        v177 = *v175;
        v178 = v233;
        if (v233)
          *(_DWORD *)v233 += 2;
        *(_QWORD *)(v177 + 8 * v176) = v178;
      }
      *(_DWORD *)(v122 + 36) = v176 + 1;
    }
    v179 = v232;
    v232 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 1)
        WTF::JSONImpl::Value::operator delete(v179, v168, v169, v170, v171, v172, v173, v174);
      else
        --*(_DWORD *)v179;
    }
    v180 = v233;
    v233 = 0;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2)
      {
        WTF::StringImpl::~StringImpl(v180, v168, v169, v170, v171, v172, v173, v174);
        WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
      }
      else
      {
        *(_DWORD *)v180 -= 2;
      }
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v234);
  v101 = v234;
  if (!v234)
    goto LABEL_95;
  v102 = *(_DWORD *)v234 - 1;
  if (*(_DWORD *)v234 != 1)
  {
LABEL_92:
    *(_DWORD *)v101 = v102;
    goto LABEL_95;
  }
  WTF::JSONImpl::Value::operator delete(v234, v181, v182, v183, v184, v185, v186, v187);
LABEL_95:
  if ((_DWORD)v242 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35937F8[v242])(&v237, v240);
}

void Inspector::CSSBackendDispatcher::getInlineStylesForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF *v116;
  WTF::StringImpl *v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  WTF *v157;
  WTF::StringImpl *v158;
  WTF *v159;
  __int128 v160;
  int v161;
  uint64_t (**v162)();
  WTF::StringImpl *v163;
  uint64_t v164;
  uint64_t (***v165)();
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  *(_QWORD *)&v160 = v7;
  v162 = &off_1E3593B00;
  v163 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v164 = 0;
  v165 = &v162;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, (WTF::StringImpl **)&v160, 1, (uint64_t)&v162);
  v17 = v165;
  if (v165 == &v162)
  {
    v17 = &v162;
  }
  else
  {
    if (!v165)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4800000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'CSS.getInlineStylesForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v162) = 3;
    *(_DWORD *)v19 = v28;
    v163 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v162);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v163;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v163 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, a2, v16);
      return;
    }
LABEL_80:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_80;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(&v160, *(_QWORD *)(a1 + 32), v16);
  if (!v161)
  {
    v77 = v160;
    v160 = 0u;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 16) = 0;
    v79 = (uint64_t *)(v78 + 16);
    *(_OWORD *)(v78 + 24) = 0u;
    v159 = (WTF *)v78;
    if ((_QWORD)v77)
    {
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xB00000002;
      *(_QWORD *)(v80 + 8) = "inlineStyle";
      *(_DWORD *)(v80 + 16) = 4;
      v157 = (WTF *)v77;
      v158 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v79, (WTF::AtomStringImpl *)&v158, (const WTF::StringImpl *)&v157, v81, v82, v83, v84, v85, (uint64_t)&v162);
      if ((_BYTE)v164)
      {
        v93 = (uint64_t *)(v78 + 24);
        v94 = *(unsigned int *)(v78 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v78 + 32))
        {
          v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v158);
          v94 = *(unsigned int *)(v78 + 36);
          v151 = *(_QWORD *)(v78 + 24);
          v152 = *v150;
          if (*v150)
            *v152 += 2;
          *(_QWORD *)(v151 + 8 * v94) = v152;
        }
        else
        {
          v95 = *v93;
          v96 = v158;
          if (v158)
            *(_DWORD *)v158 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v78 + 36) = v94 + 1;
      }
      v97 = v157;
      v157 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v158;
      v158 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
          if (*((_QWORD *)&v77 + 1))
            goto LABEL_49;
          goto LABEL_61;
        }
        *(_DWORD *)v98 -= 2;
      }
    }
    if (*((_QWORD *)&v77 + 1))
    {
LABEL_49:
      v99 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v99 = 0xF00000002;
      *(_QWORD *)(v99 + 8) = "attributesStyle";
      *(_DWORD *)(v99 + 16) = 4;
      v157 = (WTF *)*((_QWORD *)&v77 + 1);
      v158 = (WTF::StringImpl *)v99;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v79, (WTF::AtomStringImpl *)&v158, (const WTF::StringImpl *)&v157, v100, v101, v102, v103, v104, (uint64_t)&v162);
      if ((_BYTE)v164)
      {
        v112 = (uint64_t *)(v78 + 24);
        v113 = *(unsigned int *)(v78 + 36);
        if ((_DWORD)v113 == *(_DWORD *)(v78 + 32))
        {
          v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v158);
          v113 = *(unsigned int *)(v78 + 36);
          v154 = *(_QWORD *)(v78 + 24);
          v155 = *v153;
          if (*v153)
            *v155 += 2;
          *(_QWORD *)(v154 + 8 * v113) = v155;
        }
        else
        {
          v114 = *v112;
          v115 = v158;
          if (v158)
            *(_DWORD *)v158 += 2;
          *(_QWORD *)(v114 + 8 * v113) = v115;
        }
        *(_DWORD *)(v78 + 36) = v113 + 1;
      }
      v116 = v157;
      v157 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 1)
          WTF::JSONImpl::Value::operator delete(v116, v105, v106, v107, v108, v109, v110, v111);
        else
          --*(_DWORD *)v116;
      }
      v117 = v158;
      v158 = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
        {
          WTF::StringImpl::~StringImpl(v117, v105, v106, v107, v108, v109, v110, v111);
          WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
        }
        else
        {
          *(_DWORD *)v117 -= 2;
        }
      }
    }
LABEL_61:
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v159);
    v59 = v159;
    if (!v159)
      goto LABEL_66;
    v60 = *(_DWORD *)v159 - 1;
    if (*(_DWORD *)v159 != 1)
      goto LABEL_63;
    WTF::JSONImpl::Value::operator delete(v159, v118, v119, v120, v121, v122, v123, v124);
    goto LABEL_66;
  }
  if (v161 != 1)
  {
    v156 = std::__throw_bad_variant_access[abi:sn180100]();
    Inspector::CSSBackendDispatcher::getComputedStyleForNode(v156);
    return;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v162) = 5;
  v46 = (WTF::StringImpl *)v160;
  if ((_QWORD)v160)
    *(_DWORD *)v160 += 2;
  v163 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
  {
    v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v162);
    v56 = *(unsigned int *)(v45 + 36);
    v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
    *(_DWORD *)v57 = *(_DWORD *)v48;
    v58 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v57 + 8) = v58;
    v59 = v163;
    *(_DWORD *)(v45 + 36) = v56 + 1;
    v163 = 0;
    if (!v59)
      goto LABEL_66;
    v60 = *(_DWORD *)v59 - 2;
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      goto LABEL_66;
    }
LABEL_63:
    *(_DWORD *)v59 = v60;
    goto LABEL_66;
  }
  v133 = *(_QWORD *)(v45 + 24) + 16 * v47;
  *(_DWORD *)v133 = 5;
  *(_QWORD *)(v133 + 8) = v46;
  *(_DWORD *)(v45 + 36) = v47 + 1;
LABEL_66:
  if (v161 != -1)
    ((void (*)(uint64_t (***)(), __int128 *))off_1E3593808[v161])(&v162, &v160);
}

void Inspector::CSSBackendDispatcher::getComputedStyleForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4900000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'CSS.getComputedStyleForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::getFontDataForNode(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xD00000002;
    *(_QWORD *)(v79 + 8) = "computedStyle";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v78 + 16), &v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593818[v130])(&v131, &v129);
}

void Inspector::CSSBackendDispatcher::getFontDataForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4400000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'CSS.getFontDataForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 56))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::getAllStyleSheets(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xB00000002;
    *(_QWORD *)(v79 + 8) = "primaryFont";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v78 + 16), (WTF::AtomStringImpl *)&v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593828[v130])(&v131, &v129);
}

void Inspector::CSSBackendDispatcher::getAllStyleSheets(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 48))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::getStyleSheet(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x700000002;
    *(_QWORD *)(v31 + 8) = "headers";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593838[v74])(&v75, &v73);
}

void Inspector::CSSBackendDispatcher::getStyleSheet(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xC00000002;
  *(_QWORD *)(v7 + 8) = "styleSheetId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3F00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'CSS.getStyleSheet' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 56))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::getStyleSheetText(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xA00000002;
      *(_QWORD *)(v80 + 8) = "styleSheet";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593848[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 72))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CSSBackendDispatcher::getStyleSheetText(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xC00000002;
  *(_QWORD *)(v7 + 8) = "styleSheetId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4300000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'CSS.getStyleSheetText' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 64))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::setStyleSheetText(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0x400000002;
    *(_QWORD *)(v71 + 8) = "text";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 80))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CSSBackendDispatcher::setStyleSheetText(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF **v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xC00000002;
  *(_QWORD *)(v8 + 8) = "styleSheetId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v119 = (WTF::StringImpl *)v8;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v122, v6, v7, &v119, 1, (uint64_t)&v123);
  v17 = v126;
  if (v126 == &v123)
  {
    v17 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x400000002;
  *(_QWORD *)(v20 + 8) = "text";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v119 = (WTF::StringImpl *)v20;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v121, v18, v19, &v119, 1, (uint64_t)&v123);
  v29 = v126;
  if (v126 == &v123)
  {
    v29 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4300000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'CSS.setStyleSheetText' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v123) = 3;
    *(_DWORD *)v31 = v40;
    v124 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v123);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v124;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v124 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v100 = v39;
    goto LABEL_48;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 88))(v47, a2, &v122, &v121);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 72))(&v119, *(_QWORD *)(a1 + 32), &v122, &v121);
  if (!v120)
  {
    v109 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v109 = 0x500000001;
    *((_QWORD *)v109 + 3) = 0;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 2) = 0;
    v123 = v109;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v123);
    v90 = v123;
    if (!v123)
      goto LABEL_54;
    v91 = *(_DWORD *)v123 - 1;
    if (*(_DWORD *)v123 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v123, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  v83 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v83 + 48))
    *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
  LODWORD(v123) = 5;
  v84 = v119;
  if (v119)
    *(_DWORD *)v119 += 2;
  v124 = v84;
  v85 = *(unsigned int *)(v83 + 36);
  if ((_DWORD)v85 != *(_DWORD *)(v83 + 32))
  {
    v118 = *(_QWORD *)(v83 + 24) + 16 * v85;
    *(_DWORD *)v118 = 5;
    *(_QWORD *)(v118 + 8) = v84;
    *(_DWORD *)(v83 + 36) = v85 + 1;
    goto LABEL_54;
  }
  v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v123);
  v87 = *(unsigned int *)(v83 + 36);
  v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
  *(_DWORD *)v88 = *(_DWORD *)v86;
  v89 = *(_QWORD *)(v86 + 8);
  *(_QWORD *)(v86 + 8) = 0;
  *(_QWORD *)(v88 + 8) = v89;
  v90 = v124;
  *(_DWORD *)(v83 + 36) = v87 + 1;
  v124 = 0;
  if (v90)
  {
    v91 = *(_DWORD *)v90 - 2;
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_54;
    }
LABEL_51:
    *(_DWORD *)v90 = v91;
  }
LABEL_54:
  if (v120)
  {
    v100 = v119;
    v119 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
LABEL_48:
        WTF::StringImpl::~StringImpl(v100, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
        goto LABEL_27;
      }
      *(_DWORD *)v100 -= 2;
    }
  }
LABEL_27:
  v49 = v121;
  v121 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v122;
  v122 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::CSSBackendDispatcher::setStyleText(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD **v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  WTF *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF::StringImpl *v149;
  int v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WTF **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "styleId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v153 = (WTF *)&off_1E3593C20;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v152, v6, v7, &v149, 1, (uint64_t)&v153);
  v17 = v156;
  if (v156 == &v153)
  {
    v17 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x400000002;
  *(_QWORD *)(v20 + 8) = "text";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v149 = (WTF::StringImpl *)v20;
  v153 = (WTF *)&off_1E3593B90;
  v154 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v155 = 0;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v151, v18, v19, &v149, 1, (uint64_t)&v153);
  v29 = v156;
  if (v156 == &v153)
  {
    v29 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (!*(_DWORD *)(v30 + 36))
  {
    v47 = a1[3];
    if (v47)
    {
      v48 = v152;
      v152 = 0;
      v153 = v48;
      (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v47 + 96))(v47, a2, &v153, &v151);
      v49 = v153;
      v153 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v49;
      }
      goto LABEL_29;
    }
    v76 = a1[4];
    v77 = v152;
    v152 = 0;
    v153 = v77;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v76 + 80))(&v149, v76, &v153, &v151);
    v78 = v153;
    v153 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
        WTF::JSONImpl::Value::operator delete(v78, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v78;
    }
    if (v150)
    {
      if (v150 != 1)
      {
        v145 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::setRuleSelector(v145);
        return;
      }
      v79 = a1[2];
      if (!*(_BYTE *)(v79 + 48))
        *(_BYTE *)(v79 + 48) = *(_QWORD *)(v79 + 48);
      LODWORD(v153) = 5;
      v80 = v149;
      if (v149)
        *(_DWORD *)v149 += 2;
      v154 = v80;
      v81 = *(unsigned int *)(v79 + 36);
      if ((_DWORD)v81 == *(_DWORD *)(v79 + 32))
      {
        v82 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79 + 24, v81 + 1, (unint64_t)&v153);
        v83 = *(unsigned int *)(v79 + 36);
        v84 = *(_QWORD *)(v79 + 24) + 16 * v83;
        *(_DWORD *)v84 = *(_DWORD *)v82;
        v85 = *(_QWORD *)(v82 + 8);
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v84 + 8) = v85;
        v86 = v154;
        *(_DWORD *)(v79 + 36) = v83 + 1;
        v154 = 0;
        if (!v86)
          goto LABEL_71;
        v87 = *(_DWORD *)v86 - 2;
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::~StringImpl(v86, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          goto LABEL_71;
        }
        goto LABEL_68;
      }
      v133 = *(_QWORD *)(v79 + 24) + 16 * v81;
      *(_DWORD *)v133 = 5;
      *(_QWORD *)(v133 + 8) = v80;
      *(_DWORD *)(v79 + 36) = v81 + 1;
    }
    else
    {
      v104 = v149;
      v149 = 0;
      v105 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v105 = 0x500000001;
      *(_QWORD *)(v105 + 24) = 0;
      *(_QWORD *)(v105 + 32) = 0;
      *(_QWORD *)(v105 + 16) = 0;
      v148 = (WTF *)v105;
      v106 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v106 = 0x500000002;
      *(_QWORD *)(v106 + 8) = "style";
      *(_DWORD *)(v106 + 16) = 4;
      v146 = v104;
      v147 = (WTF::StringImpl *)v106;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v105 + 16), (WTF::AtomStringImpl *)&v147, (const WTF::StringImpl *)&v146, v107, v108, v109, v110, v111, (uint64_t)&v153);
      if ((_BYTE)v155)
      {
        v119 = (uint64_t *)(v105 + 24);
        v120 = *(unsigned int *)(v105 + 36);
        if ((_DWORD)v120 == *(_DWORD *)(v105 + 32))
        {
          v142 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v120 + 1, (unint64_t)&v147);
          v120 = *(unsigned int *)(v105 + 36);
          v143 = *(_QWORD *)(v105 + 24);
          v144 = *v142;
          if (*v142)
            *v144 += 2;
          *(_QWORD *)(v143 + 8 * v120) = v144;
        }
        else
        {
          v121 = *v119;
          v122 = v147;
          if (v147)
            *(_DWORD *)v147 += 2;
          *(_QWORD *)(v121 + 8 * v120) = v122;
        }
        *(_DWORD *)(v105 + 36) = v120 + 1;
      }
      v123 = v146;
      v146 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 1)
          WTF::JSONImpl::Value::operator delete(v123, v112, v113, v114, v115, v116, v117, v118);
        else
          --*(_DWORD *)v123;
      }
      v124 = v147;
      v147 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
        {
          WTF::StringImpl::~StringImpl(v124, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        }
        else
        {
          *(_DWORD *)v124 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v148);
      v86 = v148;
      if (!v148)
        goto LABEL_71;
      v87 = *(_DWORD *)v148 - 1;
      if (*(_DWORD *)v148 != 1)
      {
LABEL_68:
        *(_DWORD *)v86 = v87;
        goto LABEL_71;
      }
      WTF::JSONImpl::Value::operator delete(v148, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_71:
    if (v150 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3593858[v150])(&v153, &v149);
    goto LABEL_29;
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  v39 = (WTF::StringImpl *)v31;
  *(_QWORD *)v31 = 0x3E00000002;
  *(_QWORD *)(v31 + 8) = "Some arguments of method 'CSS.setStyleText' can't be processed";
  v40 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  if (!*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
    v40 = *(_DWORD *)v31 + 2;
  }
  LODWORD(v153) = 3;
  *(_DWORD *)v31 = v40;
  v154 = (WTF::StringImpl *)v31;
  v41 = *(unsigned int *)(v30 + 36);
  if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
  {
    v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v153);
    v43 = *(unsigned int *)(v30 + 36);
    v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
    *(_DWORD *)v44 = *(_DWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v44 + 8) = v45;
    v46 = v154;
    *(_DWORD *)(v30 + 36) = v43 + 1;
    v154 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v50 = *(_QWORD *)(v30 + 24) + 16 * v41;
    *(_DWORD *)v50 = 3;
    *(_QWORD *)(v50 + 8) = v31;
    *(_DWORD *)(v30 + 36) = v41 + 1;
  }
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
LABEL_29:
  v51 = v151;
  v151 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  if (v152)
  {
    if (*(_DWORD *)v152 == 1)
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v152;
  }
}

void Inspector::CSSBackendDispatcher::setRuleSelector(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD **v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  WTF *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF::StringImpl *v149;
  int v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WTF **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "ruleId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v153 = (WTF *)&off_1E3593C20;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v152, v6, v7, &v149, 1, (uint64_t)&v153);
  v17 = v156;
  if (v156 == &v153)
  {
    v17 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x800000002;
  *(_QWORD *)(v20 + 8) = "selector";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v149 = (WTF::StringImpl *)v20;
  v153 = (WTF *)&off_1E3593B90;
  v154 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v155 = 0;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v151, v18, v19, &v149, 1, (uint64_t)&v153);
  v29 = v156;
  if (v156 == &v153)
  {
    v29 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (!*(_DWORD *)(v30 + 36))
  {
    v47 = a1[3];
    if (v47)
    {
      v48 = v152;
      v152 = 0;
      v153 = v48;
      (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v47 + 104))(v47, a2, &v153, &v151);
      v49 = v153;
      v153 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v49;
      }
      goto LABEL_29;
    }
    v76 = a1[4];
    v77 = v152;
    v152 = 0;
    v153 = v77;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v76 + 88))(&v149, v76, &v153, &v151);
    v78 = v153;
    v153 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
        WTF::JSONImpl::Value::operator delete(v78, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v78;
    }
    if (v150)
    {
      if (v150 != 1)
      {
        v145 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::setGroupingHeaderText(v145);
        return;
      }
      v79 = a1[2];
      if (!*(_BYTE *)(v79 + 48))
        *(_BYTE *)(v79 + 48) = *(_QWORD *)(v79 + 48);
      LODWORD(v153) = 5;
      v80 = v149;
      if (v149)
        *(_DWORD *)v149 += 2;
      v154 = v80;
      v81 = *(unsigned int *)(v79 + 36);
      if ((_DWORD)v81 == *(_DWORD *)(v79 + 32))
      {
        v82 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79 + 24, v81 + 1, (unint64_t)&v153);
        v83 = *(unsigned int *)(v79 + 36);
        v84 = *(_QWORD *)(v79 + 24) + 16 * v83;
        *(_DWORD *)v84 = *(_DWORD *)v82;
        v85 = *(_QWORD *)(v82 + 8);
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v84 + 8) = v85;
        v86 = v154;
        *(_DWORD *)(v79 + 36) = v83 + 1;
        v154 = 0;
        if (!v86)
          goto LABEL_71;
        v87 = *(_DWORD *)v86 - 2;
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::~StringImpl(v86, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          goto LABEL_71;
        }
        goto LABEL_68;
      }
      v133 = *(_QWORD *)(v79 + 24) + 16 * v81;
      *(_DWORD *)v133 = 5;
      *(_QWORD *)(v133 + 8) = v80;
      *(_DWORD *)(v79 + 36) = v81 + 1;
    }
    else
    {
      v104 = v149;
      v149 = 0;
      v105 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v105 = 0x500000001;
      *(_QWORD *)(v105 + 24) = 0;
      *(_QWORD *)(v105 + 32) = 0;
      *(_QWORD *)(v105 + 16) = 0;
      v148 = (WTF *)v105;
      v106 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v106 = 0x400000002;
      *(_QWORD *)(v106 + 8) = "rule";
      *(_DWORD *)(v106 + 16) = 4;
      v146 = v104;
      v147 = (WTF::StringImpl *)v106;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v105 + 16), (WTF::AtomStringImpl *)&v147, (const WTF::StringImpl *)&v146, v107, v108, v109, v110, v111, (uint64_t)&v153);
      if ((_BYTE)v155)
      {
        v119 = (uint64_t *)(v105 + 24);
        v120 = *(unsigned int *)(v105 + 36);
        if ((_DWORD)v120 == *(_DWORD *)(v105 + 32))
        {
          v142 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v120 + 1, (unint64_t)&v147);
          v120 = *(unsigned int *)(v105 + 36);
          v143 = *(_QWORD *)(v105 + 24);
          v144 = *v142;
          if (*v142)
            *v144 += 2;
          *(_QWORD *)(v143 + 8 * v120) = v144;
        }
        else
        {
          v121 = *v119;
          v122 = v147;
          if (v147)
            *(_DWORD *)v147 += 2;
          *(_QWORD *)(v121 + 8 * v120) = v122;
        }
        *(_DWORD *)(v105 + 36) = v120 + 1;
      }
      v123 = v146;
      v146 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 1)
          WTF::JSONImpl::Value::operator delete(v123, v112, v113, v114, v115, v116, v117, v118);
        else
          --*(_DWORD *)v123;
      }
      v124 = v147;
      v147 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
        {
          WTF::StringImpl::~StringImpl(v124, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        }
        else
        {
          *(_DWORD *)v124 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v148);
      v86 = v148;
      if (!v148)
        goto LABEL_71;
      v87 = *(_DWORD *)v148 - 1;
      if (*(_DWORD *)v148 != 1)
      {
LABEL_68:
        *(_DWORD *)v86 = v87;
        goto LABEL_71;
      }
      WTF::JSONImpl::Value::operator delete(v148, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_71:
    if (v150 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3593868[v150])(&v153, &v149);
    goto LABEL_29;
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  v39 = (WTF::StringImpl *)v31;
  *(_QWORD *)v31 = 0x4100000002;
  *(_QWORD *)(v31 + 8) = "Some arguments of method 'CSS.setRuleSelector' can't be processed";
  v40 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  if (!*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
    v40 = *(_DWORD *)v31 + 2;
  }
  LODWORD(v153) = 3;
  *(_DWORD *)v31 = v40;
  v154 = (WTF::StringImpl *)v31;
  v41 = *(unsigned int *)(v30 + 36);
  if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
  {
    v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v153);
    v43 = *(unsigned int *)(v30 + 36);
    v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
    *(_DWORD *)v44 = *(_DWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v44 + 8) = v45;
    v46 = v154;
    *(_DWORD *)(v30 + 36) = v43 + 1;
    v154 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v50 = *(_QWORD *)(v30 + 24) + 16 * v41;
    *(_DWORD *)v50 = 3;
    *(_QWORD *)(v50 + 8) = v31;
    *(_DWORD *)(v30 + 36) = v41 + 1;
  }
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
LABEL_29:
  v51 = v151;
  v151 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  if (v152)
  {
    if (*(_DWORD *)v152 == 1)
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v152;
  }
}

void Inspector::CSSBackendDispatcher::setGroupingHeaderText(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD **v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  WTF *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF::StringImpl *v149;
  int v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  WTF **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "ruleId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v153 = (WTF *)&off_1E3593C20;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v152, v6, v7, &v149, 1, (uint64_t)&v153);
  v17 = v156;
  if (v156 == &v153)
  {
    v17 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "headerText";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v149 = (WTF::StringImpl *)v20;
  v153 = (WTF *)&off_1E3593B90;
  v154 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v155 = 0;
  v156 = &v153;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v151, v18, v19, &v149, 1, (uint64_t)&v153);
  v29 = v156;
  if (v156 == &v153)
  {
    v29 = &v153;
  }
  else
  {
    if (!v156)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (!*(_DWORD *)(v30 + 36))
  {
    v47 = a1[3];
    if (v47)
    {
      v48 = v152;
      v152 = 0;
      v153 = v48;
      (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v47 + 112))(v47, a2, &v153, &v151);
      v49 = v153;
      v153 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v49;
      }
      goto LABEL_29;
    }
    v76 = a1[4];
    v77 = v152;
    v152 = 0;
    v153 = v77;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v76 + 96))(&v149, v76, &v153, &v151);
    v78 = v153;
    v153 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 1)
        WTF::JSONImpl::Value::operator delete(v78, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v78;
    }
    if (v150)
    {
      if (v150 != 1)
      {
        v145 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::createStyleSheet(v145);
        return;
      }
      v79 = a1[2];
      if (!*(_BYTE *)(v79 + 48))
        *(_BYTE *)(v79 + 48) = *(_QWORD *)(v79 + 48);
      LODWORD(v153) = 5;
      v80 = v149;
      if (v149)
        *(_DWORD *)v149 += 2;
      v154 = v80;
      v81 = *(unsigned int *)(v79 + 36);
      if ((_DWORD)v81 == *(_DWORD *)(v79 + 32))
      {
        v82 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79 + 24, v81 + 1, (unint64_t)&v153);
        v83 = *(unsigned int *)(v79 + 36);
        v84 = *(_QWORD *)(v79 + 24) + 16 * v83;
        *(_DWORD *)v84 = *(_DWORD *)v82;
        v85 = *(_QWORD *)(v82 + 8);
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v84 + 8) = v85;
        v86 = v154;
        *(_DWORD *)(v79 + 36) = v83 + 1;
        v154 = 0;
        if (!v86)
          goto LABEL_71;
        v87 = *(_DWORD *)v86 - 2;
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::~StringImpl(v86, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          goto LABEL_71;
        }
        goto LABEL_68;
      }
      v133 = *(_QWORD *)(v79 + 24) + 16 * v81;
      *(_DWORD *)v133 = 5;
      *(_QWORD *)(v133 + 8) = v80;
      *(_DWORD *)(v79 + 36) = v81 + 1;
    }
    else
    {
      v104 = v149;
      v149 = 0;
      v105 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v105 = 0x500000001;
      *(_QWORD *)(v105 + 24) = 0;
      *(_QWORD *)(v105 + 32) = 0;
      *(_QWORD *)(v105 + 16) = 0;
      v148 = (WTF *)v105;
      v106 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v106 = 0x800000002;
      *(_QWORD *)(v106 + 8) = "grouping";
      *(_DWORD *)(v106 + 16) = 4;
      v146 = v104;
      v147 = (WTF::StringImpl *)v106;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v105 + 16), (WTF::AtomStringImpl *)&v147, (const WTF::StringImpl *)&v146, v107, v108, v109, v110, v111, (uint64_t)&v153);
      if ((_BYTE)v155)
      {
        v119 = (uint64_t *)(v105 + 24);
        v120 = *(unsigned int *)(v105 + 36);
        if ((_DWORD)v120 == *(_DWORD *)(v105 + 32))
        {
          v142 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v120 + 1, (unint64_t)&v147);
          v120 = *(unsigned int *)(v105 + 36);
          v143 = *(_QWORD *)(v105 + 24);
          v144 = *v142;
          if (*v142)
            *v144 += 2;
          *(_QWORD *)(v143 + 8 * v120) = v144;
        }
        else
        {
          v121 = *v119;
          v122 = v147;
          if (v147)
            *(_DWORD *)v147 += 2;
          *(_QWORD *)(v121 + 8 * v120) = v122;
        }
        *(_DWORD *)(v105 + 36) = v120 + 1;
      }
      v123 = v146;
      v146 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 1)
          WTF::JSONImpl::Value::operator delete(v123, v112, v113, v114, v115, v116, v117, v118);
        else
          --*(_DWORD *)v123;
      }
      v124 = v147;
      v147 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
        {
          WTF::StringImpl::~StringImpl(v124, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        }
        else
        {
          *(_DWORD *)v124 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v148);
      v86 = v148;
      if (!v148)
        goto LABEL_71;
      v87 = *(_DWORD *)v148 - 1;
      if (*(_DWORD *)v148 != 1)
      {
LABEL_68:
        *(_DWORD *)v86 = v87;
        goto LABEL_71;
      }
      WTF::JSONImpl::Value::operator delete(v148, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_71:
    if (v150 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3593878[v150])(&v153, &v149);
    goto LABEL_29;
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  v39 = (WTF::StringImpl *)v31;
  *(_QWORD *)v31 = 0x4700000002;
  *(_QWORD *)(v31 + 8) = "Some arguments of method 'CSS.setGroupingHeaderText' can't be processed";
  v40 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  if (!*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
    v40 = *(_DWORD *)v31 + 2;
  }
  LODWORD(v153) = 3;
  *(_DWORD *)v31 = v40;
  v154 = (WTF::StringImpl *)v31;
  v41 = *(unsigned int *)(v30 + 36);
  if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
  {
    v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v153);
    v43 = *(unsigned int *)(v30 + 36);
    v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
    *(_DWORD *)v44 = *(_DWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v44 + 8) = v45;
    v46 = v154;
    *(_DWORD *)(v30 + 36) = v43 + 1;
    v154 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v50 = *(_QWORD *)(v30 + 24) + 16 * v41;
    *(_DWORD *)v50 = 3;
    *(_QWORD *)(v50 + 8) = v31;
    *(_DWORD *)(v30 + 36) = v41 + 1;
  }
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
LABEL_29:
  v51 = v151;
  v151 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  if (v152)
  {
    if (*(_DWORD *)v152 == 1)
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v152;
  }
}

void Inspector::CSSBackendDispatcher::createStyleSheet(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "frameId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4200000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'CSS.createStyleSheet' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 104))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::addRule(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0xC00000002;
    *(_QWORD *)(v71 + 8) = "styleSheetId";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 120))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CSSBackendDispatcher::addRule(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  WTF *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t (**v157)();
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t (***v160)();
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xC00000002;
  *(_QWORD *)(v8 + 8) = "styleSheetId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v153 = (WTF::StringImpl *)v8;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v156, v6, v7, &v153, 1, (uint64_t)&v157);
  v17 = v160;
  if (v160 == &v157)
  {
    v17 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x800000002;
  *(_QWORD *)(v20 + 8) = "selector";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v153 = (WTF::StringImpl *)v20;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v155, v18, v19, &v153, 1, (uint64_t)&v157);
  v29 = v160;
  if (v160 == &v157)
  {
    v29 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x3900000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'CSS.addRule' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v157) = 3;
    *(_DWORD *)v31 = v40;
    v158 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v157);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v158;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v158 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 112))(&v153, *(_QWORD *)(a1 + 32), &v156, &v155);
    if (v154)
    {
      if (v154 != 1)
      {
        v149 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CSSBackendDispatcher::getSupportedCSSProperties(v149);
        return;
      }
      v83 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v83 + 48))
        *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
      LODWORD(v157) = 5;
      v84 = v153;
      if (v153)
        *(_DWORD *)v153 += 2;
      v158 = v84;
      v85 = *(unsigned int *)(v83 + 36);
      if ((_DWORD)v85 == *(_DWORD *)(v83 + 32))
      {
        v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v157);
        v87 = *(unsigned int *)(v83 + 36);
        v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
        *(_DWORD *)v88 = *(_DWORD *)v86;
        v89 = *(_QWORD *)(v86 + 8);
        *(_QWORD *)(v86 + 8) = 0;
        *(_QWORD *)(v88 + 8) = v89;
        v90 = v158;
        *(_DWORD *)(v83 + 36) = v87 + 1;
        v158 = 0;
        if (!v90)
          goto LABEL_66;
        v91 = *(_DWORD *)v90 - 2;
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          goto LABEL_66;
        }
        goto LABEL_63;
      }
      v137 = *(_QWORD *)(v83 + 24) + 16 * v85;
      *(_DWORD *)v137 = 5;
      *(_QWORD *)(v137 + 8) = v84;
      *(_DWORD *)(v83 + 36) = v85 + 1;
    }
    else
    {
      v108 = v153;
      v153 = 0;
      v109 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v109 = 0x500000001;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 16) = 0;
      v152 = (WTF *)v109;
      v110 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v110 = 0x400000002;
      *(_QWORD *)(v110 + 8) = "rule";
      *(_DWORD *)(v110 + 16) = 4;
      v150 = v108;
      v151 = (WTF::StringImpl *)v110;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v109 + 16), (WTF::AtomStringImpl *)&v151, (const WTF::StringImpl *)&v150, v111, v112, v113, v114, v115, (uint64_t)&v157);
      if ((_BYTE)v159)
      {
        v123 = (uint64_t *)(v109 + 24);
        v124 = *(unsigned int *)(v109 + 36);
        if ((_DWORD)v124 == *(_DWORD *)(v109 + 32))
        {
          v146 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v151);
          v124 = *(unsigned int *)(v109 + 36);
          v147 = *(_QWORD *)(v109 + 24);
          v148 = *v146;
          if (*v146)
            *v148 += 2;
          *(_QWORD *)(v147 + 8 * v124) = v148;
        }
        else
        {
          v125 = *v123;
          v126 = v151;
          if (v151)
            *(_DWORD *)v151 += 2;
          *(_QWORD *)(v125 + 8 * v124) = v126;
        }
        *(_DWORD *)(v109 + 36) = v124 + 1;
      }
      v127 = v150;
      v150 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 1)
          WTF::JSONImpl::Value::operator delete(v127, v116, v117, v118, v119, v120, v121, v122);
        else
          --*(_DWORD *)v127;
      }
      v128 = v151;
      v151 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
        {
          WTF::StringImpl::~StringImpl(v128, v116, v117, v118, v119, v120, v121, v122);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v128 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v90 = v152;
      if (!v152)
        goto LABEL_66;
      v91 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 != 1)
      {
LABEL_63:
        *(_DWORD *)v90 = v91;
        goto LABEL_66;
      }
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_66:
    if (v154 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593868[v154])(&v157, &v153);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 128))(v47, a2, &v156, &v155);
LABEL_27:
  v49 = v155;
  v155 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v156;
  v156 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::CSSBackendDispatcher::getSupportedCSSProperties(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 120))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::getSupportedSystemFontFamilyNames(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0xD00000002;
    *(_QWORD *)(v31 + 8) = "cssProperties";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593888[v74])(&v75, &v73);
}

void Inspector::CSSBackendDispatcher::getSupportedSystemFontFamilyNames(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 144))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 128))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::CSSBackendDispatcher::forcePseudoState(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0xF00000002;
    *(_QWORD *)(v31 + 8) = "fontFamilyNames";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593898[v74])(&v75, &v73);
}

void Inspector::CSSBackendDispatcher::forcePseudoState(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  char v108;
  WTF *v109;
  WTF *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF **v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v107 = (WTF::StringImpl *)v8;
  v110 = (WTF *)&off_1E3593B00;
  v111 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v112 = 0;
  v113 = &v110;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v107, 1, (uint64_t)&v110);
  v18 = v113;
  if (v113 == &v110)
  {
    v18 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = a1[2];
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1300000002;
  *(_QWORD *)(v21 + 8) = "forcedPseudoClasses";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v107 = (WTF::StringImpl *)v21;
  v110 = (WTF *)&off_1E3593C68;
  v111 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v112 = 0;
  v113 = &v110;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v109, v19, v20, &v107, 1, (uint64_t)&v110);
  v30 = v113;
  if (v113 == &v110)
  {
    v30 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = a1[2];
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4200000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'CSS.forcePseudoState' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v110) = 3;
    *(_DWORD *)v32 = v41;
    v111 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v110);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v111;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v111 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v52 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v52 = 3;
      *(_QWORD *)(v52 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_56;
    }
    v50 = v40;
    goto LABEL_46;
  }
  v48 = a1[3];
  if (v48)
  {
    if (BYTE4(v17))
    {
      v49 = v109;
      v109 = 0;
      v110 = v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v48 + 152))(v48, a2, v17, &v110);
      v50 = v110;
      v110 = 0;
      if (!v50)
        goto LABEL_56;
      v51 = *(_DWORD *)v50 - 1;
      if (*(_DWORD *)v50 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
        goto LABEL_56;
      }
LABEL_55:
      *(_DWORD *)v50 = v51;
      goto LABEL_56;
    }
LABEL_63:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_63;
  v69 = a1[4];
  v70 = v109;
  v109 = 0;
  v110 = v70;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF **))(*(_QWORD *)v69 + 136))(&v107, v69, v17, &v110);
  v71 = v110;
  v110 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v71;
  }
  if (!v108)
  {
    v97 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v97 = 0x500000001;
    *((_QWORD *)v97 + 3) = 0;
    *((_QWORD *)v97 + 4) = 0;
    *((_QWORD *)v97 + 2) = 0;
    v110 = v97;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v110);
    v79 = v110;
    if (!v110)
      goto LABEL_52;
    v80 = *(_DWORD *)v110 - 1;
    if (*(_DWORD *)v110 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v110, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v72 = a1[2];
  if (!*(_BYTE *)(v72 + 48))
    *(_BYTE *)(v72 + 48) = *(_QWORD *)(v72 + 48);
  LODWORD(v110) = 5;
  v73 = v107;
  if (v107)
    *(_DWORD *)v107 += 2;
  v111 = v73;
  v74 = *(unsigned int *)(v72 + 36);
  if ((_DWORD)v74 != *(_DWORD *)(v72 + 32))
  {
    v106 = *(_QWORD *)(v72 + 24) + 16 * v74;
    *(_DWORD *)v106 = 5;
    *(_QWORD *)(v106 + 8) = v73;
    *(_DWORD *)(v72 + 36) = v74 + 1;
    goto LABEL_52;
  }
  v75 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72 + 24, v74 + 1, (unint64_t)&v110);
  v76 = *(unsigned int *)(v72 + 36);
  v77 = *(_QWORD *)(v72 + 24) + 16 * v76;
  *(_DWORD *)v77 = *(_DWORD *)v75;
  v78 = *(_QWORD *)(v75 + 8);
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v77 + 8) = v78;
  v79 = v111;
  *(_DWORD *)(v72 + 36) = v76 + 1;
  v111 = 0;
  if (v79)
  {
    v80 = *(_DWORD *)v79 - 2;
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v79 = v80;
  }
LABEL_52:
  if (v108)
  {
    v50 = v107;
    v107 = 0;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
LABEL_56:
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::JSONImpl::Value::operator delete(v109, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v109;
  }
}

void Inspector::CSSBackendDispatcher::setLayoutContextTypeChangedMode(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  char v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF **v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x400000002;
  *(_QWORD *)(v7 + 8) = "mode";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v116 = (WTF::StringImpl *)v7;
  v120 = (WTF *)&off_1E3593B90;
  v121 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v122 = 0;
  v123 = &v120;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v119, v5, v6, &v116, 1, (uint64_t)&v120);
  v16 = v123;
  if (v123 == &v120)
  {
    v16 = &v120;
  }
  else
  {
    if (!v123)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x5100000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'CSS.setLayoutContextTypeChangedMode' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v120) = 3;
    *(_DWORD *)v18 = v27;
    v121 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v120);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v121;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v121 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v54 = v26;
    goto LABEL_29;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 160))(v34, a2, &v119);
    goto LABEL_20;
  }
  v53 = v119;
  if (!WTF::equalInternal<unsigned char>((uint64_t)v119, (unint64_t)"observed", 8)
    && !WTF::equalInternal<unsigned char>((uint64_t)v53, (unint64_t)"all", 3))
  {
    v89 = *(_QWORD *)(a1 + 16);
    if (v53)
      *(_DWORD *)v53 += 2;
    v118 = v53;
    v120 = (WTF *)"Unknown mode: ";
    v121 = (WTF::StringImpl *)15;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v120, (uint64_t *)&v118, (int **)&v116);
    v90 = v116;
    if (!v116)
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(v89 + 48))
      *(_BYTE *)(v89 + 48) = *(_QWORD *)(v89 + 48);
    LODWORD(v120) = 5;
    *(_DWORD *)v90 += 2;
    v121 = v90;
    v91 = *(unsigned int *)(v89 + 36);
    if ((_DWORD)v91 == *(_DWORD *)(v89 + 32))
    {
      v92 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v89 + 24, v91 + 1, (unint64_t)&v120);
      v93 = *(unsigned int *)(v89 + 36);
      v94 = *(_QWORD *)(v89 + 24) + 16 * v93;
      *(_DWORD *)v94 = *(_DWORD *)v92;
      v95 = *(_QWORD *)(v92 + 8);
      *(_QWORD *)(v92 + 8) = 0;
      *(_QWORD *)(v94 + 8) = v95;
      v96 = v121;
      *(_DWORD *)(v89 + 36) = v93 + 1;
      v121 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
    }
    else
    {
      v98 = *(_QWORD *)(v89 + 24) + 16 * v91;
      *(_DWORD *)v98 = 5;
      *(_QWORD *)(v98 + 8) = v90;
      *(_DWORD *)(v89 + 36) = v91 + 1;
    }
    v99 = v116;
    v116 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
      {
        WTF::StringImpl::~StringImpl(v99, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v99 -= 2;
      }
    }
    v54 = v118;
    v118 = 0;
    if (!v54)
      goto LABEL_20;
    goto LABEL_62;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 144))(&v116);
  if (!v117)
  {
    v88 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v88 = 0x500000001;
    *((_QWORD *)v88 + 3) = 0;
    *((_QWORD *)v88 + 4) = 0;
    *((_QWORD *)v88 + 2) = 0;
    v120 = v88;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v120);
    v70 = v120;
    if (!v120)
      goto LABEL_54;
    v71 = *(_DWORD *)v120 - 1;
    if (*(_DWORD *)v120 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v120, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_54;
    }
    goto LABEL_43;
  }
  v63 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v63 + 48))
    *(_BYTE *)(v63 + 48) = *(_QWORD *)(v63 + 48);
  LODWORD(v120) = 5;
  v64 = v116;
  if (v116)
    *(_DWORD *)v116 += 2;
  v121 = v64;
  v65 = *(unsigned int *)(v63 + 36);
  if ((_DWORD)v65 != *(_DWORD *)(v63 + 32))
  {
    v97 = *(_QWORD *)(v63 + 24) + 16 * v65;
    *(_DWORD *)v97 = 5;
    *(_QWORD *)(v97 + 8) = v64;
    *(_DWORD *)(v63 + 36) = v65 + 1;
    goto LABEL_54;
  }
  v66 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63 + 24, v65 + 1, (unint64_t)&v120);
  v67 = *(unsigned int *)(v63 + 36);
  v68 = *(_QWORD *)(v63 + 24) + 16 * v67;
  *(_DWORD *)v68 = *(_DWORD *)v66;
  v69 = *(_QWORD *)(v66 + 8);
  *(_QWORD *)(v66 + 8) = 0;
  *(_QWORD *)(v68 + 8) = v69;
  v70 = v121;
  *(_DWORD *)(v63 + 36) = v67 + 1;
  v121 = 0;
  if (v70)
  {
    v71 = *(_DWORD *)v70 - 2;
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      goto LABEL_54;
    }
LABEL_43:
    *(_DWORD *)v70 = v71;
  }
LABEL_54:
  if (!v117)
    goto LABEL_20;
  v54 = v116;
  v116 = 0;
  if (!v54)
    goto LABEL_20;
LABEL_62:
  if (*(_DWORD *)v54 == 2)
  {
LABEL_29:
    WTF::StringImpl::~StringImpl(v54, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    goto LABEL_20;
  }
  *(_DWORD *)v54 -= 2;
LABEL_20:
  v36 = v119;
  v119 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::CSS::LayoutContextTypeChangedMode>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000041;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"observed", 8))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"all", 3))
      return 0x100000042;
    else
      return 0;
  }
  return v2;
}

void Inspector::CanvasBackendDispatcher::create(Inspector::CanvasBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591578;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "Canvas";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::CanvasBackendDispatcher *Inspector::CanvasBackendDispatcher::CanvasBackendDispatcher(Inspector::CanvasBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::CanvasBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CanvasBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591578;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Canvas";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::CanvasBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591578;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Canvas";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::CanvasBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl **v108;
  const WTF::StringImpl *v109;
  unsigned int v110;
  unsigned int v111;
  char *v112;
  int i;
  unsigned int v114;
  WTF *v115;
  WTF::StringImpl *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  char *v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  WTF *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  void (*v245)(uint64_t, uint64_t);
  uint64_t v246;
  WTF::StringImpl *v247;
  void (*v248)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v249;
  WTF::StringImpl *v250;
  void (*v251)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v252;
  WTF::StringImpl *v253;
  void (*v254)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v255;
  WTF::StringImpl *v256;
  void (*v257)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v258;
  WTF::StringImpl *v259;
  void (*v260)(uint64_t, uint64_t, uint64_t *);
  uint64_t v261;
  WTF::StringImpl *v262;
  void (*v263)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v264;
  WTF::StringImpl *v265;
  void (*v266)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v267;
  WTF::StringImpl *v268;
  void (*v269)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v270;
  WTF::StringImpl *v271;
  void (*v272)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v273;
  WTF::StringImpl *v274;
  void (*v275)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v276;
  WTF::StringImpl *v277;
  void (*v278)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v241 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v241, v9, &v240);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587F2 & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x600000002;
  *(_QWORD *)(v86 + 8) = "enable";
  *(_DWORD *)(v86 + 16) = 4;
  v241 = (WTF::StringImpl *)v86;
  v242 = (WTF::StringImpl *)Inspector::CanvasBackendDispatcher::enable;
  v243 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x700000002;
  *(_QWORD *)(v87 + 8) = "disable";
  *(_DWORD *)(v87 + 16) = 4;
  v244 = (WTF::StringImpl *)v87;
  v245 = Inspector::CanvasBackendDispatcher::disable;
  v246 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0xB00000002;
  *(_QWORD *)(v88 + 8) = "requestNode";
  *(_DWORD *)(v88 + 16) = 4;
  v247 = (WTF::StringImpl *)v88;
  v248 = Inspector::CanvasBackendDispatcher::requestNode;
  v249 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xE00000002;
  *(_QWORD *)(v89 + 8) = "requestContent";
  *(_DWORD *)(v89 + 16) = 4;
  v250 = (WTF::StringImpl *)v89;
  v251 = Inspector::CanvasBackendDispatcher::requestContent;
  v252 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1200000002;
  *(_QWORD *)(v90 + 8) = "requestClientNodes";
  *(_DWORD *)(v90 + 16) = 4;
  v253 = (WTF::StringImpl *)v90;
  v254 = Inspector::CanvasBackendDispatcher::requestClientNodes;
  v255 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xE00000002;
  *(_QWORD *)(v91 + 8) = "resolveContext";
  *(_DWORD *)(v91 + 16) = 4;
  v256 = (WTF::StringImpl *)v91;
  v257 = Inspector::CanvasBackendDispatcher::resolveContext;
  v258 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x2100000002;
  *(_QWORD *)(v92 + 8) = "setRecordingAutoCaptureFrameCount";
  *(_DWORD *)(v92 + 16) = 4;
  v259 = (WTF::StringImpl *)v92;
  v260 = Inspector::CanvasBackendDispatcher::setRecordingAutoCaptureFrameCount;
  v261 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0xE00000002;
  *(_QWORD *)(v93 + 8) = "startRecording";
  *(_DWORD *)(v93 + 16) = 4;
  v262 = (WTF::StringImpl *)v93;
  v263 = Inspector::CanvasBackendDispatcher::startRecording;
  v264 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0xD00000002;
  *(_QWORD *)(v94 + 8) = "stopRecording";
  *(_DWORD *)(v94 + 16) = 4;
  v265 = (WTF::StringImpl *)v94;
  v266 = Inspector::CanvasBackendDispatcher::stopRecording;
  v267 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x1300000002;
  *(_QWORD *)(v95 + 8) = "requestShaderSource";
  *(_DWORD *)(v95 + 16) = 4;
  v268 = (WTF::StringImpl *)v95;
  v269 = Inspector::CanvasBackendDispatcher::requestShaderSource;
  v270 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xC00000002;
  *(_QWORD *)(v96 + 8) = "updateShader";
  *(_DWORD *)(v96 + 16) = 4;
  v271 = (WTF::StringImpl *)v96;
  v272 = Inspector::CanvasBackendDispatcher::updateShader;
  v273 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x1800000002;
  *(_QWORD *)(v97 + 8) = "setShaderProgramDisabled";
  *(_DWORD *)(v97 + 16) = 4;
  v274 = (WTF::StringImpl *)v97;
  v275 = Inspector::CanvasBackendDispatcher::setShaderProgramDisabled;
  v276 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x1B00000002;
  *(_QWORD *)(v98 + 8) = "setShaderProgramHighlighted";
  *(_DWORD *)(v98 + 16) = 4;
  v277 = (WTF::StringImpl *)v98;
  v278 = Inspector::CanvasBackendDispatcher::setShaderProgramHighlighted;
  v279 = 0;
  v99 = (_OWORD *)WTF::fastMalloc((WTF *)0x310);
  bzero(v99 + 1, 0x300uLL);
  v238 = 0;
  v239 = (WTF::StringImpl *)(v99 + 1);
  *v99 = xmmword_199156B90;
  do
  {
    v106 = v239;
    if (v239
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v239, 8u), (v106 = v239) != 0))
    {
      v107 = *((_DWORD *)v106 - 2);
    }
    else
    {
      v107 = 0;
    }
    v108 = &v241 + 3 * v238;
    v109 = *v108;
    v110 = *((_DWORD *)*v108 + 4);
    if (v110 < 0x100)
      v111 = WTF::StringImpl::hashSlowCase(*v108);
    else
      v111 = v110 >> 8;
    v112 = 0;
    v236 = v108 + 1;
    for (i = 1; ; ++i)
    {
      v114 = v111 & v107;
      v115 = (WTF *)*((_QWORD *)v106 + 3 * (v111 & v107));
      if (v115 == (WTF *)-1)
      {
        v112 = (char *)v106 + 24 * v114;
        goto LABEL_70;
      }
      if (!v115)
        break;
      if (WTF::equal(v115, v109, v11))
        goto LABEL_86;
LABEL_70:
      v111 = i + v114;
    }
    v237 = (char *)v106 + 24 * v114;
    if (v112)
    {
      *(_QWORD *)v112 = 0;
      *((_QWORD *)v112 + 1) = 0;
      *((_QWORD *)v112 + 2) = 0;
      --*((_DWORD *)v106 - 4);
      v237 = v112;
    }
    if (v109)
      *(_DWORD *)v109 += 2;
    *(_QWORD *)v237 = v109;
    *(_OWORD *)(v237 + 8) = *v236;
    v116 = v239;
    if (v239)
      v117 = *((_DWORD *)v239 - 3) + 1;
    else
      v117 = 1;
    *((_DWORD *)v239 - 3) = v117;
    v118 = (*((_DWORD *)v116 - 4) + v117);
    v119 = *((unsigned int *)v116 - 1);
    if (v119 > 0x400)
    {
      if (v119 <= 2 * v118)
      {
LABEL_81:
        v120 = (_DWORD)v119 << (6 * v117 >= (2 * v119));
        goto LABEL_85;
      }
    }
    else if (3 * v119 <= 4 * v118)
    {
      if ((_DWORD)v119)
        goto LABEL_81;
      v120 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v239, v120);
    }
LABEL_86:
    ++v238;
  }
  while (v238 != 13);
  v121 = v239;
  v239 = 0;
  qword_1ECF58810 = (uint64_t)v121;
  v122 = v277;
  v277 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = v274;
  v274 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v271;
  v271 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v268;
  v268 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v265;
  v265 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v262;
  v262 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v259;
  v259 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v256;
  v256 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v253;
  v253 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v250;
  v250 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
    {
      WTF::StringImpl::~StringImpl(v247, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
    }
    else
    {
      *(_DWORD *)v247 -= 2;
    }
  }
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
    {
      WTF::StringImpl::~StringImpl(v244, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
    }
    else
    {
      *(_DWORD *)v244 -= 2;
    }
  }
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
    {
      WTF::StringImpl::~StringImpl(v241, v100, (uint64_t)v11, v101, v102, v103, v104, v105);
      WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
    }
    else
    {
      *(_DWORD *)v241 -= 2;
    }
  }
  byte_1ECF587F2 = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[258];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[258];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[258];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_143;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 8))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 8), v43, (int8x16_t *)"'Canvas.", 8u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v239);
        v44 = v239;
        if (v239)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v241) = 2;
          *(_DWORD *)v44 += 2;
          v242 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v241);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v242;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v242 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v239;
          v239 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_144:
        __break(0xC471u);
        JUMPOUT(0x198623850);
      }
LABEL_143:
      v239 = 0;
      goto LABEL_144;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v240);
LABEL_41:
  v53 = v240;
  v240 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::CanvasBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CanvasBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::CanvasBackendDispatcher::requestNode(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD **v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  WTF *v126;
  uint64_t (**v127)();
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t (***v130)();
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "canvasId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v127 = &off_1E3593B90;
  v128 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v129 = 0;
  v130 = &v127;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v127);
  v16 = v130;
  if (v130 == &v127)
  {
    v16 = &v127;
  }
  else
  {
    if (!v130)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4000000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Canvas.requestNode' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v127) = 3;
    *(_DWORD *)v18 = v27;
    v128 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v127);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v128;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v128 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v120 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CanvasBackendDispatcher::requestContent(v120);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v127) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v128 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v127);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v128;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v128 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v108 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v108 = 5;
      *(_QWORD *)(v108 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = (int)v123;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x600000002;
      *(_QWORD *)(v80 + 8) = "nodeId";
      *(_DWORD *)(v80 + 16) = 4;
      v121 = (WTF::StringImpl *)v80;
      v81 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = 0x300000001;
      v81[1] = (double)v78;
      v126 = (WTF *)v81;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v126, v82, v83, v84, v85, v86, (uint64_t)&v127);
      if ((_BYTE)v129)
      {
        v94 = (uint64_t *)(v79 + 24);
        v95 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v95 == *(_DWORD *)(v79 + 32))
        {
          v117 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v121);
          v95 = *(unsigned int *)(v79 + 36);
          v118 = *(_QWORD *)(v79 + 24);
          v119 = *v117;
          if (*v117)
            *v119 += 2;
          *(_QWORD *)(v118 + 8 * v95) = v119;
        }
        else
        {
          v96 = *v94;
          v97 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v96 + 8 * v95) = v97;
        }
        *(_DWORD *)(v79 + 36) = v95 + 1;
      }
      v98 = v126;
      v126 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 1)
          WTF::JSONImpl::Value::operator delete(v98, v87, v88, v89, v90, v91, v92, v93);
        else
          --*(_DWORD *)v98;
      }
      v99 = v121;
      v121 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
          WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938A8[v124])(&v127, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 32))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::requestContent(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "canvasId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4300000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Canvas.requestContent' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CanvasBackendDispatcher::requestClientNodes(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0x700000002;
    *(_QWORD *)(v71 + 8) = "content";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 40))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::requestClientNodes(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "canvasId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4700000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Canvas.requestClientNodes' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 32))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CanvasBackendDispatcher::resolveContext(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xD00000002;
      *(_QWORD *)(v80 + 8) = "clientNodeIds";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v79 + 16), &v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938B8[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 48))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::resolveContext(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  WTF *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t (**v157)();
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t (***v160)();
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "canvasId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v153 = (WTF::StringImpl *)v8;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v156, v6, v7, &v153, 1, (uint64_t)&v157);
  v17 = v160;
  if (v160 == &v157)
  {
    v17 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "objectGroup";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v153 = (WTF::StringImpl *)v20;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v155, v18, v19, &v153, 0, (uint64_t)&v157);
  v29 = v160;
  if (v160 == &v157)
  {
    v29 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4300000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Canvas.resolveContext' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v157) = 3;
    *(_DWORD *)v31 = v40;
    v158 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v157);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v158;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v158 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 40))(&v153, *(_QWORD *)(a1 + 32), &v156, &v155);
    if (v154)
    {
      if (v154 != 1)
      {
        v149 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::CanvasBackendDispatcher::setRecordingAutoCaptureFrameCount(v149);
        return;
      }
      v83 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v83 + 48))
        *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
      LODWORD(v157) = 5;
      v84 = v153;
      if (v153)
        *(_DWORD *)v153 += 2;
      v158 = v84;
      v85 = *(unsigned int *)(v83 + 36);
      if ((_DWORD)v85 == *(_DWORD *)(v83 + 32))
      {
        v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v157);
        v87 = *(unsigned int *)(v83 + 36);
        v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
        *(_DWORD *)v88 = *(_DWORD *)v86;
        v89 = *(_QWORD *)(v86 + 8);
        *(_QWORD *)(v86 + 8) = 0;
        *(_QWORD *)(v88 + 8) = v89;
        v90 = v158;
        *(_DWORD *)(v83 + 36) = v87 + 1;
        v158 = 0;
        if (!v90)
          goto LABEL_66;
        v91 = *(_DWORD *)v90 - 2;
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          goto LABEL_66;
        }
        goto LABEL_63;
      }
      v137 = *(_QWORD *)(v83 + 24) + 16 * v85;
      *(_DWORD *)v137 = 5;
      *(_QWORD *)(v137 + 8) = v84;
      *(_DWORD *)(v83 + 36) = v85 + 1;
    }
    else
    {
      v108 = v153;
      v153 = 0;
      v109 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v109 = 0x500000001;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 16) = 0;
      v152 = (WTF *)v109;
      v110 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v110 = 0x600000002;
      *(_QWORD *)(v110 + 8) = "object";
      *(_DWORD *)(v110 + 16) = 4;
      v150 = v108;
      v151 = (WTF::StringImpl *)v110;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v109 + 16), (WTF::AtomStringImpl *)&v151, (const WTF::StringImpl *)&v150, v111, v112, v113, v114, v115, (uint64_t)&v157);
      if ((_BYTE)v159)
      {
        v123 = (uint64_t *)(v109 + 24);
        v124 = *(unsigned int *)(v109 + 36);
        if ((_DWORD)v124 == *(_DWORD *)(v109 + 32))
        {
          v146 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v151);
          v124 = *(unsigned int *)(v109 + 36);
          v147 = *(_QWORD *)(v109 + 24);
          v148 = *v146;
          if (*v146)
            *v148 += 2;
          *(_QWORD *)(v147 + 8 * v124) = v148;
        }
        else
        {
          v125 = *v123;
          v126 = v151;
          if (v151)
            *(_DWORD *)v151 += 2;
          *(_QWORD *)(v125 + 8 * v124) = v126;
        }
        *(_DWORD *)(v109 + 36) = v124 + 1;
      }
      v127 = v150;
      v150 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 1)
          WTF::JSONImpl::Value::operator delete(v127, v116, v117, v118, v119, v120, v121, v122);
        else
          --*(_DWORD *)v127;
      }
      v128 = v151;
      v151 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
        {
          WTF::StringImpl::~StringImpl(v128, v116, v117, v118, v119, v120, v121, v122);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v128 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v90 = v152;
      if (!v152)
        goto LABEL_66;
      v91 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 != 1)
      {
LABEL_63:
        *(_DWORD *)v90 = v91;
        goto LABEL_66;
      }
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_66:
    if (v154 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937A8[v154])(&v157, &v153);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 56))(v47, a2, &v156, &v155);
LABEL_27:
  v49 = v155;
  v155 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v156;
  v156 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::setRecordingAutoCaptureFrameCount(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "count";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5600000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Canvas.setRecordingAutoCaptureFrameCount' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 64))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::CanvasBackendDispatcher::startRecording(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF **v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF **v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "canvasId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v132 = (WTF::StringImpl *)v8;
  v137 = (WTF *)&off_1E3593B90;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v139 = 0;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v136, v6, v7, &v132, 1, (uint64_t)&v137);
  v17 = v140;
  if (v140 == &v137)
  {
    v17 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "frameCount";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v132 = (WTF::StringImpl *)v20;
  v137 = (WTF *)&off_1E3593B00;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v139 = 0;
  v140 = &v137;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, &v132, 0, (uint64_t)&v137);
  v30 = v140;
  if (v140 == &v137)
  {
    v30 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v135 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xB00000002;
  *(_QWORD *)(v33 + 8) = "memoryLimit";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v132 = (WTF::StringImpl *)v33;
  v137 = (WTF *)&off_1E3593B00;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v139 = 0;
  v140 = &v137;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v31, v32, &v132, 0, (uint64_t)&v137);
  v43 = v140;
  if (v140 == &v137)
  {
    v43 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v43 + v34))();
LABEL_20:
  v134 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x4300000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'Canvas.startRecording' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v137) = 3;
    *(_DWORD *)v45 = v54;
    v138 = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)&v137);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v138;
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v138 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 != 2)
    {
      *(_DWORD *)v53 -= 2;
      goto LABEL_34;
    }
    v113 = v53;
    goto LABEL_52;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (v61)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t *, uint64_t *))(*(_QWORD *)v61 + 72))(v61, a2, &v136, &v135, &v134);
    goto LABEL_34;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 32) + 56))(&v132, *(_QWORD *)(a1 + 32), &v136, &v135, &v134);
  if (!v133)
  {
    v122 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v122 = 0x500000001;
    *((_QWORD *)v122 + 3) = 0;
    *((_QWORD *)v122 + 4) = 0;
    *((_QWORD *)v122 + 2) = 0;
    v137 = v122;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v137);
    v103 = v137;
    if (!v137)
      goto LABEL_58;
    v104 = *(_DWORD *)v137 - 1;
    if (*(_DWORD *)v137 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v137, v46, v47, v48, v49, v50, v51, v52);
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  v96 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v96 + 48))
    *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
  LODWORD(v137) = 5;
  v97 = v132;
  if (v132)
    *(_DWORD *)v132 += 2;
  v138 = v97;
  v98 = *(unsigned int *)(v96 + 36);
  if ((_DWORD)v98 != *(_DWORD *)(v96 + 32))
  {
    v131 = *(_QWORD *)(v96 + 24) + 16 * v98;
    *(_DWORD *)v131 = 5;
    *(_QWORD *)(v131 + 8) = v97;
    *(_DWORD *)(v96 + 36) = v98 + 1;
    goto LABEL_58;
  }
  v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v137);
  v100 = *(unsigned int *)(v96 + 36);
  v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
  *(_DWORD *)v101 = *(_DWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v101 + 8) = v102;
  v103 = v138;
  *(_DWORD *)(v96 + 36) = v100 + 1;
  v138 = 0;
  if (v103)
  {
    v104 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      goto LABEL_58;
    }
LABEL_55:
    *(_DWORD *)v103 = v104;
  }
LABEL_58:
  if (v133)
  {
    v113 = v132;
    v132 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
      {
LABEL_52:
        WTF::StringImpl::~StringImpl(v113, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        goto LABEL_34;
      }
      *(_DWORD *)v113 -= 2;
    }
  }
LABEL_34:
  v63 = v136;
  v136 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::stopRecording(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "canvasId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4200000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Canvas.stopRecording' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 80))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 64))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::requestShaderSource(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD **v167;
  uint64_t v168;
  _DWORD *v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF *v179;
  WTF::StringImpl *v180;
  int v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF *v185;
  const char *v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "programId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v180 = (WTF::StringImpl *)v8;
  v186 = (const char *)&off_1E3593B90;
  v187 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v188 = 0;
  v189 = (uint64_t *)&v186;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v184, v6, v7, &v180, 1, (uint64_t)&v186);
  v17 = (const char **)v189;
  if (v189 == (uint64_t *)&v186)
  {
    v17 = &v186;
  }
  else
  {
    if (!v189)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))&(*v17)[8 * v9])();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "shaderType";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v180 = (WTF::StringImpl *)v20;
  v186 = (const char *)&off_1E3593B90;
  v187 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v188 = 0;
  v189 = (uint64_t *)&v186;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v183, v18, v19, &v180, 1, (uint64_t)&v186);
  v29 = (const char **)v189;
  if (v189 == (uint64_t *)&v186)
  {
    v29 = &v186;
  }
  else
  {
    if (!v189)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))&(*v29)[8 * v21])();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4800000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Canvas.requestShaderSource' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v186) = 3;
    *(_DWORD *)v31 = v40;
    v187 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v186);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v187;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v187 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v85 = v39;
LABEL_41:
    WTF::StringImpl::~StringImpl(v85, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    v83 = v183;
    if (WTF::equalInternal<unsigned char>((uint64_t)v183, (unint64_t)"compute", 7))
    {
      v84 = 77;
    }
    else if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"fragment", 8))
    {
      v84 = 79;
    }
    else
    {
      if (!WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"vertex", 6))
      {
        v133 = *(_QWORD *)(a1 + 16);
        if (v83)
          *(_DWORD *)v83 += 2;
        v182 = v83;
        v186 = "Unknown shaderType: ";
        v187 = (WTF::StringImpl *)21;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v186, (uint64_t *)&v182, (int **)&v180);
        v134 = v180;
        if (v180)
        {
          if (!*(_BYTE *)(v133 + 48))
            *(_BYTE *)(v133 + 48) = *(_QWORD *)(v133 + 48);
          LODWORD(v186) = 5;
          *(_DWORD *)v134 += 2;
          v187 = v134;
          v135 = *(unsigned int *)(v133 + 36);
          if ((_DWORD)v135 == *(_DWORD *)(v133 + 32))
          {
            v136 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v133 + 24, v135 + 1, (unint64_t)&v186);
            v137 = *(unsigned int *)(v133 + 36);
            v138 = *(_QWORD *)(v133 + 24) + 16 * v137;
            *(_DWORD *)v138 = *(_DWORD *)v136;
            v139 = *(_QWORD *)(v136 + 8);
            *(_QWORD *)(v136 + 8) = 0;
            *(_QWORD *)(v138 + 8) = v139;
            v140 = v187;
            *(_DWORD *)(v133 + 36) = v137 + 1;
            v187 = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2)
              {
                WTF::StringImpl::~StringImpl(v140, v32, v33, v34, v35, v36, v37, v38);
                WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
              }
              else
              {
                *(_DWORD *)v140 -= 2;
              }
            }
          }
          else
          {
            v141 = *(_QWORD *)(v133 + 24) + 16 * v135;
            *(_DWORD *)v141 = 5;
            *(_QWORD *)(v141 + 8) = v134;
            *(_DWORD *)(v133 + 36) = v135 + 1;
          }
          v142 = v180;
          v180 = 0;
          if (v142)
          {
            if (*(_DWORD *)v142 == 2)
            {
              WTF::StringImpl::~StringImpl(v142, v32, v33, v34, v35, v36, v37, v38);
              WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
            }
            else
            {
              *(_DWORD *)v142 -= 2;
            }
          }
          v85 = v182;
          v182 = 0;
          if (!v85)
            goto LABEL_27;
          if (*(_DWORD *)v85 != 2)
          {
            *(_DWORD *)v85 -= 2;
            goto LABEL_27;
          }
          goto LABEL_41;
        }
        goto LABEL_108;
      }
      v84 = 80;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                                + 72))(&v180, *(_QWORD *)(a1 + 32), &v184, v84);
    if (v181)
    {
      if (v181 == 1)
      {
        v102 = *(_QWORD *)(a1 + 16);
        if (!*(_BYTE *)(v102 + 48))
          *(_BYTE *)(v102 + 48) = *(_QWORD *)(v102 + 48);
        LODWORD(v186) = 5;
        v103 = v180;
        if (v180)
          *(_DWORD *)v180 += 2;
        v187 = v103;
        v104 = *(unsigned int *)(v102 + 36);
        if ((_DWORD)v104 != *(_DWORD *)(v102 + 32))
        {
          v132 = *(_QWORD *)(v102 + 24) + 16 * v104;
          *(_DWORD *)v132 = 5;
          *(_QWORD *)(v132 + 8) = v103;
          *(_DWORD *)(v102 + 36) = v104 + 1;
          goto LABEL_97;
        }
        v105 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102 + 24, v104 + 1, (unint64_t)&v186);
        v106 = *(unsigned int *)(v102 + 36);
        v107 = *(_QWORD *)(v102 + 24) + 16 * v106;
        *(_DWORD *)v107 = *(_DWORD *)v105;
        v108 = *(_QWORD *)(v105 + 8);
        *(_QWORD *)(v105 + 8) = 0;
        *(_QWORD *)(v107 + 8) = v108;
        v109 = v187;
        *(_DWORD *)(v102 + 36) = v106 + 1;
        v187 = 0;
        if (!v109)
          goto LABEL_97;
        if (*(_DWORD *)v109 != 2)
        {
          *(_DWORD *)v109 -= 2;
          goto LABEL_97;
        }
        goto LABEL_96;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_108:
      __break(0xC471u);
      return;
    }
    v110 = v180;
    v180 = 0;
    v111 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v111 = 0x500000001;
    *(_QWORD *)(v111 + 16) = 0;
    *(_QWORD *)(v111 + 24) = 0;
    *(_QWORD *)(v111 + 32) = 0;
    v179 = (WTF *)v111;
    v112 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v112 = 0x600000002;
    *(_QWORD *)(v112 + 8) = "source";
    *(_DWORD *)(v112 + 16) = 4;
    v178 = (WTF::StringImpl *)v112;
    v113 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v113 = 0x400000001;
    *((_QWORD *)v113 + 1) = v110;
    if (v110)
      *(_DWORD *)v110 += 2;
    v185 = v113;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v111 + 16), (WTF::AtomStringImpl *)&v178, (const WTF::StringImpl *)&v185, v114, v115, v116, v117, v118, (uint64_t)&v186);
    if ((_BYTE)v188)
    {
      v126 = (uint64_t *)(v111 + 24);
      v127 = *(unsigned int *)(v111 + 36);
      if ((_DWORD)v127 == *(_DWORD *)(v111 + 32))
      {
        v167 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v127 + 1, (unint64_t)&v178);
        v127 = *(unsigned int *)(v111 + 36);
        v168 = *(_QWORD *)(v111 + 24);
        v169 = *v167;
        if (*v167)
          *v169 += 2;
        *(_QWORD *)(v168 + 8 * v127) = v169;
      }
      else
      {
        v128 = *v126;
        v129 = v178;
        if (v178)
          *(_DWORD *)v178 += 2;
        *(_QWORD *)(v128 + 8 * v127) = v129;
      }
      *(_DWORD *)(v111 + 36) = v127 + 1;
    }
    v130 = v185;
    v185 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 1)
        WTF::JSONImpl::Value::operator delete(v130, v119, v120, v121, v122, v123, v124, v125);
      else
        --*(_DWORD *)v130;
    }
    v131 = v178;
    v178 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2)
      {
        WTF::StringImpl::~StringImpl(v131, v119, v120, v121, v122, v123, v124, v125);
        WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      }
      else
      {
        *(_DWORD *)v131 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v179);
    if (v179)
    {
      if (*(_DWORD *)v179 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v179, v32, v33, v34, v35, v36, v37, v38);
        if (!v110)
        {
LABEL_97:
          if (v181 != -1)
            ((void (*)(const char **, WTF::StringImpl **))off_1E35937C8[v181])(&v186, &v180);
          goto LABEL_27;
        }
        goto LABEL_75;
      }
      --*(_DWORD *)v179;
    }
    if (!v110)
      goto LABEL_97;
LABEL_75:
    if (*(_DWORD *)v110 != 2)
    {
      *(_DWORD *)v110 -= 2;
      goto LABEL_97;
    }
    v109 = v110;
LABEL_96:
    WTF::StringImpl::~StringImpl(v109, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    goto LABEL_97;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 88))(v47, a2, &v184, &v183);
LABEL_27:
  v49 = v183;
  v183 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v184;
  v184 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::updateShader(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  int v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  char v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF *v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  WTF **v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "programId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v176 = (WTF::StringImpl *)v8;
  v182 = (WTF *)&off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v181, v6, v7, &v176, 1, (uint64_t)&v182);
  v17 = v185;
  if (v185 == &v182)
  {
    v17 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "shaderType";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v176 = (WTF::StringImpl *)v20;
  v182 = (WTF *)&off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v180, v18, v19, &v176, 1, (uint64_t)&v182);
  v29 = v185;
  if (v185 == &v182)
  {
    v29 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x600000002;
  *(_QWORD *)(v32 + 8) = "source";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v176 = (WTF::StringImpl *)v32;
  v182 = (WTF *)&off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v179, v30, v31, &v176, 1, (uint64_t)&v182);
  v41 = v185;
  if (v185 == &v182)
  {
    v41 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4100000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'Canvas.updateShader' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v182) = 3;
    *(_DWORD *)v43 = v52;
    v183 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v182);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v183;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v183 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_34;
    }
    v114 = v51;
LABEL_53:
    WTF::StringImpl::~StringImpl(v114, v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    goto LABEL_34;
  }
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 96))(v59, a2, &v181, &v180, &v179);
    goto LABEL_34;
  }
  v112 = v180;
  if (WTF::equalInternal<unsigned char>((uint64_t)v180, (unint64_t)"compute", 7))
  {
    v113 = 77;
    goto LABEL_59;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v112, (unint64_t)"fragment", 8))
  {
    v113 = 79;
    goto LABEL_59;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v112, (unint64_t)"vertex", 6))
  {
    v113 = 80;
LABEL_59:
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 80))(&v176, *(_QWORD *)(a1 + 32), &v181, v113, &v179);
    if (v177)
    {
      v131 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v131 + 48))
        *(_BYTE *)(v131 + 48) = *(_QWORD *)(v131 + 48);
      LODWORD(v182) = 5;
      v132 = v176;
      if (v176)
        *(_DWORD *)v176 += 2;
      v183 = v132;
      v133 = *(unsigned int *)(v131 + 36);
      if ((_DWORD)v133 != *(_DWORD *)(v131 + 32))
      {
        v149 = *(_QWORD *)(v131 + 24) + 16 * v133;
        *(_DWORD *)v149 = 5;
        *(_QWORD *)(v149 + 8) = v132;
        *(_DWORD *)(v131 + 36) = v133 + 1;
        goto LABEL_72;
      }
      v134 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v131 + 24, v133 + 1, (unint64_t)&v182);
      v135 = *(unsigned int *)(v131 + 36);
      v136 = *(_QWORD *)(v131 + 24) + 16 * v135;
      *(_DWORD *)v136 = *(_DWORD *)v134;
      v137 = *(_QWORD *)(v134 + 8);
      *(_QWORD *)(v134 + 8) = 0;
      *(_QWORD *)(v136 + 8) = v137;
      v138 = v183;
      *(_DWORD *)(v131 + 36) = v135 + 1;
      v183 = 0;
      if (!v138)
      {
LABEL_72:
        if (!v177)
          goto LABEL_34;
        v114 = v176;
        v176 = 0;
        if (!v114)
          goto LABEL_34;
LABEL_74:
        if (*(_DWORD *)v114 != 2)
        {
          *(_DWORD *)v114 -= 2;
          goto LABEL_34;
        }
        goto LABEL_53;
      }
      v139 = *(_DWORD *)v138 - 2;
      if (*(_DWORD *)v138 == 2)
      {
        WTF::StringImpl::~StringImpl(v138, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
        goto LABEL_72;
      }
    }
    else
    {
      v148 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v148 = 0x500000001;
      *((_QWORD *)v148 + 3) = 0;
      *((_QWORD *)v148 + 4) = 0;
      *((_QWORD *)v148 + 2) = 0;
      v182 = v148;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v182);
      v138 = v182;
      if (!v182)
        goto LABEL_72;
      v139 = *(_DWORD *)v182 - 1;
      if (*(_DWORD *)v182 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v182, v44, v45, v46, v47, v48, v49, v50);
        goto LABEL_72;
      }
    }
    *(_DWORD *)v138 = v139;
    goto LABEL_72;
  }
  v150 = *(_QWORD *)(a1 + 16);
  if (v112)
    *(_DWORD *)v112 += 2;
  v178 = v112;
  v182 = (WTF *)"Unknown shaderType: ";
  v183 = (WTF::StringImpl *)21;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v182, (uint64_t *)&v178, (int **)&v176);
  v151 = v176;
  if (!v176)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v150 + 48))
    *(_BYTE *)(v150 + 48) = *(_QWORD *)(v150 + 48);
  LODWORD(v182) = 5;
  *(_DWORD *)v151 += 2;
  v183 = v151;
  v152 = *(unsigned int *)(v150 + 36);
  if ((_DWORD)v152 == *(_DWORD *)(v150 + 32))
  {
    v153 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v150 + 24, v152 + 1, (unint64_t)&v182);
    v154 = *(unsigned int *)(v150 + 36);
    v155 = *(_QWORD *)(v150 + 24) + 16 * v154;
    *(_DWORD *)v155 = *(_DWORD *)v153;
    v156 = *(_QWORD *)(v153 + 8);
    *(_QWORD *)(v153 + 8) = 0;
    *(_QWORD *)(v155 + 8) = v156;
    v157 = v183;
    *(_DWORD *)(v150 + 36) = v154 + 1;
    v183 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 2)
      {
        WTF::StringImpl::~StringImpl(v157, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
      }
      else
      {
        *(_DWORD *)v157 -= 2;
      }
    }
  }
  else
  {
    v158 = *(_QWORD *)(v150 + 24) + 16 * v152;
    *(_DWORD *)v158 = 5;
    *(_QWORD *)(v158 + 8) = v151;
    *(_DWORD *)(v150 + 36) = v152 + 1;
  }
  v159 = v176;
  v176 = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
  v114 = v178;
  v178 = 0;
  if (v114)
    goto LABEL_74;
LABEL_34:
  v61 = v179;
  v179 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v180;
  v180 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v181;
  v181 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::setShaderProgramDisabled(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "programId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v114 = (WTF *)&off_1E3593B90;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v116 = 0;
  v117 = &v114;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v113, v6, v7, &v111, 1, (uint64_t)&v114);
  v17 = v117;
  if (v117 == &v114)
  {
    v17 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x800000002;
  *(_QWORD *)(v20 + 8) = "disabled";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v111 = (WTF::StringImpl *)v20;
  v114 = (WTF *)&unk_1E3593AB8;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v116 = 0;
  v117 = &v114;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v111, 1, (uint64_t)&v114);
  v30 = v117;
  if (v117 == &v114)
  {
    v30 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4D00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Canvas.setShaderProgramDisabled' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v114) = 3;
    *(_DWORD *)v32 = v41;
    v115 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v114);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v115;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v115 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v92 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (HIBYTE(v29))
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL))(*(_QWORD *)v48 + 104))(v48, a2, &v113, v29 != 0);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!HIBYTE(v29))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, BOOL))(**(_QWORD **)(a1 + 32)
                                                                                           + 88))(&v111, *(_QWORD *)(a1 + 32), &v113, v29 != 0);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v114 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v114);
    v82 = v114;
    if (!v114)
      goto LABEL_52;
    v83 = *(_DWORD *)v114 - 1;
    if (*(_DWORD *)v114 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v114, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v114) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v115 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_52;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v114);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v115;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v115 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v82 = v83;
  }
LABEL_52:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_28;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_28:
  v50 = v113;
  v113 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::CanvasBackendDispatcher::setShaderProgramHighlighted(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "programId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v114 = (WTF *)&off_1E3593B90;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v116 = 0;
  v117 = &v114;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v113, v6, v7, &v111, 1, (uint64_t)&v114);
  v17 = v117;
  if (v117 == &v114)
  {
    v17 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "highlighted";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v111 = (WTF::StringImpl *)v20;
  v114 = (WTF *)&unk_1E3593AB8;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v116 = 0;
  v117 = &v114;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v111, 1, (uint64_t)&v114);
  v30 = v117;
  if (v117 == &v114)
  {
    v30 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x5000000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Canvas.setShaderProgramHighlighted' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v114) = 3;
    *(_DWORD *)v32 = v41;
    v115 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v114);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v115;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v115 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v92 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (HIBYTE(v29))
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL))(*(_QWORD *)v48 + 112))(v48, a2, &v113, v29 != 0);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!HIBYTE(v29))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, BOOL))(**(_QWORD **)(a1 + 32)
                                                                                           + 96))(&v111, *(_QWORD *)(a1 + 32), &v113, v29 != 0);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v114 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v114);
    v82 = v114;
    if (!v114)
      goto LABEL_52;
    v83 = *(_DWORD *)v114 - 1;
    if (*(_DWORD *)v114 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v114, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v114) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v115 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_52;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v114);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v115;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v115 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v82 = v83;
  }
LABEL_52:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_28;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_28:
  v50 = v113;
  v113 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Canvas::ShaderType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000004DLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"compute", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"fragment", 8))
    {
      return 0x10000004FLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"vertex", 6))
    {
      return 0x100000050;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void Inspector::ConsoleBackendDispatcher::create(Inspector::ConsoleBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35915A0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "Console";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::ConsoleBackendDispatcher *Inspector::ConsoleBackendDispatcher::ConsoleBackendDispatcher(Inspector::ConsoleBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::ConsoleBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ConsoleBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915A0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Console";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ConsoleBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915A0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Console";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::ConsoleBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(uint64_t, uint64_t, uint64_t *);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587F3 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::ConsoleBackendDispatcher::enable;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::ConsoleBackendDispatcher::disable;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0xD00000002;
  *(_QWORD *)(v87 + 8) = "clearMessages";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::ConsoleBackendDispatcher::clearMessages;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1900000002;
  *(_QWORD *)(v88 + 8) = "setConsoleClearAPIEnabled";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::ConsoleBackendDispatcher::setConsoleClearAPIEnabled;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1200000002;
  *(_QWORD *)(v89 + 8) = "getLoggingChannels";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::ConsoleBackendDispatcher::getLoggingChannels;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1600000002;
  *(_QWORD *)(v90 + 8) = "setLoggingChannelLevel";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::ConsoleBackendDispatcher::setLoggingChannelLevel;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_69;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_85;
LABEL_69:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_80:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_84;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_80;
      v112 = 8;
LABEL_84:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_85:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58818 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  byte_1ECF587F3 = 1;
LABEL_4:
  v17 = qword_1ECF58818;
  if (!qword_1ECF58818)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58818 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58818;
    if (qword_1ECF58818)
    {
      v26 = *(_DWORD *)(qword_1ECF58818 - 4);
      v23 = qword_1ECF58818 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58818;
  if (qword_1ECF58818)
  {
    v26 = *(_DWORD *)(qword_1ECF58818 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_114;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 9))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 9), v42, (int8x16_t *)"'Console.", 9u, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_115:
        __break(0xC471u);
        JUMPOUT(0x198627FF4);
      }
LABEL_114:
      v168 = 0;
      goto LABEL_115;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 != 1)
    {
      --*(_DWORD *)v52;
      goto LABEL_44;
    }
    WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
    if (a1)
    {
LABEL_47:
      if (*(_DWORD *)(a1 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      else
        --*(_DWORD *)(a1 + 8);
    }
  }
  else
  {
LABEL_44:
    if (a1)
      goto LABEL_47;
  }
}

void Inspector::ConsoleBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ConsoleBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ConsoleBackendDispatcher::clearMessages(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ConsoleBackendDispatcher::setConsoleClearAPIEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "enable";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4F00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Console.setConsoleClearAPIEnabled' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 40))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::ConsoleBackendDispatcher::getLoggingChannels(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::ConsoleBackendDispatcher::setLoggingChannelLevel(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x800000002;
    *(_QWORD *)(v31 + 8) = "channels";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E35938C8[v74])(&v75, &v73);
}

void Inspector::ConsoleBackendDispatcher::setLoggingChannelLevel(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  int v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  char v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF *v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  WTF **v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "source";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v176 = (WTF::StringImpl *)v8;
  v182 = (WTF *)&off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v181, v6, v7, &v176, 1, (uint64_t)&v182);
  v17 = v185;
  if (v185 == &v182)
  {
    v17 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "level";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v176 = (WTF::StringImpl *)v20;
  v182 = (WTF *)&off_1E3593B90;
  v183 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v184 = 0;
  v185 = &v182;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v180, v18, v19, &v176, 1, (uint64_t)&v182);
  v29 = v185;
  if (v185 == &v182)
  {
    v29 = &v182;
  }
  else
  {
    if (!v185)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4C00000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Console.setLoggingChannelLevel' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v182) = 3;
    *(_DWORD *)v31 = v40;
    v183 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v182);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v183;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v183 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v93 = v39;
    goto LABEL_49;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 56))(v47, a2, &v181, &v180);
    goto LABEL_27;
  }
  v83 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ChannelSource>((uint64_t *)&v181);
  if (!HIDWORD(v83))
  {
    v84 = *(_QWORD *)(a1 + 16);
    v85 = v181;
    if (v181)
      *(_DWORD *)v181 += 2;
    v179 = v85;
    v182 = (WTF *)"Unknown source: ";
    v183 = (WTF::StringImpl *)17;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v182, (uint64_t *)&v179, (int **)&v176);
    v86 = v176;
    if (v176)
    {
      if (!*(_BYTE *)(v84 + 48))
        *(_BYTE *)(v84 + 48) = *(_QWORD *)(v84 + 48);
      LODWORD(v182) = 5;
      *(_DWORD *)v86 += 2;
      v183 = v86;
      v87 = *(unsigned int *)(v84 + 36);
      if ((_DWORD)v87 == *(_DWORD *)(v84 + 32))
      {
        v88 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84 + 24, v87 + 1, (unint64_t)&v182);
        v89 = *(unsigned int *)(v84 + 36);
        v90 = *(_QWORD *)(v84 + 24) + 16 * v89;
        *(_DWORD *)v90 = *(_DWORD *)v88;
        v91 = *(_QWORD *)(v88 + 8);
        *(_QWORD *)(v88 + 8) = 0;
        *(_QWORD *)(v90 + 8) = v91;
        v92 = v183;
        *(_DWORD *)(v84 + 36) = v89 + 1;
        v183 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
          {
            WTF::StringImpl::~StringImpl(v92, v32, v33, v34, v35, v36, v37, v38);
            WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
          }
          else
          {
            *(_DWORD *)v92 -= 2;
          }
        }
      }
      else
      {
        v113 = *(_QWORD *)(v84 + 24) + 16 * v87;
        *(_DWORD *)v113 = 5;
        *(_QWORD *)(v113 + 8) = v86;
        *(_DWORD *)(v84 + 36) = v87 + 1;
      }
      v114 = v176;
      v176 = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 2)
        {
          WTF::StringImpl::~StringImpl(v114, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        }
        else
        {
          *(_DWORD *)v114 -= 2;
        }
      }
      v93 = v179;
      v179 = 0;
      if (!v93)
        goto LABEL_27;
      goto LABEL_78;
    }
LABEL_100:
    __break(0xC471u);
    JUMPOUT(0x1986292F8);
  }
  v102 = v83;
  v103 = v180;
  if (WTF::equalInternal<unsigned char>((uint64_t)v180, (unint64_t)"off", 3))
  {
    v104 = 98;
  }
  else if (WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"basic", 5))
  {
    v104 = 99;
  }
  else
  {
    if (!WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"verbose", 7))
    {
      v142 = *(_QWORD *)(a1 + 16);
      if (v103)
        *(_DWORD *)v103 += 2;
      v178 = v103;
      v182 = (WTF *)"Unknown level: ";
      v183 = (WTF::StringImpl *)16;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v182, (uint64_t *)&v178, (int **)&v176);
      v143 = v176;
      if (v176)
      {
        if (!*(_BYTE *)(v142 + 48))
          *(_BYTE *)(v142 + 48) = *(_QWORD *)(v142 + 48);
        LODWORD(v182) = 5;
        *(_DWORD *)v143 += 2;
        v183 = v143;
        v144 = *(unsigned int *)(v142 + 36);
        if ((_DWORD)v144 == *(_DWORD *)(v142 + 32))
        {
          v145 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v142 + 24, v144 + 1, (unint64_t)&v182);
          v146 = *(unsigned int *)(v142 + 36);
          v147 = *(_QWORD *)(v142 + 24) + 16 * v146;
          *(_DWORD *)v147 = *(_DWORD *)v145;
          v148 = *(_QWORD *)(v145 + 8);
          *(_QWORD *)(v145 + 8) = 0;
          *(_QWORD *)(v147 + 8) = v148;
          v149 = v183;
          *(_DWORD *)(v142 + 36) = v146 + 1;
          v183 = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 2)
            {
              WTF::StringImpl::~StringImpl(v149, v32, v33, v34, v35, v36, v37, v38);
              WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
            }
            else
            {
              *(_DWORD *)v149 -= 2;
            }
          }
        }
        else
        {
          v158 = *(_QWORD *)(v142 + 24) + 16 * v144;
          *(_DWORD *)v158 = 5;
          *(_QWORD *)(v158 + 8) = v143;
          *(_DWORD *)(v142 + 36) = v144 + 1;
        }
        v159 = v176;
        v176 = 0;
        if (v159)
        {
          if (*(_DWORD *)v159 == 2)
          {
            WTF::StringImpl::~StringImpl(v159, v32, v33, v34, v35, v36, v37, v38);
            WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
          }
          else
          {
            *(_DWORD *)v159 -= 2;
          }
        }
        v93 = v178;
        v178 = 0;
        if (!v93)
          goto LABEL_27;
        goto LABEL_78;
      }
      goto LABEL_100;
    }
    v104 = 100;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                            + 40))(&v176, *(_QWORD *)(a1 + 32), v102, v104);
  if (!v177)
  {
    v132 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v132 = 0x500000001;
    *((_QWORD *)v132 + 3) = 0;
    *((_QWORD *)v132 + 4) = 0;
    *((_QWORD *)v132 + 2) = 0;
    v182 = v132;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v182);
    v122 = v182;
    if (!v182)
      goto LABEL_76;
    v123 = *(_DWORD *)v182 - 1;
    if (*(_DWORD *)v182 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v182, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_76;
    }
    goto LABEL_74;
  }
  v115 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v115 + 48))
    *(_BYTE *)(v115 + 48) = *(_QWORD *)(v115 + 48);
  LODWORD(v182) = 5;
  v116 = v176;
  if (v176)
    *(_DWORD *)v176 += 2;
  v183 = v116;
  v117 = *(unsigned int *)(v115 + 36);
  if ((_DWORD)v117 != *(_DWORD *)(v115 + 32))
  {
    v133 = *(_QWORD *)(v115 + 24) + 16 * v117;
    *(_DWORD *)v133 = 5;
    *(_QWORD *)(v133 + 8) = v116;
    *(_DWORD *)(v115 + 36) = v117 + 1;
    goto LABEL_76;
  }
  v118 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v115 + 24, v117 + 1, (unint64_t)&v182);
  v119 = *(unsigned int *)(v115 + 36);
  v120 = *(_QWORD *)(v115 + 24) + 16 * v119;
  *(_DWORD *)v120 = *(_DWORD *)v118;
  v121 = *(_QWORD *)(v118 + 8);
  *(_QWORD *)(v118 + 8) = 0;
  *(_QWORD *)(v120 + 8) = v121;
  v122 = v183;
  *(_DWORD *)(v115 + 36) = v119 + 1;
  v183 = 0;
  if (v122)
  {
    v123 = *(_DWORD *)v122 - 2;
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
      goto LABEL_76;
    }
LABEL_74:
    *(_DWORD *)v122 = v123;
  }
LABEL_76:
  if (!v177)
    goto LABEL_27;
  v93 = v176;
  v176 = 0;
  if (!v93)
    goto LABEL_27;
LABEL_78:
  if (*(_DWORD *)v93 == 2)
  {
LABEL_49:
    WTF::StringImpl::~StringImpl(v93, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    goto LABEL_27;
  }
  *(_DWORD *)v93 -= 2;
LABEL_27:
  v49 = v180;
  v180 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v181;
  v181 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ChannelSource>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000051;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"xml", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"javascript", 10))
    {
      return 0x100000052;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"network", 7))
    {
      return 0x100000053;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"console-api", 11))
    {
      return 0x100000054;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"storage", 7))
    {
      return 0x100000055;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"appcache", 8))
    {
      return 0x100000056;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"rendering", 9))
    {
      return 0x100000057;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"css", 3))
    {
      return 0x100000058;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"security", 8))
    {
      return 0x100000059;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"content-blocker", 15))
    {
      return 0x10000005ALL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"media", 5))
    {
      return 0x10000005BLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"mediasource", 11))
    {
      return 0x10000005CLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"webrtc", 6))
    {
      return 0x10000005DLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"itp-debug", 9))
    {
      return 0x10000005ELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"private-click-measurement", 25))
    {
      return 0x10000005FLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"payment-request", 15))
    {
      return 0x100000060;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"other", 5))
    {
      return 0x100000061;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Console::ChannelLevel>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000062;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"off", 3))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"basic", 5))
    {
      return 0x100000063;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"verbose", 7))
    {
      return 0x100000064;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void Inspector::DOMBackendDispatcher::create(Inspector::DOMBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35915C8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "DOM";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::DOMBackendDispatcher *Inspector::DOMBackendDispatcher::DOMBackendDispatcher(Inspector::DOMBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::DOMBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915C8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x300000002;
  *(_QWORD *)(v5 + 8) = "DOM";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915C8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x300000002;
  *(_QWORD *)(v5 + 8) = "DOM";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::DOMBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl **v143;
  const WTF::StringImpl *v144;
  unsigned int v145;
  unsigned int v146;
  char *v147;
  int i;
  unsigned int v149;
  WTF *v150;
  WTF::StringImpl *v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t j;
  WTF::StringImpl *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  char *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t, uint64_t *);
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, uint64_t *);
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t, uint64_t *);
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t *);
  uint64_t v185;
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t, uint64_t *);
  uint64_t v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t, uint64_t *);
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t, uint64_t *);
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t *);
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t, uint64_t *);
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, uint64_t, uint64_t *);
  uint64_t v206;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t, uint64_t *);
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t, uint64_t *);
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t, uint64_t *);
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t, uint64_t *);
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t, uint64_t *);
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t, uint64_t *);
  uint64_t v224;
  uint64_t v225;
  void (*v226)(uint64_t, uint64_t, uint64_t *);
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t, uint64_t *);
  uint64_t v230;
  uint64_t v231;
  void (*v232)(uint64_t, uint64_t, uint64_t *);
  uint64_t v233;
  uint64_t v234;
  void (*v235)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t, uint64_t *);
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, uint64_t, uint64_t *);
  uint64_t v251;
  uint64_t v252;
  void (*v253)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v254;
  uint64_t v255;
  void (*v256)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t *, uint64_t, uint64_t *);
  uint64_t v260;
  uint64_t v261;
  void (*v262)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v263;
  uint64_t v264;
  void (*v265)(uint64_t, uint64_t);
  uint64_t v266;
  uint64_t v267;
  void (*v268)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v269;
  uint64_t v270;
  void (*v271)(uint64_t *, uint64_t, uint64_t *);
  uint64_t v272;
  uint64_t v273;
  void (*v274)(uint64_t, uint64_t, uint64_t *);
  uint64_t v275;
  uint64_t v276;
  void (*v277)(uint64_t *, uint64_t, uint64_t *);
  uint64_t v278;
  uint64_t v279;
  void (*v280)(uint64_t, uint64_t, uint64_t *);
  uint64_t v281;
  uint64_t v282;
  void (*v283)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v284;
  uint64_t v285;
  void (*v286)(uint64_t, uint64_t, uint64_t *);
  uint64_t v287;
  uint64_t v288;
  void (*v289)(uint64_t, uint64_t, uint64_t *);
  uint64_t v290;
  uint64_t v291;
  void (*v292)(uint64_t, uint64_t, uint64_t *);
  uint64_t v293;
  uint64_t v294;
  void (*v295)(uint64_t, uint64_t);
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  void (*v301)(uint64_t, uint64_t);
  uint64_t v302;
  uint64_t v303;
  void (*v304)(uint64_t, uint64_t, uint64_t *);
  uint64_t v305;
  uint64_t v306;
  void (*v307)(uint64_t, uint64_t, uint64_t *);
  uint64_t v308;
  uint64_t v309;
  void (*v310)(uint64_t, uint64_t, uint64_t *);
  uint64_t v311;
  uint64_t v312;
  void (*v313)(uint64_t, uint64_t, uint64_t *);
  uint64_t v314;
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v171 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v171, v9, &v170);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587F4 & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0xB00000002;
  *(_QWORD *)(v86 + 8) = "getDocument";
  *(_DWORD *)(v86 + 16) = 4;
  v171 = (WTF::StringImpl *)v86;
  v172 = (WTF::StringImpl *)Inspector::DOMBackendDispatcher::getDocument;
  v173 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x1100000002;
  *(_QWORD *)(v87 + 8) = "requestChildNodes";
  *(_DWORD *)(v87 + 16) = 4;
  v174 = v87;
  v175 = Inspector::DOMBackendDispatcher::requestChildNodes;
  v176 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0xD00000002;
  *(_QWORD *)(v88 + 8) = "querySelector";
  *(_DWORD *)(v88 + 16) = 4;
  v177 = v88;
  v178 = Inspector::DOMBackendDispatcher::querySelector;
  v179 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1000000002;
  *(_QWORD *)(v89 + 8) = "querySelectorAll";
  *(_DWORD *)(v89 + 16) = 4;
  v180 = v89;
  v181 = Inspector::DOMBackendDispatcher::querySelectorAll;
  v182 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0xB00000002;
  *(_QWORD *)(v90 + 8) = "setNodeName";
  *(_DWORD *)(v90 + 16) = 4;
  v183 = v90;
  v184 = Inspector::DOMBackendDispatcher::setNodeName;
  v185 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xC00000002;
  *(_QWORD *)(v91 + 8) = "setNodeValue";
  *(_DWORD *)(v91 + 16) = 4;
  v186 = v91;
  v187 = Inspector::DOMBackendDispatcher::setNodeValue;
  v188 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0xA00000002;
  *(_QWORD *)(v92 + 8) = "removeNode";
  *(_DWORD *)(v92 + 16) = 4;
  v189 = v92;
  v190 = Inspector::DOMBackendDispatcher::removeNode;
  v191 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x1100000002;
  *(_QWORD *)(v93 + 8) = "setAttributeValue";
  *(_DWORD *)(v93 + 16) = 4;
  v192 = v93;
  v193 = Inspector::DOMBackendDispatcher::setAttributeValue;
  v194 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x1300000002;
  *(_QWORD *)(v94 + 8) = "setAttributesAsText";
  *(_DWORD *)(v94 + 16) = 4;
  v195 = v94;
  v196 = Inspector::DOMBackendDispatcher::setAttributesAsText;
  v197 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0xF00000002;
  *(_QWORD *)(v95 + 8) = "removeAttribute";
  *(_DWORD *)(v95 + 16) = 4;
  v198 = v95;
  v199 = Inspector::DOMBackendDispatcher::removeAttribute;
  v200 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0x1600000002;
  *(_QWORD *)(v96 + 8) = "getSupportedEventNames";
  *(_DWORD *)(v96 + 16) = 4;
  v201 = v96;
  v202 = Inspector::DOMBackendDispatcher::getSupportedEventNames;
  v203 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x1600000002;
  *(_QWORD *)(v97 + 8) = "getDataBindingsForNode";
  *(_DWORD *)(v97 + 16) = 4;
  v204 = v97;
  v205 = Inspector::DOMBackendDispatcher::getDataBindingsForNode;
  v206 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x1800000002;
  *(_QWORD *)(v98 + 8) = "getAssociatedDataForNode";
  *(_DWORD *)(v98 + 16) = 4;
  v207 = v98;
  v208 = Inspector::DOMBackendDispatcher::getAssociatedDataForNode;
  v209 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x1800000002;
  *(_QWORD *)(v99 + 8) = "getEventListenersForNode";
  *(_DWORD *)(v99 + 16) = 4;
  v210 = v99;
  v211 = Inspector::DOMBackendDispatcher::getEventListenersForNode;
  v212 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x1800000002;
  *(_QWORD *)(v100 + 8) = "setEventListenerDisabled";
  *(_DWORD *)(v100 + 16) = 4;
  v213 = v100;
  v214 = Inspector::DOMBackendDispatcher::setEventListenerDisabled;
  v215 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x1D00000002;
  *(_QWORD *)(v101 + 8) = "setBreakpointForEventListener";
  *(_DWORD *)(v101 + 16) = 4;
  v216 = v101;
  v217 = Inspector::DOMBackendDispatcher::setBreakpointForEventListener;
  v218 = 0;
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0x2000000002;
  *(_QWORD *)(v102 + 8) = "removeBreakpointForEventListener";
  *(_DWORD *)(v102 + 16) = 4;
  v219 = v102;
  v220 = Inspector::DOMBackendDispatcher::removeBreakpointForEventListener;
  v221 = 0;
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0x2100000002;
  *(_QWORD *)(v103 + 8) = "getAccessibilityPropertiesForNode";
  *(_DWORD *)(v103 + 16) = 4;
  v222 = v103;
  v223 = Inspector::DOMBackendDispatcher::getAccessibilityPropertiesForNode;
  v224 = 0;
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v104 = 0xC00000002;
  *(_QWORD *)(v104 + 8) = "getOuterHTML";
  *(_DWORD *)(v104 + 16) = 4;
  v225 = v104;
  v226 = Inspector::DOMBackendDispatcher::getOuterHTML;
  v227 = 0;
  v105 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v105 = 0xC00000002;
  *(_QWORD *)(v105 + 8) = "setOuterHTML";
  *(_DWORD *)(v105 + 16) = 4;
  v228 = v105;
  v229 = Inspector::DOMBackendDispatcher::setOuterHTML;
  v230 = 0;
  v106 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v106 = 0x1200000002;
  *(_QWORD *)(v106 + 8) = "insertAdjacentHTML";
  *(_DWORD *)(v106 + 16) = 4;
  v231 = v106;
  v232 = Inspector::DOMBackendDispatcher::insertAdjacentHTML;
  v233 = 0;
  v107 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v107 = 0xD00000002;
  *(_QWORD *)(v107 + 8) = "performSearch";
  *(_DWORD *)(v107 + 16) = 4;
  v234 = v107;
  v235 = Inspector::DOMBackendDispatcher::performSearch;
  v236 = 0;
  v108 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v108 = 0x1000000002;
  *(_QWORD *)(v108 + 8) = "getSearchResults";
  *(_DWORD *)(v108 + 16) = 4;
  v237 = v108;
  v238 = Inspector::DOMBackendDispatcher::getSearchResults;
  v239 = 0;
  v109 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v109 = 0x1400000002;
  *(_QWORD *)(v109 + 8) = "discardSearchResults";
  *(_DWORD *)(v109 + 16) = 4;
  v240 = v109;
  v241 = Inspector::DOMBackendDispatcher::discardSearchResults;
  v242 = 0;
  v110 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v110 = 0xB00000002;
  *(_QWORD *)(v110 + 8) = "requestNode";
  *(_DWORD *)(v110 + 16) = 4;
  v243 = v110;
  v244 = Inspector::DOMBackendDispatcher::requestNode;
  v245 = 0;
  v111 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v111 = 0x1500000002;
  *(_QWORD *)(v111 + 8) = "setInspectModeEnabled";
  *(_DWORD *)(v111 + 16) = 4;
  v246 = v111;
  v247 = Inspector::DOMBackendDispatcher::setInspectModeEnabled;
  v248 = 0;
  v112 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v112 = 0xD00000002;
  *(_QWORD *)(v112 + 8) = "highlightRect";
  *(_DWORD *)(v112 + 16) = 4;
  v249 = v112;
  v250 = Inspector::DOMBackendDispatcher::highlightRect;
  v251 = 0;
  v113 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v113 = 0xD00000002;
  *(_QWORD *)(v113 + 8) = "highlightQuad";
  *(_DWORD *)(v113 + 16) = 4;
  v252 = v113;
  v253 = Inspector::DOMBackendDispatcher::highlightQuad;
  v254 = 0;
  v114 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v114 = 0x1100000002;
  *(_QWORD *)(v114 + 8) = "highlightSelector";
  *(_DWORD *)(v114 + 16) = 4;
  v255 = v114;
  v256 = Inspector::DOMBackendDispatcher::highlightSelector;
  v257 = 0;
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0xD00000002;
  *(_QWORD *)(v115 + 8) = "highlightNode";
  *(_DWORD *)(v115 + 16) = 4;
  v258 = v115;
  v259 = Inspector::DOMBackendDispatcher::highlightNode;
  v260 = 0;
  v116 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v116 = 0x1100000002;
  *(_QWORD *)(v116 + 8) = "highlightNodeList";
  *(_DWORD *)(v116 + 16) = 4;
  v261 = v116;
  v262 = Inspector::DOMBackendDispatcher::highlightNodeList;
  v263 = 0;
  v117 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v117 = 0xD00000002;
  *(_QWORD *)(v117 + 8) = "hideHighlight";
  *(_DWORD *)(v117 + 16) = 4;
  v264 = v117;
  v265 = Inspector::DOMBackendDispatcher::hideHighlight;
  v266 = 0;
  v118 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v118 = 0xE00000002;
  *(_QWORD *)(v118 + 8) = "highlightFrame";
  *(_DWORD *)(v118 + 16) = 4;
  v267 = v118;
  v268 = Inspector::DOMBackendDispatcher::highlightFrame;
  v269 = 0;
  v119 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v119 = 0xF00000002;
  *(_QWORD *)(v119 + 8) = "showGridOverlay";
  *(_DWORD *)(v119 + 16) = 4;
  v270 = v119;
  v271 = Inspector::DOMBackendDispatcher::showGridOverlay;
  v272 = 0;
  v120 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v120 = 0xF00000002;
  *(_QWORD *)(v120 + 8) = "hideGridOverlay";
  *(_DWORD *)(v120 + 16) = 4;
  v273 = v120;
  v274 = Inspector::DOMBackendDispatcher::hideGridOverlay;
  v275 = 0;
  v121 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v121 = 0xF00000002;
  *(_QWORD *)(v121 + 8) = "showFlexOverlay";
  *(_DWORD *)(v121 + 16) = 4;
  v276 = v121;
  v277 = Inspector::DOMBackendDispatcher::showFlexOverlay;
  v278 = 0;
  v122 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v122 = 0xF00000002;
  *(_QWORD *)(v122 + 8) = "hideFlexOverlay";
  *(_DWORD *)(v122 + 16) = 4;
  v279 = v122;
  v280 = Inspector::DOMBackendDispatcher::hideFlexOverlay;
  v281 = 0;
  v123 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v123 = 0x1800000002;
  *(_QWORD *)(v123 + 8) = "pushNodeByPathToFrontend";
  *(_DWORD *)(v123 + 16) = 4;
  v282 = v123;
  v283 = Inspector::DOMBackendDispatcher::pushNodeByPathToFrontend;
  v284 = 0;
  v124 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v124 = 0xB00000002;
  *(_QWORD *)(v124 + 8) = "resolveNode";
  *(_DWORD *)(v124 + 16) = 4;
  v285 = v124;
  v286 = Inspector::DOMBackendDispatcher::resolveNode;
  v287 = 0;
  v125 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v125 = 0xD00000002;
  *(_QWORD *)(v125 + 8) = "getAttributes";
  *(_DWORD *)(v125 + 16) = 4;
  v288 = v125;
  v289 = Inspector::DOMBackendDispatcher::getAttributes;
  v290 = 0;
  v126 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v126 = 0x600000002;
  *(_QWORD *)(v126 + 8) = "moveTo";
  *(_DWORD *)(v126 + 16) = 4;
  v291 = v126;
  v292 = Inspector::DOMBackendDispatcher::moveTo;
  v293 = 0;
  v127 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v127 = 0x400000002;
  *(_QWORD *)(v127 + 8) = "undo";
  *(_DWORD *)(v127 + 16) = 4;
  v294 = v127;
  v295 = Inspector::DOMBackendDispatcher::undo;
  v296 = 0;
  v128 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v128 = 0x400000002;
  *(_QWORD *)(v128 + 8) = "redo";
  *(_DWORD *)(v128 + 16) = 4;
  v297 = v128;
  v298 = Inspector::DOMBackendDispatcher::redo;
  v299 = 0;
  v129 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v129 = 0x1100000002;
  *(_QWORD *)(v129 + 8) = "markUndoableState";
  *(_DWORD *)(v129 + 16) = 4;
  v300 = v129;
  v301 = Inspector::DOMBackendDispatcher::markUndoableState;
  v302 = 0;
  v130 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v130 = 0x500000002;
  *(_QWORD *)(v130 + 8) = "focus";
  *(_DWORD *)(v130 + 16) = 4;
  v303 = v130;
  v304 = Inspector::DOMBackendDispatcher::focus;
  v305 = 0;
  v131 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v131 = 0x1000000002;
  *(_QWORD *)(v131 + 8) = "setInspectedNode";
  *(_DWORD *)(v131 + 16) = 4;
  v306 = v131;
  v307 = Inspector::DOMBackendDispatcher::setInspectedNode;
  v308 = 0;
  v132 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v132 = 0x2300000002;
  *(_QWORD *)(v132 + 8) = "setAllowEditingUserAgentShadowTrees";
  *(_DWORD *)(v132 + 16) = 4;
  v309 = v132;
  v310 = Inspector::DOMBackendDispatcher::setAllowEditingUserAgentShadowTrees;
  v311 = 0;
  v133 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v133 = 0xD00000002;
  *(_QWORD *)(v133 + 8) = "getMediaStats";
  *(_DWORD *)(v133 + 16) = 4;
  v312 = v133;
  v313 = Inspector::DOMBackendDispatcher::getMediaStats;
  v314 = 0;
  v134 = (_OWORD *)WTF::fastMalloc((WTF *)0xC10);
  bzero(v134 + 1, 0xC00uLL);
  v168 = 0;
  v169 = (WTF::StringImpl *)(v134 + 1);
  *v134 = xmmword_199156BA0;
  do
  {
    v141 = v169;
    if (v169
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v169, 8u), (v141 = v169) != 0))
    {
      v142 = *((_DWORD *)v141 - 2);
    }
    else
    {
      v142 = 0;
    }
    v143 = &v171 + 3 * v168;
    v144 = *v143;
    v145 = *((_DWORD *)*v143 + 4);
    if (v145 < 0x100)
      v146 = WTF::StringImpl::hashSlowCase(*v143);
    else
      v146 = v145 >> 8;
    v147 = 0;
    v166 = v143 + 1;
    for (i = 1; ; ++i)
    {
      v149 = v146 & v142;
      v150 = (WTF *)*((_QWORD *)v141 + 3 * (v146 & v142));
      if (v150 == (WTF *)-1)
      {
        v147 = (char *)v141 + 24 * v149;
        goto LABEL_70;
      }
      if (!v150)
        break;
      if (WTF::equal(v150, v144, v11))
        goto LABEL_86;
LABEL_70:
      v146 = i + v149;
    }
    v167 = (char *)v141 + 24 * v149;
    if (v147)
    {
      *(_QWORD *)v147 = 0;
      *((_QWORD *)v147 + 1) = 0;
      *((_QWORD *)v147 + 2) = 0;
      --*((_DWORD *)v141 - 4);
      v167 = v147;
    }
    if (v144)
      *(_DWORD *)v144 += 2;
    *(_QWORD *)v167 = v144;
    *(_OWORD *)(v167 + 8) = *v166;
    v151 = v169;
    if (v169)
      v152 = *((_DWORD *)v169 - 3) + 1;
    else
      v152 = 1;
    *((_DWORD *)v169 - 3) = v152;
    v153 = (*((_DWORD *)v151 - 4) + v152);
    v154 = *((unsigned int *)v151 - 1);
    if (v154 > 0x400)
    {
      if (v154 <= 2 * v153)
      {
LABEL_81:
        v155 = (_DWORD)v154 << (6 * v152 >= (2 * v154));
        goto LABEL_85;
      }
    }
    else if (3 * v154 <= 4 * v153)
    {
      if ((_DWORD)v154)
        goto LABEL_81;
      v155 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v169, v155);
    }
LABEL_86:
    ++v168;
  }
  while (v168 != 48);
  qword_1ECF58820 = (uint64_t)v169;
  for (j = 1128; j != -24; j -= 24)
  {
    v157 = *(WTF::StringImpl **)((char *)&v171 + j);
    *(WTF::StringImpl **)((char *)&v171 + j) = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 2)
      {
        WTF::StringImpl::~StringImpl(v157, v135, (uint64_t)v11, v136, v137, v138, v139, v140);
        WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
      }
      else
      {
        *(_DWORD *)v157 -= 2;
      }
    }
  }
  byte_1ECF587F4 = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[260];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[260];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[260];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_96;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 5))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 5), v43, (int8x16_t *)"'DOM.", 5u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v169);
        v44 = v169;
        if (v169)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v171) = 2;
          *(_DWORD *)v44 += 2;
          v172 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v171);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v172;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v172 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v169;
          v169 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_97:
        __break(0xC471u);
        JUMPOUT(0x19862A744);
      }
LABEL_96:
      v169 = 0;
      goto LABEL_97;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v170);
LABEL_41:
  v53 = v170;
  v170 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::DOMBackendDispatcher::getDocument(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::requestChildNodes(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x400000002;
    *(_QWORD *)(v31 + 8) = "root";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E35938D8[v74])(&v75, &v73);
}

void Inspector::DOMBackendDispatcher::requestChildNodes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF **v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  uint64_t v105;
  WTF *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v106 = (WTF *)&off_1E3593B00;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v108 = 0;
  v109 = &v106;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v103, 1, (uint64_t)&v106);
  v18 = v109;
  if (v109 == &v106)
  {
    v18 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x500000002;
  *(_QWORD *)(v21 + 8) = "depth";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v106 = (WTF *)&off_1E3593B00;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v108 = 0;
  v109 = &v106;
  v30 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v19, v20, &v103, 0, (uint64_t)&v106);
  v31 = v109;
  if (v109 == &v106)
  {
    v31 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v31 + v22))();
LABEL_13:
  v105 = v30;
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v32 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v32 + 36))
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x20);
    v41 = (WTF::StringImpl *)v33;
    *(_QWORD *)v33 = 0x4300000002;
    *(_QWORD *)(v33 + 8) = "Some arguments of method 'DOM.requestChildNodes' can't be processed";
    v42 = 4;
    *(_DWORD *)(v33 + 16) = 4;
    if (!*(_BYTE *)(v32 + 48))
    {
      *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
      v42 = *(_DWORD *)v33 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v33 = v42;
    v107 = (WTF::StringImpl *)v33;
    v43 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v32 + 32))
    {
      v44 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v43 + 1, (unint64_t)&v106);
      v45 = *(unsigned int *)(v32 + 36);
      v46 = *(_QWORD *)(v32 + 24) + 16 * v45;
      *(_DWORD *)v46 = *(_DWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v46 + 8) = v47;
      v48 = v107;
      *(_DWORD *)(v32 + 36) = v45 + 1;
      v107 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v50 = *(_QWORD *)(v32 + 24) + 16 * v43;
      *(_DWORD *)v50 = 3;
      *(_QWORD *)(v50 + 8) = v33;
      *(_DWORD *)(v32 + 36) = v43 + 1;
    }
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
      return;
    }
    v84 = v41;
LABEL_42:
    WTF::StringImpl::~StringImpl(v84, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    return;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v49 + 24))(v49, a2, v17, &v105);
      return;
    }
LABEL_53:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_53;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 32) + 8))(&v103, *(_QWORD *)(a1 + 32), v17, &v105);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v106 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v106);
    v74 = v106;
    if (!v106)
      goto LABEL_48;
    v75 = *(_DWORD *)v106 - 1;
    if (*(_DWORD *)v106 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v106, v34, v35, v36, v37, v38, v39, v40);
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v106) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v107 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_48;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v106);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v107;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v107 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_48;
    }
LABEL_45:
    *(_DWORD *)v74 = v75;
  }
LABEL_48:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 != 2)
      {
        *(_DWORD *)v84 -= 2;
        return;
      }
      goto LABEL_42;
    }
  }
}

void Inspector::DOMBackendDispatcher::querySelector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::AtomStringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD **v141;
  uint64_t v142;
  _DWORD *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  int v151;
  uint64_t (**v152)();
  WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t (***v155)();
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v152 = &off_1E3593B00;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v154 = 0;
  v155 = &v152;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v149, 1, (uint64_t)&v152);
  v18 = v155;
  if (v155 == &v152)
  {
    v18 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x800000002;
  *(_QWORD *)(v21 + 8) = "selector";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v149 = (WTF::StringImpl *)v21;
  v152 = &off_1E3593B90;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v154 = 0;
  v155 = &v152;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v147, v19, v20, &v149, 1, (uint64_t)&v152);
  v30 = v155;
  if (v155 == &v152)
  {
    v30 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_13;
    v22 = 5;
  }
  (*v30)[v22]();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3F00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.querySelector' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v152) = 3;
    *(_DWORD *)v32 = v41;
    v153 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v152);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v153;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v153 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    if (!BYTE4(v17))
LABEL_73:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                                + 16))(&v149, *(_QWORD *)(a1 + 32), v17, &v147);
    if (v151)
    {
      if (v151 != 1)
      {
        v144 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::querySelectorAll(v144);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v152) = 5;
      v76 = v150;
      if (v150)
        *(_DWORD *)v150 += 2;
      v153 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v152);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v153;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v153 = 0;
        if (!v82)
          goto LABEL_65;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_65;
        }
        goto LABEL_62;
      }
      v132 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v132 = 5;
      *(_QWORD *)(v132 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = v150;
      v101 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
      *v101 = 0x500000001;
      v101[2] = 0;
      v102 = v101 + 2;
      v101[3] = 0;
      v101[4] = 0;
      v146 = (WTF *)v101;
      if (((unint64_t)v100 & 0xFF00000000) != 0)
      {
        v103 = v101;
        v104 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v104 = 0x600000002;
        *(_QWORD *)(v104 + 8) = "nodeId";
        *(_DWORD *)(v104 + 16) = 4;
        v145 = (WTF::StringImpl *)v104;
        v105 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v105 = 0x300000001;
        v105[1] = (double)(int)v100;
        v148 = (WTF *)v105;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v102, (WTF::AtomStringImpl *)&v145, (const WTF::StringImpl *)&v148, v106, v107, v108, v109, v110, (uint64_t)&v152);
        if ((_BYTE)v154)
        {
          v118 = v103 + 3;
          v119 = *((unsigned int *)v103 + 9);
          if ((_DWORD)v119 == *((_DWORD *)v103 + 8))
          {
            v141 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v118, v119 + 1, (unint64_t)&v145);
            v119 = *((unsigned int *)v103 + 9);
            v142 = v103[3];
            v143 = *v141;
            if (*v141)
              *v143 += 2;
            *(_QWORD *)(v142 + 8 * v119) = v143;
          }
          else
          {
            v120 = *v118;
            v121 = v145;
            if (v145)
              *(_DWORD *)v145 += 2;
            *(_QWORD *)(v120 + 8 * v119) = v121;
          }
          *((_DWORD *)v103 + 9) = v119 + 1;
        }
        v122 = v148;
        v148 = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 1)
            WTF::JSONImpl::Value::operator delete(v122, v111, v112, v113, v114, v115, v116, v117);
          else
            --*(_DWORD *)v122;
        }
        v123 = v145;
        v145 = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
          {
            WTF::StringImpl::~StringImpl(v123, v111, v112, v113, v114, v115, v116, v117);
            WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
          }
          else
          {
            *(_DWORD *)v123 -= 2;
          }
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v146);
      v82 = v146;
      if (!v146)
        goto LABEL_65;
      v83 = *(_DWORD *)v146 - 1;
      if (*(_DWORD *)v146 != 1)
      {
LABEL_62:
        *(_DWORD *)v82 = v83;
        goto LABEL_65;
      }
      WTF::JSONImpl::Value::operator delete(v146, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_65:
    if (v151 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938E8[v151])(&v152, &v150);
    goto LABEL_28;
  }
  if (!BYTE4(v17))
    goto LABEL_73;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 32))(v48, a2, v17, &v147);
LABEL_28:
  v50 = v147;
  v147 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::querySelectorAll(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD **v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  WTF *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  uint64_t (**v148)();
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t (***v151)();
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v145 = (WTF::StringImpl *)v8;
  v148 = &off_1E3593B00;
  v149 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v150 = 0;
  v151 = &v148;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v145, 1, (uint64_t)&v148);
  v18 = v151;
  if (v151 == &v148)
  {
    v18 = &v148;
  }
  else
  {
    if (!v151)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x800000002;
  *(_QWORD *)(v21 + 8) = "selector";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v145 = (WTF::StringImpl *)v21;
  v148 = &off_1E3593B90;
  v149 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v150 = 0;
  v151 = &v148;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v147, v19, v20, &v145, 1, (uint64_t)&v148);
  v30 = v151;
  if (v151 == &v148)
  {
    v30 = &v148;
  }
  else
  {
    if (!v151)
      goto LABEL_13;
    v22 = 5;
  }
  (*v30)[v22]();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4200000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.querySelectorAll' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v148) = 3;
    *(_DWORD *)v32 = v41;
    v149 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v148);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v149;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v149 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    if (!BYTE4(v17))
LABEL_72:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                                + 24))(&v145, *(_QWORD *)(a1 + 32), v17, &v147);
    if (v146)
    {
      if (v146 != 1)
      {
        v141 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::setNodeName(v141);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v148) = 5;
      v76 = v145;
      if (v145)
        *(_DWORD *)v145 += 2;
      v149 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v148);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v149;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v149 = 0;
        if (!v82)
          goto LABEL_64;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      v129 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v129 = 5;
      *(_QWORD *)(v129 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = v145;
      v145 = 0;
      v101 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v101 = 0x500000001;
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0;
      *(_QWORD *)(v101 + 16) = 0;
      v144 = (WTF *)v101;
      v102 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v102 = 0x700000002;
      *(_QWORD *)(v102 + 8) = "nodeIds";
      *(_DWORD *)(v102 + 16) = 4;
      v142 = v100;
      v143 = (WTF::StringImpl *)v102;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v101 + 16), &v143, (const WTF::StringImpl *)&v142, v103, v104, v105, v106, v107, (uint64_t)&v148);
      if ((_BYTE)v150)
      {
        v115 = (uint64_t *)(v101 + 24);
        v116 = *(unsigned int *)(v101 + 36);
        if ((_DWORD)v116 == *(_DWORD *)(v101 + 32))
        {
          v138 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v143);
          v116 = *(unsigned int *)(v101 + 36);
          v139 = *(_QWORD *)(v101 + 24);
          v140 = *v138;
          if (*v138)
            *v140 += 2;
          *(_QWORD *)(v139 + 8 * v116) = v140;
        }
        else
        {
          v117 = *v115;
          v118 = v143;
          if (v143)
            *(_DWORD *)v143 += 2;
          *(_QWORD *)(v117 + 8 * v116) = v118;
        }
        *(_DWORD *)(v101 + 36) = v116 + 1;
      }
      v119 = v142;
      v142 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 1)
          WTF::JSONImpl::Value::operator delete(v119, v108, v109, v110, v111, v112, v113, v114);
        else
          --*(_DWORD *)v119;
      }
      v120 = v143;
      v143 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
      v82 = v144;
      if (!v144)
        goto LABEL_64;
      v83 = *(_DWORD *)v144 - 1;
      if (*(_DWORD *)v144 != 1)
      {
LABEL_61:
        *(_DWORD *)v82 = v83;
        goto LABEL_64;
      }
      WTF::JSONImpl::Value::operator delete(v144, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_64:
    if (v146 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938B8[v146])(&v148, &v145);
    goto LABEL_28;
  }
  if (!BYTE4(v17))
    goto LABEL_72;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 40))(v48, a2, v17, &v147);
LABEL_28:
  v50 = v147;
  v147 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::setNodeName(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD **v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  WTF *v148;
  uint64_t (**v149)();
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t (***v152)();
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v145 = (WTF::StringImpl *)v8;
  v149 = &off_1E3593B00;
  v150 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v151 = 0;
  v152 = &v149;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v145, 1, (uint64_t)&v149);
  v18 = v152;
  if (v152 == &v149)
  {
    v18 = &v149;
  }
  else
  {
    if (!v152)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x400000002;
  *(_QWORD *)(v21 + 8) = "name";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v145 = (WTF::StringImpl *)v21;
  v149 = &off_1E3593B90;
  v150 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v151 = 0;
  v152 = &v149;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v147, v19, v20, &v145, 1, (uint64_t)&v149);
  v30 = v152;
  if (v152 == &v149)
  {
    v30 = &v149;
  }
  else
  {
    if (!v152)
      goto LABEL_13;
    v22 = 5;
  }
  (*v30)[v22]();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3D00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.setNodeName' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v149) = 3;
    *(_DWORD *)v32 = v41;
    v150 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v149);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v150;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v150 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    if (!BYTE4(v17))
LABEL_72:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                                + 32))(&v145, *(_QWORD *)(a1 + 32), v17, &v147);
    if (v146)
    {
      if (v146 != 1)
      {
        v142 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::setNodeValue(v142);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v149) = 5;
      v76 = v145;
      if (v145)
        *(_DWORD *)v145 += 2;
      v150 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v149);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v150;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v150 = 0;
        if (!v82)
          goto LABEL_64;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      v130 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v130 = 5;
      *(_QWORD *)(v130 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = (int)v145;
      v101 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v101 = 0x500000001;
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0;
      *(_QWORD *)(v101 + 16) = 0;
      v144 = (WTF *)v101;
      v102 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v102 = 0x600000002;
      *(_QWORD *)(v102 + 8) = "nodeId";
      *(_DWORD *)(v102 + 16) = 4;
      v143 = (WTF::StringImpl *)v102;
      v103 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v103 = 0x300000001;
      v103[1] = (double)v100;
      v148 = (WTF *)v103;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v101 + 16), (WTF::AtomStringImpl *)&v143, (const WTF::StringImpl *)&v148, v104, v105, v106, v107, v108, (uint64_t)&v149);
      if ((_BYTE)v151)
      {
        v116 = (uint64_t *)(v101 + 24);
        v117 = *(unsigned int *)(v101 + 36);
        if ((_DWORD)v117 == *(_DWORD *)(v101 + 32))
        {
          v139 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v116, v117 + 1, (unint64_t)&v143);
          v117 = *(unsigned int *)(v101 + 36);
          v140 = *(_QWORD *)(v101 + 24);
          v141 = *v139;
          if (*v139)
            *v141 += 2;
          *(_QWORD *)(v140 + 8 * v117) = v141;
        }
        else
        {
          v118 = *v116;
          v119 = v143;
          if (v143)
            *(_DWORD *)v143 += 2;
          *(_QWORD *)(v118 + 8 * v117) = v119;
        }
        *(_DWORD *)(v101 + 36) = v117 + 1;
      }
      v120 = v148;
      v148 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 1)
          WTF::JSONImpl::Value::operator delete(v120, v109, v110, v111, v112, v113, v114, v115);
        else
          --*(_DWORD *)v120;
      }
      v121 = v143;
      v143 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
        {
          WTF::StringImpl::~StringImpl(v121, v109, v110, v111, v112, v113, v114, v115);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v121 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
      v82 = v144;
      if (!v144)
        goto LABEL_64;
      v83 = *(_DWORD *)v144 - 1;
      if (*(_DWORD *)v144 != 1)
      {
LABEL_61:
        *(_DWORD *)v82 = v83;
        goto LABEL_64;
      }
      WTF::JSONImpl::Value::operator delete(v144, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_64:
    if (v146 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938A8[v146])(&v149, &v145);
    goto LABEL_28;
  }
  if (!BYTE4(v17))
    goto LABEL_72;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 48))(v48, a2, v17, &v147);
LABEL_28:
  v50 = v147;
  v147 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::setNodeValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v114 = (WTF *)&off_1E3593B00;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v116 = 0;
  v117 = &v114;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v111, 1, (uint64_t)&v114);
  v18 = v117;
  if (v117 == &v114)
  {
    v18 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x500000002;
  *(_QWORD *)(v21 + 8) = "value";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v111 = (WTF::StringImpl *)v21;
  v114 = (WTF *)&off_1E3593B90;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v116 = 0;
  v117 = &v114;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v113, v19, v20, &v111, 1, (uint64_t)&v114);
  v30 = v117;
  if (v117 == &v114)
  {
    v30 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3E00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.setNodeValue' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v114) = 3;
    *(_DWORD *)v32 = v41;
    v115 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v114);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v115;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v115 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v92 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 56))(v48, a2, v17, &v113);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                              + 40))(&v111, *(_QWORD *)(a1 + 32), v17, &v113);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v114 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v114);
    v82 = v114;
    if (!v114)
      goto LABEL_52;
    v83 = *(_DWORD *)v114 - 1;
    if (*(_DWORD *)v114 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v114, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v114) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v115 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_52;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v114);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v115;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v115 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v82 = v83;
  }
LABEL_52:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_28;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_28:
  v50 = v113;
  v113 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::removeNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3C00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.removeNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 64))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DOMBackendDispatcher::setAttributeValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v140;
  char v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v140 = (WTF::StringImpl *)v7;
  v144 = (WTF *)&off_1E3593B00;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v146 = 0;
  v147 = &v144;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v140, 1, (uint64_t)&v144);
  v17 = v147;
  if (v147 == &v144)
  {
    v17 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (const WTF::StringImpl *)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x400000002;
  *(_QWORD *)(v20 + 8) = "name";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v140 = (WTF::StringImpl *)v20;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v143, v18, v19, &v140, 1, (uint64_t)&v144);
  v29 = v147;
  if (v147 == &v144)
  {
    v29 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (const WTF::StringImpl *)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x500000002;
  *(_QWORD *)(v32 + 8) = "value";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v140 = (WTF::StringImpl *)v32;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v142, v30, v31, &v140, 1, (uint64_t)&v144);
  v41 = v147;
  if (v147 == &v144)
  {
    v41 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4300000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'DOM.setAttributeValue' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v144) = 3;
    *(_DWORD *)v43 = v52;
    v145 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v144);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v145;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v145 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_35;
    }
    v120 = v51;
    goto LABEL_58;
  }
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 72))(v59, a2, v16, &v143, &v142);
      goto LABEL_35;
    }
LABEL_69:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_69;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 56))(&v140, *(_QWORD *)(a1 + 32), v16, &v143, &v142);
  if (!v141)
  {
    v129 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v129 = 0x500000001;
    *((_QWORD *)v129 + 3) = 0;
    *((_QWORD *)v129 + 4) = 0;
    *((_QWORD *)v129 + 2) = 0;
    v144 = v129;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
    v110 = v144;
    if (!v144)
      goto LABEL_64;
    v111 = *(_DWORD *)v144 - 1;
    if (*(_DWORD *)v144 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v144, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  v103 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v103 + 48))
    *(_BYTE *)(v103 + 48) = *(_QWORD *)(v103 + 48);
  LODWORD(v144) = 5;
  v104 = v140;
  if (v140)
    *(_DWORD *)v140 += 2;
  v145 = v104;
  v105 = *(unsigned int *)(v103 + 36);
  if ((_DWORD)v105 != *(_DWORD *)(v103 + 32))
  {
    v138 = *(_QWORD *)(v103 + 24) + 16 * v105;
    *(_DWORD *)v138 = 5;
    *(_QWORD *)(v138 + 8) = v104;
    *(_DWORD *)(v103 + 36) = v105 + 1;
    goto LABEL_64;
  }
  v106 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103 + 24, v105 + 1, (unint64_t)&v144);
  v107 = *(unsigned int *)(v103 + 36);
  v108 = *(_QWORD *)(v103 + 24) + 16 * v107;
  *(_DWORD *)v108 = *(_DWORD *)v106;
  v109 = *(_QWORD *)(v106 + 8);
  *(_QWORD *)(v106 + 8) = 0;
  *(_QWORD *)(v108 + 8) = v109;
  v110 = v145;
  *(_DWORD *)(v103 + 36) = v107 + 1;
  v145 = 0;
  if (v110)
  {
    v111 = *(_DWORD *)v110 - 2;
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      goto LABEL_64;
    }
LABEL_61:
    *(_DWORD *)v110 = v111;
  }
LABEL_64:
  if (v141)
  {
    v120 = v140;
    v140 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
LABEL_58:
        WTF::StringImpl::~StringImpl(v120, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        goto LABEL_35;
      }
      *(_DWORD *)v120 -= 2;
    }
  }
LABEL_35:
  v61 = v142;
  v142 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v143;
  v143 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::setAttributesAsText(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v140;
  char v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v140 = (WTF::StringImpl *)v7;
  v144 = (WTF *)&off_1E3593B00;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v146 = 0;
  v147 = &v144;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v140, 1, (uint64_t)&v144);
  v17 = v147;
  if (v147 == &v144)
  {
    v17 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (const WTF::StringImpl *)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x400000002;
  *(_QWORD *)(v20 + 8) = "text";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v140 = (WTF::StringImpl *)v20;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v143, v18, v19, &v140, 1, (uint64_t)&v144);
  v29 = v147;
  if (v147 == &v144)
  {
    v29 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (const WTF::StringImpl *)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x400000002;
  *(_QWORD *)(v32 + 8) = "name";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v140 = (WTF::StringImpl *)v32;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v142, v30, v31, &v140, 0, (uint64_t)&v144);
  v41 = v147;
  if (v147 == &v144)
  {
    v41 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4500000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'DOM.setAttributesAsText' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v144) = 3;
    *(_DWORD *)v43 = v52;
    v145 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v144);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v145;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v145 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_35;
    }
    v120 = v51;
    goto LABEL_58;
  }
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 80))(v59, a2, v16, &v143, &v142);
      goto LABEL_35;
    }
LABEL_69:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_69;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 64))(&v140, *(_QWORD *)(a1 + 32), v16, &v143, &v142);
  if (!v141)
  {
    v129 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v129 = 0x500000001;
    *((_QWORD *)v129 + 3) = 0;
    *((_QWORD *)v129 + 4) = 0;
    *((_QWORD *)v129 + 2) = 0;
    v144 = v129;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
    v110 = v144;
    if (!v144)
      goto LABEL_64;
    v111 = *(_DWORD *)v144 - 1;
    if (*(_DWORD *)v144 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v144, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  v103 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v103 + 48))
    *(_BYTE *)(v103 + 48) = *(_QWORD *)(v103 + 48);
  LODWORD(v144) = 5;
  v104 = v140;
  if (v140)
    *(_DWORD *)v140 += 2;
  v145 = v104;
  v105 = *(unsigned int *)(v103 + 36);
  if ((_DWORD)v105 != *(_DWORD *)(v103 + 32))
  {
    v138 = *(_QWORD *)(v103 + 24) + 16 * v105;
    *(_DWORD *)v138 = 5;
    *(_QWORD *)(v138 + 8) = v104;
    *(_DWORD *)(v103 + 36) = v105 + 1;
    goto LABEL_64;
  }
  v106 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103 + 24, v105 + 1, (unint64_t)&v144);
  v107 = *(unsigned int *)(v103 + 36);
  v108 = *(_QWORD *)(v103 + 24) + 16 * v107;
  *(_DWORD *)v108 = *(_DWORD *)v106;
  v109 = *(_QWORD *)(v106 + 8);
  *(_QWORD *)(v106 + 8) = 0;
  *(_QWORD *)(v108 + 8) = v109;
  v110 = v145;
  *(_DWORD *)(v103 + 36) = v107 + 1;
  v145 = 0;
  if (v110)
  {
    v111 = *(_DWORD *)v110 - 2;
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      goto LABEL_64;
    }
LABEL_61:
    *(_DWORD *)v110 = v111;
  }
LABEL_64:
  if (v141)
  {
    v120 = v140;
    v140 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
LABEL_58:
        WTF::StringImpl::~StringImpl(v120, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        goto LABEL_35;
      }
      *(_DWORD *)v120 -= 2;
    }
  }
LABEL_35:
  v61 = v142;
  v142 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v143;
  v143 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::removeAttribute(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v114 = (WTF *)&off_1E3593B00;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v116 = 0;
  v117 = &v114;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v111, 1, (uint64_t)&v114);
  v18 = v117;
  if (v117 == &v114)
  {
    v18 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x400000002;
  *(_QWORD *)(v21 + 8) = "name";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v111 = (WTF::StringImpl *)v21;
  v114 = (WTF *)&off_1E3593B90;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v116 = 0;
  v117 = &v114;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v113, v19, v20, &v111, 1, (uint64_t)&v114);
  v30 = v117;
  if (v117 == &v114)
  {
    v30 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4100000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.removeAttribute' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v114) = 3;
    *(_DWORD *)v32 = v41;
    v115 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v114);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v115;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v115 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v92 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 88))(v48, a2, v17, &v113);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                              + 72))(&v111, *(_QWORD *)(a1 + 32), v17, &v113);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v114 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v114);
    v82 = v114;
    if (!v114)
      goto LABEL_52;
    v83 = *(_DWORD *)v114 - 1;
    if (*(_DWORD *)v114 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v114, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v114) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v115 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_52;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v114);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v115;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v115 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v82 = v83;
  }
LABEL_52:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_28;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_28:
  v50 = v113;
  v113 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::getSupportedEventNames(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 80))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::getDataBindingsForNode(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0xA00000002;
    *(_QWORD *)(v31 + 8) = "eventNames";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593898[v74])(&v75, &v73);
}

void Inspector::DOMBackendDispatcher::getDataBindingsForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4800000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getDataBindingsForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 104))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 88))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::getAssociatedDataForNode(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xC00000002;
    *(_QWORD *)(v79 + 8) = "dataBindings";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v78 + 16), &v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938F8[v130])(&v131, &v129);
}

void Inspector::DOMBackendDispatcher::getAssociatedDataForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF *v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD **v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B00;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v128 = 0;
  v129 = &v126;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v123, 1, (uint64_t)&v126);
  v17 = v129;
  if (v129 == &v126)
  {
    v17 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4A00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getAssociatedDataForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v19 = v28;
    v127 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v126);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v127;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v127 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 112))(v35, a2, v16);
      return;
    }
LABEL_67:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_67;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 96))(&v123, *(_QWORD *)(a1 + 32), v16);
  if (v124)
  {
    if (v124 != 1)
    {
      v120 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::getEventListenersForNode(v120);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v126) = 5;
    v46 = v123;
    if (v123)
      *(_DWORD *)v123 += 2;
    v127 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
    {
      v100 = *(_QWORD *)(v45 + 24) + 16 * v47;
      *(_DWORD *)v100 = 5;
      *(_QWORD *)(v100 + 8) = v46;
      *(_DWORD *)(v45 + 36) = v47 + 1;
      goto LABEL_58;
    }
    v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v126);
    v56 = *(unsigned int *)(v45 + 36);
    v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
    *(_DWORD *)v57 = *(_DWORD *)v48;
    v58 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v57 + 8) = v58;
    v59 = v127;
    *(_DWORD *)(v45 + 36) = v56 + 1;
    v127 = 0;
    if (!v59)
      goto LABEL_58;
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  v68 = v123;
  v123 = 0;
  v69 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  *v69 = 0x500000001;
  v69[2] = 0;
  v70 = v69 + 2;
  v69[3] = 0;
  v69[4] = 0;
  v122 = (WTF *)v69;
  if (v68)
  {
    v71 = v69;
    v72 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v72 = 0xE00000002;
    *(_QWORD *)(v72 + 8) = "associatedData";
    *(_DWORD *)(v72 + 16) = 4;
    v121 = (WTF::StringImpl *)v72;
    v73 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v73 = 0x400000001;
    *((_QWORD *)v73 + 1) = v68;
    *(_DWORD *)v68 += 2;
    v125 = v73;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v70, (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v125, v74, v75, v76, v77, v78, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v86 = v71 + 3;
      v87 = *((unsigned int *)v71 + 9);
      if ((_DWORD)v87 == *((_DWORD *)v71 + 8))
      {
        v117 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)&v121);
        v87 = *((unsigned int *)v71 + 9);
        v118 = v71[3];
        v119 = *v117;
        if (*v117)
          *v119 += 2;
        *(_QWORD *)(v118 + 8 * v87) = v119;
      }
      else
      {
        v88 = *v86;
        v89 = v121;
        if (v121)
          *(_DWORD *)v121 += 2;
        *(_QWORD *)(v88 + 8 * v87) = v89;
      }
      *((_DWORD *)v71 + 9) = v87 + 1;
    }
    v90 = v125;
    v125 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 1)
        WTF::JSONImpl::Value::operator delete(v90, v79, v80, v81, v82, v83, v84, v85);
      else
        --*(_DWORD *)v90;
    }
    v91 = v121;
    v121 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
      {
        WTF::StringImpl::~StringImpl(v91, v79, v80, v81, v82, v83, v84, v85);
        WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
      }
      else
      {
        *(_DWORD *)v91 -= 2;
      }
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
  if (!v122)
    goto LABEL_51;
  if (*(_DWORD *)v122 != 1)
  {
    --*(_DWORD *)v122;
LABEL_51:
    if (!v68)
      goto LABEL_58;
    goto LABEL_52;
  }
  WTF::JSONImpl::Value::operator delete(v122, v49, v50, v51, v52, v53, v54, v55);
  if (v68)
  {
LABEL_52:
    if (*(_DWORD *)v68 != 2)
    {
      *(_DWORD *)v68 -= 2;
      goto LABEL_58;
    }
    v59 = v68;
LABEL_57:
    WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
LABEL_58:
  if (v124 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v124])(&v126, &v123);
}

void Inspector::DOMBackendDispatcher::getEventListenersForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  int v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::AtomStringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF::StringImpl *v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD **v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  WTF *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  WTF::StringImpl *v151;
  int v152;
  __int16 v153;
  uint64_t (**v154)();
  WTF::StringImpl *v155;
  uint64_t v156;
  uint64_t (***v157)();
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v151 = (WTF::StringImpl *)v8;
  v154 = &off_1E3593B00;
  v155 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v156 = 0;
  v157 = &v154;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v151, 1, (uint64_t)&v154);
  v18 = v157;
  if (v157 == &v154)
  {
    v18 = &v154;
  }
  else
  {
    if (!v157)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1000000002;
  *(_QWORD *)(v21 + 8) = "includeAncestors";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v151 = (WTF::StringImpl *)v21;
  v154 = (uint64_t (**)())&unk_1E3593AB8;
  v155 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v156 = 0;
  v157 = &v154;
  v30 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v19, v20, &v151, 0, (uint64_t)&v154);
  v31 = v157;
  if (v157 == &v154)
  {
    v31 = &v154;
  }
  else
  {
    if (!v157)
      goto LABEL_13;
    v22 = 5;
  }
  (*v31)[v22]();
LABEL_13:
  v153 = v30;
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v32 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v32 + 36))
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x20);
    v41 = (WTF::StringImpl *)v33;
    *(_QWORD *)v33 = 0x4A00000002;
    *(_QWORD *)(v33 + 8) = "Some arguments of method 'DOM.getEventListenersForNode' can't be processed";
    v42 = 4;
    *(_DWORD *)(v33 + 16) = 4;
    if (!*(_BYTE *)(v32 + 48))
    {
      *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
      v42 = *(_DWORD *)v33 + 2;
    }
    LODWORD(v154) = 3;
    *(_DWORD *)v33 = v42;
    v155 = (WTF::StringImpl *)v33;
    v43 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v32 + 32))
    {
      v44 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v43 + 1, (unint64_t)&v154);
      v45 = *(unsigned int *)(v32 + 36);
      v46 = *(_QWORD *)(v32 + 24) + 16 * v45;
      *(_DWORD *)v46 = *(_DWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v46 + 8) = v47;
      v48 = v155;
      *(_DWORD *)(v32 + 36) = v45 + 1;
      v155 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v50 = *(_QWORD *)(v32 + 24) + 16 * v43;
      *(_DWORD *)v50 = 3;
      *(_QWORD *)(v50 + 8) = v33;
      *(_DWORD *)(v32 + 36) = v43 + 1;
    }
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
    return;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)v49 + 120))(v49, a2, v17, &v153);
      return;
    }
LABEL_68:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_68;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, __int16 *))(**(_QWORD **)(a1 + 32) + 104))(&v151, *(_QWORD *)(a1 + 32), v17, &v153);
  if (v152)
  {
    if (v152 != 1)
    {
      v147 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::setEventListenerDisabled(v147);
      return;
    }
    v67 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v67 + 48))
      *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
    LODWORD(v154) = 5;
    v68 = v151;
    if (v151)
      *(_DWORD *)v151 += 2;
    v155 = v68;
    v69 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v69 == *(_DWORD *)(v67 + 32))
    {
      v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v154);
      v78 = *(unsigned int *)(v67 + 36);
      v79 = *(_QWORD *)(v67 + 24) + 16 * v78;
      *(_DWORD *)v79 = *(_DWORD *)v70;
      v80 = *(_QWORD *)(v70 + 8);
      *(_QWORD *)(v70 + 8) = 0;
      *(_QWORD *)(v79 + 8) = v80;
      v81 = v155;
      *(_DWORD *)(v67 + 36) = v78 + 1;
      v155 = 0;
      if (!v81)
        goto LABEL_60;
      v82 = *(_DWORD *)v81 - 2;
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl(v81, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
        goto LABEL_60;
      }
      goto LABEL_57;
    }
    v135 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v135 = 5;
    *(_QWORD *)(v135 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
  }
  else
  {
    v99 = v151;
    v151 = 0;
    v100 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v100 = 0x500000001;
    *(_QWORD *)(v100 + 24) = 0;
    *(_QWORD *)(v100 + 32) = 0;
    *(_QWORD *)(v100 + 16) = 0;
    v150 = (WTF *)v100;
    v101 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v101 = 0x900000002;
    *(_QWORD *)(v101 + 8) = "listeners";
    *(_DWORD *)(v101 + 16) = 4;
    v148 = v99;
    v149 = (WTF::StringImpl *)v101;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v100 + 16), &v149, (const WTF::StringImpl *)&v148, v102, v103, v104, v105, v106, (uint64_t)&v154);
    if ((_BYTE)v156)
    {
      v114 = (uint64_t *)(v100 + 24);
      v115 = *(unsigned int *)(v100 + 36);
      if ((_DWORD)v115 == *(_DWORD *)(v100 + 32))
      {
        v144 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, v115 + 1, (unint64_t)&v149);
        v115 = *(unsigned int *)(v100 + 36);
        v145 = *(_QWORD *)(v100 + 24);
        v146 = *v144;
        if (*v144)
          *v146 += 2;
        *(_QWORD *)(v145 + 8 * v115) = v146;
      }
      else
      {
        v116 = *v114;
        v117 = v149;
        if (v149)
          *(_DWORD *)v149 += 2;
        *(_QWORD *)(v116 + 8 * v115) = v117;
      }
      *(_DWORD *)(v100 + 36) = v115 + 1;
    }
    v118 = v148;
    v148 = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 1)
        WTF::JSONImpl::Value::operator delete(v118, v107, v108, v109, v110, v111, v112, v113);
      else
        --*(_DWORD *)v118;
    }
    v119 = v149;
    v149 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
      {
        WTF::StringImpl::~StringImpl(v119, v107, v108, v109, v110, v111, v112, v113);
        WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      else
      {
        *(_DWORD *)v119 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v150);
    v81 = v150;
    if (!v150)
      goto LABEL_60;
    v82 = *(_DWORD *)v150 - 1;
    if (*(_DWORD *)v150 != 1)
    {
LABEL_57:
      *(_DWORD *)v81 = v82;
      goto LABEL_60;
    }
    WTF::JSONImpl::Value::operator delete(v150, v120, v121, v122, v123, v124, v125, v126);
  }
LABEL_60:
  if (v152 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593908[v152])(&v154, &v151);
}

