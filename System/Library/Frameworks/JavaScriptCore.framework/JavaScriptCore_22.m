uint64_t JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  char *v32;
  unsigned int *v33;
  char v34;
  char v35;

  v8 = a5;
  v10 = a3;
  v13 = *a4;
  if (*a4)
  {
    if (v13 == 1)
    {
      v14 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v13 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v14 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v14 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v14;
  v15 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2E, a3, (uint64_t)a4, a5, a6, a7, a8);
  v34 = -126;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -126;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v34);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v31;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -126;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 46;
  v35 = 46;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 46;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v35);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v32;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  if (*a4 == 1)
  {
    v27 = *((_QWORD *)a4 + 2);
    v28 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v28 == *(_DWORD *)(v27 + 24))
    {
      v33 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 16, v28 + 1, (unint64_t)v15);
      v25 = 0;
      v28 = *(unsigned int *)(v27 + 28);
      v29 = *(_QWORD *)(v27 + 16);
      v30 = *v33;
    }
    else
    {
      v25 = 0;
      v29 = *(_QWORD *)(v27 + 16);
      v30 = *v15;
    }
    *(_DWORD *)(v29 + 4 * v28) = v30;
    ++*(_DWORD *)(v27 + 28);
  }
  else
  {
    v25 = *v15;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v14 = *a4;
  if (*a4)
  {
    if (v14 == 1)
    {
      *((_DWORD *)a4 + 1) = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
      goto LABEL_10;
    }
    if (v14 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v15 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
  }
  else
  {
    v15 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v15;
  if (v15 != (char)v15)
    return 0;
LABEL_10:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4A, a3, (uint64_t)a4, a5, a6, a7, a8);
  v43 = 74;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 74;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v43);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v39;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 74;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  v44 = v22;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v44);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v40;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v45 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v45);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v41;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a4 == 1)
  {
    v34 = *((_QWORD *)a4 + 2);
    v35 = (int *)(a4 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v42 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v30) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v42;
    }
    else
    {
      LOBYTE(v30) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v30 = *((_DWORD *)a4 + 1);
  }
  v46 = v30;
  v31 = *(unsigned int *)(a1 + 12);
  v32 = *(unsigned int *)(a1 + 16);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v30;
  }
  else
  {
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v30;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;

  v14 = JSC::OpJgreatereq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if ((_DWORD)v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4A, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 74);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a4);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpJeqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v9 = a3;
  v12 = *a4;
  if (*a4)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a4 + 4) - *(_DWORD *)(*((_QWORD *)a4 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a4 + 4);
  }
  *((_DWORD *)a4 + 1) = v13;
  v14 = (unsigned int *)(a4 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4A, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 74;
  v34 = 74;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 74;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  if (*a4 == 1)
  {
    v25 = *((_QWORD *)a4 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0x7FFFFFFF;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (WTF::StringImpl **)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21)
      {
        if (v22 != (WTF::StringImpl *)-1)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = *((_DWORD *)v22 + 4);
          if ((v25 & 0x20) != 0)
            v25 = *((_DWORD *)v22 + 8);
          v26 = 0;
          v27 = v25 >> 8;
          do
          {
            v28 = v27 & v24;
            v27 = ++v26 + v28;
          }
          while (*(_QWORD *)(v23 + 16 * v28));
          v29 = v23 + 16 * v28;
          *(_QWORD *)v29 = 0;
          v30 = *v21;
          *v21 = 0;
          *(_QWORD *)v29 = v30;
          *(_DWORD *)(v29 + 8) = *(_DWORD *)(v6 + 16 * v19 + 8);
          v31 = *v21;
          *v21 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v21 == a3)
            v20 = v29;
        }
      }
      else
      {
        *v21 = 0;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  __int128 v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = v7 + 16;
    do
    {
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      v16 += 24;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (unint64_t *)(v4 + 24 * i);
      v10 = *v18;
      v9 = v18[1];
      v8 = *v18 & 0xFFFFFFFFFFFFFFFBLL;
      if (v8 | v9)
      {
        v19 = *a1;
        if (*a1)
          v8 = *(unsigned int *)(v19 - 8);
        else
          v8 = 0;
        v20 = (v10 + ~(v10 << 32)) ^ ((v10 + ~(v10 << 32)) >> 22);
        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
        v10 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
        v22 = ~(v9 << 15) + v9;
        v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
        LODWORD(v10) = v8 & ((0xD7862706ELL
                            * (unint64_t)(95187966 * ((v23 + ~(v23 << 11)) ^ ((v23 + ~(v23 << 11)) >> 16))
                                               + 277951225 * ((v10 >> 31) ^ v10))) >> 4);
        LODWORD(v9) = 1;
        do
        {
          v11 = v19 + 24 * v10;
          v12 = *(_QWORD *)v11;
          v13 = *(unsigned __int8 *)(v11 + 8);
          v10 = ((_DWORD)v10 + (_DWORD)v9) & v8;
          v9 = (v9 + 1);
          if (*(_QWORD *)v11)
            v24 = 0;
          else
            v24 = (_DWORD)v13 == 0;
        }
        while (!v24);
        v25 = *(_OWORD *)v18;
        *(_QWORD *)(v11 + 16) = v18[2];
        *(_OWORD *)v11 = v25;
      }
    }
    goto LABEL_19;
  }
  if (v4)
LABEL_19:
    WTF::fastFree(v4 - 16, (void *)v8, v9, v10, v11, v12, v13, v14);
}

_OWORD *WTF::HashTable<JSC::LinkTimeConstant,WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>>,WTF::IntHash<JSC::LinkTimeConstant>,WTF::HashMap<JSC::LinkTimeConstant,JSC::RegisterID *,WTF::IntHash<JSC::LinkTimeConstant>,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>,WTF::HashTraits<JSC::RegisterID *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _OWORD *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = 0x7FFFFFFF;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (_DWORD *)(v6 + 16 * v21);
      if ((int)*v22 <= 2147483645)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((*v22 + ~(*v22 << 15)) ^ ((*v22 + ~(*v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 16 * v28) != 0x7FFFFFFF);
        v29 = (_OWORD *)(v23 + 16 * v28);
        *v29 = *(_OWORD *)v22;
        if (v22 == a3)
          v19 = v29;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_19;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

uint64_t JSC::OpNot::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB8, a3, a4, a5, a6, a7, a8);
  v31 = -72;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -72;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -72;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpNot::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB8, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -72;
  v42 = -72;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -72;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpNot::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB8, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -72;
  v24 = -72;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -72;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNegate::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  unsigned __int8 v15;
  __int16 v16;
  __int16 v17;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB7, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 183);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNegate::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB7, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -73;
  v26 = -73;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -73;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpBitnot::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC2, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = -62;
    v51 = -62;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = -62;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpBitnot::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC2, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -62;
  v25 = -62;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -62;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC0, a3, a4, a5, a6, a7, a8);
    v34 = -64;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -64;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v34);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v31;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = -64;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v21 = a2;
    v35 = v21;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v35);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v32;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v26 = v11;
    v36 = v26;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v36);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        v26 = *v33;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v37 = v10;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    }
    else
    {
      if (v29 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v37);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC0, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 192);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC0, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -64;
  v25 = -64;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -64;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC1, a3, a4, a5, a6, a7, a8);
    v34 = -63;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -63;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v34);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v31;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = -63;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v21 = a2;
    v35 = v21;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v35);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v32;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v26 = v11;
    v36 = v26;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v36);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        v26 = *v33;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v37 = v10;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    }
    else
    {
      if (v29 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v37);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC1, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 193);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC1, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -63;
  v25 = -63;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -63;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpEq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 128) < 0x90;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x90, a3, a4, a5, a6, a7, a8);
  v39 = -112;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -112;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v39);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v35;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -112;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v21 = a2;
  v40 = v21;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v40);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v36;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  v41 = v26;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v41);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      v26 = *v37;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  v31 = v12 + 16;
  if (v12 <= 0x3FFFFFFF)
    v31 = v12;
  v42 = v31;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v31;
  }
  else
  {
    v32 = v29;
    if (v29 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v42);
      v32 = *(unsigned int *)(a1 + 12);
      v33 = *(_QWORD *)a1;
      v31 = *v38;
    }
    else
    {
      v33 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v33 + v32) = v31;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpEq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x90, a3, a4, a5, a6, a7, a8);
  v51 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v51);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v46;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -112;
  v52 = -112;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -112;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v52);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v47;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v53 = v8;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v8 >> 8;
  v54 = BYTE1(v8);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v54);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v48;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v55 = v10;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  v35 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v10);
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v36 = v33;
    if (v33 == *(_DWORD *)(a1 + 8))
    {
      v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v56);
      v36 = *(unsigned int *)(a1 + 12);
      v37 = *(_QWORD *)a1;
      LOBYTE(v35) = *v49;
    }
    else
    {
      v37 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v37 + v36) = v35;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v57 = v12;
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v38 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = v12 >> 8;
  v58 = BYTE1(v12);
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v50 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v58);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      LOBYTE(v42) = *v50;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpEq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x90, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -112;
  v25 = -112;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -112;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNeq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x91, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -111;
  v25 = -111;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -111;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpNstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x93, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 147);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

BOOL JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3)
{
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v3 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v3 = (a1 + 0x8000) >> 6 < 0x201;
  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  v5 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v5 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v4)
    v5 = 0;
  return v3 && v5;
}

uint64_t JSC::OpNstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x93, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -109;
  v25 = -109;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -109;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpLess::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x94, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -108;
  v25 = -108;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -108;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpLesseq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x95, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 149);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpLesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x95, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -107;
  v25 = -107;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -107;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpGreater::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x96, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 150);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpGreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x96, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -106;
  v25 = -106;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -106;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpGreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x97, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 151);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpGreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x97, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -105;
  v25 = -105;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -105;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpBelow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x98, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -104;
  v25 = -104;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -104;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpBeloweq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3;
  v7 = a4;
  result = JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v6, v7);
    if ((result & 1) == 0)
      return JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v6, v7, v9, v10, v11, v12);
  }
  return result;
}

BOOL JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  char v16;
  char v17;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x99, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 153);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

BOOL JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, int a3)
{
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v3 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v3 = (a1 + 128) < 0x90;
  v4 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 128) < 0x90;
  v5 = (a3 - 1073741808) < 0x80;
  if (a3 <= 0x3FFFFFFF)
    v5 = (a3 + 128) < 0x90;
  if (!v4)
    v5 = 0;
  return v3 && v5;
}

BOOL JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x99, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 153);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpBeloweq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x99, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -103;
  v25 = -103;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -103;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpMod::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v14 = JSC::OpNstricteq::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9A, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 154);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpMod::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9A, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -102;
  v25 = -102;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -102;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPow::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::OpPow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::OpPow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::OpPow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::OpPow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  char v16;
  char v17;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9B, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 155);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpPow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9B, a3, a4, a5, a6, a7, a8);
  v51 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v51);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v46;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -101;
  v52 = -101;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -101;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v52);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v47;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v53 = v8;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v8 >> 8;
  v54 = BYTE1(v8);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v54);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v48;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v55 = v10;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  v35 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v10);
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v36 = v33;
    if (v33 == *(_DWORD *)(a1 + 8))
    {
      v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v56);
      v36 = *(unsigned int *)(a1 + 12);
      v37 = *(_QWORD *)a1;
      LOBYTE(v35) = *v49;
    }
    else
    {
      v37 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v37 + v36) = v35;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v57 = v12;
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v38 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = v12 >> 8;
  v58 = BYTE1(v12);
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v50 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v58);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      LOBYTE(v42) = *v50;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpPow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9B, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -101;
  v25 = -101;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -101;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpLshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA4, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -92;
  v26 = -92;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -92;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpRshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA5, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -91;
  v26 = -91;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -91;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpUrshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9C, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -100;
  v25 = -100;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -100;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpAdd::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9D, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -99;
  v27 = -99;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -99;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpMul::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9E, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -98;
  v27 = -98;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -98;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpDiv::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9F, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -97;
  v27 = -97;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -97;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpSub::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA0, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -96;
  v27 = -96;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -96;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpBitand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA1, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -95;
  v27 = -95;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -95;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpBitxor::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned __int16 a6)
{
  unsigned __int16 v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;

  v7 = a5;
  v18 = JSC::OpBitxor::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4, a5);
  if (v18)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA3, v12, v13, v14, v15, v16, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 163);
    v19 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v19 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
    v20 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v20 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
    v21 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v21 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v7);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a6);
  }
  return v18;
}

BOOL JSC::OpBitxor::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3, unsigned int a4)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v4 = (a1 + 0x8000) >> 6 < 0x201;
  v5 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v5 = (a2 + 0x8000) >> 6 < 0x201;
  v6 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v6 = (a3 + 0x8000) >> 6 < 0x201;
  if (a4 >= 0x10000)
    v6 = 0;
  if (!v5)
    v6 = 0;
  return v4 && v6;
}

uint64_t JSC::OpBitxor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA3, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -93;
  v27 = -93;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -93;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpBitor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA2, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = -94;
  v27 = -94;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -94;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToObject::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = a3;
  result = JSC::OpToObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpToObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v12, a4, a5, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpToObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v12, a4, a5, v17, v18, v19);
  }
  return result;
}

uint64_t JSC::OpToObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if ((a5 | a4) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x34, a3, a4, a5, a6, a7, a8);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 52);
      v16 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v16 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      v17 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v17 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpToObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if (!((a5 | a4) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x34, a3, a4, a5, a6, a7, a8);
      v59 = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v59);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v53;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = 52;
      v60 = 52;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 52;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v60);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v54;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v61 = v8;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v25 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v61);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      v29 = v8 >> 8;
      v62 = BYTE1(v8);
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(a1 + 8))
        {
          v55 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v62);
          v30 = *(unsigned int *)(a1 + 12);
          v31 = *(_QWORD *)a1;
          LOBYTE(v29) = *v55;
        }
        else
        {
          v31 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v31 + v30) = v29;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v63 = v10;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v63);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v36 = v10 >> 8;
      v64 = BYTE1(v10);
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v56 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v64);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          LOBYTE(v36) = *v56;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v65 = v15;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v15;
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v39 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v65);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v39) = v15;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      v43 = v15 >> 8;
      v66 = BYTE1(v15);
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = BYTE1(v15);
        v46 = *(_DWORD *)(a1 + 12);
        v47 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v44 = v41;
        if (v41 == *(_DWORD *)(a1 + 8))
        {
          v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v66);
          v44 = *(unsigned int *)(a1 + 12);
          v45 = *(_QWORD *)a1;
          LOBYTE(v43) = *v57;
        }
        else
        {
          v45 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v45 + v44) = v43;
        v46 = *(_DWORD *)(a1 + 12) + 1;
        v47 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v46;
        *(_DWORD *)(a1 + 16) = v47;
      }
      v67 = v14;
      if (v46 > v47)
      {
        *(_DWORD *)(a1 + 16) = v47 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
        v48 = *(_DWORD *)(a1 + 12);
        v49 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v46 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v67);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v46) = v14;
        v48 = *(_DWORD *)(a1 + 12) + 1;
        v49 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v48;
        *(_DWORD *)(a1 + 16) = v49;
      }
      v50 = v14 >> 8;
      v68 = BYTE1(v14);
      if (v48 > v49)
      {
        *(_DWORD *)(a1 + 16) = v49 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v49) = BYTE1(v14);
      }
      else
      {
        v51 = v48;
        if (v48 == *(_DWORD *)(a1 + 8))
        {
          v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v68);
          v51 = *(unsigned int *)(a1 + 12);
          v52 = *(_QWORD *)a1;
          LOBYTE(v50) = *v58;
        }
        else
        {
          v52 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v52 + v51) = v50;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpToObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x34, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 52;
  v26 = 52;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 52;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToString::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA8, a3, a4, a5, a6, a7, a8);
  v31 = -88;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -88;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -88;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpToString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA8, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -88;
  v42 = -88;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -88;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpToString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA8, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -88;
  v24 = -88;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -88;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBD, a3, a4, a5, a6, a7, a8);
  v31 = -67;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -67;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -67;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBD, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -67;
  v42 = -67;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -67;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpTypeof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBD, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -67;
  v24 = -67;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -67;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpInc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  _BOOL8 v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v25;
  char *v26;
  char v27;
  char v28;
  char v29;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  v10 = a3 < 0x100 && v9;
  if (v10)
  {
    v11 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB5, a3, a4, a5, a6, a7, a8);
    v27 = -75;
    v13 = *(unsigned int *)(a1 + 12);
    v14 = *(unsigned int *)(a1 + 16);
    if (v13 > v14)
    {
      *(_DWORD *)(a1 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v14) = -75;
      v17 = *(_DWORD *)(a1 + 12);
      v18 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
      {
        v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
        v13 = *(unsigned int *)(a1 + 12);
        v15 = *(_QWORD *)a1;
        v16 = *v25;
      }
      else
      {
        v15 = *(_QWORD *)a1;
        v16 = -75;
      }
      *(_BYTE *)(v15 + v13) = v16;
      v17 = *(_DWORD *)(a1 + 12) + 1;
      v18 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v17;
      *(_DWORD *)(a1 + 16) = v18;
    }
    v19 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v19 = a2;
    v28 = v19;
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v20 = v17;
      if (v17 == *(_DWORD *)(a1 + 8))
      {
        v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
        v20 = *(unsigned int *)(a1 + 12);
        v21 = *(_QWORD *)a1;
        v19 = *v26;
      }
      else
      {
        v21 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v21 + v20) = v19;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v29 = v11;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v11;
    }
    else
    {
      if (v22 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v29);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v11;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v10;
}

BOOL JSC::OpInc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned __int16 v11;
  __int16 v13;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = a3 < 0x10000 && v9;
  if (v10)
  {
    v11 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB5, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 181);
    v13 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v13 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  }
  return v10;
}

uint64_t JSC::OpInc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB5, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -75;
  v24 = -75;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -75;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpDec::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = a3 < 0x10000 && v9;
  if (v10)
  {
    v11 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB6, a3, a4, a5, a6, a7, a8);
    v41 = 0x80;
    v13 = *(unsigned int *)(a1 + 12);
    v14 = *(unsigned int *)(a1 + 16);
    if (v13 > v14)
    {
      *(_DWORD *)(a1 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
      v17 = *(_DWORD *)(a1 + 12);
      v18 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
      {
        v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
        v13 = *(unsigned int *)(a1 + 12);
        v15 = *(_QWORD *)a1;
        v16 = *v37;
      }
      else
      {
        v15 = *(_QWORD *)a1;
        v16 = 0x80;
      }
      *(_BYTE *)(v15 + v13) = v16;
      v17 = *(_DWORD *)(a1 + 12) + 1;
      v18 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v17;
      *(_DWORD *)(a1 + 16) = v18;
    }
    v19 = -74;
    v42 = -74;
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = -74;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v20 = v17;
      if (v17 == *(_DWORD *)(a1 + 8))
      {
        v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
        v20 = *(unsigned int *)(a1 + 12);
        v21 = *(_QWORD *)a1;
        v19 = *v38;
      }
      else
      {
        v21 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v21 + v20) = v19;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v43 = v8;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v22 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v8 >> 8;
    v44 = BYTE1(v8);
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        LOBYTE(v26) = *v39;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v45 = v11;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v11;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v29 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v11;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v11 >> 8;
    v46 = BYTE1(v11);
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v11);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        LOBYTE(v33) = *v40;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v10;
}

uint64_t JSC::OpDec::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB6, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -74;
  v24 = -74;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -74;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTypeofIsUndefined::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAB, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -85;
  v24 = -85;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -85;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsBoolean::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAF, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -81;
  v42 = -81;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -81;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpIsBoolean::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAF, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -81;
  v24 = -81;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -81;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB0, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -80;
  v42 = -80;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -80;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpIsNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB0, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -80;
  v24 = -80;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -80;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  v12 = a4;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBE, a3, a4, a5, a6, a7, a8);
  v34 = -66;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -66;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v34);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v31;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -66;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v35 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v35);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v32;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  v25 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v25 = v10;
  v36 = v25;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v26 = v23;
    if (v23 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v36);
      v26 = *(unsigned int *)(a1 + 12);
      v27 = *(_QWORD *)a1;
      v25 = *v33;
    }
    else
    {
      v27 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v27 + v26) = v25;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v37 = v12;
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = v12;
  }
  else
  {
    if (v28 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v37);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v28) = v12;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  __int16 v14;
  __int16 v15;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = a4;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBE, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 190);
  v14 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v14 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  v15 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v15 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  return 1;
}

uint64_t JSC::OpIsCellWithType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBE, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -66;
  v25 = -66;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -66;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTypeofIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAC, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 172);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpTypeofIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAC, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -84;
  v24 = -84;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -84;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTypeofIsFunction::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAD, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 173);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpTypeofIsFunction::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAD, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -83;
  v24 = -83;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -83;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  uint64_t result;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  char *v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  if ((a3 & 0xFFFFFF00) == 0)
  {
    v13 = a7;
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if ((a5 | a4 | a6 | a7) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x14, a3, a4, a5, a6, a7, a8);
      v38 = 20;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 20;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v38);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v36;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 20;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v23 = a2;
      v39 = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v39);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v37;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      v40 = v10;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v10;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v40);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v10;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v41 = v16;
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v16;
        v30 = *(_DWORD *)(a1 + 12);
        v31 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v28 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v41);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v28) = v16;
        v30 = *(_DWORD *)(a1 + 12) + 1;
        v31 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v30;
        *(_DWORD *)(a1 + 16) = v31;
      }
      v42 = v15;
      if (v30 > v31)
      {
        *(_DWORD *)(a1 + 16) = v31 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v15;
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v30 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v42);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v30) = v15;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      v43 = v14;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v14;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v43);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = v14;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v44 = v13;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v13;
      }
      else
      {
        if (v34 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v44);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v34) = v13;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  __int16 v10;
  uint64_t result;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  if ((a3 & 0xFFFF0000) == 0)
  {
    v13 = a7;
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if (!((a5 | a4 | a6 | a7) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x14, a3, a4, a5, a6, a7, a8);
      v64 = 0x80;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v64);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v59;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = 20;
      v65 = 20;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 20;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v60 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v65);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v60;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v66 = v8;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v66);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v30 = v8 >> 8;
      v67 = BYTE1(v8);
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v31 = v28;
        if (v28 == *(_DWORD *)(a1 + 8))
        {
          v61 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v67);
          v31 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          LOBYTE(v30) = *v61;
        }
        else
        {
          v32 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v32 + v31) = v30;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      v68 = v10;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v68);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v35 = *(_DWORD *)(a1 + 12) + 1;
        v36 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v35;
        *(_DWORD *)(a1 + 16) = v36;
      }
      v69 = HIBYTE(v10);
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = HIBYTE(v10);
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v35 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v69);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v35) = HIBYTE(v10);
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v70 = v16;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v16;
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v37 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v70);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v37) = v16;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v71 = 0;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = 0;
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v39 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v71);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v39) = 0;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      v72 = v15;
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v15;
        v43 = *(_DWORD *)(a1 + 12);
        v44 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v41 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v72);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v41) = v15;
        v43 = *(_DWORD *)(a1 + 12) + 1;
        v44 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v43;
        *(_DWORD *)(a1 + 16) = v44;
      }
      v45 = v15 >> 8;
      v73 = BYTE1(v15);
      if (v43 > v44)
      {
        *(_DWORD *)(a1 + 16) = v44 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v44) = BYTE1(v15);
        v48 = *(_DWORD *)(a1 + 12);
        v49 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v46 = v43;
        if (v43 == *(_DWORD *)(a1 + 8))
        {
          v62 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v73);
          v46 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          LOBYTE(v45) = *v62;
        }
        else
        {
          v47 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v47 + v46) = v45;
        v48 = *(_DWORD *)(a1 + 12) + 1;
        v49 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v48;
        *(_DWORD *)(a1 + 16) = v49;
      }
      v74 = v14;
      if (v48 > v49)
      {
        *(_DWORD *)(a1 + 16) = v49 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v49) = v14;
        v50 = *(_DWORD *)(a1 + 12);
        v51 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v48 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v74);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v48) = v14;
        v50 = *(_DWORD *)(a1 + 12) + 1;
        v51 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v50;
        *(_DWORD *)(a1 + 16) = v51;
      }
      v75 = 0;
      if (v50 > v51)
      {
        *(_DWORD *)(a1 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v51) = 0;
        v52 = *(_DWORD *)(a1 + 12);
        v53 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v50 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v75);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v50) = 0;
        v52 = *(_DWORD *)(a1 + 12) + 1;
        v53 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v52;
        *(_DWORD *)(a1 + 16) = v53;
      }
      v76 = v13;
      if (v52 > v53)
      {
        *(_DWORD *)(a1 + 16) = v53 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v53) = v13;
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v52 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v52 + 1), (unint64_t)&v76);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v52) = v13;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      v56 = v13 >> 8;
      v77 = BYTE1(v13);
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = BYTE1(v13);
      }
      else
      {
        v57 = v54;
        if (v54 == *(_DWORD *)(a1 + 8))
        {
          v63 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v77);
          v57 = *(unsigned int *)(a1 + 12);
          v58 = *(_QWORD *)a1;
          LOBYTE(v56) = *v63;
        }
        else
        {
          v58 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v58 + v57) = v56;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x14, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 20;
  v28 = 20;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 20;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v21;
  char v22;
  char v23;
  char v24;

  v8 = (a2 + 128) | a3;
  if (v8 <= 0xFF)
  {
    v9 = a3;
    v10 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x15, a3, a4, a5, a6, a7, a8);
    v22 = 21;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 21;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v22);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v21;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 21;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v23 = v10;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = v10;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v16 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v23);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v16) = v10;
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v24 = v9;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v9;
    }
    else
    {
      if (v18 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v24);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v18) = v9;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v8 < 0x100;
}

BOOL JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v8 = (a2 + 0x8000) | a3;
  if (!HIWORD(v8))
  {
    v9 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x15, a3, a4, a5, a6, a7, a8);
    v40 = 0x80;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 0x80;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v40);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v36;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 0x80;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = 21;
    v41 = 21;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 21;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v41);
        v19 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v18 = *v37;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v20 + v19) = v18;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v42 = a2;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = a2;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v42);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v21) = a2;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = a2 >> 8;
    v43 = BYTE1(a2);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = BYTE1(a2);
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        v38 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v43);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        LOBYTE(v25) = *v38;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    v44 = v9;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v9;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v44);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v9;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v32 = v9 >> 8;
    v45 = BYTE1(v9);
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = BYTE1(v9);
    }
    else
    {
      v33 = v30;
      if (v30 == *(_DWORD *)(a1 + 8))
      {
        v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v45);
        v33 = *(unsigned int *)(a1 + 12);
        v34 = *(_QWORD *)a1;
        LOBYTE(v32) = *v39;
      }
      else
      {
        v34 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v34 + v33) = v32;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v8 < 0x10000;
}

uint64_t JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x15, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 21;
  v24 = 21;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 21;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

_OWORD *WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,JSC::JSString *>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,JSC::JSString *,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<JSC::JSString *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = *(_DWORD *)(v25 + 16);
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(v25 + 32);
        v29 = 0;
        v30 = v28 >> 8;
        do
        {
          v31 = v30 & v27;
          v30 = ++v29 + v31;
        }
        while (*(_QWORD *)(v26 + 16 * v31));
        v32 = (_OWORD *)(v26 + 16 * v31);
        *v32 = *(_OWORD *)v24;
        if (v24 == (uint64_t *)a3)
          v23 = v32;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

BOOL JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x84, a3, a4, a5, a6, a7, a8);
    v23 = -124;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = -124;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v21;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = -124;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    v24 = v17;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = v17;
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v22;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

BOOL JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x84, a3, a4, a5, a6, a7, a8);
    v31 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v31);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v28;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -124;
    v32 = -124;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -124;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v29;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v33 = v8;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v33);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v8;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = v8 >> 8;
    v34 = BYTE1(v8);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = BYTE1(v8);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v30 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        LOBYTE(v24) = *v30;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x84, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -124;
  v23 = -124;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -124;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

uint64_t JSC::OpResolveScopeForHoistingFuncDeclInEval::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7C, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 124;
    v51 = 124;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 124;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpResolveScopeForHoistingFuncDeclInEval::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7C, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 124;
  v25 = 124;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 124;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

void WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl ***v12;
  JSC::TDZEnvironmentLink *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((WTF::AtomStringImpl *)v10 != a2)
  {
    v11 = *(_QWORD *)a1 + 16 * v10;
    v12 = (WTF::StringImpl ***)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
    do
    {
      v13 = (JSC::TDZEnvironmentLink *)v12[1];
      v12[1] = 0;
      if (v13)
        WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v13);
      v14 = *v12;
      if (*v12)
      {
        v15 = *((unsigned int *)v14 - 1);
        if ((_DWORD)v15)
        {
          v16 = *v12;
          do
          {
            v17 = *v16;
            if (*v16 != (WTF::StringImpl *)-1)
            {
              *v16 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                {
                  WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
                }
                else
                {
                  *(_DWORD *)v17 -= 2;
                }
              }
            }
            v16 += 2;
            --v15;
          }
          while (v15);
        }
        WTF::fastFree((unint64_t)(v14 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 2;
    }
    while (v12 != (WTF::StringImpl ***)v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::Vector<std::pair<JSC::RegisterID *,JSC::Identifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((WTF::AtomStringImpl *)v10 != a2)
  {
    v11 = 16 * v10 - 16 * (_QWORD)a2;
    v12 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * (_QWORD)a2 + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

uint64_t *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::add<JSC::SymbolTableEntry&>@<X0>(uint64_t *result@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  WTF::StringImpl **v31;
  int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t *i;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(result, 8u, 0), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(WTF::StringImpl **)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *((_DWORD *)v16 + 8);
  v18 = v15 & (v17 >> 8);
  v19 = (WTF::StringImpl **)(v13 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v20 == v16)
      {
        if ((v14 & 1) != 0)
          v55 = 0;
        else
          v55 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v55;
        goto LABEL_19;
      }
      if (v20 == (WTF::StringImpl *)-1)
        v31 = v19;
      v18 = (v18 + v32) & v15;
      v19 = (WTF::StringImpl **)(v13 + 16 * v18);
      v20 = *v19;
      ++v32;
    }
    while (*v19);
    if (v31)
    {
      *v31 = 0;
      v31[1] = (WTF::StringImpl *)1;
      --*(_DWORD *)(*v11 - 16);
      v16 = *(WTF::StringImpl **)a2;
      v19 = v31;
    }
  }
  *(_QWORD *)a2 = 0;
  v21 = *v19;
  *v19 = v16;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = v19 + 1;
  result = *a3;
  if ((*a3 & 1) != 0)
  {
    if ((*v22 & 1) == 0)
    {
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v19 + 1), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      result = *a3;
    }
  }
  else
  {
    result = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    v49 = (unsigned int *)(*a3)[1];
    *result = **a3;
    if (v49)
    {
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
    result[1] = (uint64_t)v49;
    v51 = *(_QWORD *)v22;
    if ((*(_QWORD *)v22 & 1) == 0 && v51)
    {
      v60 = result;
      v52 = *(_QWORD *)(v51 + 8);
      *(_QWORD *)(v51 + 8) = 0;
      if (v52)
      {
        do
        {
          v53 = __ldaxr((unsigned int *)v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, (unsigned int *)v52));
        if (!v54)
        {
          atomic_store(1u, (unsigned int *)v52);
          v56 = (uint64_t **)(v52 + 8);
          for (i = *(uint64_t **)(v52 + 8); i != (uint64_t *)v56; i = *v56)
          {
            v59 = *i;
            v58 = (uint64_t *)i[1];
            *v58 = *i;
            *(_QWORD *)(v59 + 8) = v58;
            *i = 0;
            i[1] = 0;
          }
          WTF::fastFree(v52, v42, v43, v44, v45, v46, v47, v48);
        }
      }
      WTF::fastFree(v51, v42, v43, v44, v45, v46, v47, v48);
      result = v60;
    }
  }
  *(_QWORD *)v22 = result;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_18;
    goto LABEL_35;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v41 = 8;
      goto LABEL_32;
    }
LABEL_35:
    v41 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_32:
    result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v11, v41, v19);
    v19 = (WTF::StringImpl **)result;
    v25 = *v11;
    if (*v11)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
LABEL_18:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_19:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

uint64_t JSC::OpOverridesHasInstance::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBA, a3, a4, a5, a6, a7, a8);
  v51 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v51);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v46;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -70;
  v52 = -70;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -70;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v52);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v47;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v53 = v8;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v8 >> 8;
  v54 = BYTE1(v8);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v54);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v48;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v55 = v10;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  v35 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v10);
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v36 = v33;
    if (v33 == *(_DWORD *)(a1 + 8))
    {
      v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v56);
      v36 = *(unsigned int *)(a1 + 12);
      v37 = *(_QWORD *)a1;
      LOBYTE(v35) = *v49;
    }
    else
    {
      v37 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v37 + v36) = v35;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v57 = v12;
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v38 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = v12 >> 8;
  v58 = BYTE1(v12);
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v50 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v58);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      LOBYTE(v42) = *v50;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpOverridesHasInstance::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBA, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -70;
  v25 = -70;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -70;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetFromArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if (!((a5 | a4) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x30, a3, a4, a5, a6, a7, a8);
      v59 = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v59);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v53;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = 48;
      v60 = 48;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 48;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v60);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v54;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v61 = v8;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v25 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v61);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      v29 = v8 >> 8;
      v62 = BYTE1(v8);
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(a1 + 8))
        {
          v55 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v62);
          v30 = *(unsigned int *)(a1 + 12);
          v31 = *(_QWORD *)a1;
          LOBYTE(v29) = *v55;
        }
        else
        {
          v31 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v31 + v30) = v29;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v63 = v10;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v63);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v36 = v10 >> 8;
      v64 = BYTE1(v10);
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v56 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v64);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          LOBYTE(v36) = *v56;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v65 = v15;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v15;
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v39 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v65);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v39) = v15;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      v43 = v15 >> 8;
      v66 = BYTE1(v15);
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = BYTE1(v15);
        v46 = *(_DWORD *)(a1 + 12);
        v47 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v44 = v41;
        if (v41 == *(_DWORD *)(a1 + 8))
        {
          v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v66);
          v44 = *(unsigned int *)(a1 + 12);
          v45 = *(_QWORD *)a1;
          LOBYTE(v43) = *v57;
        }
        else
        {
          v45 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v45 + v44) = v43;
        v46 = *(_DWORD *)(a1 + 12) + 1;
        v47 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v46;
        *(_DWORD *)(a1 + 16) = v47;
      }
      v67 = v14;
      if (v46 > v47)
      {
        *(_DWORD *)(a1 + 16) = v47 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
        v48 = *(_DWORD *)(a1 + 12);
        v49 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v46 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v67);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v46) = v14;
        v48 = *(_DWORD *)(a1 + 12) + 1;
        v49 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v48;
        *(_DWORD *)(a1 + 16) = v49;
      }
      v50 = v14 >> 8;
      v68 = BYTE1(v14);
      if (v48 > v49)
      {
        *(_DWORD *)(a1 + 16) = v49 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v49) = BYTE1(v14);
      }
      else
      {
        v51 = v48;
        if (v48 == *(_DWORD *)(a1 + 8))
        {
          v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v68);
          v51 = *(unsigned int *)(a1 + 12);
          v52 = *(_QWORD *)a1;
          LOBYTE(v50) = *v58;
        }
        else
        {
          v52 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v52 + v51) = v50;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetFromArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x30, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 48;
  v26 = 48;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 48;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutToArguments::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a4;
  result = JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  char v14;
  char v15;
  char v16;

  result = 0;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (a3 <= 0xFF && v11)
  {
    v12 = a4;
    v13 = (a4 - 1073741808) < 0x80;
    if ((int)a4 <= 0x3FFFFFFF)
      v13 = (a4 + 128) < 0x90;
    if (v13)
    {
      v14 = a3;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6B, a3, a4, a5, a6, a7, a8);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 107);
      v15 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v15 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      v16 = v12 + 16;
      if (v12 <= 0x3FFFFFFF)
        v16 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  result = 0;
  v11 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a3) && v11)
  {
    v12 = a4;
    v13 = (a4 - 1073741760) < 0x8000;
    if ((int)a4 <= 0x3FFFFFFF)
      v13 = (a4 + 0x8000) >> 6 < 0x201;
    if (v13)
    {
      v14 = a3;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6B, a3, a4, a5, a6, a7, a8);
      v50 = 0x80;
      v15 = *(unsigned int *)(a1 + 12);
      v16 = *(unsigned int *)(a1 + 16);
      if (v15 > v16)
      {
        *(_DWORD *)(a1 + 16) = v16 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
        v19 = *(_DWORD *)(a1 + 12);
        v20 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
        {
          v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
          v15 = *(unsigned int *)(a1 + 12);
          v17 = *(_QWORD *)a1;
          v18 = *v45;
        }
        else
        {
          v17 = *(_QWORD *)a1;
          v18 = 0x80;
        }
        *(_BYTE *)(v17 + v15) = v18;
        v19 = *(_DWORD *)(a1 + 12) + 1;
        v20 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v19;
        *(_DWORD *)(a1 + 16) = v20;
      }
      v21 = 107;
      v51 = 107;
      if (v19 > v20)
      {
        *(_DWORD *)(a1 + 16) = v20 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v20) = 107;
        v24 = *(_DWORD *)(a1 + 12);
        v25 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v22 = v19;
        if (v19 == *(_DWORD *)(a1 + 8))
        {
          v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
          v22 = *(unsigned int *)(a1 + 12);
          v23 = *(_QWORD *)a1;
          v21 = *v46;
        }
        else
        {
          v23 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v23 + v22) = v21;
        v24 = *(_DWORD *)(a1 + 12) + 1;
        v25 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v24;
        *(_DWORD *)(a1 + 16) = v25;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v52 = v8;
      if (v24 > v25)
      {
        *(_DWORD *)(a1 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v24 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      v28 = v8 >> 8;
      v53 = BYTE1(v8);
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
        v31 = *(_DWORD *)(a1 + 12);
        v32 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(a1 + 8))
        {
          v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
          v29 = *(unsigned int *)(a1 + 12);
          v30 = *(_QWORD *)a1;
          LOBYTE(v28) = *v47;
        }
        else
        {
          v30 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(a1 + 12) + 1;
        v32 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v31;
        *(_DWORD *)(a1 + 16) = v32;
      }
      v54 = v14;
      if (v31 > v32)
      {
        *(_DWORD *)(a1 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v32) = v14;
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v31 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v31) = v14;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      v35 = v14 >> 8;
      v55 = BYTE1(v14);
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v14);
        v38 = *(_DWORD *)(a1 + 12);
        v39 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v36 = v33;
        if (v33 == *(_DWORD *)(a1 + 8))
        {
          v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
          v36 = *(unsigned int *)(a1 + 12);
          v37 = *(_QWORD *)a1;
          LOBYTE(v35) = *v48;
        }
        else
        {
          v37 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v37 + v36) = v35;
        v38 = *(_DWORD *)(a1 + 12) + 1;
        v39 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v38;
        *(_DWORD *)(a1 + 16) = v39;
      }
      if (v12 > 0x3FFFFFFF)
        v12 += 64;
      v56 = v12;
      if (v38 > v39)
      {
        *(_DWORD *)(a1 + 16) = v39 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
        v40 = *(_DWORD *)(a1 + 12);
        v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v38 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
        v40 = *(_DWORD *)(a1 + 12) + 1;
        v41 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v40;
        *(_DWORD *)(a1 + 16) = v41;
      }
      v42 = v12 >> 8;
      v57 = BYTE1(v12);
      if (v40 > v41)
      {
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
      }
      else
      {
        v43 = v40;
        if (v40 == *(_DWORD *)(a1 + 8))
        {
          v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
          v43 = *(unsigned int *)(a1 + 12);
          v44 = *(_QWORD *)a1;
          LOBYTE(v42) = *v49;
        }
        else
        {
          v44 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v44 + v43) = v42;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JSC::OpPutToArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6B, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 107;
  v25 = 107;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 107;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpInstanceof::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBB, a3, a4, a5, a6, a7, a8);
  v51 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v51);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v46;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = -69;
  v52 = -69;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -69;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v52);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v47;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v53 = v8;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v8 >> 8;
  v54 = BYTE1(v8);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v54);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v48;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v55 = v10;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v31 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v10;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  v35 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v10);
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v36 = v33;
    if (v33 == *(_DWORD *)(a1 + 8))
    {
      v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v56);
      v36 = *(unsigned int *)(a1 + 12);
      v37 = *(_QWORD *)a1;
      LOBYTE(v35) = *v49;
    }
    else
    {
      v37 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v37 + v36) = v35;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v57 = v12;
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v38 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v12;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  v42 = v12 >> 8;
  v58 = BYTE1(v12);
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v12);
  }
  else
  {
    v43 = v40;
    if (v40 == *(_DWORD *)(a1 + 8))
    {
      v50 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v58);
      v43 = *(unsigned int *)(a1 + 12);
      v44 = *(_QWORD *)a1;
      LOBYTE(v42) = *v50;
    }
    else
    {
      v44 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v44 + v43) = v42;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpInstanceof::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBB, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = -69;
  v25 = -69;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -69;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpInstanceofCustom::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v15)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBC, a3, a4, a5, a6, a7, a8);
  v61 = 0x80;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v61);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v55;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 0x80;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = -68;
  v62 = -68;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = -68;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v62);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v56;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v63 = v8;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v26 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v30 = v8 >> 8;
  v64 = BYTE1(v8);
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v31 = v28;
    if (v28 == *(_DWORD *)(a1 + 8))
    {
      v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v64);
      v31 = *(unsigned int *)(a1 + 12);
      v32 = *(_QWORD *)a1;
      LOBYTE(v30) = *v57;
    }
    else
    {
      v32 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v32 + v31) = v30;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v65 = v10;
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
    v35 = *(_DWORD *)(a1 + 12);
    v36 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v33 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v65);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v35 = *(_DWORD *)(a1 + 12) + 1;
    v36 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v35;
    *(_DWORD *)(a1 + 16) = v36;
  }
  v37 = v10 >> 8;
  v66 = BYTE1(v10);
  if (v35 > v36)
  {
    *(_DWORD *)(a1 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v38 = v35;
    if (v35 == *(_DWORD *)(a1 + 8))
    {
      v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v66);
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(_QWORD *)a1;
      LOBYTE(v37) = *v58;
    }
    else
    {
      v39 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v39 + v38) = v37;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v67 = v12;
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = v12;
    v42 = *(_DWORD *)(a1 + 12);
    v43 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v40 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v67);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v12;
    v42 = *(_DWORD *)(a1 + 12) + 1;
    v43 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v42;
    *(_DWORD *)(a1 + 16) = v43;
  }
  v44 = v12 >> 8;
  v68 = BYTE1(v12);
  if (v42 > v43)
  {
    *(_DWORD *)(a1 + 16) = v43 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v12);
    v47 = *(_DWORD *)(a1 + 12);
    v48 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v45 = v42;
    if (v42 == *(_DWORD *)(a1 + 8))
    {
      v59 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v68);
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(_QWORD *)a1;
      LOBYTE(v44) = *v59;
    }
    else
    {
      v46 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v46 + v45) = v44;
    v47 = *(_DWORD *)(a1 + 12) + 1;
    v48 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v47;
    *(_DWORD *)(a1 + 16) = v48;
  }
  if (v14 > 0x3FFFFFFF)
    v14 += 64;
  v69 = v14;
  if (v47 > v48)
  {
    *(_DWORD *)(a1 + 16) = v48 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v48) = v14;
    v49 = *(_DWORD *)(a1 + 12);
    v50 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v47 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v69);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
    v49 = *(_DWORD *)(a1 + 12) + 1;
    v50 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v49;
    *(_DWORD *)(a1 + 16) = v50;
  }
  v51 = v14 >> 8;
  v70 = BYTE1(v14);
  if (v49 > v50)
  {
    *(_DWORD *)(a1 + 16) = v50 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v14);
  }
  else
  {
    v52 = v49;
    if (v49 == *(_DWORD *)(a1 + 8))
    {
      v60 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v70);
      v52 = *(unsigned int *)(a1 + 12);
      v53 = *(_QWORD *)a1;
      LOBYTE(v51) = *v60;
    }
    else
    {
      v53 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v53 + v52) = v51;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpInstanceofCustom::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBC, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -68;
  v26 = -68;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -68;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  char v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a5;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 128) < 0x90;
  if (a5 <= 0xFF && v16)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x25, a3, a4, a5, a6, a7, a8);
    v42 = 37;
    v17 = *(unsigned int *)(a1 + 12);
    v18 = *(unsigned int *)(a1 + 16);
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = 37;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
      {
        v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
        v17 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v20 = *v38;
      }
      else
      {
        v19 = *(_QWORD *)a1;
        v20 = 37;
      }
      *(_BYTE *)(v19 + v17) = v20;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v23 = a2;
    v43 = v23;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v43);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *v39;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v28 = v10;
    v44 = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v44);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *v40;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v13 + 16;
    if (v13 <= 0x3FFFFFFF)
      v33 = v13;
    v45 = v33;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
      v36 = *(_DWORD *)(a1 + 12);
      v37 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v45);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        v33 = *v41;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      v36 = *(_DWORD *)(a1 + 12) + 1;
      v37 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v36;
      *(_DWORD *)(a1 + 16) = v37;
    }
    v46 = v12;
    if (v36 > v37)
    {
      *(_DWORD *)(a1 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v37) = v12;
    }
    else
    {
      if (v36 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v46);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v36) = v12;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  unsigned int v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a5;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a5) && v16)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x25, a3, a4, a5, a6, a7, a8);
    v60 = 0x80;
    v17 = *(unsigned int *)(a1 + 12);
    v18 = *(unsigned int *)(a1 + 16);
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
      {
        v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v60);
        v17 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v20 = *v54;
      }
      else
      {
        v19 = *(_QWORD *)a1;
        v20 = 0x80;
      }
      *(_BYTE *)(v19 + v17) = v20;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v23 = 37;
    v61 = 37;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = 37;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v24 = v21;
      if (v21 == *(_DWORD *)(a1 + 8))
      {
        v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v61);
        v24 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v23 = *v55;
      }
      else
      {
        v25 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v25 + v24) = v23;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v62 = v8;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v26 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v62);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    v30 = v8 >> 8;
    v63 = BYTE1(v8);
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v31 = v28;
      if (v28 == *(_DWORD *)(a1 + 8))
      {
        v56 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v63);
        v31 = *(unsigned int *)(a1 + 12);
        v32 = *(_QWORD *)a1;
        LOBYTE(v30) = *v56;
      }
      else
      {
        v32 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v32 + v31) = v30;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    if (v10 > 0x3FFFFFFF)
      v10 += 64;
    v64 = v10;
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
      v35 = *(_DWORD *)(a1 + 12);
      v36 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v33 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v64);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
      v35 = *(_DWORD *)(a1 + 12) + 1;
      v36 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v35;
      *(_DWORD *)(a1 + 16) = v36;
    }
    v37 = v10 >> 8;
    v65 = BYTE1(v10);
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v38 = v35;
      if (v35 == *(_DWORD *)(a1 + 8))
      {
        v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v65);
        v38 = *(unsigned int *)(a1 + 12);
        v39 = *(_QWORD *)a1;
        LOBYTE(v37) = *v57;
      }
      else
      {
        v39 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v39 + v38) = v37;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    if (v13 > 0x3FFFFFFF)
      v13 += 64;
    v66 = v13;
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v13;
      v42 = *(_DWORD *)(a1 + 12);
      v43 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v40 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v66);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v13;
      v42 = *(_DWORD *)(a1 + 12) + 1;
      v43 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v42;
      *(_DWORD *)(a1 + 16) = v43;
    }
    v44 = v13 >> 8;
    v67 = BYTE1(v13);
    if (v42 > v43)
    {
      *(_DWORD *)(a1 + 16) = v43 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v13);
      v47 = *(_DWORD *)(a1 + 12);
      v48 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v45 = v42;
      if (v42 == *(_DWORD *)(a1 + 8))
      {
        v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v67);
        v45 = *(unsigned int *)(a1 + 12);
        v46 = *(_QWORD *)a1;
        LOBYTE(v44) = *v58;
      }
      else
      {
        v46 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v46 + v45) = v44;
      v47 = *(_DWORD *)(a1 + 12) + 1;
      v48 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v47;
      *(_DWORD *)(a1 + 16) = v48;
    }
    v68 = v12;
    if (v47 > v48)
    {
      *(_DWORD *)(a1 + 16) = v48 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v48) = v12;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v47 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v68);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v47) = v12;
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v51 = v12 >> 8;
    v69 = BYTE1(v12);
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v12);
    }
    else
    {
      v52 = v49;
      if (v49 == *(_DWORD *)(a1 + 8))
      {
        v59 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v69);
        v52 = *(unsigned int *)(a1 + 12);
        v53 = *(_QWORD *)a1;
        LOBYTE(v51) = *v59;
      }
      else
      {
        v53 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v53 + v52) = v51;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpInByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x25, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 37;
  v26 = 37;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 37;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpInById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x35, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 53;
  v25 = 53;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 53;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTryGetById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if (!((a5 | a4 | a6) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2D, a3, a4, a5, a6, a7, a8);
      v68 = 0x80;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v68);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v61;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = 45;
      v69 = 45;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 45;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v69);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v62;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v70 = v8;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v70);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v30 = v8 >> 8;
      v71 = BYTE1(v8);
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v31 = v28;
        if (v28 == *(_DWORD *)(a1 + 8))
        {
          v63 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v71);
          v31 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          LOBYTE(v30) = *v63;
        }
        else
        {
          v32 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v32 + v31) = v30;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v72 = v10;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v72);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v35 = *(_DWORD *)(a1 + 12) + 1;
        v36 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v35;
        *(_DWORD *)(a1 + 16) = v36;
      }
      v37 = v10 >> 8;
      v73 = BYTE1(v10);
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
        v40 = *(_DWORD *)(a1 + 12);
        v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v38 = v35;
        if (v35 == *(_DWORD *)(a1 + 8))
        {
          v64 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v73);
          v38 = *(unsigned int *)(a1 + 12);
          v39 = *(_QWORD *)a1;
          LOBYTE(v37) = *v64;
        }
        else
        {
          v39 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v39 + v38) = v37;
        v40 = *(_DWORD *)(a1 + 12) + 1;
        v41 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v40;
        *(_DWORD *)(a1 + 16) = v41;
      }
      v74 = v16;
      if (v40 > v41)
      {
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = v16;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v40 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v74);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v40) = v16;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      v44 = v16 >> 8;
      v75 = BYTE1(v16);
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v16);
        v47 = *(_DWORD *)(a1 + 12);
        v48 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v45 = v42;
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          v65 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v75);
          v45 = *(unsigned int *)(a1 + 12);
          v46 = *(_QWORD *)a1;
          LOBYTE(v44) = *v65;
        }
        else
        {
          v46 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v46 + v45) = v44;
        v47 = *(_DWORD *)(a1 + 12) + 1;
        v48 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v47;
        *(_DWORD *)(a1 + 16) = v48;
      }
      v76 = v15;
      if (v47 > v48)
      {
        *(_DWORD *)(a1 + 16) = v48 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v48) = v15;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v47 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v76);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v47) = v15;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = v15 >> 8;
      v77 = BYTE1(v15);
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v15);
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          v66 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v77);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          LOBYTE(v51) = *v66;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      v78 = v14;
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = v14;
        v56 = *(_DWORD *)(a1 + 12);
        v57 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v54 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v78);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v54) = v14;
        v56 = *(_DWORD *)(a1 + 12) + 1;
        v57 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v56;
        *(_DWORD *)(a1 + 16) = v57;
      }
      v58 = v14 >> 8;
      v79 = BYTE1(v14);
      if (v56 > v57)
      {
        *(_DWORD *)(a1 + 16) = v57 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v57) = BYTE1(v14);
      }
      else
      {
        v59 = v56;
        if (v56 == *(_DWORD *)(a1 + 8))
        {
          v67 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v79);
          v59 = *(unsigned int *)(a1 + 12);
          v60 = *(_QWORD *)a1;
          LOBYTE(v58) = *v67;
        }
        else
        {
          v60 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v60 + v59) = v58;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpTryGetById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2D, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 45;
  v27 = 45;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 45;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if ((a5 | a4) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x13, a3, a4, a5, a6, a7, a8);
      v37 = 19;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 19;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v37);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v34;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 19;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v22 = a2;
      v38 = v22;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v22;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v38);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v35;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      v27 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v27 = v10;
      v39 = v27;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
        v30 = *(_DWORD *)(a1 + 12);
        v31 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v28 = v25;
        if (v25 == *(_DWORD *)(a1 + 8))
        {
          v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v39);
          v28 = *(unsigned int *)(a1 + 12);
          v29 = *(_QWORD *)a1;
          v27 = *v36;
        }
        else
        {
          v29 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v29 + v28) = v27;
        v30 = *(_DWORD *)(a1 + 12) + 1;
        v31 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v30;
        *(_DWORD *)(a1 + 16) = v31;
      }
      v40 = v15;
      if (v30 > v31)
      {
        *(_DWORD *)(a1 + 16) = v31 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v15;
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v30 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v40);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v30) = v15;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      v41 = v14;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v14;
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v41);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = v14;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if (!((a5 | a4) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x13, a3, a4, a5, a6, a7, a8);
      v59 = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v53 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v59);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v53;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = 19;
      v60 = 19;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 19;
        v25 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v54 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v60);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v54;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        v25 = *(_DWORD *)(a1 + 12) + 1;
        v26 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v25;
        *(_DWORD *)(a1 + 16) = v26;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v61 = v8;
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v25 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v61);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      v29 = v8 >> 8;
      v62 = BYTE1(v8);
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = BYTE1(v8);
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(a1 + 8))
        {
          v55 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v62);
          v30 = *(unsigned int *)(a1 + 12);
          v31 = *(_QWORD *)a1;
          LOBYTE(v29) = *v55;
        }
        else
        {
          v31 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v31 + v30) = v29;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v63 = v10;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v32 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v63);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v32) = v10;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v36 = v10 >> 8;
      v64 = BYTE1(v10);
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = BYTE1(v10);
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v56 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v64);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          LOBYTE(v36) = *v56;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v65 = v15;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v15;
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v39 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v65);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v39) = v15;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      v43 = v15 >> 8;
      v66 = BYTE1(v15);
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = BYTE1(v15);
        v46 = *(_DWORD *)(a1 + 12);
        v47 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v44 = v41;
        if (v41 == *(_DWORD *)(a1 + 8))
        {
          v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v66);
          v44 = *(unsigned int *)(a1 + 12);
          v45 = *(_QWORD *)a1;
          LOBYTE(v43) = *v57;
        }
        else
        {
          v45 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v45 + v44) = v43;
        v46 = *(_DWORD *)(a1 + 12) + 1;
        v47 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v46;
        *(_DWORD *)(a1 + 16) = v47;
      }
      v67 = v14;
      if (v46 > v47)
      {
        *(_DWORD *)(a1 + 16) = v47 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
        v48 = *(_DWORD *)(a1 + 12);
        v49 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v46 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v67);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v46) = v14;
        v48 = *(_DWORD *)(a1 + 12) + 1;
        v49 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v48;
        *(_DWORD *)(a1 + 16) = v49;
      }
      v50 = v14 >> 8;
      v68 = BYTE1(v14);
      if (v48 > v49)
      {
        *(_DWORD *)(a1 + 16) = v49 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v49) = BYTE1(v14);
      }
      else
      {
        v51 = v48;
        if (v48 == *(_DWORD *)(a1 + 8))
        {
          v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v68);
          v51 = *(unsigned int *)(a1 + 12);
          v52 = *(_QWORD *)a1;
          LOBYTE(v50) = *v58;
        }
        else
        {
          v52 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v52 + v51) = v50;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetLength::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x13, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 19;
  v26 = 19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 19;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x12, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 18;
  v27 = 18;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 18;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetByIdWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  result = 0;
  v15 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 0x8000) >> 6 < 0x201;
  if (v15)
  {
    v16 = a6;
    v17 = a5;
    if (!((a6 | a5) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x33, a3, a4, a5, a6, a7, a8);
      v69 = 0x80;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(unsigned int *)(a1 + 16);
      if (v18 > v19)
      {
        *(_DWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
        {
          v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v69);
          v18 = *(unsigned int *)(a1 + 12);
          v20 = *(_QWORD *)a1;
          v21 = *v62;
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v21 = 0x80;
        }
        *(_BYTE *)(v20 + v18) = v21;
        v22 = *(_DWORD *)(a1 + 12) + 1;
        v23 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v22;
        *(_DWORD *)(a1 + 16) = v23;
      }
      v24 = 51;
      v70 = 51;
      if (v22 > v23)
      {
        *(_DWORD *)(a1 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v23) = 51;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(a1 + 8))
        {
          v63 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v70);
          v25 = *(unsigned int *)(a1 + 12);
          v26 = *(_QWORD *)a1;
          v24 = *v63;
        }
        else
        {
          v26 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v26 + v25) = v24;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v71 = v8;
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v8;
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v27 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v71);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
        v29 = *(_DWORD *)(a1 + 12) + 1;
        v30 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v29;
        *(_DWORD *)(a1 + 16) = v30;
      }
      v31 = v8 >> 8;
      v72 = BYTE1(v8);
      if (v29 > v30)
      {
        *(_DWORD *)(a1 + 16) = v30 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v30) = BYTE1(v8);
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v32 = v29;
        if (v29 == *(_DWORD *)(a1 + 8))
        {
          v64 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v72);
          v32 = *(unsigned int *)(a1 + 12);
          v33 = *(_QWORD *)a1;
          LOBYTE(v31) = *v64;
        }
        else
        {
          v33 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v33 + v32) = v31;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v73 = v10;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v10;
        v36 = *(_DWORD *)(a1 + 12);
        v37 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v34 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v73);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
        v36 = *(_DWORD *)(a1 + 12) + 1;
        v37 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v36;
        *(_DWORD *)(a1 + 16) = v37;
      }
      v38 = v10 >> 8;
      v74 = BYTE1(v10);
      if (v36 > v37)
      {
        *(_DWORD *)(a1 + 16) = v37 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v37) = BYTE1(v10);
        v41 = *(_DWORD *)(a1 + 12);
        v42 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v39 = v36;
        if (v36 == *(_DWORD *)(a1 + 8))
        {
          v65 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v74);
          v39 = *(unsigned int *)(a1 + 12);
          v40 = *(_QWORD *)a1;
          LOBYTE(v38) = *v65;
        }
        else
        {
          v40 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v40 + v39) = v38;
        v41 = *(_DWORD *)(a1 + 12) + 1;
        v42 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v41;
        *(_DWORD *)(a1 + 16) = v42;
      }
      if (v12 > 0x3FFFFFFF)
        v12 += 64;
      v75 = v12;
      if (v41 > v42)
      {
        *(_DWORD *)(a1 + 16) = v42 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v12;
        v43 = *(_DWORD *)(a1 + 12);
        v44 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v41 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v75);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v41) = v12;
        v43 = *(_DWORD *)(a1 + 12) + 1;
        v44 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v43;
        *(_DWORD *)(a1 + 16) = v44;
      }
      v45 = v12 >> 8;
      v76 = BYTE1(v12);
      if (v43 > v44)
      {
        *(_DWORD *)(a1 + 16) = v44 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v44) = BYTE1(v12);
        v48 = *(_DWORD *)(a1 + 12);
        v49 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v46 = v43;
        if (v43 == *(_DWORD *)(a1 + 8))
        {
          v66 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v76);
          v46 = *(unsigned int *)(a1 + 12);
          v47 = *(_QWORD *)a1;
          LOBYTE(v45) = *v66;
        }
        else
        {
          v47 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v47 + v46) = v45;
        v48 = *(_DWORD *)(a1 + 12) + 1;
        v49 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v48;
        *(_DWORD *)(a1 + 16) = v49;
      }
      v77 = v17;
      if (v48 > v49)
      {
        *(_DWORD *)(a1 + 16) = v49 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v49) = v17;
        v50 = *(_DWORD *)(a1 + 12);
        v51 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v48 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v77);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v48) = v17;
        v50 = *(_DWORD *)(a1 + 12) + 1;
        v51 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v50;
        *(_DWORD *)(a1 + 16) = v51;
      }
      v52 = v17 >> 8;
      v78 = BYTE1(v17);
      if (v50 > v51)
      {
        *(_DWORD *)(a1 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v51) = BYTE1(v17);
        v55 = *(_DWORD *)(a1 + 12);
        v56 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v53 = v50;
        if (v50 == *(_DWORD *)(a1 + 8))
        {
          v67 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v78);
          v53 = *(unsigned int *)(a1 + 12);
          v54 = *(_QWORD *)a1;
          LOBYTE(v52) = *v67;
        }
        else
        {
          v54 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v54 + v53) = v52;
        v55 = *(_DWORD *)(a1 + 12) + 1;
        v56 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v55;
        *(_DWORD *)(a1 + 16) = v56;
      }
      v79 = v16;
      if (v55 > v56)
      {
        *(_DWORD *)(a1 + 16) = v56 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v56) = v16;
        v57 = *(_DWORD *)(a1 + 12);
        v58 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v55 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v55 + 1), (unint64_t)&v79);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v55) = v16;
        v57 = *(_DWORD *)(a1 + 12) + 1;
        v58 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v57;
        *(_DWORD *)(a1 + 16) = v58;
      }
      v59 = v16 >> 8;
      v80 = BYTE1(v16);
      if (v57 > v58)
      {
        *(_DWORD *)(a1 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v58) = BYTE1(v16);
      }
      else
      {
        v60 = v57;
        if (v57 == *(_DWORD *)(a1 + 8))
        {
          v68 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v57 + 1), (unint64_t)&v80);
          v60 = *(unsigned int *)(a1 + 12);
          v61 = *(_QWORD *)a1;
          LOBYTE(v59) = *v68;
        }
        else
        {
          v61 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v61 + v60) = v59;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByIdWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x33, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 51;
  v27 = 51;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 51;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetByIdDirect::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v11 + 4) |= 1u;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(unsigned int *)(v12 + 176);
  *(_DWORD *)(v12 + 176) = v13 + 1;
  v15 = a3;
  result = JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, v13, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v15, a4, a5, v13, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v15, a4, a5, v13, v19, v20);
  }
  return result;
}

uint64_t JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (v13)
  {
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if ((a5 | a4 | a6) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2C, a3, a4, a5, a6, a7, a8);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 44);
      v17 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v17 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
      v18 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v18 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if (!((a5 | a4 | a6) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2C, a3, a4, a5, a6, a7, a8);
      v68 = 0x80;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v61 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v68);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v61;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = 44;
      v69 = 44;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 44;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v62 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v69);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v62;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v70 = v8;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v70);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v30 = v8 >> 8;
      v71 = BYTE1(v8);
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v31 = v28;
        if (v28 == *(_DWORD *)(a1 + 8))
        {
          v63 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v71);
          v31 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          LOBYTE(v30) = *v63;
        }
        else
        {
          v32 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v32 + v31) = v30;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v72 = v10;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v72);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v35 = *(_DWORD *)(a1 + 12) + 1;
        v36 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v35;
        *(_DWORD *)(a1 + 16) = v36;
      }
      v37 = v10 >> 8;
      v73 = BYTE1(v10);
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
        v40 = *(_DWORD *)(a1 + 12);
        v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v38 = v35;
        if (v35 == *(_DWORD *)(a1 + 8))
        {
          v64 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v73);
          v38 = *(unsigned int *)(a1 + 12);
          v39 = *(_QWORD *)a1;
          LOBYTE(v37) = *v64;
        }
        else
        {
          v39 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v39 + v38) = v37;
        v40 = *(_DWORD *)(a1 + 12) + 1;
        v41 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v40;
        *(_DWORD *)(a1 + 16) = v41;
      }
      v74 = v16;
      if (v40 > v41)
      {
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = v16;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v40 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v74);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v40) = v16;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      v44 = v16 >> 8;
      v75 = BYTE1(v16);
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v16);
        v47 = *(_DWORD *)(a1 + 12);
        v48 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v45 = v42;
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          v65 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v75);
          v45 = *(unsigned int *)(a1 + 12);
          v46 = *(_QWORD *)a1;
          LOBYTE(v44) = *v65;
        }
        else
        {
          v46 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v46 + v45) = v44;
        v47 = *(_DWORD *)(a1 + 12) + 1;
        v48 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v47;
        *(_DWORD *)(a1 + 16) = v48;
      }
      v76 = v15;
      if (v47 > v48)
      {
        *(_DWORD *)(a1 + 16) = v48 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v48) = v15;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v47 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v76);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v47) = v15;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v51 = v15 >> 8;
      v77 = BYTE1(v15);
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v15);
        v54 = *(_DWORD *)(a1 + 12);
        v55 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v52 = v49;
        if (v49 == *(_DWORD *)(a1 + 8))
        {
          v66 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v77);
          v52 = *(unsigned int *)(a1 + 12);
          v53 = *(_QWORD *)a1;
          LOBYTE(v51) = *v66;
        }
        else
        {
          v53 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v53 + v52) = v51;
        v54 = *(_DWORD *)(a1 + 12) + 1;
        v55 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v54;
        *(_DWORD *)(a1 + 16) = v55;
      }
      v78 = v14;
      if (v54 > v55)
      {
        *(_DWORD *)(a1 + 16) = v55 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v55) = v14;
        v56 = *(_DWORD *)(a1 + 12);
        v57 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v54 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v78);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v54) = v14;
        v56 = *(_DWORD *)(a1 + 12) + 1;
        v57 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v56;
        *(_DWORD *)(a1 + 16) = v57;
      }
      v58 = v14 >> 8;
      v79 = BYTE1(v14);
      if (v56 > v57)
      {
        *(_DWORD *)(a1 + 16) = v57 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v57) = BYTE1(v14);
      }
      else
      {
        v59 = v56;
        if (v56 == *(_DWORD *)(a1 + 8))
        {
          v67 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v79);
          v59 = *(unsigned int *)(a1 + 12);
          v60 = *(_QWORD *)a1;
          LOBYTE(v58) = *v67;
        }
        else
        {
          v60 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v60 + v59) = v58;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByIdDirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2C, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 44;
  v27 = 44;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 44;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL4 v43;
  unsigned int v44;
  _BOOL4 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  _BYTE *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  char v109;
  unsigned int v110;
  unsigned int v111;
  char v112;
  uint64_t v113;
  _BYTE *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  _BYTE *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  _BYTE *v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  _BYTE *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  WTF **v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  WTF *v146;
  uint64_t v147;
  unint64_t v148;
  WTF *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  size_t v158;
  WTF *v159;
  unsigned int v160;
  char v161;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = (int)a2;
  v12 = result;
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 24) + 8) + 72);
  *(_BYTE *)(v13 + 4) |= 1u;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v14 + 28) = v15 + 1;
  v16 = ((_DWORD)a2 - 1073741808) < 0x80;
  if ((int)a2 <= 0x3FFFFFFF)
    v16 = ((_DWORD)a2 + 128) < 0x90;
  if (a3 > 0xFF || !v16)
    goto LABEL_36;
  v17 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v17 = (a4 + 128) < 0x90;
  if (v17 && v15 <= 0xFF)
  {
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(result, (void *)7, a3, a4, a5, a6, a7, a8);
    v161 = 7;
    v18 = *(unsigned int *)(v12 + 12);
    v19 = *(unsigned int *)(v12 + 16);
    if (v18 > v19)
    {
      *(_DWORD *)(v12 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)v12 + v19) = 7;
      v22 = *(_DWORD *)(v12 + 12);
      v23 = *(_DWORD *)(v12 + 16);
    }
    else
    {
      if ((_DWORD)v18 == *(_DWORD *)(v12 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v18 + 1), (unint64_t)&v161);
        v18 = *(unsigned int *)(v12 + 12);
        v20 = *(_BYTE **)v12;
        v21 = *(_BYTE *)result;
      }
      else
      {
        v20 = *(_BYTE **)v12;
        v21 = 7;
      }
      v20[v18] = v21;
      v22 = *(_DWORD *)(v12 + 12) + 1;
      v23 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 12) = v22;
      *(_DWORD *)(v12 + 16) = v23;
    }
    v24 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v24 = v11;
    v161 = v24;
    if (v22 > v23)
    {
      *(_DWORD *)(v12 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)v12 + v23) = v24;
      v27 = *(_DWORD *)(v12 + 12);
      v28 = *(_DWORD *)(v12 + 16);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(v12 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v22 + 1), (unint64_t)&v161);
        v25 = *(unsigned int *)(v12 + 12);
        v26 = *(_BYTE **)v12;
        v24 = *(_BYTE *)result;
      }
      else
      {
        v26 = *(_BYTE **)v12;
      }
      v26[v25] = v24;
      v27 = *(_DWORD *)(v12 + 12) + 1;
      v28 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 12) = v27;
      *(_DWORD *)(v12 + 16) = v28;
    }
    v161 = v10;
    if (v27 > v28)
    {
      *(_DWORD *)(v12 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)v12 + v28) = v10;
      v29 = *(_DWORD *)(v12 + 12);
      v30 = *(_DWORD *)(v12 + 16);
    }
    else
    {
      if (v27 == *(_DWORD *)(v12 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v27 + 1), (unint64_t)&v161);
        *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v12 + v27) = v10;
      }
      v29 = *(_DWORD *)(v12 + 12) + 1;
      v30 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 12) = v29;
      *(_DWORD *)(v12 + 16) = v30;
    }
    v31 = v9 + 16;
    if (v9 <= 0x3FFFFFFF)
      v31 = v9;
    v161 = v31;
    if (v29 > v30)
    {
      *(_DWORD *)(v12 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)v12 + v30) = v31;
      v34 = *(_DWORD *)(v12 + 12);
      v35 = *(_DWORD *)(v12 + 16);
    }
    else
    {
      v32 = v29;
      if (v29 == *(_DWORD *)(v12 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v29 + 1), (unint64_t)&v161);
        v32 = *(unsigned int *)(v12 + 12);
        v33 = *(_BYTE **)v12;
        v31 = *(_BYTE *)result;
      }
      else
      {
        v33 = *(_BYTE **)v12;
      }
      v33[v32] = v31;
      v34 = *(_DWORD *)(v12 + 12) + 1;
      v35 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 12) = v34;
      *(_DWORD *)(v12 + 16) = v35;
    }
    v36 = (v8 != 0) | (2 * ((v8 & 0xFF00) == 0));
    v161 = v36;
    if (v34 > v35)
    {
      *(_DWORD *)(v12 + 16) = v35 + 1;
      *(_BYTE *)(*(_QWORD *)v12 + v35) = v36;
      v39 = *(_DWORD *)(v12 + 12);
      v40 = *(_DWORD *)(v12 + 16);
    }
    else
    {
      v37 = v34;
      if (v34 == *(_DWORD *)(v12 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v34 + 1), (unint64_t)&v161);
        v37 = *(unsigned int *)(v12 + 12);
        v38 = *(_BYTE **)v12;
        v36 = *(_BYTE *)result;
      }
      else
      {
        v38 = *(_BYTE **)v12;
      }
      v38[v37] = v36;
      v39 = *(_DWORD *)(v12 + 12) + 1;
      v40 = *(_DWORD *)(v12 + 16) + 1;
      *(_DWORD *)(v12 + 12) = v39;
      *(_DWORD *)(v12 + 16) = v40;
    }
    v161 = v15;
    if (v39 <= v40)
    {
      v41 = v39;
      if (v39 != *(_DWORD *)(v12 + 8))
      {
        *(_BYTE *)(*(_QWORD *)v12 + v39) = v15;
LABEL_135:
        *(int32x2_t *)(v12 + 12) = vadd_s32(*(int32x2_t *)(v12 + 12), (int32x2_t)0x100000001);
        return result;
      }
      goto LABEL_185;
    }
    *(_DWORD *)(v12 + 16) = v40 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v40) = v15;
  }
  else
  {
LABEL_36:
    v42 = WORD1(a3);
    if ((int)a2 <= 0x3FFFFFFF)
      v43 = ((_DWORD)a2 + 0x8000) >> 6 < 0x201;
    else
      v43 = ((_DWORD)a2 - 1073741760) < 0x8000;
    v44 = a3 >> 8;
    if (v42 || !v43)
      goto LABEL_45;
    v45 = (a4 - 1073741760) < 0x8000;
    if ((int)a4 <= 0x3FFFFFFF)
      v45 = (a4 + 0x8000) >> 6 < 0x201;
    if (v45 && !HIWORD(v15))
    {
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(result, (void *)7, a3, a4, a5, a6, a7, a8);
      v161 = 0x80;
      v106 = *(unsigned int *)(v12 + 12);
      v107 = *(unsigned int *)(v12 + 16);
      if (v106 > v107)
      {
        *(_DWORD *)(v12 + 16) = v107 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v107) = 0x80;
        v110 = *(_DWORD *)(v12 + 12);
        v111 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v106 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v106 + 1), (unint64_t)&v161);
          v106 = *(unsigned int *)(v12 + 12);
          v108 = *(_BYTE **)v12;
          v109 = *(_BYTE *)result;
        }
        else
        {
          v108 = *(_BYTE **)v12;
          v109 = 0x80;
        }
        v108[v106] = v109;
        v110 = *(_DWORD *)(v12 + 12) + 1;
        v111 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v110;
        *(_DWORD *)(v12 + 16) = v111;
      }
      v112 = 7;
      v161 = 7;
      if (v110 > v111)
      {
        *(_DWORD *)(v12 + 16) = v111 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v111) = 7;
        v115 = *(_DWORD *)(v12 + 12);
        v116 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v113 = v110;
        if (v110 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v110 + 1), (unint64_t)&v161);
          v113 = *(unsigned int *)(v12 + 12);
          v114 = *(_BYTE **)v12;
          v112 = *(_BYTE *)result;
        }
        else
        {
          v114 = *(_BYTE **)v12;
        }
        v114[v113] = v112;
        v115 = *(_DWORD *)(v12 + 12) + 1;
        v116 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v115;
        *(_DWORD *)(v12 + 16) = v116;
      }
      if (v11 > 0x3FFFFFFF)
        v11 += 64;
      v161 = v11;
      if (v115 > v116)
      {
        *(_DWORD *)(v12 + 16) = v116 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v116) = v11;
        v117 = *(_DWORD *)(v12 + 12);
        v118 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v115 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v115 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v115) = v11;
        }
        v117 = *(_DWORD *)(v12 + 12) + 1;
        v118 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v117;
        *(_DWORD *)(v12 + 16) = v118;
      }
      v119 = v11 >> 8;
      v161 = BYTE1(v11);
      if (v117 > v118)
      {
        *(_DWORD *)(v12 + 16) = v118 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v118) = BYTE1(v11);
        v122 = *(_DWORD *)(v12 + 12);
        v123 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v120 = v117;
        if (v117 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v117 + 1), (unint64_t)&v161);
          v120 = *(unsigned int *)(v12 + 12);
          v121 = *(_BYTE **)v12;
          LOBYTE(v119) = *(_BYTE *)result;
        }
        else
        {
          v121 = *(_BYTE **)v12;
        }
        v121[v120] = v119;
        v122 = *(_DWORD *)(v12 + 12) + 1;
        v123 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v122;
        *(_DWORD *)(v12 + 16) = v123;
      }
      v161 = v10;
      if (v122 > v123)
      {
        *(_DWORD *)(v12 + 16) = v123 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v123) = v10;
        v124 = *(_DWORD *)(v12 + 12);
        v125 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v122 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v122 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v122) = v10;
        }
        v124 = *(_DWORD *)(v12 + 12) + 1;
        v125 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v124;
        *(_DWORD *)(v12 + 16) = v125;
      }
      v161 = v44;
      if (v124 > v125)
      {
        *(_DWORD *)(v12 + 16) = v125 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v125) = v44;
        v126 = *(_DWORD *)(v12 + 12);
        v127 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v124 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v124 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v124) = v44;
        }
        v126 = *(_DWORD *)(v12 + 12) + 1;
        v127 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v126;
        *(_DWORD *)(v12 + 16) = v127;
      }
      if (v9 > 0x3FFFFFFF)
        v9 += 64;
      v161 = v9;
      if (v126 > v127)
      {
        *(_DWORD *)(v12 + 16) = v127 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v127) = v9;
        v128 = *(_DWORD *)(v12 + 12);
        v129 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v126 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v126 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v126) = v9;
        }
        v128 = *(_DWORD *)(v12 + 12) + 1;
        v129 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v128;
        *(_DWORD *)(v12 + 16) = v129;
      }
      v130 = v9 >> 8;
      v161 = BYTE1(v9);
      if (v128 > v129)
      {
        *(_DWORD *)(v12 + 16) = v129 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v129) = BYTE1(v9);
        v133 = *(_DWORD *)(v12 + 12);
        v134 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v131 = v128;
        if (v128 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v128 + 1), (unint64_t)&v161);
          v131 = *(unsigned int *)(v12 + 12);
          v132 = *(_BYTE **)v12;
          LOBYTE(v130) = *(_BYTE *)result;
        }
        else
        {
          v132 = *(_BYTE **)v12;
        }
        v132[v131] = v130;
        v133 = *(_DWORD *)(v12 + 12) + 1;
        v134 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v133;
        *(_DWORD *)(v12 + 16) = v134;
      }
      v135 = (v8 != 0) | (2 * ((v8 & 0xFF00) == 0));
      v161 = v135;
      if (v133 > v134)
      {
        *(_DWORD *)(v12 + 16) = v134 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v134) = v135;
        v138 = *(_DWORD *)(v12 + 12);
        v139 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v136 = v133;
        if (v133 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v133 + 1), (unint64_t)&v161);
          v136 = *(unsigned int *)(v12 + 12);
          v137 = *(_BYTE **)v12;
          v135 = *(_BYTE *)result;
        }
        else
        {
          v137 = *(_BYTE **)v12;
        }
        v137[v136] = v135;
        v138 = *(_DWORD *)(v12 + 12) + 1;
        v139 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v138;
        *(_DWORD *)(v12 + 16) = v139;
      }
      v161 = 0;
      if (v138 > v139)
      {
        *(_DWORD *)(v12 + 16) = v139 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v139) = 0;
        v140 = *(_DWORD *)(v12 + 12);
        v141 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v138 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v138 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v138) = 0;
        }
        v140 = *(_DWORD *)(v12 + 12) + 1;
        v141 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v140;
        *(_DWORD *)(v12 + 16) = v141;
      }
      v161 = v15;
      if (v140 > v141)
      {
        *(_DWORD *)(v12 + 16) = v141 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v141) = v15;
        v102 = *(_DWORD *)(v12 + 12);
        v103 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v140 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v140 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v140) = v15;
        }
        v102 = *(_DWORD *)(v12 + 12) + 1;
        v103 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v102;
        *(_DWORD *)(v12 + 16) = v103;
      }
      v104 = v15 >> 8;
    }
    else
    {
LABEL_45:
      v46 = *(_DWORD *)(result + 16);
      v47 = *(_QWORD *)(result + 40);
      v48 = v46;
      if (v47 != result)
      {
        v160 = *(_DWORD *)(result + 16);
        v142 = *(WTF ***)(result + 40);
        v143 = *(_DWORD *)(v47 + 12);
        v144 = *(_DWORD *)(result + 12);
        if (v143 > v144)
        {
          *((_DWORD *)v142 + 3) = v144;
          v143 = v144;
        }
        else
        {
          v145 = *((_DWORD *)v142 + 2);
          if (v144 > v145)
          {
            if (v145)
            {
              if (v143)
                *((_DWORD *)v142 + 3) = 0;
              v148 = (unint64_t)*v142;
              if (*v142)
              {
                *v142 = 0;
                *((_DWORD *)v142 + 2) = 0;
                WTF::fastFree(v148, a2, a3, a4, a5, a6, a7, a8);
                v145 = *((_DWORD *)v142 + 2);
              }
            }
            if (v145 < *(_DWORD *)(v12 + 12))
            {
              v159 = *v142;
              v157 = *(_DWORD *)(v12 + 12);
              v158 = *((unsigned int *)v142 + 3);
              v149 = (WTF *)WTF::fastMalloc((WTF *)v157);
              *((_DWORD *)v142 + 2) = v157;
              *v142 = v149;
              memcpy(v149, v159, v158);
              if (v159)
              {
                if (*v142 == v159)
                {
                  *v142 = 0;
                  *((_DWORD *)v142 + 2) = 0;
                }
                WTF::fastFree((unint64_t)v159, v150, v151, v152, v153, v154, v155, v156);
              }
            }
            v143 = *((_DWORD *)v142 + 3);
          }
        }
        v146 = *v142;
        if (v143)
        {
          memmove(v146, *(const void **)v12, v143);
          v147 = *((unsigned int *)v142 + 3);
          v146 = *v142;
        }
        else
        {
          v147 = 0;
        }
        result = (uint64_t)memcpy((char *)v146 + v147, (const void *)(*(_QWORD *)v12 + v147), *(_QWORD *)v12 + *(unsigned int *)(v12 + 12) - (*(_QWORD *)v12 + v147));
        *((_DWORD *)v142 + 3) = *(_DWORD *)(v12 + 12);
        v48 = *(_DWORD *)(v12 + 16);
        v46 = v160;
      }
      *(_DWORD *)(v12 + 48) = v46;
      *(_DWORD *)(v12 + 36) = 7;
      v161 = -126;
      v49 = *(unsigned int *)(v12 + 12);
      if (v49 > v48)
      {
        *(_DWORD *)(v12 + 16) = v48 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v48) = -126;
        v50 = *(_DWORD *)(v12 + 12);
        v51 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if ((_DWORD)v49 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v49 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v49) = -126;
        }
        v50 = *(_DWORD *)(v12 + 12) + 1;
        v51 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v50;
        *(_DWORD *)(v12 + 16) = v51;
      }
      v52 = 7;
      v161 = 7;
      if (v50 > v51)
      {
        *(_DWORD *)(v12 + 16) = v51 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v51) = 7;
        v55 = *(_DWORD *)(v12 + 12);
        v56 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v53 = v50;
        if (v50 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v50 + 1), (unint64_t)&v161);
          v53 = *(unsigned int *)(v12 + 12);
          v54 = *(_BYTE **)v12;
          v52 = *(_BYTE *)result;
        }
        else
        {
          v54 = *(_BYTE **)v12;
        }
        v54[v53] = v52;
        v55 = *(_DWORD *)(v12 + 12) + 1;
        v56 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v55;
        *(_DWORD *)(v12 + 16) = v56;
      }
      v161 = v11;
      if (v55 > v56)
      {
        *(_DWORD *)(v12 + 16) = v56 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v56) = v11;
        v57 = *(_DWORD *)(v12 + 12);
        v58 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v55 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v55 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v55) = v11;
        }
        v57 = *(_DWORD *)(v12 + 12) + 1;
        v58 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v57;
        *(_DWORD *)(v12 + 16) = v58;
      }
      v161 = BYTE1(v11);
      if (v57 > v58)
      {
        *(_DWORD *)(v12 + 16) = v58 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v58) = BYTE1(v11);
        v59 = *(_DWORD *)(v12 + 12);
        v60 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v57 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v57 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v57) = BYTE1(v11);
        }
        v59 = *(_DWORD *)(v12 + 12) + 1;
        v60 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v59;
        *(_DWORD *)(v12 + 16) = v60;
      }
      v161 = BYTE2(v11);
      if (v59 > v60)
      {
        *(_DWORD *)(v12 + 16) = v60 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v60) = BYTE2(v11);
        v61 = *(_DWORD *)(v12 + 12);
        v62 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v59 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v59 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v59) = BYTE2(v11);
        }
        v61 = *(_DWORD *)(v12 + 12) + 1;
        v62 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v61;
        *(_DWORD *)(v12 + 16) = v62;
      }
      v161 = HIBYTE(v11);
      if (v61 > v62)
      {
        *(_DWORD *)(v12 + 16) = v62 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v62) = HIBYTE(v11);
        v63 = *(_DWORD *)(v12 + 12);
        v64 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v61 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v61 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v61) = HIBYTE(v11);
        }
        v63 = *(_DWORD *)(v12 + 12) + 1;
        v64 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v63;
        *(_DWORD *)(v12 + 16) = v64;
      }
      v161 = v10;
      if (v63 > v64)
      {
        *(_DWORD *)(v12 + 16) = v64 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v64) = v10;
        v65 = *(_DWORD *)(v12 + 12);
        v66 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v63 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v63 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v63) = v10;
        }
        v65 = *(_DWORD *)(v12 + 12) + 1;
        v66 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v65;
        *(_DWORD *)(v12 + 16) = v66;
      }
      v161 = v44;
      if (v65 > v66)
      {
        *(_DWORD *)(v12 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v66) = v44;
        v67 = *(_DWORD *)(v12 + 12);
        v68 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v65 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v65 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v65) = v44;
        }
        v67 = *(_DWORD *)(v12 + 12) + 1;
        v68 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v67;
        *(_DWORD *)(v12 + 16) = v68;
      }
      v161 = v42;
      if (v67 > v68)
      {
        *(_DWORD *)(v12 + 16) = v68 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v68) = v42;
        v69 = *(_DWORD *)(v12 + 12);
        v70 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v67 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v67 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v67) = v42;
        }
        v69 = *(_DWORD *)(v12 + 12) + 1;
        v70 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v69;
        *(_DWORD *)(v12 + 16) = v70;
      }
      v71 = HIBYTE(v10);
      v161 = HIBYTE(v10);
      if (v69 > v70)
      {
        *(_DWORD *)(v12 + 16) = v70 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v70) = HIBYTE(v10);
        v74 = *(_DWORD *)(v12 + 12);
        v75 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v72 = v69;
        if (v69 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v69 + 1), (unint64_t)&v161);
          v72 = *(unsigned int *)(v12 + 12);
          v73 = *(_BYTE **)v12;
          LOBYTE(v71) = *(_BYTE *)result;
        }
        else
        {
          v73 = *(_BYTE **)v12;
        }
        v73[v72] = v71;
        v74 = *(_DWORD *)(v12 + 12) + 1;
        v75 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v74;
        *(_DWORD *)(v12 + 16) = v75;
      }
      v161 = v9;
      if (v74 > v75)
      {
        *(_DWORD *)(v12 + 16) = v75 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v75) = v9;
        v76 = *(_DWORD *)(v12 + 12);
        v77 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v74 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v74 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v74) = v9;
        }
        v76 = *(_DWORD *)(v12 + 12) + 1;
        v77 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v76;
        *(_DWORD *)(v12 + 16) = v77;
      }
      v161 = BYTE1(v9);
      if (v76 > v77)
      {
        *(_DWORD *)(v12 + 16) = v77 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v77) = BYTE1(v9);
        v78 = *(_DWORD *)(v12 + 12);
        v79 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v76 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v76 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v76) = BYTE1(v9);
        }
        v78 = *(_DWORD *)(v12 + 12) + 1;
        v79 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v78;
        *(_DWORD *)(v12 + 16) = v79;
      }
      v161 = BYTE2(v9);
      if (v78 > v79)
      {
        *(_DWORD *)(v12 + 16) = v79 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v79) = BYTE2(v9);
        v80 = *(_DWORD *)(v12 + 12);
        v81 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v78 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v78 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v78) = BYTE2(v9);
        }
        v80 = *(_DWORD *)(v12 + 12) + 1;
        v81 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v80;
        *(_DWORD *)(v12 + 16) = v81;
      }
      v161 = HIBYTE(v9);
      if (v80 > v81)
      {
        *(_DWORD *)(v12 + 16) = v81 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v81) = HIBYTE(v9);
        v82 = *(_DWORD *)(v12 + 12);
        v83 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v80 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v80 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v80) = HIBYTE(v9);
        }
        v82 = *(_DWORD *)(v12 + 12) + 1;
        v83 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v82;
        *(_DWORD *)(v12 + 16) = v83;
      }
      v84 = (v8 != 0) | (2 * ((v8 & 0xFF00) == 0));
      v161 = v84;
      if (v82 > v83)
      {
        *(_DWORD *)(v12 + 16) = v83 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v83) = v84;
        v87 = *(_DWORD *)(v12 + 12);
        v88 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v85 = v82;
        if (v82 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v82 + 1), (unint64_t)&v161);
          v85 = *(unsigned int *)(v12 + 12);
          v86 = *(_BYTE **)v12;
          v84 = *(_BYTE *)result;
        }
        else
        {
          v86 = *(_BYTE **)v12;
        }
        v86[v85] = v84;
        v87 = *(_DWORD *)(v12 + 12) + 1;
        v88 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v87;
        *(_DWORD *)(v12 + 16) = v88;
      }
      v161 = 0;
      if (v87 > v88)
      {
        *(_DWORD *)(v12 + 16) = v88 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v88) = 0;
        v89 = *(_DWORD *)(v12 + 12);
        v90 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v87 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v87 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v87) = 0;
        }
        v89 = *(_DWORD *)(v12 + 12) + 1;
        v90 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v89;
        *(_DWORD *)(v12 + 16) = v90;
      }
      v161 = 0;
      if (v89 > v90)
      {
        *(_DWORD *)(v12 + 16) = v90 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v90) = 0;
        v91 = *(_DWORD *)(v12 + 12);
        v92 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v89 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v89 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v89) = 0;
        }
        v91 = *(_DWORD *)(v12 + 12) + 1;
        v92 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v91;
        *(_DWORD *)(v12 + 16) = v92;
      }
      v161 = 0;
      if (v91 > v92)
      {
        *(_DWORD *)(v12 + 16) = v92 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v92) = 0;
        v93 = *(_DWORD *)(v12 + 12);
        v94 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v91 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v91 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v91) = 0;
        }
        v93 = *(_DWORD *)(v12 + 12) + 1;
        v94 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v93;
        *(_DWORD *)(v12 + 16) = v94;
      }
      v161 = v15;
      if (v93 > v94)
      {
        *(_DWORD *)(v12 + 16) = v94 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v94) = v15;
        v95 = *(_DWORD *)(v12 + 12);
        v96 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v93 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v93 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v93) = v15;
        }
        v95 = *(_DWORD *)(v12 + 12) + 1;
        v96 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v95;
        *(_DWORD *)(v12 + 16) = v96;
      }
      v97 = v15 >> 8;
      v161 = BYTE1(v15);
      if (v95 > v96)
      {
        *(_DWORD *)(v12 + 16) = v96 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v96) = BYTE1(v15);
        v100 = *(_DWORD *)(v12 + 12);
        v101 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        v98 = v95;
        if (v95 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v95 + 1), (unint64_t)&v161);
          v98 = *(unsigned int *)(v12 + 12);
          v99 = *(_BYTE **)v12;
          LOBYTE(v97) = *(_BYTE *)result;
        }
        else
        {
          v99 = *(_BYTE **)v12;
        }
        v99[v98] = v97;
        v100 = *(_DWORD *)(v12 + 12) + 1;
        v101 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v100;
        *(_DWORD *)(v12 + 16) = v101;
      }
      v161 = BYTE2(v15);
      if (v100 > v101)
      {
        *(_DWORD *)(v12 + 16) = v101 + 1;
        *(_BYTE *)(*(_QWORD *)v12 + v101) = BYTE2(v15);
        v102 = *(_DWORD *)(v12 + 12);
        v103 = *(_DWORD *)(v12 + 16);
      }
      else
      {
        if (v100 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v100 + 1), (unint64_t)&v161);
          *(_BYTE *)(*(_QWORD *)v12 + *(unsigned int *)(v12 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v12 + v100) = BYTE2(v15);
        }
        v102 = *(_DWORD *)(v12 + 12) + 1;
        v103 = *(_DWORD *)(v12 + 16) + 1;
        *(_DWORD *)(v12 + 12) = v102;
        *(_DWORD *)(v12 + 16) = v103;
      }
      v104 = HIBYTE(v15);
    }
    v161 = v104;
    if (v102 <= v103)
    {
      v41 = v102;
      if (v102 != *(_DWORD *)(v12 + 8))
      {
        v105 = *(_BYTE **)v12;
LABEL_134:
        v105[v41] = v104;
        goto LABEL_135;
      }
LABEL_185:
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, (WTF *)(v41 + 1), (unint64_t)&v161);
      v41 = *(unsigned int *)(v12 + 12);
      v105 = *(_BYTE **)v12;
      LOBYTE(v104) = *(_BYTE *)result;
      goto LABEL_134;
    }
    *(_DWORD *)(v12 + 16) = v103 + 1;
    *(_BYTE *)(*(_QWORD *)v12 + v103) = v104;
  }
  return result;
}

uint64_t JSC::OpPutGetterById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = a5;
  result = JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v12, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v12, v17, v18, v19);
  }
  return result;
}

uint64_t JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  char v12;
  char v13;
  int v14;
  _BOOL4 v15;
  char v16;
  char v17;

  result = 0;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (v11)
  {
    v12 = a4;
    v13 = a3;
    if ((a4 | a3) <= 0xFF)
    {
      v14 = a5;
      v15 = (a5 - 1073741808) < 0x80;
      if ((int)a5 <= 0x3FFFFFFF)
        v15 = (a5 + 128) < 0x90;
      if (v15)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3C, a3, a4, a5, a6, a7, a8);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 60);
        v16 = a2 + 16;
        if (a2 <= 0x3FFFFFFF)
          v16 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
        v17 = v14 + 16;
        if (v14 <= 0x3FFFFFFF)
          v17 = v14;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char *v28;
  char *v29;
  char v30;
  char v31;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9 || (a4 | a3) >> 16 != 0)
    return 0;
  v11 = a5;
  v12 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v12 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v12)
    return 0;
  v13 = a4;
  v14 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3C, a3, a4, a5, a6, a7, a8);
  v30 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v30);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v28;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 60;
  v31 = 60;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 60;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v29;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v26 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v26 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  return 1;
}

uint64_t JSC::OpPutGetterById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3C, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 60;
  v26 = 60;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 60;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutSetterById::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = a5;
  result = JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v12, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v12, v17, v18, v19);
  }
  return result;
}

uint64_t JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  char v12;
  char v13;
  int v14;
  _BOOL4 v15;
  char v16;
  char v17;

  result = 0;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (v11)
  {
    v12 = a4;
    v13 = a3;
    if ((a4 | a3) <= 0xFF)
    {
      v14 = a5;
      v15 = (a5 - 1073741808) < 0x80;
      if ((int)a5 <= 0x3FFFFFFF)
        v15 = (a5 + 128) < 0x90;
      if (v15)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3D, a3, a4, a5, a6, a7, a8);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 61);
        v16 = a2 + 16;
        if (a2 <= 0x3FFFFFFF)
          v16 = a2;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
        v17 = v14 + 16;
        if (v14 <= 0x3FFFFFFF)
          v17 = v14;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v11;
  _BOOL4 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char *v28;
  char *v29;
  char v30;
  char v31;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9 || (a4 | a3) >> 16 != 0)
    return 0;
  v11 = a5;
  v12 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v12 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v12)
    return 0;
  v13 = a4;
  v14 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3D, a3, a4, a5, a6, a7, a8);
  v30 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v30);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v28;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 61;
  v31 = 61;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 61;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v31);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v29;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v26 = v11 + 64;
  if (v11 <= 0x3FFFFFFF)
    v26 = v11;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  return 1;
}

uint64_t JSC::OpPutSetterById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3D, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 61;
  v26 = 61;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 61;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutGetterByVal::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a3;
  v9 = a5;
  result = JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v8, a4, v9, v11, v12, v13);
    if ((result & 1) == 0)
      return JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v8, a4, v9, v14, v15, v16);
  }
  return result;
}

BOOL JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, unsigned int a4, int a5)
{
  char v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  char v17;
  char v18;
  char v19;

  v6 = a4;
  v16 = JSC::OpPutGetterByVal::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4, a5);
  if (v16)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3F, v10, v11, v12, v13, v14, v15);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 63);
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    v18 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v18 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v6);
    v19 = a5 + 16;
    if (a5 <= 0x3FFFFFFF)
      v19 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
  }
  return v16;
}

BOOL JSC::OpPutGetterByVal::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, unsigned int a3, int a4)
{
  _BOOL4 v4;
  _BOOL8 result;
  _BOOL4 v6;

  v4 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v4 = (a1 + 128) < 0x90;
  if (!v4)
    return 0;
  result = 0;
  if (a2 <= 0x3FFFFFFF)
    v6 = (a2 + 128) < 0x90;
  else
    v6 = (a2 - 1073741808) < 0x80;
  if (v6 && a3 <= 0xFF)
  {
    if (a4 <= 0x3FFFFFFF)
      return (a4 + 128) < 0x90;
    else
      return (a4 - 1073741808) < 0x80;
  }
  return result;
}

uint64_t JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  char *v29;
  char *v30;
  char v31;
  char v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a5;
  v13 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v13 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a4;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3F, a3, a4, a5, a6, a7, a8);
  v31 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 63;
  v32 = 63;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 63;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v32);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  return 1;
}

uint64_t JSC::OpPutGetterByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3F, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 63;
  v26 = 63;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 63;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpDelById::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  unsigned __int8 v15;
  __int16 v16;
  __int16 v17;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    v15 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x39, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 57);
    v16 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpDelById::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x39, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 57;
  v26 = 57;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 57;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a4;
  result = 0;
  v15 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 128) < 0x90;
  if (v15)
  {
    v16 = a6;
    v17 = a5;
    if ((a6 | a5) <= 0xFF)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x20, a3, a4, a5, a6, a7, a8);
      v45 = 32;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(unsigned int *)(a1 + 16);
      if (v18 > v19)
      {
        *(_DWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 32;
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
        {
          v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v45);
          v18 = *(unsigned int *)(a1 + 12);
          v20 = *(_QWORD *)a1;
          v21 = *v41;
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v21 = 32;
        }
        *(_BYTE *)(v20 + v18) = v21;
        v22 = *(_DWORD *)(a1 + 12) + 1;
        v23 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v22;
        *(_DWORD *)(a1 + 16) = v23;
      }
      v24 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v24 = a2;
      v46 = v24;
      if (v22 > v23)
      {
        *(_DWORD *)(a1 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(a1 + 8))
        {
          v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v46);
          v25 = *(unsigned int *)(a1 + 12);
          v26 = *(_QWORD *)a1;
          v24 = *v42;
        }
        else
        {
          v26 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v26 + v25) = v24;
        v27 = *(_DWORD *)(a1 + 12) + 1;
        v28 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v27;
        *(_DWORD *)(a1 + 16) = v28;
      }
      v29 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v29 = v10;
      v47 = v29;
      if (v27 > v28)
      {
        *(_DWORD *)(a1 + 16) = v28 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v29;
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v30 = v27;
        if (v27 == *(_DWORD *)(a1 + 8))
        {
          v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v47);
          v30 = *(unsigned int *)(a1 + 12);
          v31 = *(_QWORD *)a1;
          v29 = *v43;
        }
        else
        {
          v31 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v31 + v30) = v29;
        v32 = *(_DWORD *)(a1 + 12) + 1;
        v33 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v32;
        *(_DWORD *)(a1 + 16) = v33;
      }
      v34 = v12 + 16;
      if (v12 <= 0x3FFFFFFF)
        v34 = v12;
      v48 = v34;
      if (v32 > v33)
      {
        *(_DWORD *)(a1 + 16) = v33 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
        v37 = *(_DWORD *)(a1 + 12);
        v38 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v35 = v32;
        if (v32 == *(_DWORD *)(a1 + 8))
        {
          v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v48);
          v35 = *(unsigned int *)(a1 + 12);
          v36 = *(_QWORD *)a1;
          v34 = *v44;
        }
        else
        {
          v36 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v36 + v35) = v34;
        v37 = *(_DWORD *)(a1 + 12) + 1;
        v38 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v37;
        *(_DWORD *)(a1 + 16) = v38;
      }
      v49 = v17;
      if (v37 > v38)
      {
        *(_DWORD *)(a1 + 16) = v38 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v17;
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v37 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v49);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v37) = v17;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v50 = v16;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v16;
      }
      else
      {
        if (v39 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v50);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v39) = v16;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  result = 0;
  v15 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 0x8000) >> 6 < 0x201;
  if (v15)
  {
    v16 = a6;
    v17 = a5;
    if (!((a6 | a5) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x20, a3, a4, a5, a6, a7, a8);
      v32 = 0x80;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(unsigned int *)(a1 + 16);
      if (v18 > v19)
      {
        *(_DWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
        {
          v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
          v18 = *(unsigned int *)(a1 + 12);
          v20 = *(_QWORD *)a1;
          v21 = *v30;
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v21 = 0x80;
        }
        *(_BYTE *)(v20 + v18) = v21;
        v22 = *(_DWORD *)(a1 + 12) + 1;
        v23 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v22;
        *(_DWORD *)(a1 + 16) = v23;
      }
      v24 = 32;
      v33 = 32;
      if (v22 > v23)
      {
        *(_DWORD *)(a1 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v23) = 32;
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(a1 + 8))
        {
          v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
          v25 = *(unsigned int *)(a1 + 12);
          v26 = *(_QWORD *)a1;
          v24 = *v31;
        }
        else
        {
          v26 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v26 + v25) = v24;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v27 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v27 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
      v28 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v28 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
      v29 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v29 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x20, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 32;
  v27 = 32;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 32;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v8 + 4) |= 1u;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(unsigned int *)(v9 + 124);
  *(_DWORD *)(v9 + 124) = v10 + 1;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  result = JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, v10);
  if ((result & 1) == 0)
  {
    result = JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v12, v13, v14, a6, v10, v16);
    if ((result & 1) == 0)
      return JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v12, v13, v14, a6, v10, v17);
  }
  return result;
}

BOOL JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7)
{
  char v7;
  char v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v7 = a7;
  v8 = a6;
  v20 = JSC::OpGetByValWithThis::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6, a7);
  if (v20)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1F, v14, v15, v16, v17, v18, v19);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 31);
    v21 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v21 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
    v22 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v22 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
    v23 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v23 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
    v24 = a5 + 16;
    if (a5 <= 0x3FFFFFFF)
      v24 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v7);
  }
  return v20;
}

BOOL JSC::OpGetByValWithThis::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4, unsigned int a5, int a6)
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v6 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v6 = (a1 + 128) < 0x90;
  if (!v6)
    return 0;
  v7 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v7 = (a2 + 128) < 0x90;
  v8 = (a3 - 1073741808) < 0x80;
  if (a3 <= 0x3FFFFFFF)
    v8 = (a3 + 128) < 0x90;
  v9 = (a4 - 1073741808) < 0x80;
  if (a4 <= 0x3FFFFFFF)
    v9 = (a4 + 128) < 0x90;
  if ((a6 | a5) >= 0x100)
    v9 = 0;
  if (!v8)
    v9 = 0;
  return v7 && v9;
}

uint64_t JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  uint64_t result;
  _BOOL4 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  char *v33;
  char *v34;
  char v35;
  char v36;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  result = 0;
  v17 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v17 = (a5 + 0x8000) >> 6 < 0x201;
  if (v17)
  {
    v18 = a7;
    v19 = a6;
    if (!((a7 | a6) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1F, a3, a4, a5, a6, a7, a8);
      v35 = 0x80;
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(unsigned int *)(a1 + 16);
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 0x80;
        v24 = *(_DWORD *)(a1 + 12);
        v25 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
        {
          v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v35);
          v20 = *(unsigned int *)(a1 + 12);
          v22 = *(_QWORD *)a1;
          v23 = *v33;
        }
        else
        {
          v22 = *(_QWORD *)a1;
          v23 = 0x80;
        }
        *(_BYTE *)(v22 + v20) = v23;
        v24 = *(_DWORD *)(a1 + 12) + 1;
        v25 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v24;
        *(_DWORD *)(a1 + 16) = v25;
      }
      v26 = 31;
      v36 = 31;
      if (v24 > v25)
      {
        *(_DWORD *)(a1 + 16) = v25 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v25) = 31;
      }
      else
      {
        v27 = v24;
        if (v24 == *(_DWORD *)(a1 + 8))
        {
          v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v36);
          v27 = *(unsigned int *)(a1 + 12);
          v28 = *(_QWORD *)a1;
          v26 = *v34;
        }
        else
        {
          v28 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v28 + v27) = v26;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v29 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v29 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
      v30 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v30 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
      v31 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v31 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
      v32 = v14 + 64;
      if (v14 <= 0x3FFFFFFF)
        v32 = v14;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetByValWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1F, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 31;
  v28 = 31;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 31;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetPrototypeOf::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  char *v26;
  char *v27;
  char v28;
  char v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x31, a3, a4, a5, a6, a7, a8);
    v28 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v28);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v26;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 49;
    v29 = 49;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 49;
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v29);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v27;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v24 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v24 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
    v25 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v25 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpGetPrototypeOf::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x31, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 49;
  v25 = 49;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 49;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  char v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a6;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 128) < 0x90;
  if (a6 <= 0xFF && v16)
  {
    v17 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x23, a3, a4, a5, a6, a7, a8);
    v45 = 35;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(unsigned int *)(a1 + 16);
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = 35;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      {
        v41 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v45);
        v18 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v21 = *v41;
      }
      else
      {
        v20 = *(_QWORD *)a1;
        v21 = 35;
      }
      *(_BYTE *)(v20 + v18) = v21;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v24 = a2;
    v46 = v24;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
      v27 = *(_DWORD *)(a1 + 12);
      v28 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v46);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        v24 = *v42;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      v27 = *(_DWORD *)(a1 + 12) + 1;
      v28 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 16) = v28;
    }
    v29 = v10 + 16;
    if (v10 <= 0x3FFFFFFF)
      v29 = v10;
    v47 = v29;
    if (v27 > v28)
    {
      *(_DWORD *)(a1 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v28) = v29;
      v32 = *(_DWORD *)(a1 + 12);
      v33 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v30 = v27;
      if (v27 == *(_DWORD *)(a1 + 8))
      {
        v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v47);
        v30 = *(unsigned int *)(a1 + 12);
        v31 = *(_QWORD *)a1;
        v29 = *v43;
      }
      else
      {
        v31 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v31 + v30) = v29;
      v32 = *(_DWORD *)(a1 + 12) + 1;
      v33 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v32;
      *(_DWORD *)(a1 + 16) = v33;
    }
    v34 = v13 + 16;
    if (v13 <= 0x3FFFFFFF)
      v34 = v13;
    v48 = v34;
    if (v32 > v33)
    {
      *(_DWORD *)(a1 + 16) = v33 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v34;
      v37 = *(_DWORD *)(a1 + 12);
      v38 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v35 = v32;
      if (v32 == *(_DWORD *)(a1 + 8))
      {
        v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v48);
        v35 = *(unsigned int *)(a1 + 12);
        v36 = *(_QWORD *)a1;
        v34 = *v44;
      }
      else
      {
        v36 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v36 + v35) = v34;
      v37 = *(_DWORD *)(a1 + 12) + 1;
      v38 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v37;
      *(_DWORD *)(a1 + 16) = v38;
    }
    v49 = v17;
    if (v37 > v38)
    {
      *(_DWORD *)(a1 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v38) = v17;
      v39 = *(_DWORD *)(a1 + 12);
      v40 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v37 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v49);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v37) = v17;
      v39 = *(_DWORD *)(a1 + 12) + 1;
      v40 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v39;
      *(_DWORD *)(a1 + 16) = v40;
    }
    v50 = v12;
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v12;
    }
    else
    {
      if (v39 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v50);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v39) = v12;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  unsigned __int16 v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a6;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a6) && v16)
  {
    v17 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x23, a3, a4, a5, a6, a7, a8);
    v32 = 0x80;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(unsigned int *)(a1 + 16);
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      {
        v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v21 = *v30;
      }
      else
      {
        v20 = *(_QWORD *)a1;
        v21 = 0x80;
      }
      *(_BYTE *)(v20 + v18) = v21;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = 35;
    v33 = 35;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = 35;
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        v24 = *v31;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v27 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v27 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
    v28 = v10 + 64;
    if (v10 <= 0x3FFFFFFF)
      v28 = v10;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    v29 = v13 + 64;
    if (v13 <= 0x3FFFFFFF)
      v29 = v13;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
    return 1;
  }
  return result;
}

uint64_t JSC::OpPutByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x23, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 35;
  v27 = 35;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 35;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned __int8 a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  result = JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6);
  if ((result & 1) == 0)
  {
    result = JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v8, v9, v10, v11, v13, v14);
    if ((result & 1) == 0)
      return JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v8, v9, v10, v11, v15, v16);
  }
  return result;
}

BOOL JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v18 = JSC::OpPutByValWithThis::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4, a5);
  if (v18)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3A, v12, v13, v14, v15, v16, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 58);
    v19 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v19 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
    v20 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v20 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
    v21 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v21 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
    v22 = a5 + 16;
    if (a5 <= 0x3FFFFFFF)
      v22 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a6);
  }
  return v18;
}

BOOL JSC::OpPutByValWithThis::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v4 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v4 = (a1 + 128) < 0x90;
  if (!v4)
    return 0;
  v5 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v5 = (a2 + 128) < 0x90;
  v6 = (a3 - 1073741808) < 0x80;
  if (a3 <= 0x3FFFFFFF)
    v6 = (a3 + 128) < 0x90;
  v7 = (a4 - 1073741808) < 0x80;
  if (a4 <= 0x3FFFFFFF)
    v7 = (a4 + 128) < 0x90;
  if (!v6)
    v7 = 0;
  return v5 && v7;
}

uint64_t JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  unsigned __int8 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  char *v32;
  char *v33;
  char v34;
  char v35;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v15)
    return 0;
  v16 = a6;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3A, a3, a4, a5, a6, a7, a8);
  v34 = 0x80;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v34);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v32;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = 0x80;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = 58;
  v35 = 58;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = 58;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v35);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v33;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v27 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v27 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  v28 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v28 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
  v29 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v29 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
  v30 = v14 + 64;
  if (v14 <= 0x3FFFFFFF)
    v30 = v14;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
  return 1;
}

uint64_t JSC::OpPutByValWithThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3A, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 58;
  v27 = 58;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 58;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetPrivateName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  result = 0;
  v15 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 0x8000) >> 6 < 0x201;
  if (v15)
  {
    v16 = a6;
    v17 = a5;
    if (!((a6 | a5) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x22, a3, a4, a5, a6, a7, a8);
      v32 = 0x80;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(unsigned int *)(a1 + 16);
      if (v18 > v19)
      {
        *(_DWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
        {
          v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
          v18 = *(unsigned int *)(a1 + 12);
          v20 = *(_QWORD *)a1;
          v21 = *v30;
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v21 = 0x80;
        }
        *(_BYTE *)(v20 + v18) = v21;
        v22 = *(_DWORD *)(a1 + 12) + 1;
        v23 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v22;
        *(_DWORD *)(a1 + 16) = v23;
      }
      v24 = 34;
      v33 = 34;
      if (v22 > v23)
      {
        *(_DWORD *)(a1 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v23) = 34;
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(a1 + 8))
        {
          v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
          v25 = *(unsigned int *)(a1 + 12);
          v26 = *(_QWORD *)a1;
          v24 = *v31;
        }
        else
        {
          v26 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v26 + v25) = v24;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v27 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v27 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
      v28 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v28 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
      v29 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v29 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetPrivateName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x22, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 34;
  v27 = 34;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 34;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpHasStructureWithFlags::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xBF, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 130);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 191);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutByValDirect::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x24, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 36;
  v27 = 36;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 36;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpDelByVal::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  unsigned __int8 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  char *v29;
  char *v30;
  char v31;
  char v32;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3B, a3, a4, a5, a6, a7, a8);
  v31 = 0x80;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v31);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 0x80;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 59;
  v32 = 59;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 59;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v32);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v30;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v25 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v25 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v26 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  v27 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v27 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpDelByVal::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x3B, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 59;
  v26 = 59;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 59;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char *v27;
  char *v28;
  char v29;
  char v30;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if (!((a5 | a4) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x32, a3, a4, a5, a6, a7, a8);
      v29 = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v27;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = 50;
      v30 = 50;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = 50;
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v30);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v28;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v25 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v25 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
      v26 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v26 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpGetInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x32, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 50;
  v26 = 50;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 50;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v11 = (a4 + 128) < 0x90;
  if (!v11)
    return 0;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7D, a3, a4, a5, a6, a7, a8);
  v34 = 125;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 125;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v34);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v31;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 125;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v35 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v35);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v32;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  v36 = v12;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v12;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v36);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v12;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v27 = v10;
  v37 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v37);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v33;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v11 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7D, a3, a4, a5, a6, a7, a8);
  v46 = 0x80;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v46);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v42;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 0x80;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 125;
  v47 = 125;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 125;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v47);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v43;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v48 = v8;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v48);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v8 >> 8;
  v49 = BYTE1(v8);
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = BYTE1(v8);
    v30 = *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v44 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v49);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      LOBYTE(v27) = *v44;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    v30 = *(_DWORD *)(a1 + 12) + 1;
    v31 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 16) = v31;
  }
  v50 = v12;
  if (v30 > v31)
  {
    *(_DWORD *)(a1 + 16) = v31 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v31) = v12;
    v32 = *(_DWORD *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v30 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v50);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v12;
    v32 = *(_DWORD *)(a1 + 12) + 1;
    v33 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v32;
    *(_DWORD *)(a1 + 16) = v33;
  }
  v51 = 0;
  if (v32 > v33)
  {
    *(_DWORD *)(a1 + 16) = v33 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v33) = 0;
    v34 = *(_DWORD *)(a1 + 12);
    v35 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v32 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v32 + 1), (unint64_t)&v51);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v32) = 0;
    v34 = *(_DWORD *)(a1 + 12) + 1;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v34;
    *(_DWORD *)(a1 + 16) = v35;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v52 = v10;
  if (v34 > v35)
  {
    *(_DWORD *)(a1 + 16) = v35 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v35) = v10;
    v36 = *(_DWORD *)(a1 + 12);
    v37 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v34 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v52);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
    v36 = *(_DWORD *)(a1 + 12) + 1;
    v37 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v36;
    *(_DWORD *)(a1 + 16) = v37;
  }
  v38 = v10 >> 8;
  v53 = BYTE1(v10);
  if (v36 > v37)
  {
    *(_DWORD *)(a1 + 16) = v37 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v37) = BYTE1(v10);
  }
  else
  {
    v39 = v36;
    if (v36 == *(_DWORD *)(a1 + 8))
    {
      v45 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v53);
      v39 = *(unsigned int *)(a1 + 12);
      v40 = *(_QWORD *)a1;
      LOBYTE(v38) = *v45;
    }
    else
    {
      v40 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v40 + v39) = v38;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7D, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 125;
  v25 = 125;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 125;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPutPrivateName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  unsigned __int16 v12;
  int v13;
  uint64_t result;
  _BOOL4 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a6;
  v13 = a4;
  result = 0;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a6) && v16)
  {
    v17 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x21, a3, a4, a5, a6, a7, a8);
    v32 = 0x80;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(unsigned int *)(a1 + 16);
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
      {
        v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v21 = *v30;
      }
      else
      {
        v20 = *(_QWORD *)a1;
        v21 = 0x80;
      }
      *(_BYTE *)(v20 + v18) = v21;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = 33;
    v33 = 33;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = 33;
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        v24 = *v31;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v27 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v27 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
    v28 = v10 + 64;
    if (v10 <= 0x3FFFFFFF)
      v28 = v10;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    v29 = v13 + 64;
    if (v13 <= 0x3FFFFFFF)
      v29 = v13;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
    return 1;
  }
  return result;
}

uint64_t JSC::OpPutPrivateName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x21, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 33;
  v27 = 33;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 33;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpSetPrivateBrand::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v9 + 4) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned int *)(v10 + 20);
  *(_DWORD *)(v10 + 20) = v11 + 1;
  v13 = a3;
  result = JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v15, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)5, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 5);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)5, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 5;
    v51 = 5;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 5;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpSetPrivateBrand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)5, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 5;
  v25 = 5;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 5;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8B, a3, a4, a5, a6, a7, a8);
    v23 = -117;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = -117;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v21;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = -117;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    v24 = v17;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = v17;
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v22;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

BOOL JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8B, a3, a4, a5, a6, a7, a8);
    v31 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v31);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v28;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -117;
    v32 = -117;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -117;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v29;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v33 = v8;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v33);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v8;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = v8 >> 8;
    v34 = BYTE1(v8);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = BYTE1(v8);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v30 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        LOBYTE(v24) = *v30;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpCheckTdz::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8B, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -117;
  v23 = -117;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -117;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

uint64_t JSC::OpCheckPrivateBrand::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v9 + 4) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 1;
  v13 = a3;
  result = JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v15, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)6, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 6);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  char *v26;
  char *v27;
  char v28;
  char v29;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)6, a3, a4, a5, a6, a7, a8);
    v28 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v28);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v26;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 6;
    v29 = 6;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 6;
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v29);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v27;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v24 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v24 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
    v25 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v25 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCheckPrivateBrand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)6, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 6;
  v25 = 6;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 6;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v27;
  char *v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  if ((((_DWORD)a3 + 128) | a4) > 0xFF)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2F, a3, a4, a5, a6, a7, a8);
  v29 = 47;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 47;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v29);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v27;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 47;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v30 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v30);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v28;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v31 = v11;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v11;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v31);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v11;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v32 = v10;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v10;
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v32);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v10;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  if ((((_DWORD)a3 + 0x8000) | a4) >> 16)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2F, a3, a4, a5, a6, a7, a8);
  v49 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v49);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v44;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 47;
  v50 = 47;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 47;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v50);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v45;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v51 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v51);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v52 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v46 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v46;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  v53 = v11;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v11;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v53);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v11;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v11 >> 8;
  v54 = BYTE1(v11);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v11);
    v36 = *(_DWORD *)(a1 + 12);
    v37 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v47;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    v36 = *(_DWORD *)(a1 + 12) + 1;
    v37 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v36;
    *(_DWORD *)(a1 + 16) = v37;
  }
  v55 = v10;
  if (v36 > v37)
  {
    *(_DWORD *)(a1 + 16) = v37 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v37) = v10;
    v38 = *(_DWORD *)(a1 + 12);
    v39 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v36 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v55);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v36) = v10;
    v38 = *(_DWORD *)(a1 + 12) + 1;
    v39 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v38;
    *(_DWORD *)(a1 + 16) = v39;
  }
  v40 = v10 >> 8;
  v56 = BYTE1(v10);
  if (v38 > v39)
  {
    *(_DWORD *)(a1 + 16) = v39 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v39) = BYTE1(v10);
  }
  else
  {
    v41 = v38;
    if (v38 == *(_DWORD *)(a1 + 8))
    {
      v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      v41 = *(unsigned int *)(a1 + 12);
      v42 = *(_QWORD *)a1;
      LOBYTE(v40) = *v48;
    }
    else
    {
      v42 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v42 + v41) = v40;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2F, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 47;
  v25 = 47;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 47;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCreateThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1C, a3, a4, a5, a6, a7, a8);
    v54 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v49 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v54);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v49;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 28;
    v55 = 28;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 28;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v50 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v55);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v50;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v56 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v57 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v51 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v57);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v51;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v58 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v58);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v59 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v52 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v59);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v52;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v60 = 0;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = 0;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v60);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = 0;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v61 = 0;
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = 0;
      v42 = *(_DWORD *)(a1 + 12);
      v43 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v40 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v61);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v40) = 0;
      v42 = *(_DWORD *)(a1 + 12) + 1;
      v43 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v42;
      *(_DWORD *)(a1 + 16) = v43;
    }
    v62 = v10;
    if (v42 > v43)
    {
      *(_DWORD *)(a1 + 16) = v43 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v10;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v42 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v62);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v10;
      v44 = *(_DWORD *)(a1 + 12) + 1;
      v45 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v44;
      *(_DWORD *)(a1 + 16) = v45;
    }
    v46 = v10 >> 8;
    v63 = BYTE1(v10);
    if (v44 > v45)
    {
      *(_DWORD *)(a1 + 16) = v45 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v45) = BYTE1(v10);
    }
    else
    {
      v47 = v44;
      if (v44 == *(_DWORD *)(a1 + 8))
      {
        v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v63);
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(_QWORD *)a1;
        LOBYTE(v46) = *v53;
      }
      else
      {
        v48 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v48 + v47) = v46;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1C, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 28;
  v25 = 28;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 28;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCreatePromise::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v10 + 4) |= 1u;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(unsigned int *)(v11 + 56);
  *(_DWORD *)(v11 + 56) = v12 + 1;
  v14 = a3;
  result = JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, v12, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v14, a4, v12, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v14, a4, v12, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;
  char v17;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a5;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a5 <= 0xFF && v14)
  {
    v15 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xE, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 14);
    v16 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v16 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v17 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char *v27;
  char *v28;
  char v29;
  char v30;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a5;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a5) && v14)
  {
    v15 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xE, a3, a4, a5, a6, a7, a8);
    v29 = 0x80;
    v16 = *(unsigned int *)(a1 + 12);
    v17 = *(unsigned int *)(a1 + 16);
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
      {
        v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
        v16 = *(unsigned int *)(a1 + 12);
        v18 = *(_QWORD *)a1;
        v19 = *v27;
      }
      else
      {
        v18 = *(_QWORD *)a1;
        v19 = 0x80;
      }
      *(_BYTE *)(v18 + v16) = v19;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    v22 = 14;
    v30 = 14;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = 14;
    }
    else
    {
      v23 = v20;
      if (v20 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v30);
        v23 = *(unsigned int *)(a1 + 12);
        v24 = *(_QWORD *)a1;
        v22 = *v28;
      }
      else
      {
        v24 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v24 + v23) = v22;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v25 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v25 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
    v26 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v26 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreatePromise::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xE, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 14;
  v26 = 14;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 14;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v24;
  char *v25;
  char v26;
  char v27;
  char v28;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    v10 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x88, a3, a4, a5, a6, a7, a8);
    v26 = -120;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = -120;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v26);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v24;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = -120;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v18 = a2;
    v27 = v18;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v27);
        v19 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v18 = *v25;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v20 + v19) = v18;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v28 = v10;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v10;
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v28);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v10;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

BOOL JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char *v33;
  char *v34;
  _BYTE *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    v10 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x88, a3, a4, a5, a6, a7, a8);
    v36 = 0x80;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 0x80;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v36);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v33;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 0x80;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = -120;
    v37 = -120;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = -120;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v37);
        v19 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v18 = *v34;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v20 + v19) = v18;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v38 = v8;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v38);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v8 >> 8;
    v39 = BYTE1(v8);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = BYTE1(v8);
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        v35 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v39);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        LOBYTE(v25) = *v35;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    v40 = v10;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v40);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v10;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v41 = 0;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = 0;
    }
    else
    {
      if (v30 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v41);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v30) = 0;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x88, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -120;
  v24 = -120;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -120;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCreateGenerator::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v9 + 4) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned int *)(v10 + 48);
  *(_DWORD *)(v10 + 48) = v11 + 1;
  v13 = a3;
  result = JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v15, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 12);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 12;
    v51 = 12;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 12;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xC, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 12;
  v25 = 12;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 12;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpNewGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  _BYTE *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x89, a3, a4, a5, a6, a7, a8);
    v31 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v31);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v28;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -119;
    v32 = -119;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -119;
      v20 = *(_DWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v32);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v29;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      v20 = *(_DWORD *)(a1 + 12) + 1;
      v21 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v20;
      *(_DWORD *)(a1 + 16) = v21;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v33 = v8;
    if (v20 > v21)
    {
      *(_DWORD *)(a1 + 16) = v21 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v20 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v33);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v20) = v8;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    v24 = v8 >> 8;
    v34 = BYTE1(v8);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = BYTE1(v8);
    }
    else
    {
      v25 = v22;
      if (v22 == *(_DWORD *)(a1 + 8))
      {
        v30 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
        v25 = *(unsigned int *)(a1 + 12);
        v26 = *(_QWORD *)a1;
        LOBYTE(v24) = *v30;
      }
      else
      {
        v26 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v26 + v25) = v24;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpNewGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x89, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -119;
  v23 = -119;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -119;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

uint64_t JSC::OpCreateAsyncGenerator::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v9 + 4) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned int *)(v10 + 52);
  *(_DWORD *)(v10 + 52) = v11 + 1;
  v13 = a3;
  result = JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v15, v16, v17, v18);
    if ((result & 1) == 0)
      return JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v13, v11, v19, v20, v21, v22);
  }
  return result;
}

uint64_t JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xD, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 13);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xD, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 13;
    v51 = 13;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 13;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateAsyncGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xD, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 13;
  v25 = 13;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 13;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  uint64_t v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl ***v22;
  WTF::StringImpl **v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = (WTF::StringImpl ***)v11;
      v20 = 8 * v10;
      v21 = (WTF::StringImpl ***)v5;
      v22 = (WTF::StringImpl ***)v5;
      do
      {
        *v19 = 0;
        v23 = *v21;
        *v22++ = 0;
        *v19++ = v23;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::~HashMap(v21, v12, v13, v14, v15, v16, v17, v18);
        v21 = v22;
        v20 -= 8;
      }
      while (v20);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl **v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = (WTF::StringImpl ***)v9;
        v18 = 8 * v8;
        v19 = (WTF::StringImpl ***)v7;
        v20 = (WTF::StringImpl ***)v7;
        do
        {
          *v17 = 0;
          v21 = *v19;
          *v20++ = 0;
          *v17++ = v21;
          WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::~HashMap(v19, v10, v11, v12, v13, v14, v15, v16);
          v19 = v20;
          v18 -= 8;
        }
        while (v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (WTF::StringImpl **)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21)
      {
        if (v22 != (WTF::StringImpl *)-1)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = *((_DWORD *)v22 + 4);
          if ((v25 & 0x20) != 0)
            v25 = *((_DWORD *)v22 + 8);
          v26 = 0;
          v27 = v25 >> 8;
          do
          {
            v28 = v27 & v24;
            v27 = ++v26 + v28;
          }
          while (*(_QWORD *)(v23 + 16 * v28));
          v29 = v23 + 16 * v28;
          *(_QWORD *)v29 = 0;
          v30 = *v21;
          *v21 = 0;
          *(_QWORD *)v29 = v30;
          *(_DWORD *)(v29 + 8) = *(_DWORD *)(v6 + 16 * v19 + 8);
          v31 = *v21;
          *v21 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v21 == a3)
            v20 = v29;
        }
      }
      else
      {
        *v21 = 0;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v5 + 16 * v10;
      v20 = v5;
      do
      {
        *v11 = 0;
        v21 = *(WTF::StringImpl ***)v20;
        *(_QWORD *)v20 = 0;
        *v11 = v21;
        v22 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = 0;
        v11[1] = v22;
        v23 = v11;
        std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>::~pair((WTF::StringImpl ***)v20, v12, v13, v14, v15, v16, v17, v18);
        v20 += 16;
        v11 = v23 + 2;
      }
      while (v20 != v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v7 + 16 * v8;
        v18 = v7;
        do
        {
          *v9 = 0;
          v19 = *(WTF::StringImpl ***)v18;
          *(_QWORD *)v18 = 0;
          *v9 = v19;
          v20 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          v9[1] = v20;
          v21 = v9;
          std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>::~pair((WTF::StringImpl ***)v18, v10, v11, v12, v13, v14, v15, v16);
          v18 += 16;
          v9 = v21 + 2;
        }
        while (v18 != v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_42;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_42:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(16 * v11 + 16));
  v13 = (_DWORD *)(v12 + 24);
  v14 = v11;
  do
  {
    *((_QWORD *)v13 - 1) = 0;
    *v13 = 0;
    v13 += 4;
    --v14;
  }
  while (v14);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = (_DWORD *)*a2;
  if (*a2)
  {
    v16 = *(v15 - 1);
    v17 = &v15[4 * v16];
    if (*(v15 - 3))
    {
      v18 = (_DWORD *)*a2;
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = (_DWORD *)*a2;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 4;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v18 = &v15[4 * v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[4 * v16];
LABEL_21:
  if (v15)
    v15 += 4 * *(v15 - 1);
  while (v18 != v15)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = *(_DWORD **)v18;
    v23 = *(_DWORD *)(*(_QWORD *)v18 + 16);
    if ((v23 & 0x20) != 0)
      v23 = v22[8];
    v24 = 0;
    v25 = v23 >> 8;
    do
    {
      v26 = v25 & v21;
      v25 = ++v24 + v26;
    }
    while (*(_QWORD *)(v20 + 16 * v26));
    if (v22)
      *v22 += 2;
    v27 = v20 + 16 * v26;
    *(_QWORD *)v27 = v22;
    *(_DWORD *)(v27 + 8) = v18[2];
    v28 = v18 + 4;
    v18 = v17;
    if (v28 != v17)
    {
      v18 = v28;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 4;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  return a1;
}

void WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::TemplateObjectDescriptor **v21;
  uint64_t v22;
  int i;
  unsigned int v24;
  JSC::TemplateObjectDescriptor **v25;
  JSC::TemplateObjectDescriptor *v26;
  JSC::TemplateObjectDescriptor *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v21 = 0;
  v22 = *a3;
  for (i = 1; ; ++i)
  {
    v24 = v13 & v12;
    v25 = (JSC::TemplateObjectDescriptor **)(v11 + 8 * (v13 & v12));
    v26 = *v25;
    if (!*v25)
    {
      if (v21)
      {
        *v21 = 0;
        --*(_DWORD *)(*a2 - 16);
        v22 = *a3;
        v25 = v21;
      }
      *a3 = 0;
      v27 = *v25;
      *v25 = (JSC::TemplateObjectDescriptor *)v22;
      if (v27)
        WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v27, v14, v15, v16, v17, v18, v19, v20);
      v28 = *a2;
      if (*a2)
        v29 = *(_DWORD *)(v28 - 12) + 1;
      else
        v29 = 1;
      *(_DWORD *)(v28 - 12) = v29;
      v30 = *a2;
      if (*a2)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_16;
      }
      else if (3 * v33 > 4 * v32)
      {
LABEL_16:
        v34 = v30 + 8 * v33;
        v35 = 1;
        goto LABEL_17;
      }
      v25 = (JSC::TemplateObjectDescriptor **)WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::expand(a2, (uint64_t)v25, v15, v16, v17, v18, v19, v20);
      v30 = *a2;
      if (*a2)
        v33 = *(unsigned int *)(v30 - 4);
      else
        v33 = 0;
      goto LABEL_16;
    }
    if (v26 != (JSC::TemplateObjectDescriptor *)-1)
      break;
    v21 = (JSC::TemplateObjectDescriptor **)(v11 + 8 * v24);
LABEL_25:
    v13 = i + v24;
  }
  if (v26 != (JSC::TemplateObjectDescriptor *)v22)
    goto LABEL_25;
  v36 = *a2;
  if (*a2)
    v37 = *(unsigned int *)(v36 - 4);
  else
    v37 = 0;
  v35 = 0;
  v34 = v36 + 8 * v37;
LABEL_17:
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v35;
}

_QWORD *WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  JSC::TemplateObjectDescriptor *v27;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if (v12)
  {
    v24 = v12;
    v25 = (uint64_t *)v11;
    do
    {
      if (*v25 != -1)
      {
        if (*v25)
        {
          v26 = WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::reinsert(*a1, v25);
          v27 = (JSC::TemplateObjectDescriptor *)*v25;
          *v25 = 0;
          if (v27)
            WTF::RefCounted<JSC::TemplateObjectDescriptor>::deref(v27, v15, v16, v17, v18, v19, v20, v21);
          if (v25 == (uint64_t *)a3)
            v22 = v26;
        }
        else
        {
          *v25 = 0;
        }
      }
      ++v25;
      --v24;
    }
    while (v24);
    goto LABEL_16;
  }
  result = 0;
  if (v11)
  {
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = 0;
  v11 = *a2;
  *a2 = 0;
  *result = v11;
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __n128 *v19;
  uint64_t v20;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v17 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v19 = (__n128 *)v6;
    do
    {
      if (v19->n128_u64[0] <= 0xFFFFFFFFFFFFFFFDLL)
      {
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::reinsert(*a1, v19);
        if (v19 == a3)
          v17 = v20;
      }
      ++v19;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_QWORD *)(v2 + 24);
    do
    {
      *(v5 - 1) = -1;
      *v5 = 0;
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

__n128 WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::JSTemplateObjectDescriptor *>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::JSTemplateObjectDescriptor *,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::JSTemplateObjectDescriptor *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = a2->n128_u64[0] + ~(a2->n128_u64[0] << 32);
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9 != -1);
  result = *a2;
  *(__n128 *)(a1 + 16 * v8) = *a2;
  return result;
}

uint64_t JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  char *v38;
  char *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 128) < 0x90;
  if (v13)
  {
    v14 = a6;
    v15 = a4;
    if ((a6 | a4) <= 0xFF)
    {
      v16 = a5;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1E, a3, a4, a5, a6, a7, a8);
      v40 = 30;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 30;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v40);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v37;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 30;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = a2 + 16;
      if (a2 <= 0x3FFFFFFF)
        v23 = a2;
      v41 = v23;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v41);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v38;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      v28 = v10 + 16;
      if (v10 <= 0x3FFFFFFF)
        v28 = v10;
      v42 = v28;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
        v31 = *(_DWORD *)(a1 + 12);
        v32 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v29 = v26;
        if (v26 == *(_DWORD *)(a1 + 8))
        {
          v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v42);
          v29 = *(unsigned int *)(a1 + 12);
          v30 = *(_QWORD *)a1;
          v28 = *v39;
        }
        else
        {
          v30 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v30 + v29) = v28;
        v31 = *(_DWORD *)(a1 + 12) + 1;
        v32 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v31;
        *(_DWORD *)(a1 + 16) = v32;
      }
      v43 = v15;
      if (v31 > v32)
      {
        *(_DWORD *)(a1 + 16) = v32 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v32) = v15;
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v31 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v43);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v31) = v15;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      v44 = v16;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v16;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v44);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v16;
        v35 = *(_DWORD *)(a1 + 12) + 1;
        v36 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v35;
        *(_DWORD *)(a1 + 16) = v36;
      }
      v45 = v14;
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = v14;
      }
      else
      {
        if (v35 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v45);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v35) = v14;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a6;
    v15 = a4;
    if (!((a6 | a4) >> 16))
    {
      v16 = a5;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1E, a3, a4, a5, a6, a7, a8);
      v64 = 0x80;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v58 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v64);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v58;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = 30;
      v65 = 30;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 30;
        v26 = *(_DWORD *)(a1 + 12);
        v27 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v59 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v65);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v59;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        v26 = *(_DWORD *)(a1 + 12) + 1;
        v27 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v26;
        *(_DWORD *)(a1 + 16) = v27;
      }
      if (v8 > 0x3FFFFFFF)
        v8 += 64;
      v66 = v8;
      if (v26 > v27)
      {
        *(_DWORD *)(a1 + 16) = v27 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
        v28 = *(_DWORD *)(a1 + 12);
        v29 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v26 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v66);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
        v28 = *(_DWORD *)(a1 + 12) + 1;
        v29 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v28;
        *(_DWORD *)(a1 + 16) = v29;
      }
      v30 = v8 >> 8;
      v67 = BYTE1(v8);
      if (v28 > v29)
      {
        *(_DWORD *)(a1 + 16) = v29 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
        v33 = *(_DWORD *)(a1 + 12);
        v34 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v31 = v28;
        if (v28 == *(_DWORD *)(a1 + 8))
        {
          v60 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v67);
          v31 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          LOBYTE(v30) = *v60;
        }
        else
        {
          v32 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v32 + v31) = v30;
        v33 = *(_DWORD *)(a1 + 12) + 1;
        v34 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v33;
        *(_DWORD *)(a1 + 16) = v34;
      }
      if (v10 > 0x3FFFFFFF)
        v10 += 64;
      v68 = v10;
      if (v33 > v34)
      {
        *(_DWORD *)(a1 + 16) = v34 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
        v35 = *(_DWORD *)(a1 + 12);
        v36 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v33 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v68);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
        v35 = *(_DWORD *)(a1 + 12) + 1;
        v36 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v35;
        *(_DWORD *)(a1 + 16) = v36;
      }
      v37 = v10 >> 8;
      v69 = BYTE1(v10);
      if (v35 > v36)
      {
        *(_DWORD *)(a1 + 16) = v36 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
        v40 = *(_DWORD *)(a1 + 12);
        v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v38 = v35;
        if (v35 == *(_DWORD *)(a1 + 8))
        {
          v61 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v69);
          v38 = *(unsigned int *)(a1 + 12);
          v39 = *(_QWORD *)a1;
          LOBYTE(v37) = *v61;
        }
        else
        {
          v39 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v39 + v38) = v37;
        v40 = *(_DWORD *)(a1 + 12) + 1;
        v41 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v40;
        *(_DWORD *)(a1 + 16) = v41;
      }
      v70 = v15;
      if (v40 > v41)
      {
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = v15;
        v42 = *(_DWORD *)(a1 + 12);
        v43 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v40 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v70);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v40) = v15;
        v42 = *(_DWORD *)(a1 + 12) + 1;
        v43 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v42;
        *(_DWORD *)(a1 + 16) = v43;
      }
      v44 = v15 >> 8;
      v71 = BYTE1(v15);
      if (v42 > v43)
      {
        *(_DWORD *)(a1 + 16) = v43 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v15);
        v47 = *(_DWORD *)(a1 + 12);
        v48 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v45 = v42;
        if (v42 == *(_DWORD *)(a1 + 8))
        {
          v62 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v71);
          v45 = *(unsigned int *)(a1 + 12);
          v46 = *(_QWORD *)a1;
          LOBYTE(v44) = *v62;
        }
        else
        {
          v46 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v46 + v45) = v44;
        v47 = *(_DWORD *)(a1 + 12) + 1;
        v48 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v47;
        *(_DWORD *)(a1 + 16) = v48;
      }
      v72 = v16;
      if (v47 > v48)
      {
        *(_DWORD *)(a1 + 16) = v48 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v48) = v16;
        v49 = *(_DWORD *)(a1 + 12);
        v50 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v47 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v72);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v47) = v16;
        v49 = *(_DWORD *)(a1 + 12) + 1;
        v50 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v49;
        *(_DWORD *)(a1 + 16) = v50;
      }
      v73 = 0;
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = 0;
        v51 = *(_DWORD *)(a1 + 12);
        v52 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v49 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v73);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v49) = 0;
        v51 = *(_DWORD *)(a1 + 12) + 1;
        v52 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v51;
        *(_DWORD *)(a1 + 16) = v52;
      }
      v74 = v14;
      if (v51 > v52)
      {
        *(_DWORD *)(a1 + 16) = v52 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v52) = v14;
        v53 = *(_DWORD *)(a1 + 12);
        v54 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v51 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v51 + 1), (unint64_t)&v74);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v51) = v14;
        v53 = *(_DWORD *)(a1 + 12) + 1;
        v54 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v53;
        *(_DWORD *)(a1 + 16) = v54;
      }
      v55 = v14 >> 8;
      v75 = BYTE1(v14);
      if (v53 > v54)
      {
        *(_DWORD *)(a1 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v54) = BYTE1(v14);
      }
      else
      {
        v56 = v53;
        if (v53 == *(_DWORD *)(a1 + 8))
        {
          v63 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v75);
          v56 = *(unsigned int *)(a1 + 12);
          v57 = *(_QWORD *)a1;
          LOBYTE(v55) = *v63;
        }
        else
        {
          v57 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v57 + v56) = v55;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpNewArray::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1E, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 30;
  v27 = 30;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 30;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

void WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>(uint64_t a1, _DWORD **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(_QWORD **)a1;
    if (v8 < 0x11)
    {
      v10 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v10;
    }
    memcpy(v10, v9, 8 * v5);
    if ((_QWORD *)(a1 + 16) != v9 && v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(_QWORD **)a1;
  v20 = *a2;
  if (*a2)
    ++*v20;
  v19[v18] = v20;
  *(_DWORD *)(a1 + 12) = v18 + 1;
}

uint64_t JSC::OpSpread::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8D, a3, a4, a5, a6, a7, a8);
  v31 = -115;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -115;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -115;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8D, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -115;
  v42 = -115;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -115;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8D, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -115;
  v24 = -115;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -115;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewArrayWithSpread::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char *v27;
  char *v28;
  char v29;
  char v30;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a5;
    v15 = a4;
    if (!((a5 | a4) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8C, a3, a4, a5, a6, a7, a8);
      v29 = 0x80;
      v16 = *(unsigned int *)(a1 + 12);
      v17 = *(unsigned int *)(a1 + 16);
      if (v16 > v17)
      {
        *(_DWORD *)(a1 + 16) = v17 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v17) = 0x80;
        v20 = *(_DWORD *)(a1 + 12);
        v21 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v29);
          v16 = *(unsigned int *)(a1 + 12);
          v18 = *(_QWORD *)a1;
          v19 = *v27;
        }
        else
        {
          v18 = *(_QWORD *)a1;
          v19 = 0x80;
        }
        *(_BYTE *)(v18 + v16) = v19;
        v20 = *(_DWORD *)(a1 + 12) + 1;
        v21 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v20;
        *(_DWORD *)(a1 + 16) = v21;
      }
      v22 = -116;
      v30 = -116;
      if (v20 > v21)
      {
        *(_DWORD *)(a1 + 16) = v21 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v21) = -116;
      }
      else
      {
        v23 = v20;
        if (v20 == *(_DWORD *)(a1 + 8))
        {
          v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v30);
          v23 = *(unsigned int *)(a1 + 12);
          v24 = *(_QWORD *)a1;
          v22 = *v28;
        }
        else
        {
          v24 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v24 + v23) = v22;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v25 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v25 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
      v26 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v26 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpNewArrayWithSpread::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8C, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -116;
  v26 = -116;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -116;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewArrayWithSize::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x10, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 16);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewArrayWithSize::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x10, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 16;
  v25 = 16;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 16;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewArrayWithSpecies::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v7 + 4) |= 1u;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned int *)(v8 + 88);
  *(_DWORD *)(v8 + 88) = v9 + 1;
  v11 = a3;
  v12 = a4;
  result = JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, v9);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, a5, v9, v14, v15);
    if ((result & 1) == 0)
      return JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, v12, a5, v9, v16, v17);
  }
  return result;
}

BOOL JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, unsigned int a5, int a6)
{
  char v6;
  char v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  char v19;
  char v20;
  char v21;

  v6 = a6;
  v7 = a5;
  v18 = JSC::OpNewArrayWithSpecies::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6);
  if (v18)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x16, v12, v13, v14, v15, v16, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 22);
    v19 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v19 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
    v20 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v20 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
    v21 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v21 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v7);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v6);
  }
  return v18;
}

BOOL JSC::OpNewArrayWithSpecies::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(int a1, int a2, int a3, unsigned int a4, int a5)
{
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v5 = (a1 - 1073741808) < 0x80;
  if (a1 <= 0x3FFFFFFF)
    v5 = (a1 + 128) < 0x90;
  v6 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v6 = (a2 + 128) < 0x90;
  v7 = (a3 - 1073741808) < 0x80;
  if (a3 <= 0x3FFFFFFF)
    v7 = (a3 + 128) < 0x90;
  if ((a5 | a4) >= 0x100)
    v7 = 0;
  if (!v6)
    v7 = 0;
  return v5 && v7;
}

uint64_t JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  result = 0;
  v15 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 0x8000) >> 6 < 0x201;
  if (v15)
  {
    v16 = a6;
    v17 = a5;
    if (!((a6 | a5) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x16, a3, a4, a5, a6, a7, a8);
      v32 = 0x80;
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(unsigned int *)(a1 + 16);
      if (v18 > v19)
      {
        *(_DWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 0x80;
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
        {
          v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v32);
          v18 = *(unsigned int *)(a1 + 12);
          v20 = *(_QWORD *)a1;
          v21 = *v30;
        }
        else
        {
          v20 = *(_QWORD *)a1;
          v21 = 0x80;
        }
        *(_BYTE *)(v20 + v18) = v21;
        v22 = *(_DWORD *)(a1 + 12) + 1;
        v23 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v22;
        *(_DWORD *)(a1 + 16) = v23;
      }
      v24 = 22;
      v33 = 22;
      if (v22 > v23)
      {
        *(_DWORD *)(a1 + 16) = v23 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v23) = 22;
      }
      else
      {
        v25 = v22;
        if (v22 == *(_DWORD *)(a1 + 8))
        {
          v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
          v25 = *(unsigned int *)(a1 + 12);
          v26 = *(_QWORD *)a1;
          v24 = *v31;
        }
        else
        {
          v26 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v26 + v25) = v24;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v27 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v27 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
      v28 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v28 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
      v29 = v12 + 64;
      if (v12 <= 0x3FFFFFFF)
        v29 = v12;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpNewArrayWithSpecies::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x16, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 22;
  v27 = 22;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 22;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewRegexp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8E, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -114;
  v24 = -114;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -114;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewGeneratorFuncExp::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x60, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 96);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x60, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 96;
    v51 = 96;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 96;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x60, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 96;
  v25 = 96;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 96;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewAsyncFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x62, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 98;
  v25 = 98;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 98;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewAsyncGeneratorFuncExp::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x64, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 100);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x64, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 100;
    v51 = 100;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 100;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewAsyncGeneratorFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x64, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 100;
  v25 = 100;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 100;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5E, a3, a4, a5, a6, a7, a8);
    v34 = 94;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 94;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v34);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v31;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 94;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v21 = a2;
    v35 = v21;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v21;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v35);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v32;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v26 = v11;
    v36 = v26;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v26;
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v36);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        v26 = *v33;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v37 = v10;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    }
    else
    {
      if (v29 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v37);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5E, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 94;
    v51 = 94;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 94;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewFuncExp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5E, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 94;
  v25 = 94;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 94;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewGeneratorFunc::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5F, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 95);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5F, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 95);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewGeneratorFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5F, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 95;
  v25 = 95;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 95;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewAsyncFunc::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  char v15;
  char v16;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x61, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 97);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  unsigned __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x61, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 97);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpNewAsyncFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x61, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 97;
  v25 = 97;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 97;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpNewFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5D, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 93;
  v25 = 93;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 93;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpSetFunctionName::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v13;
  char v14;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x65, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 101);
  v13 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x65, a3, a4, a5, a6, a7, a8);
  v27 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 101;
  v28 = 101;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 101;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v22 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  v23 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  return 1;
}

uint64_t JSC::OpSetFunctionName::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x65, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 101;
  v24 = 101;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 101;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x17, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 23;
  v28 = 23;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 23;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTailCall::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  uint64_t result;
  _BOOL4 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  char *v28;
  char *v29;
  char v30;
  char v31;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  result = 0;
  v13 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v13 = (a3 + 0x8000) >> 6 < 0x201;
  if (v13)
  {
    v14 = a6;
    v15 = a5;
    v16 = a4;
    if (!((a5 | a4 | a6) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)9, a3, a4, a5, a6, a7, a8);
      v30 = 0x80;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(unsigned int *)(a1 + 16);
      if (v17 > v18)
      {
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
        {
          v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v30);
          v17 = *(unsigned int *)(a1 + 12);
          v19 = *(_QWORD *)a1;
          v20 = *v28;
        }
        else
        {
          v19 = *(_QWORD *)a1;
          v20 = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v20;
        v21 = *(_DWORD *)(a1 + 12) + 1;
        v22 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v21;
        *(_DWORD *)(a1 + 16) = v22;
      }
      v23 = 9;
      v31 = 9;
      if (v21 > v22)
      {
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v22) = 9;
      }
      else
      {
        v24 = v21;
        if (v21 == *(_DWORD *)(a1 + 8))
        {
          v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v31);
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(_QWORD *)a1;
          v23 = *v29;
        }
        else
        {
          v25 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v25 + v24) = v23;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v26 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v26 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
      v27 = v10 + 64;
      if (v10 <= 0x3FFFFFFF)
        v27 = v10;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpTailCall::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char v26;
  char v27;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)9, a3, a4, a5, a6, a7, a8);
  v26 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v26);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v24;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 9;
  v27 = 9;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 9;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v27);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v25;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCallDirectEval::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  _BOOL4 v11;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  char *v36;
  char *v37;
  char v38;
  char v39;

  v11 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = a3;
  result = 0;
  if ((int)a3 <= 0x3FFFFFFF)
    v15 = (a3 + 0x8000) >> 6 < 0x201;
  else
    v15 = (a3 - 1073741760) < 0x8000;
  if (!v15)
    return result;
  v16 = a5;
  v17 = a4;
  if ((a5 | a4) >> 16)
    return result;
  v18 = a6;
  v19 = (a6 - 1073741760) < 0x8000;
  if ((int)a6 <= 0x3FFFFFFF)
    v19 = (a6 + 0x8000) >> 6 < 0x201;
  if (!v19)
    return 0;
  v20 = a7;
  result = 0;
  v21 = (a7 - 1073741760) < 0x8000;
  if ((int)a7 <= 0x3FFFFFFF)
    v21 = (a7 + 0x8000) >> 6 < 0x201;
  if (v21 && !((a10 | a9) >> 16))
  {
    v22 = a8;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA, a3, a4, a5, a6, a7, a8);
    v38 = 0x80;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = *(unsigned int *)(a1 + 16);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = 0x80;
      v27 = *(_DWORD *)(a1 + 12);
      v28 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      {
        v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v38);
        v23 = *(unsigned int *)(a1 + 12);
        v25 = *(_QWORD *)a1;
        v26 = *v36;
      }
      else
      {
        v25 = *(_QWORD *)a1;
        v26 = 0x80;
      }
      *(_BYTE *)(v25 + v23) = v26;
      v27 = *(_DWORD *)(a1 + 12) + 1;
      v28 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 16) = v28;
    }
    v29 = 10;
    v39 = 10;
    if (v27 > v28)
    {
      *(_DWORD *)(a1 + 16) = v28 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v28) = 10;
    }
    else
    {
      v30 = v27;
      if (v27 == *(_DWORD *)(a1 + 8))
      {
        v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v27 + 1), (unint64_t)&v39);
        v30 = *(unsigned int *)(a1 + 12);
        v31 = *(_QWORD *)a1;
        v29 = *v37;
      }
      else
      {
        v31 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v31 + v30) = v29;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v32 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v32 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
    v33 = v12 + 64;
    if (v12 <= 0x3FFFFFFF)
      v33 = v12;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v33);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v34 = v18 + 64;
    if (v18 <= 0x3FFFFFFF)
      v34 = v18;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
    v35 = v20 + 64;
    if (v20 <= 0x3FFFFFFF)
      v35 = v20;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v35);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a9);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpCallDirectEval::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  unsigned __int8 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char v30;
  char v31;

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v13 = a5;
  v14 = a4;
  v15 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA, a3, a4, a5, a6, a7, a8);
  v30 = -126;
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(unsigned int *)(a1 + 16);
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = -126;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v30);
      v18 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v21 = *v28;
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = -126;
    }
    *(_BYTE *)(v20 + v18) = v21;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = 10;
  v31 = 10;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = 10;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v31);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v29;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a10);
}

uint64_t JSC::OpCallVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  char *v31;
  char v32;
  char v33;

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  v17 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v18 = *(unsigned __int16 *)(v17 + 28);
  v17 += 28;
  v19 = (v18 | (*(unsigned __int8 *)(v17 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v17 = v18;
  *(_BYTE *)(v17 + 2) = v19;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)1, a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v20 = *(unsigned int *)(a1 + 12);
  v21 = *(unsigned int *)(a1 + 16);
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = -126;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v23 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
      v23 = -126;
    }
    *(_BYTE *)(v22 + v20) = v23;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = 1;
  v33 = 1;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = 1;
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v33);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      v26 = *v31;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a9);
}

uint64_t JSC::OpTailCallVarargs::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  int v15;
  _BOOL4 v16;
  int v17;
  int v19;
  _BOOL4 v20;
  unsigned __int16 v21;
  __int16 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  char *v36;
  char v37;
  char v38;

  v9 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v10 = *(_WORD *)(v9 + 28);
  v9 += 28;
  v11 = ((*(unsigned __int8 *)(v9 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v9 = v10;
  *(_BYTE *)(v9 + 2) = v11;
  v12 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v12)
    return 0;
  v13 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v15 = a4;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = a5;
  if (!((int)a5 <= 0x3FFFFFFF ? (a5 + 0x8000) >> 6 < 0x201 : (a5 - 1073741760) < 0x8000))
    return 0;
  v19 = a6;
  v20 = (a6 - 1073741760) < 0x8000;
  if ((int)a6 <= 0x3FFFFFFF)
    v20 = (a6 + 0x8000) >> 6 < 0x201;
  if (!v20)
    return 0;
  v21 = a8;
  v22 = a7;
  if ((((_DWORD)a7 + 0x8000) | a8) >> 16)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, 0, a3, a4, a5, a6, a7, a8);
  v37 = 0x80;
  v24 = *(unsigned int *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = 0x80;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
    {
      v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v37);
      v24 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v27 = *v36;
    }
    else
    {
      v26 = *(_QWORD *)a1;
      v27 = 0x80;
    }
    *(_BYTE *)(v26 + v24) = v27;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v38 = 0;
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = 0;
  }
  else
  {
    if (v28 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v38);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v28) = 0;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v30 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v30 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
  v31 = v13 + 64;
  if (v13 <= 0x3FFFFFFF)
    v31 = v13;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
  v32 = v15 + 64;
  if (v15 <= 0x3FFFFFFF)
    v32 = v15;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
  v33 = v17 + 64;
  if (v17 <= 0x3FFFFFFF)
    v33 = v17;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v33);
  v34 = v19 + 64;
  if (v19 <= 0x3FFFFFFF)
    v34 = v19;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
  return 1;
}

uint64_t JSC::OpTailCallVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char *v26;
  char v27;
  char v28;

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v16 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v17 = *(unsigned __int16 *)(v16 + 28);
  v16 += 28;
  v18 = (v17 | (*(unsigned __int8 *)(v16 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v16 = v17;
  *(_BYTE *)(v16 + 2) = v18;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, 0, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v19 = *(unsigned int *)(a1 + 12);
  v20 = *(unsigned int *)(a1 + 16);
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -126;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v27);
      v19 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v22 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
      v22 = -126;
    }
    *(_BYTE *)(v21 + v19) = v22;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  v28 = 0;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = 0;
  }
  else
  {
    if (v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v28);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = 0;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpConstructVarargs::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  int v15;
  _BOOL4 v16;
  int v17;
  int v19;
  uint64_t result;
  _BOOL4 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  char *v39;
  char *v40;
  char v41;
  char v42;

  v9 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v10 = *(_WORD *)(v9 + 28);
  v9 += 28;
  v11 = ((*(unsigned __int8 *)(v9 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v9 = v10;
  *(_BYTE *)(v9 + 2) = v11;
  v12 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v12 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v12)
    return 0;
  v13 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v15 = a4;
  v16 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v16 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v16)
    return 0;
  v17 = a5;
  if (!((int)a5 <= 0x3FFFFFFF ? (a5 + 0x8000) >> 6 < 0x201 : (a5 - 1073741760) < 0x8000))
    return 0;
  v19 = a6;
  result = 0;
  v22 = (a6 - 1073741760) < 0x8000;
  if ((int)a6 <= 0x3FFFFFFF)
    v22 = (a6 + 0x8000) >> 6 < 0x201;
  if (v22)
  {
    v23 = a8;
    v24 = a7;
    if (!((a8 | a7) >> 16))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)3, a3, a4, a5, a6, a7, a8);
      v41 = 0x80;
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(unsigned int *)(a1 + 16);
      if (v25 > v26)
      {
        *(_DWORD *)(a1 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v26) = 0x80;
        v29 = *(_DWORD *)(a1 + 12);
        v30 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v25 == *(_DWORD *)(a1 + 8))
        {
          v39 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v41);
          v25 = *(unsigned int *)(a1 + 12);
          v27 = *(_QWORD *)a1;
          v28 = *v39;
        }
        else
        {
          v27 = *(_QWORD *)a1;
          v28 = 0x80;
        }
        *(_BYTE *)(v27 + v25) = v28;
        v29 = *(_DWORD *)(a1 + 12) + 1;
        v30 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v29;
        *(_DWORD *)(a1 + 16) = v30;
      }
      v31 = 3;
      v42 = 3;
      if (v29 > v30)
      {
        *(_DWORD *)(a1 + 16) = v30 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v30) = 3;
      }
      else
      {
        v32 = v29;
        if (v29 == *(_DWORD *)(a1 + 8))
        {
          v40 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v42);
          v32 = *(unsigned int *)(a1 + 12);
          v33 = *(_QWORD *)a1;
          v31 = *v40;
        }
        else
        {
          v33 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v33 + v32) = v31;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      v34 = a2 + 64;
      if (a2 <= 0x3FFFFFFF)
        v34 = a2;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
      v35 = v13 + 64;
      if (v13 <= 0x3FFFFFFF)
        v35 = v13;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v35);
      v36 = v15 + 64;
      if (v15 <= 0x3FFFFFFF)
        v36 = v15;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v36);
      v37 = v17 + 64;
      if (v17 <= 0x3FFFFFFF)
        v37 = v17;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v37);
      v38 = v19 + 64;
      if (v19 <= 0x3FFFFFFF)
        v38 = v19;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v38);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::OpConstructVarargs::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;
  char v31;
  char v32;

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v16 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v17 = *(unsigned __int16 *)(v16 + 28);
  v16 += 28;
  v18 = (v17 | (*(unsigned __int8 *)(v16 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v16 = v17;
  *(_BYTE *)(v16 + 2) = v18;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)3, a3, a4, a5, a6, a7, a8);
  v31 = -126;
  v19 = *(unsigned int *)(a1 + 12);
  v20 = *(unsigned int *)(a1 + 16);
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = -126;
    v23 = *(_DWORD *)(a1 + 12);
    v24 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v31);
      v19 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v22 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
      v22 = -126;
    }
    *(_BYTE *)(v21 + v19) = v22;
    v23 = *(_DWORD *)(a1 + 12) + 1;
    v24 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v23;
    *(_DWORD *)(a1 + 16) = v24;
  }
  v25 = 3;
  v32 = 3;
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = 3;
  }
  else
  {
    v26 = v23;
    if (v23 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v32);
      v26 = *(unsigned int *)(a1 + 12);
      v27 = *(_QWORD *)a1;
      v25 = *v30;
    }
    else
    {
      v27 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v27 + v26) = v25;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpTailCallForwardArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  unsigned __int16 v16;
  int v17;
  uint64_t result;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  char *v35;
  char *v36;
  char v37;
  char v38;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  if (!((int)a5 <= 0x3FFFFFFF ? (a5 + 0x8000) >> 6 < 0x201 : (a5 - 1073741760) < 0x8000))
    return 0;
  v16 = a7;
  v17 = a6;
  result = 0;
  v20 = (a6 - 1073741760) < 0x8000;
  if ((int)a6 <= 0x3FFFFFFF)
    v20 = (a6 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a7) && v20)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB, a3, a4, a5, a6, a7, a8);
    v37 = 0x80;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = *(unsigned int *)(a1 + 16);
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = 0x80;
      v25 = *(_DWORD *)(a1 + 12);
      v26 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
      {
        v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v37);
        v21 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v24 = *v35;
      }
      else
      {
        v23 = *(_QWORD *)a1;
        v24 = 0x80;
      }
      *(_BYTE *)(v23 + v21) = v24;
      v25 = *(_DWORD *)(a1 + 12) + 1;
      v26 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v25;
      *(_DWORD *)(a1 + 16) = v26;
    }
    v27 = 11;
    v38 = 11;
    if (v25 > v26)
    {
      *(_DWORD *)(a1 + 16) = v26 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v26) = 11;
    }
    else
    {
      v28 = v25;
      if (v25 == *(_DWORD *)(a1 + 8))
      {
        v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v38);
        v28 = *(unsigned int *)(a1 + 12);
        v29 = *(_QWORD *)a1;
        v27 = *v36;
      }
      else
      {
        v29 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v29 + v28) = v27;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v30 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v30 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
    v31 = v10 + 64;
    if (v10 <= 0x3FFFFFFF)
      v31 = v10;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
    v32 = v12 + 64;
    if (v12 <= 0x3FFFFFFF)
      v32 = v12;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
    v33 = v14 + 64;
    if (v14 <= 0x3FFFFFFF)
      v33 = v14;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v33);
    v34 = v17 + 64;
    if (v17 <= 0x3FFFFFFF)
      v34 = v17;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    return 1;
  }
  return result;
}

uint64_t JSC::OpTailCallForwardArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 11;
  v28 = 11;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 11;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 0);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpDefineDataProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x41, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 65;
  v26 = 65;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 65;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpEnd::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v17;
  char v18;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x73, a3, a4, a5, a6, a7, a8);
    v18 = 115;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 115;
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v17 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v18);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v17;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 115;
      }
      *(_BYTE *)(v13 + v11) = v14;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  }
  return v9;
}

BOOL JSC::OpEnd::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  __int16 v11;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x73, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 115);
    v11 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v11 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  }
  return v9;
}

uint64_t JSC::OpEnd::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x73, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = 115;
  v23 = 115;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 115;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

void WTF::Vector<WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>,5ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::RegisterID*>(uint64_t a1, _DWORD **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(_QWORD **)a1;
    if (v8 < 6)
    {
      v10 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 5;
    }
    else
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v10;
    }
    memcpy(v10, v9, 8 * v5);
    if ((_QWORD *)(a1 + 16) != v9 && v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v18 = *(unsigned int *)(a1 + 12);
  v19 = *(_QWORD **)a1;
  v20 = *a2;
  if (*a2)
    ++*v20;
  v19[v18] = v20;
  *(_DWORD *)(a1 + 12) = v18 + 1;
}

uint64_t JSC::OpConstruct::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)8, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 8;
  v28 = 8;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 8;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  char v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char *v21;
  char v22;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 128) < 0x90;
  if ((_DWORD)a4 == (char)a4 && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x67, a3, a4, a5, a6, a7, a8);
    v22 = 103;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 103;
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v22);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v21;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 103;
      }
      *(_BYTE *)(v17 + v15) = v18;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v19 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v19 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v19);
    v20 = v11 + 16;
    if (v11 <= 0x3FFFFFFF)
      v20 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  __int16 v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if ((_DWORD)a4 == (__int16)a4 && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x67, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 103);
    v15 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = v11 + 64;
    if (v11 <= 0x3FFFFFFF)
      v16 = v11;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    return 1;
  }
  return result;
}

uint64_t JSC::OpStrcat::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x67, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 103;
  v25 = 103;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 103;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x68, a3, a4, a5, a6, a7, a8);
  v31 = 104;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 104;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 104;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x68, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 104);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x68, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 104;
  v24 = 104;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 104;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToPropertyKey::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3;
  result = JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v10, v12, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v10, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  char v13;
  char v14;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x69, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 105);
  v13 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x69, a3, a4, a5, a6, a7, a8);
  v27 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 105;
  v28 = 105;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 105;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v22 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  v23 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  return 1;
}

uint64_t JSC::OpToPropertyKey::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x69, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 105;
  v24 = 105;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 105;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char *v20;
  char v21;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6A, a3, a4, a5, a6, a7, a8);
  v21 = 106;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 106;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v21);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v20;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 106;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v17 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v17 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  v18 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v18 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
  return 1;
}

uint64_t JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6A, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 106);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpToPropertyKeyOrNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6A, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 106;
  v24 = 106;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 106;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpPushWithScope::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a3;
  v7 = a4;
  result = JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4);
  if ((result & 1) == 0)
  {
    result = JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v6, v7, v9, v10, v11, v12);
    if ((result & 1) == 0)
      return JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v6, v7, v13, v14, v15, v16);
  }
  return result;
}

BOOL JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  char v16;
  char v17;

  v14 = JSC::OpBeloweq::checkImpl<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, a3, a4);
  if (v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6C, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 108);
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    v16 = a3 + 16;
    if (a3 <= 0x3FFFFFFF)
      v16 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
    v17 = a4 + 16;
    if (a4 <= 0x3FFFFFFF)
      v17 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  }
  return v14;
}

uint64_t JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  char *v28;
  char *v29;
  char v30;
  char v31;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6C, a3, a4, a5, a6, a7, a8);
  v30 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v30);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v28;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 108;
  v31 = 108;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 108;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v31);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v29;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v24 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v24 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  v25 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v25 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
  v26 = v12 + 64;
  if (v12 <= 0x3FFFFFFF)
    v26 = v12;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
  return 1;
}

uint64_t JSC::OpPushWithScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6C, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 108;
  v25 = 108;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 108;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6F, a3, a4, a5, a6, a7, a8);
  v31 = 111;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 111;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 111;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6F, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 111;
  v42 = 111;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 111;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpGetParentScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6F, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 111;
  v24 = 111;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 111;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

char *JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;

  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x72, a3, a4, a5, a6, a7, a8);
  v19 = 114;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = 114;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v19);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *result;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = 114;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v20 = a2;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = a2;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v20);
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a1 + v15) = a2;
    }
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v21 = 0;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 0;
  }
  else
  {
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v21);
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 0;
    }
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return result;
}

uint64_t WTF::Vector<JSC::TryContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  _DWORD *v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::TryContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        *(_QWORD *)v20 = 0;
        *v11 = v21;
        v22 = *(_DWORD **)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
          --*v22;
        ++v11;
        ++v20;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::TryContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  _DWORD *v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18;
          *(_QWORD *)v18 = 0;
          *v9 = v19;
          v20 = *(_DWORD **)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
            --*v20;
          ++v9;
          ++v18;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

__n128 WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::TryRange>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 24 * v4;
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v6 = v7;
  result = *(__n128 *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(__n128 *)(v6 + 8) = result;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::TryRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v3;
        do
        {
          v15 = *(_DWORD **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v6 = v15;
          v16 = *(_OWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          *(_OWORD *)(v6 + 8) = v16;
          v17 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v17)
            --*v17;
          v18 = *(_DWORD **)v14;
          *(_QWORD *)v14 = 0;
          if (v18)
            --*v18;
          v14 += 24;
          v6 += 24;
        }
        while (v14 != v3 + 24 * v4);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 24 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v11 = v21;
        v11 += 24;
        v20 += 24;
        v19 -= 24;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 24 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)v9 = v19;
          v9 += 24;
          v18 += 24;
          v17 -= 24;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

BOOL JSC::OpThrow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v17;
  char v18;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x70, a3, a4, a5, a6, a7, a8);
    v18 = 112;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 112;
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v17 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v18);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v17;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 112;
      }
      *(_BYTE *)(v13 + v11) = v14;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  }
  return v9;
}

BOOL JSC::OpThrow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  __int16 v11;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x70, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 112);
    v11 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v11 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  }
  return v9;
}

uint64_t JSC::OpThrow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x70, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = 112;
  v23 = 112;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 112;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

BOOL JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v17;
  char v18;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8A, a3, a4, a5, a6, a7, a8);
    v18 = -118;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = -118;
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v17 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v18);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v17;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = -118;
      }
      *(_BYTE *)(v13 + v11) = v14;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v15 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v15 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  }
  return v9;
}

BOOL JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8A, a3, a4, a5, a6, a7, a8);
    v24 = 0x80;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0x80;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v24);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v22;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 0x80;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = -118;
    v25 = -118;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = -118;
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v25);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v23;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    v20 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v20);
  }
  return v9;
}

uint64_t JSC::OpArgumentCount::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8A, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = -118;
  v23 = -118;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -118;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
}

BOOL JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v24;
  char *v25;
  char v26;
  char v27;
  char v28;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    v10 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x71, a3, a4, a5, a6, a7, a8);
    v26 = 113;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 113;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v26);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v24;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 113;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v18 = a2;
    v27 = v18;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = v18;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v27);
        v19 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v18 = *v25;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v20 + v19) = v18;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    v28 = v10;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v10;
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v28);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v10;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

BOOL JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL8 v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char *v33;
  char *v34;
  _BYTE *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v8 = a2;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    v10 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x71, a3, a4, a5, a6, a7, a8);
    v36 = 0x80;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(unsigned int *)(a1 + 16);
    if (v12 > v13)
    {
      *(_DWORD *)(a1 + 16) = v13 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v13) = 0x80;
      v16 = *(_DWORD *)(a1 + 12);
      v17 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
      {
        v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v36);
        v12 = *(unsigned int *)(a1 + 12);
        v14 = *(_QWORD *)a1;
        v15 = *v33;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v15 = 0x80;
      }
      *(_BYTE *)(v14 + v12) = v15;
      v16 = *(_DWORD *)(a1 + 12) + 1;
      v17 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v17;
    }
    v18 = 113;
    v37 = 113;
    if (v16 > v17)
    {
      *(_DWORD *)(a1 + 16) = v17 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v17) = 113;
      v21 = *(_DWORD *)(a1 + 12);
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v19 = v16;
      if (v16 == *(_DWORD *)(a1 + 8))
      {
        v34 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v37);
        v19 = *(unsigned int *)(a1 + 12);
        v20 = *(_QWORD *)a1;
        v18 = *v34;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v20 + v19) = v18;
      v21 = *(_DWORD *)(a1 + 12) + 1;
      v22 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v21;
      *(_DWORD *)(a1 + 16) = v22;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v38 = v8;
    if (v21 > v22)
    {
      *(_DWORD *)(a1 + 16) = v22 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v21 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v38);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v21) = v8;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v8 >> 8;
    v39 = BYTE1(v8);
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = BYTE1(v8);
      v28 = *(_DWORD *)(a1 + 12);
      v29 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        v35 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v39);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        LOBYTE(v25) = *v35;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      v28 = *(_DWORD *)(a1 + 12) + 1;
      v29 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v28;
      *(_DWORD *)(a1 + 16) = v29;
    }
    v40 = v10;
    if (v28 > v29)
    {
      *(_DWORD *)(a1 + 16) = v29 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
      v30 = *(_DWORD *)(a1 + 12);
      v31 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v28 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v40);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v28) = v10;
      v30 = *(_DWORD *)(a1 + 12) + 1;
      v31 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v30;
      *(_DWORD *)(a1 + 16) = v31;
    }
    v41 = 0;
    if (v30 > v31)
    {
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = 0;
    }
    else
    {
      if (v30 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v41);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v30) = 0;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

uint64_t JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x71, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 113;
  v24 = 113;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 113;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpSwitchChar::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int16 v10;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;

  if (HIWORD(a2))
    return 0;
  v8 = a4;
  v10 = a2;
  v12 = *a3;
  if (!*a3)
  {
    v13 = *((_DWORD *)a3 + 4);
LABEL_4:
    *((_DWORD *)a3 + 1) = v13;
    if (v13 != (__int16)v13)
      return 0;
    goto LABEL_8;
  }
  if (v12 != 1)
  {
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    goto LABEL_4;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_8:
  v14 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v14 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v14)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5B, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v35);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v32;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 91;
  v36 = 91;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 91;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v36);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v33;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  if (*a3 == 1)
  {
    v26 = *((_QWORD *)a3 + 2);
    v27 = (int *)(a3 + 4);
    v28 = *(unsigned int *)(v26 + 28);
    if ((_DWORD)v28 == *(_DWORD *)(v26 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 16, v28 + 1, (unint64_t)v27);
      LOWORD(v24) = 0;
      v28 = *(unsigned int *)(v26 + 28);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = *v34;
    }
    else
    {
      LOWORD(v24) = 0;
      v29 = *(_QWORD *)(v26 + 16);
      v30 = *v27;
    }
    *(_DWORD *)(v29 + 4 * v28) = v30;
    ++*(_DWORD *)(v26 + 28);
  }
  else
  {
    v24 = *((_DWORD *)a3 + 1);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (__int16)v24);
  v31 = v8 + 64;
  if (v8 <= 0x3FFFFFFF)
    v31 = v8;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
  return 1;
}

uint64_t JSC::OpSwitchChar::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v8 = a4;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  v14 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5B, (uint64_t)a3, a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 91;
  v34 = 91;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 91;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v25 = *((_QWORD *)a3 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpSwitchString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int16 v10;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;

  if (HIWORD(a2))
    return 0;
  v8 = a4;
  v10 = a2;
  v12 = *a3;
  if (!*a3)
  {
    v13 = *((_DWORD *)a3 + 4);
LABEL_4:
    *((_DWORD *)a3 + 1) = v13;
    if (v13 != (__int16)v13)
      return 0;
    goto LABEL_8;
  }
  if (v12 != 1)
  {
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    goto LABEL_4;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_8:
  v14 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v14 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v14)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5C, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v35);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v32;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 92;
  v36 = 92;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 92;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v36);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v33;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  if (*a3 == 1)
  {
    v26 = *((_QWORD *)a3 + 2);
    v27 = (int *)(a3 + 4);
    v28 = *(unsigned int *)(v26 + 28);
    if ((_DWORD)v28 == *(_DWORD *)(v26 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 16, v28 + 1, (unint64_t)v27);
      LOWORD(v24) = 0;
      v28 = *(unsigned int *)(v26 + 28);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = *v34;
    }
    else
    {
      LOWORD(v24) = 0;
      v29 = *(_QWORD *)(v26 + 16);
      v30 = *v27;
    }
    *(_DWORD *)(v29 + 4 * v28) = v30;
    ++*(_DWORD *)(v26 + 28);
  }
  else
  {
    v24 = *((_DWORD *)a3 + 1);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (__int16)v24);
  v31 = v8 + 64;
  if (v8 <= 0x3FFFFFFF)
    v31 = v8;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
  return 1;
}

uint64_t JSC::OpSwitchString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v8 = a4;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  v14 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5C, (uint64_t)a3, a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 92;
  v34 = 92;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 92;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v25 = *((_QWORD *)a3 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  v11 = *a2;
  if (*a2)
    *v11 += 2;
  *(_QWORD *)(v10 + 8 * v9) = v11;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return result;
}

void WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::nullopt_t const&>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;

  v2 = *(unsigned int *)(a1 + 12);
  v3 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= v2 + 1)
    v5 = v2 + 1;
  else
    v5 = v4;
  WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v5);
  v6 = (_BYTE *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  *v6 = 0;
  v6[8] = 0;
  ++*(_DWORD *)(a1 + 12);
}

void WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::AtomStringImpl *v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF::AtomStringImpl **)a1;
    v4 = (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<std::optional<WTF::String>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,std::optional<WTF::String>>::move(v3, v4, *(_QWORD *)a1, v5, v6, v7, v8, v9);
    if ((WTF::AtomStringImpl *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(WTF::AtomStringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::VectorBuffer<std::optional<WTF::String>,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
  }
  else
  {
    v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::UniquedStringImpl *>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<std::optional<WTF::String>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = *a2;
  if (*a2)
    *v10 += 2;
  v11 = v9 + 16 * v8;
  *(_QWORD *)v11 = v10;
  *(_BYTE *)(v11 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v8 + 1;
}

BOOL JSC::OpEnumeratorNext::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  unsigned __int16 v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v7 = a7;
  v20 = JSC::OpEnumeratorNext::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6, a7);
  if (v20)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x26, v14, v15, v16, v17, v18, v19);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 38);
    v21 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v21 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
    v22 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v22 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
    v23 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v23 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
    v24 = a5 + 64;
    if (a5 <= 0x3FFFFFFF)
      v24 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
    v25 = a6 + 64;
    if (a6 <= 0x3FFFFFFF)
      v25 = a6;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v7);
  }
  return v20;
}

BOOL JSC::OpEnumeratorNext::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4, int a5, unsigned int a6)
{
  _BOOL4 v6;
  _BOOL4 v8;
  _BOOL4 v10;

  v6 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v6 = (a1 + 0x8000) >> 6 < 0x201;
  if (!v6)
    return 0;
  if (!(a2 <= 0x3FFFFFFF ? (a2 + 0x8000) >> 6 < 0x201 : (a2 - 1073741760) < 0x8000))
    return 0;
  v8 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v8 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v8)
    return 0;
  if (!(a4 <= 0x3FFFFFFF ? (a4 + 0x8000) >> 6 < 0x201 : (a4 - 1073741760) < 0x8000))
    return 0;
  v10 = (a5 - 1073741760) < 0x8000;
  if (a5 <= 0x3FFFFFFF)
    v10 = (a5 + 0x8000) >> 6 < 0x201;
  return a6 < 0x10000 && v10;
}

uint64_t JSC::OpEnumeratorNext::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x26, a3, a4, a5, a6, a7, a8);
  v27 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v27);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v25;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 38;
  v28 = 38;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 38;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v28);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v26;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpEnumeratorHasOwnProperty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8)
{
  unsigned __int16 v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;

  v8 = a8;
  v22 = JSC::OpEnumeratorHasOwnProperty::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6, a7, a8);
  if (v22)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x28, v16, v17, v18, v19, v20, v21);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 40);
    v23 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v23 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
    v24 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v24 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
    v25 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v25 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v25);
    v26 = a5 + 64;
    if (a5 <= 0x3FFFFFFF)
      v26 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
    v27 = a6 + 64;
    if (a6 <= 0x3FFFFFFF)
      v27 = a6;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
    v28 = a7 + 64;
    if (a7 <= 0x3FFFFFFF)
      v28 = a7;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
  }
  return v22;
}

BOOL JSC::OpEnumeratorHasOwnProperty::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v12;

  v7 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v7 = (a1 + 0x8000) >> 6 < 0x201;
  if (!v7)
    return 0;
  if (!(a2 <= 0x3FFFFFFF ? (a2 + 0x8000) >> 6 < 0x201 : (a2 - 1073741760) < 0x8000))
    return 0;
  v9 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v9 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  if (!(a4 <= 0x3FFFFFFF ? (a4 + 0x8000) >> 6 < 0x201 : (a4 - 1073741760) < 0x8000))
    return 0;
  v11 = (a5 - 1073741760) < 0x8000;
  if (a5 <= 0x3FFFFFFF)
    v11 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = (a6 - 1073741760) < 0x8000;
  if (a6 <= 0x3FFFFFFF)
    v12 = (a6 + 0x8000) >> 6 < 0x201;
  return a7 < 0x10000 && v12;
}

uint64_t JSC::OpEnumeratorHasOwnProperty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;
  char v28;
  char v29;

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x28, a3, a4, a5, a6, a7, a8);
  v28 = -126;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -126;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v28);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -126;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 40;
  v29 = 40;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 40;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v29);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v27;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpGetPropertyEnumerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x74, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 116);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpGetPropertyEnumerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x74, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 116;
  v24 = 116;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 116;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char v32;
  char v33;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB2, a3, a4, a5, a6, a7, a8);
  v31 = -78;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -78;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v31);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v28;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -78;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v19 = a2;
  v32 = v19;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = v19;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v32);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v29;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  v24 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v24 = v10;
  v33 = v24;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v24;
  }
  else
  {
    v25 = v22;
    if (v22 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v33);
      v25 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD *)a1;
      v24 = *v30;
    }
    else
    {
      v26 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v26 + v25) = v24;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB2, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 178);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB2, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -78;
  v24 = -78;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -78;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsCallable::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB3, a3, a4, a5, a6, a7, a8);
  v27 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -77;
  v28 = -77;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -77;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v22 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  v23 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  return 1;
}

uint64_t JSC::OpIsCallable::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB3, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -77;
  v24 = -77;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -77;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char *v20;
  char v21;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB4, a3, a4, a5, a6, a7, a8);
  v21 = -76;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -76;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v21);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v20;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -76;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v17 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v17 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  v18 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v18 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
  return 1;
}

uint64_t JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB4, a3, a4, a5, a6, a7, a8);
  v27 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -76;
  v28 = -76;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -76;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v22 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  v23 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  return 1;
}

uint64_t JSC::OpIsConstructor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xB4, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -76;
  v24 = -76;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -76;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char *v20;
  char v21;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAE, a3, a4, a5, a6, a7, a8);
  v21 = -82;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -82;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v21);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v20;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -82;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v17 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v17 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  v18 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v18 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
  return 1;
}

uint64_t JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAE, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 174);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpIsUndefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAE, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -82;
  v24 = -82;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -82;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char *v20;
  char v21;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAA, a3, a4, a5, a6, a7, a8);
  v21 = -86;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -86;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v21);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v20;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -86;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v17 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v17 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  v18 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v18 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
  return 1;
}

uint64_t JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAA, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 170);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpIsEmpty::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xAA, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -86;
  v24 = -86;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -86;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

void JSC::ForInContext::~ForInContext(JSC::ForInContext *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 17);
  if (v10)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_BYTE *)this + 88))
  {
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  v14 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    --*v14;
  v15 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    --*v15;
  v16 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    --*v16;
  v17 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
    --*v17;
  v18 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
    --*v18;
}

BOOL JSC::OpGetRestLength::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = a3 < 0x10000 && v9;
  if (v10)
  {
    v11 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x77, a3, a4, a5, a6, a7, a8);
    v41 = 0x80;
    v13 = *(unsigned int *)(a1 + 12);
    v14 = *(unsigned int *)(a1 + 16);
    if (v13 > v14)
    {
      *(_DWORD *)(a1 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
      v17 = *(_DWORD *)(a1 + 12);
      v18 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
      {
        v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
        v13 = *(unsigned int *)(a1 + 12);
        v15 = *(_QWORD *)a1;
        v16 = *v37;
      }
      else
      {
        v15 = *(_QWORD *)a1;
        v16 = 0x80;
      }
      *(_BYTE *)(v15 + v13) = v16;
      v17 = *(_DWORD *)(a1 + 12) + 1;
      v18 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v17;
      *(_DWORD *)(a1 + 16) = v18;
    }
    v19 = 119;
    v42 = 119;
    if (v17 > v18)
    {
      *(_DWORD *)(a1 + 16) = v18 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v18) = 119;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v20 = v17;
      if (v17 == *(_DWORD *)(a1 + 8))
      {
        v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
        v20 = *(unsigned int *)(a1 + 12);
        v21 = *(_QWORD *)a1;
        v19 = *v38;
      }
      else
      {
        v21 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v21 + v20) = v19;
      v22 = *(_DWORD *)(a1 + 12) + 1;
      v23 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v22;
      *(_DWORD *)(a1 + 16) = v23;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v43 = v8;
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v22 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    v26 = v8 >> 8;
    v44 = BYTE1(v8);
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
      v29 = *(_DWORD *)(a1 + 12);
      v30 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v27 = v24;
      if (v24 == *(_DWORD *)(a1 + 8))
      {
        v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
        v27 = *(unsigned int *)(a1 + 12);
        v28 = *(_QWORD *)a1;
        LOBYTE(v26) = *v39;
      }
      else
      {
        v28 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v28 + v27) = v26;
      v29 = *(_DWORD *)(a1 + 12) + 1;
      v30 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v29;
      *(_DWORD *)(a1 + 16) = v30;
    }
    v45 = v11;
    if (v29 > v30)
    {
      *(_DWORD *)(a1 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v30) = v11;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v29 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v29) = v11;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v11 >> 8;
    v46 = BYTE1(v11);
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v11);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        LOBYTE(v33) = *v40;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v10;
}

uint64_t JSC::OpGetRestLength::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x77, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 119;
  v24 = 119;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 119;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpCreateRest::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  uint64_t result;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a4;
  v11 = a3;
  result = 0;
  v14 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v14 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v14)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x76, a3, a4, a5, a6, a7, a8);
    v50 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v50);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v45;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 118;
    v51 = 118;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 118;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v51);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v46;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v52 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v52);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v53 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v47 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v53);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v47;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    if (v11 > 0x3FFFFFFF)
      v11 += 64;
    v54 = v11;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v11;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v54);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v11;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v35 = v11 >> 8;
    v55 = BYTE1(v11);
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = BYTE1(v11);
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v36 = v33;
      if (v33 == *(_DWORD *)(a1 + 8))
      {
        v48 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v55);
        v36 = *(unsigned int *)(a1 + 12);
        v37 = *(_QWORD *)a1;
        LOBYTE(v35) = *v48;
      }
      else
      {
        v37 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v37 + v36) = v35;
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v56 = v10;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v10;
      v40 = *(_DWORD *)(a1 + 12);
      v41 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v38 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v56);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v38) = v10;
      v40 = *(_DWORD *)(a1 + 12) + 1;
      v41 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v40;
      *(_DWORD *)(a1 + 16) = v41;
    }
    v42 = v10 >> 8;
    v57 = BYTE1(v10);
    if (v40 > v41)
    {
      *(_DWORD *)(a1 + 16) = v41 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v41) = BYTE1(v10);
    }
    else
    {
      v43 = v40;
      if (v40 == *(_DWORD *)(a1 + 8))
      {
        v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v57);
        v43 = *(unsigned int *)(a1 + 12);
        v44 = *(_QWORD *)a1;
        LOBYTE(v42) = *v49;
      }
      else
      {
        v44 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v44 + v43) = v42;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
    return 1;
  }
  return result;
}

uint64_t JSC::OpCreateRest::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char v24;
  char v25;

  v8 = a4;
  v9 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x76, a3, a4, a5, a6, a7, a8);
  v24 = -126;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = -126;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v24);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v22;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = -126;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 118;
  v25 = 118;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 118;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v25);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v23;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  int *v34;
  char v35;
  char v36;
  char v37;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
      goto LABEL_7;
    }
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  if (v13 != (char)v13)
    return 0;
LABEL_7:
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x49, (uint64_t)a3, a4, a5, a6, a7, a8);
  v35 = 73;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 73;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v35);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v32;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = 73;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v20 = a2;
  v36 = v20;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v36);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v33;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v27 = *((_QWORD *)a3 + 2);
    v28 = (int *)(a3 + 4);
    v29 = *(unsigned int *)(v27 + 28);
    if ((_DWORD)v29 == *(_DWORD *)(v27 + 24))
    {
      v34 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 16, v29 + 1, (unint64_t)v28);
      LOBYTE(v23) = 0;
      v29 = *(unsigned int *)(v27 + 28);
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v34;
    }
    else
    {
      LOBYTE(v23) = 0;
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *v28;
    }
    *(_DWORD *)(v30 + 4 * v29) = v31;
    ++*(_DWORD *)(v27 + 28);
  }
  else
  {
    v23 = *((_DWORD *)a3 + 1);
  }
  v37 = v23;
  v24 = *(unsigned int *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = v23;
  }
  else
  {
    if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v37);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, unsigned __int8 *a3)
{
  _BOOL4 v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;

  v4 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v4 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v4)
    return 0;
  result = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::check(a3);
  if ((_DWORD)result)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x49, v8, v9, v10, v11, v12, v13);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 73);
    v14 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v14 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
    v15 = JSC::Fits<JSC::GenericBoundLabel<JSC::JSGeneratorTraits>,(JSC::OpcodeSize)2,std::integral_constant<BOOL,true>>::convert((uint64_t)a3);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
    return 1;
  }
  return result;
}

uint64_t JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  char *v29;
  char *v30;
  unsigned int *v31;
  char v32;
  char v33;

  v11 = *a3;
  if (*a3)
  {
    if (v11 == 1)
    {
      v12 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v11 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v12 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v12 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v12;
  v13 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x49, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = -126;
  v14 = *(unsigned int *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 16);
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = -126;
    v18 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
    {
      v29 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v32);
      v14 = *(unsigned int *)(a1 + 12);
      v16 = *(_QWORD *)a1;
      v17 = *v29;
    }
    else
    {
      v16 = *(_QWORD *)a1;
      v17 = -126;
    }
    *(_BYTE *)(v16 + v14) = v17;
    v18 = *(_DWORD *)(a1 + 12) + 1;
    v19 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v18;
    *(_DWORD *)(a1 + 16) = v19;
  }
  v20 = 73;
  v33 = 73;
  if (v18 > v19)
  {
    *(_DWORD *)(a1 + 16) = v19 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v19) = 73;
  }
  else
  {
    v21 = v18;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v22 = *(_QWORD *)a1;
      v20 = *v30;
    }
    else
    {
      v22 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v22 + v21) = v20;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v24 = *((_QWORD *)a3 + 2);
    v25 = *(unsigned int *)(v24 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v24 + 24))
    {
      v31 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 16, v25 + 1, (unint64_t)v13);
      v23 = 0;
      v25 = *(unsigned int *)(v24 + 28);
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v31;
    }
    else
    {
      v23 = 0;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = *v13;
    }
    *(_DWORD *)(v26 + 4 * v25) = v27;
    ++*(_DWORD *)(v24 + 28);
  }
  else
  {
    v23 = *v13;
  }
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
}

uint64_t JSC::OpYield::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  unsigned __int16 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  if (HIWORD(a2))
    return 0;
  v8 = a3;
  v9 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v9 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x78, a3, a4, a5, a6, a7, a8);
  v25 = 0x80;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(unsigned int *)(a1 + 16);
  if (v12 > v13)
  {
    *(_DWORD *)(a1 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v13) = 0x80;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v12 + 1), (unint64_t)&v25);
      v12 = *(unsigned int *)(a1 + 12);
      v14 = *(_QWORD *)a1;
      v15 = *v23;
    }
    else
    {
      v14 = *(_QWORD *)a1;
      v15 = 0x80;
    }
    *(_BYTE *)(v14 + v12) = v15;
    v16 = *(_DWORD *)(a1 + 12) + 1;
    v17 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
  }
  v18 = 120;
  v26 = 120;
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 120;
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v26);
      v19 = *(unsigned int *)(a1 + 12);
      v20 = *(_QWORD *)a1;
      v18 = *v24;
    }
    else
    {
      v20 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  v21 = v8 + 64;
  if (v8 <= 0x3FFFFFFF)
    v21 = v8;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v21);
  return 1;
}

uint64_t JSC::OpYield::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x78, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = 120;
  v24 = 120;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 120;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

BOOL JSC::OpIteratorOpen::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10)
{
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  unsigned __int16 v32;

  v10 = a7;
  v11 = a6;
  v17 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v18 = *(unsigned __int16 *)(v17 + 28);
  v17 += 28;
  v19 = (v18 | (*(unsigned __int8 *)(v17 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v17 = v18;
  *(_BYTE *)(v17 + 2) = v19;
  v32 = a8;
  v26 = JSC::OpIteratorOpen::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if (v26)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)4, v20, v21, v22, v23, v24, v25);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 4);
    v27 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v27 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
    v28 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v28 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    v29 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v29 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    v30 = a5 + 64;
    if (a5 <= 0x3FFFFFFF)
      v30 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a9);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a10);
  }
  return v26;
}

BOOL JSC::OpIteratorOpen::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v12;

  v9 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v9 = (a1 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  if (!(a2 <= 0x3FFFFFFF ? (a2 + 0x8000) >> 6 < 0x201 : (a2 - 1073741760) < 0x8000))
    return 0;
  v11 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  v12 = (a4 - 1073741760) < 0x8000;
  if (a4 <= 0x3FFFFFFF)
    v12 = (a4 + 0x8000) >> 6 < 0x201;
  if (a5 >= 0x10000)
    v12 = 0;
  if (a6 >= 0x10000)
    v12 = 0;
  if (a7 >= 0x10000)
    v12 = 0;
  return (a9 | a8) < 0x10000 && v12;
}

uint64_t JSC::OpIteratorOpen::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  char v33;
  char v34;

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v13 = a5;
  v14 = a4;
  v15 = a3;
  v18 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v19 = *(unsigned __int16 *)(v18 + 28);
  v18 += 28;
  v20 = (v19 | (*(unsigned __int8 *)(v18 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v18 = v19;
  *(_BYTE *)(v18 + 2) = v20;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)4, a3, a4, a5, a6, a7, a8);
  v33 = -126;
  v21 = *(unsigned int *)(a1 + 12);
  v22 = *(unsigned int *)(a1 + 16);
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = -126;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v33);
      v21 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v24 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
      v24 = -126;
    }
    *(_BYTE *)(v23 + v21) = v24;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = 4;
  v34 = 4;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = 4;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v34);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v32;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a10);
}

BOOL JSC::OpIteratorNext::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  unsigned __int16 v11;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  unsigned __int16 v34;

  v11 = a7;
  v18 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v19 = *(unsigned __int16 *)(v18 + 28);
  v18 += 28;
  v20 = (v19 | (*(unsigned __int8 *)(v18 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v18 = v19;
  *(_BYTE *)(v18 + 2) = v20;
  v34 = a8;
  v27 = JSC::OpIteratorNext::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  if (v27)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)2, v21, v22, v23, v24, v25, v26);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 2);
    v28 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v28 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v28);
    v29 = a3 + 64;
    if (a3 <= 0x3FFFFFFF)
      v29 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v29);
    v30 = a4 + 64;
    if (a4 <= 0x3FFFFFFF)
      v30 = a4;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v30);
    v31 = a5 + 64;
    if (a5 <= 0x3FFFFFFF)
      v31 = a5;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v31);
    v32 = a6 + 64;
    if (a6 <= 0x3FFFFFFF)
      v32 = a6;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v32);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v34);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a9);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a10);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, (unsigned __int16)a11);
  }
  return v27;
}

BOOL JSC::OpIteratorNext::checkImpl<(JSC::OpcodeSize)2,JSC::BytecodeGenerator>(int a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10)
{
  _BOOL4 v10;
  _BOOL4 v12;
  _BOOL4 v14;

  v10 = (a1 - 1073741760) < 0x8000;
  if (a1 <= 0x3FFFFFFF)
    v10 = (a1 + 0x8000) >> 6 < 0x201;
  if (!v10)
    return 0;
  if (!(a2 <= 0x3FFFFFFF ? (a2 + 0x8000) >> 6 < 0x201 : (a2 - 1073741760) < 0x8000))
    return 0;
  v12 = (a3 - 1073741760) < 0x8000;
  if (a3 <= 0x3FFFFFFF)
    v12 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v12)
    return 0;
  if (!(a4 <= 0x3FFFFFFF ? (a4 + 0x8000) >> 6 < 0x201 : (a4 - 1073741760) < 0x8000))
    return 0;
  v14 = (a5 - 1073741760) < 0x8000;
  if (a5 <= 0x3FFFFFFF)
    v14 = (a5 + 0x8000) >> 6 < 0x201;
  if (a6 >= 0x10000)
    v14 = 0;
  if (a7 >= 0x10000)
    v14 = 0;
  if (a8 >= 0x10000)
    v14 = 0;
  return (a10 | a9) < 0x10000 && v14;
}

uint64_t JSC::OpIteratorNext::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;
  char v34;
  char v35;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  v19 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v20 = *(unsigned __int16 *)(v19 + 28);
  v19 += 28;
  v21 = (v20 | (*(unsigned __int8 *)(v19 + 2) << 16) | 0x20000u) >> 16;
  *(_WORD *)v19 = v20;
  *(_BYTE *)(v19 + 2) = v21;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)2, a3, a4, a5, a6, a7, a8);
  v34 = -126;
  v22 = *(unsigned int *)(a1 + 12);
  v23 = *(unsigned int *)(a1 + 16);
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = -126;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 8))
    {
      v32 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v25 = *v32;
    }
    else
    {
      v24 = *(_QWORD *)a1;
      v25 = -126;
    }
    *(_BYTE *)(v24 + v22) = v25;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = 2;
  v35 = 2;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = 2;
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v33 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v35);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      v28 = *v33;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v16);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v15);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a10);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a11);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),JSC::ForInContext::finalize(JSC::BytecodeGenerator &,JSC::UnlinkedCodeBlockGenerator *,unsigned int)::$_0>::implFunction(uint64_t result, int a2)
{
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 8) + 4) == a2)
    **(_BYTE **)(result + 24) = 1;
  return result;
}

BOOL JSC::OpToThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  _BOOL8 v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  char *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  v10 = (a5 | a4) < 0x10000 && v9;
  if (v10)
  {
    v11 = a5;
    v12 = a4;
    v13 = a3;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2A, a3, a4, a5, a6, a7, a8);
    v55 = 0x80;
    v15 = *(unsigned int *)(a1 + 12);
    v16 = *(unsigned int *)(a1 + 16);
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
      v19 = *(_DWORD *)(a1 + 12);
      v20 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
      {
        v50 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v55);
        v15 = *(unsigned int *)(a1 + 12);
        v17 = *(_QWORD *)a1;
        v18 = *v50;
      }
      else
      {
        v17 = *(_QWORD *)a1;
        v18 = 0x80;
      }
      *(_BYTE *)(v17 + v15) = v18;
      v19 = *(_DWORD *)(a1 + 12) + 1;
      v20 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v19;
      *(_DWORD *)(a1 + 16) = v20;
    }
    v21 = 42;
    v56 = 42;
    if (v19 > v20)
    {
      *(_DWORD *)(a1 + 16) = v20 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 42;
      v24 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v22 = v19;
      if (v19 == *(_DWORD *)(a1 + 8))
      {
        v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v56);
        v22 = *(unsigned int *)(a1 + 12);
        v23 = *(_QWORD *)a1;
        v21 = *v51;
      }
      else
      {
        v23 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v23 + v22) = v21;
      v24 = *(_DWORD *)(a1 + 12) + 1;
      v25 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v25;
    }
    if (v8 > 0x3FFFFFFF)
      v8 += 64;
    v57 = v8;
    if (v24 > v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v25) = v8;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v24 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v57);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v24) = v8;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = v8 >> 8;
    v58 = BYTE1(v8);
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(v8);
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        v52 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v58);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        LOBYTE(v28) = *v52;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v59 = v13;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v13;
      v33 = *(_DWORD *)(a1 + 12);
      v34 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v31 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v59);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v31) = v13;
      v33 = *(_DWORD *)(a1 + 12) + 1;
      v34 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v33;
      *(_DWORD *)(a1 + 16) = v34;
    }
    v60 = 0;
    if (v33 > v34)
    {
      *(_DWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v34) = 0;
      v35 = *(_DWORD *)(a1 + 12);
      v36 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v33 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v60);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v33) = 0;
      v35 = *(_DWORD *)(a1 + 12) + 1;
      v36 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v35;
      *(_DWORD *)(a1 + 16) = v36;
    }
    v61 = v12;
    if (v35 > v36)
    {
      *(_DWORD *)(a1 + 16) = v36 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v36) = v12;
      v37 = *(_DWORD *)(a1 + 12);
      v38 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v35 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v61);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v12;
      v37 = *(_DWORD *)(a1 + 12) + 1;
      v38 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v37;
      *(_DWORD *)(a1 + 16) = v38;
    }
    v39 = v12 >> 8;
    v62 = BYTE1(v12);
    if (v37 > v38)
    {
      *(_DWORD *)(a1 + 16) = v38 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v38) = BYTE1(v12);
      v42 = *(_DWORD *)(a1 + 12);
      v43 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v40 = v37;
      if (v37 == *(_DWORD *)(a1 + 8))
      {
        v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v62);
        v40 = *(unsigned int *)(a1 + 12);
        v41 = *(_QWORD *)a1;
        LOBYTE(v39) = *v53;
      }
      else
      {
        v41 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v41 + v40) = v39;
      v42 = *(_DWORD *)(a1 + 12) + 1;
      v43 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v42;
      *(_DWORD *)(a1 + 16) = v43;
    }
    v63 = v11;
    if (v42 > v43)
    {
      *(_DWORD *)(a1 + 16) = v43 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v11;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v42 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v63);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v42) = v11;
      v44 = *(_DWORD *)(a1 + 12) + 1;
      v45 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v44;
      *(_DWORD *)(a1 + 16) = v45;
    }
    v46 = v11 >> 8;
    v64 = BYTE1(v11);
    if (v44 > v45)
    {
      *(_DWORD *)(a1 + 16) = v45 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v45) = BYTE1(v11);
    }
    else
    {
      v47 = v44;
      if (v44 == *(_DWORD *)(a1 + 8))
      {
        v54 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v64);
        v47 = *(unsigned int *)(a1 + 12);
        v48 = *(_QWORD *)a1;
        LOBYTE(v46) = *v54;
      }
      else
      {
        v48 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v48 + v47) = v46;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v10;
}

uint64_t JSC::OpToThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x2A, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 42;
  v26 = 42;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 42;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

void JSC::Identifier::fromString(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, rlim_t *a9@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t StatusReg;
  uint64_t casual;
  rlim_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  _opaque_pthread_t *v30;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *stackaddr_np;
  _opaque_pthread_t *v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  _opaque_pthread_t *v47;
  rlim_t rlim_cur;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v58[2];
  int v59;
  rlimit v60;
  char v61;
  char v62;
  rlimit *v63;

  if (a3 != 1)
  {
    if (!a3)
    {
      v20 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
      v22 = WTF::StringImpl::s_emptyAtomString + 2;
      goto LABEL_20;
    }
    if (!a2)
    {
      v20 = 0;
      goto LABEL_19;
    }
    v10 = 0;
    v58[0] = a2;
    v58[1] = a3;
    v11 = -1640531527;
    do
    {
      v12 = ((v11 + *((unsigned __int8 *)a2 + v10)) << 16) ^ (*((unsigned __int8 *)a2 + v10 + 1) << 11) ^ (v11 + *((unsigned __int8 *)a2 + v10));
      v11 = v12 + (v12 >> 11);
      v13 = v10 + 3;
      v10 += 2;
    }
    while (v13 < a3);
    if ((a3 & 1) != 0)
      v11 = ((v11 + *((unsigned __int8 *)a2 + a3 - 1)) ^ ((v11 + *((unsigned __int8 *)a2 + a3 - 1)) << 11))
          + (((v11 + *((unsigned __int8 *)a2 + a3 - 1)) ^ ((v11 + *((unsigned __int8 *)a2 + a3 - 1)) << 11)) >> 17);
    v14 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
    v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
    v16 = (v15 ^ (v15 << 10)) & 0xFFFFFF;
    if (!v16)
      v16 = 0x800000;
    v59 = v16;
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
LABEL_13:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      casual = *(_QWORD *)(StatusReg + 736);
      if (casual)
        goto LABEL_14;
      v23 = atomic_load(&WTF::initialize(void)::onceKey);
      if (v23 != -1)
      {
        v60.rlim_cur = (rlim_t)&v62;
        v63 = &v60;
        std::__call_once(&WTF::initialize(void)::onceKey, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
      }
      v24 = *(_QWORD *)(StatusReg + 752);
      if (v24)
      {
        v25 = (_BYTE *)(v24 + 9408);
        *(_BYTE *)(v24 + 9408) = 1;
        v26 = *(unsigned int *)(v24 + 9424);
        if ((_DWORD)v26)
        {
          *(_DWORD *)(v24 + 9424) = v26 - *(_DWORD *)(v24 + 9428);
          casual = *(_QWORD *)(v24 + 9416) - v26;
LABEL_29:
          *v25 = 0;
LABEL_30:
          *(_OWORD *)casual = 0u;
          *(_OWORD *)(casual + 16) = 0u;
          *(_QWORD *)(casual + 96) = 0;
          *(_OWORD *)(casual + 64) = 0u;
          *(_OWORD *)(casual + 80) = 0u;
          *(_OWORD *)(casual + 32) = 0u;
          *(_OWORD *)(casual + 48) = 0u;
          *(_DWORD *)casual = 1;
          *(_OWORD *)(casual + 8) = 0u;
          v27 = (unint64_t *)(casual + 8);
          *(_OWORD *)(casual + 24) = 0u;
          do
          {
            v28 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
            v29 = v28 + 1;
          }
          while (__stlxr(v29, (unsigned int *)&WTF::ThreadLike::s_uid));
          *(_DWORD *)(casual + 48) = v29;
          *(_QWORD *)(casual + 52) = 0;
          *(_QWORD *)(casual + 68) = 0;
          *(_QWORD *)(casual + 60) = 0;
          *(_DWORD *)(casual + 76) = 0;
          *(_QWORD *)(casual + 88) = 0;
          *(_QWORD *)(casual + 96) = 0;
          v30 = pthread_self();
          if (__ldaxr(v27))
          {
            __clrex();
          }
          else if (!__stxr(1uLL, v27))
          {
LABEL_35:
            *(_QWORD *)(casual + 40) = v30;
            *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v30);
            v32 = __ldxr(v27);
            if (v32 == 1)
            {
              if (!__stlxr(0, v27))
                goto LABEL_48;
            }
            else
            {
              __clrex();
            }
            WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_48:
            stackaddr_np = *(char **)(casual + 16);
            if (!stackaddr_np)
            {
              v46 = pthread_main_np();
              v47 = pthread_self();
              stackaddr_np = (char *)pthread_get_stackaddr_np(v47);
              if (v46)
              {
                getrlimit(3, &v60);
                if (v60.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                  rlim_cur = 0x800000;
                else
                  rlim_cur = v60.rlim_cur;
              }
              else
              {
                rlim_cur = pthread_get_stacksize_np(v47);
              }
              *(_QWORD *)(casual + 16) = stackaddr_np;
              *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
            }
            *(_QWORD *)(casual + 80) = stackaddr_np;
            *(_QWORD *)(casual + 56) = casual + 64;
            v42 = pthread_self();
            if (pthread_equal(v42, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
            {
              v43 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
              if (v43 != -1)
              {
                v60.rlim_cur = (rlim_t)&v62;
                v63 = &v60;
                std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
              }
              *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
            }
            *(_QWORD *)(StatusReg + 736) = casual;
            pthread_key_init_np();
LABEL_14:
            WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(casual + 56), (uint64_t)v58, a4, a5, a6, a7, a8, (uint64_t)&v60);
            v20 = 16 * *(unsigned int *)v60.rlim_cur;
            if (v61)
            {
              v21 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
              if (v21 == 1)
                goto LABEL_16;
            }
            else
            {
              *(_DWORD *)v20 += 2;
              v33 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
              if (v33 == 1)
              {
LABEL_16:
                if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                {
LABEL_19:
                  v22 = *(_DWORD *)v20;
                  *(_DWORD *)v20 += 2;
                  if (v22)
                  {
LABEL_20:
                    *(_DWORD *)v20 = v22;
                    goto LABEL_21;
                  }
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, a2, a3, a4, a5, a6, a7, a8);
                  v39 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                  if (!v39)
                  {
                    pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
                    goto LABEL_21;
                  }
                  if (!(v20 >> 43)
                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
                  {
                    goto LABEL_44;
                  }
                  if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
                  {
                    v34 = 0;
                  }
                  else
                  {
                    v34 = (*(_DWORD *)((char *)off_1ECF425F8
                                     + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                     + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v34 == 1)
                    {
LABEL_44:
                      v40 = *(unsigned int *)(v39 + 8000);
                      if (v40 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v39, v20, (os_unfair_lock_s *)5, v34, v35, v36, v37, v38);
                      }
                      else
                      {
                        *(_QWORD *)(v39 + 8 * v40) = v20 | 0x5000000000000;
                        *(_DWORD *)(v39 + 8000) = v40 + 1;
                      }
                      goto LABEL_21;
                    }
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v39, v20, 1, v34, v35, v36, v37, v38);
                  goto LABEL_21;
                }
LABEL_40:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
                goto LABEL_19;
              }
            }
            __clrex();
            goto LABEL_40;
          }
          WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
          goto LABEL_35;
        }
        v49 = *(_QWORD *)(v24 + 9448);
        v50 = *(_QWORD *)(v24 + 9432);
        if (v49)
        {
LABEL_69:
          v51 = __clz(v49);
          *(_QWORD *)(v24 + 9448) = v49 & ~(0x8000000000000000 >> v51);
          casual = v50 + 16 * v51;
          goto LABEL_29;
        }
        if (*(_BYTE *)(v24 + 9413) == 6)
        {
          v52 = *(_DWORD *)(v24 + 9444);
          v53 = *(unsigned int *)(v24 + 9440);
          if (v53 < v52)
          {
            *(_QWORD *)&v25[8 * v53 + 56] = 0;
            v54 = (unint64_t *)(v24 + 8 * v53 + 9472);
            v55 = v52 - 1 - v53;
            while (v55)
            {
              v50 += 1024;
              v57 = *v54++;
              v56 = v57;
              LODWORD(v53) = v53 + 1;
              --v55;
              if (v57)
              {
                v49 = __rbit64(v56);
                *(_DWORD *)(v24 + 9440) = v53;
                *(_QWORD *)(v24 + 9432) = v50;
                goto LABEL_69;
              }
            }
            *(_DWORD *)(v24 + 9440) = v52;
          }
        }
        *v25 = 0;
      }
      casual = bmalloc_allocate_casual(104, 1);
      goto LABEL_30;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 44265))
  {
    v44 = *(_QWORD *)(a1 + 8 * *(unsigned __int8 *)a2 + 42216);
    v20 = *(_QWORD *)(v44 + 8);
    if ((v20 & 1) != 0)
      v45 = 0;
    else
      v45 = *(_DWORD **)(v44 + 8);
    *v45 += 2;
  }
  else
  {
    LOBYTE(v58[0]) = *(_BYTE *)a2;
    WTF::AtomStringImpl::add((uint64_t)v58, 1uLL, a4, a5, a6, a7, a8, &v60);
    v20 = v60.rlim_cur;
  }
LABEL_21:
  *a9 = v20;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ArrayNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_1>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  JSC::BytecodeGenerator::emitDirectPutByVal(a2, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4), *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4), a3, a5, a6, a7, a8);
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned int *)(v11 + 292);
  *(_DWORD *)(v11 + 292) = v12 + 1;
  result = JSC::OpInc::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v10, v12, v13, v14, v15, v16, v17);
  if ((result & 1) == 0)
  {
    result = JSC::OpInc::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v10, v12, v19, v20, v21, v22, v23);
    if ((result & 1) == 0)
      return JSC::OpInc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v10, v12, v24, v25, v26, v27, v28);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::UniquedStringImpl *,WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::UniquedStringImpl *,std::pair<JSC::PropertyNode *,JSC::PropertyNode *>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<std::pair<JSC::PropertyNode *,JSC::PropertyNode *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 24 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = *(_DWORD *)(v25 + 16);
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(v25 + 32);
        v29 = 0;
        v30 = v28 >> 8;
        do
        {
          v31 = v30 & v27;
          v32 = (_QWORD *)(v26 + 24 * v31);
          v30 = ++v29 + v31;
        }
        while (*v32);
        v33 = *(_OWORD *)v24;
        v32[2] = v24[2];
        *(_OWORD *)v32 = v33;
        if (v24 == (uint64_t *)a3)
          v23 = v32;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_15;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_15:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

__n128 WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::UnlinkedFunctionExecutable::ClassElementDefinition>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  result = *(__n128 *)(v3 + 21);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 + 8);
  *(__n128 *)(v4 + 21) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 40 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x6666667)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 40 * v8;
    v11 = WTF::fastMalloc((WTF *)(40 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v19 = v11;
      v20 = v5;
      do
      {
        v21 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)v19 = v21;
        v22 = *(_OWORD *)(v20 + 8);
        *(_OWORD *)(v19 + 21) = *(_OWORD *)(v20 + 21);
        *(_OWORD *)(v19 + 8) = v22;
        JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition((WTF::StringImpl **)v20, v12, v13, v14, v15, v16, v17, v18);
        v20 = v23 + 40;
        v19 += 40;
      }
      while (v20 != v5 + 40 * v9);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 40 * v4;
      v9 = WTF::fastMalloc((WTF *)(40 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v17 = v9;
        v18 = v6;
        do
        {
          v19 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)v17 = v19;
          v20 = *(_OWORD *)(v18 + 8);
          *(_OWORD *)(v17 + 21) = *(_OWORD *)(v18 + 21);
          *(_OWORD *)(v17 + 8) = v20;
          JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition((WTF::StringImpl **)v18, v10, v11, v12, v13, v14, v15, v16);
          v18 = v21 + 40;
          v17 += 40;
        }
        while (v18 != v6 + 40 * v7);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_DWORD *WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ApplyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_1>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *result;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  int v107;
  uint64_t v108;
  _DWORD *v109;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v105, a2, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v104, a2, v11, v12, v13, v14, v15, v16);
  v17 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v18 = **(_QWORD **)(a1 + 32);
  v24 = JSC::BytecodeGenerator::emitLoad(a2, 0, 0xFFFE000000000000, v19, v20, v21, v22, v23);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v17, v18, (uint64_t)v24, v25, v26, v27, v28, v29) & 1) == 0)
  {
    v35 = *(_DWORD *)(v17 + 4);
    v36 = *(unsigned int *)(v18 + 4);
    v37 = v24[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v35, v36, v37, v31, v32, v33, v34) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v35, v36, v37, v31, v32, v33, v34) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v35, v36, v37, v31, v32, v33, v34);
    }
  }
  v38 = v105;
  JSC::BytecodeGenerator::emitJumpIfFalse(a2, v17, (uint64_t)v105, v30, v31, v32, v33, v34);
  v44 = **(int ***)(a1 + 16);
  if ((int *)(a2 + 208) != v44 && v44 != 0 && v44 != (int *)a3)
    JSC::BytecodeGenerator::emitMove(a2, v44, a3, v39, v40, v41, v42, v43);
  JSC::BytecodeGenerator::emitLoad(a2, **(int ***)(a1 + 32), 0xFFFE000000000001, v39, v40, v41, v42, v43);
  v53 = (_DWORD *)v104;
  *(_BYTE *)(v104 + 8) = 1;
  v54 = v53[1];
  if ((_DWORD)v54 == -1)
    v55 = (unint64_t)v53;
  else
    v55 = v53[1];
  if ((_DWORD)v54 == -1)
    v56 = 1;
  else
    v56 = 2;
  if (v54 == 0xFFFFFFFFLL)
    v57 = 1;
  else
    v57 = 2;
  LOBYTE(v106) = v57;
  v107 = 0;
  v108 = a2;
  v109 = (_DWORD *)v55;
  if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v106, v47, v48, v49, v50, v51, v52) & 1) == 0)
  {
    LOBYTE(v106) = v56;
    v107 = 0;
    v108 = a2;
    v109 = (_DWORD *)v55;
    if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, (unsigned __int8 *)&v106, v58, v59, v60, v61, v62, v63) & 1) == 0)
    {
      LOBYTE(v106) = v56;
      v107 = 0;
      v108 = a2;
      v109 = (_DWORD *)v55;
      JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, (uint64_t)&v106);
    }
  }
  v64 = *(_DWORD *)(a2 + 16);
  JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v38, a2, v64, v59, v60, v61, v62, v63);
  v65 = *(_QWORD *)(a2 + 24);
  v66 = *(unsigned int *)(v65 + 28);
  if (!(_DWORD)v66 || v64 != *(_DWORD *)(*(_QWORD *)(v65 + 16) + 4 * v66 - 4))
  {
    v106 = v64;
    v67 = (_QWORD *)(v65 + 16);
    if ((_DWORD)v66 == *(_DWORD *)(v65 + 24))
      *(_DWORD *)(*(_QWORD *)(v65 + 16) + 4 * *(unsigned int *)(v65 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v66 + 1, (unint64_t)&v106);
    else
      *(_DWORD *)(*v67 + 4 * v66) = v64;
    ++*(_DWORD *)(v65 + 28);
    *(_DWORD *)(a2 + 36) = 115;
  }
  v68 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  v69 = **(_QWORD **)(a1 + 32);
  v75 = JSC::BytecodeGenerator::emitLoad(a2, 0, 0xFFFE000000000001, v70, v71, v72, v73, v74);
  if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a2, v68, v69, (uint64_t)v75, v76, v77, v78, v79, v80) & 1) == 0)
  {
    v86 = *(_DWORD *)(v68 + 4);
    v87 = *(unsigned int *)(v69 + 4);
    v88 = v75[1];
    if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v86, v87, v88, v82, v83, v84, v85) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v86, v87, v88, v82, v83, v84, v85) & 1) == 0)
    {
      JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v86, v87, v88, v82, v83, v84, v85);
    }
  }
  JSC::BytecodeGenerator::emitJumpIfFalse(a2, v68, (uint64_t)v53, v81, v82, v83, v84, v85);
  v94 = **(int ***)(a1 + 24);
  if ((int *)(a2 + 208) != v94 && v94 && v94 != (int *)a3)
    JSC::BytecodeGenerator::emitMove(a2, v94, a3, v89, v90, v91, v92, v93);
  JSC::BytecodeGenerator::emitLoad(a2, **(int ***)(a1 + 32), 0xFFFE000000000002, v89, v90, v91, v92, v93);
  v95 = *(_DWORD *)(a2 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v53, a2, v95, v96, v97, v98, v99, v100);
  v102 = *(_DWORD **)(a2 + 24);
  v103 = v102[7];
  if (!(_DWORD)v103 || v95 != *(_DWORD *)(*((_QWORD *)v102 + 2) + 4 * v103 - 4))
  {
    v106 = v95;
    result = v102 + 4;
    if ((_DWORD)v103 == v102[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v103 + 1, (unint64_t)&v106);
      *(_DWORD *)(*((_QWORD *)v102 + 2) + 4 * v102[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v103) = v95;
    }
    ++v102[7];
    *(_DWORD *)(a2 + 36) = 115;
  }
  --*v53;
  --*v38;
  return result;
}

_QWORD *WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionNode *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::ExpressionNode *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::ExpressionNode *,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::ExpressionNode *,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t JSC::OpNeqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA7, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 167);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpNeqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA7, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -89;
  v24 = -89;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -89;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char *v20;
  char v21;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 128) < 0x90;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA9, a3, a4, a5, a6, a7, a8);
  v21 = -87;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -87;
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v21);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v20;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -87;
    }
    *(_BYTE *)(v15 + v13) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v17 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v17 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v17);
  v18 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v18 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v18);
  return 1;
}

uint64_t JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char *v25;
  char *v26;
  char v27;
  char v28;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA9, a3, a4, a5, a6, a7, a8);
  v27 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v25 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v25;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -87;
  v28 = -87;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -87;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v28);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  v22 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v22 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v22);
  v23 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v23 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v23);
  return 1;
}

uint64_t JSC::OpUnsigned::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA9, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -87;
  v24 = -87;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -87;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t JSC::OpEqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  __int16 v13;
  __int16 v14;

  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA6, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 166);
  v13 = a2 + 64;
  if (a2 <= 0x3FFFFFFF)
    v13 = a2;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  v14 = v10 + 64;
  if (v10 <= 0x3FFFFFFF)
    v14 = v10;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  return 1;
}

uint64_t JSC::OpEqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA6, a3, a4, a5, a6, a7, a8);
  v23 = -126;
  v11 = *(unsigned int *)(a1 + 12);
  v12 = *(unsigned int *)(a1 + 16);
  if (v11 > v12)
  {
    *(_DWORD *)(a1 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v12) = -126;
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
      v11 = *(unsigned int *)(a1 + 12);
      v13 = *(_QWORD *)a1;
      v14 = *v21;
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = -126;
    }
    *(_BYTE *)(v13 + v11) = v14;
    v15 = *(_DWORD *)(a1 + 12) + 1;
    v16 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v15;
    *(_DWORD *)(a1 + 16) = v16;
  }
  v17 = -90;
  v24 = -90;
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -90;
  }
  else
  {
    v18 = v15;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v17 = *v22;
    }
    else
    {
      v19 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v19 + v18) = v17;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::BytecodeGenerator &,JSC::RegisterID *),JSC::ForOfNode::emitBytecode(JSC::BytecodeGenerator &,JSC::RegisterID *)::$_0>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  int v34;
  unsigned int v35;
  int v38;
  BOOL v39;
  int v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  _DWORD *v65;
  _DWORD *v66;
  int *v67;
  int v68;
  int v69;
  unsigned int v70;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  BOOL v92;
  int v94;
  BOOL v95;
  int v97;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int v108;
  int v109;
  unsigned int v110;
  int v113;
  int v114;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  WTF::AtomStringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char v141;
  uint64_t result;
  BOOL v143;
  uint64_t v144;
  int v145;
  int v146;
  unsigned int v147;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  int v156;
  int v157;
  unsigned int v158;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int v207;
  WTF::StringImpl *v208[2];
  int *v209;
  int v210;
  char v211;
  int v212;

  v6 = *(_QWORD *)(a1 + 16);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 128) + 112))(*(_QWORD *)(v6 + 128));
  v12 = *(_QWORD **)(v6 + 128);
  if (v11)
  {
    v13 = (uint64_t *)v12[4];
    JSC::BytecodeGenerator::variable((uint64_t)v208, a2, (uint64_t)v13, 0, v7, v8, v9, v10);
    v19 = v209;
    if (v209)
    {
      if ((v210 & 2) != 0)
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v210, v211, v14, v15, v16, v17, v18);
      if ((int *)(a2 + 208) != v19 && v19 != (int *)a3)
        JSC::BytecodeGenerator::emitMove(a2, v19, a3, v14, v15, v16, v17, v18);
    }
    else
    {
      if (!*(_BYTE *)(a2 + 712))
      {
        v90 = *(_DWORD *)(v6 + 40);
        v89 = *(_DWORD *)(v6 + 44);
        v91 = *(_DWORD *)(v6 + 48);
        v92 = v90 == -1 && v89 == -1;
        if (!v92 || v91 != -1)
        {
          v94 = *(_DWORD *)(v6 + 56);
          v95 = *(_DWORD *)(v6 + 52) == -1 && v94 == -1;
          if (!v95 || *(_DWORD *)(v6 + 60) != -1)
          {
            v97 = *(_DWORD *)(v6 + 68);
            if ((*(_DWORD *)(v6 + 64) & v97 & *(_DWORD *)(v6 + 72)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
            {
              v99 = *(_QWORD *)(a2 + 192);
              v100 = *(_DWORD *)(v99 + 176);
              v101 = v89 - v100;
              v46 = v91 >= v100;
              v102 = v91 - v100;
              if (!v46)
                v102 = 0;
              v46 = v101 >= v102;
              v103 = v101 - v102;
              if (v46)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v101, v89 - v94, v97 - v89, (v90 + ~*(_DWORD *)(v99 + 184)) | (unint64_t)(v103 << 32));
            }
          }
        }
      }
      if ((v210 & 2) != 0)
        JSC::BytecodeGenerator::emitReadOnlyExceptionIfNeeded(a2, v210, v211, v14, v15, v16, v17, v18);
      v104 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a2, 0, (unsigned __int8 *)v208, v14, v15, v16, v17, v18);
      v107 = v104;
      if (v104)
        ++*v104;
      v109 = *(_DWORD *)(v6 + 40);
      v108 = *(_DWORD *)(v6 + 44);
      v110 = *(_DWORD *)(v6 + 48);
      if (v109 != -1 || v108 != -1 || v110 != -1)
      {
        v113 = *(_DWORD *)(v6 + 56);
        if (*(_DWORD *)(v6 + 52) != -1 || v113 != -1 || *(_DWORD *)(v6 + 60) != -1)
        {
          v114 = *(_DWORD *)(v6 + 68);
          if ((*(_DWORD *)(v6 + 64) & v114 & *(_DWORD *)(v6 + 72)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
          {
            v116 = *(_QWORD *)(a2 + 192);
            v117 = *(_DWORD *)(v116 + 176);
            v118 = v108 - v117;
            v46 = v110 >= v117;
            v119 = v110 - v117;
            if (!v46)
              v119 = 0;
            v46 = v118 >= v119;
            v120 = v118 - v119;
            if (v46)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v118, v108 - v113, v114 - v108, (v109 + ~*(_DWORD *)(v116 + 184)) | (unint64_t)(v120 << 32));
          }
        }
      }
      JSC::BytecodeGenerator::emitPutToScope(a2, (uint64_t)v107, (uint64_t)v208, a3, *(_BYTE *)(a2 + 712) != 0, 2, v105, v106);
      if (v107)
        --*v107;
    }
    v121 = *(unsigned int **)(v6 + 128);
    v122 = (uint64_t)(v121 + 2);
    v123 = *v13;
    if (*v13)
      LODWORD(v123) = *(_DWORD *)(v123 + 4);
    v124 = v121[2];
    v125 = v121[3];
    v126 = v121[4];
    v206 = v124 | ((unint64_t)(v125 + v123) << 32);
    v207 = v126;
    JSC::BytecodeGenerator::emitProfileType((uint64_t *)a2, a3, (uint64_t)v208, v122, (uint64_t)&v206, v16, v17, v18);
    v129 = v208[0];
    v208[0] = 0;
    if (v129)
    {
      if (*(_DWORD *)v129 == 2)
      {
        WTF::StringImpl::~StringImpl(v129, v127, v128, v49, v50, v51, v52, v53);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
      }
      else
      {
        *(_DWORD *)v129 -= 2;
      }
    }
  }
  else
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*v12 + 136))(v12);
    v27 = *(_QWORD *)(v6 + 128);
    if (v20)
    {
      v28 = *(_QWORD *)(v27 + 32);
      v29 = *(_BYTE *)(a2 + 709);
      v30 = *(_BYTE *)(a2 + 710);
      *(_WORD *)(a2 + 709) = 0;
      if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
      {
        *(_BYTE *)(a2 + 706) = 1;
        v31 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
      }
      else
      {
        if (*(_BYTE *)(v28 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
        {
          if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v28 + 8)
            || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v28 + 12)
            || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v28 + 16) ? (v143 = *(_DWORD *)(a2 + 748) == 5) : (v143 = 0), !v143))
          {
            v144 = *(_QWORD *)(v28 + 8);
            *(_DWORD *)(a2 + 744) = *(_DWORD *)(v28 + 16);
            *(_QWORD *)(a2 + 736) = v144;
            *(_DWORD *)(a2 + 748) = 5;
            v145 = *(_DWORD *)(v28 + 8);
            v146 = *(_DWORD *)(v28 + 12);
            v147 = *(_DWORD *)(v28 + 16);
            if (v145 != -1 || v146 != -1 || v147 != -1)
            {
              v150 = *(_QWORD *)(a2 + 192);
              v151 = *(_DWORD *)(v150 + 176);
              v21 = v146 - v151;
              v152 = v147 - v151;
              if (v147 < v151)
                v152 = 0;
              v46 = v21 >= v152;
              v153 = v21 - v152;
              if (v46)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v21, 0, 0, (v145 + ~*(_DWORD *)(v150 + 184)) | (unint64_t)(v153 << 32));
            }
            JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v21, v22, v23, v24, v25, v26);
          }
        }
        v31 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, a2, 0);
      }
      v32 = v31;
      *(_BYTE *)(a2 + 710) = v30;
      *(_BYTE *)(a2 + 709) = v29;
      if (v31)
        ++*v31;
      v34 = *(_DWORD *)(v27 + 52);
      v33 = *(_DWORD *)(v27 + 56);
      v35 = *(_DWORD *)(v27 + 60);
      if (v34 != -1 || v33 != -1 || v35 != -1)
      {
        v38 = *(_DWORD *)(v27 + 68);
        v39 = *(_DWORD *)(v27 + 64) == -1 && v38 == -1;
        if (!v39 || *(_DWORD *)(v27 + 72) != -1)
        {
          v41 = *(_DWORD *)(v27 + 80);
          if ((*(_DWORD *)(v27 + 76) & v41 & *(_DWORD *)(v27 + 84)) != 0xFFFFFFFF && *(_BYTE *)(a2 + 707) == 0)
          {
            v43 = *(_QWORD *)(a2 + 192);
            v44 = *(_DWORD *)(v43 + 176);
            v45 = v33 - v44;
            v46 = v35 >= v44;
            v47 = v35 - v44;
            if (!v46)
              v47 = 0;
            v46 = v45 >= v47;
            v48 = v45 - v47;
            if (v46)
              JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v45, v33 - v38, v41 - v33, (v34 + ~*(_DWORD *)(v43 + 184)) | (unint64_t)(v48 << 32));
          }
        }
      }
      JSC::BaseDotNode::emitPutProperty(v27, a2, (uint64_t)v32, a3);
      if ((*(_BYTE *)(a2 + 104) & 2) != 0 && a3)
      {
        v183 = v6;
        v184 = *(_DWORD *)(a3 + 4);
        v185 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
        v186 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
        *(_BYTE *)(v186 + 4) |= 1u;
        v187 = *(_QWORD *)(v186 + 16);
        v188 = *(unsigned int *)(v187 + 80);
        *(_DWORD *)(v187 + 80) = v188 + 1;
        if ((JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v184, 0, 2, 0, v185, v188, v189) & 1) == 0&& (JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v184, 0, 2, 0, v185, v188, v190) & 1) == 0)
        {
          JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v184, 0, 2, 0, v185, v188, v191);
        }
        v192 = *(_DWORD *)(v27 + 68);
        v193 = *(_DWORD *)(v27 + 80) - 1;
        v194 = *(_QWORD *)(a2 + 24);
        v212 = *(_DWORD *)(a2 + 12) - 1;
        v206 = __PAIR64__(v193, v192);
        WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v194 + 232), &v212, (uint64_t *)&v206, (uint64_t)v208);
        v6 = v183;
      }
      if (v32)
        --*v32;
    }
    else
    {
      v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v27 + 128))(*(_QWORD *)(v6 + 128));
      v61 = *(_QWORD *)(v6 + 128);
      if (v54)
      {
        v62 = *(_QWORD *)(v61 + 64);
        v63 = *(_BYTE *)(a2 + 709);
        v64 = *(_BYTE *)(a2 + 710);
        *(_WORD *)(a2 + 709) = 0;
        if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
        {
          *(_BYTE *)(a2 + 706) = 1;
          v65 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
        }
        else
        {
          if (*(_BYTE *)(v62 + 24) && (*(_BYTE *)(a2 + 104) & 1) != 0 && !*(_BYTE *)(a2 + 707))
          {
            if (*(_DWORD *)(a2 + 736) != *(_DWORD *)(v62 + 8)
              || *(_DWORD *)(a2 + 740) != *(_DWORD *)(v62 + 12)
              || (*(_DWORD *)(a2 + 744) == *(_DWORD *)(v62 + 16) ? (v154 = *(_DWORD *)(a2 + 748) == 5) : (v154 = 0),
                  !v154))
            {
              v155 = *(_QWORD *)(v62 + 8);
              *(_DWORD *)(a2 + 744) = *(_DWORD *)(v62 + 16);
              *(_QWORD *)(a2 + 736) = v155;
              *(_DWORD *)(a2 + 748) = 5;
              v156 = *(_DWORD *)(v62 + 8);
              v157 = *(_DWORD *)(v62 + 12);
              v158 = *(_DWORD *)(v62 + 16);
              if (v156 != -1 || v157 != -1 || v158 != -1)
              {
                v161 = *(_QWORD *)(a2 + 192);
                v162 = *(_DWORD *)(v161 + 176);
                v55 = v157 - v162;
                v163 = v158 - v162;
                if (v158 < v162)
                  v163 = 0;
                v46 = v55 >= v163;
                v164 = v55 - v163;
                if (v46)
                  JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v55, 0, 0, (v156 + ~*(_DWORD *)(v161 + 184)) | (unint64_t)(v164 << 32));
              }
              JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, 5, v55, v56, v57, v58, v59, v60);
            }
          }
          v65 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v62 + 16))(v62, a2, 0);
        }
        v66 = v65;
        *(_BYTE *)(a2 + 710) = v64;
        *(_BYTE *)(a2 + 709) = v63;
        if (v65)
          ++*v65;
        v67 = JSC::BytecodeGenerator::emitNodeForProperty(a2, 0, *(_QWORD *)(v61 + 72));
        v69 = *(_DWORD *)(v61 + 28);
        v68 = *(_DWORD *)(v61 + 32);
        v70 = *(_DWORD *)(v61 + 36);
        if (v69 != -1 || v68 != -1 || v70 != -1)
        {
          v73 = *(_DWORD *)(v61 + 44);
          if (*(_DWORD *)(v61 + 40) != -1 || v73 != -1 || *(_DWORD *)(v61 + 48) != -1)
          {
            v74 = *(_DWORD *)(v61 + 56);
            if ((*(_DWORD *)(v61 + 52) & v74 & *(_DWORD *)(v61 + 60)) != 0xFFFFFFFF && !*(_BYTE *)(a2 + 707))
            {
              v75 = *(_QWORD *)(a2 + 192);
              v76 = *(_DWORD *)(v75 + 176);
              v77 = v68 - v76;
              v46 = v70 >= v76;
              v78 = v70 - v76;
              if (!v46)
                v78 = 0;
              v46 = v77 >= v78;
              v79 = v77 - v78;
              if (v46)
                JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a2 + 24), *(unsigned int *)(a2 + 12), v77, v68 - v73, v74 - v68, (v69 + ~*(_DWORD *)(v75 + 184)) | (unint64_t)(v79 << 32));
            }
          }
        }
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v61 + 64) + 240))(*(_QWORD *)(v61 + 64)))
        {
          v87 = (_DWORD *)JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a2, v80, v81, v82, v83, v84, v85, v86);
          v88 = v87[1];
          ++*v87;
          JSC::OpPutByValWithThis::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a2, v66[1], v88, v67[1], *(_DWORD *)(a3 + 4), *(_BYTE *)(a2 + 712));
          --*v87;
        }
        else
        {
          JSC::BytecodeGenerator::emitPutByVal(a2, (uint64_t)v66, (uint64_t)v67, a3, v83, v84, v85, v86);
        }
        if ((*(_BYTE *)(a2 + 104) & 2) != 0 && a3)
        {
          v195 = *(_DWORD *)(a3 + 4);
          v196 = JSC::BytecodeGenerator::resolveType((JSC::BytecodeGenerator *)a2);
          v197 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
          *(_BYTE *)(v197 + 4) |= 1u;
          v198 = *(_QWORD *)(v197 + 16);
          v199 = *(unsigned int *)(v198 + 80);
          *(_DWORD *)(v198 + 80) = v199 + 1;
          if ((JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v195, 0, 2, 0, v196, v199, v200) & 1) == 0&& (JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v195, 0, 2, 0, v196, v199, v201) & 1) == 0)
          {
            JSC::OpProfileType::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v195, 0, 2, 0, v196, v199, v202);
          }
          v203 = *(_DWORD *)(v61 + 44);
          v204 = *(_DWORD *)(v61 + 56) - 1;
          v205 = *(_QWORD *)(a2 + 24);
          v212 = *(_DWORD *)(a2 + 12) - 1;
          v206 = __PAIR64__(v204, v203);
          WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>((uint64_t *)(v205 + 232), &v212, (uint64_t *)&v206, (uint64_t)v208);
        }
        if (v66)
          --*v66;
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 + 32) + 24))(*(_QWORD *)(v61 + 32), a2, a3);
      }
    }
  }
  v138 = *(_QWORD *)(v6 + 144);
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v165 = *(_DWORD *)(v138 + 12);
    if ((v165 & 0x80000000) != 0)
    {
      result = 1921;
      __break(0xC471u);
      return result;
    }
    v166 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 8) + 72);
    *(_BYTE *)(v166 + 4) |= 1u;
    v167 = *(_QWORD *)(v166 + 16);
    v168 = *(unsigned int *)(v167 + 84);
    *(_DWORD *)(v167 + 84) = v168 + 1;
    if (!JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a2, v165, v168, v49, v50, v51, v52, v53)&& !JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a2, v165, v168, v169, v170, v171, v172, v173))
    {
      JSC::OpProfileControlFlow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a2, v165, v168, v174, v175, v176, v177, v178);
    }
    v179 = *(_QWORD *)(a2 + 24);
    v180 = *(_DWORD *)(a2 + 48);
    LODWORD(v208[0]) = v180;
    v181 = (_QWORD *)(v179 + 240);
    v182 = *(unsigned int *)(v179 + 252);
    if ((_DWORD)v182 == *(_DWORD *)(v179 + 248))
      *(_DWORD *)(*(_QWORD *)(v179 + 240) + 4 * *(unsigned int *)(v179 + 252)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v181, v182 + 1, (unint64_t)v208);
    else
      *(_DWORD *)(*v181 + 4 * v182) = v180;
    ++*(_DWORD *)(v179 + 252);
    v138 = *(_QWORD *)(v6 + 144);
  }
  v139 = *(_QWORD *)(a1 + 24);
  v140 = *(_BYTE *)(a2 + 709);
  v141 = *(_BYTE *)(a2 + 710);
  *(_WORD *)(a2 + 709) = 0;
  if ((unint64_t)&v206 < *(_QWORD *)(*(_QWORD *)(a2 + 696) + 93104))
  {
    *(_BYTE *)(a2 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a2);
  }
  else
  {
    if (*(_BYTE *)(v138 + 24))
      JSC::BytecodeGenerator::emitDebugHook((JSC::BytecodeGenerator *)a2, (JSC::StatementNode *)v138);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, a2, v139);
  }
  *(_BYTE *)(a2 + 710) = v141;
  *(_BYTE *)(a2 + 709) = v140;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

_DWORD **WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>&>(uint64_t a1, unint64_t a2)
{
  _DWORD **result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  result = (_DWORD **)WTF::Vector<WTF::Ref<JSC::GenericLabel<JSC::JSGeneratorTraits>,WTF::RawPtrTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>,WTF::DefaultRefDerefTraits<JSC::GenericLabel<JSC::JSGeneratorTraits>>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *v6 = **result + 1;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void JSC::Breakpoint::create(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v19 = WTF::fastMalloc((WTF *)0x50);
  v20 = *a2;
  if (*a2)
  {
    *(_DWORD *)v20 += 2;
    *(_QWORD *)(v19 + 21) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_DWORD *)v20 += 2;
  }
  else
  {
    *(_QWORD *)(v19 + 21) = 0;
    *(_QWORD *)(v19 + 16) = 0;
  }
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = a1;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 32) = v20;
  v21 = *a3;
  *a3 = 0;
  *(_QWORD *)(v19 + 40) = v21;
  LODWORD(v21) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v19 + 48) = v21;
  LODWORD(v21) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v19 + 52) = v21;
  *(_BYTE *)(v19 + 56) = a4;
  *(_QWORD *)(v19 + 64) = a5;
  *(_QWORD *)(v19 + 72) = 0;
  *a6 = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

uint64_t JSC::Debugger::Debugger(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)result = off_1E358BDA0;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) &= 0xFC0Cu;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 68) = 0;
  *(_QWORD *)(result + 60) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_QWORD *)(result + 80) = 0xFFFFFFFFLL;
  *(_BYTE *)(result + 88) = 0;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_DWORD *)(result + 176) = 1;
  *(_OWORD *)(result + 180) = 0u;
  *(_OWORD *)(result + 196) = 0u;
  *(_DWORD *)(result + 212) = 0;
  v2 = *(_QWORD *)(a2 + 93512);
  v3 = (_QWORD *)(v2 + 224);
  if (!v2)
    v3 = (_QWORD *)(a2 + 93504);
  *v3 = result;
  *(_QWORD *)(a2 + 93512) = result;
  *(_QWORD *)(result + 216) = v2;
  *(_QWORD *)(result + 224) = 0;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)result = off_1E358BDA0;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) &= 0xFC0Cu;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 68) = 0;
  *(_QWORD *)(result + 60) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_QWORD *)(result + 80) = 0xFFFFFFFFLL;
  *(_BYTE *)(result + 88) = 0;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_DWORD *)(result + 176) = 1;
  *(_OWORD *)(result + 180) = 0u;
  *(_OWORD *)(result + 196) = 0u;
  *(_DWORD *)(result + 212) = 0;
  v2 = *(_QWORD *)(a2 + 93512);
  v3 = (_QWORD *)(v2 + 224);
  if (!v2)
    v3 = (_QWORD *)(a2 + 93504);
  *v3 = result;
  *(_QWORD *)(a2 + 93512) = result;
  *(_QWORD *)(result + 216) = v2;
  *(_QWORD *)(result + 224) = 0;
  return result;
}

void JSC::Debugger::~Debugger(JSC::Debugger *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DebuggerCallFrame *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF **v25;
  WTF **v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF **v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)this = off_1E358BDA0;
  v9 = (_QWORD *)(*((_QWORD *)this + 2) + 93504);
  v10 = *((_QWORD *)this + 27);
  v11 = *((_QWORD *)this + 28);
  if (v10)
  {
    *(_QWORD *)(v10 + 224) = v11;
    v11 = *((_QWORD *)this + 28);
  }
  else
  {
    *v9 = v11;
  }
  v12 = v9 + 1;
  if (v11)
    v12 = (_QWORD *)(v11 + 216);
  *v12 = v10;
  v13 = *((_QWORD *)this + 3);
  if (!v13)
  {
    v15 = 0;
    v18 = 0;
    v14 = 0;
LABEL_16:
    v17 = v13 + 8 * v14;
    v13 = v18;
    goto LABEL_17;
  }
  v14 = *(unsigned int *)(v13 - 4);
  v15 = v13 + 8 * v14;
  if (!*(_DWORD *)(v13 - 12))
  {
    v18 = v13 + 8 * v14;
    goto LABEL_16;
  }
  if ((_DWORD)v14)
  {
    v16 = 8 * v14;
    while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
    {
      v13 += 8;
      v16 -= 8;
      if (!v16)
      {
        v13 = v15;
        break;
      }
    }
  }
  v17 = v15;
LABEL_17:
  while (v13 != v15)
  {
    v19 = v13 + 8;
    *(_QWORD *)(*(_QWORD *)v13 + 2016) = 0;
    v13 = v17;
    if (v19 != v17)
    {
      v13 = v19;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 8;
        if (v13 == v17)
        {
          v13 = v17;
          break;
        }
      }
    }
  }
  v20 = *((_QWORD *)this + 24);
  if (v20)
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
  v21 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
    {
      JSC::DebuggerCallFrame::~DebuggerCallFrame(v21);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      --*(_DWORD *)v21;
    }
  }
  v22 = (WTF *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v22)
    WTF::RefCounted<JSC::Breakpoint>::deref(v22, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v23 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v23)
    WTF::RefCounted<JSC::Breakpoint>::deref(v23, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v24 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v24)
    WTF::RefCounted<JSC::Breakpoint>::deref(v24, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v25 = (WTF **)*((_QWORD *)this + 16);
  if (v25)
  {
    do
    {
      v26 = (WTF **)v25[2];
      v27 = *v25;
      *v25 = 0;
      if (v27)
        WTF::RefCounted<JSC::Breakpoint>::deref(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
      v25 = v26;
    }
    while (v26);
  }
  v28 = *((_QWORD *)this + 15);
  if (v28)
    WTF::fastFree(v28 - 16, a2, a3, a4, a5, a6, a7, a8);
  v29 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v29)
    WTF::RefCounted<JSC::Breakpoint>::deref(v29, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v30 = *((_QWORD *)this + 13);
  if (v30)
  {
    v31 = *(unsigned int *)(v30 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WTF **)*((_QWORD *)this + 13);
      do
      {
        v33 = *v32;
        if (*v32 != (WTF *)-1)
        {
          *v32 = 0;
          if (v33)
            WTF::RefCounted<JSC::Breakpoint>::deref(v33, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree(v30 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *((_QWORD *)this + 12);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (uint64_t *)(v34 + 8);
      do
      {
        if (*((_DWORD *)v36 - 2) != -2 && *v36)
          WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(*v36, a2, a3, a4, a5, a6, a7, a8);
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 5);
  if (v37)
    WTF::fastFree(v37 - 16, a2, a3, a4, a5, a6, a7, a8);
  v38 = *((_QWORD *)this + 4);
  if (v38)
  {
    v39 = *(unsigned int *)(v38 - 4);
    if ((_DWORD)v39)
    {
      v40 = v38 + 8;
      do
      {
        if (*(_DWORD *)(v40 - 8) != -2)
        {
          v41 = *(_QWORD *)v40;
          if (*(_QWORD *)v40)
          {
            *(_QWORD *)v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v40 += 24;
        --v39;
      }
      while (v39);
    }
    WTF::fastFree(v38 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v42 = *((_QWORD *)this + 3);
  if (v42)
    WTF::fastFree(v42 - 16, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Debugger::~Debugger(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::Debugger::attach(JSC::Debugger *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  JSC::MarkedSpace *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int ***v34;
  uint64_t v35;
  unsigned int ***v36;
  uint64_t v37;
  unsigned int ***v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int ***v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _DWORD **v75;
  _DWORD *v76;
  unsigned int ***v77;
  unsigned int *v78;
  _QWORD *v79;
  JSC::JSGlobalObject *v80;
  _DWORD v81[6];
  _DWORD *v82;

  v80 = a2;
  *((_QWORD *)a2 + 252) = this;
  if (this)
  {
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 93384);
    if ((v9 & 1) != 0)
      (*(void (**)(void))(v9 & 0xFFFFFFFFFFFFFFFCLL))();
  }
  WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add((uint64_t *)this + 3, (uint64_t *)&v80, a4, a5, a6, a7, a8, (uint64_t)v81);
  v10 = (JSC::VM *)*((_QWORD *)this + 2);
  *((_BYTE *)v10 + 93123) = 1;
  v79 = 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v78, v10, v11, v12, v13, v14, v15, v16, v17);
  v18 = (JSC::MarkedSpace *)(*((_QWORD *)this + 2) + 352);
  JSC::MarkedSpace::willStartIterating(v18, v19, v20, v21, v22, v23, v24, v25);
  v33 = *((_QWORD *)this + 2);
  v34 = *(unsigned int ****)(v33 + 456);
  if (!v34)
  {
    v36 = 0;
    v77 = 0;
    v35 = 0;
LABEL_94:
    v38 = &v34[v35];
    v34 = v77;
    goto LABEL_12;
  }
  v35 = *((unsigned int *)v34 - 1);
  v36 = &v34[v35];
  if (!*((_DWORD *)v34 - 3))
  {
    v77 = &v34[v35];
    goto LABEL_94;
  }
  if ((_DWORD)v35)
  {
    v37 = 8 * v35;
    while ((unint64_t)*v34 + 1 <= 1)
    {
      ++v34;
      v37 -= 8;
      if (!v37)
      {
        v34 = v36;
        break;
      }
    }
  }
  v38 = v36;
LABEL_12:
  while (v34 != v36)
  {
    v39 = **v34;
    v40 = v39[1];
    if (v40 <= 0x3FF)
    {
      if (*((unsigned __int8 *)v39 + 9) >= 2u)
      {
        do
        {
          JSC::MarkedBlock::Handle::isLive((uint64_t)v39, *((_QWORD *)v39 + 11) + 16 * v40, v27, v28, v29, v30, v31, v32);
          v40 += *v39;
        }
        while (v40 < 0x400);
      }
      else
      {
        do
        {
          v41 = *((_QWORD *)v39 + 11);
          v42 = v41 + 16 * v40;
          if (JSC::MarkedBlock::Handle::isLive((uint64_t)v39, v42, v27, v28, v29, v30, v31, v32))
          {
            v43 = v41 && *(_BYTE *)(v42 + 5) == 26;
            if (v43 && *(JSC::JSGlobalObject **)(16 * (**(_DWORD **)(v42 + 16) & 0xFFFFFFFE) + 0x28) == v80)
            {
              v44 = *(_QWORD *)(v42 + 24);
              if ((v44 & 1) != 0)
                v44 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 48);
              if (*(_BYTE *)(v44 + 5) == 12 && (*(_QWORD *)(*(_QWORD *)(v44 + 88) + 16) & 0x80000000) == 0)
              {
                v45 = *(_DWORD **)(v44 + 40);
                if (v45)
                  ++v45[2];
                v82 = v45;
                WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::add(v81, (uint64_t *)&v79, (uint64_t *)&v82, v28, v29, v30, v31, v32);
                if (v82)
                {
                  if (v82[2] == 1)
                    (*(void (**)(void))(*(_QWORD *)v82 + 8))();
                  else
                    --v82[2];
                }
              }
            }
          }
          v40 += *v39;
        }
        while (v40 <= 0x3FF);
      }
    }
    v46 = v34 + 1;
    v34 = v38;
    if (v46 != v38)
    {
      v34 = v46;
      while ((unint64_t)*v34 + 1 <= 1)
      {
        if (++v34 == v38)
        {
          v34 = v38;
          break;
        }
      }
    }
  }
  v47 = *(unsigned int *)(v33 + 388);
  if ((_DWORD)v47)
  {
    v48 = *(uint64_t **)(v33 + 376);
    for (i = 8 * v47; i; i -= 8)
    {
      v50 = *v48;
      if (((*(_BYTE *)(*v48 + 33) & 1) != 0 || (*(_BYTE *)(v50 + 32) & 1) != 0)
        && *(unsigned __int16 *)(v50 + 34) <= 0x1FFu
        && *(_BYTE *)(v50 + 117) == 26
        && *(JSC::JSGlobalObject **)(16 * (**(_DWORD **)(v50 + 128) & 0xFFFFFFFE) + 0x28) == v80)
      {
        v51 = *(_QWORD *)(v50 + 136);
        if ((v51 & 1) != 0)
        {
          v51 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFFELL) + 48);
          if (*(_BYTE *)(v51 + 5) == 12 && (*(_QWORD *)(*(_QWORD *)(v51 + 88) + 16) & 0x80000000) == 0)
          {
LABEL_56:
            v52 = *(_DWORD **)(v51 + 40);
            if (v52)
              ++v52[2];
            v82 = v52;
            WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::add(v81, (uint64_t *)&v79, (uint64_t *)&v82, v28, v29, v30, v31, v32);
            if (v82)
            {
              if (v82[2] == 1)
                (*(void (**)(void))(*(_QWORD *)v82 + 8))();
              else
                --v82[2];
            }
          }
        }
        else if (*(_BYTE *)(v51 + 5) == 12 && (*(_DWORD *)(*(_QWORD *)(v51 + 88) + 16) & 0x80000000) == 0)
        {
          goto LABEL_56;
        }
      }
      ++v48;
    }
  }
  JSC::MarkedSpace::didFinishIterating(v18, v26, v27, v28, v29, v30, v31, v32);
  JSC::JSLockHolder::~JSLockHolder(&v78, v53, v54, v55, v56, v57, v58, v59);
  v67 = (uint64_t)v79;
  if (v79)
  {
    v68 = *((unsigned int *)v79 - 1);
    v69 = &v79[v68];
    if (*((_DWORD *)v79 - 3))
    {
      v70 = v79;
      if ((_DWORD)v68)
      {
        v71 = 8 * v68;
        v70 = v79;
        while ((unint64_t)(*v70 + 1) <= 1)
        {
          ++v70;
          v71 -= 8;
          if (!v71)
          {
            v70 = v69;
            goto LABEL_69;
          }
        }
      }
      goto LABEL_69;
    }
    v70 = &v79[v68];
  }
  else
  {
    v70 = 0;
    v68 = 0;
  }
  v69 = &v79[v68];
  if (v79)
  {
LABEL_69:
    v72 = &v79[*((unsigned int *)v79 - 1)];
    goto LABEL_74;
  }
  v72 = 0;
LABEL_74:
  while (v70 != v72)
  {
    v73 = v70 + 1;
    (*(void (**)(JSC::Debugger *, JSC::JSGlobalObject *, _QWORD, uint64_t, void *))(*(_QWORD *)this + 16))(this, v80, *v70, 0xFFFFFFFFLL, &WTF::nullStringData);
    v70 = v69;
    if (v73 != v69)
    {
      v70 = v73;
      while ((unint64_t)(*v70 + 1) <= 1)
      {
        if (++v70 == v69)
        {
          v70 = v69;
          break;
        }
      }
    }
  }
  if (v67)
  {
    v74 = *(unsigned int *)(v67 - 4);
    if ((_DWORD)v74)
    {
      v75 = (_DWORD **)v67;
      do
      {
        v76 = *v75;
        if (*v75 != (_DWORD *)-1)
        {
          *v75 = 0;
          if (v76)
          {
            if (v76[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
            else
              --v76[2];
          }
        }
        ++v75;
        --v74;
      }
      while (v74);
    }
    WTF::fastFree(v67 - 16, v60, v61, v62, v63, v64, v65, v66);
  }
}

void JSC::Debugger::detach(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v9;
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  _QWORD v49[3];

  v9 = a3;
  v12 = *(JSC::VM **)(a2 + 56);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v47, v12, a3, a4, a5, a6, a7, a8, a9);
  if ((*(_WORD *)(a1 + 48) & 0x20) != 0)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v20 = *((_QWORD *)v12 + 11321);
      if (!v20 || *(_QWORD *)(v20 + 8) == a2)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        JSC::Debugger::continueProgram((JSC::Debugger *)a1, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  v22 = (uint64_t *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 24);
  if (v21)
  {
    v23 = *(_DWORD *)(v21 - 8);
    v24 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    v28 = *(_QWORD *)(v21 + 8 * v27);
    if (v28 != a2)
    {
      v29 = 1;
      while (v28)
      {
        v27 = ((_DWORD)v27 + v29) & v23;
        v28 = *(_QWORD *)(v21 + 8 * v27);
        ++v29;
        if (v28 == a2)
          goto LABEL_13;
      }
      v27 = *(unsigned int *)(v21 - 4);
    }
LABEL_13:
    if (v27 != *(_DWORD *)(v21 - 4))
    {
      *(_QWORD *)(v21 + 8 * v27) = -1;
      ++*(_DWORD *)(*v22 - 16);
      v30 = *v22;
      v31 = *v22 ? *(_DWORD *)(v30 - 12) - 1 : -1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v22;
      if (*v22)
      {
        v33 = 6 * *(_DWORD *)(v32 - 12);
        v34 = *(_DWORD *)(v32 - 4);
        if (v33 < v34 && v34 >= 9)
          WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash((uint64_t *)(a1 + 24), v34 >> 1, 0, v15, v16, v17, v18, v19);
      }
    }
  }
  if (v9 != 1)
  {
    JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(a1 + 16) + 192), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v36 = *(_QWORD *)(a1 + 16) + 192;
    v48 = a2;
    v49[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ClearDebuggerRequestsFunctor>::implFunction;
    v49[1] = v49;
    v49[2] = &v48;
    JSC::Heap::forEachCodeBlockImpl(v36, (uint64_t)v49, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)(a2 + 2016) = 0;
  if (!*v22 || !*(_DWORD *)(*v22 - 12))
  {
    v43 = *(_QWORD *)(a1 + 32);
    if (v43)
    {
      *(_QWORD *)(a1 + 32) = 0;
      v44 = *(unsigned int *)(v43 - 4);
      if ((_DWORD)v44)
      {
        v45 = v43 + 8;
        do
        {
          if (*(_DWORD *)(v45 - 8) != -2)
          {
            v46 = *(_QWORD *)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)v45 = 0;
              *(_DWORD *)(v45 + 8) = 0;
              WTF::fastFree(v46, v13, v14, v15, v16, v17, v18, v19);
            }
          }
          v45 += 24;
          --v44;
        }
        while (v44);
      }
      WTF::fastFree(v43 - 16, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v47, v13, v14, v15, v16, v17, v18, v19);
}

void JSC::Debugger::continueProgram(JSC::Debugger *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  WTF *v10;
  WTF **v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;

  v9 = *((_WORD *)this + 24) & 0xFFFD;
  *((_WORD *)this + 24) = v9;
  *((_BYTE *)this + 88) = 0;
  v10 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    WTF::RefCounted<JSC::Breakpoint>::deref(v10, a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_WORD *)this + 24);
  }
  v11 = (WTF **)*((_QWORD *)this + 16);
  *((_QWORD *)this + 8) = 0;
  *((_WORD *)this + 24) = v9 & 0xFFF3;
  if (v11)
  {
    do
    {
      v12 = (WTF **)v11[2];
      v13 = *v11;
      *v11 = 0;
      if (v13)
        WTF::RefCounted<JSC::Breakpoint>::deref(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
      v11 = v12;
    }
    while (v12);
  }
  v14 = *((_QWORD *)this + 15);
  if (v14)
  {
    *((_QWORD *)this + 15) = 0;
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  if ((*((_BYTE *)this + 48) & 0x20) != 0)
    *((_BYTE *)this + 8) = 1;
}

BOOL JSC::Debugger::isAttached(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 2016) == a1;
}

uint64_t JSC::Debugger::applyBreakpoints(JSC::Debugger *this, JSC::CodeBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD **v10;
  _QWORD *v11;
  _QWORD *v13;
  JSC::CodeBlock *v14;

  v14 = a2;
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (_DWORD **)(v4 + 8 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (_DWORD **)*((_QWORD *)this + 13);
      if ((_DWORD)v5)
      {
        v8 = 8 * v5;
        v7 = (_DWORD **)*((_QWORD *)this + 13);
        while ((unint64_t)*v7 + 1 <= 1)
        {
          ++v7;
          v8 -= 8;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v7 = (_DWORD **)(v4 + 8 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (_DWORD **)(v4 + 8 * v5);
  if (v4)
  {
LABEL_8:
    v9 = (_DWORD **)(v4 + 8 * *(unsigned int *)(v4 - 4));
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  while (v7 != v9)
  {
    v10 = v7 + 1;
    JSC::Debugger::toggleBreakpoint((uint64_t)a2, *v7, 1);
    v7 = v6;
    if (v10 != v6)
    {
      v7 = v10;
      while ((unint64_t)*v7 + 1 <= 1)
      {
        if (++v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E358BED8;
  v11[1] = &v14;
  v13 = v11;
  JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, &v13);
  return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
}

void JSC::Debugger::dispatchFunctionToObservers(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 192);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 12);
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v6 = WTF::fastMalloc((WTF *)(8 * v3));
        v14 = v6;
        v15 = *(_QWORD *)(a1 + 192);
        if (v15 && *(_DWORD *)(v15 - 12))
        {
          v16 = *(unsigned int *)(v15 - 4);
          if ((_DWORD)v16)
          {
            v17 = 8 * v16;
            v18 = *(uint64_t **)(a1 + 192);
            while ((unint64_t)(*v18 + 1) <= 1)
            {
              ++v18;
              v17 -= 8;
              if (!v17)
                goto LABEL_22;
            }
          }
          else
          {
            v18 = *(uint64_t **)(a1 + 192);
          }
          v19 = (uint64_t *)(v15 + 8 * v16);
          if (v18 != v19)
          {
            v20 = 0;
            v21 = *v18;
            v22 = 1;
LABEL_15:
            v23 = v22;
            *(_QWORD *)(v6 + 8 * v20++) = v21;
            while (++v18 != v19)
            {
              v21 = *v18;
              if ((unint64_t)(*v18 + 1) > 1)
              {
                ++v22;
                if (v18 != v19)
                  goto LABEL_15;
                break;
              }
            }
            if (v20)
            {
              v24 = 8 * v23;
              v25 = (uint64_t *)v6;
              do
              {
                v26 = *v25++;
                (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v26);
                v24 -= 8;
              }
              while (v24);
            }
          }
        }
LABEL_22:
        WTF::fastFree(v14, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t *JSC::Debugger::addObserver(JSC::Debugger *this, JSC::Debugger::Observer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *result;
  _BYTE v14[24];
  JSC::Debugger::Observer *v15;

  v11 = *((_QWORD *)this + 24);
  v9 = (uint64_t *)((char *)this + 192);
  v10 = v11;
  if (v11)
  {
    v12 = *(_DWORD *)(v10 - 12);
    v15 = a2;
    result = WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v9, (uint64_t *)&v15, a4, a5, a6, a7, a8, (uint64_t)v14);
    if (v12)
      return result;
  }
  else
  {
    v15 = a2;
    WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v9, (uint64_t *)&v15, a4, a5, a6, a7, a8, (uint64_t)v14);
  }
  return (uint64_t *)(*(uint64_t (**)(JSC::Debugger *))(*(_QWORD *)this + 24))(this);
}

_QWORD *JSC::Debugger::removeObserver(_QWORD *this, JSC::Debugger::Observer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::Debugger::Observer *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v9 = (uint64_t)this;
  v11 = this + 24;
  v10 = this[24];
  if (!v10)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
  v12 = *(_DWORD *)(v10 - 8);
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(JSC::Debugger::Observer **)(v10 + 8 * v16);
  if (v17 != a2)
  {
    v18 = 1;
    while (v17)
    {
      v16 = ((_DWORD)v16 + v18) & v12;
      v17 = *(JSC::Debugger::Observer **)(v10 + 8 * v16);
      ++v18;
      if (v17 == a2)
        goto LABEL_8;
    }
    v16 = *(unsigned int *)(v10 - 4);
  }
LABEL_8:
  if (v16 != *(_DWORD *)(v10 - 4))
  {
    *(_QWORD *)(v10 + 8 * v16) = -1;
    ++*(_DWORD *)(*v11 - 16);
    v19 = *v11;
    v20 = *v11 ? *(_DWORD *)(v19 - 12) - 1 : -1;
    *(_DWORD *)(v19 - 12) = v20;
    v10 = *v11;
    if (!*v11)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
    v21 = *(_DWORD *)(v10 - 4);
    if (6 * *(_DWORD *)(v10 - 12) < v21 && v21 >= 9)
    {
      this = WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(this + 24, v21 >> 1, 0, a4, a5, a6, a7, a8);
      v10 = *v11;
      if (!*v11)
        return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
    }
  }
  if (!*(_DWORD *)(v10 - 12))
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
  return this;
}

void JSC::Debugger::sourceParsed(JSC::Debugger *this, JSC::JSGlobalObject *a2, JSC::SourceProvider *a3, int a4, const WTF::String *a5)
{
  uint64_t v5;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  size_t v14;
  int *v15;
  _BYTE *v16;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  int v24;
  size_t v25;
  int *v26;
  _WORD *v27;
  const void *v28;
  size_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91[2];
  __int128 v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  int v96;
  int *v97;
  int v98;

  v98 = a4;
  v5 = *((_QWORD *)this + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    return;
  if (a4 != -1)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)a3 + 8);
    if (v9)
      *(_DWORD *)v9 += 2;
    v89 = v9;
    v10 = (*(uint64_t (**)(JSC::SourceProvider *, JSC::JSGlobalObject *))(*(_QWORD *)a3 + 24))(a3, a2);
    v12 = (_BYTE *)v10;
    v13 = v11;
    v14 = v11;
    if ((v11 & 0xFF00000000) != 0)
    {
      if (v10)
      {
        if ((_DWORD)v11)
        {
          if ((unint64_t)v11 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x1982C46E8);
          }
          v15 = (int *)WTF::fastCompactMalloc((WTF *)(v11 + 20));
          v16 = v15 + 5;
          *v15 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          if (v14 == 1)
          {
            *v16 = *v12;
            goto LABEL_40;
          }
          v28 = v12;
          v29 = v14;
LABEL_39:
          memcpy(v16, v28, v29);
LABEL_40:
          v97 = v15;
          v96 = *((_DWORD *)a3 + 26) + 1;
          v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
          *v30 = off_1E358BE88;
          v30[1] = &v89;
          v30[2] = &v97;
          v30[3] = &v96;
          v30[4] = &v98;
          v30[5] = a5;
          v95 = v30;
          JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, &v95);
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          v38 = (WTF::StringImpl *)v97;
          v97 = 0;
          if (!v38)
            goto LABEL_78;
          goto LABEL_76;
        }
        goto LABEL_29;
      }
    }
    else if (v10)
    {
      if ((_DWORD)v11)
      {
        if (v11 > 0x7FFFFFEFuLL)
        {
          __break(0xC471u);
          JUMPOUT(0x1982C46F8);
        }
        v15 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v11 + 20));
        v16 = v15 + 5;
        *v15 = 2;
        v15[1] = v13;
        *((_QWORD *)v15 + 1) = v15 + 5;
        v15[4] = 0;
        if (v14 == 1)
        {
          *(_WORD *)v16 = *(_WORD *)v12;
          goto LABEL_40;
        }
        v28 = v12;
        v29 = 2 * v14;
        goto LABEL_39;
      }
LABEL_29:
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_40;
    }
    v15 = 0;
    goto LABEL_40;
  }
  v18 = *((_DWORD *)a3 + 28);
  if (!v18)
  {
    do
      v19 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v19 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    v18 = v19 + 1;
    *((_DWORD *)a3 + 28) = v19 + 1;
    if (v19 == -1)
      goto LABEL_91;
  }
  LODWORD(v97) = v18;
  *(_OWORD *)v91 = 0u;
  v92 = 0u;
  ++*((_DWORD *)a3 + 2);
  v93 = 0;
  *(_QWORD *)&v92 = a3;
  v20 = (WTF::StringImpl *)*((_QWORD *)a3 + 8);
  if (v20)
    *(_DWORD *)v20 += 2;
  v89 = v20;
  v21 = (*(uint64_t (**)(JSC::SourceProvider *))(*(_QWORD *)a3 + 24))(a3);
  v23 = (_WORD *)v21;
  v24 = v22;
  v25 = v22;
  if ((v22 & 0xFF00000000) == 0)
  {
    if (!v21)
      goto LABEL_35;
    if (!(_DWORD)v22)
      goto LABEL_36;
    if (v22 <= 0x7FFFFFEFuLL)
    {
      v26 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v22 + 20));
      v27 = v26 + 5;
      *v26 = 2;
      v26[1] = v24;
      *((_QWORD *)v26 + 1) = v26 + 5;
      v26[4] = 0;
      if (v25 == 1)
      {
        *v27 = *v23;
        goto LABEL_45;
      }
      v39 = v23;
      v40 = 2 * v25;
      goto LABEL_44;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x1982C46E0);
  }
  if (!v21)
  {
LABEL_35:
    v26 = 0;
    goto LABEL_45;
  }
  if (!(_DWORD)v22)
  {
LABEL_36:
    v26 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_45;
  }
  if ((unint64_t)v22 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1982C46F0);
  }
  v26 = (int *)WTF::fastCompactMalloc((WTF *)(v22 + 20));
  v27 = v26 + 5;
  *v26 = 2;
  v26[1] = v24;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 4;
  if (v25 == 1)
  {
    *(_BYTE *)v27 = *(_BYTE *)v23;
    goto LABEL_45;
  }
  v39 = v23;
  v40 = v25;
LABEL_44:
  memcpy(v27, v39, v40);
LABEL_45:
  v41 = *((_QWORD *)a3 + 13);
  v90 = (WTF::StringImpl *)v26;
  *((_QWORD *)&v92 + 1) = v41;
  v94 = (*(uint64_t (**)(JSC::Debugger *, JSC::JSGlobalObject *))(*(_QWORD *)this + 80))(this, a2);
  v42 = (WTF::StringImpl *)*((_QWORD *)a3 + 11);
  if (v42)
    *(_DWORD *)v42 += 2;
  v91[0] = v42;
  v43 = (WTF::StringImpl *)*((_QWORD *)a3 + 12);
  if (v43)
    *(_DWORD *)v43 += 2;
  v91[1] = v43;
  if (!v26)
  {
    LODWORD(v44) = 0;
    goto LABEL_64;
  }
  v44 = v26[1];
  if ((int)v44 < 1)
  {
LABEL_64:
    LODWORD(v93) = v41;
    goto LABEL_65;
  }
  v45 = 0;
  v46 = 0;
  v47 = 1;
  do
  {
    if (v45 < v44)
    {
      v49 = *((_QWORD *)v26 + 1);
      if ((v26[4] & 4) != 0)
        v48 = *(unsigned __int8 *)(v49 + v45);
      else
        v48 = *(unsigned __int16 *)(v49 + 2 * v45);
    }
    else
    {
      v48 = 0;
    }
    ++v45;
    if (v48 == 10)
    {
      ++v47;
      v46 = v45;
    }
  }
  while (v44 != v45);
  LODWORD(v93) = v41 + v47 - 1;
  if (v47 != 1)
  {
    v50 = v44 - v46;
    goto LABEL_66;
  }
LABEL_65:
  v50 = v44 + HIDWORD(v41);
LABEL_66:
  HIDWORD(v93) = v50;
  v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v51 = off_1E358BEB0;
  v51[1] = &v97;
  v51[2] = &v89;
  v88 = v51;
  JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, &v88);
  (*(void (**)(_QWORD *))(*v51 + 8))(v51);
  v52 = (_DWORD *)v92;
  *(_QWORD *)&v92 = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = v91[1];
  v91[1] = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = v91[0];
  v91[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v38 = v90;
  v90 = 0;
  if (!v38)
    goto LABEL_78;
LABEL_76:
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
  }
  else
  {
    *(_DWORD *)v38 -= 2;
  }
LABEL_78:
  v55 = v89;
  v89 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
}

uint64_t JSC::Debugger::willEvaluateScript(JSC::Debugger *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 24))(*((_QWORD *)this + 26));
}

uint64_t JSC::Debugger::didEvaluateScript(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 32))(*(_QWORD *)(a1 + 208));
}

uint64_t JSC::Debugger::toggleBreakpoint(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v24;
  BOOL v25;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;

  v4 = result;
  v5 = *(_QWORD *)(result + 64);
  v6 = *(_QWORD *)(v5 + 40);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 112);
    if (!v7)
    {
      do
        v8 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
      while (__stlxr(v8 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
      v7 = v8 + 1;
      *(_DWORD *)(v6 + 112) = v8 + 1;
      if (v8 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1982C48C0);
      }
    }
  }
  else
  {
    v7 = 1;
  }
  if (a2[4] == v7)
  {
    v9 = *(_DWORD *)(v5 + 56);
    v10 = *(_DWORD *)(v5 + 60);
    v11 = v9 + 1;
    if (*(_BYTE *)(v5 + 5) == 12)
    {
      v12 = *(_QWORD *)(v5 + 72);
      if (v12)
      {
        v19 = *(_DWORD *)(v12 + 12);
        v16 = *(_DWORD *)(v12 + 8) + v11;
      }
      else
      {
        v13 = *(_QWORD *)(v5 + 88);
        v14 = *(_DWORD *)(v13 + 24);
        v15 = *(_QWORD *)(v13 + 8);
        v16 = (HIDWORD(v15) & 0x7FFFFFFF) + v11;
        v17 = v14 & 0x7FFFFFFF;
        if ((v15 & 0x7FFFFFFF00000000) != 0)
          v18 = 1;
        else
          v18 = v10 + 1;
        v19 = v17 + v18;
      }
    }
    else
    {
      v16 = *(_DWORD *)(v5 + 88);
      v19 = *(_DWORD *)(v5 + 92);
    }
    v20 = a2[5];
    v21 = a2[6];
    v22 = v20 + 1;
    if (v21)
    {
      if (v22 < v11 || v22 > v16)
        return result;
      v24 = v21 + 1;
      v25 = v20 != v9 || v21 == v10;
      if (!v25 && v24 < v10 + 1)
        return result;
      if (v22 == v16 && v24 > v19)
        return result;
      v28 = v24 & 0xFFFFFF00;
      v29 = 0x100000000;
    }
    else
    {
      if (v22 < v11 || v22 > v16)
        return result;
      v29 = 0;
      LOBYTE(v24) = 0;
      v28 = 0;
    }
    result = JSC::CodeBlock::hasOpDebugForLineAndColumn(result, v22, v29 | v28 | v24);
    if ((_DWORD)result)
    {
      if (a3 == 1)
      {
        *(_DWORD *)(v4 + 40) += 4;
        v31 = *(_QWORD *)(v4 + 120);
        if (v31)
        {
          if ((*(_BYTE *)(v31 + 12) & 0xFE) == 4)
            return JSC::CodeBlock::jettison(v4, 2, 0, 0);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 40) -= 4;
      }
    }
  }
  return result;
}

uint64_t JSC::Debugger::recompileAllJSFunctions(JSC::Debugger *this)
{
  return JSC::VM::deleteAllCode(*((_QWORD *)this + 2), 0);
}

void JSC::Debugger::debuggerParseData(JSC::Debugger *this, int a2, JSC::SourceProvider *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSC::SourceProvider *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  char *v51;
  unsigned int v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  void *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *__src;
  uint64_t v74;
  JSC::SourceProvider *v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  WTF::AtomStringImpl *v80;
  int v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  int v89;
  __int16 v90;

  v6 = (uint64_t *)((char *)this + 32);
  v5 = *((_QWORD *)this + 4);
  if (!v5)
    goto LABEL_9;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = v7 & (v9 ^ HIWORD(v9));
  v11 = (int *)(v5 + 24 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != -1)
    {
      v10 = (v10 + v13) & v7;
      v11 = (int *)(v5 + 24 * v10);
      v12 = *v11;
      ++v13;
      if (*v11 == a2)
        goto LABEL_8;
    }
    v11 = (int *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  }
LABEL_8:
  if (v11 == (int *)(v5 + 24 * *(unsigned int *)(v5 - 4)))
  {
LABEL_9:
    __src = 0;
    v74 = 0;
    v14 = *((_QWORD *)this + 2);
    v15 = *((_QWORD *)a3 + 13);
    ++*((_DWORD *)a3 + 2);
    v75 = a3;
    v76 = 0;
    (*(void (**)(JSC::SourceProvider *))(*(_QWORD *)a3 + 24))(a3);
    v77 = (int)v16;
    v78 = v15 & ~((int)v15 >> 31);
    v79 = HIDWORD(v15) & ~(v15 >> 63);
    if (*((_BYTE *)a3 + 12) == 1)
    {
      v81 = 0x100000;
      v82 = 0u;
      v83 = 0u;
      v84 = 0;
      v85 = -1;
      v86 = -1;
      v87 = -1;
      v88 = 0;
      v89 = -1;
      v90 = 0;
      JSC::parseRootNode<JSC::ModuleProgramNode>(v14, (uint64_t)&v75, 0, 0, 1, 1, 14, (uint64_t)&v81, 0, 0, (uint64_t)&__src);
      if (v80)
      {
        v27 = 126 - 2 * __clz(HIDWORD(v74));
        v28 = HIDWORD(v74) ? v27 : 0;
        std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *,false>((__n128 *)__src, (__n128 *)__src + HIDWORD(v74), v28, 1, v26);
        v16 = v80;
        v80 = 0;
        if (v16)
          std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v80, (unint64_t)v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else
    {
      if (*((_BYTE *)a3 + 12))
        goto LABEL_26;
      v81 = 0x100000;
      v82 = 0u;
      v83 = 0u;
      v84 = 0;
      v85 = -1;
      v86 = -1;
      v87 = -1;
      v88 = 0;
      v89 = -1;
      v90 = 0;
      JSC::parseRootNode<JSC::ProgramNode>(v14, (uint64_t)&v75, 0, 0, 0, 0, 12, (uint64_t)&v81, 0, 0, (uint64_t)&__src);
      if (v80)
      {
        v24 = 126 - 2 * __clz(HIDWORD(v74));
        v25 = HIDWORD(v74) ? v24 : 0;
        std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *,false>((__n128 *)__src, (__n128 *)__src + HIDWORD(v74), v25, 1, v23);
        v16 = v80;
        v80 = 0;
        if (v16)
          std::default_delete<JSC::ProgramNode>::operator()[abi:sn180100]((uint64_t)&v80, (unint64_t)v16, v17, v18, v19, v20, v21, v22);
      }
    }
    v29 = v88;
    v88 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
LABEL_26:
    v30 = v75;
    v75 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(JSC::SourceProvider *))(*(_QWORD *)v30 + 8))(v30);
      else
        --*((_DWORD *)v30 + 2);
    }
    v31 = *v6;
    if (*v6
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DebuggerParseData,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DebuggerParseData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u, 0), (v31 = *v6) != 0))
    {
      v32 = *(_DWORD *)(v31 - 8);
    }
    else
    {
      v32 = 0;
    }
    v33 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
    v35 = v32 & (v34 ^ HIWORD(v34));
    v36 = v31 + 24 * v35;
    v37 = *(_DWORD *)v36;
    if (*(_DWORD *)v36 != -1)
    {
      v38 = 0;
      v39 = 1;
      while (v37 != a2)
      {
        if (v37 == -2)
          v38 = v36;
        v35 = (v35 + v39) & v32;
        v36 = v31 + 24 * v35;
        v37 = *(_DWORD *)v36;
        ++v39;
        if (*(_DWORD *)v36 == -1)
        {
          if (v38)
          {
            *(_DWORD *)v38 = -1;
            *(_QWORD *)(v38 + 8) = 0;
            *(_QWORD *)(v38 + 16) = 0;
            --*(_DWORD *)(*v6 - 16);
            v36 = v38;
          }
          goto LABEL_40;
        }
      }
      goto LABEL_81;
    }
LABEL_40:
    *(_DWORD *)v36 = a2;
    v40 = (unint64_t *)(v36 + 8);
    if ((void **)(v36 + 8) != &__src)
    {
      v41 = *(_DWORD *)(v36 + 20);
      v42 = HIDWORD(v74);
      if (v41 <= HIDWORD(v74))
      {
        v43 = *(_DWORD *)(v36 + 16);
        if (HIDWORD(v74) > v43)
        {
          if (v43)
          {
            if (v41)
              *(_DWORD *)(v36 + 20) = 0;
            v44 = *v40;
            if (*v40)
            {
              *(_QWORD *)(v36 + 8) = 0;
              *(_DWORD *)(v36 + 16) = 0;
              WTF::fastFree(v44, v16, v17, v18, v19, v20, v21, v22);
              v43 = *(_DWORD *)(v36 + 16);
              v42 = HIDWORD(v74);
            }
          }
          if (v43 < v42)
          {
            if (v42 >> 28)
            {
              __break(0xC471u);
              return;
            }
            v45 = *(_QWORD *)(v36 + 8);
            v46 = *(unsigned int *)(v36 + 20);
            v47 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v42));
            *(_DWORD *)(v36 + 16) = v42;
            *(_QWORD *)(v36 + 8) = v47;
            if ((_DWORD)v46)
            {
              v48 = 16 * v46;
              v49 = (__int128 *)v45;
              do
              {
                v50 = *v49++;
                *v47++ = v50;
                v48 -= 16;
              }
              while (v48);
            }
            if (v45)
            {
              if (*v40 == v45)
              {
                *(_QWORD *)(v36 + 8) = 0;
                *(_DWORD *)(v36 + 16) = 0;
              }
              WTF::fastFree(v45, v16, v17, v18, v19, v20, v21, v22);
            }
          }
        }
        v42 = *(_DWORD *)(v36 + 20);
      }
      else
      {
        *(_DWORD *)(v36 + 20) = HIDWORD(v74);
      }
      v51 = (char *)*v40;
      if (v42)
      {
        memmove(v51, __src, 16 * v42);
        v52 = *(_DWORD *)(v36 + 20);
        v51 = *(char **)(v36 + 8);
      }
      else
      {
        v52 = 0;
      }
      if (v52 != HIDWORD(v74))
      {
        v53 = &v51[16 * v52];
        v54 = (__int128 *)((char *)__src + 16 * v52);
        v55 = 16 * HIDWORD(v74) - 16 * v52;
        do
        {
          v56 = *v54++;
          *(_OWORD *)v53 = v56;
          v53 += 16;
          v55 -= 16;
        }
        while (v55);
        v52 = HIDWORD(v74);
      }
      *(_DWORD *)(v36 + 20) = v52;
    }
    v57 = *v6;
    if (*v6)
      v58 = *(_DWORD *)(v57 - 12) + 1;
    else
      v58 = 1;
    *(_DWORD *)(v57 - 12) = v58;
    v59 = *v6;
    if (*v6)
      v60 = *(_DWORD *)(v59 - 12);
    else
      v60 = 0;
    v61 = (*(_DWORD *)(v59 - 16) + v60);
    v62 = *(unsigned int *)(v59 - 4);
    if (v62 > 0x400)
    {
      if (v62 > 2 * v61)
      {
LABEL_81:
        v64 = __src;
        if (__src)
        {
          __src = 0;
          LODWORD(v74) = 0;
          WTF::fastFree((unint64_t)v64, v16, v17, v18, v19, v20, v21, v22);
        }
        return;
      }
    }
    else
    {
      if (3 * v62 > 4 * v61)
        goto LABEL_81;
      if (!(_DWORD)v62)
      {
        v63 = 8;
        goto LABEL_80;
      }
    }
    v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
LABEL_80:
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DebuggerParseData,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DebuggerParseData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v63, (int *)v36);
    goto LABEL_81;
  }
}

void JSC::DebuggerPausePositions::forEachBreakpointLocation(uint64_t a1, int a2, int a3, int a4, int a5, _QWORD *a6)
{
  uint64_t v7;
  int *v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  int *v32;
  WTF *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;

  v46 = 0;
  v47 = 0;
  v7 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v7)
    goto LABEL_34;
  v11 = *(int **)a1;
  v12 = *(int **)a1;
  v13 = *(unsigned int *)(a1 + 12);
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[4 * (v13 >> 1)];
    v16 = v15[1];
    v17 = v16 < a2;
    if (v16 == a2)
      v17 = v15[2] - v15[3] < a3;
    if (v17)
    {
      v12 = v15 + 4;
      v14 = v13 + ~v14;
    }
    v13 = v14;
  }
  while (v14);
  if (v12 == (int *)(*(_QWORD *)a1 + 16 * v7))
  {
LABEL_34:
    v32 = 0;
    v33 = 0;
LABEL_35:
    v34 = 0;
    goto LABEL_38;
  }
  v18 = 0;
  do
  {
    v19 = v12[1];
    v20 = v12[2] - v12[3] >= a5 && v19 == a4;
    if (v19 > a4 || v20)
      break;
    v21 = v12;
    do
    {
      v22 = *v21;
      v21 += 4;
    }
    while (v22 == 1);
    v23 = *(_QWORD *)(v21 - 3);
    v24 = *(v21 - 1);
    v25 = HIDWORD(v23) - (int)v24 >= a5 && (_DWORD)v23 == a4;
    v44 = v23;
    v45 = v24 | 0x100000000;
    if ((int)v23 <= a4 && !v25)
    {
      if (v18)
      {
        v26 = (char *)v46 + 8;
        v27 = v18;
        while (*((_DWORD *)v26 - 2) != (_DWORD)v23 || *(_QWORD *)(v26 - 4) != __PAIR64__(v24, HIDWORD(v23)))
        {
          v26 += 12;
          if (!--v27)
            goto LABEL_28;
        }
      }
      else
      {
LABEL_28:
        if (v18 == (_DWORD)v47)
        {
          v28 = WTF::Vector<JSC::JSTextPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, v18 + 1, (unint64_t)&v44);
          v29 = (char *)v46 + 12 * HIDWORD(v47);
          v30 = *(_QWORD *)v28;
          v31 = *(_DWORD *)(v28 + 8);
        }
        else
        {
          v29 = (char *)v46 + 12 * v18;
          v30 = v44;
          v31 = v45;
        }
        *((_DWORD *)v29 + 2) = v31;
        *(_QWORD *)v29 = v30;
        v18 = ++HIDWORD(v47);
        v11 = *(int **)a1;
        v7 = *(unsigned int *)(a1 + 12);
      }
    }
    v12 += 4;
  }
  while (v12 != &v11[4 * v7]);
  v33 = v46;
  v32 = (int *)((char *)v46 + 12 * v18);
  if (!v18)
    goto LABEL_35;
  v34 = 126 - 2 * __clz(v18);
LABEL_38:
  std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,false>((unint64_t)v33, v32, v34, 1);
  v42 = v46;
  if (HIDWORD(v47))
  {
    v43 = 12 * HIDWORD(v47);
    do
    {
      (*(void (**)(_QWORD, WTF *))(*(_QWORD *)*a6 + 16))(*a6, v42);
      v42 = (WTF *)((char *)v42 + 12);
      v43 -= 12;
    }
    while (v43);
    v42 = v46;
  }
  if (v42)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t JSC::Debugger::resolveBreakpoint(JSC::Debugger *a1, uint64_t a2, JSC::SourceProvider *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  JSC::DebuggerPausePositions *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t result;

  if (*(_BYTE *)(a2 + 28))
  {
    result = 514;
    __break(0xC471u);
  }
  else
  {
    v6 = a2 + 16;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(v6 + 4);
    v7 = v5 + 1;
    v8 = *(_DWORD *)(a2 + 24);
    v10 = *((_DWORD *)a3 + 26);
    v9 = *((_DWORD *)a3 + 27);
    if (v9)
      v11 = v8 == 0;
    else
      v11 = 1;
    if (v11)
      v12 = 0;
    else
      v12 = *((_DWORD *)a3 + 27);
    v13 = v8 - v12;
    if (v5 == v10)
      v14 = v13;
    else
      v14 = *(_DWORD *)(a2 + 24);
    JSC::Debugger::debuggerParseData(a1, v4, a3);
    v16 = JSC::DebuggerPausePositions::breakpointLocationForLineColumn(v15, v7, v14);
    if ((v17 & 0xFF00000000) != 0)
    {
      v18 = HIDWORD(v16) - v17;
      if (v10 + 1 == (_DWORD)v16)
      {
        if (*(_DWORD *)(a2 + 24))
          v19 = v9 == 0;
        else
          v19 = 1;
        if (v19)
          v20 = 0;
        else
          v20 = v9;
        v18 += v20;
      }
      *(_DWORD *)(a2 + 20) = v16 - 1;
      *(_DWORD *)(a2 + 24) = v18;
      *(_BYTE *)(a2 + 28) = 1;
    }
    return (v17 & 0xFF00000000) != 0;
  }
  return result;
}

unint64_t JSC::DebuggerPausePositions::breakpointLocationForLineColumn(JSC::DebuggerPausePositions *this, int a2, int a3)
{
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((unsigned int *)this + 3);
  if (!(_DWORD)v3)
    goto LABEL_27;
  v4 = *(_DWORD **)this;
  v5 = *(_QWORD *)this + 16 * v3;
  do
  {
    v6 = v3 >> 1;
    v7 = &v4[4 * (v3 >> 1)];
    v8 = v7[1];
    v9 = v8 < a2;
    if (v8 == a2)
      v9 = v7[2] - v7[3] < a3;
    if (v9)
    {
      v4 = v7 + 4;
      v6 = v3 + ~v6;
    }
    v3 = v6;
  }
  while (v6);
  if ((_DWORD *)v5 == v4)
  {
LABEL_27:
    v18 = 0;
    v19 = 0;
    return v19 | v18;
  }
  v10 = (uint64_t *)(v4 + 1);
  v11 = v4[1];
  if (v11 != a2 || v4[2] - v4[3] != a3)
  {
    if (*v4 != 1)
      goto LABEL_29;
    v14 = v4 + 4;
    if (v14 != (_DWORD *)v5)
    {
      v15 = v11 != a2;
      while (1)
      {
        v16 = *v14;
        if (v15)
        {
          v17 = v15 - 1;
          if (v16 == 1)
            ++v15;
          if (v16 == 3)
            v15 = v17;
        }
        else
        {
          if (v16 != 1)
          {
            v10 = (uint64_t *)(v14 + 1);
            goto LABEL_29;
          }
          v15 = 1;
        }
        v14 += 4;
        if (v14 == (_DWORD *)v5)
          goto LABEL_27;
      }
    }
    goto LABEL_27;
  }
  v12 = v4 - 1;
  do
  {
    v13 = v12[1];
    v12 += 4;
  }
  while (v13 == 1);
  v10 = (uint64_t *)(v12 - 2);
LABEL_29:
  v20 = *v10;
  v18 = v20 & 0xFFFFFFFFFFFFFF00;
  v19 = v20;
  return v19 | v18;
}

void JSC::Debugger::setBreakpoint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  WTF **v37;
  _DWORD *v38;
  int v39;
  WTF ***v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int i;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  int v89;
  _QWORD v90[3];

  v11 = a1 + 12;
  v10 = a1[12];
  v12 = *(_DWORD *)(a2 + 16);
  if (v10
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1 + 12, 8u, 0), (v10 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  v15 = v13 & (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16));
  v16 = v10 + 16 * v15;
  v17 = *(_DWORD *)v16;
  if (*(_DWORD *)v16 == -1)
  {
LABEL_12:
    v19 = *(_QWORD *)(v16 + 8);
    *(_DWORD *)v16 = v12;
    *(_QWORD *)(v16 + 8) = 0;
    if (v19)
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v19, (void *)a2, a3, a4, a5, a6, a7, a8);
    a3 = v16;
LABEL_15:
    v20 = *v11;
    if (*v11)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v11;
    if (*v11)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_23;
    }
    else
    {
      if (3 * v25 > 4 * v24)
      {
LABEL_23:
        v16 = a3;
        goto LABEL_29;
      }
      if (!(_DWORD)v25)
      {
        v26 = 8;
        goto LABEL_28;
      }
    }
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_28:
    v16 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v11, v26, (int *)a3);
    goto LABEL_29;
  }
  a3 = 0;
  v18 = 1;
  while (v17 != v12)
  {
    if (v17 == -2)
      a3 = v16;
    v15 = (v15 + v18) & v13;
    v16 = v10 + 16 * v15;
    v17 = *(_DWORD *)v16;
    ++v18;
    if (*(_DWORD *)v16 == -1)
    {
      if (!a3)
        goto LABEL_12;
      *(_DWORD *)a3 = -1;
      *(_QWORD *)(a3 + 8) = 0;
      --*(_DWORD *)(*v11 - 16);
      *(_DWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = 0;
      goto LABEL_15;
    }
  }
LABEL_29:
  v29 = *(_QWORD *)(v16 + 8);
  v28 = (uint64_t *)(v16 + 8);
  v27 = v29;
  v30 = *(_DWORD *)(a2 + 20);
  if (v29
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v28, 8u, 0), (v27 = *v28) != 0))
  {
    v31 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v31 = 0;
  }
  v32 = 9 * ((v30 + ~(v30 << 15)) ^ ((v30 + ~(v30 << 15)) >> 10));
  v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
  v34 = v31 & (v33 ^ HIWORD(v33));
  v35 = (_DWORD *)(v27 + 24 * v34);
  v36 = *v35;
  if (*v35 != 0x7FFFFFFF)
  {
    v38 = 0;
    v39 = 1;
    while (v36 != v30)
    {
      if (v36 == 2147483646)
        v38 = v35;
      v34 = (v34 + v39) & v31;
      v35 = (_DWORD *)(v27 + 24 * v34);
      v36 = *v35;
      ++v39;
      if (*v35 == 0x7FFFFFFF)
      {
        if (!v38)
          goto LABEL_33;
        v37 = 0;
        *v38 = 0x7FFFFFFF;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        --*(_DWORD *)(*v28 - 16);
        goto LABEL_41;
      }
    }
    goto LABEL_63;
  }
LABEL_33:
  v37 = (WTF **)*((_QWORD *)v35 + 1);
  v38 = v35;
LABEL_41:
  *v38 = v30;
  v40 = (WTF ***)(v38 + 2);
  v41 = v38[5];
  if ((_DWORD)v41)
  {
    v42 = 8 * v41;
    do
    {
      v43 = *v37;
      *v37 = 0;
      if (v43)
        WTF::RefCounted<JSC::Breakpoint>::deref(v43, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      ++v37;
      v42 -= 8;
    }
    while (v42);
    v37 = *v40;
  }
  if (v37)
  {
    *((_QWORD *)v38 + 1) = 0;
    v38[4] = 0;
    WTF::fastFree((unint64_t)v37, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  *v40 = 0;
  *((_QWORD *)v38 + 2) = 0;
  v44 = *v28;
  if (*v28)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *v28;
  if (*v28)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 > 2 * v48)
      goto LABEL_57;
    goto LABEL_59;
  }
  if (3 * v49 <= 4 * v48)
  {
    if (!(_DWORD)v49)
    {
      v50 = 8;
      goto LABEL_62;
    }
LABEL_59:
    v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
LABEL_62:
    v35 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v28, v50, v38);
    goto LABEL_63;
  }
LABEL_57:
  v35 = v38;
LABEL_63:
  v51 = (char *)*((_QWORD *)v35 + 1);
  v52 = v35[5];
  if ((_DWORD)v52)
  {
    v53 = 8 * v52;
    v54 = *((_QWORD *)v35 + 1);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v54 + 24) == *(_DWORD *)(a2 + 24))
        return;
      v54 += 8;
      v53 -= 8;
    }
    while (v53);
  }
  if ((_DWORD)v52 == v35[4])
  {
    v55 = v52 + (v52 >> 2);
    if (v55 >= 0x10)
      v56 = v55 + 1;
    else
      v56 = 16;
    if (v56 <= v52 + 1)
      v57 = v52 + 1;
    else
      v57 = v56;
    if (v57 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v58 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
    v35[4] = v57;
    *((_QWORD *)v35 + 1) = v58;
    memcpy(v58, v51, 8 * v52);
    if (v51)
    {
      if (*((char **)v35 + 1) == v51)
      {
        *((_QWORD *)v35 + 1) = 0;
        v35[4] = 0;
      }
      WTF::fastFree((unint64_t)v51, (void *)a2, v59, a4, a5, a6, a7, a8);
    }
    v52 = v35[5];
    v60 = (uint64_t *)(*((_QWORD *)v35 + 1) + 8 * v52);
  }
  else
  {
    v60 = (uint64_t *)&v51[8 * v52];
  }
  v61 = *(_DWORD *)a2;
  *v60 = a2;
  v35[5] = v52 + 1;
  *(_DWORD *)a2 = v61 + 2;
  v63 = a1 + 13;
  v62 = a1[13];
  if (v62
    || (WTF::HashTable<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::rehash(a1 + 13, 8uLL, 0, a4, a5, a6, a7, a8), (v62 = *v63) != 0))
  {
    v64 = *(_DWORD *)(v62 - 8);
  }
  else
  {
    v64 = 0;
  }
  v65 = 0;
  v66 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
  v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
  v69 = (v68 >> 31) ^ v68;
  for (i = 1; ; ++i)
  {
    v71 = v69 & v64;
    v72 = (uint64_t *)(v62 + 8 * v71);
    v73 = *v72;
    if (*v72 == -1)
    {
      v65 = (uint64_t *)(v62 + 8 * v71);
      goto LABEL_90;
    }
    if (!v73)
      break;
    if (v73 == a2)
    {
      WTF::RefCounted<JSC::Breakpoint>::deref((WTF *)a2, (WTF::AtomStringImpl *)a2, (uint64_t)v65, a4, a5, a6, a7, a8);
      goto LABEL_108;
    }
LABEL_90:
    v69 = i + v71;
  }
  if (v65)
  {
    *v65 = 0;
    --*(_DWORD *)(*v63 - 16);
    *v65 = a2;
  }
  else
  {
    *v72 = a2;
    v65 = (uint64_t *)(v62 + 8 * v71);
  }
  v74 = *v63;
  if (*v63)
    v75 = *(_DWORD *)(v74 - 12) + 1;
  else
    v75 = 1;
  *(_DWORD *)(v74 - 12) = v75;
  v76 = *v63;
  if (*v63)
    v77 = *(_DWORD *)(v76 - 12);
  else
    v77 = 0;
  v78 = (*(_DWORD *)(v76 - 16) + v77);
  v79 = *(unsigned int *)(v76 - 4);
  if (v79 > 0x400)
  {
    if (v79 <= 2 * v78)
    {
LABEL_104:
      v80 = ((_DWORD)v79 << (6 * *(_DWORD *)(v76 - 12) >= (2 * v79)));
      goto LABEL_107;
    }
  }
  else if (3 * v79 <= 4 * v78)
  {
    if ((_DWORD)v79)
      goto LABEL_104;
    v80 = 8;
LABEL_107:
    WTF::HashTable<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::rehash(a1 + 13, v80, (uint64_t)v65, a4, a5, a6, a7, a8);
  }
LABEL_108:
  JSC::Heap::completeAllJITPlans((JSC::Heap *)(a1[2] + 192), a2, (uint64_t)v65, a4, a5, a6, a7, a8);
  v88[0] = a1;
  v88[1] = a2;
  v89 = 1;
  v81 = a1[2] + 192;
  v90[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ToggleBreakpointFunctor>::implFunction;
  v90[1] = v90;
  v90[2] = v88;
  JSC::Heap::forEachCodeBlockImpl(v81, (uint64_t)v90, v82, v83, v84, v85, v86, v87);
}

uint64_t JSC::Debugger::removeBreakpoint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int i;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  WTF **v62;
  uint64_t v63;
  WTF **v64;
  int v65;
  uint64_t v66;
  WTF **v67;
  char *v68;
  WTF **v69;
  WTF *v70;
  WTF **v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD v90[2];
  int v91;
  _QWORD v92[3];

  v9 = a1 + 12;
  v8 = a1[12];
  if (!v8)
    return 0;
  v12 = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(v8 - 8);
  v14 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v13 & (v15 ^ HIWORD(v15));
  v17 = *(_DWORD *)(v8 + 16 * v16);
  if (v17 != v12)
  {
    v18 = 1;
    while (v17 != -1)
    {
      v16 = ((_DWORD)v16 + v18) & v13;
      v17 = *(_DWORD *)(v8 + 16 * v16);
      ++v18;
      if (v17 == v12)
        goto LABEL_8;
    }
    v16 = *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v16 == *(_DWORD *)(v8 - 4))
    return 0;
  v19 = v8 + 16 * v16;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    return 0;
  v21 = *(_DWORD *)(a2 + 20);
  v22 = *(_DWORD *)(v20 - 8);
  v23 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
  v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
  v25 = v22 & (v24 ^ HIWORD(v24));
  v26 = (int *)(v20 + 24 * v25);
  v27 = *v26;
  if (*v26 != v21)
  {
    v28 = 1;
    while (v27 != 0x7FFFFFFF)
    {
      v25 = (v25 + v28) & v22;
      v26 = (int *)(v20 + 24 * v25);
      v27 = *v26;
      ++v28;
      if (*v26 == v21)
        goto LABEL_16;
    }
    v26 = (int *)(v20 + 24 * *(unsigned int *)(v20 - 4));
  }
LABEL_16:
  if (v26 == (int *)(v20 + 24 * *(unsigned int *)(v20 - 4)))
    return 0;
  JSC::Heap::completeAllJITPlans((JSC::Heap *)(a1[2] + 192), a2, a3, a4, a5, a6, a7, a8);
  v90[0] = a1;
  v90[1] = a2;
  v91 = 0;
  v29 = a1[2] + 192;
  v92[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ToggleBreakpointFunctor>::implFunction;
  v92[1] = v92;
  v92[2] = v90;
  JSC::Heap::forEachCodeBlockImpl(v29, (uint64_t)v92, v30, v31, v32, v33, v34, v35);
  v45 = a1[13];
  v44 = a1 + 13;
  v43 = v45;
  v89 = (uint64_t *)(v19 + 8);
  if (v45)
  {
    v46 = *(_DWORD *)(v43 - 8);
    v47 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
    v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
    v50 = v46 & ((v49 >> 31) ^ v49);
    for (i = 1; ; ++i)
    {
      v52 = v50;
      v53 = *(_QWORD *)(v43 + 8 * v50);
      if (v53 != -1)
      {
        if (!v53)
          goto LABEL_26;
        if (v53 == a2)
          break;
      }
      v50 = (v52 + i) & v46;
    }
    if ((_DWORD)v52 == *(_DWORD *)(v43 - 4))
    {
LABEL_26:
      LODWORD(v43) = 0;
      goto LABEL_38;
    }
    *(_QWORD *)(v43 + 8 * v52) = 0;
    WTF::RefCounted<JSC::Breakpoint>::deref((WTF *)a2, v36, v37, v38, v39, v40, v41, v42);
    *(_QWORD *)(v43 + 8 * v52) = -1;
    ++*(_DWORD *)(*v44 - 16);
    v56 = *v44;
    if (*v44)
      v57 = *(_DWORD *)(v56 - 12) - 1;
    else
      v57 = -1;
    *(_DWORD *)(v56 - 12) = v57;
    v58 = *v44;
    if (*v44)
    {
      v59 = 6 * *(_DWORD *)(v58 - 12);
      v60 = *(_DWORD *)(v58 - 4);
      if (v59 < v60 && v60 >= 9)
        WTF::HashTable<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::rehash(v44, v60 >> 1, 0, v38, v39, v40, v41, v42);
    }
    LODWORD(v43) = 1;
  }
LABEL_38:
  v62 = (WTF **)*((_QWORD *)v26 + 1);
  v63 = v26[5];
  v64 = &v62[v63];
  if ((_DWORD)v63)
  {
    v87 = v43;
    v88 = v19;
    v65 = 0;
    v66 = *((_QWORD *)v26 + 1);
    v67 = &v62[v63];
    v68 = (char *)v67;
    while (*v62 != (WTF *)a2)
    {
LABEL_49:
      ++v62;
      v66 += 8;
      if (v62 >= v64)
      {
        v62 = (WTF **)*((_QWORD *)v26 + 1);
        LODWORD(v63) = v26[5];
        v64 = (WTF **)v68;
        v19 = v88;
        LODWORD(v43) = v87;
        goto LABEL_52;
      }
    }
    v69 = v62;
    if (v68 != (char *)(*((_QWORD *)v26 + 1) + 8 * v26[5]))
    {
      if (v62 != v67)
      {
        memmove(v68, v67, v66 - (_QWORD)v67);
        v69 = (WTF **)&v68[v66 - (_QWORD)v67];
        v70 = *v62;
        *v62 = 0;
        v67 = v62 + 1;
        if (!v70)
          goto LABEL_48;
        goto LABEL_47;
      }
      v69 = (WTF **)v68;
    }
    *v62 = 0;
    v67 = v62 + 1;
    v70 = (WTF *)a2;
LABEL_47:
    WTF::RefCounted<JSC::Breakpoint>::deref(v70, v36, v37, v38, v39, v40, v41, v42);
LABEL_48:
    ++v65;
    v68 = (char *)v69;
    goto LABEL_49;
  }
  v65 = 0;
  v67 = &v62[v63];
LABEL_52:
  v71 = &v62[v63];
  if (v67 != v71)
  {
    memmove(v64, v67, (char *)v71 - (char *)v67);
    LODWORD(v63) = v26[5];
  }
  if (v65)
    v54 = v43;
  else
    v54 = 1;
  v72 = v63 - v65;
  v26[5] = v72;
  if (!v72)
  {
    v73 = *v89;
    if (*v89)
    {
      v74 = v73 + 24 * *(unsigned int *)(v73 - 4);
      if ((int *)v74 == v26)
        goto LABEL_76;
    }
    else
    {
      v74 = 0;
    }
    if ((int *)v74 != v26)
    {
      *v26 = 2147483646;
      v75 = *((_QWORD *)v26 + 1);
      if (v75)
      {
        *((_QWORD *)v26 + 1) = 0;
        v26[4] = 0;
        WTF::fastFree(v75, v36, v37, v38, v39, v40, v41, v42);
      }
      ++*(_DWORD *)(*v89 - 16);
      v76 = *v89;
      if (*v89)
        v77 = *(_DWORD *)(v76 - 12) - 1;
      else
        v77 = -1;
      *(_DWORD *)(v76 - 12) = v77;
      v73 = *v89;
      if (!*v89)
        goto LABEL_78;
      v78 = *(_DWORD *)(v73 - 4);
      if (6 * *(_DWORD *)(v73 - 12) >= v78 || v78 < 9)
      {
LABEL_76:
        v80 = *(_DWORD *)(v73 - 12);
        if (v80)
          return v54;
        goto LABEL_79;
      }
      WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v89, v78 >> 1, 0);
      v73 = *v89;
    }
    if (v73)
      goto LABEL_76;
LABEL_78:
    LOBYTE(v80) = 1;
LABEL_79:
    v81 = *v9;
    if (!*v9 || (v81 += 16 * *(unsigned int *)(v81 - 4), v81 != v19))
    {
      if (v81 != v19)
      {
        *(_DWORD *)v19 = -2;
        if ((v80 & 1) == 0)
          WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v73, v36, v37, v38, v39, v40, v41, v42);
        ++*(_DWORD *)(*v9 - 16);
        v82 = *v9;
        if (*v9)
          v83 = *(_DWORD *)(v82 - 12) - 1;
        else
          v83 = -1;
        *(_DWORD *)(v82 - 12) = v83;
        v84 = *v9;
        if (*v9)
        {
          v85 = 6 * *(_DWORD *)(v84 - 12);
          v86 = *(_DWORD *)(v84 - 4);
          if (v85 < v86 && v86 >= 9)
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v9, v86 >> 1, 0);
        }
      }
    }
  }
  return v54;
}

void JSC::Debugger::clearBreakpoints(JSC::Debugger *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  WTF **v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  JSC::Debugger *v25;
  _QWORD v26[3];

  JSC::Heap::completeAllJITPlans((JSC::Heap *)(*((_QWORD *)this + 2) + 192), a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 12);
  if (v16)
  {
    *((_QWORD *)this + 12) = 0;
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)(v16 + 8);
      do
      {
        if (*((_DWORD *)v18 - 2) != -2 && *v18)
          WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(*v18, v9, v10, v11, v12, v13, v14, v15);
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  v19 = (WTF **)*((_QWORD *)this + 13);
  if (v19)
  {
    *((_QWORD *)this + 13) = 0;
    v20 = *((unsigned int *)v19 - 1);
    if ((_DWORD)v20)
    {
      v21 = v19;
      do
      {
        v22 = *v21;
        if (*v21 != (WTF *)-1)
        {
          *v21 = 0;
          if (v22)
            WTF::RefCounted<JSC::Breakpoint>::deref(v22, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
        }
        ++v21;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((unint64_t)(v19 - 2), v9, v10, v11, v12, v13, v14, v15);
  }
  v23 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v23)
    WTF::RefCounted<JSC::Breakpoint>::deref(v23, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
  v24 = *((_QWORD *)this + 2) + 192;
  v25 = this;
  v26[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ClearCodeBlockDebuggerRequestsFunctor>::implFunction;
  v26[1] = v26;
  v26[2] = &v25;
  JSC::Heap::forEachCodeBlockImpl(v24, (uint64_t)v26, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::Debugger::currentDebuggerCallFrame(JSC::Debugger *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::DebuggerCallFrame *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    JSC::DebuggerCallFrame::create((JSC::DebuggerCallFrame *)&v19, *((JSC::VM **)this + 2), *((JSC::CallFrame **)this + 9), a4, a5, a6, a7, a8);
    result = v19;
    v10 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v19;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(v10);
        WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
        return *((_QWORD *)this + 23);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  return result;
}

uint64_t JSC::DebuggerCallFrame::evaluateWithScopeExtension(JSC::DebuggerCallFrame *a1, unsigned int *a2, int **a3, JSC::JSScope *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v14;
  JSC::DebuggerCallFrame *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  __int128 v46;
  _DWORD *v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  JSC::Structure *v55;
  JSC::Symbol *v56;
  JSC::JSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  JSC::JSGlobalObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  int v85;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl **v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  int v138;
  WTF::StringImpl *v139;
  __int128 v140;
  __int128 v141;
  _DWORD *v142;
  _DWORD *v143;
  int v144;
  int v145;
  uint64_t v146;
  WTF::StringImpl **v147;
  WTF::StringImpl **v148;
  unsigned int *v149;

  if (!a1)
    return 10;
  v14 = 10;
  v15 = a1;
  while (1)
  {
    v16 = (_QWORD *)*((_QWORD *)v15 + 1);
    if (v16)
    {
      if (*((_BYTE *)v15 + 84))
      {
        v17 = (_QWORD *)((char *)v15 + 72);
        goto LABEL_8;
      }
      if ((v16[3] & 0xFFFE000000000007) != 3)
        break;
    }
LABEL_9:
    v15 = (JSC::DebuggerCallFrame *)*((_QWORD *)v15 + 2);
    if (!v15)
      return v14;
  }
  v17 = v16 + 2;
LABEL_8:
  v18 = (_QWORD *)*v17;
  if (!*v17)
    goto LABEL_9;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v149, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9);
  v26 = v18[1];
  if (v26)
  {
    if (*(_BYTE *)(v26 + 3169))
    {
      v27 = *(unsigned __int8 *)(v26 + 3169) ^ 1;
    }
    else
    {
      v27 = 1;
      *(_BYTE *)(v26 + 3169) = 1;
      v28 = *(WTF::StringImpl **)(v26 + 3184);
      if (v28)
      {
        v29 = *(_DWORD *)v28;
        *(_DWORD *)v28 += 2;
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
        }
        v27 = 1;
      }
    }
    v138 = v27;
  }
  else
  {
    v138 = 0;
  }
  v30 = v18[7];
  v31 = 1;
  if (((1 << *(_BYTE *)(v30 + 42)) & 0x1F8FFF) == 0)
  {
    v32 = *(unsigned __int16 *)(v30 + 28) | (*(unsigned __int8 *)(v30 + 30) << 16);
    if ((v32 & 0x3000) == 0x1000)
      v31 = (v32 >> 10) & 3;
    else
      v31 = 0;
  }
  v147 = 0;
  v148 = 0;
  v33 = JSC::DebuggerCallFrame::scope(a1, (JSC::VM *)a2, v20, v21, v22, v23, v24, v25);
  JSC::JSScope::collectClosureVariablesUnderTDZ(*(_QWORD *)(v33 + 16), (uint64_t *)&v148, (uint64_t *)&v147, v34, v35, v36, v37, v38);
  v39 = ~*(_BYTE *)(v18[8] + 68);
  JSC::CallFrame::callerSourceOrigin((JSC::CallFrame *)v16, (JSC::VM *)a2, v40, v41, v42, v43, (uint64_t)&v139);
  v44 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v44 + 8) = 1;
  *(_QWORD *)v44 = off_1E35964B0;
  *(_BYTE *)(v44 + 12) = 0;
  v45 = v139;
  if (v139)
    *(_DWORD *)v139 += 2;
  *(_QWORD *)(v44 + 16) = v45;
  v46 = v141;
  *(_OWORD *)(v44 + 24) = v140;
  *(_OWORD *)(v44 + 40) = v46;
  v47 = v142;
  if (v142)
    ++v142[2];
  *(_QWORD *)(v44 + 56) = v47;
  *(_OWORD *)(v44 + 64) = 0u;
  *(_OWORD *)(v44 + 80) = 0u;
  *(_OWORD *)(v44 + 96) = 0u;
  *(_QWORD *)(v44 + 109) = 0;
  *(_QWORD *)v44 = off_1E357C4B0;
  v48 = *a3;
  if (!*a3)
    v48 = &WTF::StringImpl::s_emptyAtomString;
  *v48 += 2;
  *(_QWORD *)(v44 + 120) = v48;
  v143 = (_DWORD *)v44;
  v144 = 0;
  v49 = v48[1];
  v146 = 0;
  v145 = v49;
  v50 = v18[7];
  v51 = *(_QWORD *)(v50 + 152);
  if (v51)
  {
    v114 = *(unsigned __int8 *)(v51 + 56);
    v52 = v114 & 1;
    v53 = (v114 >> 1) & 1;
  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  v61 = JSC::DirectEvalExecutable::create(v26, (JSC::VM *)&v143, *(_BYTE *)(v50 + 29) & 3, v52, v53, ((1 << *(_BYTE *)(v50 + 42)) & 0x940) != 0, (*(unsigned __int16 *)(v18[8] + 70) >> 7) & 1, v31, &v148, (uint64_t *)&v147, v39 & 1);
  v62 = v143;
  v143 = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = v142;
  v142 = 0;
  if (v63)
  {
    if (v63[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
    else
      --v63[2];
  }
  v64 = v139;
  v139 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = *((_QWORD *)a2 + 2);
  if (v65)
  {
    *a5 = v65;
    *((_QWORD *)a2 + 2) = 0;
    v134 = a2 + 20;
    v14 = 10;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 & 0xFFFFFFEF, v134));
  }
  else
  {
    if (a4)
    {
      v66 = JSC::JSWithScope::create((JSC::JSWithScope *)a2, v26, *(JSC::JSGlobalObject **)(v26 + 72), a4, v57, v58, v59, v60);
      v67 = *(_QWORD *)(v26 + 56);
      *(_QWORD *)(v26 + 80) = v66;
      if (v26)
      {
        if (v66 && *(_DWORD *)(v67 + 760) >= *(unsigned __int8 *)(v26 + 7))
          JSC::Heap::writeBarrierSlowPath(v67 + 192, v26);
      }
    }
    v68 = (JSC::JSGlobalObject *)JSC::DebuggerCallFrame::thisValue(v15, v54, v55, v56, (uint64_t)v57, v58, v59, v60);
    v75 = JSC::DebuggerCallFrame::scope(v15, (JSC::VM *)a2, v69, v70, v71, v72, v73, v74);
    v14 = JSC::Interpreter::executeEval((WTF::Thread *)(a2 + 22640), v61, v68, *(const JSC::Identifier **)(v75 + 16), v76, v77, v78, v79, v80);
    v81 = *((_QWORD *)a2 + 2);
    if (v81)
    {
      *a5 = v81;
      *((_QWORD *)a2 + 2) = 0;
      v136 = a2 + 20;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 & 0xFFFFFFEF, v136));
    }
    if (a4)
      *(_QWORD *)(v26 + 80) = 0;
  }
  v82 = (uint64_t)v147;
  if (v147)
  {
    v123 = *((unsigned int *)v147 - 1);
    if ((_DWORD)v123)
    {
      v124 = v147;
      do
      {
        v125 = *v124;
        if (*v124 != (WTF::StringImpl *)-1)
        {
          *v124 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2)
            {
              WTF::StringImpl::~StringImpl(v125, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
              WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
            }
            else
            {
              *(_DWORD *)v125 -= 2;
            }
          }
        }
        v124 += 2;
        --v123;
      }
      while (v123);
    }
    WTF::fastFree(v82 - 16, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
  }
  v83 = v148;
  if (v148)
  {
    v87 = *((unsigned int *)v148 - 1);
    if ((_DWORD)v87)
    {
      v88 = v148;
      do
      {
        v89 = *v88;
        if (*v88 != (WTF::StringImpl *)-1)
        {
          *v88 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
            {
              WTF::StringImpl::~StringImpl(v89, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
              WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
            }
            else
            {
              *(_DWORD *)v89 -= 2;
            }
          }
        }
        ++v88;
        --v87;
      }
      while (v87);
    }
    WTF::fastFree((unint64_t)(v83 - 2), v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
    if (v26)
    {
LABEL_52:
      if (v138)
      {
        *(_BYTE *)(v26 + 3169) = 0;
        v84 = *(WTF::StringImpl **)(v26 + 3184);
        if (v84)
        {
          v85 = *(_DWORD *)v84;
          *(_DWORD *)v84 += 2;
          if (v85)
          {
            *(_DWORD *)v84 = v85;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v84, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
            WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
          }
        }
      }
    }
  }
  else if (v26)
  {
    goto LABEL_52;
  }
  JSC::JSLockHolder::~JSLockHolder(&v149, v54, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57, v58, v59, v60);
  return v14;
}

_WORD *JSC::Debugger::setBreakpointsActivated(_WORD *this, int a2)
{
  __int16 v2;
  __int16 v3;

  v2 = this[24];
  if (((((v2 & 0x40) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v3 = 64;
    else
      v3 = 0;
    this[24] = v2 & 0xFFBF | v3;
    return (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)this + 40))(this);
  }
  return this;
}

void JSC::Debugger::breakProgram(uint64_t a1, WTF::AtomStringImpl *a2, JSC::Wasm::NameSection *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int16 v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  JSC::JSGlobalObject **v23;
  JSC::JSGlobalObject *v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];

  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x20) == 0 && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40))
  {
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      v12 = *(WTF **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v11;
      if (v12)
        WTF::RefCounted<JSC::Breakpoint>::deref(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_WORD *)(a1 + 48) = v9 | 2;
    }
    v13 = *(_QWORD *)(a1 + 16);
    if ((*(_WORD *)(a1 + 48) & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(v13 + 192), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 48) |= 0x200u;
      v26 = a1;
      v27 = 1;
      v14 = *(_QWORD *)(a1 + 16) + 192;
      v28[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v28[1] = v28;
      v28[2] = &v26;
      JSC::Heap::forEachCodeBlockImpl(v14, (uint64_t)v28, v15, v16, v17, v18, v19, v20);
      v13 = *(_QWORD *)(a1 + 16);
    }
    v21 = *(_QWORD **)(v13 + 40);
    *(_QWORD *)(a1 + 72) = v21;
    v22 = v21[3];
    if ((v22 & 0xFFFE000000000007) == 3)
    {
      while (1)
      {
        v25 = *(unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
        if (v25)
          break;
        v21 = (_QWORD *)*v21;
        v22 = v21[3];
        if ((v22 & 0xFFFE000000000007) != 3)
          goto LABEL_10;
      }
      if (v25 != 1)
      {
        v24 = 0;
        goto LABEL_12;
      }
      v23 = (JSC::JSGlobalObject **)(v21[2] + 32);
    }
    else
    {
LABEL_10:
      v23 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 40);
    }
    v24 = *v23;
LABEL_12:
    JSC::Debugger::pauseIfNeeded((JSC::Debugger *)a1, v24, a3, a4, a5, a6, a7, a8, a9);
  }
}

void JSC::Debugger::pauseIfNeeded(JSC::Debugger *this, JSC::JSGlobalObject *a2, JSC::Wasm::NameSection *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  __int16 v29;
  JSC::CallFrame *v30;
  _BOOL4 v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int *v50;
  int v51;
  int v52;
  uint64_t v53;
  JSC::Wasm::NameSection **v54;
  uint64_t v55;
  JSC::Wasm::NameSection *v56;
  uint64_t v58;
  int v59;
  int v60;
  JSC::Wasm::NameSection *v63;
  char *v64;
  WTF *v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int **v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::DebuggerCallFrame *v86;
  JSC::DebuggerCallFrame *v87;
  _BYTE *v88;
  JSC::Wasm::NameSection *v89;
  void (*v90)(JSC::Wasm::NameSection *);
  JSC::Wasm::NameSection *v91;
  _QWORD *v92;
  uint64_t v93;
  JSC::JSScope *v94;
  uint64_t v95;
  JSC::JSScope *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  JSC::DebuggerCallFrame *v117;
  JSC::DebuggerCallFrame *v118;
  uint64_t v119;
  JSC::JSScope *v120;
  unint64_t v121;
  double v122;
  int v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  int v134;
  _QWORD *v135;
  WTF *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  JSC::DebuggerCallFrame *v161;
  JSC::DebuggerCallFrame *v162;
  int v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  int v183;
  char v184;
  _QWORD *v185;
  BOOL v186;
  char v187;
  int v188;
  _QWORD *v189;
  void (*v190)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v191)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  JSC::Wasm::NameSection **v192;
  unsigned int *v193;
  JSC::Wasm::NameSection *v194;
  int v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[2];

  v11 = *((_QWORD *)this + 2);
  v12 = (_BYTE *)(v11 + 64);
  v13 = *(_DWORD *)(v11 + 88);
  *(_DWORD *)(v11 + 88) = v13 + 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v11 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v11 + 24) == v14)
      {
        *(_QWORD *)(v11 + 16) = 0;
        v172 = (unsigned int *)(v11 + 80);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 & 0xFFFFFFEF, v172));
        *(_BYTE *)(v11 + 86) = 1;
      }
    }
  }
  if ((*((_WORD *)this + 24) & 0x120) != 0)
    goto LABEL_213;
  v15 = *((_QWORD *)this + 9);
  if (v15 && (*(_QWORD *)(v15 + 24) & 0xFFFE000000000007) != 3 && (v16 = *(_QWORD *)(v15 + 16)) != 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 64) + 40);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 112);
      if (!v18)
      {
        do
          v19 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
        while (__stlxr(v19 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
        v18 = v19 + 1;
        *(_DWORD *)(v17 + 112) = v19 + 1;
        if (v19 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982C665CLL);
        }
      }
    }
    else
    {
      v18 = 1;
    }
  }
  else
  {
    v18 = 0;
  }
  v20 = *((_QWORD *)this + 5);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v22 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
    v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
    v24 = v21 & (v23 ^ HIWORD(v23));
    v25 = *(_DWORD *)(v20 + 8 * v24);
    if (v25 != v18)
    {
      v26 = 1;
      while (v25 != -1)
      {
        v24 = ((_DWORD)v24 + v26) & v21;
        v25 = *(_DWORD *)(v20 + 8 * v24);
        ++v26;
        if (v25 == v18)
          goto LABEL_21;
      }
      v24 = *(unsigned int *)(v20 - 4);
    }
LABEL_21:
    v27 = v20 + 8 * v24;
    if (v24 != *(_DWORD *)(v20 - 4) && *(_DWORD *)(v27 + 4) == 1)
      goto LABEL_213;
  }
  else
  {
    v27 = 0;
  }
  v188 = *((unsigned __int8 *)this + 88);
  v28 = v188 == 0;
  v29 = *((_WORD *)this + 24);
  v30 = (JSC::CallFrame *)*((_QWORD *)this + 9);
  if ((v29 & 2) != 0)
  {
    v31 = 1;
  }
  else
  {
    v31 = *((_QWORD *)this + 8) == (_QWORD)v30;
    v28 = *((_QWORD *)this + 8) == (_QWORD)v30;
  }
  v186 = v28;
  if (v30)
  {
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v190, v30, (JSC::VM *)v11, 0, a5, a6, a7, a8);
    if (v192)
    {
      v32 = JSC::StackVisitor::Frame::computeLineAndColumn((JSC::StackVisitor::Frame *)&v190);
      v33 = v32 - 1;
      v34 = HIDWORD(v32) + 0xFFFFFFFF;
    }
    else
    {
      LODWORD(v34) = -1;
      v33 = -1;
    }
    v35 = v193;
    v193 = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        v194 = (JSC::Wasm::NameSection *)v35;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v194, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    v29 = *((_WORD *)this + 24);
    if ((v29 & 0x40) == 0)
      goto LABEL_72;
  }
  else
  {
    LODWORD(v34) = -1;
    v33 = -1;
    if ((v29 & 0x40) == 0)
      goto LABEL_72;
  }
  v38 = *((_QWORD *)this + 12);
  if (v38)
  {
    v39 = *(_DWORD *)(v38 - 8);
    v40 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
    v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    v42 = v39 & (v41 ^ HIWORD(v41));
    v43 = *(_DWORD *)(v38 + 16 * v42);
    if (v43 != v18)
    {
      v44 = 1;
      while (v43 != -1)
      {
        v42 = ((_DWORD)v42 + v44) & v39;
        v43 = *(_DWORD *)(v38 + 16 * v42);
        ++v44;
        if (v43 == v18)
          goto LABEL_44;
      }
      v42 = *(unsigned int *)(v38 - 4);
    }
LABEL_44:
    if (v42 != *(_DWORD *)(v38 - 4))
    {
      v45 = *(_QWORD *)(v38 + 16 * v42 + 8);
      if (v45)
      {
        v46 = *(_DWORD *)(v45 - 8);
        v47 = 9 * ((~(v33 << 15) + v33) ^ ((~(v33 << 15) + v33) >> 10));
        v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
        v49 = v46 & (v48 ^ HIWORD(v48));
        v50 = (int *)(v45 + 24 * v49);
        v51 = *v50;
        if (*v50 != v33)
        {
          v52 = 1;
          while (v51 != 0x7FFFFFFF)
          {
            v49 = (v49 + v52) & v46;
            v50 = (int *)(v45 + 24 * v49);
            v51 = *v50;
            ++v52;
            if (*v50 == v33)
              goto LABEL_52;
          }
          v50 = (int *)(v45 + 24 * *(unsigned int *)(v45 - 4));
        }
LABEL_52:
        if (v50 != (int *)(v45 + 24 * *(unsigned int *)(v45 - 4)))
        {
          v53 = v50[5];
          if ((_DWORD)v53)
          {
            v54 = (JSC::Wasm::NameSection **)*((_QWORD *)v50 + 1);
            if (*((_DWORD *)this + 20) == v33)
            {
              v55 = 8 * v53;
              while (1)
              {
                v56 = *v54;
                if (*((_DWORD *)*v54 + 5) == v33 && *((_DWORD *)*v54 + 6) == (_DWORD)v34)
                  break;
                ++v54;
                v55 -= 8;
                if (!v55)
                  goto LABEL_72;
              }
            }
            else
            {
              v58 = 8 * v53;
              while (1)
              {
                v56 = *v54;
                v59 = *((_DWORD *)*v54 + 5);
                v60 = *((_DWORD *)*v54 + 6);
                if (v59 == v33 && v60 == 0)
                  break;
                if (v59 == v33 && v60 == (_DWORD)v34)
                  break;
                ++v54;
                v58 -= 8;
                if (!v58)
                  goto LABEL_72;
              }
            }
            ++*(_DWORD *)v56;
            v194 = v56;
            WTF::ListHashSet<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::add((uint64_t *)&v190, (uint64_t *)this + 15, (uint64_t *)&v194, a4, a5, a6, a7, a8);
            if (v194)
              WTF::RefCounted<JSC::Breakpoint>::deref(v194, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
            v64 = (char *)this + 112;
            v63 = (JSC::Wasm::NameSection *)*((_QWORD *)this + 14);
            if (!v63)
            {
              *((_DWORD *)this + 20) = v33;
              v29 = *((_WORD *)this + 24);
LABEL_78:
              *((_WORD *)this + 24) = v29 & 0xFFFD;
              *((_BYTE *)this + 88) = 0;
              *((_QWORD *)this + 14) = 0;
              goto LABEL_79;
            }
            goto LABEL_73;
          }
        }
      }
    }
  }
LABEL_72:
  v64 = (char *)this + 112;
  v63 = (JSC::Wasm::NameSection *)*((_QWORD *)this + 14);
  if (!v63)
  {
    *((_DWORD *)this + 20) = v33;
    if (!v31)
      goto LABEL_209;
    goto LABEL_78;
  }
LABEL_73:
  v194 = v63;
  *((_QWORD *)this + 14) = 0;
  WTF::ListHashSet<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::add((uint64_t *)&v190, (uint64_t *)this + 15, (uint64_t *)&v194, a4, a5, a6, a7, a8);
  if (v194)
    WTF::RefCounted<JSC::Breakpoint>::deref(v194, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 20) = v33;
  v65 = (WTF *)*((_QWORD *)this + 14);
  *((_WORD *)this + 24) &= ~2u;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v65)
    WTF::RefCounted<JSC::Breakpoint>::deref(v65, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_79:
  v66 = *((_QWORD *)this + 8);
  v185 = v64;
  if (v66)
  {
    v67 = *((_WORD *)this + 24);
    if (v66 != *((_QWORD *)this + 9))
    {
      v68 = 0;
      goto LABEL_84;
    }
  }
  else
  {
    v67 = *((_WORD *)this + 24);
  }
  *((_QWORD *)this + 8) = 0;
  v67 &= 0xFFF3u;
  v68 = 1;
LABEL_84:
  v69 = v67 | 0x20;
  *((_WORD *)this + 24) = v67 | 0x20;
  if ((v67 & 1) != 0)
  {
    v70 = *((_QWORD *)this + 5);
    if (v70)
      v70 += 8 * *(unsigned int *)(v70 - 4);
    if (v27 != v70 && !*(_DWORD *)(v27 + 4))
      goto LABEL_204;
  }
  v71 = *((_QWORD *)this + 15);
  if (!v71 || !*(_DWORD *)(v71 - 12))
    goto LABEL_185;
  v72 = (_QWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  if (!v72)
  {
    WTF::fastFree(v71 - 16, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_181;
  }
  v177 = 0;
  v178 = v71;
  v179 = v68;
  v180 = v27;
  v181 = (_BYTE *)(v11 + 64);
  v182 = v11;
  v187 = 0;
  v183 = 0;
  v184 = 1;
  v73 = v72;
  while (1)
  {
    v74 = *v73;
    v75 = (int **)(*v73 + 32);
    if (!*v75 || !(*v75)[1])
      goto LABEL_94;
    v116 = (unsigned int *)*((_QWORD *)a2 + 7);
    v194 = 0;
    v117 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
    if (!v117)
    {
      JSC::DebuggerCallFrame::create((JSC::DebuggerCallFrame *)&v190, *((JSC::VM **)this + 2), *((JSC::CallFrame **)this + 9), a4, a5, a6, a7, a8);
      v117 = (JSC::DebuggerCallFrame *)v190;
      v118 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
      *((_QWORD *)this + 23) = v190;
      if (v118)
      {
        if (*(_DWORD *)v118 == 1)
        {
          JSC::DebuggerCallFrame::~DebuggerCallFrame(v118);
          WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
          v117 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
        }
        else
        {
          --*(_DWORD *)v118;
        }
      }
    }
    v119 = *((_QWORD *)this + 25);
    v120 = v119
         ? (JSC::JSScope *)(*(uint64_t (**)(uint64_t, JSC::Debugger *, JSC::JSGlobalObject *, JSC::DebuggerCallFrame *))(*(_QWORD *)v119 + 24))(v119, this, a2, v117): 0;
    v121 = JSC::DebuggerCallFrame::evaluateWithScopeExtension(v117, v116, v75, v120, &v194, a6, a7, a8, a9);
    if (!*((_QWORD *)this + 9))
      break;
    a3 = v194;
    if (v194)
    {
      (*(void (**)(JSC::Debugger *, JSC::JSGlobalObject *))(*(_QWORD *)this + 88))(this, a2);
      if (!*((_QWORD *)this + 9))
        break;
      goto LABEL_148;
    }
    if (v121 >= 0xFFFE000000000000)
    {
      if (!(_DWORD)v121)
        goto LABEL_148;
    }
    else
    {
      *(_QWORD *)&v122 = v121 - 0x2000000000000;
      if (v121 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&a9 = v121 - 0x2000000000000;
        if (v122 <= 0.0 && v122 >= 0.0)
          goto LABEL_148;
      }
      else if ((v121 & 0xFFFE000000000002) != 0)
      {
        if (v121 != 7)
          goto LABEL_148;
      }
      else
      {
        v123 = *(unsigned __int8 *)(v121 + 5);
        if (v123 == 2)
        {
          v132 = *(_QWORD *)(v121 + 8);
          if ((v132 & 1) != 0)
            v133 = (_DWORD *)(v121 + 16);
          else
            v133 = (_DWORD *)(v132 + 4);
          if (!*v133)
            goto LABEL_148;
        }
        else if (v123 == 3)
        {
          if (!*(_DWORD *)(v121 + 8))
            goto LABEL_148;
        }
        else if ((*(_BYTE *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0xA) & 1) != 0
               && *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x28) == a2)
        {
          goto LABEL_148;
        }
      }
    }
LABEL_94:
    v76 = *(_QWORD *)(v74 + 64);
    v77 = *(_QWORD *)(v74 + 72) + 1;
    *(_QWORD *)(v74 + 72) = v77;
    v78 = *((_QWORD *)this + 9);
    if (v78)
      v79 = v77 > v76;
    else
      v79 = 0;
    if (v79)
    {
      v80 = *(_QWORD *)(*v73 + 40);
      v81 = *(_DWORD *)(*v73 + 52);
      v82 = (unsigned int *)*((_QWORD *)a2 + 7);
      ++*((_DWORD *)this + 45);
      if (v81)
      {
        v189 = v73;
        v83 = 24 * v81 - 24;
        v84 = v80;
        do
        {
          v85 = *((_QWORD *)this + 25);
          if (v85)
            (*(void (**)(uint64_t, JSC::Debugger *, JSC::JSGlobalObject *, uint64_t))(*(_QWORD *)v85 + 32))(v85, this, a2, v84);
          v86 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
          if (!v86)
          {
            JSC::DebuggerCallFrame::create((JSC::DebuggerCallFrame *)&v190, *((JSC::VM **)this + 2), *((JSC::CallFrame **)this + 9), a4, a5, a6, a7, a8);
            v86 = (JSC::DebuggerCallFrame *)v190;
            v87 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
            *((_QWORD *)this + 23) = v190;
            if (v87)
            {
              if (*(_DWORD *)v87 == 1)
              {
                JSC::DebuggerCallFrame::~DebuggerCallFrame(v87);
                WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
                v86 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
              }
              else
              {
                --*(_DWORD *)v87;
              }
            }
          }
          switch(*(_BYTE *)v84)
          {
            case 0:
              v88 = v12;
              v89 = (JSC::Wasm::NameSection *)WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v89 = off_1E358BF28;
              *((_QWORD *)v89 + 1) = v86;
              *((_QWORD *)v89 + 2) = v82;
              *((_QWORD *)v89 + 3) = v84;
              v194 = v89;
              JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, &v194);
              v194 = 0;
              v90 = *(void (**)(JSC::Wasm::NameSection *))(*(_QWORD *)v89 + 8);
              v91 = v89;
              v12 = v88;
              v90(v91);
              break;
            case 1:
              v190 = 0;
              v95 = *((_QWORD *)this + 25);
              if (v95)
                v96 = (JSC::JSScope *)(*(uint64_t (**)(uint64_t, JSC::Debugger *, JSC::JSGlobalObject *, JSC::DebuggerCallFrame *))(*(_QWORD *)v95 + 24))(v95, this, a2, v86);
              else
                v96 = 0;
              JSC::DebuggerCallFrame::evaluateWithScopeExtension(v86, v82, (int **)(v84 + 8), v96, &v190, a6, a7, a8, a9);
              if (v190)
              {
                v106 = (_DWORD *)JSC::DebuggerCallFrame::scope(v86, (JSC::VM *)v82, (uint64_t)a3, a4, a5, a6, a7, a8);
                (*(void (**)(JSC::Debugger *, _QWORD, void (*)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))(*(_QWORD *)this + 88))(this, *(_QWORD *)(16 * (*v106 & 0xFFFFFFFE) + 0x28), v190);
              }
              break;
            case 2:
              v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v92 = off_1E358BF50;
              v92[1] = v80;
              v199[0] = v92;
              JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, v199);
              v199[0] = 0;
              goto LABEL_119;
            case 3:
              v190 = 0;
              v93 = *((_QWORD *)this + 25);
              if (v93)
                v94 = (JSC::JSScope *)(*(uint64_t (**)(uint64_t, JSC::Debugger *, JSC::JSGlobalObject *, JSC::DebuggerCallFrame *))(*(_QWORD *)v93 + 24))(v93, this, a2, v86);
              else
                v94 = 0;
              v97 = JSC::DebuggerCallFrame::evaluateWithScopeExtension(v86, v82, (int **)(v84 + 8), v94, &v190, a6, a7, a8, a9);
              v197 = 0;
              v198 = v97;
              v197 = *(_QWORD *)(16
                               * (*(_DWORD *)JSC::DebuggerCallFrame::scope(v86, (JSC::VM *)v82, v98, v99, v100, v101, v102, v103) & 0xFFFFFFFE)+ 0x28);
              if (v190)
                (*(void (**)(JSC::Debugger *))(*(_QWORD *)this + 88))(this);
              v92 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
              *v92 = off_1E358BF78;
              v92[1] = &v197;
              v92[2] = v84;
              v92[3] = this;
              v92[4] = &v190;
              v92[5] = &v198;
              v196 = v92;
              JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, &v196);
              v196 = 0;
LABEL_119:
              (*(void (**)(_QWORD *))(*v92 + 8))(v92);
              break;
            default:
              break;
          }
          v104 = *((_QWORD *)this + 25);
          if (v104)
            (*(void (**)(uint64_t, JSC::Debugger *, JSC::JSGlobalObject *, uint64_t))(*(_QWORD *)v104 + 40))(v104, this, a2, v84);
          if (*((JSC::Debugger **)a2 + 252) != this)
            break;
          v84 += 24;
          v80 += 24;
          v105 = v83;
          v83 -= 24;
        }
        while (v105);
        v73 = v189;
        if (!*((_QWORD *)this + 9))
          break;
      }
      v115 = *v73;
      if (!*(_BYTE *)(*v73 + 56))
      {
        if ((*(_DWORD *)(v115 + 16) == 0) | v187 & 1)
        {
          v184 = 0;
          v187 = 1;
        }
        else
        {
          v184 = 0;
          v187 = 0;
          if (!v183)
            v177 = *(_QWORD *)(v115 + 8);
          v183 = 1;
        }
      }
    }
    else if (!v78)
    {
      break;
    }
LABEL_148:
    v73 = (_QWORD *)v73[2];
    if (!v73)
    {
      v134 = 1;
      goto LABEL_175;
    }
  }
  v134 = 0;
LABEL_175:
  v12 = v181;
  v11 = v182;
  v27 = v180;
  do
  {
    v135 = (_QWORD *)v72[2];
    v136 = (WTF *)*v72;
    *v72 = 0;
    if (v136)
      WTF::RefCounted<JSC::Breakpoint>::deref(v136, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v72, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
    v72 = v135;
  }
  while (v135);
  WTF::fastFree(v178 - 16, v30, (uint64_t)a3, a4, a5, a6, a7, a8);
  v68 = v179;
  if (v134)
  {
    if ((v184 & 1) != 0)
    {
LABEL_181:
      if (!v186)
        goto LABEL_208;
    }
    else if (v183)
    {
      *((_QWORD *)this + 18) = v177;
    }
LABEL_185:
    v69 = *((_WORD *)this + 24);
    if ((v69 & 1) != 0)
      goto LABEL_190;
    v137 = *((_QWORD *)this + 5);
    if (v137)
      v137 += 8 * *(unsigned int *)(v137 - 4);
    if (v27 == v137 || *(_DWORD *)(v27 + 4))
    {
LABEL_190:
      if ((v68 & 1) == 0)
      {
        *((_QWORD *)this + 8) = 0;
        *((_WORD *)this + 24) = v69 & 0xFFF3;
      }
      if (v188)
      {
        v138 = 8;
      }
      else if (*((_QWORD *)this + 18))
      {
        v138 = 6;
      }
      else
      {
        v138 = *((_DWORD *)this + 13);
      }
      *((_DWORD *)this + 13) = v138;
      (*(void (**)(JSC::Debugger *, JSC::JSGlobalObject *))(*(_QWORD *)this + 56))(this, a2);
      if (*(_QWORD *)(v11 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x1982C72E0);
      }
      *((_DWORD *)this + 13) = 0;
      *((_QWORD *)this + 18) = 0;
      if ((*((_WORD *)this + 24) & 2) == 0 && !*((_QWORD *)this + 8) && !*v185)
      {
        if ((*((_WORD *)this + 24) & 0x200) != 0)
        {
          JSC::Heap::completeAllJITPlans((JSC::Heap *)(*((_QWORD *)this + 2) + 192), v139, v140, v141, v142, v143, v144, v145);
          *((_WORD *)this + 24) &= ~0x200u;
          v194 = this;
          v195 = 0;
          v146 = *((_QWORD *)this + 2) + 192;
          v190 = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
          v191 = &v190;
          v192 = &v194;
          JSC::Heap::forEachCodeBlockImpl(v146, (uint64_t)&v190, v147, v148, v149, v150, v151, v152);
        }
        *((_QWORD *)this + 9) = 0;
      }
      goto LABEL_208;
    }
LABEL_204:
    *((_BYTE *)this + 88) = 1;
    if (*((_QWORD *)this + 18))
    {
      v153 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v153 = off_1E358BE10;
      v153[1] = this;
      v199[0] = v153;
      JSC::Debugger::dispatchFunctionToObservers((uint64_t)this, v199);
      (*(void (**)(_QWORD *))(*v153 + 8))(v153);
      *((_QWORD *)this + 18) = 0;
      v69 = *((_WORD *)this + 24);
    }
    *((_WORD *)this + 24) = v69 | 2;
    if ((v69 & 0x200) == 0)
    {
      JSC::Heap::completeAllJITPlans((JSC::Heap *)(*((_QWORD *)this + 2) + 192), (uint64_t)v30, (uint64_t)a3, a4, a5, a6, a7, a8);
      *((_WORD *)this + 24) |= 0x200u;
      v194 = this;
      v195 = 1;
      v154 = *((_QWORD *)this + 2) + 192;
      v190 = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
      v191 = &v190;
      v192 = &v194;
      JSC::Heap::forEachCodeBlockImpl(v154, (uint64_t)&v190, v155, v156, v157, v158, v159, v160);
    }
  }
LABEL_208:
  *((_WORD *)this + 24) &= ~0x20u;
LABEL_209:
  v161 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
  if (v161)
  {
    JSC::DebuggerCallFrame::invalidate(v161);
    v162 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v162)
    {
      if (*(_DWORD *)v162 == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(v162);
        WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
      }
      else
      {
        --*(_DWORD *)v162;
      }
    }
  }
LABEL_213:
  v163 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v163;
  if (!v163 && v12[93377])
  {
    v174 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 16) = v174;
    *(_QWORD *)(v11 + 32) = v174;
    if (v174)
    {
      v175 = (unsigned int *)(v12 + 16);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 | 0x10, v175));
    }
    if (v12[93379])
      v12[93378] = 1;
    *(_BYTE *)(v11 + 86) = 0;
  }
}

uint64_t JSC::DebuggerCallFrame::sourceIDForCallFrame(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  if (result)
  {
    if ((*(_QWORD *)(result + 24) & 0xFFFE000000000007) == 3)
      return 0;
    v1 = *(_QWORD *)(result + 16);
    if (!v1)
    {
      return 0;
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40);
      if (v2)
      {
        result = *(unsigned int *)(v2 + 112);
        if (!(_DWORD)result)
        {
          do
            v3 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
          while (__stlxr(v3 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
          result = v3 + 1;
          *(_DWORD *)(v2 + 112) = result;
          if (v3 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982C7370);
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

unint64_t JSC::DebuggerCallFrame::positionForCallFrame(JSC::DebuggerCallFrame *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE v22[16];
  uint64_t v23;
  unsigned int *v24;
  JSC::Wasm::NameSection *v25;

  if (a2)
  {
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v22, a2, this, 0, a5, a6, a7, a8);
    if (v23)
    {
      v15 = JSC::StackVisitor::Frame::computeLineAndColumn((JSC::StackVisitor::Frame *)v22);
      v16 = v15 - 1;
      v17 = HIDWORD(v15) + 0xFFFFFFFF;
    }
    else
    {
      LODWORD(v17) = -1;
      v16 = -1;
    }
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v25 = (JSC::Wasm::NameSection *)v18;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
  else
  {
    LODWORD(v17) = -1;
    v16 = -1;
  }
  return v16 | ((unint64_t)v17 << 32);
}

uint64_t *WTF::ListHashSet<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  uint64_t v11;
  int v12;
  uint64_t **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t **v37;

  v10 = (uint64_t **)result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = ~(*a3 << 32) + *a3;
  v15 = 9
      * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v12;
    v20 = (uint64_t **)(v11 + 8 * (v17 & v12));
    v21 = *v20;
    if (*v20 == (uint64_t *)-1)
    {
      v13 = (uint64_t **)(v11 + 8 * v19);
      goto LABEL_10;
    }
    if (!v21)
      break;
    if (*v21 == *a3)
    {
      v30 = 0;
      goto LABEL_30;
    }
LABEL_10:
    v17 = i + v19;
  }
  if (v13)
  {
    *v13 = 0;
    --*(_DWORD *)(*a2 - 16);
    v20 = v13;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v27 = *a3;
  *a3 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v27;
  *v20 = result;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v31 = *a2;
  if (*a2)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33)
    {
LABEL_22:
      v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
      goto LABEL_25;
    }
  }
  else if (3 * v34 <= 4 * v33)
  {
    if ((_DWORD)v34)
      goto LABEL_22;
    v35 = 8;
LABEL_25:
    v20 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>>::rehash(a2, v35, (uint64_t)v20, v22, v23, v24, v25, v26);
    result = *v20;
  }
  v36 = a2[2];
  result[1] = v36;
  result[2] = 0;
  if (v36)
    v37 = (uint64_t **)(v36 + 16);
  else
    v37 = (uint64_t **)(a2 + 1);
  *v37 = result;
  a2[2] = (uint64_t)result;
  v21 = *v20;
  v30 = 1;
LABEL_30:
  *v10 = a2;
  v10[1] = v21;
  *((_BYTE *)v10 + 16) = v30;
  return result;
}

uint64_t JSC::Debugger::handlePause(_BYTE *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = a2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = off_1E358BFA0;
  v3[1] = &v8;
  v3[2] = a1;
  v7 = v3;
  JSC::Debugger::dispatchFunctionToObservers((uint64_t)a1, &v7);
  (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v8);
  a1[8] = 0;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 72))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 64))(a1, v8);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E358BFC8;
  v6 = v4;
  JSC::Debugger::dispatchFunctionToObservers((uint64_t)a1, &v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t JSC::DebuggerCallFrame::scope(JSC::DebuggerCallFrame *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t result;
  unint64_t v13;
  JSC::VM **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;

  v10 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v10 && !*((_BYTE *)this + 84))
    return 0;
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v11 || (result = *v11) == 0)
  {
    v13 = v10[3];
    if ((v13 & 0xFFFE000000000007) == 3)
    {
      if (!*((_BYTE *)this + 84))
        goto LABEL_12;
    }
    else if (!*((_BYTE *)this + 84))
    {
      v15 = v10[2];
      if (v15)
      {
        v16 = *(int *)(v15 + 48);
        if ((_DWORD)v16 != 0x3FFFFFFF)
        {
          v14 = (JSC::VM **)&v10[v16];
LABEL_28:
          v24 = JSC::DebuggerScope::create((uint64_t)a2, *v14, a3, a4, a5, a6, a7, a8);
          v32 = (unint64_t *)*((_QWORD *)this + 4);
          if (!v32)
          {
            v33 = (_QWORD *)*((_QWORD *)a2 + 89);
            if (!v33)
            {
              v41 = v24;
              JSC::HandleSet::grow((JSC::VM *)((char *)a2 + 672), v25, v26, v27, v28, v29, v30, v31);
              v24 = v41;
              v33 = (_QWORD *)*((_QWORD *)a2 + 89);
            }
            *((_QWORD *)a2 + 89) = *v33;
            v33[2] = 0;
            v32 = v33 + 2;
            *v33 = 0;
            v33[1] = 0;
            *((_QWORD *)this + 4) = v33 + 2;
          }
          v34 = (unint64_t)(v32 - 2);
          if ((v24 != 0) != (*v32 != 0))
          {
            if (v24)
            {
              v35 = *(unint64_t **)((v34 & 0xFFFFFFFFFFFFF000) + 0x10);
              v36 = v35[3];
              v35 += 3;
              *(_QWORD *)v34 = v36;
              *(v32 - 1) = (unint64_t)v35;
              *v35 = v34;
              *(_QWORD *)(v36 + 8) = v34;
            }
            else
            {
              v39 = *(_QWORD *)v34;
              v38 = (_QWORD *)*(v32 - 1);
              *v38 = *(_QWORD *)v34;
              *(_QWORD *)(v39 + 8) = v38;
              *(_QWORD *)v34 = 0;
              *(_QWORD *)(v34 + 8) = 0;
              v32 = (unint64_t *)*((_QWORD *)this + 4);
            }
          }
          *v32 = v24;
          v37 = *((_QWORD *)this + 4);
          if (v37)
            return *(_QWORD *)v37;
          return 0;
        }
      }
LABEL_12:
      v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
      v18 = *(_DWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C) != 0;
      v19 = (char **)(16 * v17);
      if ((_DWORD)v17)
        v20 = v19 == &JSC::JSCallee::s_info;
      else
        v20 = 1;
      if (!v20)
      {
        do
        {
          v19 = (char **)v19[2];
          v18 = v19 != 0;
        }
        while (v19 != &JSC::JSCallee::s_info && v19 != 0);
      }
      if (v18)
      {
        v14 = (JSC::VM **)(v13 + 16);
        goto LABEL_28;
      }
      if ((v13 & 0xFFFE000000000007) == 3)
      {
        while (1)
        {
          v40 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
          if (v40)
            break;
          v10 = (_QWORD *)*v10;
          v13 = v10[3];
          if ((v13 & 0xFFFE000000000007) != 3)
          {
            v22 = (uint64_t *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 40);
            goto LABEL_25;
          }
        }
        if (v40 != 1)
        {
          v23 = 0;
          goto LABEL_26;
        }
        v22 = (uint64_t *)(v10[2] + 32);
      }
      else
      {
        v22 = (uint64_t *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 40);
      }
LABEL_25:
      v23 = *v22;
LABEL_26:
      v14 = (JSC::VM **)(v23 + 72);
      goto LABEL_28;
    }
    v14 = (JSC::VM **)((char *)this + 64);
    goto LABEL_28;
  }
  return result;
}

uint64_t JSC::DebuggerCallFrame::callerFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (*(_QWORD *)(this + 8) || *(_BYTE *)(this + 84))
  {
    v2 = *(_DWORD **)(this + 16);
    if (v2)
      ++*v2;
  }
  else
  {
    v2 = 0;
  }
  *a2 = v2;
  return this;
}

void JSC::Debugger::exception(uint64_t a1, WTF::AtomStringImpl *a2, JSC::Wasm::NameSection *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int16 v9;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v26)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  void (*v30)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v31)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x20) == 0
    && ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 31 || (*(_BYTE *)(a4 + 59) & 3) == 0))
  {
    *(_DWORD *)(a1 + 52) = 1;
    v14 = *(_DWORD **)(a1 + 152);
    if (v14 || (v14 = *(_DWORD **)(a1 + 160)) != 0 && (a5 & 1) == 0)
    {
      ++*v14;
      v15 = *(WTF **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v14;
      if (v15)
        WTF::RefCounted<JSC::Breakpoint>::deref(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v9 = *(_WORD *)(a1 + 48);
      if ((v9 & 0x200) == 0)
      {
        JSC::Heap::completeAllJITPlans((JSC::Heap *)(*(_QWORD *)(a1 + 16) + 192), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *(_WORD *)(a1 + 48) |= 0x200u;
        v36 = a1;
        v37 = 1;
        v16 = *(_QWORD *)(a1 + 16) + 192;
        v30 = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
        v31 = &v30;
        v32 = &v36;
        JSC::Heap::forEachCodeBlockImpl(v16, (uint64_t)&v30, v17, v18, v19, v20, v21, v22);
        v9 = *(_WORD *)(a1 + 48);
      }
    }
    v30 = 0;
    v31 = 0;
    v34 = 1;
    v35 = *((_QWORD *)a2 + 8);
    v23 = *((_QWORD *)a2 + 11);
    v32 = 0;
    v33 = v23;
    if (a3)
      v24 = (void (**)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
    else
      v24 = &v30;
    *(_WORD *)(a1 + 48) = v9 | 0x80;
    *(_QWORD *)(a1 + 56) = a4;
    *(_QWORD *)(a1 + 72) = v24;
    if (((unint64_t)v24[3] & 0xFFFE000000000007) == 3)
    {
      LODWORD(v25) = 0;
    }
    else
    {
      if (a3)
        v26 = (void (**)(uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
      else
        v26 = &v30;
      v25 = v26[2];
      if (v25)
      {
        v27 = *(_QWORD *)(*((_QWORD *)v25 + 8) + 40);
        if (v27)
        {
          LODWORD(v25) = *(_DWORD *)(v27 + 112);
          if (!(_DWORD)v25)
          {
            do
              v28 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v28 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            LODWORD(v25) = v28 + 1;
            *(_DWORD *)(v27 + 112) = v28 + 1;
            if (v28 == -1)
            {
              __break(0xC471u);
              return;
            }
          }
        }
        else
        {
          LODWORD(v25) = 1;
        }
      }
    }
    if (*(_DWORD *)(a1 + 84) != (_DWORD)v25)
    {
      *(_DWORD *)(a1 + 80) = -1;
      *(_DWORD *)(a1 + 84) = (_DWORD)v25;
    }
    JSC::Debugger::pauseIfNeeded((JSC::Debugger *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v29 = *(_WORD *)(a1 + 48);
    if ((v29 & 0x200) == 0)
      *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 48) = v29 & 0xFF7F;
    if (!a3)
      *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 52) = 0;
  }
}

uint64_t JSC::Debugger::atStatement(uint64_t this, JSC::CallFrame *a2)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  JSC::JSGlobalObject **v5;
  JSC::JSGlobalObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  JSC::CallFrame *v11;
  int v12;

  v2 = *(_WORD *)(this + 48);
  if ((v2 & 0x20) == 0)
  {
    v3 = this;
    *(_WORD *)(this + 48) = v2 & 0xFFEF;
    *(_DWORD *)(this + 52) = 2;
    if (!a2)
    {
      v7 = (_QWORD *)(this + 72);
LABEL_17:
      *v7 = 0;
LABEL_18:
      *(_DWORD *)(v3 + 52) = 0;
      return this;
    }
    v4 = *((_QWORD *)a2 + 3);
    if ((v4 & 0xFFFE000000000007) == 3)
    {
      v11 = a2;
      while (1)
      {
        v12 = *(unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
        if (v12)
          break;
        v11 = *(JSC::CallFrame **)v11;
        v4 = *((_QWORD *)v11 + 3);
        if ((v4 & 0xFFFE000000000007) != 3)
          goto LABEL_4;
      }
      if (v12 != 1)
      {
        v6 = 0;
LABEL_6:
        *(_QWORD *)(this + 72) = a2;
        v7 = (_QWORD *)(this + 72);
        if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
        {
          LODWORD(v8) = 0;
        }
        else
        {
          v8 = *((_QWORD *)a2 + 2);
          if (v8)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 40);
            if (v9)
            {
              LODWORD(v8) = *(_DWORD *)(v9 + 112);
              if (!(_DWORD)v8)
              {
                do
                  v10 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                while (__stlxr(v10 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                LODWORD(v8) = v10 + 1;
                *(_DWORD *)(v9 + 112) = v10 + 1;
                if (v10 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982C7C34);
                }
              }
            }
            else
            {
              LODWORD(v8) = 1;
            }
          }
        }
        if (*(_DWORD *)(this + 84) != (_DWORD)v8)
        {
          *(_DWORD *)(this + 80) = -1;
          *(_DWORD *)(this + 84) = v8;
        }
        this = JSC::Debugger::pauseIfNeeded((JSC::Debugger *)this, v6);
        if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
          goto LABEL_18;
        goto LABEL_17;
      }
      v5 = (JSC::JSGlobalObject **)(*((_QWORD *)v11 + 2) + 32);
    }
    else
    {
LABEL_4:
      v5 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 40);
    }
    v6 = *v5;
    goto LABEL_6;
  }
  return this;
}

uint64_t JSC::Debugger::atExpression(uint64_t this, JSC::CallFrame *a2)
{
  __int16 v2;
  uint64_t v3;
  _BOOL4 v4;
  unint64_t v5;
  JSC::JSGlobalObject **v6;
  JSC::JSGlobalObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  JSC::CallFrame *v12;
  int v13;

  v2 = *(_WORD *)(this + 48);
  if ((v2 & 0x20) == 0)
  {
    v3 = this;
    if ((v2 & 0x10) == 0)
    {
      *(_WORD *)(this + 48) = v2 | 0x10;
      return this;
    }
    v4 = (v2 & 0xE) == 0 && *(_QWORD *)(this + 112) == 0;
    *(_DWORD *)(this + 52) = 3;
    if (!a2)
    {
      v8 = (_QWORD *)(this + 72);
LABEL_24:
      *v8 = 0;
LABEL_25:
      *(_DWORD *)(v3 + 52) = 0;
      return this;
    }
    v5 = *((_QWORD *)a2 + 3);
    if ((v5 & 0xFFFE000000000007) == 3)
    {
      v12 = a2;
      while (1)
      {
        v13 = *(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
        if (v13)
          break;
        v12 = *(JSC::CallFrame **)v12;
        v5 = *((_QWORD *)v12 + 3);
        if ((v5 & 0xFFFE000000000007) != 3)
          goto LABEL_9;
      }
      if (v13 != 1)
      {
        v7 = 0;
LABEL_11:
        *(_QWORD *)(this + 72) = a2;
        v8 = (_QWORD *)(this + 72);
        if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          v9 = *((_QWORD *)a2 + 2);
          if (v9)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 64) + 40);
            if (v10)
            {
              LODWORD(v9) = *(_DWORD *)(v10 + 112);
              if (!(_DWORD)v9)
              {
                do
                  v11 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                while (__stlxr(v11 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                LODWORD(v9) = v11 + 1;
                *(_DWORD *)(v10 + 112) = v11 + 1;
                if (v11 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982C7DCCLL);
                }
              }
            }
            else
            {
              LODWORD(v9) = 1;
            }
          }
        }
        if (*(_DWORD *)(this + 84) != (_DWORD)v9)
        {
          *(_DWORD *)(this + 80) = -1;
          *(_DWORD *)(this + 84) = v9;
        }
        if (!v4)
          this = JSC::Debugger::pauseIfNeeded((JSC::Debugger *)this, v7);
        if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
          goto LABEL_25;
        goto LABEL_24;
      }
      v6 = (JSC::JSGlobalObject **)(*((_QWORD *)v12 + 2) + 32);
    }
    else
    {
LABEL_9:
      v6 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 40);
    }
    v7 = *v6;
    goto LABEL_11;
  }
  return this;
}

uint64_t JSC::Debugger::callEvent(uint64_t this, JSC::CallFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  JSC::CallFrame *v8;
  _QWORD *v9;
  JSC::CallFrame *v10;

  v10 = a2;
  if ((*(_WORD *)(this + 48) & 0x20) == 0)
  {
    v2 = this;
    if (a2)
    {
      v3 = *((_QWORD *)a2 + 3);
      if ((v3 & 0xFFFE000000000007) == 3)
      {
        v8 = a2;
        do
        {
          if (*(_BYTE *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
            break;
          v8 = *(JSC::CallFrame **)v8;
          v3 = *((_QWORD *)v8 + 3);
        }
        while ((v3 & 0xFFFE000000000007) == 3);
      }
      *(_QWORD *)(this + 72) = a2;
      if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
      {
        LODWORD(v4) = 0;
      }
      else
      {
        v4 = *((_QWORD *)a2 + 2);
        if (v4)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
          if (v5)
          {
            LODWORD(v4) = *(_DWORD *)(v5 + 112);
            if (!(_DWORD)v4)
            {
              do
                v6 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v6 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              LODWORD(v4) = v6 + 1;
              *(_DWORD *)(v5 + 112) = v6 + 1;
              if (v6 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x1982C7F4CLL);
              }
            }
          }
          else
          {
            LODWORD(v4) = 1;
          }
        }
      }
      if (*(_DWORD *)(this + 84) != (_DWORD)v4)
      {
        *(_DWORD *)(this + 80) = -1;
        *(_DWORD *)(this + 84) = v4;
      }
      if ((*(_WORD *)(this + 48) & 0x200) == 0)
        *(_QWORD *)(this + 72) = 0;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E358BFF0;
      v7[1] = &v10;
      v9 = v7;
      JSC::Debugger::dispatchFunctionToObservers(v2, &v9);
      return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
    }
    else
    {
      *(_QWORD *)(this + 72) = 0;
    }
  }
  return this;
}

uint64_t JSC::Debugger::returnEvent(uint64_t this, JSC::CallFrame *a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::JSGlobalObject **v4;
  JSC::JSGlobalObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int16 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  JSC::CallFrame *v16;
  int v17;
  _QWORD *v18;

  if ((*(_WORD *)(this + 48) & 0x20) != 0)
    return this;
  v2 = this;
  *(_DWORD *)(this + 52) = 4;
  if (!a2)
  {
LABEL_16:
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    return this;
  }
  v3 = *((_QWORD *)a2 + 3);
  if ((v3 & 0xFFFE000000000007) == 3)
  {
    v16 = a2;
    while (1)
    {
      v17 = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
      if (v17)
        break;
      v16 = *(JSC::CallFrame **)v16;
      v3 = *((_QWORD *)v16 + 3);
      if ((v3 & 0xFFFE000000000007) != 3)
        goto LABEL_4;
    }
    if (v17 != 1)
    {
      v5 = 0;
      goto LABEL_6;
    }
    v4 = (JSC::JSGlobalObject **)(*((_QWORD *)v16 + 2) + 32);
  }
  else
  {
LABEL_4:
    v4 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 40);
  }
  v5 = *v4;
LABEL_6:
  *(_QWORD *)(this + 72) = a2;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 40);
      if (v7)
      {
        LODWORD(v6) = *(_DWORD *)(v7 + 112);
        if (!(_DWORD)v6)
        {
          do
            v8 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
          while (__stlxr(v8 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
          LODWORD(v6) = v8 + 1;
          *(_DWORD *)(v7 + 112) = v8 + 1;
          if (v8 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982C817CLL);
          }
        }
      }
      else
      {
        LODWORD(v6) = 1;
      }
    }
  }
  if (*(_DWORD *)(this + 84) != (_DWORD)v6)
  {
    *(_DWORD *)(this + 80) = -1;
    *(_DWORD *)(this + 84) = v6;
  }
  this = JSC::Debugger::pauseIfNeeded((JSC::Debugger *)this, v5);
  v9 = *(_WORD *)(v2 + 48);
  if ((v9 & 0x200) == 0)
    goto LABEL_16;
  v10 = *(_QWORD **)(v2 + 72);
  *(_DWORD *)(v2 + 52) = 0;
  if (v10)
  {
    this = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
    v11 = (_QWORD *)*v10;
    if (*v10 == this)
    {
      this = vmEntryRecord(this);
      v11 = *(_QWORD **)(this + 8);
      v9 = *(_WORD *)(v2 + 48);
      v10 = *(_QWORD **)(v2 + 72);
    }
    *(_WORD *)(v2 + 48) = v9 | 0x10;
    if (v10 == *(_QWORD **)(v2 + 64))
    {
      *(_QWORD *)(v2 + 64) = v11;
      *(_WORD *)(v2 + 48) = v9 | 0x18;
    }
    if (!v11)
      goto LABEL_35;
    v12 = v11[3];
    if ((v12 & 0xFFFE000000000007) == 3)
    {
      v18 = v11;
      do
      {
        if (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
          break;
        v18 = (_QWORD *)*v18;
        v12 = v18[3];
      }
      while ((v12 & 0xFFFE000000000007) == 3);
    }
    *(_QWORD *)(v2 + 72) = v11;
    if ((v11[3] & 0xFFFE000000000007) == 3)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v13 = v11[2];
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 64) + 40);
        if (v14)
        {
          LODWORD(v13) = *(_DWORD *)(v14 + 112);
          if (!(_DWORD)v13)
          {
            do
              v15 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v15 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            LODWORD(v13) = v15 + 1;
            *(_DWORD *)(v14 + 112) = v15 + 1;
            if (v15 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982C819CLL);
            }
          }
        }
        else
        {
          LODWORD(v13) = 1;
        }
      }
    }
    if (*(_DWORD *)(v2 + 84) != (_DWORD)v13)
    {
      *(_DWORD *)(v2 + 80) = -1;
      *(_DWORD *)(v2 + 84) = v13;
    }
    if ((*(_WORD *)(v2 + 48) & 0x200) == 0)
LABEL_35:
      *(_QWORD *)(v2 + 72) = 0;
  }
  return this;
}

uint64_t JSC::Debugger::unwindEvent(uint64_t this, JSC::CallFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  JSC::CallFrame *v14;
  _QWORD *v15;

  if ((*(_WORD *)(this + 48) & 0x20) != 0)
    return this;
  v2 = this;
  if (!a2)
  {
    v4 = (_QWORD *)(this + 72);
LABEL_15:
    *v4 = 0;
    return this;
  }
  v3 = *((_QWORD *)a2 + 3);
  if ((v3 & 0xFFFE000000000007) == 3)
  {
    v14 = a2;
    do
    {
      if (*(_BYTE *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
        break;
      v14 = *(JSC::CallFrame **)v14;
      v3 = *((_QWORD *)v14 + 3);
    }
    while ((v3 & 0xFFFE000000000007) == 3);
  }
  *(_QWORD *)(this + 72) = a2;
  v4 = (_QWORD *)(this + 72);
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 40);
      if (v6)
      {
        LODWORD(v5) = *(_DWORD *)(v6 + 112);
        if (!(_DWORD)v5)
        {
          do
            v7 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
          while (__stlxr(v7 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
          LODWORD(v5) = v7 + 1;
          *(_DWORD *)(v6 + 112) = v7 + 1;
          if (v7 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982C83E4);
          }
        }
      }
      else
      {
        LODWORD(v5) = 1;
      }
    }
  }
  if (*(_DWORD *)(this + 84) != (_DWORD)v5)
  {
    *(_DWORD *)(this + 80) = -1;
    *(_DWORD *)(this + 84) = v5;
  }
  if ((*(_WORD *)(this + 48) & 0x200) == 0)
    goto LABEL_15;
  v8 = (_QWORD *)*v4;
  if (*v4)
  {
    this = *(_QWORD *)(*(_QWORD *)(this + 16) + 48);
    v9 = (_QWORD *)*v8;
    if (*v8 == this)
    {
      this = vmEntryRecord(this);
      v9 = *(_QWORD **)(this + 8);
      v8 = (_QWORD *)*v4;
    }
    if (v8 == *(_QWORD **)(v2 + 64))
      *(_QWORD *)(v2 + 64) = v9;
    if (!v9)
      goto LABEL_15;
    v10 = v9[3];
    if ((v10 & 0xFFFE000000000007) == 3)
    {
      v15 = v9;
      do
      {
        if (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
          break;
        v15 = (_QWORD *)*v15;
        v10 = v15[3];
      }
      while ((v10 & 0xFFFE000000000007) == 3);
    }
    *v4 = v9;
    if ((v9[3] & 0xFFFE000000000007) == 3)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      v11 = v9[2];
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 40);
        if (v12)
        {
          LODWORD(v11) = *(_DWORD *)(v12 + 112);
          if (!(_DWORD)v11)
          {
            do
              v13 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v13 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            LODWORD(v11) = v13 + 1;
            *(_DWORD *)(v12 + 112) = v13 + 1;
            if (v13 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982C8404);
            }
          }
        }
        else
        {
          LODWORD(v11) = 1;
        }
      }
    }
    if (*(_DWORD *)(v2 + 84) != (_DWORD)v11)
    {
      *(_DWORD *)(v2 + 80) = -1;
      *(_DWORD *)(v2 + 84) = v11;
    }
    if ((*(_WORD *)(v2 + 48) & 0x200) == 0)
      goto LABEL_15;
  }
  return this;
}

uint64_t JSC::Debugger::willExecuteProgram(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  if ((*(_WORD *)(result + 48) & 0x20) == 0)
  {
    if (!a2)
    {
      v3 = (_QWORD *)(result + 72);
LABEL_15:
      *v3 = 0;
      return result;
    }
    v2 = a2[3];
    if ((v2 & 0xFFFE000000000007) == 3)
    {
      v7 = a2;
      do
      {
        if (*(_BYTE *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
          break;
        v7 = (_QWORD *)*v7;
        v2 = v7[3];
      }
      while ((v2 & 0xFFFE000000000007) == 3);
    }
    *(_QWORD *)(result + 72) = a2;
    v3 = (_QWORD *)(result + 72);
    if ((a2[3] & 0xFFFE000000000007) == 3)
    {
      LODWORD(v4) = 0;
    }
    else
    {
      v4 = a2[2];
      if (v4)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
        if (v5)
        {
          LODWORD(v4) = *(_DWORD *)(v5 + 112);
          if (!(_DWORD)v4)
          {
            do
              v6 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v6 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            LODWORD(v4) = v6 + 1;
            *(_DWORD *)(v5 + 112) = v6 + 1;
            if (v6 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982C8544);
            }
          }
        }
        else
        {
          LODWORD(v4) = 1;
        }
      }
    }
    if (*(_DWORD *)(result + 84) != (_DWORD)v4)
    {
      *(_DWORD *)(result + 80) = -1;
      *(_DWORD *)(result + 84) = v4;
    }
    if ((*(_WORD *)(result + 48) & 0x200) == 0)
      goto LABEL_15;
  }
  return result;
}

void JSC::Debugger::didExecuteProgram(JSC::Debugger *this, JSC::CallFrame *a2)
{
  unint64_t v3;
  JSC::JSGlobalObject **v4;
  JSC::JSGlobalObject *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  __int16 v26;
  WTF *v27;
  WTF **v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  JSC::CallFrame *v32;
  int v33;
  _QWORD *v34;

  if ((*((_WORD *)this + 24) & 0x20) == 0)
  {
    *((_DWORD *)this + 13) = 5;
    if (!a2)
    {
      v6 = (_QWORD **)((char *)this + 72);
      goto LABEL_17;
    }
    v3 = *((_QWORD *)a2 + 3);
    if ((v3 & 0xFFFE000000000007) == 3)
    {
      v32 = a2;
      while (1)
      {
        v33 = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
        if (v33)
          break;
        v32 = *(JSC::CallFrame **)v32;
        v3 = *((_QWORD *)v32 + 3);
        if ((v3 & 0xFFFE000000000007) != 3)
          goto LABEL_4;
      }
      if (v33 != 1)
      {
        v5 = 0;
LABEL_6:
        *((_QWORD *)this + 9) = a2;
        v6 = (_QWORD **)((char *)this + 72);
        if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
        {
          LODWORD(v7) = 0;
        }
        else
        {
          v7 = *((_QWORD *)a2 + 2);
          if (v7)
          {
            v8 = *(_QWORD *)(*(_QWORD *)(v7 + 64) + 40);
            if (v8)
            {
              LODWORD(v7) = *(_DWORD *)(v8 + 112);
              if (!(_DWORD)v7)
              {
                do
                  v9 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                while (__stlxr(v9 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                LODWORD(v7) = v9 + 1;
                *(_DWORD *)(v8 + 112) = v9 + 1;
                if (v9 == -1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982C8808);
                }
              }
            }
            else
            {
              LODWORD(v7) = 1;
            }
          }
        }
        if (*((_DWORD *)this + 21) != (_DWORD)v7)
        {
          *((_DWORD *)this + 20) = -1;
          *((_DWORD *)this + 21) = v7;
        }
        JSC::Debugger::pauseIfNeeded(this, v5);
        v17 = *((_WORD *)this + 24);
        if ((v17 & 0x200) != 0)
        {
          v18 = *v6;
          if (*v6)
          {
            v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
            v20 = (_QWORD *)*v18;
            if (*v18 == v19)
            {
              v20 = *(_QWORD **)(vmEntryRecord(v19) + 8);
              v17 = *((_WORD *)this + 24);
              v18 = (_QWORD *)*((_QWORD *)this + 9);
            }
            v21 = v17 | 0x10;
            *((_WORD *)this + 24) = v17 | 0x10;
            if (v18 == *((_QWORD **)this + 8))
            {
              *((_QWORD *)this + 8) = v20;
              v21 = v17 | 0x12;
              *((_WORD *)this + 24) = v17 | 0x12;
            }
            if (!v20)
              goto LABEL_37;
            v22 = v20[3];
            if ((v22 & 0xFFFE000000000007) == 3)
            {
              v34 = v20;
              do
              {
                if (*(_BYTE *)((v22 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4))
                  break;
                v34 = (_QWORD *)*v34;
                v22 = v34[3];
              }
              while ((v22 & 0xFFFE000000000007) == 3);
            }
            *v6 = v20;
            if ((v20[3] & 0xFFFE000000000007) == 3)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              v23 = v20[2];
              if (v23)
              {
                v24 = *(_QWORD *)(*(_QWORD *)(v23 + 64) + 40);
                if (v24)
                {
                  LODWORD(v23) = *(_DWORD *)(v24 + 112);
                  if (!(_DWORD)v23)
                  {
                    do
                      v25 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                    while (__stlxr(v25 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                    LODWORD(v23) = v25 + 1;
                    *(_DWORD *)(v24 + 112) = v25 + 1;
                    if (v25 == -1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982C8828);
                    }
                  }
                }
                else
                {
                  LODWORD(v23) = 1;
                }
              }
            }
            if (*((_DWORD *)this + 21) != (_DWORD)v23)
            {
              *((_DWORD *)this + 20) = -1;
              *((_DWORD *)this + 21) = v23;
            }
            v21 = *((_WORD *)this + 24);
            if ((v21 & 0x200) != 0)
            {
              if (*v6)
                goto LABEL_18;
            }
            else
            {
LABEL_37:
              *v6 = 0;
            }
            v26 = v21 & 0xFFFD;
            *((_WORD *)this + 24) = v21 & 0xFFFD;
            *((_BYTE *)this + 88) = 0;
            v27 = (WTF *)*((_QWORD *)this + 14);
            *((_QWORD *)this + 14) = 0;
            if (v27)
            {
              WTF::RefCounted<JSC::Breakpoint>::deref(v27, v10, v11, v12, v13, v14, v15, v16);
              v26 = *((_WORD *)this + 24);
            }
            v28 = (WTF **)*((_QWORD *)this + 16);
            *((_QWORD *)this + 8) = 0;
            *((_WORD *)this + 24) = v26 & 0xFFF3;
            if (v28)
            {
              do
              {
                v29 = (WTF **)v28[2];
                v30 = *v28;
                *v28 = 0;
                if (v30)
                  WTF::RefCounted<JSC::Breakpoint>::deref(v30, v10, v11, v12, v13, v14, v15, v16);
                WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
                v28 = v29;
              }
              while (v29);
            }
            v31 = *((_QWORD *)this + 15);
            if (v31)
            {
              *((_QWORD *)this + 15) = 0;
              WTF::fastFree(v31 - 16, v10, v11, v12, v13, v14, v15, v16);
            }
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 17) = 0;
          }
LABEL_18:
          *((_DWORD *)this + 13) = 0;
          return;
        }
LABEL_17:
        *v6 = 0;
        goto LABEL_18;
      }
      v4 = (JSC::JSGlobalObject **)(*((_QWORD *)v32 + 2) + 32);
    }
    else
    {
LABEL_4:
      v4 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 40);
    }
    v5 = *v4;
    goto LABEL_6;
  }
}

void JSC::Debugger::didReachDebuggerStatement(JSC::Debugger *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  JSC::JSGlobalObject **v20;
  JSC::JSGlobalObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  JSC::CallFrame *v26;
  int v27;
  JSC::Debugger *v28;
  int v29;
  _QWORD v30[3];

  if ((*((_WORD *)this + 24) & 0x20) == 0)
  {
    v9 = (_DWORD *)*((_QWORD *)this + 21);
    if (v9)
    {
      *((_DWORD *)this + 13) = 7;
      ++*v9;
      v11 = (WTF *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v9;
      if (v11)
        WTF::RefCounted<JSC::Breakpoint>::deref(v11, a2, a3, a4, a5, a6, a7, a8);
      if ((*((_WORD *)this + 24) & 0x200) == 0)
      {
        JSC::Heap::completeAllJITPlans((JSC::Heap *)(*((_QWORD *)this + 2) + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        *((_WORD *)this + 24) |= 0x200u;
        v28 = this;
        v29 = 1;
        v12 = *((_QWORD *)this + 2) + 192;
        v30[0] = WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction;
        v30[1] = v30;
        v30[2] = &v28;
        JSC::Heap::forEachCodeBlockImpl(v12, (uint64_t)v30, v13, v14, v15, v16, v17, v18);
      }
      if (!a2)
      {
        v22 = (_QWORD *)((char *)this + 72);
LABEL_22:
        *v22 = 0;
LABEL_23:
        *((_DWORD *)this + 13) = 0;
        return;
      }
      v19 = *((_QWORD *)a2 + 3);
      if ((v19 & 0xFFFE000000000007) == 3)
      {
        v26 = a2;
        while (1)
        {
          v27 = *(unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
          if (v27)
            break;
          v26 = *(JSC::CallFrame **)v26;
          v19 = *((_QWORD *)v26 + 3);
          if ((v19 & 0xFFFE000000000007) != 3)
            goto LABEL_9;
        }
        if (v27 != 1)
        {
          v21 = 0;
LABEL_11:
          *((_QWORD *)this + 9) = a2;
          v22 = (_QWORD *)((char *)this + 72);
          if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
          {
            LODWORD(v23) = 0;
          }
          else
          {
            v23 = *((_QWORD *)a2 + 2);
            if (v23)
            {
              v24 = *(_QWORD *)(*(_QWORD *)(v23 + 64) + 40);
              if (v24)
              {
                LODWORD(v23) = *(_DWORD *)(v24 + 112);
                if (!(_DWORD)v23)
                {
                  do
                    v25 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                  while (__stlxr(v25 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                  LODWORD(v23) = v25 + 1;
                  *(_DWORD *)(v24 + 112) = v25 + 1;
                  if (v25 == -1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982C8A50);
                  }
                }
              }
              else
              {
                LODWORD(v23) = 1;
              }
            }
          }
          if (*((_DWORD *)this + 21) != (_DWORD)v23)
          {
            *((_DWORD *)this + 20) = -1;
            *((_DWORD *)this + 21) = v23;
          }
          JSC::Debugger::pauseIfNeeded(this, v21);
          if ((*((_WORD *)this + 24) & 0x200) != 0)
            goto LABEL_23;
          goto LABEL_22;
        }
        v20 = (JSC::JSGlobalObject **)(*((_QWORD *)v26 + 2) + 32);
      }
      else
      {
LABEL_9:
        v20 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 40);
      }
      v21 = *v20;
      goto LABEL_11;
    }
  }
}

uint64_t JSC::Debugger::didQueueMicrotask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E358C018;
  v4[1] = &v7;
  v4[2] = &v8;
  v6 = v4;
  JSC::Debugger::dispatchFunctionToObservers(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t JSC::Debugger::willRunMicrotask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E358C040;
  v4[1] = &v7;
  v4[2] = &v8;
  v6 = v4;
  JSC::Debugger::dispatchFunctionToObservers(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t JSC::Debugger::didRunMicrotask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a3;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E358C068;
  v4[1] = &v7;
  v4[2] = &v8;
  v6 = v4;
  JSC::Debugger::dispatchFunctionToObservers(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

void JSC::DebuggerCallFrame::create(JSC::DebuggerCallFrame *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::CallFrame *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  JSC::DebuggerCallFrame *v32;
  _OWORD *v33;
  JSC::DebuggerCallFrame **v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::DebuggerCallFrame *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;

  if (!a3)
  {
    v84 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v84 = 1;
    *(_OWORD *)(v84 + 8) = 0u;
    *(_OWORD *)(v84 + 24) = 0u;
    *(_OWORD *)(v84 + 40) = 0u;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_QWORD *)(v84 + 72) = 0;
    *(_DWORD *)(v84 + 80) = -1;
    *(_BYTE *)(v84 + 84) = 0;
    *(_QWORD *)(v84 + 24) = JSC::DebuggerCallFrame::currentPosition((JSC::DebuggerCallFrame *)v84, a2, v85, v86, v87, v88, v89, v90);
    *(_QWORD *)this = v84;
    return;
  }
  v10 = a3;
  if (!*(_QWORD *)a3 && !*((_QWORD *)a3 + 1))
  {
    v69 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v69 = 1;
    *(_QWORD *)(v69 + 8) = v10;
    *(_OWORD *)(v69 + 16) = 0u;
    *(_OWORD *)(v69 + 32) = 0u;
    *(_OWORD *)(v69 + 48) = 0u;
    *(_OWORD *)(v69 + 64) = 0u;
    *(_DWORD *)(v69 + 80) = -1;
    *(_BYTE *)(v69 + 84) = 0;
    *(_QWORD *)(v69 + 24) = JSC::DebuggerCallFrame::currentPosition((JSC::DebuggerCallFrame *)v69, a2, v70, v71, v72, v73, v74, v75);
    *(_QWORD *)this = v69;
    return;
  }
  v91 = 0;
  v92 = 0;
  v11 = (uint64_t *)((char *)a2 + 93384);
  v12 = *((_QWORD *)a2 + 11673);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(JSC::VM *, char *))(v12 & 0xFFFFFFFFFFFFFFFCLL))(a2, (char *)a2 + 93384);
    v12 = *v11;
  }
  if ((v12 & 1) != 0)
    v13 = 0;
  else
    v13 = v12;
  ++*((_DWORD *)a2 + 229);
  JSC::ShadowChicken::update((JSC::ShadowChicken *)v13, a2, v10, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(v13 + 44);
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = v14 - 1;
    v18 = 48 * (v14 - 1);
    while (*(_DWORD *)(v13 + 44) > v17)
    {
      v19 = (__int128 *)(*(_QWORD *)(v13 + 32) + v18);
      if (v16 == (_DWORD)v92)
      {
        v20 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, v16 + 1, (unint64_t)v19);
        v16 = HIDWORD(v92);
        v15 = v91;
        v21 = (_OWORD *)((char *)v91 + 48 * HIDWORD(v92));
        v23 = v20[1];
        v22 = v20[2];
        *v21 = *v20;
        v21[1] = v23;
        v21[2] = v22;
      }
      else
      {
        v24 = (_OWORD *)((char *)v15 + 48 * v16);
        v25 = *v19;
        v26 = v19[2];
        v24[1] = v19[1];
        v24[2] = v26;
        *v24 = v25;
      }
      HIDWORD(v92) = ++v16;
      v18 -= 48;
      if (--v17 == -1)
        goto LABEL_18;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1982C8F60);
  }
  v16 = 0;
LABEL_18:
  v27 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v27;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v28 = v27 == 0;
  else
    v28 = 0;
  if (v28)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
    v16 = HIDWORD(v92);
    if (!HIDWORD(v92))
      goto LABEL_51;
  }
  else if (!v16)
  {
    goto LABEL_51;
  }
  v29 = 0;
  v30 = v16 - 1;
  v31 = 48 * (v16 - 1);
  do
  {
    if (HIDWORD(v92) <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1982C8F68);
    }
    v32 = (JSC::DebuggerCallFrame *)v29;
    v33 = (_OWORD *)((char *)v91 + v31);
    if (!*((_BYTE *)v91 + v31 + 44))
      v10 = *(JSC::CallFrame **)((char *)v91 + v31 + 8);
    v29 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = v10;
    *(_QWORD *)(v29 + 16) = 0;
    v34 = (JSC::DebuggerCallFrame **)(v29 + 16);
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    v36 = v33[1];
    v35 = v33[2];
    *(_OWORD *)(v29 + 40) = *v33;
    *(_OWORD *)(v29 + 56) = v36;
    *(_OWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 24) = JSC::DebuggerCallFrame::currentPosition((JSC::DebuggerCallFrame *)v29, a2, v37, v38, v39, v40, v41, v42);
    if (v32)
      ++*(_DWORD *)v32;
    v50 = *v34;
    *v34 = v32;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(v50);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        if (!v32)
          goto LABEL_35;
        goto LABEL_33;
      }
      --*(_DWORD *)v50;
    }
    if (!v32)
      goto LABEL_35;
LABEL_33:
    if (*(_DWORD *)v32 == 1)
    {
      JSC::DebuggerCallFrame::~DebuggerCallFrame(v32);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      --*(_DWORD *)v32;
    }
LABEL_35:
    v31 -= 48;
    --v30;
  }
  while (v30 != -1);
  v67 = (*(_DWORD *)v29)++;
  *(_QWORD *)this = v29;
  if (v67)
  {
    *(_DWORD *)v29 = v67;
  }
  else
  {
    JSC::DebuggerCallFrame::~DebuggerCallFrame((JSC::DebuggerCallFrame *)v29);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  v68 = v91;
  if (v91)
  {
    v91 = 0;
    LODWORD(v92) = 0;
    WTF::fastFree((unint64_t)v68, v43, v44, v45, v46, v47, v48, v49);
  }
}

uint64_t *JSC::Debugger::setBlackboxType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v17[28];
  int v18;
  uint64_t v19;

  v19 = a3;
  v18 = a2;
  result = (uint64_t *)(a1 + 40);
  if ((a3 & 0xFF00000000) != 0)
    return WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::Debugger::BlackboxType&>(result, &v18, &v19, (uint64_t)v17);
  v4 = *result;
  if (*result)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
    v8 = v5 & (v7 ^ HIWORD(v7));
    v9 = *(_DWORD *)(v4 + 8 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9 != -1)
      {
        v8 = ((_DWORD)v8 + v10) & v5;
        v9 = *(_DWORD *)(v4 + 8 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_11;
      }
      v8 = *(unsigned int *)(v4 - 4);
    }
LABEL_11:
    if (v8 != *(_DWORD *)(v4 - 4))
    {
      *(_DWORD *)(v4 + 8 * v8) = -2;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t JSC::DebuggerCallFrame::currentPosition(JSC::DebuggerCallFrame *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::CallFrame *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t result;
  _BYTE v32[16];
  uint64_t v33;
  unsigned int *v34;
  JSC::Wasm::NameSection *v35;

  v9 = (JSC::CallFrame *)*((_QWORD *)this + 1);
  if (!v9)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return v18 | ((unint64_t)v19 << 32);
  }
  if (!*((_BYTE *)this + 84))
    goto LABEL_10;
  v11 = *((_QWORD *)this + 9);
  v12 = JSC::CodeBlock::bytecodeIndexFromCallSiteIndex(v11, *((_DWORD *)this + 20));
  if ((v12 & 0xFF00000000) == 0)
  {
    v9 = (JSC::CallFrame *)*((_QWORD *)this + 1);
    if (v9)
    {
LABEL_10:
      JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v32, v9, a2, 0, a5, a6, a7, a8);
      if (v33)
      {
        v27 = JSC::StackVisitor::Frame::computeLineAndColumn((JSC::StackVisitor::Frame *)v32);
        v18 = v27 - 1;
        v19 = HIDWORD(v27) + 0xFFFFFFFF;
      }
      else
      {
        LODWORD(v19) = -1;
        v18 = -1;
      }
      v28 = v34;
      v34 = 0;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          v35 = (JSC::Wasm::NameSection *)v28;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v35, v20, v21, v22, v23, v24, v25, v26);
        }
      }
      return v18 | ((unint64_t)v19 << 32);
    }
    v18 = -1;
    LODWORD(v19) = -1;
    return v18 | ((unint64_t)v19 << 32);
  }
  v13 = v12 >> 2;
  v14 = *(_QWORD *)(v11 + 56);
  if (v13 < *(unsigned int *)(*(_QWORD *)(v14 + 80) + 12))
  {
    v15 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v14 + 160), v13);
    v16 = *(_QWORD *)(v11 + 64);
    if ((_DWORD)v15)
      v17 = 1;
    else
      v17 = *(_DWORD *)(v16 + 60) + 1;
    v18 = v15 + *(_DWORD *)(v16 + 56);
    LODWORD(v19) = v17 + HIDWORD(v15) - 1;
    return v18 | ((unint64_t)v19 << 32);
  }
  result = 2038;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DebuggerCallFrame::sourceID(JSC::DebuggerCallFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    if (!*((_BYTE *)this + 84))
      return 0;
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 84))
  {
LABEL_7:
    v2 = *((_QWORD *)this + 9);
    goto LABEL_8;
  }
  if ((*(_QWORD *)(v1 + 24) & 0xFFFE000000000007) == 3)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
LABEL_8:
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  if (!v3)
    return 1;
  result = *(unsigned int *)(v3 + 112);
  if (!(_DWORD)result)
  {
    do
      v5 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v5 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    *(_DWORD *)(v3 + 112) = v5 + 1;
    if (v5 == -1)
    {
      result = 50;
      __break(0xC471u);
    }
    else
    {
      return *(unsigned int *)(v3 + 112);
    }
  }
  return result;
}

void JSC::DebuggerCallFrame::functionName(JSC::DebuggerCallFrame *this@<X0>, JSC::VM *a2@<X1>, const JSC::PropertyTable *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  uint64_t v9;
  BOOL v10;
  _BYTE *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int *v21;
  _BYTE *v22;
  WTF *v23;

  if (*((_QWORD *)this + 1))
  {
    if (!*((_BYTE *)this + 84))
    {
      JSC::CallFrame::friendlyFunctionName(*((_QWORD *)this + 1), a8);
      return;
    }
  }
  else if (!*((_BYTE *)this + 84))
  {
LABEL_15:
    *a8 = 0;
    return;
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    v10 = *(_BYTE *)(v9 + 5) == 26;
  else
    v10 = 0;
  if (v10)
  {
    JSC::JSFunction::calculatedDisplayName(*((JSC::JSFunction **)this + 5), a2, a3, a4, a5, a6, a7, (WTF::StringImpl **)a8);
    return;
  }
  JSC::CodeBlock::inferredName(*((JSC::CodeBlock **)this + 9));
  if (!v23)
    goto LABEL_15;
  v11 = (char *)v23 + 16;
  v12 = strlen((const char *)v23 + 16);
  if (v12)
  {
    v20 = v12;
    if (v12 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v21 = (int *)WTF::fastCompactMalloc((WTF *)(v12 + 20));
    v22 = v21 + 5;
    *v21 = 2;
    v21[1] = v20;
    *((_QWORD *)v21 + 1) = v21 + 5;
    v21[4] = 4;
    if (v20 == 1)
      *v22 = *v11;
    else
      memcpy(v22, v11, v20);
  }
  else
  {
    v21 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  *a8 = v21;
  if (*(_DWORD *)v23 == 1)
    WTF::fastFree((unint64_t)v23, v13, v14, v15, v16, v17, v18, v19);
  else
    --*(_DWORD *)v23;
}

unint64_t JSC::DebuggerScope::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t result;
  int v14;
  uint64_t (*v15)(_QWORD *);
  _QWORD *v16;
  unint64_t v17;
  _QWORD v18[3];

  v10 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v11 = *(_QWORD *)(v10 + 760);
  if ((v11 & 1) != 0)
  {
    v15 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v16 = (_QWORD *)(v10 - 16);
    v18[0] = *v16;
    v18[1] = v10;
    v18[2] = v10 + 760;
    v11 = v15(v18);
  }
  v12 = *(_QWORD **)(a1 + 40440);
  if (!v12)
    v12 = (_QWORD *)JSC::GCClient::Heap::debuggerScopeSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v12[3];
  if (result < v12[4])
    goto LABEL_5;
  result = v12[5];
  if ((result & 1) == 0)
  {
    v17 = *(_QWORD *)(result + 8) ^ v12[6];
    v12[4] = result + HIDWORD(v17);
    v12[5] = result + (int)v17;
LABEL_5:
    v12[3] = result + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v12, a1 + 192, 32, 0, 0);
LABEL_6:
  *(_DWORD *)result = 0;
  v14 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)result = v11 >> 4;
  *(_DWORD *)(result + 4) = v14;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::DebuggerCallFrame::type(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(unsigned __int8 *)(a1 + 84);
  if (v1)
  {
    if ((_DWORD)result)
    {
      return 1;
    }
    else
    {
      v3 = *(_QWORD *)(v1 + 24);
      return v3 && *(_BYTE *)(v3 + 5) == 26;
    }
  }
  return result;
}

unint64_t JSC::DebuggerCallFrame::thisValue(JSC::DebuggerCallFrame *this, JSC::VM *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  JSC::JSGlobalObject **v14;
  JSC::JSGlobalObject *v15;
  unsigned int v16;
  int v18;
  uint64_t v20;

  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v8)
  {
    if (!*((_BYTE *)this + 84))
      return 10;
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 84))
  {
LABEL_7:
    v9 = *((_QWORD *)this + 7);
    v20 = v9;
    v11 = (uint64_t *)((char *)this + 72);
    if (!v9)
      return 10;
    goto LABEL_8;
  }
  v9 = v8[5];
  v20 = v9;
  if ((v8[3] & 0xFFFE000000000007) == 3)
  {
    if (v9)
    {
      v10 = 1;
      goto LABEL_10;
    }
    return 10;
  }
  v11 = v8 + 2;
  if (!v9)
    return 10;
LABEL_8:
  v12 = *v11;
  v10 = 1;
  if (v12)
    v10 = (*(_BYTE *)(*(_QWORD *)(v12 + 64) + 68) & 1) == 0;
LABEL_10:
  v13 = v8[3];
  if ((v13 & 0xFFFE000000000007) == 3)
  {
    while (1)
    {
      v18 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
      if (v18)
        break;
      v8 = (_QWORD *)*v8;
      v13 = v8[3];
      if ((v13 & 0xFFFE000000000007) != 3)
        goto LABEL_11;
    }
    if (v18 != 1)
    {
      v15 = 0;
      goto LABEL_13;
    }
    v14 = (JSC::JSGlobalObject **)(v8[2] + 32);
  }
  else
  {
LABEL_11:
    v14 = (JSC::JSGlobalObject **)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 40);
  }
  v15 = *v14;
LABEL_13:
  if ((v9 & 0xFFFE000000000002) != 0 || (v16 = *(unsigned __int8 *)(v9 + 5), v16 < 0x17))
  {
    if (!v10)
      return v9;
    if ((v9 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((unint64_t)v9 >> 49)
        return JSC::constructNumber((uint64_t)v15, (JSC::VM *)v9, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 6)
        return JSC::constructBooleanFromImmediateBoolean((uint64_t)v15, v9, a3, (uint64_t)a4, a5, a6, a7, a8);
      if ((v9 & 0xFFFE000000000002) != 0)
        return JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v20, v15, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(unsigned __int8 *)(v9 + 5) > 0x16u)
        return v9;
      return JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, (JSC::SymbolObject **)v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    return *((_QWORD *)v15 + 8);
  }
  if (v16 - 51 <= 5)
  {
    if (!v10)
      return 10;
    return *((_QWORD *)v15 + 8);
  }
  return v9;
}

JSC::DebuggerCallFrame *JSC::DebuggerCallFrame::invalidate(JSC::DebuggerCallFrame *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  JSC::DebuggerCallFrame *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (this)
  {
    ++*(_DWORD *)this;
    do
    {
      *((_QWORD *)this + 1) = 0;
      v1 = (uint64_t *)*((_QWORD *)this + 4);
      if (v1)
      {
        v2 = *v1;
        if (*v1)
        {
          if (!*(_QWORD *)(v2 + 16))
            goto LABEL_8;
          do
          {
            v3 = *(_QWORD *)(v2 + 24);
            *(_QWORD *)(v2 + 16) = 0;
            *(_QWORD *)(v2 + 24) = 0;
            v2 = v3;
          }
          while (v3);
          v1 = (uint64_t *)*((_QWORD *)this + 4);
          if (v1)
          {
LABEL_8:
            v4 = v1 - 2;
            v5 = *(_QWORD *)(((unint64_t)(v1 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v6 = (uint64_t *)*(v1 - 1);
            if (v6)
            {
              v7 = *v4;
              *v6 = *v4;
              *(_QWORD *)(v7 + 8) = v6;
              *v4 = 0;
              v4[1] = 0;
            }
            *v4 = *(_QWORD *)(v5 + 40);
            *(_QWORD *)(v5 + 40) = v4;
            *((_QWORD *)this + 4) = 0;
          }
        }
      }
      v8 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (*(_DWORD *)this == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(this);
        WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        --*(_DWORD *)this;
      }
      this = v8;
    }
    while (v8);
  }
  return this;
}

uint64_t JSC::DebuggerScope::put(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 56)
      result = *(_QWORD *)(result + 24);
    *(_QWORD *)(a5 + 8) = result;
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) + 0x48))();
  }
  return result;
}

uint64_t JSC::DebuggerScope::deleteProperty(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 56)
      result = *(_QWORD *)(result + 24);
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) + 0x58))();
  }
  return result;
}

uint64_t JSC::DebuggerScope::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int16 *v47;
  uint64_t i;
  unsigned int v49;
  BOOL v50;
  unsigned int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  JSC::VMTraps *v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::VM *v69;
  JSC::VMTraps *v70;
  char *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  JSC::VM *v92;
  JSC::VMTraps *v93;
  char *v94;
  uint64_t v95;
  _BYTE *v96;
  char OwnStaticPropertySlot;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  size_t v115;
  char *v116;
  char *v117;
  int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned __int8 *v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t j;
  unsigned int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  JSC::VMTraps *v185;
  JSC::VMTraps *v186;
  _BYTE *v187;
  char v188;
  JSC::Structure *v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE __dst[8];
  char v193;
  char __s[3];
  _BYTE v195[39];

  *(_QWORD *)&v195[23] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 0;
  if (*(_BYTE *)(v8 + 5) == 56)
    v8 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(a4 + 24) = v8;
  v12 = (_BYTE *)(v8 + 6);
  v13 = a3 >> 4;
  v14 = v8;
  if ((*(_BYTE *)(v8 + 6) & 8) == 0)
  {
    v15 = *(JSC::VM **)(a2 + 56);
    v16 = v8;
    do
    {
      v17 = *(_DWORD *)v16 & 0xFFFFFFFE;
      v18 = 16 * v17;
      if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * v17 + 0x20)) != 0)
        goto LABEL_33;
      v19 = *(_QWORD *)(16 * v17 + 0x58);
      if (!v19)
      {
        v20 = *(_QWORD *)(16 * v17 + 0x40);
        if (!v20 || *(_BYTE *)(v20 + 5) != 1 && *(_DWORD *)(v20 + 80) < 2u)
          goto LABEL_33;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v18, v15, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v19)
          goto LABEL_33;
      }
      if (!*(_DWORD *)(v19 + 24))
        goto LABEL_33;
      v21 = *(_QWORD *)(v19 + 16);
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(unsigned int *)(v19 + 8);
      v24 = *(_DWORD *)(a3 + 16);
      if ((v21 & 1) != 0)
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(a3 + 32);
        v25 = *(_DWORD *)(v19 + 12);
        v26 = (v24 >> 8) & *(_QWORD *)&v25;
        v27 = *(unsigned __int8 *)(v22 + v26);
        if (!*(_BYTE *)(v22 + v26))
          goto LABEL_33;
        v28 = v22 + v23;
        v29 = 1;
        while (1)
        {
          v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
          if (a3 == (v30 & 0xFFFFFFFFFFFFLL))
            break;
          v26 = ((_DWORD)v26 + v29) & v25;
          v27 = *(unsigned __int8 *)(v22 + v26);
          ++v29;
          if (!*(_BYTE *)(v22 + v26))
            goto LABEL_33;
        }
        a6 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
      }
      else
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(a3 + 32);
        v31 = *(_DWORD *)(v19 + 12);
        v32 = v31 & (v24 >> 8);
        v33 = *(_DWORD *)(v22 + 4 * v32);
        if (!v33)
          goto LABEL_33;
        v34 = v22 + 4 * v23;
        v35 = 1;
        while (1)
        {
          v36 = (v33 - 1);
          if (*(_QWORD *)(v34 + 16 * v36) == a3)
            break;
          v32 = (v32 + v35) & v31;
          v33 = *(_DWORD *)(v22 + 4 * v32);
          ++v35;
          if (!v33)
            goto LABEL_33;
        }
        a6 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v42 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v43 = v16 + 16;
          v44 = a6 << 32;
        }
        else
        {
          v43 = *(_QWORD *)(v16 + 8) - 8;
          v44 = 0x3F00000000 - (a6 << 32);
        }
        v45 = *(_QWORD *)(v43 + (v44 >> 29));
        if ((v45 & 0xFFFE000000000002) == 0)
        {
          v46 = *(unsigned __int8 *)(v45 + 5);
          if (v46 != 5)
          {
            if (v46 != 6)
              goto LABEL_54;
            v53 = *(_DWORD *)(v18 + 16) & 3;
            v55 = *(_QWORD *)(v45 + 8);
            v54 = *(_QWORD *)(v45 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v45 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v57 = *(_QWORD *)(v45 + 24);
              v56 = *(_QWORD *)(v45 + 32);
              *(_QWORD *)a4 = v55;
              *(_QWORD *)(a4 + 8) = v54;
              *(_DWORD *)(a4 + 16) = HIDWORD(a6);
              *(_QWORD *)(a4 + 32) = v16;
              goto LABEL_72;
            }
            *(_QWORD *)a4 = v55;
            *(_QWORD *)(a4 + 8) = v54;
            *(_DWORD *)(a4 + 16) = HIDWORD(a6);
            *(_QWORD *)(a4 + 32) = v16;
LABEL_211:
            *(_BYTE *)(a4 + 49) = 3;
            if (v53 != 2)
              *(_BYTE *)(a4 + 48) = 1;
            goto LABEL_66;
          }
          v51 = (unsigned int *)v16;
          v52 = (uint64_t)v15;
LABEL_65:
          JSC::JSObject::fillGetterPropertySlot(v51, v52, a4, v45, v42, a6);
          goto LABEL_66;
        }
LABEL_54:
        *(_QWORD *)a4 = v45;
        *(_QWORD *)(a4 + 32) = v16;
LABEL_55:
        *(_DWORD *)(a4 + 16) = v42;
        *(_DWORD *)(a4 + 20) = a6;
        *(_WORD *)(a4 + 48) = 257;
        goto LABEL_66;
      }
LABEL_33:
      if ((*v12 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v15, a3, a4) & 1) != 0)
        goto LABEL_66;
      v14 = *(_QWORD *)(v18 + 48);
      if (!v14)
        v14 = *(_QWORD *)(v16 + 16);
      if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) < 0x17u)
      {
        if (!a3)
          return 0;
        v37 = *(_DWORD *)(a3 + 16);
        if ((v37 & 0x20) != 0)
          return 0;
        v38 = *(_WORD **)(a3 + 8);
        v39 = *(unsigned int *)(a3 + 4);
        if ((v37 & 4) == 0)
        {
          if ((_DWORD)v39)
          {
            v40 = (unsigned __int16)*v38 - 48;
            if (v40 <= 9 && (*v38 != 48 || v39 <= 1))
            {
              v47 = v38 + 1;
              for (i = v39 - 1; i; --i)
              {
                if (v40 > 0x19999999)
                  return 0;
                v49 = *v47 - 48;
                if (v49 > 9)
                  return 0;
                result = 0;
                v50 = __CFADD__(v49, 10 * v40);
                v40 = v49 + 10 * v40;
                ++v47;
                if (v50)
                  return result;
              }
              goto LABEL_238;
            }
          }
          return 0;
        }
        if (!(_DWORD)v39)
          return 0;
        v40 = *(unsigned __int8 *)v38 - 48;
        if (v40 > 9 || v39 >= 2 && *(_BYTE *)v38 == 48)
          return 0;
        v139 = (unsigned __int8 *)v38 + 1;
        for (j = v39 - 1; j; --j)
        {
          if (v40 > 0x19999999)
            return 0;
          v141 = *v139 - 48;
          if (v141 > 9)
            return 0;
          result = 0;
          v50 = __CFADD__(v141, 10 * v40);
          v40 = v141 + 10 * v40;
          ++v139;
          if (v50)
            return result;
        }
LABEL_238:
        if (v40 == -1)
          return 0;
        v142 = v40;
        v143 = *(_QWORD *)(a2 + 56);
        while (2)
        {
          v144 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
          v151 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                        * *(unsigned int *)(v144 + 0x4C)
                                                                                        + 0x70))(v8, a2, v142, a4);
          if (*(_DWORD *)(v143 + 80))
          {
            v155 = *(_DWORD *)(v143 + 80);
            if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v143 + 64), 7u, v145, v146, v147, v148, v149, v150);
            if (*(_QWORD *)(v143 + 16))
              return 0;
          }
          if ((v151 & 1) != 0)
            goto LABEL_66;
          v152 = *(unsigned __int8 *)(a4 + 50);
          if (v152 == 3)
          {
            if (*(_BYTE *)(a4 + 52))
              return 0;
            v153 = *(unsigned __int8 *)(v8 + 5);
            if (v153 != 61)
              goto LABEL_244;
          }
          else
          {
            v153 = *(unsigned __int8 *)(v8 + 5);
            if (v153 == 61)
            {
              if (v152 == 1)
                return 0;
            }
            else
            {
LABEL_244:
              if ((v153 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v8 + 40) & 7u) > 2)
                {
                  __dst[0] = 0;
                  v193 = 0;
                  v158 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v8, (uint64_t)__dst, v145, v146, v147, v148, v149, v150);
                  v157 = v159 ? v158 : 0;
                }
                else
                {
                  v157 = *(_QWORD *)(v8 + 24);
                }
                if (v157 <= v142)
                  return 0;
              }
            }
          }
          if ((*(_WORD *)(v144 + 12) & 0x800) == 0 || *(_BYTE *)(a4 + 50) == 3)
          {
            v154 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
            if (!v154)
              v154 = *(_QWORD *)(v8 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v154 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xB0))(v8, a2);
            }
            else
            {
              v154 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
              if (!v154)
                v154 = *(_QWORD *)(v8 + 16);
            }
            if (*(_DWORD *)(v143 + 80))
            {
              v156 = *(_DWORD *)(v143 + 80);
              if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v143 + 64), 7u, v145, v146, v147, v148, v149, v150);
              if (*(_QWORD *)(v143 + 16))
                return 0;
            }
          }
          if ((v154 & 0xFFFE000000000002) != 0)
            return 0;
          result = 0;
          v8 = v154;
          if (*(unsigned __int8 *)(v154 + 5) <= 0x16u)
            return result;
          continue;
        }
      }
      v12 = (_BYTE *)(v14 + 6);
      v16 = v14;
    }
    while ((*(_BYTE *)(v14 + 6) & 8) == 0);
  }
  if (a3)
  {
    v58 = *(_DWORD *)(a3 + 16);
    if ((v58 & 0x20) == 0)
    {
      v59 = *(_BYTE **)(a3 + 8);
      v60 = *(unsigned int *)(a3 + 4);
      if ((v58 & 4) != 0)
      {
        if ((_DWORD)v60)
        {
          v61 = *v59 - 48;
          if (v61 <= 9 && (v60 < 2 || *v59 != 48))
          {
            v160 = v59 + 1;
            v161 = v60 - 1;
            while (v161)
            {
              if (v61 <= 0x19999999)
              {
                v162 = *v160 - 48;
                if (v162 <= 9)
                {
                  v50 = __CFADD__(v162, 10 * v61);
                  v61 = v162 + 10 * v61;
                  ++v160;
                  --v161;
                  if (!v50)
                    continue;
                }
              }
              goto LABEL_80;
            }
LABEL_290:
            if (v61 != -1)
            {
              v163 = v61;
              v164 = *(_QWORD *)(a2 + 56);
              while (1)
              {
                v165 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
                v166 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                              * *(unsigned int *)(v165 + 0x4C)
                                                                                              + 0x70))(v8, a2, v163, a4);
                v173 = v166;
                if (*(_DWORD *)(v164 + 80))
                {
                  v177 = *(_DWORD *)(v164 + 80);
                  if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v164 + 64), 7u, v167, v168, v169, v170, v171, v172);
                  v178 = *(_QWORD *)(v164 + 16);
                  if (v178)
                    v179 = 1;
                  else
                    v179 = v173;
                  if ((v179 & 1) != 0)
                  {
                    if (!v178)
                      goto LABEL_66;
                    return 0;
                  }
                }
                else if ((v166 & 1) != 0)
                {
                  goto LABEL_66;
                }
                v174 = *(unsigned __int8 *)(a4 + 50);
                if (v174 == 3)
                {
                  if (*(_BYTE *)(a4 + 52))
                    return 0;
                  v175 = *(unsigned __int8 *)(v8 + 5);
                  if (v175 == 61)
                    goto LABEL_297;
                }
                else
                {
                  v175 = *(unsigned __int8 *)(v8 + 5);
                  if (v175 == 61)
                  {
                    if (v174 == 1)
                      return 0;
                    goto LABEL_297;
                  }
                }
                if ((v175 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v8 + 40) & 7u) > 2)
                  {
                    __dst[0] = 0;
                    v193 = 0;
                    v182 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v8, (uint64_t)__dst, v167, v168, v169, v170, v171, v172);
                    v181 = v183 ? v182 : 0;
                  }
                  else
                  {
                    v181 = *(_QWORD *)(v8 + 24);
                  }
                  if (v181 <= v163)
                    return 0;
                }
LABEL_297:
                if ((*(_WORD *)(v165 + 12) & 0x800) == 0 || *(_BYTE *)(a4 + 50) == 3)
                {
                  v176 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
                  if (!v176)
                    v176 = *(_QWORD *)(v8 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v176 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v8, a2);
                  }
                  else
                  {
                    v176 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
                    if (!v176)
                      v176 = *(_QWORD *)(v8 + 16);
                  }
                  if (*(_DWORD *)(v164 + 80))
                  {
                    v180 = *(_DWORD *)(v164 + 80);
                    if ((v180 & 0x27) != 0 && (v180 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v164 + 64), 7u, v167, v168, v169, v170, v171, v172);
                    if (*(_QWORD *)(v164 + 16))
                      return 0;
                  }
                }
                if ((v176 & 0xFFFE000000000002) != 0)
                  return 0;
                result = 0;
                v8 = v176;
                if (*(unsigned __int8 *)(v176 + 5) <= 0x16u)
                  return result;
              }
            }
          }
        }
      }
      else if ((_DWORD)v60)
      {
        v61 = *(unsigned __int16 *)v59 - 48;
        if (v61 <= 9 && (*(_WORD *)v59 != 48 || v60 <= 1))
        {
          v133 = (unsigned __int16 *)(v59 + 2);
          v134 = v60 - 1;
          while (v134)
          {
            if (v61 <= 0x19999999)
            {
              v135 = *v133 - 48;
              if (v135 <= 9)
              {
                v50 = __CFADD__(v135, 10 * v61);
                v61 = v135 + 10 * v61;
                ++v133;
                --v134;
                if (!v50)
                  continue;
              }
            }
            goto LABEL_80;
          }
          goto LABEL_290;
        }
      }
    }
  }
LABEL_80:
  v62 = *(_QWORD *)(a2 + 56);
  v63 = (JSC::VMTraps *)(v62 + 64);
  v64 = &__s[1];
  v65 = v195;
  while (1)
  {
    v66 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v14 + 6) & 8) == 0)
      break;
    v186 = v63;
    v187 = v65;
    v101 = v64;
    v191 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    v188 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                  * *(unsigned int *)(v191 + 0x4C)
                                                                                  + 0x68))(v14, a2, a3, a4);
    v102 = v62;
    if (*(_DWORD *)(v62 + 80))
    {
      v129 = *(_DWORD *)(v62 + 80);
      if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v186, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v62 + 16))
        return 0;
    }
    if ((v188 & 1) != 0)
      goto LABEL_66;
    v103 = *(unsigned __int8 *)(a4 + 50);
    if (v103 == 3)
    {
      if (*(_BYTE *)(a4 + 52))
        return 0;
      v104 = *(unsigned __int8 *)(v14 + 5);
      if (v104 == 61)
        goto LABEL_180;
    }
    else
    {
      v104 = *(unsigned __int8 *)(v14 + 5);
      if (v104 == 61)
      {
        v63 = v186;
        v65 = v187;
        v64 = v101;
        v66 = v191;
        if (v103 == 1)
          return 0;
        goto LABEL_110;
      }
    }
    if (!a3)
      goto LABEL_180;
    if ((v104 - 50) < 0xFFFFFFF5)
      goto LABEL_180;
    v105 = *(_DWORD *)(a3 + 16);
    if ((v105 & 0x20) != 0)
      goto LABEL_180;
    v106 = *(unsigned int *)(a3 + 4);
    if (!(_DWORD)v106)
      goto LABEL_180;
    v107 = *(unsigned __int8 **)(a3 + 8);
    if ((v105 & 4) != 0)
    {
      v108 = *v107;
      if ((_DWORD)v106 == 1)
      {
LABEL_135:
        v63 = v186;
        v65 = v187;
        v64 = v101;
        v66 = v191;
        if ((v108 - 48) < 0xA)
          return 0;
        goto LABEL_110;
      }
      if (v108 == 45)
      {
        v108 = v107[1];
        goto LABEL_139;
      }
      if ((v108 - 48) < 0xA)
        goto LABEL_150;
      if ((_DWORD)v106 == 8)
        goto LABEL_149;
    }
    else
    {
      v108 = *(unsigned __int16 *)v107;
      if ((_DWORD)v106 == 1)
        goto LABEL_135;
      if (v108 == 45)
      {
        v108 = *((unsigned __int16 *)v107 + 1);
LABEL_139:
        if ((v108 - 48) < 0xA)
        {
          if ((_DWORD)v106 == 2)
            return 0;
          goto LABEL_150;
        }
        if ((_DWORD)v106 != 9)
          goto LABEL_180;
LABEL_149:
        if (v108 != 73)
          goto LABEL_180;
        goto LABEL_150;
      }
      if ((v108 - 48) < 0xA || (_DWORD)v106 == 8 && v108 == 73)
        goto LABEL_150;
    }
    if ((_DWORD)v106 != 3 || v108 != 78)
      goto LABEL_180;
LABEL_150:
    v184 = v184 & 0xFFFFFF0000000000 | v106 | ((unint64_t)((v105 >> 2) & 1) << 32);
    JSC::jsToNumber(v107, v184);
    v110 = (v109 >> 52) & 0x7FF;
    if ((_DWORD)v110 == 2047)
    {
      if ((v109 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v111 = v187;
      }
      else
      {
        if ((v109 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v117 = v101;
        }
        else
        {
          v117 = __s;
        }
        *(_QWORD *)v117 = 0x7974696E69666E49;
        v111 = v117 + 8;
      }
      goto LABEL_164;
    }
    v112 = v109 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v109 & 0x8000000000000000) != 0 && v112)
    {
      __s[0] = 45;
      v113 = v101;
    }
    else
    {
      if (!v112)
      {
        __s[0] = 48;
        v111 = v101;
        goto LABEL_164;
      }
      v113 = __s;
    }
    v114 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v109 & 0x800FFFFFFFFFFFFFLL, v110);
    v111 = WTF::dragonbox::detail::to_shortest(v114, v115, (uint64_t)v113, v116);
LABEL_164:
    *v111 = 0;
    v118 = strlen(__s);
    memcpy(__dst, __s, v118);
    __dst[v118] = 0;
    v119 = *(unsigned int *)(a3 + 4);
    v120 = *(unsigned __int8 **)(a3 + 8);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v119)
      {
        v125 = __dst;
        v126 = *(unsigned int *)(a3 + 4);
        do
        {
          v128 = *v125++;
          v127 = v128;
          if (!v128 || *v120 != v127)
            goto LABEL_180;
          ++v120;
        }
        while (--v126);
      }
    }
    else if ((_DWORD)v119)
    {
      v121 = __dst;
      v122 = *(unsigned int *)(a3 + 4);
      while (1)
      {
        v124 = *v121++;
        v123 = v124;
        if (!v124 || *(unsigned __int16 *)v120 != v123)
          break;
        v120 += 2;
        if (!--v122)
          goto LABEL_176;
      }
LABEL_180:
      v63 = v186;
      v65 = v187;
      v64 = v101;
      v62 = v102;
      v66 = v191;
      goto LABEL_110;
    }
LABEL_176:
    v63 = v186;
    v65 = v187;
    v64 = v101;
    v62 = v102;
    v66 = v191;
    if (!__dst[v119])
      return 0;
LABEL_110:
    if ((*(_WORD *)(v66 + 12) & 0x800) != 0)
    {
      v90 = *(_DWORD *)v14;
      if (*(_BYTE *)(a4 + 50) != 3)
      {
        v98 = v65;
        v99 = v64;
        v185 = v63;
        v100 = 16 * (v90 & 0xFFFFFFFE);
        if ((*(_WORD *)(v100 + 12) & 0x800) != 0)
        {
          v91 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v100 + 76) + 0xB0))(v14, a2);
        }
        else
        {
          v91 = *(_QWORD *)(v100 + 48);
          if (!v91)
            v91 = *(_QWORD *)(v14 + 16);
        }
        if (*(_DWORD *)(v62 + 80))
        {
          v130 = *(_DWORD *)(v62 + 80);
          if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v185, 7u, a3, a4, a5, a6, a7, a8);
          v63 = v185;
          v64 = v99;
          v65 = v98;
          if (*(_QWORD *)(v62 + 16))
            return 0;
        }
        else
        {
          v63 = v185;
          v64 = v99;
          v65 = v98;
        }
        goto LABEL_114;
      }
    }
    else
    {
      v90 = *(_DWORD *)v14;
    }
    v91 = *(_QWORD *)(16 * (v90 & 0xFFFFFFFE) + 0x30);
    if (!v91)
      v91 = *(_QWORD *)(v14 + 16);
LABEL_114:
    if ((v91 & 0xFFFE000000000002) != 0)
      return 0;
    result = 0;
    v14 = v91;
    if (*(unsigned __int8 *)(v91 + 5) <= 0x16u)
      return result;
  }
  if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_109;
  v67 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x58);
  if (!v67)
  {
    v68 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40);
    if (!v68 || *(_BYTE *)(v68 + 5) != 1 && *(_DWORD *)(v68 + 80) < 2u)
      goto LABEL_109;
    v189 = (JSC::Structure *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE));
    v69 = (JSC::VM *)v62;
    v70 = v63;
    v71 = v64;
    v72 = v62;
    v73 = v65;
    JSC::Structure::materializePropertyTable(v189, v69, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v66 = (uint64_t)v189;
    v65 = v73;
    v62 = v72;
    v64 = v71;
    v63 = v70;
    if (!v67)
      goto LABEL_109;
  }
  if (!*(_DWORD *)(v67 + 24))
    goto LABEL_109;
  v74 = *(_QWORD *)(v67 + 16);
  v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
  v76 = *(unsigned int *)(v67 + 8);
  v77 = *(_DWORD *)(a3 + 16);
  if ((v74 & 1) != 0)
  {
    if ((v77 & 0x20) != 0)
      v77 = *(_DWORD *)(a3 + 32);
    v78 = *(_DWORD *)(v67 + 12);
    v79 = (v77 >> 8) & *(_QWORD *)&v78;
    v80 = *(unsigned __int8 *)(v75 + v79);
    if (*(_BYTE *)(v75 + v79))
    {
      v81 = v75 + v76;
      v82 = 1;
      while (1)
      {
        v83 = *(_QWORD *)(v81 + 8 * (v80 - 1));
        if (a3 == (v83 & 0xFFFFFFFFFFFFLL))
          break;
        v79 = ((_DWORD)v79 + v82) & v78;
        v80 = *(unsigned __int8 *)(v75 + v79);
        ++v82;
        if (!*(_BYTE *)(v75 + v79))
          goto LABEL_109;
      }
      a6 = (v83 >> 16) & 0xFF00000000 | HIBYTE(v83);
      goto LABEL_106;
    }
    goto LABEL_109;
  }
  if ((v77 & 0x20) != 0)
    v77 = *(_DWORD *)(a3 + 32);
  v84 = *(_DWORD *)(v67 + 12);
  v85 = v84 & (v77 >> 8);
  v86 = *(_DWORD *)(v75 + 4 * v85);
  if (!v86)
    goto LABEL_109;
  v87 = v75 + 4 * v76;
  v88 = 1;
  while (1)
  {
    v89 = (v86 - 1);
    if (*(_QWORD *)(v87 + 16 * v89) == a3)
      break;
    v85 = (v85 + v88) & v84;
    v86 = *(_DWORD *)(v75 + 4 * v85);
    ++v88;
    if (!v86)
      goto LABEL_109;
  }
  a6 = *(unsigned int *)(v87 + 16 * v89 + 8) | ((unint64_t)*(unsigned __int8 *)(v87 + 16 * v89 + 12) << 32);
LABEL_106:
  if ((_DWORD)a6 == -1)
  {
LABEL_109:
    if ((*(_BYTE *)(v14 + 6) & 0x20) != 0)
    {
      v190 = v66;
      v92 = (JSC::VM *)v62;
      v93 = v63;
      v94 = v64;
      v95 = v62;
      v96 = v65;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v14, v92, a3, a4);
      v66 = v190;
      v65 = v96;
      v62 = v95;
      v64 = v94;
      v63 = v93;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_66;
    }
    goto LABEL_110;
  }
  v42 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v131 = v14 + 16;
    v132 = a6 << 32;
  }
  else
  {
    v131 = *(_QWORD *)(v14 + 8) - 8;
    v132 = 0x3F00000000 - (a6 << 32);
  }
  v45 = *(_QWORD *)(v131 + (v132 >> 29));
  if ((v45 & 0xFFFE000000000002) != 0)
  {
LABEL_217:
    *(_QWORD *)a4 = v45;
    *(_QWORD *)(a4 + 32) = v14;
    goto LABEL_55;
  }
  v136 = *(unsigned __int8 *)(v45 + 5);
  if (v136 == 5)
  {
    v51 = (unsigned int *)v14;
    v52 = v62;
    goto LABEL_65;
  }
  if (v136 != 6)
    goto LABEL_217;
  v53 = *(_DWORD *)(v66 + 16) & 3;
  v138 = *(_QWORD *)(v45 + 8);
  v137 = *(_QWORD *)(v45 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
  {
    *(_QWORD *)a4 = v138;
    *(_QWORD *)(a4 + 8) = v137;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = v14;
    goto LABEL_211;
  }
  v57 = *(_QWORD *)(v45 + 24);
  v56 = *(_QWORD *)(v45 + 32);
  *(_QWORD *)a4 = v138;
  *(_QWORD *)(a4 + 8) = v137;
  *(_DWORD *)(a4 + 16) = HIDWORD(a6);
  *(_QWORD *)(a4 + 32) = v14;
LABEL_72:
  *(_BYTE *)(a4 + 49) = 3;
  if (v53 != 2)
    *(_BYTE *)(a4 + 48) = 1;
  *(_BYTE *)(a4 + 51) = 1;
  *(_QWORD *)(a4 + 72) = v57;
  *(_QWORD *)(a4 + 80) = v56;
LABEL_66:
  result = 1;
  if (*(_BYTE *)(a4 + 49) == 1 && !*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = 10;
    *(_DWORD *)(a4 + 16) = 4;
    *(_BYTE *)(a4 + 49) = 1;
  }
  return result;
}

uint64_t JSC::DebuggerScope::getOwnPropertyNames(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 56)
      result = *(_QWORD *)(result + 24);
    return JSC::JSObject::getPropertyNames(result, a2, a3, a4);
  }
  return result;
}

uint64_t JSC::DebuggerScope::defineOwnProperty(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_BYTE *)(result + 5) == 56)
      result = *(_QWORD *)(result + 24);
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) + 0x90))();
  }
  return result;
}

void JSC::DebuggerScope::visitChildren(JSC::DebuggerScope *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 3);
  if (!v18)
    return;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      goto LABEL_17;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_17:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::DebuggerScope::visitChildren(JSC::DebuggerScope *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::DebuggerScope::name(JSC::DebuggerScope *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  JSC::CodeBlock *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 5) - 55 >= 0xFFFFFFFC;
  else
    v4 = 0;
  if (v4
    && (v5 = *(_QWORD *)(v3 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && (v7 = *(JSC::CodeBlock **)(v6 + 24)) != 0
    && (JSC::CodeBlock::inferredName(v7), v15))
  {
    WTF::fromUTF8Impl<false>((unint64_t)v15 + 16, *((_QWORD *)v15 + 1), a2);
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
    else
      --*(_DWORD *)v15;
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t JSC::Debugger::isContentScript()
{
  return 0;
}

void WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t **v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v35 = v9;
    do
    {
      if (*(_DWORD *)(a1 + 24 * v10) != 2147483646)
      {
        v12 = a1 + 24 * v10;
        v13 = (unint64_t **)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v14)
        {
          v15 = *v13;
          v16 = (uint64_t)&(*v13)[v14];
          do
          {
            v17 = *v15;
            *v15 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
              {
                v18 = *(unsigned int *)(v17 + 52);
                if (!(_DWORD)v18)
                {
LABEL_30:
                  v24 = *(_QWORD *)(v17 + 40);
                  if (v24)
                  {
                    *(_QWORD *)(v17 + 40) = 0;
                    *(_DWORD *)(v17 + 48) = 0;
                    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
                  }
                  v25 = *(WTF::StringImpl **)(v17 + 32);
                  *(_QWORD *)(v17 + 32) = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
                    }
                    else
                    {
                      *(_DWORD *)v25 -= 2;
                    }
                  }
                  WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_9;
                }
                v19 = 24 * v18;
                v20 = (unint64_t *)(*(_QWORD *)(v17 + 40) + 8);
                while (2)
                {
                  v21 = *v20;
                  *v20 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 != 2)
                    {
                      *(_DWORD *)v21 -= 2;
                      goto LABEL_16;
                    }
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    v22 = *(_QWORD *)(StatusReg + 752);
                    if (v22)
                    {
                      if (v21 >> 43
                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v21 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v21)) & 1) == 0)
                      {
                        if (v21 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v21 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v21 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v21) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_21;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v21, 1, a4, a5, a6, a7, a8);
                      }
                      else
                      {
LABEL_21:
                        v23 = *(unsigned int *)(v22 + 8000);
                        if (v23 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v22, v21, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                        }
                        else
                        {
                          *(_QWORD *)(v22 + 8 * v23) = v21 | 0x5000000000000;
                          *(_DWORD *)(v22 + 8000) = v23 + 1;
                        }
                      }
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v21, (uint64_t)&bmalloc_heap_config, 1);
                    }
                  }
LABEL_16:
                  v20 += 3;
                  v19 -= 24;
                  if (!v19)
                    goto LABEL_30;
                  continue;
                }
              }
              --*(_DWORD *)v17;
            }
LABEL_9:
            ++v15;
          }
          while (v15 != (unint64_t *)v16);
        }
        v34 = (unint64_t)*v13;
        v9 = v35;
        if (*v13)
        {
          *v13 = 0;
          *(_DWORD *)(a1 + 24 * v10 + 16) = 0;
          WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::pauseIfNeeded(JSC::JSGlobalObject *)::$_0::operator() const(void)::{lambda(JSC::Debugger::Observer &)#1},void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
}

void JSC::DebuggerCallFrame::~DebuggerCallFrame(JSC::DebuggerCallFrame *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  JSC::DebuggerCallFrame *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (uint64_t *)(v2 - 16);
    v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v5 = *(uint64_t **)(v2 - 8);
    if (v5)
    {
      v6 = *v3;
      *v5 = *v3;
      *(_QWORD *)(v6 + 8) = v5;
      *v3 = 0;
      v3[1] = 0;
    }
    *v3 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;
    *((_QWORD *)this + 4) = 0;
  }
  v7 = (JSC::DebuggerCallFrame *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      JSC::DebuggerCallFrame::~DebuggerCallFrame(v7);
      WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,false>(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  int *j;
  BOOL v29;
  BOOL v30;
  int *v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  BOOL v40;
  int *v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  BOOL v46;
  uint64_t v47;
  int *v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  int *v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  uint64_t v63;
  char *v64;
  int **v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  BOOL v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  BOOL v82;
  BOOL v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int *v98;
  int v99;
  int v100;
  int v101;
  int *v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  int v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;

  v7 = (int *)result;
LABEL_2:
  i = v7;
  while (2)
  {
    v7 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v48 = a2 - 3;
        v49 = *(a2 - 3);
        v50 = v49 < *i;
        if (v49 == *i)
          v50 = *(a2 - 2) - *(a2 - 1) < i[1] - i[2];
        if (v50)
        {
          v128 = i[2];
          v123 = *(_QWORD *)i;
          v51 = *(_QWORD *)v48;
          i[2] = *(a2 - 1);
          *(_QWORD *)i = v51;
          *(a2 - 1) = v128;
          *(_QWORD *)v48 = v123;
        }
        return result;
      case 3:
        return (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(i, i + 3, a2 - 3);
      case 4:
        return (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(i, i + 3, i + 6, a2 - 3);
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,0>(i, i + 3, i + 6, i + 9, a2 - 3);
      default:
        if (v9 <= 287)
        {
          v52 = i + 3;
          v53 = i == a2 || v52 == a2;
          v54 = v53;
          if ((a4 & 1) == 0)
          {
            if ((v54 & 1) == 0)
            {
              v105 = 0;
              v106 = -1;
              v107 = 1;
              v108 = i;
              do
              {
                v109 = v105;
                v105 = v107;
                v110 = *v52;
                v111 = *v52 < *v108;
                if (*v52 == *v108)
                  v111 = i[3 * v105 + 1] - i[3 * v105 + 2] < i[3 * v109 + 1] - i[3 * v109 + 2];
                if (v111)
                {
                  v112 = v108[4];
                  v113 = v108[5];
                  v114 = &i[3 * v109];
                  v115 = *(_QWORD *)v114;
                  v52[2] = v114[2];
                  *(_QWORD *)v52 = v115;
                  v116 = v106;
                  v117 = v108;
                  while (1)
                  {
                    result = (unint64_t)(v117 - 3);
                    v118 = *(v117 - 3);
                    v119 = v110 < v118;
                    if (v110 == v118)
                      v119 = v112 - v113 < *(v117 - 2) - *(v117 - 1);
                    if (!v119)
                      break;
                    *(_QWORD *)v117 = *(_QWORD *)result;
                    result = *(v117 - 1);
                    v117[2] = result;
                    v117 -= 3;
                    v30 = __CFADD__(v116++, 1);
                    if (v30)
                      goto LABEL_222;
                  }
                  *v117 = v110;
                  v117[1] = v112;
                  v117[2] = v113;
                }
                v108 += 3;
                v107 = v105 + 1;
                v52 = &i[3 * v105 + 3];
                --v106;
              }
              while (v52 != a2);
            }
            return result;
          }
          if ((v54 & 1) != 0)
            return result;
          v55 = 0;
          v56 = i;
          while (1)
          {
            v57 = v56;
            v56 = v52;
            v58 = v57[3];
            if (v58 == *v57)
            {
              v59 = v57[4];
              v60 = v57[5];
              v61 = v59 - v60;
              if (v59 - v60 < v57[1] - v57[2])
                goto LABEL_137;
            }
            else if (v58 < *v57)
            {
              v59 = v57[4];
              v60 = v57[5];
              v61 = v59 - v60;
LABEL_137:
              *(_QWORD *)v56 = *(_QWORD *)v57;
              v56[2] = v57[2];
              v62 = i;
              if (v57 != i)
              {
                v63 = v55;
                do
                {
                  v64 = (char *)i + v63;
                  v65 = (int **)((char *)i + v63 - 12);
                  result = *(unsigned int *)v65;
                  if (v58 == (_DWORD)result)
                  {
                    result = (*((_DWORD *)v64 - 2) - *((_DWORD *)v64 - 1));
                    if (v61 >= (int)result)
                    {
                      v62 = v57;
                      goto LABEL_146;
                    }
                  }
                  else if (v58 >= (int)result)
                  {
                    v62 = (int *)((char *)i + v63);
                    goto LABEL_146;
                  }
                  v57 -= 3;
                  result = (unint64_t)*v65;
                  *(_QWORD *)v64 = *v65;
                  *((_DWORD *)v64 + 2) = *(int *)((char *)i + v63 - 4);
                  v63 -= 12;
                }
                while (v63);
                v62 = i;
              }
LABEL_146:
              *v62 = v58;
              v62[1] = v59;
              v62[2] = v60;
            }
            v52 = v56 + 3;
            v55 += 12;
            if (v56 + 3 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v66 = (unint64_t)(v10 - 2) >> 1;
          v67 = v66;
          while (1)
          {
            v68 = v67;
            if (v66 >= v67)
            {
              v69 = (2 * v67) | 1;
              v70 = &i[3 * v69];
              if (2 * v68 + 2 < v10)
              {
                v71 = v70[3];
                v72 = *v70 < v71;
                if (*v70 == v71)
                  v72 = i[3 * v69 + 1] - i[3 * v69 + 2] < v70[4] - v70[5];
                if (v72)
                {
                  v70 += 3;
                  v69 = 2 * v68 + 2;
                }
              }
              result = (unint64_t)&i[3 * v68];
              v73 = *(_DWORD *)result;
              if (*v70 == *(_DWORD *)result)
              {
                v74 = &i[3 * v68];
                v75 = v74[1];
                v76 = v74[2];
                if (v70[1] - v70[2] >= v75 - v76)
                  goto LABEL_163;
              }
              else if (*v70 >= v73)
              {
                v75 = *(_DWORD *)(result + 4);
                v76 = *(_DWORD *)(result + 8);
LABEL_163:
                v77 = *(_QWORD *)v70;
                *(_DWORD *)(result + 8) = v70[2];
                *(_QWORD *)result = v77;
                if (v66 >= v69)
                {
                  result = (v75 - v76);
                  while (1)
                  {
                    v79 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v78 = &i[3 * v69];
                    v80 = v79 + 2;
                    if (v80 < v10)
                    {
                      v81 = v78[3];
                      v82 = *v78 < v81;
                      if (*v78 == v81)
                        v82 = i[3 * v69 + 1] - i[3 * v69 + 2] < v78[4] - v78[5];
                      if (v82)
                      {
                        v78 += 3;
                        v69 = v80;
                      }
                    }
                    v83 = *v78 < v73;
                    if (*v78 == v73)
                      v83 = v78[1] - v78[2] < (int)result;
                    if (v83)
                      break;
                    v84 = *(_QWORD *)v78;
                    v70[2] = v78[2];
                    *(_QWORD *)v70 = v84;
                    v70 = v78;
                    if (v66 < v69)
                      goto LABEL_176;
                  }
                }
                v78 = v70;
LABEL_176:
                *v78 = v73;
                v78[1] = v75;
                v78[2] = v76;
              }
            }
            v67 = v68 - 1;
            if (!v68)
            {
              v85 = v9 / 0xCuLL;
              while (1)
              {
                v86 = 0;
                v129 = i[2];
                v124 = *(_QWORD *)i;
                v87 = (char *)i;
                do
                {
                  v88 = v87;
                  v89 = v86 + 1;
                  v87 += 12 * v86 + 12;
                  v90 = 2 * v86;
                  v86 = (2 * v86) | 1;
                  v91 = v90 + 2;
                  if (v91 < v85)
                  {
                    result = *((unsigned int *)v87 + 3);
                    v92 = *(_DWORD *)v87 < (int)result;
                    if (*(_DWORD *)v87 == (_DWORD)result)
                    {
                      result = (*((_DWORD *)v87 + 4) - *((_DWORD *)v87 + 5));
                      v92 = *(_DWORD *)&v88[12 * v89 + 4] - *(_DWORD *)&v88[12 * v89 + 8] < (int)result;
                    }
                    if (v92)
                    {
                      v87 += 12;
                      v86 = v91;
                    }
                  }
                  v93 = *(_QWORD *)v87;
                  *((_DWORD *)v88 + 2) = *((_DWORD *)v87 + 2);
                  *(_QWORD *)v88 = v93;
                }
                while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 3;
                if (v87 == (char *)a2)
                {
                  *((_DWORD *)v87 + 2) = v129;
                  *(_QWORD *)v87 = v124;
                }
                else
                {
                  v94 = *(_QWORD *)a2;
                  *((_DWORD *)v87 + 2) = a2[2];
                  *(_QWORD *)v87 = v94;
                  a2[2] = v129;
                  *(_QWORD *)a2 = v124;
                  v95 = v87 - (char *)i + 12;
                  if (v95 >= 13)
                  {
                    v96 = v95 / 0xCuLL - 2;
                    v97 = v96 >> 1;
                    v98 = &i[3 * (v96 >> 1)];
                    v99 = *(_DWORD *)v87;
                    if (*v98 == *(_DWORD *)v87)
                    {
                      result = (i[3 * v97 + 1] - i[3 * v97 + 2]);
                      v100 = *((_DWORD *)v87 + 1);
                      v101 = *((_DWORD *)v87 + 2);
                      if ((int)result < v100 - v101)
                        goto LABEL_195;
                    }
                    else if (*v98 < v99)
                    {
                      v100 = *((_DWORD *)v87 + 1);
                      v101 = *((_DWORD *)v87 + 2);
LABEL_195:
                      result = *(_QWORD *)v98;
                      *((_DWORD *)v87 + 2) = v98[2];
                      *(_QWORD *)v87 = result;
                      if (v96 >= 2)
                      {
                        while (1)
                        {
                          result = v97 - 1;
                          v97 = (v97 - 1) >> 1;
                          v102 = &i[3 * v97];
                          v103 = *v102 < v99;
                          if (*v102 == v99)
                            v103 = i[3 * v97 + 1] - i[3 * v97 + 2] < v100 - v101;
                          if (!v103)
                            break;
                          v104 = *(_QWORD *)v102;
                          v98[2] = v102[2];
                          *(_QWORD *)v98 = v104;
                          v98 = &i[3 * v97];
                          if (result <= 1)
                            goto LABEL_202;
                        }
                      }
                      v102 = v98;
LABEL_202:
                      *v102 = v99;
                      v102[1] = v100;
                      v102[2] = v101;
                    }
                  }
                }
                v26 = v85-- <= 2;
                if (v26)
                  return result;
              }
            }
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &i[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x601)
        {
          result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(&v7[3 * v11], v7, a2 - 3);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(v7, &v7[3 * v11], a2 - 3);
          v13 = 3 * v11;
          v14 = &v7[3 * v11 - 3];
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(v7 + 3, v14, a2 - 6);
          v15 = &v7[v13 + 3];
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(v7 + 6, v15, a2 - 9);
          result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(v14, v12, v15);
          v125 = v7[2];
          v120 = *(_QWORD *)v7;
          v16 = v12[2];
          *(_QWORD *)v7 = *(_QWORD *)v12;
          v7[2] = v16;
          v12[2] = v125;
          *(_QWORD *)v12 = v120;
        }
        --a3;
        v17 = *v7;
        if ((a4 & 1) == 0)
        {
          v18 = *(v7 - 3);
          if (v18 == v17)
          {
            v19 = v7[1];
            v20 = v7[2];
            if (*(v7 - 2) - *(v7 - 1) < v19 - v20)
              goto LABEL_15;
          }
          else
          {
            if (v18 < v17)
              goto LABEL_15;
            v19 = v7[1];
            v20 = v7[2];
          }
          v37 = *(a2 - 3);
          if (v17 == v37)
          {
            v38 = v19 - v20;
            if (v19 - v20 >= *(a2 - 2) - *(a2 - 1))
              goto LABEL_75;
          }
          else if (v17 >= v37)
          {
            v38 = v19 - v20;
LABEL_75:
            for (i = v7 + 3; i < a2; i += 3)
            {
              v40 = v17 < *i;
              if (v17 == *i)
                v40 = v38 < i[1] - i[2];
              if (v40)
                break;
            }
            goto LABEL_81;
          }
          i = v7 + 3;
          if (v7 + 3 == a2)
            goto LABEL_222;
          while (1)
          {
            v39 = v17 < *i;
            if (v17 == *i)
              v39 = v19 - v20 < i[1] - i[2];
            if (v39)
              break;
            i += 3;
            if (i == a2)
              goto LABEL_222;
          }
LABEL_81:
          v41 = a2;
          if (i < a2)
          {
            if (a2 == v7)
              goto LABEL_222;
            v41 = a2 - 3;
            while (1)
            {
              v42 = v17 < *v41;
              if (v17 == *v41)
                v42 = v19 - v20 < v41[1] - v41[2];
              if (!v42)
                break;
              v53 = v41 == v7;
              v41 -= 3;
              if (v53)
                goto LABEL_222;
            }
          }
          if (i < v41)
          {
            v43 = v19 - v20;
            do
            {
              v127 = i[2];
              v122 = *(_QWORD *)i;
              v44 = *(_QWORD *)v41;
              i[2] = v41[2];
              *(_QWORD *)i = v44;
              v41[2] = v127;
              *(_QWORD *)v41 = v122;
              do
              {
                i += 3;
                if (i == a2)
                  goto LABEL_222;
                v45 = v17 < *i;
                if (v17 == *i)
                  v45 = v43 < i[1] - i[2];
              }
              while (!v45);
              if (v41 == v7)
                goto LABEL_222;
              v41 -= 3;
              while (1)
              {
                v46 = v17 < *v41;
                if (v17 == *v41)
                  v46 = v43 < v41[1] - v41[2];
                if (!v46)
                  break;
                v53 = v41 == v7;
                v41 -= 3;
                if (v53)
                  goto LABEL_222;
              }
            }
            while (i < v41);
          }
          if (i - 3 != v7)
          {
            v47 = *(_QWORD *)(i - 3);
            v7[2] = *(i - 1);
            *(_QWORD *)v7 = v47;
          }
          a4 = 0;
          *(i - 3) = v17;
          *(i - 2) = v19;
          *(i - 1) = v20;
          continue;
        }
LABEL_15:
        if (v7 + 3 == a2)
          goto LABEL_222;
        v21 = 0;
        v22 = v7[1];
        v23 = v7[2];
        v24 = v22 - v23;
        while (1)
        {
          v25 = v7[v21 + 3];
          v26 = v25 < v17;
          if (v25 == v17)
            v26 = v7[v21 + 4] - v7[v21 + 5] < v24;
          if (!v26)
            break;
          v21 += 3;
          if (&v7[v21 + 3] == a2)
            goto LABEL_222;
        }
        v27 = (unint64_t)&v7[v21 + 3];
        if (v21 * 4)
        {
          j = a2 - 3;
          if (a2 == v7)
            goto LABEL_222;
          while (1)
          {
            v29 = *j < v17;
            if (*j == v17)
              v29 = j[1] - j[2] < v24;
            if (v29)
              break;
            v53 = j == v7;
            j -= 3;
            if (v53)
              goto LABEL_222;
          }
        }
        else
        {
          j = a2;
          if (v27 < (unint64_t)a2)
          {
            for (j = a2 - 3; ; j -= 3)
            {
              if (*j == v17)
              {
                if (v27 >= (unint64_t)j || j[1] - j[2] < v24)
                  break;
              }
              else
              {
                v30 = *j < v17 || v27 >= (unint64_t)j;
                if (v30)
                  break;
              }
            }
          }
        }
        i = (int *)v27;
        if (v27 >= (unint64_t)j)
        {
LABEL_58:
          if (i - 3 != v7)
          {
            v35 = *(_QWORD *)(i - 3);
            v7[2] = *(i - 1);
            *(_QWORD *)v7 = v35;
          }
          *(i - 3) = v17;
          *(i - 2) = v22;
          *(i - 1) = v23;
          if (v27 < (unint64_t)j)
            goto LABEL_63;
          v36 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(v7, i - 3);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(i, a2);
          if (!(_DWORD)result)
          {
            if (v36)
              continue;
LABEL_63:
            result = std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,false>(v7, i - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = i - 3;
          if (v36)
            return result;
          goto LABEL_2;
        }
        v31 = j;
        while (1)
        {
          v126 = i[2];
          v121 = *(_QWORD *)i;
          v32 = *(_QWORD *)v31;
          i[2] = v31[2];
          *(_QWORD *)i = v32;
          v31[2] = v126;
          *(_QWORD *)v31 = v121;
          do
          {
            i += 3;
            if (i == a2)
              goto LABEL_222;
            v33 = *i < v17;
            if (*i == v17)
              v33 = i[1] - i[2] < v24;
          }
          while (v33);
          if (v31 == v7)
            break;
          v31 -= 3;
          while (1)
          {
            v34 = *v31 < v17;
            if (*v31 == v17)
              v34 = v31[1] - v31[2] < v24;
            if (v34)
              break;
            v53 = v31 == v7;
            v31 -= 3;
            if (v53)
              goto LABEL_222;
          }
          if (i >= v31)
            goto LABEL_58;
        }
LABEL_222:
        __break(1u);
        return result;
    }
  }
}

int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,0>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] - a5[2] < a4[1] - a4[2];
  if (v11)
  {
    v12 = a4[2];
    v13 = *(_QWORD *)a4;
    v14 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v14;
    *(_QWORD *)a5 = v13;
    a5[2] = v12;
    v15 = *a4 < *a3;
    if (*a4 == *a3)
      v15 = a4[1] - a4[2] < a3[1] - a3[2];
    if (v15)
    {
      v16 = a3[2];
      v17 = *(_QWORD *)a3;
      v18 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v18;
      *(_QWORD *)a4 = v17;
      a4[2] = v16;
      v19 = *a3 < *a2;
      if (*a3 == *a2)
        v19 = a3[1] - a3[2] < a2[1] - a2[2];
      if (v19)
      {
        v20 = a2[2];
        v21 = *(_QWORD *)a2;
        v22 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v22;
        *(_QWORD *)a3 = v21;
        a3[2] = v20;
        v23 = *a2 < *a1;
        if (*a2 == *a1)
          v23 = a2[1] - a2[2] < a1[1] - a1[2];
        if (v23)
        {
          v24 = a1[2];
          v25 = *(_QWORD *)a1;
          v26 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v26;
          *(_QWORD *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(int *result, int *a2, _DWORD *a3)
{
  int v3;
  BOOL v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;

  v3 = *a2;
  v4 = *a2 < *result;
  if (*a2 == *result)
    v4 = a2[1] - a2[2] < result[1] - result[2];
  if (!v4)
  {
    v9 = *a3 < v3;
    if (*a3 == v3)
      v9 = a3[1] - a3[2] < a2[1] - a2[2];
    if (v9)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v12 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v12;
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      v13 = *a2 < *result;
      if (*a2 == *result)
        v13 = a2[1] - a2[2] < result[1] - result[2];
      if (v13)
      {
        v14 = result[2];
        v15 = *(_QWORD *)result;
        v16 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v16;
        *(_QWORD *)a2 = v15;
        a2[2] = v14;
      }
    }
    return result;
  }
  v5 = *a3 < v3;
  if (*a3 == v3)
    v5 = a3[1] - a3[2] < a2[1] - a2[2];
  if (v5)
  {
    v6 = result[2];
    v7 = *(_QWORD *)result;
    v8 = a3[2];
    *(_QWORD *)result = *(_QWORD *)a3;
    result[2] = v8;
LABEL_24:
    *(_QWORD *)a3 = v7;
    a3[2] = v6;
    return result;
  }
  v17 = result[2];
  v18 = *(_QWORD *)result;
  v19 = a2[2];
  *(_QWORD *)result = *(_QWORD *)a2;
  result[2] = v19;
  *(_QWORD *)a2 = v18;
  a2[2] = v17;
  v20 = *a3 < (int)v18;
  if (*a3 == (_DWORD)v18)
    v20 = a3[1] - a3[2] < a2[1] - a2[2];
  if (v20)
  {
    v6 = a2[2];
    v7 = *(_QWORD *)a2;
    v21 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v21;
    goto LABEL_24;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(int *a1, int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *(a2 - 3);
      v8 = v7 < *a1;
      if (v7 == *a1)
        v8 = *(a2 - 2) - *(a2 - 1) < a1[1] - a1[2];
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = *(a2 - 1);
        *(_QWORD *)a1 = *(_QWORD *)v6;
        a1[2] = v11;
        *(_QWORD *)v6 = v10;
        *(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v12 = a1 + 6;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(a1, a1 + 3, a1 + 6);
      v13 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    if (*v13 != *v12)
      break;
    v17 = v13[1];
    v18 = v13[2];
    v19 = v17 - v18;
    if (v17 - v18 < v12[1] - v12[2])
      goto LABEL_14;
LABEL_24:
    v12 = v13;
    v14 += 12;
    v13 += 3;
    if (v13 == a2)
      return 1;
  }
  if (v16 >= *v12)
    goto LABEL_24;
  v17 = v13[1];
  v18 = v13[2];
  v19 = v17 - v18;
LABEL_14:
  *(_QWORD *)v13 = *(_QWORD *)v12;
  v13[2] = v12[2];
  v20 = a1;
  if (v12 != a1)
  {
    v21 = v14;
    do
    {
      v22 = *(int *)((char *)a1 + v21 + 12);
      if (v16 == v22)
      {
        if (v19 >= *(int *)((char *)a1 + v21 + 16) - *(int *)((char *)a1 + v21 + 20))
        {
          v20 = (int *)((char *)a1 + v21 + 24);
          goto LABEL_23;
        }
      }
      else if (v16 >= v22)
      {
        v20 = v12;
        goto LABEL_23;
      }
      v12 -= 3;
      *(_QWORD *)((char *)a1 + v21 + 24) = *(_QWORD *)((char *)a1 + v21 + 12);
      *(int *)((char *)a1 + v21 + 32) = *(int *)((char *)a1 + v21 + 20);
      v21 -= 12;
    }
    while (v21 != -24);
    v20 = a1;
  }
LABEL_23:
  *v20 = v16;
  v20[1] = v17;
  v20[2] = v18;
  if (++v15 != 8)
    goto LABEL_24;
  return v13 + 3 == a2;
}

int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::forEachBreakpointLocation(int,int,int,int,WTF::Function<void ()(JSC::JSTextPosition const&)> &&)::$_0 &,JSC::JSTextPosition*>(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
    v9 = a4[1] - a4[2] < a3[1] - a3[2];
  if (v9)
  {
    v10 = a3[2];
    v11 = *(_QWORD *)a3;
    v12 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v12;
    *(_QWORD *)a4 = v11;
    a4[2] = v10;
    v13 = *a3 < *a2;
    if (*a3 == *a2)
      v13 = a3[1] - a3[2] < a2[1] - a2[2];
    if (v13)
    {
      v14 = a2[2];
      v15 = *(_QWORD *)a2;
      v16 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v16;
      *(_QWORD *)a3 = v15;
      a3[2] = v14;
      v17 = *a2 < *a1;
      if (*a2 == *a1)
        v17 = a2[1] - a2[2] < a1[1] - a1[2];
      if (v17)
      {
        v18 = a1[2];
        v19 = *(_QWORD *)a1;
        v20 = a2[2];
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[2] = v20;
        *(_QWORD *)a2 = v19;
        a2[2] = v18;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  signed __int32 v19;
  signed __int32 v20;
  BOOL v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  signed __int32 v25;
  signed __int32 v26;
  BOOL v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  signed __int32 v31;
  signed __int32 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  signed __int32 v35;
  signed __int32 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  signed __int32 v39;
  signed __int32 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  signed __int32 v46;
  signed __int32 v47;
  signed __int32 v48;
  signed __int32 v49;
  BOOL v50;
  BOOL v51;
  signed __int32 v52;
  _BOOL4 v53;
  __n128 v54;
  signed __int32 v55;
  signed __int32 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  __n128 v59;
  signed __int32 v60;
  signed __int32 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  __n128 v64;
  signed __int32 v65;
  signed __int32 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  __n128 *v69;
  __n128 *v70;
  __n128 *v71;
  signed __int32 v72;
  signed __int32 v73;
  signed __int32 v74;
  signed __int32 v75;
  BOOL v76;
  BOOL v77;
  signed __int32 v78;
  _BOOL4 v79;
  __n128 v80;
  signed __int32 v81;
  signed __int32 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  __n128 v85;
  __n128 v86;
  signed __int32 v87;
  signed __int32 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  signed __int32 v91;
  signed __int32 v92;
  BOOL v93;
  BOOL v94;
  signed __int32 v95;
  _BOOL4 v96;
  _BOOL4 v97;
  signed __int32 v98;
  signed __int32 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  signed __int32 v102;
  signed __int32 v103;
  _BOOL4 v104;
  _BOOL4 v105;
  __n128 *v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  unsigned __int32 v112;
  unsigned __int32 v113;
  __n128 *v114;
  int v115;
  BOOL v116;
  BOOL v117;
  __n128 *v118;
  __n128 *v119;
  int v120;
  int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  int v124;
  int v125;
  BOOL v126;
  BOOL v127;
  __n128 *v128;
  __n128 *v129;
  int v130;
  BOOL v131;
  BOOL v132;
  int v133;
  int v134;
  _BOOL4 v135;
  _BOOL4 v136;
  __n128 *v137;
  BOOL v138;
  __n128 v139;
  unsigned __int32 v140;
  unsigned __int32 v141;
  int v142;
  BOOL v143;
  BOOL v144;
  __n128 *v145;
  int v146;
  BOOL v147;
  BOOL v148;
  __n128 *v149;
  int v150;
  BOOL v151;
  BOOL v152;
  __n128 *v153;
  int v154;
  int v155;
  BOOL v156;
  BOOL v157;
  __n128 *v158;
  int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  int v162;
  int v163;
  BOOL v164;
  BOOL v165;
  __n128 *v166;
  __n128 *v167;
  signed __int32 v168;
  signed __int32 v169;
  signed __int32 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  signed __int32 v173;
  signed __int32 v174;
  signed __int32 v175;
  BOOL v176;
  BOOL v177;
  signed __int32 v178;
  _BOOL4 v179;
  __n128 v180;
  __n128 *v181;
  __n128 *v182;
  __n128 *v183;
  __n128 *v184;
  signed __int32 v185;
  signed __int32 v186;
  signed __int32 v187;
  _BOOL4 v188;
  _BOOL4 v189;
  __n128 v190;
  signed __int32 v191;
  signed __int32 v192;
  _BOOL4 v193;
  _BOOL4 v194;
  __n128 v195;
  signed __int32 v196;
  signed __int32 v197;
  _BOOL4 v198;
  _BOOL4 v199;
  __n128 v200;
  signed __int32 v201;
  signed __int32 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  BOOL v205;
  char v206;
  uint64_t v207;
  __n128 *v208;
  __n128 *v209;
  signed __int32 v210;
  signed __int32 v211;
  signed __int32 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  unsigned __int32 v215;
  unsigned __int32 v216;
  uint64_t v217;
  char *v218;
  signed __int32 v219;
  signed __int32 v220;
  BOOL v221;
  BOOL v222;
  __n128 *v223;
  int64_t v224;
  int64_t v225;
  int64_t v226;
  uint64_t v227;
  __n128 *v228;
  signed __int32 v229;
  signed __int32 v230;
  signed __int32 v231;
  _BOOL4 v232;
  __n128 *v233;
  signed __int32 v234;
  signed __int32 v235;
  signed __int32 v236;
  BOOL v237;
  BOOL v238;
  unsigned __int32 v239;
  unsigned __int32 v240;
  __n128 *v241;
  uint64_t v242;
  signed __int32 v243;
  signed __int32 v244;
  signed __int32 v245;
  _BOOL4 v246;
  signed __int32 v247;
  _BOOL4 v248;
  _BOOL4 v249;
  uint64_t v250;
  uint64_t v251;
  __n128 *v252;
  __n128 *v253;
  uint64_t v254;
  uint64_t v255;
  signed __int32 v256;
  signed __int32 v257;
  _BOOL4 v258;
  _BOOL4 v259;
  uint64_t v260;
  unint64_t v261;
  __n128 *v262;
  signed __int32 v263;
  signed __int32 v264;
  signed __int32 v265;
  _BOOL4 v266;
  _BOOL4 v267;
  unsigned __int32 v268;
  unsigned __int32 v269;
  __n128 *v270;
  signed __int32 v271;
  BOOL v272;
  BOOL v273;
  __n128 v275;
  signed __int32 v276;
  signed __int32 v277;
  _BOOL4 v278;
  _BOOL4 v279;
  uint64_t v280;
  __n128 *v281;
  signed __int32 v282;
  signed __int32 v283;
  signed __int32 v284;
  _BOOL4 v285;
  _BOOL4 v286;
  unsigned __int32 v287;
  unsigned __int32 v288;
  uint64_t v289;
  signed __int32 *v290;
  signed __int32 *v292;
  signed __int32 v293;
  signed __int32 v294;
  BOOL v295;
  BOOL v296;
  signed __int32 v297;
  signed __int32 v298;
  _BOOL4 v299;
  _BOOL4 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __n128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  __n128 v311;
  __n128 v312;
  __n128 v313;
  __n128 v314;
  __n128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __n128 v322;
  __n128 v323;
  __n128 v324;
  __n128 v325;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  signed __int32 v8;
  signed __int32 v9;
  _BOOL4 v10;
  BOOL v11;
  _BOOL4 v12;
  __n128 v13;
  __n128 *v14;
  signed __int32 v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  BOOL v19;
  BOOL v20;
  signed __int32 v21;
  _BOOL4 v22;
  __n128 v23;
  __n128 *v24;
  signed __int32 v25;
  __n128 *v26;
  signed __int32 v27;
  signed __int32 v28;
  signed __int32 v29;
  signed __int32 v30;
  BOOL v31;
  signed __int32 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  __n128 v35;
  __n128 *v36;
  __n128 *v37;
  __n128 *v38;
  __n128 *v39;
  signed __int32 v40;
  signed __int32 v41;
  signed __int32 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __n128 v45;
  signed __int32 v46;
  signed __int32 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  __n128 v50;
  signed __int32 v51;
  signed __int32 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  __n128 v55;
  signed __int32 v56;
  signed __int32 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  __n128 v60;
  __n128 v61;
  signed __int32 v62;
  signed __int32 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  __n128 v66;
  __n128 v67;
  signed __int32 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  __n128 v71;
  __n128 v72;
  signed __int32 v73;
  signed __int32 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  __n128 v77;
  signed __int32 v78;
  _BOOL4 v79;
  __n128 *v80;
  uint64_t v81;
  int v82;
  signed __int32 v83;
  signed __int32 v84;
  signed __int32 v85;
  signed __int32 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  uint64_t v91;
  char *v92;
  signed __int32 v93;
  signed __int32 v94;
  BOOL v95;
  BOOL v96;
  __n128 *v97;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      v8 = a2[-1].n128_i32[2];
      v9 = a1->n128_i32[2];
      v10 = (signed __int32)a2[-1].n128_u32[0] < (signed __int32)a1->n128_u32[0];
      v11 = v8 == v9;
      v12 = v8 < v9;
      if (!v11)
        v10 = v12;
      if (v10)
      {
        v13 = *a1;
        *a1 = *v7;
        *v7 = v13;
      }
      return result;
    case 3:
      v14 = a1 + 1;
      v15 = a1[1].n128_i32[0];
      v16 = a2 - 1;
      v17 = a1[1].n128_i32[2];
      v18 = a1->n128_i32[2];
      v19 = v15 < (signed __int32)a1->n128_u32[0];
      v11 = v17 == v18;
      v20 = v17 < v18;
      if (!v11)
        v19 = v20;
      v21 = a2[-1].n128_i32[2];
      v22 = (signed __int32)a2[-1].n128_u32[0] < v15;
      if (v21 != v17)
        v22 = v21 < v17;
      if (v19)
      {
        if (v22)
        {
          v23 = *a1;
          *a1 = *v16;
LABEL_48:
          *v16 = v23;
          return result;
        }
        v72 = *a1;
        *a1 = *v14;
        *v14 = v72;
        v73 = a2[-1].n128_i32[2];
        v74 = a1[1].n128_i32[2];
        v75 = (signed __int32)a2[-1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0];
        v11 = v73 == v74;
        v76 = v73 < v74;
        if (!v11)
          v75 = v76;
        if (v75)
        {
          v23 = *v14;
          *v14 = *v16;
          goto LABEL_48;
        }
      }
      else if (v22)
      {
        v61 = *v14;
        *v14 = *v16;
        *v16 = v61;
        v62 = a1[1].n128_i32[2];
        v63 = a1->n128_i32[2];
        v64 = (signed __int32)a1[1].n128_u32[0] < (signed __int32)a1->n128_u32[0];
        v11 = v62 == v63;
        v65 = v62 < v63;
        if (!v11)
          v64 = v65;
        if (v64)
        {
          v66 = *a1;
          *a1 = *v14;
          *v14 = v66;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v36 = a1 + 1;
      v37 = a1 + 2;
      v38 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v40 = a2[-1].n128_i32[0];
      v39 = a2 - 1;
      v41 = v39->n128_i32[2];
      v42 = a1[3].n128_i32[2];
      v43 = v40 < (signed __int32)a1[3].n128_u32[0];
      v11 = v41 == v42;
      v44 = v41 < v42;
      if (!v11)
        v43 = v44;
      if (v43)
      {
        v45 = *v38;
        *v38 = *v39;
        *v39 = v45;
        v46 = a1[3].n128_i32[2];
        v47 = a1[2].n128_i32[2];
        v48 = (signed __int32)a1[3].n128_u32[0] < (signed __int32)a1[2].n128_u32[0];
        v11 = v46 == v47;
        v49 = v46 < v47;
        if (!v11)
          v48 = v49;
        if (v48)
        {
          v50 = *v37;
          *v37 = *v38;
          *v38 = v50;
          v51 = a1[2].n128_i32[2];
          v52 = a1[1].n128_i32[2];
          v53 = (signed __int32)a1[2].n128_u32[0] < (signed __int32)a1[1].n128_u32[0];
          v11 = v51 == v52;
          v54 = v51 < v52;
          if (!v11)
            v53 = v54;
          if (v53)
          {
            v55 = *v36;
            *v36 = *v37;
            *v37 = v55;
            v56 = a1[1].n128_i32[2];
            v57 = a1->n128_i32[2];
            v58 = (signed __int32)a1[1].n128_u32[0] < (signed __int32)a1->n128_u32[0];
            v11 = v56 == v57;
            v59 = v56 < v57;
            if (!v11)
              v58 = v59;
            if (v58)
            {
              v60 = *a1;
              *a1 = *v36;
              *v36 = v60;
            }
          }
        }
      }
      return 1;
    default:
      v24 = a1 + 2;
      v25 = a1[2].n128_i32[0];
      v26 = a1 + 1;
      v27 = a1[1].n128_i32[0];
      v28 = a1[1].n128_i32[2];
      v29 = a1->n128_u32[0];
      v30 = a1->n128_i32[2];
      v31 = v28 < v30;
      if (v28 == v30)
        v31 = v27 < (signed __int32)a1->n128_u32[0];
      v32 = a1[2].n128_i32[2];
      v33 = v25 < v27;
      v11 = v32 == v28;
      v34 = v32 < v28;
      if (!v11)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = *a1;
          *a1 = *v24;
LABEL_53:
          *v24 = v35;
          goto LABEL_54;
        }
        v77 = *a1;
        *a1 = *v26;
        *v26 = v77;
        v78 = a1[1].n128_i32[2];
        v79 = v25 < (signed __int32)a1[1].n128_u32[0];
        if (v32 != v78)
          v79 = v32 < v78;
        if (v79)
        {
          v35 = *v26;
          *v26 = *v24;
          goto LABEL_53;
        }
      }
      else if (v33)
      {
        v67 = *v26;
        *v26 = *v24;
        *v24 = v67;
        v68 = a1[1].n128_i32[2];
        v69 = (signed __int32)a1[1].n128_u32[0] < v29;
        v11 = v68 == v30;
        v70 = v68 < v30;
        if (!v11)
          v69 = v70;
        if (v69)
        {
          v71 = *a1;
          *a1 = *v26;
          *v26 = v71;
        }
      }
LABEL_54:
      v80 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v81 = 0;
      v82 = 0;
      while (1)
      {
        v83 = v80->n128_u32[0];
        v84 = v80->n128_i32[2];
        v85 = v24->n128_u32[0];
        v86 = v24->n128_i32[2];
        v87 = (signed __int32)v80->n128_u32[0] < v85;
        v11 = v84 == v86;
        v88 = v84 < v86;
        if (v11)
          v88 = v87;
        if (v88)
        {
          v89 = v80->n128_u32[1];
          v90 = v80->n128_u32[3];
          v91 = v81;
          while (1)
          {
            v92 = (char *)a1 + v91;
            *(__n128 *)((char *)a1 + v91 + 48) = *(__n128 *)((char *)a1 + v91 + 32);
            if (v91 == -32)
              break;
            v93 = *((_DWORD *)v92 + 4);
            v94 = *((_DWORD *)v92 + 6);
            v95 = v83 < v93;
            v11 = v84 == v94;
            v96 = v84 < v94;
            if (v11)
              v96 = v95;
            v91 -= 16;
            if (!v96)
            {
              v97 = (__n128 *)((char *)a1 + v91 + 48);
              goto LABEL_66;
            }
          }
          v97 = a1;
LABEL_66:
          v97->n128_u32[0] = v83;
          v97->n128_u32[1] = v89;
          v97->n128_u32[2] = v84;
          v97->n128_u32[3] = v90;
          if (++v82 == 8)
            return &v80[1] == a2;
        }
        v24 = v80;
        v81 += 16;
        if (++v80 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DebuggerPausePositions::sort(void)::$_0 &,JSC::DebuggerPausePosition *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  __int32 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  signed __int32 v13;
  signed __int32 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  __int32 v17;
  __int32 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  __int32 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  __int32 v25;
  __int32 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  signed __int32 v29;
  signed __int32 v30;
  _BOOL4 v31;
  _BOOL4 v32;

  v5 = a2->n128_i32[2];
  v6 = a1->n128_i32[2];
  v7 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
  v8 = v5 == v6;
  v9 = v5 < v6;
  if (!v8)
    v7 = v9;
  v10 = a3->n128_i32[2];
  v11 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
  v8 = v10 == v5;
  v12 = v10 < v5;
  if (!v8)
    v11 = v12;
  if (v7)
  {
    if (v11)
    {
      result = *a1;
      *a1 = *a3;
LABEL_17:
      *a3 = result;
      goto LABEL_18;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    v17 = a3->n128_i32[2];
    v18 = a2->n128_i32[2];
    v19 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    v8 = v17 == v18;
    v20 = v17 < v18;
    if (!v8)
      v19 = v20;
    if (v19)
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_17;
    }
  }
  else if (v11)
  {
    result = *a2;
    *a2 = *a3;
    *a3 = result;
    v13 = a2->n128_i32[2];
    v14 = a1->n128_i32[2];
    v15 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
    v8 = v13 == v14;
    v16 = v13 < v14;
    if (!v8)
      v15 = v16;
    if (v15)
    {
      result = *a1;
      *a1 = *a2;
      *a2 = result;
    }
  }
LABEL_18:
  v21 = a4->n128_i32[2];
  v22 = a3->n128_i32[2];
  v23 = (signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0];
  v8 = v21 == v22;
  v24 = v21 < v22;
  if (!v8)
    v23 = v24;
  if (v23)
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    v25 = a3->n128_i32[2];
    v26 = a2->n128_i32[2];
    v27 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    v8 = v25 == v26;
    v28 = v25 < v26;
    if (!v8)
      v27 = v28;
    if (v27)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      v29 = a2->n128_i32[2];
      v30 = a1->n128_i32[2];
      v31 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
      v8 = v29 == v30;
      v32 = v29 < v30;
      if (!v8)
        v31 = v32;
      if (v31)
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void WTF::RefCounted<JSC::Breakpoint>::deref(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (*(_DWORD *)this == 1)
  {
    v9 = *((unsigned int *)this + 13);
    if ((_DWORD)v9)
    {
      v10 = 24 * v9;
      v11 = (WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        v11 += 3;
        v10 -= 24;
      }
      while (v10);
    }
    v21 = *((_QWORD *)this + 5);
    if (v21)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    --*(_DWORD *)this;
  }
}

uint64_t *WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v11 - 4);
        v31 = 0;
        v32 = v11 + 8 * v25;
        goto LABEL_32;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *v9;
  if (*v9)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_23;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_28:
      result = WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(v9, v30, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v26 = *v9;
      if (*v9)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_28;
  }
LABEL_31:
  v32 = v26 + 8 * v29;
  v31 = 1;
LABEL_32:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v32;
  *(_BYTE *)(a8 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (!v12)
  {
    v23 = 0;
    if (!v11)
      return v23;
    goto LABEL_16;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (uint64_t *)(v11 + 8 * v22);
    v25 = *v24;
    if ((unint64_t)(*v24 + 1) >= 2)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v31 = v27 & ((v30 >> 31) ^ v30);
      v32 = 1;
      do
      {
        v33 = v31;
        v34 = *(_QWORD *)(v26 + 8 * v31);
        v31 = (v31 + v32++) & v27;
      }
      while (v34);
      v35 = (_QWORD *)(v26 + 8 * v33);
      *v35 = v25;
      if (v24 == (uint64_t *)a3)
        v23 = v35;
    }
    ++v22;
  }
  while (v22 != v12);
  if (v11)
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

unint64_t JSC::MarkedBlock::Handle::isLive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  int v34;
  char v35;

  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40 * (*(_DWORD *)(a1 + 12) >> 5) + 8) >> *(_DWORD *)(a1 + 12)) & 1) != 0)
  {
    LOBYTE(v18) = 1;
    return v18 & 1;
  }
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(v9 + 432);
  v12 = *(_DWORD *)(v9 + 436);
  v13 = *(unsigned __int8 *)(v9 + 445);
  v14 = (unsigned int *)(v10 + 24);
  v15 = *(unsigned int *)(v10 + 24);
  v16 = v15 | ((unint64_t)(v15 | 3) << 32);
  if ((v15 & 1) != 0)
    v16 = *(unsigned int *)(v10 + 24);
  v17 = HIDWORD(v16);
  if (!HIDWORD(v16))
  {
LABEL_24:
    while (1)
    {
      v25 = *v14;
      if ((*v14 & 1) != 0)
        break;
      v26 = __ldaxr(v14);
      if (v26 == v25)
      {
        if (!__stxr((v25 | 1) + 4, v14))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::lockSlow(v10 + 24);
LABEL_27:
    if (*(_DWORD *)(v10 + 36) == v12)
    {
      v18 = a2 - v10;
      v27 = ((unint64_t)(a2 - v10) >> 4);
      if (v27 >= 0x400)
        goto LABEL_49;
      v28 = v18 >> 4;
      v29 = v10 + 168;
    }
    else
    {
      v32 = *(_DWORD *)(v10 + 32);
      if (v32 != v11)
      {
        if (!v13 || *(_BYTE *)(*(_QWORD *)(v10 + 8) + 347) != 1)
          goto LABEL_41;
        if (v32)
        {
          v33 = __CFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            v34 = 2;
          if (v34 != v11)
          {
LABEL_41:
            LOBYTE(v18) = 0;
LABEL_32:
            while (1)
            {
              v30 = *v14;
              if ((*v14 & 3) != 1)
                break;
              v31 = __ldxr(v14);
              if (v31 == v30)
              {
                if (!__stxr(v30 & 0xFFFFFFFE, v14))
                  return v18 & 1;
              }
              else
              {
                __clrex();
              }
            }
            goto LABEL_50;
          }
        }
      }
      v18 = a2 - v10;
      v27 = ((unint64_t)(a2 - v10) >> 4);
      if (v27 >= 0x400)
        goto LABEL_49;
      v28 = v18 >> 4;
      v29 = v10 + 40;
    }
    v18 = (*(_QWORD *)(v29 + ((v27 >> 3) & 0x1FFFFFF8)) >> v28) & 1;
    goto LABEL_32;
  }
  v18 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v10 + 36) == v12)
  {
    v21 = ((unint64_t)(a2 - v10) >> 4);
    if (v21 < 0x400)
    {
      v18 = *(_QWORD *)(v10 + ((v21 >> 3) & 0x1FFFFFF8) + 168) >> ((unint64_t)(a2 - v10) >> 4);
      v22 = *v14 | 3;
      goto LABEL_21;
    }
    goto LABEL_49;
  }
  v19 = *(_DWORD *)(v10 + 32);
  if (v19 != v11)
  {
    if (!v13 || *(_BYTE *)(*(_QWORD *)(v10 + 8) + 347) != 1)
      goto LABEL_8;
    if (v19)
    {
      v23 = v19 + 1;
      if (v19 == -1)
        v23 = 2;
      if (v23 != v11)
      {
LABEL_8:
        if ((*v14 | 3) != (_DWORD)v17)
          goto LABEL_24;
        LOBYTE(v18) = 0;
        return v18 & 1;
      }
    }
  }
  v24 = ((unint64_t)(a2 - v10) >> 4);
  if (v24 >= 0x400)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    v35 = v18;
    WTF::CountingLock::unlockSlow((WTF::CountingLock *)(v10 + 24), a2, a3, a4, a5, a6, a7, a8);
    LOBYTE(v18) = v35;
    return v18 & 1;
  }
  v18 = *(_QWORD *)(v10 + ((v24 >> 3) & 0x1FFFFFF8) + 40) >> ((unint64_t)(a2 - v10) >> 4);
  v22 = *v14 | 3;
LABEL_21:
  if (v22 != (_DWORD)v17)
    goto LABEL_24;
  return v18 & 1;
}

_DWORD *WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::add(_DWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = ~(*a3 << 32) + *a3;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v11 - 4);
        v31 = 0;
        v32 = v11 + 8 * v25;
        goto LABEL_35;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (_QWORD *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v21;
    }
  }
  *a3 = 0;
  result = (_DWORD *)*v19;
  *v19 = v14;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_26;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_31:
      result = WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(a2, v30, (uint64_t)v19, a4, a5, a6, a7, a8);
      v19 = result;
      v26 = *a2;
      if (*a2)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_34;
    }
LABEL_26:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_31;
  }
LABEL_34:
  v32 = v26 + 8 * v29;
  v31 = 1;
LABEL_35:
  *(_QWORD *)v10 = v19;
  *((_QWORD *)v10 + 1) = v32;
  *((_BYTE *)v10 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>,WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider,WTF::RawPtrTraits<JSC::SourceProvider>,WTF::DefaultRefDerefTraits<JSC::SourceProvider>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _QWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 8 * v22);
      v25 = (_DWORD *)*v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = ((unint64_t)v25 + ~((_QWORD)v25 << 32)) ^ (((unint64_t)v25 + ~((_QWORD)v25 << 32)) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = *(_QWORD *)(v26 + 8 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (v34);
          v35 = (_QWORD *)(v26 + 8 * v33);
          *v35 = 0;
          v36 = (_DWORD *)*v24;
          *v24 = 0;
          *v35 = v36;
          v37 = (_DWORD *)*v24;
          *v24 = 0;
          if (v37)
          {
            if (v37[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
            else
              --v37[2];
          }
          if (v24 == (_QWORD *)a3)
            v23 = v35;
        }
        else
        {
          *v24 = 0;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::SetSteppingModeFunctor>::implFunction(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)v9 == *(_QWORD *)(*(_QWORD *)(a2 + 8) + 2016))
  {
    v10 = *(_DWORD *)(v9 + 8) == 1;
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 40) & 0xFFFFFFFD | (2 * v10);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 120);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 12) & 0xFE) == 4)
          JSC::CodeBlock::jettison(a2, 3u, 0, 0, a3, a6, a7, a8, a9);
      }
    }
  }
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::forEachRegisteredCodeBlock(WTF::Function<void ()(JSC::CodeBlock *)> const&)::$_0>::implFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 2016) == *(_QWORD *)v2)
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 8) + 16))(**(_QWORD **)(v2 + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::didCreateNativeExecutable(JSC::NativeExecutable &)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::willCallNativeExecutable(JSC::CallFrame *)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, **(_QWORD **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::sourceParsed(JSC::JSGlobalObject *,JSC::SourceProvider *,int,WTF::String const&)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), **(unsigned int **)(a1 + 24), **(unsigned int **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::sourceParsed(JSC::JSGlobalObject *,JSC::SourceProvider *,int,WTF::String const&)::$_1,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, **(unsigned int **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::applyBreakpoints(JSC::CodeBlock *)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 96))(a2, **(_QWORD **)(a1 + 8));
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ToggleBreakpointFunctor>::implFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)v2 == *(_QWORD *)(*(_QWORD *)(a2 + 8) + 2016))
    return JSC::Debugger::toggleBreakpoint(a2, *(_DWORD **)(v2 + 8), *(_DWORD *)(v2 + 16));
  return result;
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::DebuggerParseData>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::DebuggerParseData,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::DebuggerParseData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v50;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *v16 = 0;
      v16[1] = 0;
      v16 += 3;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v17 = 0;
    v18 = 0;
    v5 = v5;
    v46 = v5;
    v47 = v4;
    while (1)
    {
      v19 = (int *)(v4 + 24 * v17);
      v20 = *v19;
      if (*v19 != -2)
      {
        if (v20 != -1)
        {
          v25 = *a1;
          v50 = v18;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = 0;
          v28 = 9 * ((v20 + ~(v20 << 15)) ^ ((v20 + ~(v20 << 15)) >> 10));
          v29 = ((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16);
          do
          {
            v30 = v29 & v26;
            v31 = (_DWORD *)(v25 + 24 * (v29 & v26));
            v29 = ++v27 + (v29 & v26);
          }
          while (*v31 != -1);
          v32 = v25 + 24 * v30;
          v35 = *(_QWORD *)(v32 + 8);
          v34 = (_QWORD *)(v32 + 8);
          v33 = v35;
          if (v35)
          {
            *v34 = 0;
            *(_DWORD *)(v25 + 24 * v30 + 16) = 0;
            WTF::fastFree(v33, v8, v9, v10, v11, v12, v13, v14);
            v20 = *v19;
          }
          v36 = v4 + 24 * v17;
          v39 = *(_DWORD *)(v36 + 20);
          v38 = (unsigned int *)(v36 + 20);
          v37 = v39;
          *v31 = v20;
          v40 = v38 - 3;
          *v34 = 0;
          v34[1] = 0;
          *(_DWORD *)(v25 + 24 * v30 + 20) = v39;
          if (v39)
          {
            if (v37 >> 28)
            {
              __break(0xC471u);
              return;
            }
            v41 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v37));
            *(_DWORD *)(v25 + 24 * v30 + 16) = v37;
            *v34 = v41;
            v42 = *v38;
            v43 = *(__int128 **)v40;
            if ((_DWORD)v42)
            {
              v44 = 16 * v42;
              do
              {
                v45 = *v43++;
                *v41++ = v45;
                v44 -= 16;
              }
              while (v44);
              goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            v43 = *(__int128 **)v40;
          }
          v5 = v46;
          v4 = v47;
          v18 = v50;
          if (v43)
          {
            *(_QWORD *)v40 = 0;
            *(_DWORD *)(v47 + 24 * v17 + 16) = 0;
            WTF::fastFree((unint64_t)v43, v8, v9, v10, v11, v12, v13, v14);
          }
          if (v19 == a3)
            v18 = v31;
          goto LABEL_30;
        }
        v21 = v4 + 24 * v17;
        v24 = *(_QWORD *)(v21 + 8);
        v23 = (_QWORD *)(v21 + 8);
        v22 = v24;
        if (v24)
        {
          *v23 = 0;
          *(_DWORD *)(v4 + 24 * v17 + 16) = 0;
          WTF::fastFree(v22, v8, v9, v10, v11, v12, v13, v14);
        }
      }
LABEL_30:
      if (++v17 == v5)
        goto LABEL_33;
    }
  }
  if (v4)
LABEL_33:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

_QWORD *WTF::Detail::CallableWrapper<JSC::Debugger::forEachBreakpointLocation(unsigned int,JSC::SourceProvider *,int,int,int,int,WTF::Function<void ()(int,int)> &&)::$_0,void,JSC::JSTextPosition const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E358BF00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::Debugger::forEachBreakpointLocation(unsigned int,JSC::SourceProvider *,int,int,int,int,WTF::Function<void ()(int,int)> &&)::$_0,void,JSC::JSTextPosition const&>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E358BF00;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::forEachBreakpointLocation(unsigned int,JSC::SourceProvider *,int,int,int,int,WTF::Function<void ()(int,int)> &&)::$_0,void,JSC::JSTextPosition const&>::call(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = (a2[1] - a2[2]);
  if (*a2 == **(_DWORD **)(a1 + 16)
    && (**(_DWORD **)(a1 + 24) || **(_DWORD **)(a1 + 32) == v2 && **(_DWORD **)(a1 + 40)))
  {
    v3 = (**(_DWORD **)(a1 + 48) + v3);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), (v2 - 1), v3);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v18 - 2) = -1;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (int *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -2)
      {
        if (v22 == -1)
        {
          v23 = *(_QWORD *)(v6 + 16 * v19 + 8);
          if (v23)
            WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v23, v10, v11, v12, v13, v14, v15, v16);
        }
        else
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = 0;
          v27 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
          do
          {
            v29 = v28 & v25;
            v28 = ++v26 + v29;
          }
          while (*(_DWORD *)(v24 + 16 * v29) != -1);
          v30 = v24 + 16 * v29;
          v32 = (_QWORD *)(v30 + 8);
          v31 = *(_QWORD *)(v30 + 8);
          if (v31)
          {
            WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v31, v10, v11, v12, v13, v14, v15, v16);
            v22 = *v21;
          }
          *(_DWORD *)v30 = v22;
          v33 = v6 + 16 * v19;
          *v32 = 0;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *v32 = v34;
          v35 = *(_QWORD *)(v33 + 8);
          if (v35)
            WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v35, v10, v11, v12, v13, v14, v15, v16);
          if (v21 == a3)
            v20 = v30;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

_DWORD *WTF::HashTable<int,WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t **v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  uint64_t v86;
  unint64_t **v87;
  int v88;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _DWORD *result;
  _DWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = 0x7FFFFFFF;
      *v16 = 0;
      v16[1] = 0;
      v16 += 3;
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = 0;
    v124 = v5;
    v121 = v4;
    do
    {
      v19 = *(_DWORD *)(v4 + 24 * v17);
      if (v19 != 2147483646)
      {
        if (v19 == 0x7FFFFFFF)
        {
          v20 = v4 + 24 * v17;
          v21 = (unint64_t **)(v20 + 8);
          v22 = *(unsigned int *)(v20 + 20);
          if ((_DWORD)v22)
          {
            v23 = *v21;
            v24 = (uint64_t)&(*v21)[v22];
            do
            {
              v25 = *v23;
              *v23 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 1)
                {
                  v26 = *(unsigned int *)(v25 + 52);
                  if ((_DWORD)v26)
                  {
                    v27 = 24 * v26;
                    v28 = (WTF::StringImpl **)(*(_QWORD *)(v25 + 40) + 8);
                    do
                    {
                      v29 = *v28;
                      *v28 = 0;
                      if (v29)
                      {
                        if (*(_DWORD *)v29 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v29, v8, v9, v10, v11, v12, v13, v14);
                          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                        }
                        else
                        {
                          *(_DWORD *)v29 -= 2;
                        }
                      }
                      v28 += 3;
                      v27 -= 24;
                    }
                    while (v27);
                  }
                  v38 = *(_QWORD *)(v25 + 40);
                  if (v38)
                  {
                    *(_QWORD *)(v25 + 40) = 0;
                    *(_DWORD *)(v25 + 48) = 0;
                    WTF::fastFree(v38, v8, v9, v10, v11, v12, v13, v14);
                  }
                  v39 = *(WTF::StringImpl **)(v25 + 32);
                  *(_QWORD *)(v25 + 32) = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v39, v8, v9, v10, v11, v12, v13, v14);
                      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
                    }
                    else
                    {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                  WTF::fastFree(v25, v8, v9, v10, v11, v12, v13, v14);
                }
                else
                {
                  --*(_DWORD *)v25;
                }
              }
              ++v23;
            }
            while (v23 != (unint64_t *)v24);
          }
          v50 = (unint64_t)*v21;
          if (*v21)
          {
            *v21 = 0;
            *(_DWORD *)(v4 + 24 * v17 + 16) = 0;
            WTF::fastFree(v50, v8, v9, v10, v11, v12, v13, v14);
          }
        }
        else
        {
          v48 = *a1;
          v123 = (_DWORD *)(v4 + 24 * v17);
          if (*a1)
            v49 = *(_DWORD *)(v48 - 8);
          else
            v49 = 0;
          v120 = v18;
          v51 = 0;
          v52 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
          v53 = ((v52 ^ (v52 >> 6)) + ~((v52 ^ (v52 >> 6)) << 11)) ^ (((v52 ^ (v52 >> 6)) + ~((v52 ^ (v52 >> 6)) << 11)) >> 16);
          do
          {
            v54 = v53 & v49;
            v55 = (_DWORD *)(v48 + 24 * (v53 & v49));
            v53 = ++v51 + (v53 & v49);
          }
          while (*v55 != 0x7FFFFFFF);
          v56 = v48 + 24 * v54;
          v119 = (_DWORD *)(v56 + 20);
          v122 = v56 + 8;
          if (*(_DWORD *)(v56 + 20))
          {
            v57 = *(unint64_t **)v122;
            v58 = *(_QWORD *)v122 + 8 * *(unsigned int *)(v56 + 20);
            do
            {
              v59 = *v57;
              *v57 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 1)
                {
                  v60 = *(unsigned int *)(v59 + 52);
                  if ((_DWORD)v60)
                  {
                    v61 = 24 * v60;
                    v62 = (WTF::StringImpl **)(*(_QWORD *)(v59 + 40) + 8);
                    do
                    {
                      v63 = *v62;
                      *v62 = 0;
                      if (v63)
                      {
                        if (*(_DWORD *)v63 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v63, v8, v9, v10, v11, v12, v13, v14);
                          WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
                        }
                        else
                        {
                          *(_DWORD *)v63 -= 2;
                        }
                      }
                      v62 += 3;
                      v61 -= 24;
                    }
                    while (v61);
                  }
                  v72 = *(_QWORD *)(v59 + 40);
                  if (v72)
                  {
                    *(_QWORD *)(v59 + 40) = 0;
                    *(_DWORD *)(v59 + 48) = 0;
                    WTF::fastFree(v72, v8, v9, v10, v11, v12, v13, v14);
                  }
                  v73 = *(WTF::StringImpl **)(v59 + 32);
                  *(_QWORD *)(v59 + 32) = 0;
                  if (v73)
                  {
                    if (*(_DWORD *)v73 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v73, v8, v9, v10, v11, v12, v13, v14);
                      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
                    }
                    else
                    {
                      *(_DWORD *)v73 -= 2;
                    }
                  }
                  WTF::fastFree(v59, v8, v9, v10, v11, v12, v13, v14);
                }
                else
                {
                  --*(_DWORD *)v59;
                }
              }
              ++v57;
            }
            while (v57 != (unint64_t *)v58);
          }
          v82 = *(_QWORD *)v122;
          if (*(_QWORD *)v122)
          {
            *(_QWORD *)v122 = 0;
            *(_DWORD *)(v48 + 24 * v54 + 16) = 0;
            WTF::fastFree(v82, v8, v9, v10, v11, v12, v13, v14);
          }
          *v55 = *v123;
          v83 = v121 + 24 * v17;
          *(_QWORD *)v122 = 0;
          *(_QWORD *)(v122 + 8) = 0;
          v85 = *(_DWORD *)(v83 + 16);
          v84 = (_DWORD *)(v83 + 16);
          v87 = (unint64_t **)(v84 - 2);
          v86 = *((_QWORD *)v84 - 1);
          *((_QWORD *)v84 - 1) = 0;
          *(_QWORD *)v122 = v86;
          *v84 = 0;
          *(_DWORD *)(v48 + 24 * v54 + 16) = v85;
          v88 = v84[1];
          v84[1] = 0;
          *v119 = v88;
          v89 = v84[1];
          if ((_DWORD)v89)
          {
            v90 = *v87;
            v91 = (uint64_t)&(*v87)[v89];
            do
            {
              v92 = *v90;
              *v90 = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 1)
                {
                  v93 = *(unsigned int *)(v92 + 52);
                  if ((_DWORD)v93)
                  {
                    v94 = 24 * v93;
                    v95 = (WTF::StringImpl **)(*(_QWORD *)(v92 + 40) + 8);
                    do
                    {
                      v96 = *v95;
                      *v95 = 0;
                      if (v96)
                      {
                        if (*(_DWORD *)v96 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v96, v8, v9, v10, v11, v12, v13, v14);
                          WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
                        }
                        else
                        {
                          *(_DWORD *)v96 -= 2;
                        }
                      }
                      v95 += 3;
                      v94 -= 24;
                    }
                    while (v94);
                  }
                  v105 = *(_QWORD *)(v92 + 40);
                  if (v105)
                  {
                    *(_QWORD *)(v92 + 40) = 0;
                    *(_DWORD *)(v92 + 48) = 0;
                    WTF::fastFree(v105, v8, v9, v10, v11, v12, v13, v14);
                  }
                  v106 = *(WTF::StringImpl **)(v92 + 32);
                  *(_QWORD *)(v92 + 32) = 0;
                  if (v106)
                  {
                    if (*(_DWORD *)v106 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v106, v8, v9, v10, v11, v12, v13, v14);
                      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
                    }
                    else
                    {
                      *(_DWORD *)v106 -= 2;
                    }
                  }
                  WTF::fastFree(v92, v8, v9, v10, v11, v12, v13, v14);
                }
                else
                {
                  --*(_DWORD *)v92;
                }
              }
              ++v90;
            }
            while (v90 != (unint64_t *)v91);
          }
          v115 = (unint64_t)*v87;
          if (*v87)
          {
            *v87 = 0;
            *v84 = 0;
            WTF::fastFree(v115, v8, v9, v10, v11, v12, v13, v14);
          }
          v18 = v120;
          v4 = v121;
          if (v123 == a3)
            v18 = v55;
        }
      }
      ++v17;
    }
    while (v17 != v124);
  }
  else
  {
    v18 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
  return v18;
}

void WTF::HashTable<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  WTF **v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  WTF *v35;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (WTF **)(v10 + 8 * i);
      v23 = *v22;
      if (*v22 != (WTF *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = ((unint64_t)v23 + ~((_QWORD)v23 << 32)) ^ (((unint64_t)v23 + ~((_QWORD)v23 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v25 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = *(_QWORD *)(v24 + 8 * v29);
            v29 = (v29 + v30++) & v25;
          }
          while (v32);
          v33 = (WTF **)(v24 + 8 * v31);
          *v33 = 0;
          v34 = *v22;
          *v22 = 0;
          *v33 = v34;
          v35 = *v22;
          *v22 = 0;
          if (v35)
            WTF::RefCounted<JSC::Breakpoint>::deref(v35, v14, v15, v16, v17, v18, v19, v20);
        }
        else
        {
          *v22 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ClearCodeBlockDebuggerRequestsFunctor>::implFunction(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    if (**(_QWORD **)(result + 16) == *(_QWORD *)(*(_QWORD *)(a2 + 8) + 2016))
      *(_DWORD *)(a2 + 40) &= 1u;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::evaluateBreakpointActions(JSC::Breakpoint &,JSC::JSGlobalObject *)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(_QWORD *)(16
                  * (*(_DWORD *)JSC::DebuggerCallFrame::scope(*(JSC::DebuggerCallFrame **)(a1 + 8), *(JSC::VM **)(a1 + 16), a3, a4, a5, a6, a7, a8) & 0xFFFFFFFE)+ 0x28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, v10, *(_QWORD *)(a1 + 24) + 8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::evaluateBreakpointActions(JSC::Breakpoint &,JSC::JSGlobalObject *)::$_1,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 112))(a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::evaluateBreakpointActions(JSC::Breakpoint &,JSC::JSGlobalObject *)::$_2,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = **(_QWORD **)(a1 + 8);
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(v5 + 180);
  ++*(_DWORD *)(v5 + 176);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, v3, v4, v6);
}

uint64_t WTF::ScopedLambdaRefFunctor<void ()(JSC::CodeBlock *),JSC::Debugger::ClearDebuggerRequestsFunctor>::implFunction(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    if (**(_QWORD **)(result + 16) == *(_QWORD *)(a2 + 8))
      *(_DWORD *)(a2 + 40) &= 1u;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>> *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (!v12)
  {
    v23 = 0;
    if (!v11)
      return v23;
    goto LABEL_16;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (_QWORD **)(v11 + 8 * v22);
    v25 = *v24;
    if ((unint64_t)*v24 + 1 >= 2)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = ~(*v25 << 32) + *v25;
      v29 = (v28 ^ (v28 >> 22)) + ~((v28 ^ (v28 >> 22)) << 13);
      v30 = (9 * (v29 ^ (v29 >> 8))) ^ ((9 * (v29 ^ (v29 >> 8))) >> 15);
      v31 = v27 & (((v30 + ~(v30 << 27)) >> 31) ^ (v30 + ~((_DWORD)v30 << 27)));
      v32 = 1;
      do
      {
        v33 = v31;
        v34 = *(_QWORD *)(v26 + 8 * v31);
        v31 = (v31 + v32++) & v27;
      }
      while (v34);
      v35 = (_QWORD *)(v26 + 8 * v33);
      *v35 = v25;
      if (v24 == (_QWORD **)a3)
        v23 = v35;
    }
    ++v22;
  }
  while (v22 != v12);
  if (v11)
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::handlePause(JSC::JSGlobalObject *,JSC::Debugger::ReasonForPause)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::DebuggerCallFrame *v11;
  uint64_t v12;
  JSC::DebuggerCallFrame *v14;
  uint64_t v15;
  JSC::VM *v16;
  JSC::DebuggerCallFrame *v17;
  JSC::DebuggerCallFrame *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DebuggerCallFrame *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[7];
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = **(_QWORD **)(a1 + 8);
  v11 = *(JSC::DebuggerCallFrame **)(v9 + 184);
  v12 = v10;
  if (!v11)
  {
    JSC::DebuggerCallFrame::create((JSC::DebuggerCallFrame *)v71, *(JSC::VM **)(v9 + 16), *(JSC::CallFrame **)(v9 + 72), a4, a5, a6, a7, a8);
    v11 = (JSC::DebuggerCallFrame *)v71[0];
    v14 = *(JSC::DebuggerCallFrame **)(v9 + 184);
    *(_QWORD *)(v9 + 184) = v71[0];
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(v14);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        v11 = *(JSC::DebuggerCallFrame **)(v9 + 184);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
    v12 = **(_QWORD **)(a1 + 8);
  }
  if (*(_DWORD *)(v9 + 52) == 1)
  {
    v15 = *(_QWORD *)(v9 + 56);
    return (*(uint64_t (**)(uint64_t, uint64_t, JSC::DebuggerCallFrame *, uint64_t))(*(_QWORD *)a2 + 80))(a2, v10, v11, v15);
  }
  v16 = *(JSC::VM **)(v12 + 56);
  v17 = v11;
  if (!v11)
  {
    JSC::DebuggerCallFrame::create((JSC::DebuggerCallFrame *)v71, *(JSC::VM **)(v9 + 16), *(JSC::CallFrame **)(v9 + 72), a4, a5, a6, a7, a8);
    v17 = (JSC::DebuggerCallFrame *)v71[0];
    v18 = *(JSC::DebuggerCallFrame **)(v9 + 184);
    *(_QWORD *)(v9 + 184) = v71[0];
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        JSC::DebuggerCallFrame::~DebuggerCallFrame(v18);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        v17 = *(JSC::DebuggerCallFrame **)(v9 + 184);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
  }
  ++*(_DWORD *)v17;
  while (1)
  {
    v19 = JSC::DebuggerCallFrame::scope(v17, v16, a3, a4, a5, a6, a7, a8);
    v20 = *(_QWORD *)(v19 + 16);
    if (*(_BYTE *)(v20 + 5) == 53)
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (((*(unsigned __int8 *)(v21 + 21) >> 2) & 7u) - 3 <= 1)
        break;
    }
    if (*((_QWORD *)v17 + 1) || *((_BYTE *)v17 + 84))
    {
      v22 = (JSC::DebuggerCallFrame *)*((_QWORD *)v17 + 2);
      if (v22)
        ++*(_DWORD *)v22;
    }
    else
    {
      v22 = 0;
    }
    if (*(_DWORD *)v17 == 1)
    {
      JSC::DebuggerCallFrame::~DebuggerCallFrame(v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      --*(_DWORD *)v17;
    }
    v17 = v22;
    if (!v22)
    {
      v15 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, JSC::DebuggerCallFrame *, uint64_t))(*(_QWORD *)a2 + 80))(a2, v10, v11, v15);
    }
  }
  v31 = v19;
  v32 = (unsigned __int8 *)(v21 + 20);
  if (__ldaxr((unsigned __int8 *)(v21 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_30;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 20);
LABEL_30:
  v42 = *(_QWORD *)(v21 + 8);
  if (v42)
    v43 = *(unsigned int *)(v42 - 12);
  else
    v43 = 0;
  v44 = __ldxr(v32);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v32))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 20), 0, a3, a4, a5, a6, a7, a8);
  if (v43 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1982CF32CLL);
  }
  if (__ldaxr(v32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_42;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 20);
LABEL_42:
  v46 = *(_QWORD **)(v21 + 8);
  v47 = *((unsigned int *)v46 - 1);
  v48 = &v46[2 * v47];
  if (*((_DWORD *)v46 - 3))
  {
    if ((_DWORD)v47)
    {
      v49 = 16 * v47;
      while ((unint64_t)(*v46 + 1) <= 1)
      {
        v46 += 2;
        v49 -= 16;
        if (!v49)
          goto LABEL_47;
      }
    }
  }
  else
  {
LABEL_47:
    v46 = v48;
  }
  v50 = *v46;
  v51 = __ldxr(v32);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_52;
  }
  if (__stlxr(0, v32))
LABEL_52:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, a3, a4, a5, a6, a7, a8);
  v52 = *(_QWORD *)(v31 + 16);
  v71[2] = 0xFFFFFFFF00000000;
  LOBYTE(v72) = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  memset(&v71[4], 0, 21);
  v71[3] = v52;
  if (!JSC::JSLexicalEnvironment::getOwnPropertySlot(v20, v12, v50, (uint64_t)v71, a5, a6, a7, a8)
    || BYTE1(v71[6]) != 1)
  {
    goto LABEL_66;
  }
  v15 = v71[0];
  if (!v73)
    goto LABEL_58;
  v53 = *(_DWORD *)(v72 + 4);
  if (!v53)
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x1982CF30CLL);
  }
  *(_DWORD *)(v72 + 4) = v53 - 1;
LABEL_58:
  if (*(_DWORD *)v17 == 1)
  {
    JSC::DebuggerCallFrame::~DebuggerCallFrame(v17);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    --*(_DWORD *)v17;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, JSC::DebuggerCallFrame *, uint64_t))(*(_QWORD *)a2 + 80))(a2, v10, v11, v15);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::handlePause(JSC::JSGlobalObject *,JSC::Debugger::ReasonForPause)::$_1,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::callEvent(JSC::CallFrame *)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, **(_QWORD **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::didQueueMicrotask(JSC::JSGlobalObject *,WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 56))(a2, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::willRunMicrotask(JSC::JSGlobalObject *,WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<JSC::Debugger::didRunMicrotask(JSC::JSGlobalObject *,WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,JSC::Debugger::Observer &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
}

uint64_t *WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::Debugger::BlackboxType&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 8 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 8 * v22;
        *(_BYTE *)(a4 + 16) = 0;
        *((_DWORD *)v15 + 1) = *a3;
        return result;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 8 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *v17 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  v19 = *a3;
  *(_DWORD *)v15 = v11;
  *((_DWORD *)v15 + 1) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_23;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_28:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v27, v15);
      v15 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_28;
  }
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23 + 8 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::BlackboxType>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 16);
    do
    {
      *v18++ = 0xFFFFFFFFLL;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_DWORD *)(v6 + 8 * v19);
      if (*v21 <= 0xFFFFFFFD)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = 0;
        v25 = 9 * ((*v21 + ~(*v21 << 15)) ^ ((*v21 + ~(*v21 << 15)) >> 10));
        v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
        do
        {
          v27 = v26 & v23;
          v26 = ++v24 + v27;
        }
        while (*(_DWORD *)(v22 + 8 * v27) != -1);
        v28 = (_QWORD *)(v22 + 8 * v27);
        *v28 = *(_QWORD *)v21;
        if (v21 == a3)
          v20 = v28;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void JSC::parseRootNode<JSC::ModuleProgramNode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  WTF::MonotonicTime *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  char v23;
  int *v24;
  int *v25;
  JSC::VM *v26;
  WTF::AtomStringImpl **v27;
  WTF::AtomStringImpl **v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  WTF::AtomStringImpl *v39;
  WTF::MonotonicTime *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  WTF::AtomStringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  double v68;
  const char *v69;
  double v70;
  unsigned int v71;
  unsigned int v72;
  WTF::AtomStringImpl *v73;
  _DWORD v74[1822];
  uint64_t v75;
  char v76;
  _QWORD v77[2];

  v11 = (WTF::MonotonicTime *)MEMORY[0x1E0C80A78](a1, a2);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = v11;
  v28 = v27;
  v29 = 0.0;
  if (unk_1ECF4C33E)
    v29 = WTF::MonotonicTime::now(v11);
  v77[0] = 0;
  *v28 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)v25 + 24))(*(_QWORD *)v25);
  if ((v30 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v74, v26, v25, v23, v21, v19, v17, v15, 0, 1, 0, 0, 0, 0, a11, 0);
    v76 = a9;
    JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ModuleProgramNode>((uint64_t)v74, v13, (WTF::AtomStringImpl *)v77, 0, 0, 0, 0, v31, &v73);
    v38 = v73;
    v73 = 0;
    v39 = *v28;
    *v28 = v38;
    if (v39)
    {
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v28, (unint64_t)v39, v32, v33, v34, v35, v36, v37);
      v39 = v73;
      v73 = 0;
      if (v39)
        std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v73, (unint64_t)v39, v32, v33, v34, v35, v36, v37);
    }
    if (a10)
    {
      v66 = *(_DWORD *)(v75 + 128);
      *(_QWORD *)a10 = *(_QWORD *)(v75 + 120);
      *(_DWORD *)(a10 + 8) = v66;
    }
    v40 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)v74, v39, v32, v33, v34, v35, v36, v37);
  }
  else
  {
    JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v74, v26, v25, v23, v21, v19, v17, v15, 0, 1, 0, 0, 0, 0, a11, 0);
    JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ModuleProgramNode>((uint64_t)v74, v13, (WTF::AtomStringImpl *)v77, 0, 0, 0, 0, v49, &v73);
    v56 = v73;
    v73 = 0;
    v57 = *v28;
    *v28 = v56;
    if (v57)
    {
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v28, (unint64_t)v57, v50, v51, v52, v53, v54, v55);
      v57 = v73;
      v73 = 0;
      if (v57)
        std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v73, (unint64_t)v57, v50, v51, v52, v53, v54, v55);
    }
    v40 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)v74, v57, v50, v51, v52, v53, v54, v55);
  }
  if (byte_1ECF4C340)
  {
    do
      v67 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v67 + 1, &JSC::globalParseCount));
  }
  if (unk_1ECF4C33E)
  {
    v68 = WTF::MonotonicTime::now(v40);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)v74, (const SourceCode *)v25);
    if (*v28)
      v69 = "Parsed #";
    else
      v69 = "Failed to parse #";
    v73 = (WTF::AtomStringImpl *)v69;
    v71 = v74[1];
    v72 = v74[0];
    v70 = (v68 - v29) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>((const char **)&v73, &v72, "/#", &v71, " in ", &v70, " ms.", "\n");
  }
  v48 = (WTF::StringImpl *)v77[0];
  v77[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parse<JSC::ModuleProgramNode>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::AtomStringImpl *a3@<X2>, uint64_t a4@<X3>, JSC::ExpressionNode *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, WTF::AtomStringImpl **a9@<X8>)
{
  _BYTE *v12;
  char v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::AtomStringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  char v126;
  __int128 v127;
  __int128 v128;
  WTF::StringImpl *v129;
  int v131;
  WTF::AtomStringImpl **v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  int v140;
  __int16 v141;
  WTF::AtomStringImpl *v142;
  WTF::StringImpl *v143;
  char v144[8];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147[3];
  uint64_t v148[3];
  __int16 v149;
  int v150;
  int v151;
  __int128 v152;
  WTF::StringImpl *v153;

  v12 = (_BYTE *)(a1 + 7352);
  v13 = *(_BYTE *)(a1 + 7474);
  v153 = 0;
  v152 = *(_OWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 20);
  JSC::Parser<JSC::Lexer<unsigned char>>::parseInner(a1, a3, a4, a5, a7, a6, (uint64_t)a7, a8, (uint64_t)v144);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 7288);
  v24 = *(_DWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 150);
  if (*(_BYTE *)(v23 + 150))
  {
    v22 = *(WTF::StringImpl **)(v23 + 152);
    if (v22)
      *(_DWORD *)v22 += 2;
  }
  v143 = v22;
  *(_QWORD *)(v23 + 184) = 0;
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v27 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v28 = *(_QWORD *)(v23 + 40);
  *(_BYTE *)(v23 + 148) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  if (v28)
    WTF::fastFree(v28, v15, v16, v17, v18, v19, v20, v21);
  if (v27)
    WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
  if (v26)
    WTF::fastFree(v26, v15, v16, v17, v18, v19, v20, v21);
  if (v25 || v151)
  {
    if (v143)
    {
      v114 = &v143;
    }
    else
    {
      if (v151 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_74;
      }
      v114 = (WTF::StringImpl **)v144;
    }
    WTF::String::operator=((unint64_t *)&v153, (WTF::AtomStringImpl *)v114, v16, v17, v18, v19, v20, v21);
    v121 = v151;
    *a9 = 0;
    if (v121)
    {
      if (*v12)
      {
        v122 = *(_QWORD *)(a1 + 7432);
        v123 = *(_OWORD *)(a1 + 7416);
        v136 = *(_OWORD *)(a1 + 7400);
        v137 = v123;
        v124 = *(_OWORD *)(a1 + 7384);
        v134 = *(_OWORD *)(a1 + 7368);
        v135 = v124;
        v138 = v122;
        v139 = 0;
        v140 = -1;
        v141 = 1;
      }
      else
      {
        v125 = *(_DWORD *)(a1 + 7368);
        if (v125 == 20)
        {
          v126 = 3;
        }
        else if ((v125 & 0x200000) != 0)
        {
          if (v125 == 3145741 || v125 == 3145732)
            v126 = 3;
          else
            v126 = 2;
        }
        else
        {
          v126 = 1;
        }
        v127 = *(_OWORD *)(a1 + 7416);
        v136 = *(_OWORD *)(a1 + 7400);
        v137 = v127;
        v138 = *(_QWORD *)(a1 + 7432);
        v128 = *(_OWORD *)(a1 + 7384);
        v134 = *(_OWORD *)(a1 + 7368);
        v135 = v128;
        v129 = v153;
        if (v153)
          *(_DWORD *)v153 += 2;
        v139 = v129;
        v140 = v24;
        LOBYTE(v141) = 4;
        HIBYTE(v141) = v126;
      }
      JSC::ParserError::operator=(a2, (uint64_t)&v134, v115, v116, v117, v118, v119, v120);
      v105 = v139;
      v139 = 0;
      if (!v105)
        goto LABEL_32;
      if (*(_DWORD *)v105 != 2)
      {
        *(_DWORD *)v105 -= 2;
        goto LABEL_32;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *a9 = 0;
  }
  v131 = v14;
  v132 = a9;
  v29 = *(_DWORD **)(a1 + 7288);
  v30 = v29[22];
  v31 = v29[28] - v30;
  v133 = v13;
  LODWORD(v134) = *v29;
  v32 = v29[20] - v30;
  DWORD1(v134) = v31;
  *((_QWORD *)&v134 + 1) = v32;
  v33 = *(_DWORD *)(a1 + 12);
  if (!v33)
  {
LABEL_74:
    __break(0xC471u);
    return;
  }
  v34 = *(uint64_t **)(a1 + 7224);
  v35 = v32 - v31;
  v36 = *(_QWORD *)a1 + 720 * (v33 - 1);
  v37 = *(_BYTE *)(v36 + 9);
  v38 = *(_BYTE *)(v36 + 32);
  v39 = WTF::fastMalloc((WTF *)0x100);
  v40 = v149;
  v41 = JSC::ScopeNode::ScopeNode(v39, a1 + 7232, (int *)&v152, (uint64_t)&v134, v34, v145, v147, &v146, v148, v149, v37, v38, v150);
  *(_QWORD *)v41 = off_1E358BAE0;
  *(_QWORD *)(v41 + 40) = &unk_1E358BB80;
  *(_QWORD *)(v41 + 104) = &unk_1E358BBA0;
  *(_DWORD *)(v41 + 232) = v131;
  *(_DWORD *)(v41 + 236) = v35;
  *(_BYTE *)(v41 + 240) = v40 < 0;
  v48 = *(_DWORD **)(a1 + 7512);
  ++*v48;
  *(_QWORD *)(v41 + 248) = v48;
  v142 = 0;
  v49 = *v132;
  *v132 = (WTF::AtomStringImpl *)v41;
  if (v49)
  {
    std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v132, (unint64_t)v49, v42, v43, v44, v45, v46, v47);
    v49 = v142;
    v142 = 0;
    if (v49)
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v142, (unint64_t)v49, v42, v43, v44, v45, v46, v47);
  }
  v50 = *v132;
  v51 = *(uint64_t **)(a1 + 7224);
  v52 = *((_DWORD *)v51 + 4) + 1;
  v53 = *(_QWORD *)(a1 + 7288);
  v54 = *(_DWORD *)(v53 + 88);
  v55 = *(_DWORD *)(v53 + 80) - v54;
  v56 = *(_DWORD *)(v53 + 112) - v54;
  *((_DWORD *)v50 + 7) = *(_DWORD *)v53;
  *((_DWORD *)v50 + 2) = v52;
  *((_DWORD *)v50 + 3) = v55;
  *((_DWORD *)v50 + 4) = v56;
  *((_DWORD *)v50 + 5) = v55;
  if (((1 << v133) & 0x1F8FFF) != 0)
    goto LABEL_32;
  v57 = *v51;
  v58 = *(WTF::StringImpl **)(v53 + 160);
  if (v58)
    *(_DWORD *)v58 += 4;
  v59 = *(WTF::StringImpl **)(v57 + 88);
  *(_QWORD *)(v57 + 88) = v58;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v49, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v49, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v60 = **(_QWORD **)(a1 + 7224);
  v61 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 7288) + 168);
  if (v61)
    *(_DWORD *)v61 += 4;
  v62 = *(WTF::StringImpl **)(v60 + 96);
  *(_QWORD *)(v60 + 96) = v61;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v49, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  if (!v61)
    goto LABEL_32;
  if (*(_DWORD *)v61 == 2)
  {
    v105 = v61;
LABEL_47:
    WTF::StringImpl::~StringImpl(v105, v49, v42, v43, v44, v45, v46, v47);
    WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    goto LABEL_32;
  }
  *(_DWORD *)v61 -= 2;
LABEL_32:
  v63 = v143;
  v143 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v49, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  if (v151 != -1)
    ((void (*)(__int128 *, char *))off_1E358C080[v151])(&v134, v144);
  v64 = v153;
  v153 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v49, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
}

void JSC::Parser<JSC::Lexer<char16_t>>::parse<JSC::ModuleProgramNode>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::AtomStringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, WTF::AtomStringImpl **a9@<X8>)
{
  _BYTE *v12;
  char v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  WTF::AtomStringImpl *v51;
  WTF::AtomStringImpl *v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  int v127;
  char v128;
  __int128 v129;
  __int128 v130;
  WTF::StringImpl *v131;
  int v133;
  WTF::AtomStringImpl **v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  int v142;
  __int16 v143;
  WTF::AtomStringImpl *v144;
  WTF::StringImpl *v145;
  char v146[8];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149[3];
  uint64_t v150[3];
  __int16 v151;
  int v152;
  int v153;
  __int128 v154;
  WTF::StringImpl *v155;

  v12 = (_BYTE *)(a1 + 7352);
  v13 = *(_BYTE *)(a1 + 7474);
  v155 = 0;
  v154 = *(_OWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 7224) + 20);
  JSC::Parser<JSC::Lexer<char16_t>>::parseInner(a1, a3, a4, a5, a7, a6, (uint64_t)a7, a8, (uint64_t)v146);
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 7288);
  v24 = *(_DWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 150);
  if (*(_BYTE *)(v23 + 150))
  {
    v22 = *(WTF::StringImpl **)(v23 + 152);
    if (v22)
      *(_DWORD *)v22 += 2;
  }
  v145 = v22;
  *(_QWORD *)(v23 + 184) = 0;
  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v27 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v28 = *(_QWORD *)(v23 + 40);
  *(_BYTE *)(v23 + 148) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  if (v28)
    WTF::fastFree(v28, v15, v16, v17, v18, v19, v20, v21);
  if (v27)
    WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
  if (v26)
    WTF::fastFree(v26, v15, v16, v17, v18, v19, v20, v21);
  if (v25 || v153)
  {
    if (v145)
    {
      v116 = &v145;
    }
    else
    {
      if (v153 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_74;
      }
      v116 = (WTF::StringImpl **)v146;
    }
    WTF::String::operator=((unint64_t *)&v155, (WTF::AtomStringImpl *)v116, v16, v17, v18, v19, v20, v21);
    v123 = v153;
    *a9 = 0;
    if (v123)
    {
      if (*v12)
      {
        v124 = *(_QWORD *)(a1 + 7432);
        v125 = *(_OWORD *)(a1 + 7416);
        v138 = *(_OWORD *)(a1 + 7400);
        v139 = v125;
        v126 = *(_OWORD *)(a1 + 7384);
        v136 = *(_OWORD *)(a1 + 7368);
        v137 = v126;
        v140 = v124;
        v141 = 0;
        v142 = -1;
        v143 = 1;
      }
      else
      {
        v127 = *(_DWORD *)(a1 + 7368);
        if (v127 == 20)
        {
          v128 = 3;
        }
        else if ((v127 & 0x200000) != 0)
        {
          if (v127 == 3145741 || v127 == 3145732)
            v128 = 3;
          else
            v128 = 2;
        }
        else
        {
          v128 = 1;
        }
        v129 = *(_OWORD *)(a1 + 7416);
        v138 = *(_OWORD *)(a1 + 7400);
        v139 = v129;
        v140 = *(_QWORD *)(a1 + 7432);
        v130 = *(_OWORD *)(a1 + 7384);
        v136 = *(_OWORD *)(a1 + 7368);
        v137 = v130;
        v131 = v155;
        if (v155)
          *(_DWORD *)v155 += 2;
        v141 = v131;
        v142 = v24;
        LOBYTE(v143) = 4;
        HIBYTE(v143) = v128;
      }
      JSC::ParserError::operator=(a2, (uint64_t)&v136, v117, v118, v119, v120, v121, v122);
      v107 = v141;
      v141 = 0;
      if (!v107)
        goto LABEL_32;
      if (*(_DWORD *)v107 != 2)
      {
        *(_DWORD *)v107 -= 2;
        goto LABEL_32;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *a9 = 0;
  }
  v133 = v14;
  v134 = a9;
  v29 = *(unsigned int **)(a1 + 7288);
  v30 = *v29;
  v32 = *((_QWORD *)v29 + 10);
  v31 = *((_QWORD *)v29 + 11);
  v33 = (unint64_t)(*((_QWORD *)v29 + 14) - v31) >> 1;
  v135 = v13;
  *(_QWORD *)&v136 = __PAIR64__(v33, v30);
  v34 = (unint64_t)(v32 - v31) >> 1;
  *((_QWORD *)&v136 + 1) = v34;
  v35 = *(_DWORD *)(a1 + 12);
  if (!v35)
  {
LABEL_74:
    __break(0xC471u);
    return;
  }
  v36 = *(uint64_t **)(a1 + 7224);
  v37 = v34 - v33;
  v38 = *(_QWORD *)a1 + 720 * (v35 - 1);
  v39 = *(_BYTE *)(v38 + 9);
  v40 = *(_BYTE *)(v38 + 32);
  v41 = WTF::fastMalloc((WTF *)0x100);
  v42 = v151;
  v43 = JSC::ScopeNode::ScopeNode(v41, a1 + 7232, (int *)&v154, (uint64_t)&v136, v36, v147, v149, &v148, v150, v151, v39, v40, v152);
  *(_QWORD *)v43 = off_1E358BAE0;
  *(_QWORD *)(v43 + 40) = &unk_1E358BB80;
  *(_QWORD *)(v43 + 104) = &unk_1E358BBA0;
  *(_DWORD *)(v43 + 232) = v133;
  *(_DWORD *)(v43 + 236) = v37;
  *(_BYTE *)(v43 + 240) = v42 < 0;
  v50 = *(_DWORD **)(a1 + 7512);
  ++*v50;
  *(_QWORD *)(v43 + 248) = v50;
  v144 = 0;
  v51 = *v134;
  *v134 = (WTF::AtomStringImpl *)v43;
  if (v51)
  {
    std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)v134, (unint64_t)v51, v44, v45, v46, v47, v48, v49);
    v51 = v144;
    v144 = 0;
    if (v51)
      std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100]((uint64_t)&v144, (unint64_t)v51, v44, v45, v46, v47, v48, v49);
  }
  v52 = *v134;
  v53 = *(uint64_t **)(a1 + 7224);
  v54 = *((_DWORD *)v53 + 4) + 1;
  v55 = *(_QWORD *)(a1 + 7288);
  v56 = *(_QWORD *)(v55 + 88);
  v57 = (unint64_t)(*(_QWORD *)(v55 + 80) - v56) >> 1;
  v58 = (unint64_t)(*(_QWORD *)(v55 + 112) - v56) >> 1;
  *((_DWORD *)v52 + 7) = *(_DWORD *)v55;
  *((_DWORD *)v52 + 2) = v54;
  *((_DWORD *)v52 + 3) = v57;
  *((_DWORD *)v52 + 4) = v58;
  *((_DWORD *)v52 + 5) = v57;
  if (((1 << v135) & 0x1F8FFF) != 0)
    goto LABEL_32;
  v59 = *v53;
  v60 = *(WTF::StringImpl **)(v55 + 160);
  if (v60)
    *(_DWORD *)v60 += 4;
  v61 = *(WTF::StringImpl **)(v59 + 88);
  *(_QWORD *)(v59 + 88) = v60;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v51, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v62 = **(_QWORD **)(a1 + 7224);
  v63 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 7288) + 168);
  if (v63)
    *(_DWORD *)v63 += 4;
  v64 = *(WTF::StringImpl **)(v62 + 96);
  *(_QWORD *)(v62 + 96) = v63;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v51, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  if (!v63)
    goto LABEL_32;
  if (*(_DWORD *)v63 == 2)
  {
    v107 = v63;
LABEL_47:
    WTF::StringImpl::~StringImpl(v107, v51, v44, v45, v46, v47, v48, v49);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_32;
  }
  *(_DWORD *)v63 -= 2;
LABEL_32:
  v65 = v145;
  v145 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v51, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  if (v153 != -1)
    ((void (*)(__int128 *, char *))off_1E358C090[v153])(&v136, v146);
  v66 = v155;
  v155 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v51, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
}

void std::default_delete<JSC::ModuleProgramNode>::operator()[abi:sn180100](uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a2)
  {
    WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref((unint64_t *)(a2 + 248), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)a2 = off_1E3596CB0;
    *(_QWORD *)(a2 + 40) = &unk_1E3596D50;
    *(_QWORD *)(a2 + 104) = &unk_1E3596D70;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 192), v9, v10, v11, v12, v13, v14, v15);
    v23 = *(_DWORD **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    if (v23)
    {
      if (v23[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      else
        --v23[2];
    }
    *(_QWORD *)(a2 + 104) = &off_1E357CA78;
    v24 = *(_QWORD *)(a2 + 136);
    if (v24)
    {
      *(_QWORD *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 144) = 0;
      WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(a2 + 112), (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
    *(_QWORD *)(a2 + 40) = off_1E357CA98;
    JSC::ParserArena::~ParserArena((JSC::ParserArena *)(a2 + 48), v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(a2, v32, v33, v34, v35, v36, v37, v38);
  }
}

uint64_t JSC::DFG::AbstractHeap::Payload::dumpAsOperand(JSC::DFG::AbstractHeap::Payload *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  unsigned int v10;

  if (*(_BYTE *)this)
  {
    v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v3, "%s", "TOP");
  }
  else
  {
    v4 = *((_QWORD *)this + 1);
    v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v6 = v5;
    if (HIDWORD(v4) == 2)
    {
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      WTF::PrintStream::printf(v7, "%s", "tmp");
      WTF::PrintStream::printf(v7, "%d", v4);
    }
    else
    {
      v10 = v4;
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      JSC::VirtualRegister::dump(&v10, v8);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::AbstractHeap::dump(JSC::DFG::AbstractHeap *this, WTF::PrintStream *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  _QWORD v14[2];

  v4 = *(_DWORD *)this & 0x3FFF;
  v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v5, v4);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *(_QWORD *)this;
  v8 = *(_QWORD *)this & 0x3FFFLL;
  v9 = v8 > 3 || (_DWORD)v8 == 2;
  if (v9 && (v7 & 0x4000) == 0)
  {
    if ((_DWORD)v8 == 2)
    {
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v11, "%s", "(");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v12 = *(uint64_t *)this >> 15;
      v14[0] = (*(_QWORD *)this >> 14) & 1;
      v14[1] = v12;
      JSC::DFG::AbstractHeap::Payload::dumpAsOperand((JSC::DFG::AbstractHeap::Payload *)v14, a2);
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    }
    else if ((_DWORD)v8 == 37)
    {
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(");
      WTF::PrintStream::printf(v10, "0x%x-0x%x", (unsigned __int16)((unint64_t)v7 >> 15), (unsigned __int16)((unint64_t)v7 >> 31));
    }
    else
    {
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(");
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v13, "%lld", v7 >> 15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    }
    WTF::PrintStream::printf(v10, "%s", ")");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::DFG::AbstractValue::set(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  BOOL v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;

  v8 = a3;
  if (*a3)
    v10 = (*a3 & 0xFFFE000000000002) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    if ((*(_QWORD *)a1 & 1) != 0)
      WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_28;
  }
  v11 = a4;
  v12 = a2;
  v13 = a3[1];
  if (!v13)
    goto LABEL_66;
  v14 = a2[3];
  v15 = *(unsigned __int8 *)(v13 + 5);
  if (v15 != 1)
  {
    if (v15 == 18)
    {
      __break(0xC471u);
      JUMPOUT(0x1982D0ECCLL);
    }
    v36 = (uint64_t *)(v14 + 288);
    v37 = *(_QWORD *)(v14 + 288);
    if (v37
      || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v36, 8uLL, 0, a4, a5, a6, a7, a8), (v37 = *v36) != 0))
    {
      v38 = *(_DWORD *)(v37 - 8);
    }
    else
    {
      v38 = 0;
    }
    v39 = (~(v13 << 32) + v13) ^ ((~(v13 << 32) + v13) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v42 = v38 & ((v41 >> 31) ^ v41);
    a3 = (unint64_t *)(v37 + 8 * v42);
    v43 = *a3;
    if (*a3)
    {
      v44 = 0;
      v45 = 1;
      while (v43 != v13)
      {
        if (v43 == -1)
          v44 = a3;
        v42 = (v42 + v45) & v38;
        a3 = (unint64_t *)(v37 + 8 * v42);
        v43 = *a3;
        ++v45;
        if (!*a3)
        {
          if (v44)
          {
            *v44 = 0;
            --*(_DWORD *)(*v36 - 16);
            a3 = v44;
          }
          goto LABEL_60;
        }
      }
      goto LABEL_66;
    }
LABEL_60:
    *a3 = v13;
    v46 = *v36;
    if (*v36)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v36;
    if (*v36)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        goto LABEL_66;
    }
    else
    {
      if (3 * v51 > 4 * v50)
        goto LABEL_66;
      if (!(_DWORD)v51)
      {
        v81 = 8;
LABEL_126:
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v36, v81, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_66;
      }
    }
    v81 = ((_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51)));
    goto LABEL_126;
  }
  v16 = (uint64_t *)(v14 + 296);
  v17 = v13 >> 4;
  v18 = *(_QWORD *)(v14 + 296);
  if (v18
    || (WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v16, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v18 = *v16) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = v19 & v17;
  a2 = (_QWORD *)(v18 + 4 * (v19 & v17));
  v21 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
LABEL_18:
    *(_DWORD *)a2 = v17;
    v24 = *v16;
    if (*v16)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v16;
    if (*v16)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_66;
    }
    else if (3 * v29 > 4 * v28)
    {
      goto LABEL_66;
    }
    WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v16, (unint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_66;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != (_DWORD)v17)
  {
    if (v21 == 1)
      v22 = a2;
    v20 = (v20 + v23) & v19;
    a2 = (_QWORD *)(v18 + 4 * v20);
    v21 = *(_DWORD *)a2;
    ++v23;
    if (!*(_DWORD *)a2)
    {
      if (v22)
      {
        *v22 = 0;
        --*(_DWORD *)(*v16 - 16);
        a2 = v22;
      }
      goto LABEL_18;
    }
  }
LABEL_66:
  if ((*(_BYTE *)(v13 + 19) & 0xC) != 0)
    goto LABEL_98;
  v53 = v13 + 96;
  v52 = *(_QWORD *)(v13 + 96);
  if ((v52 & 1) != 0)
  {
    if (((v52 >> 1) & 3) != 2)
      goto LABEL_69;
LABEL_98:
    if ((*(_QWORD *)a1 & 1) != 0)
      WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_QWORD *)a1 = 4;
    *(_DWORD *)(a1 + 16) = -21020677;
    goto LABEL_28;
  }
  if (*(_BYTE *)(v52 + 4) == 2)
    goto LABEL_98;
LABEL_69:
  v54 = v12[3];
  v57 = *(_QWORD *)(v54 + 152);
  v56 = (uint64_t *)(v54 + 152);
  v55 = v57;
  if (v57
    || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v56, 8uLL, 0, a4, a5, a6, a7, a8), (v55 = *v56) != 0))
  {
    v58 = *(_DWORD *)(v55 - 8);
  }
  else
  {
    v58 = 0;
  }
  v59 = (~(v53 << 32) + v53) ^ ((~(v53 << 32) + v53) >> 22);
  v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
  v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
  v62 = v58 & ((v61 >> 31) ^ v61);
  v63 = (unint64_t *)(v55 + 8 * v62);
  v64 = *v63;
  if (*v63)
  {
    v65 = 0;
    v66 = 1;
    while (v64 != v53)
    {
      if (v64 == -1)
        v65 = v63;
      v62 = (v62 + v66) & v58;
      v63 = (unint64_t *)(v55 + 8 * v62);
      v64 = *v63;
      ++v66;
      if (!*v63)
      {
        if (v65)
        {
          *v65 = 0;
          --*(_DWORD *)(*v56 - 16);
          v63 = v65;
        }
        goto LABEL_79;
      }
    }
    goto LABEL_85;
  }
LABEL_79:
  *v63 = v53;
  v67 = *v56;
  if (*v56)
    v68 = *(_DWORD *)(v67 - 12) + 1;
  else
    v68 = 1;
  *(_DWORD *)(v67 - 12) = v68;
  v69 = *v56;
  if (*v56)
    v70 = *(_DWORD *)(v69 - 12);
  else
    v70 = 0;
  v71 = (*(_DWORD *)(v69 - 16) + v70);
  v72 = *(unsigned int *)(v69 - 4);
  if (v72 <= 0x400)
  {
    if (3 * v72 > 4 * v71)
      goto LABEL_85;
    if (!(_DWORD)v72)
    {
      v80 = 8;
LABEL_118:
      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v56, v80, (uint64_t)v63, a4, a5, a6, a7, a8);
      goto LABEL_85;
    }
LABEL_131:
    v80 = ((_DWORD)v72 << (6 * *(_DWORD *)(v69 - 12) >= (2 * v72)));
    goto LABEL_118;
  }
  if (v72 <= 2 * v71)
    goto LABEL_131;
LABEL_85:
  v89 = v13;
  if (&v89 == (unint64_t *)a1)
  {
    v73 = v13;
  }
  else
  {
    v73 = v13;
    if ((*(_QWORD *)a1 & 1) != 0)
    {
      WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)v63, a4, a5, a6, a7, a8);
      v73 = v89;
    }
    if ((v73 & 1) == 0 || v73 == 4)
    {
      if ((*(_BYTE *)a1 & 2) != 0)
        v74 = v73 | 2;
      else
        v74 = v73 & 0xFFFFFFFFFFFFFFFDLL;
      *(_QWORD *)a1 = v74;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, &v89);
      v73 = v89;
    }
  }
  if ((v73 & 1) != 0)
    WTF::fastFree(v73 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)v63, a4, a5, a6, a7, a8);
  v75 = *(_QWORD *)a1;
  v76 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFDLL;
  *(_QWORD *)a1 = v76;
  if (v11 == 1)
  {
    *(_DWORD *)(a1 + 16) = -21020677;
    if (v76 != 4)
    {
      *(_QWORD *)a1 = v75 | 2;
      v82 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v75 & 1) != 0)
      {
        v85 = 2 * *v82;
        while (v85 * 4)
        {
          v86 = *(_QWORD *)&v82[v85];
          if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
          {
            v87 = *(_QWORD *)(v86 + 96);
            v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
            v85 -= 2;
            if (v88 != 2)
              continue;
          }
          WTF::fastFree((unint64_t)v82, a2, (uint64_t)v63, a4, a5, a6, a7, a8);
          goto LABEL_153;
        }
      }
      else if (v82)
      {
        if ((*((_BYTE *)v82 + 19) & 0xC) != 0
          || ((v83 = *((_QWORD *)v82 + 12), (v83 & 1) != 0)
            ? (v84 = (v83 >> 1) & 3)
            : (v84 = *(unsigned __int8 *)(v83 + 4)),
              v84 == 2))
        {
LABEL_153:
          *(_QWORD *)a1 = 4;
        }
      }
    }
  }
  else
  {
    v77 = *(unsigned __int8 *)(v13 + 9);
    if ((v77 - 39) <= 0xA)
      *(_DWORD *)(a1 + 16) = JSC::typedArrayModes[v77 - 39];
    else
      *(_DWORD *)(a1 + 16) = 1 << *(_BYTE *)(v13 + 8);
  }
LABEL_28:
  v30 = *v8;
  if (!*v8)
  {
    v35 = 0x40000000000;
    goto LABEL_42;
  }
  if (v30 >= 0xFFFE000000000000)
  {
    v35 = 0x200000000;
    if ((v30 & 0xFFFFFFFE) == 0)
      v35 = 0x100000000;
    goto LABEL_42;
  }
  if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v79 = (uint64_t)COERCE_DOUBLE(v30 - 0x2000000000000);
    if ((double)v79 != COERCE_DOUBLE(v30 - 0x2000000000000))
    {
LABEL_109:
      v35 = 0x2000000000;
      goto LABEL_42;
    }
    if (v79)
    {
      if ((unint64_t)(v79 + 0x8000000000000) >> 52)
        goto LABEL_109;
    }
    else if ((uint64_t)v30 < 0x2000000000000)
    {
      goto LABEL_109;
    }
    v35 = 0x1000000000;
    goto LABEL_42;
  }
  if ((v30 & 0xFFFE000000000002) != 0)
  {
    v35 = 0x20000000000;
    if ((v30 & 0xFFFFFFFFFFFFFFFELL) == 6)
      v35 = 0x10000000000;
  }
  else
  {
    v31 = v30 >> 36;
    v33 = (v30 & 0xFFFFFFFFFLL) != 0 && v31 == 0;
    if (qword_1ECF4C080 > v30 || !v33)
    {
      if (qword_1ECF4C080 > v30)
        goto LABEL_169;
      v35 = 0;
      if (v31 || (v30 & 0xFFFFFFFFFLL) == 0)
        goto LABEL_42;
    }
    v34 = *(unsigned __int8 *)(v30 + 5);
    if (v34 != 2)
    {
      v35 = JSC::speculatedTypeMapping[v34];
      goto LABEL_42;
    }
    v78 = *(_QWORD *)(v30 + 8);
    v35 = 805306368;
    if (v78 && (v78 & 1) == 0)
    {
      if (v78 >= qword_1ECF4C080)
      {
        v35 = 0;
        if (!(v78 >> 36) && (v78 & 0xFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)(v78 + 16) & 0x10) != 0)
            v35 = 0x10000000;
          else
            v35 = 805306368;
        }
        goto LABEL_42;
      }
LABEL_169:
      v35 = 0;
    }
  }
LABEL_42:
  *(_QWORD *)(a1 + 8) = v35;
  *(_QWORD *)(a1 + 24) = *v8;
}

void JSC::DFG::AbstractValue::set(JSC::DFG::AbstractValue *this, JSC::DFG::Graph *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v9 = JSC::DFG::Graph::registerStructure((uint64_t)a2, (unint64_t)a3, &v16, a4, a5, a6, a7, a8);
  JSC::DFG::AbstractValue::set((uint64_t)this, v10, v9, v11, v12, v13, v14, v15);
}

void JSC::DFG::AbstractValue::set(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  if (a3)
  {
    v14 = a3;
    v10 = a3;
    if (&v14 != (uint64_t *)a1)
    {
      v10 = a3;
      if ((*(_QWORD *)a1 & 1) != 0)
      {
        WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v10 = v14;
      }
      if ((v10 & 1) == 0 || v10 == 4)
      {
        if ((*(_BYTE *)a1 & 2) != 0)
          v11 = v10 | 2;
        else
          v11 = v10 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)a1 = v11;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, &v14);
        v10 = v14;
      }
    }
    if ((v10 & 1) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)a1 &= ~2uLL;
    v12 = *(unsigned __int8 *)(a3 + 9);
    if ((v12 - 39) <= 0xA)
      v13 = JSC::typedArrayModes[v12 - 39];
    else
      v13 = 1 << *(_BYTE *)(a3 + 8);
    *(_DWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 8) = JSC::speculatedTypeMapping[*(unsigned __int8 *)(a3 + 9)];
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::AbstractValue::set(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v10 = *(_QWORD *)a1;
  if ((uint64_t *)a1 != a3)
  {
    if ((v10 & 1) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *a3;
    if ((*a3 & 1) == 0 || v11 == 4)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
      v10 = v11 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v10 = v12;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a3);
      v10 = *(_QWORD *)a1;
    }
  }
  *(_QWORD *)a1 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  v13 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a3 & 1) == 0)
  {
    if (v13)
    {
      v14 = *((unsigned __int8 *)v13 + 9);
      if ((v14 - 39) < 0xB)
        v15 = JSC::typedArrayModes[v14 - 39];
      else
        v15 = 1 << *((_BYTE *)v13 + 8);
      *(_DWORD *)(a1 + 16) = v15;
      v16 = JSC::speculatedTypeMapping[*((unsigned __int8 *)v13 + 9)];
      goto LABEL_23;
    }
LABEL_22:
    v16 = 0;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_23;
  }
  v17 = *v13;
  if (!(_DWORD)v17)
    goto LABEL_22;
  v18 = 0;
  v19 = 0;
  v20 = (uint64_t *)(v13 + 2);
  LODWORD(v21) = v17;
  do
  {
    v22 = v20[v19];
    v23 = *(unsigned __int8 *)(v22 + 9);
    if ((v23 - 39) <= 0xA)
      v24 = JSC::typedArrayModes[v23 - 39];
    else
      v24 = 1 << *(_BYTE *)(v22 + 8);
    v25 = v24 | v18;
    if (v25 == v18)
      v21 = v21;
    else
      v21 = v17;
    ++v19;
    v18 = v25;
  }
  while (v19 < v21);
  v16 = 0;
  *(_DWORD *)(a1 + 16) = v25;
  do
  {
    v26 = *v20++;
    v16 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(v26 + 9)];
    --v17;
  }
  while (v17);
LABEL_23:
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = 0;
}

void JSC::DFG::AbstractValue::setType(JSC::DFG::AbstractValue *this, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((a3 & 0x2800FFFFFFF7) != 0)
  {
    if ((a3 & 0x2800CFFFFFF7) != 0)
    {
      if ((a3 & 0x2800FFFFFFF7) != 0x40000000)
      {
        if ((*(_QWORD *)this & 1) != 0)
          WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v10 = -21020677;
        v11 = 4;
        goto LABEL_7;
      }
      v14 = *((_QWORD *)a2 + 126);
      JSC::DFG::RegisteredStructureSet::operator=((uint64_t *)this, &v14, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v12 = *((_QWORD *)a2 + 125);
      v14 = v12;
      if (&v14 == (uint64_t *)this)
      {
LABEL_19:
        if ((v12 & 1) != 0)
          WTF::fastFree(v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v11 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFDLL;
        v10 = -21020677;
        goto LABEL_7;
      }
      if ((*(_QWORD *)this & 1) != 0)
      {
        WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v12 = v14;
      }
      if ((v12 & 1) == 0 || v12 == 4)
      {
        if ((*(_BYTE *)this & 2) != 0)
          v13 = v12 | 2;
        else
          v13 = v12 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)this = v13;
        goto LABEL_19;
      }
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)this, &v14);
    }
    v12 = v14;
    goto LABEL_19;
  }
  if ((*(_QWORD *)this & 1) != 0)
    WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  v11 = 0;
  v10 = 0;
LABEL_7:
  *((_DWORD *)this + 4) = v10;
  *(_QWORD *)this = v11;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
}

unint64_t JSC::DFG::AbstractValue::fixTypeForRepresentation(unint64_t this, JSC::DFG::Graph *a2, int a3, JSC::DFG::Node *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  const char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = this;
  if (a3 != 3)
  {
    if (a3 != 5)
    {
      v5 = *(_QWORD *)(this + 8);
      v6 = v5 & 0x400000000;
      if ((v5 & 0x400000000) != 0)
        v5 = v5 & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
      v7 = v5 & 0x800000000;
      if ((v5 & 0x800000000) != 0)
        v5 = v5 & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
      if (v7 | v6)
        *(_QWORD *)(this + 8) = v5;
      if ((v5 & 0xFFFFC08C00000008) != 0)
      {
        WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for value node has type outside SpecBytecodeTop.\n", &v45);
        if (v45)
          v27 = (const char *)(v45 + 16);
        else
          v27 = 0;
        JSC::DFG::Graph::logAssertionFailure(a2, a4, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0xAC, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v27);
        WTF::CString::~CString((WTF::CString *)&v45, v28, v29, v30, v31, v32, v33, v34);
        __break(0xC471u);
        JUMPOUT(0x1982D1724);
      }
      return this;
    }
    v20 = *(_QWORD *)(this + 8);
    v21 = v20 & 0x1000000000;
    if ((v20 & 0x1000000000) != 0)
      v20 = v20 & 0xFFFFFFE3FFFFFFFFLL | 0xC00000000;
    v22 = v20 & 0x300000000;
    if ((v20 & 0x300000000) != 0)
      v20 = v20 & 0xFFFFFFF8FFFFFFFFLL | 0x400000000;
    if (v22 | v21)
      *(_QWORD *)(this + 8) = v20;
    if ((v20 & 0xFFFFFFF3FFFFFFFFLL) == 0)
    {
      this = *(_QWORD *)(this + 24);
      if (!this)
        return this;
      if (this <= 0xFFFDFFFFFFFFFFFFLL)
      {
        if (!(this >> 49)
          || (*(_QWORD *)&v23 = this - 0x2000000000000,
              (double)(uint64_t)COERCE_DOUBLE(this - 0x2000000000000) != COERCE_DOUBLE(this - 0x2000000000000)))
        {
LABEL_33:
          JSC::DFG::Graph::logAssertionFailure(a2, a4, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x9F, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", "m_value.isAnyInt()");
          __break(0xC471u);
          JUMPOUT(0x1982D1628);
        }
        if ((uint64_t)v23)
        {
          if ((unint64_t)((uint64_t)v23 + 0x8000000000000) >> 52)
            goto LABEL_33;
        }
        else if ((uint64_t)this < 0x2000000000000)
        {
          goto LABEL_33;
        }
      }
      v24 = v4;
      this = JSC::int52AwareSpeculationFromValue(this);
      *(_QWORD *)(v24 + 8) = this;
      return this;
    }
    WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for int52 node has type outside SpecInt52Any.\n", &v45);
    if (v45)
      v37 = (const char *)(v45 + 16);
    else
      v37 = 0;
    JSC::DFG::Graph::logAssertionFailure(a2, a4, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x9C, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v37);
    WTF::CString::~CString((WTF::CString *)&v45, v38, v39, v40, v41, v42, v43, v44);
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x1982D1540);
  }
  v8 = *(_QWORD *)(this + 24);
  if (v8)
  {
    if (!(v8 >> 49))
    {
      JSC::DFG::Graph::logAssertionFailure(a2, a4, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x85, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", "m_value.isNumber()");
      __break(0xC471u);
      JUMPOUT(0x1982D16A8);
    }
    if (v8 >= 0xFFFE000000000000)
      *(_QWORD *)(this + 24) = COERCE__INT64((double)(int)v8) + 0x2000000000000;
  }
  v9 = *(_QWORD *)(this + 8);
  if ((v9 & 0x1F00000000) != 0)
  {
    v9 = v9 & 0xFFFFFFE0FFFFFFFFLL | 0x1000000000;
    *(_QWORD *)(this + 8) = v9;
  }
  if ((v9 & 0xFFFFFF0FFFFFFFFFLL) != 0)
  {
    WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for double node has type outside SpecFullDouble.\n", &v45);
    if (v45)
      v12 = (const char *)(v45 + 16);
    else
      v12 = 0;
    JSC::DFG::Graph::logAssertionFailure(a2, a4, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x8E, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v12);
    WTF::CString::~CString((WTF::CString *)&v45, v13, v14, v15, v16, v17, v18, v19);
    __break(0xC471u);
    goto LABEL_48;
  }
  return this;
}

void WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>(const char *a1@<X0>, JSC::DFG::AbstractValue *a2@<X1>, const char *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  _BYTE *v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = off_1E3572250;
  v20 = v22;
  v21 = xmmword_199122F80;
  v22[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v19, "%s", a1);
  JSC::DFG::AbstractValue::dumpInContext(a2, (WTF::PrintStream *)&v19, 0);
  WTF::PrintStream::printf((WTF::PrintStream *)&v19, "%s", a3);
  v19[5]((WTF::StringPrintStream *)&v19);
  v15 = v20;
  v14 = v21;
  *a4 = 0;
  if (!v15)
  {
    v18 = 0;
LABEL_6:
    WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
    return;
  }
  if (v14 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1982D18DCLL);
  }
  v16 = WTF::fastMalloc((WTF *)(v14 + 17));
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v14;
  *a4 = v16;
  v17 = v16 + 16;
  memcpy((void *)(v16 + 16), v15, v14);
  *(_BYTE *)(v17 + v14) = 0;
  v18 = (unint64_t)v20;
  if (v20 != v22)
    goto LABEL_6;
}

unint64_t JSC::DFG::AbstractValue::fixTypeForRepresentation(unint64_t this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  const char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = this;
  if ((*((_DWORD *)a3 + 14) & 7) != 3)
  {
    if ((*((_DWORD *)a3 + 14) & 7) != 5)
    {
      v4 = *(_QWORD *)(this + 8);
      v5 = v4 & 0x400000000;
      if ((v4 & 0x400000000) != 0)
        v4 = v4 & 0xFFFFFFF8FFFFFFFFLL | 0x300000000;
      v6 = v4 & 0x800000000;
      if ((v4 & 0x800000000) != 0)
        v4 = v4 & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
      if (v6 | v5)
        *(_QWORD *)(this + 8) = v4;
      if ((v4 & 0xFFFFC08C00000008) != 0)
      {
        WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for value node has type outside SpecBytecodeTop.\n", &v44);
        if (v44)
          v26 = (const char *)(v44 + 16);
        else
          v26 = 0;
        JSC::DFG::Graph::logAssertionFailure(a2, a3, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0xAC, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v26);
        WTF::CString::~CString((WTF::CString *)&v44, v27, v28, v29, v30, v31, v32, v33);
        __break(0xC471u);
        JUMPOUT(0x1982D1C04);
      }
      return this;
    }
    v19 = *(_QWORD *)(this + 8);
    v20 = v19 & 0x1000000000;
    if ((v19 & 0x1000000000) != 0)
      v19 = v19 & 0xFFFFFFE3FFFFFFFFLL | 0xC00000000;
    v21 = v19 & 0x300000000;
    if ((v19 & 0x300000000) != 0)
      v19 = v19 & 0xFFFFFFF8FFFFFFFFLL | 0x400000000;
    if (v21 | v20)
      *(_QWORD *)(this + 8) = v19;
    if ((v19 & 0xFFFFFFF3FFFFFFFFLL) == 0)
    {
      this = *(_QWORD *)(this + 24);
      if (!this)
        return this;
      if (this <= 0xFFFDFFFFFFFFFFFFLL)
      {
        if (!(this >> 49)
          || (*(_QWORD *)&v22 = this - 0x2000000000000,
              (double)(uint64_t)COERCE_DOUBLE(this - 0x2000000000000) != COERCE_DOUBLE(this - 0x2000000000000)))
        {
LABEL_33:
          JSC::DFG::Graph::logAssertionFailure(a2, a3, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x9F, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", "m_value.isAnyInt()");
          __break(0xC471u);
          JUMPOUT(0x1982D1B04);
        }
        if ((uint64_t)v22)
        {
          if ((unint64_t)((uint64_t)v22 + 0x8000000000000) >> 52)
            goto LABEL_33;
        }
        else if ((uint64_t)this < 0x2000000000000)
        {
          goto LABEL_33;
        }
      }
      v23 = v3;
      this = JSC::int52AwareSpeculationFromValue(this);
      *(_QWORD *)(v23 + 8) = this;
      return this;
    }
    WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for int52 node has type outside SpecInt52Any.\n", &v44);
    if (v44)
      v36 = (const char *)(v44 + 16);
    else
      v36 = 0;
    JSC::DFG::Graph::logAssertionFailure(a2, a3, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x9C, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v36);
    WTF::CString::~CString((WTF::CString *)&v44, v37, v38, v39, v40, v41, v42, v43);
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x1982D1A1CLL);
  }
  v7 = *(_QWORD *)(this + 24);
  if (v7)
  {
    if (!(v7 >> 49))
    {
      JSC::DFG::Graph::logAssertionFailure(a2, a3, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x85, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", "m_value.isNumber()");
      __break(0xC471u);
      JUMPOUT(0x1982D1B84);
    }
    if (v7 >= 0xFFFE000000000000)
      *(_QWORD *)(this + 24) = COERCE__INT64((double)(int)v7) + 0x2000000000000;
  }
  v8 = *(_QWORD *)(this + 8);
  if ((v8 & 0x1F00000000) != 0)
  {
    v8 = v8 & 0xFFFFFFE0FFFFFFFFLL | 0x1000000000;
    *(_QWORD *)(this + 8) = v8;
  }
  if ((v8 & 0xFFFFFF0FFFFFFFFFLL) != 0)
  {
    WTF::toCString<char [16],JSC::DFG::AbstractValue,char [51]>("Abstract value ", (JSC::DFG::AbstractValue *)this, " for double node has type outside SpecFullDouble.\n", &v44);
    if (v44)
      v11 = (const char *)(v44 + 16);
    else
      v11 = 0;
    JSC::DFG::Graph::logAssertionFailure(a2, a3, (const WTF::CString *)"./dfg/DFGAbstractValue.cpp", (const char *)0x8E, "void JSC::DFG::AbstractValue::fixTypeForRepresentation(Graph &, NodeFlags, Node *)", v11);
    WTF::CString::~CString((WTF::CString *)&v44, v12, v13, v14, v15, v16, v17, v18);
    __break(0xC471u);
    goto LABEL_48;
  }
  return this;
}

BOOL JSC::DFG::AbstractValue::mergeOSREntryValue(unint64_t a1, JSC::DFG::Graph *a2, unint64_t a3, uint64_t a4, JSC::DFG::Node *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v12;
  int v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  _BOOL8 v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double v78;
  unint64_t v79;
  BOOL v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v108;
  __int128 *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v152;

  v9 = a3;
  if (a3 >> 49)
  {
    if (*(_BYTE *)(a4 + 40) || !*(_BYTE *)(a4 + 43))
      goto LABEL_4;
    if (*(_DWORD *)(a4 + 56) != 1)
    {
      v56 = (_QWORD *)a4;
      do
      {
        v57 = v56;
        v56 = (_QWORD *)*v56;
      }
      while (v56);
      if (v57 != (_QWORD *)a4)
        *(_QWORD *)a4 = v57;
      v58 = v57[2];
      if (!v58)
        goto LABEL_4;
      if ((v58 & 0xFFFFFFFCFFFFFFFFLL) != 0)
      {
        if (!*(_DWORD *)(a4 + 28))
          goto LABEL_81;
        v59 = (_QWORD *)a4;
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
        if (v60 != (_QWORD *)a4)
          *(_QWORD *)a4 = v60;
        v61 = v60[2];
        if (!v61 || (v61 & 0xFFFFFFF0FFFFFFFFLL) != 0)
        {
LABEL_81:
          if ((v58 & 0x2800FFFFFFF7) != 0 && (v58 & 0xFFFFD7FF00000008) == 0)
          {
            v13 = 4;
            v12 = 1;
LABEL_5:
            if (a3 < 0xFFFE000000000000)
            {
              *(_QWORD *)&v14 = a3 - 0x2000000000000;
              if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                if ((a3 & 0xFFFE000000000002) == 0)
                {
                  v15 = qword_1ECF4C080;
                  v16 = a3 >> 36;
                  if (qword_1ECF4C080 <= a3 && v16 == 0 && (a3 & 0xFFFFFFFFFLL) != 0)
                    goto LABEL_15;
                  if (qword_1ECF4C080 <= a3)
                  {
                    v20 = 0;
                    if (v16)
                      goto LABEL_17;
                    goto LABEL_166;
                  }
LABEL_388:
                  v20 = 0;
                  goto LABEL_17;
                }
                goto LABEL_172;
              }
LABEL_173:
              v86 = v14;
              v87 = (uint64_t)v14;
              if ((double)(uint64_t)v86 != v86)
              {
LABEL_174:
                v20 = 0x2000000000;
                goto LABEL_17;
              }
              if (v87)
              {
                if ((unint64_t)(v87 + 0x8000000000000) >> 52)
                  goto LABEL_174;
              }
              else if ((uint64_t)a3 < 0x2000000000000)
              {
                goto LABEL_174;
              }
              v20 = 0x1000000000;
              goto LABEL_17;
            }
LABEL_168:
            v83 = (a3 & 0xFFFFFFFE) == 0;
            v84 = 0x200000000;
            v85 = 0x100000000;
            goto LABEL_169;
          }
          if (v58 != 0x10000000000)
          {
LABEL_4:
            v12 = 0;
            v13 = 6;
            goto LABEL_5;
          }
          if (a3 < 0xFFFE000000000000)
          {
            *(_QWORD *)&v72 = a3 - 0x2000000000000;
            if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((a3 & 0xFFFE000000000002) == 0)
              {
                v73 = qword_1ECF4C080;
                if (qword_1ECF4C080 <= a3 && !(a3 >> 36) && (a3 & 0xFFFFFFFFFLL) != 0)
                {
                  v74 = *(unsigned __int8 *)(a3 + 5);
                  if (v74 != 2)
                  {
                    v20 = JSC::speculatedTypeMapping[v74];
LABEL_118:
                    v22 = 0xFFFFFEFFFFFFFFFFLL;
LABEL_119:
                    v21 = 5;
                    goto LABEL_22;
                  }
                  v88 = *(_QWORD *)(a3 + 8);
                  v22 = 0xFFFFFEFFFFFFFFFFLL;
                  v21 = 5;
LABEL_186:
                  v20 = 805306368;
                  if (!v88 || (v88 & 1) != 0)
                    goto LABEL_22;
                  if (v88 < v73)
                  {
                    v20 = 0;
                    goto LABEL_193;
                  }
                  v20 = 0;
                  if (v88 >> 36 || (v88 & 0xFFFFFFFFFLL) == 0)
                    goto LABEL_193;
                  if ((*(_BYTE *)(v88 + 16) & 0x10) != 0)
                  {
                    v20 = 0x10000000;
LABEL_193:
                    v22 = 0xFFFFFEFFFFFFFFFFLL;
                    goto LABEL_22;
                  }
                  v22 = 0xFFFFFEFFFFFFFFFFLL;
LABEL_224:
                  v20 = 805306368;
                  goto LABEL_22;
                }
LABEL_295:
                if (v73 > a3)
                {
                  v20 = 0;
                  goto LABEL_118;
                }
                v20 = 0;
                v22 = 0xFFFFFEFFFFFFFFFFLL;
                v21 = 5;
                if (a3 >> 36 || (a3 & 0xFFFFFFFFFLL) == 0)
                  goto LABEL_22;
                v135 = *(unsigned __int8 *)(a3 + 5);
                if (v135 != 2)
                {
                  v20 = JSC::speculatedTypeMapping[v135];
                  goto LABEL_193;
                }
                v88 = *(_QWORD *)(a3 + 8);
                v22 = 0xFFFFFEFFFFFFFFFFLL;
                goto LABEL_186;
              }
LABEL_304:
              v136 = (a3 & 0xFFFFFFFFFFFFFFFELL) == 6;
              v137 = 0x20000000000;
              v138 = 0x10000000000;
LABEL_301:
              if (v136)
                v20 = v138;
              else
                v20 = v137;
              goto LABEL_118;
            }
            goto LABEL_305;
          }
          goto LABEL_300;
        }
LABEL_395:
        v20 = JSC::int52AwareSpeculationFromValue(a3);
        v22 = 0xFFFFFFF3FFFFFFFFLL;
        v21 = 2;
        goto LABEL_22;
      }
      if (a3 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v63 = a3 - 0x2000000000000;
        if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((a3 & 0xFFFE000000000002) == 0)
          {
            v64 = qword_1ECF4C080;
            v65 = a3 >> 36;
            if (qword_1ECF4C080 <= a3 && v65 == 0 && (a3 & 0xFFFFFFFFFLL) != 0)
            {
              v68 = *(unsigned __int8 *)(a3 + 5);
              if (v68 != 2)
              {
                v20 = JSC::speculatedTypeMapping[v68];
LABEL_95:
                v22 = 0xFFFFFFFCFFFFFFFFLL;
LABEL_96:
                v21 = 1;
                goto LABEL_22;
              }
              v77 = *(_QWORD *)(a3 + 8);
              v22 = 0xFFFFFFFCFFFFFFFFLL;
              v21 = 1;
              goto LABEL_131;
            }
            if (qword_1ECF4C080 <= a3)
            {
              v20 = 0;
              v22 = 0xFFFFFFFCFFFFFFFFLL;
              v21 = 1;
              if (v65)
                goto LABEL_22;
              goto LABEL_231;
            }
            goto LABEL_400;
          }
LABEL_238:
          v100 = (a3 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v101 = 0x20000000000;
          v102 = 0x10000000000;
LABEL_235:
          if (v100)
            v20 = v102;
          else
            v20 = v101;
          goto LABEL_95;
        }
        goto LABEL_239;
      }
      goto LABEL_234;
    }
    *(_QWORD *)&v78 = a3 - 0x2000000000000;
    if (a3 > 0xFFFDFFFFFFFFFFFFLL)
      v78 = (double)(int)a3;
    v9 = *(_QWORD *)&v78 + 0x2000000000000;
    if (v78 != NAN)
    {
      if (v9 < 0xFFFE000000000000)
      {
        if (*(_QWORD *)&v78 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v9 & 0xFFFE000000000002) == 0)
          {
            v79 = v9 >> 36;
            v81 = (*(_QWORD *)&v78 & 0xFFFFFFFFFLL) != 0 && v79 == 0;
            if (qword_1ECF4C080 <= v9 && v81)
            {
              v82 = *(unsigned __int8 *)(*(_QWORD *)&v78 + 0x2000000000005);
              if (v82 != 2)
              {
                v20 = JSC::speculatedTypeMapping[v82];
LABEL_155:
                v22 = 0xFFFFFF0FFFFFFFFFLL;
LABEL_156:
                v21 = 3;
                goto LABEL_22;
              }
              v105 = *(_QWORD *)(*(_QWORD *)&v78 + 0x2000000000008);
              if (v105)
                v106 = (*(_QWORD *)(*(_QWORD *)&v78 + 0x2000000000008) & 1) == 0;
              else
                v106 = 0;
              if (!v106)
              {
LABEL_316:
                v22 = 0xFFFFFF0FFFFFFFFFLL;
                v21 = 3;
                goto LABEL_224;
              }
              if (v105 >= qword_1ECF4C080 && !(v105 >> 36) && (v105 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v105 + 16) & 0x10) != 0)
                {
                  v20 = 0x10000000;
                  goto LABEL_155;
                }
                goto LABEL_316;
              }
LABEL_412:
              v20 = 0;
              goto LABEL_155;
            }
            if (qword_1ECF4C080 > v9)
              goto LABEL_412;
            v20 = 0;
            v22 = 0xFFFFFF0FFFFFFFFFLL;
            v21 = 3;
            if (v79 || (*(_QWORD *)&v78 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_22;
            v144 = *(unsigned __int8 *)(*(_QWORD *)&v78 + 0x2000000000005);
            if (v144 == 2)
            {
              v148 = *(_QWORD *)(*(_QWORD *)&v78 + 0x2000000000008);
              v22 = 0xFFFFFF0FFFFFFFFFLL;
              v20 = 805306368;
              if (!v148 || (v148 & 1) != 0)
                goto LABEL_22;
              if (v148 >= qword_1ECF4C080)
              {
                v20 = 0;
                if (v148 >> 36 || (v148 & 0xFFFFFFFFFLL) == 0)
                  goto LABEL_343;
                if ((*(_BYTE *)(v148 + 16) & 0x10) == 0)
                  goto LABEL_411;
                goto LABEL_373;
              }
              goto LABEL_419;
            }
            goto LABEL_342;
          }
LABEL_344:
          v96 = (v9 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v97 = 0x20000000000;
          v98 = 0x10000000000;
LABEL_220:
          if (v96)
            v20 = v98;
          else
            v20 = v97;
          goto LABEL_155;
        }
        v108 = (uint64_t)v78;
        if ((double)(uint64_t)v78 != v78)
          goto LABEL_259;
        if (!v108)
        {
          if ((*(_QWORD *)&v78 & 0x8000000000000000) != 0)
            goto LABEL_259;
          goto LABEL_323;
        }
LABEL_322:
        if ((unint64_t)(v108 + 0x8000000000000) >> 52)
          goto LABEL_259;
LABEL_323:
        v22 = 0xFFFFFF0FFFFFFFFFLL;
        v20 = 0x1000000000;
        goto LABEL_156;
      }
      v96 = (LODWORD(v78) & 0xFFFFFFFE) == 0;
      goto LABEL_219;
    }
    goto LABEL_345;
  }
  if (*(_BYTE *)(a4 + 40))
    goto LABEL_327;
  v12 = *(unsigned __int8 *)(a4 + 43);
  if (!*(_BYTE *)(a4 + 43))
  {
LABEL_159:
    v13 = 6;
    goto LABEL_160;
  }
  if (*(_DWORD *)(a4 + 56) == 1)
  {
    if (a3 >> 49)
    {
      *(_QWORD *)&v143 = a3 - 0x2000000000000;
      if (a3 > 0xFFFDFFFFFFFFFFFFLL)
        v143 = (double)(int)a3;
      v9 = *(_QWORD *)&v143 + 0x2000000000000;
    }
    if (v9)
    {
      if (v9 < 0xFFFE000000000000)
      {
        if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v9 & 0xFFFE000000000002) == 0)
          {
            if (qword_1ECF4C080 > v9)
              goto LABEL_412;
            v20 = 0;
            v22 = 0xFFFFFF0FFFFFFFFFLL;
            v21 = 3;
            if (v9 >> 36 || (v9 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_22;
            v144 = *(unsigned __int8 *)(v9 + 5);
            if (v144 == 2)
            {
              v147 = *(_QWORD *)(v9 + 8);
              v22 = 0xFFFFFF0FFFFFFFFFLL;
              v20 = 805306368;
              if (!v147 || (v147 & 1) != 0)
                goto LABEL_22;
              if (v147 >= qword_1ECF4C080)
              {
                v20 = 0;
                if (v147 >> 36 || (v147 & 0xFFFFFFFFFLL) == 0)
                  goto LABEL_343;
                if ((*(_BYTE *)(v147 + 16) & 0x10) == 0)
                {
LABEL_411:
                  v22 = 0xFFFFFF0FFFFFFFFFLL;
                  goto LABEL_224;
                }
LABEL_373:
                v20 = 0x10000000;
                goto LABEL_343;
              }
LABEL_419:
              v20 = 0;
              goto LABEL_343;
            }
LABEL_342:
            v20 = JSC::speculatedTypeMapping[v144];
LABEL_343:
            v22 = 0xFFFFFF0FFFFFFFFFLL;
            goto LABEL_22;
          }
          goto LABEL_344;
        }
        v108 = (uint64_t)COERCE_DOUBLE(v9 - 0x2000000000000);
        if ((double)v108 != COERCE_DOUBLE(v9 - 0x2000000000000))
        {
LABEL_259:
          v22 = 0xFFFFFF0FFFFFFFFFLL;
          v20 = 0x2000000000;
          goto LABEL_156;
        }
        if (!v108)
        {
          if ((uint64_t)v9 < 0x2000000000000)
            goto LABEL_259;
          goto LABEL_323;
        }
        goto LABEL_322;
      }
      v96 = (v9 & 0xFFFFFFFE) == 0;
LABEL_219:
      v97 = 0x200000000;
      v98 = 0x100000000;
      goto LABEL_220;
    }
LABEL_345:
    v22 = 0xFFFFFF0FFFFFFFFFLL;
    v20 = 0x40000000000;
    goto LABEL_156;
  }
  v89 = (_QWORD *)a4;
  do
  {
    v90 = v89;
    v89 = (_QWORD *)*v89;
  }
  while (v89);
  if (v90 != (_QWORD *)a4)
    *(_QWORD *)a4 = v90;
  v91 = v90[2];
  if (!v91)
  {
LABEL_327:
    v12 = 0;
    goto LABEL_159;
  }
  if ((v91 & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    if (!a3)
    {
      v22 = 0xFFFFFFFCFFFFFFFFLL;
      v20 = 0x40000000000;
      goto LABEL_96;
    }
    if (a3 < 0xFFFE000000000000)
    {
      *(_QWORD *)&v63 = a3 - 0x2000000000000;
      if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((a3 & 0xFFFE000000000002) == 0)
        {
          v64 = qword_1ECF4C080;
          if (qword_1ECF4C080 <= a3)
          {
            v20 = 0;
            v22 = 0xFFFFFFFCFFFFFFFFLL;
            v21 = 1;
            if (a3 >> 36)
              goto LABEL_22;
LABEL_231:
            if ((a3 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_22;
            v99 = *(unsigned __int8 *)(a3 + 5);
            if (v99 != 2)
            {
              v20 = JSC::speculatedTypeMapping[v99];
              goto LABEL_138;
            }
            v77 = *(_QWORD *)(a3 + 8);
            v22 = 0xFFFFFFFCFFFFFFFFLL;
LABEL_131:
            v20 = 805306368;
            if (!v77 || (v77 & 1) != 0)
              goto LABEL_22;
            if (v77 < v64)
            {
              v20 = 0;
            }
            else
            {
              v20 = 0;
              if (!(v77 >> 36) && (v77 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v77 + 16) & 0x10) == 0)
                {
                  v22 = 0xFFFFFFFCFFFFFFFFLL;
                  goto LABEL_224;
                }
                v20 = 0x10000000;
              }
            }
LABEL_138:
            v22 = 0xFFFFFFFCFFFFFFFFLL;
            goto LABEL_22;
          }
LABEL_400:
          v20 = 0;
          goto LABEL_95;
        }
        goto LABEL_238;
      }
LABEL_239:
      v103 = v63;
      v104 = (uint64_t)v63;
      if ((double)(uint64_t)v103 != v103)
      {
LABEL_240:
        v22 = 0xFFFFFFFCFFFFFFFFLL;
        v20 = 0x2000000000;
        goto LABEL_96;
      }
      if (v104)
      {
        if ((unint64_t)(v104 + 0x8000000000000) >> 52)
          goto LABEL_240;
      }
      else if ((uint64_t)a3 < 0x2000000000000)
      {
        goto LABEL_240;
      }
      v22 = 0xFFFFFFFCFFFFFFFFLL;
      v20 = 0x1000000000;
      goto LABEL_96;
    }
LABEL_234:
    v100 = (a3 & 0xFFFFFFFE) == 0;
    v101 = 0x200000000;
    v102 = 0x100000000;
    goto LABEL_235;
  }
  if (*(_DWORD *)(a4 + 28))
  {
    v92 = (_QWORD *)a4;
    do
    {
      v93 = v92;
      v92 = (_QWORD *)*v92;
    }
    while (v92);
    if (v93 != (_QWORD *)a4)
      *(_QWORD *)a4 = v93;
    v94 = v93[2];
    if (v94 && (v94 & 0xFFFFFFF0FFFFFFFFLL) == 0)
      goto LABEL_395;
  }
  if ((v91 & 0x2800FFFFFFF7) == 0 || (v91 & 0xFFFFD7FF00000008) != 0)
  {
    if (v91 == 0x10000000000)
    {
      if (!a3)
      {
        v22 = 0xFFFFFEFFFFFFFFFFLL;
        v20 = 0x40000000000;
        goto LABEL_119;
      }
      if (a3 < 0xFFFE000000000000)
      {
        *(_QWORD *)&v72 = a3 - 0x2000000000000;
        if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((a3 & 0xFFFE000000000002) == 0)
          {
            v73 = qword_1ECF4C080;
            goto LABEL_295;
          }
          goto LABEL_304;
        }
LABEL_305:
        v139 = v72;
        v140 = (uint64_t)v72;
        if ((double)(uint64_t)v139 != v139)
        {
LABEL_306:
          v22 = 0xFFFFFEFFFFFFFFFFLL;
          v20 = 0x2000000000;
          goto LABEL_119;
        }
        if (v140)
        {
          if ((unint64_t)(v140 + 0x8000000000000) >> 52)
            goto LABEL_306;
        }
        else if ((uint64_t)a3 < 0x2000000000000)
        {
          goto LABEL_306;
        }
        v22 = 0xFFFFFEFFFFFFFFFFLL;
        v20 = 0x1000000000;
        goto LABEL_119;
      }
LABEL_300:
      v136 = (a3 & 0xFFFFFFFE) == 0;
      v137 = 0x200000000;
      v138 = 0x100000000;
      goto LABEL_301;
    }
    goto LABEL_327;
  }
  v13 = 4;
  v12 = 1;
LABEL_160:
  if (!a3)
  {
    v20 = 0x40000000000;
    goto LABEL_17;
  }
  if (a3 >= 0xFFFE000000000000)
    goto LABEL_168;
  *(_QWORD *)&v14 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_173;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
LABEL_172:
    v83 = (a3 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v84 = 0x20000000000;
    v85 = 0x10000000000;
LABEL_169:
    if (v83)
      v20 = v85;
    else
      v20 = v84;
    goto LABEL_17;
  }
  v15 = qword_1ECF4C080;
  if (qword_1ECF4C080 > a3)
    goto LABEL_388;
  v20 = 0;
  if (a3 >> 36)
    goto LABEL_17;
LABEL_166:
  if ((a3 & 0xFFFFFFFFFLL) != 0)
  {
LABEL_15:
    v19 = *(unsigned __int8 *)(a3 + 5);
    if (v19 != 2)
    {
      v20 = JSC::speculatedTypeMapping[v19];
      goto LABEL_17;
    }
    v71 = *(_QWORD *)(a3 + 8);
    v20 = 805306368;
    if (!v71 || (v71 & 1) != 0)
      goto LABEL_17;
    if (v71 >= v15)
    {
      v20 = 0;
      if (!(v71 >> 36) && (v71 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v71 + 16) & 0x10) != 0)
          v20 = 0x10000000;
        else
          v20 = 805306368;
      }
      goto LABEL_17;
    }
    goto LABEL_388;
  }
LABEL_17:
  if (v12)
    v21 = 4;
  else
    v21 = v13;
  v22 = 0xFFFFC08C00000008;
  if (v12)
    v22 = 0xFFFFD3FF00000008;
LABEL_22:
  if ((v22 & v20) != 0)
    return 0;
  v149 = 0;
  v25 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) == 0 || v25 == 4)
  {
    v26 = v25 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v149, (_QWORD *)a1);
    v26 = v149;
    v25 = *(_QWORD *)a1;
  }
  v27 = v26 & 0xFFFFFFFFFFFFFFFDLL;
  v28 = v26 | 2;
  if ((v25 & 2) != 0)
    v29 = v28;
  else
    v29 = v27;
  v149 = v29;
  v30 = (uint64_t *)(a1 + 8);
  v150 = *(_OWORD *)(a1 + 8);
  v151 = *(_QWORD *)(a1 + 24);
  if (!(_QWORD)v150)
  {
    v109 = JSC::DFG::Graph::freeze((uint64_t)a2, v9, a3, a4, (uint64_t)a5, a6, a7, a8);
    if (!*(_QWORD *)v109 || (*(_QWORD *)v109 & 0xFFFE000000000002) != 0)
    {
      if ((*(_QWORD *)a1 & 1) != 0)
        WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, v110, v111, v112, v113, v114, v115, v116);
      v129 = 0;
      *(_QWORD *)a1 = 0;
    }
    else
    {
      v117 = v109;
      v118 = JSC::DFG::Graph::registerStructure((uint64_t)a2, *((_QWORD *)v109 + 1), (int *)&v152, v112, v113, v114, v115, v116);
      v152 = v118;
      if (&v152 != (unint64_t *)a1)
      {
        if ((*(_QWORD *)a1 & 1) != 0)
        {
          WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, v119, v120, v121, v122, v123, v124, v125);
          v118 = v152;
        }
        if ((v118 & 1) == 0 || v118 == 4)
        {
          if ((*(_BYTE *)a1 & 2) != 0)
            v126 = v118 | 2;
          else
            v126 = v118 & 0xFFFFFFFFFFFFFFFDLL;
          *(_QWORD *)a1 = v126;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, &v152);
          v118 = v152;
        }
      }
      if ((v118 & 1) != 0)
        WTF::fastFree(v118 & 0xFFFFFFFFFFFFFFFCLL, v119, v120, v121, v122, v123, v124, v125);
      *(_QWORD *)a1 &= ~2uLL;
      v127 = *((_QWORD *)v117 + 1);
      v128 = *(unsigned __int8 *)(v127 + 9);
      if ((v128 - 39) <= 0xA)
        v129 = JSC::typedArrayModes[v128 - 39];
      else
        v129 = 1 << *(_BYTE *)(v127 + 8);
    }
    *(_DWORD *)(a1 + 16) = v129;
    if (!v9)
    {
      v134 = 0x40000000000;
      goto LABEL_287;
    }
    if (v9 >= 0xFFFE000000000000)
    {
      v141 = (v9 & 0xFFFFFFFE) == 0;
      v134 = 0x200000000;
      v142 = 0x100000000;
      goto LABEL_318;
    }
    if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v9 & 0xFFFE000000000002) == 0)
      {
        v130 = v9 >> 36;
        v132 = (v9 & 0xFFFFFFFFFLL) != 0 && v130 == 0;
        if (qword_1ECF4C080 > v9 || !v132)
        {
          if (qword_1ECF4C080 > v9)
            goto LABEL_418;
          v134 = 0;
          if (v130 || (v9 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_287;
        }
        v133 = *(unsigned __int8 *)(v9 + 5);
        if (v133 != 2)
        {
          v134 = JSC::speculatedTypeMapping[v133];
LABEL_287:
          *(_QWORD *)(a1 + 8) = v134;
          *(_QWORD *)(a1 + 24) = v9;
          goto LABEL_56;
        }
        v145 = *(_QWORD *)(v9 + 8);
        v134 = 805306368;
        if (!v145 || (v145 & 1) != 0)
          goto LABEL_287;
        if (v145 >= qword_1ECF4C080)
        {
          v134 = 0;
          if (!(v145 >> 36) && (v145 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v145 + 16) & 0x10) != 0)
              v134 = 0x10000000;
            else
              v134 = 805306368;
          }
          goto LABEL_287;
        }
LABEL_418:
        v134 = 0;
        goto LABEL_287;
      }
      v141 = (v9 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v134 = 0x20000000000;
      v142 = 0x10000000000;
LABEL_318:
      if (v141)
        v134 = v142;
      goto LABEL_287;
    }
    v146 = (uint64_t)COERCE_DOUBLE(v9 - 0x2000000000000);
    if ((double)v146 != COERCE_DOUBLE(v9 - 0x2000000000000))
    {
LABEL_357:
      v134 = 0x2000000000;
      goto LABEL_287;
    }
    if (v146)
    {
      if ((unint64_t)(v146 + 0x8000000000000) >> 52)
        goto LABEL_357;
    }
    else if ((uint64_t)v9 < 0x2000000000000)
    {
      goto LABEL_357;
    }
    v134 = 0x1000000000;
    goto LABEL_287;
  }
  if (v9)
  {
    if (v9 >= 0xFFFE000000000000)
    {
      v69 = (v9 & 0xFFFFFFFE) == 0;
      v35 = 0x200000000;
      v70 = 0x100000000;
      goto LABEL_98;
    }
    if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v9 & 0xFFFE000000000002) == 0)
      {
        v31 = v9 >> 36;
        v33 = (v9 & 0xFFFFFFFFFLL) != 0 && v31 == 0;
        if (qword_1ECF4C080 <= v9 && v33)
          goto LABEL_43;
        if (qword_1ECF4C080 > v9)
        {
LABEL_393:
          v35 = 0;
          goto LABEL_45;
        }
        v35 = 0;
        if (!v31 && (v9 & 0xFFFFFFFFFLL) != 0)
        {
LABEL_43:
          v34 = *(unsigned __int8 *)(v9 + 5);
          if (v34 != 2)
          {
            v35 = JSC::speculatedTypeMapping[v34];
            goto LABEL_45;
          }
          v75 = *(_QWORD *)(v9 + 8);
          v35 = 805306368;
          if (v75 && (v75 & 1) == 0)
          {
            if (v75 >= qword_1ECF4C080)
            {
              v35 = 0;
              if (!(v75 >> 36) && (v75 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v75 + 16) & 0x10) != 0)
                  v35 = 0x10000000;
                else
                  v35 = 805306368;
              }
              goto LABEL_45;
            }
            goto LABEL_393;
          }
        }
LABEL_45:
        *v30 = v35 | v150;
        if ((v9 & 0xFFFE000000000002) == 0)
        {
          v36 = JSC::DFG::Graph::registerStructure((uint64_t)a2, 16 * (*(_DWORD *)v9 & 0xFFFFFFFE), (int *)&v152, a4, (uint64_t)a5, a6, a7, a8);
          v44 = *(unsigned __int8 *)(v36 + 9);
          if ((v44 - 39) <= 0xA)
            v45 = JSC::typedArrayModes[v44 - 39];
          else
            v45 = 1 << *(_BYTE *)(v36 + 8);
          v46 = *(_DWORD *)(a1 + 16);
          v47 = v46 | v45;
          if (v47 != v46)
            *(_DWORD *)(a1 + 16) = v47;
          v152 = v36;
          if (*(_QWORD *)a1 != 4)
          {
            JSC::DFG::StructureAbstractValue::mergeNotTop((JSC::DFG::StructureAbstractValue *)a1, (const JSC::DFG::RegisteredStructureSet *)&v152, v38, v39, v40, v41, v42, v43);
            v36 = v152;
          }
          if ((v36 & 1) != 0)
            WTF::fastFree(v36 & 0xFFFFFFFFFFFFFFFCLL, v37, v38, v39, v40, v41, v42, v43);
        }
        goto LABEL_54;
      }
      v69 = (v9 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v35 = 0x20000000000;
      v70 = 0x10000000000;
LABEL_98:
      if (v69)
        v35 = v70;
      goto LABEL_45;
    }
    v76 = (uint64_t)COERCE_DOUBLE(v9 - 0x2000000000000);
    if ((double)v76 != COERCE_DOUBLE(v9 - 0x2000000000000))
    {
LABEL_128:
      v35 = 0x2000000000;
      goto LABEL_45;
    }
    if (v76)
    {
      if ((unint64_t)(v76 + 0x8000000000000) >> 52)
        goto LABEL_128;
    }
    else if ((uint64_t)v9 < 0x2000000000000)
    {
      goto LABEL_128;
    }
    v35 = 0x1000000000;
    goto LABEL_45;
  }
  *v30 = v150 | 0x40000000000;
LABEL_54:
  if (*(_QWORD *)(a1 + 24) != v9)
    *(_QWORD *)(a1 + 24) = 0;
LABEL_56:
  if ((v21 - 1) >= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1982D2BC0);
  }
  JSC::DFG::AbstractValue::fixTypeForRepresentation(a1, a2, dword_1991545F0[v21 - 1], a5);
  if ((_QWORD)v150 != *(_QWORD *)(a1 + 8) || DWORD2(v150) != *(_DWORD *)(a1 + 16))
    goto LABEL_313;
  v55 = *(_QWORD *)a1;
  if (((v149 | *(_QWORD *)a1) & 1) != 0 && v149 != 4 && v55 != 4)
  {
    if (!JSC::DFG::StructureAbstractValue::equalsSlow((uint64_t *)&v149, (uint64_t *)a1))
      goto LABEL_313;
LABEL_61:
    v23 = v151 != *(_QWORD *)(a1 + 24);
    goto LABEL_62;
  }
  if (v149 == v55)
    goto LABEL_61;
LABEL_313:
  v23 = 1;
LABEL_62:
  if ((v149 & 1) != 0)
    WTF::fastFree(v149 & 0xFFFFFFFFFFFFFFFCLL, v48, v49, v50, v51, v52, v53, v54);
  return v23;
}

uint64_t JSC::DFG::AbstractValue::filter(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v32;
  unsigned int *v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  _DWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return 0;
  v10 = *a3;
  v11 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a3 & 1) == 0)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = (JSC::speculatedTypeMapping[*((unsigned __int8 *)v11 + 9)] | a4) & v8;
      v12 = *((unsigned __int8 *)v11 + 9);
      if ((v12 - 39) < 0xB)
        v13 = JSC::typedArrayModes[v12 - 39];
      else
        v13 = 1 << *((_BYTE *)v11 + 8);
      goto LABEL_21;
    }
LABEL_20:
    v13 = 0;
    *(_QWORD *)(a1 + 8) = v8 & a4;
    goto LABEL_21;
  }
  v14 = *v11;
  if (!(_DWORD)v14)
    goto LABEL_20;
  if ((_DWORD)v14 == 1)
  {
    v15 = 0;
    v16 = 0;
LABEL_9:
    v17 = v14 - v16;
    v18 = &v11[2 * v16 + 2];
    do
    {
      v19 = *(_QWORD *)v18;
      v18 += 2;
      v15 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(v19 + 9)];
      --v17;
    }
    while (v17);
    goto LABEL_11;
  }
  v36 = 0;
  v37 = 0;
  v16 = v14 & 0xFFFFFFFE;
  v38 = v11 + 4;
  v39 = v16;
  do
  {
    v36 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(*((_QWORD *)v38 - 1) + 9)];
    v37 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)v38 + 9)];
    v38 += 4;
    v39 -= 2;
  }
  while (v39);
  v15 = v37 | v36;
  if (v16 != v14)
    goto LABEL_9;
LABEL_11:
  v20 = 0;
  v21 = 0;
  *(_QWORD *)(a1 + 8) = (v15 | a4) & v8;
  LODWORD(v22) = v14;
  do
  {
    v23 = *(_QWORD *)&v11[2 * v21 + 2];
    v24 = *(unsigned __int8 *)(v23 + 9);
    a2 = (v24 - 39);
    if (a2 <= 0xA)
      v25 = JSC::typedArrayModes[v24 - 39];
    else
      v25 = 1 << *(_BYTE *)(v23 + 8);
    v13 = v25 | v20;
    if (v13 == v20)
      v22 = v22;
    else
      v22 = v14;
    ++v21;
    v20 = v13;
  }
  while (v21 < v22);
LABEL_21:
  *(_DWORD *)(a1 + 16) &= v13;
  v26 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != 4)
  {
    if ((v26 & 2) != 0)
    {
      if ((v10 & 1) != 0)
        v66 = *v11;
      else
        v66 = v10 > 3;
      if ((v26 & 1) != 0)
        v67 = *(unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v67 = v26 > 3;
      if (v66 > v67 + 2)
        goto LABEL_46;
      JSC::DFG::RegisteredStructureSet::operator=((uint64_t *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = *(_QWORD *)a1;
      goto LABEL_24;
    }
    v76 = 0;
    if ((v10 & 1) != 0 && v10 != 4)
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v76, a3);
      v10 = v76;
      v26 = *(_QWORD *)a1;
    }
    v32 = v10 & 0xFFFFFFFFFFFFFFFDLL;
    v76 = v10 & 0xFFFFFFFFFFFFFFFDLL;
    v33 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v26 & 1) == 0)
    {
      if (!v33 || v32 == 4)
      {
LABEL_44:
        if ((v32 & 1) != 0)
          WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_46;
      }
      v40 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v10 & 1) != 0)
      {
        v49 = *v40;
        if ((_DWORD)v49)
        {
          if (*((unsigned int **)v40 + 1) == v33)
            goto LABEL_44;
          v50 = 0;
          v51 = v40 + 4;
          while (v49 - 1 != v50)
          {
            v52 = *(unsigned int **)&v51[2 * v50++];
            if (v52 == v33)
            {
              if (v50 < v49)
                goto LABEL_44;
              break;
            }
          }
        }
      }
      else if (v40 == v33)
      {
        goto LABEL_44;
      }
LABEL_140:
      *(_QWORD *)a1 = v26 & 2;
      goto LABEL_44;
    }
    v53 = *v33;
    if (!*v33)
    {
LABEL_139:
      WTF::fastFree((unint64_t)v33, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v26 = *(_QWORD *)a1;
      v32 = v76;
      goto LABEL_140;
    }
    if (v32 == 4)
      goto LABEL_46;
    v54 = v33 + 2;
    v55 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v10 & 1) == 0)
    {
      v56 = 0;
      do
      {
        if (*(unsigned int **)&v54[2 * v56] != v55)
        {
          v57 = v56;
          *v33 = --v53;
          --v56;
          *(_QWORD *)&v54[2 * v57] = *(_QWORD *)&v54[2 * v53];
        }
        ++v56;
      }
      while (v56 < v53);
LABEL_138:
      if (v53)
        goto LABEL_44;
      goto LABEL_139;
    }
    v60 = 0;
    while (1)
    {
      v61 = *v55;
      if (!(_DWORD)v61)
        goto LABEL_137;
      v62 = *(void **)&v54[2 * v60];
      if (*((void **)v55 + 1) != v62)
        break;
LABEL_135:
      if (++v60 >= v53)
        goto LABEL_138;
    }
    v63 = 0;
    while (v61 - 1 != v63)
    {
      a2 = *(_QWORD *)&v55[2 * v63++ + 4];
      if ((void *)a2 == v62)
      {
        if (v63 >= v61)
          break;
        goto LABEL_135;
      }
    }
LABEL_137:
    v64 = v60;
    *v33 = --v53;
    --v60;
    *(_QWORD *)&v54[2 * v64] = *(_QWORD *)&v54[2 * v53];
    goto LABEL_135;
  }
  if ((uint64_t *)a1 != a3)
  {
    if ((v10 & 1) != 0 && v10 != 4)
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a3);
LABEL_46:
      v27 = *(_QWORD *)a1;
      goto LABEL_25;
    }
LABEL_24:
    v27 = v10 & 0xFFFFFFFFFFFFFFFDLL;
    *(_QWORD *)a1 = v27;
    goto LABEL_25;
  }
  v27 = 4;
LABEL_25:
  v28 = *(_QWORD *)(a1 + 8);
  if ((v28 & 0x2800FFFFFFF7) == 0)
  {
    if ((v27 & 1) != 0)
      WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v27 = 0;
    goto LABEL_29;
  }
  v34 = v27 > 4 || ((1 << v27) & 0x15) == 0;
  if (v34)
  {
    v35 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v27 & 1) != 0)
    {
      v46 = *(_DWORD *)v35;
      if (*(_DWORD *)v35)
      {
        v47 = 0;
        v48 = v35 + 8;
        do
        {
          if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v48 + 8 * v47) + 9)] & v28) == 0)
          {
            v65 = v47;
            *(_DWORD *)v35 = --v46;
            --v47;
            *(_QWORD *)(v48 + 8 * v65) = *(_QWORD *)(v48 + 8 * v46);
          }
          ++v47;
        }
        while (v47 < v46);
        if (v46)
          goto LABEL_30;
      }
      WTF::fastFree(v35, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v27 = *(_QWORD *)a1;
    }
    else if (!v35 || (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v35 + 9)] & v28) != 0)
    {
      goto LABEL_30;
    }
    v27 &= 2u;
LABEL_29:
    *(_QWORD *)a1 = v27;
LABEL_30:
    v28 = *(_QWORD *)(a1 + 8);
  }
  if ((v28 & 0x2800FFFFFFF7) == 0)
  {
    v29 = 0;
LABEL_33:
    *(_DWORD *)(a1 + 16) = v29;
    goto LABEL_34;
  }
  if ((v28 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    v29 = *(_DWORD *)(a1 + 16) & 0x2A02AAA;
    goto LABEL_33;
  }
LABEL_34:
  v30 = *(_QWORD *)(a1 + 24);
  if (!v30)
    goto LABEL_35;
  if ((v28 & 0xC00000000) != 0)
  {
    v74 = v27;
    v75 = *(_QWORD *)(a1 + 24);
    v68 = v28;
    v69 = JSC::int52AwareSpeculationFromValue(v30);
    v28 = v68;
    v27 = v74;
    v30 = v75;
    if ((v69 | v68) == v68)
      goto LABEL_150;
  }
  if (v30 >= 0xFFFE000000000000)
  {
    v34 = (v30 & 0xFFFFFFFE) == 0;
    v45 = 0x200000000;
    if (v34)
      v45 = 0x100000000;
    goto LABEL_79;
  }
  if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v59 = (uint64_t)COERCE_DOUBLE(v30 - 0x2000000000000);
    if ((double)v59 != COERCE_DOUBLE(v30 - 0x2000000000000))
    {
LABEL_123:
      v45 = 0x2000000000;
      goto LABEL_79;
    }
    if (v59)
    {
      if ((unint64_t)(v59 + 0x8000000000000) >> 52)
        goto LABEL_123;
    }
    else if ((uint64_t)v30 < 0x2000000000000)
    {
      goto LABEL_123;
    }
    v45 = 0x1000000000;
    goto LABEL_79;
  }
  if ((v30 & 0xFFFE000000000002) != 0)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v45 = 0x20000000000;
    if (v34)
      v45 = 0x10000000000;
    goto LABEL_79;
  }
  v41 = v30 >> 36;
  v43 = (v30 & 0xFFFFFFFFFLL) != 0 && v41 == 0;
  if (qword_1ECF4C080 <= v30 && v43)
  {
    v44 = *(unsigned __int8 *)(v30 + 5);
    if (v44 == 2)
    {
      v58 = *(_QWORD *)(v30 + 8);
      v45 = 805306368;
      if (v58 && (v58 & 1) == 0)
      {
        if (v58 < qword_1ECF4C080)
        {
          v45 = 0;
        }
        else
        {
          v45 = 0;
          if (!(v58 >> 36) && (v58 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v58 + 16) & 0x10) != 0)
              v45 = 0x10000000;
            else
              v45 = 805306368;
          }
        }
      }
    }
    else
    {
      v45 = JSC::speculatedTypeMapping[v44];
    }
    goto LABEL_79;
  }
  v70 = v27;
  if (qword_1ECF4C080 > v30)
  {
LABEL_172:
    v45 = 0;
    goto LABEL_163;
  }
  v71 = v30;
  v45 = 0;
  if (v41)
  {
LABEL_163:
    v27 = v70;
    goto LABEL_79;
  }
  if ((v71 & 0xFFFFFFFFFLL) == 0)
    goto LABEL_79;
  v72 = *(unsigned __int8 *)(v71 + 5);
  if (v72 != 2)
  {
    v45 = JSC::speculatedTypeMapping[v72];
    goto LABEL_163;
  }
  v73 = *(_QWORD *)(v71 + 8);
  v45 = 805306368;
  if (!v73)
    goto LABEL_163;
  v27 = v70;
  if ((v73 & 1) == 0)
  {
    if (v73 >= qword_1ECF4C080)
    {
      v45 = 0;
      if (!(v73 >> 36) && (v73 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v73 + 16) & 0x10) != 0)
          v45 = 0x10000000;
        else
          v45 = 805306368;
      }
      goto LABEL_163;
    }
    goto LABEL_172;
  }
LABEL_79:
  if ((v45 | v28) != v28)
    *(_QWORD *)(a1 + 24) = 0;
LABEL_35:
  if (!v28)
    goto LABEL_36;
LABEL_150:
  if ((v28 & 0xFFFFD7FF00000008) != 0 || *(_DWORD *)(a1 + 16) && (v27 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return 0;
LABEL_36:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((v27 & 1) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return 1;
}

uint64_t JSC::DFG::AbstractValue::filterValueByType(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 8);
    if ((v2 & 0xC00000000) == 0)
      goto LABEL_4;
    v17 = *(_QWORD *)(this + 24);
    v18 = this;
    v19 = *(_QWORD *)(this + 8);
    v12 = JSC::int52AwareSpeculationFromValue(v1);
    v1 = v17;
    this = v18;
    v13 = v12 | v19;
    v2 = v19;
    if (v13 != v19)
    {
LABEL_4:
      if (v1 >= 0xFFFE000000000000)
      {
        v8 = (v1 & 0xFFFFFFFE) == 0;
        v7 = 0x200000000;
        v9 = 0x100000000;
        goto LABEL_20;
      }
      if (v1 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v1 & 0xFFFE000000000002) == 0)
        {
          v3 = v1 >> 36;
          v5 = (v1 & 0xFFFFFFFFFLL) != 0 && v3 == 0;
          if (qword_1ECF4C080 <= v1 && v5)
          {
            v6 = *(unsigned __int8 *)(v1 + 5);
            if (v6 == 2)
            {
              v10 = *(_QWORD *)(v1 + 8);
              v7 = 805306368;
              if (v10 && (v10 & 1) == 0)
              {
                if (v10 < qword_1ECF4C080)
                {
                  v7 = 0;
                }
                else
                {
                  v7 = 0;
                  if (!(v10 >> 36) && (v10 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v10 + 16) & 0x10) != 0)
                      v7 = 0x10000000;
                    else
                      v7 = 805306368;
                  }
                }
              }
            }
            else
            {
              v7 = JSC::speculatedTypeMapping[v6];
            }
            goto LABEL_17;
          }
          if (qword_1ECF4C080 <= v1)
          {
            v14 = v1;
            v7 = 0;
            if (v3 || (v14 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_17;
            v15 = *(unsigned __int8 *)(v14 + 5);
            if (v15 != 2)
            {
              v7 = JSC::speculatedTypeMapping[v15];
LABEL_17:
              if ((v7 | v2) != v2)
                *(_QWORD *)(this + 24) = 0;
              return this;
            }
            v16 = *(_QWORD *)(v14 + 8);
            v7 = 805306368;
            if (!v16 || (v16 & 1) != 0)
              goto LABEL_17;
            if (v16 >= qword_1ECF4C080)
            {
              v7 = 0;
              if (!(v16 >> 36) && (v16 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v16 + 16) & 0x10) != 0)
                  v7 = 0x10000000;
                else
                  v7 = 805306368;
              }
              goto LABEL_17;
            }
          }
          v7 = 0;
          goto LABEL_17;
        }
        v8 = (v1 & 0xFFFFFFFFFFFFFFFELL) == 6;
        v7 = 0x20000000000;
        v9 = 0x10000000000;
LABEL_20:
        if (v8)
          v7 = v9;
        goto LABEL_17;
      }
      v11 = (uint64_t)COERCE_DOUBLE(v1 - 0x2000000000000);
      if ((double)v11 != COERCE_DOUBLE(v1 - 0x2000000000000))
      {
LABEL_32:
        v7 = 0x2000000000;
        goto LABEL_17;
      }
      if (v11)
      {
        if ((unint64_t)(v11 + 0x8000000000000) >> 52)
          goto LABEL_32;
      }
      else if ((uint64_t)v1 < 0x2000000000000)
      {
        goto LABEL_32;
      }
      v7 = 0x1000000000;
      goto LABEL_17;
    }
  }
  return this;
}

uint64_t JSC::DFG::AbstractValue::changeStructure(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v10 = *a3;
  v11 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a3 & 1) == 0)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 8) &= JSC::speculatedTypeMapping[*((unsigned __int8 *)v11 + 9)];
      v12 = *((unsigned __int8 *)v11 + 9);
      if ((v12 - 39) < 0xB)
        v13 = JSC::typedArrayModes[v12 - 39];
      else
        v13 = 1 << *((_BYTE *)v11 + 8);
      goto LABEL_20;
    }
LABEL_19:
    v13 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_20;
  }
  v14 = *v11;
  if (!(_DWORD)v14)
    goto LABEL_19;
  if ((_DWORD)v14 == 1)
  {
    v15 = 0;
    v16 = 0;
LABEL_8:
    v17 = v14 - v16;
    v18 = &v11[2 * v16 + 2];
    do
    {
      v19 = *(_QWORD *)v18;
      v18 += 2;
      v15 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(v19 + 9)];
      --v17;
    }
    while (v17);
    goto LABEL_10;
  }
  v34 = 0;
  v35 = 0;
  v16 = v14 & 0xFFFFFFFE;
  v36 = v11 + 4;
  v37 = v16;
  do
  {
    v34 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(*((_QWORD *)v36 - 1) + 9)];
    v35 |= JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)v36 + 9)];
    v36 += 4;
    v37 -= 2;
  }
  while (v37);
  v15 = v35 | v34;
  if (v16 != v14)
    goto LABEL_8;
LABEL_10:
  v20 = 0;
  v21 = 0;
  v22 = v11 + 2;
  *(_QWORD *)(a1 + 8) &= v15;
  LODWORD(v23) = v14;
  do
  {
    v24 = *(_QWORD *)&v22[2 * v21];
    v25 = *(unsigned __int8 *)(v24 + 9);
    a2 = (v25 - 39);
    if (a2 <= 0xA)
      v26 = JSC::typedArrayModes[v25 - 39];
    else
      v26 = 1 << *(_BYTE *)(v24 + 8);
    v13 = v26 | v20;
    if (v13 == v20)
      v23 = v23;
    else
      v23 = v14;
    ++v21;
    v20 = v13;
  }
  while (v21 < v23);
LABEL_20:
  *(_DWORD *)(a1 + 16) = v13;
  v27 = *(_QWORD *)a1;
  if ((uint64_t *)a1 != a3)
  {
    if ((v27 & 1) != 0)
    {
      WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = *a3;
    }
    if ((v10 & 1) == 0 || v10 == 4)
    {
      v28 = v10 & 0xFFFFFFFFFFFFFFFDLL;
      v29 = v10 | 2;
      if ((*(_BYTE *)a1 & 2) != 0)
        v27 = v29;
      else
        v27 = v28;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, a3);
      v27 = *(_QWORD *)a1;
    }
  }
  v30 = v27 & 0xFFFFFFFFFFFFFFFDLL;
  *(_QWORD *)a1 = v27 & 0xFFFFFFFFFFFFFFFDLL;
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 8);
  if (!v31)
  {
LABEL_28:
    if (!v32)
      goto LABEL_29;
    goto LABEL_71;
  }
  if ((v32 & 0xC00000000) == 0
    || (v46 = *(_QWORD *)(a1 + 8),
        v47 = v27,
        v45 = v27 & 0xFFFFFFFFFFFFFFFDLL,
        v44 = JSC::int52AwareSpeculationFromValue(*(_QWORD *)(a1 + 24)),
        v30 = v45,
        v32 = v46,
        v27 = v47,
        (v44 | v46) != v46))
  {
    if (v31 >= 0xFFFE000000000000)
    {
      v40 = (v31 & 0xFFFFFFFE) == 0;
      v38 = 0x200000000;
      v41 = 0x100000000;
      goto LABEL_48;
    }
    if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v31 & 0xFFFE000000000002) == 0)
      {
        if (qword_1ECF4C080 <= v31)
        {
          v38 = 0;
          if (v31 >> 36 || (v31 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_45;
          v39 = *(unsigned __int8 *)(v31 + 5);
          if (v39 != 2)
          {
            v38 = JSC::speculatedTypeMapping[v39];
            goto LABEL_45;
          }
          v42 = *(_QWORD *)(v31 + 8);
          v38 = 805306368;
          if (!v42 || (v42 & 1) != 0)
          {
LABEL_45:
            if ((v38 | v32) != v32)
              *(_QWORD *)(a1 + 24) = 0;
            goto LABEL_28;
          }
          if (v42 >= qword_1ECF4C080)
          {
            v38 = 0;
            if (!(v42 >> 36) && (v42 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v42 + 16) & 0x10) != 0)
                v38 = 0x10000000;
              else
                v38 = 805306368;
            }
            goto LABEL_45;
          }
        }
        v38 = 0;
        goto LABEL_45;
      }
      v40 = (v31 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v38 = 0x20000000000;
      v41 = 0x10000000000;
LABEL_48:
      if (v40)
        v38 = v41;
      goto LABEL_45;
    }
    v43 = (uint64_t)COERCE_DOUBLE(v31 - 0x2000000000000);
    if ((double)v43 != COERCE_DOUBLE(v31 - 0x2000000000000))
    {
LABEL_63:
      v38 = 0x2000000000;
      goto LABEL_45;
    }
    if (v43)
    {
      if ((unint64_t)(v43 + 0x8000000000000) >> 52)
        goto LABEL_63;
    }
    else if ((uint64_t)v31 < 0x2000000000000)
    {
      goto LABEL_63;
    }
    v38 = 0x1000000000;
    goto LABEL_45;
  }
LABEL_71:
  if ((v32 & 0xFFFFD7FF00000008) != 0 || *(_DWORD *)(a1 + 16) && v30)
    return 0;
LABEL_29:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((v27 & 1) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return 1;
}

uint64_t JSC::DFG::AbstractValue::filterArrayModes(JSC::DFG::AbstractValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *((_QWORD *)this + 1);
  if (!v8)
    return 0;
  v10 = *((_DWORD *)this + 4) & a2;
  *((_DWORD *)this + 4) = v10;
  v11 = v8 & (a3 | 0x2800FFFFFFF7);
  *((_QWORD *)this + 1) = v11;
  if (v11)
  {
    if ((v11 & 0xFFFFD7FF00000008) == 0)
    {
      v12 = *(_QWORD *)this;
      if (!v10 || (*(_QWORD *)this & 0xFFFFFFFFFFFFFFFDLL) == 0)
        goto LABEL_4;
    }
    return 0;
  }
  v12 = *(_QWORD *)this;
LABEL_4:
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((v12 & 1) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  return 1;
}

uint64_t JSC::DFG::AbstractValue::filterClassInfo(JSC::DFG::AbstractValue *this, JSC::DFG::Graph *a2, const JSC::ClassInfo *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v19;
  uint64_t v20;
  BOOL v21;
  const JSC::ClassInfo *v22;
  BOOL v23;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  const JSC::ClassInfo *v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  if (!*((_QWORD *)this + 1))
    return 0;
  v5 = JSC::speculationFromClassInfoInheritance((uint64_t)a3);
  v13 = *(_QWORD *)this;
  v14 = *((_QWORD *)this + 1) & v5;
  *((_QWORD *)this + 1) = v14;
  if (v13 > 4 || ((1 << v13) & 0x15) == 0)
  {
    v19 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v13 & 1) != 0)
    {
      v26 = *v19;
      if (*v19)
      {
        v27 = 0;
        v28 = v19 + 2;
        do
        {
          v29 = *(_QWORD *)&v28[2 * v27];
          v30 = *(unsigned int *)(v29 + 76);
          v31 = *(_DWORD *)(v29 + 76) != 0;
          v32 = (const JSC::ClassInfo *)(16 * v30);
          if ((_DWORD)v30)
            v33 = v32 == a3;
          else
            v33 = 1;
          if (!v33)
          {
            do
            {
              v32 = (const JSC::ClassInfo *)*((_QWORD *)v32 + 2);
              v31 = v32 != 0;
            }
            while (v32 != a3 && v32 != 0);
          }
          if (!v31)
          {
            v35 = v27;
            *v19 = --v26;
            --v27;
            *(_QWORD *)&v28[2 * v35] = *(_QWORD *)&v28[2 * v26];
          }
          ++v27;
        }
        while (v27 < v26);
        if (v26)
          goto LABEL_6;
      }
      WTF::fastFree((unint64_t)v19, v6, v7, v8, v9, v10, v11, v12);
      v13 = *(_QWORD *)this;
      v14 = *((_QWORD *)this + 1);
    }
    else
    {
      if (!v19)
        goto LABEL_6;
      v20 = v19[19];
      v21 = v19[19] != 0;
      v22 = (const JSC::ClassInfo *)(16 * v20);
      if ((_DWORD)v20)
        v23 = v22 == a3;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = (const JSC::ClassInfo *)*((_QWORD *)v22 + 2);
          v21 = v22 != 0;
        }
        while (v22 != a3 && v22 != 0);
      }
      if (v21)
        goto LABEL_6;
    }
    v13 &= 2u;
    *(_QWORD *)this = v13;
  }
LABEL_6:
  if ((v14 & 0x2800FFFFFFF7) == 0)
  {
    if ((v13 & 1) != 0)
      WTF::fastFree(v13 & 0xFFFFFFFFFFFFFFFCLL, v6, v7, v8, v9, v10, v11, v12);
    v13 = 0;
    goto LABEL_10;
  }
  if (v13 > 4 || ((1 << v13) & 0x15) == 0)
  {
    v25 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v13 & 1) != 0)
    {
      v40 = *(_DWORD *)v25;
      if (!*(_DWORD *)v25)
        goto LABEL_77;
      v41 = 0;
      v42 = v25 + 8;
      do
      {
        if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v42 + 8 * v41) + 9)] & v14) == 0)
        {
          v45 = v41;
          *(_DWORD *)v25 = --v40;
          --v41;
          *(_QWORD *)(v42 + 8 * v45) = *(_QWORD *)(v42 + 8 * v40);
        }
        ++v41;
      }
      while (v41 < v40);
      if (!v40)
      {
LABEL_77:
        WTF::fastFree(v25, v6, v7, v8, v9, v10, v11, v12);
        v13 = *(_QWORD *)this;
LABEL_78:
        v13 &= 2u;
LABEL_10:
        *(_QWORD *)this = v13;
      }
    }
    else if (v25 && (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v25 + 9)] & v14) == 0)
    {
      goto LABEL_78;
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 0x2800FFFFFFF7) != 0)
  {
    if ((v16 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      *((_DWORD *)this + 4) &= 0x2A02AAAu;
  }
  else
  {
    *((_DWORD *)this + 4) = 0;
  }
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    if ((v16 & 0xC00000000) != 0)
    {
      v47 = v16;
      v48 = v13;
      v46 = JSC::int52AwareSpeculationFromValue(*((_QWORD *)this + 3));
      v16 = v47;
      v13 = v48;
      if ((v46 | v47) == v47)
        goto LABEL_96;
    }
    if (v17 >= 0xFFFE000000000000)
    {
      v38 = (v17 & 0xFFFFFFFE) == 0;
      v36 = 0x200000000;
      v39 = 0x100000000;
      goto LABEL_68;
    }
    if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v17 & 0xFFFE000000000002) == 0)
      {
        if (qword_1ECF4C080 <= v17)
        {
          v36 = 0;
          if (v17 >> 36 || (v17 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_65;
          v37 = *(unsigned __int8 *)(v17 + 5);
          if (v37 != 2)
          {
            v36 = JSC::speculatedTypeMapping[v37];
            goto LABEL_65;
          }
          v43 = *(_QWORD *)(v17 + 8);
          v36 = 805306368;
          if (!v43 || (v43 & 1) != 0)
          {
LABEL_65:
            if ((v36 | v16) != v16)
              *((_QWORD *)this + 3) = 0;
            goto LABEL_14;
          }
          if (v43 >= qword_1ECF4C080)
          {
            v36 = 0;
            if (!(v43 >> 36) && (v43 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v43 + 16) & 0x10) != 0)
                v36 = 0x10000000;
              else
                v36 = 805306368;
            }
            goto LABEL_65;
          }
        }
        v36 = 0;
        goto LABEL_65;
      }
      v38 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v36 = 0x20000000000;
      v39 = 0x10000000000;
LABEL_68:
      if (v38)
        v36 = v39;
      goto LABEL_65;
    }
    v44 = (uint64_t)COERCE_DOUBLE(v17 - 0x2000000000000);
    if ((double)v44 != COERCE_DOUBLE(v17 - 0x2000000000000))
    {
LABEL_88:
      v36 = 0x2000000000;
      goto LABEL_65;
    }
    if (v44)
    {
      if ((unint64_t)(v44 + 0x8000000000000) >> 52)
        goto LABEL_88;
    }
    else if ((uint64_t)v17 < 0x2000000000000)
    {
      goto LABEL_88;
    }
    v36 = 0x1000000000;
    goto LABEL_65;
  }
LABEL_14:
  if (!v16)
    goto LABEL_15;
LABEL_96:
  if ((v16 & 0xFFFFD7FF00000008) != 0 || *((_DWORD *)this + 4) && (v13 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return 0;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((v13 & 1) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFFFFFFFFFCLL, v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  return 1;
}

uint64_t JSC::DFG::AbstractValue::filterSlow(JSC::DFG::AbstractValue *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 1) & a2;
  *((_QWORD *)this + 1) = v10;
  if ((v10 & 0x2800FFFFFFF7) == 0)
  {
    if ((v9 & 1) != 0)
      WTF::fastFree(v9 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
    v9 = 0;
    goto LABEL_5;
  }
  if (v9 > 4 || ((1 << v9) & 0x15) == 0)
  {
    v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v9 & 1) != 0)
    {
      v22 = *(_DWORD *)v14;
      if (*(_DWORD *)v14)
      {
        v23 = 0;
        v24 = v14 + 8;
        do
        {
          if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v24 + 8 * v23) + 9)] & v10) == 0)
          {
            v27 = v23;
            *(_DWORD *)v14 = --v22;
            --v23;
            *(_QWORD *)(v24 + 8 * v27) = *(_QWORD *)(v24 + 8 * v22);
          }
          ++v23;
        }
        while (v23 < v22);
        if (v22)
          goto LABEL_6;
      }
      WTF::fastFree(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
      v9 = *(_QWORD *)this;
    }
    else if (!v14 || (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v14 + 9)] & v10) != 0)
    {
      goto LABEL_6;
    }
    v9 &= 2u;
LABEL_5:
    *(_QWORD *)this = v9;
LABEL_6:
    v10 = *((_QWORD *)this + 1);
  }
  if ((v10 & 0x2800FFFFFFF7) != 0)
  {
    if ((v10 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      *((_DWORD *)this + 4) &= 0x2A02AAAu;
  }
  else
  {
    *((_DWORD *)this + 4) = 0;
  }
  v11 = *((_QWORD *)this + 3);
  if (!v11)
  {
LABEL_10:
    if (!v10)
      goto LABEL_11;
    goto LABEL_70;
  }
  if ((v10 & 0xC00000000) == 0
    || (v34 = v9,
        v35 = *((_QWORD *)this + 3),
        v28 = v10,
        v29 = JSC::int52AwareSpeculationFromValue(v11),
        v10 = v28,
        v9 = v34,
        v11 = v35,
        (v29 | v28) != v28))
  {
    if (v11 >= 0xFFFE000000000000)
    {
      v20 = (v11 & 0xFFFFFFFE) == 0;
      v19 = 0x200000000;
      v21 = 0x100000000;
      goto LABEL_42;
    }
    if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v11 & 0xFFFE000000000002) == 0)
      {
        v15 = v11 >> 36;
        v17 = (v11 & 0xFFFFFFFFFLL) != 0 && v15 == 0;
        if (qword_1ECF4C080 <= v11 && v17)
        {
          v18 = *(unsigned __int8 *)(v11 + 5);
          if (v18 == 2)
          {
            v25 = *(_QWORD *)(v11 + 8);
            v19 = 805306368;
            if (v25 && (v25 & 1) == 0)
            {
              if (v25 < qword_1ECF4C080)
              {
                v19 = 0;
              }
              else
              {
                v19 = 0;
                if (!(v25 >> 36) && (v25 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v25 + 16) & 0x10) != 0)
                    v19 = 0x10000000;
                  else
                    v19 = 805306368;
                }
              }
            }
          }
          else
          {
            v19 = JSC::speculatedTypeMapping[v18];
          }
          goto LABEL_39;
        }
        v30 = v9;
        if (qword_1ECF4C080 <= v11)
        {
          v31 = v11;
          v19 = 0;
          if (v15)
          {
LABEL_80:
            v9 = v30;
            goto LABEL_39;
          }
          if ((v31 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_39;
          v32 = *(unsigned __int8 *)(v31 + 5);
          if (v32 != 2)
          {
            v19 = JSC::speculatedTypeMapping[v32];
            goto LABEL_80;
          }
          v33 = *(_QWORD *)(v31 + 8);
          v19 = 805306368;
          if (!v33)
            goto LABEL_80;
          v9 = v30;
          if ((v33 & 1) != 0)
          {
LABEL_39:
            if ((v19 | v10) != v10)
              *((_QWORD *)this + 3) = 0;
            goto LABEL_10;
          }
          if (v33 >= qword_1ECF4C080)
          {
            v19 = 0;
            if (!(v33 >> 36) && (v33 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v33 + 16) & 0x10) != 0)
                v19 = 0x10000000;
              else
                v19 = 805306368;
            }
            goto LABEL_80;
          }
        }
        v19 = 0;
        goto LABEL_80;
      }
      v20 = (v11 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v19 = 0x20000000000;
      v21 = 0x10000000000;
LABEL_42:
      if (v20)
        v19 = v21;
      goto LABEL_39;
    }
    v26 = (uint64_t)COERCE_DOUBLE(v11 - 0x2000000000000);
    if ((double)v26 != COERCE_DOUBLE(v11 - 0x2000000000000))
    {
LABEL_62:
      v19 = 0x2000000000;
      goto LABEL_39;
    }
    if (v26)
    {
      if ((unint64_t)(v26 + 0x8000000000000) >> 52)
        goto LABEL_62;
    }
    else if ((uint64_t)v11 < 0x2000000000000)
    {
      goto LABEL_62;
    }
    v19 = 0x1000000000;
    goto LABEL_39;
  }
LABEL_70:
  if ((v10 & 0xFFFFD7FF00000008) != 0 || *((_DWORD *)this + 4) && (v9 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return 0;
LABEL_11:
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((v9 & 1) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  return 1;
}

uint64_t JSC::DFG::AbstractValue::fastForwardToAndFilterSlow(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v9 = (int)a2;
  v11 = *(_DWORD *)(a1 + 20);
  if (v11 != (_DWORD)a2)
  {
    if ((v11 ^ a2) >= 2 && (*(_QWORD *)(a1 + 8) & 0x2800FFFFFFF7) != 0)
    {
      v18 = *(_QWORD *)a1;
      if (*(_QWORD *)a1 != 4)
      {
        *(_QWORD *)a1 = v18 | 2;
        v24 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v18 & 1) != 0)
        {
          v34 = 2 * *v24;
          while (v34 * 4)
          {
            v35 = *(_QWORD *)&v24[v34];
            if ((*(_BYTE *)(v35 + 19) & 0xC) == 0)
            {
              v36 = *(_QWORD *)(v35 + 96);
              v37 = (v36 & 1) != 0 ? (v36 >> 1) & 3 : *(unsigned __int8 *)(v36 + 4);
              v34 -= 2;
              if (v37 != 2)
                continue;
            }
            WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_55;
          }
        }
        else if (v24)
        {
          if ((*((_BYTE *)v24 + 19) & 0xC) != 0
            || ((v25 = *((_QWORD *)v24 + 12), (v25 & 1) != 0)
              ? (v26 = (v25 >> 1) & 3)
              : (v26 = *(unsigned __int8 *)(v25 + 4)),
                v26 == 2))
          {
LABEL_55:
            *(_QWORD *)a1 = 4;
          }
        }
      }
      *(_DWORD *)(a1 + 16) = -21020677;
    }
    if ((v9 & 1) != 0)
      *(_QWORD *)a1 &= ~2uLL;
    *(_DWORD *)(a1 + 20) = v9;
  }
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8) & a3;
  *(_QWORD *)(a1 + 8) = v13;
  if ((v13 & 0x2800FFFFFFF7) == 0)
  {
    if ((v12 & 1) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v12 = 0;
    goto LABEL_6;
  }
  if (v12 > 4 || ((1 << v12) & 0x15) == 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v12 & 1) != 0)
    {
      v29 = *(_DWORD *)v17;
      if (*(_DWORD *)v17)
      {
        v30 = 0;
        v31 = v17 + 8;
        do
        {
          if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v31 + 8 * v30) + 9)] & v13) == 0)
          {
            v38 = v30;
            *(_DWORD *)v17 = --v29;
            --v30;
            *(_QWORD *)(v31 + 8 * v38) = *(_QWORD *)(v31 + 8 * v29);
          }
          ++v30;
        }
        while (v30 < v29);
        if (v29)
          goto LABEL_7;
      }
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      v12 = *(_QWORD *)a1;
    }
    else if (!v17 || (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v17 + 9)] & v13) != 0)
    {
      goto LABEL_7;
    }
    v12 &= 2u;
LABEL_6:
    *(_QWORD *)a1 = v12;
LABEL_7:
    v13 = *(_QWORD *)(a1 + 8);
  }
  if ((v13 & 0x2800FFFFFFF7) != 0)
  {
    if ((v13 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      *(_DWORD *)(a1 + 16) &= 0x2A02AAAu;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
LABEL_11:
    if (!v13)
      goto LABEL_12;
    goto LABEL_95;
  }
  if ((v13 & 0xC00000000) == 0
    || (v39 = v13, v40 = JSC::int52AwareSpeculationFromValue(*(_QWORD *)(a1 + 24)), v13 = v39, (v40 | v39) != v39))
  {
    if (v14 >= 0xFFFE000000000000)
    {
      v27 = (v14 & 0xFFFFFFFE) == 0;
      v23 = 0x200000000;
      v28 = 0x100000000;
      goto LABEL_57;
    }
    if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v14 & 0xFFFE000000000002) == 0)
      {
        v19 = v14 >> 36;
        v21 = (v14 & 0xFFFFFFFFFLL) != 0 && v19 == 0;
        if (qword_1ECF4C080 <= v14 && v21)
        {
          v22 = *(unsigned __int8 *)(v14 + 5);
          if (v22 == 2)
          {
            v32 = *(_QWORD *)(v14 + 8);
            v23 = 805306368;
            if (v32 && (v32 & 1) == 0)
            {
              if (v32 < qword_1ECF4C080)
              {
                v23 = 0;
              }
              else
              {
                v23 = 0;
                if (!(v32 >> 36) && (v32 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v32 + 16) & 0x10) != 0)
                    v23 = 0x10000000;
                  else
                    v23 = 805306368;
                }
              }
            }
          }
          else
          {
            v23 = JSC::speculatedTypeMapping[v22];
          }
          goto LABEL_47;
        }
        v41 = v13;
        if (qword_1ECF4C080 <= v14)
        {
          v23 = 0;
          if (v19)
          {
LABEL_105:
            v13 = v41;
            goto LABEL_47;
          }
          if ((v14 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_47;
          v42 = *(unsigned __int8 *)(v14 + 5);
          if (v42 != 2)
          {
            v23 = JSC::speculatedTypeMapping[v42];
            goto LABEL_105;
          }
          v43 = *(_QWORD *)(v14 + 8);
          v23 = 805306368;
          if (!v43)
            goto LABEL_105;
          v13 = v41;
          if ((v43 & 1) != 0)
          {
LABEL_47:
            if ((v23 | v13) != v13)
              *(_QWORD *)(a1 + 24) = 0;
            goto LABEL_11;
          }
          if (v43 >= qword_1ECF4C080)
          {
            v23 = 0;
            if (!(v43 >> 36) && (v43 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v43 + 16) & 0x10) != 0)
                v23 = 0x10000000;
              else
                v23 = 805306368;
            }
            goto LABEL_105;
          }
        }
        v23 = 0;
        goto LABEL_105;
      }
      v27 = (v14 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v23 = 0x20000000000;
      v28 = 0x10000000000;
LABEL_57:
      if (v27)
        v23 = v28;
      goto LABEL_47;
    }
    v33 = (uint64_t)COERCE_DOUBLE(v14 - 0x2000000000000);
    if ((double)v33 != COERCE_DOUBLE(v14 - 0x2000000000000))
    {
LABEL_78:
      v23 = 0x2000000000;
      goto LABEL_47;
    }
    if (v33)
    {
      if ((unint64_t)(v33 + 0x8000000000000) >> 52)
        goto LABEL_78;
    }
    else if ((uint64_t)v14 < 0x2000000000000)
    {
      goto LABEL_78;
    }
    v23 = 0x1000000000;
    goto LABEL_47;
  }
LABEL_95:
  if ((v13 & 0xFFFFD7FF00000008) != 0 || *(_DWORD *)(a1 + 16) && (v12 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return 0;
LABEL_12:
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((v12 & 1) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return 1;
}

void JSC::DFG::AbstractValue::fastForwardToSlow(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v8 = (int)a2;
  if ((*((_DWORD *)a1 + 5) ^ a2) >= 2 && (a1[1] & 0x2800FFFFFFF7) != 0)
  {
    v10 = *a1;
    if (*a1 != 4)
    {
      *a1 = v10 | 2;
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v10 & 1) != 0)
      {
        v14 = 2 * *v11;
        while (v14 * 4)
        {
          v15 = *(_QWORD *)&v11[v14];
          if ((*(_BYTE *)(v15 + 19) & 0xC) == 0)
          {
            v16 = *(_QWORD *)(v15 + 96);
            v17 = (v16 & 1) != 0 ? (v16 >> 1) & 3 : *(unsigned __int8 *)(v16 + 4);
            v14 -= 2;
            if (v17 != 2)
              continue;
          }
          WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_14;
        }
      }
      else if (v11)
      {
        if ((*((_BYTE *)v11 + 19) & 0xC) != 0
          || ((v12 = *((_QWORD *)v11 + 12), (v12 & 1) != 0)
            ? (v13 = (v12 >> 1) & 3)
            : (v13 = *(unsigned __int8 *)(v12 + 4)),
              v13 == 2))
        {
LABEL_14:
          *a1 = 4;
        }
      }
    }
    *((_DWORD *)a1 + 4) = -21020677;
  }
  if ((v8 & 1) != 0)
    *a1 &= ~2uLL;
  *((_DWORD *)a1 + 5) = v8;
}

uint64_t JSC::DFG::AbstractValue::filterByValue(JSC::DFG::AbstractValue *this, const JSC::DFG::FrozenValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;

  v10 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v11 = 0x40000000000;
    goto LABEL_10;
  }
  if (v10 >= 0xFFFE000000000000)
  {
    v17 = (*(_QWORD *)a2 & 0xFFFFFFFELL) == 0;
    v18 = 0x200000000;
    v19 = 0x100000000;
    goto LABEL_16;
  }
  if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v21 = (uint64_t)COERCE_DOUBLE(v10 - 0x2000000000000);
    if ((double)v21 != COERCE_DOUBLE(v10 - 0x2000000000000))
    {
LABEL_31:
      v11 = 0x2000000000;
      goto LABEL_10;
    }
    if (v21)
    {
      if ((unint64_t)(v21 + 0x8000000000000) >> 52)
        goto LABEL_31;
    }
    else if ((uint64_t)v10 < 0x2000000000000)
    {
      goto LABEL_31;
    }
    v11 = 0x1000000000;
    goto LABEL_10;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v17 = (v10 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v18 = 0x20000000000;
    v19 = 0x10000000000;
LABEL_16:
    if (v17)
      v11 = v19;
    else
      v11 = v18;
    goto LABEL_10;
  }
  if (qword_1ECF4C080 > v10)
    goto LABEL_75;
  v11 = 0;
  if (!(v10 >> 36) && (v10 & 0xFFFFFFFFFLL) != 0)
  {
    v12 = *(unsigned __int8 *)(v10 + 5);
    if (v12 != 2)
    {
      v11 = JSC::speculatedTypeMapping[v12];
      goto LABEL_10;
    }
    v20 = *(_QWORD *)(v10 + 8);
    v11 = 805306368;
    if (v20)
    {
      if ((v20 & 1) == 0)
      {
        if (v20 >= qword_1ECF4C080)
        {
          v11 = 0;
          if (!(v20 >> 36) && (v20 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v20 + 16) & 0x10) != 0)
              v11 = 0x10000000;
            else
              v11 = 805306368;
          }
          goto LABEL_10;
        }
LABEL_75:
        v11 = 0;
      }
    }
  }
LABEL_10:
  v13 = *((_QWORD *)this + 1);
  v14 = v13 & v11;
  if ((v13 & v11) == v13)
  {
    result = 0;
    v14 = *((_QWORD *)this + 1);
  }
  else
  {
    if ((v13 & 0x2800FFFFFFF7) != 0)
    {
      result = JSC::DFG::AbstractValue::filterSlow(this, v11, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *((_QWORD *)this + 1) = v14;
      if (v14)
      {
        result = 0;
        goto LABEL_13;
      }
      JSC::DFG::AbstractValue::clear(this, v11, a3, a4, a5, a6, a7, a8);
      result = 1;
    }
    v14 = *((_QWORD *)this + 1);
  }
  if (!v14)
    return result;
LABEL_13:
  v16 = *(_QWORD *)a2;
  *((_QWORD *)this + 3) = v16;
  if (v16)
  {
    if ((v14 & 0xC00000000) == 0
      || (v30 = result,
          v31 = v14,
          v28 = JSC::int52AwareSpeculationFromValue(v16),
          result = v30,
          v29 = v28 | v31,
          v14 = v31,
          v29 != v31))
    {
      if (v16 >= 0xFFFE000000000000)
      {
        v24 = (v16 & 0xFFFFFFFE) == 0;
        v22 = 0x200000000;
        v25 = 0x100000000;
        goto LABEL_48;
      }
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) == 0)
        {
          if (qword_1ECF4C080 <= v16)
          {
            v22 = 0;
            if (v16 >> 36 || (v16 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_41;
            v23 = *(unsigned __int8 *)(v16 + 5);
            if (v23 != 2)
            {
              v22 = JSC::speculatedTypeMapping[v23];
              goto LABEL_41;
            }
            v26 = *(_QWORD *)(v16 + 8);
            v22 = 805306368;
            if (!v26 || (v26 & 1) != 0)
              goto LABEL_41;
            if (v26 >= qword_1ECF4C080)
            {
              v22 = 0;
              if (!(v26 >> 36) && (v26 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v26 + 16) & 0x10) != 0)
                  v22 = 0x10000000;
                else
                  v22 = 805306368;
              }
              goto LABEL_41;
            }
          }
          v22 = 0;
LABEL_41:
          if ((v22 | v14) != v14)
            *((_QWORD *)this + 3) = 0;
          return result;
        }
        v24 = (v16 & 0xFFFFFFFFFFFFFFFELL) == 6;
        v22 = 0x20000000000;
        v25 = 0x10000000000;
LABEL_48:
        if (v24)
          v22 = v25;
        goto LABEL_41;
      }
      v27 = (uint64_t)COERCE_DOUBLE(v16 - 0x2000000000000);
      if ((double)v27 != COERCE_DOUBLE(v16 - 0x2000000000000))
      {
LABEL_65:
        v22 = 0x2000000000;
        goto LABEL_41;
      }
      if (v27)
      {
        if ((unint64_t)(v27 + 0x8000000000000) >> 52)
          goto LABEL_65;
      }
      else if ((uint64_t)v16 < 0x2000000000000)
      {
        goto LABEL_65;
      }
      v22 = 0x1000000000;
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t JSC::DFG::AbstractValue::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;

  v2 = *(unsigned __int8 *)(a2 + 9);
  if ((a1[1] & JSC::speculatedTypeMapping[v2]) == 0)
    return 0;
  v3 = (v2 - 39) <= 0xA ? JSC::typedArrayModes[(v2 - 39)] : 1 << *(_BYTE *)(a2 + 8);
  if ((v3 & (_DWORD)a1[2]) == 0)
    return 0;
  v4 = *a1;
  result = 1;
  if (v4 == 4 || (v4 & 2) != 0)
    return result;
  v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v4 & 1) == 0)
    return v6 == (unsigned int *)a2;
  v7 = *v6;
  if (!(_DWORD)v7)
    return 0;
  if (*((_QWORD *)v6 + 1) != a2)
  {
    v8 = 0;
    v9 = v6 + 4;
    while (v7 - 1 != v8)
    {
      v10 = *(_QWORD *)&v9[2 * v8++];
      if (v10 == a2)
        return v8 < v7;
    }
    v8 = v7;
    return v8 < v7;
  }
  return result;
}

uint64_t JSC::DFG::AbstractValue::validateTypeAcceptingBoxedInt52(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 | 0x3F73FFFFFFF7) == v2
    && *(_QWORD *)a1 == 4
    && *(_DWORD *)(a1 + 16) == -21020677
    && !*(_QWORD *)(a1 + 24))
  {
    return 1;
  }
  if ((v2 & 0xC00000000) != 0)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = a2;
    v10 = JSC::int52AwareSpeculationFromValue(a2);
    v2 = v11;
    a2 = v12;
    if ((v10 | v11) == v11)
      return 1;
  }
  if (!a2)
  {
    v3 = 0x40000000000;
    return (v3 | v2) == v2;
  }
  if (a2 >= 0xFFFE000000000000)
  {
    v6 = (a2 & 0xFFFFFFFE) == 0;
    v3 = 0x200000000;
    v7 = 0x100000000;
    goto LABEL_19;
  }
  if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v9 = (uint64_t)COERCE_DOUBLE(a2 - 0x2000000000000);
    if ((double)v9 != COERCE_DOUBLE(a2 - 0x2000000000000))
    {
LABEL_31:
      v3 = 0x2000000000;
      return (v3 | v2) == v2;
    }
    if (v9)
    {
      if ((unint64_t)(v9 + 0x8000000000000) >> 52)
        goto LABEL_31;
    }
    else if ((uint64_t)a2 < 0x2000000000000)
    {
      goto LABEL_31;
    }
    v3 = 0x1000000000;
    return (v3 | v2) == v2;
  }
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v3 = 0x20000000000;
    v7 = 0x10000000000;
LABEL_19:
    if (v6)
      v3 = v7;
    return (v3 | v2) == v2;
  }
  if (qword_1ECF4C080 > a2)
  {
LABEL_41:
    v3 = 0;
    return (v3 | v2) == v2;
  }
  v3 = 0;
  if (a2 >> 36 || (a2 & 0xFFFFFFFFFLL) == 0)
    return (v3 | v2) == v2;
  v4 = *(unsigned __int8 *)(a2 + 5);
  if (v4 == 2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v3 = 805306368;
    if (!v8 || (v8 & 1) != 0)
      return (v3 | v2) == v2;
    if (v8 >= qword_1ECF4C080)
    {
      v3 = 0;
      if (!(v8 >> 36) && (v8 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v8 + 16) & 0x10) != 0)
          v3 = 0x10000000;
        else
          v3 = 805306368;
      }
      return (v3 | v2) == v2;
    }
    goto LABEL_41;
  }
  v3 = JSC::speculatedTypeMapping[v4];
  return (v3 | v2) == v2;
}

uint64_t JSC::DFG::AbstractValue::resultType(JSC::DFG::AbstractValue *this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 0xFFFFFEFFFFFFFFFFLL) == 0)
    return 32;
  if ((v1 & 0xFFFFFF8CCFFFFFFFLL) != 0)
    v2 = 126;
  else
    v2 = 6;
  if ((v1 & 0xFFFFFFFFCFFFFFFFLL) == 0)
    v2 = 4;
  if ((v1 & 0xFFFFFF8CFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 2;
  if ((v1 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    return v3;
  else
    return 3;
}

uint64_t JSC::DFG::AbstractValue::dumpInContext(JSC::DFG::AbstractValue *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  unint64_t *v10;
  WTF::PrintStream *v11;
  JSC::Structure *v12;
  unint64_t v13;
  WTF::PrintStream *v14;
  unsigned int v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  const char *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;

  v6 = (WTF::PrintStream *)*((_QWORD *)this + 1);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "(");
  JSC::dumpSpeculation(v7, v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*((_QWORD *)this + 1) & 0x2800FFFFFFF7) != 0)
  {
    v8 = (WTF::PrintStream *)*((unsigned int *)this + 4);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s", ", ");
    JSC::dumpArrayModes((uint64_t)v9, v8);
    WTF::PrintStream::printf(v9, "%s", ", ");
    JSC::DFG::StructureAbstractValue::dumpInContext(this, v9, a3);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v10 = (unint64_t *)((char *)this + 24);
  if (*((_QWORD *)this + 3))
  {
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v11, "%s", ", ");
    v12 = 0;
    v13 = *v10;
    if (*v10 && (v13 & 0xFFFE000000000002) == 0)
      v12 = (JSC::Structure *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE));
    JSC::JSValue::dumpInContextAssumingStructure((JSC::DFG::AbstractValue *)((char *)this + 24), v11, a3, v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v14, "%s", ", ");
  v15 = *((_DWORD *)this + 5);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
  if (v15 > 1)
    WTF::PrintStream::printf(v17, "%u");
  else
    WTF::PrintStream::printf(v17, "%s");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
  WTF::PrintStream::printf(v16, "%s", ":");
  if ((v15 & 1) != 0)
    v18 = "StructuresAreWatched";
  else
    v18 = "StructuresAreClobbered";
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
  WTF::PrintStream::printf(v19, "%s", v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::AbstractValue::validateOSREntryValue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  JSC::Structure *v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 | 0x3F73FFFFFFF7) == v9
    && *(_QWORD *)a1 == 4
    && *(_DWORD *)(a1 + 16) == -21020677
    && !*(_QWORD *)(a1 + 24))
  {
    return 1;
  }
  if ((_DWORD)a3 != 2)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
      v11 = v10 == a2;
    else
      v11 = 1;
    if (!v11)
      return 0;
    if (!a2)
    {
      v16 = 0x40000000000;
      goto LABEL_22;
    }
    if (a2 >= 0xFFFE000000000000)
    {
      v21 = (a2 & 0xFFFFFFFE) == 0;
      v16 = 0x200000000;
      v22 = 0x100000000;
      goto LABEL_35;
    }
    if (a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((a2 & 0xFFFE000000000002) == 0)
      {
        v12 = a2 >> 36;
        v14 = (a2 & 0xFFFFFFFFFLL) != 0 && v12 == 0;
        if (qword_1ECF4C080 <= a2 && v14)
        {
          v15 = *(unsigned __int8 *)(a2 + 5);
          if (v15 == 2)
          {
            v23 = *(_QWORD *)(a2 + 8);
            v16 = 805306368;
            if (v23 && (v23 & 1) == 0)
            {
              if (v23 < qword_1ECF4C080)
              {
                v16 = 0;
              }
              else
              {
                v16 = 0;
                if (!(v23 >> 36) && (v23 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v23 + 16) & 0x10) != 0)
                    v16 = 0x10000000;
                  else
                    v16 = 805306368;
                }
              }
            }
          }
          else
          {
            v16 = JSC::speculatedTypeMapping[v15];
          }
          goto LABEL_22;
        }
        if (qword_1ECF4C080 > a2)
          goto LABEL_83;
        v16 = 0;
        if (!v12 && (a2 & 0xFFFFFFFFFLL) != 0)
        {
          v30 = *(unsigned __int8 *)(a2 + 5);
          if (v30 != 2)
          {
            v16 = JSC::speculatedTypeMapping[v30];
            goto LABEL_22;
          }
          v31 = *(_QWORD *)(a2 + 8);
          v16 = 805306368;
          if (v31)
          {
            if ((v31 & 1) == 0)
            {
              if (v31 >= qword_1ECF4C080)
              {
                v16 = 0;
                if (!(v31 >> 36) && (v31 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v31 + 16) & 0x10) != 0)
                    v16 = 0x10000000;
                  else
                    v16 = 805306368;
                }
                goto LABEL_22;
              }
LABEL_83:
              v16 = 0;
            }
          }
        }
LABEL_22:
        if ((v16 | v9) == v9)
        {
          result = 1;
          if (!a2 || (a2 & 0xFFFE000000000002) != 0)
            return result;
          goto LABEL_25;
        }
        return 0;
      }
      v21 = (a2 & 0xFFFFFFFFFFFFFFFELL) == 6;
      v16 = 0x20000000000;
      v22 = 0x10000000000;
LABEL_35:
      if (v21)
        v16 = v22;
      goto LABEL_22;
    }
    v24 = (uint64_t)COERCE_DOUBLE(a2 - 0x2000000000000);
    if ((double)v24 != COERCE_DOUBLE(a2 - 0x2000000000000))
    {
LABEL_47:
      v16 = 0x2000000000;
      goto LABEL_22;
    }
    if (v24)
    {
      if ((unint64_t)(v24 + 0x8000000000000) >> 52)
        goto LABEL_47;
    }
    else if ((uint64_t)a2 < 0x2000000000000)
    {
      goto LABEL_47;
    }
    v16 = 0x1000000000;
    goto LABEL_22;
  }
  v32 = a2;
  if ((v9 & 0xFFFFFFF3FFFFFFFFLL) != 0)
    return 0;
  result = JSC::DFG::AbstractValue::validateTypeAcceptingBoxedInt52(a1, a2);
  if (!(_DWORD)result)
    return result;
  v25 = *(_QWORD *)(a1 + 24);
  if (v25)
  {
    v26 = (unint64_t)v25 >= 0xFFFE000000000000;
    v27 = (uint64_t)COERCE_DOUBLE(v25 - 0x2000000000000);
    v25 = (int)v25;
    if (!v26)
      v25 = v27;
    v28 = (double)v25;
    v29 = (uint64_t)COERCE_DOUBLE(v32 - 0x2000000000000);
    if (v32 >= 0xFFFE000000000000)
      v29 = (int)v32;
    if (*(_QWORD *)&v28 != COERCE__INT64((double)v29))
      return 0;
  }
  if (!v32)
    return 1;
  a2 = v32;
  if ((v32 & 0xFFFE000000000002) != 0)
    return 1;
LABEL_25:
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
  result = JSC::DFG::StructureAbstractValue::contains((JSC::DFG::StructureAbstractValue *)a1, v18, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v19 = *((unsigned __int8 *)v18 + 9);
    if ((v19 - 39) <= 0xA)
      v20 = JSC::typedArrayModes[v19 - 39];
    else
      v20 = 1 << *((_BYTE *)v18 + 8);
    return (v20 & *(_DWORD *)(a1 + 16)) != 0;
  }
  return result;
}

void JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::handleFire(uint64_t *a1, double a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD v11[2];
  const void *v12[4];

  if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
  {
    v12[0] = a1;
    WTF::dataLog<char [19],WTF::RawPointer,char [3],JSC::ObjectPropertyCondition,char [6],JSC::CodeBlock,char [2]>("Firing watchpoint ", v12, " (", (JSC::ObjectPropertyCondition *)(a1 + 1), ") on ", a1[10], "\n");
  }
  v12[0] = WTF::ScopedLambdaFunctor<void ()(WTF::PrintStream &),JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::handleFire(JSC::VM &,JSC::FireDetail const&)::$_0>::implFunction;
  v12[1] = v12;
  v12[2] = a1;
  v12[3] = a4;
  v11[0] = &off_1E358C1B0;
  v11[1] = v12;
  JSC::CodeBlock::jettison(a1[10], 8u, 1, (int64_t)v11, a2, a6, a7, a8, a9);
}

uint64_t WTF::dataLog<char [19],WTF::RawPointer,char [3],JSC::ObjectPropertyCondition,char [6],JSC::CodeBlock,char [2]>(const char *a1, const void **a2, const char *a3, JSC::ObjectPropertyCondition *a4, const char *a5, uint64_t a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  WTF::PrintStream::printf(v16, "%p", *a2);
  WTF::PrintStream::printf(v16, "%s", a3);
  JSC::ObjectPropertyCondition::dumpInContext(a4, v16, 0);
  WTF::PrintStream::printf(v16, "%s", a5);
  JSC::CodeBlock::dumpAssumingJITType(a6);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

unint64_t JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::isValid(JSC::DFG::AdaptiveInferredPropertyValueWatchpoint *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;

  v8 = *((_QWORD *)this + 10);
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) == 0)
      return *(_BYTE *)(v8 - 80) & 1;
    return 1;
  }
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFC000);
  if (!*(_BYTE *)(v9 + 10))
    return JSC::MarkedBlock::Handle::isLive(v9, v8, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD **)(v11 + 104);
  v13 = (_QWORD *)(v11 + 104);
  v12 = v14;
  if (v14 == v13)
    return 1;
  v15 = 0;
  do
  {
    v16 = (_QWORD *)*v12;
    v15 |= JSC::FreeList::contains(v12 + 3, v8);
    v12 = v16;
  }
  while (v16 != v13);
  return v15 == 0;
}

uint64_t JSC::DFG::AdaptiveStructureWatchpoint::AdaptiveStructureWatchpoint(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 11;
  *(_BYTE *)(this + 21) = 0;
  *(_DWORD *)(this + 17) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void JSC::DFG::AdaptiveStructureWatchpoint::fireInternal(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD v33[2];
  const void *v34[4];

  v10 = *(unsigned int *)(a1 + 17);
  v11 = v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) == 0 && (*(_BYTE *)(v11 - 80) & 1) == 0)
      return;
  }
  else
  {
    v12 = *(_QWORD *)(v11 & 0xFFFFFFC000);
    if (*(_BYTE *)(v12 + 10))
    {
      v26 = *(_QWORD *)(v12 + 24);
      v29 = *(_QWORD **)(v26 + 104);
      v28 = (_QWORD *)(v26 + 104);
      v27 = v29;
      if (v29 != v28)
      {
        v30 = 0;
        do
        {
          v31 = (_QWORD *)*v27;
          v30 |= JSC::FreeList::contains(v27 + 3, v11);
          v27 = v31;
        }
        while (v31 != v28);
        if ((_BYTE)v30)
          return;
      }
    }
    else if ((JSC::MarkedBlock::Handle::isLive(v12, v11, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      return;
    }
  }
  JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v20)
  {
    JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 0, v13, v14, v15, v16, v17, v18);
    if ((v21 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1982D595CLL);
    }
    v22 = 16 * (**(_DWORD **)(a1 + 24) & 0xFFFFFFFE);
    v23 = *(_QWORD *)(v22 + 0x60);
    if ((v23 & 1) != 0)
    {
      v32 = (v23 >> 1) & 3;
      v23 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v23 = 1;
      *(_BYTE *)(v23 + 4) = v32;
      *(_BYTE *)(v23 + 5) = 0;
      *(_QWORD *)(v23 + 8) = v23 + 8;
      *(_QWORD *)(v23 + 16) = v23 + 8;
      __dmb(0xAu);
      *(_QWORD *)(v22 + 96) = v23;
    }
    v25 = *(_QWORD *)(v23 + 8);
    v24 = (_QWORD *)(v23 + 8);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v24;
    *v24 = a1;
    *(_QWORD *)(v25 + 8) = a1;
    *((_WORD *)v24 - 2) = 257;
  }
  else
  {
    if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
    {
      v34[0] = (const void *)a1;
      WTF::dataLog<char [19],WTF::RawPointer,char [3],JSC::ObjectPropertyCondition,char [6],JSC::CodeBlock,char [2]>("Firing watchpoint ", v34, " (", (JSC::ObjectPropertyCondition *)(a1 + 24), ") on ", *(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32), "\n");
    }
    v34[0] = WTF::ScopedLambdaFunctor<void ()(WTF::PrintStream &),JSC::DFG::AdaptiveStructureWatchpoint::fireInternal(JSC::VM &,JSC::FireDetail const&)::$_0>::implFunction;
    v34[1] = v34;
    v34[2] = (const void *)a1;
    v34[3] = a3;
    v33[0] = &off_1E358C1B0;
    v33[1] = v34;
    JSC::CodeBlock::jettison(*(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32), 8u, 1, (int64_t)v33, v19, v15, v16, v17, v18);
  }
}

uint64_t JSC::DFG::performArgumentsElimination(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  JSC::DFG *v33;
  __int128 v34;
  char v35;
  WTF *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  __int128 v40;
  double v41;
  char v42;
  __int128 *v43;

  v29 = -1;
  v30 = -1;
  v31 = 0;
  v32 = 256;
  v33 = this;
  *(_QWORD *)&v34 = "arguments elimination";
  *((_QWORD *)&v34 + 1) = 22;
  v35 = 0;
  v36 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v29);
  v37 = 0;
  v39[0] = "DFG";
  v39[1] = 4;
  v40 = v34;
  v41 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v26 = mach_absolute_time();
    v28 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v28 != -1)
    {
      *(_QWORD *)&v38 = &v42;
      v43 = &v38;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v27) = dword_1ECF4400C;
    v41 = (double)(v26 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v27 * 1000000000.0);
  }
  if ((_DWORD)v9)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v24 = (*(_DWORD *)(*((_QWORD *)v33 + 3) + 16) & 0xFFFFFFFE) == 4) : (v24 = 0),
          !v24 ? (v25 = BYTE2(qword_1ECF4C32A) == 0) : (v25 = 0),
          !v25))
    {
      v38 = v34;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v33 + 1088, "Phase ", (uint64_t)&v38, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v39);
  v17 = v37;
  if (v37)
  {
    v20 = *(unsigned int *)(v37 - 4);
    if ((_DWORD)v20)
    {
      v21 = v37 + 16;
      do
      {
        if (*(_QWORD *)(v21 - 16) != -1)
        {
          v22 = *(_QWORD *)(v21 + 16);
          if (v22)
            WTF::fastFree(v22 - 16, v10, v11, v12, v13, v14, v15, v16);
          v23 = *(_QWORD *)(v21 - 8);
          if (v23)
          {
            *(_QWORD *)(v21 - 8) = 0;
            *(_DWORD *)v21 = 0;
            WTF::fastFree(v23, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        v21 += 40;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree(v17 - 16, v10, v11, v12, v13, v14, v15, v16);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v35)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v29, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
  v18 = v36;
  v36 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v18;
  }
  return v9;
}

BOOL JSC::DFG::argumentsInvolveStackSlot(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  char v5;
  unint64_t v6;
  int v7;
  int v9;

  v2 = *a1 & 0xFFFFFFFF8;
  if ((*a1 & 1) != 0)
    v2 = *(_QWORD *)v2;
  if (HIDWORD(a2) == 2)
    return 0;
  if (v2)
  {
    v5 = *(_BYTE *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 24);
    v7 = HIDWORD(v6) & 0xFFFFF | ((int)(v6 >> 28) >> 24 << 20);
    if ((v5 & 1) != 0 && v7 + 3 == (_DWORD)a2)
      return 1;
    if ((v6 >> 60) - 3 <= 2 && v7 + 4 == (_DWORD)a2)
      return 1;
    v9 = v7 + 6;
    if (v9 <= (int)a2)
      return (int)((v6 & 0x3FFFFF) + v9 - 1) > (int)a2;
    return 0;
  }
  return (a2 & 0x80000000) == 0 && (_DWORD)a2 != 5;
}

uint64_t JSC::DFG::emitCodeToGetArgumentsArrayLength(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ArgumentsArrayLength;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::DFG::NodeOrigin *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t inserted;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  _BYTE v175[24];
  _BYTE v176[24];
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  _BYTE v190[24];
  _BYTE v191[24];
  _BYTE v192[24];
  _BYTE v193[24];
  _BYTE v194[24];
  _BYTE v195[24];
  _BYTE v196[32];

  v8 = a5;
  v13 = *a1;
  v14 = *(unsigned __int16 *)(a2 + 18);
  switch(*(_WORD *)(a2 + 18))
  {
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x161:
    case 0x162:
    case 0x163:
      goto LABEL_2;
    case 0x15E:
      v61 = *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL;
      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v196, (const JSC::DFG::NodeOrigin *)a4);
      ArgumentsArrayLength = JSC::DFG::emitCodeToGetArgumentsArrayLength(a1, v61, a3, v196, v8);
      v69 = (JSC::DFG::NodeOrigin *)v196;
      goto LABEL_39;
    case 0x15F:
      if (*(_DWORD *)(a2 + 32))
      {
        v75 = 0;
        ArgumentsArrayLength = 0;
        v76 = *(uint64_t **)(a2 + 72);
        v77 = a3;
        do
        {
          v78 = (unint64_t *)(2 * *v76);
          if (*v76 < 0)
            v79 = 63;
          else
            v79 = *v78;
          if (v79 > v75
            && ((v80 = (uint64_t *)(v78 + 1), *v76 >= 0) ? (v81 = v80) : (v81 = v76),
                ((*(unint64_t *)((char *)v81 + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v75) & 1) != 0))
          {
            v82 = v75 + *(_QWORD *)(a2 + 24);
            if (*(_DWORD *)(v13 + 164) <= v82)
            {
              __break(0xC471u);
              JUMPOUT(0x1982D6728);
            }
            v83 = *(_QWORD *)(v13 + 152);
            v84 = *(_QWORD *)(v83 + 8 * v82) & 0xFF00FFFFFFFFFFFFLL;
            if (*(_WORD *)(v84 + 0x12) != 350)
            {
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v13, (JSC::DFG::Node *)v84, (const WTF::CString *)"./dfg/DFGArgumentsUtilities.cpp", (const char *)0x59, "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)", "child->op() == PhantomSpread");
              WTFCrashWithInfoImpl(89, "./dfg/DFGArgumentsUtilities.cpp", "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)");
            }
            v174 = v77;
            v85 = *(_QWORD *)((*(_QWORD *)(v83 + 8 * v82) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
            v86 = *(unsigned __int16 *)(v85 + 0x12);
            if (v86 != 349 && v86 != 352)
            {
              JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v13, (JSC::DFG::Node *)(*(_QWORD *)(v84 + 24) & 0xFF00FFFFFFFFFFFFLL), (const WTF::CString *)"./dfg/DFGArgumentsUtilities.cpp", (const char *)0x5C, "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)", "child->child1()->op() == PhantomCreateRest || child->child1()->op() == PhantomNewArrayBuffer");
              WTFCrashWithInfoImpl(92, "./dfg/DFGArgumentsUtilities.cpp", "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)");
            }
            v173 = v76;
            JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v195, (const JSC::DFG::NodeOrigin *)a4);
            v87 = JSC::DFG::emitCodeToGetArgumentsArrayLength(a1, v85, a3, v195, 0);
            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v195, v88, v89, v90, v91, v92, v93, v94);
            if (ArgumentsArrayLength)
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v194, (const JSC::DFG::NodeOrigin *)a4);
              v77 = v174;
              ArgumentsArrayLength = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)a1, v174, 0x300000000, 0x3Eu, (uint64_t)v194, 2, ArgumentsArrayLength & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, v87 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v194, v95, v96, v97, v98, v99, v100, v101);
              v76 = v173;
            }
            else
            {
              ArgumentsArrayLength = v87;
              v76 = v173;
              v77 = v174;
            }
          }
          else
          {
            LODWORD(v8) = v8 + 1;
          }
          ++v75;
        }
        while (v75 < *(unsigned int *)(a2 + 32));
        if (ArgumentsArrayLength)
        {
          if (!(_DWORD)v8)
            return ArgumentsArrayLength;
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v193, (const JSC::DFG::NodeOrigin *)a4);
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v192, (const JSC::DFG::NodeOrigin *)a4);
          if ((v8 & 0x80000000) != 0)
            v105 = COERCE__INT64((double)v8) + 0x2000000000000;
          else
            v105 = v8 | 0xFFFE000000000000;
          inserted = JSC::DFG::InsertionSet::insertConstantForUse(a1, v77, (uint64_t)v192, v105, 1, v102, v103, v104);
          ArgumentsArrayLength = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)a1, v77, 0x300000000, 0x3Eu, (uint64_t)v193, 2, ArgumentsArrayLength & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000, inserted);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v192, v107, v108, v109, v110, v111, v112, v113);
          v69 = (JSC::DFG::NodeOrigin *)v193;
          goto LABEL_39;
        }
        v114 = v77;
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v191, (const JSC::DFG::NodeOrigin *)a4);
        if ((v8 & 0x80000000) != 0)
        {
          v118 = COERCE__INT64((double)v8) + 0x2000000000000;
          goto LABEL_74;
        }
      }
      else
      {
        v114 = a3;
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v191, (const JSC::DFG::NodeOrigin *)a4);
      }
      v118 = v8 | 0xFFFE000000000000;
LABEL_74:
      ArgumentsArrayLength = JSC::DFG::InsertionSet::insertConstant(a1, v114, (uint64_t)v191, v118, 0, v115, v116, v117);
      v69 = (JSC::DFG::NodeOrigin *)v191;
      goto LABEL_39;
    case 0x160:
      goto LABEL_43;
    default:
      if (v14 != 276)
      {
        if (v14 != 267)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*a1, (JSC::DFG::Node *)a2, (const WTF::CString *)"./dfg/DFGArgumentsUtilities.cpp", (const char *)0x4D, "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)", "arguments->op() == CreateDirectArguments || arguments->op() == CreateScopedArguments || arguments->op() == CreateClonedArguments || arguments->op() == CreateRest || arguments->op() == NewArrayBuffer || arguments->op() == PhantomDirectArguments || arguments->op() == PhantomClonedArguments || arguments->op() == PhantomCreateRest || arguments->op() == PhantomNewArrayBuffer || arguments->op() == PhantomNewArrayWithSpread || arguments->op() == PhantomSpread");
          WTFCrashWithInfoImpl(77, "./dfg/DFGArgumentsUtilities.cpp", "Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(InsertionSet &, Node *, unsigned int, NodeOrigin, BOOL)");
        }
LABEL_43:
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v190, (const JSC::DFG::NodeOrigin *)a4);
        v73 = (*(_DWORD *)(**(_QWORD **)(a2 + 72) + 8) + v8);
        if ((int)v73 < 0)
          v74 = COERCE__INT64((double)v73) + 0x2000000000000;
        else
          v74 = v73 | 0xFFFE000000000000;
        ArgumentsArrayLength = JSC::DFG::InsertionSet::insertConstant(a1, a3, (uint64_t)v190, v74, 0, v70, v71, v72);
        v69 = (JSC::DFG::NodeOrigin *)v190;
LABEL_39:
        JSC::DFG::NodeOrigin::~NodeOrigin(v69, v62, v63, v64, v65, v66, v67, v68);
        return ArgumentsArrayLength;
      }
LABEL_2:
      v15 = (_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if ((*(_QWORD *)a2 & 1) != 0)
        v15 = (_QWORD *)*v15;
      if (v14 == 349 || v14 == 276)
        v16 = *(_DWORD *)(a2 + 72);
      else
        v16 = 0;
      if (!v15)
      {
        v17 = *(_QWORD *)a4;
        if ((*(_QWORD *)a4 & 1) != 0)
        {
          v152 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
          if ((v17 & 2) != 0
            || ((v153 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v153 != 0x3FFFFFFF)
              ? (v154 = (_DWORD)v153 == -1)
              : (v154 = 1),
                v154))
          {
            v155 = 2;
          }
          else if (v153 >> 28)
          {
            v169 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v169 = v152;
            *(_DWORD *)(v169 + 8) = v153;
            v155 = 1;
            v152 = v169;
          }
          else
          {
            v155 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
            v152 = v153 << 36;
          }
          v17 = v152 | v155;
        }
        v184 = v17;
        v18 = *(_QWORD *)(a4 + 8);
        if ((v18 & 1) != 0)
        {
          v156 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
          if ((v18 & 2) != 0
            || (v157 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v157 == 0x3FFFFFFF)
            || (_DWORD)v157 == -1)
          {
            v158 = 2;
          }
          else if (v157 >> 28)
          {
            v170 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v170 = v156;
            *(_DWORD *)(v170 + 8) = v157;
            v158 = 1;
            v156 = v170;
          }
          else
          {
            v158 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
            v156 = v157 << 36;
          }
          v18 = v156 | v158;
        }
        v15 = 0;
        v185 = v18;
        v186 = *(_WORD *)(a4 + 16);
        goto LABEL_11;
      }
      v45 = v15[3];
      if ((v45 >> 60) - 3 <= 2)
      {
        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v184, (const JSC::DFG::NodeOrigin *)a4);
LABEL_11:
        v26 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)a1, a3, 0x300000000, 13, (uint64_t)&v184, (uint64_t)v15, a7, a8);
        if ((v185 & 1) != 0 && (v185 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v185 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
        if ((v184 & 1) != 0 && (v184 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v184 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
        v27 = *(_QWORD *)a4;
        if ((*(_QWORD *)a4 & 1) != 0)
        {
          v140 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
          if ((v27 & 2) != 0
            || (v141 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v141 == 0x3FFFFFFF)
            || (_DWORD)v141 == -1)
          {
            v142 = 2;
          }
          else if (v141 >> 28)
          {
            v165 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v165 = v140;
            *(_DWORD *)(v165 + 8) = v141;
            v142 = 1;
            v140 = v165;
          }
          else
          {
            v142 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
            v140 = v141 << 36;
          }
          v27 = v140 | v142;
        }
        v181 = v27;
        v28 = *(_QWORD *)(a4 + 8);
        if ((v28 & 1) != 0)
        {
          v143 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
          if ((v28 & 2) != 0
            || (v144 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v144 == 0x3FFFFFFF)
            || (_DWORD)v144 == -1)
          {
            v145 = 2;
          }
          else if (v144 >> 28)
          {
            v166 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v166 = v143;
            *(_DWORD *)(v166 + 8) = v144;
            v145 = 1;
            v143 = v166;
          }
          else
          {
            v145 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
            v143 = v144 << 36;
          }
          v28 = v143 | v145;
        }
        v182 = v28;
        v183 = *(_WORD *)(a4 + 16);
        v29 = v26 & 0xFF00FFFFFFFFFFFFLL;
        v30 = *(_QWORD *)a4;
        if ((*(_QWORD *)a4 & 1) != 0)
        {
          v146 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
          if ((v30 & 2) != 0
            || (v147 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v147 == 0x3FFFFFFF)
            || (_DWORD)v147 == -1)
          {
            v148 = 2;
          }
          else if (v147 >> 28)
          {
            v167 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v167 = v146;
            *(_DWORD *)(v167 + 8) = v147;
            v148 = 1;
            v146 = v167;
          }
          else
          {
            v148 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
            v146 = v147 << 36;
          }
          v30 = v146 | v148;
        }
        v31 = v29 | 0x4000000000000;
        v178 = v30;
        v32 = *(_QWORD *)(a4 + 8);
        if ((v32 & 1) != 0)
        {
          v149 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
          if ((v32 & 2) != 0
            || (v150 = *(unsigned int *)((v32 & 0xFFFFFFFF8) + 8), (_DWORD)v150 == 0x3FFFFFFF)
            || (_DWORD)v150 == -1)
          {
            v151 = 2;
          }
          else if (v150 >> 28)
          {
            v168 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v168 = v149;
            *(_DWORD *)(v168 + 8) = v150;
            v151 = 1;
            v149 = v168;
          }
          else
          {
            v151 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
            v149 = v150 << 36;
          }
          v32 = v149 | v151;
        }
        v179 = v32;
        v180 = *(_WORD *)(a4 + 16);
        v33 = v16 + (v8 ^ 1);
        if ((int)(v16 + (v8 ^ 1)) < 0)
          v34 = COERCE__INT64((double)v33) + 0x2000000000000;
        else
          v34 = v33 | 0xFFFE000000000000;
        v35 = JSC::DFG::InsertionSet::insertConstantForUse(a1, a3, (uint64_t)&v178, v34, 1, v23, v24, v25);
        ArgumentsArrayLength = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)a1, a3, 0x300000000, 0x40u, (uint64_t)&v181, 1, v31, v35);
        if ((v179 & 1) != 0 && (v179 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v179 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
        if ((v178 & 1) != 0 && (v178 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v178 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
        if ((v182 & 1) != 0 && (v182 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v182 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
        if ((v181 & 1) != 0 && (v181 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v181 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
        if (v16)
        {
          v119 = ArgumentsArrayLength & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000;
          v177 = v119;
          v120 = *(unsigned int *)(v13 + 164);
          if ((_DWORD)v120 == *(_DWORD *)(v13 + 160))
          {
            WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v13 + 152, (unint64_t)&v177, v37, v38, v39, v40, v41, v42);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v120) = v119;
            *(_DWORD *)(v13 + 164) = v120 + 1;
          }
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v176, (const JSC::DFG::NodeOrigin *)a4);
          v124 = JSC::DFG::InsertionSet::insertConstantForUse(a1, a3, (uint64_t)v176, v8 | 0xFFFE000000000000, 1, v121, v122, v123);
          v177 = v124;
          v132 = *(unsigned int *)(v13 + 164);
          if ((_DWORD)v132 == *(_DWORD *)(v13 + 160))
          {
            WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v13 + 152, (unint64_t)&v177, v126, v127, v128, v129, v130, v131);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v132) = v124;
            *(_DWORD *)(v13 + 164) = v132 + 1;
          }
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v176, v125, v126, v127, v128, v129, v130, v131);
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v175, (const JSC::DFG::NodeOrigin *)a4);
          ArgumentsArrayLength = JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>((uint64_t)a1, a3, 0x300000000, 0, 0x48u, (uint64_t)v175, 0, 0, v120, *(unsigned int *)(v13 + 164) - v120);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v175, v133, v134, v135, v136, v137, v138, v139);
          *(_DWORD *)(ArgumentsArrayLength + 56) = *(_DWORD *)(ArgumentsArrayLength + 56) & 0xFFFFFFF8 | 4;
        }
        return ArgumentsArrayLength;
      }
      v46 = (v45 & 0x3FFFFF) - (a5 ^ 1);
      v47 = v46 >= v16;
      v48 = v46 - v16;
      if (v47)
        v49 = v48;
      else
        v49 = 0;
      v50 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 1) != 0)
      {
        v159 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
        if ((v50 & 2) != 0
          || (v160 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v160 == 0x3FFFFFFF)
          || (_DWORD)v160 == -1)
        {
          v161 = 2;
        }
        else if (v160 >> 28)
        {
          v171 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v171 = v159;
          *(_DWORD *)(v171 + 8) = v160;
          v161 = 1;
          v159 = v171;
        }
        else
        {
          v161 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
          v159 = v160 << 36;
        }
        v50 = v159 | v161;
      }
      v51 = a3;
      v187 = v50;
      v52 = *(_QWORD *)(a4 + 8);
      if ((v52 & 1) != 0)
      {
        v162 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
        if ((v52 & 2) != 0
          || (v163 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v163 == 0x3FFFFFFF)
          || (_DWORD)v163 == -1)
        {
          v164 = 2;
        }
        else if (v163 >> 28)
        {
          v172 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v172 = v162;
          *(_DWORD *)(v172 + 8) = v163;
          v164 = 1;
          v162 = v172;
        }
        else
        {
          v164 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
          v162 = v163 << 36;
        }
        v52 = v162 | v164;
      }
      v188 = v52;
      v189 = *(_WORD *)(a4 + 16);
      if ((v49 & 0x80000000) != 0)
        v53 = COERCE__INT64((double)v49) + 0x2000000000000;
      else
        v53 = v49 | 0xFFFE000000000000;
      ArgumentsArrayLength = JSC::DFG::InsertionSet::insertConstant(a1, v51, (uint64_t)&v187, v53, 0, a6, a7, a8);
      if ((v188 & 1) != 0 && (v188 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v188 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
      if ((v187 & 1) != 0 && (v187 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v187 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
      return ArgumentsArrayLength;
  }
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;

  v8 = a4;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v29 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v30 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v53 = a8;
      v55 = v11;
      v47 = a7;
      v49 = a3;
      v51 = a6;
      v43 = a5;
      v37 = v29;
      v38 = v30;
      v39 = WTF::fastMalloc((WTF *)0x10);
      a5 = v43;
      a3 = v49;
      a6 = v51;
      v8 = a4;
      a7 = v47;
      v29 = v39;
      a8 = v53;
      v11 = v55;
      *(_QWORD *)v29 = v37;
      *(_DWORD *)(v29 + 8) = v38;
      v32 = 1;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v12 = v29 | v32;
  }
  v57 = v12;
  v13 = *(_QWORD *)(a5 + 8);
  if ((v13 & 1) != 0)
  {
    v33 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v34 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v54 = a8;
      v56 = v11;
      v48 = a7;
      v50 = a3;
      v52 = a6;
      v46 = v8;
      v44 = a5;
      v40 = v33;
      v41 = v34;
      v42 = WTF::fastMalloc((WTF *)0x10);
      a5 = v44;
      a3 = v50;
      a6 = v52;
      v8 = v46;
      a7 = v48;
      v33 = v42;
      a8 = v54;
      v11 = v56;
      *(_QWORD *)v33 = v40;
      *(_DWORD *)(v33 + 8) = v41;
      v36 = 1;
    }
    else
    {
      v36 = v33;
      v33 = v34 << 36;
    }
    v13 = v33 | v36;
  }
  v58 = v13;
  v59 = *(_WORD *)(a5 + 16);
  v14 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(v11, a3, v8, (uint64_t)&v57, a6, a7, a8);
  *(_QWORD *)&v60 = a2;
  *((_QWORD *)&v60 + 1) = v14;
  v22 = (_QWORD *)(a1 + 8);
  v23 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v23 && *(_QWORD *)(*v22 + 16 * v23 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v60, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 16))
    {
      v28 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, (void *)(v23 + 1), (unint64_t)&v60, v17, v18, v19, v20, v21);
      v23 = *(unsigned int *)(a1 + 20);
      v24 = *(_QWORD *)(a1 + 8);
      v25 = *v28;
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 8);
      v25 = v60;
    }
    *(_OWORD *)(v24 + 16 * v23) = v25;
    ++*(_DWORD *)(a1 + 20);
  }
  v26 = *((_QWORD *)&v60 + 1);
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  return v26;
}

unint64_t JSC::DFG::InsertionSet::insertConstantForUse(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t inserted;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;

  v11 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v26 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v27 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v34 = v26;
      v38 = a3;
      v40 = a4;
      v35 = v27;
      v26 = WTF::fastMalloc((WTF *)0x10);
      a3 = v38;
      a4 = v40;
      *(_QWORD *)v26 = v34;
      *(_DWORD *)(v26 + 8) = v35;
      v29 = 1;
    }
    else
    {
      v29 = v26;
      v26 = v27 << 36;
    }
    v11 = v26 | v29;
  }
  v42 = v11;
  v12 = *(_QWORD *)(a3 + 8);
  if ((v12 & 1) != 0)
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v31 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v36 = v30;
      v39 = a3;
      v41 = a4;
      v37 = v31;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a3 = v39;
      a4 = v41;
      *(_QWORD *)v30 = v36;
      *(_DWORD *)(v30 + 8) = v37;
      v33 = 1;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v12 = v30 | v33;
  }
  v43 = v12;
  v44 = *(_WORD *)(a3 + 16);
  v13 = JSC::DFG::Graph::freeze(*a1, a4, a3, a4, a5, a6, a7, a8);
  inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t)a1, a2, (uint64_t)&v42, (unint64_t *)v13, a5, v14, v15, v16);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  return inserted;
}

uint64_t JSC::DFG::InsertionSet::insertConstant(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inserted;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  __int16 v42;

  v8 = a5;
  v11 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v27 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v28 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v39 = a4;
      v35 = a3;
      v36 = WTF::fastMalloc((WTF *)0x10);
      a3 = v35;
      a4 = v39;
      *(_QWORD *)v36 = v27;
      *(_DWORD *)(v36 + 8) = v28;
      v30 = 1;
      v27 = v36;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v11 = v27 | v30;
  }
  v41[0] = v11;
  v12 = *(_QWORD *)(a3 + 8);
  if ((v12 & 1) != 0)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v37 = v31;
      v40 = a4;
      v38 = a3;
      v31 = WTF::fastMalloc((WTF *)0x10);
      a3 = v38;
      a4 = v40;
      *(_QWORD *)v31 = v37;
      *(_DWORD *)(v31 + 8) = v32;
      v34 = 1;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v12 = v31 | v34;
    v13 = ((v31 | v34) & 1) == 0;
  }
  else
  {
    v13 = 1;
  }
  v41[1] = v12;
  v42 = *(_WORD *)(a3 + 16);
  v14 = JSC::DFG::Graph::freeze(*a1, a4, a3, a4, a5, a6, a7, a8);
  inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t)a1, a2, (uint64_t)v41, (unint64_t *)v14, v8, v15, v16, v17);
  if (!v13 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return inserted;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(uint64_t a1, unint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  __int128 v66;
  __int16 v67;
  __int16 v68;
  uint64_t v69;

  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v62 = a4;
      v54 = a5;
      v58 = a6;
      v48 = WTF::fastMalloc((WTF *)0x10);
      a5 = v54;
      a6 = v58;
      a4 = v62;
      *(_QWORD *)v48 = v32;
      *(_DWORD *)(v48 + 8) = v33;
      v35 = 1;
      v32 = v48;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v12 = v32 | v35;
  }
  v13 = *(_QWORD *)(a5 + 8);
  if ((v13 & 1) != 0)
  {
    v36 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v37 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v49 = v36;
      v63 = a4;
      v55 = a5;
      v59 = a6;
      v36 = WTF::fastMalloc((WTF *)0x10);
      a5 = v55;
      a6 = v59;
      a4 = v63;
      *(_QWORD *)v36 = v49;
      *(_DWORD *)(v36 + 8) = v37;
      v39 = 1;
    }
    else
    {
      v39 = v36;
      v36 = v37 << 36;
    }
    v13 = v36 | v39;
  }
  v14 = *(_WORD *)(a5 + 16);
  v15 = v12;
  if ((v12 & 1) != 0)
  {
    v40 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v41 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v50 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v64 = a4;
      v60 = a6;
      v56 = *(_WORD *)(a5 + 16);
      v51 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v40 = WTF::fastMalloc((WTF *)0x10);
      v14 = v56;
      a6 = v60;
      a4 = v64;
      *(_QWORD *)v40 = v50;
      *(_DWORD *)(v40 + 8) = v51;
      v43 = 1;
    }
    else
    {
      v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v15 = v40 | v43;
  }
  *(_QWORD *)&v66 = v15;
  v16 = v13;
  if ((v13 & 1) != 0)
  {
    v44 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v45 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v52 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v65 = a4;
      v61 = a6;
      v57 = v14;
      v53 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
      v44 = WTF::fastMalloc((WTF *)0x10);
      v14 = v57;
      a6 = v61;
      a4 = v65;
      *(_QWORD *)v44 = v52;
      *(_DWORD *)(v44 + 8) = v53;
      v47 = 1;
    }
    else
    {
      v47 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v16 = v44 | v47;
  }
  *((_QWORD *)&v66 + 1) = v16;
  v67 = v14;
  v69 = a6;
  v68 = a4;
  v24 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(v11 + 1032, &v68, (uint64_t)&v66, &v69, a5, a6, a7, a8);
  if ((BYTE8(v66) & 1) != 0 && (*((_QWORD *)&v66 + 1) & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*((_QWORD *)&v66 + 1) & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v66 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v24 + 64) |= a3;
  *(_QWORD *)&v66 = a2;
  *((_QWORD *)&v66 + 1) = v24;
  v25 = (_QWORD *)(a1 + 8);
  v26 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v26 && *(_QWORD *)(*v25 + 16 * v26 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v66, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 16))
    {
      v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, (void *)(v26 + 1), (unint64_t)&v66, v19, v20, v21, v22, v23);
      v26 = *(unsigned int *)(a1 + 20);
      v27 = *(_QWORD *)(a1 + 8);
      v28 = *v31;
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 8);
      v28 = v66;
    }
    *(_OWORD *)(v27 + 16 * v26) = v28;
    ++*(_DWORD *)(a1 + 20);
  }
  v29 = *((_QWORD *)&v66 + 1);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  return v29;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  unsigned __int16 v11;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  __int128 v67;

  v11 = a5;
  v14 = a9;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)a6;
  if ((*(_QWORD *)a6 & 1) != 0)
  {
    v34 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v35 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v35 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v35 >> 28)
    {
      v60 = a8;
      v62 = v15;
      v52 = a7;
      v54 = a6;
      v50 = a4;
      v56 = a3;
      v42 = v34;
      v43 = v35;
      v44 = WTF::fastMalloc((WTF *)0x10);
      a6 = v54;
      a3 = v56;
      v14 = a9;
      a4 = v50;
      v11 = a5;
      a7 = v52;
      v34 = v44;
      a8 = v60;
      v15 = v62;
      *(_QWORD *)v34 = v42;
      *(_DWORD *)(v34 + 8) = v43;
      v37 = 1;
    }
    else
    {
      v37 = v34;
      v34 = v35 << 36;
    }
    v16 = v34 | v37;
  }
  v17 = a10;
  v64 = v16;
  v18 = *(_QWORD *)(a6 + 8);
  if ((v18 & 1) != 0)
  {
    v38 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v39 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
        ? (v40 = (_DWORD)v39 == -1)
        : (v40 = 1),
          v40))
    {
      v41 = 2;
    }
    else if (v39 >> 28)
    {
      v61 = a8;
      v63 = v15;
      v53 = a7;
      v55 = a6;
      v59 = v11;
      v49 = v14;
      v51 = a4;
      v57 = a3;
      v45 = v38;
      v46 = v39;
      v47 = WTF::fastMalloc((WTF *)0x10);
      a6 = v55;
      a3 = v57;
      v14 = v49;
      a4 = v51;
      v11 = v59;
      a7 = v53;
      v48 = v47;
      a8 = v61;
      v15 = v63;
      *(_QWORD *)v48 = v45;
      *(_DWORD *)(v48 + 8) = v46;
      v41 = 1;
      v38 = v48;
      v17 = a10;
    }
    else
    {
      v41 = v38;
      v38 = v39 << 36;
    }
    v18 = v38 | v41;
  }
  v65 = v18;
  v66 = *(_WORD *)(a6 + 16);
  v19 = JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>(v15, a3, a4, v11, (uint64_t)&v64, a7, a8, v14, v17);
  *(_QWORD *)&v67 = a2;
  *((_QWORD *)&v67 + 1) = v19;
  v27 = (_QWORD *)(a1 + 8);
  v28 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v28 && *(_QWORD *)(*v27 + 16 * v28 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v67, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    if ((_DWORD)v28 == *(_DWORD *)(a1 + 16))
    {
      v33 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, (void *)(v28 + 1), (unint64_t)&v67, v22, v23, v24, v25, v26);
      v28 = *(unsigned int *)(a1 + 20);
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *v33;
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = v67;
    }
    *(_OWORD *)(v29 + 16 * v28) = v30;
    ++*(_DWORD *)(a1 + 20);
  }
  v31 = *((_QWORD *)&v67 + 1);
  if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v65 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v64 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  return v31;
}

void JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::~AdaptiveInferredPropertyValueWatchpoint(JSC::DFG::AdaptiveInferredPropertyValueWatchpoint *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3580B60;
  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (v1)
  {
    v2 = *((_QWORD *)this + 7);
    *v1 = v2;
    *(_QWORD *)(v2 + 8) = v1;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
}

void JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::~AdaptiveInferredPropertyValueWatchpoint(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E3580B60;
  v8 = *(_QWORD **)(this + 64);
  if (v8)
  {
    v9 = *(_QWORD *)(this + 56);
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 64) = 0;
  }
  v10 = *(_QWORD **)(this + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(this + 32);
    *v10 = v11;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t *JSC::DFG::RegisteredStructureSet::operator=(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    if ((*a1 & 1) != 0)
      WTF::fastFree(*a1 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v10 = *a2;
    if ((*a2 & 1) == 0 || v10 == 4)
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFDLL;
      v12 = v10 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v12 = v11;
      *a1 = v12;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(a1, a2);
    }
  }
  return a1;
}

void JSC::LazyFireDetail::~LazyFireDetail(JSC::LazyFireDetail *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::LazyFireDetail::dump(JSC::LazyFireDetail *this, WTF::PrintStream *a2)
{
  return (**((uint64_t (***)(_QWORD, WTF::PrintStream *))this + 1))(*(_QWORD *)(*((_QWORD *)this + 1) + 8), a2);
}

unint64_t JSC::DFG::InsertionSet::insertConstantForUse(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inserted;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int16 v45;

  if ((a5 - 49) < 3)
    v9 = 1;
  else
    v9 = 2 * ((_DWORD)a5 == 52);
  v10 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v23 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v42 = a1;
      v38 = a4;
      v30 = a2;
      v40 = v9;
      v31 = a3;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a3 = v31;
      v9 = v40;
      a2 = v30;
      a4 = v38;
      v33 = v32;
      a1 = v42;
      *(_QWORD *)v33 = v22;
      *(_DWORD *)(v33 + 8) = v23;
      v25 = 1;
      v22 = v33;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v10 = v22 | v25;
  }
  v44[0] = v10;
  v11 = *(_QWORD *)(a3 + 8);
  if ((v11 & 1) != 0)
  {
    v26 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v27 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v43 = a1;
      v37 = a3;
      v39 = a4;
      v34 = a2;
      v41 = v9;
      v35 = WTF::fastMalloc((WTF *)0x10);
      a3 = v37;
      a4 = v39;
      v9 = v41;
      a2 = v34;
      v36 = v35;
      a1 = v43;
      *(_QWORD *)v36 = v26;
      *(_DWORD *)(v36 + 8) = v27;
      v29 = 1;
      v26 = v36;
    }
    else
    {
      v29 = v26;
      v26 = v27 << 36;
    }
    v11 = v26 | v29;
    v12 = ((v26 | v29) & 1) == 0;
  }
  else
  {
    v12 = 1;
  }
  v44[1] = v11;
  v45 = *(_WORD *)(a3 + 16);
  inserted = JSC::DFG::InsertionSet::insertConstant(a1, a2, (uint64_t)v44, a4, v9, a6, a7, a8);
  if (!v12 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return inserted & 0xFF00FFFFFFFFFFFFLL | (a5 << 50);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(WTF::PrintStream &),JSC::DFG::AdaptiveInferredPropertyValueWatchpoint::handleFire(JSC::VM &,JSC::FireDetail const&)::$_0>::implFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  JSC::ObjectPropertyCondition *v4;
  WTF::PrintStream *v5;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (JSC::ObjectPropertyCondition *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "Adaptation of ");
  JSC::ObjectPropertyCondition::dumpInContext(v4, v5, 0);
  WTF::PrintStream::printf(v5, "%s", " failed: ");
  (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)v3 + 16))(v3, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(WTF::PrintStream &),JSC::DFG::AdaptiveStructureWatchpoint::fireInternal(JSC::VM &,JSC::FireDetail const&)::$_0>::implFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  JSC::ObjectPropertyCondition *v4;
  WTF::PrintStream *v5;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (JSC::ObjectPropertyCondition *)(*(_QWORD *)(a1 + 16) + 24);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "Adaptation of ");
  JSC::ObjectPropertyCondition::dumpInContext(v4, v5, 0);
  WTF::PrintStream::printf(v5, "%s", " failed: ");
  (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)v3 + 16))(v3, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  unsigned __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v19 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v20 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
        ? (v21 = (_DWORD)v20 == -1)
        : (v21 = 1),
          v21))
    {
      v22 = 2;
    }
    else if (v20 >> 28)
    {
      v41 = a7;
      v43 = a1;
      v33 = a5;
      v35 = a6;
      v39 = a3;
      v37 = a4;
      v27 = v20;
      v28 = WTF::fastMalloc((WTF *)0x10);
      a6 = v35;
      a4 = v37;
      a5 = v33;
      a3 = v39;
      v29 = v28;
      a7 = v41;
      a1 = v43;
      *(_QWORD *)v29 = v19;
      *(_DWORD *)(v29 + 8) = v27;
      v22 = 1;
      v19 = v29;
    }
    else
    {
      v22 = v19;
      v19 = v20 << 36;
    }
    v8 = v19 | v22;
  }
  v45 = v8;
  v9 = *(_QWORD *)(a4 + 8);
  if ((v9 & 1) != 0)
  {
    v23 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v24 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v42 = a7;
      v44 = a1;
      v34 = a5;
      v36 = a6;
      v40 = a3;
      v38 = a4;
      v30 = v24;
      v31 = WTF::fastMalloc((WTF *)0x10);
      a6 = v36;
      a4 = v38;
      a5 = v34;
      a3 = v40;
      v32 = v31;
      a7 = v42;
      a1 = v44;
      *(_QWORD *)v32 = v23;
      *(_DWORD *)(v32 + 8) = v30;
      v26 = 1;
      v23 = v32;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v9 = v23 | v26;
  }
  v46 = v9;
  v47 = *(_WORD *)(a4 + 16);
  v50 = a6;
  v51 = a5;
  v49 = a7;
  v48 = a3;
  v17 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>(a1 + 1032, &v48, (uint64_t)&v45, &v51, &v50, &v49);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(v17 + 64) |= a2;
  return v17;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;

  v12 = WTF::fastMalloc((WTF *)0x68);
  v13 = *a2;
  v14 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v33 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v34 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v45 = v13;
      v41 = v34;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v13 = v45;
      *(_QWORD *)v42 = v33;
      *(_DWORD *)(v42 + 8) = v41;
      v36 = 1;
      v33 = v42;
    }
    else
    {
      v36 = v33;
      v33 = v34 << 36;
    }
    v14 = v33 | v36;
  }
  v47 = v14;
  v15 = *(_QWORD *)(a3 + 8);
  if ((v15 & 1) != 0)
  {
    v37 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v38 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
        ? (v39 = (_DWORD)v38 == -1)
        : (v39 = 1),
          v39))
    {
      v40 = 2;
    }
    else if (v38 >> 28)
    {
      v46 = v13;
      v43 = v38;
      v44 = WTF::fastMalloc((WTF *)0x10);
      v13 = v46;
      *(_QWORD *)v44 = v37;
      *(_DWORD *)(v44 + 8) = v43;
      v40 = 1;
      v37 = v44;
    }
    else
    {
      v40 = v37;
      v37 = v38 << 36;
    }
    v15 = v37 | v40;
  }
  v48 = v15;
  v49 = *(_WORD *)(a3 + 16);
  result = JSC::DFG::Node::Node(v12, v13, (uint64_t)&v47, *a4, *a5, *a6, 0);
  v24 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24 - 8);
    *(_DWORD *)(a1 + 28) = v24 - 1;
    v26 = *(_QWORD **)a1;
  }
  else
  {
    v25 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(a1 + 8))
    {
      v27 = v25 + (v25 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v25 + 1)
        v29 = v25 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v30 = *(_QWORD **)a1;
      v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(a1 + 8) = v29;
      *(_QWORD *)a1 = v31;
      memcpy(v31, v30, 8 * v25);
      if (v30)
      {
        if (*(_QWORD **)a1 == v30)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v30, v17, v18, v19, v20, v21, v22, v23);
      }
      v32 = *(unsigned int *)(a1 + 12);
      v26 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = 0;
      *(_DWORD *)(a1 + 12) = v32 + 1;
    }
    else
    {
      v26 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
      *(_DWORD *)(a1 + 12) = v25 + 1;
    }
  }
  *(_DWORD *)(v12 + 20) = v25;
  v26[v25] = v12;
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v47 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  return v12;
}

uint64_t JSC::DFG::Node::Node(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v7 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v10 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
        ? (v11 = (_DWORD)v10 == -1)
        : (v11 = 1),
          v11))
    {
      v12 = 2;
    }
    else if (v10 >> 28)
    {
      v33 = a2;
      v35 = result;
      v25 = a6;
      v27 = a4;
      v29 = a5;
      v31 = a7;
      v23 = a3;
      v17 = v9;
      v18 = v10;
      v19 = WTF::fastMalloc((WTF *)0x10);
      a3 = v23;
      a6 = v25;
      a5 = v29;
      a7 = v31;
      a4 = v27;
      v9 = v19;
      a2 = v33;
      result = v35;
      *(_QWORD *)v9 = v17;
      *(_DWORD *)(v9 + 8) = v18;
      v12 = 1;
    }
    else
    {
      v12 = v9;
      v9 = v10 << 36;
    }
    v7 = v9 | v12;
  }
  *(_QWORD *)result = v7;
  v8 = *(_QWORD *)(a3 + 8);
  if ((v8 & 1) != 0)
  {
    v13 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v14 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
        ? (v15 = (_DWORD)v14 == -1)
        : (v15 = 1),
          v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v34 = a2;
      v36 = result;
      v26 = a6;
      v28 = a4;
      v30 = a5;
      v32 = a7;
      v24 = a3;
      v20 = v13;
      v21 = v14;
      v22 = WTF::fastMalloc((WTF *)0x10);
      a3 = v24;
      a6 = v26;
      a5 = v30;
      a7 = v32;
      a4 = v28;
      v13 = v22;
      a2 = v34;
      result = v36;
      *(_QWORD *)v13 = v20;
      *(_DWORD *)(v13 + 8) = v21;
      v16 = 1;
    }
    else
    {
      v16 = v13;
      v13 = v14 << 36;
    }
    v8 = v13 | v16;
  }
  *(_QWORD *)(result + 8) = v8;
  *(_WORD *)(result + 16) = *(_WORD *)(a3 + 16);
  *(_DWORD *)(result + 20) = -1;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a6;
  *(_QWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = a4;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_WORD *)(result + 18) = a2;
  if (a2 >= 0x1B1)
  {
    __break(0xC471u);
    JUMPOUT(0x1982D7C00);
  }
  *(_DWORD *)(result + 56) = dword_199154630[(__int16)a2];
  return result;
}

uint64_t JSC::DFG::Node::setOpAndDefaultFlags(uint64_t result, unsigned int a2)
{
  *(_WORD *)(result + 18) = a2;
  if (a2 >= 0x1B1)
  {
    result = 632;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(result + 56) = dword_199154630[(__int16)a2];
  }
  return result;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t casual;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v12)
    goto LABEL_83;
  v13 = (_BYTE *)(v12 + 9408);
  *(_BYTE *)(v12 + 9408) = 1;
  v14 = *(unsigned int *)(v12 + 9424);
  if (!(_DWORD)v14)
  {
    v28 = *(_QWORD *)(v12 + 9448);
    v29 = *(_QWORD *)(v12 + 9432);
    if (v28)
    {
LABEL_17:
      v30 = __clz(v28);
      *(_QWORD *)(v12 + 9448) = v28 & ~(0x8000000000000000 >> v30);
      casual = v29 + 16 * v30;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v12 + 9413) == 6)
    {
      v53 = *(_DWORD *)(v12 + 9444);
      v54 = *(unsigned int *)(v12 + 9440);
      if (v54 < v53)
      {
        *(_QWORD *)&v13[8 * v54 + 56] = 0;
        v55 = (unint64_t *)(v12 + 8 * v54 + 9472);
        v56 = v53 - 1 - v54;
        while (v56)
        {
          v29 += 1024;
          v58 = *v55++;
          v57 = v58;
          LODWORD(v54) = v54 + 1;
          --v56;
          if (v58)
          {
            v28 = __rbit64(v57);
            *(_DWORD *)(v12 + 9440) = v54;
            *(_QWORD *)(v12 + 9432) = v29;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v12 + 9440) = v53;
      }
    }
    *v13 = 0;
LABEL_83:
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_5;
  }
  *(_DWORD *)(v12 + 9424) = v14 - *(_DWORD *)(v12 + 9428);
  casual = *(_QWORD *)(v12 + 9416) - v14;
LABEL_4:
  *v13 = 0;
LABEL_5:
  v16 = *a2;
  v17 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v37 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v38 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
        ? (v39 = (_DWORD)v38 == -1)
        : (v39 = 1),
          v39))
    {
      v40 = 2;
    }
    else if (v38 >> 28)
    {
      v59 = v16;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v16 = v59;
      *(_QWORD *)v60 = v37;
      *(_DWORD *)(v60 + 8) = v38;
      v40 = 1;
      v37 = v60;
    }
    else
    {
      v40 = v37;
      v37 = v38 << 36;
    }
    v17 = v37 | v40;
  }
  v18 = *(_QWORD *)(a3 + 8);
  if ((v18 & 1) != 0)
  {
    v41 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v42 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v61 = v41;
      v62 = v16;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v16 = v62;
      *(_QWORD *)v41 = v61;
      *(_DWORD *)(v41 + 8) = v42;
      v44 = 1;
    }
    else
    {
      v44 = v41;
      v41 = v42 << 36;
    }
    v18 = v41 | v44;
  }
  v19 = (unsigned __int16)v16;
  v20 = *(_WORD *)(a3 + 16);
  v21 = *a4;
  v22 = v17;
  if ((v17 & 1) != 0)
  {
    v45 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v46 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v63 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v67 = v16;
      v64 = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8);
      v45 = WTF::fastMalloc((WTF *)0x10);
      v16 = v67;
      *(_QWORD *)v45 = v63;
      *(_DWORD *)(v45 + 8) = v64;
      v48 = 1;
    }
    else
    {
      v48 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v45 = v46 << 36;
    }
    v22 = v45 | v48;
  }
  *(_QWORD *)casual = v22;
  v23 = v18;
  if ((v18 & 1) != 0)
  {
    v49 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v50 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v65 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v68 = v16;
      v66 = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
      v49 = WTF::fastMalloc((WTF *)0x10);
      v16 = v68;
      *(_QWORD *)v49 = v65;
      *(_DWORD *)(v49 + 8) = v66;
      v52 = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v23 = v49 | v52;
  }
  *(_QWORD *)(casual + 8) = v23;
  *(_WORD *)(casual + 16) = v20;
  *(_DWORD *)(casual + 20) = -1;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 40) = 0;
  *(_QWORD *)(casual + 24) = 0;
  *(_QWORD *)(casual + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(casual + 56) = 0;
  *(_QWORD *)(casual + 64) = 0;
  *(_QWORD *)(casual + 72) = v21;
  *(_QWORD *)(casual + 88) = 0;
  *(_QWORD *)(casual + 96) = 0;
  *(_QWORD *)(casual + 80) = 0;
  *(_WORD *)(casual + 18) = v19;
  if (v19 >= 0x1B1)
    goto LABEL_89;
  *(_DWORD *)(casual + 56) = dword_199154630[v16];
  v24 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24 - 8);
    *(_DWORD *)(a1 + 28) = v24 - 1;
    v26 = *(_QWORD **)a1;
    goto LABEL_13;
  }
  v25 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v25 != *(_DWORD *)(a1 + 8))
  {
    v26 = *(_QWORD **)a1;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
    *(_DWORD *)(a1 + 12) = v25 + 1;
    goto LABEL_13;
  }
  v31 = v25 + (v25 >> 2);
  v32 = v31 >= 0x10 ? v31 + 1 : 16;
  v33 = v32 <= v25 + 1 ? v25 + 1 : v32;
  if (v33 >> 29)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x1982D8094);
  }
  v34 = *(_QWORD **)a1;
  v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
  *(_DWORD *)(a1 + 8) = v33;
  *(_QWORD *)a1 = v35;
  memcpy(v35, v34, 8 * v25);
  if (v34)
  {
    if (*(_QWORD **)a1 == v34)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v34, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v36 = *(unsigned int *)(a1 + 12);
  v26 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = 0;
  *(_DWORD *)(a1 + 12) = v36 + 1;
LABEL_13:
  *(_DWORD *)(casual + 20) = v25;
  v26[v25] = casual;
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  return casual;
}

uint64_t WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = *v9;
  *(_DWORD *)(a1 + 12) = v10 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 0x11)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v18 = (_QWORD *)v16;
      v19 = (uint64_t *)v10;
      if (v17 < 3)
        goto LABEL_31;
      v18 = (_QWORD *)v16;
      v19 = (uint64_t *)v10;
      if (v16 - v10 < 0x20)
        goto LABEL_31;
      v20 = v17 + 1;
      v18 = (_QWORD *)(v16 + 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
      v19 = (uint64_t *)(v10 + 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
      v21 = (__int128 *)(v10 + 16);
      v22 = (_OWORD *)(v16 + 16);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v21;
        *(v22 - 1) = *(v21 - 1);
        *v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v25 = *v19++;
          *v18++ = v25;
        }
        while (v19 != (uint64_t *)(v10 + 8 * v15));
      }
    }
    if (v9 + 16 != v10 && v10)
    {
      if (v16 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  if (!(v14 >> 29))
  {
    v16 = WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 0x11)
  {
    v15 = result + 16;
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 16;
    goto LABEL_11;
  }
  if (!(v11 >> 29))
  {
    v15 = WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v17 = (_QWORD *)v15;
      v18 = (uint64_t *)v13;
      do
      {
        v19 = *v18++;
        *v17++ = v19;
        v16 -= 8;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (v15 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::run(JSC::DFG **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v8;
  JSC::DFG *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  JSC::DFG::Graph *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::DFG::Node *v61;
  int v62;
  WTF *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int16 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  JSC::DFG::Node **v123;
  JSC::DFG::Node **v124;
  JSC::DFG::Node *v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v129;
  WTF *v130;
  void *v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  void *v148;
  WTF *v149;
  void *v150;
  WTF *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int hasExitSite;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  void *v173;
  WTF *v174;
  void *v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  int v195;
  unint64_t v196;
  _QWORD *v197;
  unsigned int *v198;
  WTF::Lock *v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v208;
  JSC::DFG::BasicBlock *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF **v216;
  WTF **v217;
  __int128 v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  void *v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unsigned int v245;
  void *v246;
  int v247;
  _QWORD *v248;
  WTF *v249;
  uint64_t v250;
  JSC::DFG::Node **v251;
  uint64_t v252;
  JSC::DFG::Node **v253;
  JSC::DFG::Node **v254;
  uint64_t v255;
  JSC::DFG::Node **v256;
  JSC::DFG::Node **v257;
  _DWORD *v258;
  unsigned int v259;
  uint64_t v260;
  JSC::DFG::Node *v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  JSC::DFG::Node *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  _QWORD *v275;
  BOOL v276;
  JSC::UnlinkedCodeBlock ***v277;
  JSC::UnlinkedCodeBlock **v278;
  unint64_t v279;
  JSC::DFG::Node *v280;
  WTF *v281;
  int v282;
  unint64_t v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unint64_t v287;
  unsigned int v288;
  _DWORD *v289;
  uint64_t *v290;
  unint64_t v291;
  JSC::DFG::Node *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  JSC::DFG::Node *v301;
  uint64_t v302;
  WTF *v303;
  uint64_t v304;
  BOOL v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  int isLiveInBytecode;
  unsigned int v310;
  int v311;
  BOOL v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  BOOL v316;
  unint64_t v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unint64_t v326;
  _BOOL4 v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  char v331;
  unint64_t *v332;
  int v333;
  int v334;
  uint64_t v335;
  unint64_t v336;
  char v337;
  uint64_t v338;
  _QWORD *v340;
  JSC::UnlinkedCodeBlock ***v341;
  WTF *v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unsigned int *v347;
  uint64_t v348;
  int v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  _QWORD *v354;
  unint64_t v355;
  unint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  unint64_t v365;
  WTF *v366;
  _QWORD *v367;
  JSC::UnlinkedCodeBlock ***v368;
  JSC::UnlinkedCodeBlock ***v369;
  unsigned __int8 *v370;
  unsigned int v371;
  BOOL v372;
  _BOOL4 v373;
  unsigned int v374;
  unsigned int v375;
  _QWORD *v377;
  unint64_t v378;
  unint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  unint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  uint64_t v385;
  unsigned int v386;
  unint64_t v387;
  uint64_t v388;
  WTF *v389;
  uint64_t v390;
  BOOL v391;
  uint64_t v392;
  WTF *v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  unint64_t *v397;
  uint64_t v398;
  WTF *v399;
  uint64_t v400;
  int isWatchingHavingABadTimeWatchpoint;
  int v402;
  int v403;
  uint64_t *v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  WTF *v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  WTF *v420;
  void *v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  void *v425;
  uint64_t v426;
  JSC::DFG::Node **v427;
  uint64_t v428;
  JSC::DFG::Node *v429;
  JSC::DFG::Graph *v430;
  WTF *v431;
  uint64_t v432;
  void *v433;
  unint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  WTF *v440;
  uint64_t v441;
  unsigned int v442;
  JSC::DFG::Node ***v443;
  JSC::DFG::Node *v444;
  unsigned int v445;
  JSC::DFG::Node *v446;
  int v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  int v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unsigned int v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  JSC::DFG::Node **v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  int v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unsigned int v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  int v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unsigned int v485;
  uint64_t v486;
  int v487;
  _QWORD *v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unsigned int v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  unint64_t v501;
  unsigned int v502;
  unsigned int v503;
  int v504;
  unsigned __int16 v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unsigned int v509;
  uint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  JSC::DFG::Node *v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  JSC::DFG::Node *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t ArgumentsArrayLength;
  void *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  JSC::DFG::NodeOrigin *v542;
  unint64_t v543;
  JSC::DFG::Node *v545;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v546;
  int v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  JSC::DFG::NodeOrigin *v553;
  uint64_t v554;
  uint64_t v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v565;
  _QWORD *v566;
  __int16 v567;
  int v568;
  int v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t *v574;
  int v575;
  uint64_t v576;
  char v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  WTF *v592;
  unsigned int v593;
  unsigned int v594;
  int *v595;
  uint64_t v596;
  uint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  JSC::DFG::Node *v605;
  int v606;
  unsigned int v607;
  unint64_t v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  unsigned int v613;
  unint64_t *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  JSC::DFG::Node *v621;
  JSC::DFG::Graph *v622;
  unint64_t v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  void *v631;
  WTF *v632;
  int v633;
  unsigned int v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  unint64_t v645;
  uint64_t *v646;
  unint64_t *v647;
  _QWORD *v648;
  unint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t *v655;
  _QWORD *v656;
  unint64_t v657;
  int v658;
  unint64_t v659;
  WTF *v660;
  void *v661;
  uint64_t *v662;
  char v663;
  unsigned int v664;
  char v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t *v669;
  unint64_t v670;
  uint64_t *v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  _QWORD *v676;
  unint64_t v677;
  unint64_t v678;
  _QWORD *v679;
  _QWORD *v680;
  unint64_t v681;
  _QWORD *v682;
  unsigned int v683;
  BOOL v684;
  unsigned int v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unsigned int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  int v714;
  int v715;
  int *v716;
  uint64_t v717;
  _QWORD *v718;
  unint64_t v719;
  int v720;
  uint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  uint64_t v724;
  BOOL v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  BOOL v729;
  uint64_t v730;
  JSC::DFG::Node *v731;
  int v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  void *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unsigned int v745;
  int v746;
  uint64_t v748;
  JSC::UnlinkedCodeBlock ***v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  char v753;
  uint64_t v754;
  uint64_t v755;
  BOOL v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  BOOL v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v771;
  WTF *v772;
  void *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  unsigned int v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t inserted;
  unint64_t v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  WTF *v799;
  unint64_t v800;
  uint64_t v801;
  uint64_t v803;
  unint64_t v804;
  unint64_t v805;
  void *v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  WTF *v818;
  void *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  int v830;
  _QWORD *v831;
  int v832;
  uint64_t v833;
  WTF **v834;
  WTF **v835;
  JSC::DFG::Node *v836;
  JSC::DFG::Graph *v837;
  uint64_t v838;
  JSC::UnlinkedCodeBlock ***v839;
  unsigned int v840;
  unint64_t *v841;
  uint64_t v842;
  unsigned int v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  unint64_t v849;
  int v850;
  JSC::UnlinkedCodeBlock **v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  char v856;
  int v857;
  uint64_t *v858;
  uint64_t v859;
  unint64_t v860;
  unint64_t v861;
  WTF *v862;
  WTF *v863;
  unint64_t v864;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v865;
  uint64_t v866;
  uint64_t v867;
  __int16 v868;
  uint64_t v869[3];
  uint64_t v870[3];
  _QWORD v871[3];
  uint64_t v872[3];
  WTF *v873;
  WTF **v874;
  WTF **v875;
  unsigned int *v876;
  JSC::DFG::Node **v877;
  BOOL *v878;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v879;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v880;
  WTF *v881;
  JSC::DFG::Node **v882;
  WTF *v883;
  unsigned int *v884;
  JSC::DFG::Node **v885;
  BOOL *v886;
  __int128 v887;
  WTF **v888;
  _DWORD *v889;
  JSC::DFG::Node **v890;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v891;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v892;
  BOOL v893;
  _QWORD v894[3];
  unint64_t v895[3];
  _QWORD v896[3];
  WTF *v897;
  int v898;
  unsigned int v899;
  WTF *v900;
  uint64_t v901;
  WTF ***v902;
  uint64_t *v903;
  unsigned int *v904;
  unint64_t v905;
  uint64_t *v906;
  WTF **v907;
  JSC::DFG::Node *v908;
  unsigned int v909;
  WTF *v910;
  int v911;
  unsigned int v912;
  WTF *v913[2];
  __int128 v914;
  uint64_t v915;
  uint64_t v916;

  v8 = (JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *)this;
  v916 = *MEMORY[0x1E0C80C00];
  v9 = this[4];
  if (*((_DWORD *)v9 + 236) != 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v9, 0, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x42, "BOOL JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::run()", "m_graph.m_form == SSA");
    __break(0xC471u);
    goto LABEL_1169;
  }
  JSC::DFG::Graph::blocksInPreOrder(v9, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v881);
  v17 = v881;
  v865 = v8;
  if (HIDWORD(v882))
  {
    v18 = (WTF *)((char *)v881 + 8 * HIDWORD(v882));
    v19 = 0uLL;
    while (1)
    {
      v20 = *(unsigned int *)(*(_QWORD *)v17 + 220);
      if ((_DWORD)v20)
        break;
LABEL_20:
      v17 = (WTF *)((char *)v17 + 8);
      if (v17 == v18)
      {
        v17 = v881;
        v8 = v865;
        goto LABEL_22;
      }
    }
    v21 = *(uint64_t **)(*(_QWORD *)v17 + 208);
    v22 = &v21[v20];
    while (1)
    {
      v23 = *v21;
      v873 = (WTF *)v23;
      v24 = *(unsigned __int16 *)(v23 + 18);
      if (v24 > 0x114)
        break;
      if (v24 == 267)
      {
        isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)v865 + 4), (JSC::DFG::Node *)v23, v11, v12, v13, v14, v15, v16);
        v19 = 0uLL;
        if (!isWatchingHavingABadTimeWatchpoint)
          goto LABEL_561;
        v402 = *(unsigned __int16 *)(v23 + 18);
        if (v402 == 267 || v402 == 352)
          v403 = *(_DWORD *)(v23 + 84);
        else
          v403 = v402 == 264 ? *(_DWORD *)(v23 + 76) : *(_DWORD *)(v23 + 72);
        if ((v403 & 0xEu) > 9)
          goto LABEL_561;
        goto LABEL_558;
      }
      if (v24 == 276)
      {
        v570 = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)v865 + 4), (JSC::DFG::Node *)v23, v11, v12, v13, v14, v15, v16);
        v19 = 0uLL;
        if (!v570)
          goto LABEL_561;
LABEL_558:
        v404 = (uint64_t *)((char *)v865 + 72);
        *(_OWORD *)v913 = v19;
        v914 = v19;
LABEL_559:
        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::add<JSC::DFG::AvailabilityMap>((uint64_t)&v887, v404, (uint64_t *)&v873, (uint64_t)v913, v13, v14, v15, v16);
        JSC::DFG::AvailabilityMap::~AvailabilityMap((JSC::DFG::AvailabilityMap *)v913, v405, v406, v407, v408, v409, v410, v411);
        goto LABEL_560;
      }
      if (v24 != 263)
        goto LABEL_14;
      v644 = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)v865 + 4), (JSC::DFG::Node *)v23, v11, v12, v13, v14, v15, v16);
      v19 = 0uLL;
      if (v644)
      {
        v574 = (uint64_t *)((char *)v865 + 72);
        v645 = *(unsigned int *)(v23 + 32);
        if (*(_DWORD *)(v23 + 32))
        {
          v646 = *(uint64_t **)(v23 + 72);
          v647 = (unint64_t *)(2 * *v646);
          v648 = v647 + 1;
          if (*v646 < 0)
            v648 = *(_QWORD **)(v23 + 72);
          v649 = 0;
          if (*v646 < 0)
          {
            while (1)
            {
              if (v649 <= 0x3E && ((*(_QWORD *)((char *)v648 + ((v649 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v649) & 1) != 0)
              {
                v828 = *((_QWORD *)v865 + 4);
                v829 = v649 + *(_QWORD *)(v23 + 24);
                if (*(_DWORD *)(v828 + 164) <= v829)
                {
LABEL_1168:
                  __break(0xC471u);
LABEL_1169:
                  JUMPOUT(0x1982DB3D8);
                }
                v10 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v828 + 152) + 8 * v829) & 0xFF00FFFFFFFFFFFFLL);
                if (v10[9] != 277)
                  goto LABEL_561;
                v830 = *(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v828 + 152) + 8
                                                                                               * v829) & 0xFF00FFFFFFFFFFFFLL)
                                                        + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                           + 0x12);
                if (v830 != 276 && v830 != 267)
                  goto LABEL_561;
                v831 = v648;
                v832 = WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v574, (uint64_t)v10);
                v648 = v831;
                v19 = 0uLL;
                if (!v832)
                  goto LABEL_561;
              }
              if (++v649 >= v645)
                goto LABEL_732;
            }
          }
          v650 = *v647;
          while (1)
          {
            if (v650 > v649 && ((*(_QWORD *)((char *)v648 + ((v649 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v649) & 1) != 0)
            {
              v651 = *((_QWORD *)v865 + 4);
              v652 = v649 + *(_QWORD *)(v23 + 24);
              if (*(_DWORD *)(v651 + 164) <= v652)
                goto LABEL_1168;
              v10 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v651 + 152) + 8 * v652) & 0xFF00FFFFFFFFFFFFLL);
              if (v10[9] != 277)
                goto LABEL_561;
              v653 = *(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v651 + 152) + 8 * v652) & 0xFF00FFFFFFFFFFFFLL)
                                                      + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x12);
              if (v653 != 276 && v653 != 267)
                goto LABEL_561;
              v654 = *v574;
              v655 = v574;
              v656 = v648;
              v864 = v645;
              v657 = v650;
              v658 = WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(v654, (uint64_t)v10);
              v650 = v657;
              v645 = v864;
              v648 = v656;
              v574 = v655;
              v19 = 0uLL;
              if (!v658)
                goto LABEL_561;
            }
            if (++v649 >= v645)
              goto LABEL_732;
          }
        }
        goto LABEL_732;
      }
LABEL_561:
      v24 = *(unsigned __int16 *)(v23 + 18);
LABEL_14:
      if (v24 != 185)
      {
        ++v21;
        v25 = v24 == 379 || v21 == v22;
        if (!v25)
          continue;
      }
      goto LABEL_20;
    }
    if (v24 != 347)
    {
      if (v24 == 277)
      {
        v571 = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)v865 + 4), (JSC::DFG::Node *)v23, v11, v12, v13, v14, v15, v16);
        v19 = 0uLL;
        if (!v571)
          goto LABEL_561;
        v572 = *(_QWORD *)(v23 + 24);
        if ((v572 & 0xFC000000000000) != 0x30000000000000)
          goto LABEL_561;
        v10 = (_WORD *)(v572 & 0xFF00FFFFFFFFFFFFLL);
        v573 = *(unsigned __int16 *)((v572 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v573 != 276 && v573 != 267)
          goto LABEL_561;
        v574 = (uint64_t *)((char *)v865 + 72);
        v575 = WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*((_QWORD *)v865 + 9), (uint64_t)v10);
        v19 = 0uLL;
        if (!v575)
          goto LABEL_561;
LABEL_732:
        *(_OWORD *)v913 = v19;
        v914 = v19;
        v404 = v574;
        goto LABEL_559;
      }
      if (v24 != 354)
        goto LABEL_14;
    }
    *(_OWORD *)v913 = v19;
    v914 = v19;
    WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::add<JSC::DFG::AvailabilityMap>((uint64_t)&v887, (uint64_t *)v865 + 9, (uint64_t *)&v873, (uint64_t)v913, v13, v14, v15, v16);
    if (*((_QWORD *)&v914 + 1))
      WTF::fastFree(*((_QWORD *)&v914 + 1) - 16, v10, v11, v12, v13, v14, v15, v16);
    v19 = 0uLL;
    if (!v913[0])
      goto LABEL_561;
    WTF::fastFree((unint64_t)v913[0], v10, v11, v12, v13, v14, v15, v16);
LABEL_560:
    v19 = 0uLL;
    goto LABEL_561;
  }
LABEL_22:
  if (v17)
  {
    v881 = 0;
    LODWORD(v882) = 0;
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  }
  v26 = *((_QWORD *)v8 + 9);
  if (!v26)
    return 0;
  if (!*(_DWORD *)(v26 - 12))
    return 0;
  v29 = *((_QWORD *)v8 + 9);
  if (!v29 || !*(_DWORD *)(v29 - 12))
    return 0;
  v858 = (uint64_t *)((char *)v8 + 72);
  JSC::DFG::performOSRAvailabilityAnalysis(*((JSC::DFG **)v8 + 4), v28);
  JSC::DFG::Graph::blocksInPreOrder(*((JSC::DFG::Graph **)v8 + 4), v30, v31, v32, v33, v34, v35, v36, (uint64_t)&v887);
  v44 = (uint64_t *)v887;
  if (HIDWORD(v887))
  {
    v45 = v887 + 8 * HIDWORD(v887);
    while (1)
    {
      v46 = *v44;
      v47 = *((_QWORD *)v865 + 4);
      *(_OWORD *)v913 = 0u;
      v914 = 0u;
      v915 = v47;
      v48 = *(_QWORD *)(v46 + 200);
      if ((WTF **)v48 != v913)
        break;
LABEL_40:
      *(_QWORD *)&v914 = *(_QWORD *)(v48 + 16);
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v914 + 1, (_QWORD *)(v48 + 24), v38, v39, v40, v41, v42, v43);
      v58 = *(unsigned int *)(v46 + 220);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v46 + 208);
        v60 = v59 + 8 * v58;
        do
        {
          v61 = *(JSC::DFG::Node **)v59;
          v62 = *(unsigned __int16 *)(*(_QWORD *)v59 + 18);
          if (v62 == 347 || v62 == 276 || v62 == 354)
          {
            v64 = *v858;
            if (*v858)
            {
              v65 = *(_DWORD *)(v64 - 8);
              v66 = ((unint64_t)v61 + ~((_QWORD)v61 << 32)) ^ (((unint64_t)v61 + ~((_QWORD)v61 << 32)) >> 22);
              v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
              v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
              v69 = v65 & ((v68 >> 31) ^ v68);
              v70 = v64 + 40 * v69;
              v71 = *(unsigned __int16 **)v70;
              if (*(JSC::DFG::Node **)v70 != v61)
              {
                v72 = 1;
                while (v71)
                {
                  v69 = (v69 + v72) & v65;
                  v70 = v64 + 40 * v69;
                  v71 = *(unsigned __int16 **)v70;
                  ++v72;
                  if (*(JSC::DFG::Node **)v70 == v61)
                    goto LABEL_64;
                }
                v70 = v64 + 40 * *(unsigned int *)(v64 - 4);
              }
LABEL_64:
              if (v70 != v64 + 40 * *(unsigned int *)(v64 - 4))
              {
                WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v70 + 8), (const void **)v913, v38, v39, v40, v41, v42, v43);
                *(_QWORD *)(v70 + 24) = v914;
                WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)(v70 + 32), (_QWORD *)&v914 + 1, v73, v74, v75, v76, v77, v78);
                v62 = *((unsigned __int16 *)v61 + 9);
              }
            }
          }
          if (v62 == 185)
            break;
          if (v62 == 379)
            break;
          JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)v913, v61);
          v59 += 8;
        }
        while (v59 != v60);
      }
      if (*((_QWORD *)&v914 + 1))
        WTF::fastFree(*((_QWORD *)&v914 + 1) - 16, (void *)v37, v38, v39, v40, v41, v42, v43);
      v63 = v913[0];
      if (v913[0])
      {
        v913[0] = 0;
        LODWORD(v913[1]) = 0;
        WTF::fastFree((unint64_t)v63, (void *)v37, v38, v39, v40, v41, v42, v43);
      }
      if (++v44 == (uint64_t *)v45)
      {
        v44 = (uint64_t *)v887;
        v8 = v865;
        goto LABEL_67;
      }
    }
    v49 = *(unsigned int *)(v48 + 12);
    if ((_DWORD)v49)
    {
      if (v49 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1982DC298);
      }
      v50 = (WTF *)WTF::fastMalloc((WTF *)(16 * v49));
      LODWORD(v913[1]) = v49;
      v913[0] = v50;
      v52 = *(WTF **)v48;
      if (!HIDWORD(v913[1]))
      {
        v51 = 0;
        goto LABEL_35;
      }
      memmove(v50, v52, 16 * HIDWORD(v913[1]));
      v51 = HIDWORD(v913[1]);
      v50 = v913[0];
    }
    else
    {
      v50 = 0;
      v51 = 0;
    }
    v52 = *(WTF **)v48;
LABEL_35:
    v53 = *(unsigned int *)(v48 + 12);
    if (v51 != v53)
    {
      v54 = (_OWORD *)((char *)v50 + 16 * v51);
      v55 = (__int128 *)((char *)v52 + 16 * v51);
      v56 = 16 * v53 - 16 * v51;
      do
      {
        v57 = *v55++;
        *v54++ = v57;
        v56 -= 16;
      }
      while (v56);
      LODWORD(v51) = *(_DWORD *)(v48 + 12);
    }
    HIDWORD(v913[1]) = v51;
    goto LABEL_40;
  }
LABEL_67:
  if (v44)
  {
    *(_QWORD *)&v887 = 0;
    DWORD2(v887) = 0;
    WTF::fastFree((unint64_t)v44, (void *)v37, v38, v39, v40, v41, v42, v43);
  }
  v873 = v8;
  *(_QWORD *)&v887 = &v873;
  *((_QWORD *)&v887 + 1) = v8;
  v79 = *((_QWORD *)v8 + 4);
  v859 = *(unsigned int *)(v79 + 60);
  if ((_DWORD)v859)
  {
    v80 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v80))
    {
      if (v859 == ++v80)
        goto LABEL_73;
    }
    if ((_DWORD)v859 != (_DWORD)v80)
    {
      v120 = *(_DWORD *)(v79 + 60);
      while (1)
      {
        if (v120 <= v80)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC184);
        }
        v121 = *(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v80);
        v122 = *(unsigned int *)(v121 + 220);
        if ((_DWORD)v122)
          break;
LABEL_198:
        v80 = (v80 + 1);
        if (v120 > v80)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v80))
          {
            if (v120 == ++v80)
            {
              LODWORD(v80) = v120;
              break;
            }
          }
        }
        if ((_DWORD)v859 == (_DWORD)v80)
          goto LABEL_73;
      }
      v123 = *(JSC::DFG::Node ***)(v121 + 208);
      v124 = &v123[v122];
      while (1)
      {
        v125 = *v123;
        v126 = *((unsigned __int16 *)*v123 + 9);
        if (v126 <= 0x61)
          break;
        if (*((unsigned __int16 *)*v123 + 9) > 0x9Eu)
        {
          if (*((unsigned __int16 *)*v123 + 9) <= 0x163u)
          {
            if (*((unsigned __int16 *)*v123 + 9) <= 0x10Au)
            {
              if (*((unsigned __int16 *)*v123 + 9) <= 0xF6u)
              {
                if (v126 == 245)
                  goto LABEL_258;
                if (v126 - 159 >= 2)
                  goto LABEL_133;
                v37 = *((_QWORD *)v125 + 4);
              }
              else
              {
                if (v126 != 247)
                {
                  if (v126 != 263)
                  {
                    if (v126 == 251)
                      goto LABEL_258;
                    goto LABEL_133;
                  }
                  v662 = (uint64_t *)*((_QWORD *)v125 + 9);
                  v663 = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)v865 + 4), *v123, v38, v39, v40, v41, v42, v43);
                  v664 = *((_DWORD *)v125 + 8);
                  if (!v664)
                    goto LABEL_135;
                  v665 = v663;
                  v666 = 0;
                  while (2)
                  {
                    v667 = *((_QWORD *)v865 + 4);
                    v668 = v666 + *((_QWORD *)v125 + 3);
                    if (*(_DWORD *)(v667 + 164) <= v668)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982DC18CLL);
                    }
                    v669 = (unint64_t *)(2 * *v662);
                    if (*v662 < 0)
                      v670 = 63;
                    else
                      v670 = *v669;
                    v37 = *(_QWORD *)(*(_QWORD *)(v667 + 152) + 8 * v668);
                    if (v670 > v666)
                    {
                      v671 = (uint64_t *)(v669 + 1);
                      if (*v662 < 0)
                        v671 = v662;
                      if (((*(unint64_t *)((char *)v671 + ((v666 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v666) & 1) != 0
                        && *(_WORD *)((v37 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 277)
                      {
                        v672 = *(_QWORD *)((v37 & 0xFF00FFFFFFFFFFFFLL) + 0x18);
                        if ((v672 & 0xFC000000000000) == 0x30000000000000)
                        {
                          v673 = *(unsigned __int16 *)((v672 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                          if (v673 == 276)
                          {
                            if ((v665 & 1) == 0)
                              break;
LABEL_838:
                            if (++v666 >= v664)
                              goto LABEL_135;
                            continue;
                          }
                          if (v673 == 267)
                            v753 = v665;
                          else
                            v753 = 0;
                          if ((v753 & 1) != 0)
                            goto LABEL_838;
                        }
                      }
                    }
                    break;
                  }
                  v664 = *((_DWORD *)v125 + 8);
                  goto LABEL_838;
                }
LABEL_258:
                if (!**((_DWORD **)v125 + 9))
                  goto LABEL_135;
                v37 = *((_QWORD *)v125 + 5);
                v745 = *(unsigned __int16 *)((v37 & 0xFF00FFFFFFFFFFFFLL) + 0x12) - 263;
                v312 = v745 > 0xE;
                v746 = (1 << v745) & 0x4011;
                if (v312 || v746 == 0)
                  goto LABEL_135;
              }
LABEL_249:
              goto LABEL_135;
            }
            if (v126 != 267)
            {
              if (v126 == 277)
              {
                v37 = *((_QWORD *)v125 + 3);
                if ((v37 & 0xFC000000000000) == 0x30000000000000)
                {
                  v201 = *(unsigned __int16 *)((v37 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v201 == 276 || v201 == 267)
                    goto LABEL_135;
                }
                goto LABEL_249;
              }
              if (v126 != 279)
                goto LABEL_133;
            }
          }
          else if (v126 - 420 >= 7 && v126 != 356)
          {
            if (v126 == 371)
              goto LABEL_258;
LABEL_133:
            v127 = *((_QWORD *)v125 + 3);
            if ((*((_BYTE *)v125 + 56) & 0x10) != 0)
            {
              v136 = *((_QWORD *)v125 + 4);
              if ((int)v136 + (int)v127 > v127)
              {
                v152 = *((_QWORD *)v865 + 4);
                v137 = *((_QWORD *)v125 + 3);
                do
                {
                  if (v137 >= *(unsigned int *)(v152 + 164))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DC194);
                  }
                  v37 = *(_QWORD *)(*(_QWORD *)(v152 + 152) + 8 * v137) & 0xFF00FFFFFFFFFFFFLL;
                  if (v37)
                  {
                    v135 = v873;
                    v127 = *((_QWORD *)v125 + 3);
                    v136 = *((_QWORD *)v125 + 4);
                  }
                  ++v137;
                }
                while (v137 < (v127 + v136));
              }
            }
            else
            {
              v37 = v127 & 0xFF00FFFFFFFFFFFFLL;
              if ((v127 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v130 = v873;
                v37 = *((_QWORD *)v125 + 4) & 0xFF00FFFFFFFFFFFFLL;
                if (v37)
                {
                  v132 = v873;
                  v134 = *((_QWORD *)v125 + 5);
                  goto LABEL_161;
                }
              }
            }
            goto LABEL_135;
          }
        }
        else if (*((unsigned __int16 *)*v123 + 9) <= 0x89u)
        {
          if (v126 - 132 < 2)
          {
            v138 = *v858;
            if (!*v858)
              goto LABEL_135;
            v139 = *((_QWORD *)v125 + 3);
            v140 = v139 & 0xFF00FFFFFFFFFFFFLL;
            v141 = *(_DWORD *)(v138 - 8);
            v142 = ((v139 & 0xFF00FFFFFFFFFFFFLL) + ~(v139 << 32)) ^ (((v139 & 0xFF00FFFFFFFFFFFFLL) + ~(v139 << 32)) >> 22);
            v143 = 9 * ((v142 + ~(v142 << 13)) ^ ((v142 + ~(v142 << 13)) >> 8));
            v144 = (v143 ^ (v143 >> 15)) + ~((v143 ^ (v143 >> 15)) << 27);
            v145 = v141 & ((v144 >> 31) ^ v144);
            v146 = *(_QWORD *)(v138 + 40 * v145);
            if (v146 != v140)
            {
              v147 = 1;
              while (v146)
              {
                v145 = (v145 + v147) & v141;
                v146 = *(_QWORD *)(v138 + 40 * v145);
                ++v147;
                if (v146 == v140)
                  goto LABEL_240;
              }
              goto LABEL_135;
            }
LABEL_240:
            v179 = *((_QWORD *)v865 + 4);
            JSC::CodeOrigin::CodeOrigin((uint64_t *)&v905, (const JSC::CodeOrigin *)v140);
            v193 = JSC::DFG::Graph::globalObjectFor(v179, &v905, v180, v181, v182, v183, v184, v185);
            if ((v905 & 1) != 0 && (v905 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v905 & 0xFFFFFFFF8, v186, v187, v188, v189, v190, v191, v192);
            v194 = *(unsigned __int16 *)(v140 + 18);
            if (v194 <= 0x113)
            {
              if (v194 == 263)
              {
                v595 = (int *)(v193 + 868);
              }
              else
              {
                if (v194 != 267)
                {
LABEL_1121:
                  __break(0xC471u);
                  JUMPOUT(0x1982DC130);
                }
                v593 = *(unsigned __int8 *)(v140 + 84);
                if ((v593 & 0x10) != 0)
                  v594 = ((v593 & 0xE) + 10) >> 1;
                else
                  v594 = (v593 >> 1) & 7;
                v595 = (int *)(v193 + 4 * v594 + 852);
              }
            }
            else
            {
              switch(v194)
              {
                case 0x114u:
                  v595 = (int *)(v193 + 908);
                  break;
                case 0x162u:
                  v595 = (int *)(v193 + 844);
                  break;
                case 0x15Bu:
                  v595 = (int *)(v193 + 836);
                  break;
                default:
                  goto LABEL_1121;
              }
            }
            v195 = *v595;
            if (v195)
              v196 = 16 * (v195 & 0xFFFFFFFE);
            else
              v196 = 0;
            v197 = (_QWORD *)*((_QWORD *)v125 + 9);
            v198 = (unsigned int *)JSC::DFG::Graph::registerStructure(*((_QWORD *)v865 + 4), v196, (int *)v913, v188, v189, v190, v191, v192);
            if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::contains(v197, v198) & 1) != 0)
              goto LABEL_135;
            v37 = *((_QWORD *)v125 + 3);
            goto LABEL_249;
          }
          if (v126 != 98)
          {
            if (v126 != 99)
              goto LABEL_133;
            if (!*(_DWORD *)(*((_QWORD *)v125 + 9) + 16)
              || *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(*v123) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 263
              && *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(v125) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 277
              && *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(v125) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 267)
            {
              goto LABEL_135;
            }
            v37 = *(_QWORD *)JSC::DFG::Node::argumentsChild(v125);
            goto LABEL_249;
          }
        }
        else
        {
          if (*((unsigned __int16 *)*v123 + 9) > 0x97u)
          {
            if (v126 != 158)
            {
              if (v126 != 152
                || *(_WORD *)((*((_QWORD *)v125 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 354
                || **((_DWORD **)v125 + 9) != 64)
              {
                goto LABEL_133;
              }
              goto LABEL_135;
            }
            v148 = (void *)(*((_QWORD *)v125 + 4) & 0xFF00FFFFFFFFFFFFLL);
            if (v148)
            {
              v149 = v873;
            }
            v37 = *((_QWORD *)v125 + 3);
            if (*(_WORD *)((v37 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 263 || *((_BYTE *)v125 + 16))
              goto LABEL_135;
            goto LABEL_249;
          }
          if (v126 != 138)
          {
            if (v126 - 140 >= 2)
              goto LABEL_133;
            goto LABEL_135;
          }
        }
LABEL_136:
        if (v126 != 185)
        {
          ++v123;
          if (v126 != 379 && v123 != v124)
            continue;
        }
        v120 = *(_DWORD *)(v79 + 60);
        goto LABEL_198;
      }
      if (v126 - 24 < 2)
      {
        v129 = *((_QWORD *)v125 + 3);
        if ((*((_BYTE *)v125 + 56) & 0x10) != 0)
        {
          v782 = *((_QWORD *)v125 + 4);
          if ((int)v782 + (int)v129 > v129)
          {
            v783 = *((_QWORD *)v865 + 4);
            v784 = *((_QWORD *)v125 + 3);
            do
            {
              if (v784 >= *(unsigned int *)(v783 + 164))
              {
                __break(0xC471u);
                JUMPOUT(0x1982DC1BCLL);
              }
              v37 = *(_QWORD *)(*(_QWORD *)(v783 + 152) + 8 * v784);
              if ((v37 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v129 = *((_QWORD *)v125 + 3);
                v782 = *((_QWORD *)v125 + 4);
              }
              ++v784;
            }
            while (v784 < (v129 + v782));
          }
          goto LABEL_135;
        }
        v37 = v129 & 0xFF00FFFFFFFFFFFFLL;
        if ((v129 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_135;
        if ((v129 & 0x1000000000000) == 0)
        {
          v177 = (v129 >> 50) & 0x3F;
          if ((_DWORD)v177)
          {
            if (v177 > 0x34)
              goto LABEL_1133;
            if (((1 << v177) & 0x12798001880F84) == 0)
            {
              if (((1 << v177) & 0xD867FFE77F07ALL) == 0)
                goto LABEL_1133;
              v660 = v873;
            }
          }
        }
        v178 = *((_QWORD *)v125 + 4);
        v37 = v178 & 0xFF00FFFFFFFFFFFFLL;
        if ((v178 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_135;
        if ((v178 & 0x1000000000000) == 0)
        {
          v750 = (v178 >> 50) & 0x3F;
          if ((_DWORD)v750)
          {
            if (v750 > 0x34)
              goto LABEL_1133;
            if (((1 << v750) & 0x12798001880F84) == 0)
            {
              if (((1 << v750) & 0xD867FFE77F07ALL) == 0)
              {
LABEL_1133:
                __break(0xC471u);
                JUMPOUT(0x1982DC1DCLL);
              }
              v818 = v873;
            }
          }
        }
        v751 = *((_QWORD *)v125 + 5);
        v37 = v751 & 0xFF00FFFFFFFFFFFFLL;
        if ((v751 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_135;
        if ((v751 & 0x1000000000000) != 0)
          goto LABEL_135;
        v752 = (v751 >> 50) & 0x3F;
        if (!(_DWORD)v752)
          goto LABEL_135;
        if (v752 > 0x34)
          goto LABEL_1133;
        if (((1 << v752) & 0x12798001880F84) != 0)
          goto LABEL_135;
        if (((1 << v752) & 0xD867FFE77F07ALL) == 0)
          goto LABEL_1133;
        goto LABEL_207;
      }
      if (v126 == 20)
        goto LABEL_136;
      if (v126 != 92)
        goto LABEL_133;
      v153 = *(_QWORD *)v125;
      v154 = *(_QWORD *)v125 & 0xFFFFFFFF8;
      if ((*(_QWORD *)v125 & 1) != 0)
        v154 = *(_QWORD *)(*(_QWORD *)v125 & 0xFFFFFFFF8);
      if (v154)
        v155 = *(_QWORD *)(v154 + 8);
      else
        v155 = *(_QWORD *)(*((_QWORD *)v865 + 4) + 40);
      if ((v153 & 2) != 0)
      {
        LODWORD(v156) = -1;
      }
      else if ((v153 & 1) != 0)
      {
        LODWORD(v156) = *(_DWORD *)((*(_QWORD *)v125 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v156 = v153 >> 36;
      }
      v157 = *(_QWORD *)(v155 + 56);
      LODWORD(v881) = v156;
      WORD2(v881) = 11;
      BYTE6(v881) = 0;
      v158 = (unsigned __int8 *)(v157 + 31);
      BYTE8(v914) = 0;
      v913[1] = (WTF *)(v157 + 31);
      LOBYTE(v914) = 1;
      if (__ldaxr((unsigned __int8 *)(v157 + 31)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v158))
      {
LABEL_221:
        BYTE8(v914) = 1;
        hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v157 + 96), (uint64_t)v913, (int *)&v881);
        if ((_BYTE)v914)
        {
          v199 = v913[1];
          v200 = __ldxr((unsigned __int8 *)v913[1]);
          if (v200 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v913[1]))
              goto LABEL_222;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(v199, v160, v161, v162, v163, v164, v165, v166);
        }
LABEL_222:
        if (hasExitSite)
        {
          v762 = *((_QWORD *)v865 + 4);
          if (*(_DWORD *)(v762 + 164) <= *((_QWORD *)v125 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1982DC1B4);
          }
        }
        else
        {
          if (*((_WORD *)v125 + 9) == 146)
            v168 = *((_DWORD *)v125 + 20);
          else
            v168 = *((_DWORD *)v125 + 18);
          v169 = *((_QWORD *)v865 + 4);
          if (*(_DWORD *)(v169 + 164) <= *((_QWORD *)v125 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1982DC19CLL);
          }
        }
        v170 = *((_QWORD *)v865 + 4);
        v171 = *((_DWORD *)v125 + 6);
        v172 = *(_DWORD *)(v170 + 164);
        if (v172 <= v171 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC1A4);
        }
        v173 = (void *)(*(_QWORD *)(*(_QWORD *)(v170 + 152) + 8 * (v171 + 1)) & 0xFF00FFFFFFFFFFFFLL);
        if (v173)
        {
          v174 = v873;
          v170 = *((_QWORD *)v865 + 4);
          v171 = *((_DWORD *)v125 + 6);
          v172 = *(_DWORD *)(v170 + 164);
        }
        v176 = v171 + 2;
        if (v172 <= v176)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC1ACLL);
        }
        v134 = *(_QWORD *)(*(_QWORD *)(v170 + 152) + 8 * v176);
LABEL_161:
        v37 = v134 & 0xFF00FFFFFFFFFFFFLL;
        if ((v134 & 0xFF00FFFFFFFFFFFFLL) == 0)
        {
LABEL_135:
          v126 = *((unsigned __int16 *)v125 + 9);
          goto LABEL_136;
        }
LABEL_207:
        v151 = v873;
        goto LABEL_135;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v158);
      goto LABEL_221;
    }
  }
LABEL_73:
  if (!*v858 || !*(_DWORD *)(*v858 - 12))
    return 0;
  v81 = (uint64_t)v865;
  JSC::DFG::performGraphPackingAndLivenessAnalysis(*((JSC::DFG **)v865 + 4), (JSC::DFG::Graph *)v37, v38, v39, v40, v41, v42, v43);
  JSC::DFG::Graph::initializeNodeOwners(*((_QWORD *)v865 + 4));
  JSC::DFG::CombinedLiveness::CombinedLiveness((JSC::DFG::CombinedLiveness *)&v881, *((JSC::DFG::Graph **)v865 + 4));
  v89 = *((_QWORD *)v865 + 4);
  v900 = 0;
  v901 = 0;
  v90 = *(unsigned int *)(v89 + 60);
  if ((_DWORD)v90)
  {
    v91 = 16;
    if (v90 > 0x10)
      v91 = v90;
    if (v91 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1982DC2F4);
    }
    v92 = 24 * v91;
    v93 = (WTF *)WTF::fastMalloc((WTF *)(24 * v91));
    LODWORD(v901) = (v92 & 0xFFFFFFF8) / 0x18;
    v900 = v93;
    if (HIDWORD(v901) != (_DWORD)v90)
      bzero((char *)v93 + 24 * HIDWORD(v901), 24 * ((24 * v90 - 24 * (unint64_t)HIDWORD(v901) - 24) / 0x18) + 24);
  }
  HIDWORD(v901) = v90;
  v94 = *((_QWORD *)v865 + 4);
  v853 = *(unsigned int *)(v94 + 60);
  if ((_DWORD)v853)
  {
    v95 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v95))
    {
      if (v853 == ++v95)
        goto LABEL_85;
    }
    if ((_DWORD)v853 != (_DWORD)v95)
    {
      LODWORD(v412) = *(_DWORD *)(v94 + 60);
      v852 = *((_QWORD *)v865 + 4);
      do
      {
        if (v412 <= v95)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC1ECLL);
        }
        v413 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v95);
        v414 = *(_DWORD *)(v413 + 8);
        if (HIDWORD(v901) <= v414)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC1F4);
        }
        v415 = *(_QWORD *)(v81 + 32);
        if (!*(_DWORD *)(v415 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC1FCLL);
        }
        v416 = v900;
        v417 = **(_QWORD **)(v415 + 48);
        v418 = *(unsigned int *)(v417 + 84);
        v419 = (unint64_t)(v418 + 31) >> 3;
        v420 = (WTF *)(v419 & 0x3FFFFFFC);
        if ((_DWORD)v418)
        {
          v421 = (void *)WTF::fastMalloc((WTF *)(v419 & 0x3FFFFFFC));
          bzero(v421, (size_t)v420);
        }
        else
        {
          v421 = 0;
        }
        v862 = v416;
        v422 = (char *)v416 + 24 * v414;
        bzero(v421, (size_t)v420);
        v423 = *(_QWORD *)(v417 + 88);
        v424 = (unint64_t)(*((_QWORD *)v422 + 1) + 31) >> 5;
        if (v424 == (unint64_t)(v418 + 31) >> 5)
        {
          memcpy(*(void **)v422, v421, 4 * v424);
        }
        else
        {
          v425 = (void *)WTF::fastMalloc(v420);
          memcpy(v425, v421, (size_t)v420);
          if (*(_QWORD *)v422)
            WTF::fastFree(*(_QWORD *)v422, v82, v83, v84, v85, v86, v87, v88);
          *(_QWORD *)v422 = v425;
        }
        *((_QWORD *)v422 + 1) = v418;
        *((_QWORD *)v862 + 3 * v414 + 2) = v423;
        if (v421)
          WTF::fastFree((unint64_t)v421, v82, v83, v84, v85, v86, v87, v88);
        v426 = *(unsigned int *)(v413 + 220);
        v81 = (uint64_t)v865;
        v94 = v852;
        if ((_DWORD)v426)
        {
          v427 = *(JSC::DFG::Node ***)(v413 + 208);
          v428 = 8 * v426;
          do
          {
            v429 = *v427++;
            v430 = (JSC::DFG::Graph *)*((_QWORD *)v865 + 4);
            v913[0] = (WTF *)v422;
            v428 -= 8;
          }
          while (v428);
        }
        v95 = (v95 + 1);
        v412 = *(unsigned int *)(v852 + 60);
        if (v412 > v95)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v852 + 48) + 8 * v95))
          {
            if (v412 == ++v95)
            {
              LODWORD(v95) = *(_DWORD *)(v852 + 60);
              break;
            }
          }
        }
      }
      while ((_DWORD)v853 != (_DWORD)v95);
    }
  }
LABEL_85:
  v96 = 0;
  LODWORD(v97) = 0;
  v869[0] = v81;
  v866 = 0;
  v98 = *(uint64_t **)(v81 + 72);
  if (v98)
  {
    v97 = *((unsigned int *)v98 - 1);
    v99 = &v98[5 * v97];
    if (*((_DWORD *)v98 - 3))
    {
      v96 = v98;
      if ((_DWORD)v97)
      {
        v576 = 40 * v97;
        v96 = v98;
        while ((unint64_t)(*v96 + 1) <= 1)
        {
          v96 += 5;
          v576 -= 40;
          if (!v576)
          {
            v96 = v99;
            goto LABEL_87;
          }
        }
      }
      goto LABEL_87;
    }
    v96 = &v98[5 * v97];
  }
  v99 = &v98[5 * v97];
LABEL_87:
  if (v98)
    v100 = &v98[5 * *((unsigned int *)v98 - 1)];
  else
    v100 = 0;
  if (v100 != v96)
  {
    do
    {
      v101 = v866;
      if (v866
        || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(&v866, 8u, 0), (v101 = v866) != 0))
      {
        v102 = *(_DWORD *)(v101 - 8);
      }
      else
      {
        v102 = 0;
      }
      v103 = *v96;
      v104 = ~(*v96 << 32) + *v96;
      v105 = (v104 ^ (v104 >> 22)) + ~((v104 ^ (v104 >> 22)) << 13);
      v106 = (9 * (v105 ^ (v105 >> 8))) ^ ((9 * (v105 ^ (v105 >> 8))) >> 15);
      v107 = v102 & (((v106 + ~(v106 << 27)) >> 31) ^ (v106 + ~((_DWORD)v106 << 27)));
      v108 = (uint64_t *)(v101 + 16 * v107);
      v109 = *v108;
      if (*v108)
      {
        v118 = 0;
        v119 = 1;
        while (v109 != v103)
        {
          if (v109 == -1)
            v118 = v108;
          v107 = (v107 + v119) & v102;
          v108 = (uint64_t *)(v101 + 16 * v107);
          v109 = *v108;
          ++v119;
          if (!*v108)
          {
            if (v118)
            {
              *v118 = 0;
              v118[1] = 0;
              --*(_DWORD *)(v101 - 16);
              v103 = *v96;
              v108 = v118;
            }
            goto LABEL_94;
          }
        }
        goto LABEL_102;
      }
LABEL_94:
      v110 = v108[1];
      *v108 = v103;
      v108[1] = 0;
      if (v110)
        WTF::fastFree(v110 - 16, v82, v83, v84, v85, v86, v87, v88);
      if (v866)
        v111 = *(_DWORD *)(v866 - 12) + 1;
      else
        v111 = 1;
      *(_DWORD *)(v866 - 12) = v111;
      if (v866)
        v112 = *(_DWORD *)(v866 - 12);
      else
        v112 = 0;
      v113 = (*(_DWORD *)(v866 - 16) + v112);
      v114 = *(unsigned int *)(v866 - 4);
      if (v114 > 0x400)
      {
        if (v114 <= 2 * v113)
LABEL_763:
          v108 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v866, v108);
      }
      else if (3 * v114 <= 4 * v113)
      {
        goto LABEL_763;
      }
LABEL_102:
      v913[0] = (WTF *)(v108 + 1);
      v116 = *v96;
      v115 = v96 + 5;
      _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZNS2_32eliminateCandidatesThatInterfereEvEUlS5_E_EENSD_15IterationStatusES3_S5_S8_(v869, (uint64_t)v869, v116, (uint64_t **)v913);
      v117 = v99;
      if (v115 != v99)
      {
        v117 = v115;
        while ((unint64_t)(*v117 + 1) <= 1)
        {
          v117 += 5;
          if (v117 == v99)
          {
            v117 = v99;
            break;
          }
        }
      }
      v96 = v117;
    }
    while (v117 != v100);
  }
  v208 = v865;
  v905 = (unint64_t)v865;
  v906 = &v866;
  v907 = &v900;
  JSC::DFG::Graph::blocksInPreOrder(*((JSC::DFG::Graph **)v865 + 4), v82, v83, v84, v85, v86, v87, v88, (uint64_t)&v897);
  if (!v899)
    goto LABEL_530;
  v216 = (WTF **)v897;
  v217 = (WTF **)((char *)v897 + 8 * v899);
  v218 = 0uLL;
LABEL_268:
  v910 = 0;
  v209 = *v216;
  v910 = *v216;
  if (*v858 && *(_DWORD *)(*v858 - 12))
  {
    v219 = *((_QWORD *)v208 + 4);
    *(_OWORD *)v913 = v218;
    v914 = v218;
    v915 = v219;
    JSC::DFG::LocalOSRAvailabilityCalculator::beginBlock((JSC::DFG::LocalOSRAvailabilityCalculator *)v913, v209, v210, v211, v212, v213, v214, v215);
    v227 = *((unsigned int *)v910 + 2);
    if (HIDWORD(v901) <= v227)
    {
      __break(0xC471u);
      JUMPOUT(0x1982DC2A0);
    }
    v834 = v217;
    v835 = v216;
    v228 = (char *)v900 + 24 * v227;
    v229 = *((_DWORD *)v228 + 2);
    v230 = 0;
    if (v229)
    {
      v231 = *(_QWORD *)v228;
      v232 = v229 - 1;
      do
      {
        v230 |= *(_DWORD *)(v231 + 4 * (v232 >> 5)) >> v232;
        --v232;
      }
      while (v232 != -1);
    }
    if (HIDWORD(v882) <= v227)
    {
      __break(0xC471u);
      JUMPOUT(0x1982DC2A8);
    }
    v233 = (_QWORD *)*((_QWORD *)v881 + v227);
    if (v233)
    {
      v234 = *((unsigned int *)v233 - 1);
      v235 = &v233[v234];
      if (*((_DWORD *)v233 - 3))
      {
        v236 = v233;
        if ((_DWORD)v234)
        {
          v237 = 8 * v234;
          v236 = v233;
          while ((unint64_t)(*v236 + 1) <= 1)
          {
            ++v236;
            v237 -= 8;
            if (!v237)
            {
              v236 = v235;
              break;
            }
          }
        }
LABEL_282:
        if (v233)
          v238 = &v233[*((unsigned int *)v233 - 1)];
        else
          v238 = 0;
        while (v236 != v238)
        {
          v239 = *v858;
          if (*v858)
          {
            v240 = (void *)*v236;
            v241 = *(_DWORD *)(v239 - 8);
            v242 = ~(*v236 << 32) + *v236;
            v243 = (v242 ^ (v242 >> 22)) + ~((v242 ^ (v242 >> 22)) << 13);
            v244 = (9 * (v243 ^ (v243 >> 8))) ^ ((9 * (v243 ^ (v243 >> 8))) >> 15);
            v245 = v241 & (((v244 + ~(v244 << 27)) >> 31) ^ (v244 + ~((_DWORD)v244 << 27)));
            v246 = *(void **)(v239 + 40 * v245);
            if (v246 == (void *)*v236)
            {
LABEL_290:
              LOBYTE(v873) = 0;
              *(_QWORD *)&v887 = v865;
              *((_QWORD *)&v887 + 1) = v913;
              v888 = &v873;
              _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZZNS2_32eliminateCandidatesThatInterfereEvENKUlS5_RKNS0_15AvailabilityMapEE_clES5_SK_EUlS5_E_EENSD_15IterationStatusES3_S5_S8_((uint64_t)v869, (uint64_t)v869, (unint64_t)v240, (uint64_t *)&v887);
              if ((_BYTE)v873
                && WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::remove(v858, v240, v221, v222, v223, v224, v225, v226))
              {
              }
            }
            else
            {
              v247 = 1;
              while (v246)
              {
                v245 = (v245 + v247) & v241;
                v246 = *(void **)(v239 + 40 * v245);
                ++v247;
                if (v246 == v240)
                  goto LABEL_290;
              }
            }
          }
          v248 = v236 + 1;
          v236 = v235;
          if (v248 != v235)
          {
            v236 = v248;
            while ((unint64_t)(*v236 + 1) <= 1)
            {
              if (++v236 == v235)
              {
                v236 = v235;
                break;
              }
            }
          }
        }
        v208 = v865;
        if ((v230 & 1) == 0)
          goto LABEL_529;
        v249 = v910;
        v250 = *((unsigned int *)v910 + 2);
        if (HIDWORD(v884) <= v250)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DC2B0);
        }
        v251 = (JSC::DFG::Node **)*((_QWORD *)v883 + v250);
        if (v251)
        {
          v252 = *((unsigned int *)v251 - 1);
          v253 = &v251[v252];
          if (*((_DWORD *)v251 - 3))
          {
            v254 = (JSC::DFG::Node **)*((_QWORD *)v883 + v250);
            if ((_DWORD)v252)
            {
              v255 = 8 * v252;
              v254 = v251;
              while ((unint64_t)*v254 + 1 <= 1)
              {
                ++v254;
                v255 -= 8;
                if (!v255)
                {
                  v254 = v253;
                  goto LABEL_306;
                }
              }
            }
            goto LABEL_306;
          }
          v254 = &v251[v252];
        }
        else
        {
          v254 = 0;
          v252 = 0;
        }
        v253 = &v251[v252];
LABEL_306:
        if (v251)
          v256 = &v251[*((unsigned int *)v251 - 1)];
        else
          v256 = 0;
        if (v256 != v254)
        {
          do
          {
            v257 = v254 + 1;
            v254 = v253;
            if (v257 != v253)
            {
              v254 = v257;
              while ((unint64_t)*v254 + 1 <= 1)
              {
                if (++v254 == v253)
                {
                  v254 = v253;
                  break;
                }
              }
            }
          }
          while (v254 != v256);
          v249 = v910;
        }
        LODWORD(v892) = 0;
        v258 = (_DWORD *)((char *)v249 + 220);
        if (!*((_DWORD *)v249 + 55))
          goto LABEL_529;
        v259 = 0;
        while (1)
        {
          v260 = *((_QWORD *)v249 + 26);
          v261 = *(JSC::DFG::Node **)(v260 + 8 * v259);
          if (!v259)
            goto LABEL_332;
          v262 = v259;
          v263 = *((_QWORD *)v208 + 4);
          v902 = (WTF ***)&v905;
          v903 = (uint64_t *)&v910;
          v904 = (unsigned int *)&v892;
          v870[0] = 0;
          v264 = *(_QWORD *)(v260 + 8 * v259);
          v265 = *(_QWORD *)(v264 + 24);
          if ((*(_BYTE *)(v264 + 56) & 0x10) != 0)
          {
            if (*(_DWORD *)(v264 + 32) + (int)v265 > v265)
            {
              v387 = *(_QWORD *)(v264 + 24);
              do
              {
                if (v387 >= *(unsigned int *)(v263 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982DC2B8);
                }
                v388 = *(_QWORD *)(*(_QWORD *)(v263 + 152) + 8 * v387);
                v389 = (WTF *)(v388 & 0xFF00FFFFFFFFFFFFLL);
                v390 = v388 & 0x2000000000000;
                if (v389)
                  v391 = v390 == 0;
                else
                  v391 = 1;
                if (!v391)
                {
                  v873 = v389;
                  LODWORD(v896[0]) = 0;
                  WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v887, v870, (uint64_t *)&v873, v896, v223, v224, v225, v226);
                  v392 = v887;
                  if ((*(_BYTE *)(v887 + 8) & 2) == 0)
                  {
                    *(_DWORD *)(v392 + 8) |= 2u;
                  }
                }
                ++v387;
              }
              while (v387 < (*(_DWORD *)(v264 + 32) + *(_DWORD *)(v264 + 24)));
            }
          }
          else
          {
            v266 = (JSC::DFG::Node *)(v265 & 0xFF00FFFFFFFFFFFFLL);
            if ((v265 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if ((v265 & 0x2000000000000) != 0)
              {
                v873 = (WTF *)(v265 & 0xFF00FFFFFFFFFFFFLL);
                LODWORD(v896[0]) = 0;
                WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v887, v870, (uint64_t *)&v873, v896, v223, v224, v225, v226);
                v314 = v887;
                if ((*(_BYTE *)(v887 + 8) & 2) == 0)
                {
                  *(_DWORD *)(v314 + 8) |= 2u;
                }
              }
              v300 = *(_QWORD *)(v264 + 32);
              v301 = (JSC::DFG::Node *)(v300 & 0xFF00FFFFFFFFFFFFLL);
              if ((v300 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if ((v300 & 0x2000000000000) != 0)
                {
                  v873 = (WTF *)(v300 & 0xFF00FFFFFFFFFFFFLL);
                  LODWORD(v896[0]) = 0;
                  WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v887, v870, (uint64_t *)&v873, v896, v223, v224, v225, v226);
                  v385 = v887;
                  if ((*(_BYTE *)(v887 + 8) & 2) == 0)
                  {
                    *(_DWORD *)(v385 + 8) |= 2u;
                  }
                }
                v302 = *(_QWORD *)(v264 + 40);
                v303 = (WTF *)(v302 & 0xFF00FFFFFFFFFFFFLL);
                v304 = v302 & 0x2000000000000;
                if (v303)
                  v305 = v304 == 0;
                else
                  v305 = 1;
                if (!v305)
                {
                  v873 = v303;
                  LODWORD(v896[0]) = 0;
                  WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v887, v870, (uint64_t *)&v873, v896, v223, v224, v225, v226);
                  v306 = v887;
                  if ((*(_BYTE *)(v887 + 8) & 2) == 0)
                  {
                    *(_DWORD *)(v306 + 8) |= 2u;
                  }
                }
              }
            }
          }
          if (*v258 <= v262 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DC1E4);
          }
          v267 = *(_QWORD *)(*((_QWORD *)v249 + 26) + 8 * (v262 - 1));
          v873 = (WTF *)v913;
          v874 = (WTF **)v870;
          v875 = (WTF **)&v902;
          v268 = *(_QWORD *)(v267 + 8);
          if ((v268 & 1) != 0)
          {
            v723 = *(_QWORD *)(v268 & 0xFFFFFFFF8);
            if ((v268 & 2) != 0
              || ((v724 = *(unsigned int *)((v268 & 0xFFFFFFFF8) + 8), (_DWORD)v724 != 0x3FFFFFFF)
                ? (v725 = (_DWORD)v724 == -1)
                : (v725 = 1),
                  v725))
            {
              v726 = 2;
            }
            else if (v724 >> 28)
            {
              v820 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v820 = v723;
              *(_DWORD *)(v820 + 8) = v724;
              v726 = 1;
              v723 = v820;
            }
            else
            {
              v726 = *(_QWORD *)(v268 & 0xFFFFFFFF8);
              v723 = v724 << 36;
            }
            v268 = v723 | v726;
          }
          v269 = *(_QWORD *)(v264 + 8);
          if ((v269 & 1) != 0)
          {
            v727 = *(_QWORD *)(v269 & 0xFFFFFFFF8);
            if ((v269 & 2) != 0
              || ((v728 = *(unsigned int *)((v269 & 0xFFFFFFFF8) + 8), (_DWORD)v728 != 0x3FFFFFFF)
                ? (v729 = (_DWORD)v728 == -1)
                : (v729 = 1),
                  v729))
            {
              v730 = 2;
            }
            else if (v728 >> 28)
            {
              v821 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v821 = v727;
              *(_DWORD *)(v821 + 8) = v728;
              v730 = 1;
              v727 = v821;
            }
            else
            {
              v730 = *(_QWORD *)(v269 & 0xFFFFFFFF8);
              v727 = v728 << 36;
            }
            v269 = v727 | v730;
          }
          v896[0] = 0x3FFFFFFFLL;
          if ((*(_WORD *)(v264 + 18) & 0xFFFE) == 0x14)
          {
            v307 = *(_QWORD *)(v264 + 72);
            v308 = v269;
            if ((v269 & 1) != 0)
            {
              v763 = *(_QWORD *)(v269 & 0xFFFFFFFF8);
              if ((v269 & 2) != 0
                || (v764 = *(unsigned int *)((v269 & 0xFFFFFFFF8) + 8), (_DWORD)v764 == 0x3FFFFFFF)
                || (_DWORD)v764 == -1)
              {
                v765 = 2;
              }
              else if (v764 >> 28)
              {
                v824 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v824 = v763;
                *(_DWORD *)(v824 + 8) = v764;
                v765 = 1;
                v763 = v824;
              }
              else
              {
                v765 = *(_QWORD *)(v269 & 0xFFFFFFFF8);
                v763 = v764 << 36;
              }
              v308 = v763 | v765;
            }
            v895[0] = v308;
            isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode(v263, v307, v895, v222, v223, v224, v225, v226);
            if ((v895[0] & 1) != 0 && (v895[0] & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v895[0] & 0xFFFFFFFF8, v220, v221, v222, v223, v224, v225, v226);
            if (isLiveInBytecode)
            {
              v896[0] = v307;
            }
          }
          if (v268 == v269)
          {
            v270 = v268 & 1;
            goto LABEL_327;
          }
          if ((v268 & 2) != 0)
          {
            LODWORD(v271) = -1;
          }
          else if ((v268 & 1) != 0)
          {
            LODWORD(v271) = *(_DWORD *)((v268 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v271 = v268 >> 36;
          }
          if ((v269 & 2) != 0)
          {
            LODWORD(v272) = -1;
          }
          else if ((v269 & 1) != 0)
          {
            LODWORD(v272) = *(_DWORD *)((v269 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v272 = v269 >> 36;
          }
          v273 = (uint64_t *)(v268 & 0xFFFFFFFF8);
          if ((_DWORD)v271 == (_DWORD)v272)
          {
            v721 = v268 & 0xFFFFFFFF8;
            if ((v268 & 1) != 0)
              v721 = *v273;
            v722 = (_QWORD *)(v269 & 0xFFFFFFFF8);
            if ((v269 & 1) != 0)
              v722 = (_QWORD *)*v722;
            if ((_QWORD *)v721 == v722)
            {
              v270 = v269 & 1;
              goto LABEL_327;
            }
          }
          v274 = v268 & 0xFFFFFFFF8;
          if ((v268 & 1) != 0)
            v274 = *v273;
          v270 = v269 & 1;
          v275 = (_QWORD *)(v269 & 0xFFFFFFFF8);
          v854 = v274;
          if ((v269 & 1) != 0)
          {
            v280 = v261;
            v748 = *v275;
            if (v274 == *v275)
            {
              v276 = v274 == 0;
              v749 = (JSC::UnlinkedCodeBlock ***)(v274 + 8);
              if (!v854)
                v749 = (JSC::UnlinkedCodeBlock ***)(v263 + 40);
              v278 = *v749;
              if ((v269 & 2) != 0)
              {
                v282 = 0;
                v270 = v269 & 1;
              }
              else
              {
                LODWORD(v279) = *(_DWORD *)((v269 & 0xFFFFFFFF8) + 8);
                v270 = v269 & 1;
LABEL_349:
                if ((v279 & 3) == 0)
                {
                  if ((v268 & 2) != 0)
                  {
                    LODWORD(v326) = -1;
                    goto LABEL_407;
                  }
                  if ((v268 & 1) != 0)
                  {
                    LODWORD(v326) = *(_DWORD *)((v268 & 0xFFFFFFFF8) + 8);
                    if ((v326 & 3) != 0)
                      goto LABEL_407;
LABEL_353:
                    v280 = v261;
                    v281 = JSC::DFG::Graph::livenessFor((JSC::DFG::Graph *)v263, v278, v221, v222, v223, v224, v225, v226);
                    v282 = 1;
                  }
                  else
                  {
                    if ((v268 & 0x3000000000) == 0)
                      goto LABEL_353;
                    v326 = v268 >> 36;
LABEL_407:
                    v327 = JSC::tmpLivenessForCheckpoint((uint64_t)v278, v326);
                    if (v327)
                    {
                      v386 = v327;
                      v280 = v261;
                      if (v276)
                      {
                        do
                        {
                          v282 = 1;
                          v386 &= v386 - 1;
                        }
                        while (v386);
                        v276 = 1;
                      }
                      else
                      {
                        do
                        {
                          v282 = 1;
                          v386 &= v386 - 1;
                        }
                        while (v386);
                        v276 = 0;
                      }
                    }
                    else
                    {
                      v280 = v261;
                      v282 = 1;
                    }
LABEL_403:
                    v281 = JSC::DFG::Graph::livenessFor((JSC::DFG::Graph *)v263, v278, v319, v320, v321, v322, v323, v324);
                    if ((v268 & 2) != 0)
                    {
                      LODWORD(v283) = -1;
                      goto LABEL_356;
                    }
                  }
                  if ((v268 & 1) != 0)
                    LODWORD(v283) = *(_DWORD *)((v268 & 0xFFFFFFFF8) + 8);
                  else
                    v283 = v268 >> 36;
LABEL_356:
                  v284 = (v283 & 3) + (v283 >> 2);
                  v285 = *(unsigned int **)v281;
                  v286 = **(_DWORD **)v281;
                  if (v286 <= v284)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DB690);
                  }
                  if (v282)
                  {
                    if (v270)
                      LODWORD(v287) = *(_DWORD *)((v269 & 0xFFFFFFFF8) + 8);
                    else
                      v287 = v269 >> 36;
                  }
                  else
                  {
                    LODWORD(v287) = -1;
                  }
                  v261 = v280;
                  v288 = (v287 & 3) + (v287 >> 2);
                  if (v286 <= v288)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DB6B0);
                  }
                  v289 = v285 + 2;
                  v290 = (uint64_t *)&v285[4 * v284 + 2];
                  v291 = v290[1] + 31;
                  if (v291 >= 0x20)
                  {
                    v860 = v270;
                    v292 = v280;
                    v293 = *(_QWORD *)&v289[4 * v288];
                    v294 = *v290;
                    v295 = v291 >> 5;
                    v296 = 0;
                    v297 = -1;
                    if (v276)
                    {
                      do
                      {
                        v298 = *(_DWORD *)(v294 + 4 * v296) & ~*(_DWORD *)(v293 + 4 * v296);
                        if (v298)
                        {
                          v299 = v297;
                          do
                          {
                            if ((v298 & 1) != 0)
                            --v299;
                            v684 = v298 >= 2;
                            v298 >>= 1;
                          }
                          while (v684);
                        }
                        ++v296;
                        v297 -= 32;
                      }
                      while (v296 != v295);
                    }
                    else
                    {
                      do
                      {
                        v310 = *(_DWORD *)(v294 + 4 * v296) & ~*(_DWORD *)(v293 + 4 * v296);
                        if (v310)
                        {
                          v311 = v297;
                          do
                          {
                            if ((v310 & 1) != 0)
                            {
                              v313 = v311
                                   + (HIDWORD(*(_QWORD *)(v854 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v854 + 24) >> 28) >> 24 << 20));
                            }
                            --v311;
                            v312 = v310 > 1;
                            v310 >>= 1;
                          }
                          while (v312);
                        }
                        ++v296;
                        v297 -= 32;
                      }
                      while (v296 != v295);
                    }
                    v270 = v860;
                    v208 = v865;
                    v261 = v292;
                    goto LABEL_328;
                  }
LABEL_327:
                  v208 = v865;
                  goto LABEL_328;
                }
                v280 = v261;
                v282 = 1;
              }
LABEL_395:
              if ((v268 & 2) != 0)
              {
                LODWORD(v315) = -1;
              }
              else if ((v268 & 1) != 0)
              {
                LODWORD(v315) = *(_DWORD *)((v268 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v315 = v268 >> 36;
              }
              v316 = JSC::tmpLivenessForCheckpoint((uint64_t)v278, v315);
              v861 = v270;
              if (v282)
              {
                if (v270)
                  LODWORD(v317) = *(_DWORD *)((v269 & 0xFFFFFFFF8) + 8);
                else
                  v317 = v269 >> 36;
              }
              else
              {
                LODWORD(v317) = -1;
              }
              v318 = JSC::tmpLivenessForCheckpoint((uint64_t)v278, v317);
              v325 = v316 & ~v318 & 0xF;
              if ((v316 & ~v318 & 0xF) != 0)
              {
                if (v276)
                {
                  do
                  {
                    v276 = 1;
                    v325 &= v325 - 1;
                  }
                  while (v325);
                }
                else
                {
                  do
                  {
                    v325 &= v325 - 1;
                  }
                  while (v325);
                  v276 = 0;
                }
              }
              v270 = v861;
              goto LABEL_403;
            }
            if ((v269 & 2) != 0
              || (v812 = *(unsigned int *)((v269 & 0xFFFFFFFF8) + 8), (_DWORD)v812 == 0x3FFFFFFF)
              || (_DWORD)v812 == -1)
            {
              v813 = 2;
            }
            else if (v812 >> 28)
            {
              v826 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v826 = v748;
              *(_DWORD *)(v826 + 8) = v812;
              v813 = 1;
              v748 = v826;
            }
            else
            {
              v813 = v748;
              v748 = v812 << 36;
            }
            v328 = v748 | v813;
            v270 = v269 & 1;
          }
          else
          {
            if ((_QWORD *)v274 == v275)
            {
              v276 = v275 == 0;
              v277 = (JSC::UnlinkedCodeBlock ***)(v275 + 1);
              if (!v275)
                v277 = (JSC::UnlinkedCodeBlock ***)(v263 + 40);
              v278 = *v277;
              if ((v269 & 2) == 0)
              {
                v279 = v269 >> 36;
                goto LABEL_349;
              }
              v280 = v261;
              v282 = 0;
              goto LABEL_395;
            }
            v328 = v269;
          }
          v872[0] = v328;
          JSC::DFG::Graph::localsAndTmpsLiveInBytecode(v263, v872, (WTF::BitVector *)v894);
          if ((v872[0] & 1) != 0 && (v872[0] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v872[0] & 0xFFFFFFFF8, v329, v221, v222, v223, v224, v225, v226);
          if (!*(_DWORD *)(v263 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x1982DC2C0);
          }
          LODWORD(v908) = *(_DWORD *)(**(_QWORD **)(v263 + 48) + 92);
          v330 = v268;
          if ((v268 & 1) != 0)
          {
            v814 = v270;
            v815 = *v273;
            if ((v268 & 2) != 0
              || (v816 = *(unsigned int *)((v268 & 0xFFFFFFFF8) + 8), (_DWORD)v816 == 0x3FFFFFFF)
              || (_DWORD)v816 == -1)
            {
              v817 = 2;
            }
            else if (v816 >> 28)
            {
              v827 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v827 = v815;
              *(_DWORD *)(v827 + 8) = v816;
              v817 = 1;
              v815 = v827;
            }
            else
            {
              v817 = *v273;
              v815 = v816 << 36;
            }
            v330 = v815 | v817;
            v270 = v814;
          }
          v331 = 0;
          v871[0] = v330;
          *(_QWORD *)&v887 = v896;
          *((_QWORD *)&v887 + 1) = &v908;
          v837 = (JSC::DFG::Graph *)v263;
          v839 = (JSC::UnlinkedCodeBlock ***)(v263 + 40);
          v332 = v871;
          v333 = 0x3FFFFFFF;
          v833 = v330;
          v334 = 0x3FFFFFFF;
          v888 = (WTF **)v894;
          v889 = &v873;
          v836 = v261;
          while (1)
          {
            v335 = v330 & 0xFFFFFFFF8;
            if ((v330 & 1) != 0)
              v335 = *(_QWORD *)v335;
            if (v335)
            {
              v336 = *(_QWORD *)(v335 + 24);
              v855 = HIDWORD(v336) & 0xFFFFF | ((int)(v336 >> 28) >> 24 << 20);
              v337 = (v336 >> 60) | (16 * *(_BYTE *)(v335 + 32));
              if ((*(_BYTE *)(v335 + 32) & 1) != 0)
              {
                v674 = (v855 + 3);
                if (HIDWORD(v896[0]) != v674 >> 31 || LODWORD(v896[0]) != (_DWORD)v674)
                {
                  v676 = (_QWORD *)(2 * v894[0]);
                  v677 = (v894[0] & 0x8000000000000000) != 0 ? 63 : *v676;
                  v678 = (-4 - v855);
                  if (v677 <= v678)
                    goto LABEL_853;
                  v679 = v676 + 1;
                  v680 = v894;
                  if (v894[0] >= 0)
                    v680 = v679;
                  if (((*(_QWORD *)((char *)v680 + ((v678 >> 3) & 0x1FFFFFF8)) >> (-4 - v855)) & 1) == 0)
                  {
LABEL_853:
                    v337 = (*(_QWORD *)(v335 + 24) >> 60) | (16 * *(_BYTE *)(v335 + 32));
                  }
                }
              }
              if ((v337 & 0xFu) - 3 <= 2)
              {
                v338 = (v855 + 4);
                if (HIDWORD(v896[0]) != v338 >> 31 || LODWORD(v896[0]) != (_DWORD)v338)
                {
                  v340 = (_QWORD *)(2 * v894[0]);
                  v659 = (v894[0] & 0x8000000000000000) != 0 ? 63 : *v340;
                  v382 = (-5 - v855);
                  if (v659 <= v382)
                    goto LABEL_873;
                  v383 = v340 + 1;
                  v384 = v894;
                  if (v894[0] >= 0)
                    v384 = v383;
                  if (((*(_QWORD *)((char *)v384 + ((v382 >> 3) & 0x1FFFFFF8)) >> (-5 - v855)) & 1) == 0)
LABEL_873:
                }
              }
            }
            else
            {
              v855 = 0;
            }
            v341 = (JSC::UnlinkedCodeBlock ***)(v335 + 8);
            if (!v335)
              v341 = v839;
            v851 = *v341;
            v342 = JSC::DFG::Graph::livenessFor(v837, *v341, v221, v222, v223, v224, v225, v226);
            v343 = *v332;
            v841 = v332;
            v844 = v335;
            if ((*v332 & 2) != 0)
            {
              if ((v343 & 1) == 0)
              {
                v344 = 0xFFFFFFFFLL;
                goto LABEL_431;
              }
              v799 = v342;
              v800 = v270;
              v801 = *(_QWORD *)(v343 & 0xFFFFFFFF8);
              v344 = 0xFFFFFFFFLL;
            }
            else
            {
              if ((v343 & 1) == 0)
              {
                v344 = v343 >> 36;
                goto LABEL_431;
              }
              v799 = v342;
              v800 = v270;
              v344 = *(unsigned int *)((v343 & 0xFFFFFFFF8) + 8);
              v801 = *(_QWORD *)(v343 & 0xFFFFFFFF8);
              if ((_DWORD)v344 != -1 && v344 != 0x3FFFFFFF)
              {
                if (v344 >> 28)
                {
                  v825 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v825 = v801;
                  *(_DWORD *)(v825 + 8) = v344;
                  v803 = 1;
                  v801 = v825;
                }
                else
                {
                  v803 = *(_QWORD *)(v343 & 0xFFFFFFFF8);
                  v801 = v344 << 36;
                }
                goto LABEL_1051;
              }
            }
            v803 = 2;
LABEL_1051:
            v343 = v801 | v803;
            v270 = v800;
            v342 = v799;
LABEL_431:
            if ((v331 & 1) == 0)
              goto LABEL_432;
            v348 = v343 & 1;
            if ((v343 & 2) != 0)
            {
              v366 = v342;
              v365 = v270;
              v367 = (_QWORD *)(v343 & 0xFFFFFFFF8);
              LODWORD(v270) = -1;
              if ((v343 & 1) == 0)
                goto LABEL_467;
            }
            else
            {
              v365 = v270;
              v366 = v342;
              if ((v343 & 1) == 0)
              {
                v270 = v343 >> 36;
                v367 = (_QWORD *)(v343 & 0xFFFFFFFF8);
                goto LABEL_467;
              }
              v367 = (_QWORD *)(v343 & 0xFFFFFFFF8);
              LODWORD(v270) = *(_DWORD *)((v343 & 0xFFFFFFFF8) + 8);
            }
            v367 = (_QWORD *)*v367;
LABEL_467:
            v368 = (JSC::UnlinkedCodeBlock ***)(v367 + 1);
            v25 = v367 == 0;
            v369 = v839;
            if (!v25)
              v369 = v368;
            v370 = (unsigned __int8 *)(*(_QWORD *)JSC::UnlinkedCodeBlock::instructions((*v369)[7])
                                     + ((unint64_t)v270 >> 2));
            v371 = *v370;
            if ((v371 | 2) == 0x82)
              v371 = v370[1];
            v372 = v371 > 3 || v371 == 2;
            v270 = v365;
            v342 = v366;
            if (v372)
            {
LABEL_432:
              v345 = v270;
              v346 = (v344 & 3) + (v344 >> 2);
              v347 = *(unsigned int **)v342;
              if (**(unsigned int **)v342 <= v346)
              {
                __break(0xC471u);
                JUMPOUT(0x1982DBCF8);
              }
              v348 = v343 & 1;
              goto LABEL_434;
            }
            v345 = v365;
            v346 = (v344 & 3) + (v344 >> 2);
            v347 = (unsigned int *)*((_QWORD *)v342 + 1);
            if (*v347 <= v346)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DB9BCLL);
            }
LABEL_434:
            if (v348 && (v343 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v343 & 0xFFFFFFFF8, v220, v221, v222, v223, v224, v225, v226);
            v349 = *((_DWORD *)v851 + 5);
            if (v349)
            {
              v350 = &v347[4 * v346 + 2];
              v351 = v855 - v349;
              v352 = v349 - 1;
              do
              {
                if (((int)v351 < v334 || (int)v351 >= v333)
                  && ((*(_DWORD *)(*(_QWORD *)v350 + 4 * (v352 >> 5)) >> v352) & 1) != 0
                  && (HIDWORD(v896[0]) != v351 >> 31 || v351 != LODWORD(v896[0])))
                {
                  v354 = (_QWORD *)(2 * v894[0]);
                  v355 = (v894[0] & 0x8000000000000000) != 0 ? 63 : *v354;
                  v356 = v352 - v855;
                  if (v355 <= v356)
                    goto LABEL_452;
                  v357 = v354 + 1;
                  v358 = v894;
                  if (v894[0] >= 0)
                    v358 = v357;
                  if (((*(_QWORD *)((char *)v358 + ((v356 >> 3) & 0x1FFFFFF8)) >> (v352
                                                                                  - v855)) & 1) == 0)
LABEL_452:
                }
                --v352;
                ++v351;
              }
              while (v352 != -1);
            }
            v359 = *v841;
            if ((*v841 & 2) != 0)
            {
              LODWORD(v220) = -1;
              v208 = v865;
              v261 = v836;
              v270 = v345;
              v360 = v844;
            }
            else
            {
              v208 = v865;
              v261 = v836;
              v270 = v345;
              if ((v359 & 1) != 0)
              {
                v220 = (void *)*(unsigned int *)((v359 & 0xFFFFFFFF8) + 8);
                v360 = v844;
                if ((v220 & 3) == 0)
                  goto LABEL_457;
              }
              else
              {
                v360 = v844;
                if ((v359 & 0x3000000000) == 0)
                  goto LABEL_457;
                v220 = (void *)(v359 >> 36);
              }
            }
            v373 = JSC::tmpLivenessForCheckpoint((uint64_t)v851, v220);
            if (v373)
            {
              v374 = v373;
              do
              {
                v375 = __clz(__rbit32(v374));
                if (v360)
                  v375 += *(_DWORD *)(v360 + 24) >> 22;
                if (HIDWORD(v896[0]) != 2 || LODWORD(v896[0]) != v375)
                {
                  v377 = (_QWORD *)(2 * v894[0]);
                  v378 = (v894[0] & 0x8000000000000000) != 0 ? 63 : *v377;
                  v379 = v908 + v375;
                  if (v378 <= v379)
                    goto LABEL_496;
                  v380 = v377 + 1;
                  v381 = v894;
                  if (v894[0] >= 0)
                    v381 = v380;
                  if (((*(_QWORD *)((char *)v381 + ((v379 >> 3) & 0x1FFFFFF8)) >> (v908
                                                                                  + v375)) & 1) == 0)
LABEL_496:
                }
                v374 &= v374 - 1;
              }
              while (v374);
            }
LABEL_457:
            if (!v360)
              break;
            v361 = v270;
            if (*(_QWORD *)v360)
              v362 = **(_DWORD **)v360;
            else
              v362 = 0;
            v334 = v855 + 5;
            v333 = v362 + v855 + 5;
            if (v855 + 5 < v333)
            {
              v363 = v855 + 5;
              do
              {
                ++v363;
                --v362;
              }
              while (v362);
            }
            v364 = *(_QWORD *)(v360 + 16);
            v332 = (unint64_t *)(v360 + 16);
            v330 = v364;
            v331 = 1;
            v270 = v361;
          }
          if ((v833 & 1) != 0 && (v833 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v833 & 0xFFFFFFFF8, v220, v221, v222, v223, v224, v225, v226);
          if ((v894[0] & 0x8000000000000000) == 0)
            WTF::BitVector::OutOfLineBits::destroy((WTF::BitVector::OutOfLineBits *)(2 * v894[0]), (WTF::BitVector::OutOfLineBits *)v220);
LABEL_328:
          if (v270 && (v269 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v269 & 0xFFFFFFFF8, v220, v221, v222, v223, v224, v225, v226);
          if ((v268 & 1) != 0 && (v268 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v268 & 0xFFFFFFFF8, v220, v221, v222, v223, v224, v225, v226);
          if (v870[0])
            WTF::fastFree(v870[0] - 16, v220, v221, v222, v223, v224, v225, v226);
LABEL_332:
          JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)v913, v261);
          v259 = (_DWORD)v892 + 1;
          LODWORD(v892) = v259;
          v249 = v910;
          v258 = (_DWORD *)((char *)v910 + 220);
          if (*((_DWORD *)v910 + 55) <= v259)
          {
LABEL_529:
            JSC::DFG::AvailabilityMap::~AvailabilityMap((JSC::DFG::AvailabilityMap *)v913, v220, v221, v222, v223, v224, v225, v226);
            v217 = v834;
            v216 = v835 + 1;
            v218 = 0uLL;
            if (v835 + 1 == v834)
              goto LABEL_530;
            goto LABEL_268;
          }
        }
      }
      v236 = &v233[v234];
    }
    else
    {
      v236 = 0;
      v234 = 0;
    }
    v235 = &v233[v234];
    goto LABEL_282;
  }
LABEL_530:
  v393 = v897;
  if (v897)
  {
    v897 = 0;
    v898 = 0;
    WTF::fastFree((unint64_t)v393, v209, v210, v211, v212, v213, v214, v215);
  }
  v394 = v866;
  if (v866)
  {
    v395 = *(unsigned int *)(v866 - 4);
    if ((_DWORD)v395)
    {
      v396 = (_QWORD *)(v866 + 8);
      do
      {
        if (*(v396 - 1) != -1 && *v396)
          WTF::fastFree(*v396 - 16, v209, v210, v211, v212, v213, v214, v215);
        v396 += 2;
        --v395;
      }
      while (v395);
    }
    WTF::fastFree(v394 - 16, v209, v210, v211, v212, v213, v214, v215);
  }
  v397 = (unint64_t *)v900;
  if (HIDWORD(v901))
  {
    v398 = 24 * HIDWORD(v901);
    do
    {
      if (*v397)
        WTF::fastFree(*v397, v209, v210, v211, v212, v213, v214, v215);
      v397 += 3;
      v398 -= 24;
    }
    while (v398);
    v397 = (unint64_t *)v900;
  }
  if (v397)
  {
    v900 = 0;
    LODWORD(v901) = 0;
    WTF::fastFree((unint64_t)v397, v209, v210, v211, v212, v213, v214, v215);
  }
  v399 = v883;
  if (HIDWORD(v884))
  {
    v400 = 8 * HIDWORD(v884);
    do
    {
      if (*(_QWORD *)v399)
        WTF::fastFree(*(_QWORD *)v399 - 16, v209, v210, v211, v212, v213, v214, v215);
      v399 = (WTF *)((char *)v399 + 8);
      v400 -= 8;
    }
    while (v400);
    v399 = v883;
  }
  if (v399)
  {
    v883 = 0;
    LODWORD(v884) = 0;
    WTF::fastFree((unint64_t)v399, v209, v210, v211, v212, v213, v214, v215);
  }
  v431 = v881;
  if (HIDWORD(v882))
  {
    v432 = 8 * HIDWORD(v882);
    do
    {
      if (*(_QWORD *)v431)
        WTF::fastFree(*(_QWORD *)v431 - 16, v209, v210, v211, v212, v213, v214, v215);
      v431 = (WTF *)((char *)v431 + 8);
      v432 -= 8;
    }
    while (v432);
    v431 = v881;
  }
  if (v431)
  {
    v881 = 0;
    LODWORD(v882) = 0;
    WTF::fastFree((unint64_t)v431, v209, v210, v211, v212, v213, v214, v215);
  }
  if (!*v858 || !*(_DWORD *)(*v858 - 12))
    return 0;
  v913[0] = *((WTF **)v208 + 4);
  v913[1] = (WTF *)((char *)&v914 + 8);
  *(_QWORD *)&v914 = 8;
  JSC::DFG::Graph::blocksInPreOrder(v913[0], v209, v210, v211, v212, v213, v214, v215, (uint64_t)&v910);
  v440 = v910;
  if (!v912)
  {
    v577 = 0;
    goto LABEL_739;
  }
  v856 = 0;
  v863 = (WTF *)((char *)v910 + 8 * v912);
  do
  {
    v441 = *(_QWORD *)v440;
    v909 = 0;
    if (!*(_DWORD *)(v441 + 220))
    {
LABEL_658:
      JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)v913, (JSC::DFG::BasicBlock *)v441);
      goto LABEL_659;
    }
    v442 = 0;
    v443 = (JSC::DFG::Node ***)(v441 + 208);
    while (1)
    {
      v908 = 0;
      v444 = (*v443)[v442];
      v908 = v444;
      v905 = (unint64_t)v913;
      v906 = (uint64_t *)&v909;
      v907 = &v908;
      v445 = *((unsigned __int16 *)v444 + 9);
      if (v445 <= 0x163)
      {
        if (*((unsigned __int16 *)v444 + 9) > 0x8Bu)
        {
          if (*((unsigned __int16 *)v444 + 9) <= 0x9Du)
          {
            if (v445 == 152)
            {
              v478 = *v858;
              if (*v858)
              {
                v479 = *((_QWORD *)v444 + 4);
                v480 = v479 & 0xFF00FFFFFFFFFFFFLL;
                v481 = *(_DWORD *)(v478 - 8);
                v482 = ((v479 & 0xFF00FFFFFFFFFFFFLL) + ~(v479 << 32)) ^ (((v479 & 0xFF00FFFFFFFFFFFFLL) + ~(v479 << 32)) >> 22);
                v483 = 9 * ((v482 + ~(v482 << 13)) ^ ((v482 + ~(v482 << 13)) >> 8));
                v484 = (v483 ^ (v483 >> 15)) + ~((v483 ^ (v483 >> 15)) << 27);
                v485 = v481 & ((v484 >> 31) ^ v484);
                v486 = *(_QWORD *)(v478 + 40 * v485);
                if (v486 == v480)
                  goto LABEL_794;
                v487 = 1;
                while (v486)
                {
                  v485 = (v485 + v487) & v481;
                  v486 = *(_QWORD *)(v478 + 40 * v485);
                  ++v487;
                  if (v486 == v480)
                    goto LABEL_794;
                }
              }
              goto LABEL_606;
            }
            if (v445 - 140 >= 2)
              goto LABEL_606;
            goto LABEL_627;
          }
          v448 = v442;
          if (*((unsigned __int16 *)v444 + 9) > 0x113u)
          {
            if (*((unsigned __int16 *)v444 + 9) > 0x15Au)
            {
              if (v445 == 347)
              {
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))
                {
                  v567 = 348;
                  goto LABEL_720;
                }
              }
              else if (v445 == 354)
              {
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))
                {
                  v567 = 355;
LABEL_720:
                  *((_WORD *)v444 + 9) = v567;
                  v568 = 9;
LABEL_721:
                  *((_DWORD *)v444 + 14) = v568;
                  goto LABEL_606;
                }
              }
            }
            else
            {
              if (v445 == 276)
              {
                if (!WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))goto LABEL_606;
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v902, v444);
                JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>((uint64_t)v913, v448, 0, 24, (uint64_t)&v902, *((_QWORD *)v908 + 3), v596, v597);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v902, v598, v599, v600, v601, v602, v603, v604);
                v605 = v908;
                *((_WORD *)v908 + 9) = 349;
                *((_DWORD *)v605 + 14) = 9;
                goto LABEL_768;
              }
              if (v445 == 277)
              {
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))
                {
                  v567 = 350;
                  goto LABEL_720;
                }
              }
            }
            goto LABEL_606;
          }
          if (*((unsigned __int16 *)v444 + 9) <= 0xF4u)
          {
            if (v445 == 158)
            {
              v489 = *v858;
              if (*v858)
              {
                v490 = *((_QWORD *)v444 + 3);
                v480 = v490 & 0xFF00FFFFFFFFFFFFLL;
                v491 = *(_DWORD *)(v489 - 8);
                v492 = ((v490 & 0xFF00FFFFFFFFFFFFLL) + ~(v490 << 32)) ^ (((v490 & 0xFF00FFFFFFFFFFFFLL) + ~(v490 << 32)) >> 22);
                v493 = 9 * ((v492 + ~(v492 << 13)) ^ ((v492 + ~(v492 << 13)) >> 8));
                v494 = (v493 ^ (v493 >> 15)) + ~((v493 ^ (v493 >> 15)) << 27);
                v495 = v491 & ((v494 >> 31) ^ v494);
                v496 = *(_QWORD *)(v489 + 40 * v495);
                if (v496 == v480)
                {
LABEL_794:
                  v518 = v444;
                  goto LABEL_701;
                }
                v497 = 1;
                while (v496)
                {
                  v495 = (v495 + v497) & v491;
                  v496 = *(_QWORD *)(v489 + 40 * v495);
                  ++v497;
                  if (v496 == v480)
                    goto LABEL_794;
                }
              }
            }
            goto LABEL_606;
          }
          if (*((unsigned __int16 *)v444 + 9) <= 0xF6u)
          {
            if (v445 != 245)
              goto LABEL_606;
LABEL_788:
            v623 = *((_QWORD *)v444 + 5) & 0xFF00FFFFFFFFFFFFLL;
            if (!WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, v623))goto LABEL_606;
            v881 = v865;
            v882 = &v908;
            v624 = *(unsigned __int16 *)(v623 + 18);
            if ((v624 - 350) < 3)
            {
              v892 = v865;
              if (_ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEbS3_S5_((uint64_t)&v892, (uint64_t)&v892, v623))
              {
                v873 = 0;
                v874 = 0;
                *(_QWORD *)&v887 = v865;
                *((_QWORD *)&v887 + 1) = &v873;
                v888 = v913;
                v889 = &v909;
                v890 = &v908;
                _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE2_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEvS3_S5_((uint64_t *)&v887, (uint64_t *)&v887, v623);
                v632 = v873;
                if (!v873)
                  goto LABEL_606;
                v873 = 0;
                LODWORD(v874) = 0;
LABEL_793:
                WTF::fastFree((unint64_t)v632, v631, (uint64_t)v434, v435, v436, v437, v438, v439);
                goto LABEL_606;
              }
              v731 = v908;
LABEL_921:
              goto LABEL_606;
            }
            if (v624 == 349)
              v715 = *(_DWORD *)(v623 + 72);
            else
              v715 = 0;
            v716 = (int *)*((_QWORD *)v444 + 9);
            *v716 += v715;
            v717 = *(_QWORD *)v623;
            v718 = (_QWORD *)(*(_QWORD *)v623 & 0xFFFFFFFF8);
            if ((v717 & 1) != 0)
              v718 = (_QWORD *)*v718;
            if (!v718 || (v719 = v718[3], (v719 >> 60) - 3 < 3))
            {
              v731 = v444;
              goto LABEL_921;
            }
            v887 = 0uLL;
            v720 = *v716;
            if (v720 + 1 < (v719 & 0x3FFFFF))
            {
              v850 = v720 + 6;
              do
              {
                v766 = *((_QWORD *)v865 + 4);
                v767 = v850 + (HIDWORD(v719) & 0xFFFFF | ((int)(v719 >> 28) >> 24 << 20));
                v768 = WTF::fastMalloc((WTF *)0x18);
                *(_QWORD *)v768 = v767 | ((unint64_t)(v767 >> 31) << 32);
                *(_DWORD *)(v768 + 8) = 0x3FFFFFFF;
                *(_BYTE *)(v768 + 12) = 6;
                *(_QWORD *)(v768 + 16) = 0;
                *(_QWORD *)(v768 + 16) = *(_QWORD *)(v766 + 592);
                *(_QWORD *)(v766 + 592) = v768;
                v873 = 0;
                v769 = v909;
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v869, v908);
                v772 = (WTF *)JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v913, v769, 0, 19, (uint64_t)v869, v768, v770, v771);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v869, v773, v774, v775, v776, v777, v778, v779);
                v873 = v772;
                v780 = HIDWORD(v887);
                if (HIDWORD(v887) == DWORD2(v887))
                {
                  WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>((uint64_t)&v887, (unint64_t)&v873);
                }
                else
                {
                  *(_QWORD *)(v887 + 8 * HIDWORD(v887)) = v772;
                  HIDWORD(v887) = v780 + 1;
                }
                v719 = v718[3];
                v781 = v850 - 4;
                ++v850;
              }
              while (v781 < ((_DWORD)v718[3] & 0x3FFFFFu));
            }
            v632 = (WTF *)v887;
            if ((_QWORD)v887)
            {
              *(_QWORD *)&v887 = 0;
              DWORD2(v887) = 0;
              goto LABEL_793;
            }
            goto LABEL_606;
          }
          if (*((unsigned __int16 *)v444 + 9) <= 0xFAu)
          {
            if (v445 != 247)
              goto LABEL_606;
            goto LABEL_788;
          }
          switch(v445)
          {
            case 0x107u:
              if (!WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))break;
              *((_WORD *)v444 + 9) = 351;
              v568 = 25;
              goto LABEL_721;
            case 0xFBu:
              goto LABEL_788;
            case 0x10Bu:
              if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, (uint64_t)v444))
              {
                *((_WORD *)v444 + 9) = 352;
                *((_DWORD *)v444 + 14) = 9;
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v900, v444);
                inserted = JSC::DFG::InsertionSet::insertConstant((uint64_t)v913, v448, (uint64_t)&v900, *((unint64_t **)v908 + 9), 0, v786, v787, v788);
                *((_QWORD *)v908 + 3) = inserted & 0xFF00FFFFFFFFFFFFLL;
                v542 = (JSC::DFG::NodeOrigin *)&v900;
LABEL_707:
                JSC::DFG::NodeOrigin::~NodeOrigin(v542, v535, v536, v537, v538, v539, v540, v541);
              }
              break;
          }
        }
        else
        {
          if (*((unsigned __int16 *)v444 + 9) <= 0x83u)
          {
            switch(v445)
            {
              case '\\':
                v498 = *((_QWORD *)v865 + 4);
                v499 = *((_QWORD *)v444 + 3);
                v500 = *(_DWORD *)(v498 + 164);
                if (v500 <= v499)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982DC204);
                }
                v842 = *((_QWORD *)v865 + 4);
                v845 = *(_QWORD *)(v498 + 152);
                v501 = *(_QWORD *)(v845 + 8 * *((_QWORD *)v444 + 3)) & 0xFF00FFFFFFFFFFFFLL;
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, v501))
                {
                  if (*(_WORD *)(v501 + 18) == 349)
                    v502 = *(_DWORD *)(v501 + 72);
                  else
                    v502 = 0;
                  if (v500 <= (int)v499 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DC20CLL);
                  }
                  if (*(unsigned __int16 *)((*(_QWORD *)(v845 + 8 * (v499 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                           + 0x12) > 2u)
                    goto LABEL_692;
                  v681 = **(_QWORD **)((*(_QWORD *)(v845 + 8 * (v499 + 1)) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                  if (v681 < 0xFFFE000000000000)
                    goto LABEL_692;
                  v682 = (_QWORD *)(*(_QWORD *)v501 & 0xFFFFFFFF8);
                  if ((*(_QWORD *)v501 & 1) != 0)
                    v682 = (_QWORD *)*v682;
                  v683 = v502 + v681;
                  if (!v682)
                  {
                    v684 = v683 < v502 || v683 >= *(_DWORD *)(*(_QWORD *)(v842 + 32) + 28) - 1;
                    if (v684)
                      goto LABEL_692;
                    v848 = v501;
                    v503 = v502;
LABEL_863:
                    v685 = v683 + 6;
                    v686 = WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)v686 = v685 | ((unint64_t)(v685 >> 31) << 32);
                    *(_DWORD *)(v686 + 8) = 0x3FFFFFFF;
                    *(_BYTE *)(v686 + 12) = 6;
                    *(_QWORD *)(v686 + 16) = 0;
                    *(_QWORD *)(v686 + 16) = *(_QWORD *)(v842 + 592);
                    *(_QWORD *)(v842 + 592) = v686;
                    if (v682 && (v682[3] >> 60) - 3 > 2)
                    {
                      v698 = 0;
                    }
                    else
                    {
                      v687 = v909;
                      JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v897, v908);
                      v694 = *((_QWORD *)v865 + 4);
                      v695 = *((_DWORD *)v908 + 6) + 1;
                      if (*(_DWORD *)(v694 + 164) <= v695)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1982DC224);
                      }
                      v696 = *(_QWORD *)(*(_QWORD *)(v694 + 152) + 8 * v695);
                      v698 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)v913, v687, 0, 0xBBu, (uint64_t)&v897, v696, v697 & 0xFF00FFFFFFFFFFFFLL | 0x4000000000000);
                      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v897, v699, v700, v701, v702, v703, v704, v705);
                    }
                    v849 = v909;
                    v706 = *((_QWORD *)v908 + 8);
                    JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v896, v908);
                    v510 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v913, v849, v706, 0x13u, (uint64_t)v896, v686, v698 & 0xFF00FFFFFFFFFFFFLL);
                    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v896, v707, v708, v709, v710, v711, v712, v713);
                    if (v510)
                      goto LABEL_700;
                    v444 = v908;
                    v714 = *((unsigned __int16 *)v908 + 9);
                    if (v714 != 264)
                    {
                      if (v714 == 146)
                      {
                        v504 = *((_DWORD *)v908 + 20);
LABEL_694:
                        if ((v504 & 0xFE0000) != 0)
                          v505 = 97;
                        else
                          v505 = 96;
                        v846 = v909;
                        v506 = *((_QWORD *)v444 + 8);
                        JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v895, v444);
                        v507 = *((_QWORD *)v865 + 4);
                        v508 = *((_QWORD *)v908 + 3);
                        v509 = *(_DWORD *)(v507 + 164);
                        if (v509 <= v508)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982DC214);
                        }
                        if (v509 <= (int)v508 + 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982DC21CLL);
                        }
                        v510 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>((uint64_t)v913, v846, v506, v505, (uint64_t)v895, v503, *(_QWORD *)(*(_QWORD *)(v507 + 152) + 8 * *((_QWORD *)v908 + 3)), *(_QWORD *)(*(_QWORD *)(v507 + 152) + 8 * (*((_QWORD *)v908 + 3) + 1)));
                        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v895, v511, v512, v513, v514, v515, v516, v517);
LABEL_700:
                        v518 = v908;
                        v519 = v510;
LABEL_701:
                        JSC::DFG::Node::convertToIdentityOn((uint64_t)v518, v519);
                        goto LABEL_606;
                      }
                      v502 = v503;
LABEL_692:
                      v503 = v502;
                    }
                    v504 = *((_DWORD *)v444 + 18);
                    goto LABEL_694;
                  }
                  v810 = v682[3];
                  if (v683 >= v502 && v683 < (v810 & 0x3FFFFF) - 1)
                  {
                    v848 = v501;
                    v503 = v502;
                    v683 += HIDWORD(v810) & 0xFFFFF | ((int)(v810 >> 28) >> 24 << 20);
                    goto LABEL_863;
                  }
                  goto LABEL_692;
                }
                break;
              case 'b':
                v521 = *(_QWORD *)JSC::DFG::Node::argumentsChild(v444) & 0xFF00FFFFFFFFFFFFLL;
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, v521))
                {
                  if (!*((_BYTE *)v908 + 16))
                  {
                    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v865 + 4), v908, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x3BA, "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()", "node->origin.exitOK");
                    __break(0xC471u);
                    JUMPOUT(0x1982DBAACLL);
                  }
                  JSC::DFG::NodeOrigin::withExitOK((uint64_t)v908, 1, (uint64_t)&v887);
                  v522 = v908;
                  v523 = v909;
                  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v894, (const JSC::DFG::NodeOrigin *)&v887);
                  ArgumentsArrayLength = JSC::DFG::emitCodeToGetArgumentsArrayLength((uint64_t *)v913, v521, v523, (uint64_t)v894, 1, v524, v525, v526);
                  JSC::DFG::Node::convertToIdentityOn((uint64_t)v522, ArgumentsArrayLength);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v894, v528, v529, v530, v531, v532, v533, v534);
                  v542 = (JSC::DFG::NodeOrigin *)&v887;
                  goto LABEL_707;
                }
                break;
              case 'c':
                v543 = *(_QWORD *)JSC::DFG::Node::argumentsChild(v444) & 0xFF00FFFFFFFFFFFFLL;
                if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, v543))
                {
                  v545 = v908;
                  if (!*((_BYTE *)v908 + 16))
                  {
                    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v865 + 4), v908, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x3C8, "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()", "node->origin.exitOK");
                    __break(0xC471u);
                    JUMPOUT(0x1982DBA64);
                  }
                  v893 = 1;
                  v546 = (JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *)*((_QWORD *)v908 + 9);
                  *(_QWORD *)&v887 = v913;
                  *((_QWORD *)&v887 + 1) = &v909;
                  v888 = &v908;
                  v889 = &v893;
                  v890 = &v892;
                  v891 = v865;
                  v892 = v546;
                  v883 = (WTF *)v913;
                  v884 = &v909;
                  v885 = &v908;
                  v886 = &v893;
                  v547 = *(unsigned __int16 *)(v543 + 18);
                  v881 = (WTF *)&v892;
                  v882 = (JSC::DFG::Node **)v865;
                  if ((v547 - 350) < 3)
                  {
                    v880 = v865;
                    v633 = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEbS3_S5_((uint64_t)&v880, (uint64_t)&v880, v543);
                    if (!v633
                      || (v879 = v865,
                          v634 = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE0_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_((uint64_t)&v879, (uint64_t)&v879, v543)+ 1, v635 = *((_DWORD *)v892 + 6), v634 > v635))
                    {
                      v545 = v908;
LABEL_918:
                      *((_WORD *)v545 + 9) = 100;
                      *((_DWORD *)v545 + 14) = 8;
                      goto LABEL_606;
                    }
                    v636 = v635 - 1;
                    if (v635 - 1 < *((_DWORD *)v892 + 5))
                    {
                      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v865 + 4), v908, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x424, "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()", "varargsData->limit - 1 >= varargsData->mandatoryMinimum");
                      WTFCrashWithInfoImpl(1060, "./dfg/DFGArgumentsEliminationPhase.cpp", "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()");
                    }
                    v873 = v865;
                    v874 = &v881;
                    v875 = v913;
                    v876 = &v909;
                    v877 = &v908;
                    v878 = &v893;
                    v637 = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEjE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_j((uint64_t *)&v873, (uint64_t *)&v873, v543, 0);
                    if (v637 > v636)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982DC040);
                    }
                    if (v637 < v636)
                    {
                      v732 = v637;
                      v733 = 0;
                      do
                      {
                        if (!v733)
                        {
                          v734 = v909;
                          JSC::DFG::NodeOrigin::withExitOK((uint64_t)v908, v893, (uint64_t)v872);
                          v733 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)v913, v734, (uint64_t)v872, 0xAuLL, 0, v735, v736, v737);
                          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v872, v738, v739, v740, v741, v742, v743, v744);
                        }
                      }
                      while (v636 != v732);
                    }
                    v621 = v908;
                    v622 = (JSC::DFG::Graph *)*((_QWORD *)v865 + 4);
                    goto LABEL_717;
                  }
                  if (v547 == 349)
                    v606 = *(_DWORD *)(v543 + 72);
                  else
                    v606 = 0;
                  v607 = *((_DWORD *)v546 + 4) + v606;
                  *((_DWORD *)v546 + 4) = v607;
                  v566 = (_QWORD *)(*(_QWORD *)v543 & 0xFFFFFFFF8);
                  if ((*(_QWORD *)v543 & 1) != 0)
                    v566 = (_QWORD *)*v566;
                  v565 = v865;
                  if (!v566)
                    goto LABEL_918;
                  v608 = v566[3];
                  if ((v608 >> 60) - 3 < 3)
                    goto LABEL_918;
                  v609 = v608 & 0x3FFFFF;
                  v684 = v609 >= v607;
                  v610 = v609 - v607;
                  if (v610 != 0 && v684)
                    v611 = v610;
                  else
                    v611 = 1;
                  if (!v611)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DC020);
                  }
                  v612 = *((_DWORD *)v546 + 6);
                  if (v611 > v612)
                    goto LABEL_918;
                  v613 = v612 - 1;
                  if (v613 < *((_DWORD *)v546 + 5))
                  {
                    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v865 + 4), v545, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x478, "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()", "varargsData->limit - 1 >= varargsData->mandatoryMinimum");
                    WTFCrashWithInfoImpl(1144, "./dfg/DFGArgumentsEliminationPhase.cpp", "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()");
                  }
                  v840 = v611;
                  if (!v613)
                  {
LABEL_787:
                    v621 = v908;
                    v622 = (JSC::DFG::Graph *)*((_QWORD *)v565 + 4);
LABEL_717:
                    JSC::DFG::Node::remove(v621, v622, v615, v616, v617, v618, v619, v620);
                    *((_BYTE *)v908 + 16) = v893;
                    goto LABEL_606;
                  }
                  v564 = 0;
                  v838 = 0;
                  v847 = v566;
                  v843 = v613;
                  while (2)
                  {
                    v548 = *((_DWORD *)v892 + 4);
                    if (v564 + v548 + 1 < ((_DWORD)v566[3] & 0x3FFFFFu))
                    {
                      v549 = v564
                           + (HIDWORD(v566[3]) & 0xFFFFF | ((int)(v566[3] >> 28) >> 24 << 20))
                           + v548
                           + 6;
                      v550 = *((_QWORD *)v565 + 4);
                      v551 = WTF::fastMalloc((WTF *)0x18);
                      *(_QWORD *)v551 = v549 | ((unint64_t)(v549 >> 31) << 32);
                      *(_DWORD *)(v551 + 8) = 0x3FFFFFFF;
                      *(_BYTE *)(v551 + 12) = 6;
                      *(_QWORD *)(v551 + 16) = 0;
                      *(_QWORD *)(v551 + 16) = *(_QWORD *)(v550 + 592);
                      *(_QWORD *)(v550 + 592) = v551;
                      v552 = v909;
                      v553 = (JSC::DFG::NodeOrigin *)v871;
                      JSC::DFG::NodeOrigin::withExitOK((uint64_t)v908, v893, (uint64_t)v871);
                      v563 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v913, v552, 0, 19, (uint64_t)v871, v551, v554, v555);
                      goto LABEL_714;
                    }
                    v563 = v838;
                    if (!v838)
                    {
                      v795 = v909;
                      v553 = (JSC::DFG::NodeOrigin *)v870;
                      JSC::DFG::NodeOrigin::withExitOK((uint64_t)v908, v893, (uint64_t)v870);
                      v563 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)v913, v795, (uint64_t)v870, 0xAuLL, 0, v796, v797, v798);
                      v838 = v563;
LABEL_714:
                      JSC::DFG::NodeOrigin::~NodeOrigin(v553, v556, v557, v558, v559, v560, v561, v562);
                    }
                    v565 = v865;
                    v566 = v847;
                    if (v843 == v564)
                      goto LABEL_787;
                    continue;
                  }
                }
                break;
            }
            goto LABEL_606;
          }
          if (v445 - 132 >= 2)
          {
            if (v445 != 138)
              goto LABEL_606;
LABEL_627:
            v449 = *v858;
            if (*v858)
            {
              v450 = *((_QWORD *)v444 + 3);
              v451 = v450 & 0xFF00FFFFFFFFFFFFLL;
              v452 = *(_DWORD *)(v449 - 8);
              v453 = ((v450 & 0xFF00FFFFFFFFFFFFLL) + ~(v450 << 32)) ^ (((v450 & 0xFF00FFFFFFFFFFFFLL) + ~(v450 << 32)) >> 22);
              v454 = 9 * ((v453 + ~(v453 << 13)) ^ ((v453 + ~(v453 << 13)) >> 8));
              v455 = (v454 ^ (v454 >> 15)) + ~((v454 ^ (v454 >> 15)) << 27);
              v456 = v452 & ((v455 >> 31) ^ v455);
              v457 = *(_QWORD *)(v449 + 40 * v456);
              if (v457 == v451)
                goto LABEL_679;
              v458 = 1;
              while (v457)
              {
                v456 = (v456 + v458) & v452;
                v457 = *(_QWORD *)(v449 + 40 * v456);
                ++v458;
                if (v457 == v451)
                  goto LABEL_679;
              }
            }
            goto LABEL_606;
          }
          v468 = *v858;
          if (*v858)
          {
            v469 = *((_QWORD *)v444 + 3);
            v470 = v469 & 0xFF00FFFFFFFFFFFFLL;
            v471 = *(_DWORD *)(v468 - 8);
            v472 = ((v469 & 0xFF00FFFFFFFFFFFFLL) + ~(v469 << 32)) ^ (((v469 & 0xFF00FFFFFFFFFFFFLL) + ~(v469 << 32)) >> 22);
            v473 = 9 * ((v472 + ~(v472 << 13)) ^ ((v472 + ~(v472 << 13)) >> 8));
            v474 = (v473 ^ (v473 >> 15)) + ~((v473 ^ (v473 >> 15)) << 27);
            v475 = v471 & ((v474 >> 31) ^ v474);
            v476 = *(_QWORD *)(v468 + 40 * v475);
            if (v476 == v470)
            {
LABEL_817:
              *((_QWORD *)v444 + 3) = 0;
LABEL_679:
              JSC::DFG::Node::remove(v444, *((JSC::DFG::Graph **)v865 + 4), v434, v435, v436, v437, v438, v439);
              goto LABEL_606;
            }
            v477 = 1;
            while (v476)
            {
              v475 = (v475 + v477) & v471;
              v476 = *(_QWORD *)(v468 + 40 * v475);
              ++v477;
              if (v476 == v470)
                goto LABEL_817;
            }
          }
        }
      }
      else
      {
        if (v445 - 420 < 7)
          goto LABEL_627;
        if (v445 == 371)
          goto LABEL_788;
        if (v445 == 356)
        {
          v790 = *((_QWORD *)v444 + 3) & 0xFF00FFFFFFFFFFFFLL;
          if (WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v858, v790))
          {
            if (*(_WORD *)(v790 + 18) != 348)
            {
              JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v865 + 4), v444, (const WTF::CString *)"./dfg/DFGArgumentsEliminationPhase.cpp", (const char *)0x354, "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()", "node->child1()->op() == PhantomDirectArguments");
              WTFCrashWithInfoImpl(852, "./dfg/DFGArgumentsEliminationPhase.cpp", "void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()");
            }
            v791 = *((_DWORD *)v444 + 18);
            v792 = v791 + JSC::CodeOrigin::stackOffset(v444) + 6;
            v793 = *((_QWORD *)v865 + 4);
            v794 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v794 = v792 | ((unint64_t)(v792 >> 31) << 32);
            *(_DWORD *)(v794 + 8) = 0x3FFFFFFF;
            *(_BYTE *)(v794 + 12) = 6;
            *(_QWORD *)(v794 + 16) = 0;
            *(_QWORD *)(v794 + 16) = *(_QWORD *)(v793 + 592);
            *(_QWORD *)(v793 + 592) = v794;
            v605 = v908;
            *((_WORD *)v908 + 9) = 19;
            *((_DWORD *)v605 + 14) &= ~8u;
            *((_QWORD *)v605 + 9) = v794;
            *((_QWORD *)v605 + 10) = 0;
            *((_QWORD *)v605 + 4) = 0;
            *((_QWORD *)v605 + 5) = 0;
LABEL_768:
            *((_QWORD *)v605 + 3) = 0;
          }
        }
      }
LABEL_606:
      v446 = v908;
      v447 = *((unsigned __int16 *)v908 + 9);
      if (v447 == 185 || v447 == 379)
        break;
      v442 = v909 + 1;
      v909 = v442;
      if (*(_DWORD *)(v441 + 220) <= v442)
        goto LABEL_658;
    }
    JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)v913, (JSC::DFG::BasicBlock *)v441);
    v459 = *(unsigned int *)(v441 + 220);
    if ((_DWORD)v459)
    {
      v460 = 0;
      v461 = *v443;
      while (v461[v460] != v446)
      {
        if (v459 == ++v460)
          goto LABEL_659;
      }
      v462 = v460 + 1;
      if (v459 < (int)v460 + 1)
      {
        v520 = *(unsigned int *)(v441 + 216);
        if (v520 < v462)
        {
          v804 = v520 + (v520 >> 2);
          if (v804 >= 0x10)
            v805 = v804 + 1;
          else
            v805 = 16;
          if (v805 <= v462)
            v805 = v462;
          if (v805 < 9)
          {
            v806 = (void *)(v441 + 224);
            *(_QWORD *)(v441 + 208) = v441 + 224;
            *(_DWORD *)(v441 + 216) = 8;
          }
          else
          {
            if (v805 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DC340);
            }
            v857 = v805;
            v806 = (void *)WTF::fastMalloc((WTF *)(8 * v805));
            *(_DWORD *)(v441 + 216) = v857;
            *(_QWORD *)(v441 + 208) = v806;
          }
          memcpy(v806, v461, 8 * v459);
          if ((JSC::DFG::Node **)(v441 + 224) != v461)
          {
            if (*v443 == v461)
            {
              *(_QWORD *)(v441 + 208) = 0;
              *(_DWORD *)(v441 + 216) = 0;
            }
            WTF::fastFree((unint64_t)v461, v807, v808, v809, v436, v437, v438, v439);
          }
        }
      }
      *(_DWORD *)(v441 + 220) = v462;
      v463 = *((_QWORD *)v865 + 4);
      v464 = *(_QWORD *)v446;
      if ((*(_QWORD *)v446 & 1) != 0)
      {
        v754 = *(_QWORD *)(v464 & 0xFFFFFFFF8);
        if ((v464 & 2) != 0
          || ((v755 = *(unsigned int *)((v464 & 0xFFFFFFFF8) + 8), (_DWORD)v755 != 0x3FFFFFFF)
            ? (v756 = (_DWORD)v755 == -1)
            : (v756 = 1),
              v756))
        {
          v757 = 2;
        }
        else if (v755 >> 28)
        {
          v822 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v822 = v754;
          *(_DWORD *)(v822 + 8) = v755;
          v757 = 1;
          v754 = v822;
        }
        else
        {
          v757 = *(_QWORD *)(v464 & 0xFFFFFFFF8);
          v754 = v755 << 36;
        }
        v464 = v754 | v757;
      }
      v866 = v464;
      v465 = *((_QWORD *)v446 + 1);
      if ((v465 & 1) != 0)
      {
        v758 = *(_QWORD *)(v465 & 0xFFFFFFFF8);
        if ((v465 & 2) != 0
          || ((v759 = *(unsigned int *)((v465 & 0xFFFFFFFF8) + 8), (_DWORD)v759 != 0x3FFFFFFF)
            ? (v760 = (_DWORD)v759 == -1)
            : (v760 = 1),
              v760))
        {
          v761 = 2;
        }
        else if (v759 >> 28)
        {
          v823 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v823 = v758;
          *(_DWORD *)(v823 + 8) = v759;
          v761 = 1;
          v758 = v823;
        }
        else
        {
          v761 = *(_QWORD *)(v465 & 0xFFFFFFFF8);
          v758 = v759 << 36;
        }
        v465 = v758 | v761;
      }
      v867 = v465;
      v868 = *((_WORD *)v446 + 8);
      v466 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v463, 0, 373, (uint64_t)&v866, v436, v437, v438, v439);
      *(_QWORD *)&v887 = v466;
      v467 = *(unsigned int *)(v441 + 220);
      if ((_DWORD)v467 == *(_DWORD *)(v441 + 216))
      {
        v488 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v441 + 208, v467 + 1, (unint64_t)&v887);
        v467 = *(unsigned int *)(v441 + 220);
        *(_QWORD *)(*(_QWORD *)(v441 + 208) + 8 * v467) = *v488;
      }
      else
      {
        (*v443)[v467] = (JSC::DFG::Node *)v466;
      }
      v208 = v865;
      *(_DWORD *)(v441 + 220) = v467 + 1;
      if ((v867 & 1) != 0 && (v867 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v867 & 0xFFFFFFFF8, v433, (uint64_t)v434, v435, v436, v437, v438, v439);
      if ((v866 & 1) == 0)
      {
        v856 = 1;
        goto LABEL_656;
      }
      if ((v866 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v866 & 0xFFFFFFFF8, v433, (uint64_t)v434, v435, v436, v437, v438, v439);
      v856 = 1;
    }
LABEL_659:
    v208 = v865;
LABEL_656:
    v440 = (WTF *)((char *)v440 + 8);
  }
  while (v440 != v863);
  v440 = v910;
  v577 = v856;
LABEL_739:
  if (v440)
  {
    v910 = 0;
    v911 = 0;
    WTF::fastFree((unint64_t)v440, v433, (uint64_t)v434, v435, v436, v437, v438, v439);
  }
  if ((v577 & 1) != 0)
  {
    JSC::DFG::Graph::invalidateCFG(*((JSC::DFG::Graph **)v208 + 4), v433, (uint64_t)v434, v435, v436, v437, v438, v439);
    JSC::DFG::Graph::resetReachability(*((JSC::DFG::Graph **)v208 + 4), v578, v579, v580, v581, v582, v583, v584);
    JSC::DFG::Graph::killUnreachableBlocks(*((JSC::DFG::Graph **)v208 + 4), v585, v586, v587, v588, v589, v590, v591);
  }
  v592 = v913[1];
  if ((char *)&v914 + 8 != (char *)v913[1])
  {
    if (v913[1])
    {
      v913[1] = 0;
      LODWORD(v914) = 0;
      WTF::fastFree((unint64_t)v592, v433, (uint64_t)v434, v435, v436, v437, v438, v439);
    }
  }
  return 1;
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::removeInvalidCandidates(JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  WTF *v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;

  v9 = (uint64_t *)((char *)this + 72);
  while (2)
  {
    v49 = (WTF *)&v51;
    v50 = 1;
    v10 = *v9;
    if (*v9)
    {
      v12 = *(unsigned int *)(v10 - 4);
      v13 = v10 + 40 * v12;
      if (*(_DWORD *)(v10 - 12))
      {
        v11 = *v9;
        if ((_DWORD)v12)
        {
          v30 = 40 * v12;
          v11 = *v9;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 += 40;
            v30 -= 40;
            if (!v30)
            {
              v11 = v13;
              goto LABEL_5;
            }
          }
        }
        goto LABEL_5;
      }
      v11 = v10 + 40 * v12;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = 0;
    }
    v13 = v10 + 40 * v12;
LABEL_5:
    if (v10)
      v14 = v10 + 40 * *(unsigned int *)(v10 - 4);
    else
      v14 = 0;
    if (v14 == v11)
      return;
    do
    {
      v15 = *(_QWORD *)v11;
      v16 = *(unsigned __int16 *)(*(_QWORD *)v11 + 18);
      if (v16 == 277)
      {
        v18 = *v9;
        if (*v9)
        {
          v19 = *(_QWORD *)(v15 + 24);
          v20 = v19 & 0xFF00FFFFFFFFFFFFLL;
          v21 = *(_DWORD *)(v18 - 8);
          v22 = ((v19 & 0xFF00FFFFFFFFFFFFLL) + ~(v19 << 32)) ^ (((v19 & 0xFF00FFFFFFFFFFFFLL) + ~(v19 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = *(_QWORD *)(v18 + 40 * v25);
          if (v26 == v20)
            goto LABEL_10;
          v27 = 1;
          while (v26)
          {
            v25 = (v25 + v27) & v21;
            v26 = *(_QWORD *)(v18 + 40 * v25);
            ++v27;
            if (v26 == v20)
              goto LABEL_10;
          }
        }
        goto LABEL_23;
      }
      if (v16 == 263)
      {
        v31 = *(unsigned int *)(v15 + 32);
        if (*(_DWORD *)(v15 + 32))
        {
          v32 = 0;
          v33 = *(uint64_t **)(v15 + 72);
          v34 = *v33;
          v35 = (_QWORD *)(2 * *v33);
          v36 = v35 + 1;
          if (*v33 < 0)
            v36 = *(_QWORD **)(v15 + 72);
          v47 = *v33;
          v48 = *(unsigned int *)(v15 + 32);
          v45 = v36;
          v46 = 2 * *v33;
          while (1)
          {
            v37 = v34 < 0 ? 63 : *v35;
            if (v37 > v32 && ((*(_QWORD *)((char *)v36 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
            {
              v38 = *((_QWORD *)this + 4);
              v39 = v32 + *(_QWORD *)(v15 + 24);
              if (*(_DWORD *)(v38 + 164) <= v39)
              {
                __break(0xC471u);
                JUMPOUT(0x1982DC740);
              }
              v40 = WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(*v9, *(_QWORD *)(*(_QWORD *)(v38 + 152) + 8 * v39) & 0xFF00FFFFFFFFFFFFLL);
              v34 = v47;
              v31 = v48;
              v36 = v45;
              v35 = (_QWORD *)v46;
              if (!v40)
                break;
            }
            if (v31 == ++v32)
              goto LABEL_10;
          }
LABEL_23:
          v28 = HIDWORD(v50);
          if (HIDWORD(v50) == (_DWORD)v50)
          {
            WTF::Vector<JSC::DFG::Node *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>((uint64_t)&v49, v11);
          }
          else
          {
            *((_QWORD *)v49 + HIDWORD(v50)) = v15;
            HIDWORD(v50) = v28 + 1;
          }
        }
      }
LABEL_10:
      v17 = v11 + 40;
      v11 = v13;
      if (v17 != v13)
      {
        v11 = v17;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 += 40;
          if (v11 == v13)
          {
            v11 = v13;
            break;
          }
        }
      }
    }
    while (v11 != v14);
    v29 = v49;
    if (HIDWORD(v50))
    {
      v41 = 8 * HIDWORD(v50);
      do
      {
        v42 = *(void **)v29;
        v29 = (WTF *)((char *)v29 + 8);
        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::remove(v9, v42, a3, a4, a5, a6, a7, a8);
        v41 -= 8;
      }
      while (v41);
      v43 = v49;
      if (&v51 != (uint64_t *)v49 && v49 != 0)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
      }
      continue;
    }
    break;
  }
  if (&v51 != (uint64_t *)v49 && v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree((unint64_t)v29, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::add<JSC::DFG::AvailabilityMap>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  unsigned int v36;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = v12 + 40 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v34 = 0;
    v35 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v36 = 0;
        else
          v36 = *(_DWORD *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 40 * v36;
        goto LABEL_18;
      }
      if (v21 == -1)
        v34 = v20;
      v19 = (v19 + v35) & v14;
      v20 = v12 + 40 * v19;
      v21 = *(_QWORD *)v20;
      ++v35;
    }
    while (*(_QWORD *)v20);
    if (v34)
    {
      *(_QWORD *)(v34 + 32) = 0;
      *(_OWORD *)v34 = 0u;
      *(_OWORD *)(v34 + 16) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v34;
    }
  }
  *(_QWORD *)v20 = v15;
  v22 = *(_QWORD *)(v20 + 8);
  if (v22)
  {
    *(_QWORD *)(v20 + 8) = 0;
    *(_DWORD *)(v20 + 16) = 0;
    WTF::fastFree(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v23 = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(v20 + 8) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  *(_DWORD *)(v20 + 16) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  *(_DWORD *)(v20 + 20) = v23;
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(a4 + 16);
  v24 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  v25 = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v20 + 32) = v24;
  if (v25)
    WTF::fastFree(v25 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_17;
LABEL_27:
    v20 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, (uint64_t *)v20);
    v28 = *a2;
    if (*a2)
      LODWORD(v31) = *(_DWORD *)(v28 - 4);
    else
      LODWORD(v31) = 0;
    goto LABEL_17;
  }
  if (3 * v31 <= 4 * v30)
    goto LABEL_27;
LABEL_17:
  v32 = v28 + 40 * v31;
  v33 = 1;
LABEL_18:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v33;
}

void JSC::DFG::AvailabilityMap::~AvailabilityMap(JSC::DFG::AvailabilityMap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *((_QWORD *)this + 3);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::contains(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 40 * v6);
  if (v7 == a2)
    return 1;
  v8 = 1;
  do
  {
    v9 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v8) & v2;
    v7 = *(_QWORD *)(a1 + 40 * v6);
    ++v8;
  }
  while (v7 != a2);
  return v9;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if (v7)
  {
    v21 = v7;
    v22 = (uint64_t *)v6;
    do
    {
      if (*v22)
      {
        if (*v22 != -1)
        {
          v23 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v22);
          WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::~KeyValuePair((uint64_t)v22, v24, v25, v26, v27, v28, v29, v30);
          if (v22 == a3)
            v19 = v23;
        }
      }
      else
      {
        WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::~KeyValuePair((uint64_t)v22, v10, v11, v12, v13, v14, v15, v16);
      }
      v22 += 5;
      --v21;
    }
    while (v21);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

uint64_t WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::~KeyValuePair(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(a1, *a2);
  v11 = WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::~KeyValuePair(v3, v4, v5, v6, v7, v8, v9, v10);
  return WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::KeyValuePair(v11, a2);
}

uint64_t WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>::KeyValuePair(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_QWORD *)(result + 24) = a2[3];
  *(_QWORD *)(result + 32) = 0;
  v4 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(result + 32) = v4;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + (v4 & v3);
  }
  while (*(_QWORD *)(a1 + 40 * v6));
  return a1 + 40 * v6;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *a1;
  if (!*a1)
    return 0;
  v10 = *(_DWORD *)(v8 - 8);
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = v8 + 40 * v14;
  v16 = *(void **)v15;
  if (*(void **)v15 != a2)
  {
    v17 = 1;
    while (v16)
    {
      v14 = (v14 + v17) & v10;
      v15 = v8 + 40 * v14;
      v16 = *(void **)v15;
      ++v17;
      if (*(void **)v15 == a2)
        goto LABEL_8;
    }
    v15 = v8 + 40 * *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v8 + 40 * *(unsigned int *)(v8 - 4) == v15)
    return 0;
  *(_QWORD *)v15 = -1;
  v19 = *(_QWORD *)(v15 + 32);
  if (v19)
    WTF::fastFree(v19 - 16, a2, a3, a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)(v15 + 8);
  if (v20)
  {
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  ++*(_DWORD *)(*a1 - 16);
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) - 1;
  else
    v22 = -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a1;
  if (*a1)
  {
    v24 = 6 * *(_DWORD *)(v23 - 12);
    v25 = *(_DWORD *)(v23 - 4);
    if (v24 < v25 && v25 >= 9)
      WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AvailabilityMap>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AvailabilityMap,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AvailabilityMap>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v25 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::Node *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::Node *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 2)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1982DCFF4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=(const void **a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;

  if (a2 != a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v31 = (unint64_t)*a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v20 = *((unsigned int *)a2 + 3);
        if (v12 < v20)
        {
          if (v20 >> 28)
          {
            __break(0xC471u);
            return;
          }
          v21 = (unint64_t)*a1;
          v22 = *((unsigned int *)a1 + 3);
          v23 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
          *((_DWORD *)a1 + 2) = v20;
          *a1 = v23;
          if ((_DWORD)v22)
          {
            v32 = 16 * v22;
            v33 = (__int128 *)v21;
            do
            {
              v34 = *v33++;
              *v23++ = v34;
              v32 -= 16;
            }
            while (v32);
          }
          if (v21)
          {
            if (*a1 == (const void *)v21)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree(v21, v24, v25, v26, v27, v28, v29, v30);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v13 = (char *)*a1;
    if (v11)
    {
      memmove(v13, *a2, 16 * v11);
      v14 = *((_DWORD *)a1 + 3);
      v13 = (char *)*a1;
    }
    else
    {
      v14 = 0;
    }
    v15 = *((unsigned int *)a2 + 3);
    if (v14 != (_DWORD)v15)
    {
      v16 = &v13[16 * v14];
      v17 = (__int128 *)((char *)*a2 + 16 * v14);
      v18 = 16 * v15 - 16 * v14;
      do
      {
        v19 = *v17++;
        *(_OWORD *)v16 = v19;
        v16 += 16;
        v18 -= 16;
      }
      while (v18);
      v14 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)a1 + 3) = v14;
  }
}

uint64_t *WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int i;
  uint64_t v33;
  _DWORD *v34;
  __int128 v35;
  _DWORD *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;

  v9 = (_DWORD *)*a2;
  if (!*a2)
    goto LABEL_2;
  v12 = *(v9 - 3);
  if (!(_DWORD)v12)
  {
    v9 = 0;
    goto LABEL_2;
  }
  v14 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = (v15 | HIWORD(v15)) + 1;
  if (v16 > 0x400)
  {
    if (v16 > 2 * v12)
      goto LABEL_54;
    goto LABEL_9;
  }
  if (3 * v16 <= 4 * v12)
  {
LABEL_9:
    LODWORD(v16) = 2 * v16;
    if (v16 <= 0x400)
      goto LABEL_10;
LABEL_54:
    v17 = (double)v12;
    v18 = (double)v16;
    v19 = 0.416666667;
    goto LABEL_11;
  }
LABEL_10:
  v17 = (double)v12;
  v18 = (double)v16;
  v19 = 0.604166667;
LABEL_11:
  if (v18 * v19 <= v17)
    LODWORD(v16) = 2 * v16;
  if (v16 <= 8)
    v20 = 8;
  else
    v20 = v16;
  v21 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * v20) | 0x10));
  v22 = 0;
  v9 = v21 + 4;
  do
  {
    v23 = &v21[v22];
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = 0;
    v23[5] = 0x3FFFFFFF00000000;
    v22 += 8;
  }
  while (8 * v20 != v22);
  v21[2] = v20 - 1;
  v21[3] = v20;
  *v21 = 0;
  v21[1] = v12;
  v24 = (_DWORD *)*a2;
  if (!*a2)
  {
    v25 = 0;
    v26 = 0;
LABEL_20:
    v27 = &v24[8 * v26];
    goto LABEL_21;
  }
  v26 = *(v24 - 1);
  v27 = &v24[8 * v26];
  if (!*(v24 - 3))
  {
    v25 = &v24[8 * v26];
    goto LABEL_20;
  }
  v25 = (_DWORD *)*a2;
  if (!(_DWORD)v26)
    goto LABEL_21;
  v40 = 32 * v26;
  v25 = (_DWORD *)*a2;
  do
  {
    v41 = v25[2];
    if (*(_QWORD *)v25)
    {
      v42 = v25[3];
    }
    else
    {
      v42 = v25[3];
      if (!(v41 | v42))
        goto LABEL_46;
    }
    if (v41)
      v43 = 1;
    else
      v43 = v42 == 0;
    if (v43)
      goto LABEL_21;
LABEL_46:
    v25 += 8;
    v40 -= 32;
  }
  while (v40);
  v25 = v27;
LABEL_21:
  if (v24)
    v24 += 8 * *(v24 - 1);
  if (v24 != v25)
  {
    while (1)
    {
      v28 = 0;
      v29 = ~(*(_QWORD *)v25 << 32) + *(_QWORD *)v25;
      v30 = (v29 ^ (v29 >> 22)) + ~((v29 ^ (v29 >> 22)) << 13);
      v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
      for (i = v25[3] + v25[2] + (((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~((_DWORD)v31 << 27))); ; i = v28 + v33)
      {
        v33 = i & (v20 - 1);
        v34 = &v9[8 * v33];
        if (!*(_QWORD *)v34 && !*((_QWORD *)v34 + 1))
          break;
        ++v28;
      }
      v35 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v34 = *(_OWORD *)v25;
      *((_OWORD *)v34 + 1) = v35;
      v36 = v25 + 8;
      v25 = v27;
      if (v36 != v27)
        break;
LABEL_39:
      if (v25 == v24)
        goto LABEL_2;
    }
    v25 = v36;
    while (2)
    {
      v37 = v25[2];
      if (*(_QWORD *)v25)
      {
        v38 = v25[3];
      }
      else
      {
        v38 = v25[3];
        if (!(v37 | v38))
          goto LABEL_32;
      }
      if (v37)
        v39 = 1;
      else
        v39 = v38 == 0;
      if (v39)
        goto LABEL_39;
LABEL_32:
      v25 += 8;
      if (v25 == v27)
      {
        v25 = v27;
        goto LABEL_39;
      }
      continue;
    }
  }
LABEL_2:
  v10 = *a1;
  *a1 = (uint64_t)v9;
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::DFG::Graph::hasExitSite(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t hasExitSite;
  WTF::Lock *v19;
  int v20;
  int v21;
  char v22;
  __int16 v23;
  _BYTE v24[8];
  WTF::Lock *v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  v5 = *a2 & 0xFFFFFFFF8;
  if ((*a2 & 1) != 0)
    v5 = *(_QWORD *)(*a2 & 0xFFFFFFFF8);
  if (v5)
    v3 = *(_QWORD *)(v5 + 8);
  if ((v4 & 2) != 0)
  {
    LODWORD(v6) = -1;
  }
  else if ((v4 & 1) != 0)
  {
    LODWORD(v6) = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v6 = v4 >> 36;
  }
  v7 = *(_QWORD *)(v3 + 56);
  v21 = v6;
  v22 = a3;
  v23 = 0;
  if (a3 == 17)
    v21 = 0;
  v8 = (unsigned __int8 *)(v7 + 31);
  v27 = 0;
  v25 = (WTF::Lock *)(v7 + 31);
  v26 = 1;
  if (__ldaxr((unsigned __int8 *)(v7 + 31)))
  {
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8);
    goto LABEL_13;
  }
  if (__stxr(1u, v8))
    goto LABEL_12;
LABEL_13:
  v27 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v7 + 96), (uint64_t)v24, &v21);
  if (v26)
  {
    v19 = v25;
    v20 = __ldxr((unsigned __int8 *)v25);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
        return hasExitSite;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v19, v10, v11, v12, v13, v14, v15, v16);
  }
  return hasExitSite;
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatEscape(void)::{lambda(JSC::DFG::Edge,JSC::DFG::Node *)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (void *)(a2 & 0xFF00FFFFFFFFFFFFLL);
  if (v8)
  {
  }
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatEscape(void)::{lambda(JSC::DFG::ArrayMode,JSC::DFG::Edge,JSC::DFG::Node *)#1}::operator()(uint64_t ***a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t **v11;
  void *v12;
  int v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = BYTE2(a2);
  v11 = a1[1];
  if (a2 != 9)
  {
    if (a2 != 12)
    {
      if (a2 != 3)
      {
        v12 = (void *)(a3 & 0xFF00FFFFFFFFFFFFLL);
        if ((a3 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
LABEL_9:
          v14 = **a1;
          return;
        }
      }
      return;
    }
    v12 = (void *)(a3 & 0xFF00FFFFFFFFFFFFLL);
    if (*(_WORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 347)
      goto LABEL_14;
    goto LABEL_12;
  }
  v12 = (void *)(a3 & 0xFF00FFFFFFFFFFFFLL);
  v13 = *(unsigned __int16 *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v13 == 354)
  {
LABEL_12:
    if (v10 >= 2
      && (JSC::DFG::Graph::isWatchingObjectPrototypeChainIsSaneWatchpoint((JSC::DFG::Graph *)v11[4], (JSC::DFG::Node *)v12, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_14;
    }
    return;
  }
  if (v13 != 276)
  {
    if (!v12)
      return;
    goto LABEL_9;
  }
  if (v10 >= 2
    && (JSC::DFG::Graph::isWatchingArrayPrototypeChainIsSaneWatchpoint((JSC::DFG::Graph *)v11[4], (JSC::DFG::Node *)v12, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
LABEL_14:
  }
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::contains(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;

  v2 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a1 & 1) == 0)
    return v2 == a2;
  v4 = *v2;
  if (!(_DWORD)v4)
    return 0;
  if (*((unsigned int **)v2 + 1) == a2)
    return 1;
  v5 = 0;
  v6 = v2 + 4;
  while (v4 - 1 != v5)
  {
    v7 = *(unsigned int **)&v6[2 * v5++];
    if (v7 == a2)
      return v5 < v4;
  }
  v5 = v4;
  return v5 < v4;
}

uint64_t JSC::DFG::Graph::isWatchingArrayPrototypeChainIsSaneWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>((uint64_t)this, v15, (JSC::InlineWatchpointSet *)(v15 + 2304), 14, a5, a6, a7, a8);
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatEscape(void)::{lambda(JSC::DFG::Edge)#1}::operator()(JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a2 & 0x1000000000000) == 0)
  {
    v8 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v8)
    {
      if (v8 > 0x34)
        goto LABEL_10;
      if (((1 << v8) & 0x12798001880F84) != 0)
        return;
      if (((1 << v8) & 0xD867FFE77F07ALL) == 0)
      {
LABEL_10:
        __break(0xC471u);
        return;
      }
      v9 = (void *)(a2 & 0xFF00FFFFFFFFFFFFLL);
      if (v9)
      {
        v10 = *a1;
      }
    }
  }
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, JSC::DFG::Node *a4)
{
  JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase *v4;
  uint64_t v5;
  uint64_t *v6;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  JSC::DFG::Node *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v72;
  JSC::DFG::Node *v73;
  JSC::DFG::Graph *v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  unsigned int v82;
  unint64_t v83;
  _DWORD *v84;
  int v85;
  int v86;
  unsigned int *v87;
  unsigned int v88;
  BOOL v89;
  unint64_t v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t *v94[2];
  char v95;
  uint64_t v96;

  v4 = *(JSC::DFG::_anonymous_namespace_::ArgumentsEliminationPhase **)a1;
  v6 = (uint64_t *)(*(_QWORD *)a1 + 72);
  v5 = *v6;
  if (!*v6)
    return;
  v10 = *(_DWORD *)(v5 - 8);
  v11 = ((unint64_t)a4 + ~((_QWORD)a4 << 32)) ^ (((unint64_t)a4 + ~((_QWORD)a4 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  v15 = v10 & v14;
  v16 = *(JSC::DFG::Node **)(v5 + 40 * (v10 & v14));
  if (v16 == a4)
  {
LABEL_6:
    v18 = **(_QWORD **)(a1 + 8);
    if (!v18)
      return;
    v19 = *(_DWORD *)(v18 - 8);
    v20 = v19 & v14;
    v21 = *(JSC::DFG::Node **)(v18 + 16 * v20);
    if (v21 != a4)
    {
      v85 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v85) & v19;
        v21 = *(JSC::DFG::Node **)(v18 + 16 * v20);
        ++v85;
        if (v21 == a4)
          goto LABEL_8;
      }
      return;
    }
LABEL_8:
    v22 = v18 + 16 * v20;
    v25 = *(_QWORD *)(v22 + 8);
    v24 = (_QWORD *)(v22 + 8);
    v23 = v25;
    if (!v25)
      return;
    v26 = *(unsigned int *)(v23 - 12);
    if (!(_DWORD)v26)
      return;
    v27 = (v26 - 1) | ((v26 - 1) >> 1) | ((((_DWORD)v26 - 1) | ((v26 - 1) >> 1)) >> 2);
    v28 = v27 | (v27 >> 4) | ((v27 | (v27 >> 4)) >> 8);
    v29 = (v28 | HIWORD(v28)) + 1;
    v93 = a3;
    if (v29 > 0x400)
    {
      if (v29 > 2 * v26)
        goto LABEL_93;
    }
    else if (3 * v29 > 4 * v26)
    {
LABEL_13:
      v30 = (double)v26;
      v31 = (double)v29;
      v32 = 0.604166667;
      goto LABEL_14;
    }
    LODWORD(v29) = 2 * v29;
    if (v29 <= 0x400)
      goto LABEL_13;
LABEL_93:
    v30 = (double)v26;
    v31 = (double)v29;
    v32 = 0.416666667;
LABEL_14:
    if (v31 * v32 <= v30)
      LODWORD(v29) = 2 * v29;
    if (v29 <= 8)
      v33 = 8;
    else
      v33 = v29;
    v34 = 8 * v33;
    v35 = (_DWORD *)WTF::fastMalloc((WTF *)(v34 + 16));
    v43 = (unint64_t)v35;
    v44 = 0;
    v45 = v35 + 4;
    do
    {
      *(_QWORD *)&v35[v44 / 4 + 4] = 1;
      v44 += 8;
    }
    while (v34 != v44);
    v46 = v33 - 1;
    v35[2] = v33 - 1;
    v35[3] = v33;
    *v35 = 0;
    v35[1] = v26;
    v47 = (_QWORD *)*v24;
    if (*v24)
    {
      v48 = *((unsigned int *)v47 - 1);
      v49 = &v47[v48];
      if (*((_DWORD *)v47 - 3))
      {
        v50 = (_QWORD *)*v24;
        if ((_DWORD)v48)
        {
          v51 = 8 * v48;
          v50 = (_QWORD *)*v24;
          while (*v50 == 1 || *v50 == -1)
          {
            ++v50;
            v51 -= 8;
            if (!v51)
            {
              v50 = v49;
              break;
            }
          }
        }
LABEL_32:
        if (v47)
          v47 += *((unsigned int *)v47 - 1);
        while (v50 != v47)
        {
          v53 = ~(*v50 << 32) + *v50;
          v54 = (v53 ^ (v53 >> 22)) + ~((v53 ^ (v53 >> 22)) << 13);
          v55 = (9 * (v54 ^ (v54 >> 8))) ^ ((9 * (v54 ^ (v54 >> 8))) >> 15);
          v56 = v46 & (((v55 + ~(v55 << 27)) >> 31) ^ ((_DWORD)v55 + ~((_DWORD)v55 << 27)));
          if (*(_QWORD *)&v45[2 * v56] != 1)
          {
            v92 = 1;
            do
              v56 = ((_DWORD)v56 + v92++) & v46;
            while (*(_QWORD *)&v45[2 * v56] != 1);
          }
          *(_QWORD *)&v45[2 * v56] = *v50;
          v57 = v50 + 1;
          v50 = v49;
          if (v57 != v49)
          {
            v50 = v57;
            while (*v50 == 1 || *v50 == -1)
            {
              if (++v50 == v49)
              {
                v50 = v49;
                break;
              }
            }
          }
        }
        v59 = 0;
        v60 = (uint64_t *)&v45[2 * v33];
        while (1)
        {
          v61 = *(_QWORD *)&v45[v59];
          if (v61 != 1 && v61 != -1)
            break;
          v59 += 2;
          if (2 * v33 == v59)
            goto LABEL_53;
        }
        if (v59 == 2 * v33)
          goto LABEL_53;
        v63 = (uint64_t *)&v45[v59];
        v36 = 4294967289;
        v37 = 4294967292;
LABEL_59:
        v96 = 0;
        v64 = *v63;
        v96 = *v63;
        v65 = *(uint64_t **)(a1 + 16);
        v66 = *(_DWORD *)(a2 + 8);
        if (*((_DWORD *)v65 + 3) <= v66)
        {
LABEL_118:
          __break(0xC471u);
          JUMPOUT(0x1982DDEF8);
        }
        v67 = *v65;
        v68 = (uint64_t *)(*v65 + 24 * v66);
        if (!v64)
        {
          v69 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 4) + 32) + 28);
          if (v69 < 2)
            goto LABEL_65;
          v70 = 1;
          while (((*(_DWORD *)(*v68 + 4 * (v70 >> 5)) >> v70) & 1) == 0)
          {
            if (v69 == ++v70)
              goto LABEL_65;
          }
          goto LABEL_102;
        }
        v76 = *(_QWORD *)(v64 + 24);
        v77 = HIDWORD(v76) & 0xFFFFF | ((int)(v76 >> 28) >> 24 << 20);
        if ((v76 >> 60) - 3 <= 2
          && (v77 >= -4
            ? (LOBYTE(v90) = BYTE4(v76) - 1, v91 = (_DWORD *)(*v68 + 4 * ((unint64_t)(v77 - 1) >> 5)))
            : (v90 = *(unsigned int *)(v67 + 24 * v66 + 16) + (unint64_t)(-5 - v77),
               v91 = (_DWORD *)(*v68 + ((v90 >> 3) & 0x3FFFFFFC))),
              ((*v91 >> v90) & 1) != 0))
        {
          if ((*(_BYTE *)(v64 + 32) & 1) == 0)
            goto LABEL_102;
          v78 = 1;
        }
        else
        {
          v78 = 0;
        }
        if (v77 >= -3)
        {
          LOBYTE(v79) = BYTE4(v76) - 2;
          v80 = *v68;
          v81 = (_DWORD *)(v80 + 4 * ((unint64_t)(v77 - 2) >> 5));
        }
        else
        {
          v79 = *(unsigned int *)(v67 + 24 * v66 + 16) + (unint64_t)(-4 - v77);
          v80 = *v68;
          v81 = (_DWORD *)(v80 + ((v79 >> 3) & 0x3FFFFFFC));
        }
        if (!(v78 | (*v81 >> v79) & 1))
        {
          v82 = (v76 & 0x3FFFFF) - 1;
          if (!v82)
            goto LABEL_65;
          v86 = 0;
          v87 = (unsigned int *)(v67 + 24 * v66 + 16);
          v88 = -7 - v77;
          v89 = 1;
          while (1)
          {
            if (v77 + v86 + 6 >= 0)
            {
              LODWORD(v83) = v77 + v86 + 1;
              v84 = (_DWORD *)(v80 + 4 * ((unint64_t)(int)v83 >> 5));
            }
            else
            {
              v83 = *v87 + (unint64_t)v88;
              v84 = (_DWORD *)(v80 + ((v83 >> 3) & 0x3FFFFFFC));
            }
            if (((*v84 >> v83) & 1) != 0)
              break;
            v89 = ++v86 < v82;
            --v88;
            if (v82 == v86)
              goto LABEL_65;
          }
          if (!v89)
          {
LABEL_65:
            while (1)
            {
              if (++v63 == v60)
                goto LABEL_53;
              if (*v63 != 1 && *v63 != -1)
              {
                if (v63 != v60)
                  goto LABEL_59;
                goto LABEL_53;
              }
            }
          }
        }
LABEL_102:
        v75 = v93;
        if (*(_DWORD *)(a2 + 220) != v93 || *((_QWORD *)a4 + 12) == a2)
        {
          if (v93)
          {
            while (1)
            {
              v72 = v75 - 1;
              if (*(_DWORD *)(a2 + 220) <= (v75 - 1))
                goto LABEL_118;
              v73 = *(JSC::DFG::Node **)(*(_QWORD *)(a2 + 208) + 8 * v72);
              if (v73 == a4)
                break;
              v95 = 0;
              v74 = (JSC::DFG::Graph *)*((_QWORD *)v4 + 4);
              v94[0] = &v96;
              v94[1] = (uint64_t *)&v95;
              if (v95)
                goto LABEL_113;
              v75 = v72;
              if (!(_DWORD)v72)
                goto LABEL_104;
            }
            v93 = (v75 - 1);
          }
          else
          {
LABEL_104:
            v93 = 0;
          }
          v36 = 4294967289;
          v37 = 4294967292;
          goto LABEL_65;
        }
LABEL_113:
LABEL_53:
        WTF::fastFree(v43, (void *)v36, v37, v38, v39, v40, v41, v42);
        return;
      }
      v50 = &v47[v48];
    }
    else
    {
      v50 = 0;
      v48 = 0;
    }
    v49 = &v47[v48];
    goto LABEL_32;
  }
  v17 = 1;
  while (v16)
  {
    v15 = (v15 + v17) & v10;
    v16 = *(JSC::DFG::Node **)(v5 + 40 * v15);
    ++v17;
    if (v16 == a4)
      goto LABEL_6;
  }
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::AbstractHeap)#1} const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _DWORD *v16;
  char *v17;
  JSC::DFG::Node *v18;
  unint64_t v19;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  JSC::DFG::Node *v42;
  int *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _DWORD *v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v107;
  _DWORD *v108;
  int v109;
  int v110;
  uint64_t v111;
  BOOL v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int *v200;
  uint64_t v201;
  unsigned int v202;
  WTF *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  int v216;
  int v218;
  int v220;
  int v222;
  int v224;
  uint64_t v225;
  char v226;
  _BYTE v227[56];
  char v228;
  char v229;
  _BYTE v230[56];
  char v231;
  _BYTE v232[56];
  char v233;
  _BYTE v234[56];
  char v235;
  _BYTE v236[56];
  char v237;
  _BYTE v238[56];
  char v239;
  char v240;
  char v241;
  char v242;
  _BYTE v243[56];
  char v244;
  char v245;
  char v246;
  char v247;
  char v248;
  _BYTE v249[56];
  char v250;
  _BYTE v251[56];
  WTF *v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  char v274;
  char v275;
  char v276;
  char v277;
  char v278;
  char v279;
  char v280;
  char v281;
  _BYTE v282[56];
  uint64_t v283;
  _BYTE v284[56];
  char v285;
  _BYTE v286[56];
  uint64_t v287;
  _BYTE v288[56];
  uint64_t v289;
  _BYTE v290[56];
  char v291;
  _BYTE v292[56];
  uint64_t v293;
  _BYTE v294[56];
  char v295;
  _BYTE v296[56];
  char v297;
  _BYTE v298[56];
  char v299;
  _BYTE v300[56];
  char v301;
  _BYTE v302[56];
  char v303;
  _BYTE v304[56];
  char v305;
  char v306;
  char v307;
  char v308;
  char v309;
  char v310;
  char v311;
  char v312;
  char v313;
  char v314;
  char v315;
  _BYTE v316[56];
  char v317;
  _BYTE v318[56];
  char v319;
  _BYTE v320[56];

  if (*((int *)this + 238) > 0 || !JSC::DFG::Node::hasArrayMode(a2))
  {
LABEL_2:
    v11 = *((unsigned __int16 *)a2 + 9);
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xC:
      case 0xE:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x41:
      case 0x43:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x94:
      case 0x95:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC3:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x108:
      case 0x109:
      case 0x10C:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x166:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17B:
      case 0x17C:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x181:
      case 0x183:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x188:
      case 0x189:
      case 0x19A:
      case 0x19B:
      case 0x19C:
      case 0x19D:
      case 0x19E:
      case 0x19F:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1AD:
      case 0x1B0:
        return;
      case 0xB:
        v17 = &v308;
        goto LABEL_95;
      case 0xD:
        v17 = &v307;
        goto LABEL_95;
      case 0xF:
        v141 = (_QWORD *)*((_QWORD *)a2 + 9);
        v142 = v141;
        do
        {
          v143 = v142;
          v142 = (_QWORD *)*v142;
        }
        while (v142);
        if (v143 != v141)
        {
          *v141 = v143;
          v141 = (_QWORD *)*((_QWORD *)a2 + 9);
        }
        v144 = v141;
        do
        {
          v145 = v144;
          v144 = (_QWORD *)*v144;
        }
        while (v144);
        if (v145 != v141)
          *v141 = v145;
        v17 = &v306;
        goto LABEL_95;
      case 0x10:
        v120 = (_QWORD *)*((_QWORD *)a2 + 9);
        v121 = v120;
        do
        {
          v122 = v121;
          v121 = (_QWORD *)*v121;
        }
        while (v121);
        if (v122 != v120)
          *v120 = v122;
        v123 = (_QWORD *)*((_QWORD *)a2 + 9);
        v124 = v123;
        do
        {
          v125 = v124;
          v124 = (_QWORD *)*v124;
        }
        while (v124);
        if (v125 != v123)
          *v123 = v125;
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v305;
        goto LABEL_96;
      case 0x11:
        v12 = **((_QWORD **)a2 + 9);
        v19 = (v12 << 15) & 0xFFFF800000000000;
        if (v12 <= 4 && v19 != 0x1000000000000)
          return;
        v15 = *a3;
        if (v19 == 0x1000000000000)
          goto LABEL_45;
        if ((v12 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_11;
      case 0x12:
        v12 = *((_QWORD *)a2 + 9);
        v13 = (v12 << 15) & 0xFFFF800000000000;
        if (v12 <= 4 && v13 != 0x1000000000000)
          return;
        v15 = *a3;
        if (v13 == 0x1000000000000)
        {
LABEL_45:
          v12 = *(unsigned int *)(v15 + 16) + (uint64_t)(int)v12 + *(unsigned int *)(v15 + 20);
          v16 = (_DWORD *)(*(_QWORD *)v15 + 4 * (v12 >> 5));
        }
        else if ((v12 & 0x80000000) != 0)
        {
LABEL_11:
          v12 = ~(_DWORD)v12 + (unint64_t)*(unsigned int *)(v15 + 16);
          v16 = (_DWORD *)(*(_QWORD *)v15 + ((v12 >> 3) & 0x3FFFFFFC));
        }
        else
        {
LABEL_24:
          LODWORD(v12) = v12 - 5;
          v16 = (_DWORD *)(*(_QWORD *)v15 + 4 * ((unint64_t)(int)v12 >> 5));
        }
        *v16 |= 1 << v12;
        return;
      case 0x1C:
        v137 = (_QWORD *)*((_QWORD *)a2 + 9);
        v138 = v137;
        do
        {
          v139 = v138;
          v138 = (_QWORD *)*v138;
        }
        while (v138);
        if (v139 != v137)
          *v137 = v139;
        return;
      case 0x40:
      case 0x42:
      case 0x44:
        v28 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v28 != 49)
        {
          v29 = v28 > 0x34;
          v30 = (1 << v28) & 0x10000000000003;
          if (v29 || v30 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
            __break(0xC471u);
            JUMPOUT(0x1982DE144);
          }
        }
        return;
      case 0x52:
      case 0x53:
        v94 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        v29 = v94 > 0x34;
        v95 = (1 << v94) & 0x1200001C000003;
        if (v29 || v95 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1982DE8D4);
        }
        return;
      case 0x5C:
      case 0x5D:
        v22 = *((_DWORD *)a2 + 18);
        v23 = *((_DWORD *)a2 + 14) & 7;
        if (v23 >= 2)
        {
          switch(v23)
          {
            case 3u:
              v24 = 13;
              break;
            case 4u:
              v24 = 17;
              break;
            case 5u:
              v24 = 19;
              break;
            case 7u:
              __break(0xC471u);
              JUMPOUT(0x1982DF7DCLL);
            default:
              __break(0xC471u);
              JUMPOUT(0x1982DF80CLL);
          }
        }
        else
        {
          v24 = 21;
        }
        if (*((_DWORD *)a2 + 18) == 9)
        {
          if (BYTE2(v22) <= 3u && BYTE2(v22) != 2)
          {
            v26 = *((_DWORD *)a2 + 6);
            v27 = *((_DWORD *)this + 41);
            if (v27 <= v26)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DF8C4);
            }
            if (v27 <= v26 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DE0CCLL);
            }
          }
          return;
        }
        return;
      case 0x63:
        v43 = (int *)*((_QWORD *)a2 + 9);
        v44 = v43[1];
        LODWORD(v45) = v44 - 5;
        if (v44 >= 5)
        {
          v46 = *a3;
          if ((v44 & 0x80000000) != 0)
          {
            v45 = *(unsigned int *)(v46 + 16) + (unint64_t)~v44;
            v47 = (_DWORD *)(*(_QWORD *)v46 + ((v45 >> 3) & 0x3FFFFFFC));
          }
          else
          {
            v47 = (_DWORD *)(*(_QWORD *)v46 + 4 * (v45 >> 5));
          }
          *v47 |= 1 << v45;
        }
        v48 = v43[6];
        if (v48)
        {
          v49 = *a3;
          v50 = -v48;
          v51 = v48 - 6;
          do
          {
            v52 = *v43;
            if ((v51 + *v43) < 0xFFFFFFFB)
            {
              if (v51 + *v43 + 5 < 0)
              {
                v53 = *(unsigned int *)(v49 + 16) + (unint64_t)(v50 - v52);
                v54 = (_DWORD *)(*(_QWORD *)v49 + ((v53 >> 3) & 0x3FFFFFFC));
              }
              else
              {
                LODWORD(v53) = v51 + v52;
                v54 = (_DWORD *)(*(_QWORD *)v49 + 4 * (v53 >> 5));
              }
              *v54 |= 1 << v53;
            }
            --v51;
            v55 = __CFADD__(v50++, 1);
          }
          while (!v55);
        }
        return;
      case 0x64:
        v108 = (_DWORD *)*((_QWORD *)a2 + 9);
        v109 = v108[6];
        if (v109)
        {
          v110 = v109 - 1;
          do
          {
            --v110;
          }
          while (v110 != -1);
        }
        return;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v32 = *((_QWORD *)a2 + 3);
        v33 = *((_DWORD *)this + 41);
        if (v33 <= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8A4);
        }
        if (v33 <= (int)v32 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8ACLL);
        }
        v34 = v32 + 2;
        if (v33 <= (int)v32 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8B4);
        }
        v35 = *((_QWORD *)this + 19);
        v36 = *(_QWORD *)(v35 + 8 * (v32 + 1));
        v37 = *((_DWORD *)a2 + 18);
        v38 = *(_QWORD *)(v35 + 8 * v34);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v39 = 13;
              break;
            case 4:
              v39 = 17;
              break;
            case 5:
              v39 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x1982DF82CLL);
            default:
              __break(0xC471u);
              JUMPOUT(0x1982DF85CLL);
          }
        }
        else
        {
          v39 = 21;
        }
        v40 = *(_QWORD *)(v35 + 8 * *((_QWORD *)a2 + 3)) & 0xFF00FFFFFFFFFFFFLL;
        v41 = v36 & 0xFF00FFFFFFFFFFFFLL;
        v42 = (JSC::DFG::Node *)(v38 & 0xFF00FFFFFFFFFFFFLL);
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
            return;
          case 7u:
            if (BYTE2(v37) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v294, v39, 16400, v40, v36 & 0xFF00FFFFFFFFFFFFLL, 0);
            JSC::DFG::LazyNode::LazyNode(&v293, v42);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v292, 18, 16400, v40, v41, 0);
            v17 = &v291;
            break;
          case 8u:
            if (BYTE2(v37) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v290, 13, 16401, v40, v36 & 0xFF00FFFFFFFFFFFFLL, 0);
            JSC::DFG::LazyNode::LazyNode(&v289, v42);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v288, 14, 16401, v40, v41, 0);
            JSC::DFG::LazyNode::LazyNode(&v287, v42);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v286, 15, 16401, v40, v41, 0);
            v17 = &v285;
            break;
          case 9u:
            if (BYTE2(v37) - 3 < 2)
              return;
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v284, v39, 16402, v40, v36 & 0xFF00FFFFFFFFFFFFLL, 0);
            JSC::DFG::LazyNode::LazyNode(&v283, v42);
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v282, 20, 16402, v40, v41, 0);
            v17 = &v281;
            break;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x1982DEA74);
          default:
            __break(0xC471u);
            JUMPOUT(0x1982DF5E0);
        }
        v18 = v42;
        goto LABEL_96;
      case 0x8B:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v278;
        goto LABEL_96;
      case 0x93:
        v17 = &v276;
        goto LABEL_95;
      case 0x96:
        v17 = &v310;
        goto LABEL_95;
      case 0x97:
        v17 = &v309;
        goto LABEL_95;
      case 0x98:
      case 0x99:
        if (*((int *)this + 238) < 2)
          return;
        v17 = &v272;
        goto LABEL_95;
      case 0x9A:
        if (*((int *)this + 238) < 2)
          return;
        v17 = &v271;
        goto LABEL_95;
      case 0x9B:
        if (*((int *)this + 238) < 2)
          return;
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v268;
        goto LABEL_96;
      case 0x9C:
        JSC::DFG::MultiPutByOffsetData::writesStructures(*((JSC::DFG::MultiPutByOffsetData **)a2 + 9));
        JSC::DFG::MultiPutByOffsetData::reallocatesStorage(*((_QWORD *)a2 + 9));
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        if (*((int *)this + 238) >= 2)
          v17 = &v270;
        else
          v17 = &v269;
        goto LABEL_96;
      case 0x9D:
        JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
        return;
      case 0x9E:
        v21 = *((_DWORD *)a2 + 18);
        if (v21 - 5 < 7)
          return;
        if (v21 - 12 < 2)
        {
          v17 = &v267;
          goto LABEL_95;
        }
        if (v21 == 3)
          return;
        if (v21 != 25)
        {
          v224 = JSC::DFG::toTypedArrayType(v21);
          if (v224 == 12 || !v224)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x1982DFB2CLL);
          }
        }
        if ((v21 & 0x40000000) != 0)
          return;
        v17 = &v266;
        goto LABEL_95;
      case 0x9F:
        v116 = *((_DWORD *)a2 + 18);
        if (v116 != 25)
        {
          v218 = JSC::DFG::toTypedArrayType(v116);
          if (v218 == 12 || v218 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x1982DF9F0);
          }
        }
        if ((v116 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x1982DECE8);
        }
        return;
      case 0xA0:
        v113 = *((_DWORD *)a2 + 18);
        if (v113 == 25)
          goto LABEL_222;
        v216 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v216 == 12 || v216 == 0)
        {
          if (v113 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x1982DF998);
          }
          return;
        }
        if (v113 == 3)
          return;
LABEL_222:
        if ((v113 & 0x40000000) != 0)
          return;
        v17 = &v265;
        goto LABEL_95;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF89CLL);
        }
        v17 = &v264;
        goto LABEL_95;
      case 0xA2:
        v146 = *((_DWORD *)a2 + 18);
        v147 = v146;
        if (v146 == 25)
          goto LABEL_308;
        v222 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v222 == 12 || v222 == 0)
        {
          if (v147 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x1982DFAB8);
          }
        }
        else if (v147 != 3)
        {
          v146 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_308:
          if ((v146 & 0x40000000) == 0)
          {
            v17 = &v275;
            goto LABEL_95;
          }
        }
        return;
      case 0xA3:
        v126 = *((_DWORD *)a2 + 18);
        v127 = v126;
        if (v126 == 25)
          goto LABEL_264;
        v220 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v220 == 12 || v220 == 0)
        {
          if (v127 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x1982DFA54);
          }
        }
        else if (v127 != 3)
        {
          v126 = *((_WORD *)a2 + 9) == 146 ? *((_DWORD *)a2 + 20) : *((_DWORD *)a2 + 18);
LABEL_264:
          if ((v126 & 0x40000000) == 0)
          {
            v17 = &v274;
            goto LABEL_95;
          }
        }
        return;
      case 0xAC:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v263;
        goto LABEL_96;
      case 0xAD:
      case 0xAE:
        v17 = &v256;
        goto LABEL_95;
      case 0xAF:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v255;
        goto LABEL_96;
      case 0xB3:
        v17 = &v260;
        goto LABEL_95;
      case 0xB4:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v259;
        goto LABEL_96;
      case 0xBE:
        v17 = &v280;
        goto LABEL_95;
      case 0xC2:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          return;
        v17 = &v273;
        goto LABEL_95;
      case 0xC4:
        v152 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v152)
          v153 = (_DWORD)v152 == 11;
        else
          v153 = 1;
        if (!v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF0C4);
        }
        return;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        if (v11 - 202 >= 0xA || ((0x3EFu >> (v11 + 54)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF87CLL);
        }
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0
          && *((_DWORD *)this + 41) <= dword_199154608[(__int16)(v11 - 202)] + *((_DWORD *)a2 + 6))
        {
          __break(0xC471u);
          JUMPOUT(0x1982DE6D8);
        }
        return;
      case 0xCE:
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0 && *((_DWORD *)this + 41) <= *((_DWORD *)a2 + 6))
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF20CLL);
        }
        return;
      case 0xD7:
        if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF010);
        }
        return;
      case 0xE6:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3FuLL) >= 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1982DEE58);
        }
        return;
      case 0x106:
        v56 = *((_QWORD *)a2 + 4);
        v57 = v56;
        if ((v56 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v56) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v56 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (!(_DWORD)v56)
            return;
        }
        v64 = *((unsigned __int16 *)a2 + 9);
        switch(v64)
        {
          case 267:
            goto LABEL_163;
          case 264:
            v65 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_163:
            v65 = *((_DWORD *)a2 + 21);
            break;
          default:
            v65 = *((_DWORD *)a2 + 18);
            goto LABEL_77;
        }
        LOBYTE(v65) = v65 & 0xF;
LABEL_77:
        if (v65 - 4 < 6
          || v65 <= 0x19u && ((1 << v65) & 0x2A00000) != 0)
        {
          v66 = *((unsigned int *)this + 107);
          if (v56 >= v66)
          {
            if ((_DWORD)v66)
            {
              v190 = (unsigned int *)*((_QWORD *)this + 52);
              v191 = 4 * v66;
              do
              {
                v192 = *v190;
                if (v192 < v56)
                {
                  v193 = v192 + *((_DWORD *)a2 + 6);
                  if (*((_DWORD *)this + 41) <= v193)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982DF8E4);
                  }
                  v194 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v193);
                  if ((int)v192 < 0)
                    v195 = COERCE__INT64((double)v192) + 0x2000000000000;
                  else
                    v195 = v192 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v195, v58, v59, v60, v61, v62, v63);
                  JSC::DFG::LazyNode::LazyNode(&v254, (JSC::DFG::Node *)(v194 & 0xFF00FFFFFFFFFFFFLL));
                }
                ++v190;
                v191 -= 4;
              }
              while (v191);
            }
          }
          else
          {
            v67 = 0;
            do
            {
              if (*((_DWORD *)this + 41) <= (v67 + *((_DWORD *)a2 + 6)))
              {
                __break(0xC471u);
                JUMPOUT(0x1982DF8BCLL);
              }
              if ((v67 & 0x80000000) != 0)
                v68 = COERCE__INT64((double)v67) + 0x2000000000000;
              else
                v68 = v67 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v68, v58, v59, v60, v61, v62, v63);
              ++v67;
            }
            while (v57 != v67);
          }
        }
        return;
      case 0x107:
        if (*((_DWORD *)a2 + 8))
        {
          v88 = *((_QWORD *)a2 + 3);
          v89 = *((_DWORD *)this + 41);
          v55 = v89 >= v88;
          LODWORD(v90) = v89 - v88;
          if (v55)
            v90 = v90;
          else
            v90 = 0;
          v91 = *((unsigned int *)a2 + 8) - 1;
          do
          {
            if (!v90)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DF8CCLL);
            }
            v92 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v88++) & 0xFF00FFFFFFFFFFFFLL)
                                      + 0x12);
            v93 = v92 == 350 || v91-- == 0;
            --v90;
          }
          while (!v93);
        }
        return;
      case 0x10A:
        v98 = *((unsigned int *)a2 + 20);
        if ((v98 & 0x80000000) != 0)
          v99 = COERCE__INT64((double)v98) + 0x2000000000000;
        else
          v99 = v98 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v99, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 0x10B:
        v154 = (uint64_t *)*((_QWORD *)a2 + 9);
        v155 = *v154;
        v156 = *(unsigned int *)(*v154 + 8);
        if ((v156 & 0x80000000) != 0)
          v157 = COERCE__INT64((double)v156) + 0x2000000000000;
        else
          v157 = v156 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v157, (uint64_t)a3, a4, a5, a6, a7, a8);
        v165 = *((unsigned __int16 *)a2 + 9);
        switch(v165)
        {
          case 267:
            goto LABEL_414;
          case 264:
            v166 = *((_DWORD *)a2 + 19);
            break;
          case 352:
LABEL_414:
            v166 = *((_DWORD *)a2 + 21);
            break;
          default:
            v166 = *((_DWORD *)a2 + 18);
            goto LABEL_328;
        }
        LOBYTE(v166) = v166 & 0xF;
LABEL_328:
        v29 = v166 > 0x19u;
        v167 = (1 << v166) & 0x2A003F0;
        if (!v29 && v167 != 0)
        {
          v169 = *((unsigned int *)this + 107);
          if (v169 <= v156)
          {
            v253 = 0;
            v252 = 0;
            if ((_DWORD)v169)
            {
              v200 = (unsigned int *)*((_QWORD *)this + 52);
              v201 = 4 * v169;
              do
              {
                v202 = *v200;
                LODWORD(v225) = v202;
                if (v202 < v156)
                {
                  if (HIDWORD(v253) == (_DWORD)v253)
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v252, (unint64_t)&v225);
                  }
                  else
                  {
                    *((_DWORD *)v252 + HIDWORD(v253)) = v202;
                    ++HIDWORD(v253);
                  }
                }
                ++v200;
                v201 -= 4;
              }
              while (v201);
              v203 = v252;
              if (HIDWORD(v253))
              {
                v204 = v155 + 16;
                v205 = 4 * HIDWORD(v253);
                do
                {
                  v206 = *(unsigned int *)v203;
                  if ((v206 & 0x80000000) != 0)
                    v207 = COERCE__INT64((double)v206) + 0x2000000000000;
                  else
                    v207 = v206 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v207, v159, v160, v161, v162, v163, v164);
                  if ((*(_BYTE *)(v155 + 4) & 0xE) == 6)
                    v214 = *(_QWORD *)(v204 + 8 * v206) + 0x2000000000000;
                  else
                    v214 = *(_QWORD *)(v204 + 8 * v206);
                  JSC::DFG::Graph::freeze((uint64_t)this, v214, v208, v209, v210, v211, v212, v213);
                  v203 = (WTF *)((char *)v203 + 4);
                  v205 -= 4;
                }
                while (v205);
                v203 = v252;
              }
              if (v203)
              {
                v252 = 0;
                LODWORD(v253) = 0;
                WTF::fastFree((unint64_t)v203, v158, v159, v160, v161, v162, v163, v164);
              }
            }
          }
          else if ((_DWORD)v156)
          {
            v170 = 0;
            v171 = v155 + 16;
            do
            {
              if ((v170 & 0x80000000) != 0)
                v172 = COERCE__INT64((double)v170) + 0x2000000000000;
              else
                v172 = v170 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v172, v159, v160, v161, v162, v163, v164);
              if ((*(_BYTE *)(v155 + 4) & 0xE) == 6)
                v179 = *(_QWORD *)(v171 + 8 * v170) + 0x2000000000000;
              else
                v179 = *(_QWORD *)(v171 + 8 * v170);
              JSC::DFG::Graph::freeze((uint64_t)this, v179, v173, v174, v175, v176, v177, v178);
              ++v170;
            }
            while (v156 != v170);
          }
        }
        return;
      case 0x10D:
        v140 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v140 >= 2 && (_DWORD)v140 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1982DEF94);
        }
        return;
      case 0x114:
        JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      case 0x123:
        v17 = &v279;
        goto LABEL_95;
      case 0x12B:
        v17 = &v314;
        goto LABEL_95;
      case 0x12C:
        v17 = &v313;
        goto LABEL_95;
      case 0x135:
        v17 = &v312;
        goto LABEL_95;
      case 0x136:
        v17 = &v311;
        goto LABEL_95;
      case 0x13E:
      case 0x145:
        v72 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v72 >= 2)
        {
          v29 = v72 > 0x34;
          v73 = (1 << v72) & 0x12026001400100;
          if (v29 || v73 == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DE500);
          }
        }
        return;
      case 0x146:
        v111 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v111)
          v112 = (_DWORD)v111 == 28;
        else
          v112 = 1;
        if (!v112)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1982DEBECLL);
        }
        return;
      case 0x157:
        v17 = &v262;
        goto LABEL_95;
      case 0x158:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v261;
        goto LABEL_96;
      case 0x164:
        v17 = &v258;
        goto LABEL_95;
      case 0x165:
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v257;
        goto LABEL_96;
      case 0x180:
      case 0x182:
        if (v11 == 386)
        {
          v69 = *((unsigned __int8 *)a2 + 80);
          if (v69 == 2)
          {
            if (*((_DWORD *)this + 41) <= *((_DWORD *)a2 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x1982DE3E8);
            }
            return;
          }
          if (v69 != 1)
            return;
          v75 = 11;
        }
        else
        {
          v75 = 12;
        }
        v76 = BYTE2(*((_DWORD *)a2 + 18));
        v77 = *((_DWORD *)a2 + 18);
        if (v77 == 9)
        {
          if (v76 > 1)
            return;
          v78 = *((_QWORD *)a2 + 3);
          v79 = *((_DWORD *)this + 41);
          if (v79 <= v78)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DF8FCLL);
          }
          if (v79 <= (int)v78 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DF904);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v316, v75, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v17 = &v315;
        }
        else if (v77 == 8)
        {
          if (v76 > 1)
            return;
          v198 = *((_QWORD *)a2 + 3);
          v199 = *((_DWORD *)this + 41);
          if (v199 <= v198)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DFB54);
          }
          if (v199 <= (int)v198 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DFB5CLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v318, v75, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v17 = &v317;
        }
        else
        {
          if (v77 != 7 || v76 > 1)
            return;
          v84 = *((_QWORD *)a2 + 3);
          v85 = *((_DWORD *)this + 41);
          if (v85 <= v84)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DFB44);
          }
          if (v85 <= (int)v84 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982DFB4CLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v320, v75, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v17 = &v319;
        }
        goto LABEL_95;
      case 0x18A:
        v80 = *((_QWORD *)a2 + 3);
        if ((v80 & 0xFC000000000000) == 0x78000000000000)
          v81 = 16411;
        else
          v81 = 16412;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v251, 52, v81, v80, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v17 = &v250;
        goto LABEL_95;
      case 0x18B:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v249, 54, 16411, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v248;
        goto LABEL_95;
      case 0x18C:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v136 = 16413;
        else
          v136 = 16414;
        v17 = &v247;
        goto LABEL_95;
      case 0x18D:
        v17 = &v246;
        goto LABEL_95;
      case 0x18E:
        v17 = &v245;
        goto LABEL_95;
      case 0x18F:
        v17 = &v244;
        goto LABEL_95;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v180 = 16412;
        else
          v180 = 16411;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v243, 48, v180, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v242;
        goto LABEL_95;
      case 0x191:
        v17 = &v241;
        goto LABEL_95;
      case 0x192:
        v17 = &v240;
        goto LABEL_95;
      case 0x193:
        v17 = &v239;
        goto LABEL_95;
      case 0x194:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v236, 53, 16412, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v17 = &v235;
        goto LABEL_95;
      case 0x195:
        v82 = *((_QWORD *)a2 + 3);
        v83 = *((_DWORD *)this + 41);
        if (v83 <= v82)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8ECLL);
        }
        if (v83 <= (int)v82 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8F4);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v234, 53, 16411, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v233;
        goto LABEL_95;
      case 0x196:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v117 = 16411;
        else
          v117 = 16412;
        goto LABEL_238;
      case 0x197:
        v114 = *((_QWORD *)a2 + 3);
        if ((v114 & 0xFC000000000000) == 0x88000000000000)
          v115 = 16415;
        else
          v115 = 16416;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v238, 55, v115, v114, *((_QWORD *)a2 + 4), 0);
        v17 = &v237;
        goto LABEL_95;
      case 0x198:
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v232, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        v18 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v231;
        goto LABEL_96;
      case 0x199:
        v148 = *((_QWORD *)a2 + 3);
        v149 = *((_DWORD *)this + 41);
        if (v149 <= v148)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DFAC0);
        }
        if (v149 <= (int)v148 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DFAC8);
        }
        v150 = v148 + 2;
        if (v149 <= (int)v148 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DFAD0);
        }
        v151 = *((_QWORD *)this + 19);
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v230, 55, 16415, *(_QWORD *)(v151 + 8 * v148), *(_QWORD *)(v151 + 8 * (v148 + 1)), 0);
        v18 = (JSC::DFG::Node *)(*(_QWORD *)(v151 + 8 * v150) & 0xFF00FFFFFFFFFFFFLL);
        v17 = &v229;
        goto LABEL_96;
      case 0x1A0:
        v128 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
        if (!v128)
          return;
        v129 = *(unsigned int *)(v128 + 24);
        v130 = *(_DWORD *)(v128 + 28);
        v131 = (unsigned __int16)*(_DWORD *)(v128 + 24);
        if (v131 != WORD1(v129))
        {
          v132 = WORD1(v129) == 0xFFFF && v131 == 0;
          v133 = (v129 << 15) | 0x25;
          if (v132)
            v134 = 16387;
          else
            v134 = v133;
        }
        if ((_WORD)v130)
        {
          if (v130 >= 0xFFFF0000 && (unsigned __int16)v130 == 0xFFFF)
            return;
        }
        else if (v130 > 0xFFFEFFFF)
        {
          return;
        }
        v17 = &v277;
        goto LABEL_95;
      case 0x1A1:
        v118 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 48);
        if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48) == WORD1(v118))
          return;
        if (!(unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48) && WORD1(v118) == 0xFFFF)
          return;
        v117 = (v118 << 15) | 0x25;
LABEL_238:
        return;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          return;
        v97 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v227, v97, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        v17 = &v226;
        goto LABEL_95;
      case 0x1AE:
      case 0x1AF:
        v17 = &v228;
        goto LABEL_95;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x1982DEDF0);
      default:
        v252 = (WTF *)JSC::DFG::Graph::opName(v11);
        v253 = v181;
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v252, &v225);
        if (v225)
          v182 = (const char *)(v225 + 16);
        else
          v182 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v182);
        WTF::CString::~CString((WTF::CString *)&v225, v183, v184, v185, v186, v187, v188, v189);
        __break(0xC471u);
        JUMPOUT(0x1982DF2C4);
    }
    switch(*((_DWORD *)a2 + 18))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 0xAu:
      case 0xBu:
      case 0x17u:
      case 0x18u:
        return;
      case 7u:
        if (BYTE2(v22) > 3u || BYTE2(v22) == 2)
          return;
        if (BYTE2(v22) == 3)
          v24 = 18;
        v103 = *((_QWORD *)a2 + 3);
        v104 = *((_DWORD *)this + 41);
        if (v104 <= v103)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF92CLL);
        }
        if (v104 <= (int)v103 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF934);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v300, v24, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v299;
        goto LABEL_95;
      case 8u:
        if (BYTE2(v22) >= 2u)
        {
          if (BYTE2(v22) != 3)
            return;
          if (v23 == 3)
          {
LABEL_381:
            if (BYTE2(v22) == 3)
              v100 = 15;
            else
              v100 = 13;
LABEL_186:
            v101 = *((_QWORD *)a2 + 3);
            v102 = *((_DWORD *)this + 41);
            if (v102 <= v101)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DF91CLL);
            }
            if (v102 <= (int)v101 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982DF924);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v298, v100, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v17 = &v297;
LABEL_95:
            v18 = a2;
LABEL_96:
            JSC::DFG::LazyNode::LazyNode(v17, v18);
            return;
          }
        }
        else if (v23 == 3)
        {
          if (!BYTE2(v22))
          {
            v100 = 14;
            goto LABEL_186;
          }
          goto LABEL_381;
        }
        v100 = 16;
        goto LABEL_186;
      case 0xCu:
        if (BYTE2(v22) > 1u)
          return;
        v70 = *((_QWORD *)a2 + 3);
        v71 = *((_DWORD *)this + 41);
        if (v71 <= v70)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8D4);
        }
        if (v71 <= (int)v70 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF8DCLL);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v304, v24, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v303;
        goto LABEL_95;
      case 0xDu:
        v196 = *((_QWORD *)a2 + 3);
        v197 = *((_DWORD *)this + 41);
        if (v197 <= v196)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DFB34);
        }
        if (v197 <= (int)v196 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DFB3CLL);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v302, v24, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v301;
        goto LABEL_95;
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
        if ((v22 & 0x40000000) != 0)
          return;
        v86 = *((_QWORD *)a2 + 3);
        v87 = *((_DWORD *)this + 41);
        if (v87 <= v86)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF90CLL);
        }
        if (v87 <= (int)v86 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1982DF914);
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)v296, v24, 16406, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
        v17 = &v295;
        goto LABEL_95;
      case 0x19u:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
        __break(0xC471u);
        JUMPOUT(0x1982DF3DCLL);
      default:
        __break(0xC471u);
        JUMPOUT(0x1982DF3FCLL);
    }
  }
  v105 = *((unsigned __int16 *)a2 + 9);
  if (v105 <= 0xC9)
  {
    v215 = v105 - 101;
    if (v105 - 101 > 0x3E)
      goto LABEL_410;
    if (((1 << v215) & 0x7E0070000000000FLL) != 0)
      return;
    if (((1 << v215) & 0x18000000000) == 0)
    {
LABEL_410:
      if (v105 - 92 >= 2)
        goto LABEL_411;
      return;
    }
    goto LABEL_2;
  }
  if (v105 - 202 > 0x3E || ((1 << (v105 + 54)) & 0x400000000E002FEFLL) == 0)
  {
    v107 = v105 - 333;
    if (v107 > 0x3A || ((1 << v107) & 0x7A8000000000003) == 0)
    {
LABEL_411:
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:516:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
      __break(0xC471u);
      JUMPOUT(0x1982DF700);
    }
  }
}

uint64_t JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::AbstractHeap)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  if ((a2 & 0x3FFF) == 2)
  {
    v2 = a2 >> 15;
    if ((a2 & 0xFFFF800000000000) == 0x1000000000000 || v2 >= 5)
    {
      if ((a2 & 0xFFFF800000000000) == 0x1000000000000)
      {
        v3 = *(unsigned int *)(result + 16) + (uint64_t)(int)v2 + *(unsigned int *)(result + 20);
        v4 = (_DWORD *)(*(_QWORD *)result + 4 * (v3 >> 5));
      }
      else if ((v2 & 0x80000000) != 0)
      {
        v3 = ~((unint64_t)a2 >> 15) + (unint64_t)*(unsigned int *)(result + 16);
        v4 = (_DWORD *)(*(_QWORD *)result + ((v3 >> 3) & 0x3FFFFFFC));
      }
      else
      {
        LOBYTE(v3) = v2 - 5;
        v4 = (_DWORD *)(*(_QWORD *)result + 4 * ((unint64_t)((int)v2 - 5) >> 5));
      }
      *v4 |= 1 << v3;
    }
  }
  return result;
}

uint64_t JSC::DFG::HeapLocation::HeapLocation(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  if ((a5 & 0xFF00FFFFFFFFFFFFLL) != 0
    && (v7 = *(unsigned __int16 *)((a5 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v7 <= 2))
  {
    v6 = *(_QWORD *)((a5 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (*(_WORD *)((a5 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
    {
      if ((_DWORD)v7 != 1)
        v7 = 2;
      v6 |= v7;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4 & 0xFF00FFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = a5 & 0xFF00FFFFFFFFFFFFLL;
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = a6 & 0xFF00FFFFFFFFFFFFLL;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;

  if (a5 && (v7 = *(unsigned __int16 *)(a5 + 18), v7 <= 2))
  {
    v6 = *(_QWORD *)(a5 + 72);
    if (*(_WORD *)(a5 + 18))
    {
      if ((_DWORD)v7 != 1)
        v7 = 2;
      v6 |= v7;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = a6;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

_QWORD *JSC::DFG::LazyNode::LazyNode(_QWORD *this, JSC::DFG::Node *a2)
{
  uint64_t v2;
  uint64_t v3;

  *this = a2;
  this[1] = 0;
  if (a2)
  {
    v2 = *((unsigned __int16 *)a2 + 9);
    if (v2 <= 2)
    {
      v3 = *((_QWORD *)a2 + 9);
      this[1] = v3;
      if ((_DWORD)v2)
      {
        if ((_DWORD)v2 != 1)
          v2 = 2;
        this[1] = v2 | v3;
      }
    }
  }
  return this;
}

uint64_t JSC::DFG::indexedPropertyLocForResultType(JSC::DFG *this)
{
  uint64_t result;

  if (this < 2)
    return 21;
  switch((int)this)
  {
    case 3:
      result = 13;
      break;
    case 4:
      result = 17;
      break;
    case 5:
      result = 19;
      break;
    case 7:
      __break(0xC471u);
      JUMPOUT(0x1982E0594);
    default:
      __break(0xC471u);
      JUMPOUT(0x1982E0574);
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if (v7)
  {
    v21 = v7;
    v22 = (uint64_t *)v6;
    do
    {
      if (*v22)
      {
        if (*v22 != -1)
        {
          v23 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v22);
          v24 = v22[1];
          if (v24)
            WTF::fastFree(v24 - 16, v10, v11, v12, v13, v14, v15, v16);
          if (v22 == a3)
            v19 = v23;
        }
      }
      else
      {
        v25 = v22[1];
        if (v25)
          WTF::fastFree(v25 - 16, v10, v11, v12, v13, v14, v15, v16);
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    goto LABEL_20;
  }
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::InlineCallFrame *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v11 = (_QWORD *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<void *>>,void *>(a1, *a2);
  v12 = v11[1];
  if (v12)
  {
    WTF::fastFree(v12 - 16, v4, v5, v6, v7, v8, v9, v10);
    v3 = *a2;
  }
  *v11 = v3;
  v11[1] = 0;
  v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t *_ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZNS2_32eliminateCandidatesThatInterfereEvEUlS5_E_EENSD_15IterationStatusES3_S5_S8_(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t *result;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;

  v7 = *a1;
  result = *a4;
  v9 = *(unsigned __int16 *)(a3 + 18);
  if (v9 == 276 || v9 == 347 || v9 == 354)
  {
    v10 = (_QWORD *)(*(_QWORD *)a3 & 0xFFFFFFFF8);
    if ((*(_QWORD *)a3 & 1) != 0)
      v10 = (_QWORD *)*v10;
    v25 = v10;
    result = WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::add(result, (uint64_t *)&v25, (uint64_t)&v24);
    v9 = *(unsigned __int16 *)(a3 + 18);
  }
  if (v9 == 277)
    return (uint64_t *)_ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZNS2_32eliminateCandidatesThatInterfereEvEUlS5_E_EENSD_15IterationStatusES3_S5_S8_(a2, a2, *(_QWORD *)(a3 + 24) & 0xFF00FFFFFFFFFFFFLL, a4);
  if (v9 == 263)
  {
    v11 = *(_DWORD *)(a3 + 32);
    if (v11)
    {
      v12 = 0;
      v13 = *(uint64_t **)(a3 + 72);
      v14 = v11 - 1;
      v15 = (v11 - 1);
      v16 = -v11;
      do
      {
        v17 = (unint64_t *)(2 * *v13);
        if (*v13 < 0)
          v18 = 63;
        else
          v18 = *v17;
        if (v18 > v15 + v12)
        {
          v19 = (uint64_t *)(v17 + 1);
          v20 = *v13 >= 0 ? v19 : v13;
          if (((*(unint64_t *)((char *)v20 + (((unint64_t)(v15 + v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v14 + v12)) & 1) != 0)
          {
            v21 = *(_QWORD *)(v7 + 32);
            v22 = v15 + v12 + *(_QWORD *)(a3 + 24);
            if (*(_DWORD *)(v21 + 164) <= v22)
            {
              __break(0xC471u);
              return result;
            }
            result = (uint64_t *)_ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZNS2_32eliminateCandidatesThatInterfereEvEUlS5_E_EENSD_15IterationStatusES3_S5_S8_(a2, a2, *(_QWORD *)(*(_QWORD *)(v21 + 152) + 8 * v22) & 0xFF00FFFFFFFFFFFFLL, a4);
          }
        }
        --v12;
      }
      while (!__CFADD__(v16++, 1));
    }
  }
  return result;
}

uint64_t *WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 != 1)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14 != 1);
    if (v24)
    {
      *v24 = 1;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_22:
    result = WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(v4, v14);
    v14 = result;
    v18 = *v4;
    if (*v4)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_22;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(8 * v7 + 16));
  if (v7)
  {
    v16 = v7;
    v17 = (_QWORD *)(v8 + 16);
    do
    {
      *v17++ = 1;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v18 = 0;
  if (v5)
  {
    v20 = v5;
    v21 = (_QWORD *)v4;
    do
    {
      if (*v21 != -1 && *v21 != 1)
      {
        v23 = WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::reinsert(a1, v21);
        if (v21 == a2)
          v18 = v23;
      }
      ++v21;
      --v20;
    }
    while (v20);
    goto LABEL_20;
  }
  result = 0;
  if (v4)
  {
LABEL_20:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v18;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::InlineCallFrame *,JSC::InlineCallFrame *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::reinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *result;
  int v9;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  if (*(_QWORD *)(v2 + 8 * v7) != 1)
  {
    v9 = 1;
    do
      v7 = ((_DWORD)v7 + v9++) & v3;
    while (*(_QWORD *)(v2 + 8 * v7) != 1);
  }
  result = (_QWORD *)(v2 + 8 * v7);
  *result = *a2;
  return result;
}

uint64_t _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZZNS2_32eliminateCandidatesThatInterfereEvENKUlS5_RKNS0_15AvailabilityMapEE_clES5_SK_EUlS5_E_EENSD_15IterationStatusES3_S5_S8_(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;

  v7 = *a4;
  while (1)
  {
    v8 = *(unsigned __int16 *)(a3 + 18);
    if (v8 == 354)
      goto LABEL_3;
    v31 = 0;
    if (*(unsigned __int16 *)(a3 + 18) > 0x15Au)
    {
      if (v8 != 347)
        return v31;
LABEL_3:
      v9 = *(_QWORD *)(v7 + 72);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = (~(a3 << 32) + a3) ^ ((~(a3 << 32) + a3) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = (uint64_t *)(v9 + 40 * v14);
        v16 = *v15;
        if (*v15 != a3)
        {
          v17 = 1;
          while (v16)
          {
            v14 = (v14 + v17) & v10;
            v15 = (uint64_t *)(v9 + 40 * v14);
            v16 = *v15;
            ++v17;
            if (*v15 == a3)
              goto LABEL_10;
          }
          v15 = (uint64_t *)(v9 + 40 * *(unsigned int *)(v9 - 4));
        }
LABEL_10:
        if (v15 != (uint64_t *)(v9 + 40 * *(unsigned int *)(v9 - 4)))
        {
          v18 = *(_QWORD *)a3 & 0xFFFFFFFF8;
          if ((*(_QWORD *)a3 & 1) != 0)
            v18 = *(_QWORD *)v18;
          if (v18)
          {
            v32 = *(_BYTE *)(v18 + 32);
            v33 = *(_QWORD *)(v18 + 24);
            if ((v33 >> 60) - 3 <= 2)
            {
              v62 = a4[1];
              *((_QWORD *)&v63 + 1) = (uint64_t)(16 * v33) >> 56;
              *(_QWORD *)&v63 = v33 << 12;
              v64 = (v63 >> 44) + 4;
              if ((((v63 >> 44) + 4) & 0x80000000) != 0)
              {
                v65 = v64 ^ 0xFFFFFFFFLL;
                v66 = *(_QWORD *)v62 + 16 * (v65 + *(unsigned int *)(v62 + 16));
                v67 = v65 + *((unsigned int *)v15 + 6);
              }
              else
              {
                v88 = (v64 << 32) - 0x500000000;
                v67 = v88 >> 32;
                v66 = *(_QWORD *)v62 + (v88 >> 28);
              }
              v68 = v15[1];
              if (*(_QWORD *)v66 != *(_QWORD *)(v68 + 16 * v67))
                goto LABEL_77;
              v69 = v68 + 16 * v67;
              v70 = *(unsigned __int8 *)(v66 + 8);
              v71 = *(unsigned __int8 *)(v69 + 8);
              v72 = *(_DWORD *)(v66 + 12);
              v73 = *(_DWORD *)(v69 + 12);
              if (v70 != v71 || v72 != v73)
                goto LABEL_77;
            }
            if ((v32 & 1) != 0)
            {
              v75 = a4[1];
              *((_QWORD *)&v76 + 1) = (uint64_t)(16 * v33) >> 56;
              *(_QWORD *)&v76 = v33 << 12;
              v77 = (v76 >> 44) + 3;
              if ((((v76 >> 44) + 3) & 0x80000000) != 0)
              {
                v78 = v77 ^ 0xFFFFFFFFLL;
                v79 = *(_QWORD *)v75 + 16 * (v78 + *(unsigned int *)(v75 + 16));
                v80 = v78 + *((unsigned int *)v15 + 6);
              }
              else
              {
                v89 = (v77 << 32) - 0x500000000;
                v80 = v89 >> 32;
                v79 = *(_QWORD *)v75 + (v89 >> 28);
              }
              v81 = v15[1];
              if (*(_QWORD *)v79 != *(_QWORD *)(v81 + 16 * v80)
                || ((v82 = v81 + 16 * v80,
                     v83 = *(unsigned __int8 *)(v79 + 8),
                     v84 = *(unsigned __int8 *)(v82 + 8),
                     v85 = *(_DWORD *)(v79 + 12),
                     v86 = *(_DWORD *)(v82 + 12),
                     v83 == v84)
                  ? (v87 = v85 == v86)
                  : (v87 = 0),
                    !v87))
              {
LABEL_77:
                v31 = 1;
                *(_BYTE *)a4[2] = 1;
                return v31;
              }
            }
            v34 = (v33 & 0x3FFFFF) - 1;
            if ((v33 & 0x3FFFFF) != 1)
            {
              v35 = a4[1];
              v36 = HIDWORD(v33) & 0xFFFFF | ((int)(v33 >> 28) >> 24 << 20);
              v37 = v15[1];
              v38 = v36 + 6;
              while (1)
              {
                v39 = v38;
                if ((v38 & 0x80000000) != 0)
                {
                  v40 = *(_QWORD *)v35 + 16 * ((v38 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v35 + 16));
                  v41 = (v39 ^ 0xFFFFFFFFLL) + *((unsigned int *)v15 + 6);
                }
                else
                {
                  v48 = ((unint64_t)v38 << 32) - 0x500000000;
                  v41 = v48 >> 32;
                  v40 = *(_QWORD *)v35 + (v48 >> 28);
                }
                if (*(_QWORD *)v40 != *(_QWORD *)(v37 + 16 * v41))
                  break;
                v42 = v37 + 16 * v41;
                v43 = *(unsigned __int8 *)(v40 + 8);
                v44 = *(unsigned __int8 *)(v42 + 8);
                v45 = *(_DWORD *)(v40 + 12);
                v46 = *(_DWORD *)(v42 + 12);
                if (v43 != v44 || v45 != v46)
                  break;
                v38 = v39 + 1;
                if (!--v34)
                  return 0;
              }
              goto LABEL_77;
            }
          }
          else
          {
            v19 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32) + 28);
            if (v19 >= 2)
            {
              v20 = 0;
              v21 = *(_QWORD *)a4[1];
              v22 = v15[1];
              v23 = 16 * v19 - 16;
              while (1)
              {
                v24 = v21 + v20;
                v25 = v22 + v20;
                if (*(_QWORD *)(v21 + v20 + 16) != *(_QWORD *)(v22 + v20 + 16))
                  break;
                v26 = *(unsigned __int8 *)(v24 + 24);
                v27 = *(unsigned __int8 *)(v25 + 24);
                v28 = *(_DWORD *)(v24 + 28);
                v29 = *(_DWORD *)(v25 + 28);
                if (v26 != v27 || v28 != v29)
                  break;
                v20 += 16;
                if (v23 == v20)
                  return 0;
              }
              goto LABEL_77;
            }
          }
        }
      }
      return 0;
    }
    if (v8 == 276)
      goto LABEL_3;
    if (v8 != 277)
      break;
    a3 = *(_QWORD *)(a3 + 24) & 0xFF00FFFFFFFFFFFFLL;
    result = a2;
  }
  if (v8 != 263)
    return v31;
  v31 = *(unsigned int *)(a3 + 32);
  if (!*(_DWORD *)(a3 + 32))
    return v31;
  v49 = 0;
  v50 = *(uint64_t **)(a3 + 72);
  v51 = *(_QWORD *)result;
  v52 = v31 - 1;
  v53 = (v31 - 1);
  v54 = -(int)v31;
  while (2)
  {
    v55 = (unint64_t *)(2 * *v50);
    if (*v50 < 0)
      v56 = 63;
    else
      v56 = *v55;
    if (v56 <= v53 + v49
      || ((v57 = (uint64_t *)(v55 + 1), *v50 >= 0) ? (v58 = v57) : (v58 = v50),
          ((*(unint64_t *)((char *)v58 + (((unint64_t)(v53 + v49) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v52 + v49)) & 1) == 0))
    {
LABEL_57:
      v31 = 0;
      --v49;
      if (__CFADD__(v54++, 1))
        return v31;
      continue;
    }
    break;
  }
  v59 = *(_QWORD *)(v51 + 32);
  v60 = v53 + v49 + *(_QWORD *)(a3 + 24);
  if (*(_DWORD *)(v59 + 164) > v60)
  {
    result = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase32eliminateCandidatesThatInterfereEvENKUlT_PNS0_4NodeERKT0_E_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS9_EEEEZZNS2_32eliminateCandidatesThatInterfereEvENKUlS5_RKNS0_15AvailabilityMapEE_clES5_SK_EUlS5_E_EENSD_15IterationStatusES3_S5_S8_(a2, a2, *(_QWORD *)(*(_QWORD *)(v59 + 152) + 8 * v60) & 0xFF00FFFFFFFFFFFFLL, a4);
    if ((_DWORD)result)
      return 1;
    goto LABEL_57;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)#1}::operator() const(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)#1}::operator() const(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::AbstractHeap)#1},JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)#1}::operator() const(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::AbstractHeap)#1} const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  __int32 *v24;
  int32x4_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x4_t v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  signed int v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  signed int v45;
  JSC::DFG::Node *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  BOOL v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  int v188;
  BOOL v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  int v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int *v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  WTF *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int v257;
  char v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  int v265;
  uint64_t v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  unint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t v282;
  int v283;
  int v285;
  int v287;
  int v288;
  int v290;
  int v291;
  int v293;
  int v294;
  unint64_t v296;
  unint64_t v297;
  JSC::DFG::Node *v298;
  char v299;
  char v300[56];
  char v301;
  char v302;
  char v303[56];
  char v304;
  char v305[56];
  char v306;
  char v307[56];
  char v308;
  char v309[56];
  char v310;
  char v311[56];
  char v312;
  char v313;
  char v314;
  char v315;
  char v316[56];
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  char v322[56];
  char v323;
  char v324[56];
  WTF *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  char v330;
  char v331;
  char v332;
  char v333;
  char v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  char v356;
  char v357;
  char v358;
  char v359;
  char v360;
  char v361;
  char v362[56];
  uint64_t v363;
  char v364[56];
  char v365;
  char v366[56];
  uint64_t v367;
  char v368[56];
  uint64_t v369;
  char v370[56];
  char v371;
  char v372[56];
  uint64_t v373;
  char v374[56];
  char v375;
  char v376[56];
  char v377;
  char v378[56];
  char v379;
  char v380[56];
  char v381;
  char v382[56];
  char v383;
  char v384[56];
  char v385;
  char v386[56];
  char v387;
  char v388;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  char v394;
  char v395;
  char v396;
  char v397;
  char v398[56];
  char v399;
  char v400[56];
  char v401;
  char v402[56];
  uint64_t v403;

  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v81 = *((unsigned __int16 *)a2 + 9);
    if (v81 > 0xC9)
    {
      if (v81 - 202 > 0x3E || ((1 << (v81 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v83 = v81 - 333;
        if (v83 > 0x3A || ((1 << v83) & 0x7A8000000000003) == 0)
        {
LABEL_618:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x1982E3300);
        }
      }
      goto LABEL_66;
    }
    v258 = v81 - 101;
    if (v81 - 101 > 0x3E)
      goto LABEL_617;
    if (((1 << v258) & 0x7E0070000000000FLL) != 0)
    {
LABEL_66:
      v12 = 16387;
      goto LABEL_4;
    }
    if (((1 << v258) & 0x18000000000) == 0)
    {
LABEL_617:
      if (v81 - 92 >= 2)
        goto LABEL_618;
      goto LABEL_66;
    }
  }
  v11 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x13:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xB6:
    case 0xB7:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x113:
    case 0x118:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x166:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
      return;
    case 6:
    case 0xD6:
    case 0x144:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
      goto LABEL_447;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x185:
    case 0x186:
    case 0x19B:
      goto LABEL_66;
    case 0xB:
      v39 = &v390;
      goto LABEL_57;
    case 0xC:
      return;
    case 0xD:
      v39 = &v389;
      goto LABEL_57;
    case 0xE:
      v143 = 131074;
      goto LABEL_546;
    case 0xF:
      v217 = (_QWORD *)*((_QWORD *)a2 + 9);
      v218 = v217;
      do
      {
        v219 = v218;
        v218 = (_QWORD *)*v218;
      }
      while (v218);
      if (v219 != v217)
      {
        *v217 = v219;
        v217 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v220 = v217;
      do
      {
        v221 = v220;
        v220 = (_QWORD *)*v220;
      }
      while (v220);
      if (v221 != v217)
        *v217 = v221;
      v39 = &v388;
      goto LABEL_57;
    case 0x10:
      v222 = (_QWORD *)*((_QWORD *)a2 + 9);
      v223 = v222;
      do
      {
        v224 = v223;
        v223 = (_QWORD *)*v223;
      }
      while (v223);
      if (v224 != v222)
        *v222 = v224;
      v225 = (_QWORD *)*((_QWORD *)a2 + 9);
      v226 = v225;
      do
      {
        v227 = v226;
        v226 = (_QWORD *)*v226;
      }
      while (v226);
      if (v227 != v225)
        *v225 = v227;
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v387;
      goto LABEL_58;
    case 0x11:
      v13 = **((_QWORD **)a2 + 9);
      if ((v13 & 0x1FFFF00000000) == 0x200000000)
        return;
      v20 = **a3;
      if (!v20)
      {
        if ((v13 & 0x80000000) == 0)
          goto LABEL_9;
        return;
      }
      v21 = *(_BYTE *)(v20 + 32);
      v16 = *(_QWORD *)(v20 + 24);
      v22 = HIDWORD(v16) & 0xFFFFF | ((int)(v16 >> 28) >> 24 << 20);
      if ((v21 & 1) != 0 && v22 + 3 == (_DWORD)v13)
        goto LABEL_10;
      if ((v16 >> 60) - 3 <= 2 && v22 + 4 == (_DWORD)v13)
        goto LABEL_10;
      v19 = v22 + 6;
      if (v19 > (int)v13)
        return;
      goto LABEL_17;
    case 0x12:
      v13 = *((_QWORD *)a2 + 9);
      if ((v13 & 0x1FFFF00000000) == 0x200000000)
        return;
      v14 = **a3;
      if (v14)
      {
        v15 = *(_BYTE *)(v14 + 32);
        v16 = *(_QWORD *)(v14 + 24);
        v17 = HIDWORD(v16) & 0xFFFFF | ((int)(v16 >> 28) >> 24 << 20);
        if (((v15 & 1) == 0 || v17 + 3 != (_DWORD)v13) && ((v16 >> 60) - 3 > 2 || v17 + 4 != (_DWORD)v13))
        {
          v19 = v17 + 6;
          if (v19 > (int)v13)
            return;
LABEL_17:
          if ((int)((v16 & 0x3FFFFF) + v19 - 1) <= (int)v13)
            return;
        }
      }
      else
      {
        if ((v13 & 0x80000000) != 0)
          return;
LABEL_9:
        if ((_DWORD)v13 == 5)
          return;
      }
      goto LABEL_10;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0x117:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x19E:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      goto LABEL_3;
    case 0x1C:
      v209 = (_QWORD *)*((_QWORD *)a2 + 9);
      v210 = v209;
      do
      {
        v211 = v210;
        v210 = (_QWORD *)*v210;
      }
      while (v210);
      if (v211 != v209)
        *v209 = v211;
      goto LABEL_3;
    case 0x22:
      v12 = 16419;
      goto LABEL_4;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
        goto LABEL_66;
      return;
    case 0x2A:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
        goto LABEL_66;
      return;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v48 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v48)
      {
        case 0x1A:
          v79 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v80 = 0x68000000000000;
          break;
        case 0x1C:
          v79 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v80 = 0x70000000000000;
          break;
        case 0x1B:
          v79 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v80 = 0x6C000000000000;
          break;
        default:
          goto LABEL_66;
      }
      if (v79 == v80)
      {
LABEL_3:
        v12 = 16424;
        goto LABEL_4;
      }
      goto LABEL_66;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0 || (*((_BYTE *)a2 + 38) & 0xFC) == 0)
        goto LABEL_66;
      return;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
        goto LABEL_66;
      return;
    case 0x40:
    case 0x42:
    case 0x44:
      v74 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v74 == 49 || (_DWORD)v74 == 52)
          return;
LABEL_172:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1982E1AACLL);
      }
      if ((_DWORD)v74)
      {
        if ((_DWORD)v74 == 1)
          return;
        goto LABEL_172;
      }
      goto LABEL_66;
    case 0x41:
      v213 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v205 = v213 > 0x34;
      v214 = (1 << v213) & 0x12000000000002;
      if (!v205 && v214 != 0)
        return;
      goto LABEL_66;
    case 0x46:
      v102 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v102 != 1 && (_DWORD)v102 != 49)
        goto LABEL_66;
      return;
    case 0x49:
    case 0x50:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_66;
      return;
    case 0x4B:
      v12 = 16409;
      goto LABEL_4;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_66;
      return;
    case 0x51:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_66;
      return;
    case 0x52:
    case 0x53:
      v75 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v75 > 0x34)
        goto LABEL_133;
      if (((1 << v75) & 0x1200001C000002) != 0)
        return;
      if (v75)
      {
LABEL_133:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1982E1850);
      }
      goto LABEL_66;
    case 0x5C:
    case 0x5D:
      v52 = *((_DWORD *)a2 + 18);
      v53 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      switch((char)v52)
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 23:
        case 24:
          goto LABEL_135;
        case 3:
          goto LABEL_109;
        case 5:
          if (BYTE2(v52) - 3 <= 1)
            goto LABEL_135;
          return;
        case 6:
          return;
        case 7:
          if (BYTE2(v52) > 3u || BYTE2(v52) == 2)
            goto LABEL_135;
          if (BYTE2(v52) == 3)
            v265 = 18;
          else
            v265 = v53;
          v266 = *((_QWORD *)a2 + 3);
          v267 = *((_DWORD *)this + 41);
          if (v267 <= v266)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41A0);
          }
          if (v267 <= (int)v266 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41A8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v382, v265, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v381;
          goto LABEL_57;
        case 8:
          if (BYTE2(v52) >= 2u)
          {
            if (BYTE2(v52) != 3)
              goto LABEL_135;
            if ((*((_DWORD *)a2 + 14) & 7) == 3)
              goto LABEL_631;
          }
          else if ((*((_DWORD *)a2 + 14) & 7) == 3)
          {
            if (!BYTE2(v52))
            {
              v263 = 14;
LABEL_700:
              v280 = *((_QWORD *)a2 + 3);
              v281 = *((_DWORD *)this + 41);
              if (v281 <= v280)
              {
                __break(0xC471u);
                JUMPOUT(0x1982E41B0);
              }
              if (v281 <= (int)v280 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1982E41B8);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)v380, v263, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              v39 = &v379;
LABEL_57:
              v46 = a2;
LABEL_58:
              JSC::DFG::LazyNode::LazyNode(v39, v46);
              return;
            }
LABEL_631:
            if (BYTE2(v52) == 3)
              v263 = 15;
            else
              v263 = 13;
            goto LABEL_700;
          }
          v263 = 16;
          goto LABEL_700;
        case 9:
          if (BYTE2(v52) > 3u || BYTE2(v52) == 2)
            goto LABEL_135;
          if (BYTE2(v52) == 3)
            v229 = 20;
          else
            v229 = v53;
          v230 = *((_QWORD *)a2 + 3);
          v231 = *((_DWORD *)this + 41);
          if (v231 <= v230)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E4134);
          }
          if (v231 <= (int)v230 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E413CLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v378, v229, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v377;
          goto LABEL_57;
        case 10:
        case 11:
          if (BYTE2(v52) >= 2u)
            goto LABEL_135;
          return;
        case 12:
          if (BYTE2(v52) > 1u)
            goto LABEL_135;
          v259 = *((_QWORD *)a2 + 3);
          v260 = *((_DWORD *)this + 41);
          if (v260 <= v259)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41F0);
          }
          if (v260 <= (int)v259 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41F8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v386, v53, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v385;
          goto LABEL_57;
        case 13:
          v261 = *((_QWORD *)a2 + 3);
          v262 = *((_DWORD *)this + 41);
          if (v262 <= v261)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E4190);
          }
          if (v262 <= (int)v261 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E4198);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v384, v53, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v383;
          goto LABEL_57;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          if ((v52 & 0x40000000) == 0)
          {
            v54 = *((_QWORD *)a2 + 3);
            v55 = *((_DWORD *)this + 41);
            if (v55 <= v54)
            {
              __break(0xC471u);
              JUMPOUT(0x1982E411CLL);
            }
            if (v55 <= (int)v54 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1982E4124);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)v376, v53, 16406, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            v39 = &v375;
            goto LABEL_57;
          }
          v325 = (WTF *)16423;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          v12 = 16406;
          goto LABEL_4;
        case 25:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x1982E343CLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x1982E345CLL);
      }
    case 0x62:
    case 0x184:
    case 0x187:
      goto LABEL_135;
    case 0x63:
      v325 = (WTF *)16387;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v24 = (__int32 *)*((_QWORD *)a2 + 9);
      v26 = v24[6];
      if (v26)
      {
        v27 = a3[1];
        v28 = **a3;
        if (v28)
        {
          v40 = *v24 - 1;
          do
          {
            v41 = v40 + v26;
            v42 = *(_QWORD *)(v28 + 24);
            v43 = HIDWORD(v42) & 0xFFFFF | ((int)(v42 >> 28) >> 24 << 20);
            if ((*(_BYTE *)(v28 + 32) & 1) != 0 && v41 == v43 + 3
              || ((v42 >> 60) - 3 <= 2 ? (v44 = v41 == v43 + 4) : (v44 = 0),
                  v44 || (v45 = v43 + 6, v45 <= v41) && (int)((v42 & 0x3FFFFF) + v45 - 1) > v41))
            {
              *(_BYTE *)v27 = 1;
            }
            --v26;
          }
          while (v26);
        }
        else
        {
          v29 = (uint32x4_t)vdupq_n_s32(v26 - 1);
          v25.i32[0] = *v24;
          v30.i64[0] = -1;
          v30.i64[1] = -1;
          v31 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v25, v30), 0);
          v32 = vaddq_s32(vdupq_n_s32(v26), (int32x4_t)xmmword_1991545D0);
          v33.i64[0] = 0x500000005;
          v33.i64[1] = 0x500000005;
          v34.i64[0] = 0x300000003;
          v34.i64[1] = 0x300000003;
          do
          {
            v35 = vaddq_s32(v31, v32);
            v36 = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgeq_u32(v29, (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v28), (int8x16_t)xmmword_199123270)), vbicq_s8((int8x16_t)vcgtq_s32(v35, v30), (int8x16_t)vceqq_s32(v35, v33))));
            if ((v36.i8[0] & 1) != 0 || (v36.i8[2] & 1) != 0 || (v36.i8[4] & 1) != 0 || (v36.i8[6] & 1) != 0)
              *(_BYTE *)v27 = 1;
            LODWORD(v28) = v28 + 4;
            v32 = vaddq_s32(v32, v34);
          }
          while (((v26 + 3) & 0xFFFFFFFC) != (_DWORD)v28);
        }
      }
      return;
    case 0x64:
      v97 = (_DWORD *)*((_QWORD *)a2 + 9);
      v98 = v97[6];
      if (v98)
      {
        v99 = v98 - 1;
        do
        {
          --v99;
        }
        while (v99 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v63 = *((_QWORD *)a2 + 3);
      v64 = *((_DWORD *)this + 41);
      if (v64 <= v63)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3F50);
      }
      if (v64 <= (int)v63 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3F58);
      }
      if (v64 <= (int)v63 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3F60);
      }
      v65 = *((_QWORD *)this + 19);
      v66 = *(_QWORD *)(v65 + 8 * *((_QWORD *)a2 + 3));
      v67 = *(_QWORD *)(v65 + 8 * (v63 + 1));
      v68 = *((_DWORD *)a2 + 18);
      v69 = *(_QWORD *)(v65 + 8 * (v63 + 2));
      v70 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      switch(v68)
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 12:
        case 13:
        case 23:
        case 24:
          goto LABEL_135;
        case 3:
          goto LABEL_109;
        case 7:
          v268 = v70;
          v296 = v67 & 0xFF00FFFFFFFFFFFFLL;
          if (*((_WORD *)a2 + 9) == 146)
            v269 = *((_DWORD *)a2 + 20);
          else
            v269 = *((_DWORD *)a2 + 18);
          if (BYTE2(v269) - 3 <= 1)
            goto LABEL_135;
          v325 = (WTF *)16400;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          if (*((_WORD *)a2 + 9) == 146)
            v270 = *((_DWORD *)a2 + 20);
          else
            v270 = *((_DWORD *)a2 + 18);
          if ((v270 & 0xFE0000) != 0)
          {
            v325 = (WTF *)16388;
            v403 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
              *(_BYTE *)a3[1] = 1;
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v374, v268, 16400, v66 & 0xFF00FFFFFFFFFFFFLL, v296, 0);
          v271 = v69 & 0xFF00FFFFFFFFFFFFLL;
          JSC::DFG::LazyNode::LazyNode(&v373, (JSC::DFG::Node *)(v69 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v372, 18, 16400, v66 & 0xFF00FFFFFFFFFFFFLL, v296, 0);
          v39 = &v371;
          goto LABEL_693;
        case 8:
          v298 = (JSC::DFG::Node *)(v69 & 0xFF00FFFFFFFFFFFFLL);
          if (*((_WORD *)a2 + 9) == 146)
            v273 = *((_DWORD *)a2 + 20);
          else
            v273 = *((_DWORD *)a2 + 18);
          if (BYTE2(v273) - 3 <= 1)
            goto LABEL_135;
          v325 = (WTF *)16401;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          if (*((_WORD *)a2 + 9) == 146)
            v274 = *((_DWORD *)a2 + 20);
          else
            v274 = *((_DWORD *)a2 + 18);
          if ((v274 & 0xFE0000) != 0)
          {
            v325 = (WTF *)16388;
            v403 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
              *(_BYTE *)a3[1] = 1;
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v370, 13, 16401, v66 & 0xFF00FFFFFFFFFFFFLL, v67 & 0xFF00FFFFFFFFFFFFLL, 0);
          v271 = v69 & 0xFF00FFFFFFFFFFFFLL;
          JSC::DFG::LazyNode::LazyNode(&v369, v298);
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v368, 14, 16401, v66 & 0xFF00FFFFFFFFFFFFLL, v67 & 0xFF00FFFFFFFFFFFFLL, 0);
          JSC::DFG::LazyNode::LazyNode(&v367, v298);
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v366, 15, 16401, v66 & 0xFF00FFFFFFFFFFFFLL, v67 & 0xFF00FFFFFFFFFFFFLL, 0);
          v39 = &v365;
          goto LABEL_693;
        case 9:
          v277 = v70;
          v297 = v67 & 0xFF00FFFFFFFFFFFFLL;
          if (*((_WORD *)a2 + 9) == 146)
            v278 = *((_DWORD *)a2 + 20);
          else
            v278 = *((_DWORD *)a2 + 18);
          if (BYTE2(v278) - 3 <= 1)
            goto LABEL_135;
          v325 = (WTF *)16402;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          if (*((_WORD *)a2 + 9) == 146)
            v279 = *((_DWORD *)a2 + 20);
          else
            v279 = *((_DWORD *)a2 + 18);
          if ((v279 & 0xFE0000) != 0)
          {
            v325 = (WTF *)16388;
            v403 = 16386;
            if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
              *(_BYTE *)a3[1] = 1;
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v364, v277, 16402, v66 & 0xFF00FFFFFFFFFFFFLL, v297, 0);
          v271 = v69 & 0xFF00FFFFFFFFFFFFLL;
          JSC::DFG::LazyNode::LazyNode(&v363, (JSC::DFG::Node *)(v69 & 0xFF00FFFFFFFFFFFFLL));
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v362, 20, 16402, v66 & 0xFF00FFFFFFFFFFFFLL, v297, 0);
          v39 = &v361;
LABEL_693:
          v46 = (JSC::DFG::Node *)v271;
          goto LABEL_58;
        case 10:
          if (*((_WORD *)a2 + 9) == 146)
            v275 = *((_DWORD *)a2 + 20);
          else
            v275 = *((_DWORD *)a2 + 18);
          if (BYTE2(v275) - 3 <= 1)
            goto LABEL_135;
          v325 = (WTF *)16403;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          if (*((_WORD *)a2 + 9) == 146)
            v276 = *((_DWORD *)a2 + 20);
          else
            v276 = *((_DWORD *)a2 + 18);
          if ((v276 & 0xFE0000) == 0)
            return;
          v12 = 16388;
          break;
        case 11:
          if (*((_WORD *)a2 + 9) == 146)
            v272 = *((_DWORD *)a2 + 20);
          else
            v272 = *((_DWORD *)a2 + 18);
          if ((v272 & 0xFE0000) != 0)
            goto LABEL_135;
          v12 = 16403;
          goto LABEL_4;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          if (*((_WORD *)a2 + 9) == 146)
            v71 = *((_DWORD *)a2 + 20);
          else
            v71 = *((_DWORD *)a2 + 18);
          v325 = (WTF *)16406;
          v403 = 16386;
          if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
            *(_BYTE *)a3[1] = 1;
          if ((v71 & 0x40000000) == 0)
            return;
          v12 = 16423;
          goto LABEL_4;
        case 25:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
          __break(0xC471u);
          JUMPOUT(0x1982E35E8);
        default:
          __break(0xC471u);
          JUMPOUT(0x1982E38A0);
      }
      goto LABEL_4;
    case 0x6D:
      v325 = (WTF *)16388;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16389;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16390;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16391;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16392;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16393;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16394;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16395;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16396;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16397;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16399;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16400;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16401;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16402;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16403;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16404;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16405;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16406;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16407;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16408;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16409;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16410;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16411;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16412;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16413;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16414;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16415;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16416;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16417;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16418;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16419;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16420;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16421;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16422;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v125 = 16423;
      goto LABEL_326;
    case 0x87:
      v325 = (WTF *)16394;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16395;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16393;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) != 0x4000)
        return;
      v12 = 16399;
      goto LABEL_4;
    case 0x88:
    case 0x89:
      v12 = 16407;
      goto LABEL_4;
    case 0x8A:
      v39 = &v357;
      goto LABEL_57;
    case 0x8B:
      v325 = (WTF *)16396;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16394;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v358;
      goto LABEL_58;
    case 0x91:
    case 0x92:
      v325 = (WTF *)16394;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16393;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v325 = (WTF *)16396;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v12 = 16422;
      goto LABEL_4;
    case 0x93:
      v39 = &v355;
      goto LABEL_57;
    case 0x96:
      v39 = &v392;
      goto LABEL_57;
    case 0x97:
      v39 = &v391;
      goto LABEL_57;
    case 0x98:
    case 0x99:
      if (*((int *)this + 238) >= 2)
        v39 = &v351;
      else
        v39 = &v350;
      goto LABEL_57;
    case 0x9A:
      if (*((int *)this + 238) < 2)
        v39 = &v348;
      else
        v39 = &v349;
      goto LABEL_57;
    case 0x9B:
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL);
      if (*((int *)this + 238) < 2)
        v39 = &v344;
      else
        v39 = &v345;
      goto LABEL_58;
    case 0x9C:
      if (JSC::DFG::MultiPutByOffsetData::writesStructures(*((JSC::DFG::MultiPutByOffsetData **)a2 + 9)))
      {
        v325 = (WTF *)16394;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      if (JSC::DFG::MultiPutByOffsetData::reallocatesStorage(*((_QWORD *)a2 + 9)))
      {
        v325 = (WTF *)16396;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      if (*((int *)this + 238) < 2)
        v39 = &v346;
      else
        v39 = &v347;
      goto LABEL_58;
    case 0x9D:
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
      v325 = (WTF *)16394;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v12 = 16399;
      goto LABEL_4;
    case 0x9E:
      v38 = *((_DWORD *)a2 + 18);
      switch((char)v38)
      {
        case 3:
          goto LABEL_155;
        case 5:
          return;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          v39 = &v343;
          goto LABEL_57;
        case 12:
        case 13:
          v39 = &v342;
          goto LABEL_57;
        case 25:
          goto LABEL_739;
        default:
          v283 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
          if (v283 == 12 || v283 == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x1982E4268);
          }
LABEL_739:
          if ((v38 & 0x40000000) != 0)
            goto LABEL_741;
          v39 = &v341;
          break;
      }
      goto LABEL_57;
    case 0x9F:
      v100 = *((_DWORD *)a2 + 18);
      if (v100 != 25)
      {
        v285 = JSC::DFG::toTypedArrayType(v100);
        if (v285 == 12 || v285 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1982E3FC0);
        }
      }
      if ((v100 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x1982E1D48);
      }
      return;
    case 0xA0:
      v101 = *((_DWORD *)a2 + 18);
      if (v101 == 25)
        goto LABEL_210;
      v287 = *((_DWORD *)a2 + 18);
      v288 = JSC::DFG::toTypedArrayType(v101);
      if (v288 == 12 || v288 == 0)
      {
        if (v287 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1982E4024);
        }
        goto LABEL_155;
      }
      if (v287 == 3)
        goto LABEL_155;
LABEL_210:
      if ((v101 & 0x40000000) != 0)
        goto LABEL_741;
      v39 = &v340;
      goto LABEL_57;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3ED4);
      }
      v39 = &v339;
      goto LABEL_57;
    case 0xA2:
      v103 = *((_DWORD *)a2 + 18);
      if (v103 == 25)
        goto LABEL_216;
      v290 = *((_DWORD *)a2 + 18);
      v291 = JSC::DFG::toTypedArrayType(v103);
      if (v291 == 12 || v291 == 0)
      {
        if (v290 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1982E4088);
        }
        goto LABEL_155;
      }
      if (v290 == 3)
        goto LABEL_155;
      if (*((_WORD *)a2 + 9) == 146)
        v103 = *((_DWORD *)a2 + 20);
      else
        v103 = *((_DWORD *)a2 + 18);
LABEL_216:
      if ((v103 & 0x40000000) == 0)
      {
        v39 = &v354;
        goto LABEL_57;
      }
      goto LABEL_741;
    case 0xA3:
      v136 = *((_DWORD *)a2 + 18);
      if (v136 == 25)
        goto LABEL_330;
      v293 = *((_DWORD *)a2 + 18);
      v294 = JSC::DFG::toTypedArrayType(v136);
      if (v294 == 12 || v294 == 0)
      {
        if (v293 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1982E40ECLL);
        }
        goto LABEL_155;
      }
      if (v293 == 3)
      {
LABEL_155:
        v12 = 16424;
        goto LABEL_4;
      }
      if (*((_WORD *)a2 + 9) == 146)
        v136 = *((_DWORD *)a2 + 20);
      else
        v136 = *((_DWORD *)a2 + 18);
LABEL_330:
      if ((v136 & 0x40000000) == 0)
      {
        v39 = &v353;
        goto LABEL_57;
      }
LABEL_741:
      v12 = 16423;
LABEL_4:
      v325 = (WTF *)v12;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
LABEL_10:
        *(_BYTE *)a3[1] = 1;
      return;
    case 0xAB:
      v39 = &v338;
      goto LABEL_57;
    case 0xAC:
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v337;
      goto LABEL_58;
    case 0xAD:
    case 0xAE:
      v39 = &v330;
      goto LABEL_57;
    case 0xAF:
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v329;
      goto LABEL_58;
    case 0xB2:
      v125 = 16422;
LABEL_326:
      v325 = (WTF *)v125;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      goto LABEL_3;
    case 0xB3:
      v39 = &v334;
      goto LABEL_57;
    case 0xB4:
      v325 = (WTF *)16398;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v333;
      goto LABEL_58;
    case 0xB5:
    case 0xDA:
    case 0xDE:
      v12 = 16408;
      goto LABEL_4;
    case 0xBE:
      v39 = &v360;
      goto LABEL_57;
    case 0xC1:
      v204 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v205 = v204 > 0x31;
      v206 = (1 << v204) & 0x2000000200002;
      if (!v205 && v206 != 0)
      {
        v208 = *((_QWORD *)a2 + 4);
        if ((v208 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v208 & 0xFC000000000000) == 0x4000000000000)
          return;
      }
      goto LABEL_135;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_44;
      v39 = &v352;
      goto LABEL_57;
    case 0xC3:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0x108:
    case 0x14A:
      goto LABEL_44;
    case 0xC4:
      v212 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v212)
        goto LABEL_44;
      if ((_DWORD)v212 != 11)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3EF4);
      }
      v325 = (WTF *)16407;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v12 = 16394;
      goto LABEL_4;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (v11 - 202 >= 0xA || ((0x3EFu >> (v11 + 54)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E3EB4);
      }
      v49 = dword_199154608[(__int16)(v11 - 202)];
      v50 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v232 = v49 + *v50;
        if (*((_DWORD *)this + 41) <= v232)
        {
          __break(0xC471u);
          JUMPOUT(0x1982E412CLL);
        }
        v51 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v232);
      }
      else
      {
        v51 = &v50[2 * v49];
      }
      if ((*v51 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_66;
      v12 = 16406;
      goto LABEL_4;
    case 0xCE:
      v216 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v282 = *v216;
        if (*((_DWORD *)this + 41) <= v282)
        {
          __break(0xC471u);
          JUMPOUT(0x1982E4200);
        }
        v216 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v282);
      }
      if ((*v216 & 0xFC000000000000) != 0x4000000000000)
        goto LABEL_66;
      return;
    case 0xD7:
      if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E2E44);
      }
      return;
    case 0xDD:
      goto LABEL_148;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_44;
      }
LABEL_148:
      v325 = (WTF *)16408;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v12 = 16398;
      goto LABEL_4;
    case 0xE1:
      if ((*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_44;
      return;
    case 0xE6:
      v202 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v202 - 1) < 2)
        return;
      if ((_DWORD)v202)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1982E2B7CLL);
      }
      goto LABEL_66;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v47 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v47 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x54000000000000)
        {
LABEL_98:
          v12 = 16407;
          goto LABEL_4;
        }
      }
      else if (!(_DWORD)v47 && (*((_BYTE *)a2 + 38) & 0xFC) == 0)
      {
LABEL_44:
        v12 = 16387;
        goto LABEL_4;
      }
      return;
    case 0x101:
    case 0x102:
      goto LABEL_155;
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x16B:
      goto LABEL_98;
    case 0x106:
      v325 = (WTF *)16407;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v110 = *((_QWORD *)a2 + 4);
      v111 = v110;
      if ((v110 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v110) + 0x2000000000000, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v110 | 0xFFFE000000000000, v104, v105, v106, v107, v108, v109);
        if (!(_DWORD)v110)
          return;
      }
      v118 = *((unsigned __int16 *)a2 + 9);
      switch(v118)
      {
        case 267:
          goto LABEL_707;
        case 264:
          v119 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_707:
          v119 = *((_DWORD *)a2 + 21);
          break;
        default:
          v119 = *((_DWORD *)a2 + 18);
          goto LABEL_231;
      }
      LOBYTE(v119) = v119 & 0xF;
LABEL_231:
      if (v119 <= 0x19u && ((1 << v119) & 0x2A003F0) != 0)
      {
        v120 = *((unsigned int *)this + 107);
        if (v110 >= v120)
        {
          if ((_DWORD)v120)
          {
            v236 = (unsigned int *)*((_QWORD *)this + 52);
            v237 = 4 * v120;
            do
            {
              v238 = *v236;
              if (v238 < v110)
              {
                v239 = v238 + *((_DWORD *)a2 + 6);
                if (*((_DWORD *)this + 41) <= v239)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982E3F68);
                }
                v240 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v239);
                if ((int)v238 < 0)
                  v241 = COERCE__INT64((double)v238) + 0x2000000000000;
                else
                  v241 = v238 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v241, v112, v113, v114, v115, v116, v117);
                JSC::DFG::LazyNode::LazyNode(&v327, (JSC::DFG::Node *)(v240 & 0xFF00FFFFFFFFFFFFLL));
              }
              ++v236;
              v237 -= 4;
            }
            while (v237);
          }
        }
        else
        {
          v121 = 0;
          do
          {
            v122 = v121 + *((_QWORD *)a2 + 3);
            if (*((_DWORD *)this + 41) <= v122)
            {
              __break(0xC471u);
              JUMPOUT(0x1982E3F40);
            }
            v123 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v122);
            if ((int)v121 < 0)
              v124 = COERCE__INT64((double)v121) + 0x2000000000000;
            else
              v124 = v121 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v124, v112, v113, v114, v115, v116, v117);
            JSC::DFG::LazyNode::LazyNode(&v328, (JSC::DFG::Node *)(v123 & 0xFF00FFFFFFFFFFFFLL));
            ++v121;
          }
          while (v111 != v121);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)a2 + 8))
      {
        v56 = *((_QWORD *)a2 + 3);
        v57 = *((_DWORD *)this + 41);
        v58 = v57 >= v56;
        LODWORD(v59) = v57 - v56;
        if (v58)
          v59 = v59;
        else
          v59 = 0;
        v60 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v59)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E3F48);
          }
          v61 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v56++) & 0xFF00FFFFFFFFFFFFLL)
                                    + 0x12);
          v62 = v61 == 350 || v60-- == 0;
          --v59;
        }
        while (!v62);
      }
      goto LABEL_98;
    case 0x10A:
      v325 = (WTF *)16407;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v132 = *((unsigned int *)a2 + 20);
      if ((v132 & 0x80000000) != 0)
        v133 = COERCE__INT64((double)v132) + 0x2000000000000;
      else
        v133 = v132 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v133, v126, v127, v128, v129, v130, v131);
      return;
    case 0x10B:
      v325 = (WTF *)16407;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      v154 = (uint64_t *)*((_QWORD *)a2 + 9);
      v155 = *v154;
      v156 = *(unsigned int *)(*v154 + 8);
      if ((v156 & 0x80000000) != 0)
        v157 = COERCE__INT64((double)v156) + 0x2000000000000;
      else
        v157 = v156 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v157, v148, v149, v150, v151, v152, v153);
      v165 = *((unsigned __int16 *)a2 + 9);
      switch(v165)
      {
        case 267:
          goto LABEL_705;
        case 264:
          v166 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_705:
          v166 = *((_DWORD *)a2 + 21);
          break;
        default:
          v166 = *((_DWORD *)a2 + 18);
          goto LABEL_393;
      }
      LOBYTE(v166) = v166 & 0xF;
LABEL_393:
      if (v166 <= 0x19u && ((1 << v166) & 0x2A003F0) != 0)
      {
        v167 = *((unsigned int *)this + 107);
        if (v167 <= v156)
        {
          v326 = 0;
          v325 = 0;
          if ((_DWORD)v167)
          {
            v233 = (unsigned int *)*((_QWORD *)this + 52);
            v234 = 4 * v167;
            do
            {
              v235 = *v233;
              LODWORD(v403) = v235;
              if (v235 < v156)
              {
                if (HIDWORD(v326) == (_DWORD)v326)
                {
                  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v325, (unint64_t)&v403);
                }
                else
                {
                  *((_DWORD *)v325 + HIDWORD(v326)) = v235;
                  ++HIDWORD(v326);
                }
              }
              ++v233;
              v234 -= 4;
            }
            while (v234);
            v242 = v325;
            if (HIDWORD(v326))
            {
              v243 = v155 + 16;
              v244 = 4 * HIDWORD(v326);
              do
              {
                v245 = *(unsigned int *)v242;
                if ((v245 & 0x80000000) != 0)
                  v246 = COERCE__INT64((double)v245) + 0x2000000000000;
                else
                  v246 = v245 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v246, v159, v160, v161, v162, v163, v164);
                if ((*(_BYTE *)(v155 + 4) & 0xE) == 6)
                  v253 = *(_QWORD *)(v243 + 8 * v245) + 0x2000000000000;
                else
                  v253 = *(_QWORD *)(v243 + 8 * v245);
                JSC::DFG::Graph::freeze((uint64_t)this, v253, v247, v248, v249, v250, v251, v252);
                v242 = (WTF *)((char *)v242 + 4);
                v244 -= 4;
              }
              while (v244);
              v242 = v325;
            }
            if (v242)
            {
              v325 = 0;
              LODWORD(v326) = 0;
              WTF::fastFree((unint64_t)v242, v158, v159, v160, v161, v162, v163, v164);
            }
          }
        }
        else if ((_DWORD)v156)
        {
          v168 = 0;
          v169 = v155 + 16;
          do
          {
            if ((v168 & 0x80000000) != 0)
              v170 = COERCE__INT64((double)v168) + 0x2000000000000;
            else
              v170 = v168 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v170, v159, v160, v161, v162, v163, v164);
            if ((*(_BYTE *)(v155 + 4) & 0xE) == 6)
              v177 = *(_QWORD *)(v169 + 8 * v168) + 0x2000000000000;
            else
              v177 = *(_QWORD *)(v169 + 8 * v168);
            JSC::DFG::Graph::freeze((uint64_t)this, v177, v171, v172, v173, v174, v175, v176);
            ++v168;
          }
          while (v156 != v168);
        }
      }
      return;
    case 0x10D:
      v134 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v134)
        goto LABEL_44;
      if ((_DWORD)v134 != 52 && (_DWORD)v134 != 1)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1982E1FD8);
      }
      goto LABEL_98;
    case 0x10F:
      v139 = *((_QWORD *)a2 + 3);
      v140 = v139 & 0xFF00FFFFFFFFFFFFLL;
      v141 = v139 & 0xFC000000000000;
      if (v140)
        v142 = v141 == 0x54000000000000;
      else
        v142 = 1;
      if (!v142)
        goto LABEL_44;
      goto LABEL_98;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)
        goto LABEL_98;
      goto LABEL_44;
    case 0x115:
      v37 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v37 == 352)
        return;
      if (v37 != 349)
        goto LABEL_44;
      goto LABEL_98;
    case 0x123:
      v39 = &v359;
      goto LABEL_57;
    case 0x12B:
      v39 = &v396;
      goto LABEL_57;
    case 0x12C:
      v39 = &v395;
      goto LABEL_57;
    case 0x131:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0xC4000000000000)
        goto LABEL_66;
      return;
    case 0x135:
      v39 = &v394;
      goto LABEL_57;
    case 0x136:
      v39 = &v393;
      goto LABEL_57;
    case 0x13E:
    case 0x145:
      v78 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v78 > 0x34)
        goto LABEL_734;
      if (((1 << v78) & 0x12026000400002) != 0)
        return;
      if (((1 << v78) & 0x101) != 0)
        goto LABEL_44;
      if (v78 != 24)
      {
LABEL_734:
        __break(0xC471u);
        JUMPOUT(0x1982E3F14);
      }
      goto LABEL_155;
    case 0x13F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000)
        goto LABEL_66;
      return;
    case 0x142:
    case 0x143:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
        goto LABEL_135;
      return;
    case 0x146:
      v203 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v203 == 28)
        return;
      if ((_DWORD)v203)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1982E2BF0);
      }
      goto LABEL_66;
    case 0x157:
      v39 = &v336;
      goto LABEL_57;
    case 0x158:
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v335;
      goto LABEL_58;
    case 0x159:
      v193 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v193 & 1) != 0)
        v194 = (v193 >> 1) & 3;
      else
        v194 = *(unsigned __int8 *)(v193 + 4);
      if (v194 != 2)
      {
        v325 = (WTF *)16422;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
LABEL_447:
      v12 = 16407;
      goto LABEL_4;
    case 0x164:
      v39 = &v332;
      goto LABEL_57;
    case 0x165:
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v331;
      goto LABEL_58;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v72 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v72 & 1) != 0)
        v73 = (v72 >> 1) & 3;
      else
        v73 = *(unsigned __int8 *)(v72 + 4);
      if (v73 != 2)
      {
        v325 = (WTF *)16422;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      goto LABEL_98;
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
LABEL_109:
      v12 = 16424;
      goto LABEL_4;
    case 0x178:
    case 0x179:
    case 0x17A:
      v12 = 16418;
      goto LABEL_4;
    case 0x17D:
      v12 = 16418;
      goto LABEL_4;
    case 0x17E:
    case 0x17F:
      v12 = 16392;
      goto LABEL_4;
    case 0x180:
    case 0x182:
      if (v11 == 386)
      {
        v76 = *((unsigned __int8 *)a2 + 80);
        if (v76 != 1)
        {
          if (v76 == 2)
          {
            if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x1982E4144);
            }
            if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) == 0x20000000000000)
              return;
          }
          goto LABEL_66;
        }
        v84 = 11;
      }
      else
      {
        v84 = 12;
      }
      v85 = BYTE2(*((_DWORD *)a2 + 18));
      switch(*((_DWORD *)a2 + 18))
      {
        case 3u:
          goto LABEL_3;
        case 7u:
          if (v85 > 1)
            goto LABEL_66;
          v86 = *((_QWORD *)a2 + 3);
          v87 = *((_DWORD *)this + 41);
          if (v87 <= v86)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41C0);
          }
          if (v87 <= (int)v86 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41C8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v402, v84, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v401;
          goto LABEL_57;
        case 8u:
          if (v85 > 1)
            goto LABEL_66;
          v254 = *((_QWORD *)a2 + 3);
          v255 = *((_DWORD *)this + 41);
          if (v255 <= v254)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41D0);
          }
          if (v255 <= (int)v254 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41D8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v400, v84, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v399;
          goto LABEL_57;
        case 9u:
          if (v85 > 1)
            goto LABEL_66;
          v256 = *((_QWORD *)a2 + 3);
          v257 = *((_DWORD *)this + 41);
          if (v257 <= v256)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41E0);
          }
          if (v257 <= (int)v256 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1982E41E8);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)v398, v84, 16402, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          v39 = &v397;
          goto LABEL_57;
        case 0xAu:
          if (v85 >= 2)
            goto LABEL_66;
          return;
        default:
          goto LABEL_66;
      }
    case 0x18A:
      v137 = *((_QWORD *)a2 + 3);
      if ((v137 & 0xFC000000000000) == 0x78000000000000)
        v138 = 16411;
      else
        v138 = 16412;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v324, 52, v138, v137, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v39 = &v323;
      goto LABEL_57;
    case 0x18B:
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v322, 54, 16411, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v39 = &v321;
      goto LABEL_57;
    case 0x18C:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v201 = 16413;
      else
        v201 = 16414;
      v39 = &v320;
      goto LABEL_57;
    case 0x18D:
      v39 = &v319;
      goto LABEL_57;
    case 0x18E:
      v39 = &v318;
      goto LABEL_57;
    case 0x18F:
      v39 = &v317;
      goto LABEL_57;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v195 = 16412;
      else
        v195 = 16411;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v316, 48, v195, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v39 = &v315;
      goto LABEL_57;
    case 0x191:
      v39 = &v314;
      goto LABEL_57;
    case 0x192:
      v39 = &v313;
      goto LABEL_57;
    case 0x193:
      v39 = &v312;
      goto LABEL_57;
    case 0x194:
      v325 = (WTF *)16412;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v309, 53, 16412, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v39 = &v308;
      goto LABEL_57;
    case 0x195:
      v196 = *((_QWORD *)a2 + 3);
      v197 = *((_DWORD *)this + 41);
      if (v197 <= v196)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E410CLL);
      }
      v198 = (v196 + 1);
      if (v197 <= v198)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E4114);
      }
      v199 = *((_QWORD *)a2 + 3);
      v200 = *((_QWORD *)this + 19);
      v325 = (WTF *)16411;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v307, 53, 16411, *(_QWORD *)(v200 + 8 * v199), *(_QWORD *)(v200 + 8 * v198), 0);
      v39 = &v306;
      goto LABEL_57;
    case 0x196:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v143 = 16411;
      else
        v143 = 16412;
      goto LABEL_546;
    case 0x197:
      v144 = *((_QWORD *)a2 + 3);
      if ((v144 & 0xFC000000000000) == 0x88000000000000)
        v145 = 16415;
      else
        v145 = 16416;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v311, 55, v145, v144, *((_QWORD *)a2 + 4), 0);
      v39 = &v310;
      goto LABEL_57;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
        v325 = (WTF *)16424;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      v325 = (WTF *)16416;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v305, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      v46 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v304;
      goto LABEL_58;
    case 0x199:
      v179 = *((_QWORD *)a2 + 3);
      v180 = *((_DWORD *)this + 41);
      if (v180 <= v179)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E40F4);
      }
      v181 = (v179 + 1);
      if (v180 <= v181)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E40FCLL);
      }
      v182 = (v179 + 2);
      if (v180 <= v182)
      {
        __break(0xC471u);
        JUMPOUT(0x1982E4104);
      }
      v183 = v179;
      v184 = *((_QWORD *)this + 19);
      if ((*(_QWORD *)(v184 + 8 * v181) & 0xFC000000000000) != 0x2C000000000000)
      {
        v325 = (WTF *)16424;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      v325 = (WTF *)16415;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v303, 55, 16415, *(_QWORD *)(v184 + 8 * v183), *(_QWORD *)(v184 + 8 * v181), 0);
      v46 = (JSC::DFG::Node *)(*(_QWORD *)(v184 + 8 * v182) & 0xFF00FFFFFFFFFFFFLL);
      v39 = &v302;
      goto LABEL_58;
    case 0x1A0:
      v185 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v185)
        goto LABEL_135;
      v186 = *(unsigned int *)(v185 + 24);
      v187 = *(_DWORD *)(v185 + 28);
      v188 = (unsigned __int16)*(_DWORD *)(v185 + 24);
      if (v188 != WORD1(v186))
      {
        v189 = WORD1(v186) == 0xFFFF && v188 == 0;
        v190 = (v186 << 15) | 0x25;
        if (v189)
          v191 = 16387;
        else
          v191 = v190;
      }
      if ((_WORD)v187)
      {
        if (v187 >= 0xFFFF0000 && (unsigned __int16)v187 == 0xFFFF)
          return;
      }
      else if (v187 > 0xFFFEFFFF)
      {
        return;
      }
      v39 = &v356;
      goto LABEL_57;
    case 0x1A1:
      v146 = *(unsigned int *)(*((_QWORD *)a2 + 9) + 48);
      if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48) == WORD1(v146))
        return;
      if ((unsigned __int16)*(_DWORD *)(*((_QWORD *)a2 + 9) + 48))
        v147 = 0;
      else
        v147 = WORD1(v146) == 0xFFFF;
      if (v147)
      {
LABEL_135:
        v12 = 16387;
        goto LABEL_4;
      }
      v143 = (v146 << 15) | 0x25;
LABEL_546:
      return;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_419;
      v77 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)v300, v77, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v39 = &v299;
      goto LABEL_57;
    case 0x1AD:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
      {
LABEL_419:
        v325 = (WTF *)16423;
        v403 = 16386;
        if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
          *(_BYTE *)a3[1] = 1;
      }
      v178 = 16406;
      goto LABEL_422;
    case 0x1AE:
    case 0x1AF:
      v39 = &v301;
      goto LABEL_57;
    case 0x1B0:
      v178 = 16410;
LABEL_422:
      v325 = (WTF *)v178;
      v403 = 16386;
      if (JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v325, (unint64_t *)&v403))
        *(_BYTE *)a3[1] = 1;
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x1982E2858);
    default:
      v325 = (WTF *)JSC::DFG::Graph::opName(v11);
      v326 = v88;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v325, &v403);
      if (v403)
        v89 = (const char *)(v403 + 16);
      else
        v89 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:687:25), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v89);
      WTF::CString::~CString((WTF::CString *)&v403, v90, v91, v92, v93, v94, v95, v96);
      __break(0xC471u);
      JUMPOUT(0x1982E1C34);
  }
}

uint64_t **JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)#1}::operator() const(JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::AbstractHeap)#1}::operator()(uint64_t **result, unint64_t a2)
{
  uint64_t **v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v7;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v2 = result;
  v11 = a2;
  if ((a2 & 0x7FFF) != 2)
  {
    v10 = 16386;
    result = (uint64_t **)JSC::DFG::AbstractHeap::overlaps((uint64_t *)&v11, &v10);
    if (!(_DWORD)result)
      return result;
LABEL_18:
    *(_BYTE *)v2[1] = 1;
    return result;
  }
  if (a2 >> 47 != 2)
  {
    v3 = a2 >> 15;
    v4 = **result;
    if (v4)
    {
      v5 = *(_BYTE *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 24);
      v7 = HIDWORD(v6) & 0xFFFFF | ((int)(v6 >> 28) >> 24 << 20);
      if ((v5 & 1) != 0 && v7 + 3 == (_DWORD)v3)
        goto LABEL_18;
      if ((v6 >> 60) - 3 <= 2 && v7 + 4 == (_DWORD)v3)
        goto LABEL_18;
      v9 = v7 + 6;
      if (v9 <= (int)v3 && (int)((v6 & 0x3FFFFF) + v9 - 1) > (int)v3)
        goto LABEL_18;
    }
    else if ((v3 & 0x80000000) == 0 && (_DWORD)v3 != 5)
    {
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t JSC::DFG::AbstractHeap::overlaps(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  v4 = *a1;
  if ((*a1 & 0x3FFF) == 0x25 && (v4 = *a1, (*a2 & 0x3FFF) == 0x25))
  {
    if ((v2 & 0x4000) != 0)
    {
      v8 = 0;
    }
    else
    {
      if ((v3 & 0x4000) != 0)
        return 1;
      v8 = 0;
      v11 = (unsigned __int16)(v2 >> 15);
      if (v11 != (unsigned __int16)(v2 >> 31))
      {
        v12 = (unsigned __int16)(v3 >> 15);
        v13 = (unsigned __int16)(v3 >> 31);
        if (v12 != v13)
        {
          v14 = v2 >> 15;
          v15 = v3 >> 15;
          v16 = (unsigned __int16)(v2 >> 31);
          v17 = v16 > v13;
          v18 = v16 == v13 && v11 == v12;
          if (v17 || v12 > v11 || v18)
            goto LABEL_45;
          return 1;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      v5 = v4 & 0x3FFF;
      if (v5 == 1)
        break;
      v6 = 16387;
      if (v5 == 2)
        v6 = 16385;
      if ((v4 & 0x4000) != 0)
        v4 = v6;
      else
        v4 = v5 | 0x4000u;
      if (v5 == 40)
        v4 = 16385;
      if (v5 == 3)
        v4 = 16385;
      if (v4 == v3)
        return 1;
    }
    v8 = (*a2 & 0x3FFF) != 37;
  }
  if ((*a1 & 0x3FFF) != 0x25 || v8)
  {
    while (1)
    {
      v9 = v3 & 0x3FFF;
      if (v9 == 1)
        break;
      v10 = 16387;
      if (v9 == 2)
        v10 = 16385;
      if ((v3 & 0x4000) != 0)
        v3 = v10;
      else
        v3 = v9 | 0x4000u;
      if (v9 == 40)
        v3 = 16385;
      if (v9 == 3)
        v3 = 16385;
      if (v3 == v2)
        return 1;
    }
    return 0;
  }
  if ((v3 & 0x4000) != 0)
    return 0;
  if ((v2 & 0x4000) != 0)
    return 1;
  v14 = v2 >> 15;
  v15 = v3 >> 15;
LABEL_45:
  v19 = v3 >> 31;
  v20 = (unsigned __int16)(v3 >> 31);
  v21 = (unsigned __int16)(v2 >> 31);
  v22 = v20 != v21;
  if ((unsigned __int16)v15 != (unsigned __int16)v14)
    v22 = 1;
  if ((unsigned __int16)v14 > (unsigned __int16)v15)
    v22 = 0;
  v23 = v20 <= v21 && v22;
  v24 = (unsigned __int16)v14 != v21 && v23;
  return (unsigned __int16)v15 != (unsigned __int16)v19 && v24;
}

_OWORD *WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v32;
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = (_QWORD *)v20;
      v19 = (v19 + v31) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v31;
    }
    while (*(_QWORD *)v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v30;
    }
  }
  *(_QWORD *)v20 = v15;
  *(_DWORD *)(v20 + 8) = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v20 = (uint64_t)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_11;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_16;
LABEL_11:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v32;
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = (_QWORD *)v20;
      v19 = (v19 + v31) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v31;
    }
    while (*(_QWORD *)v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v30;
    }
  }
  *(_QWORD *)v20 = v15;
  *(_DWORD *)(v20 + 8) = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
LABEL_23:
    result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v20 = (uint64_t)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_11;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_23;
LABEL_11:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

_OWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,unsigned int>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap &,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator()(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::DFG::Node *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18[2];
  uint64_t *v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  v10 = *a1;
  v9 = (uint64_t *)a1[1];
  v11 = a1[2];
  v18[0] = v9;
  v18[1] = (uint64_t *)v11;
  v19 = v9;
  if (HIDWORD(a2) == 2)
  {
    v12 = *(unsigned int *)(v10 + 16) + (uint64_t)(int)a2 + *(unsigned int *)(v10 + 20);
  }
  else if ((a2 & 0x80000000) != 0)
  {
    v12 = (a2 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16);
  }
  else
  {
    v12 = (int)a2 - 5;
  }
  v13 = 16 * v12;
  v14 = *(JSC::DFG::Node **)(*(_QWORD *)v10 + v13);
  if ((unint64_t)v14 >= 2)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v10 + v13);
    v20 = 0;
    WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v21, v9, &v22, &v20, a5, a6, a7, a8);
    v15 = v21;
    v16 = *(_DWORD *)(v21 + 8);
    v17 = v16;
    if ((v16 & 2) == 0)
    {
      v17 = *(_DWORD *)(v15 + 8);
    }
    *(_DWORD *)(v15 + 8) = v17 | 3;
    if ((v16 & 1) != 0)
  }
}

uint64_t void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap &,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator() const(JSC::Operand)::{lambda(JSC::DFG::Node *)#2}::operator()(uint64_t **a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  __int128 v16;
  JSC::DFG::Node *v17;

  v17 = a2;
  v10 = *a1;
  v15 = 0;
  WTF::HashMap<JSC::DFG::Node *,unsigned int,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v16, v10, (uint64_t *)&v17, &v15, a5, a6, a7, a8);
  v11 = v16;
  v12 = *(_DWORD *)(v16 + 8);
  if ((v12 & 2) != 0)
  {
    v13 = *(_DWORD *)(v16 + 8);
  }
  else
  {
    v13 = *(_DWORD *)(v11 + 8);
  }
  result = v12 & 1;
  *(_DWORD *)(v11 + 8) = v13 | 3;
  return result;
}

uint64_t *JSC::DFG::AvailabilityMap::closeOverNodes<void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap&,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator() const(JSC::Operand)::{lambda(JSC::DFG::Node *)#1},void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap&,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator() const(JSC::Operand)::{lambda(JSC::DFG::Node *)#2}>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  JSC::DFG::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  do
  {
    v6 = *(_QWORD *)(a1 + 24);
    result = (uint64_t *)WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::begin(v6);
    v18[0] = (uint64_t)result;
    v18[1] = v8;
    if (v6)
      v9 = (uint64_t *)(v6 + 32 * *(unsigned int *)(v6 - 4));
    else
      v9 = 0;
    if (v9 == result)
      break;
    v10 = 0;
    do
    {
      v11 = (JSC::DFG::Node *)result[2];
      if ((unint64_t)v11 >= 2)
      {
      }
      WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>::operator++(v18);
      result = (uint64_t *)v18[0];
    }
    while ((uint64_t *)v18[0] != v9);
  }
  while ((v10 & 1) != 0);
  return result;
}

uint64_t WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::begin(uint64_t result)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;

  if (!result)
    return 0;
  v2 = *(unsigned int *)(result - 4);
  v3 = result + 32 * v2;
  if (!*(_DWORD *)(result - 12))
    return result + 32 * v2;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    while (1)
    {
      v5 = *(_DWORD *)(result + 8);
      if (*(_QWORD *)result)
        break;
      v6 = *(_DWORD *)(result + 12);
      if (v5 | v6)
        goto LABEL_11;
LABEL_9:
      result += 32;
      v4 -= 32;
      if (!v4)
        return v3;
    }
    v6 = *(_DWORD *)(result + 12);
LABEL_11:
    if (v5)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
      return result;
    goto LABEL_9;
  }
  return result;
}

uint64_t void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap &,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator() const(JSC::Operand)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = a2;
  if (result)
  {
    v2 = result;
    v3 = *(_DWORD *)(result - 8);
    v4 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v7) & v3;
    v5 = *(_QWORD *)(v2 + 16 * v4);
    if (v5 == v7)
    {
      return *(_BYTE *)(v2 + 16 * v4 + 8) & 1;
    }
    else
    {
      v6 = 1;
      while (v5)
      {
        v4 = ((_DWORD)v4 + v6) & v3;
        v5 = *(_QWORD *)(v2 + 16 * v4);
        ++v6;
        if (v5 == v7)
          return *(_BYTE *)(v2 + 16 * v4 + 8) & 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>::operator++(uint64_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  _DWORD *v6;
  BOOL v7;

  v2 = *result;
  v1 = (_DWORD *)result[1];
  v3 = *result + 32;
  *result = v3;
  if ((_DWORD *)v3 != v1)
  {
    v4 = (int *)(v2 + 44);
    do
    {
      if (*(_QWORD *)(v4 - 3))
      {
        v5 = *v4;
      }
      else
      {
        v5 = *v4;
        if (!*(_QWORD *)(v4 - 1))
          goto LABEL_5;
      }
      if (*(v4 - 1))
        v7 = 1;
      else
        v7 = v5 == 0;
      if (v7)
        return result;
LABEL_5:
      v6 = v4 + 5;
      *result = (uint64_t)(v4 + 5);
      v4 += 8;
    }
    while (v6 != v1);
  }
  return result;
}

void JSC::DFG::forAllKilledOperands<void JSC::DFG::forAllKilledNodesAtNodeIndex<JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2}>(JSC::DFG::Graph &,JSC::DFG::AvailabilityMap &,JSC::DFG::BasicBlock *,unsigned int,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::eliminateCandidatesThatInterfere(void)::{lambda(JSC::DFG::Node *)#2} const&)::{lambda(JSC::Operand)#1}::operator()(_QWORD **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;

  if (**a1 != a2)
  {
    v8 = a1[2];
    v9 = ~(_DWORD)a2;
    v10 = (_QWORD *)(2 * *v8);
    v11 = *v8 < 0 ? 63 : *v10;
    if (v11 <= v9)
      goto LABEL_11;
    v12 = v10 + 1;
    if (*v8 >= 0)
      v8 = v12;
    if (((*(unint64_t *)((char *)v8 + ((v9 >> 3) & 0x1FFFFFF8)) >> ~(_BYTE)a2) & 1) == 0)
LABEL_11:
  }
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  __int128 v66;
  __int16 v67;
  __int16 v68;
  uint64_t v69;

  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v62 = a4;
      v54 = a5;
      v58 = a6;
      v48 = WTF::fastMalloc((WTF *)0x10);
      a5 = v54;
      a6 = v58;
      a4 = v62;
      *(_QWORD *)v48 = v32;
      *(_DWORD *)(v48 + 8) = v33;
      v35 = 1;
      v32 = v48;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v12 = v32 | v35;
  }
  v13 = *(_QWORD *)(a5 + 8);
  if ((v13 & 1) != 0)
  {
    v36 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v37 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v49 = v36;
      v63 = a4;
      v55 = a5;
      v59 = a6;
      v36 = WTF::fastMalloc((WTF *)0x10);
      a5 = v55;
      a6 = v59;
      a4 = v63;
      *(_QWORD *)v36 = v49;
      *(_DWORD *)(v36 + 8) = v37;
      v39 = 1;
    }
    else
    {
      v39 = v36;
      v36 = v37 << 36;
    }
    v13 = v36 | v39;
  }
  v14 = *(_WORD *)(a5 + 16);
  v15 = v12;
  if ((v12 & 1) != 0)
  {
    v40 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v41 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v50 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v64 = a4;
      v60 = a6;
      v56 = *(_WORD *)(a5 + 16);
      v51 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v40 = WTF::fastMalloc((WTF *)0x10);
      v14 = v56;
      a6 = v60;
      a4 = v64;
      *(_QWORD *)v40 = v50;
      *(_DWORD *)(v40 + 8) = v51;
      v43 = 1;
    }
    else
    {
      v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v15 = v40 | v43;
  }
  *(_QWORD *)&v66 = v15;
  v16 = v13;
  if ((v13 & 1) != 0)
  {
    v44 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v45 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
        ? (v46 = (_DWORD)v45 == -1)
        : (v46 = 1),
          v46))
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v52 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v65 = a4;
      v61 = a6;
      v57 = v14;
      v53 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
      v44 = WTF::fastMalloc((WTF *)0x10);
      v14 = v57;
      a6 = v61;
      a4 = v65;
      *(_QWORD *)v44 = v52;
      *(_DWORD *)(v44 + 8) = v53;
      v47 = 1;
    }
    else
    {
      v47 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v16 = v44 | v47;
  }
  *((_QWORD *)&v66 + 1) = v16;
  v67 = v14;
  v69 = a6;
  v68 = a4;
  v24 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &>(v11 + 1032, &v68, (uint64_t)&v66, &v69, a5, a6, a7, a8);
  if ((BYTE8(v66) & 1) != 0 && (*((_QWORD *)&v66 + 1) & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*((_QWORD *)&v66 + 1) & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v66 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  *(_QWORD *)(v24 + 64) |= a3;
  *(_QWORD *)&v66 = a2;
  *((_QWORD *)&v66 + 1) = v24;
  v25 = (_QWORD *)(a1 + 8);
  v26 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v26 && *(_QWORD *)(*v25 + 16 * v26 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v66, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 16))
    {
      v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, (void *)(v26 + 1), (unint64_t)&v66, v19, v20, v21, v22, v23);
      v26 = *(unsigned int *)(a1 + 20);
      v27 = *(_QWORD *)(a1 + 8);
      v28 = *v31;
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 8);
      v28 = v66;
    }
    *(_OWORD *)(v27 + 16 * v26) = v28;
    ++*(_DWORD *)(a1 + 20);
  }
  v29 = *((_QWORD *)&v66 + 1);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  return v29;
}

uint64_t JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::transform(void)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ArgumentsArrayLength;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v9 = *(uint64_t **)a1;
  v11 = *(unsigned int **)(a1 + 8);
  v10 = *(uint64_t ***)(a1 + 16);
  v12 = *v11;
  v13 = *v10;
  v14 = **v10;
  if ((v14 & 1) != 0)
  {
    v25 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v26 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v41 = a2;
      v43 = v9;
      v39 = v12;
      v33 = v25;
      v34 = v26;
      v35 = WTF::fastMalloc((WTF *)0x10);
      v12 = v39;
      v25 = v35;
      a2 = v41;
      v9 = v43;
      *(_QWORD *)v25 = v33;
      *(_DWORD *)(v25 + 8) = v34;
      v28 = 1;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v14 = v25 | v28;
  }
  v45 = v14;
  v15 = v13[1];
  if ((v15 & 1) != 0)
  {
    v29 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v30 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v42 = a2;
      v44 = v9;
      v40 = v12;
      v36 = v29;
      v37 = v30;
      v38 = WTF::fastMalloc((WTF *)0x10);
      v12 = v40;
      v29 = v38;
      a2 = v42;
      v9 = v44;
      *(_QWORD *)v29 = v36;
      *(_DWORD *)(v29 + 8) = v37;
      v32 = 1;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v15 = v29 | v32;
  }
  v46 = v15;
  v47 = *((_WORD *)v13 + 8);
  ArgumentsArrayLength = JSC::DFG::emitCodeToGetArgumentsArrayLength(v9, a2, v12, (uint64_t)&v45, 0, a6, a7, a8);
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  return ArgumentsArrayLength;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;

  v7 = a4;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v29 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v50 = a7;
      v52 = v10;
      v42 = a3;
      v44 = a6;
      v46 = a5;
      v36 = v28;
      v37 = v29;
      v38 = WTF::fastMalloc((WTF *)0x10);
      a6 = v44;
      a5 = v46;
      a3 = v42;
      v7 = a4;
      v28 = v38;
      a7 = v50;
      v10 = v52;
      *(_QWORD *)v28 = v36;
      *(_DWORD *)(v28 + 8) = v37;
      v31 = 1;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v11 = v28 | v31;
  }
  v54 = v11;
  v12 = *(_QWORD *)(a5 + 8);
  if ((v12 & 1) != 0)
  {
    v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v51 = a7;
      v53 = v10;
      v43 = a3;
      v45 = a6;
      v49 = v7;
      v47 = a5;
      v39 = v32;
      v40 = v33;
      v41 = WTF::fastMalloc((WTF *)0x10);
      a6 = v45;
      a5 = v47;
      a3 = v43;
      v7 = v49;
      v32 = v41;
      a7 = v51;
      v10 = v53;
      *(_QWORD *)v32 = v39;
      *(_DWORD *)(v32 + 8) = v40;
      v35 = 1;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v12 = v32 | v35;
  }
  v55 = v12;
  v56 = *(_WORD *)(a5 + 16);
  v13 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>(v10, a3, v7, (uint64_t)&v54, a6, a7);
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = v13;
  v21 = (_QWORD *)(a1 + 8);
  v22 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v22 && *(_QWORD *)(*v21 + 16 * v22 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v57, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 16))
    {
      v27 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, (void *)(v22 + 1), (unint64_t)&v57, v16, v17, v18, v19, v20);
      v22 = *(unsigned int *)(a1 + 20);
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *v27;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 8);
      v24 = v57;
    }
    *(_OWORD *)(v23 + 16 * v22) = v24;
    ++*(_DWORD *)(a1 + 20);
  }
  v25 = *((_QWORD *)&v57 + 1);
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  return v25;
}

uint64_t JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;

  v7 = a4;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v28 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v29 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v50 = a7;
      v52 = v10;
      v42 = a3;
      v44 = a6;
      v46 = a5;
      v36 = v28;
      v37 = v29;
      v38 = WTF::fastMalloc((WTF *)0x10);
      a6 = v44;
      a5 = v46;
      a3 = v42;
      v7 = a4;
      v28 = v38;
      a7 = v50;
      v10 = v52;
      *(_QWORD *)v28 = v36;
      *(_DWORD *)(v28 + 8) = v37;
      v31 = 1;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v11 = v28 | v31;
  }
  v54 = v11;
  v12 = *(_QWORD *)(a5 + 8);
  if ((v12 & 1) != 0)
  {
    v32 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v33 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v51 = a7;
      v53 = v10;
      v43 = a3;
      v45 = a6;
      v49 = v7;
      v47 = a5;
      v39 = v32;
      v40 = v33;
      v41 = WTF::fastMalloc((WTF *)0x10);
      a6 = v45;
      a5 = v47;
      a3 = v43;
      v7 = v49;
      v32 = v41;
      a7 = v51;
      v10 = v53;
      *(_QWORD *)v32 = v39;
      *(_DWORD *)(v32 + 8) = v40;
      v35 = 1;
    }
    else
    {
      v35 = v32;
      v32 = v33 << 36;
    }
    v12 = v32 | v35;
  }
  v55 = v12;
  v56 = *(_WORD *)(a5 + 16);
  v13 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v10, a3, v7, (uint64_t)&v54, a6, a7);
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = v13;
  v21 = (_QWORD *)(a1 + 8);
  v22 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v22 && *(_QWORD *)(*v21 + 16 * v22 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow(a1, (unint64_t *)&v57, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 16))
    {
      v27 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, (void *)(v22 + 1), (unint64_t)&v57, v16, v17, v18, v19, v20);
      v22 = *(unsigned int *)(a1 + 20);
      v23 = *(_QWORD *)(a1 + 8);
      v24 = *v27;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 8);
      v24 = v57;
    }
    *(_OWORD *)(v23 + 16 * v22) = v24;
    ++*(_DWORD *)(a1 + 20);
  }
  v25 = *((_QWORD *)&v57 + 1);
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
  return v25;
}

uint64_t JSC::DFG::NodeOrigin::withExitOK@<X0>(uint64_t this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;

  v3 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v5 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v6 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v6 != 0x3FFFFFFF)
        ? (v7 = (_DWORD)v6 == -1)
        : (v7 = 1),
          v7))
    {
      v8 = 2;
    }
    else if (v6 >> 28)
    {
      v23 = this;
      v21 = a2;
      v19 = a3;
      v13 = v5;
      v14 = v6;
      v15 = WTF::fastMalloc((WTF *)0x10);
      a3 = v19;
      a2 = v21;
      v5 = v15;
      this = v23;
      *(_QWORD *)v5 = v13;
      *(_DWORD *)(v5 + 8) = v14;
      v8 = 1;
    }
    else
    {
      v8 = v5;
      v5 = v6 << 36;
    }
    v3 = v5 | v8;
  }
  *(_QWORD *)a3 = v3;
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) != 0)
  {
    v9 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v10 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
        ? (v11 = (_DWORD)v10 == -1)
        : (v11 = 1),
          v11))
    {
      v12 = 2;
    }
    else if (v10 >> 28)
    {
      v24 = this;
      v22 = a2;
      v20 = a3;
      v16 = v9;
      v17 = v10;
      v18 = WTF::fastMalloc((WTF *)0x10);
      a3 = v20;
      a2 = v22;
      v9 = v18;
      this = v24;
      *(_QWORD *)v9 = v16;
      *(_DWORD *)(v9 + 8) = v17;
      v12 = 1;
    }
    else
    {
      v12 = v9;
      v9 = v10 << 36;
    }
    v4 = v9 | v12;
  }
  *(_QWORD *)(a3 + 8) = v4;
  *(_WORD *)(a3 + 16) = *(_WORD *)(this + 16);
  *(_BYTE *)(a3 + 16) = a2;
  return this;
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::transform(void)::{lambda(JSC::DFG::Node *,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;

  v5 = (***(_DWORD ***)a1 + a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v9 = WTF::fastMalloc((WTF *)0x18);
  v10 = v5 | ((unint64_t)(v5 >> 31) << 32);
  *(_QWORD *)v9 = v10;
  *(_DWORD *)(v9 + 8) = 0x3FFFFFFF;
  *(_BYTE *)(v9 + 12) = 6;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 592);
  *(_QWORD *)(v6 + 592) = v9;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = **(unsigned int **)(a1 + 24);
  v13 = *(_BYTE **)(a1 + 40);
  v14 = **(_QWORD **)(a1 + 32);
  v15 = *(unsigned __int8 *)(v14 + 16);
  v16 = *v13;
  *v13 = 0;
  if (v15)
    v17 = v16 == 0;
  else
    v17 = 1;
  v18 = !v17;
  v19 = *(_QWORD *)v14;
  if ((*(_QWORD *)v14 & 1) != 0)
  {
    v59 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v60 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v60 != 0x3FFFFFFF)
        ? (v61 = (_DWORD)v60 == -1)
        : (v61 = 1),
          v61))
    {
      v62 = 2;
    }
    else if (v60 >> 28)
    {
      v95 = v12;
      v99 = v11;
      v109 = v14;
      v103 = v18;
      v79 = v59;
      v80 = v60;
      v81 = WTF::fastMalloc((WTF *)0x10);
      v12 = v95;
      v11 = v99;
      *(_QWORD *)v81 = v79;
      *(_DWORD *)(v81 + 8) = v80;
      v62 = 1;
      v59 = v81;
      v18 = v103;
      v14 = v109;
    }
    else
    {
      v62 = v59;
      v59 = v60 << 36;
    }
    v19 = v59 | v62;
  }
  v123 = v19;
  v20 = *(_QWORD *)(v14 + 8);
  if ((v20 & 1) != 0)
  {
    v63 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v64 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
        ? (v65 = (_DWORD)v64 == -1)
        : (v65 = 1),
          v65))
    {
      v66 = 2;
    }
    else if (v64 >> 28)
    {
      v96 = v12;
      v100 = v11;
      v110 = v14;
      v104 = v18;
      v82 = v63;
      v83 = v64;
      v84 = WTF::fastMalloc((WTF *)0x10);
      v12 = v96;
      v11 = v100;
      *(_QWORD *)v84 = v82;
      *(_DWORD *)(v84 + 8) = v83;
      v66 = 1;
      v63 = v84;
      v18 = v104;
      v14 = v110;
    }
    else
    {
      v66 = v63;
      v63 = v64 << 36;
    }
    v20 = v63 | v66;
  }
  v124 = v20;
  v126 = HIBYTE(*(_WORD *)(v14 + 16));
  v125 = v18;
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v11, v12, 0, 18, (uint64_t)&v123, v10, v7, v8);
  if ((v124 & 1) != 0 && (v124 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v124 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  if ((v123 & 1) != 0 && (v123 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v123 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = **(unsigned int **)(a1 + 24);
  v30 = *(_BYTE **)(a1 + 40);
  v31 = **(_QWORD **)(a1 + 32);
  v32 = *(unsigned __int8 *)(v31 + 16);
  v33 = *v30;
  *v30 = 0;
  if (v32)
    v34 = v33 == 0;
  else
    v34 = 1;
  v35 = !v34;
  v36 = *(_QWORD *)v31;
  if ((*(_QWORD *)v31 & 1) != 0)
  {
    v67 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || (v68 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v68 == 0x3FFFFFFF)
      || (_DWORD)v68 == -1)
    {
      v69 = 2;
    }
    else if (v68 >> 28)
    {
      v97 = v29;
      v101 = v28;
      v111 = v31;
      v105 = v35;
      v85 = v67;
      v86 = v68;
      v87 = WTF::fastMalloc((WTF *)0x10);
      v29 = v97;
      v28 = v101;
      *(_QWORD *)v87 = v85;
      *(_DWORD *)(v87 + 8) = v86;
      v69 = 1;
      v67 = v87;
      v35 = v105;
      v31 = v111;
    }
    else
    {
      v69 = v67;
      v67 = v68 << 36;
    }
    v36 = v67 | v69;
  }
  v119 = v36;
  v37 = *(_QWORD *)(v31 + 8);
  if ((v37 & 1) != 0)
  {
    v70 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || (v71 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v71 == 0x3FFFFFFF)
      || (_DWORD)v71 == -1)
    {
      v72 = 2;
    }
    else if (v71 >> 28)
    {
      v98 = v29;
      v102 = v28;
      v112 = v31;
      v106 = v35;
      v88 = v70;
      v89 = v71;
      v90 = WTF::fastMalloc((WTF *)0x10);
      v29 = v98;
      v28 = v102;
      *(_QWORD *)v90 = v88;
      *(_DWORD *)(v90 + 8) = v89;
      v72 = 1;
      v70 = v90;
      v35 = v106;
      v31 = v112;
    }
    else
    {
      v72 = v70;
      v70 = v71 << 36;
    }
    v37 = v70 | v72;
  }
  v120 = v37;
  v122 = HIBYTE(*(_WORD *)(v31 + 16));
  v121 = v35;
  v38 = a2 & 0xFF00FFFFFFFFFFFFLL;
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v28, v29, 0, 0x14u, (uint64_t)&v119, v10, v38);
  if ((v120 & 1) != 0 && (v120 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v120 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if ((v119 & 1) != 0 && (v119 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v119 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  v46 = *(_QWORD *)(a1 + 16);
  v47 = **(unsigned int **)(a1 + 24);
  v48 = **(_QWORD **)(a1 + 32);
  v49 = **(_BYTE **)(a1 + 40);
  v50 = *(_QWORD *)v48;
  if ((*(_QWORD *)v48 & 1) != 0)
  {
    v73 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
    if ((v50 & 2) != 0
      || (v74 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v74 == 0x3FFFFFFF)
      || (_DWORD)v74 == -1)
    {
      v75 = 2;
    }
    else if (v74 >> 28)
    {
      v91 = v73;
      v107 = v48;
      v113 = v47;
      v92 = v74;
      v73 = WTF::fastMalloc((WTF *)0x10);
      v48 = v107;
      v47 = v113;
      *(_QWORD *)v73 = v91;
      *(_DWORD *)(v73 + 8) = v92;
      v75 = 1;
    }
    else
    {
      v75 = v73;
      v73 = v74 << 36;
    }
    v50 = v73 | v75;
  }
  v115 = v50;
  v51 = *(_QWORD *)(v48 + 8);
  if ((v51 & 1) != 0)
  {
    v76 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
    if ((v51 & 2) != 0
      || (v77 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v77 == 0x3FFFFFFF)
      || (_DWORD)v77 == -1)
    {
      v78 = 2;
    }
    else if (v77 >> 28)
    {
      v93 = v76;
      v108 = v48;
      v114 = v47;
      v94 = v77;
      v76 = WTF::fastMalloc((WTF *)0x10);
      v48 = v108;
      v47 = v114;
      *(_QWORD *)v76 = v93;
      *(_DWORD *)(v76 + 8) = v94;
      v78 = 1;
    }
    else
    {
      v78 = v76;
      v76 = v77 << 36;
    }
    v51 = v76 | v78;
  }
  v116 = v51;
  v118 = HIBYTE(*(_WORD *)(v48 + 16));
  v117 = v49;
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v46, v47, 0, 0x11u, (uint64_t)&v115, v9, v38);
  if ((v116 & 1) != 0 && (v116 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v116 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
  if ((v115 & 1) != 0 && (v115 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v115 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
}

void JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::transform(void)::{lambda(unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inserted;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char v154;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(uint64_t **)a1;
  v12 = **(unsigned int **)(a1 + 8);
  v13 = **(_QWORD **)(a1 + 16);
  v14 = **(_BYTE **)(a1 + 24);
  v15 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) != 0)
  {
    v79 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v80 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v107 = v79;
      v131 = v14;
      v123 = v13;
      v108 = v80;
      v79 = WTF::fastMalloc((WTF *)0x10);
      v13 = v123;
      v14 = v131;
      *(_QWORD *)v79 = v107;
      *(_DWORD *)(v79 + 8) = v108;
      v82 = 1;
    }
    else
    {
      v82 = v79;
      v79 = v80 << 36;
    }
    v15 = v79 | v82;
  }
  v151 = v15;
  v16 = *(_QWORD *)(v13 + 8);
  if ((v16 & 1) != 0)
  {
    v83 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v84 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v109 = v83;
      v132 = v14;
      v124 = v13;
      v110 = v84;
      v83 = WTF::fastMalloc((WTF *)0x10);
      v13 = v124;
      v14 = v132;
      *(_QWORD *)v83 = v109;
      *(_DWORD *)(v83 + 8) = v110;
      v86 = 1;
    }
    else
    {
      v86 = v83;
      v83 = v84 << 36;
    }
    v16 = v83 | v86;
  }
  v152 = v16;
  v154 = HIBYTE(*(_WORD *)(v13 + 16));
  v153 = v14;
  if ((a2 & 0x80000000) != 0)
    v17 = COERCE__INT64((double)a2) + 0x2000000000000;
  else
    v17 = a2 | 0xFFFE000000000000;
  inserted = JSC::DFG::InsertionSet::insertConstant(v11, v12, (uint64_t)&v151, v17, 0, a6, a7, a8);
  if ((v152 & 1) != 0 && (v152 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v152 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  if ((v151 & 1) != 0 && (v151 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v151 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)a1;
  v27 = **(unsigned int **)(a1 + 8);
  v28 = *(_BYTE **)(a1 + 24);
  v29 = **(_QWORD **)(a1 + 16);
  v30 = *(unsigned __int8 *)(v29 + 16);
  v31 = *v28;
  *v28 = 0;
  if (v30)
    v32 = v31 == 0;
  else
    v32 = 1;
  v33 = !v32;
  v34 = *(_QWORD *)v29;
  if ((*(_QWORD *)v29 & 1) != 0)
  {
    v87 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
    if ((v34 & 2) != 0
      || ((v88 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v111 = v87;
      v133 = v29;
      v125 = v33;
      v112 = v88;
      v87 = WTF::fastMalloc((WTF *)0x10);
      v33 = v125;
      v29 = v133;
      *(_QWORD *)v87 = v111;
      *(_DWORD *)(v87 + 8) = v112;
      v90 = 1;
    }
    else
    {
      v90 = v87;
      v87 = v88 << 36;
    }
    v34 = v87 | v90;
  }
  v147 = v34;
  v35 = *(_QWORD *)(v29 + 8);
  if ((v35 & 1) != 0)
  {
    v91 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v92 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v113 = v91;
      v134 = v29;
      v126 = v33;
      v114 = v92;
      v91 = WTF::fastMalloc((WTF *)0x10);
      v33 = v126;
      v29 = v134;
      *(_QWORD *)v91 = v113;
      *(_DWORD *)(v91 + 8) = v114;
      v94 = 1;
    }
    else
    {
      v94 = v91;
      v91 = v92 << 36;
    }
    v35 = v91 | v94;
  }
  v148 = v35;
  v150 = HIBYTE(*(_WORD *)(v29 + 16));
  v149 = v33;
  v36 = *(unsigned int *)(**(_QWORD **)(a1 + 32) + 4);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v26, v27, 0, 18, (uint64_t)&v147, v36 & 0xFFFFFFFEFFFFFFFFLL | (((v36 >> 31) & 1) << 32), v23, v24);
  if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v148 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v147 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  v44 = *(_QWORD *)a1;
  v45 = **(unsigned int **)(a1 + 8);
  v46 = *(_BYTE **)(a1 + 24);
  v47 = **(_QWORD **)(a1 + 16);
  v48 = *(unsigned __int8 *)(v47 + 16);
  v49 = *v46;
  *v46 = 0;
  if (v48)
    v50 = v49 == 0;
  else
    v50 = 1;
  v51 = !v50;
  v52 = *(_QWORD *)v47;
  if ((*(_QWORD *)v47 & 1) != 0)
  {
    v95 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    if ((v52 & 2) != 0
      || (v96 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v96 == 0x3FFFFFFF)
      || (_DWORD)v96 == -1)
    {
      v97 = 2;
    }
    else if (v96 >> 28)
    {
      v115 = v95;
      v135 = v47;
      v127 = v51;
      v116 = v96;
      v95 = WTF::fastMalloc((WTF *)0x10);
      v51 = v127;
      v47 = v135;
      *(_QWORD *)v95 = v115;
      *(_DWORD *)(v95 + 8) = v116;
      v97 = 1;
    }
    else
    {
      v97 = v95;
      v95 = v96 << 36;
    }
    v52 = v95 | v97;
  }
  v143 = v52;
  v53 = *(_QWORD *)(v47 + 8);
  if ((v53 & 1) != 0)
  {
    v98 = *(_QWORD *)(v53 & 0xFFFFFFFF8);
    if ((v53 & 2) != 0
      || (v99 = *(unsigned int *)((v53 & 0xFFFFFFFF8) + 8), (_DWORD)v99 == 0x3FFFFFFF)
      || (_DWORD)v99 == -1)
    {
      v100 = 2;
    }
    else if (v99 >> 28)
    {
      v117 = v98;
      v136 = v47;
      v128 = v51;
      v118 = v99;
      v98 = WTF::fastMalloc((WTF *)0x10);
      v51 = v128;
      v47 = v136;
      *(_QWORD *)v98 = v117;
      *(_DWORD *)(v98 + 8) = v118;
      v100 = 1;
    }
    else
    {
      v100 = v98;
      v98 = v99 << 36;
    }
    v53 = v98 | v100;
  }
  v144 = v53;
  v146 = HIBYTE(*(_WORD *)(v47 + 16));
  v145 = v51;
  v54 = *(unsigned int *)(**(_QWORD **)(a1 + 32) + 4);
  v55 = inserted & 0xFF00FFFFFFFFFFFFLL;
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v44, v45, 0, 0x14u, (uint64_t)&v143, v54 & 0xFFFFFFFEFFFFFFFFLL | (((v54 >> 31) & 1) << 32), v55);
  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v144 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  if ((v143 & 1) != 0 && (v143 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  v63 = *(_QWORD *)a1;
  v64 = **(unsigned int **)(a1 + 8);
  v65 = **(_QWORD **)(a1 + 16);
  v66 = **(_BYTE **)(a1 + 24);
  v67 = *(_QWORD *)v65;
  if ((*(_QWORD *)v65 & 1) != 0)
  {
    v101 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
    if ((v67 & 2) != 0
      || (v102 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v102 == 0x3FFFFFFF)
      || (_DWORD)v102 == -1)
    {
      v103 = 2;
    }
    else if (v102 >> 28)
    {
      v119 = v101;
      v137 = **(_BYTE **)(a1 + 24);
      v129 = **(_QWORD **)(a1 + 16);
      v120 = v102;
      v101 = WTF::fastMalloc((WTF *)0x10);
      v65 = v129;
      v66 = v137;
      *(_QWORD *)v101 = v119;
      *(_DWORD *)(v101 + 8) = v120;
      v103 = 1;
    }
    else
    {
      v103 = v101;
      v101 = v102 << 36;
    }
    v67 = v101 | v103;
  }
  v139 = v67;
  v68 = *(_QWORD *)(v65 + 8);
  if ((v68 & 1) != 0)
  {
    v104 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
    if ((v68 & 2) != 0
      || (v105 = *(unsigned int *)((v68 & 0xFFFFFFFF8) + 8), (_DWORD)v105 == 0x3FFFFFFF)
      || (_DWORD)v105 == -1)
    {
      v106 = 2;
    }
    else if (v105 >> 28)
    {
      v121 = v104;
      v138 = v66;
      v130 = v65;
      v122 = v105;
      v104 = WTF::fastMalloc((WTF *)0x10);
      v65 = v130;
      v66 = v138;
      *(_QWORD *)v104 = v121;
      *(_DWORD *)(v104 + 8) = v122;
      v106 = 1;
    }
    else
    {
      v106 = v104;
      v104 = v105 << 36;
    }
    v68 = v104 | v106;
  }
  v140 = v68;
  v142 = HIBYTE(*(_WORD *)(v65 + 16));
  v141 = v66;
  v69 = *(_QWORD *)(v10 + 32);
  v70 = **(_QWORD **)(a1 + 32);
  v71 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v71 = *(unsigned int *)(v70 + 4) | ((((unint64_t)*(unsigned int *)(v70 + 4) >> 31) & 1) << 32);
  *(_DWORD *)(v71 + 8) = 0x3FFFFFFF;
  *(_BYTE *)(v71 + 12) = 1;
  *(_QWORD *)(v71 + 16) = 0;
  *(_QWORD *)(v71 + 16) = *(_QWORD *)(v69 + 592);
  *(_QWORD *)(v69 + 592) = v71;
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(v63, v64, 0, 0x11u, (uint64_t)&v139, v71, v55 | 0x8000000000000);
  if ((v140 & 1) != 0 && (v140 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v140 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
  if ((v139 & 1) != 0 && (v139 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v139 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
}

uint64_t JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::transform(void)::{lambda(WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(_QWORD *)(*(_QWORD *)result + 32);
  v12 = **(_QWORD **)(result + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = *(_DWORD *)(v11 + 160);
  v15 = *(unsigned int *)(v11 + 164);
  if ((_DWORD)v15 == v14)
  {
    result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v11 + 152, (unint64_t)v13, a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(v10 + 32);
    v12 = **(_QWORD **)(v9 + 8);
    v14 = *(_DWORD *)(v11 + 160);
    v16 = *(_DWORD *)(v11 + 164);
  }
  else
  {
    v16 = v15 + 1;
    *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v15) = *v13;
    *(_DWORD *)(v11 + 164) = v15 + 1;
  }
  v17 = (_QWORD *)(v12 + 32);
  if (v16 == v14)
  {
    result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v11 + 152, (unint64_t)v17, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v16) = *v17;
    *(_DWORD *)(v11 + 164) = v16 + 1;
  }
  v18 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v18)
  {
    v24 = *(_QWORD **)a2;
    v25 = 8 * v18;
    do
    {
      v26 = *(_QWORD *)(v10 + 32);
      v27 = *v24 & 0xFF00FFFFFFFFFFFFLL;
      v29 = v27;
      v28 = *(unsigned int *)(v26 + 164);
      if ((_DWORD)v28 == *(_DWORD *)(v26 + 160))
      {
        result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v26 + 152, (unint64_t)&v29, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v26 + 152) + 8 * v28) = v27;
        *(_DWORD *)(v26 + 164) = v28 + 1;
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v19 = **(_QWORD **)(v9 + 8);
  v20 = *(unsigned __int16 *)(v19 + 18);
  if (v20 <= 0xF6)
  {
    if (v20 == 245)
    {
      v21 = 25;
      v22 = 241;
      goto LABEL_9;
    }
  }
  else
  {
    switch(v20)
    {
      case 0xF7u:
        v21 = 25;
        v22 = 243;
LABEL_9:
        *(_WORD *)(v19 + 18) = v22;
        *(_DWORD *)(v19 + 56) = v21;
        v23 = (*(_DWORD *)(*(_QWORD *)(v10 + 32) + 164) - v15);
        *(_QWORD *)(v19 + 24) = v15;
        *(_QWORD *)(v19 + 32) = v23;
        *(_QWORD *)(v19 + 40) = 0;
        return result;
      case 0xFBu:
        v21 = 25;
        v22 = 249;
        goto LABEL_9;
      case 0x173u:
        v21 = 24;
        v22 = 369;
        goto LABEL_9;
    }
  }
  result = 1222;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::ArgumentsEliminationPhase::transform(void)::{lambda(void)#1}::operator()(uint64_t result)
{
  unsigned int v1;
  int v2;
  __int16 v3;

  v1 = *(unsigned __int16 *)(result + 18);
  if (v1 > 0xF6)
  {
    switch(v1)
    {
      case 0xF7u:
        v2 = 9;
        v3 = 248;
        goto LABEL_4;
      case 0x173u:
        v2 = 8;
        v3 = 372;
        goto LABEL_4;
      case 0xFBu:
        v2 = 9;
        v3 = 252;
        goto LABEL_4;
    }
  }
  else if (v1 == 245)
  {
    v2 = 9;
    v3 = 246;
LABEL_4:
    *(_WORD *)(result + 18) = v3;
    *(_DWORD *)(result + 56) = v2;
    return result;
  }
  result = 1244;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;

  v9 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v20 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v21 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v38 = a1;
      v36 = a3;
      v34 = a4;
      v28 = v21;
      v29 = WTF::fastMalloc((WTF *)0x10);
      a4 = v34;
      a3 = v36;
      v30 = v29;
      a1 = v38;
      *(_QWORD *)v30 = v20;
      *(_DWORD *)(v30 + 8) = v28;
      v23 = 1;
      v20 = v30;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v9 = v20 | v23;
  }
  v40 = v9;
  v10 = *(_QWORD *)(a4 + 8);
  if ((v10 & 1) != 0)
  {
    v24 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v25 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v39 = a1;
      v37 = a3;
      v35 = a4;
      v31 = v25;
      v32 = WTF::fastMalloc((WTF *)0x10);
      a4 = v35;
      a3 = v37;
      v33 = v32;
      a1 = v39;
      *(_QWORD *)v33 = v24;
      *(_DWORD *)(v33 + 8) = v31;
      v27 = 1;
      v24 = v33;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v10 = v24 | v27;
  }
  v41 = v10;
  v42 = *(_WORD *)(a4 + 16);
  v43 = a3;
  v18 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &>(a1 + 1032, &v43, (uint64_t)&v40, a4, a5, a6, a7, a8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(v18 + 64) |= a2;
  return v18;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t casual;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v12)
    goto LABEL_83;
  v13 = (_BYTE *)(v12 + 9408);
  *(_BYTE *)(v12 + 9408) = 1;
  v14 = *(unsigned int *)(v12 + 9424);
  if (!(_DWORD)v14)
  {
    v28 = *(_QWORD *)(v12 + 9448);
    v29 = *(_QWORD *)(v12 + 9432);
    if (v28)
    {
LABEL_17:
      v30 = __clz(v28);
      *(_QWORD *)(v12 + 9448) = v28 & ~(0x8000000000000000 >> v30);
      casual = v29 + 16 * v30;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v12 + 9413) == 6)
    {
      v53 = *(_DWORD *)(v12 + 9444);
      v54 = *(unsigned int *)(v12 + 9440);
      if (v54 < v53)
      {
        *(_QWORD *)&v13[8 * v54 + 56] = 0;
        v55 = (unint64_t *)(v12 + 8 * v54 + 9472);
        v56 = v53 - 1 - v54;
        while (v56)
        {
          v29 += 1024;
          v58 = *v55++;
          v57 = v58;
          LODWORD(v54) = v54 + 1;
          --v56;
          if (v58)
          {
            v28 = __rbit64(v57);
            *(_DWORD *)(v12 + 9440) = v54;
            *(_QWORD *)(v12 + 9432) = v29;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v12 + 9440) = v53;
      }
    }
    *v13 = 0;
LABEL_83:
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_5;
  }
  *(_DWORD *)(v12 + 9424) = v14 - *(_DWORD *)(v12 + 9428);
  casual = *(_QWORD *)(v12 + 9416) - v14;
LABEL_4:
  *v13 = 0;
LABEL_5:
  v16 = *a2;
  v17 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v37 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v38 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v38 != 0x3FFFFFFF)
        ? (v39 = (_DWORD)v38 == -1)
        : (v39 = 1),
          v39))
    {
      v40 = 2;
    }
    else if (v38 >> 28)
    {
      v59 = v16;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v16 = v59;
      *(_QWORD *)v60 = v37;
      *(_DWORD *)(v60 + 8) = v38;
      v40 = 1;
      v37 = v60;
    }
    else
    {
      v40 = v37;
      v37 = v38 << 36;
    }
    v17 = v37 | v40;
  }
  v18 = *(_QWORD *)(a3 + 8);
  if ((v18 & 1) != 0)
  {
    v41 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v42 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
        ? (v43 = (_DWORD)v42 == -1)
        : (v43 = 1),
          v43))
    {
      v44 = 2;
    }
    else if (v42 >> 28)
    {
      v61 = v41;
      v62 = v16;
      v41 = WTF::fastMalloc((WTF *)0x10);
      v16 = v62;
      *(_QWORD *)v41 = v61;
      *(_DWORD *)(v41 + 8) = v42;
      v44 = 1;
    }
    else
    {
      v44 = v41;
      v41 = v42 << 36;
    }
    v18 = v41 | v44;
  }
  v19 = (unsigned __int16)v16;
  v20 = *(_WORD *)(a3 + 16);
  v21 = *a4;
  v22 = v17;
  if ((v17 & 1) != 0)
  {
    v45 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v46 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v46 != 0x3FFFFFFF)
        ? (v47 = (_DWORD)v46 == -1)
        : (v47 = 1),
          v47))
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v63 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v67 = v16;
      v64 = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8);
      v45 = WTF::fastMalloc((WTF *)0x10);
      v16 = v67;
      *(_QWORD *)v45 = v63;
      *(_DWORD *)(v45 + 8) = v64;
      v48 = 1;
    }
    else
    {
      v48 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v45 = v46 << 36;
    }
    v22 = v45 | v48;
  }
  *(_QWORD *)casual = v22;
  v23 = v18;
  if ((v18 & 1) != 0)
  {
    v49 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v50 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v50 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else if (v50 >> 28)
    {
      v65 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v68 = v16;
      v66 = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
      v49 = WTF::fastMalloc((WTF *)0x10);
      v16 = v68;
      *(_QWORD *)v49 = v65;
      *(_DWORD *)(v49 + 8) = v66;
      v52 = 1;
    }
    else
    {
      v52 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v49 = v50 << 36;
    }
    v23 = v49 | v52;
  }
  *(_QWORD *)(casual + 8) = v23;
  *(_WORD *)(casual + 16) = v20;
  *(_DWORD *)(casual + 20) = -1;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 40) = 0;
  *(_QWORD *)(casual + 24) = v21;
  *(_QWORD *)(casual + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(casual + 56) = 0;
  *(_OWORD *)(casual + 64) = 0u;
  *(_OWORD *)(casual + 80) = 0u;
  *(_QWORD *)(casual + 96) = 0;
  *(_WORD *)(casual + 18) = v19;
  if (v19 >= 0x1B1)
    goto LABEL_89;
  *(_DWORD *)(casual + 56) = dword_199154630[v16];
  v24 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24 - 8);
    *(_DWORD *)(a1 + 28) = v24 - 1;
    v26 = *(_QWORD **)a1;
    goto LABEL_13;
  }
  v25 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v25 != *(_DWORD *)(a1 + 8))
  {
    v26 = *(_QWORD **)a1;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
    *(_DWORD *)(a1 + 12) = v25 + 1;
    goto LABEL_13;
  }
  v31 = v25 + (v25 >> 2);
  v32 = v31 >= 0x10 ? v31 + 1 : 16;
  v33 = v32 <= v25 + 1 ? v25 + 1 : v32;
  if (v33 >> 29)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x1982E7248);
  }
  v34 = *(_QWORD **)a1;
  v35 = (void *)WTF::fastMalloc((WTF *)(8 * v33));
  *(_DWORD *)(a1 + 8) = v33;
  *(_QWORD *)a1 = v35;
  memcpy(v35, v34, 8 * v25);
  if (v34)
  {
    if (*(_QWORD **)a1 == v34)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v34, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v36 = *(unsigned int *)(a1 + 12);
  v26 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = 0;
  *(_DWORD *)(a1 + 12) = v36 + 1;
LABEL_13:
  *(_DWORD *)(casual + 20) = v25;
  v26[v25] = casual;
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v18 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  return casual;
}

uint64_t JSC::DFG::Node::Node(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v9 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v32 = result;
      v28 = a5;
      v30 = a2;
      v22 = a4;
      v24 = a6;
      v26 = a3;
      v16 = v8;
      v17 = v9;
      v18 = WTF::fastMalloc((WTF *)0x10);
      a3 = v26;
      a5 = v28;
      a4 = v22;
      a6 = v24;
      a2 = v30;
      v8 = v18;
      result = v32;
      *(_QWORD *)v8 = v16;
      *(_DWORD *)(v8 + 8) = v17;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v6 = v8 | v11;
  }
  *(_QWORD *)result = v6;
  v7 = *(_QWORD *)(a3 + 8);
  if ((v7 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v13 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v13 != 0x3FFFFFFF)
        ? (v14 = (_DWORD)v13 == -1)
        : (v14 = 1),
          v14))
    {
      v15 = 2;
    }
    else if (v13 >> 28)
    {
      v33 = result;
      v29 = a5;
      v31 = a2;
      v23 = a4;
      v25 = a6;
      v27 = a3;
      v19 = v12;
      v20 = v13;
      v21 = WTF::fastMalloc((WTF *)0x10);
      a3 = v27;
      a5 = v29;
      a4 = v23;
      a6 = v25;
      a2 = v31;
      v12 = v21;
      result = v33;
      *(_QWORD *)v12 = v19;
      *(_DWORD *)(v12 + 8) = v20;
      v15 = 1;
    }
    else
    {
      v15 = v12;
      v12 = v13 << 36;
    }
    v7 = v12 | v15;
  }
  *(_QWORD *)(result + 8) = v7;
  *(_WORD *)(result + 16) = *(_WORD *)(a3 + 16);
  *(_DWORD *)(result + 20) = -1;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 40) = a6;
  *(_QWORD *)(result + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_QWORD *)(result + 96) = 0;
  *(_WORD *)(result + 18) = a2;
  if (a2 >= 0x1B1)
  {
    __break(0xC471u);
    JUMPOUT(0x1982E7414);
  }
  *(_DWORD *)(result + 56) = dword_199154630[(__int16)a2];
  return result;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge,JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v7 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v18 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v19 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v38 = a6;
      v40 = a1;
      v32 = a4;
      v34 = a5;
      v36 = a3;
      v26 = v19;
      v27 = WTF::fastMalloc((WTF *)0x10);
      a4 = v32;
      a5 = v34;
      a3 = v36;
      v28 = v27;
      a6 = v38;
      a1 = v40;
      *(_QWORD *)v28 = v18;
      *(_DWORD *)(v28 + 8) = v26;
      v21 = 1;
      v18 = v28;
    }
    else
    {
      v21 = v18;
      v18 = v19 << 36;
    }
    v7 = v18 | v21;
  }
  v42 = v7;
  v8 = *(_QWORD *)(a4 + 8);
  if ((v8 & 1) != 0)
  {
    v22 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v23 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v39 = a6;
      v41 = a1;
      v33 = a4;
      v35 = a5;
      v37 = a3;
      v29 = v23;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a4 = v33;
      a5 = v35;
      a3 = v37;
      v31 = v30;
      a6 = v39;
      a1 = v41;
      *(_QWORD *)v31 = v22;
      *(_DWORD *)(v31 + 8) = v29;
      v25 = 1;
      v22 = v31;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v8 = v22 | v25;
  }
  v43 = v8;
  v44 = *(_WORD *)(a4 + 16);
  v46 = a6;
  v47 = a5;
  v45 = a3;
  v16 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &>(a1 + 1032, &v45, (uint64_t)&v42, &v47, &v46);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(v16 + 64) |= a2;
  return v16;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &,JSC::DFG::Edge &>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v10 = WTF::fastMalloc((WTF *)0x68);
  v11 = *a2;
  v12 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v43 = v11;
      v39 = v32;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v11 = v43;
      *(_QWORD *)v40 = v31;
      *(_DWORD *)(v40 + 8) = v39;
      v34 = 1;
      v31 = v40;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v12 = v31 | v34;
  }
  v45 = v12;
  v13 = *(_QWORD *)(a3 + 8);
  if ((v13 & 1) != 0)
  {
    v35 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v36 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v44 = v11;
      v41 = v36;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      *(_QWORD *)v42 = v35;
      *(_DWORD *)(v42 + 8) = v41;
      v38 = 1;
      v35 = v42;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v13 = v35 | v38;
  }
  v46 = v13;
  v47 = *(_WORD *)(a3 + 16);
  result = JSC::DFG::Node::Node(v10, v11, (uint64_t)&v45, *a4, *a5, 0);
  v22 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v22 - 8);
    *(_DWORD *)(a1 + 28) = v22 - 1;
    v24 = *(_QWORD **)a1;
  }
  else
  {
    v23 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
    {
      v25 = v23 + (v23 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v23 + 1)
        v27 = v23 + 1;
      else
        v27 = v26;
      if (v27 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v28 = *(_QWORD **)a1;
      v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
      *(_DWORD *)(a1 + 8) = v27;
      *(_QWORD *)a1 = v29;
      memcpy(v29, v28, 8 * v23);
      if (v28)
      {
        if (*(_QWORD **)a1 == v28)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v28, v15, v16, v17, v18, v19, v20, v21);
      }
      v30 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = 0;
      *(_DWORD *)(a1 + 12) = v30 + 1;
    }
    else
    {
      v24 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = 0;
      *(_DWORD *)(a1 + 12) = v23 + 1;
    }
  }
  *(_DWORD *)(v10 + 20) = v23;
  v24[v23] = v10;
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  return v10;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v7 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v18 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v19 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v38 = a6;
      v40 = a1;
      v32 = a4;
      v34 = a5;
      v36 = a3;
      v26 = v19;
      v27 = WTF::fastMalloc((WTF *)0x10);
      a4 = v32;
      a5 = v34;
      a3 = v36;
      v28 = v27;
      a6 = v38;
      a1 = v40;
      *(_QWORD *)v28 = v18;
      *(_DWORD *)(v28 + 8) = v26;
      v21 = 1;
      v18 = v28;
    }
    else
    {
      v21 = v18;
      v18 = v19 << 36;
    }
    v7 = v18 | v21;
  }
  v42 = v7;
  v8 = *(_QWORD *)(a4 + 8);
  if ((v8 & 1) != 0)
  {
    v22 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v23 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v39 = a6;
      v41 = a1;
      v33 = a4;
      v35 = a5;
      v37 = a3;
      v29 = v23;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a4 = v33;
      a5 = v35;
      a3 = v37;
      v31 = v30;
      a6 = v39;
      a1 = v41;
      *(_QWORD *)v31 = v22;
      *(_DWORD *)(v31 + 8) = v29;
      v25 = 1;
      v22 = v31;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v8 = v22 | v25;
  }
  v43 = v8;
  v44 = *(_WORD *)(a4 + 16);
  v46 = a6;
  v47 = a5;
  v45 = a3;
  v16 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &>(a1 + 1032, &v45, (uint64_t)&v42, &v47, &v46);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(v16 + 64) |= a2;
  return v16;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v10 = WTF::fastMalloc((WTF *)0x68);
  v11 = *a2;
  v12 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v31 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v32 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v43 = v11;
      v39 = v32;
      v40 = WTF::fastMalloc((WTF *)0x10);
      v11 = v43;
      *(_QWORD *)v40 = v31;
      *(_DWORD *)(v40 + 8) = v39;
      v34 = 1;
      v31 = v40;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v12 = v31 | v34;
  }
  v45 = v12;
  v13 = *(_QWORD *)(a3 + 8);
  if ((v13 & 1) != 0)
  {
    v35 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v36 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v44 = v11;
      v41 = v36;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v11 = v44;
      *(_QWORD *)v42 = v35;
      *(_DWORD *)(v42 + 8) = v41;
      v38 = 1;
      v35 = v42;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v13 = v35 | v38;
  }
  v46 = v13;
  v47 = *(_WORD *)(a3 + 16);
  result = JSC::DFG::Node::Node(v10, v11, (uint64_t)&v45, *a4, *a5, 0, 0);
  v22 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v22 - 8);
    *(_DWORD *)(a1 + 28) = v22 - 1;
    v24 = *(_QWORD **)a1;
  }
  else
  {
    v23 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
    {
      v25 = v23 + (v23 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v23 + 1)
        v27 = v23 + 1;
      else
        v27 = v26;
      if (v27 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v28 = *(_QWORD **)a1;
      v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
      *(_DWORD *)(a1 + 8) = v27;
      *(_QWORD *)a1 = v29;
      memcpy(v29, v28, 8 * v23);
      if (v28)
      {
        if (*(_QWORD **)a1 == v28)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v28, v15, v16, v17, v18, v19, v20, v21);
      }
      v30 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = 0;
      *(_DWORD *)(a1 + 12) = v30 + 1;
    }
    else
    {
      v24 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = 0;
      *(_DWORD *)(a1 + 12) = v23 + 1;
    }
  }
  *(_DWORD *)(v10 + 20) = v23;
  v24[v23] = v10;
  if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  return v10;
}

uint64_t _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEbS3_S5_(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  v3 = a3;
  v5 = *(unsigned __int16 *)(a3 + 18);
  switch(v5)
  {
    case 350:
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v7 = *(unsigned __int16 *)(v3 + 18);
        if (v7 == 351)
          break;
        if (v7 == 352)
          return 1;
        if (v7 != 350)
          goto LABEL_4;
      }
      result = a2;
      goto LABEL_15;
    case 351:
LABEL_15:
      v8 = *(_DWORD *)(v3 + 32);
      if (v8)
      {
        v9 = 0;
        v10 = *(uint64_t **)(v3 + 72);
        v11 = *(_QWORD *)result;
        while (1)
        {
          v12 = (unint64_t *)(2 * *v10);
          if (*v10 < 0)
            v13 = 63;
          else
            v13 = *v12;
          if (v13 > v9)
          {
            v14 = (uint64_t *)(v12 + 1);
            v15 = *v10 >= 0 ? v14 : v10;
            if (((*(unint64_t *)((char *)v15 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
            {
              v16 = *(_QWORD *)(v11 + 32);
              v17 = v9 + *(_QWORD *)(v3 + 24);
              if (*(_DWORD *)(v16 + 164) <= v17)
              {
                __break(0xC471u);
                return result;
              }
              result = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEbS3_S5_(a2, a2, *(_QWORD *)(*(_QWORD *)(v16 + 152) + 8 * v17) & 0xFF00FFFFFFFFFFFFLL);
              if (!(_DWORD)result)
                return result;
              v8 = *(_DWORD *)(v3 + 32);
            }
          }
          ++v9;
          result = 1;
          if (v9 >= v8)
            return result;
        }
      }
      return 1;
    case 352:
      return 1;
  }
LABEL_4:
  v6 = (_QWORD *)(*(_QWORD *)v3 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v3 & 1) != 0)
    v6 = (_QWORD *)*v6;
  return v6 && (v6[3] >> 60) - 6 < 0xFFFFFFFD;
}

uint64_t _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE0_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v3 = a3;
  v5 = *(unsigned __int16 *)(a3 + 18);
  switch(v5)
  {
    case 350:
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 24) & 0xFF00FFFFFFFFFFFFLL;
        v11 = *(unsigned __int16 *)(v3 + 18);
        if (v11 == 351)
          break;
        if (v11 == 352)
          return *(unsigned int *)(**(_QWORD **)(v3 + 72) + 8);
        if (v11 != 350)
          goto LABEL_4;
      }
      result = a2;
      goto LABEL_14;
    case 351:
LABEL_14:
      v12 = *(_DWORD *)(v3 + 32);
      if (v12)
      {
        v13 = 0;
        LODWORD(v14) = 0;
        v15 = *(uint64_t **)(v3 + 72);
        v16 = *(_QWORD *)result;
        while (1)
        {
          v17 = (unint64_t *)(2 * *v15);
          if (*v15 < 0)
            v18 = 63;
          else
            v18 = *v17;
          if (v18 > v13
            && ((v19 = (uint64_t *)(v17 + 1), *v15 >= 0) ? (v20 = v19) : (v20 = v15),
                ((*(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0))
          {
            v21 = *(_QWORD *)(v16 + 32);
            v22 = v13 + *(_QWORD *)(v3 + 24);
            if (*(_DWORD *)(v21 + 164) <= v22)
            {
              __break(0xC471u);
              return result;
            }
            result = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE0_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_(a2, a2, *(_QWORD *)(*(_QWORD *)(v21 + 152) + 8 * v22) & 0xFF00FFFFFFFFFFFFLL);
            v12 = *(_DWORD *)(v3 + 32);
          }
          else
          {
            result = 1;
          }
          v14 = (result + v14);
          if (++v13 >= v12)
            return v14;
        }
      }
      return 0;
    case 352:
      return *(unsigned int *)(**(_QWORD **)(v3 + 72) + 8);
  }
LABEL_4:
  v6 = *(_DWORD *)(v3 + 72);
  v7 = *(_QWORD *)v3 & 0xFFFFFFFF8;
  if ((*(_QWORD *)v3 & 1) != 0)
    v7 = *(_QWORD *)v7;
  v8 = (*(_DWORD *)(v7 + 24) & 0x3FFFFF) - 1;
  v9 = v8 >= v6;
  v10 = v8 - v6;
  if (v9)
    return v10;
  else
    return 0;
}

uint64_t _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEjE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_j(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  double v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t inserted;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE v67[24];

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = *(unsigned __int16 *)(a3 + 18);
  if (v7 != 350)
  {
    v8 = a1;
    if (v7 != 351)
    {
      v6 = a1;
      if (v7 == 352)
        goto LABEL_33;
LABEL_4:
      v9 = *(_DWORD *)(v5 + 72);
      v10 = *(_QWORD *)v5 & 0xFFFFFFFF8;
      if ((*(_QWORD *)v5 & 1) != 0)
        v10 = *(_QWORD *)v10;
      v11 = (*(_DWORD *)(v10 + 24) & 0x3FFFFF) - 1;
      if (v9 < v11)
      {
        v14 = *v6;
        v15 = a4;
        do
        {
          v16 = v9 + 1;
          v17 = v9 + (HIDWORD(*(_QWORD *)(v10 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v10 + 24) >> 28) >> 24 << 20)) + 6;
          v18 = *(_QWORD *)(v14 + 32);
          v19 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v19 = v17 | ((unint64_t)(v17 >> 31) << 32);
          *(_DWORD *)(v19 + 8) = 0x3FFFFFFF;
          *(_BYTE *)(v19 + 12) = 6;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 592);
          *(_QWORD *)(v18 + 592) = v19;
          v20 = v6[2];
          v21 = *(unsigned int *)v6[3];
          JSC::DFG::NodeOrigin::withExitOK(*(_QWORD *)v6[4], *(_BYTE *)v6[5], (uint64_t)v66);
          v24 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v20, v21, 0, 19, (uint64_t)v66, v19, v22, v23);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v66, v25, v26, v27, v28, v29, v30, v31);
          v4 = (v15 + 1);
          v9 = v16;
          ++v15;
        }
        while (v11 != v16);
      }
      return v4;
    }
LABEL_16:
    if (*(_DWORD *)(v5 + 32))
    {
      v32 = 0;
      v33 = *(uint64_t **)(v5 + 72);
      v34 = *v8;
      while (1)
      {
        v35 = (unint64_t *)(2 * *v33);
        if (*v33 < 0)
          v36 = 63;
        else
          v36 = *v35;
        if (v36 > v32
          && ((v37 = (uint64_t *)(v35 + 1), *v33 >= 0) ? (v38 = v37) : (v38 = v33),
              ((*(unint64_t *)((char *)v38 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) != 0))
        {
          v39 = *(_QWORD *)(v34 + 32);
          v40 = v32 + *(_QWORD *)(v5 + 24);
          if (*(_DWORD *)(v39 + 164) <= v40)
            goto LABEL_55;
          v4 = _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEjE_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEjS3_S5_j(v6, v6, *(_QWORD *)(*(_QWORD *)(v39 + 152) + 8 * v40) & 0xFF00FFFFFFFFFFFFLL, v4);
        }
        else
        {
          v41 = *(_QWORD *)(v34 + 32);
          v42 = v32 + *(_QWORD *)(v5 + 24);
          if (*(_DWORD *)(v41 + 164) <= v42)
          {
LABEL_55:
            __break(0xC471u);
            JUMPOUT(0x1982E8348);
          }
          v4 = (v4 + 1);
        }
        if (++v32 >= *(unsigned int *)(v5 + 32))
          return v4;
      }
    }
    return v4;
  }
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 24) & 0xFF00FFFFFFFFFFFFLL;
    v13 = *(unsigned __int16 *)(v5 + 18);
    if (v13 == 351)
    {
      v8 = a2;
      goto LABEL_16;
    }
    if (v13 == 352)
      break;
    if (v13 != 350)
      goto LABEL_4;
  }
  v8 = a2;
LABEL_33:
  v43 = **(_QWORD **)(v5 + 72);
  if (*(_DWORD *)(v43 + 8))
  {
    v44 = 0;
    v65 = v43 + 16;
    while (1)
    {
      v45 = *(unsigned __int16 *)(v5 + 18);
      if (v45 != 267)
      {
        if (v45 == 264)
        {
          v64 = *(_DWORD *)(v5 + 76);
          goto LABEL_51;
        }
        if (v45 != 352)
        {
          v46 = *(unsigned __int8 *)(v5 + 72);
          goto LABEL_39;
        }
      }
      v64 = *(_DWORD *)(v5 + 84);
LABEL_51:
      v46 = v64 & 0xF;
LABEL_39:
      v47 = *(_BYTE *)(v43 + 4) & 0xE;
      if (v46 == 7)
      {
        if (v47 == 6)
          v48 = *(_QWORD *)(v65 + 8 * v44) + 0x2000000000000;
        else
          v48 = *(_QWORD *)(v65 + 8 * v44);
        if (v48 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v49 = v48 - 0x2000000000000;
        else
          v49 = (double)(int)v48;
      }
      else
      {
        if (v47 != 6)
        {
          v50 = *(_QWORD *)(v65 + 8 * v44);
          goto LABEL_48;
        }
        v49 = *(double *)(v65 + 8 * v44);
      }
      v50 = *(_QWORD *)&v49 + 0x2000000000000;
LABEL_48:
      v51 = (uint64_t *)v8[2];
      v52 = *(unsigned int *)v8[3];
      JSC::DFG::NodeOrigin::withExitOK(*(_QWORD *)v8[4], *(_BYTE *)v8[5], (uint64_t)v67);
      inserted = JSC::DFG::InsertionSet::insertConstant(v51, v52, (uint64_t)v67, v50, 0, v53, v54, v55);
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v67, v57, v58, v59, v60, v61, v62, v63);
      if (v44 >= *(unsigned int *)(v43 + 8))
        return (v4 + v44);
    }
  }
  return v4;
}

void _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE2_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEvS3_S5_(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t inserted;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BYTE v68[24];
  _BYTE v69[24];
  unint64_t v70;

  v3 = a3;
  v4 = a2;
  v5 = *(unsigned __int16 *)(a3 + 18);
  if (v5 != 350)
  {
    v6 = a1;
    if (v5 != 351)
    {
      v4 = a1;
      if (v5 == 352)
        goto LABEL_36;
LABEL_4:
      v7 = (_QWORD *)(*(_QWORD *)v3 & 0xFFFFFFFF8);
      if ((*(_QWORD *)v3 & 1) != 0)
        v7 = (_QWORD *)*v7;
      v8 = *(_DWORD *)(v3 + 72);
      v9 = v7[3];
      if (v8 + 1 < ((_DWORD)v7[3] & 0x3FFFFFu))
      {
        v11 = *v4;
        v12 = v8 + 6;
        do
        {
          v13 = *(_QWORD *)(v11 + 32);
          v14 = v12 + (HIDWORD(v9) & 0xFFFFF | ((int)(v9 >> 28) >> 24 << 20));
          v15 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v15 = v14 | ((unint64_t)(v14 >> 31) << 32);
          *(_DWORD *)(v15 + 8) = 0x3FFFFFFF;
          *(_BYTE *)(v15 + 12) = 6;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 592);
          *(_QWORD *)(v13 + 592) = v15;
          v70 = 0;
          v16 = v4[2];
          v17 = *(unsigned int *)v4[3];
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v68, *(const JSC::DFG::NodeOrigin **)v4[4]);
          v20 = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v16, v17, 0, 19, (uint64_t)v68, v15, v18, v19);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v68, v21, v22, v23, v24, v25, v26, v27);
          v70 = v20;
          v28 = v4[1];
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
          {
            WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v28, (unint64_t)&v70);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v20;
            *(_DWORD *)(v28 + 12) = v29 + 1;
          }
          v9 = v7[3];
          v30 = v12 - 4;
          ++v12;
        }
        while (v30 < ((_DWORD)v7[3] & 0x3FFFFFu));
      }
      return;
    }
LABEL_19:
    if (*(_DWORD *)(v3 + 32))
    {
      v31 = 0;
      v32 = *(uint64_t **)(v3 + 72);
      v33 = *v6;
      while (1)
      {
        v70 = 0;
        v34 = *(_QWORD *)(v33 + 32);
        v35 = v31 + *(_QWORD *)(v3 + 24);
        if (*(_DWORD *)(v34 + 164) <= v35)
          break;
        v36 = *(_QWORD *)(*(_QWORD *)(v34 + 152) + 8 * v35) & 0xFF00FFFFFFFFFFFFLL;
        v70 = v36;
        v37 = (unint64_t *)(2 * *v32);
        if (*v32 < 0)
          v38 = 63;
        else
          v38 = *v37;
        if (v38 > v31
          && ((v39 = (uint64_t *)(v37 + 1), *v32 >= 0) ? (v40 = v39) : (v40 = v32),
              ((*(unint64_t *)((char *)v40 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
        {
          _ZZN3JSC3DFG12_GLOBAL__N_125ArgumentsEliminationPhase9transformEvENKUlT_PNS0_4NodeEE2_clINSt3__117reference_wrapperIKN3WTF16RecursableLambdaIS6_EEEEEEvS3_S5_(v4, v4);
        }
        else
        {
          v41 = v6[1];
          v42 = *(unsigned int *)(v41 + 12);
          if ((_DWORD)v42 == *(_DWORD *)(v41 + 8))
          {
            WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v41, (unint64_t)&v70);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v41 + 8 * v42) = v36;
            *(_DWORD *)(v41 + 12) = v42 + 1;
          }
        }
        if (++v31 >= *(unsigned int *)(v3 + 32))
          return;
      }
      __break(0xC471u);
    }
    return;
  }
  while (1)
  {
    v3 = *(_QWORD *)(v3 + 24) & 0xFF00FFFFFFFFFFFFLL;
    v10 = *(unsigned __int16 *)(v3 + 18);
    if (v10 == 351)
    {
      v6 = a2;
      goto LABEL_19;
    }
    if (v10 == 352)
      break;
    if (v10 != 350)
      goto LABEL_4;
  }
  v6 = a2;
LABEL_36:
  v43 = **(_QWORD **)(v3 + 72);
  if (*(_DWORD *)(v43 + 8))
  {
    v44 = 0;
    v45 = v43 + 16;
    while (1)
    {
      v46 = *(unsigned __int16 *)(v3 + 18);
      if (v46 == 267)
        break;
      if (v46 == 264)
      {
        v67 = *(_DWORD *)(v3 + 76);
        goto LABEL_57;
      }
      if (v46 == 352)
        break;
      v47 = *(unsigned __int8 *)(v3 + 72);
LABEL_42:
      v48 = *(_BYTE *)(v43 + 4) & 0xE;
      if (v47 == 7)
      {
        if (v48 == 6)
          v49 = *(_QWORD *)(v45 + 8 * v44) + 0x2000000000000;
        else
          v49 = *(_QWORD *)(v45 + 8 * v44);
        if (v49 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v50 = v49 - 0x2000000000000;
        else
          v50 = (double)(int)v49;
        v51 = *(_QWORD *)&v50 + 0x2000000000000;
      }
      else if (v48 == 6)
      {
        v51 = *(_QWORD *)(v45 + 8 * v44) + 0x2000000000000;
      }
      else
      {
        v51 = *(_QWORD *)(v45 + 8 * v44);
      }
      v52 = v6[1];
      v53 = (uint64_t *)v6[2];
      v54 = *(unsigned int *)v6[3];
      JSC::DFG::NodeOrigin::withExitOK(*(_QWORD *)v6[4], 1, (uint64_t)v69);
      inserted = JSC::DFG::InsertionSet::insertConstant(v53, v54, (uint64_t)v69, v51, 0, v55, v56, v57);
      v70 = inserted;
      v66 = *(unsigned int *)(v52 + 12);
      if ((_DWORD)v66 == *(_DWORD *)(v52 + 8))
      {
        WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v52, (unint64_t)&v70);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v52 + 8 * v66) = inserted;
        *(_DWORD *)(v52 + 12) = v66 + 1;
      }
      JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v69, v59, v60, v61, v62, v63, v64, v65);
      if (++v44 >= (unint64_t)*(unsigned int *)(v43 + 8))
        return;
    }
    v67 = *(_DWORD *)(v3 + 84);
LABEL_57:
    v47 = v67 & 0xF;
    goto LABEL_42;
  }
}

uint64_t WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 9)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 8;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *casual;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    casual = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_21;
  }
  if (!(v9 >> 29))
  {
    v11 = 8 * v9;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v12)
    {
      v13 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0x34)
      {
        v14 = 23 * v13 + 7;
      }
      else
      {
        if (v9 > 0x4E2)
          goto LABEL_15;
        v14 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v13 + 626);
        if (*(_DWORD *)(v12 + 8052) <= v14)
          goto LABEL_15;
      }
      v16 = v12 + 8 * v14;
      v17 = v16 + 8064;
      *(_BYTE *)(v16 + 8064) = 1;
      v18 = *(unsigned int *)(v16 + 8080);
      if ((_DWORD)v18)
      {
        *(_DWORD *)(v17 + 16) = v18 - *(_DWORD *)(v17 + 20);
        casual = (void *)(*(_QWORD *)(v17 + 8) - v18);
      }
      else
      {
        v26 = *(_QWORD *)(v17 + 40);
        v27 = *(_QWORD *)(v17 + 24);
        if (!v26)
        {
          if (*(_BYTE *)(v17 + 5) == 6)
          {
            v29 = *(unsigned int *)(v17 + 32);
            v30 = *(_DWORD *)(v17 + 36);
            if (v29 < v30)
            {
              *(_QWORD *)(v17 + 8 * v29 + 56) = 0;
              v31 = (unint64_t *)(8 * v14 + 8 * v29 + v12 + 8128);
              v32 = v30 - 1 - v29;
              while (v32)
              {
                v27 += 1024;
                v34 = *v31++;
                v33 = v34;
                LODWORD(v29) = v29 + 1;
                --v32;
                if (v34)
                {
                  v26 = __rbit64(v33);
                  *(_DWORD *)(v17 + 32) = v29;
                  *(_QWORD *)(v17 + 24) = v27;
                  goto LABEL_32;
                }
              }
              *(_DWORD *)(v17 + 32) = v30;
            }
          }
          *(_BYTE *)v17 = 0;
          goto LABEL_15;
        }
LABEL_32:
        v28 = __clz(v26);
        *(_QWORD *)(v17 + 40) = v26 & ~(0x8000000000000000 >> v28);
        casual = (void *)(v27 + 16 * v28);
      }
      *(_BYTE *)v17 = 0;
      goto LABEL_20;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
LABEL_20:
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = casual;
LABEL_21:
    memcpy(casual, (const void *)v5, 8 * v10);
    if (v4 + 16 == v5 || !v5)
      return v3;
    if (*(_QWORD *)v4 == v5)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
    }
    v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v24)
    {
      pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
      return v3;
    }
    if (!(v5 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
    {
LABEL_28:
      v25 = *(unsigned int *)(v24 + 8000);
      if (v25 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v24, v5, (os_unfair_lock_s *)5, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_QWORD *)(v24 + 8 * v25) = v5 | 0x5000000000000;
        *(_DWORD *)(v24 + 8000) = v25 + 1;
      }
      return v3;
    }
    if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
    {
      v19 = 0;
    }
    else
    {
      v19 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v19 == 1)
        goto LABEL_28;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v24, v5, 1, v19, v20, v21, v22, v23);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &>(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t casual;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v11)
    goto LABEL_83;
  v12 = (_BYTE *)(v11 + 9408);
  *(_BYTE *)(v11 + 9408) = 1;
  v13 = *(unsigned int *)(v11 + 9424);
  if (!(_DWORD)v13)
  {
    v26 = *(_QWORD *)(v11 + 9448);
    v27 = *(_QWORD *)(v11 + 9432);
    if (v26)
    {
LABEL_17:
      v28 = __clz(v26);
      *(_QWORD *)(v11 + 9448) = v26 & ~(0x8000000000000000 >> v28);
      casual = v27 + 16 * v28;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v11 + 9413) == 6)
    {
      v51 = *(_DWORD *)(v11 + 9444);
      v52 = *(unsigned int *)(v11 + 9440);
      if (v52 < v51)
      {
        *(_QWORD *)&v12[8 * v52 + 56] = 0;
        v53 = (unint64_t *)(v11 + 8 * v52 + 9472);
        v54 = v51 - 1 - v52;
        while (v54)
        {
          v27 += 1024;
          v56 = *v53++;
          v55 = v56;
          LODWORD(v52) = v52 + 1;
          --v54;
          if (v56)
          {
            v26 = __rbit64(v55);
            *(_DWORD *)(v11 + 9440) = v52;
            *(_QWORD *)(v11 + 9432) = v27;
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v11 + 9440) = v51;
      }
    }
    *v12 = 0;
LABEL_83:
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_5;
  }
  *(_DWORD *)(v11 + 9424) = v13 - *(_DWORD *)(v11 + 9428);
  casual = *(_QWORD *)(v11 + 9416) - v13;
LABEL_4:
  *v12 = 0;
LABEL_5:
  v15 = *a2;
  v16 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v35 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v36 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v57 = v15;
      v58 = WTF::fastMalloc((WTF *)0x10);
      v15 = v57;
      *(_QWORD *)v58 = v35;
      *(_DWORD *)(v58 + 8) = v36;
      v38 = 1;
      v35 = v58;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v16 = v35 | v38;
  }
  v17 = *(_QWORD *)(a3 + 8);
  if ((v17 & 1) != 0)
  {
    v39 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v40 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v59 = v15;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v15 = v59;
      *(_QWORD *)v60 = v39;
      *(_DWORD *)(v60 + 8) = v40;
      v42 = 1;
      v39 = v60;
    }
    else
    {
      v42 = v39;
      v39 = v40 << 36;
    }
    v17 = v39 | v42;
  }
  v18 = (unsigned __int16)v15;
  v19 = *(_WORD *)(a3 + 16);
  v20 = v16;
  if ((v16 & 1) != 0)
  {
    v43 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v44 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
        ? (v45 = (_DWORD)v44 == -1)
        : (v45 = 1),
          v45))
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v65 = v15;
      v61 = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
      v62 = WTF::fastMalloc((WTF *)0x10);
      v15 = v65;
      *(_QWORD *)v62 = v43;
      *(_DWORD *)(v62 + 8) = v61;
      v46 = 1;
      v43 = v62;
    }
    else
    {
      v46 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v20 = v43 | v46;
  }
  *(_QWORD *)casual = v20;
  v21 = v17;
  if ((v17 & 1) != 0)
  {
    v47 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v48 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
        ? (v49 = (_DWORD)v48 == -1)
        : (v49 = 1),
          v49))
    {
      v50 = 2;
    }
    else if (v48 >> 28)
    {
      v66 = v15;
      v63 = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8);
      v64 = WTF::fastMalloc((WTF *)0x10);
      v15 = v66;
      *(_QWORD *)v64 = v47;
      *(_DWORD *)(v64 + 8) = v63;
      v50 = 1;
      v47 = v64;
    }
    else
    {
      v50 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v47 = v48 << 36;
    }
    v21 = v47 | v50;
  }
  *(_QWORD *)(casual + 8) = v21;
  *(_WORD *)(casual + 16) = v19;
  *(_DWORD *)(casual + 20) = -1;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 40) = 0;
  *(_QWORD *)(casual + 24) = 0;
  *(_QWORD *)(casual + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(casual + 56) = 0;
  *(_OWORD *)(casual + 64) = 0u;
  *(_OWORD *)(casual + 80) = 0u;
  *(_QWORD *)(casual + 96) = 0;
  *(_WORD *)(casual + 18) = v18;
  if (v18 >= 0x1B1)
    goto LABEL_89;
  *(_DWORD *)(casual + 56) = dword_199154630[v15];
  v22 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v22 - 8);
    *(_DWORD *)(a1 + 28) = v22 - 1;
    v24 = *(_QWORD **)a1;
    goto LABEL_13;
  }
  v23 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v23 != *(_DWORD *)(a1 + 8))
  {
    v24 = *(_QWORD **)a1;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = 0;
    *(_DWORD *)(a1 + 12) = v23 + 1;
    goto LABEL_13;
  }
  v29 = v23 + (v23 >> 2);
  v30 = v29 >= 0x10 ? v29 + 1 : 16;
  v31 = v30 <= v23 + 1 ? v23 + 1 : v30;
  if (v31 >> 29)
  {
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x1982E8ED0);
  }
  v32 = *(_QWORD **)a1;
  v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
  *(_DWORD *)(a1 + 8) = v31;
  *(_QWORD *)a1 = v33;
  memcpy(v33, v32, 8 * v23);
  if (v32)
  {
    if (*(_QWORD **)a1 == v32)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
  }
  v34 = *(unsigned int *)(a1 + 12);
  v24 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = 0;
  *(_DWORD *)(a1 + 12) = v34 + 1;
LABEL_13:
  *(_DWORD *)(casual + 20) = v23;
  v24[v23] = casual;
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return casual;
}

uint64_t WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(uint64_t a1, const char *a2, uint64_t a3, const char *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::DFG::Prefix::dump(a1, v12);
  WTF::PrintStream::printf(v12, "%s", a2);
  v13 = *(char **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  if (v13)
  {
    v17 = v14 - 1;
    if (!v14)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v22 = (char *)v18;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,unsigned int,unsigned long>(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int16 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v10 = *(_QWORD *)a5;
  if ((*(_QWORD *)a5 & 1) != 0)
  {
    v21 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v22 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v47 = a1;
      v43 = a4;
      v45 = a8;
      v37 = a6;
      v39 = a7;
      v41 = a3;
      v35 = a5;
      v29 = v22;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a5 = v35;
      a6 = v37;
      a3 = v41;
      a4 = v43;
      a7 = v39;
      a8 = v45;
      v31 = v30;
      a1 = v47;
      *(_QWORD *)v31 = v21;
      *(_DWORD *)(v31 + 8) = v29;
      v24 = 1;
      v21 = v31;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v10 = v21 | v24;
  }
  v49 = v10;
  v11 = *(_QWORD *)(a5 + 8);
  if ((v11 & 1) != 0)
  {
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v26 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v48 = a1;
      v44 = a4;
      v46 = a8;
      v38 = a6;
      v40 = a7;
      v42 = a3;
      v36 = a5;
      v32 = v25;
      v33 = v26;
      v34 = WTF::fastMalloc((WTF *)0x10);
      a5 = v36;
      a6 = v38;
      a3 = v42;
      a4 = v44;
      a7 = v40;
      a8 = v46;
      v25 = v34;
      a1 = v48;
      *(_QWORD *)v25 = v32;
      *(_DWORD *)(v25 + 8) = v33;
      v28 = 1;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v11 = v25 | v28;
  }
  v50 = v11;
  v51 = *(_WORD *)(a5 + 16);
  v56 = a7;
  v57 = a6;
  v55 = a3;
  v54 = a4;
  v53 = a8;
  v52 = a9;
  v19 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::Node::VarArgTag &,JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,unsigned int &,unsigned long &>(a1 + 1032, &v55, &v54, (uint64_t)&v49, &v57, &v56, &v53, (unsigned int *)&v52);
  if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v50 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(v19 + 64) |= a2;
  return v19;
}

uint64_t JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::Node::VarArgTag &,JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::OpInfo &,unsigned int &,unsigned long &>(uint64_t a1, int *a2, unsigned __int16 *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;

  v16 = WTF::fastMalloc((WTF *)0x68);
  v17 = *a2;
  v18 = *a3;
  v19 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v38 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v39 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
        ? (v40 = (_DWORD)v39 == -1)
        : (v40 = 1),
          v40))
    {
      v41 = 2;
    }
    else if (v39 >> 28)
    {
      v48 = v18;
      v50 = v17;
      v46 = WTF::fastMalloc((WTF *)0x10);
      v18 = v48;
      v17 = v50;
      *(_QWORD *)v46 = v38;
      *(_DWORD *)(v46 + 8) = v39;
      v41 = 1;
      v38 = v46;
    }
    else
    {
      v41 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v38 = v39 << 36;
    }
    v19 = v38 | v41;
  }
  v52 = v19;
  v20 = *(_QWORD *)(a4 + 8);
  if ((v20 & 1) != 0)
  {
    v42 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v43 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v49 = v18;
      v51 = v17;
      v47 = WTF::fastMalloc((WTF *)0x10);
      v18 = v49;
      v17 = v51;
      *(_QWORD *)v47 = v42;
      *(_DWORD *)(v47 + 8) = v43;
      v45 = 1;
      v42 = v47;
    }
    else
    {
      v45 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v42 = v43 << 36;
    }
    v20 = v42 | v45;
  }
  v53 = v20;
  v54 = *(_WORD *)(a4 + 16);
  result = JSC::DFG::Node::Node(v16, v17, v18, (uint64_t)&v52, *a5, *a6, *a7, *a8);
  v29 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v29 - 8);
    *(_DWORD *)(a1 + 28) = v29 - 1;
    v31 = *(_QWORD **)a1;
  }
  else
  {
    v30 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v30 == *(_DWORD *)(a1 + 8))
    {
      v32 = v30 + (v30 >> 2);
      if (v32 >= 0x10)
        v33 = v32 + 1;
      else
        v33 = 16;
      if (v33 <= v30 + 1)
        v34 = v30 + 1;
      else
        v34 = v33;
      if (v34 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v35 = *(_QWORD **)a1;
      v36 = (void *)WTF::fastMalloc((WTF *)(8 * v34));
      *(_DWORD *)(a1 + 8) = v34;
      *(_QWORD *)a1 = v36;
      memcpy(v36, v35, 8 * v30);
      if (v35)
      {
        if (*(_QWORD **)a1 == v35)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v35, v22, v23, v24, v25, v26, v27, v28);
      }
      v37 = *(unsigned int *)(a1 + 12);
      v31 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = 0;
      *(_DWORD *)(a1 + 12) = v37 + 1;
    }
    else
    {
      v31 = *(_QWORD **)a1;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = 0;
      *(_DWORD *)(a1 + 12) = v30 + 1;
    }
  }
  *(_DWORD *)(v16 + 20) = v30;
  v31[v30] = v16;
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
  return v16;
}

uint64_t JSC::DFG::Node::Node(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;

  v8 = a3;
  v10 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v13 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v14 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v14 != 0x3FFFFFFF)
        ? (v15 = (_DWORD)v14 == -1)
        : (v15 = 1),
          v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v21 = v13;
      v29 = a6;
      v33 = a5;
      v27 = a8;
      v31 = a7;
      v25 = a4;
      v22 = v14;
      v13 = WTF::fastMalloc((WTF *)0x10);
      a4 = v25;
      a7 = v31;
      a8 = v27;
      a5 = v33;
      a6 = v29;
      v8 = a3;
      *(_QWORD *)v13 = v21;
      *(_DWORD *)(v13 + 8) = v22;
      v16 = 1;
    }
    else
    {
      v16 = v13;
      v13 = v14 << 36;
    }
    v10 = v13 | v16;
  }
  *(_QWORD *)a1 = v10;
  v11 = *(_QWORD *)(a4 + 8);
  if ((v11 & 1) != 0)
  {
    v17 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v18 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else if (v18 >> 28)
    {
      v23 = v17;
      v36 = v8;
      v30 = a6;
      v34 = a5;
      v28 = a8;
      v32 = a7;
      v26 = a4;
      v24 = v18;
      v17 = WTF::fastMalloc((WTF *)0x10);
      a4 = v26;
      a7 = v32;
      a8 = v28;
      a5 = v34;
      a6 = v30;
      v8 = v36;
      *(_QWORD *)v17 = v23;
      *(_DWORD *)(v17 + 8) = v24;
      v20 = 1;
    }
    else
    {
      v20 = v17;
      v17 = v18 << 36;
    }
    v11 = v17 | v20;
  }
  *(_QWORD *)(a1 + 8) = v11;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a4 + 16);
  *(_DWORD *)(a1 + 20) = -1;
  *(_QWORD *)(a1 + 24) = a7;
  *(_QWORD *)(a1 + 32) = a8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x13FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a6;
  JSC::DFG::Node::setOpAndDefaultFlags(a1, v8);
  return a1;
}

double (*JSC::DFG::arithUnaryFunction(unsigned int a1))()
{
  if (a1 >= 0x13)
  {
    __break(0xC471u);
    JUMPOUT(0x1982E9750);
  }
  return off_1E358C340[a1];
}

uint64_t JSC::DFG::arithUnaryOperation(unsigned int a1)
{
  uint64_t result;

  if (a1 < 0x13)
    return (uint64_t)off_1E358C3D8[a1];
  result = 59;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::ArrayMode::fromObserved(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v27;
  int v28;
  unsigned __int16 v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  unsigned int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int16 v49;
  int v50;
  int v51;
  __int16 v52;
  char v53;
  char v54;

  v5 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  v6 = v5 & 0x10;
  if (v4 <= 511)
  {
    if (v4 <= 31)
    {
      LOBYTE(v7) = 0;
      v12 = 0;
      LOBYTE(v13) = 2;
      switch(v4)
      {
        case 0:
          return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
        case 1:
          v4 = 0x40000;
          if (a3 == 1 && (v5 & 8) == 0)
          {
            v12 = 17;
            LOBYTE(v13) = 1;
            LOBYTE(v7) = (v5 & 0x10) == 0;
            return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
          }
          v12 = 16 * (a3 & 1);
          if ((v5 & 1) != 0)
            v15 = 0x20000;
          else
            v15 = 0x10000;
          if (a4)
            v16 = 0x40000;
          else
            v16 = v15;
          v4 = v16 & 0xEFFFFFFF | ((a3 & 1) << 28);
          v13 = (v4 | (16 * v6)) ^ 0x100;
          goto LABEL_40;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_132;
        case 8:
          if ((v5 & 1) != 0)
            v36 = 0x20000;
          else
            v36 = 0x10000;
          if (a4)
            v36 = 0x40000;
          v37 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
          v38 = v36 & 0x8FFFFFFF | (((v37 >> 4) & 7) << 28);
          if (v6)
            v39 = 512;
          else
            v39 = 768;
          v40 = v39 | v38 | 6;
          v41 = v39 >> 8;
          if (a3 == 1)
            LOBYTE(v13) = 1;
          else
            LOBYTE(v13) = v40;
          if (a3 == 1)
            LOBYTE(v7) = 2;
          else
            LOBYTE(v7) = v41;
          if (a3 == 1)
            v4 = 0x40000;
          else
            v4 = v38;
          if (a3 == 1)
            v12 = 17;
          else
            v12 = v37;
          return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
        case 9:
          v4 = 0x40000;
          if (a3 == 1 && (v5 & 8) == 0)
          {
            v12 = 17;
            LOBYTE(v7) = 6;
            LOBYTE(v13) = 1;
            return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
          }
          LOBYTE(v7) = 0;
          v12 = 16 * (a3 & 1);
          if ((v5 & 1) != 0)
            v50 = 0x20000;
          else
            v50 = 0x10000;
          if (a4)
            v51 = 0x40000;
          else
            v51 = v50;
          v13 = v51 & 0xEFFFFFFF | ((a3 & 1) << 28);
          break;
        default:
          if (v4 == 16)
            goto LABEL_78;
          if (v4 != 0x80000000)
            goto LABEL_132;
          v43 = 24;
          goto LABEL_240;
      }
      goto LABEL_237;
    }
    if (v4 <= 127)
    {
      if (v4 == 32)
        goto LABEL_78;
      if (v4 != 64)
      {
        if (v4 != 48)
          goto LABEL_132;
LABEL_78:
        if ((v4 & 0xFFDFFFCF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1982EA1F4);
        }
        if ((*(_DWORD *)(a2 + 8) & 0x10) == *(_DWORD *)(a2 + 8))
          v7 = (v5 & 0x10) == 0;
        else
          v7 = 6;
        if ((v4 & 0x10) == 0)
          v7 = 2;
        v24 = (v4 >> 21) & 1;
        if (a3 != 1)
          v24 = 0;
        v25 = v7 - 2;
        if ((v7 - 2) < 4)
          LOBYTE(v7) = 2;
        if (v25 > 3 || v6 != 0)
          goto LABEL_96;
        if ((v4 & 0x2A00000) != 0)
        {
          if ((v4 & 0x2AAA) == 0)
          {
            LOBYTE(v7) = 5;
            goto LABEL_96;
          }
        }
        else if ((v4 & 0x2AAA) != 0)
        {
          LOBYTE(v7) = 4;
LABEL_96:
          if ((v5 & 1) != 0)
            v27 = 0x20000;
          else
            v27 = 0x10000;
          if (a4)
            v27 = 0x40000;
          v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6) | v24;
          v4 = v27 | (v12 << 24);
          LOBYTE(v13) = v27 | 7;
          return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
        }
        LOBYTE(v7) = 3;
        goto LABEL_96;
      }
    }
    else if (v4 != 128)
    {
      if (v4 == 256)
        goto LABEL_4;
      if (v4 != 192)
        goto LABEL_132;
    }
LABEL_43:
    if ((*(_DWORD *)(a2 + 8) & 0x40) == *(_DWORD *)(a2 + 8))
      v7 = (v5 & 0x10) == 0;
    else
      v7 = 6;
    if ((v4 & 0x40) == 0)
      v7 = 2;
    v17 = (v4 >> 23) & 1;
    if (a3 != 1)
      v17 = 0;
    v18 = v7 - 2;
    if ((v7 - 2) < 4)
      LOBYTE(v7) = 2;
    if (v18 > 3 || v6 != 0)
      goto LABEL_60;
    if ((v4 & 0x2A00000) != 0)
    {
      if ((v4 & 0x2AAA) == 0)
      {
        LOBYTE(v7) = 5;
        goto LABEL_60;
      }
    }
    else if ((v4 & 0x2AAA) != 0)
    {
      LOBYTE(v7) = 4;
LABEL_60:
      if ((v5 & 1) != 0)
        v20 = 0x20000;
      else
        v20 = 0x10000;
      if (a4)
        v20 = 0x40000;
      v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6) | v17;
      v4 = v20 | (v12 << 24);
      LOBYTE(v13) = v20 | 8;
      return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
    }
    LOBYTE(v7) = 3;
    goto LABEL_60;
  }
  if (v4 > 2047)
  {
    if (v4 > 0x1FFFFFF)
    {
      if (v4 <= 33554943)
      {
        if (v4 == 0x2000000)
          goto LABEL_4;
        v29 = 256;
LABEL_116:
        if (v4 == (v29 | 0x2000000))
          goto LABEL_4;
        goto LABEL_132;
      }
      if (v4 <= 0x7FFFFFF)
      {
        if (v4 == 33554944)
          goto LABEL_4;
        if (v4 == 0x4000000)
        {
          if ((v5 & 1) != 0)
            v21 = 0x20000;
          else
            v21 = 0x10000;
          if (a4)
            v21 = 0x40000;
          v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
          v4 = v21 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
          v22 = v4 | (16 * v6);
          v23 = 275;
          goto LABEL_111;
        }
        v29 = 768;
        goto LABEL_116;
      }
      if (v4 <= 0xFFFFFFF)
      {
        if (v4 != 0x8000000)
          goto LABEL_132;
        if ((v5 & 1) != 0)
          v45 = 0x20000;
        else
          v45 = 0x10000;
        if (a4)
          v45 = 0x40000;
        v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
        v4 = v45 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
        v22 = v4 | (16 * v6);
        v23 = 276;
        goto LABEL_111;
      }
      switch(v4)
      {
        case 0x10000000:
          if ((v5 & 1) != 0)
            v35 = 0x20000;
          else
            v35 = 0x10000;
          if (a4)
            v35 = 0x40000;
          v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
          v4 = v35 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
          v22 = v4 | (16 * v6);
          v23 = 277;
          goto LABEL_111;
        case 0x20000000:
          v43 = 22;
          break;
        case 0x40000000:
          v43 = 23;
          break;
        default:
          goto LABEL_132;
      }
      goto LABEL_240;
    }
    if (v4 < 0x80000)
    {
      if (v4 >= 0x40000)
      {
        if (v4 == 0x40000)
        {
          if ((v5 & 1) != 0)
            v28 = 0x20000;
          else
            v28 = 0x10000;
          if (a4)
            v28 = 0x40000;
          v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
          v4 = v28 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
          v22 = v4 | (16 * v6);
          v23 = 272;
          goto LABEL_111;
        }
LABEL_132:
        if ((v4 & 0xFC1F0000) == 0)
        {
          if ((v4 & 1) == 0 || (v5 & 8) == 0)
          {
            if ((v4 & 0x3000) != 0)
            {
              v31 = 11;
            }
            else if ((v4 & 0xC00) != 0)
            {
              v31 = 10;
            }
            else if ((v4 & 0x2000300) != 0)
            {
              v31 = 9;
            }
            else if ((v4 & 0x8000C0) != 0)
            {
              v31 = 8;
            }
            else if ((v4 & 0x200030) != 0)
            {
              v31 = 7;
            }
            else
            {
              v31 = 1;
            }
            v32 = v4 & 0xFC1F1551;
            if ((v4 & 0x2A02AAA) != 0)
            {
              v33 = (16 * (a3 & 1)) | 1;
              if (v32)
              {
                LOBYTE(v7) = 6;
                goto LABEL_147;
              }
            }
            else
            {
              if (v32)
                v7 = (v5 & 0x10) == 0;
              else
                v7 = 6;
              v33 = (16 * (a3 & 1)) | 1;
              if ((v7 - 2) > 3)
                goto LABEL_147;
            }
            LOBYTE(v7) = 2;
            if ((v5 & 0x10) == 0 && (v31 - 6) <= 4)
            {
              if ((v31 - 7) >= 3)
              {
                LOBYTE(v7) = 3;
                if (v31 != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982EA158);
                }
                goto LABEL_147;
              }
              if ((v4 & 0x2A00000) != 0)
              {
                if ((v4 & 0x2AAA) == 0)
                {
                  LOBYTE(v7) = 5;
                  goto LABEL_147;
                }
              }
              else if ((v4 & 0x2AAA) != 0)
              {
                LOBYTE(v7) = 4;
                goto LABEL_147;
              }
              LOBYTE(v7) = 3;
            }
LABEL_147:
            if ((v5 & 1) != 0)
              v34 = 0x20000;
            else
              v34 = 0x10000;
            if (a4)
              v34 = 0x40000;
            v12 = (8 * v5) & 0x20 | (((v5 >> 5) & 1) << 6) | v33;
            v4 = v34 | (v12 << 24);
            LOBYTE(v13) = v34 | v31;
            return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
          }
          LOBYTE(v7) = 0;
          v12 = 0;
          if ((v5 & 1) != 0)
            v46 = 0x20000;
          else
            v46 = 0x10000;
          if (a4)
            v13 = 0x40000;
          else
            v13 = v46;
LABEL_237:
          v4 = v13;
          return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
        }
        if ((v5 & 1) != 0)
          v48 = 0x20000;
        else
          v48 = 0x10000;
        if (a4)
          v48 = 0x40000;
        v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
        v4 = v48 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
        v22 = v4 | (16 * v6);
        v23 = 260;
        goto LABEL_111;
      }
      if (v4 >= 0x20000)
      {
        if (v4 != 0x20000)
          goto LABEL_132;
        if ((v5 & 1) != 0)
          v42 = 0x20000;
        else
          v42 = 0x10000;
        if (a4)
          v42 = 0x40000;
        v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
        v4 = v42 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
        v22 = v4 | (16 * v6);
        v23 = 271;
        goto LABEL_111;
      }
      if (v4 >= 12288)
      {
        if (v4 == 0x10000)
        {
          if ((v5 & 1) != 0)
            v44 = 0x20000;
          else
            v44 = 0x10000;
          if (a4)
            v44 = 0x40000;
          v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
          v4 = v44 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
          v22 = v4 | (16 * v6);
          v23 = 270;
          goto LABEL_111;
        }
        if (v4 != 12288 && v4 != 15360)
          goto LABEL_132;
        v49 = 1547;
        goto LABEL_271;
      }
      if (v4 <= 5119)
      {
        if (v4 == 2048)
        {
          v49 = 522;
          goto LABEL_271;
        }
        if (v4 == 3072)
        {
          v49 = 1546;
          goto LABEL_271;
        }
        if (v4 != 4096)
          goto LABEL_132;
      }
      else
      {
        if (v4 == 0x2000)
        {
LABEL_270:
          v49 = 523;
LABEL_271:
          v52 = v49;
          goto LABEL_272;
        }
        if (v4 != 5120)
        {
          if (v4 != 10240)
            goto LABEL_132;
          goto LABEL_270;
        }
      }
      v43 = 11;
LABEL_240:
      LOBYTE(v52) = v43;
      HIBYTE(v52) = (v5 & 0x10) == 0;
LABEL_272:
      v53 = 1;
      v54 = 16 * (a3 & 1);
      v13 = JSC::DFG::ArrayMode::withProfile((unsigned __int8 *)&v52, a2, a4);
      v7 = v13 >> 8;
      v4 = v13 & 0x7FFF0000;
      v12 = HIBYTE(v13);
      return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
    }
    if (v4 < 0x200000)
    {
      if (v4 == 0x80000)
      {
        if ((v5 & 1) != 0)
          v30 = 0x20000;
        else
          v30 = 0x10000;
        if (a4)
          v30 = 0x40000;
        v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
        v4 = v30 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
        v22 = v4 | (16 * v6);
        v23 = 273;
        goto LABEL_111;
      }
      if (v4 != 0x100000)
        goto LABEL_132;
      v43 = 18;
      goto LABEL_240;
    }
    if (v4 < 0x800000)
    {
      if ((v4 - 0x200000) > 0x30 || ((1 << v4) & 0x1000100010001) == 0)
        goto LABEL_132;
      goto LABEL_78;
    }
    if (v4 > 8388671)
    {
      if (v4 != 8388736 && v4 != 8388672 && v4 != 8388800)
        goto LABEL_132;
    }
    else if (v4 != 0x800000)
    {
      goto LABEL_132;
    }
    goto LABEL_43;
  }
  if (v4 == 512)
    goto LABEL_4;
  if (v4 != 1024)
  {
    if (v4 != 768)
      goto LABEL_132;
LABEL_4:
    if ((v4 & 0xFDFFFCFF) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EA1B4);
    }
    if ((*(_DWORD *)(a2 + 8) & 0x100) == *(_DWORD *)(a2 + 8))
      v7 = (v5 & 0x10) == 0;
    else
      v7 = 6;
    if ((v4 & 0x100) == 0)
      v7 = 2;
    v8 = (v4 >> 25) & 1;
    if (a3 != 1)
      v8 = 0;
    v9 = v7 - 2;
    if ((v7 - 2) < 4)
      LOBYTE(v7) = 2;
    if (v9 > 3 || v6 != 0)
      goto LABEL_22;
    if ((v4 & 0x2A00000) != 0)
    {
      if ((v4 & 0x2AAA) == 0)
      {
        LOBYTE(v7) = 5;
        goto LABEL_22;
      }
    }
    else if ((v4 & 0x2AAA) != 0)
    {
      LOBYTE(v7) = 4;
LABEL_22:
      if ((v5 & 1) != 0)
        v11 = 0x20000;
      else
        v11 = 0x10000;
      if (a4)
        v11 = 0x40000;
      v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6) | v8;
      v4 = v11 | (v12 << 24);
      LOBYTE(v13) = v11 | 9;
      return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
    }
    LOBYTE(v7) = 3;
    goto LABEL_22;
  }
  if ((v5 & 1) != 0)
    v47 = 0x20000;
  else
    v47 = 0x10000;
  if (a4)
    v47 = 0x40000;
  v12 = (8 * v5) & 0x20 | (16 * (a3 & 1)) & 0xBF | (((v5 >> 5) & 1) << 6);
  v4 = v47 & 0x8FFFFFFF | (((v12 >> 4) & 7) << 28);
  v22 = v4 | (16 * v6);
  v23 = 266;
LABEL_111:
  v13 = v22 ^ v23;
LABEL_40:
  v7 = v13 >> 8;
  return v4 & 0xFF0000 | (v12 << 24) | (v7 << 8) | v13;
}

uint64_t JSC::DFG::ArrayMode::withProfile(unsigned __int8 *a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v3 = a1[1];
  v4 = *(_DWORD *)(a2 + 4);
  if ((v3 - 2) >= 4)
  {
    v5 = *a1;
    v6 = v3 << 8;
    goto LABEL_8;
  }
  v5 = *a1;
  v6 = 512;
  if ((v4 & 0x10) == 0 && (v5 - 6) <= 4)
  {
    if ((v5 - 7) < 3)
    {
      v7 = *(_DWORD *)(a2 + 8) & 0x2AAA;
      if ((*(_DWORD *)(a2 + 8) & 0x2A00000) != 0)
      {
        if (!v7)
        {
          v6 = 1280;
          goto LABEL_8;
        }
      }
      else if (v7)
      {
        v6 = 1024;
        goto LABEL_8;
      }
      v6 = 768;
      goto LABEL_8;
    }
    v6 = 768;
    if (v5 != 6 && v5 != 10)
    {
      result = 261;
      __break(0xC471u);
      return result;
    }
  }
LABEL_8:
  if ((v4 & 1) != 0)
    v8 = 0x20000;
  else
    v8 = 0x10000;
  if (a3)
    v8 = 0x40000;
  return v8 | (((8 * v4) & 0x20 | (((v4 >> 5) & 1) << 6) | a1[3] & 0x1F) << 24) | v6 | v5;
}

uint64_t JSC::DFG::ArrayMode::refine(JSC::DFG::ArrayMode *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::ArrayMode *v8;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t *v19;
  int v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  char v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char hasExitSite;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unsigned __int8 *v106;
  int v107;
  unsigned int v108;
  uint64_t **v109[3];
  JSC::DFG::Node *v110;
  int v111;
  __int16 v112;
  char v113;
  _BYTE v114[8];
  unsigned __int8 *v115;
  char v116;
  char v117;
  uint64_t v118;

  v8 = this;
  v118 = *MEMORY[0x1E0C80C00];
  v110 = a3;
  if (!a4 || !a5)
  {
    v23 = 0;
    v25 = *((_BYTE *)this + 3) & 0x10;
    LOBYTE(this) = 3;
LABEL_121:
    v24 = 0x10000;
    return v24 & 0xFF0000 | (v25 << 24) | v23 & 0xFF00 | this;
  }
  if ((a5 & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    v33 = *((_BYTE *)this + 3);
    if ((v33 & 0x20) == 0)
    {
      v23 = 0;
LABEL_197:
      v25 = v33 & 0x10;
      LOBYTE(this) = 4;
      goto LABEL_121;
    }
  }
  v12 = *((_QWORD *)a2 + 5);
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a3 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a3 & 1) != 0)
    v14 = *(_QWORD *)(*(_QWORD *)a3 & 0xFFFFFFFF8);
  if (v14)
    v12 = *(_QWORD *)(v14 + 8);
  v15 = *(_QWORD *)(v12 + 56);
  if ((v13 & 2) != 0)
  {
    LODWORD(v16) = -1;
  }
  else if ((v13 & 1) != 0)
  {
    LODWORD(v16) = *(_DWORD *)((*(_QWORD *)a3 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v16 = v13 >> 36;
  }
  v17 = (unsigned __int8 *)(v15 + 31);
  if (__ldaxr((unsigned __int8 *)(v15 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_14;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 31);
LABEL_14:
  v19 = *(uint64_t **)(v15 + 96);
  if (v19 && (v27 = *((_DWORD *)v19 + 3)) != 0)
  {
    v28 = *v19;
    v29 = v27 - 1;
    while (1)
    {
      v30 = v29;
      if ((_DWORD)v16 == *(_DWORD *)(v28 + 8 * v29) && *(_BYTE *)(v28 + 8 * v29 + 4) == 18)
        break;
      v20 = 0;
      --v29;
      if (!v30)
        goto LABEL_16;
    }
    v20 = 1;
  }
  else
  {
    v20 = 0;
  }
LABEL_16:
  v21 = __ldxr(v17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v17))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v20)
  {
LABEL_196:
    v23 = 0;
    v33 = *((_BYTE *)v8 + 3);
    goto LABEL_197;
  }
  v109[0] = (uint64_t **)&v110;
  v109[1] = (uint64_t **)v8;
  v109[2] = (uint64_t **)a2;
  v22 = *(unsigned __int8 *)v8;
  switch(*(_BYTE *)v8)
  {
    case 0:
    case 2:
      v31 = a4 & 0xFFFFFDFFFFFFFFFFLL;
      if ((a4 & 0xFFFFFDFFFFFFFFFFLL) != 0 && (a4 & 0xFFFFFDFFCFFFFFFFLL) == 0)
      {
        v25 = *((_BYTE *)v8 + 3) & 0x7F;
        v24 = (*((unsigned __int8 *)v8 + 2) << 16) & 0x80FFFFFF | (v25 << 24);
        v23 = *((unsigned __int8 *)v8 + 1) << 8;
        v32 = 5;
        goto LABEL_42;
      }
      if (a4 > 0x20000007FFFLL)
      {
        if (a4 != 0x20000010000 && a4 != 0x20000008000)
        {
LABEL_99:
          v68 = *((unsigned __int8 *)v8 + 1);
          v69 = *((_BYTE *)v8 + 3);
          v70 = *((unsigned __int16 *)v110 + 9);
          if (v70 != 92 && v70 != 102)
            goto LABEL_113;
          v71 = *((_QWORD *)a2 + 5);
          v72 = *(_QWORD *)v110;
          v73 = *(_QWORD *)v110 & 0xFFFFFFFF8;
          if ((*(_QWORD *)v110 & 1) != 0)
            v73 = *(_QWORD *)(*(_QWORD *)v110 & 0xFFFFFFFF8);
          if (v73)
            v71 = *(_QWORD *)(v73 + 8);
          v74 = *(_QWORD *)(v71 + 56);
          if ((v72 & 2) != 0)
          {
            LODWORD(v72) = -1;
          }
          else if ((v72 & 1) != 0)
          {
            LODWORD(v72) = *(_DWORD *)((v72 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v72 >>= 36;
          }
          v111 = v72;
          v112 = 15;
          v113 = 0;
          v75 = (unsigned __int8 *)(v74 + 31);
          v117 = 0;
          v115 = (unsigned __int8 *)(v74 + 31);
          v116 = 1;
          if (__ldaxr((unsigned __int8 *)(v74 + 31)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v75))
          {
LABEL_110:
            v117 = 1;
            hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v74 + 96), (uint64_t)v114, &v111);
            if (v116)
            {
              v88 = v115;
              v89 = __ldxr(v115);
              if (v89 == 1)
              {
                if (!__stlxr(0, v115))
                  goto LABEL_111;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v88, 0, v77, v78, v79, v80, v81, v82);
            }
LABEL_111:
            if ((hasExitSite & 1) != 0 || *((unsigned __int8 *)v8 + 2) >= 2u)
            {
              v68 = *((unsigned __int8 *)v8 + 1);
              v69 = *((_BYTE *)v8 + 3);
              v84 = 0x40000;
              goto LABEL_114;
            }
LABEL_113:
            v84 = 0x10000;
LABEL_114:
            v85 = v69 & 0x7F;
            if (v31 <= 127)
            {
              switch(v31)
              {
                case 64:
                  v49 = (v85 << 24) | (v68 << 8) | v84 | 0x10u;
                  goto LABEL_62;
                case 16:
                  v49 = (v85 << 24) | (v68 << 8) | v84 | 0xEu;
                  break;
                case 32:
                  v49 = (v85 << 24) | (v68 << 8) | v84 | 0xFu;
                  break;
                default:
                  goto LABEL_118;
              }
              goto LABEL_62;
            }
            if (v31 <= 511)
            {
              if (v31 == 128)
              {
                v86 = (v85 << 24) | (v68 << 8);
                v87 = 17;
                goto LABEL_176;
              }
              if (v31 == 256)
              {
                v86 = (v85 << 24) | (v68 << 8);
                v87 = 18;
LABEL_176:
                v49 = v86 | v84 | v87;
                goto LABEL_62;
              }
              goto LABEL_118;
            }
            if (v31 <= 2047)
            {
              if (v31 == 512)
              {
                v86 = (v85 << 24) | (v68 << 8);
                v87 = 19;
                goto LABEL_176;
              }
              if (v31 == 1024)
              {
                v86 = (v85 << 24) | (v68 << 8);
                v87 = 20;
                goto LABEL_176;
              }
LABEL_118:
              v23 = 0;
              v25 = *((_BYTE *)v8 + 3) & 0x10;
              if (*(_BYTE *)v8 == 2)
                LOBYTE(this) = 3;
              else
                LOBYTE(this) = 4;
              goto LABEL_121;
            }
            if (v31 <= 4095)
            {
              if (v31 == 2048)
              {
                v86 = (v85 << 24) | (v68 << 8);
                v87 = 21;
                goto LABEL_176;
              }
              goto LABEL_118;
            }
            if (v31 == 4096)
            {
              v86 = (v85 << 24) | (v68 << 8);
              v87 = 22;
              goto LABEL_176;
            }
            if (v31 == 0x2000)
            {
              v86 = (v85 << 24) | (v68 << 8);
              v87 = 23;
              goto LABEL_176;
            }
            if (v31 != 0x4000)
              goto LABEL_118;
            v49 = (v85 << 24) | (v68 << 8) | v84 | 0x18u;
LABEL_62:
            LODWORD(this) = JSC::DFG::ArrayMode::refine(JSC::DFG::Graph &,JSC::DFG::Node *,unsigned long long,unsigned long long,unsigned long long)const::$_0::operator()(v109, v49);
            v23 = (unsigned __int16)this & 0xFF00;
            v24 = this & 0x7FFF0000;
LABEL_24:
            v25 = this >> 24;
            return v24 & 0xFF0000 | (v25 << 24) | v23 & 0xFF00 | this;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v75);
          goto LABEL_110;
        }
      }
      else if (a4 != 0x8000 && a4 != 0x10000)
      {
        goto LABEL_99;
      }
      v50 = *((_QWORD *)a2 + 5);
      v51 = *(_QWORD *)v110;
      v52 = *(_QWORD *)v110 & 0xFFFFFFFF8;
      if ((*(_QWORD *)v110 & 1) != 0)
        v52 = *(_QWORD *)(*(_QWORD *)v110 & 0xFFFFFFFF8);
      if (v52)
        v50 = *(_QWORD *)(v52 + 8);
      v53 = *(_QWORD *)(v50 + 56);
      if ((v51 & 2) != 0)
      {
        LODWORD(v54) = -1;
      }
      else if ((v51 & 1) != 0)
      {
        LODWORD(v54) = *(_DWORD *)((*(_QWORD *)v110 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v54 = v51 >> 36;
      }
      v111 = v54;
      v112 = 15;
      v113 = 0;
      v55 = (unsigned __int8 *)(v53 + 31);
      v117 = 0;
      v115 = (unsigned __int8 *)(v53 + 31);
      v116 = 1;
      if (__ldaxr((unsigned __int8 *)(v53 + 31)))
      {
        __clrex();
LABEL_78:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v55);
        goto LABEL_79;
      }
      if (__stxr(1u, v55))
        goto LABEL_78;
LABEL_79:
      v117 = 1;
      v63 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v53 + 96), (uint64_t)v114, &v111);
      if (!v116)
        goto LABEL_80;
      v66 = v115;
      v67 = __ldxr(v115);
      if (v67 == 1)
      {
        if (!__stlxr(0, v115))
          goto LABEL_80;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v66, 0, v57, v58, v59, v60, v61, v62);
LABEL_80:
      if ((v63 & 1) != 0 || (v108 = *((unsigned __int8 *)v8 + 2), v108 >= 2))
      {
        v23 = 0;
        v25 = *((_BYTE *)v8 + 3) & 0x10;
        if (v31 == 0x8000)
          v24 = 0x40000;
        else
          v24 = 0x10000;
        if (v31 == 0x8000)
          LOBYTE(this) = 12;
        else
          LOBYTE(this) = 4;
      }
      else
      {
        v25 = *((_BYTE *)v8 + 3) & 0x7F;
        v24 = (v108 << 16) & 0x80FFFFFF | (v25 << 24);
        v23 = *((unsigned __int8 *)v8 + 1) << 8;
        if (v31 == 0x8000)
          v32 = 12;
        else
          v32 = 13;
LABEL_42:
        LOBYTE(this) = v23 | v32;
      }
      return v24 & 0xFF0000 | (v25 << 24) | v23 & 0xFF00 | this;
    case 1:
      if (a6)
      {
        if ((a6 & 0xFFFFFFFCFFFFFFFFLL) != 0)
        {
LABEL_179:
          v25 = *((_BYTE *)v8 + 3) & 0x70 | 1;
          v24 = (v25 << 24) | (*((unsigned __int8 *)v8 + 2) << 16);
          v23 = *((unsigned __int8 *)v8 + 1) << 8;
          if ((a6 & 0xFF00000000) == 0 || (a6 & 0xFFFFFF00FFFFFFFFLL) != 0)
          {
LABEL_181:
            v32 = 9;
            goto LABEL_42;
          }
          LOBYTE(this) = 8;
        }
        else
        {
          v25 = *((_BYTE *)v8 + 3) & 0x70 | 1;
          v24 = (v25 << 24) | (*((unsigned __int8 *)v8 + 2) << 16);
          v23 = *((unsigned __int8 *)v8 + 1) << 8;
          LOBYTE(this) = 7;
        }
      }
      else
      {
        v25 = *((_BYTE *)v8 + 3) & 0x7F;
        v24 = (*((unsigned __int8 *)v8 + 2) << 16) & 0x80FFFFFF | (v25 << 24);
        v23 = *((unsigned __int8 *)v8 + 1) << 8;
        LOBYTE(this) = 3;
      }
      return v24 & 0xFF0000 | (v25 << 24) | v23 & 0xFF00 | this;
    case 6:
      v90 = *((unsigned __int16 *)v110 + 9);
      if (v90 == 110)
      {
        v91 = *((_QWORD *)v110 + 9);
        if (v91)
        {
          if ((v91 & 1) != 0)
            v91 &= ~1uLL;
          else
            v91 = *(_QWORD *)(v91 + 8);
        }
        if (v91 != *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 41952) + 1768))
          goto LABEL_196;
        goto LABEL_143;
      }
      if (v90 != 92)
      {
        if (v90 != 158)
          goto LABEL_196;
LABEL_143:
        if (*((unsigned __int8 *)v8 + 1) - 2 <= 3)
        {
LABEL_23:
          LODWORD(this) = *(_DWORD *)v8;
          v23 = *(_DWORD *)v8 & 0xFF00;
          v24 = *(_DWORD *)v8 & 0xFFFF0000;
          goto LABEL_24;
        }
        goto LABEL_196;
      }
      if (*((unsigned __int8 *)v8 + 1) - 3 > 2)
        goto LABEL_196;
      v92 = *((_QWORD *)a2 + 5);
      v93 = *(_QWORD *)v110;
      v94 = *(_QWORD *)v110 & 0xFFFFFFFF8;
      if ((*(_QWORD *)v110 & 1) != 0)
        v94 = *(_QWORD *)(*(_QWORD *)v110 & 0xFFFFFFFF8);
      if (v94)
        v92 = *(_QWORD *)(v94 + 8);
      v95 = *(_QWORD *)(v92 + 56);
      if ((v93 & 2) != 0)
      {
        LODWORD(v96) = -1;
      }
      else if ((v93 & 1) != 0)
      {
        LODWORD(v96) = *(_DWORD *)((*(_QWORD *)v110 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v96 = v93 >> 36;
      }
      v111 = v96;
      v112 = 15;
      v113 = 0;
      v97 = (unsigned __int8 *)(v95 + 31);
      v117 = 0;
      v115 = (unsigned __int8 *)(v95 + 31);
      v116 = 1;
      if (__ldaxr((unsigned __int8 *)(v95 + 31)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v97))
      {
LABEL_166:
        v117 = 1;
        v105 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v95 + 96), (uint64_t)v114, &v111);
        if (v116)
        {
          v106 = v115;
          v107 = __ldxr(v115);
          if (v107 == 1)
          {
            if (!__stlxr(0, v115))
              goto LABEL_167;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v106, 0, v99, v100, v101, v102, v103, v104);
        }
LABEL_167:
        if ((v105 & 1) == 0
          && JSC::DFG::Graph::isWatchingArrayPrototypeChainIsSaneWatchpoint(a2, v110, v99, v100, v101, v102, v103, v104))
        {
          v32 = *(_BYTE *)v8;
          v25 = *((_BYTE *)v8 + 3) & 0x7F;
          v24 = v25 << 24;
          v23 = *((unsigned __int8 *)v8 + 1) << 8;
          goto LABEL_42;
        }
        goto LABEL_196;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v97);
      goto LABEL_166;
    case 7:
      if ((a6 & 0xFFFFFFFCFFFFFFFFLL) != 0)
        goto LABEL_179;
      goto LABEL_23;
    case 8:
      if (!a6 || (a6 & 0xFF00000000) != 0 && (a6 & 0xFFFFFF00FFFFFFFFLL) == 0)
        goto LABEL_23;
      v25 = *((_BYTE *)v8 + 3) & 0x70 | 1;
      v24 = (v25 << 24) | (*((unsigned __int8 *)v8 + 2) << 16);
      v23 = *((unsigned __int8 *)v8 + 1) << 8;
      goto LABEL_181;
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
      v34 = *((unsigned __int16 *)v110 + 9);
      if (v34 != 92 && v34 != 102)
        goto LABEL_125;
      v35 = *((_QWORD *)a2 + 5);
      v36 = *(_QWORD *)v110;
      v37 = *(_QWORD *)v110 & 0xFFFFFFFF8;
      if ((*(_QWORD *)v110 & 1) != 0)
        v37 = *(_QWORD *)(*(_QWORD *)v110 & 0xFFFFFFFF8);
      if (v37)
        v35 = *(_QWORD *)(v37 + 8);
      v38 = *(_QWORD *)(v35 + 56);
      if ((v36 & 2) != 0)
      {
        LODWORD(v39) = -1;
      }
      else if ((v36 & 1) != 0)
      {
        LODWORD(v39) = *(_DWORD *)((*(_QWORD *)v110 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v39 = v36 >> 36;
      }
      v111 = v39;
      v112 = 15;
      v113 = 0;
      v40 = (unsigned __int8 *)(v38 + 31);
      v117 = 0;
      v115 = (unsigned __int8 *)(v38 + 31);
      v116 = 1;
      if (__ldaxr((unsigned __int8 *)(v38 + 31)))
      {
        __clrex();
LABEL_58:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v40);
        goto LABEL_59;
      }
      if (__stxr(1u, v40))
        goto LABEL_58;
LABEL_59:
      v117 = 1;
      v48 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v38 + 96), (uint64_t)v114, &v111);
      if (!v116)
        goto LABEL_60;
      v64 = v115;
      v65 = __ldxr(v115);
      if (v65 == 1)
      {
        if (!__stlxr(0, v115))
          goto LABEL_60;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v64, 0, v42, v43, v44, v45, v46, v47);
LABEL_60:
      if ((v48 & 1) != 0 || *((unsigned __int8 *)v8 + 2) > 1u)
      {
        v49 = (unsigned __int16)(*((unsigned __int8 *)v8 + 1) << 8) | ((unint64_t)(*((_BYTE *)v8 + 3) & 0x7F) << 24) | *(unsigned __int8 *)v8 | 0x40000;
      }
      else
      {
        v22 = *(unsigned __int8 *)v8;
LABEL_125:
        v49 = (unsigned __int16)(*((unsigned __int8 *)v8 + 1) << 8) | ((unint64_t)(*((_BYTE *)v8 + 3) & 0x7F) << 24) | v22 | 0x10000;
      }
      goto LABEL_62;
    default:
      goto LABEL_23;
  }
}

uint64_t JSC::DFG::ArrayMode::refine(JSC::DFG::Graph &,JSC::DFG::Node *,unsigned long long,unsigned long long,unsigned long long)const::$_0::operator()(uint64_t ***a1, unint64_t a2)
{
  uint64_t *v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int hasExitSite;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v30;
  __int16 v31;
  char v32;
  _BYTE v33[8];
  unsigned __int8 *v34;
  char v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (*((_WORD *)v2 + 9) == 101)
  {
    v3 = 0;
    v4 = *((_BYTE *)a1[1] + 3) & 0x10;
    LOBYTE(v5) = 1;
    v6 = 4;
    return (v5 << 16) | (v4 << 24) | (v3 << 8) | v6;
  }
  v7 = a2;
  v8 = a1[2][5];
  v9 = *v2;
  v10 = (uint64_t *)(v9 & 0xFFFFFFFF8);
  v11 = v9 & 0xFFFFFFFF8;
  if ((v9 & 1) != 0)
  {
    v11 = *v10;
    if (!*v10)
      goto LABEL_5;
  }
  else if (!v11)
  {
    goto LABEL_5;
  }
  v8 = *(uint64_t **)(v11 + 8);
LABEL_5:
  v12 = v8[7];
  if ((v9 & 2) != 0)
  {
    LODWORD(v9) = -1;
  }
  else if ((v9 & 1) != 0)
  {
    LODWORD(v9) = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v9 >>= 36;
  }
  v13 = a2 >> 8;
  v14 = a2 >> 16;
  v15 = a2 >> 24;
  v30 = v9;
  v31 = 29;
  v32 = 0;
  v16 = (unsigned __int8 *)(v12 + 31);
  v36 = 0;
  v34 = (unsigned __int8 *)(v12 + 31);
  v35 = 1;
  if (__ldaxr((unsigned __int8 *)(v12 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_12;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_12:
  v36 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v12 + 96), (uint64_t)v33, &v30);
  if (!v35)
    goto LABEL_18;
  v25 = v34;
  v26 = __ldxr(v34);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v34))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v18, v19, v20, v21, v22, v23);
LABEL_18:
  v27 = v7 | (v14 << 16) | ((_DWORD)v15 << 24) | (v13 << 8) | 0x40000000;
  v5 = HIWORD(v27);
  v28 = HIBYTE(v27);
  v6 = v7;
  v3 = v13;
  if (hasExitSite)
  {
    v4 = v28;
  }
  else
  {
    LOBYTE(v5) = v14;
    v4 = v15;
  }
  return (v5 << 16) | (v4 << 24) | (v3 << 8) | v6;
}

void JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::ArrayMode *this@<X0>, JSC::DFG::Graph *a2@<X1>, const JSC::CodeOrigin *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v12 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) == 0)
  {
    v13 = *((_QWORD *)a2 + 4);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
LABEL_4:
    v17 = v14;
    goto LABEL_5;
  }
  v23 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v24 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v24 != 0x3FFFFFFF) ? (v25 = v24 == -1) : (v25 = 1), v25))
  {
    v26 = 2;
  }
  else if (v24 >> 28)
  {
    v32 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = v23;
    *(_DWORD *)(v32 + 8) = v24;
    v26 = 1;
    v23 = v32;
  }
  else
  {
    v26 = v23;
    v23 = 0;
  }
  v12 = v23 | v26;
  v13 = *((_QWORD *)a2 + 4);
  if (((v23 | v26) & 1) == 0)
    goto LABEL_3;
  v27 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v28 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v28 != 0x3FFFFFFF) ? (v29 = v28 == -1) : (v29 = 1), v29))
  {
    v30 = 2;
  }
  else if (v28 >> 28)
  {
    v33 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
    v34 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = v27;
    *(_DWORD *)(v34 + 8) = v33;
    v30 = 1;
    v27 = v34;
  }
  else
  {
    v30 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v27 = 0;
  }
  v31 = v27 | v30;
  v14 = (_QWORD *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 1) == 0)
  {
    v16 = 0;
    v15 = 1;
    goto LABEL_4;
  }
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)*v14;
LABEL_5:
  if (v17)
    v13 = v17[1];
  v18 = *(uint64_t **)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = *((unsigned __int8 *)this + 1);
  switch(v19)
  {
    case 4:
      *a9 = 0;
LABEL_11:
      v20 = *(unsigned __int8 *)this;
LABEL_12:
      JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::Graph &,JSC::CodeOrigin const&)const::$_0::operator()(v20, v18, a9);
      return;
    case 1:
      switch(*(_BYTE *)this)
      {
        case 0xE:
          v21 = v18 + 208;
          goto LABEL_19;
        case 0xF:
          v21 = v18 + 217;
          goto LABEL_19;
        case 0x10:
          v21 = v18 + 223;
          goto LABEL_19;
        case 0x11:
          v21 = v18 + 211;
          goto LABEL_19;
        case 0x12:
          v21 = v18 + 214;
          goto LABEL_19;
        case 0x13:
          v21 = v18 + 220;
          goto LABEL_19;
        case 0x14:
          v21 = v18 + 226;
          goto LABEL_19;
        case 0x15:
          v21 = v18 + 229;
          goto LABEL_19;
        case 0x16:
          v21 = v18 + 232;
          goto LABEL_19;
        case 0x17:
          v21 = v18 + 235;
          goto LABEL_19;
        case 0x18:
          v21 = v18 + 238;
LABEL_19:
          v22 = *v21;
          if ((v22 & 1) != 0)
            v22 = 0;
          *a9 = v22;
          return;
        case 0x19:
          __break(0xC471u);
          JUMPOUT(0x1982EB1C0);
        default:
          goto LABEL_16;
      }
    case 5:
      *a9 = 0;
      v20 = *(unsigned __int8 *)this;
      if ((*((_BYTE *)this + 3) & 0xF) != 0)
        goto LABEL_12;
      JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::Graph &,JSC::CodeOrigin const&)const::$_1::operator()(v20, v18, a9);
      break;
    case 3:
      *a9 = 0;
      v20 = *(unsigned __int8 *)this;
      if ((*((_BYTE *)this + 3) & 0xF) != 0)
        goto LABEL_12;
      JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::Graph &,JSC::CodeOrigin const&)const::$_1::operator()(v20, v18, a9);
      goto LABEL_11;
    default:
LABEL_16:
      *a9 = 0;
      break;
  }
}

uint64_t JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::Graph &,JSC::CodeOrigin const&)const::$_1::operator()(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(result)
  {
    case 9u:
      v4 = a2[222];
      break;
    case 8u:
      v4 = a2[221];
      break;
    case 7u:
      v4 = a2[220];
      break;
    default:
      return result;
  }
  if (v4)
    v5 = 16 * (v4 & 0xFFFFFFFE);
  else
    v5 = 0;
  v6 = *a3;
  if ((*a3 & 1) != 0)
    return WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a3, v5);
  if (v5 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
  {
    if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)result = 0x400000002;
      v8 = *a3;
      *(_QWORD *)(result + 8) = *a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(result + 16) = v5;
      v7 = v8 & 2 | result | 1;
    }
    else
    {
      v7 = *a3 & 2 | v5;
    }
    *a3 = v7;
  }
  return result;
}

uint64_t JSC::DFG::ArrayMode::originalArrayStructures(JSC::DFG::Graph &,JSC::CodeOrigin const&)const::$_0::operator()(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch((char)result)
  {
    case 6:
      v4 = a2[214];
      break;
    case 7:
      v4 = a2[215];
      break;
    case 8:
      v4 = a2[216];
      break;
    case 9:
      v4 = a2[217];
      break;
    case 10:
      v4 = a2[218];
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1982EB3F4);
  }
  if (v4)
    v5 = 16 * (v4 & 0xFFFFFFFE);
  else
    v5 = 0;
  v6 = *a3;
  if ((*a3 & 1) != 0)
    return WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a3, v5);
  if (v5 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
  {
    if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)result = 0x400000002;
      v8 = *a3;
      *(_QWORD *)(result + 8) = *a3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(result + 16) = v5;
      v7 = v8 & 2 | result | 1;
    }
    else
    {
      v7 = *a3 & 2 | v5;
    }
    *a3 = v7;
  }
  return result;
}

uint64_t JSC::DFG::ArrayMode::alreadyChecked(JSC::DFG::ArrayMode *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, const JSC::DFG::AbstractValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int **v36;
  uint64_t v37;
  unsigned int **v38;
  unsigned int *v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unint64_t v51;
  _BOOL4 v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  if ((*((_BYTE *)this + 3) & 0x10) != 0)
    v8 = 31;
  else
    v8 = 15;
  switch(*((_BYTE *)this + 1))
  {
    case 0:
    case 1:
      result = 1;
      if ((*((_DWORD *)a4 + 4) | (1 << a5)) != 1 << a5)
      {
        result = 0;
        v13 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 != 4 && (v13 & 2) == 0)
        {
          if ((v13 & 1) == 0)
          {
            if (v13 < 4)
              return 1;
            return (*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 8) & v8) == (_DWORD)a5;
          }
          v18 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
          v19 = 2 * *v18;
          do
          {
            result = v19 == 0;
            if (!(v19 * 4))
              break;
            v20 = (*(_BYTE *)(*(_QWORD *)&v18[v19] + 8) & v8);
            v19 -= 2;
          }
          while (v20 == (_DWORD)a5);
        }
      }
      return result;
    case 2:
      v10 = a5 | 1;
      result = 1;
      if ((*((_DWORD *)a4 + 4) | (1 << (a5 | 1))) != 1 << (a5 | 1))
      {
        result = 0;
        v12 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 != 4 && (v12 & 2) == 0)
        {
          if ((v12 & 1) != 0)
          {
            v21 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
            v22 = 2 * *v21;
            do
            {
              result = v22 == 0;
              if (!(v22 * 4))
                break;
              v23 = (*(_BYTE *)(*(_QWORD *)&v21[v22] + 8) & v8);
              v22 -= 2;
            }
            while (v23 == v10);
          }
          else
          {
            return v12 < 4 || (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 8) & v8) == v10;
          }
        }
      }
      return result;
    case 3:
    case 4:
    case 5:
      v24 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 == 4 || (*(_QWORD *)a4 & 2) != 0)
        return 0;
      if (!((v24 & 1) != 0 ? *(unsigned int *)(v24 & 0xFFFFFFFFFFFFFFFCLL) : v24 > 3))
        return 0;
      JSC::DFG::ArrayMode::originalArrayStructures(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v56);
      v34 = (unsigned int *)(*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFFCLL);
      if ((*(_QWORD *)a4 & 1) != 0)
      {
        v37 = *v34;
        v35 = v56;
        if ((_DWORD)v37)
        {
          v38 = (unsigned int **)(v34 + 2);
          v39 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) == 0)
          {
            LOBYTE(result) = 1;
            do
            {
              v40 = *v38++;
              result = result & (v40 == v39);
              --v37;
            }
            while (v37);
LABEL_60:
            if ((v35 & 1) != 0)
            {
              v45 = result;
              WTF::fastFree(v35 & 0xFFFFFFFFFFFFFFFCLL, v27, v28, v29, v30, v31, v32, v33);
              return v45;
            }
            return result;
          }
          v46 = *v39;
          if ((_DWORD)v46)
          {
            v47 = 0;
            v48 = (unsigned int *)*((_QWORD *)v39 + 1);
            v49 = v39 + 4;
            LOBYTE(result) = 1;
            do
            {
              v50 = v38[v47];
              if (v48 == v50)
              {
                v52 = 1;
              }
              else
              {
                v51 = 0;
                while (v46 - 1 != v51)
                {
                  v27 = *(unsigned int **)&v49[2 * v51++];
                  if (v27 == v50)
                    goto LABEL_70;
                }
                v51 = v46;
LABEL_70:
                v52 = v51 < v46;
              }
              if ((_BYTE)result)
                result = v52;
              else
                result = 0;
              ++v47;
            }
            while (v47 != v37);
            goto LABEL_60;
          }
LABEL_78:
          result = 0;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = v56;
        if (v34)
        {
          v36 = (unsigned int **)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) == 0)
          {
            result = v36 == (unsigned int **)v34;
            goto LABEL_60;
          }
          v41 = *(unsigned int *)v36;
          if ((_DWORD)v41)
          {
            if (v36[1] != v34)
            {
              v42 = 0;
              v43 = (unsigned int *)(v36 + 2);
              while (v41 - 1 != v42)
              {
                v44 = *(unsigned int **)&v43[2 * v42++];
                if (v44 == v34)
                  goto LABEL_80;
              }
              v42 = v41;
LABEL_80:
              result = v42 < v41;
              goto LABEL_60;
            }
            goto LABEL_59;
          }
          goto LABEL_78;
        }
      }
LABEL_59:
      result = 1;
      goto LABEL_60;
    case 6:
      result = 1;
      if ((*((_DWORD *)a4 + 4) | (1 << (a5 | 1)) | (1 << a5)) != ((1 << (a5 | 1)) | (1 << a5)))
      {
        result = 0;
        v15 = *(_QWORD *)a4;
        if (*(_QWORD *)a4 != 4 && (v15 & 2) == 0)
        {
          if ((v15 & 1) != 0)
          {
            v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
            v16 = *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else
          {
            v16 = v15 > 3;
            v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
          }
          v53 = v8 & 0x1E;
          v54 = 8 * v16;
          do
          {
            result = v54 == 0;
            if (!v54)
              break;
            v55 = v17;
            if ((v15 & 1) != 0)
              v55 = *(_QWORD *)(v17 + v54);
            v54 -= 8;
          }
          while ((*(_BYTE *)(v55 + 8) & v53) == (_DWORD)a5);
        }
      }
      return result;
    default:
      return 0;
  }
}

{
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  int v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  int v35;

  v8 = (unsigned __int8 *)this;
  v9 = *(unsigned __int8 *)this;
  if (v9 != 9)
  {
    result = 1;
    switch(v9)
    {
      case 3:
        return 0;
      case 4:
        return result;
      case 5:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFCFFFFFFFLL) == 0;
      case 6:
        this = (JSC::DFG::ArrayMode *)v8;
        v10 = 2;
        return JSC::DFG::ArrayMode::alreadyChecked(this, a2, a3, a4, v10, a6, a7, a8);
      case 7:
        this = (JSC::DFG::ArrayMode *)v8;
        v10 = 4;
        return JSC::DFG::ArrayMode::alreadyChecked(this, a2, a3, a4, v10, a6, a7, a8);
      case 8:
        this = (JSC::DFG::ArrayMode *)v8;
        v10 = 6;
        return JSC::DFG::ArrayMode::alreadyChecked(this, a2, a3, a4, v10, a6, a7, a8);
      case 10:
        this = (JSC::DFG::ArrayMode *)v8;
        v10 = 10;
        return JSC::DFG::ArrayMode::alreadyChecked(this, a2, a3, a4, v10, a6, a7, a8);
      case 11:
        v13 = v8[1];
        if (v13 == 2)
        {
          if ((*((_DWORD *)a4 + 4) & 0xFFFFD7FF) == 0)
            return result;
          v14 = *(_QWORD *)a4;
          if (*(_QWORD *)a4 != 4)
          {
            if ((v14 & 1) != 0)
            {
              v30 = v14 & 0xFFFFFFFFFFFFFFFCLL;
              v29 = *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
            }
            else
            {
              v29 = v14 > 3;
              v30 = v14 & 0xFFFFFFFFFFFFFFFCLL;
            }
            v31 = 8 * v29;
            do
            {
              result = v31 == 0;
              if (!v31)
                break;
              v32 = v30;
              if ((v14 & 1) != 0)
                v32 = *(_QWORD *)(v30 + v31);
              v33 = *(_BYTE *)(v32 + 8);
              v34 = v33 & 0xE;
              v35 = v33 & 1;
              v31 -= 8;
            }
            while (v34 >= 0xA && v35 != 0);
            return result;
          }
        }
        else if (v13 >= 2)
        {
          if (v13 != 6)
          {
            if (v13 - 3 <= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x1982EBA50);
            }
            __break(0xC471u);
            JUMPOUT(0x1982EBA58);
          }
          if ((*((_DWORD *)a4 + 4) & 0xFFFFC3FF) == 0)
            return result;
          v24 = *(_QWORD *)a4;
          if (*(_QWORD *)a4 != 4)
          {
            if ((v24 & 1) != 0)
            {
              v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
              v25 = *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
            }
            else
            {
              v25 = v24 > 3;
              v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
            }
            v27 = 8 * v25;
            do
            {
              result = v27 == 0;
              if (!v27)
                break;
              v28 = v26;
              if ((v24 & 1) != 0)
                v28 = *(_QWORD *)(v26 + v27);
              v27 -= 8;
            }
            while ((*(_BYTE *)(v28 + 8) & 0xEu) > 9);
            return result;
          }
        }
        else
        {
          if ((*((_DWORD *)a4 + 4) & 0xFFFFEBFF) == 0)
            return result;
          v15 = *(_QWORD *)a4;
          if (*(_QWORD *)a4 != 4)
          {
            if ((v15 & 1) != 0)
            {
              v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
              v16 = *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
            }
            else
            {
              v16 = v15 > 3;
              v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
            }
            v18 = 8 * v16;
            do
            {
              result = v18 == 0;
              if (!v18)
                break;
              v19 = v17;
              if ((v15 & 1) != 0)
                v19 = *(_QWORD *)(v17 + v18);
              v20 = *(_BYTE *)(v19 + 8);
              v21 = v20 & 0xE;
              v22 = v20 & 1;
              v18 -= 8;
            }
            while (v21 >= 0xA && v22 == 0);
            return result;
          }
        }
        return 0;
      case 12:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFF7FFFLL) == 0;
      case 13:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFEFFFFLL) == 0;
      case 14:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFEFLL) == 0;
      case 15:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFDFLL) == 0;
      case 16:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFBFLL) == 0;
      case 17:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFF7FLL) == 0;
      case 18:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFEFFLL) == 0;
      case 19:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFDFFLL) == 0;
      case 20:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFBFFLL) == 0;
      case 21:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFF7FFLL) == 0;
      case 22:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFEFFFLL) == 0;
      case 23:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFDFFFLL) == 0;
      case 24:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFBFFFLL) == 0;
      case 25:
        return (*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFF800FLL) == 0;
      default:
        __break(0xC471u);
        JUMPOUT(0x1982EBA3CLL);
    }
  }
  v10 = 8;
  return JSC::DFG::ArrayMode::alreadyChecked(this, a2, a3, a4, v10, a6, a7, a8);
}

uint64_t JSC::DFG::toTypedArrayType(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 14;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 4;
      break;
    case 2:
      result = 6;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 7;
      break;
    case 7:
      result = 8;
      break;
    case 8:
      result = 9;
      break;
    case 9:
      result = 10;
      break;
    case 10:
      result = 11;
      break;
    case 11:
      __break(0xC471u);
      JUMPOUT(0x1982EBB4CLL);
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t JSC::DFG::toArrayType(int a1)
{
  if ((a1 - 1) > 0xA)
    return 4;
  else
    return byte_199154D39[(char)(a1 - 1)];
}

uint64_t JSC::DFG::refineTypedArrayType(uint64_t result, int a2)
{
  if ((_DWORD)result != 4)
  {
    if ((a2 - 1) > 0xA)
    {
      return 4;
    }
    else if (byte_199154D39[(char)(a2 - 1)] == (_DWORD)result)
    {
      return result;
    }
    else
    {
      return 25;
    }
  }
  return result;
}

BOOL JSC::DFG::ArrayMode::permitsBoundsCheckLowering(JSC::DFG::ArrayMode *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  BOOL v4;

  v1 = *(unsigned __int8 *)this;
  v2 = v1 >= 0x19;
  v4 = v1 == 25;
  v3 = (1 << v1) & 0x3FFCF80;
  v4 = !v4 && v2 || v3 == 0;
  return !v4 && *((unsigned __int8 *)this + 2) < 2u;
}

uint64_t JSC::DFG::ArrayMode::dump(JSC::DFG::ArrayMode *this, WTF::PrintStream *a2)
{
  char v4;
  WTF::PrintStream *v5;
  uint64_t result;
  char v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  BOOL v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v14 = *(_BYTE *)this;
  v13 = *((_BYTE *)this + 1);
  v12 = *((_BYTE *)this + 2);
  v4 = *((_BYTE *)this + 3);
  v11 = v4 & 0xF;
  v10 = (v4 & 0x10) != 0;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printImpl<JSC::DFG::Array::Type,char [2],JSC::DFG::Array::Class,char [2],JSC::DFG::Array::Speculation,char [2],JSC::DFG::Array::Conversion,char [2],JSC::DFG::Array::Action>(v5, &v14, "+", &v13, "+", &v12, "+", &v11, "+", &v10);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = *((_BYTE *)this + 3);
  if ((v7 & 0x20) != 0)
  {
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", "+LargeTypedArray");
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v7 = *((_BYTE *)this + 3);
  }
  if ((v7 & 0x40) != 0)
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v9, "%s", "+ResizableOrGrowableSharedTypedArray");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

JSC::DFG::AtTailAbstractState *JSC::DFG::AtTailAbstractState::AtTailAbstractState(JSC::DFG::AtTailAbstractState *this, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Graph *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  JSC::DFG::Graph *v70;
  _QWORD *v71;
  uint64_t v72;

  v8 = a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v71 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v10 = *((unsigned int *)a2 + 15);
  if ((_DWORD)v10)
  {
    if (v10 <= 0x10)
      v11 = 16;
    else
      v11 = *((unsigned int *)a2 + 15);
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EC26CLL);
    }
    v12 = WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)this + 4) = v11;
    *((_QWORD *)this + 1) = v12;
    v13 = *((unsigned int *)this + 5);
    if ((_DWORD)v13 != (_DWORD)v10)
      bzero((void *)(v12 + 8 * v13), ((8 * v10 - 8 * v13 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  *((_DWORD *)this + 5) = v10;
  v14 = *(_QWORD *)this;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v15 = *(unsigned int *)(v14 + 60);
  if ((_DWORD)v15)
  {
    if (v15 <= 0x10)
      v16 = 16;
    else
      v16 = *(unsigned int *)(v14 + 60);
    if (v16 >> 28)
    {
LABEL_107:
      __break(0xC471u);
      JUMPOUT(0x1982EC24CLL);
    }
    v17 = WTF::fastMalloc((WTF *)(16 * v16));
    *((_DWORD *)this + 8) = v16;
    *((_QWORD *)this + 3) = v17;
    v18 = *((unsigned int *)this + 9);
    if ((_DWORD)v18 != (_DWORD)v15)
      bzero((void *)(v17 + 16 * v18), (16 * v15 - 16 * v18) & 0xFFFFFFFFFFFFFFF0);
  }
  *((_DWORD *)this + 9) = v15;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  v72 = *((unsigned int *)v8 + 15);
  if ((_DWORD)v72)
  {
    v19 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v19))
    {
      if (v72 == ++v19)
        return this;
    }
    if ((_DWORD)v72 != (_DWORD)v19)
    {
      LODWORD(v21) = *((_DWORD *)v8 + 15);
      v70 = v8;
      while (1)
      {
        if (v21 <= v19)
          goto LABEL_107;
        v22 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v19);
        v23 = *(unsigned int *)(v22 + 8);
        if (*((_DWORD *)this + 5) <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1982EC254);
        }
        v24 = (uint64_t *)(*v71 + 8 * v23);
        v25 = *v24;
        if (*v24)
        {
          *v24 = 0;
          WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::deallocateTable(v25, a2, a3, a4, a5, a6, a7, a8);
        }
        v26 = *(_QWORD *)(v22 + 200);
        v27 = *(_DWORD *)(v26 + 124);
        if (v27)
          break;
LABEL_64:
        v53 = *(unsigned int *)(v22 + 8);
        if (*((_DWORD *)this + 9) <= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1982EC25CLL);
        }
        v54 = *((_QWORD *)this + 3) + 16 * v53;
        v55 = *(unsigned int *)(*(_QWORD *)this + 308);
        v56 = *(unsigned int *)(v54 + 8);
        v57 = *(_QWORD *)v54;
        v8 = v70;
        if (v56 < v55)
        {
          v58 = v56 + (v56 >> 2);
          if (v58 >= 0x10)
            v59 = v58 + 1;
          else
            v59 = 16;
          if (v59 <= v55)
            v60 = *(unsigned int *)(*(_QWORD *)this + 308);
          else
            v60 = v59;
          if (v60 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x1982EC264);
          }
          v61 = *(unsigned int *)(v54 + 12);
          v62 = WTF::fastMalloc((WTF *)(32 * v60));
          *(_DWORD *)(v54 + 8) = v60;
          *(_QWORD *)v54 = v62;
          if ((_DWORD)v61)
          {
            v63 = 32 * v61;
            v64 = v57;
            do
            {
              *(_QWORD *)v62 = 0;
              v65 = *(_QWORD *)v64;
              if ((*(_QWORD *)v64 & 1) != 0 && v65 != 4)
              {
                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v62, (_QWORD *)v64);
                v66 = *(_QWORD *)v62;
              }
              else
              {
                v66 = v65 & 0xFFFFFFFFFFFFFFFDLL;
                *(_QWORD *)v62 = v66;
              }
              v67 = v66 & 0xFFFFFFFFFFFFFFFDLL;
              v68 = v66 | 2;
              if ((*(_BYTE *)v64 & 2) == 0)
                v68 = v67;
              *(_QWORD *)v62 = v68;
              v69 = *(_OWORD *)(v64 + 8);
              *(_QWORD *)(v62 + 24) = *(_QWORD *)(v64 + 24);
              *(_OWORD *)(v62 + 8) = v69;
              if ((*(_QWORD *)v64 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
              v62 += 32;
              v64 += 32;
              v63 -= 32;
            }
            while (v63);
            v62 = *(_QWORD *)v54;
          }
          if (v57)
          {
            if (v62 == v57)
            {
              *(_QWORD *)v54 = 0;
              *(_DWORD *)(v54 + 8) = 0;
            }
            WTF::fastFree(v57, a2, a3, a4, a5, a6, a7, a8);
            v57 = *(_QWORD *)v54;
          }
          else
          {
            v57 = v62;
          }
        }
        if (v57)
          bzero((void *)(v57 + 32 * *(unsigned int *)(v54 + 12)), 32 * v55 - 32 * *(unsigned int *)(v54 + 12));
        *(_DWORD *)(v54 + 12) = v55;
        v19 = (v19 + 1);
        v21 = *((unsigned int *)v70 + 15);
        if (v21 > v19)
        {
          while (!*(_QWORD *)(*((_QWORD *)v70 + 6) + 8 * v19))
          {
            if (v21 == ++v19)
            {
              LODWORD(v19) = *((_DWORD *)v70 + 15);
              break;
            }
          }
        }
        if ((_DWORD)v72 == (_DWORD)v19)
          return this;
      }
      v28 = *(uint64_t **)(v26 + 112);
      v29 = &v28[5 * v27];
      while (1)
      {
        v30 = *v24;
        if (*v24
          || (WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(v24, 8uLL, 0, a4, a5, a6, a7, a8), (v30 = *v24) != 0))
        {
          v31 = *(_DWORD *)(v30 - 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = *v28;
        v33 = v31 & *v28;
        v34 = v30 + 40 * v33;
        v35 = *(_QWORD *)v34;
        if (*(_QWORD *)v34)
        {
          v36 = 0;
          v37 = 1;
          while (v35 != v32)
          {
            if (v35 == 1)
              v36 = v34;
            v33 = (v33 + v37) & v31;
            v34 = v30 + 40 * v33;
            v35 = *(_QWORD *)v34;
            ++v37;
            if (!*(_QWORD *)v34)
            {
              if (v36)
              {
                *(_QWORD *)(v36 + 32) = 0;
                *(_OWORD *)v36 = 0u;
                *(_OWORD *)(v36 + 16) = 0u;
                --*(_DWORD *)(*v24 - 16);
                v32 = *v28;
                v34 = v36;
              }
              goto LABEL_38;
            }
          }
          goto LABEL_53;
        }
LABEL_38:
        v38 = v28 + 1;
        *(_QWORD *)v34 = v32;
        v40 = (_BYTE *)(v34 + 8);
        v39 = *(_QWORD *)(v34 + 8);
        if ((uint64_t *)(v34 + 8) != v28 + 1)
        {
          if ((v39 & 1) != 0)
            WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v41 = *v38;
          if ((*v38 & 1) == 0 || v41 == 4)
          {
            v42 = v41 & 0xFFFFFFFFFFFFFFFDLL;
            v39 = v41 | 2;
            if ((*v40 & 2) == 0)
              v39 = v42;
            *(_QWORD *)v40 = v39;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v34 + 8), v28 + 1);
            v39 = *(_QWORD *)v40;
          }
        }
        v43 = v39 & 0xFFFFFFFFFFFFFFFDLL;
        v44 = v39 | 2;
        if ((*(_BYTE *)v38 & 2) == 0)
          v44 = v43;
        *(_QWORD *)(v34 + 8) = v44;
        v45 = *((_OWORD *)v28 + 1);
        *(_QWORD *)(v34 + 32) = v28[4];
        *(_OWORD *)(v34 + 16) = v45;
        v46 = *v24;
        v47 = *v24 ? *(_DWORD *)(v46 - 12) + 1 : 1;
        *(_DWORD *)(v46 - 12) = v47;
        v48 = *v24;
        v49 = *v24 ? *(_DWORD *)(v48 - 12) : 0;
        v50 = (*(_DWORD *)(v48 - 16) + v49);
        v51 = *(unsigned int *)(v48 - 4);
        if (v51 > 0x400)
          break;
        if (3 * v51 <= 4 * v50)
        {
          if (!(_DWORD)v51)
          {
            v52 = 8;
LABEL_57:
            WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(v24, v52, v34, a4, a5, a6, a7, a8);
            goto LABEL_53;
          }
LABEL_74:
          v52 = ((_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51)));
          goto LABEL_57;
        }
LABEL_53:
        v28 += 5;
        if (v28 == v29)
          goto LABEL_64;
      }
      if (v51 > 2 * v50)
        goto LABEL_53;
      goto LABEL_74;
    }
  }
  return this;
}

void JSC::DFG::AtTailAbstractState::~AtTailAbstractState(JSC::DFG::AtTailAbstractState *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v9 = *((unsigned int *)this + 9);
  v10 = *((_QWORD *)this + 3);
  if ((_DWORD)v9)
  {
    v11 = v10 + 16 * v9;
    do
    {
      v12 = *(unsigned int *)(v10 + 12);
      v13 = *(_QWORD **)v10;
      if ((_DWORD)v12)
      {
        v14 = 32 * v12;
        do
        {
          if ((*v13 & 1) != 0)
            WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v13 += 4;
          v14 -= 32;
        }
        while (v14);
        v13 = *(_QWORD **)v10;
      }
      if (v13)
      {
        *(_QWORD *)v10 = 0;
        *(_DWORD *)(v10 + 8) = 0;
        WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 16;
    }
    while (v10 != v11);
    v10 = *((_QWORD *)this + 3);
  }
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((unsigned int *)this + 5);
  v16 = (uint64_t *)*((_QWORD *)this + 1);
  if ((_DWORD)v15)
  {
    v17 = &v16[v15];
    do
    {
      v18 = *v16;
      if (*v16)
      {
        v19 = *(unsigned int *)(v18 - 4);
        if ((_DWORD)v19)
        {
          v20 = (_QWORD *)(v18 + 8);
          do
          {
            if (*(v20 - 1) != 1 && (*v20 & 1) != 0)
              WTF::fastFree(*v20 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v20 += 5;
            --v19;
          }
          while (v19);
        }
        WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v16;
    }
    while (v16 != v17);
    v16 = (uint64_t *)*((_QWORD *)this + 1);
  }
  if (v16)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::AtTailAbstractState::createValueForNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _OWORD v18[2];
  uint64_t v19;

  v19 = a2;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_DWORD *)(a1 + 20) <= v8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v8);
    memset(v18, 0, sizeof(v18));
    WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::add<JSC::DFG::AbstractValue>(v9, &v19, (uint64_t)v18, a4, a5, a6, a7, a8, (uint64_t)v17);
    if ((v18[0] & 1) != 0)
      WTF::fastFree(*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
  }
}

void WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::add<JSC::DFG::AbstractValue>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unsigned int v37;
  _QWORD *v38;

  v12 = *a1;
  if (*a1
    || (v38 = a2,
        WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::expand(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8), a2 = v38, (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = v14 & *a2;
  v17 = (_QWORD *)(v12 + 40 * v16);
  v18 = *v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      if (v18 == v15)
      {
        if ((v13 & 1) != 0)
          v37 = 0;
        else
          v37 = *(_DWORD *)(v12 - 4);
        v35 = 0;
        v34 = v12 + 40 * v37;
        goto LABEL_27;
      }
      if (v18 == 1)
        v19 = v17;
      v16 = (v16 + v20) & v14;
      v17 = (_QWORD *)(v12 + 40 * v16);
      v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      v19[4] = 0;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v15 = *a2;
      v17 = v19;
    }
  }
  *v17 = v15;
  v22 = v17 + 1;
  v21 = v17[1];
  if (v17 + 1 != (_QWORD *)a3)
  {
    if ((v21 & 1) != 0)
      WTF::fastFree(v21 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v23 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) == 0 || v23 == 4)
    {
      v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
      v21 = v23 | 2;
      if ((*v22 & 2) == 0)
        v21 = v24;
      *(_QWORD *)v22 = v21;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v17 + 1, (_QWORD *)a3);
      v21 = *(_QWORD *)v22;
    }
  }
  v25 = v21 & 0xFFFFFFFFFFFFFFFDLL;
  v26 = v21 | 2;
  if ((*(_BYTE *)a3 & 2) == 0)
    v26 = v25;
  v17[1] = v26;
  v27 = *(_OWORD *)(a3 + 8);
  v17[4] = *(_QWORD *)(a3 + 24);
  *((_OWORD *)v17 + 1) = v27;
  v28 = *a1;
  if (*a1)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a1;
  if (*a1)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_26;
    goto LABEL_29;
  }
  if (3 * v33 <= 4 * v32)
  {
    if (!(_DWORD)v33)
    {
      v36 = 8;
LABEL_32:
      v17 = WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(a1, v36, (uint64_t)v17, a4, a5, a6, a7, a8);
      v30 = *a1;
      if (*a1)
        LODWORD(v33) = *(_DWORD *)(v30 - 4);
      else
        LODWORD(v33) = 0;
      goto LABEL_26;
    }
LABEL_29:
    v36 = ((_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33)));
    goto LABEL_32;
  }
LABEL_26:
  v34 = v30 + 40 * v33;
  v35 = 1;
LABEL_27:
  *(_QWORD *)a9 = v17;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v35;
}

uint64_t *JSC::DFG::AtTailAbstractState::forNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_DWORD *)(a1 + 20) <= v2)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x1982EC738);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2);
  if (!v3)
    goto LABEL_10;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = v4 & a2;
  v6 = (uint64_t *)(v3 + 40 * (v4 & a2));
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7)
    {
      v5 = (v5 + v8) & v4;
      v6 = (uint64_t *)(v3 + 40 * v5);
      v7 = *v6;
      ++v8;
      if (*v6 == a2)
        goto LABEL_7;
    }
    v6 = (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4));
  }
LABEL_7:
  if (v6 == (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4)))
  {
LABEL_10:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)(a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_12;
  }
  return v6 + 1;
}

uint64_t JSC::DFG::Availability::dump(JSC::DFG::Availability *this, WTF::PrintStream *a2)
{
  JSC::DFG::FlushedAt *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  WTF::PrintStream *v11;
  const char *v12;
  WTF::PrintStream *v13;

  v4 = (JSC::DFG::Availability *)((char *)this + 8);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::DFG::FlushedAt::dump(v4, v5);
  WTF::PrintStream::printf(v5, "%s", "/");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this == 1)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v8 = "Unavailable";
  }
  else
  {
    if (v6)
    {
      v9 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v10 = *(_DWORD *)(v6 + 20);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      WTF::PrintStream::printf(v11, "%s", "D@");
      WTF::PrintStream::printf(v11, "%u", v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      if ((*(_DWORD *)(v6 + 56) & 7) == 3)
      {
        v12 = "<Double>";
      }
      else
      {
        if ((*(_DWORD *)(v6 + 56) & 7) != 5)
          return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v12 = "<Int52>";
      }
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      WTF::PrintStream::printf(v13, "%s", v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v8 = "Undecided";
  }
  WTF::PrintStream::printf(v7, "%s", v8);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::DFG::AvailabilityMap::pruneByLiveness(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _UNKNOWN *__ptr32 *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int v62;
  _OWORD *v63;
  uint64_t v64;
  unsigned int v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  char v105;
  int v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  uint64_t *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  int v131;
  int v132;
  BOOL v133;
  uint64_t *v134;
  JSC::BytecodeLivenessAnalysis *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  _QWORD *v165;
  unsigned int v166;
  int i;
  uint64_t v168;
  int v169;
  int v170;
  BOOL v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  int v178;
  int v179;
  BOOL v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  BOOL v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  char v212;
  char v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  __int128 v238;
  WTF *v239;
  uint64_t v240[2];

  v10 = *(unsigned int *)(a1 + 12);
  v236 = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1982ED820);
    }
    v11 = WTF::fastMalloc((WTF *)(16 * v10));
    v12 = v11;
    v13 = (v10 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v14 = (_OWORD *)v11;
    if (v13 < 3)
      goto LABEL_321;
    v95 = v13 + 1;
    v14 = (_OWORD *)(v11 + 16 * (v95 & 0x1FFFFFFFFFFFFFFCLL));
    v96 = (_OWORD *)(v11 + 32);
    v97 = v95 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v96 - 2) = xmmword_199154D50;
      *(v96 - 1) = xmmword_199154D50;
      *v96 = xmmword_199154D50;
      v96[1] = xmmword_199154D50;
      v96 += 4;
      v97 -= 4;
    }
    while (v97);
    if (v95 != (v95 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_321:
      do
        *v14++ = xmmword_199154D50;
      while (v14 != (_OWORD *)(v11 + 16 * v10));
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = *(unsigned int *)(a1 + 16);
  v15 = *(unsigned int *)(a1 + 20);
  v17 = *a3;
  if ((*a3 & 1) == 0)
    goto LABEL_6;
  v191 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
  if ((v17 & 2) != 0
    || ((v192 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v192 != 0x3FFFFFFF)
      ? (v193 = (_DWORD)v192 == -1)
      : (v193 = 1),
        v193))
  {
    v194 = 2;
  }
  else if (v192 >> 28)
  {
    v204 = *(unsigned int *)(a1 + 20);
    v205 = WTF::fastMalloc((WTF *)0x10);
    v15 = v204;
    *(_QWORD *)v205 = v191;
    *(_DWORD *)(v205 + 8) = v192;
    v194 = 1;
    v191 = v205;
  }
  else
  {
    v194 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    v191 = v192 << 36;
  }
  v17 = v191 | v194;
  if (((v191 | v194) & 1) != 0)
  {
    v195 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v196 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v196 != 0x3FFFFFFF)
        ? (v197 = (_DWORD)v196 == -1)
        : (v197 = 1),
          v197))
    {
      v198 = 2;
    }
    else if (v196 >> 28)
    {
      v206 = v15;
      v207 = v17;
      v208 = WTF::fastMalloc((WTF *)0x10);
      v17 = v207;
      v15 = v206;
      *(_QWORD *)v208 = v195;
      *(_DWORD *)(v208 + 8) = v196;
      v198 = 1;
      v195 = v208;
    }
    else
    {
      v198 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v195 = v196 << 36;
    }
    v18 = 0;
    v19 = v195 | v198;
  }
  else
  {
LABEL_6:
    v18 = 1;
    v19 = v17;
  }
  v20 = 0;
  v237 = v19;
  v21 = a2 + 40;
  v22 = v15 + v16;
  v235 = a2;
  v23 = (uint64_t *)(a2 + 744);
  v24 = &v237;
  v25 = 0x3FFFFFFF;
  v26 = -1;
  v27 = v19;
  v28 = 0x3FFFFFFF;
  while (1)
  {
    v29 = v27 & 0xFFFFFFFF8;
    if ((v27 & 1) != 0)
      v29 = *(_QWORD *)v29;
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 24);
      v31 = HIDWORD(v30) & 0xFFFFF | ((int)(v30 >> 28) >> 24 << 20);
      if ((*(_BYTE *)(v29 + 32) & 1) != 0)
      {
        v67 = (v31 + 3);
        if (v31 >= -3)
        {
          v82 = (v67 << 32) - 0x500000000;
          v70 = v82 >> 32;
          v69 = (_OWORD *)(*(_QWORD *)a1 + (v82 >> 28));
        }
        else
        {
          v68 = v67 ^ 0xFFFFFFFFLL;
          v69 = (_OWORD *)(*(_QWORD *)a1 + 16 * (v68 + *(unsigned int *)(a1 + 16)));
          v70 = v68 + v16;
        }
        *(_OWORD *)(v12 + 16 * v70) = *v69;
        v32 = (*(_QWORD *)(v29 + 24) >> 60) | (16 * *(_BYTE *)(v29 + 32));
      }
      else
      {
        v32 = (v30 >> 60) | (16 * *(_BYTE *)(v29 + 32));
      }
      if ((v32 & 0xFu) - 3 <= 2)
      {
        v71 = (v31 + 4);
        if (v31 >= -4)
        {
          v83 = (v71 << 32) - 0x500000000;
          v74 = v83 >> 32;
          v73 = (_OWORD *)(*(_QWORD *)a1 + (v83 >> 28));
        }
        else
        {
          v72 = v71 ^ 0xFFFFFFFFLL;
          v73 = (_OWORD *)(*(_QWORD *)a1 + 16 * (v72 + *(unsigned int *)(a1 + 16)));
          v74 = v72 + v16;
        }
        *(_OWORD *)(v12 + 16 * v74) = *v73;
      }
    }
    else
    {
      v31 = 0;
    }
    v33 = (uint64_t *)(v29 + 8);
    if (!v29)
      v33 = (uint64_t *)v21;
    v34 = *v33;
    v240[0] = *v33;
    v35 = *v23;
    if (!*v23)
      goto LABEL_173;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != v34)
    {
      v81 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v81) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v81;
        if (v41 == v34)
          goto LABEL_18;
      }
      v40 = *(unsigned int *)(v35 - 4);
    }
LABEL_18:
    if (v40 == *(_DWORD *)(v35 - 4))
    {
LABEL_173:
      v212 = v20;
      v214 = v24;
      v217 = v21;
      v134 = v23;
      v220 = v22;
      v223 = v19;
      v226 = v18;
      v229 = v17;
      v232 = v15;
      v135 = *(JSC::BytecodeLivenessAnalysis **)(*(_QWORD *)(v34 + 56) + 88);
      if (!v135)
        v135 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(*(JSC::UnlinkedCodeBlock **)(v34 + 56), (JSC::UnlinkedCodeBlock **)v34, v22, v21, (uint64_t)v23, -1, (uint64_t)a7, (uint64_t)v24);
      JSC::BytecodeLivenessAnalysis::computeFullLiveness(v135, (JSC::CodeBlock *)v34, &v239);
      v42 = (uint64_t)v239;
      WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v134, v240, (uint64_t *)&v239, v136, v137, v138, v139, v140, (uint64_t)&v238);
      v147 = v239;
      v239 = 0;
      if (v147)
        std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v239, v147, v141, v142, v143, v144, v145, v146);
      v17 = v229;
      v15 = v232;
      v18 = v226;
      v22 = v220;
      v19 = v223;
      v24 = v214;
      v21 = v217;
      v23 = v134;
      v26 = -1;
      a7 = &jpt_1982ECB80;
      v20 = v212;
    }
    else
    {
      v42 = *(_QWORD *)(v35 + 16 * v40 + 8);
    }
    v43 = *v24;
    if ((*v24 & 2) != 0)
    {
      if ((v43 & 1) == 0)
      {
        v44 = 0xFFFFFFFFLL;
        goto LABEL_23;
      }
      v188 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v44 = 0xFFFFFFFFLL;
    }
    else
    {
      if ((v43 & 1) == 0)
      {
        v44 = v43 >> 36;
        goto LABEL_23;
      }
      v187 = v43 & 0xFFFFFFFF8;
      v44 = *(unsigned int *)(v187 + 8);
      v188 = *(_QWORD *)v187;
      if ((_DWORD)v44 != -1 && v44 != 0x3FFFFFFF)
      {
        if (v44 >> 28)
        {
          v231 = v17;
          v234 = v15;
          v228 = v18;
          v222 = v22;
          v225 = v19;
          v216 = v24;
          v219 = v21;
          v209 = *(_QWORD *)v187;
          v211 = v23;
          v213 = v20;
          v203 = WTF::fastMalloc((WTF *)0x10);
          v20 = v213;
          v24 = v216;
          v21 = v219;
          a7 = &jpt_1982ECB80;
          v26 = -1;
          v23 = v211;
          v22 = v222;
          v19 = v225;
          v18 = v228;
          v17 = v231;
          v15 = v234;
          *(_QWORD *)v203 = v209;
          *(_DWORD *)(v203 + 8) = v44;
          v190 = 1;
          v188 = v203;
        }
        else
        {
          v190 = *(_QWORD *)v187;
          v188 = v44 << 36;
        }
        goto LABEL_266;
      }
    }
    v190 = 2;
LABEL_266:
    v43 = v188 | v190;
LABEL_23:
    if ((v20 & 1) == 0)
      goto LABEL_24;
    v47 = v43 & 1;
    if ((v43 & 2) != 0)
    {
      v76 = (_QWORD *)(v43 & 0xFFFFFFFF8);
      LODWORD(v75) = -1;
      if ((v43 & 1) == 0)
        goto LABEL_69;
    }
    else
    {
      if ((v43 & 1) == 0)
      {
        v75 = v43 >> 36;
        v76 = (_QWORD *)(v43 & 0xFFFFFFFF8);
        goto LABEL_69;
      }
      v76 = (_QWORD *)(v43 & 0xFFFFFFFF8);
      LODWORD(v75) = *(_DWORD *)((v43 & 0xFFFFFFFF8) + 8);
    }
    v76 = (_QWORD *)*v76;
LABEL_69:
    if (v76)
      v77 = v76 + 1;
    else
      v77 = (_QWORD *)v21;
    v78 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v77 + 56) + 80) + ((unint64_t)v75 >> 2));
    v79 = *v78;
    if ((v79 | 2) == 0x82)
      v79 = v78[1];
    if (v79 > 3 || v79 == 2)
    {
LABEL_24:
      v45 = (v44 & 3) + (v44 >> 2);
      v46 = *(unsigned int **)v42;
      if (*v46 <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x1982ED56CLL);
      }
      v47 = v43 & 1;
      goto LABEL_26;
    }
    v45 = (v44 & 3) + (v44 >> 2);
    v46 = *(unsigned int **)(v42 + 8);
    if (*v46 <= v45)
    {
      __break(0xC471u);
      JUMPOUT(0x1982ED484);
    }
LABEL_26:
    if (v47 && (v43 & 0xFFFFFFFF8) != 0)
    {
      v230 = v17;
      v233 = v15;
      v227 = v18;
      v221 = v22;
      v224 = v19;
      v215 = v24;
      v218 = v21;
      v210 = v23;
      WTF::fastFree(v43 & 0xFFFFFFFF8, (void *)v19, v22, v21, (uint64_t)v23, -1, (uint64_t)a7, (uint64_t)v24);
      v24 = v215;
      v21 = v218;
      a7 = &jpt_1982ECB80;
      v26 = -1;
      v23 = v210;
      v22 = v221;
      v19 = v224;
      v18 = v227;
      v17 = v230;
      v15 = v233;
    }
    v48 = *(_DWORD *)(v34 + 20);
    if (v48)
    {
      v49 = v31 - v48;
      v50 = v48 - 1;
      do
      {
        if ((v49 < v28 || v49 >= v25)
          && ((*(_DWORD *)(*(_QWORD *)&v46[4 * v45 + 2] + 4 * (v50 >> 5)) >> v50) & 1) != 0)
        {
          if (v49 < 0)
          {
            v51 = v49 ^ 0xFFFFFFFFLL;
            v52 = (_OWORD *)(*(_QWORD *)a1 + 16 * (v51 + *(unsigned int *)(a1 + 16)));
            v53 = v51 + v16;
          }
          else
          {
            v54 = ((unint64_t)v49 << 32) - 0x500000000;
            v53 = v54 >> 32;
            v52 = (_OWORD *)(*(_QWORD *)a1 + (v54 >> 28));
          }
          *(_OWORD *)(v12 + 16 * v53) = *v52;
        }
        ++v49;
        --v50;
      }
      while (v50 != -1);
    }
    v55 = *v24;
    if ((*v24 & 2) != 0)
      break;
    if ((v55 & 1) != 0)
    {
      LODWORD(v56) = *(_DWORD *)((v55 & 0xFFFFFFFF8) + 8);
      if ((v56 & 3) == 0)
        goto LABEL_49;
    }
    else
    {
      if ((v55 & 0x3000000000) == 0)
        goto LABEL_49;
      v56 = v55 >> 36;
    }
    v57 = v56 & 3;
    if ((v56 & 3) != 0)
    {
      v56 = v56;
      goto LABEL_43;
    }
LABEL_49:
    if (!v29)
      goto LABEL_89;
LABEL_50:
    v61 = *(_DWORD **)v29;
    if (*(_QWORD *)v29)
      LODWORD(v61) = *v61;
    v28 = v31 + 5;
    v25 = (_DWORD)v61 + v31 + 5;
    if (v31 + 5 < v25)
    {
      v62 = v31 + 5;
      do
      {
        v65 = v62;
        if ((v62 & 0x80000000) != 0)
        {
          v63 = (_OWORD *)(*(_QWORD *)a1 + 16 * ((v62 ^ 0xFFFFFFFFLL) + *(unsigned int *)(a1 + 16)));
          v64 = (v62 ^ 0xFFFFFFFFLL) + v16;
        }
        else
        {
          v66 = ((unint64_t)v62 << 32) - 0x500000000;
          v64 = v66 >> 32;
          v63 = (_OWORD *)(*(_QWORD *)a1 + (v66 >> 28));
        }
        *(_OWORD *)(v12 + 16 * v64) = *v63;
        v62 = v65 + 1;
        LODWORD(v61) = (_DWORD)v61 - 1;
      }
      while ((_DWORD)v61);
    }
    v27 = *(_QWORD *)(v29 + 16);
    v20 = 1;
    v24 = (uint64_t *)(v29 + 16);
  }
  v57 = 3;
  v56 = 0xFFFFFFFFLL;
LABEL_43:
  v58 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v34 + 56) + 80) + (v56 >> 2));
  v59 = *v58;
  if ((v59 | 2) == 0x82)
    v59 = v58[1];
  switch(v59)
  {
    case 0:
    case 1:
    case 3:
      if (v57 == 1)
        goto LABEL_47;
      goto LABEL_49;
    case 2:
LABEL_47:
      if (v29)
      {
        v60 = *(_QWORD *)(v29 + 24) >> 22;
        *(_OWORD *)(v12 + 16 * (v22 + v60)) = *(_OWORD *)(*(_QWORD *)a1
                                                        + 16
                                                        * (*(unsigned int *)(a1 + 20)
                                                         + (unint64_t)*(unsigned int *)(a1 + 16)
                                                         + v60));
        goto LABEL_50;
      }
      *(_OWORD *)(v12 + 16 * v22) = *(_OWORD *)(*(_QWORD *)a1
                                              + 16
                                              * (*(unsigned int *)(a1 + 16)
                                               + (unint64_t)*(unsigned int *)(a1 + 20)));
LABEL_89:
      if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
      {
        v199 = v15;
        v200 = v17;
        v201 = v18;
        WTF::fastFree(v19 & 0xFFFFFFFF8, (void *)v19, v22, v21, (uint64_t)v23, -1, (uint64_t)a7, (uint64_t)v24);
        LOBYTE(v18) = v201;
        v17 = v200;
        v15 = v199;
      }
      if (!*(_DWORD *)(v235 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x1982ED828);
      }
      v84 = *(unsigned int *)(**(_QWORD **)(v235 + 48) + 88);
      if ((_DWORD)v84)
      {
        v85 = v84 - 1;
        do
        {
          v90 = (v85 + 5);
          if ((_DWORD)v85 + 5 < 0)
          {
            v86 = v90 ^ 0xFFFFFFFFLL;
            v87 = (_OWORD *)(*(_QWORD *)a1 + 16 * (v86 + *(unsigned int *)(a1 + 16)));
            v88 = v86 + v16;
          }
          else
          {
            v91 = (v90 << 32) - 0x500000000;
            v88 = v91 >> 32;
            v87 = (_OWORD *)(*(_QWORD *)a1 + (v91 >> 28));
          }
          *(_OWORD *)(v12 + 16 * v88) = *v87;
        }
        while ((_DWORD)v85--);
      }
      if ((v18 & 1) == 0 && (v17 & 0xFFFFFFFF8) != 0)
      {
        v202 = v15;
        WTF::fastFree(v17 & 0xFFFFFFFF8, (void *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
        v15 = v202;
      }
      v92 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        v93 = v15;
        WTF::fastFree(v92, (void *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
        v15 = v93;
      }
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 8) = v236;
      *(_DWORD *)(a1 + 12) = v236;
      *(_QWORD *)(a1 + 16) = v16 | (v15 << 32);
      v94 = *(_QWORD *)(a1 + 24);
      if (!v94 || !*(_DWORD *)(v94 - 12))
        return;
      v240[0] = 0;
      if (v236)
      {
        v98 = v236 - 1;
        do
        {
          v99 = v98;
          if (*(_QWORD *)(*(_QWORD *)a1 + 16 * v98) >= 2uLL)
          {
            *(_QWORD *)&v238 = *(_QWORD *)(*(_QWORD *)a1 + 16 * v98);
            WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v240, (uint64_t *)&v238, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
          }
          --v98;
        }
        while (v99);
      }
      while (2)
      {
        v100 = *(uint64_t **)(a1 + 24);
        if (!v100)
        {
          v101 = 0;
          v102 = 0;
LABEL_114:
          v103 = &v100[4 * v102];
          goto LABEL_115;
        }
        v102 = *((unsigned int *)v100 - 1);
        v103 = &v100[4 * v102];
        if (!*((_DWORD *)v100 - 3))
        {
          v101 = &v100[4 * v102];
          goto LABEL_114;
        }
        v101 = *(uint64_t **)(a1 + 24);
        if (!(_DWORD)v102)
          goto LABEL_115;
        v130 = 32 * v102;
        v101 = *(uint64_t **)(a1 + 24);
        while (2)
        {
          v131 = *((_DWORD *)v101 + 2);
          if (*v101)
          {
            v132 = *((_DWORD *)v101 + 3);
          }
          else
          {
            v132 = *((_DWORD *)v101 + 3);
            if (!(v131 | v132))
              goto LABEL_166;
          }
          if (v131)
            v133 = 1;
          else
            v133 = v132 == 0;
          if (v133)
            goto LABEL_115;
LABEL_166:
          v101 += 4;
          v130 -= 32;
          if (v130)
            continue;
          break;
        }
        v101 = v103;
LABEL_115:
        if (v100)
          v104 = &v100[4 * *((unsigned int *)v100 - 1)];
        else
          v104 = 0;
        if (v104 == v101)
          goto LABEL_181;
        v105 = 0;
        while (2)
        {
          v109 = v101[2];
          if (v109 >= 2 && v240[0])
          {
            v111 = *(_DWORD *)(v240[0] - 8);
            v112 = ~(*v101 << 32) + *v101;
            v113 = (v112 ^ (v112 >> 22)) + ~((v112 ^ (v112 >> 22)) << 13);
            v114 = (9 * (v113 ^ (v113 >> 8))) ^ ((9 * (v113 ^ (v113 >> 8))) >> 15);
            v115 = v111 & (((v114 + ~(v114 << 27)) >> 31) ^ (v114 + ~((_DWORD)v114 << 27)));
            v116 = *(_QWORD *)(v240[0] + 8 * v115);
            if (v116 != *v101)
            {
              v117 = 1;
              while (v116)
              {
                v115 = (v115 + v117) & v111;
                v116 = *(_QWORD *)(v240[0] + 8 * v115);
                ++v117;
                if (v116 == *v101)
                  goto LABEL_137;
              }
              goto LABEL_130;
            }
LABEL_137:
            v118 = (~(v109 << 32) + v109) ^ ((~(v109 << 32) + v109) >> 22);
            v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
            v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
            v121 = v111 & ((v120 >> 31) ^ v120);
            v19 = v240[0] + 8 * v121;
            v122 = *(_QWORD *)v19;
            if (*(_QWORD *)v19)
            {
              v123 = 0;
              v124 = 1;
              do
              {
                if (v122 == v109)
                {
                  v129 = 0;
                  goto LABEL_152;
                }
                if (v122 == -1)
                  v123 = (_QWORD *)v19;
                v121 = (v121 + v124) & v111;
                v19 = v240[0] + 8 * v121;
                v122 = *(_QWORD *)v19;
                ++v124;
              }
              while (*(_QWORD *)v19);
              if (v123)
              {
                *v123 = 0;
                --*(_DWORD *)(v240[0] - 16);
                v19 = (uint64_t)v123;
              }
            }
            *(_QWORD *)v19 = v109;
            if (v240[0])
              v125 = *(_DWORD *)(v240[0] - 12) + 1;
            else
              v125 = 1;
            *(_DWORD *)(v240[0] - 12) = v125;
            if (v240[0])
              v126 = *(_DWORD *)(v240[0] - 12);
            else
              v126 = 0;
            v127 = (*(_DWORD *)(v240[0] - 16) + v126);
            v128 = *(unsigned int *)(v240[0] - 4);
            if (v128 > 0x400)
            {
              if (v128 <= 2 * v127)
                goto LABEL_155;
            }
            else
            {
              if (3 * v128 > 4 * v127)
                goto LABEL_151;
LABEL_155:
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v240, (uint64_t *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
            }
LABEL_151:
            v129 = 1;
LABEL_152:
            v105 |= v129;
          }
LABEL_130:
          v110 = v101 + 4;
          v101 = v103;
          if (v110 != v103)
          {
            v101 = v110;
            while (1)
            {
              v106 = *((_DWORD *)v101 + 2);
              if (*v101)
                break;
              v107 = *((_DWORD *)v101 + 3);
              if (v106 | v107)
                goto LABEL_123;
LABEL_121:
              v101 += 4;
              if (v101 == v103)
              {
                v101 = v103;
                goto LABEL_128;
              }
            }
            v107 = *((_DWORD *)v101 + 3);
LABEL_123:
            if (v106)
              v108 = 1;
            else
              v108 = v107 == 0;
            if (v108)
              goto LABEL_128;
            goto LABEL_121;
          }
LABEL_128:
          if (v101 != v104)
            continue;
          break;
        }
        if ((v105 & 1) != 0)
          continue;
        break;
      }
      v100 = *(uint64_t **)(a1 + 24);
LABEL_181:
      v148 = 0;
      v149 = 0;
      v239 = 0;
      if (!v100)
        goto LABEL_182;
      v149 = *((unsigned int *)v100 - 1);
      v150 = &v100[4 * v149];
      if (*((_DWORD *)v100 - 3))
      {
        v148 = v100;
        if ((_DWORD)v149)
        {
          v183 = 32 * v149;
          v148 = v100;
          while (1)
          {
            v184 = *((_DWORD *)v148 + 2);
            if (*v148)
              break;
            v185 = *((_DWORD *)v148 + 3);
            if (v184 | v185)
              goto LABEL_252;
LABEL_250:
            v148 += 4;
            v183 -= 32;
            if (!v183)
            {
              v148 = v150;
              goto LABEL_183;
            }
          }
          v185 = *((_DWORD *)v148 + 3);
LABEL_252:
          if (v184)
            v186 = 1;
          else
            v186 = v185 == 0;
          if (v186)
            goto LABEL_183;
          goto LABEL_250;
        }
      }
      else
      {
        v148 = &v100[4 * v149];
LABEL_182:
        v150 = &v100[4 * v149];
      }
LABEL_183:
      if (v100)
        v151 = &v100[4 * *((unsigned int *)v100 - 1)];
      else
        v151 = 0;
      if (v151 == v148)
      {
        v182 = 0;
        goto LABEL_237;
      }
      break;
    case 4:
      goto LABEL_49;
    default:
      __break(0xC471u);
      JUMPOUT(0x1982ED6C4);
  }
  while (2)
  {
    v152 = *v148;
    v153 = *((_DWORD *)v148 + 2);
    v154 = *((_DWORD *)v148 + 3);
    v238 = *((_OWORD *)v148 + 1);
    if (v240[0])
    {
      v155 = *(_DWORD *)(v240[0] - 8);
      v156 = (~(v152 << 32) + v152) ^ ((unint64_t)(~(v152 << 32) + v152) >> 22);
      v157 = 9 * ((v156 + ~(v156 << 13)) ^ ((v156 + ~(v156 << 13)) >> 8));
      v158 = (v157 ^ (v157 >> 15)) + ~((v157 ^ (v157 >> 15)) << 27);
      v159 = (v158 >> 31) ^ v158;
      v160 = v155 & v159;
      v161 = *(_QWORD *)(v240[0] + 8 * (v155 & v159));
      if (v161 != v152)
      {
        v162 = 1;
        while (v161)
        {
          v160 = (v160 + v162) & v155;
          v161 = *(_QWORD *)(v240[0] + 8 * v160);
          ++v162;
          if (v161 == v152)
            goto LABEL_191;
        }
        goto LABEL_215;
      }
LABEL_191:
      v163 = (uint64_t)v239;
      if (v239
        || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash((uint64_t *)&v239, 8u, 0), (v163 = (uint64_t)v239) != 0))
      {
        v164 = *(_DWORD *)(v163 - 8);
      }
      else
      {
        v164 = 0;
      }
      v165 = 0;
      v166 = v154 + v153 + v159;
      for (i = 1; ; ++i)
      {
        v168 = v166 & v164;
        v22 = v163 + 32 * v168;
        v169 = *(_DWORD *)(v22 + 8);
        if (!*(_QWORD *)v22 && !*(_QWORD *)(v22 + 8))
          break;
        if (*(_QWORD *)v22 == v152)
        {
          v170 = *(_DWORD *)(v22 + 12);
          if (v169 == v153 && v170 == v154)
            goto LABEL_215;
        }
        else
        {
          v170 = *(_DWORD *)(v22 + 12);
        }
        if (v169)
          v172 = 1;
        else
          v172 = v170 == 0;
        if (!v172)
          v165 = (_QWORD *)(v163 + 32 * v168);
        v166 = i + v168;
      }
      if (v165)
      {
        *v165 = 0;
        v165[1] = 0;
        v165[2] = 0;
        v165[3] = 0x3FFFFFFF00000000;
        --*(_DWORD *)(v163 - 16);
        v22 = (uint64_t)v165;
      }
      *(_QWORD *)v22 = v152;
      *(_DWORD *)(v22 + 8) = v153;
      *(_DWORD *)(v22 + 12) = v154;
      *(_OWORD *)(v22 + 16) = v238;
      if (v239)
        v173 = *((_DWORD *)v239 - 3) + 1;
      else
        v173 = 1;
      *((_DWORD *)v239 - 3) = v173;
      if (v239)
        v174 = *((_DWORD *)v239 - 3);
      else
        v174 = 0;
      v175 = (*((_DWORD *)v239 - 4) + v174);
      v176 = *((unsigned int *)v239 - 1);
      if (v176 > 0x400)
      {
        if (v176 > 2 * v175)
          goto LABEL_215;
LABEL_236:
        v181 = (_DWORD)v176 << (6 * *((_DWORD *)v239 - 3) >= (2 * v176));
      }
      else
      {
        if (3 * v176 > 4 * v175)
          goto LABEL_215;
        if ((_DWORD)v176)
          goto LABEL_236;
        v181 = 8;
      }
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash((uint64_t *)&v239, v181, (uint64_t *)v22);
    }
LABEL_215:
    v177 = v148 + 4;
    v148 = v150;
    if (v177 == v150)
      goto LABEL_226;
    v148 = v177;
    while (2)
    {
      v178 = *((_DWORD *)v148 + 2);
      if (*v148)
      {
        v179 = *((_DWORD *)v148 + 3);
      }
      else
      {
        v179 = *((_DWORD *)v148 + 3);
        if (!(v178 | v179))
          goto LABEL_219;
      }
      if (v178)
        v180 = 1;
      else
        v180 = v179 == 0;
      if (v180)
        goto LABEL_226;
LABEL_219:
      v148 += 4;
      if (v148 != v150)
        continue;
      break;
    }
    v148 = v150;
LABEL_226:
    if (v148 != v151)
      continue;
    break;
  }
  v182 = (uint64_t)v239;
  v100 = *(uint64_t **)(a1 + 24);
LABEL_237:
  v239 = 0;
  *(_QWORD *)(a1 + 24) = v182;
  if (v100)
  {
    WTF::fastFree((unint64_t)(v100 - 2), (void *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
    if (v239)
      WTF::fastFree((unint64_t)v239 - 16, (void *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
  }
  if (v240[0])
    WTF::fastFree(v240[0] - 16, (void *)v19, v22, v21, (uint64_t)v23, v26, (uint64_t)a7, (uint64_t)v24);
}

void JSC::DFG::AvailabilityMap::clear(JSC::DFG::AvailabilityMap *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;

  if (*((_DWORD *)this + 3))
  {
    v8 = 0;
    do
      *(_OWORD *)(*(_QWORD *)this + 16 * v8++) = xmmword_1991243B0;
    while (v8 < *((unsigned int *)this + 3));
  }
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::AvailabilityMap::dump(JSC::DFG::AvailabilityMap *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  uint64_t *v6[7];
  char v7;

  v6[0] = (uint64_t *)((char *)this + 24);
  v6[1] = (uint64_t *)"=>";
  v6[2] = (uint64_t *)3;
  v6[3] = (uint64_t *)", ";
  v6[4] = (uint64_t *)3;
  v6[5] = (uint64_t *)&str_90_2;
  v6[6] = (uint64_t *)1;
  v7 = 0;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump((uint64_t)this, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v6, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "}");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

_QWORD *JSC::DFG::AvailabilityMap::merge(_QWORD *this, const JSC::DFG::AvailabilityMap *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 *v50;
  int v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;

  v2 = *((_DWORD *)a2 + 3);
  if (v2)
  {
    v3 = v2 - 1;
    do
    {
      v4 = v3;
      v5 = *(_QWORD *)a2;
      v6 = 16 * v3;
      v7 = *(_QWORD *)a2 + v6;
      v8 = (uint64_t *)(*this + v6);
      v10 = (unsigned __int8 *)(v8 + 1);
      v9 = *v8;
      v13 = *(unsigned __int8 *)(v7 + 8);
      v11 = (uint64_t *)(v7 + 8);
      v12 = v13;
      if (v13)
      {
        v14 = *v10;
        if (v14)
        {
          if (v12 != v14 || *(_DWORD *)(v5 + 16 * v3 + 12) != *(_DWORD *)(*this + 16 * v3 + 12))
          {
            v16 = 0;
            v17 = 0x3FFFFFFF00000000;
            LOBYTE(v15) = 7;
            goto LABEL_7;
          }
        }
        v15 = *v11;
      }
      else
      {
        v15 = *(_QWORD *)v10;
      }
      v16 = v15 & 0xFFFFFF00;
      v17 = v15 & 0xFFFFFFFF00000000;
LABEL_7:
      v18 = *(_QWORD *)(v5 + 16 * v3);
      if (v18 == v9 || v9 == 0)
        v20 = v18;
      else
        v20 = 1;
      if (v18)
        v21 = v20;
      else
        v21 = *v8;
      *v8 = v21;
      v8[1] = v17 | v15 | v16 & 0xFFFFFF00;
      --v3;
    }
    while (v4);
  }
  v23 = *((_QWORD *)a2 + 3);
  if (!v23)
  {
    v24 = 0;
    v25 = 0;
LABEL_26:
    v26 = (__int128 *)(v23 + 32 * v25);
    goto LABEL_27;
  }
  v25 = *(unsigned int *)(v23 - 4);
  v26 = (__int128 *)(v23 + 32 * v25);
  if (!*(_DWORD *)(v23 - 12))
  {
    v24 = (__int128 *)(v23 + 32 * v25);
    goto LABEL_26;
  }
  v24 = (__int128 *)*((_QWORD *)a2 + 3);
  if (!(_DWORD)v25)
    goto LABEL_27;
  v54 = 32 * v25;
  v24 = (__int128 *)*((_QWORD *)a2 + 3);
  do
  {
    v55 = *((_DWORD *)v24 + 2);
    if (*(_QWORD *)v24)
    {
      v56 = *((_DWORD *)v24 + 3);
    }
    else
    {
      v56 = *((_DWORD *)v24 + 3);
      if (!(v55 | v56))
        goto LABEL_77;
    }
    if (v55)
      v57 = 1;
    else
      v57 = v56 == 0;
    if (v57)
      goto LABEL_27;
LABEL_77:
    v24 += 2;
    v54 -= 32;
  }
  while (v54);
  v24 = v26;
LABEL_27:
  if (v23)
    v27 = (__int128 *)(v23 + 32 * *(unsigned int *)(v23 - 4));
  else
    v27 = 0;
  if (v27 == v24)
    return this;
  v28 = this + 3;
  while (2)
  {
    v59 = *v24;
    v60 = v24[1];
    v29 = *v28;
    if (*v28
      || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(v28, 8u, 0), (v29 = *v28) != 0))
    {
      v30 = *(_DWORD *)(v29 - 8);
    }
    else
    {
      v30 = 0;
    }
    v31 = 0;
    v32 = (~((_QWORD)v59 << 32) + v59) ^ ((~((_QWORD)v59 << 32) + (_QWORD)v59) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((unint64_t)(v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = HIDWORD(v59) + DWORD2(v59) + ((v34 >> 31) ^ v34);
    for (i = 1; ; ++i)
    {
      v37 = v35 & v30;
      v38 = v29 + 32 * v37;
      v39 = *(_DWORD *)(v38 + 8);
      if (!*(_QWORD *)v38 && !*(_QWORD *)(v38 + 8))
        break;
      if (*(_QWORD *)v38 == (_QWORD)v59)
      {
        v40 = *(_DWORD *)(v38 + 12);
        if (v39 == DWORD2(v59) && v40 == HIDWORD(v59))
          goto LABEL_57;
      }
      else
      {
        v40 = *(_DWORD *)(v38 + 12);
      }
      if (v39)
        v42 = 1;
      else
        v42 = v40 == 0;
      if (!v42)
        v31 = (_QWORD *)(v29 + 32 * v37);
      v35 = i + v37;
    }
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = 0x3FFFFFFF00000000;
      --*(_DWORD *)(*v28 - 16);
      v38 = (uint64_t)v31;
    }
    *(_OWORD *)v38 = v59;
    *(_QWORD *)(v38 + 16) = 0;
    *(_BYTE *)(v38 + 24) = 0;
    *(_DWORD *)(v38 + 28) = 0x3FFFFFFF;
    v43 = *v28;
    if (*v28)
      v44 = *(_DWORD *)(v43 - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(v43 - 12) = v44;
    v45 = *v28;
    if (*v28)
      v46 = *(_DWORD *)(v45 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v45 - 16) + v46);
    v48 = *(unsigned int *)(v45 - 4);
    if (v48 > 0x400)
    {
      if (v48 <= 2 * v47)
        goto LABEL_90;
    }
    else
    {
      if (3 * v48 > 4 * v47)
        goto LABEL_57;
      if (!(_DWORD)v48)
      {
        v58 = 8;
        goto LABEL_91;
      }
LABEL_90:
      v58 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
LABEL_91:
      v38 = WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(v28, v58, (uint64_t *)v38);
    }
LABEL_57:
    this = (_QWORD *)JSC::DFG::Availability::merge((uint64_t *)&v60, v38 + 16);
    *(_QWORD *)(v38 + 16) = this;
    *(_QWORD *)(v38 + 24) = v49;
    v50 = v24 + 2;
    v24 = v26;
    if (v50 == v26)
      goto LABEL_68;
    v24 = v50;
    while (2)
    {
      v51 = *((_DWORD *)v24 + 2);
      if (*(_QWORD *)v24)
      {
        v52 = *((_DWORD *)v24 + 3);
      }
      else
      {
        v52 = *((_DWORD *)v24 + 3);
        if (!(v51 | v52))
          goto LABEL_61;
      }
      if (v51)
        v53 = 1;
      else
        v53 = v52 == 0;
      if (v53)
        goto LABEL_68;
LABEL_61:
      v24 += 2;
      if (v24 != v26)
        continue;
      break;
    }
    v24 = v26;
LABEL_68:
    if (v24 != v27)
      continue;
    return this;
  }
}

uint64_t JSC::DFG::Availability::merge(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 == *(_QWORD *)a2 || *(_QWORD *)a2 == 0)
    v3 = *a1;
  else
    v3 = 1;
  if (*a1)
    return v3;
  else
    return *(_QWORD *)a2;
}

uint64_t JSC::DFG::runPhase<JSC::DFG::BackwardsPropagationPhase>(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  char *v31;
  unsigned int v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  unsigned int v56;
  WTF *v57;
  void **v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  WTF *v76;
  _DWORD *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *casual;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  WTF *v147;
  void **v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  BOOL v175;
  unsigned int v176;
  BOOL v177;
  unsigned int v178;
  int v179;
  int v180;
  unsigned int v181;
  unint64_t v182;
  unsigned int v183;
  unint64_t v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  double v191;
  unsigned int v192;
  unint64_t v193;
  double v194;
  unint64_t v196;
  double v197;
  unint64_t v199;
  double v200;
  unint64_t v202;
  double v203;
  BOOL v205;
  BOOL v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  WTF *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WTF *v220;
  unint64_t v222;
  double v223;
  BOOL v224;
  int v225;
  unint64_t *v226;
  unint64_t v227;
  double v228;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  unint64_t v236;
  void *v237;
  void *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  int v258;
  const void *v259;
  uint64_t v260;
  void *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unint64_t *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  void *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unint64_t *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  double v288;
  unint64_t v290;
  double v291;
  unint64_t v293;
  double v294;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t StatusReg;
  unint64_t v304;
  char v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  __int128 v311;
  BOOL v312;
  WTF *v313;
  BOOL v314;
  WTF *v315;
  uint64_t v316;
  void *__src;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  _QWORD v321[2];
  __int128 v322;
  double v323;
  char v324;
  __int128 *v325;

  v2 = *(_DWORD *)(a1 + 952);
  v306 = -1;
  v307 = -1;
  v308 = 0;
  v309 = 256;
  v310 = a1;
  *(_QWORD *)&v311 = "backwards propagation";
  *((_QWORD *)&v311 + 1) = 22;
  v312 = v2 < 1;
  v313 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v306);
  v315 = 0;
  v316 = 0;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 16;
    if (v10 > 0x10)
      v11 = *(unsigned int *)(a1 + 60);
    if (v11 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EFC54);
    }
    v12 = 24 * v11;
    v13 = (WTF *)WTF::fastMalloc((WTF *)(24 * v11));
    LODWORD(v316) = (v12 & 0xFFFFFFF8) / 0x18;
    v315 = v13;
    if (HIDWORD(v316) != (_DWORD)v10)
      bzero((char *)v13 + 24 * HIDWORD(v316), 24 * ((24 * v10 - 24 * (unint64_t)HIDWORD(v316) - 24) / 0x18) + 24);
  }
  HIDWORD(v316) = v10;
  v318 = 0;
  v319 = 0;
  __src = 0;
  v321[0] = "DFG";
  v321[1] = 4;
  v322 = v311;
  v323 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v277 = mach_absolute_time();
    v279 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v279 != -1)
    {
      *(_QWORD *)&v320 = &v324;
      v325 = &v320;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v325, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v278) = dword_1ECF4400C;
    v323 = (double)(v277 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v278 * 1000000000.0);
  }
  v14 = v310;
  v302 = *(unsigned int *)(v310 + 60);
  if (!(_DWORD)v302)
    goto LABEL_346;
  v15 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(v310 + 48) + 8 * v15))
  {
    if (v302 == ++v15)
    {
LABEL_49:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v14 = v310;
        v41 = *(_DWORD *)(v310 + 60);
        if (!v41)
          goto LABEL_346;
        v305 = 0;
        do
        {
          if (*(_DWORD *)(v310 + 60) <= --v41)
          {
            __break(0xC471u);
            JUMPOUT(0x1982EFB7CLL);
          }
          v45 = *(uint64_t **)(v310 + 48);
          v46 = v45[v41];
          if (v46)
          {
            v47 = *(unsigned int *)(v46 + 220);
            v48 = v47 - 1;
            v49 = v47 - 1;
            do
            {
              if (v49 >= v47)
              {
                __break(0xC471u);
                JUMPOUT(0x1982EFB84);
              }
              v50 = *(_QWORD *)(v46 + 208);
              v51 = *(_QWORD *)(v50 + 8 * v49--);
            }
            while (*(unsigned __int16 *)(v51 + 18) - 364 > 0xB);
            v52 = 1;
            switch(*(_WORD *)(v51 + 18))
            {
              case 0x16C:
                goto LABEL_63;
              case 0x16D:
                v52 = 2;
                goto LABEL_63;
              case 0x16E:
                v52 = *(_DWORD *)(*(_QWORD *)(v51 + 72) + 12) + 1;
                goto LABEL_295;
              case 0x16F:
                v52 = *(_DWORD *)(*(_QWORD *)(v51 + 72) + 12);
LABEL_295:
                if (!v52)
                  goto LABEL_101;
                do
                {
LABEL_63:
                  if (v48 >= v47)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982EFBF4);
                  }
                  v53 = *(_QWORD *)(v50 + 8 * v48);
                  v54 = *(unsigned __int16 *)(v53 + 18);
                  --v48;
                }
                while ((v54 - 364) > 0xB);
                if (v54 == 366)
                {
                  v85 = *(uint64_t **)(v53 + 72);
                  if (*((_DWORD *)v85 + 3))
                    v85 = (uint64_t *)*v85;
                  v55 = v85 + 2;
                }
                else
                {
                  if (v54 == 367)
                  {
                    v55 = *(_DWORD **)(v53 + 72);
                    if (!v55[3])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982EFAF4);
                    }
                  }
                  else
                  {
                    v55 = (_DWORD *)(v53 + 72);
                    if (v54 == 364)
                      goto LABEL_69;
                  }
                  v55 = *(_DWORD **)v55;
                }
LABEL_69:
                v56 = *(_DWORD *)(*(_QWORD *)v55 + 8);
                if (HIDWORD(v316) <= v56)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982EFBFCLL);
                }
                v57 = v315;
                v58 = (void **)((char *)v315 + 24 * v56);
                if (v58 != &__src)
                {
                  v59 = *((unsigned int *)v58 + 3);
                  if (HIDWORD(v318) > v59)
                  {
                    HIDWORD(v318) = *((_DWORD *)v58 + 3);
                  }
                  else
                  {
                    v60 = v318;
                    if (v59 > v318)
                    {
                      if ((_DWORD)v318)
                      {
                        if (HIDWORD(v318))
                          HIDWORD(v318) = 0;
                        v276 = __src;
                        if (__src)
                        {
                          __src = 0;
                          LODWORD(v318) = 0;
                          WTF::fastFree((unint64_t)v276, (void *)v3, v4, v5, v6, v7, v8, v9);
                          v60 = v318;
                        }
                      }
                      v236 = *((unsigned int *)v58 + 3);
                      if (v60 < v236)
                      {
                        if (v236 >> 30)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFC3CLL);
                        }
                        v237 = __src;
                        v301 = HIDWORD(v318);
                        v238 = (void *)WTF::fastMalloc((WTF *)(4 * v236));
                        LODWORD(v318) = v236;
                        __src = v238;
                        memcpy(v238, v237, 4 * v301);
                        if (v237)
                        {
                          if (__src == v237)
                          {
                            __src = 0;
                            LODWORD(v318) = 0;
                          }
                          WTF::fastFree((unint64_t)v237, v239, v240, v241, v242, v243, v244, v245);
                        }
                      }
                    }
                    v59 = HIDWORD(v318);
                  }
                  v61 = (char *)__src;
                  if (v59)
                  {
                    memmove(__src, *v58, 4 * v59);
                    v62 = HIDWORD(v318);
                    v61 = (char *)__src;
                  }
                  else
                  {
                    v62 = 0;
                  }
                  memcpy(&v61[4 * v62], (char *)*v58 + 4 * v62, (_BYTE *)*v58 + 4 * *((unsigned int *)v58 + 3) - ((_BYTE *)*v58 + 4 * v62));
                  HIDWORD(v318) = *((_DWORD *)v58 + 3);
                }
                v319 = *((_QWORD *)v57 + 3 * v56 + 2);
                if (v52 < 2)
                  goto LABEL_78;
                v67 = 1;
                while (1)
                {
                  v68 = *(unsigned int *)(v46 + 220);
                  v69 = v68 - 1;
                  do
                  {
                    if (v69 >= v68)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982EFC04);
                    }
                    v70 = *(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * v69);
                    v71 = *(unsigned __int16 *)(v70 + 18);
                    --v69;
                  }
                  while ((v71 - 364) > 0xB);
                  if (v71 == 366)
                  {
                    v73 = *(_QWORD *)(v70 + 72);
                    v79 = *(unsigned int *)(v73 + 12);
                    if (v67 >= v79)
                    {
                      if (v67 != v79)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1982EF1ECLL);
                      }
                    }
                    else
                    {
                      v73 = *(_QWORD *)v73 + 32 * v67;
                    }
                  }
                  else
                  {
                    if (v71 == 367)
                    {
                      v296 = *(_QWORD *)(v70 + 72);
                      if (v67 >= *(unsigned int *)(v296 + 12))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1982EFC0CLL);
                      }
                      v72 = (_QWORD *)(*(_QWORD *)v296 + 8 * v67);
                      goto LABEL_93;
                    }
                    if (!(_DWORD)v67)
                    {
                      v72 = (_QWORD *)(v70 + 72);
                      if (v71 != 364)
                        v72 = (_QWORD *)*v72;
                      goto LABEL_93;
                    }
                    if ((_DWORD)v67 != 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982EFB64);
                    }
                    v73 = *(_QWORD *)(v70 + 72);
                  }
                  v72 = (_QWORD *)(v73 + 16);
LABEL_93:
                  if (HIDWORD(v318))
                  {
                    v74 = 0;
                    v75 = (_QWORD *)*v72;
                    v76 = v315;
                    v77 = __src;
                    do
                    {
                      v78 = *((_DWORD *)v75 + 2);
                      if (HIDWORD(v316) <= v78)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1982EFB74);
                      }
                      v77[v74] |= *(_DWORD *)(*((_QWORD *)v76 + 3 * v78) + 4 * v74);
                      ++v74;
                    }
                    while (v74 < HIDWORD(v318));
                  }
                  if (++v67 == v52)
                    goto LABEL_78;
                }
              default:
LABEL_101:
                v80 = *v45;
                v81 = *(unsigned int *)(*v45 + 84);
                if ((_DWORD)v81)
                {
                  if (v81 >> 30)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982EFC44);
                  }
                  v82 = *(_QWORD *)(StatusReg + 752);
                  if (!v82)
                    goto LABEL_548;
                  v83 = (unint64_t)(4 * v81 + 15) >> 4;
                  if (v81 <= 0x68)
                  {
                    v84 = 23 * v83 + 7;
                  }
                  else
                  {
                    if (v81 > 0x9C4)
                      goto LABEL_548;
                    v84 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v83 + 626);
                    if (*(_DWORD *)(v82 + 8052) <= v84)
                      goto LABEL_548;
                  }
                  v86 = v82 + 8 * v84;
                  v87 = v86 + 8064;
                  *(_BYTE *)(v86 + 8064) = 1;
                  v88 = *(unsigned int *)(v86 + 8080);
                  if ((_DWORD)v88)
                  {
                    *(_DWORD *)(v87 + 16) = v88 - *(_DWORD *)(v87 + 20);
                    casual = (void *)(*(_QWORD *)(v87 + 8) - v88);
                    goto LABEL_114;
                  }
                  v93 = *(_QWORD *)(v87 + 40);
                  v94 = *(_QWORD *)(v87 + 24);
                  if (v93)
                    goto LABEL_123;
                  if (*(_BYTE *)(v87 + 5) == 6)
                  {
                    v281 = *(unsigned int *)(v87 + 32);
                    v282 = *(_DWORD *)(v87 + 36);
                    if (v281 < v282)
                    {
                      *(_QWORD *)(v87 + 8 * v281 + 56) = 0;
                      v283 = (unint64_t *)(v82 + 8128 + 8 * v84 + 8 * v281);
                      v284 = v282 - 1 - v281;
                      while (v284)
                      {
                        v94 += 1024;
                        v286 = *v283++;
                        v285 = v286;
                        LODWORD(v281) = v281 + 1;
                        --v284;
                        if (v286)
                        {
                          v93 = __rbit64(v285);
                          *(_DWORD *)(v87 + 32) = v281;
                          *(_QWORD *)(v87 + 24) = v94;
LABEL_123:
                          v95 = __clz(v93);
                          *(_QWORD *)(v87 + 40) = v93 & ~(0x8000000000000000 >> v95);
                          casual = (void *)(v94 + 16 * v95);
LABEL_114:
                          *(_BYTE *)v87 = 0;
LABEL_115:
                          bzero(casual, 4 * v81);
                          goto LABEL_116;
                        }
                      }
                      *(_DWORD *)(v87 + 32) = v282;
                    }
                  }
                  *(_BYTE *)v87 = 0;
LABEL_548:
                  casual = (void *)bmalloc_allocate_casual(4 * v81, 1);
                  goto LABEL_115;
                }
                casual = 0;
LABEL_116:
                v90 = *(_QWORD *)(v80 + 88);
                v91 = __src;
                if (__src)
                {
                  __src = 0;
                  LODWORD(v318) = 0;
                  WTF::fastFree((unint64_t)v91, (void *)v3, v4, v5, v6, v7, v8, v9);
                }
                __src = casual;
                LODWORD(v318) = v81;
                HIDWORD(v318) = v81;
                v319 = v90;
                if ((_DWORD)v81)
                {
                  v92 = 0;
                  do
                    *((_DWORD *)casual + v92++) = 0;
                  while (v92 < HIDWORD(v318));
                }
LABEL_78:
                v63 = *(unsigned int *)(v46 + 220);
                v314 = v63 < 0x10000;
                if ((_DWORD)v63)
                {
                  v64 = v310;
                  v65 = __src;
                  v66 = v63;
                  while (2)
                  {
                    if (*(_DWORD *)(v46 + 220) <= --v66)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1982EFB6CLL);
                    }
                    v100 = *(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * v66);
                    v101 = *(_DWORD *)(v100 + 56);
                    v102 = v101 & 0xFC000;
                    switch(*(_WORD *)(v100 + 18))
                    {
                      case 4:
                      case 0x37:
                      case 0x13B:
                      case 0x13F:
                      case 0x140:
                      case 0x146:
                        v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v97 = *(_DWORD *)(v99 + 0x38);
                        v98 = v97 | v102;
                        goto LABEL_179;
                      case 0xF:
                        v118 = *(_QWORD **)(v100 + 72);
                        v119 = v118;
                        do
                        {
                          v120 = v119;
                          v119 = (_QWORD *)*v119;
                        }
                        while (v119);
                        if (v120 != v118)
                          *v118 = v120;
                        v121 = v120[3];
                        if (HIDWORD(v121) == 2)
                        {
                          v122 = v319 + (uint64_t)(int)v121 + HIDWORD(v319);
                        }
                        else if ((v121 & 0x80000000) != 0)
                        {
                          v122 = (v120[3] ^ 0xFFFFFFFFLL) + v319;
                        }
                        else
                        {
                          v122 = (uint64_t)(((unint64_t)v121 << 32) - 0x500000000) >> 32;
                        }
                        v65[v122] |= v102 | 0x100000;
                        if (!v66)
                          break;
                        continue;
                      case 0x10:
                        v103 = *(_QWORD **)(v100 + 72);
                        v104 = v103;
                        do
                        {
                          v105 = v104;
                          v104 = (_QWORD *)*v104;
                        }
                        while (v104);
                        if (v105 != v103)
                          *v103 = v105;
                        v106 = v105[3];
                        if ((v106 & 0xFFFFFFFF00000000) == 0x200000000)
                        {
                          v108 = HIDWORD(v319);
                          v107 = v319 + (uint64_t)(int)v106;
LABEL_140:
                          v109 = v65[v107 + v108];
                          if ((v109 & 0x100000) == 0)
                            goto LABEL_130;
LABEL_141:
                          v110 = v109 & 0xBC000;
                          v111 = *((_DWORD *)v105 + 9);
                          if (v111 != (v111 | v110))
                            *((_DWORD *)v105 + 9) = v111 | v110;
                          v112 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                          v113 = v110 | v112 | 0x4000;
                          if (v113 != v112)
                            *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v113;
                          if ((v106 & 0xFFFFFFFF00000000) == 0x200000000)
                          {
                            v114 = v319 + (uint64_t)(int)v106 + HIDWORD(v319);
                          }
                          else if ((v106 & 0x80000000) != 0)
                          {
                            v114 = (v106 ^ 0xFFFFFFFFLL) + v319;
                          }
                          else
                          {
                            v114 = (uint64_t)(((unint64_t)v106 << 32) - 0x500000000) >> 32;
                          }
                          v65[v114] = 0;
                          if (!v66)
                            goto LABEL_210;
                        }
                        else
                        {
                          if ((v106 & 0x80000000) != 0)
                          {
                            v107 = v105[3] ^ 0xFFFFFFFFLL;
                            v108 = v319;
                            goto LABEL_140;
                          }
                          v109 = v65[(uint64_t)(((unint64_t)v106 << 32) - 0x500000000) >> 32];
                          if ((v109 & 0x100000) != 0)
                            goto LABEL_141;
LABEL_130:
                          if (!v66)
                            goto LABEL_210;
                        }
                        continue;
                      case 0x14:
                      case 0x18:
                      case 0x19:
                      case 0x3C:
                      case 0x85:
                      case 0x8D:
                      case 0x91:
                      case 0x92:
                      case 0x93:
                      case 0x94:
                      case 0xB3:
                      case 0x14B:
                      case 0x180:
                      case 0x1A1:
                        goto LABEL_130;
                      case 0x1C:
                        v123 = *(_QWORD **)(v100 + 72);
                        v124 = v123;
                        do
                        {
                          v125 = v124;
                          v124 = (_QWORD *)*v124;
                        }
                        while (v124);
                        if (v125 != v123)
                          *v123 = v125;
                        v126 = v125[3];
                        if (HIDWORD(v126) == 2)
                        {
                          v127 = v319 + (uint64_t)(int)v126 + HIDWORD(v319);
                        }
                        else if ((v126 & 0x80000000) != 0)
                        {
                          v127 = (v125[3] ^ 0xFFFFFFFFLL) + v319;
                        }
                        else
                        {
                          v127 = (uint64_t)(((unint64_t)v126 << 32) - 0x500000000) >> 32;
                        }
                        v128 = v65[v127];
                        v129 = v128 | 0x13C000;
                        if (v128 != (v128 | 0x13C000))
                          goto LABEL_171;
                        goto LABEL_130;
                      case 0x1D:
                        v131 = *(_QWORD **)(v100 + 72);
                        v132 = v131;
                        do
                        {
                          v133 = v132;
                          v132 = (_QWORD *)*v132;
                        }
                        while (v132);
                        if (v133 != v131)
                          *v131 = v133;
                        v134 = v133[3];
                        if (HIDWORD(v134) == 2)
                        {
                          v127 = v319 + (uint64_t)(int)v134 + HIDWORD(v319);
                        }
                        else if ((v134 & 0x80000000) != 0)
                        {
                          v127 = (v133[3] ^ 0xFFFFFFFFLL) + v319;
                        }
                        else
                        {
                          v127 = (uint64_t)(((unint64_t)v134 << 32) - 0x500000000) >> 32;
                        }
                        v135 = v65[v127];
                        v129 = v135 | 0x100000;
                        if (v135 == (v135 | 0x100000))
                          goto LABEL_130;
LABEL_171:
                        v65[v127] = v129;
                        if (!v66)
                          goto LABEL_210;
                        continue;
                      case 0x29:
                      case 0x2A:
                      case 0x36:
                      case 0x39:
                      case 0x3B:
                      case 0x3F:
                        v160 = *(_QWORD *)(v100 + 24);
                        goto LABEL_230;
                      case 0x2B:
                      case 0x2C:
                      case 0x2D:
                      case 0x2E:
                      case 0x2F:
                      case 0x30:
                      case 0x31:
                      case 0x32:
                      case 0x33:
                      case 0x34:
                      case 0x35:
                      case 0x43:
                        v159 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v159 | 0x40000) != v159)
                          *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v159 | 0x40000;
                        v160 = *(_QWORD *)(v100 + 32);
                        goto LABEL_230;
                      case 0x38:
                        v160 = *(_QWORD *)(v100 + 24);
                        if ((v160 & 0xFC000000000000) != 0x18000000000000)
                          goto LABEL_130;
LABEL_230:
                        v99 = v160 & 0xFF00FFFFFFFFFFFFLL;
                        v97 = *(_DWORD *)(v99 + 56);
                        v98 = v97 | 0x40000;
                        goto LABEL_179;
                      case 0x3A:
                        v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v97 = *(_DWORD *)(v99 + 0x38);
                        v98 = v97 | 0x4000;
                        goto LABEL_179;
                      case 0x3E:
                        v298 = v64;
                        v161 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        if (JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)v161, (JSC::DFG::Node *)3, v4)|| JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)(*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL), (JSC::DFG::Node *)3, v4))
                        {
                          v162 = 868352;
                        }
                        else
                        {
                          v162 = 901120;
                        }
                        v163 = v101 & v162;
                        v164 = *(unsigned __int16 *)(v161 + 18);
                        v64 = v298;
                        if (v164 >= 3)
                        {
                          if (v164 - 43 < 0xB)
                            goto LABEL_240;
                          goto LABEL_237;
                        }
                        v196 = **(_QWORD **)(v161 + 72);
                        if (!(v196 >> 49))
                          goto LABEL_237;
                        goto LABEL_319;
                      case 0x40:
                        v300 = v64;
                        v161 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        if (JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)v161, (JSC::DFG::Node *)3, v4))
                        {
                          goto LABEL_305;
                        }
                        v163 = v101 & 0xDC000;
                        if (*(unsigned __int16 *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
                        {
                          v190 = **(_QWORD **)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                          if (v190 >> 49)
                          {
                            v191 = (double)(int)v190;
                            if (v190 <= 0xFFFDFFFFFFFFFFFFLL)
                              *(_QWORD *)&v191 = v190 - 0x2000000000000;
                            if (v191 != 0.0 || 1.0 / v191 < 0.0)
LABEL_305:
                              v163 = v101 & 0xD4000;
                          }
                        }
                        v192 = *(unsigned __int16 *)(v161 + 18);
                        if (v192 < 3)
                        {
                          v196 = **(_QWORD **)(v161 + 72);
                          v64 = v300;
                          if (!(v196 >> 49))
                            goto LABEL_237;
LABEL_319:
                          v197 = (double)(int)v196;
                          if (v196 <= 0xFFFDFFFFFFFFFFFFLL)
                            *(_QWORD *)&v197 = v196 - 0x2000000000000;
                          if (v197 <= -4294967300.0 || v197 >= 4294967300.0)
                          {
LABEL_237:
                            v165 = *(unsigned __int16 *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                            if (v165 >= 3)
                            {
                              if (v165 - 43 < 0xB)
                                goto LABEL_240;
LABEL_239:
                              v163 |= 0x4000u;
                              goto LABEL_240;
                            }
                            v193 = **(_QWORD **)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                            if (!(v193 >> 49))
                              goto LABEL_239;
                            v194 = (double)(int)v193;
                            if (v193 <= 0xFFFDFFFFFFFFFFFFLL)
                              *(_QWORD *)&v194 = v193 - 0x2000000000000;
                            if (v194 >= 4294967300.0 || v194 <= -4294967300.0)
                              goto LABEL_239;
                          }
                        }
                        else
                        {
                          v64 = v300;
                          if (v192 - 43 >= 0xB)
                            goto LABEL_237;
                        }
LABEL_240:
                        if (v63 >= 0x10000)
                          v163 |= 0x4000u;
                        v138 = v163 | 0x10000;
                        v166 = *(_DWORD *)(v161 + 56);
                        if ((v166 | v138) != v166)
                          *(_DWORD *)(v161 + 56) = v166 | v138;
LABEL_194:
                        v139 = *(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL;
                        v140 = *(_DWORD *)(v139 + 0x38);
                        v141 = v140 | v138;
LABEL_195:
                        if (v141 == v140)
                          goto LABEL_130;
                        *(_DWORD *)(v139 + 56) = v141;
                        if (!v66)
                          goto LABEL_210;
                        continue;
                      case 0x41:
                        v158 = v101 & 0xDC000;
                        v187 = *(_QWORD *)(v100 + 24);
                        goto LABEL_128;
                      case 0x42:
                      case 0x57:
                        v182 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v183 = *(unsigned __int16 *)(v182 + 0x12);
                        if (v183 < 3)
                        {
                          v226 = *(unint64_t **)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
LABEL_398:
                          v227 = *v226;
                          if (v227 >> 49)
                          {
                            v228 = (double)(int)v227;
                            if (v227 <= 0xFFFDFFFFFFFFFFFFLL)
                              *(_QWORD *)&v228 = v227 - 0x2000000000000;
                            if (v228 > -4194304.0 && v228 < 4194304.0)
                              goto LABEL_289;
                          }
                          goto LABEL_286;
                        }
                        if (v183 - 43 < 2)
                        {
                          if (*(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                                   + 0x12) <= 2u)
                          {
                            v287 = **(_QWORD **)((*(_QWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                               + 0x48);
                            if (v287 >> 49)
                            {
                              v288 = (double)(int)v287;
                              if (v287 <= 0xFFFDFFFFFFFFFFFFLL)
                                *(_QWORD *)&v288 = v287 - 0x2000000000000;
                              if (v288 > -4194304.0 && v288 < 4194304.0)
                                goto LABEL_289;
                            }
                          }
                          if (*(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x20) & 0xFF00FFFFFFFFFFFFLL)
                                                   + 0x12) <= 2u)
                          {
                            v226 = *(unint64_t **)((*(_QWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL)
                                                                     + 0x20) & 0xFF00FFFFFFFFFFFFLL)
                                                        + 0x48);
                            goto LABEL_398;
                          }
                        }
LABEL_286:
                        v184 = *(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL;
                        v185 = *(unsigned __int16 *)(v184 + 0x12);
                        if (v185 < 3)
                          goto LABEL_535;
                        if (v185 - 43 >= 2)
                          goto LABEL_288;
                        if (*(unsigned __int16 *)((*(_QWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                                 + 0x12) > 2u)
                          goto LABEL_534;
                        v290 = **(_QWORD **)((*(_QWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                           + 0x48);
                        if (!(v290 >> 49))
                          goto LABEL_534;
                        v291 = (double)(int)v290;
                        if (v290 <= 0xFFFDFFFFFFFFFFFFLL)
                          *(_QWORD *)&v291 = v290 - 0x2000000000000;
                        if (v291 <= -4194304.0 || v291 >= 4194304.0)
                        {
LABEL_534:
                          v184 = *(_QWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x20) & 0xFF00FFFFFFFFFFFFLL;
                          if (*(unsigned __int16 *)(v184 + 0x12) > 2u)
                            goto LABEL_288;
LABEL_535:
                          v293 = **(_QWORD **)(v184 + 72);
                          if (!(v293 >> 49))
                            goto LABEL_288;
                          v294 = (double)(int)v293;
                          if (v293 <= 0xFFFDFFFFFFFFFFFFLL)
                            *(_QWORD *)&v294 = v293 - 0x2000000000000;
                          if (v294 >= 4194304.0 || v294 <= -4194304.0)
LABEL_288:
                            v102 = v101 & 0xF8000 | 0x4000;
                        }
LABEL_289:
                        if ((v102 | v101) != v101)
                          *(_DWORD *)(v100 + 56) = v102 | v101;
                        v158 = v102 & 0xFFFC3FFF | 0x1C000;
                        v186 = *(_DWORD *)(v182 + 56);
                        if ((v186 | v158) != v186)
                          *(_DWORD *)(v182 + 56) = v186 | v158;
                        v187 = *(_QWORD *)(v100 + 32);
LABEL_128:
                        v99 = v187 & 0xFF00FFFFFFFFFFFFLL;
                        v97 = *(_DWORD *)(v99 + 56);
LABEL_226:
                        v98 = v97 | v158;
LABEL_179:
                        if (v98 != v97)
                          *(_DWORD *)(v99 + 56) = v98;
                        goto LABEL_130;
                      case 0x44:
                      case 0x58:
                        v138 = v101 & 0xC0000 | 0x1C000;
                        v136 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v137 = *(_DWORD *)(v136 + 0x38);
                        goto LABEL_192;
                      case 0x45:
                      case 0x5A:
                        v232 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        v233 = v101 & 0xC0000 | v232 | 0x1C000;
                        if (v233 != v232)
                          *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v233;
                        v139 = *(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL;
                        v140 = *(_DWORD *)(v139 + 0x38);
                        v141 = v101 & 0xC0000 | 0x14000 | v140;
                        goto LABEL_195;
                      case 0x52:
                      case 0x53:
                        v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v181 = *(unsigned __int16 *)(v99 + 0x12);
                        if (v181 >= 3)
                        {
                          if (v181 - 43 >= 0xB)
                            goto LABEL_298;
                          v188 = v101 & 0xD0000 | 0x4000;
LABEL_384:
                          v189 = v101 & 0xD4000;
                          goto LABEL_124;
                        }
                        v222 = **(_QWORD **)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                        if (!(v222 >> 49))
                        {
LABEL_298:
                          v188 = v101 & 0xD0000 | 0x4000;
                          v189 = v188;
                          goto LABEL_124;
                        }
                        v223 = (double)(int)v222;
                        if (v222 <= 0xFFFDFFFFFFFFFFFFLL)
                          *(_QWORD *)&v223 = v222 - 0x2000000000000;
                        v224 = v223 >= 4294967300.0 || v223 <= -4294967300.0;
                        v188 = v101 & 0xD0000 | 0x4000;
                        v189 = v188;
                        if (!v224)
                          goto LABEL_384;
LABEL_124:
                        if (v63 >= 0x10000)
                          v96 = v188;
                        else
                          v96 = v189;
                        v97 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        v98 = v96 | v97 | 0x10000;
                        goto LABEL_179;
                      case 0x55:
                        v297 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v299 = v64;
                        if (JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)v297, (JSC::DFG::Node *)3, v4)|| JSC::DFG::BackwardsPropagationPhase::isNotNegZero((JSC::DFG::BackwardsPropagationPhase *)(*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL), (JSC::DFG::Node *)3, v4))
                        {
                          v102 = v101 & 0xF4000;
                        }
                        v174 = *(unsigned __int16 *)(v297 + 18);
                        v175 = v174 - 41 > 0x2E || ((1 << (v174 - 41)) & 0x680000000A55) == 0;
                        if (!v175
                          || ((v176 = *(unsigned __int16 *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) - 41,
                               v176 <= 0x2E)
                            ? (v177 = ((1 << v176) & 0x680000000A55) == 0)
                            : (v177 = 1),
                              !v177
                           || (*(_DWORD *)(v297 + 56) & 7) == 2
                           || (*(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) & 7) == 2))
                        {
                          v102 &= 0xDC000u;
                        }
                        v64 = v299;
                        if (v174 < 3)
                        {
                          v199 = **(_QWORD **)(v297 + 72);
                          if (v199 >> 49)
                          {
                            v200 = (double)(int)v199;
                            if (v199 <= 0xFFFDFFFFFFFFFFFFLL)
                              *(_QWORD *)&v200 = v199 - 0x2000000000000;
                            if (v200 > -4294967300.0 && v200 < 4294967300.0)
                            {
LABEL_275:
                              v179 = v102 | 0x4000;
                              if (v63 < 0x10000)
                                v179 = v102;
                              v138 = v179 | 0x10000;
                              v180 = *(_DWORD *)(v297 + 56);
                              if ((v180 | v138) != v180)
                                *(_DWORD *)(v297 + 56) = v180 | v138;
                              goto LABEL_194;
                            }
                          }
                        }
                        else if (v174 - 43 < 0xB)
                        {
                          goto LABEL_275;
                        }
                        v178 = *(unsigned __int16 *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        if (v178 >= 3)
                        {
                          if (v178 - 43 < 0xB)
                            goto LABEL_275;
LABEL_274:
                          v102 |= 0x4000u;
                          goto LABEL_275;
                        }
                        v202 = **(_QWORD **)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                        if (!(v202 >> 49))
                          goto LABEL_274;
                        v203 = (double)(int)v202;
                        if (v202 <= 0xFFFDFFFFFFFFFFFFLL)
                          *(_QWORD *)&v203 = v202 - 0x2000000000000;
                        if (v203 >= 4294967300.0 || v203 <= -4294967300.0)
                          goto LABEL_274;
                        goto LABEL_275;
                      case 0x5C:
                      case 0x5D:
                      case 0x184:
                        v152 = *(_QWORD *)(v100 + 24);
                        v153 = *(_DWORD *)(v64 + 164);
                        if (v153 <= v152)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFBD4);
                        }
                        v154 = *(_QWORD *)(v64 + 152);
                        v155 = *(_DWORD *)((*(_QWORD *)(v154 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x38);
                        if ((v155 | 0x3C000) != v155)
                          *(_DWORD *)((*(_QWORD *)(v154 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                    + 0x38) = v155 | 0x3C000;
                        v156 = v152 + 1;
                        if (v153 <= v156)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFBDCLL);
                        }
                        v157 = *(_QWORD *)(v154 + 8 * v156);
                        goto LABEL_224;
                      case 0x65:
                      case 0x66:
                      case 0x68:
                      case 0x187:
                        v167 = *(_QWORD *)(v100 + 24);
                        v168 = *(_DWORD *)(v64 + 164);
                        if (v168 <= v167)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFBBCLL);
                        }
                        v169 = *(_QWORD *)(v64 + 152);
                        v170 = *(_DWORD *)((*(_QWORD *)(v169 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x38);
                        if ((v170 | 0x3C000) != v170)
                          *(_DWORD *)((*(_QWORD *)(v169 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                    + 0x38) = v170 | 0x3C000;
                        if (v168 <= (int)v167 + 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFBC4);
                        }
                        v171 = *(_DWORD *)((*(_QWORD *)(v169 + 8 * (v167 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x38);
                        if ((v171 | 0xF4000) != v171)
                          *(_DWORD *)((*(_QWORD *)(v169 + 8 * (v167 + 1)) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v171 | 0xF4000;
                        v172 = v167 + 2;
                        if (v168 <= v172)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFBCCLL);
                        }
                        v173 = *(_QWORD *)(v169 + 8 * v172);
                        goto LABEL_253;
                      case 0xD6:
                        v250 = *(_QWORD *)(v100 + 24);
                        v251 = *(_DWORD *)(v64 + 164);
                        if (v251 <= v250)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1982EFB94);
                        }
                        v252 = *(_QWORD *)(v64 + 152);
                        v253 = *(_DWORD *)((*(_QWORD *)(v252 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x38);
                        if ((v253 | 0x3C000) != v253)
                          *(_DWORD *)((*(_QWORD *)(v252 + 8 * *(_QWORD *)(v100 + 24)) & 0xFF00FFFFFFFFFFFFLL)
                                    + 0x38) = v253 | 0x3C000;
                        v254 = *(_DWORD *)(v100 + 32);
                        switch(v254)
                        {
                          case 2:
                            v257 = v250 + 1;
                            if (v251 <= v257)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EFBB4);
                            }
                            break;
                          case 4:
                            if (v251 <= (int)v250 + 1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EFBA4);
                            }
                            v255 = *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                             + 0x38);
                            if ((v255 | 0xF4000) != v255)
                              *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                        + 0x38) = v255 | 0xF4000;
                            if (v251 <= (int)v250 + 2)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EFBACLL);
                            }
                            v256 = *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 2)) & 0xFF00FFFFFFFFFFFFLL)
                                             + 0x38);
                            if ((v256 | 0xF4000) != v256)
                              *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 2)) & 0xFF00FFFFFFFFFFFFLL)
                                        + 0x38) = v256 | 0xF4000;
                            v257 = v250 + 3;
                            if (v251 <= v257)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EF57CLL);
                            }
                            break;
                          case 3:
                            if (v251 <= (int)v250 + 1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EFB9CLL);
                            }
                            v275 = *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                             + 0x38);
                            if ((v275 | 0xF4000) != v275)
                              *(_DWORD *)((*(_QWORD *)(v252 + 8 * (v250 + 1)) & 0xFF00FFFFFFFFFFFFLL)
                                        + 0x38) = v275 | 0xF4000;
                            v257 = v250 + 2;
                            if (v251 <= v257)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1982EF7C4);
                            }
                            break;
                          default:
                            goto LABEL_130;
                        }
                        v173 = *(_QWORD *)(v252 + 8 * v257);
LABEL_253:
                        v99 = v173 & 0xFF00FFFFFFFFFFFFLL;
                        goto LABEL_254;
                      case 0xE2:
                        v234 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v234 | 0x3C000) != v234)
                          *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v234 | 0x3C000;
                        v235 = *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v235 | 0x3C000) != v235)
                          *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v235 | 0x3C000;
                        v99 = *(_QWORD *)(v100 + 40) & 0xFF00FFFFFFFFFFFFLL;
                        if (v99)
                          goto LABEL_394;
                        goto LABEL_130;
                      case 0xE3:
                      case 0xE4:
                      case 0xE5:
                        v225 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v225 | 0x3C000) != v225)
                          *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v225 | 0x3C000;
                        v99 = *(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL;
LABEL_394:
                        v97 = *(_DWORD *)(v99 + 56);
                        v98 = v97 | 0xFC000;
                        goto LABEL_179;
                      case 0xE7:
                      case 0xE8:
                      case 0xE9:
                      case 0xEA:
                      case 0xEB:
                      case 0xEC:
                      case 0xED:
                      case 0xEE:
                        v136 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v137 = *(_DWORD *)(v136 + 0x38);
                        v138 = 212992;
LABEL_192:
                        if ((v137 | v138) != v137)
                          *(_DWORD *)(v136 + 56) = v137 | v138;
                        goto LABEL_194;
                      case 0x108:
                      case 0x109:
                      case 0x10A:
                      case 0x10D:
                        v157 = *(_QWORD *)(v100 + 24);
LABEL_224:
                        v99 = v157 & 0xFF00FFFFFFFFFFFFLL;
                        goto LABEL_225;
                      case 0x13E:
                      case 0x145:
LABEL_317:
                        v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                        v97 = *(_DWORD *)(v99 + 0x38);
                        v158 = 212992;
                        goto LABEL_226;
                      case 0x16E:
                        switch(*(_DWORD *)(*(_QWORD *)(v100 + 72) + 40))
                        {
                          case 0:
                            v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                            v97 = *(_DWORD *)(v99 + 0x38);
                            v158 = 344064;
                            goto LABEL_226;
                          case 1:
                            v99 = *(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL;
                            v97 = *(_DWORD *)(v99 + 0x38);
                            v158 = 81920;
                            goto LABEL_226;
                          case 2:
                            goto LABEL_317;
                          case 3:
                            v115 = *(_QWORD *)(v100 + 24);
                            if ((v101 & 0x10) == 0)
                              goto LABEL_151;
                            v246 = *(_DWORD *)(v100 + 32);
                            if (v246 + (int)v115 > v115)
                            {
                              v247 = *(_DWORD *)(v64 + 164);
                              v248 = *(_QWORD *)(v100 + 24);
                              if (v247 <= v115)
                                v115 = v115;
                              else
                                v115 = v247;
                              do
                              {
                                if (v115 == v248)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x1982EFB8CLL);
                                }
                                if ((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v248) & 0xFF00FFFFFFFFFFFFLL) != 0)
                                {
                                  v249 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v248) & 0xFF00FFFFFFFFFFFFLL)
                                                   + 0x38);
                                  if ((v249 | 0x3C000) != v249)
                                    *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v248) & 0xFF00FFFFFFFFFFFFLL)
                                              + 0x38) = v249 | 0x3C000;
                                }
                                ++v248;
                                --v246;
                              }
                              while (v246);
                            }
                            break;
                          default:
                            goto LABEL_130;
                        }
                        goto LABEL_130;
                      case 0x19C:
                      case 0x19D:
                        v230 = *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v230 | 0x3C000) != v230)
                          *(_DWORD *)((*(_QWORD *)(v100 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v230 | 0x3C000;
                        v231 = *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                        if ((v231 | 0xF4000) != v231)
                          *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v231 | 0xF4000;
                        v99 = *(_QWORD *)(v100 + 40) & 0xFF00FFFFFFFFFFFFLL;
                        if (!v99)
                          goto LABEL_130;
LABEL_225:
                        v97 = *(_DWORD *)(v99 + 56);
                        v158 = 999424;
                        goto LABEL_226;
                      default:
                        v115 = *(_QWORD *)(v100 + 24);
                        if ((v101 & 0x10) != 0)
                        {
                          v142 = *(_DWORD *)(v100 + 32);
                          if (v142 + (int)v115 > v115)
                          {
                            v143 = *(_DWORD *)(v64 + 164);
                            v144 = *(_QWORD *)(v100 + 24);
                            if (v143 <= v115)
                              v115 = v115;
                            else
                              v115 = v143;
                            do
                            {
                              if (v115 == v144)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1982EFBE4);
                              }
                              if ((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v144) & 0xFF00FFFFFFFFFFFFLL) != 0)
                              {
                                v145 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v144) & 0xFF00FFFFFFFFFFFFLL)
                                                 + 0x38);
                                if ((v145 | 0x3C000) != v145)
                                  *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(v64 + 152) + 8 * v144) & 0xFF00FFFFFFFFFFFFLL)
                                            + 0x38) = v145 | 0x3C000;
                              }
                              ++v144;
                              --v142;
                            }
                            while (v142);
                          }
                        }
                        else
                        {
LABEL_151:
                          v116 = v115 & 0xFF00FFFFFFFFFFFFLL;
                          if ((v115 & 0xFF00FFFFFFFFFFFFLL) != 0)
                          {
                            v117 = *(_DWORD *)((v115 & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                            if ((v117 | 0x3C000) != v117)
                              *(_DWORD *)(v116 + 56) = v117 | 0x3C000;
                            if ((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
                            {
                              v130 = *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38);
                              if ((v130 | 0x3C000) != v130)
                                *(_DWORD *)((*(_QWORD *)(v100 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v130 | 0x3C000;
                              v99 = *(_QWORD *)(v100 + 40) & 0xFF00FFFFFFFFFFFFLL;
                              if (v99)
                              {
LABEL_254:
                                v97 = *(_DWORD *)(v99 + 56);
                                v98 = v97 | 0x3C000;
                                goto LABEL_179;
                              }
                            }
                          }
                        }
                        goto LABEL_130;
                    }
                    break;
                  }
                }
LABEL_210:
                v146 = *(_DWORD *)(v46 + 8);
                if (HIDWORD(v316) <= v146)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1982EFBECLL);
                }
                v147 = v315;
                v148 = (void **)((char *)v315 + 24 * v146);
                v149 = *((unsigned int *)v148 + 3);
                v150 = HIDWORD(v318);
                if (v149 != HIDWORD(v318) || memcmp(*v148, __src, 4 * v149))
                {
                  if (&__src != v148)
                  {
                    if (v149 > v150)
                    {
                      *((_DWORD *)v148 + 3) = v150;
                    }
                    else
                    {
                      v151 = *((unsigned int *)v148 + 2);
                      if (v150 > v151)
                      {
                        if (*((_DWORD *)v148 + 2))
                        {
                          if (v149)
                            *((_DWORD *)v148 + 3) = 0;
                          v280 = (unint64_t)*v148;
                          if (*v148)
                          {
                            *v148 = 0;
                            *((_DWORD *)v148 + 2) = 0;
                            WTF::fastFree(v280, (void *)v3, v4, v5, v6, v7, v8, v9);
                            v151 = *((unsigned int *)v148 + 2);
                          }
                        }
                        v258 = HIDWORD(v318);
                        if (v151 < HIDWORD(v318))
                        {
                          if ((unint64_t)HIDWORD(v318) >> 30)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1982EFC4CLL);
                          }
                          v259 = *v148;
                          v260 = *((unsigned int *)v148 + 3);
                          v261 = (void *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v318)));
                          *((_DWORD *)v148 + 2) = v258;
                          *v148 = v261;
                          memcpy(v261, v259, 4 * v260);
                          if (v259)
                          {
                            if (*v148 == v259)
                            {
                              *v148 = 0;
                              *((_DWORD *)v148 + 2) = 0;
                            }
                            WTF::fastFree((unint64_t)v259, v262, v263, v264, v265, v266, v267, v268);
                          }
                        }
                      }
                      v150 = *((unsigned int *)v148 + 3);
                    }
                    v43 = (char *)*v148;
                    v44 = (char *)__src;
                    if (v150)
                    {
                      memmove(v43, __src, 4 * v150);
                      v42 = *((unsigned int *)v148 + 3);
                      v43 = (char *)*v148;
                      v44 = (char *)__src;
                    }
                    else
                    {
                      v42 = 0;
                    }
                    memcpy(&v43[4 * v42], &v44[4 * v42], 4 * HIDWORD(v318) - 4 * v42);
                    *((_DWORD *)v148 + 3) = HIDWORD(v318);
                  }
                  *((_QWORD *)v147 + 3 * v146 + 2) = v319;
                  v305 = 1;
                }
                break;
            }
          }
        }
        while (v41);
        if ((v305 & 1) == 0)
        {
          v14 = v310;
          goto LABEL_346;
        }
      }
    }
  }
  if ((_DWORD)v302 == (_DWORD)v15)
    goto LABEL_49;
  v304 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  LODWORD(v16) = v302;
  do
  {
    if (v16 <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EFC14);
    }
    if (!*(_DWORD *)(v310 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x1982EFC34);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v15);
    v18 = *(uint64_t **)(v310 + 48);
    v19 = *v18;
    v20 = *(unsigned int *)(*v18 + 84);
    if ((_DWORD)v20)
    {
      if (v20 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1982EFC1CLL);
      }
      v21 = *(_QWORD *)(v304 + 752);
      if (!v21)
        goto LABEL_545;
      v22 = (unint64_t)(4 * v20 + 15) >> 4;
      if (v20 <= 0x68)
      {
        v23 = 23 * v22 + 7;
      }
      else if (v20 > 0x9C4
             || (v23 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v22 + 626),
                 *(_DWORD *)(v21 + 8052) <= v23))
      {
LABEL_545:
        v27 = (void *)bmalloc_allocate_casual(4 * v20, 1);
        goto LABEL_28;
      }
      v24 = v21 + 8 * v23;
      v25 = v24 + 8064;
      *(_BYTE *)(v24 + 8064) = 1;
      v26 = *(unsigned int *)(v24 + 8080);
      if ((_DWORD)v26)
      {
        *(_DWORD *)(v25 + 16) = v26 - *(_DWORD *)(v25 + 20);
        v27 = (void *)(*(_QWORD *)(v25 + 8) - v26);
      }
      else
      {
        v38 = *(_QWORD *)(v25 + 40);
        v39 = *(_QWORD *)(v25 + 24);
        if (!v38)
        {
          if (*(_BYTE *)(v25 + 5) == 6)
          {
            v269 = *(unsigned int *)(v25 + 32);
            v270 = *(_DWORD *)(v25 + 36);
            if (v269 < v270)
            {
              *(_QWORD *)(v25 + 8 * v269 + 56) = 0;
              v271 = (unint64_t *)(v21 + 8128 + 8 * v23 + 8 * v269);
              v272 = v270 - 1 - v269;
              while (v272)
              {
                v39 += 1024;
                v274 = *v271++;
                v273 = v274;
                LODWORD(v269) = v269 + 1;
                --v272;
                if (v274)
                {
                  v38 = __rbit64(v273);
                  *(_DWORD *)(v25 + 32) = v269;
                  *(_QWORD *)(v25 + 24) = v39;
                  goto LABEL_47;
                }
              }
              *(_DWORD *)(v25 + 32) = v270;
            }
          }
          *(_BYTE *)v25 = 0;
          goto LABEL_545;
        }
LABEL_47:
        v40 = __clz(v38);
        *(_QWORD *)(v25 + 40) = v38 & ~(0x8000000000000000 >> v40);
        v27 = (void *)(v39 + 16 * v40);
      }
      *(_BYTE *)v25 = 0;
LABEL_28:
      bzero(v27, 4 * v20);
      goto LABEL_29;
    }
    v27 = 0;
LABEL_29:
    v28 = *(_DWORD *)(v17 + 8);
    if (HIDWORD(v316) <= v28)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EFC24);
    }
    v29 = *(_QWORD *)(v19 + 88);
    v30 = v315;
    v31 = (char *)v315 + 24 * v28;
    v3 = *(_QWORD *)v31;
    if (*(_QWORD *)v31)
    {
      *(_QWORD *)v31 = 0;
      *((_DWORD *)v31 + 2) = 0;
      v36 = *(_QWORD *)(v304 + 752);
      if (v36)
      {
        if (v3 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v3 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v3)) & 1) == 0)
        {
          if (v3 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v3 >> 24)
          {
            v5 = 0;
LABEL_473:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v36, v3, 1, v5, v6, v7, v8, v9);
            goto LABEL_31;
          }
          v5 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v3 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v3) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v5 != 1)
            goto LABEL_473;
        }
        v37 = *(unsigned int *)(v36 + 8000);
        if (v37 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v36, v3, (os_unfair_lock_s *)5, v5, v6, v7, v8, v9);
        }
        else
        {
          *(_QWORD *)(v36 + 8 * v37) = v3 | 0x5000000000000;
          *(_DWORD *)(v36 + 8000) = v37 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v3, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
LABEL_31:
    *(_QWORD *)v31 = v27;
    *((_DWORD *)v31 + 2) = v20;
    *((_DWORD *)v31 + 3) = v20;
    *((_QWORD *)v30 + 3 * v28 + 2) = v29;
    v32 = *(_DWORD *)(v17 + 8);
    if (HIDWORD(v316) <= v32)
    {
      __break(0xC471u);
      JUMPOUT(0x1982EFC2CLL);
    }
    v33 = (char *)v315 + 24 * v32;
    if (*((_DWORD *)v33 + 3))
    {
      v34 = 0;
      v35 = *(_QWORD *)v33;
      do
        *(_DWORD *)(v35 + 4 * v34++) = 0;
      while (v34 < *((unsigned int *)v33 + 3));
    }
    v15 = (v15 + 1);
    v16 = *(unsigned int *)(v14 + 60);
    if (v16 > v15)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v15))
      {
        if (v16 == ++v15)
        {
          LODWORD(v15) = *(_DWORD *)(v14 + 60);
          break;
        }
      }
    }
  }
  while ((_DWORD)v302 != (_DWORD)v15);
  v14 = v310;
  if (*(_DWORD *)(v310 + 60))
    goto LABEL_49;
LABEL_346:
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v205 = (*(_DWORD *)(*(_QWORD *)(v14 + 24) + 16) & 0xFFFFFFFE) == 4) : (v205 = 0),
        !v205 ? (v206 = BYTE2(qword_1ECF4C32A) == 0) : (v206 = 0),
        !v206))
  {
    v320 = v311;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v14 + 1088, "Phase ", (uint64_t)&v320, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v321);
  v214 = __src;
  if (__src)
  {
    __src = 0;
    LODWORD(v318) = 0;
    WTF::fastFree((unint64_t)v214, (void *)v207, v208, v209, v210, v211, v212, v213);
  }
  v215 = v315;
  if (HIDWORD(v316))
  {
    v216 = 24 * HIDWORD(v316);
    v217 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v207 = *(_QWORD *)v215;
      if (*(_QWORD *)v215)
      {
        *(_QWORD *)v215 = 0;
        *((_DWORD *)v215 + 2) = 0;
        v218 = *(_QWORD *)(v217 + 752);
        if (v218)
        {
          if (!(v207 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v207 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v207)) & 1) != 0)
          {
LABEL_365:
            v219 = *(unsigned int *)(v218 + 8000);
            if (v219 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v218, v207, (os_unfair_lock_s *)5, v209, v210, v211, v212, v213);
            }
            else
            {
              *(_QWORD *)(v218 + 8 * v219) = v207 | 0x5000000000000;
              *(_DWORD *)(v218 + 8000) = v219 + 1;
            }
            goto LABEL_360;
          }
          if (v207 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v207 >> 24)
          {
            v209 = 0;
          }
          else
          {
            v209 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v207 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v207) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v209 == 1)
              goto LABEL_365;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v218, v207, 1, v209, v210, v211, v212, v213);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v207, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_360:
      v215 = (WTF *)((char *)v215 + 24);
      v216 -= 24;
      if (!v216)
      {
        v215 = v315;
        break;
      }
    }
  }
  if (v215)
  {
    v315 = 0;
    LODWORD(v316) = 0;
    WTF::fastFree((unint64_t)v215, (void *)v207, v208, v209, v210, v211, v212, v213);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v312)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v306, v207, v208, v209, v210, v211, v212, v213);
  v220 = v313;
  v313 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 1)
      WTF::fastFree((unint64_t)v220, (void *)v207, v208, v209, v210, v211, v212, v213);
    else
      --*(_DWORD *)v220;
  }
  return 1;
}

