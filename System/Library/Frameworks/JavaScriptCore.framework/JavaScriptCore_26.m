uint64_t JSC::DFG::`anonymous namespace'::Relationship::safeCreate(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (!a2)
    goto LABEL_19;
  if ((a2 & 1) != 0)
  {
    if (*(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 18) != 27 || a3 == 0)
      goto LABEL_19;
  }
  else if (!a3)
  {
    goto LABEL_19;
  }
  if ((a3 & 1) != 0)
  {
    if (*(_WORD *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27 && a2 != a3)
      goto LABEL_6;
LABEL_19:
    a5 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 1;
    goto LABEL_7;
  }
  if (a2 == a3)
    goto LABEL_19;
LABEL_6:
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
LABEL_7:
  *(_DWORD *)(result + 20) = a5;
  return result;
}

double JSC::DFG::`anonymous namespace'::Relationship::inverse(JSC::DFG::_anonymous_namespace_::Relationship *this, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  double result;

  v2 = *a2;
  if (*a2)
  {
    switch(*((_DWORD *)a2 + 4))
    {
      case 0:
        v3 = *((_DWORD *)a2 + 5);
        if (v3 == 0x80000000)
          goto LABEL_22;
        v4 = a2[1];
        *(_QWORD *)this = v2;
        *((_QWORD *)this + 1) = v4;
        *((_DWORD *)this + 4) = 3;
        *((_DWORD *)this + 5) = v3 - 1;
        if (!v4)
        {
          __break(0xC471u);
          JUMPOUT(0x198425508);
        }
        if (v2 == v4)
        {
          __break(0xC471u);
          JUMPOUT(0x198425528);
        }
        return result;
      case 1:
        v5 = a2[1];
        v6 = *((_DWORD *)a2 + 5);
        *(_QWORD *)this = v2;
        *((_QWORD *)this + 1) = v5;
        *((_DWORD *)this + 4) = 2;
        *((_DWORD *)this + 5) = v6;
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x198425548);
        }
        if (v2 == v5)
        {
          __break(0xC471u);
          JUMPOUT(0x198425448);
        }
        return *(double *)&v9;
      case 2:
        v10 = a2[1];
        v11 = *((_DWORD *)a2 + 5);
        *(_QWORD *)this = v2;
        *((_QWORD *)this + 1) = v10;
        *((_DWORD *)this + 4) = 1;
        *((_DWORD *)this + 5) = v11;
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x19842559CLL);
        }
        if (v2 == v10)
        {
          __break(0xC471u);
          JUMPOUT(0x1984254E8);
        }
        return *(double *)&v9;
      case 3:
        v7 = *((_DWORD *)a2 + 5);
        if (v7 == 0x7FFFFFFF)
        {
LABEL_22:
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
          *(_QWORD *)&v9 = 1;
          *((_QWORD *)this + 2) = 1;
        }
        else
        {
          v8 = a2[1];
          *(_QWORD *)this = v2;
          *((_QWORD *)this + 1) = v8;
          *((_DWORD *)this + 4) = 0;
          *((_DWORD *)this + 5) = v7 + 1;
          if (!v8)
          {
            __break(0xC471u);
            JUMPOUT(0x198425568);
          }
          if (v2 == v8)
          {
            __break(0xC471u);
            JUMPOUT(0x198425494);
          }
        }
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x1984255BCLL);
    }
  }
  else
  {
    v9 = *(_OWORD *)a2;
    *(_OWORD *)this = *(_OWORD *)a2;
    *((_QWORD *)this + 2) = a2[2];
  }
  return *(double *)&v9;
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::setRelationship(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;

  v22 = *a2;
  v23 = a2[1].n128_u64[0];
  v15 = a2->n128_u64[0];
  if (!a2->n128_u64[0] || (v16 = a2[1].n128_u32[1], v16 == 0x80000000))
  {
    v20 = 0uLL;
    v21 = 1;
  }
  else
  {
    v17 = a2[1].n128_i32[0];
    if (v17 >= 4
      || (v18 = dword_199155EB4[v17],
          v19 = a2->n128_u64[1],
          v20.n128_u64[0] = v19,
          v20.n128_u64[1] = v15,
          LODWORD(v21) = v18,
          HIDWORD(v21) = -v16,
          !v19))
    {
      __break(0xC471u);
      JUMPOUT(0x1984256A0);
    }
    if (v19 == v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1984256C0);
    }
  }
}

uint64_t JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::BitVector *this, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  __int128 v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  WTF *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  __int128 v66;
  WTF *v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  int v71;
  char v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  __int128 v89;
  uint64_t v90;
  WTF **v91;
  uint64_t *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  __int128 v96;
  unint64_t v97;
  WTF **v98;
  uint64_t *v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  WTF *v116;
  uint64_t v117;
  WTF *v118;
  unint64_t v119;
  int *v120;
  int *v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  char v126;
  int v128;
  int v129;
  int v130;
  int v131;
  _QWORD *v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t *v140;
  unsigned int v141;
  __int128 *v142;
  __int128 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  unint64_t v176;
  int v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v195;
  WTF::BitVector *v196;
  uint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v202;
  WTF **v203;
  WTF **v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  unint64_t v208;
  WTF *v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  __int128 v215;
  unint64_t v216;
  __int128 v217;
  uint64_t v218;

  v11 = (uint64_t *)((char *)this + 88);
  v10 = *((_QWORD *)this + 11);
  v12 = *(unsigned int *)(a3 + 8);
  if (v10 < 0)
    v13 = 63;
  else
    v13 = *(_QWORD *)(2 * v10);
  if (v13 <= v12)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)((char *)this + 88), v12 + 1, 0);
    v10 = *v11;
  }
  if (v10 >= 0)
    v14 = 2 * v10 + 8;
  else
    v14 = (uint64_t)v11;
  v15 = (v12 >> 3) & 0x1FFFFFF8;
  v16 = *(_QWORD *)(v14 + v15);
  *(_QWORD *)(v14 + v15) = v16 | (1 << v12);
  if ((v16 & (1 << v12)) == 0)
  {
    v22 = *a2;
    if (*a2)
    {
      v23 = *((unsigned int *)v22 - 1);
      v24 = &v22[3 * v23];
      if (*((_DWORD *)v22 - 3))
      {
        v25 = *a2;
        if ((_DWORD)v23)
        {
          v26 = 24 * v23;
          v25 = *a2;
          do
          {
            if ((unint64_t)*v25 > 1)
              goto LABEL_256;
            v25 += 3;
            v26 -= 24;
          }
          while (v26);
          v25 = v24;
        }
        goto LABEL_256;
      }
      v25 = &v22[3 * v23];
    }
    else
    {
      v25 = 0;
      LODWORD(v23) = 0;
    }
    v24 = &v22[3 * v23];
LABEL_256:
    if (v22)
      v134 = &v22[3 * *((unsigned int *)v22 - 1)];
    else
      v134 = 0;
    if (v134 == v25)
      goto LABEL_318;
    while (1)
    {
      if (*v25 != *((_QWORD *)this + 9))
      {
        v135 = *(_QWORD *)(a3 + 200);
        v136 = *(unsigned int *)(v135 + 76);
        if (!(_DWORD)v136)
          goto LABEL_302;
        v137 = *(uint64_t **)(v135 + 64);
        while (1)
        {
          v138 = *v137++;
          if (v138 == *v25)
            break;
          if (!--v136)
            goto LABEL_302;
        }
      }
      v215 = 0uLL;
      v139 = *((_DWORD *)v25 + 5);
      if (!v139)
      {
        v154 = 0;
        v140 = 0;
        goto LABEL_282;
      }
      v140 = 0;
      v141 = 0;
      v142 = (__int128 *)v25[1];
      v143 = (__int128 *)((char *)v142 + 24 * v139);
      do
      {
        v144 = *((_QWORD *)v142 + 2);
        v217 = *v142;
        v218 = v144;
        if (*((_QWORD *)&v217 + 1) != *((_QWORD *)this + 9))
        {
          v145 = *(_QWORD *)(a3 + 200);
          v146 = *(unsigned int *)(v145 + 76);
          if (!(_DWORD)v146)
            goto LABEL_276;
          v147 = *(uint64_t **)(v145 + 64);
          while (1)
          {
            v148 = *v147++;
            if (v148 == *((_QWORD *)&v217 + 1))
              break;
            if (!--v146)
              goto LABEL_276;
          }
        }
        if (v141 == DWORD2(v215))
        {
          v140 = (uint64_t *)v215;
          v141 = HIDWORD(v215);
          v152 = v215 + 24 * HIDWORD(v215);
          v153 = *(_QWORD *)(v151 + 16);
          *(_OWORD *)v152 = *(_OWORD *)v151;
          *(_QWORD *)(v152 + 16) = v153;
        }
        else
        {
          v149 = *v142;
          v150 = &v140[3 * v141];
          v150[2] = *((_QWORD *)v142 + 2);
          *(_OWORD *)v150 = v149;
        }
        HIDWORD(v215) = ++v141;
LABEL_276:
        v142 = (__int128 *)((char *)v142 + 24);
      }
      while (v142 != v143);
      v154 = &v140[3 * v141];
      if (v141)
      {
        v155 = 126 - 2 * __clz(v141);
        goto LABEL_283;
      }
LABEL_282:
      v155 = 0;
LABEL_283:
      v158 = *(unsigned int *)(a3 + 8);
      if (*((_DWORD *)this + 27) <= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x198426AB8);
      }
      v159 = (uint64_t *)(*((_QWORD *)this + 12) + 8 * v158);
      v160 = *v159;
      if (*v159
      {
        v161 = *(_DWORD *)(v160 - 8);
      }
      else
      {
        v161 = 0;
      }
      v162 = *v25;
      v163 = v161 & *v25;
      v164 = (_QWORD *)(v160 + 24 * v163);
      v165 = *v164;
      if (*v164)
      {
        v166 = 0;
        v167 = 1;
        do
        {
          if (v165 == v162)
            goto LABEL_300;
          if (v165 == 1)
            v166 = v164;
          v163 = (v163 + v167) & v161;
          v164 = (_QWORD *)(v160 + 24 * v163);
          v165 = *v164;
          ++v167;
        }
        while (*v164);
        if (v166)
        {
          *v166 = 0;
          v166[1] = 0;
          v166[2] = 0;
          --*(_DWORD *)(*v159 - 16);
          v162 = *v25;
          v164 = v166;
        }
      }
      *v164 = v162;
      v168 = *v159;
      if (*v159)
        v169 = *(_DWORD *)(v168 - 12) + 1;
      else
        v169 = 1;
      *(_DWORD *)(v168 - 12) = v169;
      v170 = *v159;
      if (*v159)
        v171 = *(_DWORD *)(v170 - 12);
      else
        v171 = 0;
      v172 = (*(_DWORD *)(v170 - 16) + v171);
      v173 = *(unsigned int *)(v170 - 4);
      if (v173 > 0x400)
      {
        if (v173 > 2 * v172)
          goto LABEL_300;
LABEL_345:
        v176 = ((_DWORD)v173 << (6 * *(_DWORD *)(v170 - 12) >= (2 * v173)));
LABEL_317:
        goto LABEL_300;
      }
      if (3 * v173 <= 4 * v172)
      {
        if ((_DWORD)v173)
          goto LABEL_345;
        v176 = 8;
        goto LABEL_317;
      }
LABEL_300:
      v174 = v215;
      if ((_QWORD)v215)
      {
        *(_QWORD *)&v215 = 0;
        DWORD2(v215) = 0;
        WTF::fastFree(v174, v156, v157, a4, a5, a6, a7, a8);
      }
LABEL_302:
      v175 = v25 + 3;
      v25 = v24;
      if (v175 != v24)
      {
        v25 = v175;
        do
        {
          if ((unint64_t)*v25 > 1)
            goto LABEL_307;
          v25 += 3;
        }
        while (v25 != v24);
        v25 = v24;
      }
LABEL_307:
      if (v25 == v134)
      {
LABEL_318:
        v126 = 1;
        return v126 & 1;
      }
    }
  }
  v213 = 0;
  v214 = 0;
  v17 = *(unsigned int *)(a3 + 8);
  if (*((_DWORD *)this + 27) <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198426AC0);
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v17);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v200 = v18 + 24 * v19;
    if (*(_DWORD *)(v18 - 12))
    {
      v20 = v18;
      if ((_DWORD)v19)
      {
        v21 = 24 * v19;
        v20 = v18;
        while (*(_QWORD *)v20 <= 1uLL)
        {
          v20 += 24;
          v21 -= 24;
          if (!v21)
          {
            v20 = v200;
            goto LABEL_27;
          }
        }
      }
      goto LABEL_27;
    }
    v20 = v18 + 24 * v19;
  }
  else
  {
    v20 = 0;
    LODWORD(v19) = 0;
  }
  v200 = v18 + 24 * v19;
LABEL_27:
  if (v18)
    v27 = v18 + 24 * *(unsigned int *)(v18 - 4);
  else
    v27 = 0;
  if (v27 == v20)
  {
    v126 = 0;
    return v126 & 1;
  }
  v196 = this;
  v197 = a3;
  v198 = 0;
  v28 = v200;
  v199 = v27;
  do
  {
    v29 = *a2;
    v30 = *(_QWORD *)v20;
    if (!*a2)
      goto LABEL_249;
    v31 = *((_DWORD *)v29 - 2);
    v32 = v31 & v30;
    v33 = &v29[3 * (v31 & v30)];
    v34 = *v33;
    if (*v33 != v30)
    {
      v35 = 1;
      while (v34)
      {
        v32 = (v32 + v35) & v31;
        v33 = &v29[3 * v32];
        v34 = *v33;
        ++v35;
        if (*v33 == v30)
          goto LABEL_36;
      }
      v33 = &v29[3 * *((unsigned int *)v29 - 1)];
    }
LABEL_36:
    if (v33 == &v29[3 * *((unsigned int *)v29 - 1)])
    {
LABEL_249:
      v131 = HIDWORD(v214);
      if (HIDWORD(v214) == (_DWORD)v214)
      {
        v132 = (_QWORD *)WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v213, HIDWORD(v214) + 1, v20);
        v133 = HIDWORD(v214) + 1;
        v213[HIDWORD(v214)] = *v132;
        HIDWORD(v214) = v133;
      }
      else
      {
        v213[HIDWORD(v214)] = v30;
        HIDWORD(v214) = v131 + 1;
      }
      v198 = 1;
      goto LABEL_203;
    }
    v211 = 0;
    v212 = 0;
    v37 = (uint64_t *)(v20 + 8);
    v36 = *(_QWORD *)(v20 + 8);
    v38 = *(unsigned int *)(v20 + 20);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = 0;
      v41 = 24 * v38;
      do
      {
        v42 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFFELL;
        if (*(unsigned __int16 *)(v42 + 18) <= 2u && **(_QWORD **)(v42 + 72) >= 0xFFFE000000000000)
        {
          if (v40 == (_DWORD)v212)
          {
            v39 = v211;
            v40 = HIDWORD(v212);
            v46 = (char *)v211 + 24 * HIDWORD(v212);
            v47 = *(_QWORD *)(v45 + 16);
            *(_OWORD *)v46 = *(_OWORD *)v45;
            *((_QWORD *)v46 + 2) = v47;
          }
          else
          {
            v43 = *(_OWORD *)v36;
            v44 = (char *)v39 + 24 * v40;
            *((_QWORD *)v44 + 2) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v44 = v43;
          }
          HIDWORD(v212) = ++v40;
        }
        v36 += 24;
        v41 -= 24;
      }
      while (v41);
    }
    v209 = 0;
    v210 = 0;
    v48 = *(_DWORD *)(v20 + 20);
    if (!v48)
    {
      v113 = 0;
      v112 = 0;
      v27 = v199;
      goto LABEL_194;
    }
    v49 = *(_QWORD *)(v20 + 8);
    v202 = v49 + 24 * v48;
    do
    {
      v50 = *(_OWORD *)v49;
      v208 = *(_QWORD *)(v49 + 16);
      v207 = v50;
      v51 = *((_DWORD *)v33 + 5);
      if (v51)
      {
        v52 = v33[1];
        v53 = v52 + 24 * v51;
        do
        {
          v54 = *(_OWORD *)v52;
          v206 = *(_QWORD *)(v52 + 16);
          v205 = v54;
          v203 = &v211;
          v204 = &v209;
          v55 = v54;
          if ((_QWORD)v207 == (_QWORD)v54)
          {
            if (*((_QWORD *)&v207 + 1) == *((_QWORD *)&v205 + 1))
            {
              v57 = v206;
              v56 = HIDWORD(v206);
              if (v208 == v206)
              {
                v215 = v207;
                v216 = v208;
                if (*(unsigned __int16 *)((*((_QWORD *)&v207 + 1) & 0xFFFFFFFFFFFFFFFELL) + 18) <= 2u)
                {
                  v58 = **(_QWORD **)((*((_QWORD *)&v207 + 1) & 0xFFFFFFFFFFFFFFFELL) + 72);
                  if (v58 >= 0xFFFE000000000000)
                  {
                    if (HIDWORD(v212))
                    {
                      v59 = v211;
                      if (__OFADD__((_DWORD)v58, HIDWORD(v216)))
                      {
                        v195 = 24 * HIDWORD(v212);
                        while (*(_QWORD *)v59 != (_QWORD)v215
                             || *((_DWORD *)v59 + 4) != (_DWORD)v216
                             || *((_QWORD *)v59 + 1) != *((_QWORD *)&v207 + 1)
                             || *((_DWORD *)v59 + 5) != HIDWORD(v216))
                        {
                          v59 = (WTF *)((char *)v59 + 24);
                          v195 -= 24;
                          if (!v195)
                            goto LABEL_74;
                        }
                      }
                      else
                      {
                        v60 = HIDWORD(v216) + v58;
                        v61 = 24 * HIDWORD(v212);
                        while (1)
                        {
                          if (*(_QWORD *)v59 == (_QWORD)v215 && *((_DWORD *)v59 + 4) == (_DWORD)v216)
                          {
                            v62 = *((_QWORD *)v59 + 1);
                            if (v62 == *((_QWORD *)&v207 + 1) && *((_DWORD *)v59 + 5) == HIDWORD(v216))
                              break;
                            v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
                            if (*(unsigned __int16 *)(v63 + 18) <= 2u)
                            {
                              v64 = **(_QWORD **)(v63 + 72);
                              if (v64 >= 0xFFFE000000000000)
                              {
                                v65 = *((_DWORD *)v59 + 5);
                                if (!__OFADD__((_DWORD)v64, v65) && v65 + (_DWORD)v64 == v60)
                                  break;
                              }
                            }
                          }
                          v59 = (WTF *)((char *)v59 + 24);
                          v61 -= 24;
                          if (!v61)
                            goto LABEL_74;
                        }
                      }
                      v66 = *(_OWORD *)v59;
                      v216 = *((_QWORD *)v59 + 2);
                      v215 = v66;
                    }
                  }
                }
LABEL_74:
                if (!HIDWORD(v210))
                {
                  v93 = 0;
                  v91 = &v209;
                  v94 = (_DWORD *)&v210 + 1;
                  v92 = &v210;
LABEL_169:
                  if (v93 == *(_DWORD *)v92)
                  {
                    v95 = (uint64_t)*v91 + 24 * *v94;
                    v96 = *(_OWORD *)v105;
                    v97 = *(_QWORD *)(v105 + 16);
                  }
                  else
                  {
                    v95 = (uint64_t)*v91 + 24 * v93;
                    v96 = v215;
                    v97 = v216;
                  }
                  *(_QWORD *)(v95 + 16) = v97;
                  *(_OWORD *)v95 = v96;
                  ++*v94;
                  goto LABEL_54;
                }
                v67 = v209;
                v68 = 24 * HIDWORD(v210);
                while (1)
                {
                  if (*(_OWORD *)v67 == v215)
                  {
                    if ((_QWORD)v217)
                      goto LABEL_80;
                  }
                  v67 = (WTF *)((char *)v67 + 24);
                  v68 -= 24;
                  if (!v68)
                  {
                    v91 = v204;
                    v92 = (uint64_t *)(v204 + 1);
                    v94 = (_DWORD *)v204 + 3;
                    v93 = *((unsigned int *)v204 + 3);
                    goto LABEL_169;
                  }
                }
              }
              v69 = (_DWORD)v208 == 3 || (_DWORD)v206 == 3;
              v70 = v69;
              if (v69)
              {
                v106 = 0;
                v109 = 0;
                v107 = 1;
                v108 = 0;
                if ((_QWORD)v54 && HIDWORD(v208) != 0x80000000)
                {
                  if (v208 >= 4)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198426A20);
                  }
                  if (!*((_QWORD *)&v205 + 1))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19842669CLL);
                  }
                  if (*((_QWORD *)&v205 + 1) == (_QWORD)v54)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984266BCLL);
                  }
                  v107 = dword_199155EB4[(int)v208];
                  v106 = -HIDWORD(v208);
                  v109 = *((_QWORD *)&v205 + 1);
                  v108 = v54;
                }
                if (!(_QWORD)v54 || HIDWORD(v206) == 0x80000000)
                  goto LABEL_54;
                v71 = 3;
                v72 = 1;
                switch((int)v206)
                {
                  case 0:
                    break;
                  case 1:
                  case 2:
                    v72 = 0;
                    v71 = v206;
                    break;
                  case 3:
                    v72 = 0;
                    v71 = 0;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x198426A40);
                }
                if (!*((_QWORD *)&v205 + 1))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984266DCLL);
                }
                if (*((_QWORD *)&v205 + 1) == (_QWORD)v54)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984266FCLL);
                }
                if (v107 == 3)
                  v72 = 1;
                if (!v109 || (v72 & 1) != 0)
                  goto LABEL_54;
                v56 = -HIDWORD(v206);
                v57 = v71;
                v110 = v54;
                v55 = *((_QWORD *)&v205 + 1);
              }
              else
              {
                v106 = HIDWORD(v208);
                v107 = v208;
                v108 = *((_QWORD *)&v205 + 1);
                v109 = v54;
                v110 = *((_QWORD *)&v205 + 1);
              }
              if (v57)
                v73 = v106;
              else
                v73 = v56;
              if (v57)
                v74 = v107;
              else
                v74 = 0;
              if (v57)
                v75 = v108;
              else
                v75 = v110;
              if (v57)
                v76 = v109;
              else
                v76 = v55;
              if (v57)
                v106 = v56;
              v77 = v57 == 0;
              if (v57)
              {
                v78 = v110;
              }
              else
              {
                v57 = v107;
                v78 = v108;
              }
              if (v77)
                v79 = v109;
              else
                v79 = v55;
              if (v57 == 2)
              {
                v57 = v74;
                v177 = v73;
                v76 = v79;
                v75 = v78;
                v73 = v106;
              }
              else
              {
                if (!v74)
                {
                  if (v57 == 1)
                  {
                    if (v106 == 0x7FFFFFFF)
                      goto LABEL_54;
                    if (v73 <= v106 + 1)
                      v73 = v106 + 1;
                    if ((v73 + 1) > 2)
                      goto LABEL_54;
                    if (!v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984267B8);
                    }
                    if (!v75)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984267D8);
                    }
                    if (v76 == v75)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984267F8);
                    }
                  }
                  else
                  {
                    if (v57)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426798);
                    }
                    if (v73 <= v106)
                      v73 = v106;
                    if ((v73 + 1) > 2)
                      goto LABEL_54;
                    if (!v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426858);
                    }
                    if (!v75)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426878);
                    }
                    if (v76 == v75)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426898);
                    }
                  }
                  v80 = 0;
                  goto LABEL_137;
                }
                if (v74 == 1)
                {
                  if (v57 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198426928);
                  }
                  if (v73 <= v106)
                    v124 = v106;
                  else
                    v124 = v73;
                  if ((v124 - 1) >= 0xFFFFFFFD)
                  {
                    if (!v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426958);
                    }
                    if (!v78)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426978);
                    }
                    if (v76 == v78)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426998);
                    }
                    if (v106 < v73)
                      v73 = v106;
                    if (v73 < 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19842628CLL);
                    }
                    v80 = 0;
                    v73 = v124 + 1;
                    v75 = v78;
                  }
                  else
                  {
                    if (v106 < v73)
                      v73 = v106;
                    if (v73 > 2)
                      goto LABEL_54;
                    if (!v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984269D8);
                    }
                    if (!v78)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984269B8);
                    }
                    if (v76 == v78)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426A00);
                    }
                    --v73;
                    v80 = 3;
                    v75 = v78;
                  }
                  goto LABEL_137;
                }
                v177 = v106;
                if (v74 != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198426744);
                }
              }
              if (v57 == 1)
              {
                if (!v76 || v73 == v177)
                  goto LABEL_54;
LABEL_329:
                v80 = 2;
LABEL_137:
                if (v70)
                {
                  if (v73 == 0x80000000)
                  {
                    v81 = 0;
                    v76 = 0;
                    v73 = 0;
                    v80 = 1;
                  }
                  else
                  {
                    if (!v75)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426818);
                    }
                    if (v75 == v76)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198426838);
                    }
                    v80 = dword_199155EB4[v80];
                    v73 = -v73;
                    v81 = v75;
                  }
                }
                else
                {
                  v81 = v76;
                  v76 = v75;
                }
                *(_QWORD *)&v215 = v81;
                *((_QWORD *)&v215 + 1) = v76;
                v216 = __PAIR64__(v73, v80);
                if (*(unsigned __int16 *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 18) <= 2u)
                {
                  v82 = **(_QWORD **)((v76 & 0xFFFFFFFFFFFFFFFELL) + 72);
                  if (v82 >= 0xFFFE000000000000)
                  {
                    if (HIDWORD(v212))
                    {
                      v83 = (_DWORD *)((char *)v211 + 20);
                      v84 = 24 * HIDWORD(v212);
                      while (1)
                      {
                        if (*(_QWORD *)(v83 - 5) == v81 && *(v83 - 1) == v80)
                        {
                          v85 = *(_QWORD *)(v83 - 3);
                          if (v85 == v76 && *v83 == v73)
                            break;
                          v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
                          if (*(unsigned __int16 *)(v86 + 18) <= 2u)
                          {
                            v87 = **(_QWORD **)(v86 + 72);
                            if (v87 >= 0xFFFE000000000000)
                            {
                              v88 = __OFADD__((_DWORD)v82, v73);
                              if (!__OFADD__((_DWORD)v87, *v83) && !v88 && *v83 + (_DWORD)v87 == v73 + (_DWORD)v82)
                                break;
                            }
                          }
                        }
                        v83 += 6;
                        v84 -= 24;
                        if (!v84)
                          goto LABEL_162;
                      }
                      v89 = *(_OWORD *)(v83 - 5);
                      v216 = *(_QWORD *)(v83 - 1);
                      v215 = v89;
                    }
                  }
                }
LABEL_162:
                if (!HIDWORD(v210))
                {
                  v100 = 0;
                  v98 = &v209;
                  v101 = (_DWORD *)&v210 + 1;
                  v99 = &v210;
LABEL_172:
                  if (v100 == *(_DWORD *)v99)
                  {
                    v102 = (uint64_t)*v98 + 24 * *v101;
                    v103 = *(_OWORD *)v111;
                    v104 = *(_QWORD *)(v111 + 16);
                  }
                  else
                  {
                    v102 = (uint64_t)*v98 + 24 * v100;
                    v103 = v215;
                    v104 = v216;
                  }
                  *(_QWORD *)(v102 + 16) = v104;
                  *(_OWORD *)v102 = v103;
                  ++*v101;
                  goto LABEL_54;
                }
                v67 = v209;
                v90 = 24 * HIDWORD(v210);
                while (1)
                {
                  if (*(_OWORD *)v67 == v215)
                  {
                    if ((_QWORD)v217)
                      break;
                  }
                  v67 = (WTF *)((char *)v67 + 24);
                  v90 -= 24;
                  if (!v90)
                  {
                    v98 = v204;
                    v99 = (uint64_t *)(v204 + 1);
                    v101 = (_DWORD *)v204 + 3;
                    v100 = *((unsigned int *)v204 + 3);
                    goto LABEL_172;
                  }
                }
LABEL_80:
                *(_OWORD *)v67 = v217;
                *((_QWORD *)v67 + 2) = v218;
                goto LABEL_54;
              }
              if (v57)
              {
                if (v57 != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19842676CLL);
                }
                goto LABEL_54;
              }
              if (v76 && v73 >= v177)
                goto LABEL_329;
            }
            else
            {
            }
          }
LABEL_54:
          v52 += 24;
        }
        while (v52 != v53);
      }
      v49 += 24;
    }
    while (v49 != v202);
    v112 = (uint64_t *)v209;
    v113 = (uint64_t *)((char *)v209 + 24 * HIDWORD(v210));
    if (HIDWORD(v210))
    {
      v114 = 126 - 2 * __clz(HIDWORD(v210));
      v27 = v199;
      v28 = v200;
      v37 = (uint64_t *)(v20 + 8);
      goto LABEL_195;
    }
    v27 = v199;
    v28 = v200;
    v37 = (uint64_t *)(v20 + 8);
LABEL_194:
    v114 = 0;
LABEL_195:
    v115 = *(unsigned int *)(v20 + 20);
    if ((_DWORD)v115 != HIDWORD(v210))
      goto LABEL_199;
    v116 = v209;
    if ((_DWORD)v115)
    {
      v117 = *(_QWORD *)(v20 + 8);
      if (*(_QWORD *)v117 == *(_QWORD *)v209
        && *(_QWORD *)(v117 + 8) == *((_QWORD *)v209 + 1)
        && *(_DWORD *)(v117 + 16) == *((_DWORD *)v209 + 4)
        && *(_DWORD *)(v117 + 20) == *((_DWORD *)v209 + 5))
      {
        v120 = (int *)(v117 + 44);
        v121 = (int *)((char *)v209 + 44);
        v122 = 1;
        do
        {
          v123 = v122;
          if (v115 == v122)
            break;
          if (*(_QWORD *)(v120 - 5) != *(_QWORD *)(v121 - 5))
            break;
          if (*(_QWORD *)(v120 - 3) != *(_QWORD *)(v121 - 3))
            break;
          if (*(v120 - 1) != *(v121 - 1))
            break;
          v129 = *v120;
          v120 += 6;
          v128 = v129;
          v130 = *v121;
          v121 += 6;
          ++v122;
        }
        while (v128 == v130);
        if (v123 >= v115)
        {
LABEL_219:
          v209 = 0;
          LODWORD(v210) = 0;
          WTF::fastFree((unint64_t)v116, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_201;
        }
      }
LABEL_199:
      v198 = 1;
      v116 = v209;
    }
    if (v116)
      goto LABEL_219;
LABEL_201:
    v118 = v211;
    if (v211)
    {
      v211 = 0;
      LODWORD(v212) = 0;
      WTF::fastFree((unint64_t)v118, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_203:
    v119 = v20 + 24;
    v20 = v28;
    if (v119 != v28)
    {
      v20 = v119;
      while (*(_QWORD *)v20 <= 1uLL)
      {
        v20 += 24;
        if (v20 == v28)
        {
          v20 = v28;
          break;
        }
      }
    }
  }
  while (v20 != v27);
  v125 = (unint64_t)v213;
  if (HIDWORD(v214))
  {
    v178 = v213;
    v179 = &v213[HIDWORD(v214)];
    do
    {
      v180 = *(unsigned int *)(v197 + 8);
      if (*((_DWORD *)v196 + 27) <= v180)
      {
        __break(0xC471u);
        JUMPOUT(0x198426AD8);
      }
      v181 = (uint64_t *)(*((_QWORD *)v196 + 12) + 8 * v180);
      v182 = *v181;
      if (*v181)
      {
        v183 = *(_DWORD *)(v182 - 8);
        v184 = v183 & *v178;
        v185 = v182 + 24 * v184;
        v186 = *(_QWORD *)v185;
        if (*(_QWORD *)v185 != *v178)
        {
          v187 = 1;
          while (v186)
          {
            v184 = (v184 + v187) & v183;
            v185 = v182 + 24 * v184;
            v186 = *(_QWORD *)v185;
            ++v187;
            if (*(_QWORD *)v185 == *v178)
              goto LABEL_337;
          }
          v185 = v182 + 24 * *(unsigned int *)(v182 - 4);
        }
LABEL_337:
        if (v182 + 24 * *(unsigned int *)(v182 - 4) != v185)
        {
          *(_QWORD *)v185 = 1;
          v188 = *(_QWORD *)(v185 + 8);
          if (v188)
          {
            *(_QWORD *)(v185 + 8) = 0;
            *(_DWORD *)(v185 + 16) = 0;
            WTF::fastFree(v188, a2, a3, a4, a5, a6, a7, a8);
          }
          ++*(_DWORD *)(*v181 - 16);
          v189 = *v181;
          if (*v181)
            v190 = *(_DWORD *)(v189 - 12) - 1;
          else
            v190 = -1;
          *(_DWORD *)(v189 - 12) = v190;
          v191 = *v181;
          if (*v181)
          {
            v192 = 6 * *(_DWORD *)(v191 - 12);
            v193 = *(_DWORD *)(v191 - 4);
            if (v192 < v193 && v193 >= 9)
          }
        }
      }
      ++v178;
    }
    while (v178 != v179);
  }
  if (v125)
    WTF::fastFree(v125, a2, a3, a4, a5, a6, a7, a8);
  v126 = v198;
  return v126 & 1;
}

uint64_t *WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = v2 & a2;
  v4 = (uint64_t *)(a1 + 24 * (v2 & a2));
  v5 = *v4;
  if (*v4 != a2)
  {
    v6 = 1;
    while (v5)
    {
      v3 = (v3 + v6) & v2;
      v4 = (uint64_t *)(a1 + 24 * v3);
      v5 = *v4;
      ++v6;
      if (*v4 == a2)
        return v4;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v4;
}

unint64_t JSC::DFG::`anonymous namespace'::Relationship::minValueOfLeft(JSC::DFG::_anonymous_namespace_::Relationship *this)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  signed int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int16 *)(v1 + 18) <= 2u)
  {
    v2 = **(_QWORD **)(v1 + 72);
    if (v2 >= 0xFFFE000000000000)
      return v2;
  }
  v3 = *((_DWORD *)this + 4);
  if ((v3 | 2) == 2)
    return 0x80000000;
  v4 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFFELL;
  v5 = 0x80000000;
  if (*(unsigned __int16 *)(v4 + 18) <= 2u)
  {
    v6 = **(_QWORD **)(v4 + 72);
    if (v6 <= 0xFFFDFFFFFFFFFFFFLL)
      v5 = 0x80000000;
    else
      v5 = v6;
  }
  v7 = *((int *)this + 5);
  if (v3 == 3)
  {
    v12 = v7 + v5;
    if (v12 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      v12 = 0xFFFFFFFF7FFFFFFFLL;
    if (v12 >= 2147483646)
      LODWORD(v12) = 2147483646;
    return (v12 + 1);
  }
  v8 = __OFADD__((_DWORD)v7, v5);
  v9 = v7 + v5;
  v10 = (((int)v7 + v5) >> 31) ^ 0x80000000;
  if (v8)
    return v10;
  else
    return v9;
}

unint64_t JSC::DFG::`anonymous namespace'::Relationship::maxValueOfLeft(JSC::DFG::_anonymous_namespace_::Relationship *this)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int16 *)(v1 + 18) <= 2u)
  {
    v2 = **(_QWORD **)(v1 + 72);
    if (v2 >= 0xFFFE000000000000)
      return v2;
  }
  v3 = *((_DWORD *)this + 4);
  if ((v3 & 0xFFFFFFFE) == 2)
    return 0x7FFFFFFFLL;
  v4 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFFELL;
  v5 = 0x7FFFFFFF;
  if (*(unsigned __int16 *)(v4 + 18) <= 2u)
  {
    v6 = **(_QWORD **)(v4 + 72);
    if (v6 <= 0xFFFDFFFFFFFFFFFFLL)
      v5 = 0x7FFFFFFF;
    else
      v5 = v6;
  }
  v7 = *((int *)this + 5);
  if (!v3)
  {
    v12 = v7 + v5;
    if (v12 <= -2147483647)
      v12 = -2147483647;
    if (v12 >= 0x80000000)
      LODWORD(v12) = 0x80000000;
    return (v12 - 1);
  }
  v8 = __OFADD__((_DWORD)v7, v5);
  v9 = v7 + v5;
  v10 = (((int)v7 + v5) >> 31) ^ 0x80000000;
  if (v8)
    return v10;
  else
    return v9;
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::HashTable(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v70;

  v8 = a1;
  *a1 = 0;
  if (!*a2)
    return v8;
  v9 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v9)
    return v8;
  v11 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = (v12 | HIWORD(v12)) + 1;
  if (v13 > 0x400)
  {
    if (v13 > 2 * v9)
      goto LABEL_66;
  }
  else if (3 * v13 > 4 * v9)
  {
LABEL_6:
    v14 = (double)v9;
    v15 = (double)v13;
    v16 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v13) = 2 * v13;
  if (v13 <= 0x400)
    goto LABEL_6;
LABEL_66:
  v14 = (double)v9;
  v15 = (double)v13;
  v16 = 0.416666667;
LABEL_7:
  if (v15 * v16 <= v14)
    LODWORD(v13) = 2 * v13;
  if (v13 <= 8)
    v17 = 8;
  else
    v17 = v13;
  v18 = WTF::fastZeroedMalloc(24 * v17 + 16, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *v8 = v18 + 16;
  *(_DWORD *)(v18 + 12) = v17;
  *(_DWORD *)(*v8 - 8) = v17 - 1;
  *(_DWORD *)(*v8 - 12) = v9;
  *(_DWORD *)(*v8 - 16) = 0;
  v26 = *a2;
  if (*a2)
  {
    v27 = *(unsigned int *)(v26 - 4);
    v28 = v26 + 24 * v27;
    if (*(_DWORD *)(v26 - 12))
    {
      v29 = v26;
      if ((_DWORD)v27)
      {
        v30 = 24 * v27;
        v29 = v26;
        while (*(_QWORD *)v29 <= 1uLL)
        {
          v29 += 24;
          v30 -= 24;
          if (!v30)
          {
            v29 = v28;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v29 = v26 + 24 * v27;
  }
  else
  {
    v29 = 0;
    LODWORD(v27) = 0;
  }
  v28 = v26 + 24 * v27;
LABEL_21:
  if (v26)
    v31 = v26 + 24 * *(unsigned int *)(v26 - 4);
  else
    v31 = 0;
  while (v29 != v31)
  {
    v32 = *v8;
    if (*v8)
      v33 = *(_DWORD *)(v32 - 8);
    else
      v33 = 0;
    v34 = v33 & *(_QWORD *)v29;
    v35 = 1;
    do
    {
      v36 = v34;
      v37 = (_QWORD *)(v32 + 24 * v34);
      v34 = (v34 + v35++) & v33;
    }
    while (*v37);
    *v37 = *(_QWORD *)v29;
    if ((_QWORD *)v29 != v37)
    {
      v38 = v36;
      v39 = (unint64_t *)(v32 + 24 * v36 + 8);
      v40 = v32 + 24 * v36;
      v43 = *(_DWORD *)(v40 + 20);
      v42 = (_DWORD *)(v40 + 20);
      v41 = v43;
      v44 = *(unsigned int *)(v29 + 20);
      if (v43 > v44)
      {
        *v42 = v44;
      }
      else
      {
        v45 = v32 + 24 * v38;
        v48 = *(_DWORD *)(v45 + 16);
        v47 = (unsigned int *)(v45 + 16);
        v46 = v48;
        if (v44 > v48)
        {
          if (v46)
          {
            if (v41)
              *v42 = 0;
            v68 = *v39;
            if (*v39)
            {
              *v39 = 0;
              *v47 = 0;
              WTF::fastFree(v68, v19, v20, v21, v22, v23, v24, v25);
              v46 = *v47;
            }
          }
          v49 = *(unsigned int *)(v29 + 20);
          if (v46 < v49)
          {
            if (v49 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x198427068);
            }
            v50 = v8;
            v51 = v31;
            v52 = *v39;
            v70 = v42;
            v53 = *v42;
            v54 = 24 * v49;
            v55 = WTF::fastMalloc((WTF *)(24 * v49));
            *v47 = (v54 & 0xFFFFFFF8) / 0x18;
            *v39 = v55;
            if ((_DWORD)v53)
            {
              v56 = 24 * v53;
              v57 = v52;
              do
              {
                v58 = *(_OWORD *)v57;
                *(_QWORD *)(v55 + 16) = *(_QWORD *)(v57 + 16);
                *(_OWORD *)v55 = v58;
                v55 += 24;
                v57 += 24;
                v56 -= 24;
              }
              while (v56);
            }
            v31 = v51;
            v8 = v50;
            v42 = v70;
            if (v52)
            {
              if (*v39 == v52)
              {
                *v39 = 0;
                *v47 = 0;
              }
              WTF::fastFree(v52, v19, v20, v21, v22, v23, v24, v25);
            }
          }
        }
        v44 = *v42;
      }
      v59 = (char *)*v39;
      if (v44)
      {
        memmove(v59, *(const void **)(v29 + 8), 24 * v44);
        v60 = *v42;
        v59 = (char *)*v39;
      }
      else
      {
        v60 = 0;
      }
      v61 = *(unsigned int *)(v29 + 20);
      if (v60 != v61)
      {
        v62 = 3 * v60;
        v63 = &v59[24 * v60];
        v64 = *(_QWORD *)(v29 + 8) + 8 * v62;
        v65 = 24 * v61 - 8 * v62;
        do
        {
          v66 = *(_OWORD *)v64;
          *((_QWORD *)v63 + 2) = *(_QWORD *)(v64 + 16);
          *(_OWORD *)v63 = v66;
          v63 += 24;
          v64 += 24;
          v65 -= 24;
        }
        while (v65);
        LODWORD(v60) = *(_DWORD *)(v29 + 20);
      }
      *v42 = v60;
    }
    v67 = v29 + 24;
    v29 = v28;
    if (v67 != v28)
    {
      v29 = v67;
      while (*(_QWORD *)v29 <= 1uLL)
      {
        v29 += 24;
        if (v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
  }
  return v8;
}

void WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;

  if (a2 != (const void **)a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v35 = *a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v13 = *((unsigned int *)a2 + 3);
        if (v12 < v13)
        {
          if (v13 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return;
          }
          v14 = *a1;
          v15 = *((unsigned int *)a1 + 3);
          v16 = 24 * v13;
          v17 = WTF::fastMalloc((WTF *)(24 * v13));
          *((_DWORD *)a1 + 2) = (v16 & 0xFFFFFFF8) / 0x18;
          *a1 = v17;
          if ((_DWORD)v15)
          {
            v32 = 24 * v15;
            v33 = v14;
            do
            {
              v34 = *(_OWORD *)v33;
              *(_QWORD *)(v17 + 16) = *(_QWORD *)(v33 + 16);
              *(_OWORD *)v17 = v34;
              v17 += 24;
              v33 += 24;
              v32 -= 24;
            }
            while (v32);
          }
          if (v14)
          {
            if (*a1 == v14)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree(v14, v18, v19, v20, v21, v22, v23, v24);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v25 = (char *)*a1;
    if (v11)
    {
      memmove(v25, *a2, 24 * v11);
      v26 = *((_DWORD *)a1 + 3);
      v25 = (char *)*a1;
    }
    else
    {
      v26 = 0;
    }
    v27 = *((_DWORD *)a2 + 3);
    if (v26 != v27)
    {
      v28 = &v25[24 * v26];
      v29 = (uint64_t)*a2 + 24 * v26;
      v30 = 24 * v27 - 24 * v26;
      do
      {
        v31 = *(_OWORD *)v29;
        *((_QWORD *)v28 + 2) = *(_QWORD *)(v29 + 16);
        *(_OWORD *)v28 = v31;
        v28 += 24;
        v29 += 24;
        v30 -= 24;
      }
      while (v30);
      v26 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)a1 + 3) = v26;
  }
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::setRelationship(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  int v24;
  int v25;

  v9 = (uint64_t *)(a1 + 80);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = *(int *)(a2 + 16);
  v23.n128_u64[0] = *(_QWORD *)a2;
  v10 = v23.n128_u64[0];
  v23.n128_u64[1] = v11;
  v24 = v13;
  v25 = v12;
  if (v10)
    v19 = v12 == 0x80000000;
  else
    v19 = 1;
  if (v19)
  {
    v21 = 0uLL;
    v22 = 1;
  }
  else
  {
    if (v13 >= 4
      || (v20 = dword_199155EB4[v13],
          v21.n128_u64[0] = v11,
          v21.n128_u64[1] = v10,
          LODWORD(v22) = v20,
          HIDWORD(v22) = -v12,
          !v11))
    {
      __break(0xC471u);
      JUMPOUT(0x1984272F0);
    }
    if (v11 == v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198427310);
    }
  }
}

uint64_t JSC::DFG::`anonymous namespace'::Relationship::Relationship(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a5;
  if (!a2)
    goto LABEL_7;
  if (!a3)
  {
    __break(0xC471u);
    JUMPOUT(0x19842738CLL);
  }
  if (a2 == a3)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19842736CLL);
  }
  return result;
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::setEquivalence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (!a2)
    goto LABEL_41;
  if ((a2 & 1) != 0)
  {
    if (*(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 18) != 27 || a3 == 0)
      goto LABEL_41;
  }
  else if (!a3)
  {
    goto LABEL_41;
  }
  if ((a3 & 1) != 0)
  {
    if (*(_WORD *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27 && a2 != a3)
      goto LABEL_6;
  }
  else if (a2 != a3)
  {
LABEL_6:
    v48 = a2;
    v49 = a3;
    goto LABEL_7;
  }
LABEL_41:
  v48 = 0;
  v49 = 0;
LABEL_7:
  v50 = 1;
  v18 = *(_QWORD *)(a1 + 80);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = v19 & a2;
    v21 = (uint64_t *)(v18 + 24 * (v19 & a2));
    v22 = *v21;
    if (*v21 != a2)
    {
      v23 = 1;
      while (v22)
      {
        v20 = (v20 + v23) & v19;
        v21 = (uint64_t *)(v18 + 24 * v20);
        v22 = *v21;
        ++v23;
        if (*v21 == a2)
          goto LABEL_12;
      }
      v21 = (uint64_t *)(v18 + 24 * *(unsigned int *)(v18 - 4));
    }
LABEL_12:
    if (v21 != (uint64_t *)(v18 + 24 * *(unsigned int *)(v18 - 4)))
    {
      v46 = 0;
      v47 = 0;
      v24 = *((unsigned int *)v21 + 5);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = 0;
        v27 = (__int128 *)v21[1];
        v28 = 24 * v24;
        do
        {
          v29 = *v27;
          v44 = v29;
          v45 = *((_QWORD *)v27 + 2);
          v42 = v29;
          v43 = v45;
          if ((a3 & 0xFFFFFFFFFFFFFFFELL) != (*((_QWORD *)&v29 + 1) & 0xFFFFFFFFFFFFFFFELL))
          {
            if (*((_QWORD *)&v29 + 1) == a3)
            {
              __break(0xC471u);
              return;
            }
            *(_QWORD *)&v42 = a3;
            if (v26 == (_DWORD)v47)
            {
              v25 = v46;
              v26 = HIDWORD(v47);
              v33 = v46 + 24 * HIDWORD(v47);
              v34 = *(_QWORD *)(v32 + 16);
              *(_OWORD *)v33 = *(_OWORD *)v32;
              *(_QWORD *)(v33 + 16) = v34;
            }
            else
            {
              v30 = v42;
              v31 = v25 + 24 * v26;
              *(_QWORD *)(v31 + 16) = v43;
              *(_OWORD *)v31 = v30;
            }
            HIDWORD(v47) = ++v26;
          }
          v27 = (__int128 *)((char *)v27 + 24);
          v28 -= 24;
        }
        while (v28);
        if (v26)
        {
          v35 = 24 * v26;
          v36 = v25;
          do
          {
            v37 = *(_OWORD *)v36;
            v41 = *(_QWORD *)(v36 + 16);
            v40 = v37;
            v36 += 24;
            v35 -= 24;
          }
          while (v35);
        }
        if (v25)
        {
          v46 = 0;
          LODWORD(v47) = 0;
          WTF::fastFree(v25, v11, v12, v13, v14, v15, v16, v17);
        }
      }
    }
  }
}

__n128 WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::`anonymous namespace'::Relationship&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t casual;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (unint64_t)a2);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  if (v13 < 0xAAAAAAB)
  {
    v14 = *(unsigned int *)(result + 12);
    v15 = 24 * v13;
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v16)
    {
      v17 = (unint64_t)(v15 + 15) >> 4;
      if (v13 <= 0x11)
      {
        v18 = 23 * v17 + 7;
      }
      else
      {
        if (v13 > 0x1A0)
          goto LABEL_14;
        v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v17 + 626);
        if (*(_DWORD *)(v16 + 8052) <= v18)
          goto LABEL_14;
      }
      v20 = v16 + 8 * v18;
      v21 = v20 + 8064;
      *(_BYTE *)(v20 + 8064) = 1;
      v22 = *(unsigned int *)(v20 + 8080);
      if ((_DWORD)v22)
      {
        *(_DWORD *)(v21 + 16) = v22 - *(_DWORD *)(v21 + 20);
        casual = *(_QWORD *)(v21 + 8) - v22;
      }
      else
      {
        v23 = *(_QWORD *)(v21 + 40);
        v24 = *(_QWORD *)(v21 + 24);
        if (!v23)
        {
          if (*(_BYTE *)(v21 + 5) == 6)
          {
            v29 = *(unsigned int *)(v21 + 32);
            v30 = *(_DWORD *)(v21 + 36);
            if (v29 < v30)
            {
              *(_QWORD *)(v21 + 8 * v29 + 56) = 0;
              v31 = (unint64_t *)(8 * v18 + 8 * v29 + v16 + 8128);
              v32 = v30 - 1 - v29;
              while (v32)
              {
                v24 += 1024;
                v34 = *v31++;
                v33 = v34;
                LODWORD(v29) = v29 + 1;
                --v32;
                if (v34)
                {
                  v23 = __rbit64(v33);
                  *(_DWORD *)(v21 + 32) = v29;
                  *(_QWORD *)(v21 + 24) = v24;
                  goto LABEL_23;
                }
              }
              *(_DWORD *)(v21 + 32) = v30;
            }
          }
          *(_BYTE *)v21 = 0;
          goto LABEL_14;
        }
LABEL_23:
        v25 = __clz(v23);
        *(_QWORD *)(v21 + 40) = v23 & ~(0x8000000000000000 >> v25);
        casual = v24 + 16 * v25;
      }
      *(_BYTE *)v21 = 0;
      goto LABEL_19;
    }
LABEL_14:
    casual = bmalloc_allocate_casual(v15, 1);
LABEL_19:
    *(_DWORD *)(v9 + 8) = v15 / 0x18;
    *(_QWORD *)v9 = casual;
    if ((_DWORD)v14)
    {
      v26 = 24 * v14;
      v27 = v10;
      do
      {
        v28 = *(_OWORD *)v27;
        *(_QWORD *)(casual + 16) = *(_QWORD *)(v27 + 16);
        *(_OWORD *)casual = v28;
        casual += 24;
        v27 += 24;
        v26 -= 24;
      }
      while (v26);
    }
    if (v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::NodeFlowProjection,WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::NodeFlowProjection>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *result;
  uint64_t v49;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v22 = 0;
    v23 = v11;
    v49 = v11;
    do
    {
      v24 = (uint64_t *)(v10 + 24 * v21);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != 1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = v27 & v25;
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = (_QWORD *)(v26 + 24 * v28);
            v28 = (v28 + v29++) & v27;
          }
          while (*v31);
          v32 = v30;
          v33 = v26 + 24 * v30;
          v36 = *(_QWORD *)(v33 + 8);
          v35 = (_QWORD *)(v33 + 8);
          v34 = v36;
          if (v36)
          {
            *v35 = 0;
            *(_DWORD *)(v26 + 24 * v30 + 16) = 0;
            WTF::fastFree(v34, v14, v15, v16, v17, v18, v19, v20);
            v23 = v49;
            v25 = *v24;
          }
          *v31 = v25;
          v37 = v10 + 24 * v21;
          *v35 = 0;
          v35[1] = 0;
          v39 = *(_QWORD *)(v37 + 8);
          v38 = v37 + 8;
          *(_QWORD *)v38 = 0;
          *v35 = v39;
          v40 = *(_DWORD *)(v38 + 8);
          *(_DWORD *)(v38 + 8) = 0;
          v41 = v26 + 24 * v32;
          *(_DWORD *)(v41 + 16) = v40;
          v42 = *(_DWORD *)(v38 + 12);
          *(_DWORD *)(v38 + 12) = 0;
          *(_DWORD *)(v41 + 20) = v42;
          v43 = *(_QWORD *)v38;
          if (*(_QWORD *)v38)
          {
            *(_QWORD *)v38 = 0;
            *(_DWORD *)(v38 + 8) = 0;
            WTF::fastFree(v43, v14, v15, v16, v17, v18, v19, v20);
            v23 = v49;
          }
          if (v24 == (uint64_t *)a3)
            v22 = v31;
        }
      }
      else
      {
        v44 = v10 + 24 * v21;
        v47 = *(_QWORD *)(v44 + 8);
        v46 = (_QWORD *)(v44 + 8);
        v45 = v47;
        if (v47)
        {
          *v46 = 0;
          *(_DWORD *)(v10 + 24 * v21 + 16) = 0;
          WTF::fastFree(v45, v14, v15, v16, v17, v18, v19, v20);
          v23 = v49;
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v10)
      return result;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
  return v22;
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::setOneSide(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  __n128 *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  WTF *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  __n128 *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  __n128 v98;
  unint64_t v99;

  v8 = a2->n128_u64[0];
  if (!a2->n128_u64[0])
    return;
  v9 = a3;
  v12 = *a1;
  if (*a1
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = v13 & v8;
  v15 = (unint64_t *)(v12 + 24 * (v13 & v8));
  v16 = *v15;
  if (!*v15)
  {
LABEL_12:
    *v15 = v8;
    v19 = v15[1];
    if (v19)
    {
      v15[1] = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    }
    v15[1] = 0;
    v15[2] = 0;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_20;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_20;
      if (!(_DWORD)v25)
      {
        v93 = 8;
        goto LABEL_109;
      }
    }
    v93 = ((_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25)));
LABEL_109:
    goto LABEL_20;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != v8)
  {
    if (v16 == 1)
      v17 = v15;
    v14 = (v14 + v18) & v13;
    v15 = (unint64_t *)(v12 + 24 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v17;
      }
      goto LABEL_12;
    }
  }
LABEL_20:
  v26 = a2->n128_u64[1] & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int16 *)(v26 + 18) <= 2u && **(_QWORD **)(v26 + 72) >= 0xFFFE000000000000)
  {
    v34 = a2[1].n128_u32[0];
    if (v34 - 2 >= 2)
    {
      if (v34 == 1)
      {
LABEL_40:
        v35 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v35)
        {
          v36 = (__n128 *)v15[1];
          v37 = 24 * v35;
          do
          {
            v38 = v36[1].n128_i32[0];
            if (v38 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x198428168);
            }
            v39 = a2[1].n128_i32[0];
            if (v39 >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x198428188);
            }
            if (dword_199155E80[v38] > dword_199155E80[v39])
            {
              v40 = v36->n128_u64[1] & 0xFFFFFFFFFFFFFFFELL;
              if (*(unsigned __int16 *)(v40 + 18) <= 2u && **(_QWORD **)(v40 + 72) >= 0xFFFE000000000000)
              {
                *v36 = v98;
                v36[1].n128_u64[0] = v99;
              }
            }
            v36 = (__n128 *)((char *)v36 + 24);
            v37 -= 24;
          }
          while (v37);
        }
        goto LABEL_21;
      }
      if (v34)
      {
        __break(0xC471u);
        JUMPOUT(0x198428208);
      }
    }
    v87 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v87)
    {
      v88 = v15[1];
      v89 = 24 * v87;
      do
      {
        v90 = *(int *)(v88 + 16);
        if (v90 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1984281A8);
        }
        v91 = a2[1].n128_i32[0];
        if (v91 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1984281C8);
        }
        if (dword_199155E80[v90] < dword_199155E80[v91])
        {
          v92 = *(_QWORD *)(v88 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (*(unsigned __int16 *)(v92 + 18) <= 2u && **(_QWORD **)(v92 + 72) >= 0xFFFE000000000000)
          {
            *a2 = v98;
            a2[1].n128_u64[0] = v99;
          }
        }
        v88 += 24;
        v89 -= 24;
      }
      while (v89);
      v34 = a2[1].n128_u32[0];
    }
    if (v34 >= 2 && v34 != 3)
    {
      if (v34 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1984280A4);
      }
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_21:
  v96 = 0;
  v97 = 0;
  v27 = *((unsigned int *)v15 + 5);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v15[1];
    v32 = 24 * v27;
    do
    {
      if (*(_QWORD *)v31 == a2->n128_u64[0] && *(_QWORD *)(v31 + 8) == a2->n128_u64[1])
      {
        if (v98.n128_u64[0])
        {
          *(__n128 *)v31 = v98;
          *(_QWORD *)(v31 + 16) = v99;
          v30 = 1;
        }
      }
      if (v9)
      {
        if (*(_DWORD *)(v31 + 16) == 1 && *(_DWORD *)(v31 + 20) != 0x80000000)
        {
          v98 = *a2;
          v99 = a2[1].n128_u64[0];
          if (v98.n128_u64[1] != *(_QWORD *)(v31 + 8))
          {
            v98.n128_u64[0] = *(_QWORD *)(v31 + 8);
            v33 = *(_DWORD *)(v31 + 20);
            if (!__OFADD__(HIDWORD(v99), -v33))
            {
              HIDWORD(v99) -= v33;
              if (v29 == (_DWORD)v97)
              {
                v28 = v96;
                v29 = HIDWORD(v97);
                v44 = (char *)v96 + 24 * HIDWORD(v97);
                v45 = *(_QWORD *)(v43 + 16);
                *(_OWORD *)v44 = *(_OWORD *)v43;
                *((_QWORD *)v44 + 2) = v45;
              }
              else
              {
                v41 = v98;
                v42 = (__n128 *)((char *)v28 + 24 * v29);
                v42[1].n128_u64[0] = v99;
                *v42 = v41;
              }
              HIDWORD(v97) = ++v29;
            }
          }
        }
      }
      v31 += 24;
      v32 -= 24;
    }
    while (v32);
  }
  else
  {
    v30 = 0;
  }
  if (v9)
  {
    if (a2[1].n128_u32[0] != 1)
    {
      v52 = *a1;
      if (*a1)
      {
        v53 = a2->n128_u64[1];
        v54 = *(_DWORD *)(v52 - 8);
        v55 = v54 & v53;
        v56 = *(_QWORD *)(v52 + 24 * (v54 & v53));
        if (v56 == v53)
        {
LABEL_67:
          v58 = v52 + 24 * v55;
          v59 = *(unsigned int *)(v58 + 20);
          if ((_DWORD)v59)
          {
            if (v59 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x198428210);
            }
            v60 = v58 + 8;
            v61 = 24 * v59;
            v62 = WTF::fastMalloc((WTF *)(24 * v59));
            v70 = *(unsigned int *)(v60 + 12);
            if ((_DWORD)v70)
            {
              v71 = *(__int128 **)v60;
              v72 = 24 * v70;
              v73 = v62;
              do
              {
                v74 = *v71;
                *(_QWORD *)(v73 + 16) = *((_QWORD *)v71 + 2);
                *(_OWORD *)v73 = v74;
                v73 += 24;
                v71 = (__int128 *)((char *)v71 + 24);
                v72 -= 24;
              }
              while (v72);
            }
            v75 = 0;
            do
            {
              if (*(_DWORD *)(v62 + v75 + 16) == 1)
              {
                v76 = *(_DWORD *)(v62 + v75 + 20);
                if (v76 != 0x80000000)
                {
                  v77 = *(_QWORD *)(v62 + v75 + 8);
                  if (v77 != a2->n128_u64[0])
                  {
                    v98 = *a2;
                    v99 = a2[1].n128_u64[0];
                    if (v98.n128_u64[0] == v77)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198428230);
                    }
                    v78 = v62;
                    v98.n128_u64[1] = v77;
                    if (!__OFADD__(HIDWORD(v99), v76))
                    {
                      HIDWORD(v99) += v76;
                      if (HIDWORD(v97) == (_DWORD)v97)
                      {
                      }
                      else
                      {
                        v79 = HIDWORD(v97) + 1;
                        v80 = (__n128 *)((char *)v96 + 24 * HIDWORD(v97));
                        v81 = v99;
                        *v80 = v98;
                        v80[1].n128_u64[0] = v81;
                        HIDWORD(v97) = v79;
                      }
                    }
                    v62 = v78;
                  }
                }
              }
              v75 += 24;
            }
            while (v61 != v75);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          }
        }
        else
        {
          v57 = 1;
          while (v56)
          {
            v55 = (v55 + v57) & v54;
            v56 = *(_QWORD *)(v52 + 24 * v55);
            ++v57;
            if (v56 == v53)
              goto LABEL_67;
          }
        }
      }
    }
  }
  if ((v30 & 1) == 0)
  {
    v46 = v15 + 1;
    v47 = *((unsigned int *)v15 + 5);
    if ((_DWORD)v47 == *((_DWORD *)v15 + 4))
    {
      v48 = v15[1] + 24 * *((unsigned int *)v15 + 5);
      v49 = *(__n128 *)v86;
      v50 = *(_QWORD *)(v86 + 16);
    }
    else
    {
      v48 = *v46 + 24 * v47;
      v49 = *a2;
      v50 = a2[1].n128_u64[0];
    }
    *(_QWORD *)(v48 + 16) = v50;
    *(__n128 *)v48 = v49;
    ++*((_DWORD *)v15 + 5);
  }
  v51 = v96;
  if (HIDWORD(v97))
  {
    v82 = (v9 - 1);
    v83 = 24 * HIDWORD(v97);
    v84 = v96;
    do
    {
      v85 = *(_OWORD *)v84;
      v95 = *((_QWORD *)v84 + 2);
      v94 = v85;
      v84 = (WTF *)((char *)v84 + 24);
      v83 -= 24;
    }
    while (v83);
  }
  if (v51)
    WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
}

__n128 JSC::DFG::`anonymous namespace'::Relationship::filterConstant(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  __int128 *v7;
  int v8;
  unint64_t v9;
  int v10;
  __int128 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int32 v16;
  unint64_t v17;
  unint64_t v18;
  __n128 result;

  v3 = a2[1].n128_i32[0];
  if (v3 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198428418);
  }
  v4 = *(int *)(a3 + 16);
  if (v4 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198428438);
  }
  if (dword_199155E80[v3] == dword_199155E80[v4])
    goto LABEL_19;
  v5 = a2->n128_u64[1] & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(unsigned __int16 *)(v5 + 18);
  if (v6 == 355 || v6 == 348)
  {
    v7 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v7 = *(__int128 **)(v5 + 72);
  }
  v8 = *(_DWORD *)v7;
  v9 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int16 *)(v9 + 18);
  if (v10 == 355 || v10 == 348)
  {
    v11 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v11 = *(__int128 **)(v9 + 72);
  }
  v12 = *(_DWORD *)v11;
  v13 = *(_DWORD *)(a3 + 20);
  if (__OFADD__(v12, v13))
    goto LABEL_19;
  v14 = *(_DWORD *)(a3 + 16);
  if (v14 != 1)
  {
    if (v14 != 3 && v14)
    {
      if (v14 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1984283D8);
      }
      __break(0xC471u);
      JUMPOUT(0x1984283F8);
    }
    goto LABEL_19;
  }
  v15 = v13 + v12;
  v16 = v13 + v12 - v8;
  if (__OFSUB__(v15, v8))
  {
LABEL_19:
    result = *a2;
    *a1 = *a2;
    a1[1].n128_u64[0] = a2[1].n128_u64[0];
    return result;
  }
  v17 = a2->n128_u64[0];
  v18 = a2->n128_u64[1];
  a1->n128_u64[0] = a2->n128_u64[0];
  a1->n128_u64[1] = v18;
  a1[1].n128_u32[0] = 1;
  a1[1].n128_u32[1] = v16;
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198428370);
  }
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198428390);
  }
  if (v17 == v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1984283B0);
  }
  return result;
}

double JSC::DFG::`anonymous namespace'::Relationship::filter(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v17[2];

  while (1)
  {
    v3 = a2;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == *(_QWORD *)a3
      && *((_QWORD *)a2 + 1) == *((_QWORD *)a3 + 1)
      && *((_DWORD *)a2 + 4) == *((_DWORD *)a3 + 4)
      && *((_DWORD *)a2 + 5) == *((_DWORD *)a3 + 5))
    {
      goto LABEL_21;
    }
    v5 = *((_DWORD *)a2 + 4);
    if (v5 == 1)
      goto LABEL_21;
    v6 = *((_DWORD *)a3 + 4);
    if (v6 == 1)
      goto LABEL_35;
    v17[0] = (uint64_t *)a2;
    v17[1] = (uint64_t *)a3;
    if (v5 == 2)
      break;
    if (v6 != 2)
    {
      if (!v5)
      {
        if (!v6)
        {
          v7 = *((_QWORD *)a2 + 1);
          v8 = *((_DWORD *)a2 + 5);
          if (*((_DWORD *)a3 + 5) < v8)
            v8 = *((_DWORD *)a3 + 5);
          *(_QWORD *)a1 = v4;
          *(_QWORD *)(a1 + 8) = v7;
          *(_DWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 20) = v8;
          if (!v4)
          {
            __break(0xC471u);
            JUMPOUT(0x198428664);
          }
          if (!v7)
          {
            __break(0xC471u);
            JUMPOUT(0x198428684);
          }
          if (v4 == v7)
          {
            __break(0xC471u);
            JUMPOUT(0x1984286A4);
          }
          return *(double *)&v11;
        }
        v9 = *((_DWORD *)a2 + 5);
        if (v9 == 0x80000000 || (v10 = *((_DWORD *)a3 + 5), v10 == 0x7FFFFFFF) || v9 != v10 + 2)
        {
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)&v11 = 1;
          *(_QWORD *)(a1 + 16) = 1;
          return *(double *)&v11;
        }
        v13 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = v4;
        *(_QWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 16) = 1;
        *(_DWORD *)(a1 + 20) = v9 - 1;
        if (!v4)
        {
          __break(0xC471u);
          JUMPOUT(0x1984286C4);
        }
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1984286E4);
        }
        if (v4 == v13)
        {
LABEL_43:
          __break(0xC471u);
          JUMPOUT(0x1984285B4);
        }
        return *(double *)&v11;
      }
LABEL_34:
      return *(double *)&v11;
    }
    a2 = a3;
    a3 = v3;
  }
  if (v6 == 3)
    goto LABEL_34;
  if (v6 == 2)
  {
LABEL_21:
    v11 = *a2;
    *(_OWORD *)a1 = *a2;
    v12 = *((_QWORD *)a2 + 2);
LABEL_22:
    *(_QWORD *)(a1 + 16) = v12;
    return *(double *)&v11;
  }
  v14 = *((_DWORD *)a2 + 5);
  if (v14 != *((_DWORD *)a3 + 5) - 1)
  {
LABEL_35:
    v11 = *a3;
    *(_OWORD *)a1 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    goto LABEL_22;
  }
  v15 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v14;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198428704);
  }
  if (!v15)
    goto LABEL_43;
  if (v4 == v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198428614);
  }
  return *(double *)&v11;
}

double JSC::DFG::`anonymous namespace'::Relationship::filter(JSC::DFG::`anonymous namespace'::Relationship const&)const::{lambda(void)#1}::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  unint64_t v19;
  __int128 v21;
  unint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *a2;
  v4 = **a2;
  if (!v4 || (v5 = *((_DWORD *)v3 + 5), v5 == 0x80000000))
  {
    v9 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
  }
  else
  {
    v6 = *((int *)v3 + 4);
    if (v6 >= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x198428970);
    }
    v7 = dword_199155EB4[v6];
    v8 = v3[1];
    v26 = v8;
    v27 = v4;
    LODWORD(v28) = v7;
    HIDWORD(v28) = -v5;
    if (!v8)
    {
      __break(0xC471u);
      goto LABEL_33;
    }
    if (v8 == v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1984288D0);
    }
    v9 = 1;
  }
  v10 = a2[1];
  v11 = *v10;
  if (!*v10)
    goto LABEL_22;
  v12 = *((_DWORD *)v10 + 5);
  if (v12 == 0x80000000)
    goto LABEL_22;
  v13 = *((int *)v10 + 4);
  if (v13 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198428990);
  }
  v14 = dword_199155EB4[v13];
  v15 = v10[1];
  v23[0] = v15;
  v23[1] = v11;
  v24 = v14;
  v25 = -v12;
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984288F0);
  }
  if (v15 == v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198428910);
  }
  if ((v9 & 1) == 0)
  {
LABEL_22:
    v18 = *(_OWORD *)v3;
    *(_OWORD *)a1 = *(_OWORD *)v3;
    v19 = v3[2];
LABEL_19:
    *(_QWORD *)(a1 + 16) = v19;
    return *(double *)&v18;
  }
  v16 = v21;
  if ((_QWORD)v21)
  {
    if (HIDWORD(v22) != 0x80000000)
    {
      if (v22 < 4)
      {
        if (!*((_QWORD *)&v21 + 1))
        {
          __break(0xC471u);
          JUMPOUT(0x198428930);
        }
        if (*((_QWORD *)&v21 + 1) == (_QWORD)v21)
        {
          __break(0xC471u);
          JUMPOUT(0x198428950);
        }
        v17 = dword_199155EB4[(int)v22];
        *(_QWORD *)&v21 = *((_QWORD *)&v21 + 1);
        *((_QWORD *)&v21 + 1) = v16;
        v22 = __PAIR64__(-HIDWORD(v22), v17);
        *(_QWORD *)&v18 = v21;
        *(_OWORD *)a1 = v21;
        v19 = v22;
        goto LABEL_19;
      }
      __break(0xC471u);
LABEL_33:
      JUMPOUT(0x1984288B0);
    }
    goto LABEL_22;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&v18 = 1;
  *(_QWORD *)(a1 + 16) = 1;
  return *(double *)&v18;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  int v120;
  int v121;
  BOOL v122;
  __int128 v123;
  int v124;
  int v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  BOOL v137;
  int v138;
  int v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  BOOL v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  int v154;
  int v155;
  BOOL v156;
  int v157;
  int v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  BOOL v163;
  BOOL v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  BOOL v172;
  int v173;
  int v174;
  BOOL v175;
  int v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  BOOL v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  BOOL v191;
  int v192;
  int v193;
  BOOL v194;
  int v195;
  int v196;
  BOOL v197;
  int v198;
  int v199;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  BOOL v207;
  __int128 v208;
  int v209;
  int v210;
  BOOL v211;
  int v212;
  int v213;
  BOOL v214;
  int v215;
  int v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  BOOL v224;
  __int128 v225;
  int v226;
  int v227;
  BOOL v228;
  int v229;
  int v230;
  BOOL v231;
  int v232;
  int v233;
  BOOL v234;
  int v235;
  int v236;
  BOOL v237;
  int v238;
  int v239;
  BOOL v240;
  int v241;
  int v242;
  BOOL v243;
  int v244;
  int v245;
  BOOL v246;
  int v247;
  int v248;
  BOOL v249;
  uint64_t v250;
  uint64_t *v251;
  unint64_t v252;
  uint64_t *v253;
  unint64_t v254;
  char v255;
  BOOL v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t *v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;

BOOL std::__less<void,void>::operator()[abi:sn180100]<JSC::DFG::`anonymous namespace'::Relationship,JSC::DFG::`anonymous namespace'::Relationship>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  int v8;
  int v9;
  BOOL v10;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2 && (v2 = a1[1], v3 = a2[1], v2 == v3))
  {
    v8 = *((_DWORD *)a1 + 4);
    v9 = *((_DWORD *)a2 + 4);
    v10 = v8 < v9;
    if (v8 == v9)
      return *((_DWORD *)a1 + 5) < *((_DWORD *)a2 + 5);
    return v10;
  }
  else
  {
    v4 = v2 & 1;
    v5 = v3 & 1;
    v6 = (v2 & 0xFFFFFFFFFFFFFFFELL) < (v3 & 0xFFFFFFFFFFFFFFFELL);
    if (v4 == v5)
      return v6;
    else
      return v4 < v5;
  }
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;

  if (result == a2)
    return result;
  v2 = result + 24;
  if (result + 24 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == *(_QWORD *)v5)
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD *)(v5 + 8);
      if (v7 == v8)
      {
        v29 = *(_DWORD *)(v5 + 40);
        v30 = *(_DWORD *)(v5 + 16);
        if (v29 == v30)
        {
          if (*(_DWORD *)(v5 + 44) >= *(_DWORD *)(v5 + 20))
            goto LABEL_29;
        }
        else if (v29 >= v30)
        {
          goto LABEL_29;
        }
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 32) & 1;
        v10 = *(_QWORD *)(v5 + 8) & 1;
        v11 = (v7 & 0xFFFFFFFFFFFFFFFELL) < (v8 & 0xFFFFFFFFFFFFFFFELL);
        v25 = (_DWORD)v9 == (_DWORD)v10;
        v12 = v9 < v10;
        if (!v25)
          v11 = v12;
        if (!v11)
          goto LABEL_29;
      }
    }
    else
    {
      v31 = *(_QWORD *)(v5 + 24) & 1;
      v32 = *(_QWORD *)v5 & 1;
      v33 = (v6 & 0xFFFFFFFFFFFFFFFELL) < (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL);
      v25 = (_DWORD)v31 == (_DWORD)v32;
      v34 = v31 < v32;
      if (!v25)
        v33 = v34;
      if (!v33)
        goto LABEL_29;
      v7 = *(_QWORD *)(v5 + 32);
    }
    v13 = *(_DWORD *)(v5 + 40);
    v14 = *(_DWORD *)(v5 + 44);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
    v15 = result;
    if (v5 == result)
      goto LABEL_28;
    v16 = v6 & 1;
    v17 = v7 & 1;
    v18 = v3;
    while (1)
    {
      v19 = result + v18;
      v20 = *(_QWORD *)(result + v18 - 24);
      if (v6 != v20)
        break;
      v21 = *(_QWORD *)(v19 - 16);
      if (v7 != v21)
      {
        v22 = *(_QWORD *)(v19 - 16) & 1;
        v23 = (v7 & 0xFFFFFFFFFFFFFFFELL) < (v21 & 0xFFFFFFFFFFFFFFFELL);
        v24 = v17 >= v22;
        v25 = v17 == (_DWORD)v22;
        goto LABEL_14;
      }
      v27 = *(_DWORD *)(result + v18 - 8);
      if (v13 == v27)
      {
        if (v14 >= *(_DWORD *)(result + v18 - 4))
          goto LABEL_27;
      }
      else if (v13 >= v27)
      {
        v15 = result + v18;
        goto LABEL_28;
      }
LABEL_20:
      v5 -= 24;
      *(_OWORD *)v19 = *(_OWORD *)(result + v18 - 24);
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + v18 - 8);
      v18 -= 24;
      if (!v18)
      {
        v15 = result;
        goto LABEL_28;
      }
    }
    v28 = *(_QWORD *)(result + v18 - 24) & 1;
    v23 = (v6 & 0xFFFFFFFFFFFFFFFELL) < (v20 & 0xFFFFFFFFFFFFFFFELL);
    v24 = v16 >= v28;
    v25 = v16 == (_DWORD)v28;
LABEL_14:
    v26 = !v24;
    if (!v25)
      v23 = v26;
    if (v23)
      goto LABEL_20;
LABEL_27:
    v15 = v5;
LABEL_28:
    *(_QWORD *)v15 = v6;
    *(_QWORD *)(v15 + 8) = v7;
    *(_DWORD *)(v15 + 16) = v13;
    *(_DWORD *)(v15 + 20) = v14;
LABEL_29:
    v2 = v4 + 24;
    v3 += 24;
  }
  while (v4 + 24 != a2);
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  char v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      v6 = result;
      do
      {
        v7 = v3;
        v3 = v5;
        v8 = *v2;
        if (*v2 == *v6)
        {
          v9 = result[3 * v3 + 1];
          v10 = result[3 * v7 + 1];
          if (v9 == v10)
          {
            v36 = result[3 * v3 + 2];
            v37 = result[3 * v7 + 2];
            if (v36 == v37)
            {
              if (SHIDWORD(result[3 * v3 + 2]) < SHIDWORD(result[3 * v7 + 2]))
                goto LABEL_13;
            }
            else if (v36 < v37)
            {
              goto LABEL_13;
            }
            goto LABEL_32;
          }
          v11 = result[3 * v3 + 1] & 1;
          v12 = result[3 * v7 + 1] & 1;
          v13 = (v9 & 0xFFFFFFFFFFFFFFFELL) < (v10 & 0xFFFFFFFFFFFFFFFELL);
          v14 = v11 >= v12;
          v15 = (_DWORD)v11 == (_DWORD)v12;
        }
        else
        {
          v38 = *v2 & 1;
          v39 = *v6 & 1;
          v13 = (v8 & 0xFFFFFFFFFFFFFFFELL) < (*v6 & 0xFFFFFFFFFFFFFFFELL);
          v14 = v38 >= v39;
          v15 = (_DWORD)v38 == (_DWORD)v39;
        }
        v16 = !v14;
        if (!v15)
          v13 = v16;
        if (v13)
        {
LABEL_13:
          v17 = v6[4];
          v18 = *((_DWORD *)v6 + 10);
          v19 = *((_DWORD *)v6 + 11);
          v20 = (__int128 *)&result[3 * v7];
          v21 = *v20;
          v22 = *((_QWORD *)v20 + 2);
          v23 = *v2 & 1;
          v2[2] = v22;
          *(_OWORD *)v2 = v21;
          v24 = v17 & 1;
          v25 = v4;
          for (i = v6; ; i -= 3)
          {
            v27 = *(i - 3);
            if (v8 == v27)
            {
              v28 = *(i - 2);
              if (v17 == v28)
              {
                v34 = *((_DWORD *)i - 2);
                if (v18 == v34)
                {
                  if (v19 >= *((_DWORD *)i - 1))
                    goto LABEL_31;
                }
                else if (v18 >= v34)
                {
                  goto LABEL_31;
                }
                goto LABEL_23;
              }
              v29 = *(i - 2) & 1;
              v30 = (v17 & 0xFFFFFFFFFFFFFFFELL) < (v28 & 0xFFFFFFFFFFFFFFFELL);
              v31 = v24 >= v29;
              v32 = v24 == (_DWORD)v29;
            }
            else
            {
              v35 = *(i - 3) & 1;
              v30 = (v8 & 0xFFFFFFFFFFFFFFFELL) < (v27 & 0xFFFFFFFFFFFFFFFELL);
              v31 = v23 >= v35;
              v32 = (_DWORD)v23 == (_DWORD)v35;
            }
            v33 = !v31;
            if (!v32)
              v30 = v33;
            if (!v30)
            {
LABEL_31:
              *i = v8;
              i[1] = v17;
              *((_DWORD *)i + 4) = v18;
              *((_DWORD *)i + 5) = v19;
              break;
            }
LABEL_23:
            *(_OWORD *)i = *(_OWORD *)(i - 3);
            i[2] = *(i - 1);
            v14 = __CFADD__(v25++, 1);
            if (v14)
            {
              __break(1u);
              return result;
            }
          }
        }
LABEL_32:
        v6 += 3;
        v5 = v3 + 1;
        v2 = &result[3 * v3 + 3];
        --v4;
      }
      while (v2 != a2);
    }
  }
  return result;
}

unint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *,JSC::DFG::`anonymous namespace'::Relationship *>(unint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  __int128 v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  char v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  _BOOL4 v75;
  __int128 v76;
  uint64_t v77;

  if ((__int128 *)result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (uint64_t)a2 - result;
    v7 = (uint64_t)((uint64_t)a2 - result) / 24;
    if ((uint64_t)((uint64_t)a2 - result) >= 25)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (uint64_t *)(result + 24 * v8);
      do
      {
        v10 -= 3;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = *(_QWORD *)v5;
      v12 = v4;
      while (*(_QWORD *)v12 == v11)
      {
        v13 = *((_QWORD *)v12 + 1);
        v14 = *(_QWORD *)(v5 + 8);
        if (v13 != v14)
        {
          v15 = *((_QWORD *)v12 + 1) & 1;
          v16 = *(_QWORD *)(v5 + 8) & 1;
          v17 = (v13 & 0xFFFFFFFFFFFFFFFELL) < (v14 & 0xFFFFFFFFFFFFFFFELL);
          v18 = v15 >= v16;
          v19 = (_DWORD)v15 == (_DWORD)v16;
          goto LABEL_10;
        }
        v24 = *((_DWORD *)v12 + 4);
        v25 = *(_DWORD *)(v5 + 16);
        if (v24 == v25)
        {
          if (*((_DWORD *)v12 + 5) >= *(_DWORD *)(v5 + 20))
            goto LABEL_17;
        }
        else if (v24 >= v25)
        {
          goto LABEL_17;
        }
LABEL_16:
        v21 = *((_QWORD *)v12 + 2);
        v22 = *v12;
        v23 = *(_QWORD *)(v5 + 16);
        *v12 = *(_OWORD *)v5;
        *((_QWORD *)v12 + 2) = v23;
        *(_OWORD *)v5 = v22;
        *(_QWORD *)(v5 + 16) = v21;
        v11 = *(_QWORD *)v5;
LABEL_17:
        v12 = (__int128 *)((char *)v12 + 24);
        if (v12 == a3)
          goto LABEL_25;
      }
      v26 = *(_QWORD *)v12 & 1;
      v17 = (*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFELL) < (v11 & 0xFFFFFFFFFFFFFFFELL);
      v18 = v26 >= (v11 & 1u);
      v19 = (_DWORD)v26 == (v11 & 1);
LABEL_10:
      v20 = !v18;
      if (!v19)
        v17 = v20;
      if (!v17)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_25:
    if (v6 >= 25)
    {
      v27 = v6 / 0x18uLL;
      do
      {
        v28 = 0;
        v76 = *(_OWORD *)v5;
        v77 = *(_QWORD *)(v5 + 16);
        v29 = v5;
        do
        {
          v30 = v29;
          v31 = v28 + 1;
          v29 += 24 * (v28 + 1);
          v32 = 2 * v28;
          v28 = (2 * v28) | 1;
          v33 = v32 + 2;
          if (v33 >= v27)
            goto LABEL_39;
          v34 = *(_QWORD *)(v29 + 24);
          if (*(_QWORD *)v29 != v34)
          {
            v37 = *(_QWORD *)v29 & 1;
            v38 = *(_QWORD *)(v29 + 24) & 1;
            v39 = (*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFELL) >= (v34 & 0xFFFFFFFFFFFFFFFELL);
LABEL_32:
            result = !v39;
            v19 = (_DWORD)v37 == (_DWORD)v38;
            v40 = v37 < v38;
            if (v19)
              v40 = result;
            if (v40)
            {
LABEL_38:
              v29 += 24;
              v28 = v33;
              goto LABEL_39;
            }
            goto LABEL_39;
          }
          v35 = *(_QWORD *)(v30 + 24 * v31 + 8);
          v36 = *(_QWORD *)(v29 + 32);
          if (v35 != v36)
          {
            v37 = *(_QWORD *)(v30 + 24 * v31 + 8) & 1;
            v38 = *(_QWORD *)(v29 + 32) & 1;
            v39 = (v35 & 0xFFFFFFFFFFFFFFFELL) >= (v36 & 0xFFFFFFFFFFFFFFFELL);
            goto LABEL_32;
          }
          result = *(unsigned int *)(v30 + 24 * v31 + 16);
          v42 = *(_DWORD *)(v29 + 40);
          if ((_DWORD)result == v42)
          {
            result = *(unsigned int *)(v29 + 44);
            if (*(_DWORD *)(v30 + 24 * v31 + 20) < (int)result)
              goto LABEL_38;
          }
          else if ((int)result < v42)
          {
            goto LABEL_38;
          }
LABEL_39:
          v41 = *(_OWORD *)v29;
          *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 16);
          *(_OWORD *)v30 = v41;
        }
        while (v28 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        v4 = (__int128 *)((char *)v4 - 24);
        if ((__int128 *)v29 == v4)
        {
          *(_QWORD *)(v29 + 16) = v77;
          *(_OWORD *)v29 = v76;
          continue;
        }
        v43 = *v4;
        *(_QWORD *)(v29 + 16) = *((_QWORD *)v4 + 2);
        *(_OWORD *)v29 = v43;
        *v4 = v76;
        *((_QWORD *)v4 + 2) = v77;
        v44 = v29 - v5 + 24;
        if (v44 < 25)
          continue;
        result = v44 / 0x18uLL - 2;
        v45 = result >> 1;
        v46 = v5 + 24 * (result >> 1);
        v47 = *(_QWORD *)v29;
        if (*(_QWORD *)v46 == *(_QWORD *)v29)
        {
          v48 = *(_QWORD *)(v5 + 24 * v45 + 8);
          v49 = *(_QWORD *)(v29 + 8);
          if (v48 != v49)
          {
            v50 = *(_QWORD *)(v5 + 24 * v45 + 8) & 1;
            v51 = *(_QWORD *)(v29 + 8) & 1;
            v52 = (v48 & 0xFFFFFFFFFFFFFFFELL) < (v49 & 0xFFFFFFFFFFFFFFFELL);
            v19 = (_DWORD)v50 == (_DWORD)v51;
            v53 = v50 < v51;
            if (v19)
              v53 = v52;
            v48 = *(_QWORD *)(v29 + 8);
            if (!v53)
              continue;
LABEL_54:
            v54 = *(_DWORD *)(v29 + 16);
            v55 = *(_DWORD *)(v29 + 20);
            v56 = *(_QWORD *)(v46 + 16);
            *(_OWORD *)v29 = *(_OWORD *)v46;
            *(_QWORD *)(v29 + 16) = v56;
            if (result < 2)
            {
LABEL_55:
              v57 = v46;
LABEL_56:
              *(_QWORD *)v57 = v47;
              *(_QWORD *)(v57 + 8) = v48;
              *(_DWORD *)(v57 + 16) = v54;
              *(_DWORD *)(v57 + 20) = v55;
              continue;
            }
            result = v47 & 1;
            v59 = v48 & 1;
            while (2)
            {
              v60 = v45 - 1;
              v45 = (v45 - 1) >> 1;
              v57 = v5 + 24 * v45;
              if (*(_QWORD *)v57 == v47)
              {
                v61 = *(_QWORD *)(v5 + 24 * v45 + 8);
                if (v61 == v48)
                {
                  v68 = *(_DWORD *)(v5 + 24 * v45 + 16);
                  if (v68 == v54)
                  {
                    if (*(_DWORD *)(v5 + 24 * v45 + 20) >= v55)
                      goto LABEL_55;
                  }
                  else if (v68 >= v54)
                  {
                    goto LABEL_55;
                  }
                }
                else
                {
                  v62 = *(_QWORD *)(v5 + 24 * v45 + 8) & 1;
                  v63 = (v61 & 0xFFFFFFFFFFFFFFFELL) < (v48 & 0xFFFFFFFFFFFFFFFELL);
                  v64 = v62 >= v59;
                  v65 = (_DWORD)v62 == v59;
LABEL_65:
                  v66 = !v64;
                  if (!v65)
                    v63 = v66;
                  if (!v63)
                    goto LABEL_55;
                }
                v67 = *(_OWORD *)v57;
                *(_QWORD *)(v46 + 16) = *(_QWORD *)(v57 + 16);
                *(_OWORD *)v46 = v67;
                v46 = v5 + 24 * v45;
                if (v60 <= 1)
                  goto LABEL_56;
                continue;
              }
              break;
            }
            v69 = *(_QWORD *)v57 & 1;
            v63 = (*(_QWORD *)v57 & 0xFFFFFFFFFFFFFFFELL) < (v47 & 0xFFFFFFFFFFFFFFFELL);
            v64 = v69 >= result;
            v65 = (_DWORD)v69 == (_DWORD)result;
            goto LABEL_65;
          }
          v70 = *(_DWORD *)(v5 + 24 * v45 + 16);
          v71 = *(_DWORD *)(v29 + 16);
          if (v70 == v71)
          {
            if (*(_DWORD *)(v5 + 24 * v45 + 20) < *(_DWORD *)(v29 + 20))
              goto LABEL_54;
          }
          else if (v70 < v71)
          {
            goto LABEL_54;
          }
        }
        else
        {
          v72 = *(_QWORD *)v46 & 1;
          v73 = *(_QWORD *)v29 & 1;
          v74 = (*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFFELL) < (v47 & 0xFFFFFFFFFFFFFFFELL);
          v19 = (_DWORD)v72 == (_DWORD)v73;
          v75 = v72 < v73;
          if (!v19)
            v74 = v75;
          if (v74)
          {
            v48 = *(_QWORD *)(v29 + 8);
            goto LABEL_54;
          }
        }
      }
      while (v27-- > 2);
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  v3 = *a2;
  if (*a2 == *result)
  {
    v4 = a2[1];
    v5 = result[1];
    if (v4 == v5)
    {
      v21 = *((_DWORD *)a2 + 4);
      v22 = *((_DWORD *)result + 4);
      if (v21 == v22)
      {
        if (*((_DWORD *)a2 + 5) < *((_DWORD *)result + 5))
          goto LABEL_10;
      }
      else if (v21 < v22)
      {
        goto LABEL_10;
      }
LABEL_22:
      if (*a3 == v3)
      {
        v23 = a3[1];
        v24 = a2[1];
        if (v23 == v24)
        {
          v51 = *((_DWORD *)a3 + 4);
          v52 = *((_DWORD *)a2 + 4);
          if (v51 == v52)
          {
            if (*((_DWORD *)a3 + 5) >= *((_DWORD *)a2 + 5))
              return result;
          }
          else if (v51 >= v52)
          {
            return result;
          }
          goto LABEL_31;
        }
        v25 = a3[1] & 1;
        v26 = a2[1] & 1;
        v27 = (v23 & 0xFFFFFFFFFFFFFFFELL) >= (v24 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v25 = *a3 & 1;
        v26 = *a2 & 1;
        v27 = (*a3 & 0xFFFFFFFFFFFFFFFELL) >= (v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      v28 = !v27;
      if ((_DWORD)v25 != (_DWORD)v26)
        v28 = v25 < v26;
      if (!v28)
        return result;
LABEL_31:
      v29 = a2[2];
      v30 = *(_OWORD *)a2;
      v31 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v31;
      *(_OWORD *)a3 = v30;
      a3[2] = v29;
      v32 = *a2;
      v33 = *result;
      if (*a2 == *result && (v32 = a2[1], v33 = result[1], v32 == v33))
      {
        v53 = *((_DWORD *)a2 + 4);
        v54 = *((_DWORD *)result + 4);
        if (v53 == v54)
        {
          if (*((_DWORD *)a2 + 5) >= *((_DWORD *)result + 5))
            return result;
        }
        else if (v53 >= v54)
        {
          return result;
        }
      }
      else
      {
        v34 = v32 & 1;
        v35 = v33 & 1;
        v36 = (v32 & 0xFFFFFFFFFFFFFFFELL) < (v33 & 0xFFFFFFFFFFFFFFFELL);
        if (v34 != v35)
          v36 = v34 < v35;
        if (!v36)
          return result;
      }
      v37 = result[2];
      v38 = *(_OWORD *)result;
      v39 = a2[2];
      *(_OWORD *)result = *(_OWORD *)a2;
      result[2] = v39;
      *(_OWORD *)a2 = v38;
      a2[2] = v37;
      return result;
    }
    v6 = a2[1] & 1;
    v7 = result[1] & 1;
    v8 = (v4 & 0xFFFFFFFFFFFFFFFELL) < (v5 & 0xFFFFFFFFFFFFFFFELL);
    v9 = v6 >= v7;
    v10 = (_DWORD)v6 == (_DWORD)v7;
  }
  else
  {
    v57 = *a2 & 1;
    v58 = *result & 1;
    v8 = (v3 & 0xFFFFFFFFFFFFFFFELL) < (*result & 0xFFFFFFFFFFFFFFFELL);
    v9 = v57 >= v58;
    v10 = (_DWORD)v57 == (_DWORD)v58;
  }
  v11 = !v9;
  if (!v10)
    v8 = v11;
  if (!v8)
    goto LABEL_22;
LABEL_10:
  if (*a3 == v3)
  {
    v12 = a3[1];
    v13 = a2[1];
    if (v12 == v13)
    {
      v40 = *((_DWORD *)a3 + 4);
      v41 = *((_DWORD *)a2 + 4);
      if (v40 == v41)
      {
        if (*((_DWORD *)a3 + 5) >= *((_DWORD *)a2 + 5))
          goto LABEL_39;
      }
      else if (v40 >= v41)
      {
        goto LABEL_39;
      }
LABEL_19:
      v18 = result[2];
      v19 = *(_OWORD *)result;
      v20 = a3[2];
      *(_OWORD *)result = *(_OWORD *)a3;
      result[2] = v20;
LABEL_45:
      *(_OWORD *)a3 = v19;
      a3[2] = v18;
      return result;
    }
    v14 = a3[1] & 1;
    v15 = a2[1] & 1;
    v16 = (v12 & 0xFFFFFFFFFFFFFFFELL) >= (v13 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    v14 = *a3 & 1;
    v15 = *a2 & 1;
    v16 = (*a3 & 0xFFFFFFFFFFFFFFFELL) >= (v3 & 0xFFFFFFFFFFFFFFFELL);
  }
  v17 = !v16;
  if ((_DWORD)v14 != (_DWORD)v15)
    v17 = v14 < v15;
  if (v17)
    goto LABEL_19;
LABEL_39:
  v42 = result[2];
  v43 = *(_OWORD *)result;
  v44 = a2[2];
  *(_OWORD *)result = *(_OWORD *)a2;
  result[2] = v44;
  *(_OWORD *)a2 = v43;
  a2[2] = v42;
  v45 = *a3;
  v46 = *a2;
  if (*a3 == *a2 && (v45 = a3[1], v46 = a2[1], v45 == v46))
  {
    v55 = *((_DWORD *)a3 + 4);
    v56 = *((_DWORD *)a2 + 4);
    if (v55 == v56)
    {
      if (*((_DWORD *)a3 + 5) >= *((_DWORD *)a2 + 5))
        return result;
      goto LABEL_44;
    }
    if (v55 < v56)
    {
LABEL_44:
      v18 = a2[2];
      v19 = *(_OWORD *)a2;
      v50 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v50;
      goto LABEL_45;
    }
  }
  else
  {
    v47 = v45 & 1;
    v48 = v46 & 1;
    v49 = (v45 & 0xFFFFFFFFFFFFFFFELL) < (v46 & 0xFFFFFFFFFFFFFFFELL);
    if (v47 != v48)
      v49 = v47 < v48;
    if (v49)
      goto LABEL_44;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::Relationship *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t i;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  char v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  char v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  char v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v67;
  uint64_t v68;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_DWORD *)a1 + 5);
  v6 = *(_QWORD *)(a2 - 24);
  if (*a1 != v6)
    goto LABEL_109;
  v6 = *(_QWORD *)(a2 - 16);
  if (v3 == v6)
  {
    v22 = *(_DWORD *)(a2 - 8);
    if (v4 == v22)
    {
      if (v5 >= *(_DWORD *)(a2 - 4))
        goto LABEL_28;
    }
    else if (v4 >= v22)
    {
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  v7 = a1[1] & 1;
  v8 = v6 & 1;
  for (i = v3 & 0xFFFFFFFFFFFFFFFELL; ; i = v2 & 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = i < (v6 & 0xFFFFFFFFFFFFFFFELL);
    v18 = (_DWORD)v7 == v8;
    v11 = v7 < v8;
    if (!v18)
      v10 = v11;
    if (!v10)
      break;
LABEL_7:
    v6 = (unint64_t)(a1 + 3);
    if (a1 + 3 != (uint64_t *)a2)
    {
      v12 = v2 & 1;
      v13 = v3 & 1;
      do
      {
        if (v2 == *(_QWORD *)v6)
        {
          v14 = *(_QWORD *)(v6 + 8);
          if (v3 == v14)
          {
            v20 = *(_DWORD *)(v6 + 16);
            if (v4 == v20)
            {
              if (v5 < *(_DWORD *)(v6 + 20))
                goto LABEL_46;
            }
            else if (v4 < v20)
            {
              goto LABEL_46;
            }
            goto LABEL_18;
          }
          v15 = *(_QWORD *)(v6 + 8) & 1;
          v16 = (v3 & 0xFFFFFFFFFFFFFFFELL) < (v14 & 0xFFFFFFFFFFFFFFFELL);
          v17 = v13 >= v15;
          v18 = v13 == (_DWORD)v15;
        }
        else
        {
          v21 = *(_QWORD *)v6 & 1;
          v16 = (v2 & 0xFFFFFFFFFFFFFFFELL) < (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFFELL);
          v17 = v12 >= v21;
          v18 = v12 == (_DWORD)v21;
        }
        v19 = !v17;
        if (!v18)
          v16 = v19;
        if (v16)
          goto LABEL_46;
LABEL_18:
        v6 += 24;
      }
      while (v6 != a2);
    }
LABEL_108:
    __break(1u);
LABEL_109:
    LODWORD(v7) = v2 & 1;
    v8 = v6 & 1;
  }
LABEL_28:
  v6 = (unint64_t)(a1 + 3);
  if ((unint64_t)(a1 + 3) < a2)
  {
    v23 = v2 & 1;
    v24 = v3 & 1;
    do
    {
      if (v2 == *(_QWORD *)v6)
      {
        v25 = *(_QWORD *)(v6 + 8);
        if (v3 == v25)
        {
          v31 = *(_DWORD *)(v6 + 16);
          if (v4 == v31)
          {
            if (v5 < *(_DWORD *)(v6 + 20))
              break;
          }
          else if (v4 < v31)
          {
            break;
          }
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v6 + 8) & 1;
        v27 = (v3 & 0xFFFFFFFFFFFFFFFELL) < (v25 & 0xFFFFFFFFFFFFFFFELL);
        v28 = v24 >= v26;
        v29 = v24 == (_DWORD)v26;
      }
      else
      {
        v32 = *(_QWORD *)v6 & 1;
        v27 = (v2 & 0xFFFFFFFFFFFFFFFELL) < (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFFELL);
        v28 = v23 >= v32;
        v29 = v23 == (_DWORD)v32;
      }
      v30 = !v28;
      if (!v29)
        v27 = v30;
      if (v27)
        break;
LABEL_39:
      v6 += 24;
    }
    while (v6 < a2);
  }
LABEL_46:
  v33 = a2;
  if (v6 < a2)
  {
    if ((uint64_t *)a2 == a1)
      goto LABEL_108;
    v34 = v2 & 1;
    v35 = v3 & 1;
    v33 = a2 - 24;
    while (1)
    {
      if (v2 == *(_QWORD *)v33)
      {
        v36 = *(_QWORD *)(v33 + 8);
        if (v3 == v36)
        {
          v42 = *(_DWORD *)(v33 + 16);
          if (v4 == v42)
          {
            if (v5 >= *(_DWORD *)(v33 + 20))
              break;
          }
          else if (v4 >= v42)
          {
            break;
          }
          goto LABEL_58;
        }
        v37 = *(_QWORD *)(v33 + 8) & 1;
        v38 = (v3 & 0xFFFFFFFFFFFFFFFELL) < (v36 & 0xFFFFFFFFFFFFFFFELL);
        v39 = v35 >= v37;
        v40 = v35 == (_DWORD)v37;
      }
      else
      {
        v43 = *(_QWORD *)v33 & 1;
        v38 = (v2 & 0xFFFFFFFFFFFFFFFELL) < (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFELL);
        v39 = v34 >= v43;
        v40 = v34 == (_DWORD)v43;
      }
      v41 = !v39;
      if (!v40)
        v38 = v41;
      if (!v38)
        break;
LABEL_58:
      v18 = v33 == (_QWORD)a1;
      v33 -= 24;
      if (v18)
        goto LABEL_108;
    }
  }
  if (v6 >= v33)
    goto LABEL_105;
  v44 = v2 & 1;
  v45 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v46 = v3 & 1;
  v47 = v3 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v68 = *(_QWORD *)(v6 + 16);
    v67 = *(_OWORD *)v6;
    v48 = *(_OWORD *)v33;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v33 + 16);
    *(_OWORD *)v6 = v48;
    *(_QWORD *)(v33 + 16) = v68;
    *(_OWORD *)v33 = v67;
    do
    {
      while (1)
      {
        v6 += 24;
        if (v6 == a2)
          goto LABEL_108;
        if (v2 != *(_QWORD *)v6)
          break;
        v49 = *(_QWORD *)(v6 + 8);
        if (v3 != v49)
        {
          v50 = *(_QWORD *)(v6 + 8) & 1;
          v51 = v47 < (v49 & 0xFFFFFFFFFFFFFFFELL);
          v52 = v46 >= v50;
          v53 = v46 == (_DWORD)v50;
          goto LABEL_73;
        }
        v55 = *(_DWORD *)(v6 + 16);
        if (v4 == v55)
        {
          if (v5 < *(_DWORD *)(v6 + 20))
            goto LABEL_85;
        }
        else if (v4 < v55)
        {
          goto LABEL_85;
        }
      }
      v56 = *(_QWORD *)v6 & 1;
      v51 = v45 < (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFFELL);
      v52 = v44 >= v56;
      v53 = v44 == (_DWORD)v56;
LABEL_73:
      v54 = !v52;
      if (!v53)
        v51 = v54;
    }
    while (!v51);
LABEL_85:
    if ((uint64_t *)v33 == a1)
      goto LABEL_108;
    v33 -= 24;
LABEL_87:
    if (v2 == *(_QWORD *)v33)
    {
      v57 = *(_QWORD *)(v33 + 8);
      if (v3 != v57)
      {
        v58 = *(_QWORD *)(v33 + 8) & 1;
        v59 = v47 < (v57 & 0xFFFFFFFFFFFFFFFELL);
        v60 = v46 >= v58;
        v61 = v46 == (_DWORD)v58;
        goto LABEL_90;
      }
      v63 = *(_DWORD *)(v33 + 16);
      if (v4 == v63)
      {
        if (v5 >= *(_DWORD *)(v33 + 20))
          continue;
      }
      else if (v4 >= v63)
      {
        continue;
      }
LABEL_96:
      v18 = v33 == (_QWORD)a1;
      v33 -= 24;
      if (v18)
        goto LABEL_108;
      goto LABEL_87;
    }
    v64 = *(_QWORD *)v33 & 1;
    v59 = v45 < (*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFELL);
    v60 = v44 >= v64;
    v61 = v44 == (_DWORD)v64;
LABEL_90:
    v62 = !v60;
    if (!v61)
      v59 = v62;
    if (v59)
      goto LABEL_96;
  }
  while (v6 < v33);
LABEL_105:
  if ((uint64_t *)(v6 - 24) != a1)
  {
    v65 = *(_OWORD *)(v6 - 24);
    a1[2] = *(_QWORD *)(v6 - 8);
    *(_OWORD *)a1 = v65;
  }
  *(_QWORD *)(v6 - 24) = v2;
  *(_QWORD *)(v6 - 16) = v3;
  *(_DWORD *)(v6 - 8) = v4;
  *(_DWORD *)(v6 - 4) = v5;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::Relationship *,std::__less<void,void> &>(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  char v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  char v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  char v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  if (result + 24 == a2)
    goto LABEL_102;
  v2 = 0;
  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_DWORD *)(result + 16);
  v6 = *(_DWORD *)(result + 20);
  v7 = *(_QWORD *)result & 1;
  v8 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL;
  v9 = v4 & 1;
  v10 = v4 & 0xFFFFFFFFFFFFFFFELL;
  while (1)
  {
    v11 = result + v2;
    v12 = *(_QWORD *)(result + v2 + 24);
    if (v12 != v3)
      break;
    v13 = *(_QWORD *)(v11 + 32);
    if (v13 != v4)
    {
      v14 = *(_QWORD *)(v11 + 32) & 1;
      v15 = (v13 & 0xFFFFFFFFFFFFFFFELL) < v10;
      v16 = v14 >= v9;
      v17 = (_DWORD)v14 == v9;
      goto LABEL_6;
    }
    v19 = *(_DWORD *)(result + v2 + 40);
    if (v19 == v5)
    {
      if (*(_DWORD *)(result + v2 + 44) >= v6)
        goto LABEL_19;
    }
    else if (v19 >= v5)
    {
      goto LABEL_19;
    }
LABEL_12:
    v2 += 24;
    if (result + v2 + 24 == a2)
      goto LABEL_102;
  }
  v20 = *(_QWORD *)(result + v2 + 24) & 1;
  v15 = (v12 & 0xFFFFFFFFFFFFFFFELL) < v8;
  v16 = v20 >= v7;
  v17 = (_DWORD)v20 == (_DWORD)v7;
LABEL_6:
  v18 = !v16;
  if (!v17)
    v15 = v18;
  if (v15)
    goto LABEL_12;
LABEL_19:
  v21 = result + v2 + 24;
  if (v2)
  {
    if (a2 != result)
    {
      i = a2 - 24;
      do
      {
        if (*(_QWORD *)i == v3)
        {
          v23 = *(_QWORD *)(i + 8);
          if (v23 == v4)
          {
            v29 = *(_DWORD *)(i + 16);
            if (v29 == v5)
            {
              if (*(_DWORD *)(i + 20) < v6)
                goto LABEL_60;
            }
            else if (v29 < v5)
            {
              goto LABEL_60;
            }
            goto LABEL_31;
          }
          v24 = *(_QWORD *)(i + 8) & 1;
          v25 = (v23 & 0xFFFFFFFFFFFFFFFELL) < v10;
          v26 = v24 >= v9;
          v27 = (_DWORD)v24 == v9;
        }
        else
        {
          v30 = *(_QWORD *)i & 1;
          v25 = (*(_QWORD *)i & 0xFFFFFFFFFFFFFFFELL) < v8;
          v26 = v30 >= v7;
          v27 = (_DWORD)v30 == (_DWORD)v7;
        }
        v28 = !v26;
        if (!v27)
          v25 = v28;
        if (v25)
          goto LABEL_60;
LABEL_31:
        v17 = i == result;
        i -= 24;
      }
      while (!v17);
    }
LABEL_102:
    __break(1u);
    return result;
  }
  i = a2;
  if (v21 < a2)
  {
    for (i = a2 - 24; ; i -= 24)
    {
      if (*(_QWORD *)i == v3)
      {
        v31 = *(_QWORD *)(i + 8);
        if (v31 == v4)
        {
          v37 = *(_DWORD *)(i + 16);
          if (v37 == v5)
          {
            if (v21 >= i || *(_DWORD *)(i + 20) < v6)
              break;
          }
          else if (v21 >= i || v37 < v5)
          {
            break;
          }
          continue;
        }
        v32 = *(_QWORD *)(i + 8) & 1;
        v33 = (v31 & 0xFFFFFFFFFFFFFFFELL) >= v10;
        v34 = v32 >= v9;
        v35 = (_DWORD)v32 == v9;
      }
      else
      {
        v38 = *(_QWORD *)i & 1;
        v33 = (*(_QWORD *)i & 0xFFFFFFFFFFFFFFFELL) >= v8;
        v34 = v38 >= v7;
        v35 = (_DWORD)v38 == (_DWORD)v7;
      }
      v36 = v34;
      if (!v35)
        v33 = v36;
      if (v21 >= i || !v33)
        break;
    }
  }
LABEL_60:
  v39 = v21;
  if (v21 >= i)
    goto LABEL_99;
  v40 = i;
  do
  {
    v60 = *(_QWORD *)(v39 + 16);
    v59 = *(_OWORD *)v39;
    v41 = *(_OWORD *)v40;
    *(_QWORD *)(v39 + 16) = *(_QWORD *)(v40 + 16);
    *(_OWORD *)v39 = v41;
    *(_QWORD *)(v40 + 16) = v60;
    *(_OWORD *)v40 = v59;
    do
    {
      while (1)
      {
        v39 += 24;
        if (v39 == a2)
          goto LABEL_102;
        if (*(_QWORD *)v39 != v3)
          break;
        v42 = *(_QWORD *)(v39 + 8);
        if (v42 != v4)
        {
          v43 = *(_QWORD *)(v39 + 8) & 1;
          v44 = (v42 & 0xFFFFFFFFFFFFFFFELL) < v10;
          v45 = v43 >= v9;
          v46 = (_DWORD)v43 == v9;
          goto LABEL_67;
        }
        v48 = *(_DWORD *)(v39 + 16);
        if (v48 == v5)
        {
          if (*(_DWORD *)(v39 + 20) >= v6)
            goto LABEL_79;
        }
        else if (v48 >= v5)
        {
          goto LABEL_79;
        }
      }
      v49 = *(_QWORD *)v39 & 1;
      v44 = (*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFFELL) < v8;
      v45 = v49 >= v7;
      v46 = (_DWORD)v49 == (_DWORD)v7;
LABEL_67:
      v47 = !v45;
      if (!v46)
        v44 = v47;
    }
    while (v44);
LABEL_79:
    if (v40 == result)
      goto LABEL_102;
    v40 -= 24;
LABEL_81:
    if (*(_QWORD *)v40 == v3)
    {
      v50 = *(_QWORD *)(v40 + 8);
      if (v50 != v4)
      {
        v51 = *(_QWORD *)(v40 + 8) & 1;
        v52 = (v50 & 0xFFFFFFFFFFFFFFFELL) < v10;
        v53 = v51 >= v9;
        v54 = (_DWORD)v51 == v9;
        goto LABEL_84;
      }
      v56 = *(_DWORD *)(v40 + 16);
      if (v56 == v5)
      {
        if (*(_DWORD *)(v40 + 20) < v6)
          continue;
      }
      else if (v56 < v5)
      {
        continue;
      }
LABEL_90:
      v17 = v40 == result;
      v40 -= 24;
      if (v17)
        goto LABEL_102;
      goto LABEL_81;
    }
    v57 = *(_QWORD *)v40 & 1;
    v52 = (*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFELL) < v8;
    v53 = v57 >= v7;
    v54 = (_DWORD)v57 == (_DWORD)v7;
LABEL_84:
    v55 = !v53;
    if (!v54)
      v52 = v55;
    if (!v52)
      goto LABEL_90;
  }
  while (v39 < v40);
LABEL_99:
  if (v39 - 24 != result)
  {
    v58 = *(_OWORD *)(v39 - 24);
    *(_QWORD *)(result + 16) = *(_QWORD *)(v39 - 8);
    *(_OWORD *)result = v58;
  }
  *(_QWORD *)(v39 - 24) = v3;
  *(_QWORD *)(v39 - 16) = v4;
  *(_DWORD *)(v39 - 8) = v5;
  *(_DWORD *)(v39 - 4) = v6;
  return v39 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _BOOL4 v47;
  uint64_t *v48;
  uint64_t *v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      v7 = *(_QWORD *)(a2 - 24);
      v8 = *(_QWORD *)a1;
      if (v7 == *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a2 - 16);
        v8 = *(_QWORD *)(a1 + 8);
        if (v7 == v8)
        {
          v81 = *(_DWORD *)(a2 - 8);
          v82 = *(_DWORD *)(a1 + 16);
          if (v81 == v82)
          {
            if (*(_DWORD *)(a2 - 4) >= *(_DWORD *)(a1 + 20))
              return result;
          }
          else if (v81 >= v82)
          {
            return result;
          }
LABEL_7:
          v12 = *(_QWORD *)(a1 + 16);
          v13 = *(_OWORD *)a1;
          v14 = *(_QWORD *)(a2 - 8);
          *(_OWORD *)a1 = *v6;
          *(_QWORD *)(a1 + 16) = v14;
          *v6 = v13;
          *(_QWORD *)(a2 - 8) = v12;
          return result;
        }
      }
      v9 = v7 & 1;
      v10 = v8 & 1;
      v11 = (v7 & 0xFFFFFFFFFFFFFFFELL) < (v8 & 0xFFFFFFFFFFFFFFFELL);
      if (v9 != v10)
        v11 = v9 < v10;
      if (v11)
        goto LABEL_7;
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v48 = (uint64_t *)(a1 + 24);
      v49 = (uint64_t *)(a1 + 48);
      v50 = (__int128 *)(a1 + 72);
      v51 = (__int128 *)(a2 - 24);
      v52 = *(_QWORD *)(a2 - 24);
      v53 = *(_QWORD *)(a1 + 72);
      if (v52 == v53 && (v52 = *(_QWORD *)(a2 - 16), v53 = *(_QWORD *)(a1 + 80), v52 == v53))
      {
        v83 = *(_DWORD *)(a2 - 8);
        v84 = *(_DWORD *)(a1 + 88);
        if (v83 == v84)
        {
          if (*(_DWORD *)(a2 - 4) >= *(_DWORD *)(a1 + 92))
            return 1;
        }
        else if (v83 >= v84)
        {
          return 1;
        }
      }
      else
      {
        v54 = v52 & 1;
        v55 = v53 & 1;
        v56 = (v52 & 0xFFFFFFFFFFFFFFFELL) < (v53 & 0xFFFFFFFFFFFFFFFELL);
        if (v54 != v55)
          v56 = v54 < v55;
        if (!v56)
          return 1;
      }
      v57 = *(_QWORD *)(a1 + 88);
      v58 = *v50;
      v59 = *(_QWORD *)(a2 - 8);
      *v50 = *v51;
      *(_QWORD *)(a1 + 88) = v59;
      *v51 = v58;
      *(_QWORD *)(a2 - 8) = v57;
      v60 = *(_QWORD *)v50;
      v61 = *v49;
      if (*(_QWORD *)v50 == *v49 && (v60 = *(_QWORD *)(a1 + 80), v61 = *(_QWORD *)(a1 + 56), v60 == v61))
      {
        v85 = *(_DWORD *)(a1 + 88);
        v86 = *(_DWORD *)(a1 + 64);
        if (v85 == v86)
        {
          if (*(_DWORD *)(a1 + 92) >= *(_DWORD *)(a1 + 68))
            return 1;
        }
        else if (v85 >= v86)
        {
          return 1;
        }
      }
      else
      {
        v62 = v60 & 1;
        v63 = v61 & 1;
        v64 = (v60 & 0xFFFFFFFFFFFFFFFELL) < (v61 & 0xFFFFFFFFFFFFFFFELL);
        if (v62 != v63)
          v64 = v62 < v63;
        if (!v64)
          return 1;
      }
      v65 = *(_QWORD *)(a1 + 64);
      v66 = *(_OWORD *)v49;
      *(_OWORD *)v49 = *v50;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
      *v50 = v66;
      *(_QWORD *)(a1 + 88) = v65;
      v67 = *v49;
      v68 = *v48;
      if (*v49 == *v48 && (v67 = *(_QWORD *)(a1 + 56), v68 = *(_QWORD *)(a1 + 32), v67 == v68))
      {
        v87 = *(_DWORD *)(a1 + 64);
        v88 = *(_DWORD *)(a1 + 40);
        if (v87 == v88)
        {
          if (*(_DWORD *)(a1 + 68) >= *(_DWORD *)(a1 + 44))
            return 1;
        }
        else if (v87 >= v88)
        {
          return 1;
        }
      }
      else
      {
        v69 = v67 & 1;
        v70 = v68 & 1;
        v71 = (v67 & 0xFFFFFFFFFFFFFFFELL) < (v68 & 0xFFFFFFFFFFFFFFFELL);
        if (v69 != v70)
          v71 = v69 < v70;
        if (!v71)
          return 1;
      }
      v72 = *(_QWORD *)(a1 + 40);
      v73 = *(_OWORD *)v48;
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)v49 = v73;
      *(_QWORD *)(a1 + 64) = v72;
      v74 = *(_QWORD *)(a1 + 24);
      v75 = *(_QWORD *)a1;
      if (v74 == *(_QWORD *)a1)
      {
        v74 = *(_QWORD *)(a1 + 32);
        v75 = *(_QWORD *)(a1 + 8);
        if (v74 == v75)
        {
          v89 = *(_DWORD *)(a1 + 40);
          v90 = *(_DWORD *)(a1 + 16);
          if (v89 == v90)
          {
            if (*(_DWORD *)(a1 + 44) >= *(_DWORD *)(a1 + 20))
              return 1;
          }
          else if (v89 >= v90)
          {
            return 1;
          }
LABEL_68:
          v79 = *(_QWORD *)(a1 + 16);
          v80 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v48;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *(_OWORD *)v48 = v80;
          *(_QWORD *)(a1 + 40) = v79;
          return 1;
        }
      }
      v76 = v74 & 1;
      v77 = v75 & 1;
      v78 = (v74 & 0xFFFFFFFFFFFFFFFELL) < (v75 & 0xFFFFFFFFFFFFFFFELL);
      if (v76 != v77)
        v78 = v76 < v77;
      if (v78)
        goto LABEL_68;
      return 1;
    default:
      v15 = a1 + 48;
      v16 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      while (2)
      {
        v19 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 == *(_QWORD *)v15)
        {
          v20 = *(_QWORD *)(v16 + 8);
          v21 = *(_QWORD *)(v15 + 8);
          if (v20 == v21)
          {
            v42 = *(_DWORD *)(v16 + 16);
            v43 = *(_DWORD *)(v15 + 16);
            if (v42 == v43)
            {
              if (*(_DWORD *)(v16 + 20) >= *(_DWORD *)(v15 + 20))
                goto LABEL_35;
            }
            else if (v42 >= v43)
            {
              goto LABEL_35;
            }
          }
          else
          {
            v22 = *(_QWORD *)(v16 + 8) & 1;
            v23 = *(_QWORD *)(v15 + 8) & 1;
            v24 = (v20 & 0xFFFFFFFFFFFFFFFELL) < (v21 & 0xFFFFFFFFFFFFFFFELL);
            v38 = (_DWORD)v22 == (_DWORD)v23;
            v25 = v22 < v23;
            if (!v38)
              v24 = v25;
            if (!v24)
              goto LABEL_35;
          }
        }
        else
        {
          v44 = *(_QWORD *)v16 & 1;
          v45 = *(_QWORD *)v15 & 1;
          v46 = (v19 & 0xFFFFFFFFFFFFFFFELL) < (*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFELL);
          v38 = (_DWORD)v44 == (_DWORD)v45;
          v47 = v44 < v45;
          if (!v38)
            v46 = v47;
          if (!v46)
            goto LABEL_35;
          v20 = *(_QWORD *)(v16 + 8);
        }
        v26 = *(_DWORD *)(v16 + 16);
        v27 = *(_DWORD *)(v16 + 20);
        *(_OWORD *)v16 = *(_OWORD *)v15;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
        v28 = a1;
        if (v15 == a1)
          goto LABEL_34;
        v29 = v19 & 1;
        v30 = v20 & 1;
        v31 = v17;
        while (2)
        {
          v32 = a1 + v31;
          v33 = *(_QWORD *)(a1 + v31 + 24);
          if (v19 == v33)
          {
            v34 = *(_QWORD *)(v32 + 32);
            if (v20 == v34)
            {
              v40 = *(_DWORD *)(a1 + v31 + 40);
              if (v26 == v40)
              {
                if (v27 >= *(_DWORD *)(a1 + v31 + 44))
                  break;
              }
              else if (v26 >= v40)
              {
                v28 = a1 + v31 + 48;
                goto LABEL_34;
              }
              goto LABEL_26;
            }
            v35 = *(_QWORD *)(v32 + 32) & 1;
            v36 = (v20 & 0xFFFFFFFFFFFFFFFELL) < (v34 & 0xFFFFFFFFFFFFFFFELL);
            v37 = v30 >= v35;
            v38 = v30 == (_DWORD)v35;
          }
          else
          {
            v41 = *(_QWORD *)(a1 + v31 + 24) & 1;
            v36 = (v19 & 0xFFFFFFFFFFFFFFFELL) < (v33 & 0xFFFFFFFFFFFFFFFELL);
            v37 = v29 >= v41;
            v38 = v29 == (_DWORD)v41;
          }
          v39 = !v37;
          if (!v38)
            v36 = v39;
          if (v36)
          {
LABEL_26:
            v15 -= 24;
            *(_OWORD *)(a1 + v31 + 48) = *(_OWORD *)(a1 + v31 + 24);
            *(_QWORD *)(a1 + v31 + 64) = *(_QWORD *)(a1 + v31 + 40);
            v31 -= 24;
            if (v31 == -48)
            {
              v28 = a1;
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        v28 = v15;
LABEL_34:
        *(_QWORD *)v28 = v19;
        *(_QWORD *)(v28 + 8) = v20;
        *(_DWORD *)(v28 + 16) = v26;
        *(_DWORD *)(v28 + 20) = v27;
        if (++v18 != 8)
        {
LABEL_35:
          v15 = v16;
          v17 += 24;
          v16 += 24;
          if (v16 == a2)
            return 1;
          continue;
        }
        return v16 + 24 == a2;
      }
  }
}

uint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  v9 = *a4;
  v10 = *a3;
  if (*a4 == *a3 && (v9 = a4[1], v10 = a3[1], v9 == v10))
  {
    v33 = *((_DWORD *)a4 + 4);
    v34 = *((_DWORD *)a3 + 4);
    if (v33 == v34)
    {
      if (*((_DWORD *)a4 + 5) >= *((_DWORD *)a3 + 5))
        return result;
    }
    else if (v33 >= v34)
    {
      return result;
    }
  }
  else
  {
    v11 = v9 & 1;
    v12 = v10 & 1;
    v13 = (v9 & 0xFFFFFFFFFFFFFFFELL) < (v10 & 0xFFFFFFFFFFFFFFFELL);
    if (v11 != v12)
      v13 = v11 < v12;
    if (!v13)
      return result;
  }
  v14 = a3[2];
  v15 = *(_OWORD *)a3;
  v16 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v16;
  *(_OWORD *)a4 = v15;
  a4[2] = v14;
  v17 = *a3;
  v18 = *a2;
  if (*a3 == *a2 && (v17 = a3[1], v18 = a2[1], v17 == v18))
  {
    v35 = *((_DWORD *)a3 + 4);
    v36 = *((_DWORD *)a2 + 4);
    if (v35 == v36)
    {
      if (*((_DWORD *)a3 + 5) >= *((_DWORD *)a2 + 5))
        return result;
    }
    else if (v35 >= v36)
    {
      return result;
    }
  }
  else
  {
    v19 = v17 & 1;
    v20 = v18 & 1;
    v21 = (v17 & 0xFFFFFFFFFFFFFFFELL) < (v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v19 != v20)
      v21 = v19 < v20;
    if (!v21)
      return result;
  }
  v22 = a2[2];
  v23 = *(_OWORD *)a2;
  v24 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v24;
  *(_OWORD *)a3 = v23;
  a3[2] = v22;
  v25 = *a2;
  v26 = *a1;
  if (*a2 == *a1 && (v25 = a2[1], v26 = a1[1], v25 == v26))
  {
    v37 = *((_DWORD *)a2 + 4);
    v38 = *((_DWORD *)a1 + 4);
    if (v37 == v38)
    {
      if (*((_DWORD *)a2 + 5) >= *((_DWORD *)a1 + 5))
        return result;
      goto LABEL_16;
    }
    if (v37 < v38)
    {
LABEL_16:
      v30 = a1[2];
      v31 = *(_OWORD *)a1;
      v32 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v32;
      *(_OWORD *)a2 = v31;
      a2[2] = v30;
    }
  }
  else
  {
    v27 = v25 & 1;
    v28 = v26 & 1;
    v29 = (v25 & 0xFFFFFFFFFFFFFFFELL) < (v26 & 0xFFFFFFFFFFFFFFFELL);
    if (v27 != v28)
      v29 = v27 < v28;
    if (v29)
      goto LABEL_16;
  }
  return result;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::`anonymous namespace'::Relationship *>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  int64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  char v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;

  if (a2 < 2)
    return result;
  v3 = (unint64_t)(a2 - 2) >> 1;
  if (v3 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - result) >> 3)))
    return result;
  v4 = (0x5555555555555556 * (((uint64_t)a3 - result) >> 3)) | 1;
  v5 = (__int128 *)(result + 24 * v4);
  if (0x5555555555555556 * (((uint64_t)a3 - result) >> 3) + 2 >= a2)
    goto LABEL_14;
  v6 = *((_QWORD *)v5 + 3);
  if (*(_QWORD *)v5 != v6)
  {
    v9 = *(_QWORD *)v5 & 1;
    v10 = *((_QWORD *)v5 + 3) & 1;
    v11 = (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) >= (v6 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
    v12 = !v11;
    if ((_DWORD)v9 != (_DWORD)v10)
      v12 = v9 < v10;
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(result + 24 * v4 + 8);
  v8 = *((_QWORD *)v5 + 4);
  if (v7 != v8)
  {
    v9 = *(_QWORD *)(result + 24 * v4 + 8) & 1;
    v10 = v5[2] & 1;
    v11 = (v7 & 0xFFFFFFFFFFFFFFFELL) >= (v8 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_7;
  }
  v48 = *(_DWORD *)(result + 24 * v4 + 16);
  v49 = *((_DWORD *)v5 + 10);
  if (v48 == v49)
  {
    if (*(_DWORD *)(result + 24 * v4 + 20) >= *((_DWORD *)v5 + 11))
      goto LABEL_14;
  }
  else if (v48 >= v49)
  {
    goto LABEL_14;
  }
LABEL_13:
  v5 = (__int128 *)((char *)v5 + 24);
  v4 = 0x5555555555555556 * (((uint64_t)a3 - result) >> 3) + 2;
LABEL_14:
  v13 = *a3;
  if (*(_QWORD *)v5 == *a3)
  {
    v14 = *((_QWORD *)v5 + 1);
    v15 = a3[1];
    if (v14 == v15)
    {
      v46 = *((_DWORD *)v5 + 4);
      v47 = *((_DWORD *)a3 + 4);
      if (v46 == v47)
      {
        if (*((_DWORD *)v5 + 5) < *((_DWORD *)a3 + 5))
          return result;
      }
      else if (v46 < v47)
      {
        return result;
      }
    }
    else
    {
      v16 = *((_QWORD *)v5 + 1) & 1;
      v17 = a3[1] & 1;
      v18 = (v14 & 0xFFFFFFFFFFFFFFFELL) < (v15 & 0xFFFFFFFFFFFFFFFELL);
      v39 = (_DWORD)v16 == (_DWORD)v17;
      v19 = v16 < v17;
      if (v39)
        v19 = v18;
      v14 = a3[1];
      if (v19)
        return result;
    }
  }
  else
  {
    v50 = *(_QWORD *)v5 & 1;
    v51 = *a3 & 1;
    v52 = (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) < (v13 & 0xFFFFFFFFFFFFFFFELL);
    v39 = (_DWORD)v50 == (_DWORD)v51;
    v53 = v50 < v51;
    if (!v39)
      v52 = v53;
    if (v52)
      return result;
    v14 = a3[1];
  }
  v20 = *((_DWORD *)a3 + 4);
  v21 = *((_DWORD *)a3 + 5);
  v22 = *((_QWORD *)v5 + 2);
  *(_OWORD *)a3 = *v5;
  a3[2] = v22;
  if (v3 < v4)
    goto LABEL_56;
  v23 = v13 & 1;
  v24 = v14 & 1;
  while (1)
  {
    v25 = v5;
    v26 = 2 * v4;
    v4 = (2 * v4) | 1;
    v5 = (__int128 *)(result + 24 * v4);
    v27 = v26 + 2;
    if (v27 >= a2)
      goto LABEL_32;
    v28 = *((_QWORD *)v5 + 3);
    if (*(_QWORD *)v5 != v28)
    {
      v31 = *(_QWORD *)v5 & 1;
      v32 = *((_QWORD *)v5 + 3) & 1;
      v33 = (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) >= (v28 & 0xFFFFFFFFFFFFFFFELL);
LABEL_25:
      v34 = !v33;
      if ((_DWORD)v31 != (_DWORD)v32)
        v34 = v31 < v32;
      if (v34)
      {
LABEL_31:
        v5 = (__int128 *)((char *)v5 + 24);
        v4 = v27;
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    v29 = *(_QWORD *)(result + 24 * v4 + 8);
    v30 = *((_QWORD *)v5 + 4);
    if (v29 != v30)
    {
      v31 = *(_QWORD *)(result + 24 * v4 + 8) & 1;
      v32 = v5[2] & 1;
      v33 = (v29 & 0xFFFFFFFFFFFFFFFELL) >= (v30 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_25;
    }
    v43 = *(_DWORD *)(result + 24 * v4 + 16);
    v44 = *((_DWORD *)v5 + 10);
    if (v43 == v44)
    {
      if (*(_DWORD *)(result + 24 * v4 + 20) < *((_DWORD *)v5 + 11))
        goto LABEL_31;
    }
    else if (v43 < v44)
    {
      goto LABEL_31;
    }
LABEL_32:
    if (*(_QWORD *)v5 != v13)
      break;
    v35 = *((_QWORD *)v5 + 1);
    if (v35 != v14)
    {
      v36 = *((_QWORD *)v5 + 1) & 1;
      v37 = (v35 & 0xFFFFFFFFFFFFFFFELL) < (v14 & 0xFFFFFFFFFFFFFFFELL);
      v38 = v36 >= v24;
      v39 = (_DWORD)v36 == v24;
      goto LABEL_35;
    }
    v42 = *((_DWORD *)v5 + 4);
    if (v42 == v20)
    {
      if (*((_DWORD *)v5 + 5) < v21)
        goto LABEL_55;
    }
    else if (v42 < v20)
    {
      goto LABEL_55;
    }
LABEL_41:
    v41 = *v5;
    *((_QWORD *)v25 + 2) = *((_QWORD *)v5 + 2);
    *v25 = v41;
    if (v3 < v4)
      goto LABEL_56;
  }
  v45 = *(_QWORD *)v5 & 1;
  v37 = (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) < (v13 & 0xFFFFFFFFFFFFFFFELL);
  v38 = v45 >= v23;
  v39 = (_DWORD)v45 == v23;
LABEL_35:
  v40 = !v38;
  if (!v39)
    v37 = v40;
  if (!v37)
    goto LABEL_41;
LABEL_55:
  v5 = v25;
LABEL_56:
  *(_QWORD *)v5 = v13;
  *((_QWORD *)v5 + 1) = v14;
  *((_DWORD *)v5 + 4) = v20;
  *((_DWORD *)v5 + 5) = v21;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (_QWORD *)v11;
      v21 = (uint64_t *)v5;
      do
      {
        v22 = *v21++;
        *v20++ = v22;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::NodeFlowProjection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (_QWORD *)v9;
        v19 = (uint64_t *)v7;
        do
        {
          v20 = *v19++;
          *v18++ = v20;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (v9 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int16 *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 18) <= 2u)
  {
    v11 = **(_QWORD **)((v10 & 0xFFFFFFFFFFFFFFFELL) + 72);
    if (v11 >= 0xFFFE000000000000)
    {
      v12 = *(unsigned int *)(*a1 + 12);
      if ((_DWORD)v12)
      {
        v13 = (_DWORD *)(*(_QWORD *)*a1 + 20);
        v14 = 24 * v12;
        while (1)
        {
          if (*(_QWORD *)(v13 - 5) == *(_QWORD *)a2 && *(v13 - 1) == *(_DWORD *)(a2 + 16))
          {
            v15 = *(_QWORD *)(v13 - 3);
            if (v15 == v10 && *v13 == *(_DWORD *)(a2 + 20))
              break;
            v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
            if (*(unsigned __int16 *)(v16 + 18) <= 2u)
            {
              v17 = **(_QWORD **)(v16 + 72);
              if (v17 >= 0xFFFE000000000000 && !__OFADD__((_DWORD)v17, *v13))
              {
                v18 = *(_DWORD *)(a2 + 20);
                if (!__OFADD__((_DWORD)v11, v18) && *v13 + (_DWORD)v17 == v18 + (_DWORD)v11)
                  break;
              }
            }
          }
          v13 += 6;
          v14 -= 24;
          if (!v14)
            goto LABEL_18;
        }
        v19 = *(_OWORD *)(v13 - 5);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(v13 - 1);
        *(_OWORD *)a2 = v19;
      }
    }
  }
LABEL_18:
  v20 = a1[1];
  v21 = *(unsigned int *)(v20 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)v20;
    v23 = 24 * v21;
    while (1)
    {
      if (*(_QWORD *)v22 == *(_QWORD *)a2 && *(_QWORD *)(v22 + 8) == *(_QWORD *)(a2 + 8))
      {
        if ((_QWORD)v29)
          break;
      }
      v22 += 24;
      v23 -= 24;
      if (!v23)
      {
        v20 = a1[1];
        v24 = *(_DWORD *)(v20 + 12);
        goto LABEL_26;
      }
    }
    *(_OWORD *)v22 = v29;
    *(_QWORD *)(v22 + 16) = v30;
  }
  else
  {
    v24 = 0;
LABEL_26:
    if (v24 == *(_DWORD *)(v20 + 8))
    {
      v25 = *(_QWORD *)v20 + 24 * *(unsigned int *)(v20 + 12);
      v26 = *(_OWORD *)v28;
      v27 = *(_QWORD *)(v28 + 16);
    }
    else
    {
      v25 = *(_QWORD *)v20 + 24 * v24;
      v26 = *(_OWORD *)a2;
      v27 = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(v25 + 16) = v27;
    *(_OWORD *)v25 = v26;
    ++*(_DWORD *)(v20 + 12);
  }
}

void JSC::DFG::`anonymous namespace'::Relationship::mergeConstantsImpl<JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1}>(__int128 *a1, __int128 *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int *v40[5];
  int *v41[5];
  int v42;
  int v43;

  v8 = *((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int16 *)(v8 + 18) > 2u)
    return;
  v9 = **(_QWORD **)(v8 + 72);
  if (v9 < 0xFFFE000000000000)
    return;
  v11 = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int16 *)(v11 + 18) > 2u)
    return;
  v12 = **(_QWORD **)(v11 + 72);
  if (v12 < 0xFFFE000000000000)
    return;
  v42 = **(_QWORD **)(v11 + 72);
  v43 = v9;
  v13 = *((_DWORD *)a1 + 5);
  if (__OFADD__((_DWORD)v9, v13))
    return;
  v14 = *((_DWORD *)a2 + 5);
  if (__OFADD__((_DWORD)v12, v14))
    return;
  v16 = v13 + v9;
  v17 = v14 + v12;
  v41[0] = &v43;
  v41[1] = a3;
  v41[2] = (int *)a1;
  v41[3] = &v42;
  v41[4] = (int *)a2;
  v40[0] = &v43;
  v40[1] = a3;
  v40[2] = (int *)a1;
  v40[3] = &v42;
  v40[4] = (int *)a2;
  v18 = *((_DWORD *)a1 + 4);
  switch(v18)
  {
    case 0:
      v19 = *((_DWORD *)a2 + 4);
      if (!v19)
      {
        v20 = v16 - 1;
        v21 = v17 - 1;
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
LABEL_13:
        return;
      }
      if ((v19 - 2) < 2)
        return;
      if (v19 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19842BFF0);
      }
LABEL_23:
      return;
    case 3:
      v23 = *((_DWORD *)a2 + 4);
      if (!v23)
        return;
      if (v23 != 3)
      {
        if (v23 != 1)
        {
          if (v23 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19842BF5CLL);
          }
          return;
        }
        goto LABEL_23;
      }
      v24 = v17 + 1;
      if (v24 >= v16 + 1)
        v25 = v16 + 1;
      else
        v25 = v24;
LABEL_20:
      break;
    case 1:
      switch(*((_DWORD *)a2 + 4))
      {
        case 0:
          v27 = v17 - 1;
          if (v27 <= v16)
            v22 = v16;
          else
            v22 = v27;
          goto LABEL_13;
        case 1:
          if (v16 != v17)
          {
            if (v16 <= v17)
              v28 = v17;
            else
              v28 = v16;
            v29 = v17;
            v30 = v16;
            if (v29 >= v30)
              v31 = v30;
            else
              v31 = v29;
            v25 = v31;
            goto LABEL_20;
          }
          if ((v13 + 1) <= 2)
          {
            v38 = *a1;
            v39 = *((_QWORD *)a1 + 2);
            v14 = *((_DWORD *)a2 + 5);
          }
          if ((v14 + 1) <= 2)
          {
            v36 = *a2;
            v37 = *((_QWORD *)a2 + 2);
            v26 = &v36;
LABEL_31:
          }
          break;
        case 2:
          v32 = v14 + 1;
          if (v17 == v16 || v32 > 2)
            return;
          v34 = *a2;
          v35 = *((_QWORD *)a2 + 2);
          v26 = &v34;
          goto LABEL_31;
        case 3:
          if (v17 + 1 < v16)
            v25 = v17 + 1;
          else
            v25 = v16;
          goto LABEL_20;
        default:
          __break(0xC471u);
          JUMPOUT(0x19842C010);
      }
      break;
    case 2:
      if (*((_DWORD *)a2 + 4) == 1)
        goto LABEL_23;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19842C030);
  }
}

void JSC::DFG::`anonymous namespace'::Relationship::mergeConstantsImpl<JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1}>(JSC::DFG::`anonymous namespace'::Relationship const&,JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1} const&)const::{lambda(long long)#1}::operator()(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  _QWORD v26[2];
  int v27;
  int v28;

  v10 = a1[2];
  v11 = **a1;
  if (v11 >= a2)
  {
    v18 = a2 - v11;
    if (v18 + 1 >= 0)
      v19 = v18 + 1;
    else
      v19 = -1;
    v20 = a1[1];
    v21 = *(_QWORD *)v10;
    v22 = *((_QWORD *)v10 + 1);
    v26[0] = v21;
    v26[1] = v22;
    v27 = 0;
    v28 = v19;
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x19842C19CLL);
    }
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x19842C1BCLL);
    }
    if (v21 == v22)
    {
      __break(0xC471u);
LABEL_23:
      JUMPOUT(0x19842C13CLL);
    }
  }
  v12 = *a1[3];
  if (v12 < a2)
    return;
  v13 = a2 - v12;
  if (v13 + 1 >= 0)
    v14 = v13 + 1;
  else
    v14 = -1;
  v15 = a1[1];
  v16 = *(_QWORD *)v10;
  v17 = *((_QWORD *)a1[4] + 1);
  v23[0] = v16;
  v23[1] = v17;
  v24 = 0;
  v25 = v14;
  if (!v16)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19842C15CLL);
  }
  if (v16 == v17)
  {
    __break(0xC471u);
    JUMPOUT(0x19842C17CLL);
  }
}

void JSC::DFG::`anonymous namespace'::Relationship::mergeConstantsImpl<JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1}>(JSC::DFG::`anonymous namespace'::Relationship const&,JSC::DFG::`anonymous namespace'::IntegerRangeOptimizationPhase::mergeTo(WTF::HashMap<JSC::DFG::NodeFlowProjection,WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<WTF::Vector<JSC::DFG::`anonymous namespace'::Relationship,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &,JSC::DFG::BasicBlock *)::{lambda(JSC::DFG::`anonymous namespace'::Relationship)#1} const&)const::{lambda(long long)#2}::operator()(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  _QWORD v26[2];
  int v27;
  int v28;

  v10 = a1[2];
  v11 = **a1;
  if (v11 <= a2)
  {
    v12 = a2 + ~(_DWORD)v11;
    if (v12 >= 1)
      v13 = 1;
    else
      v13 = v12;
    v14 = a1[1];
    v15 = *(_QWORD *)v10;
    v16 = *((_QWORD *)v10 + 1);
    v26[0] = v15;
    v26[1] = v16;
    v27 = 3;
    v28 = v13;
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x19842C330);
    }
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19842C350);
    }
    if (v15 == v16)
    {
      __break(0xC471u);
LABEL_24:
      JUMPOUT(0x19842C2D0);
    }
  }
  v17 = *a1[3];
  if (v17 > a2)
    return;
  v18 = a2 + ~(_DWORD)v17;
  if (v18 >= 1)
    v19 = 1;
  else
    v19 = v18;
  v20 = a1[1];
  v21 = *(_QWORD *)v10;
  v22 = *((_QWORD *)a1[4] + 1);
  v23[0] = v21;
  v23[1] = v22;
  v24 = 3;
  v25 = v19;
  if (!v21)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19842C2F0);
  }
  if (v21 == v22)
  {
    __break(0xC471u);
    JUMPOUT(0x19842C310);
  }
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::InvalidationPointInjectionPhase>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  double v20;
  char v21;
  __int128 *v22;

  v18[0] = "DFG";
  v18[1] = 4;
  v19 = *(_OWORD *)(a1 + 40);
  v20 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v14 = mach_absolute_time();
    v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v16 != -1)
    {
      *(_QWORD *)&v17 = &v21;
      v22 = &v17;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v15) = dword_1ECF4400C;
    v20 = (double)(v14 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v15 * 1000000000.0);
  }
  v9 = JSC::DFG::InvalidationPointInjectionPhase::run((JSC::DFG::InvalidationPointInjectionPhase *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v11 = (*(_DWORD *)(*(_QWORD *)(v10 + 24) + 16) & 0xFFFFFFFE) == 4) : (v11 = 0),
          !v11 ? (v12 = BYTE2(qword_1ECF4C32A) == 0) : (v12 = 0),
          !v12))
    {
      v17 = *(_OWORD *)(a1 + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v10 + 1088, "Phase ", (uint64_t)&v17, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v18);
  return v9;
}

uint64_t JSC::DFG::InvalidationPointInjectionPhase::run(JSC::DFG::InvalidationPointInjectionPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  JSC::DFG::Graph *v19;
  uint64_t *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unsigned int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *__src;
  unint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;

  v9 = 0x8000000000000000;
  v94 = 0x8000000000000000;
  v10 = *((_QWORD *)this + 4);
  v11 = *(_DWORD *)(v10 + 60);
  if (!v11)
    goto LABEL_69;
  v12 = (uint64_t *)((char *)this + 72);
  do
  {
    --v11;
    v13 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(v13 + 60) <= v11)
    {
      __break(0xC471u);
      JUMPOUT(0x19842CC2CLL);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v11);
    if (v14)
    {
      v15 = *v12;
      if ((*v12 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v15 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      *v12 = 2;
      if (!*(_DWORD *)(v14 + 220))
        goto LABEL_29;
      v16 = 0;
      do
      {
        v17 = *(uint64_t **)(*(_QWORD *)(v14 + 208) + 8 * v16);
        v18 = *v12;
        if ((*v12 & 2) == 0)
        {
          v23 = v17[1];
          if (v18 != v23)
          {
            if ((v18 & 1) != 0)
              LODWORD(v24) = *(_DWORD *)((v18 & 0xFFFFFFFF8) + 8);
            else
              v24 = v18 >> 36;
            if ((v23 & 2) != 0)
            {
              LODWORD(v25) = -1;
            }
            else if ((v23 & 1) != 0)
            {
              LODWORD(v25) = *(_DWORD *)((v23 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v25 = v23 >> 36;
            }
            if ((_DWORD)v24 != (_DWORD)v25)
              goto LABEL_23;
            v81 = (_QWORD *)(v18 & 0xFFFFFFFF8);
            if ((v18 & 1) != 0)
              v81 = (_QWORD *)*v81;
            v82 = (_QWORD *)(v23 & 0xFFFFFFFF8);
            if ((v23 & 1) != 0)
              v82 = (_QWORD *)*v82;
            if (v81 != v82)
            {
LABEL_23:
              JSC::DFG::InvalidationPointInjectionPhase::insertInvalidationCheck(this, v16, (JSC::DFG::Node *)v17, a4, a5, a6, a7, a8);
              v31 = *((_QWORD *)this + 9);
              if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v31 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, a7, a8);
              *v12 = 2;
            }
          }
        }
        v19 = (JSC::DFG::Graph *)*((_QWORD *)this + 4);
        v95 = 16422;
        v96 = 0;
        JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::AbstractHeapOverlaps,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::AbstractHeapOverlaps const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v19, (JSC::DFG::Node *)v17, (uint64_t)&v97, (uint64_t)&v95, (uint64_t)&v97, (uint64_t)&v98, a7, a8);
        v20 = v17 + 1;
        if (v96)
          v21 = v12 == v20;
        else
          v21 = 1;
        if (!v21)
        {
          v32 = *v12;
          if ((*v12 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v32 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v33 = *v20;
          if ((*v20 & 1) != 0)
          {
            v83 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
            if ((v33 & 2) != 0
              || ((v84 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
                ? (v85 = (_DWORD)v84 == -1)
                : (v85 = 1),
                  v85))
            {
              v86 = 2;
            }
            else if (v84 >> 28)
            {
              v91 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v91 = v83;
              *(_DWORD *)(v91 + 8) = v84;
              v86 = 1;
              v83 = v91;
            }
            else
            {
              v86 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
              v83 = v84 << 36;
            }
            v33 = v83 | v86;
          }
          *v12 = v33;
        }
        ++v16;
        v22 = *(unsigned int *)(v14 + 220);
      }
      while (v16 < v22);
      if ((*(_BYTE *)v12 & 2) != 0)
      {
LABEL_29:
        v34 = *((unsigned int *)this + 25);
        if ((_DWORD)v34)
        {
          v35 = *(unsigned int *)(v14 + 216);
          v36 = *(unsigned int *)(v14 + 220);
          v37 = v36 + v34;
          if (v36 + v34 > v35)
          {
            v51 = v35 + (v35 >> 2);
            if (v51 >= 0x10)
              v52 = v51 + 1;
            else
              v52 = 16;
            if (v52 <= v37)
              v53 = v36 + v34;
            else
              v53 = v52;
            __src = *(void **)(v14 + 208);
            if (v53 < 9)
            {
              v54 = (void *)(v14 + 224);
              *(_QWORD *)(v14 + 208) = v14 + 224;
              *(_DWORD *)(v14 + 216) = 8;
            }
            else
            {
              if (v53 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19842CC44);
              }
              v54 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
              *(_DWORD *)(v14 + 216) = v53;
              *(_QWORD *)(v14 + 208) = v54;
            }
            memcpy(v54, __src, 8 * v36);
            if ((void *)(v14 + 224) != __src && __src)
            {
              if (*(void **)(v14 + 208) == __src)
              {
                *(_QWORD *)(v14 + 208) = 0;
                *(_DWORD *)(v14 + 216) = 0;
              }
              WTF::fastFree((unint64_t)__src, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          *(_DWORD *)(v14 + 220) = v37;
          if (v34 - 1 >= (unint64_t)*((unsigned int *)this + 25))
          {
            __break(0xC471u);
            JUMPOUT(0x19842CC3CLL);
          }
          v38 = (v36 + v34);
          v39 = ~v34;
          v40 = v38;
          do
          {
            --v34;
            v41 = *(_QWORD *)(*((_QWORD *)this + 11) + 16 * v34) + v34;
            v42 = v40 - 1;
            if (v40 - 1 > v41)
            {
              v43 = v40 + v39;
              do
              {
                if (v38 <= v43)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19842CC1CLL);
                }
                if (v38 <= v42)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19842CC24);
                }
                *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v42--) = *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v43--);
              }
              while (v42 > v41);
            }
            if (v38 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x19842CC34);
            }
            *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v41) = *(_QWORD *)(*((_QWORD *)this + 11) + 16 * v34 + 8);
            ++v39;
            v40 = v41;
          }
          while (v34);
          *((_DWORD *)this + 25) = 0;
        }
        continue;
      }
      v65 = v22 - 1;
      do
      {
        if (v65 >= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x19842CC4CLL);
        }
        v66 = *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v65--);
      }
      while (*(unsigned __int16 *)(v66 + 18) - 364 > 0xB);
      v67 = 1;
      switch(*(_WORD *)(v66 + 18))
      {
        case 0x16C:
          goto LABEL_92;
        case 0x16D:
          v67 = 2;
          goto LABEL_92;
        case 0x16E:
          v67 = *(_DWORD *)(*(_QWORD *)(v66 + 72) + 12) + 1;
          goto LABEL_156;
        case 0x16F:
          v67 = *(_DWORD *)(*(_QWORD *)(v66 + 72) + 12);
LABEL_156:
          if (!v67)
            goto LABEL_29;
LABEL_92:
          v68 = v67;
          break;
        default:
          goto LABEL_29;
      }
      while (1)
      {
        v69 = v68--;
        v70 = *(unsigned int *)(v14 + 220);
        v71 = v70 - 1;
        do
        {
          if (v71 >= v70)
          {
            __break(0xC471u);
            JUMPOUT(0x19842CC54);
          }
          v72 = *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v71);
          v73 = *(unsigned __int16 *)(v72 + 18);
          --v71;
        }
        while ((v73 - 364) > 0xB);
        if (v73 == 366)
        {
          v75 = *(_QWORD *)(v72 + 72);
          v80 = *(_DWORD *)(v75 + 12);
          if (v80 <= v68)
          {
            if (v80 != v68)
            {
              __break(0xC471u);
              JUMPOUT(0x19842CB88);
            }
          }
          else
          {
            v75 = *(_QWORD *)v75 + 32 * v68;
          }
        }
        else
        {
          if (v73 == 367)
          {
            v92 = *(_QWORD *)(v72 + 72);
            if (*(_DWORD *)(v92 + 12) <= v68)
            {
              __break(0xC471u);
              JUMPOUT(0x19842CC7CLL);
            }
            v74 = *(_QWORD *)v92 + 8 * v68;
            goto LABEL_104;
          }
          if (v69 == 1)
          {
            v74 = v72 + 72;
            if (v73 != 364)
              v74 = *(_QWORD *)v74;
            goto LABEL_104;
          }
          if (v69 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19842CC74);
          }
          v75 = *(_QWORD *)(v72 + 72);
        }
        v74 = v75 + 16;
LABEL_104:
        v76 = v94;
        if ((v94 & 0x8000000000000000) != 0)
          v77 = 63;
        else
          v77 = *(_QWORD *)(2 * v94);
        v78 = *(unsigned int *)(*(_QWORD *)v74 + 8);
        if (v77 <= v78)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v94, v78 + 1, 0);
          v76 = v94;
        }
        v79 = (unint64_t *)(2 * v76 + 8);
        if (v76 < 0)
          v79 = &v94;
        *(unint64_t *)((char *)v79 + ((v78 >> 3) & 0x1FFFFFF8)) |= 1 << v78;
        if (!v68)
          goto LABEL_29;
      }
    }
  }
  while (v11);
  v10 = *((_QWORD *)this + 4);
  v9 = v94;
  if ((v94 & 0x8000000000000000) != 0)
  {
LABEL_69:
    v55 = __clz(__rbit64(v9));
    v45 = 63;
    if (v55 >= 0x3F)
      v49 = 63;
    else
      v49 = v55;
    goto LABEL_50;
  }
  v44 = 2 * v94;
  v45 = *(_QWORD *)(2 * v94);
  if ((unint64_t)(v45 + 63) < 0x40)
  {
LABEL_68:
    WTF::fastFree(v44, a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  v46 = *(_QWORD *)(2 * v94 + 8);
  if (v46 && (v47 = __clz(__rbit64(v46)), v47 < 0x40))
  {
    v48 = 0;
  }
  else
  {
    if ((unint64_t)(v45 + 63) >> 6 == 1)
      goto LABEL_68;
    v56 = 0;
    while (1)
    {
      v57 = *(_QWORD *)(2 * v94 + 0x10 + 8 * v56);
      if (v57)
      {
        v47 = __clz(__rbit64(v57));
        if (v47 <= 0x3F)
          break;
      }
      if (((unint64_t)(v45 + 63) >> 6) - 1 == ++v56)
        goto LABEL_51;
    }
    v48 = v56 + 1;
  }
  v49 = v47 + (v48 << 6);
LABEL_50:
  if (v49 == v45)
    goto LABEL_51;
  if ((v9 & 0x8000000000000000) == 0)
  {
    v58 = (uint64_t *)(2 * v9);
    while (1)
    {
      if (*(_DWORD *)(v10 + 60) <= v49)
        goto LABEL_175;
      v59 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v49);
      if (!*(_DWORD *)(v59 + 220))
        goto LABEL_176;
      JSC::DFG::InvalidationPointInjectionPhase::insertInvalidationCheck(this, 0, **(JSC::DFG::Node ***)(v59 + 208), a4, a5, a6, a7, a8);
      JSC::DFG::InsertionSet::execute((JSC::DFG::InvalidationPointInjectionPhase *)((char *)this + 80), (JSC::DFG::BasicBlock *)v59);
      v60 = v49 + 1;
      v49 = *v58;
      v61 = *v58 + 63;
      v62 = v60 >> 6;
      if (v60 >> 6 < v61 >> 6)
      {
        v63 = *(_QWORD *)(2 * v9 + 8 + 8 * v62);
        if (!v63 || (v64 = __clz(__rbit64(v63 >> v60)) + (v60 & 0x3F), v64 >= 0x40))
        {
          if (v62 + 1 == v61 >> 6)
            goto LABEL_85;
          v87 = (v61 >> 6) - 1;
          while (1)
          {
            v88 = *(_QWORD *)(2 * v9 + 0x10 + 8 * v62);
            if (v88)
            {
              v64 = __clz(__rbit64(v88));
              if (v64 <= 0x3F)
                break;
            }
            if (v87 == ++v62)
              goto LABEL_85;
          }
          ++v62;
        }
        v49 = v64 + (v62 << 6);
      }
LABEL_85:
      if (v49 == v45)
        goto LABEL_51;
    }
  }
  do
  {
    if (*(_DWORD *)(v10 + 60) <= v49)
    {
LABEL_175:
      __break(0xC471u);
      JUMPOUT(0x19842CC84);
    }
    v89 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v49);
    if (!*(_DWORD *)(v89 + 220))
    {
LABEL_176:
      __break(0xC471u);
      JUMPOUT(0x19842CC8CLL);
    }
    JSC::DFG::InvalidationPointInjectionPhase::insertInvalidationCheck(this, 0, **(JSC::DFG::Node ***)(v89 + 208), a4, a5, a6, a7, a8);
    JSC::DFG::InsertionSet::execute((JSC::DFG::InvalidationPointInjectionPhase *)((char *)this + 80), (JSC::DFG::BasicBlock *)v89);
    v90 = __clz(__rbit64(v9 >> (v49 + 1)));
    if (v90 + v49 + 1 >= 0x3F)
      v49 = 63;
    else
      v49 += v90 + 1;
  }
  while (v49 != v45);
LABEL_51:
  if ((v9 & 0x8000000000000000) == 0)
  {
    v44 = 2 * v9;
    goto LABEL_68;
  }
  return 1;
}

void JSC::DFG::InvalidationPointInjectionPhase::insertInvalidationCheck(JSC::DFG::InvalidationPointInjectionPhase *this, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  JSC::DFG::Node *v32;
  JSC::DFG::Node *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  v8 = (char *)this + 80;
  a2 = a2;
  v9 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v18 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v19 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v34 = a2;
      v36 = v8;
      v32 = a3;
      v26 = v18;
      v27 = v19;
      v28 = WTF::fastMalloc((WTF *)0x10);
      a3 = v32;
      a2 = v34;
      v18 = v28;
      v8 = v36;
      *(_QWORD *)v18 = v26;
      *(_DWORD *)(v18 + 8) = v27;
      v21 = 1;
    }
    else
    {
      v21 = v18;
      v18 = v19 << 36;
    }
    v9 = v18 | v21;
  }
  v38 = v9;
  v10 = *((_QWORD *)a3 + 1);
  if ((v10 & 1) != 0)
  {
    v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v23 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v35 = a2;
      v37 = v8;
      v33 = a3;
      v29 = v22;
      v30 = v23;
      v31 = WTF::fastMalloc((WTF *)0x10);
      a3 = v33;
      a2 = v35;
      v22 = v31;
      v8 = v37;
      *(_QWORD *)v22 = v29;
      *(_DWORD *)(v22 + 8) = v30;
      v25 = 1;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v10 = v22 | v25;
  }
  v39 = v10;
  v40 = *((_WORD *)a3 + 8);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v8, a2, 0, 40, (uint64_t)&v38, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::dataLog<WTF::RawPointer,char [30],WTF::RawPointer,char [2]>(const void **a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%p", *a1);
  WTF::PrintStream::printf(v6, "%s", ": Setting OSR entry block to ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [24],WTF::CodePtr<(WTF::PtrTag)357,(WTF::FunctionAttributes)0>,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const void *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "OSR entries will go to ");
  if (*a1)
    v5 = *a1;
  else
    v5 = 0;
  WTF::CodePtrBase::dumpWithName(*a1, v5, "CodePtr", 8, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t *WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::inlineSet<JSC::BytecodeIndex const&,JSC::DFG::JITCode::TriggerReason>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 8 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 8 * v25;
        *(_BYTE *)(a4 + 16) = 0;
        *((_BYTE *)v15 + 4) = *a3;
        return result;
      }
      if (v16 == -2)
        v23 = v15;
      v14 = (v14 + v24) & v10;
      v15 = (uint64_t *)(v8 + 8 * v14);
      v16 = *(_DWORD *)v15;
      ++v24;
    }
    while (*(_DWORD *)v15 != -1);
    if (v23)
    {
      *(_DWORD *)v23 = -1;
      *((_BYTE *)v23 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v23;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_BYTE *)v15 + 4) = *a3;
  v17 = *v6;
  if (*v6)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_22:
    result = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::expand(v6, v15);
    v15 = result;
    v19 = *v6;
    if (*v6)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_22;
LABEL_11:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v19 + 8 * v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,JSC::DFG::JITCode::TriggerReason,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<JSC::DFG::JITCode::TriggerReason>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_BYTE *)(v9 + 20);
    do
    {
      *((_DWORD *)v18 - 1) = -1;
      *v18 = 0;
      v18 += 8;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (_DWORD *)(v6 + 8 * v21);
      if (*v22 <= 0xFFFFFFFD)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((*v22 + ~(*v22 << 15)) ^ ((*v22 + ~(*v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 8 * v28) != -1);
        v29 = (_QWORD *)(v23 + 8 * v28);
        *v29 = *(_QWORD *)v22;
        if (v22 == a3)
          v19 = v29;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_19;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

unint64_t WTF::Vector<WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<unsigned int,0ul,WTF::UnsafeVectorOverflow,4ul,WTF::FastMalloc>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_QWORD *WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::FixedVector(_QWORD *a1, uint64_t a2)
{
  int v4;
  size_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if (a2)
  {
    v4 = a2;
    v5 = 8 * a2;
    v6 = (_DWORD *)WTF::fastMalloc((WTF *)(v5 + 8));
    *v6 = v4;
    bzero(v6 + 2, v5);
    v14 = 0;
    *a1 = v6;
    WTF::FixedVector<std::unique_ptr<WTF::BoyerMooreHorspoolTable<unsigned char>>>::~FixedVector(&v14, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(_QWORD *a1, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a1[3] - 4);
  v4 = (v2 - v3);
  v5 = a1[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a1[1] >= v6)
    return v6;
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::InlineCacheWrapper<JSC::JITDelByIdGenerator>::finalize(uint64_t a1, JSC::LinkBuffer *a2, JSC::LinkBuffer *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;

  v6 = *(_DWORD **)(a1 + 56);
  v7 = v6[4];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 16))(&v11);
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = v11;
  if (!*(_QWORD *)a1)
    return JSC::JITDelByIdGenerator::finalize((JSC::JITDelByIdGenerator *)a1, a2, a3);
  v10 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(*(_QWORD *)a1 + 16) = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, &v10);
  v9 = *(_DWORD *)(a1 + 28);
  result = JSC::LinkBuffer::locationOf<(WTF::PtrTag)49594>(a2, &v9);
  *(_QWORD *)(*(_QWORD *)a1 + 24) = result;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::OSREntryReshuffling,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (uint64_t *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + ((unint64_t)*(unsigned int *)(result + 12) << 6) > a3)
  {
    WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 26))
  {
    v10 = v5 + ((unint64_t)*(unsigned int *)(result + 12) << 6);
    v11 = WTF::fastMalloc((WTF *)(v9 << 6));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,JSC::DFG::OSREntryData>::move(v5, v10, v11, v12, v13, v14, v15, v16);
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v17, v18, v19, v20, v21, v22, v23);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::OSREntryData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x19842D8ACLL);
    }
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
    v9 = WTF::fastMalloc((WTF *)(v5 << 6));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v9;
    WTF::VectorMover<false,JSC::DFG::OSREntryData>::move(v7, v8, v9, v10, v11, v12, v13, v14);
    if (v7)
    {
      if (*(_QWORD *)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v7, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void WTF::VectorMover<false,JSC::DFG::OSREntryData>::move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  JSC::DFG::OSREntryData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::BitVector *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::OSREntryData *v21;
  JSC::DFG::OSREntryData *v22;

  if (a1 != a2)
  {
    v11 = 0;
    do
    {
      v12 = (JSC::DFG::OSREntryData *)(a1 + v11);
      v13 = a3 + v11;
      *(_OWORD *)v13 = *(_OWORD *)(a1 + v11);
      v14 = *(_QWORD *)(a1 + v11 + 16);
      *(_QWORD *)(a1 + v11 + 16) = 0;
      *(_QWORD *)(v13 + 16) = v14;
      v15 = *(_QWORD *)(a1 + v11 + 24);
      *(_QWORD *)(v13 + 32) = 0x8000000000000000;
      *(_QWORD *)(a3 + v11 + 24) = v15;
      v16 = *(_QWORD *)(a1 + v11 + 32);
      if (v16 < 0)
      {
        *(_QWORD *)(a3 + v11 + 32) = v16;
      }
      else
      {
        WTF::BitVector::setSlow((WTF::BitVector *)(a3 + v11 + 32), (const WTF::BitVector *)(a1 + v11 + 32), a3, a4, a5, a6, a7, a8);
        v12 = (JSC::DFG::OSREntryData *)(a1 + v11);
      }
      *(_QWORD *)(a3 + v11 + 40) = 0x8000000000000000;
      v17 = *(_QWORD *)(a1 + v11 + 40);
      if (v17 < 0)
      {
        *(_QWORD *)(a3 + v11 + 40) = v17;
      }
      else
      {
        v21 = v12;
        WTF::BitVector::setSlow((WTF::BitVector *)(a3 + v11 + 40), (const WTF::BitVector *)(a1 + v11 + 40), a3, a4, a5, a6, a7, a8);
        v12 = v21;
      }
      *(_QWORD *)(a3 + v11 + 56) = 0x8000000000000000;
      v18 = (const WTF::BitVector *)(a1 + v11 + 56);
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(a1 + v11 + 48);
      *(_QWORD *)(a1 + v11 + 48) = 0;
      *(_QWORD *)(a3 + v11 + 48) = v20;
      if (v19 < 0)
      {
        *(_QWORD *)(a3 + v11 + 56) = v19;
      }
      else
      {
        v22 = v12;
        WTF::BitVector::setSlow((WTF::BitVector *)(a3 + v11 + 56), v18, a3, a4, a5, a6, a7, a8);
        v12 = v22;
      }
      JSC::DFG::OSREntryData::~OSREntryData(v12, v18, a3, a4, a5, a6, a7, a8);
      v11 += 64;
    }
    while (a1 + v11 != a2);
  }
}

uint64_t WTF::Vector<JSC::DFG::JITCompiler::ExceptionHandlingOSRExitInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 40 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::JITCompiler::ExceptionHandlingOSRExitInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x6666667)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 40 * v8;
    v11 = WTF::fastMalloc((WTF *)(40 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v19 = 40 * v9;
      v20 = v5;
      do
      {
        v21 = *(_OWORD *)v20;
        v22 = *(_OWORD *)(v20 + 16);
        *(_QWORD *)(v11 + 32) = *(_QWORD *)(v20 + 32);
        *(_OWORD *)v11 = v21;
        *(_OWORD *)(v11 + 16) = v22;
        v11 += 40;
        v20 += 40;
        v19 -= 40;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::JITCompiler::ExceptionHandlingOSRExitInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 40 * v4;
      v9 = WTF::fastMalloc((WTF *)(40 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = 40 * v7;
        v18 = v6;
        do
        {
          v19 = *(_OWORD *)v18;
          v20 = *(_OWORD *)(v18 + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v18 + 32);
          *(_OWORD *)v9 = v19;
          *(_OWORD *)(v9 + 16) = v20;
          v9 += 40;
          v18 += 40;
          v17 -= 40;
        }
        while (v17);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

char *WTF::Vector<WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 > a3 || (v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[8 * v6] <= a3))
  {
    v20 = *((unsigned int *)a1 + 2);
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= a2)
      v23 = a2;
    else
      v23 = v22;
    if (v23 > v20)
    {
      if (v23 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19842DD14);
      }
      v24 = *((unsigned int *)a1 + 3);
      v25 = (char *)WTF::fastMalloc((WTF *)(8 * v23));
      *((_DWORD *)a1 + 2) = v23;
      *a1 = v25;
      memcpy(v25, v5, 8 * v24);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  else
  {
    v7 = *((unsigned int *)a1 + 2);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v19 = *a1;
    }
    else
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19842DD28);
      }
      v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, 8 * v6);
      v19 = *a1;
      if (v5)
      {
        if (v19 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
        v19 = *a1;
      }
    }
    return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (char *)v3;
}

uint64_t JSC::DFG::performLICM(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::DFG::AtTailAbstractState *v9;
  JSC::DFG::PhiChildren *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  JSC::DFG::Graph *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::DFG::Graph *v39;
  unint64_t v40;
  uint64_t v41;
  JSC::DFG::Graph *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  WTF *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t *v98;
  char v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  JSC::DFG::Node *v119;
  uint64_t v120;
  char v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  JSC::DFG::Graph *v152;
  JSC::DFG::Node *v153;
  unsigned int v154;
  int v155;
  unint64_t v156;
  JSC::DFG::Node *v157;
  unint64_t v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::DFG::Graph *v167;
  _QWORD **v168;
  _QWORD *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  unint64_t v185;
  _QWORD *v186;
  char v187;
  uint64_t v188;
  WTF *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF *v197;
  WTF *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF *v211;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  WTF *v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  WTF *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  WTF *v262;
  BOOL v263;
  BOOL v264;
  unsigned int v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  BOOL v275;
  BOOL v276;
  uint64_t v277;
  uint64_t v278;
  BOOL v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  BOOL v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  BOOL v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  BOOL v291;
  uint64_t v292;
  JSC::DFG::Graph *v293;
  JSC::DFG::Node *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  BOOL v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned __int16 *v346;
  int v347;
  unint64_t v348;
  unint64_t i;
  unsigned int v350;
  uint64_t v351;
  WTF *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  WTF *v366;
  unint64_t v367;
  WTF *v368;
  JSC::DFG::Graph *v369;
  int v370;
  int v371;
  int v372;
  JSC::DFG::Node *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  JSC::DFG::AtTailAbstractState *v380;
  char *v381;
  uint64_t *v382;
  WTF *v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  __int16 v388;
  JSC::DFG::Graph *v389;
  __int128 v390;
  char v391;
  WTF *v392;
  _QWORD v393[11];
  WTF *v394;
  WTF *v395;
  uint64_t v396;
  _QWORD v397[2];
  __int128 v398;
  double v399;
  WTF *v400;
  int v401;
  unsigned int v402;
  WTF *v403;
  uint64_t v404;
  __int128 v405;
  uint64_t v406;
  WTF *v407[2];
  uint64_t *v408;
  JSC::DFG::Node **v409;
  char *v410;
  uint64_t *v411;
  _QWORD *v412;
  _QWORD *v413;
  uint64_t *v414;
  _QWORD v415[4];
  _QWORD v416[4];
  WTF **v417;
  uint64_t v418;
  _BYTE v419[16];
  uint64_t v420;
  uint64_t v421;
  __int16 v422;
  BOOL v423;
  char v424;
  uint64_t v425;
  uint64_t v426;
  __int16 v427;
  JSC::DFG::Node *v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  __int128 *v433;
  unsigned __int16 v434[6];

  v385 = -1;
  v386 = -1;
  v387 = 0;
  v388 = 256;
  v389 = this;
  *(_QWORD *)&v390 = "LICM";
  *((_QWORD *)&v390 + 1) = 5;
  v391 = 0;
  v392 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v385);
  v9 = JSC::DFG::AtTailAbstractState::AtTailAbstractState((JSC::DFG::AtTailAbstractState *)v393, this, v3, v4, v5, v6, v7, v8);
  v393[7] = *((_QWORD *)this + 4);
  v393[8] = this;
  v393[9] = *((_QWORD *)this + 2);
  v393[10] = v9;
  v380 = v9;
  v394 = 0;
  if (*((_DWORD *)this + 236) == 2)
  {
    v10 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v17 = JSC::DFG::PhiChildren::PhiChildren(v10, this, v11, v12, v13, v14, v15, v16);
    v25 = v394;
    v394 = v17;
    if (v25)
    {
      v26 = *(_QWORD *)v25;
      if (*(_QWORD *)v25)
      {
        v27 = *(unsigned int *)(v26 - 4);
        if ((_DWORD)v27)
        {
          v28 = v26 + 24;
          do
          {
            if (*(_QWORD *)(v28 - 24) != -1)
            {
              v29 = *(_QWORD *)(v28 - 16);
              if (v28 != v29 && v29 != 0)
              {
                *(_QWORD *)(v28 - 16) = 0;
                *(_DWORD *)(v28 - 8) = 0;
                WTF::fastFree(v29, v18, v19, v20, v21, v22, v23, v24);
              }
            }
            v28 += 48;
            --v27;
          }
          while (v27);
        }
        WTF::fastFree(v26 - 16, v18, v19, v20, v21, v22, v23, v24);
      }
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v395 = 0;
  v396 = 0;
  v397[0] = "DFG";
  v397[1] = 4;
  v398 = v390;
  v399 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v323 = mach_absolute_time();
    v325 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v325 != -1)
    {
      v407[0] = (WTF *)v416;
      v417 = v407;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v417, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v324) = dword_1ECF4400C;
    v399 = (double)(v323 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v324 * 1000000000.0);
  }
  v31 = v389;
  *((_DWORD *)v389 + 238) = 2;
  if (*((_DWORD *)v31 + 236) != 2)
  {
    JSC::DFG::Graph::logAssertionFailure(v31, 0, (const WTF::CString *)"./dfg/DFGLICMPhase.cpp", (const char *)0x45, "BOOL JSC::DFG::LICMPhase::run()", "m_graph.m_form == SSA");
    __break(0xC471u);
    JUMPOUT(0x19842F664);
  }
  JSC::DFG::Graph::ensureSSADominators(v31);
  JSC::DFG::Graph::ensureSSANaturalLoops(v389);
  v39 = v389;
  if (*((_DWORD *)v389 + 236) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19842F4D8);
  }
  if (!*((_QWORD *)v389 + 105))
  {
    std::make_unique[abi:sn180100]<JSC::DFG::ControlEquivalenceAnalysis,JSC::DFG::Graph &>((uint64_t)v389, v407);
    v366 = v407[0];
    v407[0] = 0;
    v367 = *((_QWORD *)v39 + 105);
    *((_QWORD *)v39 + 105) = v366;
    if (v367)
    {
      WTF::fastFree(v367, v32, v33, v34, v35, v36, v37, v38);
      v368 = v407[0];
      v407[0] = 0;
      if (v368)
        WTF::fastFree((unint64_t)v368, v32, v33, v34, v35, v36, v37, v38);
    }
    v39 = v389;
  }
  v40 = *(unsigned int *)(*((_QWORD *)v39 + 100) + 20);
  v41 = HIDWORD(v396);
  if (HIDWORD(v396) < v40)
  {
    v258 = v395;
    if (v396 < v40)
    {
      v259 = v396 + ((unint64_t)v396 >> 2);
      if (v259 >= 0x10)
        v260 = v259 + 1;
      else
        v260 = 16;
      if (v260 <= v40)
        v261 = v40;
      else
        v261 = v260;
      if (v261 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FB4CLL);
      }
      v262 = (WTF *)WTF::fastMalloc((WTF *)(16 * v261));
      LODWORD(v396) = v261;
      v395 = v262;
      if ((_DWORD)v41)
      {
        v351 = 16 * v41;
        v352 = v258;
        do
        {
          WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::HashTable((uint64_t *)v262, (uint64_t **)v352, v33, v34, v35, v36, v37, v38);
          *((_QWORD *)v262 + 1) = *((_QWORD *)v352 + 1);
          if (*(_QWORD *)v352)
            WTF::fastFree(*(_QWORD *)v352 - 16, v32, v33, v34, v35, v36, v37, v38);
          v262 = (WTF *)((char *)v262 + 16);
          v352 = (WTF *)((char *)v352 + 16);
          v351 -= 16;
        }
        while (v351);
        v262 = v395;
      }
      if (v258)
      {
        if (v262 == v258)
        {
          v395 = 0;
          LODWORD(v396) = 0;
        }
        WTF::fastFree((unint64_t)v258, v32, v33, v34, v35, v36, v37, v38);
        v258 = v395;
      }
      else
      {
        v258 = v262;
      }
    }
    if (v258 && HIDWORD(v396) != (_DWORD)v40)
      bzero((char *)v258 + 16 * HIDWORD(v396), 16 * (v40 - HIDWORD(v396)));
  }
  else if (HIDWORD(v396) != (_DWORD)v40)
  {
    v255 = (_QWORD *)((char *)v395 + 16 * v40);
    v256 = 16 * HIDWORD(v396) - 16 * v40;
    do
    {
      if (*v255)
        WTF::fastFree(*v255 - 16, v32, v33, v34, v35, v36, v37, v38);
      v255 += 2;
      v256 -= 16;
    }
    while (v256);
  }
  HIDWORD(v396) = v40;
  v42 = v389;
  v43 = *((_DWORD *)v389 + 15);
  if (v43)
  {
    do
    {
      if (*((_DWORD *)v389 + 15) <= --v43)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FA90);
      }
      v44 = *(_QWORD *)(*((_QWORD *)v389 + 6) + 8 * v43);
      if (v44 && *(_BYTE *)(v44 + 15))
      {
        v45 = *((_QWORD *)v389 + 100);
        v46 = *(unsigned int *)(v44 + 8);
        if (*(_DWORD *)(v45 + 324) <= v46)
        {
          __break(0xC471u);
          JUMPOUT(0x19842FAA0);
        }
        v47 = *(_DWORD *)(*(_QWORD *)(v45 + 312) + 8 * v46);
        if (v47 != -1)
        {
          if (*(_DWORD *)(v45 + 20) <= v47)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FAA8);
          }
          v48 = *(_QWORD *)(v45 + 8);
          if (v48)
          {
            v49 = *(unsigned int *)(v48 + 72 * v47 + 68);
            if (HIDWORD(v396) <= v49)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FAB8);
            }
            v50 = *(unsigned int *)(v44 + 220);
            if ((_DWORD)v50)
            {
              v51 = (WTF *)((char *)v395 + 16 * v49);
              v52 = *(_QWORD *)(v44 + 208);
              v53 = 8 * v50;
              do
              {
                v32 = *(void **)v52;
                if (*(_WORD *)(*(_QWORD *)v52 + 18) == 379)
                  break;
                v407[0] = v51;
                JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::ClobberSetAdd,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::ClobberSetAdd const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v389, (JSC::DFG::Node *)v32, (uint64_t)v416, (uint64_t **)v407, (uint64_t)v416, (uint64_t)&v417, v37, v38);
                v52 += 8;
                v53 -= 8;
              }
              while (v53);
            }
          }
        }
      }
    }
    while (v43);
    v42 = v389;
  }
  v54 = *(_DWORD *)(*((_QWORD *)v42 + 100) + 20);
  if (v54)
  {
    while (1)
    {
      --v54;
      v213 = *((_QWORD *)v42 + 100);
      v214 = *(_DWORD *)(v213 + 20);
      if (v214 <= v54)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FB14);
      }
      v215 = *(_QWORD *)(v213 + 8);
      v216 = *(unsigned int *)(v215 + 72 * v54 + 68);
      if (HIDWORD(v396) <= v216)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FB1CLL);
      }
      v217 = v395;
      v218 = *(_DWORD *)(v215 + 72 * v54 + 64);
      if (v218 != -1)
        break;
LABEL_235:
      v219 = *(_QWORD *)(v215 + 72 * v54 + 8);
      v220 = *(_DWORD *)(v219 + 52);
      if (v220 < 2)
      {
        if (*(_DWORD *)(v219 + 220))
        {
          JSC::DFG::Graph::logAssertionFailure(v42, **(JSC::DFG::Node ***)(v219 + 208), (const WTF::CString *)"./dfg/DFGLICMPhase.cpp", (const char *)0x82, "BOOL JSC::DFG::LICMPhase::run()", "header->predecessors.size() > 1");
          WTFCrashWithInfoImpl(130, "./dfg/DFGLICMPhase.cpp", "BOOL JSC::DFG::LICMPhase::run()");
        }
        __break(0xC471u);
        JUMPOUT(0x19842FB5CLL);
      }
      v221 = 0;
      v222 = 0;
      v224 = *((_QWORD *)v42 + 98);
      v225 = v220 - 1;
      do
      {
        v223 = *(_QWORD *)(v219 + 40);
        v226 = *(_QWORD *)(v223 + 8 * v225);
        if (v219 != v226)
        {
          v227 = *(unsigned int *)(v226 + 8);
          v228 = *(_DWORD *)(v224 + 20);
          if (v228 <= v227)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FAC8);
          }
          v229 = *(unsigned int *)(v219 + 8);
          if (v228 <= v229)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FAD0);
          }
          v230 = *(_QWORD *)(v224 + 8);
          v231 = v230 + 32 * v227;
          v232 = v230 + 32 * v229;
          if (*(_DWORD *)(v231 + 24) <= *(_DWORD *)(v232 + 24) || *(_DWORD *)(v231 + 28) >= *(_DWORD *)(v232 + 28))
          {
            ++v221;
            v222 = *(_QWORD *)(v223 + 8 * v225);
          }
        }
      }
      while ((unint64_t)v225--);
      if (v221 == 1)
      {
        v234 = *(unsigned int *)(v222 + 220);
        v235 = v234 - 1;
        v236 = v234 - 1;
        do
        {
          if (v236 >= v234)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FB3CLL);
          }
          v237 = *(_QWORD *)(v222 + 208);
          v238 = *(unsigned __int16 *)(*(_QWORD *)(v237 + 8 * v236--) + 18);
        }
        while ((v238 - 364) > 0xB);
        if (v238 != 364)
        {
          v344 = 8 * v234;
          v345 = v237 - 8;
          do
          {
            v346 = *(unsigned __int16 **)(v345 + v344);
            v347 = v346[9];
            if ((v347 - 364) < 0xC)
              goto LABEL_512;
            if ((v347 - 28) >= 2 && (v347 - 23) > 2)
              break;
            v344 -= 8;
          }
          while (v344);
          v346 = 0;
LABEL_512:
          JSC::DFG::Graph::logAssertionFailure(v42, (JSC::DFG::Node *)v346, (const WTF::CString *)"./dfg/DFGLICMPhase.cpp", (const char *)0x9F, "BOOL JSC::DFG::LICMPhase::run()", "preHeader->terminal()->op() == Jump");
          v348 = *(unsigned int *)(v222 + 220);
          for (i = v348 - 1; i < v348; --i)
          {
            v350 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v222 + 208) + 8 * i) + 18) - 364;
            if (v350 <= 0xB)
              WTFCrashWithInfoImpl(159, "./dfg/DFGLICMPhase.cpp", "BOOL JSC::DFG::LICMPhase::run()");
          }
          __break(0xC471u);
          JUMPOUT(0x19842FB64);
        }
        do
        {
          if (v235 >= v234)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FB44);
          }
          v239 = *(_QWORD *)(v237 + 8 * v235--);
        }
        while (*(unsigned __int16 *)(v239 + 18) - 364 > 0xB);
        if (*(_BYTE *)(v239 + 16))
          *((_QWORD *)v217 + 2 * v216 + 1) = v222;
      }
      if (!v54)
        goto LABEL_38;
    }
    if (v214 <= v218)
    {
      __break(0xC471u);
      JUMPOUT(0x19842FB24);
    }
    v240 = (uint64_t *)((char *)v395 + 16 * v216);
    v241 = v215 + 72 * v218;
    v382 = v240;
    while (1)
    {
      v242 = *(unsigned int *)(v241 + 68);
      if (HIDWORD(v396) <= v242)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FB2CLL);
      }
      v243 = (uint64_t *)((char *)v395 + 16 * v242);
      if (v243 != v240)
        break;
LABEL_279:
      v252 = *(_DWORD *)(v241 + 64);
      if (v252 != -1)
      {
        v253 = *((_QWORD *)v42 + 100);
        if (*(_DWORD *)(v253 + 20) <= v252)
        {
          __break(0xC471u);
          JUMPOUT(0x19842FB34);
        }
        v254 = *(_QWORD *)(v253 + 8);
        v241 = v254 + 72 * v252;
        v240 = v382;
        if (v254)
          continue;
      }
      goto LABEL_235;
    }
    v244 = *v240;
    if (*v240)
    {
      v245 = *(unsigned int *)(v244 - 4);
      v246 = v244 + 16 * v245;
      if (*(_DWORD *)(v244 - 12))
      {
        v247 = *v240;
        if ((_DWORD)v245)
        {
          v248 = 16 * v245;
          v247 = *v240;
          while (!*(_QWORD *)v247 || (*(_QWORD *)v247 & 0x7FFFLL) == 0x4000)
          {
            v247 += 16;
            v248 -= 16;
            if (!v248)
            {
              v247 = v246;
              goto LABEL_267;
            }
          }
        }
        goto LABEL_267;
      }
      v247 = v244 + 16 * v245;
    }
    else
    {
      v247 = 0;
      v245 = 0;
    }
    v246 = v244 + 16 * v245;
LABEL_267:
    if (v244)
      v249 = v244 + 16 * *(unsigned int *)(v244 - 4);
    else
      v249 = 0;
    if (v249 != v247)
    {
      v384 = v241;
      do
      {
        v250 = *(_BYTE *)(v247 + 8);
        WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL const&>(v243, (uint64_t *)v247, (_BYTE *)(v247 + 8), v34, v35, v36, v37, v38, (uint64_t)v407);
        *((_BYTE *)v407[0] + 8) |= v250;
        v251 = v247 + 16;
        v247 = v246;
        if (v251 != v246)
        {
          v247 = v251;
          while (!*(_QWORD *)v247 || (*(_QWORD *)v247 & 0x7FFFLL) == 0x4000)
          {
            v247 += 16;
            if (v247 == v246)
            {
              v247 = v246;
              break;
            }
          }
        }
      }
      while (v247 != v249);
      v42 = v389;
      v241 = v384;
    }
    goto LABEL_279;
  }
LABEL_38:
  v55 = *((unsigned int *)v42 + 15);
  if ((_DWORD)v55)
  {
    v56 = *((_QWORD *)v42 + 6);
    do
    {
      v57 = *(_QWORD *)(v56 + 8 * --v55);
      if (v57)
      {
        v58 = *(unsigned int *)(v57 + 36);
        if ((_DWORD)v58)
        {
          v359 = *(_QWORD *)(v57 + 24);
          v360 = v58 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v359 + 8 * v360) + 96) = v57;
          while ((unint64_t)v360--);
        }
        v59 = *(unsigned int *)(v57 + 220);
        if ((_DWORD)v59)
        {
          v60 = *(_QWORD *)(v57 + 208);
          v61 = v59 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v60 + 8 * v61) + 96) = v57;
          while ((unint64_t)v61--);
        }
      }
    }
    while ((_DWORD)v55);
  }
  v403 = 0;
  v404 = 0;
  if (dword_1ECF4C774)
    v63 = dword_1ECF4C774;
  else
    v63 = 1;
  JSC::DFG::Graph::blocksInPreOrder(v42, v32, v33, v34, v35, v36, v37, v38, (uint64_t)&v400);
  v71 = v400;
  if (v402)
  {
    v72 = 0;
    v381 = (char *)v400 + 8 * v402;
    v378 = ((v63 >> 26) | (v63 << 23)) ^ ((v63 ^ (v63 << 23)) >> 17);
    v379 = v63;
    while (1)
    {
      v73 = *(_QWORD *)v71;
      v383 = v71;
      if (!*(_BYTE *)(*(_QWORD *)v71 + 15))
        goto LABEL_56;
      v74 = *((_QWORD *)v389 + 100);
      v75 = *(unsigned int *)(v73 + 8);
      if (*(_DWORD *)(v74 + 324) <= v75)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FA98);
      }
      v76 = *(_DWORD *)(*(_QWORD *)(v74 + 312) + 8 * v75);
      if (v76 == -1)
        goto LABEL_56;
      if (*(_DWORD *)(v74 + 20) <= v76)
      {
        __break(0xC471u);
        JUMPOUT(0x19842FAB0);
      }
      v77 = *(_QWORD *)(v74 + 8);
      if (!v77)
        goto LABEL_56;
      v78 = 0;
      v79 = (WTF *)(v77 + 72 * v76);
      HIDWORD(v404) = 0;
      v407[0] = v79;
      do
      {
        if (v78 == (_DWORD)v404)
        {
          v186 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v403, v78 + 1, (unint64_t)v407);
          v78 = HIDWORD(v404);
          *((_QWORD *)v403 + HIDWORD(v404)) = *v186;
        }
        else
        {
          *((_QWORD *)v403 + v78) = v79;
        }
        HIDWORD(v404) = ++v78;
        v80 = *((_DWORD *)v407[0] + 16);
        if (v80 == -1)
          break;
        v81 = *((_QWORD *)v389 + 100);
        if (*(_DWORD *)(v81 + 20) <= v80)
        {
          __break(0xC471u);
          JUMPOUT(0x19842FAC0);
        }
        v82 = *(_QWORD *)(v81 + 8);
        v79 = (WTF *)(v82 + 72 * v80);
        v407[0] = v79;
      }
      while (v82);
      if (!*(_DWORD *)(v73 + 220))
        goto LABEL_56;
      v83 = 0;
      do
      {
        v84 = *(_QWORD *)(v73 + 208);
        if (*(_WORD *)(*(_QWORD *)(v84 + 8 * v83) + 18) == 379)
          break;
        v85 = HIDWORD(v404);
        while (1)
        {
          if (!byte_1ECF4C770)
          {
            if (v85)
            {
              --v85;
              goto LABEL_71;
            }
            goto LABEL_143;
          }
          if (*(double *)&qword_1ECF4C778 != 0.0)
            break;
          do
          {
            while (1)
            {
              if (!v85)
                goto LABEL_143;
              --v85;
              v274 = *(unsigned __int16 *)(*(_QWORD *)(v84 + 8 * v83) + 18);
              if (v274 <= 0x83)
                break;
              v275 = v274 - 132 > 0x3C || ((1 << (v274 + 124)) & 0x1FAC000000001303) == 0;
              if (!v275 || v274 == 280 || v274 == 381)
                goto LABEL_71;
            }
            v276 = v274 > 0x25 || ((1 << v274) & 0x3803000000) == 0;
          }
          while (v276 && v274 != 107);
LABEL_71:
          if (HIDWORD(v404) <= v85)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FA10);
          }
          v429 = *((_QWORD *)v403 + v85);
          v430 = v73;
          v86 = *(_QWORD *)(v84 + 8 * v83);
          v428 = (JSC::DFG::Node *)v86;
          v87 = *(unsigned int *)(v429 + 68);
          if (HIDWORD(v396) <= v87)
          {
            __break(0xC471u);
            JUMPOUT(0x19842FA18);
          }
          v88 = (char *)v395 + 16 * v87;
          v90 = (uint64_t *)(v88 + 8);
          v89 = *((_QWORD *)v88 + 1);
          if (!v89 || !*(_BYTE *)(v89 + 17))
          {
            v122 = 0;
            goto LABEL_116;
          }
          v393[5] = *((_QWORD *)v88 + 1);
          v91 = *(_QWORD *)v86;
          if ((*(_QWORD *)v86 & 1) != 0)
          {
            v277 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
            if ((v91 & 2) != 0
              || ((v278 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v278 != 0x3FFFFFFF)
                ? (v279 = (_DWORD)v278 == -1)
                : (v279 = 1),
                  v279))
            {
              v280 = 2;
            }
            else if (v278 >> 28)
            {
              v374 = v277;
              v363 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v363 = v374;
              *(_DWORD *)(v363 + 8) = v278;
              v280 = 1;
              v277 = v363;
            }
            else
            {
              v280 = v277;
              v277 = v278 << 36;
            }
            v91 = v277 | v280;
          }
          v425 = v91;
          v92 = *(_QWORD *)(v86 + 8);
          if ((v92 & 1) != 0)
          {
            v281 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
            if ((v92 & 2) != 0
              || ((v282 = *(unsigned int *)((v92 & 0xFFFFFFFF8) + 8), (_DWORD)v282 != 0x3FFFFFFF)
                ? (v283 = (_DWORD)v282 == -1)
                : (v283 = 1),
                  v283))
            {
              v284 = 2;
            }
            else if (v282 >> 28)
            {
              v370 = *(_DWORD *)((v92 & 0xFFFFFFFF8) + 8);
              v375 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
              v281 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v281 = v375;
              *(_DWORD *)(v281 + 8) = v370;
              v284 = 1;
            }
            else
            {
              v284 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
              v281 = v282 << 36;
            }
            v92 = v281 | v284;
          }
          v426 = v92;
          v427 = *(_WORD *)(v86 + 16);
          v424 = 0;
          v93 = *((_QWORD *)v389 + 5);
          v94 = (_QWORD *)(v91 & 0xFFFFFFFF8);
          if ((v91 & 1) != 0)
            v94 = (_QWORD *)*v94;
          if (v94)
            v93 = v94[1];
          v95 = *(_QWORD *)(v93 + 56);
          v96 = (unsigned __int8 *)(v95 + 31);
          if (__ldaxr((unsigned __int8 *)(v95 + 31)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v96))
          {
            goto LABEL_84;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v95 + 31);
LABEL_84:
          v98 = *(uint64_t **)(v95 + 96);
          if (v98 && (v133 = *((_DWORD *)v98 + 3)) != 0)
          {
            v134 = *v98;
            v135 = v133 - 1;
            while (1)
            {
              v136 = v135;
              if (!*(_DWORD *)(v134 + 8 * v135) && *(_BYTE *)(v134 + 8 * v135 + 4) == 21)
                break;
              --v135;
              v99 = 1;
              if (!v136)
                goto LABEL_86;
            }
            v99 = 0;
          }
          else
          {
            v99 = 1;
          }
LABEL_86:
          v100 = __ldxr(v96);
          if (v100 != 1)
          {
            __clrex();
LABEL_90:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v96, 0, v65, v66, v67, v68, v69, v70);
            goto LABEL_91;
          }
          if (__stlxr(0, v96))
            goto LABEL_90;
LABEL_91:
          v424 = v99;
          v101 = *v90;
          if (*v90 == v430)
          {
            v112 = 1;
          }
          else
          {
            v102 = (_QWORD *)*((_QWORD *)v389 + 105);
            v103 = *(unsigned int *)(v430 + 8);
            v104 = *(_DWORD *)(*v102 + 20);
            if (v104 <= v103)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FA20);
            }
            v105 = *(unsigned int *)(v101 + 8);
            if (v104 <= v105)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FA28);
            }
            v106 = *(_QWORD *)(*v102 + 8);
            v107 = v106 + 32 * v103;
            v108 = v106 + 32 * v105;
            if (*(_DWORD *)(v107 + 24) <= *(_DWORD *)(v108 + 24) || *(_DWORD *)(v107 + 28) >= *(_DWORD *)(v108 + 28))
              goto LABEL_99;
            v109 = v102[1];
            v110 = *(_DWORD *)(v109 + 20);
            if (v110 <= v105)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FA30);
            }
            if (v110 <= v103)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FA38);
            }
            v111 = *(_QWORD *)(v109 + 8);
            if (*(_DWORD *)(v111 + 40 * v105 + 32) > *(_DWORD *)(v111 + 40 * v103 + 32))
              v112 = *(_DWORD *)(v111 + 40 * v105 + 36) < *(_DWORD *)(v111
                                                                                    + 40 * v103
                                                                                    + 36);
            else
LABEL_99:
              v112 = 0;
          }
          v113 = !v112;
          v423 = !v112;
          v114 = *(unsigned int *)(v101 + 220);
          v115 = v114 - 1;
          do
          {
            if (v115 >= v114)
            {
              __break(0xC471u);
              JUMPOUT(0x19842FA40);
            }
            v116 = *(_QWORD *)(*(_QWORD *)(v101 + 208) + 8 * v115--);
          }
          while (*(unsigned __int16 *)(v116 + 18) - 364 > 0xB);
          v117 = *(_QWORD *)v116;
          if ((*(_QWORD *)v116 & 1) != 0)
          {
            v285 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
            if ((v117 & 2) != 0
              || ((v286 = *(unsigned int *)((v117 & 0xFFFFFFFF8) + 8), (_DWORD)v286 != 0x3FFFFFFF)
                ? (v287 = (_DWORD)v286 == -1)
                : (v287 = 1),
                  v287))
            {
              v288 = 2;
            }
            else if (v286 >> 28)
            {
              v371 = *(_DWORD *)((v117 & 0xFFFFFFFF8) + 8);
              v376 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
              v285 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v285 = v376;
              *(_DWORD *)(v285 + 8) = v371;
              v288 = 1;
            }
            else
            {
              v288 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
              v285 = v286 << 36;
            }
            v117 = v285 | v288;
          }
          v420 = v117;
          v118 = *(_QWORD *)(v116 + 8);
          if ((v118 & 1) != 0)
          {
            v289 = *(_QWORD *)(v118 & 0xFFFFFFFF8);
            if ((v118 & 2) != 0
              || ((v290 = *(unsigned int *)((v118 & 0xFFFFFFFF8) + 8), (_DWORD)v290 != 0x3FFFFFFF)
                ? (v291 = (_DWORD)v290 == -1)
                : (v291 = 1),
                  v291))
            {
              v292 = 2;
            }
            else if (v290 >> 28)
            {
              v372 = *(_DWORD *)((v118 & 0xFFFFFFFF8) + 8);
              v377 = *(_QWORD *)(v118 & 0xFFFFFFFF8);
              v289 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v289 = v377;
              *(_DWORD *)(v289 + 8) = v372;
              v292 = 1;
            }
            else
            {
              v292 = *(_QWORD *)(v118 & 0xFFFFFFFF8);
              v289 = v290 << 36;
            }
            v118 = v289 | v292;
          }
          v421 = v118;
          v422 = *(_WORD *)(v116 + 16);
          v417 = (WTF **)v419;
          v418 = 2;
          v416[0] = v88;
          v416[1] = &v420;
          v416[2] = &v423;
          v416[3] = &v417;
          v415[0] = &v385;
          v415[1] = &v417;
          v415[2] = &v429;
          v415[3] = v88;
          v407[0] = (WTF *)&v423;
          v407[1] = (WTF *)&v424;
          v408 = &v385;
          v409 = &v428;
          v410 = v88;
          v411 = &v425;
          v412 = v416;
          v413 = v415;
          v414 = &v430;
          v119 = v428;
          v120 = *v90;
          if ((*((_BYTE *)v428 + 56) & 0x10) == 0)
          {
            if ((*((_QWORD *)v428 + 3) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v124 = *((_QWORD *)v389 + 98);
              v125 = *(_QWORD *)((*((_QWORD *)v428 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x60);
              if (v125 == v120)
              {
                v121 = 1;
              }
              else
              {
                v126 = *(unsigned int *)(v120 + 8);
                v127 = *(_DWORD *)(v124 + 20);
                if (v127 <= v126)
                  goto LABEL_575;
                v128 = *(unsigned int *)(v125 + 8);
                if (v127 <= v128)
                  goto LABEL_576;
                v129 = *(_QWORD *)(v124 + 8);
                v130 = v129 + 32 * v126;
                v131 = v129 + 32 * v128;
                v121 = *(_DWORD *)(v130 + 24) > *(_DWORD *)(v131 + 24)
                    && *(_DWORD *)(v130 + 28) < *(_DWORD *)(v131 + 28);
              }
              if ((*((_QWORD *)v428 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v132 = *(_QWORD *)((*((_QWORD *)v428 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x60);
                if (v132 == v120)
                {
                  v151 = 1;
                }
                else
                {
                  v145 = *(unsigned int *)(v120 + 8);
                  v146 = *(_DWORD *)(v124 + 20);
                  if (v146 <= v145)
                  {
LABEL_575:
                    __break(0xC471u);
                    JUMPOUT(0x19842FA60);
                  }
                  v147 = *(unsigned int *)(v132 + 8);
                  if (v146 <= v147)
                  {
LABEL_576:
                    __break(0xC471u);
                    JUMPOUT(0x19842FA68);
                  }
                  v148 = *(_QWORD *)(v124 + 8);
                  v149 = v148 + 32 * v145;
                  v150 = v148 + 32 * v147;
                  v151 = *(_DWORD *)(v149 + 24) > *(_DWORD *)(v150 + 24)
                      && *(_DWORD *)(v149 + 28) < *(_DWORD *)(v150 + 28);
                }
                v121 &= v151;
                if ((*((_QWORD *)v428 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v137 = *(_QWORD *)((*((_QWORD *)v428 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x60);
                  if (v137 == v120)
                  {
                    v144 = 1;
                  }
                  else
                  {
                    v138 = *(unsigned int *)(v120 + 8);
                    v139 = *(_DWORD *)(v124 + 20);
                    if (v139 <= v138)
                      goto LABEL_575;
                    v140 = *(unsigned int *)(v137 + 8);
                    if (v139 <= v140)
                      goto LABEL_576;
                    v141 = *(_QWORD *)(v124 + 8);
                    v142 = v141 + 32 * v138;
                    v143 = v141 + 32 * v140;
                    v144 = *(_DWORD *)(v142 + 24) > *(_DWORD *)(v143 + 24)
                        && *(_DWORD *)(v142 + 28) < *(_DWORD *)(v143 + 28);
                  }
                  v121 &= v144;
                }
              }
            }
            else
            {
              v121 = 1;
            }
LABEL_108:
            if (!v121)
              goto LABEL_110;
            goto LABEL_109;
          }
          v170 = *((_QWORD *)v428 + 3);
          v171 = *((_DWORD *)v428 + 8);
          if (v171 + (int)v170 > v170)
          {
            v172 = *((_QWORD *)v428 + 3);
            v173 = *((_DWORD *)v389 + 41);
            v174 = *((_QWORD *)v389 + 98);
            if (v173 <= v170)
              v170 = v170;
            else
              v170 = v173;
            v175 = (_QWORD *)(*((_QWORD *)v389 + 19) + 8 * v172);
            v176 = v170 - v172;
            v121 = 1;
            do
            {
              if (!v176)
              {
                __break(0xC471u);
                JUMPOUT(0x19842FA58);
              }
              if ((*v175 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v177 = *(_QWORD *)((*v175 & 0xFF00FFFFFFFFFFFFLL) + 0x60);
                if (v177 == v120)
                {
                  v184 = 1;
                }
                else
                {
                  v178 = *(unsigned int *)(v120 + 8);
                  v179 = *(_DWORD *)(v174 + 20);
                  if (v179 <= v178)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19842FA48);
                  }
                  v180 = *(unsigned int *)(v177 + 8);
                  if (v179 <= v180)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19842FA50);
                  }
                  v181 = *(_QWORD *)(v174 + 8);
                  v182 = v181 + 32 * v178;
                  v183 = v181 + 32 * v180;
                  v184 = *(_DWORD *)(v182 + 24) > *(_DWORD *)(v183 + 24)
                      && *(_DWORD *)(v182 + 28) < *(_DWORD *)(v183 + 28);
                }
                if (v121)
                  v121 = v184;
                else
                  v121 = 0;
              }
              ++v175;
              --v176;
              --v171;
            }
            while (v171);
            goto LABEL_108;
          }
LABEL_109:
          LOBYTE(v434[0]) = 0;
          JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::CheckClobberize,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::NoOpClobberize,JSC::DFG::CheckClobberize,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::NoOpClobberize const&,JSC::DFG::CheckClobberize const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v389, v428, (uint64_t)&v405, v434, (uint64_t)&v405, (uint64_t)&v431, v69, v70);
          if (!LOBYTE(v434[0]))
          {
            v152 = v389;
            *(_QWORD *)&v405 = v428;
            v153 = v428;
            *(_DWORD *)v434 = 0;
            v154 = *((unsigned __int16 *)v428 + 9);
            v155 = 2;
            if (v154 > 0xD6)
            {
              switch(*((_WORD *)v428 + 9))
              {
                case 0xD7:
                  if ((*((_BYTE *)v428 + 56) & 0x10) != 0)
                  {
                    v362 = *((_DWORD *)v428 + 6) + 1;
                    if (*((_DWORD *)v389 + 41) <= v362)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19842FA70);
                    }
                    v338 = (_QWORD *)(*((_QWORD *)v389 + 19) + 8 * v362);
                  }
                  else
                  {
                    v338 = (_QWORD *)((char *)v428 + 32);
                  }
                  v339 = (*v338 >> 50) & 0x3FLL;
                  v155 = 2;
                  if (v339 <= 0x31 && ((1 << v339) & 0x2800002000802) != 0)
                    goto LABEL_152;
                  goto LABEL_156;
                case 0xD8:
                case 0xD9:
                case 0xDB:
                case 0xDC:
                case 0xDD:
                case 0xDF:
                case 0xE0:
                case 0xE1:
                case 0xE2:
                case 0xE3:
                case 0xE4:
                case 0xE5:
                case 0xE6:
                case 0xF0:
                case 0xF2:
                case 0xF4:
                case 0xF9:
                case 0xFA:
                case 0xFB:
                case 0xFC:
                case 0x101:
                case 0x102:
                case 0x103:
                case 0x104:
                case 0x105:
                case 0x106:
                case 0x107:
                case 0x108:
                case 0x109:
                case 0x10B:
                case 0x10D:
                case 0x10F:
                case 0x114:
                case 0x115:
                case 0x118:
                case 0x11A:
                case 0x11B:
                case 0x11C:
                case 0x11D:
                case 0x120:
                  goto LABEL_156;
                case 0xDA:
                case 0xDE:
                case 0xF1:
                case 0xF3:
                case 0xF5:
                case 0xF6:
                case 0xF7:
                case 0xF8:
                case 0xFD:
                case 0xFE:
                case 0xFF:
                case 0x100:
                case 0x10A:
                case 0x10C:
                case 0x10E:
                case 0x110:
                case 0x111:
                case 0x112:
                case 0x119:
                case 0x11F:
                case 0x121:
                  goto LABEL_205;
                case 0xE7:
                case 0xE8:
                case 0xE9:
                case 0xEA:
                case 0xED:
                  goto LABEL_458;
                case 0xEB:
                case 0xEC:
                case 0xEF:
                case 0x113:
                case 0x116:
                case 0x117:
                case 0x11E:
                  goto LABEL_152;
                case 0xEE:
                  v321 = (*((_QWORD *)v428 + 3) >> 50) & 0x3FLL;
                  if (((*((_QWORD *)v428 + 3) >> 50) & 0x3F) > 0x2E)
                  {
                    if ((_DWORD)v321 == 48)
                    {
                      v341 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                      v342 = 0xC0000000000000;
                    }
                    else
                    {
                      if ((_DWORD)v321 != 47)
                        goto LABEL_458;
                      v341 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                      v342 = 0xBC000000000000;
                    }
                  }
                  else
                  {
                    if ((_DWORD)v321 != 6)
                    {
                      if (!(_DWORD)v321)
                      {
                        v322 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                        if (v322 == 0x18000000000000 || v322 == 0xC0000000000000 || v322 == 0xBC000000000000)
                          goto LABEL_152;
                      }
                      goto LABEL_458;
                    }
                    v341 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                    v342 = 0x18000000000000;
                  }
                  if (v341 == v342 || !v341)
                    goto LABEL_152;
LABEL_458:
                  v330 = (*((_QWORD *)v428 + 3) >> 50) & 0x3FLL;
                  v155 = 2;
                  if (((*((_QWORD *)v428 + 3) >> 50) & 0x3F) > 0x30)
                  {
                    if ((_DWORD)v330 == 49)
                    {
LABEL_529:
                      v329 = *((_QWORD *)v428 + 4);
LABEL_530:
                      v310 = v329 & 0xFC000000000000;
LABEL_531:
                      v273 = 0xC4000000000000;
                    }
                    else
                    {
                      if ((_DWORD)v330 != 52)
                        goto LABEL_156;
                      v310 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                      v273 = 0xD0000000000000;
                    }
                  }
                  else if ((_DWORD)v330 == 1)
                  {
LABEL_532:
                    v353 = *((_QWORD *)v428 + 4);
LABEL_533:
                    v310 = v353 & 0xFC000000000000;
                    v273 = 0x4000000000000;
                  }
                  else
                  {
                    if ((_DWORD)v330 != 25)
                      goto LABEL_156;
                    v310 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                    v273 = 0x64000000000000;
                  }
                  goto LABEL_413;
                default:
                  v187 = v154 - 57;
                  if (v154 - 313 > 0x3C)
                    goto LABEL_202;
                  if (((1 << v187) & 0x10580000C0000003) != 0)
                    goto LABEL_152;
                  if (((1 << v187) & 0x7C001000001C0) != 0)
                    goto LABEL_205;
                  if (((1 << v187) & 0x1020) == 0)
                  {
LABEL_202:
                    v188 = v154 - 376;
                    if (v188 > 0x32)
                      goto LABEL_156;
                    if (((1 << v188) & 0x7F400000000D7) == 0)
                    {
                      if (v188 != 11)
                        goto LABEL_156;
LABEL_205:
                      *(_DWORD *)v434 = 1;
                    }
                    goto LABEL_152;
                  }
                  v343 = (*((_QWORD *)v428 + 3) >> 50) & 0x3FLL;
                  v155 = 2;
                  if (v343 > 0x34)
                    goto LABEL_156;
                  if (((1 << v343) & 0x12026001000002) != 0)
                  {
                    *(_DWORD *)v434 = 1;
                    goto LABEL_152;
                  }
                  if (v343 != 22)
                    goto LABEL_156;
                  goto LABEL_152;
              }
            }
            switch(*((_WORD *)v428 + 9))
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
              case 0x26:
              case 0x27:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x87:
              case 0x8A:
              case 0x8B:
              case 0x93:
              case 0x95:
              case 0x98:
              case 0x9B:
              case 0xA5:
              case 0xAB:
              case 0xAC:
              case 0xAD:
              case 0xAE:
              case 0xAF:
              case 0xB2:
              case 0xB5:
                goto LABEL_152;
              case 0x2A:
                goto LABEL_526;
              case 0x2C:
              case 0x2E:
              case 0x30:
              case 0x31:
              case 0x33:
              case 0x35:
                v272 = *((_QWORD *)v428 + 3) & 0xFC000000000000;
                v273 = 0x4000000000000;
                goto LABEL_341;
              case 0x3E:
              case 0x40:
              case 0x42:
                v272 = *((_QWORD *)v428 + 3) & 0xFC000000000000;
                if (*((_DWORD *)v428 + 18) == 1)
                {
                  v273 = 0x4000000000000;
                  if (v272 == 0x4000000000000)
                    goto LABEL_412;
                }
                v273 = 0xC4000000000000;
LABEL_341:
                if (v272 != v273)
                  goto LABEL_342;
LABEL_412:
                v310 = *((_QWORD *)v428 + 4) & 0xFC000000000000;
                break;
              case 0x3F:
                if (((*((_QWORD *)v428 + 3) >> 50) & 0x3F) - 1 >= 2)
                  goto LABEL_342;
                goto LABEL_152;
              case 0x41:
                v326 = *((_QWORD *)v428 + 3) & 0xFC000000000000;
                if ((v326 != 0x4000000000000 || *((_DWORD *)v428 + 18) != 1) && v326 != 0xC4000000000000)
                  goto LABEL_342;
                goto LABEL_152;
              case 0x44:
              case 0x45:
                if ((*((_QWORD *)v428 + 3) & 0xFC000000000000) != 0xC4000000000000
                  || (*((_QWORD *)v428 + 4) & 0xFC000000000000) != 0xC4000000000000)
                {
                  goto LABEL_342;
                }
                goto LABEL_152;
              case 0x46:
                if (*((_DWORD *)v428 + 18) != 1)
                  goto LABEL_342;
LABEL_526:
                v353 = *((_QWORD *)v428 + 3);
                goto LABEL_533;
              case 0x47:
              case 0x48:
                v340 = *((_QWORD *)v428 + 3);
                if ((*((_BYTE *)v428 + 56) & 0x10) != 0)
                {
                  if (*((_DWORD *)v389 + 41) <= v340)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19842FA78);
                  }
                  v340 = *(_QWORD *)(*((_QWORD *)v389 + 19) + 8 * v340);
                }
                v310 = v340 & 0xFC000000000000;
                if (v310 != 0x4000000000000)
                  goto LABEL_531;
                goto LABEL_152;
              case 0x49:
              case 0x50:
              case 0x51:
                v329 = *((_QWORD *)v428 + 3);
                goto LABEL_530;
              case 0x4A:
                v354 = (*((_QWORD *)v428 + 3) >> 50) & 0x3FLL;
                if ((_DWORD)v354 == 1)
                  goto LABEL_532;
                if ((_DWORD)v354 == 49)
                  goto LABEL_529;
                goto LABEL_342;
              case 0x4C:
              case 0x4D:
              case 0x4E:
              case 0x4F:
                if ((*((_QWORD *)v428 + 3) & 0xFC000000000000) != 0xC4000000000000 || *((_DWORD *)v428 + 18) < 2u)
                  goto LABEL_342;
                goto LABEL_152;
              case 0x5B:
              case 0x88:
              case 0x89:
                goto LABEL_205;
              case 0xB4:
                if (!*((_DWORD *)v428 + 18))
                  goto LABEL_342;
                goto LABEL_152;
              default:
                goto LABEL_156;
            }
LABEL_413:
            if (v310 == v273)
            {
LABEL_152:
              v431 = (unint64_t)v380;
              v432 = (unint64_t)v434;
              v433 = &v405;
              v156 = *((_QWORD *)v428 + 3);
              if ((*((_BYTE *)v428 + 56) & 0x10) != 0)
              {
                v318 = *((_QWORD *)v428 + 4);
                if ((int)v318 + (int)v156 > v156)
                {
                  v319 = *((_QWORD *)v428 + 3);
                  v369 = v389;
                  v373 = v428;
                  do
                  {
                    if (v319 >= *((unsigned int *)v152 + 41))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19842FA80);
                    }
                    v320 = *(_QWORD *)(*((_QWORD *)v152 + 19) + 8 * v319);
                    if ((v320 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v152 = v369;
                      v156 = *((_QWORD *)v373 + 3);
                      v318 = *((_QWORD *)v373 + 4);
                    }
                    ++v319;
                  }
                  while (v319 < (v156 + v318));
                }
              }
              else if ((v156 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v157 = v428;
                v158 = *((_QWORD *)v157 + 4);
                if ((v158 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v185 = *((_QWORD *)v157 + 5);
                  if ((v185 & 0xFF00FFFFFFFFFFFFLL) != 0)
                }
              }
              v155 = *(_DWORD *)v434;
              v152 = v389;
              v153 = v428;
            }
            else
            {
LABEL_342:
              v155 = 2;
            }
LABEL_156:
            v159 = v155 && v113;
            v423 = v159;
            v431 = (unint64_t)v88;
            LOBYTE(v432) = 0;
            JSC::DFG::clobberize<JSC::DFG::ClobberSetOverlaps,JSC::DFG::NoOpClobberize,JSC::DFG::NoOpClobberize,void JSC::DFG::clobberize<JSC::DFG::ClobberSetOverlaps,JSC::DFG::NoOpClobberize,JSC::DFG::NoOpClobberize>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ClobberSetOverlaps const&,JSC::DFG::NoOpClobberize const&,JSC::DFG::NoOpClobberize const&)::{lambda(void)#1}>(v152, v153, (_QWORD ***)&v431, (uint64_t)v434, (uint64_t)v434, (uint64_t)&v405, v69, v70);
            if (!(_BYTE)v432 && (!v423 || v424))
            {
              if ((JSC::DFG::safeToExecute<JSC::DFG::AtTailAbstractState>((uint64_t)v380, v389, v428, 0, v67, v68, v69, v70) & 1) != 0)goto LABEL_162;
              if (v424
                && JSC::DFG::safeToExecute<JSC::DFG::AtTailAbstractState>((uint64_t)v380, v389, v428, 1, v67, v68, v69, v70))
              {
                v293 = v389;
                v294 = v428;
                v431 = (unint64_t)&v385;
                v432 = (unint64_t)&v425;
                v433 = (__int128 *)v416;
                v295 = *((_QWORD *)v428 + 3);
                if ((*((_BYTE *)v428 + 56) & 0x10) != 0)
                {
                  v355 = *((_QWORD *)v428 + 4);
                  if ((int)v355 + (int)v295 > v295)
                  {
                    v356 = *((_QWORD *)v428 + 3);
                    v357 = 8 * v356;
                    do
                    {
                      if (v356 >= *((unsigned int *)v293 + 41))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19842FA88);
                      }
                      v358 = (_QWORD *)(*((_QWORD *)v293 + 19) + v357);
                      if ((*v358 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Edge &)#1}::operator()(&v431, v358, v65, v66, v67, v68, v69, v70);
                        v295 = *((_QWORD *)v294 + 3);
                        v355 = *((_QWORD *)v294 + 4);
                      }
                      ++v356;
                      v357 += 8;
                    }
                    while (v356 < (v295 + v355));
                  }
                }
                else if ((v295 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Edge &)#1}::operator()(&v431, (_QWORD *)v428 + 3, v65, v66, v67, v68, v69, v70);
                  if ((*((_QWORD *)v294 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Edge &)#1}::operator()(&v431, (_QWORD *)v294 + 4, v296, v297, v298, v299, v300, v301);
                    v309 = *((_QWORD *)v294 + 5);
                    v308 = (_QWORD *)((char *)v294 + 40);
                    if ((v309 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Edge &)#1}::operator()(&v431, v308, v302, v303, v304, v305, v306, v307);
                  }
                }
LABEL_162:
                JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Node *)#1}::operator()((uint64_t)v416, v428);
                JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator()((uint64_t)v415, v160, v161, v162, v163, v164, v165, v166);
                v167 = v389;
                if ((*((_BYTE *)v428 + 56) & 0x10) != 0)
                {
                  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v431, (const JSC::DFG::NodeOrigin *)&v425);
                  JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>((uint64_t)v389, (uint64_t)v428, (uint64_t (*)(uint64_t))_ZZN3JSC3DFG5Graph18copyVarargChildrenIPFbNS0_4EdgeEEEENS0_13AdjacencyListEPNS0_4NodeET_Ed_NUlS3_E_8__invokeES3_, &v405);
                  v434[0] = 25;
                  *(_QWORD *)(v84 + 8 * v83) = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::AdjacencyList &>((uint64_t)v167 + 1032, v434, (uint64_t)&v431, &v405);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v431, v311, v312, v313, v314, v315, v316, v317);
                }
                else
                {
                  v168 = (_QWORD **)v425;
                  if ((v425 & 1) != 0)
                  {
                    v331 = *(_QWORD *)(v425 & 0xFFFFFFFF8);
                    if ((v425 & 2) != 0
                      || ((v332 = *(unsigned int *)((v425 & 0xFFFFFFFF8) + 8), (_DWORD)v332 != 0x3FFFFFFF)
                        ? (v333 = (_DWORD)v332 == -1)
                        : (v333 = 1),
                          v333))
                    {
                      v334 = 2;
                    }
                    else if (v332 >> 28)
                    {
                      v364 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v364 = v331;
                      *(_DWORD *)(v364 + 8) = v332;
                      v334 = 1;
                      v331 = v364;
                    }
                    else
                    {
                      v334 = *(_QWORD *)(v425 & 0xFFFFFFFF8);
                      v331 = v332 << 36;
                    }
                    v168 = (_QWORD **)(v331 | v334);
                  }
                  v431 = (unint64_t)v168;
                  v169 = (_QWORD *)v426;
                  if ((v426 & 1) != 0)
                  {
                    v335 = *(_QWORD *)(v426 & 0xFFFFFFFF8);
                    if ((v426 & 2) != 0
                      || (v336 = *(unsigned int *)((v426 & 0xFFFFFFFF8) + 8), (_DWORD)v336 == 0x3FFFFFFF)
                      || (_DWORD)v336 == -1)
                    {
                      v337 = 2;
                    }
                    else if (v336 >> 28)
                    {
                      v365 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v365 = v335;
                      *(_DWORD *)(v365 + 8) = v336;
                      v337 = 1;
                      v335 = v365;
                    }
                    else
                    {
                      v337 = *(_QWORD *)(v426 & 0xFFFFFFFF8);
                      v335 = v336 << 36;
                    }
                    v169 = (_QWORD *)(v335 | v337);
                  }
                  v432 = (unint64_t)v169;
                  LOWORD(v433) = v427;
                  v405 = *(_OWORD *)((char *)v428 + 24);
                  v406 = *((_QWORD *)v428 + 5);
                  v434[0] = 24;
                  *(_QWORD *)(v84 + 8 * v83) = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::AdjacencyList &>((uint64_t)v167 + 1032, v434, (uint64_t)&v431, &v405);
                  if ((v432 & 1) != 0 && (v432 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v432 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
                  if ((v431 & 1) != 0 && (v431 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v431 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
                }
                v122 = 1;
                goto LABEL_111;
              }
            }
          }
LABEL_110:
          v122 = JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator()((uint64_t)v407, (uint64_t)v119, v65, v66, v67, v68, v69, v70);
LABEL_111:
          v123 = (unint64_t)v417;
          if (v419 != (_BYTE *)v417 && v417)
          {
            v417 = 0;
            LODWORD(v418) = 0;
            WTF::fastFree(v123, v64, v65, v66, v67, v68, v69, v70);
          }
          if ((v421 & 1) != 0 && (v421 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v421 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
          if ((v420 & 1) != 0 && (v420 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v420 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
          if ((v426 & 1) != 0 && (v426 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v426 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
          if ((v425 & 1) != 0 && (v425 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v425 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
LABEL_116:
          v72 |= v122;
        }
        v265 = 1 - v85;
        v266 = v379;
        while (1)
        {
          v267 = v378;
          if (v265 == 1)
            break;
          v268 = v265;
          v378 ^= (v378 >> 26) ^ ((v266 ^ (v266 << 23)) >> 17) ^ v266 ^ (v266 << 23);
          v379 = v267;
          if (*(double *)&qword_1ECF4C778 * 4294967300.0 >= (double)(v378 + v267))
            goto LABEL_337;
          v269 = *(unsigned __int16 *)(*(_QWORD *)(v84 + 8 * v83) + 18);
          ++v265;
          if (v269 <= 0x83)
          {
            v271 = v269 > 0x25 || ((1 << v269) & 0x3803000000) == 0;
            if (!v271 || (v266 = v267, v269 == 107))
            {
LABEL_337:
              v85 = -v268;
              goto LABEL_71;
            }
          }
          else
          {
            if (v269 - 132 <= 0x3C && ((1 << (v269 + 124)) & 0x1FAC000000001303) != 0)
              goto LABEL_337;
            if (v269 == 280)
              goto LABEL_337;
            v266 = v267;
            if (v269 == 381)
              goto LABEL_337;
          }
        }
        v379 = v266;
LABEL_143:
        ++v83;
      }
      while (v83 < *(unsigned int *)(v73 + 220));
LABEL_56:
      v71 = (WTF *)((char *)v383 + 8);
      if ((char *)v383 + 8 == v381)
      {
        v71 = v400;
        goto LABEL_206;
      }
    }
  }
  v72 = 0;
LABEL_206:
  if (v71)
  {
    v400 = 0;
    v401 = 0;
    WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
  }
  v189 = v403;
  if (v403)
  {
    v403 = 0;
    LODWORD(v404) = 0;
    WTF::fastFree((unint64_t)v189, v64, v65, v66, v67, v68, v69, v70);
  }
  if ((v72 & 1) != 0)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v263 = (*(_DWORD *)(*((_QWORD *)v389 + 3) + 16) & 0xFFFFFFFE) == 4) : (v263 = 0),
          !v263 ? (v264 = BYTE2(qword_1ECF4C32A) == 0) : (v264 = 0),
          !v264))
    {
      *(_OWORD *)v407 = v390;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v389 + 1088, "Phase ", (uint64_t)v407, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v397);
  v197 = v395;
  if (HIDWORD(v396))
  {
    v257 = 16 * HIDWORD(v396);
    do
    {
      if (*(_QWORD *)v197)
        WTF::fastFree(*(_QWORD *)v197 - 16, v190, v191, v192, v193, v194, v195, v196);
      v197 = (WTF *)((char *)v197 + 16);
      v257 -= 16;
    }
    while (v257);
    v197 = v395;
  }
  if (v197)
  {
    v395 = 0;
    LODWORD(v396) = 0;
    WTF::fastFree((unint64_t)v197, v190, v191, v192, v193, v194, v195, v196);
  }
  v198 = v394;
  v394 = 0;
  if (v198)
  {
    v199 = *(_QWORD *)v198;
    if (*(_QWORD *)v198)
    {
      v200 = *(unsigned int *)(v199 - 4);
      if ((_DWORD)v200)
      {
        v201 = v199 + 24;
        do
        {
          if (*(_QWORD *)(v201 - 24) != -1)
          {
            v202 = *(_QWORD *)(v201 - 16);
            if (v201 != v202 && v202 != 0)
            {
              *(_QWORD *)(v201 - 16) = 0;
              *(_DWORD *)(v201 - 8) = 0;
              WTF::fastFree(v202, v190, v191, v192, v193, v194, v195, v196);
            }
          }
          v201 += 48;
          --v200;
        }
        while (v200);
      }
      WTF::fastFree(v199 - 16, v190, v191, v192, v193, v194, v195, v196);
    }
    WTF::fastFree((unint64_t)v198, v190, v191, v192, v193, v194, v195, v196);
  }
  JSC::DFG::AtTailAbstractState::~AtTailAbstractState(v380, v190, v191, v192, v193, v194, v195, v196);
  if (HIBYTE(qword_1ECF4C32A) && !v391)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v385, (uint64_t)v204, v205, v206, v207, v208, v209, v210);
  v211 = v392;
  v392 = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 1)
      WTF::fastFree((unint64_t)v211, v204, v205, v206, v207, v208, v209, v210);
    else
      --*(_DWORD *)v211;
  }
  return v72 & 1;
}

uint64_t JSC::DFG::LazyJSValue::newString(JSC::DFG::LazyJSValue *this, WTF::StringImpl **a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[3];

  {
    JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
    LODWORD(qword_1EE342DB8) = 0;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 112, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  return *(_QWORD *)v9[0];
}

void JSC::DFG::LazyJSValue::tryGetString(uint64_t **this@<X0>, JSC::DFG::Graph *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  int v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  int *v13;
  int **v14;
  WTF::StringImpl *v15;

  v9 = *((_DWORD *)this + 2);
  if (!v9)
    goto LABEL_2;
  if (v9 == 3)
  {
    v13 = (int *)*this;
    if (!*this)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v9 != 1)
  {
    if (v9 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1984300D0);
    }
LABEL_2:
    if (v9)
    {
      v12 = (WTF::StringImpl *)*this;
    }
    else
    {
      v10 = **this;
      if (v10)
        v11 = (v10 & 0xFFFE000000000002) == 0;
      else
        v11 = 0;
      if (!v11 || *(_BYTE *)(v10 + 5) != 2 || (v12 = *(WTF::StringImpl **)(v10 + 8), (v12 & 1) != 0))
      {
LABEL_19:
        *a8 = 0;
        return;
      }
    }
    v15 = v12;
    if (v12 && *((_DWORD *)v12 + 1) < 0x2711u)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::DFG::CrossThreadStringTranslator>,WTF::StringImpl const* const&,WTF::StringImpl const* const&>((uint64_t *)a2 + 113, &v15, a3, a4, a5, a6, a7, (uint64_t)&v14);
      v13 = *v14;
      if (!*v14)
      {
LABEL_14:
        *a8 = v13;
        return;
      }
LABEL_13:
      *v13 += 2;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  WTF::String::String(a8, this, 1uLL);
}

uint64_t JSC::DFG::LazyJSValue::strictEqual(unint64_t **a1, WTF **a2, const WTF::StringImpl *a3)
{
  unint64_t **v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  int v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  const WTF::StringImpl *v16;

  while (1)
  {
    v4 = (unint64_t **)a2;
    a2 = (WTF **)a1;
    v5 = *((_DWORD *)a1 + 2);
    if (!v5)
      break;
    if ((v5 - 2) < 2)
    {
      v13 = *((_DWORD *)v4 + 2);
      a1 = v4;
      v14 = v13 >= 2;
      v15 = v13 - 2;
      if (v14)
      {
        if (v15 <= 1)
        {
          v16 = (const WTF::StringImpl *)*v4;
          if (*a2 == (WTF *)*v4)
            return 1;
          result = 0;
          if (*a2 && v16)
            return WTF::equal(*a2, v16, a3);
          return result;
        }
        goto LABEL_34;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_34;
      v11 = *((_DWORD *)v4 + 2);
      a1 = v4;
      if (v11)
      {
        if ((v11 - 2) < 2)
        {
          if (*((_DWORD *)*v4 + 1) != 1)
            return 0;
          return WTF::StringImpl::at((WTF::StringImpl *)*v4, 0) == *(unsigned __int16 *)a2;
        }
        if (v11 == 1)
          return *(unsigned __int16 *)a2 == *(unsigned __int16 *)v4;
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x198430284);
      }
    }
  }
  v6 = *((_DWORD *)v4 + 2);
  if (v6)
  {
    if ((v6 - 2) < 2)
    {
      result = **a1;
      if (result)
        return JSC::DFG::equalToStringImpl(result, (WTF *)*v4, a3);
      return result;
    }
    if (v6 == 1)
    {
      result = **a1;
      if (result)
        return JSC::DFG::equalToSingleCharacter(result, *(unsigned __int16 *)v4);
      return result;
    }
    goto LABEL_34;
  }
  v7 = **a1;
  v8 = **v4;
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return v7 == v8;
  return JSC::JSValue::pureStrictEqual(v7, v8, a3);
}

uint64_t JSC::JSValue::pureStrictEqual(unint64_t a1, unint64_t a2, JSC::JSBigInt *a3)
{
  uint64_t result;
  int v5;
  double v6;
  double v7;
  WTF *v8;
  const WTF::StringImpl *v9;

  if (a1 >= 0xFFFE000000000000)
  {
    if (a2 >= 0xFFFE000000000000)
      return a1 == a2;
    goto LABEL_13;
  }
  if (a1 >> 49)
  {
LABEL_13:
    if (a2 >> 49)
    {
      v6 = (double)(int)a1;
      if (a1 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v6 = a1 - 0x2000000000000;
      v7 = (double)(int)a2;
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v7 = a2 - 0x2000000000000;
      return v6 == v7;
    }
  }
  if (((a1 | a2) & 0xFFFE000000000002) != 0)
    return a1 == a2;
  v5 = *(unsigned __int8 *)(a1 + 5);
  if (v5 != 2)
  {
    if (v5 == 3 && *(_BYTE *)(a2 + 5) == 3)
      return JSC::JSBigInt::equals((JSC::JSBigInt *)a1, (JSC::JSBigInt *)a2, a3);
    return a1 == a2;
  }
  if (*(_BYTE *)(a2 + 5) != 2)
    return a1 == a2;
  v8 = *(WTF **)(a1 + 8);
  if ((v8 & 1) != 0)
    v8 = 0;
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v9 = 0;
  else
    v9 = *(const WTF::StringImpl **)(a2 + 8);
  result = 2;
  if (v8 && v9)
    return WTF::equal(v8, v9, a3);
  return result;
}

uint64_t JSC::DFG::equalToSingleCharacter(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  if ((a1 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a1 + 5) != 2)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_DWORD *)(a1 + 16);
  if ((v2 & 1) == 0)
    v3 = (_DWORD *)(v2 + 4);
  if (*v3 != 1)
    return 0;
  result = 2;
  if (v2 && (v2 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 4))
    {
      v5 = *(unsigned __int8 **)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v6 = *v5;
      else
        v6 = *(unsigned __int16 *)v5;
      return v6 == a2;
    }
    else
    {
      result = 1161;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t JSC::DFG::equalToStringImpl(uint64_t a1, WTF *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v3;
  BOOL v4;

  if ((a1 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(a1 + 5) == 2)
  {
    v3 = *(const WTF::StringImpl **)(a1 + 8);
    if (v3)
      v4 = (*(_QWORD *)(a1 + 8) & 1) == 0;
    else
      v4 = 0;
    if (!v4)
      return 2;
    if (v3 == a2)
      return 1;
    if (a2)
      return WTF::equal(a2, v3, a3);
  }
  return 0;
}

void JSC::DFG::LazyJSValue::emit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::AssemblerBuffer *v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;

  if (*(_DWORD *)(a1 + 8))
  {
    v11 = *(_DWORD *)(a2 + 200);
    if (v11 < *(_DWORD *)(a2 + 52))
    {
      v30 = (JSC::AssemblerBuffer *)(a2 + 56);
      do
      {
        if ((v11 + 4) > *(_DWORD *)(a2 + 192))
        {
          v32 = v30;
          v31 = a3;
          JSC::AssemblerBuffer::outOfLineGrow(v30, a2, a3, a4, a5, a6, a7, a8);
          v30 = v32;
          a3 = v31;
          v11 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = -721215457;
        v11 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v11;
      }
      while (v11 < *(_DWORD *)(a2 + 52));
    }
    JSC::MacroAssemblerARM64::moveWithFixedWidth((_DWORD *)a2, 0xD1E7BEEFuLL, (char)a3, a4, a5, a6, a7, a8);
    v12 = *(uint64_t **)a1;
    v13 = *(_DWORD *)(a1 + 8);
    if (v13 == 3)
      *(_DWORD *)v12 += 2;
    v14 = *(_QWORD *)(a2 + 336);
    v15 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v15 + 8) = 1;
    *(_QWORD *)v15 = off_1E358E548;
    *(_DWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = a4;
    *(_QWORD *)(v15 + 32) = v12;
    *(_DWORD *)(v15 + 40) = v13;
    *(_QWORD *)(v15 + 48) = v14;
    v16 = *(unsigned int *)(a2 + 244);
    if ((_DWORD)v16 != *(_DWORD *)(a2 + 240))
    {
      v17 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v16);
LABEL_7:
      *v17 = v15;
      *(_DWORD *)(a2 + 244) = v16 + 1;
      return;
    }
    v18 = v16 + (v16 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v16 + 1)
      v20 = v16 + 1;
    else
      v20 = v19;
    if (!(v20 >> 29))
    {
      v21 = *(const void **)(a2 + 232);
      v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a2 + 240) = v20;
      *(_QWORD *)(a2 + 232) = v22;
      memcpy(v22, v21, 8 * v16);
      if (v21)
      {
        if (*(const void **)(a2 + 232) == v21)
        {
          *(_QWORD *)(a2 + 232) = 0;
          *(_DWORD *)(a2 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
      }
      v16 = *(unsigned int *)(a2 + 244);
      v17 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v16);
      goto LABEL_7;
    }
    __break(0xC471u);
  }
  else
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, **(_QWORD **)a1, (char)a3, a4, a5, a6, a7, a8);
  }
}

BOOL JSC::DFG::LiveCatchVariablePreservationPhase::run(JSC::DFG::LiveCatchVariablePreservationPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::DFG::LiveCatchVariablePreservationPhase *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  JSC::DFG::BasicBlock *v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  WTF *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::DFG::BasicBlock *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  JSC::DFG::Graph *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int i;
  uint64_t v85;
  JSC::UnlinkedCodeBlock ***v86;
  WTF *v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unsigned __int8 *v113;
  unsigned int v114;
  int v116;
  unint64_t v117;
  unsigned __int8 *v118;
  int v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  WTF *v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  BOOL v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF *v206;
  int v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  char v213;
  JSC::UnlinkedCodeBlock **v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  unint64_t v219;
  JSC::DFG::LiveCatchVariablePreservationPhase *v220;
  JSC::DFG::BasicBlock *v221;
  uint64_t v222;
  WTF *v223;
  uint64_t v224;
  _BYTE v225[128];
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  uint64_t v229;
  uint64_t v230;
  __int16 v231;
  _BYTE v232[24];
  _QWORD v233[6];
  _QWORD *v234;
  int v235;
  int v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int *v242;
  JSC::DFG::BasicBlock *v243;

  v9 = *(_QWORD *)this;
  if (*(_DWORD *)(v9 + 944))
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG *)v9, 0, (const WTF::CString *)"./dfg/DFGLiveCatchVariablePreservationPhase.cpp", (const char *)0x30, "BOOL JSC::DFG::LiveCatchVariablePreservationPhase::run()", "m_graph.m_form == LoadStore");
    __break(0xC471u);
    JUMPOUT(0x1984319D0);
  }
  v10 = *(unsigned __int8 *)(v9 + 961);
  if (*(_BYTE *)(v9 + 961))
  {
    v207 = *(unsigned __int8 *)(v9 + 961);
    v220 = this;
    JSC::DFG::Graph::determineReachability((JSC::DFG::Graph *)v9, a2, a3, a4, a5, a6, a7, a8);
    v19 = v220;
    v20 = *(_QWORD *)v220;
    v222 = v20;
    v223 = (WTF *)v225;
    v224 = 8;
    v21 = *(unsigned int *)(v20 + 60);
    if (!(_DWORD)v21)
      goto LABEL_222;
    v22 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v22))
    {
      if (v21 == ++v22)
      {
LABEL_222:
        v137 = *(_DWORD *)(v20 + 60);
        if (v137)
        {
          v138 = v137 - 1;
          v139 = 8 * (v137 - 1);
          do
          {
            if (*(_DWORD *)(v20 + 60) <= v138)
            {
              __break(0xC471u);
              JUMPOUT(0x198431C40);
            }
            v140 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + v139);
            if (v140)
            {
              *(_BYTE *)(v140 + 21) = 0;
              if (*(_DWORD *)(v140 + 48))
              {
                if (*(_DWORD *)(v140 + 52))
                  *(_DWORD *)(v140 + 52) = 0;
                v141 = *(_QWORD *)(v140 + 40);
                if (v140 + 56 != v141 && v141 != 0)
                {
                  *(_QWORD *)(v140 + 40) = 0;
                  *(_DWORD *)(v140 + 48) = 0;
                  WTF::fastFree(v141, v12, v13, v14, v15, v16, v17, v18);
                  v141 = *(_QWORD *)(v140 + 40);
                }
                if (!v141)
                {
                  *(_QWORD *)(v140 + 40) = v140 + 56;
                  *(_DWORD *)(v140 + 48) = 2;
                }
              }
            }
            v139 -= 8;
            --v138;
          }
          while (v138 != -1);
        }
        v143 = v223;
        if (v225 != (_BYTE *)v223 && v223 != 0)
        {
          v223 = 0;
          LODWORD(v224) = 0;
          WTF::fastFree((unint64_t)v143, v12, v13, v14, v15, v16, v17, v18);
        }
        v10 = v207;
        return v10 != 0;
      }
    }
    if ((_DWORD)v21 == (_DWORD)v22)
      goto LABEL_222;
    v23 = v22;
    v24 = *(unsigned int *)(v20 + 60);
    v209 = v24;
    v210 = v20;
LABEL_11:
    if (v24 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198431C38);
    }
    v25 = *(JSC::DFG::BasicBlock **)(*(_QWORD *)(v20 + 48) + 8 * v23);
    if (!*((_BYTE *)v25 + 21))
      goto LABEL_141;
    v242 = 0;
    v243 = v25;
    if (!*(_DWORD *)(*(_QWORD *)v19 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x198431C48);
    }
    v221 = v25;
    v26 = **(unsigned int ***)(*(_QWORD *)v19 + 48);
    v27 = v26[29];
    v28 = v26[27] - (unint64_t)v26[28];
    v238 = 0;
    if (v28 + 31 < 0x20)
    {
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v29 = (WTF *)(((v28 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v30 = (char *)WTF::fastMalloc(v29);
      bzero(v30, (size_t)v29);
      v238 = v30;
    }
    v239 = v28;
    v240 = 0;
    v241 = v27;
    bzero(v30, (size_t)v29);
    v38 = v221;
    v39 = *((unsigned int *)v221 + 27);
    v234 = 0;
    v235 = 0;
    v236 = v39;
    if ((_DWORD)v39)
    {
      if (v39 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198431C50);
      }
      v40 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v39));
      v235 = v39;
      v234 = v40;
      bzero(v40, 8 * v39);
    }
    v237 = *((_QWORD *)v221 + 14);
    v233[0] = &v242;
    v233[1] = &v238;
    v41 = (uint64_t *)v220;
    v233[2] = &v234;
    v233[3] = v220;
    v233[4] = &v222;
    v233[5] = &v243;
    if (!*((_DWORD *)v221 + 55))
    {
      v44 = 2;
      goto LABEL_135;
    }
    v219 = v23;
    v42 = 0;
    v43 = 0;
    v44 = 2;
LABEL_21:
    v45 = *(_QWORD *)(*((_QWORD *)v38 + 26) + 8 * v42);
    v46 = *(_QWORD *)v45;
    if ((*(_QWORD *)v45 & 1) != 0)
    {
      v134 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      if ((v46 & 2) != 0
        || ((v135 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v135 != 0x3FFFFFFF)
          ? (v136 = (_DWORD)v135 == -1)
          : (v136 = 1),
            v136))
      {
        v145 = 2;
      }
      else if (v135 >> 28)
      {
        v196 = WTF::fastMalloc((WTF *)0x10);
        v41 = (uint64_t *)v220;
        *(_QWORD *)v196 = v134;
        *(_DWORD *)(v196 + 8) = v135;
        v145 = 1;
        v134 = v196;
      }
      else
      {
        v145 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        v134 = v135 << 36;
      }
      v46 = v134 | v145;
    }
    if (v46 == v44)
    {
      v47 = v44 & 1;
      v46 = v44;
      goto LABEL_24;
    }
    v57 = v46 >> 36;
    if ((v46 & 2) != 0)
    {
      LODWORD(v58) = -1;
    }
    else if ((v46 & 1) != 0)
    {
      LODWORD(v58) = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v58 = v46 >> 36;
    }
    if ((v44 & 2) != 0)
    {
      LODWORD(v59) = -1;
    }
    else if ((v44 & 1) != 0)
    {
      LODWORD(v59) = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v59 = v44 >> 36;
    }
    if ((_DWORD)v58 == (_DWORD)v59)
    {
      v120 = (_QWORD *)(v46 & 0xFFFFFFFF8);
      if ((v46 & 1) != 0)
        v120 = (_QWORD *)*v120;
      v121 = (_QWORD *)(v44 & 0xFFFFFFFF8);
      if ((v44 & 1) != 0)
        v121 = (_QWORD *)*v121;
      if (v120 == v121)
      {
        v47 = v46 & 1;
        goto LABEL_24;
      }
    }
    if ((v46 & 2) != 0)
    {
      LODWORD(v57) = -1;
    }
    else if ((v46 & 1) != 0)
    {
      LODWORD(v57) = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8);
    }
    if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    {
      WTF::fastFree(v44 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
      v41 = (uint64_t *)v220;
    }
    v44 = v46;
    if ((v46 & 1) != 0)
    {
      v146 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      if ((v46 & 2) != 0
        || ((v147 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v147 != 0x3FFFFFFF)
          ? (v148 = (_DWORD)v147 == -1)
          : (v148 = 1),
            v148))
      {
        v149 = 2;
      }
      else if (v147 >> 28)
      {
        v197 = WTF::fastMalloc((WTF *)0x10);
        v41 = (uint64_t *)v220;
        *(_QWORD *)v197 = v146;
        *(_DWORD *)(v197 + 8) = v147;
        v149 = 1;
        v146 = v197;
      }
      else
      {
        v149 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        v146 = v147 << 36;
      }
      v44 = v146 | v149;
    }
    while (1)
    {
      v60 = (uint64_t *)(v46 & 0xFFFFFFFF8);
      v61 = v46 & 0xFFFFFFFF8;
      if ((v46 & 1) != 0)
        v61 = *v60;
      v62 = (JSC::DFG::Graph *)*v41;
      v63 = (uint64_t *)(v61 + 8);
      v64 = *v41 + 40;
      if (!v61)
        v63 = (uint64_t *)(*v41 + 40);
      v65 = *v63;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 56) + 80) + 12) <= v57 >> 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198431460);
      }
      v47 = v46 & 1;
      v66 = *(_QWORD *)(v65 + 224);
      if (v66)
      {
        v68 = *(unsigned int *)(v66 + 12);
        if ((_DWORD)v68)
          break;
      }
LABEL_63:
      if (!v61)
      {
        v43 = 0;
        goto LABEL_24;
      }
      v46 = *(_QWORD *)(v61 + 16);
      if ((v46 & 2) != 0)
      {
        LODWORD(v57) = -1;
      }
      else if ((v46 & 1) != 0)
      {
        LODWORD(v57) = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v57 = v46 >> 36;
      }
      if (v47 && v60)
      {
        WTF::fastFree((unint64_t)v60, (void *)v31, v32, v33, v34, v35, v36, v37);
        v41 = (uint64_t *)v220;
        v46 = *(_QWORD *)(v61 + 16);
      }
      if ((v46 & 1) != 0)
      {
        v150 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        if ((v46 & 2) != 0
          || ((v151 = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8), v151 != 0x3FFFFFFF) ? (v152 = v151 == -1) : (v152 = 1),
              v152))
        {
          v153 = 2;
        }
        else if (v151 >> 28)
        {
          v198 = WTF::fastMalloc((WTF *)0x10);
          v41 = (uint64_t *)v220;
          *(_QWORD *)v198 = v150;
          *(_DWORD *)(v198 + 8) = v151;
          v153 = 1;
          v150 = v198;
        }
        else
        {
          v153 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
          v150 = 0;
        }
        v46 = v150 | v153;
      }
    }
    v69 = v57 >> 2;
    v43 = *(unsigned int **)v66;
    v67 = 24 * v68;
    while (*v43 > v69 || v43[1] <= v69)
    {
      v43 += 6;
      v67 -= 24;
      if (!v67)
        goto LABEL_63;
    }
    v76 = v239;
    if (v239)
    {
      v77 = 0;
      v78 = (unint64_t)v238;
      do
      {
        *(_DWORD *)(v78 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v77);
        ++v77;
      }
      while (v76 != v77);
    }
    v79 = v43[2];
    v80 = 4 * v79;
    if (((v79 >> 26) & 0xF) != 0)
    {
      v81 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = v61;
      *(_DWORD *)(v81 + 8) = v80;
      v61 = 1;
    }
    else
    {
      v81 = v80 << 36;
    }
    v213 = 0;
    v82 = v81 | v61;
    v226 = v82;
    v83 = &v226;
    v208 = 0x3FFFFFFF;
    v211 = v82;
    for (i = 0x3FFFFFFF; ; i = v218)
    {
      v85 = v82 & 0xFFFFFFFF8;
      if ((v82 & 1) != 0)
        v85 = *(_QWORD *)v85;
      v217 = i;
      if (v85)
      {
        v131 = *(_QWORD *)(v85 + 24);
        v132 = HIDWORD(v131) & 0xFFFFF | ((int)(v131 >> 28) >> 24 << 20);
        if ((*(_BYTE *)(v85 + 32) & 1) != 0)
        {
          if (v132 >= -3)
          {
            LOBYTE(v131) = BYTE4(v131) - 2;
            v154 = &v238[4 * ((unint64_t)(v132 - 2) >> 5)];
          }
          else
          {
            v131 = v240 + (unint64_t)(-4 - v132);
            v154 = &v238[(v131 >> 3) & 0x3FFFFFFC];
          }
          *(_DWORD *)v154 |= 1 << v131;
          v133 = (*(_QWORD *)(v85 + 24) >> 60) | (16 * *(_BYTE *)(v85 + 32));
        }
        else
        {
          v133 = (v131 >> 60) | (16 * *(_BYTE *)(v85 + 32));
        }
        v216 = v132;
        if ((v133 & 0xFu) - 3 <= 2)
        {
          if (v132 >= -4)
          {
            LOBYTE(v187) = v132 - 1;
            v188 = &v238[4 * ((unint64_t)(v132 - 1) >> 5)];
          }
          else
          {
            v187 = v240 + (unint64_t)(-5 - v132);
            v188 = &v238[(v187 >> 3) & 0x3FFFFFFC];
          }
          *(_DWORD *)v188 |= 1 << v187;
        }
      }
      else
      {
        v216 = 0;
      }
      v86 = (JSC::UnlinkedCodeBlock ***)(v85 + 8);
      if (!v85)
        v86 = (JSC::UnlinkedCodeBlock ***)v64;
      v214 = *v86;
      v87 = JSC::DFG::Graph::livenessFor(v62, *v86, v32, v33, v34, v35, v36, v37);
      v88 = *v83;
      v215 = v85;
      v212 = v83;
      if ((*v83 & 2) != 0)
      {
        if ((v88 & 1) == 0)
        {
          v89 = 0xFFFFFFFFLL;
          goto LABEL_110;
        }
        v168 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
        v89 = 0xFFFFFFFFLL;
      }
      else
      {
        if ((v88 & 1) == 0)
        {
          v89 = v88 >> 36;
LABEL_110:
          v31 = (unint64_t)v214;
          v90 = v213;
          goto LABEL_111;
        }
        v167 = v88 & 0xFFFFFFFF8;
        v89 = *(unsigned int *)(v167 + 8);
        v168 = *(_QWORD *)v167;
        if ((_DWORD)v89 != -1 && v89 != 0x3FFFFFFF)
        {
          v170 = *(_QWORD *)v167;
          v206 = v87;
          if (v89 >> 28)
          {
            v199 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v199 = v170;
            *(_DWORD *)(v199 + 8) = v89;
            v170 = 1;
            v168 = v199;
          }
          else
          {
            v168 = v89 << 36;
          }
          v87 = v206;
          v31 = (unint64_t)v214;
          v90 = v213;
          goto LABEL_300;
        }
      }
      v31 = (unint64_t)v214;
      v90 = v213;
      v170 = 2;
LABEL_300:
      v88 = v168 | v170;
LABEL_111:
      if ((v90 & 1) == 0)
        goto LABEL_112;
      v93 = v88 & 1;
      if ((v88 & 2) != 0)
      {
        v111 = (_QWORD *)(v88 & 0xFFFFFFFF8);
        LODWORD(v110) = -1;
        if ((v88 & 1) == 0)
          goto LABEL_161;
      }
      else
      {
        if ((v88 & 1) == 0)
        {
          v110 = v88 >> 36;
          v111 = (_QWORD *)(v88 & 0xFFFFFFFF8);
          goto LABEL_161;
        }
        v111 = (_QWORD *)(v88 & 0xFFFFFFFF8);
        LODWORD(v110) = *(_DWORD *)((v88 & 0xFFFFFFFF8) + 8);
      }
      v111 = (_QWORD *)*v111;
LABEL_161:
      if (v111)
        v112 = v111 + 1;
      else
        v112 = (_QWORD *)v64;
      v113 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*v112 + 56) + 80)
                               + ((unint64_t)v110 >> 2));
      v114 = *v113;
      if ((v114 | 2) == 0x82)
        v114 = v113[1];
      if (v114 > 3 || v114 == 2)
      {
LABEL_112:
        v91 = (v89 & 3) + (v89 >> 2);
        v92 = *(unsigned int **)v87;
        if (**(unsigned int **)v87 <= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x1984316F0);
        }
        v93 = v88 & 1;
        goto LABEL_114;
      }
      v91 = (v89 & 3) + (v89 >> 2);
      v92 = (unsigned int *)*((_QWORD *)v87 + 1);
      if (*v92 <= v91)
      {
        __break(0xC471u);
        JUMPOUT(0x198431650);
      }
LABEL_114:
      if (v93 && (v88 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v88 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
        v31 = (unint64_t)v214;
      }
      v94 = *(_DWORD *)(v31 + 20);
      v95 = v216;
      if (v94)
      {
        v96 = (unint64_t)v238;
        v97 = v216 - v94;
        v98 = v94 - 1;
        do
        {
          if ((v97 < v217 || v97 >= v208)
            && ((*(_DWORD *)(*(_QWORD *)&v92[4 * v91 + 2] + 4 * (v98 >> 5)) >> v98) & 1) != 0)
          {
            if (v97 < 0)
            {
              v99 = v240 + (unint64_t)(v98 - v216);
              v100 = v240 + v98 - v216;
            }
            else
            {
              v100 = v97 - 5;
              v99 = v97 - 5;
            }
            *(_DWORD *)(v96 + ((v99 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v100;
          }
          ++v97;
          --v98;
        }
        while (v98 != -1);
      }
      v101 = *v212;
      if ((*v212 & 2) != 0)
      {
        v116 = 3;
        v117 = 0xFFFFFFFFLL;
        v41 = (uint64_t *)v220;
        v102 = v215;
      }
      else
      {
        v41 = (uint64_t *)v220;
        v102 = v215;
        if ((v101 & 1) != 0)
        {
          LODWORD(v117) = *(_DWORD *)((v101 & 0xFFFFFFFF8) + 8);
          if ((v117 & 3) == 0)
            goto LABEL_129;
        }
        else
        {
          if ((v101 & 0x3000000000) == 0)
            goto LABEL_129;
          v117 = v101 >> 36;
        }
        v116 = v117 & 3;
        v41 = (uint64_t *)v220;
        v95 = v216;
        v31 = (unint64_t)v214;
        if ((v117 & 3) == 0)
        {
LABEL_129:
          if (!v102)
            goto LABEL_130;
          goto LABEL_200;
        }
        v117 = v117;
      }
      v118 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v31 + 56) + 80) + (v117 >> 2));
      v119 = *v118;
      if ((v119 | 2) == 0x82)
        v119 = v118[1];
      switch(v119)
      {
        case 0:
        case 1:
        case 3:
          if (v116 == 1)
            goto LABEL_178;
          goto LABEL_129;
        case 2:
LABEL_178:
          if (!v102)
          {
            *(_DWORD *)&v238[((v241 + (unint64_t)v240) >> 3) & 0x3FFFFFFC] |= 1 << (v241 + v240);
LABEL_130:
            if ((v211 & 1) != 0 && (v211 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v211 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
              v41 = (uint64_t *)v220;
            }
LABEL_24:
            if (v47 && (v46 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v46 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
              v41 = (uint64_t *)v220;
            }
            if (v43 != v242 && v242)
            {
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v232, (const JSC::DFG::NodeOrigin *)v45);
              JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator()((uint64_t)v233, (uint64_t)v232, v42, v155, v156, v157, v158, v159);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v232, v160, v161, v162, v163, v164, v165, v166);
              v41 = (uint64_t *)v220;
            }
            v242 = v43;
            if (!v43)
              goto LABEL_29;
            v70 = *(unsigned __int16 *)(v45 + 18);
            if (v70 > 0x27 || ((1 << v70) & 0xC000010000) == 0)
              goto LABEL_29;
            v71 = *(_QWORD **)(v45 + 72);
            v72 = v71;
            do
            {
              v73 = v72;
              v72 = (_QWORD *)*v72;
            }
            while (v72);
            if (v73 != v71)
              *v71 = v73;
            v31 = v73[3];
            if (!HIDWORD(v31))
            {
LABEL_189:
              if ((v31 & 0x80000000) != 0)
              {
                v122 = v31 ^ 0xFFFFFFFFLL;
                v123 = v237;
                goto LABEL_191;
              }
              v124 = (uint64_t)(((unint64_t)v31 << 32) - 0x500000000) >> 32;
LABEL_192:
              v125 = v234[v124];
              if (!v125)
                v125 = JSC::DFG::LiveCatchVariablePreservationPhase::newVariableAccessData(*v41, v31);
              v126 = *(_QWORD *)v45;
              if ((*(_QWORD *)v45 & 1) != 0)
              {
                v189 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
                if ((v126 & 2) != 0
                  || ((v190 = *(unsigned int *)((v126 & 0xFFFFFFFF8) + 8), (_DWORD)v190 != 0x3FFFFFFF)
                    ? (v191 = (_DWORD)v190 == -1)
                    : (v191 = 1),
                      v191))
                {
                  v192 = 2;
                }
                else if (v190 >> 28)
                {
                  v204 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v204 = v189;
                  *(_DWORD *)(v204 + 8) = v190;
                  v192 = 1;
                  v189 = v204;
                }
                else
                {
                  v192 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
                  v189 = v190 << 36;
                }
                v126 = v189 | v192;
              }
              v229 = v126;
              v127 = *(_QWORD *)(v45 + 8);
              if ((v127 & 1) != 0)
              {
                v193 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
                if ((v127 & 2) != 0
                  || (v194 = *(unsigned int *)((v127 & 0xFFFFFFFF8) + 8), (_DWORD)v194 == 0x3FFFFFFF)
                  || (_DWORD)v194 == -1)
                {
                  v195 = 2;
                }
                else if (v194 >> 28)
                {
                  v205 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v205 = v193;
                  *(_DWORD *)(v205 + 8) = v194;
                  v195 = 1;
                  v193 = v205;
                }
                else
                {
                  v195 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
                  v193 = v194 << 36;
                }
                v127 = v193 | v195;
              }
              v230 = v127;
              v231 = *(_WORD *)(v45 + 16);
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)&v222, v42, 0, 28, (uint64_t)&v229, v125, v36, v37);
              if ((v230 & 1) != 0 && (v230 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v230 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
              v41 = (uint64_t *)v220;
              if ((v229 & 1) != 0 && (v229 & 0xFFFFFFFF8) != 0)
              {
                WTF::fastFree(v229 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
                v41 = (uint64_t *)v220;
              }
              goto LABEL_29;
            }
            if (HIDWORD(v31) == 2)
            {
              v130 = v240 + (uint64_t)(int)v31 + v241;
              if (((*(_DWORD *)&v238[(v130 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v130) & 1) == 0)
                goto LABEL_29;
              v122 = (int)v31;
              v123 = v237 + (unint64_t)HIDWORD(v237);
LABEL_191:
              v124 = v122 + v123;
              goto LABEL_192;
            }
            if ((v31 & 0x80000000) != 0)
            {
              v74 = ~*((_DWORD *)v73 + 6) + (unint64_t)v240;
              v75 = &v238[(v74 >> 3) & 0x3FFFFFFC];
            }
            else
            {
              LOBYTE(v74) = v31 - 5;
              v75 = &v238[4 * ((unint64_t)((int)v31 - 5) >> 5)];
            }
            if (((*(_DWORD *)v75 >> v74) & 1) != 0)
              goto LABEL_189;
LABEL_29:
            v48 = *(unsigned __int16 *)(v45 + 18);
            if (v48 <= 0x27
              && (((1 << v48) & 0xC030018000) != 0 || v48 == 27 && *(_DWORD *)(*v41 + 944) != 2))
            {
              v49 = *(_QWORD **)(v45 + 72);
              v50 = v49;
              do
              {
                v51 = v50;
                v50 = (_QWORD *)*v50;
              }
              while (v50);
              if (v51 != v49)
              {
                *v49 = v51;
                v49 = *(_QWORD **)(v45 + 72);
              }
              v52 = v49;
              do
              {
                v53 = v52;
                v52 = (_QWORD *)*v52;
              }
              while (v52);
              if (v53 != v49)
                *v49 = v53;
              v54 = v53[3];
              if (HIDWORD(v54) == 2)
              {
                v55 = v237 + (uint64_t)(int)v54 + HIDWORD(v237);
              }
              else if ((v54 & 0x80000000) != 0)
              {
                v55 = (v53[3] ^ 0xFFFFFFFFLL) + v237;
              }
              else
              {
                v55 = (uint64_t)(((unint64_t)v54 << 32) - 0x500000000) >> 32;
              }
              v234[v55] = v51;
            }
            ++v42;
            v38 = v243;
            v56 = *((unsigned int *)v243 + 55);
            if (v42 >= v56)
            {
              v21 = v209;
              v20 = v210;
              v23 = v219;
              if (v242)
              {
                if (!(_DWORD)v56)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198431C7CLL);
                }
                v104 = *(_QWORD *)(*((_QWORD *)v243 + 26) + 8 * v56 - 8);
                v105 = *(_QWORD *)v104;
                if ((*(_QWORD *)v104 & 1) != 0)
                {
                  v171 = *(_QWORD *)(v105 & 0xFFFFFFFF8);
                  if ((v105 & 2) != 0
                    || ((v172 = *(unsigned int *)((v105 & 0xFFFFFFFF8) + 8), (_DWORD)v172 != 0x3FFFFFFF)
                      ? (v173 = (_DWORD)v172 == -1)
                      : (v173 = 1),
                        v173))
                  {
                    v174 = 2;
                  }
                  else if (v172 >> 28)
                  {
                    v200 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v200 = v171;
                    *(_DWORD *)(v200 + 8) = v172;
                    v174 = 1;
                    v171 = v200;
                  }
                  else
                  {
                    v174 = v171;
                    v171 = v172 << 36;
                  }
                  v105 = v171 | v174;
                  v21 = v209;
                  v20 = v210;
                  v23 = v219;
                }
                v106 = *(_QWORD *)(v104 + 8);
                if ((v106 & 1) != 0)
                {
                  v175 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                  if ((v106 & 2) != 0
                    || ((v176 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v176 != 0x3FFFFFFF)
                      ? (v177 = (_DWORD)v176 == -1)
                      : (v177 = 1),
                        v177))
                  {
                    v178 = 2;
                  }
                  else if (v176 >> 28)
                  {
                    v201 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v201 = v175;
                    *(_DWORD *)(v201 + 8) = v176;
                    v178 = 1;
                    v175 = v201;
                  }
                  else
                  {
                    v178 = v175;
                    v175 = v176 << 36;
                  }
                  v106 = v175 | v178;
                  v21 = v209;
                  v20 = v210;
                  v23 = v219;
                }
                v107 = *(_WORD *)(v104 + 16);
                v108 = v105;
                if ((v105 & 1) != 0)
                {
                  v179 = *(_QWORD *)(v105 & 0xFFFFFFFF8);
                  if ((v105 & 2) != 0
                    || ((v180 = *(unsigned int *)((v105 & 0xFFFFFFFF8) + 8), (_DWORD)v180 != 0x3FFFFFFF)
                      ? (v181 = (_DWORD)v180 == -1)
                      : (v181 = 1),
                        v181))
                  {
                    v182 = 2;
                  }
                  else if (v180 >> 28)
                  {
                    v202 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v202 = v179;
                    *(_DWORD *)(v202 + 8) = v180;
                    v182 = 1;
                    v179 = v202;
                  }
                  else
                  {
                    v182 = *(_QWORD *)(v105 & 0xFFFFFFFF8);
                    v179 = v180 << 36;
                  }
                  v108 = v179 | v182;
                  v21 = v209;
                  v20 = v210;
                  v23 = v219;
                }
                v226 = v108;
                v109 = v106;
                if ((v106 & 1) != 0)
                {
                  v183 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                  if ((v106 & 2) != 0
                    || ((v184 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v184 != 0x3FFFFFFF)
                      ? (v185 = (_DWORD)v184 == -1)
                      : (v185 = 1),
                        v185))
                  {
                    v186 = 2;
                  }
                  else if (v184 >> 28)
                  {
                    v203 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v203 = v183;
                    *(_DWORD *)(v203 + 8) = v184;
                    v186 = 1;
                    v183 = v203;
                  }
                  else
                  {
                    v186 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
                    v183 = v184 << 36;
                  }
                  v109 = v183 | v186;
                  v21 = v209;
                  v20 = v210;
                  v23 = v219;
                }
                v227 = v109;
                v228 = v107;
                JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator()((uint64_t)v233, (uint64_t)&v226, *((unsigned int *)v243 + 55), v33, v34, v35, v36, v37);
                if ((v227 & 1) != 0 && (v227 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v227 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
                v38 = v221;
                if ((v226 & 1) != 0 && (v226 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v226 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
                if ((v106 & 1) != 0 && (v106 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v106 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
                if ((v105 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v105 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
              }
              else
              {
                v38 = v221;
              }
LABEL_135:
              v103 = (unint64_t)v234;
              if (v234)
              {
                v234 = 0;
                v235 = 0;
                WTF::fastFree(v103, (void *)v31, v32, v33, v34, v35, v36, v37);
              }
              if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v44 & 0xFFFFFFFF8, (void *)v31, v32, v33, v34, v35, v36, v37);
              if (v238)
                WTF::fastFree((unint64_t)v238, (void *)v31, v32, v33, v34, v35, v36, v37);
              JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v222, v38);
              v24 = *(unsigned int *)(v20 + 60);
              v19 = v220;
LABEL_141:
              if (v24 > ++v23)
              {
                while (!*(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v23))
                {
                  if (v24 == ++v23)
                  {
                    v23 = v24;
                    goto LABEL_146;
                  }
                }
                v23 = v23;
              }
LABEL_146:
              if (v21 == v23)
              {
                v20 = *(_QWORD *)v19;
                goto LABEL_222;
              }
              goto LABEL_11;
            }
            goto LABEL_21;
          }
          JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::CodeOrigin)#1}::operator() const(JSC::CodeOrigin)::{lambda(JSC::Operand)#1}::operator()((uint64_t)&v238, (*(_QWORD *)(v102 + 24) >> 22) | 0x200000000);
          v95 = v216;
          break;
        case 4:
          goto LABEL_129;
        default:
          __break(0xC471u);
          JUMPOUT(0x198431A90);
      }
LABEL_200:
      if (*(_QWORD *)v102)
        v128 = **(_DWORD **)v102;
      else
        v128 = 0;
      v208 = v128 + v95 + 5;
      v218 = v95 + 5;
      if (v95 + 5 < v208)
      {
        v129 = v95 + 5;
        do
        {
          JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::CodeOrigin)#1}::operator() const(JSC::CodeOrigin)::{lambda(JSC::Operand)#1}::operator()((uint64_t)&v238, v129 | ((unint64_t)(v129 >> 31) << 32));
          ++v129;
          --v128;
        }
        while (v128);
      }
      v82 = *(_QWORD *)(v215 + 16);
      v213 = 1;
      v83 = (uint64_t *)(v215 + 16);
    }
  }
  return v10 != 0;
}

uint64_t JSC::DFG::performGraphPackingAndLivenessAnalysis(JSC::DFG *this, JSC::DFG::Graph *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  JSC::DFG *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  WTF *v59;
  WTF *v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *casual;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int *v95;
  int *v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  _DWORD *v102;
  int v103;
  _DWORD *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  uint64_t i;
  unsigned int v129;
  uint64_t v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _DWORD *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  WTF *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  JSC::DFG *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  WTF *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::DFG::Graph *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  WTF *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  _DWORD *v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  JSC::DFG::Graph *v245;
  unint64_t v246;
  uint64_t v247;
  BOOL v248;
  BOOL v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  WTF *v257;
  unint64_t v258;
  unint64_t v259;
  WTF *v260;
  uint64_t v261;
  WTF *v262;
  uint64_t v263;
  unint64_t v264;
  WTF *v265;
  uint64_t v267;
  unsigned int v268;
  unint64_t *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unsigned int v274;
  unint64_t *v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t *v287;
  unint64_t StatusReg;
  int *v289;
  uint64_t v290;
  int v291;
  uint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  __int16 v297;
  JSC::DFG *v298;
  __int128 v299;
  char v300;
  WTF *v301;
  uint64_t v302;
  uint64_t v303;
  WTF *v304;
  uint64_t v305;
  WTF *v306;
  uint64_t v307;
  WTF *v308;
  __int128 v309;
  _QWORD v310[2];
  __int128 v311;
  double v312;
  char v313;
  __int128 *v314;

  JSC::B3::SparseCollection<JSC::DFG::Node>::packIndices((uint64_t *)this + 129, a2, a3, a4, a5, a6, a7, a8);
  v294 = -1;
  v295 = -1;
  v296 = 0;
  v297 = 256;
  v298 = this;
  *(_QWORD *)&v299 = "liveness analysis";
  *((_QWORD *)&v299 + 1) = 18;
  v300 = 0;
  v301 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v294);
  v15 = v298;
  v16 = *((unsigned int *)v298 + 15);
  v302 = 0x8000000000000000;
  if (v16 >= 0x40)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v302, v16, 0);
    v15 = v298;
  }
  v17 = *((_QWORD *)v15 + 122);
  v304 = 0;
  v305 = 0;
  v303 = v17;
  v18 = *((unsigned int *)v15 + 15);
  if ((_DWORD)v18)
  {
    if (v18 <= 0x10)
      v19 = 16;
    else
      v19 = *((unsigned int *)v15 + 15);
    if (v19 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198433200);
    }
    v20 = (WTF *)WTF::fastMalloc((WTF *)(16 * v19));
    LODWORD(v305) = v19;
    v304 = v20;
    if (HIDWORD(v305) != (_DWORD)v18)
      bzero((char *)v20 + 16 * HIDWORD(v305), (16 * v18 - 16 * HIDWORD(v305)) & 0xFFFFFFFFFFFFFFF0);
  }
  HIDWORD(v305) = v18;
  v306 = 0;
  v307 = 0;
  v21 = *((unsigned int *)v298 + 15);
  if ((_DWORD)v21)
  {
    if (v21 <= 0x10)
      v22 = 16;
    else
      v22 = *((unsigned int *)v298 + 15);
    if (v22 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198433208);
    }
    v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
    LODWORD(v307) = v22;
    v306 = v23;
    if (HIDWORD(v307) != (_DWORD)v21)
      bzero((char *)v23 + 8 * HIDWORD(v307), ((8 * v21 - 8 * HIDWORD(v307) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  HIDWORD(v307) = v21;
  v308 = 0;
  JSC::DFG::FlowIndexing::recompute(*((JSC::DFG::FlowIndexing **)v298 + 122), (void *)v16, v9, v10, v11, v12, v13, v14);
  v24 = *(unsigned int *)(*((_QWORD *)v298 + 122) + 8);
  v32 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  if ((_DWORD)v24)
  {
    if (v24 >> 30)
    {
LABEL_368:
      __break(0xC471u);
      JUMPOUT(0x198433190);
    }
    v33 = WTF::fastMalloc((WTF *)(4 * v24));
    *(_DWORD *)(v32 + 8) = v24;
    *(_QWORD *)v32 = v33;
  }
  *(_DWORD *)(v32 + 12) = v24;
  v34 = v308;
  v308 = (WTF *)v32;
  if (v34)
  {
    v35 = *((_QWORD *)v34 + 2);
    if (v35)
    {
      *((_QWORD *)v34 + 2) = 0;
      *((_DWORD *)v34 + 6) = 0;
      WTF::fastFree(v35, v25, v26, v27, v28, v29, v30, v31);
    }
    v36 = *(_QWORD *)v34;
    if (*(_QWORD *)v34)
    {
      *(_QWORD *)v34 = 0;
      *((_DWORD *)v34 + 2) = 0;
      WTF::fastFree(v36, v25, v26, v27, v28, v29, v30, v31);
    }
    WTF::fastFree((unint64_t)v34, v25, v26, v27, v28, v29, v30, v31);
  }
  v310[0] = "DFG";
  v310[1] = 4;
  v311 = v299;
  v312 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v279 = mach_absolute_time();
    v281 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v281 != -1)
    {
      *(_QWORD *)&v309 = &v313;
      v314 = &v309;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v314, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v280) = dword_1ECF4400C;
    v312 = (double)(v279 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v280 * 1000000000.0);
  }
  v37 = *((unsigned int *)v298 + 15);
  if (v302 < 0)
    v38 = 63;
  else
    v38 = *(_QWORD *)(2 * v302);
  if (v38 < v37)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v302, *((unsigned int *)v298 + 15), 0);
  if (v37)
  {
    v39 = 0;
    v40 = v298;
    v41 = *((unsigned int *)v298 + 15);
    do
    {
      if (v41 == v39)
      {
        __break(0xC471u);
        JUMPOUT(0x1984331D0);
      }
      if (*(_QWORD *)(*((_QWORD *)v40 + 6) + 8 * v39))
      {
        if (v302 >= 0)
          v42 = (uint64_t *)(2 * v302 + 8);
        else
          v42 = &v302;
        *(uint64_t *)((char *)v42 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
      }
      ++v39;
    }
    while (v37 != v39);
  }
  v43 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = v37;
  v286 = v37;
LABEL_41:
  while (2)
  {
    v45 = v43;
    v46 = 16 * v44;
    while (v46)
    {
      --v44;
      if (v302 >= 0)
        v47 = (uint64_t *)(2 * v302 + 8);
      else
        v47 = &v302;
      v48 = (v44 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v49 = *(uint64_t *)((char *)v47 + v48);
      *(uint64_t *)((char *)v47 + v48) = v49 & ~(1 << v44);
      v46 -= 16;
      if ((v49 & (1 << v44)) != 0)
      {
        v50 = v44;
        if (*((unsigned int *)v298 + 15) <= (unint64_t)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x198433198);
        }
        v51 = *(_QWORD *)(*((_QWORD *)v298 + 6) + 8 * v44);
        *((_DWORD *)v308 + 7) = 0;
        if (HIDWORD(v307) <= (unint64_t)v44)
        {
          __break(0xC471u);
          JUMPOUT(0x1984331A0);
        }
        v52 = (_DWORD *)*((_QWORD *)v306 + v44);
        v291 = v45;
        if (!v52)
        {
          v55 = 0;
          v53 = 0;
LABEL_59:
          v54 = &v52[v53];
          goto LABEL_60;
        }
        v53 = *(v52 - 1);
        v54 = &v52[v53];
        if (!*(v52 - 3))
        {
          v55 = &v52[v53];
          goto LABEL_59;
        }
        v55 = v52;
        if ((_DWORD)v53)
        {
          v56 = 4 * v53;
          v55 = v52;
          while (*v55 >= 0xFFFFFFFE)
          {
            ++v55;
            v56 -= 4;
            if (!v56)
            {
              v55 = v54;
              break;
            }
          }
        }
LABEL_60:
        if (v52)
          v57 = &v52[*(v52 - 1)];
        else
          v57 = 0;
        v293 = v50;
        while (v55 != v57)
        {
          v142 = *v55;
          v143 = v308;
          v144 = *(_QWORD *)v308;
          v145 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v142);
          v146 = *((unsigned int *)v308 + 7);
          if (v146 <= v145 || *(_DWORD *)(*((_QWORD *)v308 + 2) + 4 * v145) != (_DWORD)v142)
          {
            v147 = (_QWORD *)((char *)v308 + 16);
            LODWORD(v309) = *v55;
            if ((_DWORD)v146 == *((_DWORD *)v308 + 6))
            {
              *(_DWORD *)(*((_QWORD *)v143 + 2) + 4 * *((unsigned int *)v143 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v147, v146 + 1, (unint64_t)&v309);
              v144 = *(_QWORD *)v143;
            }
            else
            {
              *(_DWORD *)(*v147 + 4 * v146) = v142;
            }
            ++*((_DWORD *)v143 + 7);
            *(_DWORD *)(v144 + 4 * v142) = v146;
          }
          v148 = v55 + 1;
          v55 = v54;
          if (v148 != v54)
          {
            v55 = v148;
            while (*v55 >= 0xFFFFFFFE)
            {
              if (++v55 == v54)
              {
                v55 = v54;
                break;
              }
            }
          }
        }
        v58 = *(_DWORD *)(v51 + 220);
        if (v58)
        {
          while (1)
          {
            while (1)
            {
              if (*(_DWORD *)(v51 + 220) <= --v58)
                goto LABEL_368;
              v150 = *(_QWORD *)(*(_QWORD *)(v51 + 208) + 8 * v58);
              v151 = *(unsigned __int16 *)(v150 + 18);
              if (v151 != 26)
                break;
              v179 = *(_QWORD *)(v150 + 72);
              if (*(_WORD *)(v179 + 18) != 27)
              {
                JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v303, *(JSC::DFG::Node **)(v150 + 72), (const WTF::CString *)"./dfg/DFGFlowIndexing.h", (const char *)0x3E, "unsigned int JSC::DFG::FlowIndexing::shadowIndex(Node *) const", "node->op() == Phi");
                WTFCrashWithInfoImpl(62, "./dfg/DFGFlowIndexing.h", "unsigned int JSC::DFG::FlowIndexing::shadowIndex(Node *) const");
              }
              v180 = *(unsigned int *)(*(_QWORD *)(v303 + 16) + 4 * *(unsigned int *)(v179 + 20));
              v181 = v308;
              v182 = *(_QWORD *)v308;
              v183 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v180);
              v184 = *((unsigned int *)v308 + 7);
              if (v184 > v183)
              {
                v185 = *((_QWORD *)v308 + 2);
                if (*(_DWORD *)(v185 + 4 * v183) == (_DWORD)v180)
                {
                  v186 = *(unsigned int *)(v185 + 4 * v184 - 4);
                  *(_DWORD *)(v185 + 4 * v183) = v186;
                  *(_DWORD *)(v182 + 4 * v186) = v183;
                  LODWORD(v184) = *((_DWORD *)v181 + 7) - 1;
                  *((_DWORD *)v181 + 7) = v184;
                }
              }
              v187 = *(_QWORD *)(v150 + 24);
              v188 = *(unsigned int *)((v187 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
              v189 = *(unsigned int *)(v182 + 4 * v188);
              if (v184 > v189
                && *(_DWORD *)(*((_QWORD *)v181 + 2) + 4 * v189) == (_DWORD)v188)
              {
                v191 = 0;
              }
              else
              {
                v190 = (_QWORD *)((char *)v181 + 16);
                LODWORD(v309) = *(_DWORD *)((v187 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                if ((_DWORD)v184 == *((_DWORD *)v181 + 6))
                {
                  *(_DWORD *)(*((_QWORD *)v181 + 2) + 4 * *((unsigned int *)v181 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v190, v184 + 1, (unint64_t)&v309);
                  v182 = *(_QWORD *)v181;
                  v187 = *(_QWORD *)(v150 + 24);
                }
                else
                {
                  *(_DWORD *)(*v190 + 4 * v184) = v188;
                }
                ++*((_DWORD *)v181 + 7);
                *(_DWORD *)(v182 + 4 * v188) = v184;
                v191 = 0x2000000000000;
              }
              *(_QWORD *)(v150 + 24) = v187 & 0xFFFDFFFFFFFFFFFFLL | v191;
              if (!v58)
                goto LABEL_64;
            }
            if (v151 == 27)
            {
              v204 = v308;
              v205 = *(unsigned int *)(v150 + 20);
              v206 = *(_QWORD *)v308;
              v207 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v205);
              v208 = *((unsigned int *)v308 + 7);
              if (v208 > v207)
              {
                v212 = *((_QWORD *)v308 + 2);
                if (*(_DWORD *)(v212 + 4 * v207) == (_DWORD)v205)
                {
                  v213 = *(unsigned int *)(v212 + 4 * v208 - 4);
                  *(_DWORD *)(v212 + 4 * v207) = v213;
                  *(_DWORD *)(v206 + 4 * v213) = v207;
                  LODWORD(v208) = *((_DWORD *)v204 + 7) - 1;
                  *((_DWORD *)v204 + 7) = v208;
                  v205 = *(unsigned int *)(v150 + 20);
                }
              }
              v209 = *(unsigned int *)(*(_QWORD *)(v303 + 16) + 4 * v205);
              v210 = *(unsigned int *)(v206 + 4 * v209);
              if (v208 > v210
                && *(_DWORD *)(*((_QWORD *)v204 + 2) + 4 * v210) == (_DWORD)v209)
              {
                goto LABEL_172;
              }
              v211 = (_QWORD *)((char *)v204 + 16);
              LODWORD(v309) = v209;
              if ((_DWORD)v208 == *((_DWORD *)v204 + 6))
              {
                *(_DWORD *)(*((_QWORD *)v204 + 2) + 4 * *((unsigned int *)v204 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v211, v208 + 1, (unint64_t)&v309);
                v206 = *(_QWORD *)v204;
              }
              else
              {
                *(_DWORD *)(*v211 + 4 * v208) = v209;
              }
              ++*((_DWORD *)v204 + 7);
              *(_DWORD *)(v206 + 4 * v209) = v208;
              if (!v58)
                break;
            }
            else
            {
              v152 = v308;
              v153 = *(unsigned int *)(v150 + 20);
              v154 = *(_QWORD *)v308;
              v155 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v153);
              v156 = *((unsigned int *)v308 + 7);
              if (v156 > v155)
              {
                v157 = *((_QWORD *)v308 + 2);
                if (*(_DWORD *)(v157 + 4 * v155) == (_DWORD)v153)
                {
                  v158 = *(unsigned int *)(v157 + 4 * v156 - 4);
                  *(_DWORD *)(v157 + 4 * v155) = v158;
                  *(_DWORD *)(v154 + 4 * v158) = v155;
                  LODWORD(v156) = *((_DWORD *)v152 + 7) - 1;
                  *((_DWORD *)v152 + 7) = v156;
                }
              }
              v159 = *(_QWORD *)(v150 + 24);
              if ((*(_BYTE *)(v150 + 56) & 0x10) != 0)
              {
                v192 = *(_QWORD *)(v150 + 32);
                if ((int)v192 + (int)v159 > v159)
                {
                  v193 = v298;
                  v194 = *(_QWORD *)(v150 + 24);
                  do
                  {
                    if (v194 >= *((unsigned int *)v193 + 41))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984331B8);
                    }
                    v195 = *((_QWORD *)v193 + 19);
                    v196 = *(_QWORD *)(v195 + 8 * v194);
                    if ((v196 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v197 = v308;
                      v198 = *(unsigned int *)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                      v199 = *(_QWORD *)v308;
                      v200 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v198);
                      v201 = *((unsigned int *)v308 + 7);
                      if (v201 > v200
                        && *(_DWORD *)(*((_QWORD *)v308 + 2) + 4 * v200) == (_DWORD)v198)
                      {
                        v203 = 0;
                      }
                      else
                      {
                        v202 = (_QWORD *)((char *)v308 + 16);
                        LODWORD(v309) = *(_DWORD *)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                        if ((_DWORD)v201 == *((_DWORD *)v308 + 6))
                        {
                          *(_DWORD *)(*((_QWORD *)v197 + 2) + 4 * *((unsigned int *)v197 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v202, v201 + 1, (unint64_t)&v309);
                          v199 = *(_QWORD *)v197;
                          v196 = *(_QWORD *)(v195 + 8 * v194);
                        }
                        else
                        {
                          *(_DWORD *)(*v202 + 4 * v201) = v198;
                        }
                        ++*((_DWORD *)v197 + 7);
                        *(_DWORD *)(v199 + 4 * v198) = v201;
                        v203 = 0x2000000000000;
                      }
                      *(_QWORD *)(v195 + 8 * v194) = v196 & 0xFFFDFFFFFFFFFFFFLL | v203;
                      v159 = *(_QWORD *)(v150 + 24);
                      v192 = *(_QWORD *)(v150 + 32);
                    }
                    ++v194;
                  }
                  while (v194 < (v159 + v192));
                }
              }
              else if ((v159 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v160 = *(unsigned int *)((v159 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                v161 = *(unsigned int *)(v154 + 4 * v160);
                if (v156 > v161
                  && *(_DWORD *)(*((_QWORD *)v152 + 2) + 4 * v161) == (_DWORD)v160)
                {
                  v163 = 0;
                }
                else
                {
                  v162 = (_QWORD *)((char *)v152 + 16);
                  LODWORD(v309) = *(_DWORD *)((v159 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                  if ((_DWORD)v156 == *((_DWORD *)v152 + 6))
                  {
                    *(_DWORD *)(*((_QWORD *)v152 + 2) + 4 * *((unsigned int *)v152 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v162, v156 + 1, (unint64_t)&v309);
                    v154 = *(_QWORD *)v152;
                    v159 = *(_QWORD *)(v150 + 24);
                  }
                  else
                  {
                    *(_DWORD *)(*v162 + 4 * v156) = v160;
                  }
                  ++*((_DWORD *)v152 + 7);
                  *(_DWORD *)(v154 + 4 * v160) = v156;
                  v163 = 0x2000000000000;
                }
                *(_QWORD *)(v150 + 24) = v159 & 0xFFFDFFFFFFFFFFFFLL | v163;
                v164 = *(_QWORD *)(v150 + 32);
                if ((v164 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v165 = v308;
                  v166 = *(unsigned int *)((v164 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                  v167 = *(_QWORD *)v308;
                  v168 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v166);
                  v169 = *((unsigned int *)v308 + 7);
                  if (v169 > v168
                    && *(_DWORD *)(*((_QWORD *)v308 + 2) + 4 * v168) == (_DWORD)v166)
                  {
                    v171 = 0;
                  }
                  else
                  {
                    v170 = (_QWORD *)((char *)v308 + 16);
                    LODWORD(v309) = *(_DWORD *)((v164 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                    if ((_DWORD)v169 == *((_DWORD *)v308 + 6))
                    {
                      *(_DWORD *)(*((_QWORD *)v165 + 2) + 4 * *((unsigned int *)v165 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v170, v169 + 1, (unint64_t)&v309);
                      v167 = *(_QWORD *)v165;
                      v164 = *(_QWORD *)(v150 + 32);
                    }
                    else
                    {
                      *(_DWORD *)(*v170 + 4 * v169) = v166;
                    }
                    ++*((_DWORD *)v165 + 7);
                    *(_DWORD *)(v167 + 4 * v166) = v169;
                    v171 = 0x2000000000000;
                  }
                  *(_QWORD *)(v150 + 32) = v164 & 0xFFFDFFFFFFFFFFFFLL | v171;
                  v172 = *(_QWORD *)(v150 + 40);
                  if ((v172 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v173 = v308;
                    v174 = *(unsigned int *)((v172 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                    v175 = *(_QWORD *)v308;
                    v176 = *(unsigned int *)(*(_QWORD *)v308 + 4 * v174);
                    v177 = *((unsigned int *)v308 + 7);
                    if (v177 > v176
                      && *(_DWORD *)(*((_QWORD *)v308 + 2) + 4 * v176) == (_DWORD)v174)
                    {
                      v149 = 0;
                    }
                    else
                    {
                      v178 = (_QWORD *)((char *)v308 + 16);
                      LODWORD(v309) = *(_DWORD *)((v172 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
                      if ((_DWORD)v177 == *((_DWORD *)v308 + 6))
                      {
                        *(_DWORD *)(*((_QWORD *)v173 + 2) + 4 * *((unsigned int *)v173 + 7)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v177 + 1, (unint64_t)&v309);
                        v175 = *(_QWORD *)v173;
                        v172 = *(_QWORD *)(v150 + 40);
                      }
                      else
                      {
                        *(_DWORD *)(*v178 + 4 * v177) = v174;
                      }
                      ++*((_DWORD *)v173 + 7);
                      *(_DWORD *)(v175 + 4 * v174) = v177;
                      v149 = 0x2000000000000;
                    }
                    *(_QWORD *)(v150 + 40) = v172 & 0xFFFDFFFFFFFFFFFFLL | v149;
                  }
                }
              }
LABEL_172:
              if (!v58)
                break;
            }
          }
        }
LABEL_64:
        if (HIDWORD(v305) <= v293)
        {
          __break(0xC471u);
          JUMPOUT(0x1984331A8);
        }
        v59 = v304;
        v60 = v308;
        v61 = (char *)v304 + v46;
        v62 = *((_DWORD *)v308 + 7);
        v63 = *(unsigned int *)((char *)v304 + v46 + 12);
        if ((_DWORD)v63 == v62)
        {
          v89 = 0;
          goto LABEL_148;
        }
        v64 = *(const void **)((char *)v304 + v46);
        if ((_DWORD)v63)
        {
          v65 = *(_QWORD *)v308;
          v66 = 4 * v63;
          v67 = *(unsigned int **)((char *)v304 + v46);
          do
          {
            v68 = *v67;
            v69 = *(unsigned int *)(v65 + 4 * v68);
            if (v62 > v69)
            {
              v70 = *((_QWORD *)v60 + 2);
              if (*(_DWORD *)(v70 + 4 * v69) == (_DWORD)v68)
              {
                v71 = *(unsigned int *)(v70 + 4 * v62 - 4);
                *(_DWORD *)(v70 + 4 * v69) = v71;
                *(_DWORD *)(v65 + 4 * v71) = v69;
                v62 = *((_DWORD *)v60 + 7) - 1;
                *((_DWORD *)v60 + 7) = v62;
              }
            }
            ++v67;
            v66 -= 4;
          }
          while (v66);
          v72 = *((unsigned int *)v61 + 3);
        }
        else
        {
          v72 = 0;
        }
        v73 = (int *)*((_QWORD *)v60 + 2);
        v74 = v72 + v62;
        v75 = (char *)v59 + v46;
        if (v74 <= *(unsigned int *)((char *)v59 + v46 + 8))
          goto LABEL_85;
        if (v74 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x1984331C8);
        }
        v76 = 4 * v74;
        v77 = *(_QWORD *)(StatusReg + 752);
        if (!v77)
        {
LABEL_347:
          casual = (void *)bmalloc_allocate_casual(v76, 1);
          goto LABEL_84;
        }
        v78 = (unint64_t)(v76 + 15) >> 4;
        if (v74 <= 0x68)
        {
          v79 = 23 * v78 + 7;
        }
        else
        {
          if (v74 > 0x9C4)
            goto LABEL_347;
          v79 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v78 + 626);
          if (*(_DWORD *)(v77 + 8052) <= v79)
            goto LABEL_347;
        }
        v80 = v77 + 8 * v79;
        v81 = v80 + 8064;
        *(_BYTE *)(v80 + 8064) = 1;
        v82 = *(unsigned int *)(v80 + 8080);
        if ((_DWORD)v82)
        {
          *(_DWORD *)(v81 + 16) = v82 - *(_DWORD *)(v81 + 20);
          casual = (void *)(*(_QWORD *)(v81 + 8) - v82);
          goto LABEL_83;
        }
        v139 = *(_QWORD *)(v81 + 40);
        v140 = *(_QWORD *)(v81 + 24);
        if (!v139)
        {
          if (*(_BYTE *)(v81 + 5) == 6)
          {
            v273 = *(unsigned int *)(v81 + 32);
            v274 = *(_DWORD *)(v81 + 36);
            if (v273 < v274)
            {
              *(_QWORD *)(v81 + 8 * v273 + 56) = 0;
              v275 = (unint64_t *)(v77 + 8128 + 8 * v79 + 8 * v273);
              v276 = v274 - 1 - v273;
              while (v276)
              {
                v140 += 1024;
                v278 = *v275++;
                v277 = v278;
                LODWORD(v273) = v273 + 1;
                --v276;
                if (v278)
                {
                  v139 = __rbit64(v277);
                  *(_DWORD *)(v81 + 32) = v273;
                  *(_QWORD *)(v81 + 24) = v140;
                  goto LABEL_153;
                }
              }
              *(_DWORD *)(v81 + 32) = v274;
            }
          }
          *(_BYTE *)v81 = 0;
          goto LABEL_347;
        }
LABEL_153:
        v141 = __clz(v139);
        *(_QWORD *)(v81 + 40) = v139 & ~(0x8000000000000000 >> v141);
        casual = (void *)(v140 + 16 * v141);
LABEL_83:
        *(_BYTE *)v81 = 0;
LABEL_84:
        *((_DWORD *)v75 + 2) = v74;
        *(_QWORD *)((char *)v59 + v46) = casual;
        memcpy(casual, v64, 4 * v72);
        if (v64)
        {
          if (*(const void **)((char *)v59 + v46) == v64)
          {
            *(_QWORD *)((char *)v59 + v46) = 0;
            *((_DWORD *)v75 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v64, v25, v26, v27, v28, v29, v30, v31);
        }
LABEL_85:
        if (v62)
        {
          v84 = *(_QWORD *)v61;
          v85 = *((_DWORD *)v61 + 3);
          v86 = 4 * v62;
          do
          {
            v87 = *v73++;
            *(_DWORD *)(v84 + 4 * v85) = v87;
            v85 = *((_DWORD *)v61 + 3) + 1;
            *((_DWORD *)v61 + 3) = v85;
            v86 -= 4;
          }
          while (v86);
        }
        v88 = *(unsigned int *)(v51 + 52);
        v89 = 0;
        if ((_DWORD)v88)
        {
          v90 = *(uint64_t **)(v51 + 40);
          v287 = &v90[v88];
          while (1)
          {
            v91 = *v90;
            v92 = *(unsigned int *)(*v90 + 8);
            if (HIDWORD(v307) <= v92)
            {
              __break(0xC471u);
              JUMPOUT(0x1984331B0);
            }
            v292 = v90;
            v93 = *((unsigned int *)v308 + 7);
            if ((_DWORD)v93)
              break;
LABEL_147:
            v90 = v292 + 1;
            if (v292 + 1 == v287)
              goto LABEL_148;
          }
          v94 = (uint64_t *)((char *)v306 + 8 * v92);
          v95 = (int *)*((_QWORD *)v308 + 2);
          v96 = &v95[v93];
          while (2)
          {
            v97 = *v95;
            v98 = *v94;
            if (*v94
              || (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(v94, 0), (v98 = *v94) != 0))
            {
              v99 = *(_DWORD *)(v98 - 8);
            }
            else
            {
              v99 = 0;
            }
            v100 = 9 * ((v97 + ~(v97 << 15)) ^ ((v97 + ~(v97 << 15)) >> 10));
            v101 = v99 & (((v100 ^ (v100 >> 6)) + ~((v100 ^ (v100 >> 6)) << 11)) ^ (((v100 ^ (v100 >> 6))
                                                                                   + ~((v100 ^ (v100 >> 6)) << 11)) >> 16));
            v102 = (_DWORD *)(v98 + 4 * v101);
            v103 = *v102;
            if (*v102 != -1)
            {
              v104 = 0;
              v105 = 1;
              while (v103 != v97)
              {
                if (v103 == -2)
                  v104 = v102;
                v101 = (v101 + v105) & v99;
                v102 = (_DWORD *)(v98 + 4 * v101);
                v103 = *v102;
                ++v105;
                if (*v102 == -1)
                {
                  if (v104)
                  {
                    *v104 = -1;
                    --*(_DWORD *)(*v94 - 16);
                    v102 = v104;
                  }
                  goto LABEL_103;
                }
              }
LABEL_113:
              if (++v95 == v96)
                goto LABEL_147;
              continue;
            }
            break;
          }
LABEL_103:
          *v102 = v97;
          v106 = *v94;
          if (*v94)
            v107 = *(_DWORD *)(v106 - 12) + 1;
          else
            v107 = 1;
          *(_DWORD *)(v106 - 12) = v107;
          v108 = *v94;
          if (*v94)
            v109 = *(_DWORD *)(v108 - 12);
          else
            v109 = 0;
          v110 = (*(_DWORD *)(v108 - 16) + v109);
          v111 = *(unsigned int *)(v108 - 4);
          if (v111 > 0x400)
          {
            if (v111 > 2 * v110)
              goto LABEL_109;
            v117 = *(_DWORD *)(v108 - 12);
          }
          else
          {
            if (3 * v111 > 4 * v110)
            {
LABEL_109:
              v112 = *(unsigned int *)(v91 + 8);
              if (v302 >= 0)
                v113 = (uint64_t *)(2 * v302 + 8);
              else
                v113 = &v302;
              v114 = (v112 >> 3) & 0x1FFFFFF8;
              v115 = 1 << v112;
              v116 = *(uint64_t *)((char *)v113 + v114);
              *(uint64_t *)((char *)v113 + v114) = v115 | v116;
              v89 |= (v115 & v116) == 0;
              goto LABEL_113;
            }
            v117 = *(_DWORD *)(v108 - 12);
            if (!(_DWORD)v111)
            {
              v118 = 8;
              goto LABEL_117;
            }
          }
          v118 = (_DWORD)v111 << (6 * v117 >= (2 * v111));
LABEL_117:
          v26 = 4 * v118;
          v119 = *(_QWORD *)(StatusReg + 752);
          v289 = v96;
          v290 = v91;
          if (v119)
          {
            v120 = (unint64_t)(v26 + 31) >> 4;
            if (v118 <= 0x64)
            {
              v121 = 23 * v120 + 7;
            }
            else
            {
              if (v118 > 0x9C0)
                goto LABEL_344;
              v121 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v120 + 626);
              if (*(_DWORD *)(v119 + 8052) <= v121)
                goto LABEL_344;
            }
            v122 = v119 + 8 * v121;
            v123 = v122 + 8064;
            *(_BYTE *)(v122 + 8064) = 1;
            v124 = *(unsigned int *)(v122 + 8080);
            if ((_DWORD)v124)
            {
              *(_DWORD *)(v123 + 16) = v124 - *(_DWORD *)(v123 + 20);
              v125 = *(_QWORD *)(v123 + 8) - v124;
              goto LABEL_129;
            }
            v136 = *(_QWORD *)(v123 + 40);
            v137 = *(_QWORD *)(v123 + 24);
            if (v136)
            {
LABEL_146:
              v138 = __clz(v136);
              *(_QWORD *)(v123 + 40) = v136 & ~(0x8000000000000000 >> v138);
              v125 = v137 + 16 * v138;
LABEL_129:
              *(_BYTE *)v123 = 0;
LABEL_130:
              if (v118)
              {
                v126 = v118;
                v127 = v117;
                memset((void *)(v125 + 16), 255, v26);
                v118 = v126;
                v117 = v127;
              }
              *v94 = v125 + 16;
              *(_DWORD *)(v125 + 12) = v118;
              *(_DWORD *)(*v94 - 8) = v118 - 1;
              *(_DWORD *)(*v94 - 16) = 0;
              *(_DWORD *)(*v94 - 12) = v117;
              v96 = v289;
              v91 = v290;
              if (!(_DWORD)v111)
                goto LABEL_142;
              for (i = 0; i != v111; ++i)
              {
                v129 = *(_DWORD *)(v108 + 4 * i);
                if (v129 <= 0xFFFFFFFD)
                {
                  v130 = *v94;
                  if (*v94)
                    v131 = *(_DWORD *)(v130 - 8);
                  else
                    v131 = 0;
                  v132 = 0;
                  v133 = 9 * ((v129 + ~(v129 << 15)) ^ ((v129 + ~(v129 << 15)) >> 10));
                  v134 = ((v133 ^ (v133 >> 6)) + ~((v133 ^ (v133 >> 6)) << 11)) ^ (((v133 ^ (v133 >> 6))
                                                                                  + ~((v133 ^ (v133 >> 6)) << 11)) >> 16);
                  do
                  {
                    v135 = v134 & v131;
                    v134 = ++v132 + v135;
                  }
                  while (*(_DWORD *)(v130 + 4 * v135) != -1);
                  *(_DWORD *)(v130 + 4 * v135) = v129;
                }
              }
              if (v108)
LABEL_142:
                WTF::fastFree(v108 - 16, v25, v26, v27, v28, v29, v30, v31);
              goto LABEL_109;
            }
            if (*(_BYTE *)(v123 + 5) == 6)
            {
              v267 = *(unsigned int *)(v123 + 32);
              v268 = *(_DWORD *)(v123 + 36);
              if (v267 < v268)
              {
                *(_QWORD *)(v123 + 8 * v267 + 56) = 0;
                v269 = (unint64_t *)(v119 + 8128 + 8 * v121 + 8 * v267);
                v270 = v268 - 1 - v267;
                while (v270)
                {
                  v137 += 1024;
                  v272 = *v269++;
                  v271 = v272;
                  LODWORD(v267) = v267 + 1;
                  --v270;
                  if (v272)
                  {
                    v136 = __rbit64(v271);
                    *(_DWORD *)(v123 + 32) = v267;
                    *(_QWORD *)(v123 + 24) = v137;
                    goto LABEL_146;
                  }
                }
                *(_DWORD *)(v123 + 32) = v268;
              }
            }
            *(_BYTE *)v123 = 0;
          }
LABEL_344:
          v282 = v118;
          v283 = 4 * v118;
          v284 = v117;
          v285 = bmalloc_allocate_casual(v26 + 16, 1);
          v26 = v283;
          v117 = v284;
          v125 = v285;
          v118 = v282;
          goto LABEL_130;
        }
LABEL_148:
        v43 = v291 | v89;
        v44 = v293;
        v37 = v286;
        goto LABEL_41;
      }
    }
    v43 = 0;
    v44 = v37;
    if ((v45 & 1) != 0)
      continue;
    break;
  }
  if (v37)
  {
    do
    {
      LODWORD(v37) = v37 - 1;
      if (*((_DWORD *)v298 + 15) <= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1984331D8);
      }
      v214 = *(_QWORD *)(*((_QWORD *)v298 + 6) + 8 * v37);
      if (!v214)
        continue;
      if (HIDWORD(v305) <= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1984331E0);
      }
      v215 = (char *)v304 + 16 * v37;
      v216 = *((unsigned int *)v215 + 3);
      if ((_DWORD)v216)
      {
        if (v216 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1984331F0);
        }
        v217 = WTF::fastMalloc((WTF *)(8 * v216));
        v218 = v217;
        v219 = *((unsigned int *)v215 + 3);
        if ((_DWORD)v219)
        {
          v220 = 0;
          v221 = *(_QWORD *)v215;
          v222 = v303;
          v223 = *(unsigned int *)(v303 + 28);
          v224 = *(JSC::DFG::Graph **)v303;
          do
          {
            v225 = *(unsigned int *)(v221 + 4 * v220);
            if (v223 <= v225)
              v226 = *(_QWORD *)(*((_QWORD *)v224 + 129)
                               + 8 * *(unsigned int *)(*(_QWORD *)(v222 + 32) + 4 * (v225 - v223))) | 1;
            else
              v226 = *(_QWORD *)(*((_QWORD *)v224 + 129) + 8 * v225);
            *(_QWORD *)(v217 + 8 * v220++) = v226;
          }
          while (v219 != v220);
        }
      }
      else
      {
        LODWORD(v219) = 0;
        v218 = 0;
      }
      v227 = *(_QWORD *)(v214 + 200);
      v228 = *(_QWORD *)(v227 + 64);
      if (v228)
      {
        *(_QWORD *)(v227 + 64) = 0;
        *(_DWORD *)(v227 + 72) = 0;
        WTF::fastFree(v228, v25, v26, v27, v28, v29, v30, v31);
      }
      *(_QWORD *)(v227 + 64) = v218;
      *(_DWORD *)(v227 + 72) = v216;
      *(_DWORD *)(v227 + 76) = v219;
      if (HIDWORD(v307) <= v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1984331E8);
      }
      v229 = v306;
      v230 = *((_QWORD *)v306 + v37);
      if (v230)
      {
        v231 = *(unsigned int *)(v230 - 12);
        if ((_DWORD)v231)
        {
          if (v231 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1984331F8);
          }
          v232 = WTF::fastMalloc((WTF *)(8 * v231));
          v233 = v232;
          v234 = *((_QWORD *)v229 + v37);
          if (v234 && *(_DWORD *)(v234 - 12))
          {
            v235 = *(unsigned int *)(v234 - 4);
            if ((_DWORD)v235)
            {
              v236 = 4 * v235;
              v237 = (_DWORD *)*((_QWORD *)v229 + v37);
              while (*v237 >= 0xFFFFFFFE)
              {
                ++v237;
                v236 -= 4;
                if (!v236)
                  goto LABEL_263;
              }
            }
            else
            {
              v237 = (_DWORD *)*((_QWORD *)v229 + v37);
            }
            v241 = (_DWORD *)(v234 + 4 * v235);
            if (v237 != v241)
            {
              v242 = 0;
              v243 = v303;
              v244 = *(unsigned int *)(v303 + 28);
              v245 = *(JSC::DFG::Graph **)v303;
              v246 = *v237;
LABEL_273:
              if (v244 <= v246)
                v247 = *(_QWORD *)(*((_QWORD *)v245 + 129)
                                 + 8 * *(unsigned int *)(*(_QWORD *)(v243 + 32) + 4 * (v246 - v244))) | 1;
              else
                v247 = *(_QWORD *)(*((_QWORD *)v245 + 129) + 8 * v246);
              v238 = v242 + 1;
              *(_QWORD *)(v232 + 8 * v242) = v247;
              while (1)
              {
                if (++v237 == v241)
                  goto LABEL_264;
                v246 = *v237;
                if (v246 < 0xFFFFFFFE)
                {
                  ++v242;
                  if (v237 != v241)
                    goto LABEL_273;
                  goto LABEL_264;
                }
              }
            }
          }
        }
        else
        {
          v233 = 0;
        }
      }
      else
      {
        v233 = 0;
        LODWORD(v231) = 0;
      }
LABEL_263:
      v238 = 0;
LABEL_264:
      v239 = *(_QWORD *)(v214 + 200);
      v240 = *(_QWORD *)(v239 + 80);
      if (v240)
      {
        *(_QWORD *)(v239 + 80) = 0;
        *(_DWORD *)(v239 + 88) = 0;
        WTF::fastFree(v240, v25, v26, v27, v28, v29, v30, v31);
      }
      *(_QWORD *)(v239 + 80) = v233;
      *(_DWORD *)(v239 + 88) = v231;
      *(_DWORD *)(v239 + 92) = v238;
    }
    while ((_DWORD)v37);
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v248 = (*(_DWORD *)(*((_QWORD *)v298 + 3) + 16) & 0xFFFFFFFE) == 4) : (v248 = 0),
        !v248 ? (v249 = BYTE2(qword_1ECF4C32A) == 0) : (v249 = 0),
        !v249))
  {
    v309 = v299;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v298 + 1088, "Phase ", (uint64_t)&v309, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v310);
  v257 = v308;
  v308 = 0;
  if (v257)
  {
    v258 = *((_QWORD *)v257 + 2);
    if (v258)
    {
      *((_QWORD *)v257 + 2) = 0;
      *((_DWORD *)v257 + 6) = 0;
      WTF::fastFree(v258, v250, v251, v252, v253, v254, v255, v256);
    }
    v259 = *(_QWORD *)v257;
    if (*(_QWORD *)v257)
    {
      *(_QWORD *)v257 = 0;
      *((_DWORD *)v257 + 2) = 0;
      WTF::fastFree(v259, v250, v251, v252, v253, v254, v255, v256);
    }
    WTF::fastFree((unint64_t)v257, v250, v251, v252, v253, v254, v255, v256);
  }
  v260 = v306;
  if (HIDWORD(v307))
  {
    v261 = 8 * HIDWORD(v307);
    do
    {
      if (*(_QWORD *)v260)
        WTF::fastFree(*(_QWORD *)v260 - 16, v250, v251, v252, v253, v254, v255, v256);
      v260 = (WTF *)((char *)v260 + 8);
      v261 -= 8;
    }
    while (v261);
    v260 = v306;
  }
  if (v260)
  {
    v306 = 0;
    LODWORD(v307) = 0;
    WTF::fastFree((unint64_t)v260, v250, v251, v252, v253, v254, v255, v256);
  }
  v262 = v304;
  if (HIDWORD(v305))
  {
    v263 = 16 * HIDWORD(v305);
    do
    {
      v264 = *(_QWORD *)v262;
      if (*(_QWORD *)v262)
      {
        *(_QWORD *)v262 = 0;
        *((_DWORD *)v262 + 2) = 0;
        WTF::fastFree(v264, v250, v251, v252, v253, v254, v255, v256);
      }
      v262 = (WTF *)((char *)v262 + 16);
      v263 -= 16;
    }
    while (v263);
    v262 = v304;
  }
  if (v262)
  {
    v304 = 0;
    LODWORD(v305) = 0;
    WTF::fastFree((unint64_t)v262, v250, v251, v252, v253, v254, v255, v256);
  }
  if ((v302 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v302, v250, v251, v252, v253, v254, v255, v256);
  if (HIBYTE(qword_1ECF4C32A) && !v300)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v294, (uint64_t)v250, v251, v252, v253, v254, v255, v256);
  v265 = v301;
  v301 = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 1)
      WTF::fastFree((unint64_t)v265, v250, v251, v252, v253, v254, v255, v256);
    else
      --*(_DWORD *)v265;
  }
  return 1;
}

WTF *JSC::DFG::createPreHeader(JSC::DFG *this, JSC::DFG::Graph *a2, JSC::DFG::BlockInsertionSet *a3, JSC::DFG::BasicBlock *a4)
{
  JSC::DFG::BlockInsertionSet **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  JSC::DFG::BlockInsertionSet *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  JSC::DFG::BlockInsertionSet *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  JSC::DFG::BlockInsertionSet *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::DFG::BlockInsertionSet *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  WTF *v71;

  v7 = (char *)a3 + 40;
  v6 = (JSC::DFG::BlockInsertionSet **)*((_QWORD *)a3 + 5);
  v8 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 97);
    v10 = 8 * v8;
    v11 = 0.0;
    do
    {
      v12 = *v6;
      if (*v6 != a3)
      {
        v13 = *((_DWORD *)v12 + 2);
        v14 = *(_DWORD *)(v9 + 20);
        if (v14 <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198433700);
        }
        v15 = *((_DWORD *)a3 + 2);
        if (v14 <= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x198433708);
        }
        v16 = *(_QWORD *)(v9 + 8);
        if ((*(_DWORD *)(v16 + 40 * v13 + 32) <= *(_DWORD *)(v16 + 40 * v15 + 32)
           || *(_DWORD *)(v16 + 40 * v13 + 36) >= *(_DWORD *)(v16 + 40 * v15 + 36))
          && v11 < *((float *)v12 + 48))
        {
          v11 = *((float *)v12 + 48);
        }
      }
      ++v6;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v11 = 0.0;
  }
  v17 = JSC::DFG::BlockInsertionSet::insert(a2, *((unsigned int *)a3 + 2), v11);
  v71 = v17;
  if (!*((_DWORD *)a3 + 55))
  {
    __break(0xC471u);
    JUMPOUT(0x198433730);
  }
  v20 = (uint64_t)v17;
  v21 = **((_QWORD **)a3 + 26);
  v22 = *(_QWORD *)v21;
  if ((*(_QWORD *)v21 & 1) != 0)
  {
    v56 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v57 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
        ? (v58 = (_DWORD)v57 == -1)
        : (v58 = 1),
          v58))
    {
      v59 = 2;
    }
    else if (v57 >> 28)
    {
      v65 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v65 = v56;
      *(_DWORD *)(v65 + 8) = v57;
      v59 = 1;
      v56 = v65;
    }
    else
    {
      v59 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v56 = v57 << 36;
    }
    v22 = v56 | v59;
  }
  v68 = v22;
  v23 = *(_QWORD *)(v21 + 8);
  if ((v23 & 1) != 0)
  {
    v60 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || ((v61 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v61 != 0x3FFFFFFF)
        ? (v62 = (_DWORD)v61 == -1)
        : (v62 = 1),
          v62))
    {
      v63 = 2;
    }
    else if (v61 >> 28)
    {
      v66 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v66 = v60;
      *(_DWORD *)(v66 + 8) = v61;
      v63 = 1;
      v60 = v66;
    }
    else
    {
      v63 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v60 = v61 << 36;
    }
    v23 = v60 | v63;
  }
  v69 = v23;
  v70 = *(_WORD *)(v21 + 16);
  JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v20, (uint64_t)this, 0, 364, (uint64_t)&v68, (uint64_t)a3, v18, v19);
  if ((v69 & 1) != 0 && (v69 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v69 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  v31 = *((_DWORD *)a3 + 13);
  if (v31)
  {
    v32 = 0;
    v33 = *((unsigned int *)a3 + 13);
    while (1)
    {
      v67 = 0;
      v34 = *((_QWORD *)a3 + 5);
      v35 = *(JSC::DFG::BlockInsertionSet **)(v34 + 8 * v32);
      v67 = v35;
      if (v35 != a3)
      {
        v36 = *((_QWORD *)this + 97);
        v37 = *((_DWORD *)v35 + 2);
        v38 = *(_DWORD *)(v36 + 20);
        if (v38 <= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x198433710);
        }
        v39 = *((_DWORD *)a3 + 2);
        if (v38 <= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x198433718);
        }
        v40 = *(_QWORD *)(v36 + 8);
        if (*(_DWORD *)(v40 + 40 * v37 + 32) <= *(_DWORD *)(v40 + 40 * v39 + 32)
          || *(_DWORD *)(v40 + 40 * v37 + 36) >= *(_DWORD *)(v40 + 40 * v39 + 36))
        {
          break;
        }
      }
LABEL_45:
      ++v32;
      v33 = v31;
      if (v31 <= v32)
        goto LABEL_46;
    }
    *(_QWORD *)(v34 + 8 * v32--) = *(_QWORD *)(v34 + 8 * v33 - 8);
    *((_DWORD *)a3 + 13) = --v31;
    v41 = *((unsigned int *)v67 + 55);
    v42 = v41 - 1;
    do
    {
      if (v42 >= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x198433720);
      }
      v43 = *(_QWORD *)(*((_QWORD *)v67 + 26) + 8 * v42--);
    }
    while (*(unsigned __int16 *)(v43 + 18) - 364 > 0xB);
    v44 = 1;
    switch(*(_WORD *)(v43 + 18))
    {
      case 0x16C:
        goto LABEL_26;
      case 0x16D:
        v44 = 2;
        goto LABEL_26;
      case 0x16E:
        v44 = *(_DWORD *)(*(_QWORD *)(v43 + 72) + 12) + 1;
        goto LABEL_60;
      case 0x16F:
        v44 = *(_DWORD *)(*(_QWORD *)(v43 + 72) + 12);
LABEL_60:
        if (!v44)
          goto LABEL_45;
LABEL_26:
        v45 = v44;
        break;
      default:
        goto LABEL_45;
    }
    while (1)
    {
      v46 = v45--;
      v47 = *((unsigned int *)v67 + 55);
      v48 = v47 - 1;
      do
      {
        if (v48 >= v47)
        {
          __break(0xC471u);
          JUMPOUT(0x1984336F8);
        }
        v49 = *(_QWORD *)(*((_QWORD *)v67 + 26) + 8 * v48);
        v50 = *(unsigned __int16 *)(v49 + 18);
        --v48;
      }
      while ((v50 - 364) > 0xB);
      if (v50 == 366)
      {
        v52 = *(_QWORD *)(v49 + 72);
        v54 = *(_DWORD *)(v52 + 12);
        if (v54 <= v45)
        {
          if (v54 != v45)
          {
            __break(0xC471u);
            JUMPOUT(0x1984335BCLL);
          }
        }
        else
        {
          v52 = *(_QWORD *)v52 + 32 * v45;
        }
      }
      else
      {
        if (v50 == 367)
        {
          v64 = *(_QWORD *)(v49 + 72);
          if (*(_DWORD *)(v64 + 12) <= v45)
          {
            __break(0xC471u);
            JUMPOUT(0x198433728);
          }
          v51 = (JSC::DFG::BlockInsertionSet *)(*(_QWORD *)v64 + 8 * v45);
          goto LABEL_38;
        }
        if (v46 == 1)
        {
          v51 = (JSC::DFG::BlockInsertionSet *)(v49 + 72);
          if (v50 != 364)
            v51 = *(JSC::DFG::BlockInsertionSet **)v51;
          goto LABEL_38;
        }
        if (v46 != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1984336B8);
        }
        v52 = *(_QWORD *)(v49 + 72);
      }
      v51 = (JSC::DFG::BlockInsertionSet *)(v52 + 16);
LABEL_38:
      if (*(JSC::DFG::BlockInsertionSet **)v51 == a3)
      {
        *(_QWORD *)v51 = v20;
        v53 = *(unsigned int *)(v20 + 52);
        if ((_DWORD)v53 == *(_DWORD *)(v20 + 48))
        {
          WTF::Vector<JSC::DFG::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(v20 + 40, (unint64_t)&v67);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8 * v53) = v67;
          *(_DWORD *)(v20 + 52) = v53 + 1;
        }
      }
      if (!v45)
      {
        v31 = *((_DWORD *)a3 + 13);
        goto LABEL_45;
      }
    }
  }
  v33 = 0;
LABEL_46:
  if (v31 == *((_DWORD *)a3 + 12))
  {
    WTF::Vector<JSC::DFG::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)v7, (unint64_t)&v71);
    return v71;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a3 + 5) + 8 * v33) = v20;
    *((_DWORD *)a3 + 13) = v31 + 1;
  }
  return (WTF *)v20;
}

BOOL JSC::DFG::performLoopPreHeaderCreation(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  uint64_t v4;
  JSC::DFG::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t i;
  unsigned int v49;
  uint64_t v50;
  WTF **v51;
  WTF *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  JSC::DFG::Graph *v57;
  __int128 v58;
  char v59;
  WTF *v60;
  unint64_t *v61;
  WTF *v62;
  uint64_t v63;
  _BYTE v64[128];
  __int128 v65;
  _QWORD v66[2];
  __int128 v67;
  double v68;
  char v69;
  __int128 *v70;

  v53 = -1;
  v54 = -1;
  v55 = 0;
  v56 = 256;
  v57 = this;
  *(_QWORD *)&v58 = "loop pre-header creation";
  *((_QWORD *)&v58 + 1) = 25;
  v59 = 0;
  v60 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v53);
  v61 = (unint64_t *)this;
  v62 = (WTF *)v64;
  v63 = 8;
  v66[0] = "DFG";
  v66[1] = 4;
  v67 = v58;
  v68 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v43 = mach_absolute_time();
    v45 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v45 != -1)
    {
      *(_QWORD *)&v65 = &v69;
      v70 = &v65;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v44) = dword_1ECF4400C;
    v68 = (double)(v43 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v44 * 1000000000.0);
  }
  JSC::DFG::Graph::ensureCPSDominators(v57);
  JSC::DFG::Graph::ensureCPSNaturalLoops(v57);
  v10 = *(_DWORD *)(*((_QWORD *)v57 + 99) + 20);
  while (v10)
  {
    --v10;
    v23 = *((_QWORD *)v57 + 99);
    if (*(_DWORD *)(v23 + 20) <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198433C3CLL);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 112 * v10 + 8);
    v24 = *(_DWORD *)(v4 + 52);
    if (!v24)
      goto LABEL_39;
    v25 = 0;
    v26 = *((_QWORD *)v57 + 97);
    v27 = v24 - 1;
    while (1)
    {
      v28 = v25;
      v25 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v27);
      if (v25 == v4)
        goto LABEL_41;
      v29 = *(_DWORD *)(v25 + 8);
      v30 = *(_DWORD *)(v26 + 20);
      if (v30 <= v29)
      {
        __break(0xC471u);
        JUMPOUT(0x198433C2CLL);
      }
      v31 = *(_DWORD *)(v4 + 8);
      if (v30 <= v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198433C34);
      }
      v32 = *(_QWORD *)(v26 + 8);
      if (*(_DWORD *)(v32 + 40 * v29 + 32) > *(_DWORD *)(v32 + 40 * v31 + 32)
        && *(_DWORD *)(v32 + 40 * v29 + 36) < *(_DWORD *)(v32 + 40 * v31 + 36))
      {
LABEL_41:
        v25 = v28;
        goto LABEL_23;
      }
      if (v28)
        break;
LABEL_23:
      if (!(unint64_t)v27--)
      {
        if (v25)
        {
          v34 = 0;
          v28 = v25;
          goto LABEL_26;
        }
LABEL_39:
        JSC::DFG::Graph::logAssertionFailure(v57, 0, (const WTF::CString *)"./dfg/DFGLoopPreHeaderCreationPhase.cpp", (const char *)0x9F, "BOOL JSC::DFG::LoopPreHeaderCreationPhase::run()", "existingPreHeader");
        __break(0xC471u);
LABEL_76:
        JUMPOUT(0x198433A00);
      }
    }
    if (v28 == v25)
    {
      JSC::DFG::Graph::logAssertionFailure(v57, 0, (const WTF::CString *)"./dfg/DFGLoopPreHeaderCreationPhase.cpp", (const char *)0x97, "BOOL JSC::DFG::LoopPreHeaderCreationPhase::run()", "existingPreHeader != predecessor");
      __break(0xC471u);
      JUMPOUT(0x198433B70);
    }
    v34 = 1;
LABEL_26:
    v35 = *(unsigned int *)(v28 + 220);
    v36 = v35 - 1;
    v37 = v35 - 1;
    do
    {
      if (v37 >= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x198433C44);
      }
      v38 = *(_QWORD *)(v28 + 208);
      v39 = *(unsigned __int16 *)(*(_QWORD *)(v38 + 8 * v37--) + 18);
    }
    while ((v39 - 364) > 0xB);
    if (v39 != 364)
    {
      v46 = v28;
      JSC::DFG::Graph::logAssertionFailure(v57, 0, (const WTF::CString *)"./dfg/DFGLoopPreHeaderCreationPhase.cpp", (const char *)0xA5, "BOOL JSC::DFG::LoopPreHeaderCreationPhase::run()", "existingPreHeader->terminal()->op() == Jump");
      v47 = *(unsigned int *)(v46 + 220);
      for (i = v47 - 1; i < v47; --i)
      {
        v49 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v46 + 208) + 8 * i) + 18) - 364;
        if (v49 <= 0xB)
          WTFCrashWithInfoImpl(165, "./dfg/DFGLoopPreHeaderCreationPhase.cpp", "BOOL JSC::DFG::LoopPreHeaderCreationPhase::run()");
      }
      __break(0xC471u);
      goto LABEL_76;
    }
    if ((v34 & 1) != 0)
      goto LABEL_42;
    if (!*(_DWORD *)(v4 + 220))
    {
      __break(0xC471u);
      JUMPOUT(0x198433C4CLL);
    }
    if (*(_BYTE *)(**(_QWORD **)(v4 + 208) + 16))
    {
      do
      {
        if (v36 >= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198433C54);
        }
        v40 = *(_QWORD *)(v38 + 8 * v36--);
      }
      while (*(unsigned __int16 *)(v40 + 18) - 364 > 0xB);
      if (!*(_BYTE *)(v40 + 16))
LABEL_42:
        JSC::DFG::createPreHeader(v57, (JSC::DFG::Graph *)&v61, (JSC::DFG::BlockInsertionSet *)v4, v5);
    }
  }
  v11 = JSC::DFG::BlockInsertionSet::execute(&v61, v3, v4, (uint64_t)v5, v6, v7, v8, v9);
  if (v11)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v41 = (*(_DWORD *)(*((_QWORD *)v57 + 3) + 16) & 0xFFFFFFFE) == 4) : (v41 = 0),
          !v41 ? (v42 = BYTE2(qword_1ECF4C32A) == 0) : (v42 = 0),
          !v42))
    {
      v65 = v58;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v57 + 1088, "Phase ", (uint64_t)&v65, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v66);
  if (HIDWORD(v63))
  {
    v50 = 16 * HIDWORD(v63);
    v51 = (WTF **)((char *)v62 + 8);
    do
    {
      v52 = *v51;
      *v51 = 0;
      if (v52)
        WTF::RefCounted<JSC::DFG::BasicBlock>::deref(v52, v12, v13, v14, v15, v16, v17, v18);
      v51 += 2;
      v50 -= 16;
    }
    while (v50);
  }
  v19 = v62;
  if (v64 != (_BYTE *)v62 && v62 != 0)
  {
    v62 = 0;
    LODWORD(v63) = 0;
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v59)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v53, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  v21 = v60;
  v60 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::fastFree((unint64_t)v21, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v21;
  }
  return v11;
}

uint64_t JSC::DFG::mayExit(JSC::DFG *this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v65;

  v3 = 0;
  v4 = *((_QWORD *)this + 19);
  v5 = *((_DWORD *)this + 41);
  v6 = *((unsigned __int16 *)a2 + 9);
  if ((v6 - 11) < 0x18)
    goto LABEL_2;
  result = 2;
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0x26:
    case 0x27:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x87:
    case 0x8A:
    case 0x8B:
    case 0x93:
    case 0x95:
    case 0x98:
    case 0x9B:
    case 0xA5:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB5:
    case 0xEB:
    case 0xEC:
    case 0xEF:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x11E:
    case 0x139:
    case 0x13A:
    case 0x157:
    case 0x158:
    case 0x16C:
    case 0x16D:
    case 0x16F:
    case 0x175:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17C:
    case 0x17E:
    case 0x17F:
    case 0x1A2:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      goto LABEL_2;
    case 0x2A:
      goto LABEL_113;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      v21 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v22 = 0x4000000000000;
      goto LABEL_59;
    case 0x3E:
    case 0x40:
    case 0x42:
      v16 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v17 = 0x4000000000000;
      if (*((_DWORD *)a2 + 18) != 1 || v16 != 0x4000000000000)
      {
        v17 = 0xC4000000000000;
        if (v16 != 0xC4000000000000)
          return result;
      }
      v19 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
      goto LABEL_141;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
        return result;
      goto LABEL_142;
    case 0x41:
      v43 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      if ((v43 != 0x4000000000000 || *((_DWORD *)a2 + 18) != 1) && v43 != 0xC4000000000000)
        return result;
      goto LABEL_142;
    case 0x44:
    case 0x45:
      v21 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v22 = 0xC4000000000000;
LABEL_59:
      if (v21 != v22 || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != v22)
        return result;
      goto LABEL_142;
    case 0x46:
      if (*((_DWORD *)a2 + 18) != 1)
        return result;
LABEL_113:
      v46 = *((_QWORD *)a2 + 3);
      goto LABEL_140;
    case 0x47:
    case 0x48:
      v41 = *((_QWORD *)a2 + 3);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        if (v5 <= v41)
        {
          __break(0xC471u);
          JUMPOUT(0x1984342C4);
        }
        v41 = *(_QWORD *)(v4 + 8 * v41);
      }
      v19 = v41 & 0xFC000000000000;
      if (v19 != 0x4000000000000)
        goto LABEL_138;
      goto LABEL_142;
    case 0x49:
    case 0x50:
    case 0x51:
      v42 = *((_QWORD *)a2 + 3);
      goto LABEL_137;
    case 0x4A:
      v55 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v55 == 1)
        goto LABEL_139;
      if ((_DWORD)v55 == 49)
        goto LABEL_136;
      return result;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0xC4000000000000 && *((_DWORD *)a2 + 18) >= 2u)
        goto LABEL_142;
      return result;
    case 0x5B:
    case 0x88:
    case 0x89:
    case 0xDA:
    case 0xDE:
    case 0xF1:
    case 0xF3:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x10A:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x119:
    case 0x11F:
    case 0x121:
    case 0x13F:
    case 0x140:
    case 0x141:
    case 0x159:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x183:
      goto LABEL_96;
    case 0xB4:
      if (*((_DWORD *)a2 + 18))
        goto LABEL_142;
      return result;
    case 0xD7:
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v56 = *((_DWORD *)a2 + 6) + 1;
        if (v56 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1984342CCLL);
        }
        v47 = (_QWORD *)(v4 + 8 * v56);
      }
      else
      {
        v47 = (_QWORD *)((char *)a2 + 32);
      }
      v48 = (*v47 >> 50) & 0x3FLL;
      v36 = v48 > 0x31;
      v49 = (1 << v48) & 0x2800002000802;
      if (!v36 && v49 != 0)
        goto LABEL_142;
      return result;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      goto LABEL_51;
    case 0xEE:
      v3 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x2E)
      {
        if ((_DWORD)v3 == 48)
        {
          v3 = 0;
          v15 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          if (!v15)
            goto LABEL_2;
LABEL_90:
          v39 = 0xC0000000000000;
          goto LABEL_87;
        }
        if ((_DWORD)v3 != 47)
          goto LABEL_51;
        v3 = 0;
        v15 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        if (!v15)
          goto LABEL_2;
        v39 = 0xBC000000000000;
      }
      else
      {
        if ((_DWORD)v3 != 6)
        {
          if ((_DWORD)v3)
            goto LABEL_51;
          v15 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          if (v15 == 0xBC000000000000 || v15 == 0x18000000000000)
            goto LABEL_2;
          goto LABEL_90;
        }
        v3 = 0;
        v15 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        if (!v15)
          goto LABEL_2;
        v39 = 0x18000000000000;
      }
LABEL_87:
      if (v15 == v39)
        goto LABEL_2;
LABEL_51:
      v20 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v20 == 49)
        {
LABEL_136:
          v42 = *((_QWORD *)a2 + 4);
LABEL_137:
          v19 = v42 & 0xFC000000000000;
LABEL_138:
          v17 = 0xC4000000000000;
        }
        else
        {
          if ((_DWORD)v20 != 52)
            return result;
          v19 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v17 = 0xD0000000000000;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
LABEL_139:
        v46 = *((_QWORD *)a2 + 4);
LABEL_140:
        v19 = v46 & 0xFC000000000000;
        v17 = 0x4000000000000;
      }
      else
      {
        if ((_DWORD)v20 != 25)
          return result;
        v19 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
        v17 = 0x64000000000000;
      }
LABEL_141:
      if (v19 != v17)
        return result;
LABEL_142:
      v3 = 0;
LABEL_2:
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v23 = *((_QWORD *)a2 + 3);
        v24 = *((_DWORD *)a2 + 8);
        v25 = (v24 + v23);
        if (v25 <= v23)
          return v3;
        v26 = *((_QWORD *)a2 + 3);
        v27 = v5 >= v23;
        v28 = v5 - v23;
        if (!v27)
          v28 = 0;
        v29 = v24 - 1;
        if (v6 == 215)
        {
          if (v28 > v29)
          {
            v57 = v25 - v26;
            result = v3;
            v58 = (unint64_t *)(v4 + 8 * v26);
            do
            {
              v60 = *v58++;
              v59 = v60;
              v61 = v60 & 0x1000000000000;
              v62 = (v60 & 0xFF00FFFFFFFFFFFFLL) != 0 && v61 == 0;
              v63 = (v59 >> 50) & 0x3F;
              if (v62 && (_DWORD)v63 != 0)
              {
                v36 = v63 > 0x34;
                v65 = (1 << v63) & 0x12400001800284;
                if (v36 || v65 == 0)
                  result = 2;
              }
              --v57;
            }
            while (v57);
            return result;
          }
        }
        else if (v28 > v29)
        {
          v30 = v25 - v26;
          result = v3;
          v31 = (unint64_t *)(v4 + 8 * v26);
          while (1)
          {
            v33 = *v31++;
            v32 = v33;
            if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v34 = (v32 >> 50) & 0x3F;
              if ((v32 & 0x1000000000000) != 0)
              {
                if ((_DWORD)v34 != 19 && (_DWORD)v34 != 11)
                  goto LABEL_71;
              }
              else
              {
                if (!(_DWORD)v34)
                  goto LABEL_71;
                v36 = v34 > 0x34;
                v37 = (1 << v34) & 0x12400001800284;
                if (!v36 && v37 != 0)
                  goto LABEL_71;
              }
              result = 2;
            }
LABEL_71:
            if (!--v30)
              return result;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1984342BCLL);
      }
      v7 = *((_QWORD *)a2 + 3);
      v8 = v7 & 0xFF00FFFFFFFFFFFFLL;
      if (v6 == 215)
      {
        if (!v8)
          return v3;
        if ((v7 & 0x1000000000000) == 0)
        {
          v51 = (v7 >> 50) & 0x3F;
          if ((_DWORD)v51)
          {
            if (v51 > 0x34 || ((1 << v51) & 0x12400001800284) == 0)
              v3 = 2;
          }
        }
        v52 = *((_QWORD *)a2 + 4);
        if ((v52 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return v3;
        if ((v52 & 0x1000000000000) == 0)
        {
          v53 = (v52 >> 50) & 0x3F;
          if ((_DWORD)v53)
          {
            if (v53 > 0x34 || ((1 << v53) & 0x12400001800284) == 0)
              v3 = 2;
          }
        }
        v54 = *((_QWORD *)a2 + 5);
        if ((v54 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v54 & 0x1000000000000) != 0)
          return v3;
        v14 = (v54 >> 50) & 0x3F;
LABEL_17:
        if (!(_DWORD)v14)
          return v3;
        if (v14 > 0x34)
          return 2;
        result = v3;
        if (((1 << v14) & 0x12400001800284) == 0)
          return 2;
        return result;
      }
      if (!v8)
        return v3;
      v10 = (v7 >> 50) & 0x3F;
      if ((v7 & 0x1000000000000) != 0)
      {
        if ((_DWORD)v10 == 19 || (_DWORD)v10 == 11)
          goto LABEL_24;
      }
      else if ((_DWORD)v10 && (v10 > 0x34 || ((1 << v10) & 0x12400001800284) == 0))
      {
LABEL_24:
        v3 = 2;
      }
      v11 = *((_QWORD *)a2 + 4);
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return v3;
      v12 = (v11 >> 50) & 0x3F;
      if ((v11 & 0x1000000000000) != 0)
      {
        if ((_DWORD)v12 != 19 && (_DWORD)v12 != 11)
          goto LABEL_14;
      }
      else if (!(_DWORD)v12 || v12 <= 0x34 && ((1 << v12) & 0x12400001800284) != 0)
      {
        goto LABEL_14;
      }
      v3 = 2;
LABEL_14:
      v13 = *((_QWORD *)a2 + 5);
      if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return v3;
      v14 = (v13 >> 50) & 0x3F;
      if ((v13 & 0x1000000000000) == 0)
        goto LABEL_17;
      if ((_DWORD)v14 == 19)
        return 2;
      result = v3;
      if ((_DWORD)v14 == 11)
        return 2;
      return result;
    case 0x13E:
    case 0x145:
      v40 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v40 > 0x34)
        return result;
      if (((1 << v40) & 0x12026001000002) != 0)
      {
LABEL_96:
        v3 = 1;
        goto LABEL_2;
      }
      if (v40 != 22)
        return result;
      goto LABEL_142;
    default:
      return result;
  }
}

void JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45[6];
  _DWORD v46[3];
  uint64_t v47;
  __int16 v48;

  v46[0] = a3;
  if (!**(_QWORD **)a1)
  {
    __break(0xC471u);
    JUMPOUT(0x198434C1CLL);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v45[0] = v10;
  v45[1] = v11;
  v13 = *(uint64_t **)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v45[2] = (uint64_t)v13;
  v45[3] = v12;
  v45[4] = (uint64_t)v46;
  v45[5] = a2;
  v14 = **(_DWORD ***)(a1 + 40);
  if (v14[29])
  {
    v15 = 0;
    v16 = -6;
    do
    {
      v17 = (v16 + 5);
      if ((int)v17 >= 0
        || ((v15 & 0x80000000) != 0
          ? (_DWORD *)(v19 = (_DWORD *)(*(_QWORD *)v10 + 4 * ((unint64_t)v16 >> 5)), LOBYTE(v18) = v16)
          : (v18 = (v17 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v10 + 16),
             v19 = (_DWORD *)(*(_QWORD *)v10 + ((v18 >> 3) & 0x3FFFFFFC))),
            ((*v19 >> v18) & 1) != 0))
      {
        if ((v15 & 0x80000000) != 0)
          v21 = ((v17 << 32) - 0x500000000) >> 32;
        else
          v21 = (v17 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v11 + 16);
        v22 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v21);
        if (!v22)
          v22 = JSC::DFG::LiveCatchVariablePreservationPhase::newVariableAccessData(*v13, v17 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v17 >> 31) << 32));
        if ((v15 & 0x80000000) != 0)
          v23 = ((v17 << 32) - 0x500000000) >> 32;
        else
          v23 = (v17 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v11 + 16);
        *(_QWORD *)(*(_QWORD *)v11 + 8 * v23) = v22;
        v24 = v46[0];
        v25 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 1) != 0)
        {
          v31 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
          if ((v25 & 2) != 0
            || ((v32 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
              ? (v33 = (_DWORD)v32 == -1)
              : (v33 = 1),
                v33))
          {
            v34 = 2;
          }
          else if (v32 >> 28)
          {
            v39 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
            v41 = v46[0];
            v43 = v22;
            v31 = WTF::fastMalloc((WTF *)0x10);
            v24 = v41;
            v22 = v43;
            *(_QWORD *)v31 = v39;
            *(_DWORD *)(v31 + 8) = v32;
            v34 = 1;
          }
          else
          {
            v34 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
            v31 = v32 << 36;
          }
          v25 = v31 | v34;
        }
        *(_QWORD *)&v46[1] = v25;
        v26 = *(_QWORD *)(a2 + 8);
        if ((v26 & 1) != 0)
        {
          v35 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
          if ((v26 & 2) != 0
            || ((v36 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
              ? (v37 = (_DWORD)v36 == -1)
              : (v37 = 1),
                v37))
          {
            v38 = 2;
          }
          else if (v36 >> 28)
          {
            v40 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
            v42 = v24;
            v44 = v22;
            v35 = WTF::fastMalloc((WTF *)0x10);
            v24 = v42;
            v22 = v44;
            *(_QWORD *)v35 = v40;
            *(_DWORD *)(v35 + 8) = v36;
            v38 = 1;
          }
          else
          {
            v38 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
            v35 = v36 << 36;
          }
          v26 = v35 | v38;
        }
        v47 = v26;
        v48 = *(_WORD *)(a2 + 16);
        JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v12, v24, 0, 28, (uint64_t)&v46[1], v22, a7, a8);
        if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v47 & 0xFFFFFFFF8, v27, a3, a4, a5, a6, a7, a8);
        if ((v46[1] & 1) != 0 && (*(_QWORD *)&v46[1] & 0xFFFFFFFF8) != 0)
          WTF::fastFree(*(_QWORD *)&v46[1] & 0xFFFFFFFF8, v27, a3, a4, a5, a6, a7, a8);
      }
      ++v15;
      v14 = **(_DWORD ***)(a1 + 40);
      v20 = v14[29];
      --v16;
    }
    while (v20 > v15);
  }
  else
  {
    v20 = 0;
  }
  if (v20 + v14[28] != v14[27])
  {
    v28 = 0;
    v29 = 1;
    do
    {
      JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator() const(JSC::DFG::NodeOrigin,unsigned int)::{lambda(JSC::Operand)#1}::operator()(v45, v28 | 0x200000000, a3, a4, a5, a6, a7, a8);
      v28 = v29;
    }
    while (*(unsigned int *)(**(_QWORD **)(a1 + 40) + 108)
          - (*(unsigned int *)(**(_QWORD **)(a1 + 40) + 112)
           + (unint64_t)*(unsigned int *)(**(_QWORD **)(a1 + 40) + 116)) > v29++);
  }
  JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator() const(JSC::DFG::NodeOrigin,unsigned int)::{lambda(JSC::Operand)#1}::operator()(v45, 5uLL, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::DFG::LiveCatchVariablePreservationPhase::newVariableAccessData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v4 + 1;
  v5 = v4 >> 4;
  v6 = *(unsigned int *)(a1 + 484);
  if (v4 >> 4 >= v6)
  {
    v10 = (_QWORD *)(a1 + 472);
    v11 = WTF::fastMalloc((WTF *)0x400);
    v14 = v11;
    v12 = *(unsigned int *)(a1 + 484);
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 480))
    {
      v13 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 472, v12 + 1, (unint64_t)&v14);
      v12 = *(unsigned int *)(a1 + 484);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v12) = *v13;
    }
    else
    {
      *(_QWORD *)(*v10 + 8 * v12) = v11;
    }
    v6 = (v12 + 1);
    *(_DWORD *)(a1 + 484) = v6;
    v4 = *(_QWORD *)(a1 + 464) - 1;
    v5 = v4 >> 4;
  }
  if (v5 >= v6)
    goto LABEL_9;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v5) + ((v4 & 0xF) << 6);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = a2;
  *(_DWORD *)(v7 + 32) = 0x3FFFFFFF;
  *(_DWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 36) = 0;
  *(_BYTE *)(v7 + 44) = 0;
  v8 = *(_QWORD *)(a1 + 464) - 1;
  if (v8 >> 4 >= *(unsigned int *)(a1 + 484))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x198434DACLL);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * (v8 >> 4)) + ((v8 & 0xF) << 6);
}

uint64_t JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::CodeOrigin)#1}::operator() const(JSC::CodeOrigin)::{lambda(JSC::Operand)#1}::operator()(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;

  if (HIDWORD(a2) == 2)
  {
    v2 = *(unsigned int *)(result + 16) + (uint64_t)(int)a2 + *(unsigned int *)(result + 20);
    v3 = (_DWORD *)(*(_QWORD *)result + 4 * (v2 >> 5));
  }
  else if ((a2 & 0x80000000) != 0)
  {
    v2 = ~(_DWORD)a2 + (unint64_t)*(unsigned int *)(result + 16);
    v3 = (_DWORD *)(*(_QWORD *)result + ((v2 >> 3) & 0x3FFFFFFC));
  }
  else
  {
    LOBYTE(v2) = a2 - 5;
    v3 = (_DWORD *)(*(_QWORD *)result + 4 * ((unint64_t)((int)a2 - 5) >> 5));
  }
  *v3 |= 1 << v2;
  return result;
}

void JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *,JSC::DFG::InsertionSet &)::{lambda(JSC::DFG::NodeOrigin,unsigned int)#1}::operator() const(JSC::DFG::NodeOrigin,unsigned int)::{lambda(JSC::Operand)#1}::operator()(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;

  v8 = a2;
  if (!HIDWORD(a2))
  {
LABEL_7:
    v14 = a1 + 1;
    v13 = a1[1];
    v15 = 0;
    if ((a2 & 0x80000000) != 0)
      v16 = (a2 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v13 + 16);
    else
      v16 = (int)a2 - 5;
    goto LABEL_9;
  }
  v10 = *a1;
  if (HIDWORD(a2) != 2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v11 = ~(_DWORD)a2 + (unint64_t)*(unsigned int *)(v10 + 16);
      v12 = (_DWORD *)(*(_QWORD *)v10 + ((v11 >> 3) & 0x3FFFFFFC));
    }
    else
    {
      LOBYTE(v11) = a2 - 5;
      v12 = (_DWORD *)(*(_QWORD *)v10 + 4 * ((unint64_t)((int)a2 - 5) >> 5));
    }
    if (((*v12 >> v11) & 1) == 0)
      return;
    goto LABEL_7;
  }
  v33 = *(unsigned int *)(v10 + 16) + (uint64_t)(int)a2 + *(unsigned int *)(v10 + 20);
  if (((*(_DWORD *)(*(_QWORD *)v10 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v33) & 1) == 0)
    return;
  v14 = a1 + 1;
  v13 = a1[1];
  v16 = (int)a2 + (unint64_t)*(unsigned int *)(v13 + 16) + *(unsigned int *)(v13 + 20);
  v15 = 1;
LABEL_9:
  v17 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v16);
  if (!v17)
  {
    v17 = JSC::DFG::LiveCatchVariablePreservationPhase::newVariableAccessData(*(_QWORD *)a1[2], a2);
    v13 = *v14;
  }
  if ((v15 & 1) != 0)
  {
    v19 = *(unsigned int *)(v13 + 20);
    v18 = *(unsigned int *)(v13 + 16) + (uint64_t)(int)v8;
  }
  else
  {
    if ((v8 & 0x80000000) == 0)
    {
      v20 = (int)(v8 - 5);
      goto LABEL_15;
    }
    v18 = v8 ^ 0xFFFFFFFFLL;
    v19 = *(unsigned int *)(v13 + 16);
  }
  v20 = v18 + v19;
LABEL_15:
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v20) = v17;
  v21 = a1[3];
  v22 = *(unsigned int *)a1[4];
  v23 = a1[5];
  v24 = *(_QWORD *)v23;
  if ((*(_QWORD *)v23 & 1) != 0)
  {
    v34 = v22;
    v35 = v17;
    v36 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
    if ((v24 & 2) != 0
      || ((v37 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v46 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = v36;
      *(_DWORD *)(v46 + 8) = v37;
      v39 = 1;
      v36 = v46;
    }
    else
    {
      v39 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      v36 = v37 << 36;
    }
    v24 = v36 | v39;
    v17 = v35;
    v22 = v34;
  }
  v48 = v24;
  v25 = *(_QWORD *)(v23 + 8);
  if ((v25 & 1) != 0)
  {
    v40 = v22;
    v41 = v17;
    v42 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v43 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v47 = v42;
      *(_DWORD *)(v47 + 8) = v43;
      v45 = 1;
      v42 = v47;
    }
    else
    {
      v45 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v42 = v43 << 36;
    }
    v25 = v42 | v45;
    v17 = v41;
    v22 = v40;
  }
  v49 = v25;
  v50 = *(_WORD *)(v23 + 16);
  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v21, v22, 0, 28, (uint64_t)&v48, v17, a7, a8);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t WTF::dataLog<char [41],WTF::RawPointer,char [5],WTF::RawPointer,char [2]>(const char *a1, const void **a2, const char *a3, const void **a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%p", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  WTF::PrintStream::printf(v12, "%p", *a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

void JSC::ARM64Assembler::replaceWithVMHalt(JSC::ARM64Assembler *this, void *a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;

  v7 = -720669633;
  if ((JSC::ARM64Assembler *)(((unint64_t)this + 3) & 0xFFFFFFFFFFFFFFFCLL) != this)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  if (qword_1ECF4C1F8 > (unint64_t)this || qword_1ECF4C200 <= (unint64_t)this)
  {
    v4 = -720669633;
LABEL_7:
    *(_DWORD *)this = v4;
    goto LABEL_23;
  }
  if ((unint64_t)&v7 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x198435340);
  }
  if (qword_1ECF4C1F0)
    v5 = qword_1ECF4C200 >= (unint64_t)this + 4;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198435360);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(this, &v7, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)this = v7;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    goto LABEL_23;
  }
  if (!off_1ECF4C228)
  {
    v4 = v7;
    goto LABEL_7;
  }
  if (qword_1ECF4C1F0)
    v6 = qword_1ECF4C1F8;
  else
    v6 = 0;
  off_1ECF4C228((char *)this - v6, &v7, 4);
  if ((unint64_t)&v7 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x198435320);
  }
LABEL_23:
  sys_icache_invalidate(this, 4uLL);
}

uint64_t *WTF::HashTable<JSC::DFG::AbstractHeap,WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::AbstractHeap,BOOL>>,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashMap<JSC::DFG::AbstractHeap,BOOL,WTF::DefaultHash<JSC::DFG::AbstractHeap>,WTF::HashTraits<JSC::DFG::AbstractHeap>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::AbstractHeap>>::HashTable(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;

  *a1 = 0;
  if (!*a2)
    return a1;
  v9 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v9)
    return a1;
  v11 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = (v12 | HIWORD(v12)) + 1;
  if (v13 > 0x400)
  {
    if (v13 > 2 * v9)
      goto LABEL_8;
  }
  else if (3 * v13 > 4 * v9)
  {
LABEL_6:
    v14 = (double)v9;
    v15 = (double)v13;
    v16 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v13) = 2 * v13;
  if (v13 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v14 = (double)v9;
  v15 = (double)v13;
  v16 = 0.416666667;
LABEL_9:
  if (v15 * v16 <= v14)
    LODWORD(v13) = 2 * v13;
  if (v13 <= 8)
    v17 = 8;
  else
    v17 = v13;
  v18 = WTF::fastZeroedMalloc(16 * v17 + 16, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *a1 = v18 + 16;
  *(_DWORD *)(v18 + 12) = v17;
  *(_DWORD *)(*a1 - 8) = v17 - 1;
  *(_DWORD *)(*a1 - 12) = v9;
  *(_DWORD *)(*a1 - 16) = 0;
  v19 = *a2;
  if (*a2)
  {
    v20 = *((unsigned int *)v19 - 1);
    v21 = &v19[2 * v20];
    if (*((_DWORD *)v19 - 3))
    {
      v22 = *a2;
      if ((_DWORD)v20)
      {
        v23 = 16 * v20;
        v22 = *a2;
        while (!*v22 || (*v22 & 0x7FFF) == 0x4000)
        {
          v22 += 2;
          v23 -= 16;
          if (!v23)
          {
            v22 = v21;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v22 = &v19[2 * v20];
  }
  else
  {
    v22 = 0;
    v20 = 0;
  }
  v21 = &v19[2 * v20];
LABEL_24:
  if (v19)
    v19 += 2 * *((unsigned int *)v19 - 1);
  while (v22 != v19)
  {
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 8);
    else
      v25 = 0;
    v26 = *v22 + ~(*v22 << 32);
    v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
    v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
    v29 = v25 & (((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27)));
    v30 = 1;
    do
    {
      v31 = v29;
      v32 = *(_QWORD *)(v24 + 16 * v29);
      v29 = (v29 + v30++) & v25;
    }
    while (v32);
    v33 = v24 + 16 * v31;
    v34 = *v22;
    *(_BYTE *)(v33 + 8) = *((_BYTE *)v22 + 8);
    *(_QWORD *)v33 = v34;
    v35 = v22 + 2;
    v22 = v21;
    if (v35 != v21)
    {
      v22 = v35;
      while (!*v22 || (*v22 & 0x7FFF) == 0x4000)
      {
        v22 += 2;
        if (v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
    }
  }
  return a1;
}

BOOL JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  WTF *v16;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  size_t v21;
  __int16 v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[24];
  __int128 __dst;
  _BYTE *v70;
  __int128 v71;
  WTF **v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (**(_BYTE **)a1 && !*v9)
    return 0;
  v66 = (WTF *)v68;
  v67 = 3;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = **(_QWORD **)(a1 + 24);
  *(_QWORD *)&__dst = v10;
  *((_QWORD *)&__dst + 1) = v12;
  v70 = v9;
  v71 = *(_OWORD *)(a1 + 40);
  v72 = &v66;
  v14 = *(_QWORD *)(v13 + 24);
  if ((*(_BYTE *)(v13 + 56) & 0x10) != 0)
  {
    v18 = *(_QWORD *)(v13 + 32);
    if ((int)v18 + (int)v14 > v14)
    {
      v19 = *(_QWORD *)(v13 + 24);
      do
      {
        if (v19 >= *(unsigned int *)(v11 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x19843593CLL);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v19) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)&__dst, *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v19), a3, a4, a5, a6, a7, a8);
          v14 = *(_QWORD *)(v13 + 24);
          v18 = *(_QWORD *)(v13 + 32);
        }
        ++v19;
      }
      while (v19 < (v14 + v18));
    }
  }
  else if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)&__dst, v14, a3, a4, a5, a6, a7, a8);
    v14 = *(_QWORD *)(v13 + 32);
    if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)&__dst, v14, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)(v13 + 40);
      if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
        JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)&__dst, v14, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = HIDWORD(v67) != 0;
  if (HIDWORD(v67))
  {
    __dst = 0uLL;
    v70 = 0;
    if (HIDWORD(v67) > 3)
    {
      v42 = *(unsigned int *)(*(_QWORD *)(v10 + 32) + 164);
      v43 = v66;
      v44 = 8 * HIDWORD(v67);
      do
      {
        v45 = *(_QWORD *)v43;
        v65 = *(_QWORD *)v43;
        v46 = *(_QWORD *)(v10 + 32);
        v47 = *(unsigned int *)(v46 + 164);
        if ((_DWORD)v47 == *(_DWORD *)(v46 + 160))
        {
          WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v46 + 152, (unint64_t)&v65, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v46 + 152) + 8 * v47) = v45;
          *(_DWORD *)(v46 + 164) = v47 + 1;
        }
        v43 = (WTF *)((char *)v43 + 8);
        v44 -= 8;
      }
      while (v44);
      *(_QWORD *)&__dst = v42;
      *((_QWORD *)&__dst + 1) = HIDWORD(v67);
      v70 = 0;
      v22 = 25;
    }
    else
    {
      v20 = v66;
      v21 = 8 * HIDWORD(v67);
      v22 = 24;
      if (HIDWORD(v67) == 3)
        v23 = 0;
      else
        v23 = 24 - 8 * HIDWORD(v67);
      bzero((char *)&__dst + 8 * HIDWORD(v67), v23);
      memcpy(&__dst, v20, v21);
    }
    v24 = *(_QWORD *)(v10 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)v25;
    if ((*(_QWORD *)v25 & 1) != 0)
    {
      v48 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v49 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v49 != 0x3FFFFFFF)
          ? (v50 = (_DWORD)v49 == -1)
          : (v50 = 1),
            v50))
      {
        v51 = 2;
      }
      else if (v49 >> 28)
      {
        v58 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v58 = v48;
        *(_DWORD *)(v58 + 8) = v49;
        v51 = 1;
        v48 = v58;
      }
      else
      {
        v51 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        v48 = v49 << 36;
      }
      v26 = v48 | v51;
    }
    v62 = v26;
    v27 = *(_QWORD *)(v25 + 8);
    if ((v27 & 1) != 0)
    {
      v52 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v53 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v53 != 0x3FFFFFFF)
          ? (v54 = (_DWORD)v53 == -1)
          : (v54 = 1),
            v54))
      {
        v55 = 2;
      }
      else if (v53 >> 28)
      {
        v59 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v59 = v52;
        *(_DWORD *)(v59 + 8) = v53;
        v55 = 1;
        v52 = v59;
      }
      else
      {
        v55 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        v52 = v53 << 36;
      }
      v27 = v52 | v55;
    }
    v63 = v27;
    v64 = *(_WORD *)(v25 + 16);
    v60 = __dst;
    v61 = v70;
    LOWORD(v65) = v22;
    v28 = (void *)JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::AdjacencyList &>(v24 + 1032, (unsigned __int16 *)&v65, (uint64_t)&v62, &v60);
    if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    {
      v56 = v28;
      WTF::fastFree(v63 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
      v28 = v56;
    }
    if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
    {
      v57 = v28;
      WTF::fastFree(v62 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
      v28 = v57;
    }
    JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Node *)#1}::operator()(*(_QWORD *)(a1 + 48), (JSC::DFG::Node *)v28);
    JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator()(*(_QWORD *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
  }
  v16 = v66;
  if (v68 != (_BYTE *)v66 && v66)
  {
    v66 = 0;
    LODWORD(v67) = 0;
    WTF::fastFree((unint64_t)v16, (void *)v14, a3, a4, a5, a6, a7, a8);
  }
  return v15;
}

uint64_t JSC::DFG::safeToExecute<JSC::DFG::AtTailAbstractState>(uint64_t a1, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t isSubsetOf;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  JSC::JSObject *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::JSObject ***v74;
  int v75;
  uint64_t v76;
  BOOL v77;
  uint64_t *v78;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int *v102;
  _DWORD *v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  __int16 v122;

  v121 = a1;
  v122 = 1;
  v13 = (char *)a3 + 24;
  v12 = *((_QWORD *)a3 + 3);
  if ((*((_BYTE *)a3 + 56) & 0x10) != 0)
  {
    v65 = *((_QWORD *)a3 + 4);
    if ((int)v65 + (int)v12 > v12)
    {
      v66 = *((_QWORD *)a3 + 3);
      do
      {
        if (v66 >= *((unsigned int *)a2 + 41))
        {
          __break(0xC471u);
          JUMPOUT(0x198436530);
        }
        if ((*(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v66) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()((uint64_t)&v121, *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v66));
          v12 = *((_QWORD *)a3 + 3);
          v65 = *((_QWORD *)a3 + 4);
        }
        ++v66;
      }
      while (v66 < (v12 + v65));
    }
  }
  else if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()((uint64_t)&v121, v12);
    v14 = *((_QWORD *)a3 + 4);
    if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()((uint64_t)&v121, v14);
      v15 = *((_QWORD *)a3 + 5);
      if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
        JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()((uint64_t)&v121, v15);
    }
  }
  if (!(_BYTE)v122)
    return 0;
  v16 = *((unsigned __int16 *)a3 + 9);
  if ((a4 & 1) != 0
    || !HIBYTE(v122)
    || (isSubsetOf = 0, (v16 - 133) <= 0x32)
    && ((1 << (v16 + 123)) & 0x4000000000101) != 0)
  {
    isSubsetOf = 1;
    switch(*((_WORD *)a3 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 0xB:
      case 0xD:
      case 0xF:
      case 0x13:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x20:
      case 0x21:
      case 0x2A:
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x5B:
      case 0x60:
      case 0x61:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x8C:
      case 0x8D:
      case 0x94:
      case 0x95:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAD:
      case 0xAE:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xCE:
      case 0xE2:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x113:
      case 0x118:
      case 0x123:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13E:
      case 0x142:
      case 0x143:
      case 0x145:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x164:
      case 0x166:
      case 0x180:
      case 0x188:
      case 0x189:
      case 0x18A:
      case 0x18B:
      case 0x18C:
      case 0x18D:
      case 0x18E:
      case 0x18F:
      case 0x190:
      case 0x191:
      case 0x192:
      case 0x193:
      case 0x197:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19F:
      case 0x1AB:
      case 0x1AC:
      case 0x1AE:
      case 0x1AF:
        return isSubsetOf;
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xC:
      case 0xE:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x43:
      case 0x4B:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x87:
      case 0x8B:
      case 0x8E:
      case 0x8F:
      case 0x91:
      case 0x92:
      case 0x9C:
      case 0x9D:
      case 0xA7:
      case 0xA8:
      case 0xAC:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB4:
      case 0xB5:
      case 0xB9:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDB:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x124:
      case 0x125:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x144:
      case 0x146:
      case 0x147:
      case 0x14A:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
      case 0x163:
      case 0x165:
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17B:
      case 0x17C:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x181:
      case 0x182:
      case 0x183:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x194:
      case 0x195:
      case 0x196:
      case 0x198:
      case 0x199:
      case 0x19B:
      case 0x19E:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x1AD:
      case 0x1B0:
        return 0;
      case 0x29:
        return ((*(_QWORD *)v13 >> 50) & 0x3F) - 26 < 3;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v70 = (*(_QWORD *)v13 >> 50) & 0x3FLL;
        switch((_DWORD)v70)
        {
          case 0x1A:
            v92 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
            v93 = 0x68000000000000;
            break;
          case 0x1C:
            v92 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
            v93 = 0x70000000000000;
            break;
          case 0x1B:
            v92 = *((_QWORD *)a3 + 4) & 0xFC000000000000;
            v93 = 0x6C000000000000;
            break;
          default:
            return 0;
        }
        goto LABEL_149;
      case 0x52:
      case 0x53:
        v77 = (v13[6] & 0xFC) == 0;
        return !v77;
      case 0x5C:
      case 0x5D:
      case 0x93:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xD5:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0x184:
        if (v16 == 146)
          v19 = *((_DWORD *)a3 + 20);
        else
          v19 = *((_DWORD *)a3 + 18);
        LODWORD(v120) = v19;
        if ((*((_BYTE *)a3 + 56) & 0x10) != 0)
        {
          if (*((_DWORD *)a2 + 41) <= *(_QWORD *)v13)
          {
            __break(0xC471u);
            JUMPOUT(0x198436550);
          }
          v13 = (char *)(*((_QWORD *)a2 + 19) + 8 * *(_QWORD *)v13);
        }
        v20 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_DWORD *)(a1 + 20) <= v20)
        {
          __break(0xC471u);
          JUMPOUT(0x198436528);
        }
        v21 = *(_QWORD *)v13;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20);
        if (!v22)
          goto LABEL_199;
        v23 = *(_DWORD *)(v22 - 8);
        v24 = v23 & v21;
        v25 = (uint64_t *)(v22 + 40 * (v23 & v21));
        v26 = *v25;
        if (*v25 == (v21 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_20;
        v27 = 1;
        while (v26)
        {
          v24 = (v24 + v27) & v23;
          v25 = (uint64_t *)(v22 + 40 * v24);
          v26 = *v25;
          ++v27;
          if (*v25 == (v21 & 0xFF00FFFFFFFFFFFFLL))
            goto LABEL_20;
        }
        v25 = (uint64_t *)(v22 + 40 * *(unsigned int *)(v22 - 4));
LABEL_20:
        if (v25 == (uint64_t *)(v22 + 40 * *(unsigned int *)(v22 - 4)))
        {
LABEL_199:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)(v21 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x1984363ECLL);
        }
        v28 = v25 + 1;
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v120, a2, a3, (const JSC::DFG::AbstractValue *)v28, a5, a6, a7, a8);
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v75 = *((_DWORD *)a3 + 18);
        if (v75 <= 0xDu && ((1 << v75) & 0x3020) != 0)
          v75 = 4;
        LODWORD(v120) = v75;
        if (*((_DWORD *)a2 + 41) <= *(_QWORD *)v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198436558);
        }
        v76 = *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * *(_QWORD *)v13);
        goto LABEL_124;
      case 0x88:
      case 0x89:
        v81 = JSC::DFG::AtTailAbstractState::forNode(a1, *((_QWORD *)a3 + 3) & 0xFF00FFFFFFFFFFFFLL);
        v120 = **((_QWORD **)a3 + 9);
        v82 = v120;
        isSubsetOf = JSC::DFG::StructureAbstractValue::isSubsetOf(v81, &v120);
        if ((v82 & 1) != 0)
          WTF::fastFree(v82 & 0xFFFFFFFFFFFFFFFCLL, v83, v84, v85, v86, v87, v88, v89);
        return isSubsetOf;
      case 0x8A:
        v29 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_DWORD *)(a1 + 20) <= v29)
        {
          __break(0xC471u);
          JUMPOUT(0x198436538);
        }
        v30 = *(_QWORD *)v13;
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v29);
        if (!v31)
          goto LABEL_201;
        v32 = *(_DWORD *)(v31 - 8);
        v33 = v32 & v30;
        v34 = (uint64_t *)(v31 + 40 * (v32 & v30));
        v35 = *v34;
        if (*v34 == (v30 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_29;
        v36 = 1;
        while (v35)
        {
          v33 = (v33 + v36) & v32;
          v34 = (uint64_t *)(v31 + 40 * v33);
          v35 = *v34;
          ++v36;
          if (*v34 == (v30 & 0xFF00FFFFFFFFFFFFLL))
            goto LABEL_29;
        }
        v34 = (uint64_t *)(v31 + 40 * *(unsigned int *)(v31 - 4));
LABEL_29:
        if (v34 == (uint64_t *)(v31 + 40 * *(unsigned int *)(v31 - 4)))
        {
LABEL_201:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)(v30 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x198436460);
        }
        v37 = (v34[2] & 0xFFFFDFFFF0000008) == 0;
        goto LABEL_31;
      case 0x90:
      case 0xA2:
      case 0xA3:
        v37 = (JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFFFFFFFFF800FLL) == 0;
        goto LABEL_31;
      case 0x96:
      case 0x97:
        if ((JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFD7FF00000008) != 0)
          return 0;
        v90 = *JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL);
        if (v90 == 4 || (v90 & 2) != 0)
          return 0;
        if ((v90 & 1) != 0)
        {
          v118 = v90 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(_DWORD *)v118 != 1)
            return 0;
          v92 = *(_QWORD *)(v118 + 8);
        }
        else
        {
          if (v90 <= 3)
            return 0;
          v92 = v90 & 0xFFFFFFFFFFFFFFFCLL;
        }
        v93 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 41528);
LABEL_149:
        v37 = v92 == v93;
        goto LABEL_31;
      case 0x98:
      case 0x9B:
        v38 = *((_QWORD *)a3 + 4);
        v39 = v38 & 0xFF00FFFFFFFFFFFFLL;
        if ((*((_QWORD *)a3 + 3) & 0xFF00FFFFFFFFFFFFLL) == (v38 & 0xFF00FFFFFFFFFFFFLL))
        {
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *(unsigned int *)(v40 + 8);
          if (*(_DWORD *)(a1 + 20) <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x198436548);
          }
          v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v41);
          if (!v42)
            goto LABEL_205;
          v43 = *(_DWORD *)(v42 - 8);
          v44 = v43 & v38;
          v45 = (uint64_t *)(v42 + 40 * (v43 & v38));
          v46 = *v45;
          if (*v45 != v39)
          {
            v47 = 1;
            while (v46)
            {
              v44 = (v44 + v47) & v43;
              v45 = (uint64_t *)(v42 + 40 * v44);
              v46 = *v45;
              ++v47;
              if (*v45 == v39)
                goto LABEL_41;
            }
            v45 = (uint64_t *)(v42 + 40 * *(unsigned int *)(v42 - 4));
          }
LABEL_41:
          if (v45 == (uint64_t *)(v42 + 40 * *(unsigned int *)(v42 - 4)))
          {
LABEL_205:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)(v38 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
            __break(0xC471u);
            JUMPOUT(0x198436518);
          }
          if ((v45[2] & 0xFFFFD7FF00000008) != 0)
            return 0;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 40);
        }
        v48 = **((_DWORD **)a3 + 9);
        if (*(_BYTE *)(v40 + 13))
          goto LABEL_50;
        if (*(unsigned __int16 *)((v38 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
          goto LABEL_50;
        v49 = **(JSC::JSObject ***)((v38 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (!v49 || ((unint64_t)v49 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v49 + 5) < 0x17u)
          goto LABEL_50;
        if (JSC::DFG::Graph::isSafeToLoad(a2, v49, **((_DWORD **)a3 + 9)))
          return 1;
        v38 = *((_QWORD *)a3 + 4);
        v40 = *(_QWORD *)(a1 + 40);
        v39 = v38 & 0xFF00FFFFFFFFFFFFLL;
LABEL_50:
        v50 = *(unsigned int *)(v40 + 8);
        if (*(_DWORD *)(a1 + 20) <= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x198436540);
        }
        v51 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v50);
        if (!v51)
          goto LABEL_203;
        v52 = *(_DWORD *)(v51 - 8);
        v53 = v52 & v38;
        v54 = (uint64_t *)(v51 + 40 * (v52 & v38));
        v55 = *v54;
        if (*v54 != v39)
        {
          v56 = 1;
          while (v55)
          {
            v53 = (v53 + v56) & v52;
            v54 = (uint64_t *)(v51 + 40 * v53);
            v55 = *v54;
            ++v56;
            if (*v54 == v39)
              goto LABEL_56;
          }
          v54 = (uint64_t *)(v51 + 40 * *(unsigned int *)(v51 - 4));
        }
LABEL_56:
        if (v54 == (uint64_t *)(v51 + 40 * *(unsigned int *)(v51 - 4)))
        {
LABEL_203:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)(v38 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x1984364BCLL);
        }
        v57 = v54[1];
        if (v57 == 4 || (v54[1] & 2) != 0)
          return 0;
        if ((v57 & 1) != 0)
        {
          v60 = v57 & 0xFFFFFFFFFFFFFFFCLL;
          v59 = *(_DWORD *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v59 = v57 > 3;
          v60 = v57 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v48 == -1)
        {
          v37 = v59 == 0;
LABEL_31:
          isSubsetOf = v37;
        }
        else
        {
          if (v48 > 63)
          {
            if (!v59)
              return 1;
            v61 = v59 - 1;
            isSubsetOf = 1;
            while (1)
            {
              v62 = v60;
              if ((v57 & 1) != 0)
                v62 = *(_QWORD *)(v60 + 8 + 8 * v61);
              if ((*(_DWORD *)(v62 + 16) & 3) == 2)
                break;
              v63 = *(unsigned __int16 *)(v62 + 24);
              if (v63 == 65534)
              {
                v63 = -1;
              }
              else if (v63 == 0xFFFF)
              {
                v63 = *(_DWORD *)(*(_QWORD *)(v62 + 64) + 84);
              }
              if (v63 < v48)
                break;
              if (!v61--)
                return isSubsetOf;
            }
            return 0;
          }
          v67 = 8 * v59;
          do
          {
            isSubsetOf = v67 == 0;
            if (!v67)
              break;
            v68 = v60;
            if ((v57 & 1) != 0)
              v68 = *(_QWORD *)(v60 + v67);
            if ((*(_DWORD *)(v68 + 16) & 3) == 2)
              break;
            v69 = *(unsigned __int16 *)(v68 + 24);
            if (v69 == 65534)
            {
              v69 = -1;
            }
            else if (v69 == 0xFFFF)
            {
              v69 = *(_DWORD *)(*(_QWORD *)(v68 + 64) + 84);
            }
            if (v69 < v48)
              break;
            v67 -= 8;
          }
          while (v48 < *(unsigned __int8 *)(v68 + 14));
        }
        break;
      case 0x99:
        v101 = *((_QWORD *)a3 + 4) & 0xFF00FFFFFFFFFFFFLL;
        if ((*((_QWORD *)a3 + 3) & 0xFF00FFFFFFFFFFFFLL) == v101
          && (JSC::DFG::AtTailAbstractState::forNode(a1, v101)[1] & 0xFFFFD7FF00000008) != 0)
        {
          return 0;
        }
        v102 = (int *)*((_QWORD *)a3 + 9);
        v103 = (_DWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)a2 + 3) + 240), v102[1]);
        v104 = *v102;
        v105 = JSC::DFG::AtTailAbstractState::forNode(a1, *((_QWORD *)a3 + 4) & 0xFF00FFFFFFFFFFFFLL);
        v111 = *v105;
        if (*v105 == 4 || (*v105 & 2) != 0)
          return 0;
        v113 = v105;
        if ((v111 & 1) != 0)
          v114 = *(_DWORD *)(v111 & 0xFFFFFFFFFFFFFFFCLL);
        else
          v114 = v111 > 3;
        if (!v114)
          return isSubsetOf;
        v115 = v114 - 1;
        while (2)
        {
          v116 = *v113 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*v113 & 1) != 0)
            v116 = *(_QWORD *)(v116 + 8 * v115 + 8);
          isSubsetOf = (*(_DWORD *)(v116 + 16) & 3) != 2;
          if ((*(_DWORD *)(v116 + 16) & 3) == 2)
            return isSubsetOf;
          LODWORD(v120) = 0;
          if (JSC::Structure::getConcurrently(v116, v103, &v120, v106, v107, v108, v109, v110) == v104
            && (v120 & 0x10) != 0)
          {
            if (!v115--)
              return isSubsetOf;
            continue;
          }
          break;
        }
        return 0;
      case 0x9A:
        v71 = *((_QWORD *)a3 + 9);
        v72 = *(unsigned int *)(v71 + 20);
        if (!(_DWORD)v72)
          return isSubsetOf;
        v73 = 32 * v72;
        v74 = (JSC::JSObject ***)(*(_QWORD *)(v71 + 8) + 24);
        while (2)
        {
          if (*(_DWORD *)v74 == 3)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 13)
              || !JSC::DFG::Graph::isSafeToLoad(a2, **(v74 - 2), *((_DWORD *)v74 - 2)))
            {
              return 0;
            }
          }
          else if (!*(_DWORD *)v74)
          {
            __break(0xC471u);
            JUMPOUT(0x198436334);
          }
          v74 += 4;
          v73 -= 32;
          if (!v73)
            return isSubsetOf;
          continue;
        }
      case 0xA4:
        if ((JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFD7FF00000008) != 0)
          return 0;
        v95 = *JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL);
        if (v95 == 4 || (v95 & 2) != 0)
          return 0;
        if ((v95 & 1) != 0)
        {
          v98 = v95 & 0xFFFFFFFFFFFFFFFCLL;
          v97 = *(_DWORD *)(v95 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v97 = v95 > 3;
          v98 = v95 & 0xFFFFFFFFFFFFFFFCLL;
        }
        v99 = 8 * v97;
        do
        {
          isSubsetOf = v99 == 0;
          if (!v99)
            break;
          v100 = v98;
          if ((v95 & 1) != 0)
            v100 = *(_QWORD *)(v98 + v99);
          v99 -= 8;
        }
        while (*(_BYTE *)(v100 + 9) == 74);
        return isSubsetOf;
      case 0xD4:
        LODWORD(v120) = *((_DWORD *)a3 + 18);
        v94 = *((_DWORD *)a3 + 6) + 1;
        if (*((_DWORD *)a2 + 41) <= v94)
        {
          __break(0xC471u);
          JUMPOUT(0x198436560);
        }
        v76 = *(_QWORD *)(*((_QWORD *)a2 + 19) + 8 * v94);
LABEL_124:
        v28 = JSC::DFG::AtTailAbstractState::forNode(a1, v76 & 0xFF00FFFFFFFFFFFFLL);
        return JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v120, a2, a3, (const JSC::DFG::AbstractValue *)v28, a5, a6, a7, a8);
      case 0xE1:
        v92 = *((_QWORD *)a3 + 5) & 0xFC000000000000;
        v93 = 0x54000000000000;
        goto LABEL_149;
      case 0x131:
        v92 = *(_QWORD *)v13 & 0xFC000000000000;
        v93 = 0xC4000000000000;
        goto LABEL_149;
      case 0x1A0:
      case 0x1A1:
        v78 = JSC::DFG::AtTailAbstractState::forNode(a1, *(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL);
        if (*v78 == 4 || (*v78 & 2) != 0)
          return 0;
        v80 = v78;
        v119 = 1;
        v120 = JSC::DFG::Node::requiredDOMJITClassInfo(a3);
        JSC::DFG::StructureAbstractValue::forEach<BOOL JSC::DFG::safeToExecute<JSC::DFG::AtTailAbstractState>(JSC::DFG::AtTailAbstractState &,JSC::DFG::Graph &,JSC::DFG::Node *,BOOL)::{lambda(JSC::DFG::RegisteredStructure)#1}>(*v80, &v119, &v120);
        v77 = v119 == 0;
        return !v77;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x1984362DCLL);
      default:
        __break(0xC471u);
        JUMPOUT(0x1984362FCLL);
    }
  }
  return isSubsetOf;
}

_QWORD *JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t a1, JSC::DFG::Node *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  __int16 v41;
  JSC::DFG::Node *v42;

  v42 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v39.i64[1] = (uint64_t)a2;
  v5 = *(unsigned int *)(v4 + 220);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 208);
    v7 = v5 - 1;
    while (1)
    {
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 8 * v7) + 18);
      if ((v8 - 364) < 0xC)
        break;
      if (((v8 - 28) < 2 || (v8 - 23) <= 2) && --v7 != -1)
        continue;
      goto LABEL_6;
    }
    v15 = v7;
    if ((_DWORD)v5 == *(_DWORD *)(v4 + 216))
    {
      v16 = (uint64_t *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 208, v5 + 1, (unint64_t)&v39.u64[1]);
      v5 = *(unsigned int *)(v4 + 220);
      v6 = *(_QWORD *)(v4 + 208);
    }
    else
    {
      v16 = &v39.i64[1];
    }
    v17 = (uint64_t *)(v6 + 8 * v15);
    memmove(v17 + 1, v17, v6 + 8 * v5 - (_QWORD)v17);
    *v17 = *v16;
    ++*(_DWORD *)(v4 + 220);
  }
  else
  {
LABEL_6:
    JSC::DFG::BasicBlock::append((JSC::DFG::BasicBlock *)v4, a2);
  }
  *((_QWORD *)a2 + 12) = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v33 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v34 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
        ? (v35 = (_DWORD)v34 == -1)
        : (v35 = 1),
          v35))
    {
      v36 = 2;
    }
    else if (v34 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v33;
      *(_DWORD *)(v38 + 8) = v34;
      v36 = 1;
      v33 = v38;
    }
    else
    {
      v36 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v33 = v34 << 36;
    }
    v19 = v33 | v36;
  }
  v39.i64[0] = v19;
  JSC::DFG::NodeOrigin::withSemantic(v18, &v39, v9, v10, v11, v12, v13, v14, (int64x2_t *)&v39.u64[1]);
  if (&v39.u64[1] == (unint64_t *)a2)
  {
    v37 = *((_QWORD *)a2 + 1);
    if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v37 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v27 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v27 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
    v28 = v39.i64[1];
    v39.i64[1] = 0;
    *(_QWORD *)a2 = v28;
    v29 = *((_QWORD *)a2 + 1);
    if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v29 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
    v30 = v40;
    v40 = 0;
    *((_QWORD *)a2 + 1) = v30;
    *((_WORD *)a2 + 8) = v41;
  }
  if ((v39.i8[8] & 1) != 0 && (v39.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39.i64[1] & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  if ((v39.i8[0] & 1) != 0 && (v39.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39.i64[0] & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  *((_BYTE *)a2 + 17) |= **(_BYTE **)(a1 + 16);
  result = *(_QWORD **)(a1 + 24);
  v32 = *((unsigned int *)result + 3);
  if ((_DWORD)v32 == *((_DWORD *)result + 2))
    return WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>((uint64_t)result, (unint64_t)&v42);
  *(_QWORD *)(*result + 8 * v32) = a2;
  *((_DWORD *)result + 3) = v32 + 1;
  return result;
}

uint64_t JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v8 = result;
  v10 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 8);
  *(_BYTE *)(*(_QWORD *)result + 120) = 1;
  if (*(_DWORD *)(v9 + 12))
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v11);
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEdges(v10 + 128, v12, a3, a4, a5, a6, a7, a8);
      result = JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(v10 + 128, v12);
      if ((result & 1) == 0)
        return JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::NaturalLoop<JSC::DFG::CFG> const*)#1}::operator()(v10, **(_QWORD **)(v8 + 16));
      ++v11;
      v9 = *(_QWORD *)(v8 + 8);
      if (v11 >= *(unsigned int *)(v9 + 12))
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *(_BYTE *)(v10 + 120) = 0;
    v13 = *(unsigned int *)(**(_QWORD **)(v8 + 16) + 28);
    if ((_DWORD)v13)
    {
      while (1)
      {
        --v13;
        v14 = **(_QWORD **)(v8 + 16);
        if (v13 >= *(unsigned int *)(v14 + 28))
          break;
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v13);
        v16 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 800);
        v17 = *(unsigned int *)(v15 + 8);
        if (*(_DWORD *)(v16 + 324) <= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x198437084);
        }
        v18 = *(_DWORD *)(*(_QWORD *)(v16 + 312) + 8 * v17);
        if (v18 != -1)
        {
          if (*(_DWORD *)(v16 + 20) <= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x19843708CLL);
          }
          v19 = *(_QWORD *)(v16 + 8);
          if (v19)
          {
            v20 = v19 + 72 * v18;
            if (*(_QWORD *)(v20 + 8) == v15)
            {
              v21 = *(unsigned int *)(v19 + 72 * v18 + 68);
              if (*(_DWORD *)(v10 + 180) <= v21)
                break;
              v22 = *(_QWORD *)(*(_QWORD *)(v10 + 168) + 16 * v21 + 8);
              if (v22)
              {
                if (*(_BYTE *)(v22 + 17))
                {
                  if (v22 != *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8))
                  {
                    *(_QWORD *)(v10 + 112) = v22;
                    v23 = *(_QWORD *)(v8 + 8);
                    if (*(_DWORD *)(v23 + 12))
                    {
                      v24 = 0;
                      while (1)
                      {
                        v25 = *(_QWORD *)(*(_QWORD *)v23 + 8 * v24);
                        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEdges(v10 + 128, v25, a3, a4, a5, a6, a7, a8);
                        result = JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(v10 + 128, v25);
                        if ((result & 1) == 0)
                          break;
                        ++v24;
                        v23 = *(_QWORD *)(v8 + 8);
                        if (v24 >= *(unsigned int *)(v23 + 12))
                          goto LABEL_12;
                      }
                      result = JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::NaturalLoop<JSC::DFG::CFG> const*)#1}::operator()(v10, v20);
                    }
                  }
                }
              }
            }
          }
        }
LABEL_12:
        if (!v13)
          return result;
      }
      __break(0xC471u);
      JUMPOUT(0x19843707CLL);
    }
  }
  return result;
}

uint64_t JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  unsigned int v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;

  v24 = a3;
  v6 = *(unsigned int *)(result + 164);
  v23 = 0;
  v22[0] = &v24;
  v22[1] = &v23;
  v22[2] = result;
  v7 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 56) & 0x10) == 0)
  {
    if ((v7 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      result = (uint64_t)JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>(JSC::DFG::Node *,BOOL (*)(JSC::DFG::Edge))::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v22, v7);
      v19 = *(_QWORD *)(a2 + 32);
      if ((v19 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        result = (uint64_t)JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>(JSC::DFG::Node *,BOOL (*)(JSC::DFG::Edge))::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v22, v19);
        v20 = *(_QWORD *)(a2 + 40);
        if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
          result = (uint64_t)JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>(JSC::DFG::Node *,BOOL (*)(JSC::DFG::Edge))::{lambda(JSC::DFG::Edge)#1}::operator()((uint64_t)v22, v20);
      }
    }
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if ((int)v8 + (int)v7 <= v7)
  {
LABEL_18:
    v21 = v23;
    *a4 = v6;
    a4[1] = v21;
    a4[2] = 0;
    return result;
  }
  v9 = result;
  v10 = (_QWORD *)(result + 152);
  v11 = v7;
  while (v11 < *(unsigned int *)(v9 + 164))
  {
    v12 = *(_QWORD *)(*v10 + 8 * v11);
    if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v25 = *(_QWORD *)(*v10 + 8 * v11);
      result = v24(v12);
      if ((_DWORD)result)
      {
        ++v23;
        v18 = *(unsigned int *)(v9 + 164);
        if ((_DWORD)v18 == *(_DWORD *)(v9 + 160))
        {
          result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v18 + 1), (unint64_t)&v25, v13, v14, v15, v16, v17);
          v18 = *(unsigned int *)(v9 + 164);
          *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v18) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*v10 + 8 * v18) = v12;
        }
        *(_DWORD *)(v9 + 164) = v18 + 1;
      }
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a2 + 32);
    }
    if (++v11 >= (v7 + v8))
      goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::DFG::Edge)#1}::operator()(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  unint64_t v63;

  v9 = result;
  v61 = a2;
  v10 = *(_QWORD *)result;
  v11 = *(_QWORD *)(*(_QWORD *)result + 32);
  v12 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v13 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x60);
  v14 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v13 == v14)
  {
    if ((a2 & 0x1000000000000) != 0)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(v11 + 784);
    v16 = *(unsigned int *)(v14 + 8);
    v17 = *(_DWORD *)(v15 + 20);
    if (v17 <= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198437578);
    }
    v18 = *(unsigned int *)(v13 + 8);
    if (v17 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198437580);
    }
    v19 = *(_QWORD *)(v15 + 8);
    v20 = v19 + 32 * v16;
    v21 = v19 + 32 * v18;
    if (*(_DWORD *)(v20 + 24) <= *(_DWORD *)(v21 + 24)
      || (a2 & 0x1000000000000) != 0
      || *(_DWORD *)(v20 + 28) >= *(_DWORD *)(v21 + 28))
    {
      return result;
    }
  }
  v22 = (a2 >> 50) & 0x3F;
  if (!(_DWORD)v22 || v22 <= 0x34 && ((1 << v22) & 0x12400001800284) != 0)
    return result;
  v23 = *(unsigned int *)(*(_QWORD *)(v10 + 112) + 8);
  if (*(_DWORD *)(v10 + 92) <= v23)
  {
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x198437538);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v23);
  if (!v24)
    goto LABEL_57;
  v25 = *(_DWORD *)(v24 - 8);
  v26 = v25 & a2;
  v27 = (uint64_t *)(v24 + 40 * (v25 & a2));
  v28 = *v27;
  if (*v27 != v12)
  {
    result = 1;
    while (v28)
    {
      v26 = (v26 + result) & v25;
      v27 = (uint64_t *)(v24 + 40 * v26);
      v28 = *v27;
      result = (result + 1);
      if (*v27 == v12)
        goto LABEL_19;
    }
    v27 = (uint64_t *)(v24 + 40 * *(unsigned int *)(v24 - 4));
  }
LABEL_19:
  if (v27 == (uint64_t *)(v24 + 40 * *(unsigned int *)(v24 - 4)))
  {
LABEL_57:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 72), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_63;
  }
  if ((*((_BYTE *)v27 + 21) & 4) != 0 && (v22 > 0x30 || ((1 << v22) & 0x1FE00000007DFLL) == 0))
  {
    if (!**(_BYTE **)(v9 + 16))
      return result;
    v29 = *(_QWORD *)(v9 + 24);
    v30 = *(_QWORD *)v29;
    if ((*(_QWORD *)v29 & 1) != 0)
    {
      v54 = v12;
      v56 = *(_QWORD *)(v9 + 24);
      v52 = v11;
      v40 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
      if ((v30 & 2) != 0
        || ((v41 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
          ? (v42 = (_DWORD)v41 == -1)
          : (v42 = 1),
            v42))
      {
        v43 = 2;
      }
      else if (v41 >> 28)
      {
        v50 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v50 = v40;
        *(_DWORD *)(v50 + 8) = v41;
        v43 = 1;
        v40 = v50;
      }
      else
      {
        v43 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
        v40 = v41 << 36;
      }
      v30 = v40 | v43;
      v11 = v52;
      v12 = v54;
      v29 = v56;
    }
    v58 = v30;
    v31 = *(_QWORD *)(v29 + 8);
    if ((v31 & 1) != 0)
    {
      v55 = v12;
      v57 = v29;
      v53 = v11;
      v44 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
      if ((v31 & 2) != 0
        || ((v45 = *(unsigned int *)((v31 & 0xFFFFFFFF8) + 8), (_DWORD)v45 != 0x3FFFFFFF)
          ? (v46 = (_DWORD)v45 == -1)
          : (v46 = 1),
            v46))
      {
        v47 = 2;
      }
      else if (v45 >> 28)
      {
        v51 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v51 = v44;
        *(_DWORD *)(v51 + 8) = v45;
        v47 = 1;
        v44 = v51;
      }
      else
      {
        v47 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
        v44 = v45 << 36;
      }
      v31 = v44 | v47;
      v11 = v53;
      v12 = v55;
      v29 = v57;
    }
    v59 = v31;
    v60 = *(_WORD *)(v29 + 16);
    v63 = v12;
    v62 = 183;
    v32 = (void *)JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &>(v11 + 1032, &v62, (uint64_t)&v58, (uint64_t *)&v63, a5, a6, a7, a8);
    if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
    {
      v48 = v32;
      WTF::fastFree(v59 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
      v32 = v48;
    }
    if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    {
      v49 = v32;
      WTF::fastFree(v58 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
      v32 = v49;
    }
    JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Node *)#1}::operator()(*(_QWORD *)(v9 + 32), (JSC::DFG::Node *)v32);
  }
  result = *(_QWORD *)(v9 + 40);
  v39 = *(unsigned int *)(result + 12);
  if ((_DWORD)v39 == *(_DWORD *)(result + 8))
    return (uint64_t)WTF::Vector<JSC::DFG::Edge,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge&>(result, (unint64_t)&v61, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(*(_QWORD *)result + 8 * v39) = a2;
  *(_DWORD *)(result + 12) = v39 + 1;
  return result;
}

_QWORD *WTF::Vector<JSC::DFG::Edge,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t v10;

  result = (_QWORD *)WTF::Vector<JSC::DFG::Edge,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = *result;
  *(_DWORD *)(a1 + 12) = v10 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Edge,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 8 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v16 = *(_QWORD *)a1;
        return v16 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v15 < 4)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_34;
      }
      if (!(v15 >> 29))
      {
        v16 = WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_34:
        v27 = 0;
        do
        {
          *(_QWORD *)(v16 + v27) = *(_QWORD *)(v10 + v27);
          v27 += 8;
        }
        while (8 * v11 != v27);
        if (a1 + 16 != v10 && v10)
        {
          if (v16 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v16 = *(_QWORD *)a1;
        }
        return v16 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198437784);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 4)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (v20 >> 29)
        goto LABEL_43;
      v22 = WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
    }
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v24 = (_QWORD *)v22;
      v25 = (uint64_t *)v10;
      do
      {
        v26 = *v25++;
        *v24++ = v26;
        v23 -= 8;
      }
      while (v23);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (v22 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t *JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  result = *(uint64_t **)a1;
  v4 = *(unsigned int *)(result[5] + 8);
  if (*((_DWORD *)result + 5) <= v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198437BB0);
  }
  v5 = result[1];
  v6 = *(_QWORD *)(v5 + 8 * v4);
  if (!v6)
    goto LABEL_43;
  v7 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v8 = *(_DWORD *)(v6 - 8);
  v9 = v8 & a2;
  v10 = (uint64_t *)(v6 + 40 * (v8 & a2));
  v11 = *v10;
  if (*v10 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v12 = 1;
    while (v11)
    {
      v9 = (v9 + v12) & v8;
      v10 = (uint64_t *)(v6 + 40 * v9);
      v11 = *v10;
      ++v12;
      if (*v10 == v7)
        goto LABEL_7;
    }
    v10 = (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4));
  }
LABEL_7:
  if (v10 == (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4)))
  {
LABEL_43:
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*result, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198437A94);
  }
  *(_BYTE *)(a1 + 9) |= (v10[2] & 0x40000000000) != 0;
  switch((a2 >> 50) & 0x3F)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
      return result;
    case 2uLL:
      v21 = *(_QWORD *)(v5 + 8 * v4);
      if (!v21)
        goto LABEL_47;
      v22 = *(_DWORD *)(v21 - 8);
      v23 = v22 & a2;
      v24 = (uint64_t *)(v21 + 40 * (v22 & a2));
      v25 = *v24;
      if (*v24 == v7)
        goto LABEL_24;
      v26 = 1;
      while (v25)
      {
        v23 = (v23 + v26) & v22;
        v24 = (uint64_t *)(v21 + 40 * v23);
        v25 = *v24;
        ++v26;
        if (*v24 == v7)
          goto LABEL_24;
      }
      v24 = (uint64_t *)(v21 + 40 * *(unsigned int *)(v21 - 4));
LABEL_24:
      if (v24 == (uint64_t *)(v21 + 40 * *(unsigned int *)(v21 - 4)))
      {
LABEL_47:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*result, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198437B4CLL);
      }
      if ((v24[2] & 0xFFFFFFFCFFFFFFFFLL) != 0)
        goto LABEL_34;
      return result;
    case 7uLL:
      result = JSC::DFG::AtTailAbstractState::forNode((uint64_t)result, a2 & 0xFF00FFFFFFFFFFFFLL);
      if ((result[1] & 0xFFFFFEFFFFFFFFFFLL) != 0)
        goto LABEL_34;
      return result;
    case 9uLL:
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
        goto LABEL_45;
      v14 = *(_DWORD *)(v13 - 8);
      v15 = v14 & a2;
      v16 = (uint64_t *)(v13 + 40 * (v14 & a2));
      v17 = *v16;
      if (*v16 == v7)
        goto LABEL_15;
      v18 = 1;
      while (v17)
      {
        v15 = (v15 + v18) & v14;
        v16 = (uint64_t *)(v13 + 40 * v15);
        v17 = *v16;
        ++v18;
        if (*v16 == v7)
          goto LABEL_15;
      }
      v16 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
LABEL_15:
      if (v16 == (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4)))
      {
LABEL_45:
        JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*result, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198437AF0);
      }
      v19 = v16[2];
      v20 = 0xFFFFD7FF00000008;
LABEL_17:
      if ((v19 & v20) != 0)
        goto LABEL_34;
      return result;
    case 0x17uLL:
      v27 = *(_QWORD *)(v5 + 8 * v4);
      if (!v27)
        goto LABEL_49;
      v28 = *(_DWORD *)(v27 - 8);
      v29 = v28 & a2;
      v30 = (uint64_t *)(v27 + 40 * (v28 & a2));
      v31 = *v30;
      if (*v30 == v7)
        goto LABEL_32;
      v32 = 1;
      break;
    case 0x18uLL:
      result = JSC::DFG::AtTailAbstractState::forNode((uint64_t)result, a2 & 0xFF00FFFFFFFFFFFFLL);
      v19 = result[1];
      v20 = 0xFFFFE48C0FFFFFFFLL;
      goto LABEL_17;
    case 0x2EuLL:
      result = JSC::DFG::AtTailAbstractState::forNode((uint64_t)result, a2 & 0xFF00FFFFFFFFFFFFLL);
      if ((result[1] & 0xFFFFFDFFFFFFFFFFLL) != 0)
        goto LABEL_34;
      return result;
    case 0x35uLL:
      __break(0xC471u);
      JUMPOUT(0x198437A18);
    default:
      __break(0xC471u);
      JUMPOUT(0x198437A38);
  }
  while (v31)
  {
    v29 = (v29 + v32) & v28;
    v30 = (uint64_t *)(v27 + 40 * v29);
    v31 = *v30;
    ++v32;
    if (*v30 == v7)
      goto LABEL_32;
  }
  v30 = (uint64_t *)(v27 + 40 * *(unsigned int *)(v27 - 4));
LABEL_32:
  if (v30 == (uint64_t *)(v27 + 40 * *(unsigned int *)(v27 - 4)))
  {
LABEL_49:
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)*result, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198437BA8);
  }
  if ((v30[2] & 0xFFFFFFFFCFFFFFFFLL) != 0)
LABEL_34:
    *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t JSC::DFG::Node::requiredDOMJITClassInfo(JSC::DFG::Node *this)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((unsigned __int16 *)this + 9);
  if (v1 == 417)
  {
    v2 = *((_QWORD *)this + 9) + 8;
    return *(_QWORD *)v2;
  }
  if (v1 == 416)
  {
    v2 = *((_QWORD *)this + 9) + 32;
    return *(_QWORD *)v2;
  }
  result = 3335;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<BOOL JSC::DFG::safeToExecute<JSC::DFG::AtTailAbstractState>(JSC::DFG::AtTailAbstractState &,JSC::DFG::Graph &,JSC::DFG::Node *,BOOL)::{lambda(JSC::DFG::RegisteredStructure)#1}>(uint64_t result, char *a2, uint64_t *a3)
{
  unsigned int *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;

  v3 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v11 = *v3;
    if (!(_DWORD)v11)
      return result;
    v12 = 0;
    v13 = v3 + 2;
    v14 = *a3;
    v10 = *a2;
    do
    {
      v15 = *(_QWORD *)&v13[2 * v12];
      v16 = *(unsigned int *)(v15 + 76);
      v17 = *(_DWORD *)(v15 + 76) != 0;
      v18 = 16 * v16;
      if ((_DWORD)v16)
        v19 = v14 == v18;
      else
        v19 = 1;
      if (!v19)
      {
        do
        {
          v18 = *(_QWORD *)(v18 + 16);
          v17 = v18 != 0;
        }
        while (v18 != v14 && v18 != 0);
      }
      if (v10)
        v10 = v17;
      else
        v10 = 0;
      ++v12;
    }
    while (v12 != v11);
  }
  else
  {
    if (!v3)
      return result;
    v4 = v3[19];
    v5 = v3[19] != 0;
    v6 = 16 * v4;
    v7 = *a3;
    if ((_DWORD)v4)
      v8 = v7 == v6;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v6 = *(_QWORD *)(v6 + 16);
        v5 = v6 != 0;
      }
      while (v6 != v7 && v6 != 0);
    }
    if (*a2)
      v10 = v5;
    else
      v10 = 0;
  }
  *a2 = v10;
  return result;
}

_QWORD *JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Edge &)#1}::operator()(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;

  v8 = *result;
  v9 = *(unsigned int *)(*(_QWORD *)(*result + 112) + 8);
  if (*(_DWORD *)(*result + 92) <= v9)
  {
    __break(0xC471u);
LABEL_44:
    JUMPOUT(0x198437FB8);
  }
  v10 = *a2;
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v9);
  if (!v11)
    goto LABEL_40;
  v12 = result;
  v13 = *(_DWORD *)(v11 - 8);
  v14 = v13 & v10;
  v15 = (uint64_t *)(v11 + 40 * (v13 & v10));
  v16 = *v15;
  if (*v15 != (v10 & 0xFF00FFFFFFFFFFFFLL))
  {
    v17 = 1;
    while (v16)
    {
      v14 = (v14 + v17) & v13;
      v15 = (uint64_t *)(v11 + 40 * v14);
      v16 = *v15;
      ++v17;
      if (*v15 == (v10 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v15 = (uint64_t *)(v11 + 40 * *(unsigned int *)(v11 - 4));
  }
LABEL_7:
  if (v15 == (uint64_t *)(v11 + 40 * *(unsigned int *)(v11 - 4)))
  {
LABEL_40:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v8 + 72), (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_44;
  }
  if ((*((_BYTE *)v15 + 21) & 4) != 0)
  {
    v18 = *(_QWORD *)(v8 + 32);
    v19 = result[1];
    v20 = *(_QWORD *)v19;
    if ((*(_QWORD *)v19 & 1) != 0)
    {
      v30 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v31 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
          ? (v32 = (_DWORD)v31 == -1)
          : (v32 = 1),
            v32))
      {
        v33 = 2;
      }
      else if (v31 >> 28)
      {
        v38 = v30;
        v42 = v12[1];
        v44 = a2;
        v39 = v31;
        v30 = WTF::fastMalloc((WTF *)0x10);
        v19 = v42;
        a2 = v44;
        *(_QWORD *)v30 = v38;
        *(_DWORD *)(v30 + 8) = v39;
        v33 = 1;
      }
      else
      {
        v33 = v30;
        v30 = v31 << 36;
      }
      v20 = v30 | v33;
    }
    v46 = v20;
    v21 = *(_QWORD *)(v19 + 8);
    if ((v21 & 1) != 0)
    {
      v34 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      if ((v21 & 2) != 0
        || ((v35 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
          ? (v36 = (_DWORD)v35 == -1)
          : (v36 = 1),
            v36))
      {
        v37 = 2;
      }
      else if (v35 >> 28)
      {
        v40 = v34;
        v43 = v19;
        v45 = a2;
        v41 = v35;
        v34 = WTF::fastMalloc((WTF *)0x10);
        v19 = v43;
        a2 = v45;
        *(_QWORD *)v34 = v40;
        *(_DWORD *)(v34 + 8) = v41;
        v37 = 1;
      }
      else
      {
        v37 = v34;
        v34 = v35 << 36;
      }
      v21 = v34 | v37;
    }
    v47 = v21;
    v48 = *(_WORD *)(v19 + 16);
    v50 = *a2 & 0xFF00FFFFFFFFFFFFLL;
    v49 = 183;
    v29 = (JSC::DFG::Node *)JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::Edge &>(v18 + 1032, &v49, (uint64_t)&v46, (uint64_t *)&v50, a5, a6, a7, a8);
    if ((v47 & 1) != 0 && (v47 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v47 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
    if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v46 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
    return JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(JSC::DFG::Node *)#1}::operator()(v12[2], v29);
  }
  return result;
}

_QWORD *WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Node *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 3)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1984381E8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 3)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t JSC::DFG::LICMPhase::attemptHoist(JSC::DFG::BasicBlock *,JSC::DFG::Node *&,WTF::NaturalLoop<JSC::DFG::CFG> const*)::{lambda(void)#1}::operator() const(void)::{lambda(WTF::NaturalLoop<JSC::DFG::CFG> const*)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a2 + 68);
  if (*(_DWORD *)(result + 180) <= v2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 168) + 16 * v2 + 8);
    *(_BYTE *)(v3 + 17) = 0;
    v4 = *(_DWORD *)(a2 + 28);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = v4 - 1;
      do
      {
        v7 = *(_QWORD *)(v5 + 8 * v6);
        if (v7 != v3)
          *(_BYTE *)(v7 + 15) = 0;
        *(_BYTE *)(v7 + 17) = 0;
      }
      while ((unint64_t)v6--);
    }
  }
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEdges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  JSC::DFG::AbstractValue *v50;
  unint64_t v51;
  JSC::DFG::AbstractValue *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  JSC::DFG::AbstractValue *v71;
  JSC::DFG::AbstractValue *v72;

  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    if (*(_DWORD *)(a2 + 32) + *(_QWORD *)(a2 + 24) > *(_QWORD *)(a2 + 24))
    {
      v53 = *(_QWORD *)(a1 + 8);
      v54 = *(_QWORD *)(a2 + 24);
      do
      {
        if (v54 >= *(unsigned int *)(v53 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x198438F1CLL);
        }
        v55 = *(_QWORD *)(v53 + 152);
        v56 = *(_QWORD *)(v55 + 8 * v54);
        v57 = v56 & 0xFF00FFFFFFFFFFFFLL;
        if ((v56 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v58 = 0x300000000;
          switch((v56 >> 50) & 0x3F)
          {
            case 0uLL:
              goto LABEL_71;
            case 1uLL:
            case 2uLL:
              goto LABEL_61;
            case 3uLL:
              v58 = 0x1300000000;
              goto LABEL_61;
            case 4uLL:
              v58 = 0x7300000000;
              goto LABEL_61;
            case 5uLL:
              v58 = 0x3300000000;
              goto LABEL_61;
            case 6uLL:
            case 7uLL:
              v58 = 0x10000000000;
              goto LABEL_61;
            case 8uLL:
            case 9uLL:
              v58 = 0x2C00FFFFFFF7;
              goto LABEL_61;
            case 0xAuLL:
              v58 = 0x2E00FFFFFFF7;
              goto LABEL_61;
            case 0xBuLL:
              v58 = 0x20000FFFFFF7;
              goto LABEL_61;
            case 0xCuLL:
              v58 = 2;
              goto LABEL_61;
            case 0xDuLL:
              v58 = 4;
              goto LABEL_61;
            case 0xEuLL:
              v58 = 1;
              goto LABEL_61;
            case 0xFuLL:
              v58 = 0x100000;
              goto LABEL_61;
            case 0x10uLL:
              v58 = 0x40000;
              goto LABEL_61;
            case 0x11uLL:
              v58 = 0x2000000;
              goto LABEL_61;
            case 0x12uLL:
              v58 = 0x4000000;
              goto LABEL_61;
            case 0x13uLL:
              v58 = 0x22000FFFFFF7;
              goto LABEL_61;
            case 0x14uLL:
              v58 = 0x10000000;
              goto LABEL_61;
            case 0x15uLL:
            case 0x17uLL:
              v58 = 805306368;
              goto LABEL_61;
            case 0x16uLL:
              v58 = 0x20030000000;
              goto LABEL_61;
            case 0x18uLL:
              v58 = 0x1B73F0000000;
              goto LABEL_61;
            case 0x19uLL:
              v58 = 0x40000000;
              goto LABEL_61;
            case 0x1AuLL:
            case 0x1BuLL:
              v58 = 0x80000000000;
              goto LABEL_61;
            case 0x1CuLL:
              v58 = 0x100000000000;
              goto LABEL_61;
            case 0x1DuLL:
              v58 = 0x80000;
              goto LABEL_61;
            case 0x1EuLL:
              v58 = 0x200000;
              goto LABEL_61;
            case 0x1FuLL:
              v58 = 0x400000;
              goto LABEL_61;
            case 0x20uLL:
            case 0x21uLL:
              v58 = 0x8000000;
              goto LABEL_61;
            case 0x22uLL:
              v58 = 0x800000;
              goto LABEL_61;
            case 0x23uLL:
              v58 = 0x1000000;
              goto LABEL_61;
            case 0x24uLL:
              v58 = 0x200000000000;
              goto LABEL_61;
            case 0x25uLL:
              v58 = 0x20000;
              goto LABEL_61;
            case 0x26uLL:
              v58 = 805437440;
              goto LABEL_61;
            case 0x27uLL:
              v58 = -536870913;
              goto LABEL_61;
            case 0x28uLL:
              v58 = -1073741825;
              goto LABEL_61;
            case 0x29uLL:
            case 0x2AuLL:
              v58 = 0xFFFFD3FF00000008;
              goto LABEL_61;
            case 0x2BuLL:
              v58 = 0xFFFFFF0FFFFFFFFFLL;
              goto LABEL_61;
            case 0x2CuLL:
              v58 = 0xFFFFF70FFFFFFFFFLL;
              goto LABEL_61;
            case 0x2DuLL:
              v58 = 0xFFFFF70FCFFFFFFFLL;
              goto LABEL_61;
            case 0x2EuLL:
            case 0x2FuLL:
              v58 = 0x20000000000;
              goto LABEL_61;
            case 0x30uLL:
              v58 = 0x30000000000;
              goto LABEL_61;
            case 0x31uLL:
              v58 = 0xF000000000;
              goto LABEL_61;
            case 0x32uLL:
              v58 = 0x3000000000;
              goto LABEL_61;
            case 0x33uLL:
              v58 = 0x1000000000;
              goto LABEL_61;
            case 0x34uLL:
              v58 = 0xC00000000;
LABEL_61:
              v59 = *(_QWORD *)(a1 + 24);
              v60 = *(unsigned int *)(*(_QWORD *)(v59 + 40) + 8);
              if (*(_DWORD *)(v59 + 20) <= v60)
              {
                __break(0xC471u);
                JUMPOUT(0x198438F24);
              }
              v61 = *(_QWORD *)(*(_QWORD *)(v59 + 8) + 8 * v60);
              if (!v61)
                goto LABEL_230;
              v62 = *(_DWORD *)(v61 - 8);
              v63 = v62 & v56;
              v64 = (uint64_t *)(v61 + 40 * (v62 & v56));
              v65 = *v64;
              if (*v64 == v57)
                goto LABEL_67;
              v66 = 1;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198438EECLL);
          }
          while (v65)
          {
            v63 = (v63 + v66) & v62;
            v64 = (uint64_t *)(v61 + 40 * v63);
            v65 = *v64;
            ++v66;
            if (*v64 == v57)
              goto LABEL_67;
          }
          v64 = (uint64_t *)(v61 + 40 * *(unsigned int *)(v61 - 4));
LABEL_67:
          if (v64 == (uint64_t *)(v61 + 40 * *(unsigned int *)(v61 - 4)))
          {
LABEL_230:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v59, (JSC::DFG::Node *)(v56 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
            __break(0xC471u);
            JUMPOUT(0x198438DACLL);
          }
          v67 = v64[2];
          v68 = *(unsigned __int8 *)(v59 + 48);
          if ((v67 & ~v58) != 0)
          {
            if (v68)
              *(_QWORD *)(v55 + 8 * v54) = v56 & 0xFFFEFFFFFFFFFFFFLL;
            v69 = v67 & v58;
            if ((v67 & v58) != v67)
            {
              v72 = (JSC::DFG::AbstractValue *)(v64 + 1);
              if ((v67 & 0x2800FFFFFFF7) != 0)
              {
                JSC::DFG::AbstractValue::filterSlow(v72, v58, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                v64[2] = v69;
                if (!v69)
                  JSC::DFG::AbstractValue::clear(v72, v58, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          else if (v68)
          {
            *(_QWORD *)(v55 + 8 * v54) = v56 | 0x1000000000000;
          }
        }
LABEL_71:
        ++v54;
      }
      while (v54 < (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 24)));
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v12 = 0x300000000;
      switch((v10 >> 50) & 0x3F)
      {
        case 0uLL:
          goto LABEL_15;
        case 1uLL:
        case 2uLL:
          goto LABEL_5;
        case 3uLL:
          v12 = 0x1300000000;
          goto LABEL_5;
        case 4uLL:
          v12 = 0x7300000000;
          goto LABEL_5;
        case 5uLL:
          v12 = 0x3300000000;
          goto LABEL_5;
        case 6uLL:
        case 7uLL:
          v12 = 0x10000000000;
          goto LABEL_5;
        case 8uLL:
        case 9uLL:
          v12 = 0x2C00FFFFFFF7;
          goto LABEL_5;
        case 0xAuLL:
          v12 = 0x2E00FFFFFFF7;
          goto LABEL_5;
        case 0xBuLL:
          v12 = 0x20000FFFFFF7;
          goto LABEL_5;
        case 0xCuLL:
          v12 = 2;
          goto LABEL_5;
        case 0xDuLL:
          v12 = 4;
          goto LABEL_5;
        case 0xEuLL:
          v12 = 1;
          goto LABEL_5;
        case 0xFuLL:
          v12 = 0x100000;
          goto LABEL_5;
        case 0x10uLL:
          v12 = 0x40000;
          goto LABEL_5;
        case 0x11uLL:
          v12 = 0x2000000;
          goto LABEL_5;
        case 0x12uLL:
          v12 = 0x4000000;
          goto LABEL_5;
        case 0x13uLL:
          v12 = 0x22000FFFFFF7;
          goto LABEL_5;
        case 0x14uLL:
          v12 = 0x10000000;
          goto LABEL_5;
        case 0x15uLL:
        case 0x17uLL:
          v12 = 805306368;
          goto LABEL_5;
        case 0x16uLL:
          v12 = 0x20030000000;
          goto LABEL_5;
        case 0x18uLL:
          v12 = 0x1B73F0000000;
          goto LABEL_5;
        case 0x19uLL:
          v12 = 0x40000000;
          goto LABEL_5;
        case 0x1AuLL:
        case 0x1BuLL:
          v12 = 0x80000000000;
          goto LABEL_5;
        case 0x1CuLL:
          v12 = 0x100000000000;
          goto LABEL_5;
        case 0x1DuLL:
          v12 = 0x80000;
          goto LABEL_5;
        case 0x1EuLL:
          v12 = 0x200000;
          goto LABEL_5;
        case 0x1FuLL:
          v12 = 0x400000;
          goto LABEL_5;
        case 0x20uLL:
        case 0x21uLL:
          v12 = 0x8000000;
          goto LABEL_5;
        case 0x22uLL:
          v12 = 0x800000;
          goto LABEL_5;
        case 0x23uLL:
          v12 = 0x1000000;
          goto LABEL_5;
        case 0x24uLL:
          v12 = 0x200000000000;
          goto LABEL_5;
        case 0x25uLL:
          v12 = 0x20000;
          goto LABEL_5;
        case 0x26uLL:
          v12 = 805437440;
          goto LABEL_5;
        case 0x27uLL:
          v12 = -536870913;
          goto LABEL_5;
        case 0x28uLL:
          v12 = -1073741825;
          goto LABEL_5;
        case 0x29uLL:
        case 0x2AuLL:
          v12 = 0xFFFFD3FF00000008;
          goto LABEL_5;
        case 0x2BuLL:
          v12 = 0xFFFFFF0FFFFFFFFFLL;
          goto LABEL_5;
        case 0x2CuLL:
          v12 = 0xFFFFF70FFFFFFFFFLL;
          goto LABEL_5;
        case 0x2DuLL:
          v12 = 0xFFFFF70FCFFFFFFFLL;
          goto LABEL_5;
        case 0x2EuLL:
        case 0x2FuLL:
          v12 = 0x20000000000;
          goto LABEL_5;
        case 0x30uLL:
          v12 = 0x30000000000;
          goto LABEL_5;
        case 0x31uLL:
          v12 = 0xF000000000;
          goto LABEL_5;
        case 0x32uLL:
          v12 = 0x3000000000;
          goto LABEL_5;
        case 0x33uLL:
          v12 = 0x1000000000;
          goto LABEL_5;
        case 0x34uLL:
          v12 = 0xC00000000;
LABEL_5:
          v13 = *(_QWORD *)(a1 + 24);
          v14 = *(unsigned int *)(*(_QWORD *)(v13 + 40) + 8);
          if (*(_DWORD *)(v13 + 20) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x198438F04);
          }
          v15 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v14);
          if (!v15)
            goto LABEL_207;
          v16 = *(_DWORD *)(v15 - 8);
          v17 = v16 & v10;
          v18 = (uint64_t *)(v15 + 40 * (v16 & v10));
          v19 = *v18;
          if (*v18 == v11)
            goto LABEL_11;
          v20 = 1;
          break;
        default:
LABEL_248:
          __break(0xC471u);
          JUMPOUT(0x198438E54);
      }
      while (v19)
      {
        v17 = (v17 + v20) & v16;
        v18 = (uint64_t *)(v15 + 40 * v17);
        v19 = *v18;
        ++v20;
        if (*v18 == v11)
          goto LABEL_11;
      }
      v18 = (uint64_t *)(v15 + 40 * *(unsigned int *)(v15 - 4));
LABEL_11:
      if (v18 == (uint64_t *)(v15 + 40 * *(unsigned int *)(v15 - 4)))
      {
LABEL_207:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v13, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198438C04);
      }
      v21 = v18[2];
      v22 = *(unsigned __int8 *)(v13 + 48);
      if ((v21 & ~v12) != 0)
      {
        if (v22)
          *(_QWORD *)(a2 + 24) = v10 & 0xFFFEFFFFFFFFFFFFLL;
        v49 = v21 & v12;
        if ((v21 & v12) != v21)
        {
          v50 = (JSC::DFG::AbstractValue *)(v18 + 1);
          if ((v21 & 0x2800FFFFFFF7) != 0)
          {
            JSC::DFG::AbstractValue::filterSlow(v50, v12, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v18[2] = v49;
            if (!v49)
              JSC::DFG::AbstractValue::clear(v50, v12, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else if (v22)
      {
        *(_QWORD *)(a2 + 24) = v10 | 0x1000000000000;
      }
LABEL_15:
      v23 = *(_QWORD *)(a2 + 32);
      v24 = v23 & 0xFF00FFFFFFFFFFFFLL;
      if ((v23 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v25 = 0x300000000;
        switch((v23 >> 50) & 0x3F)
        {
          case 0uLL:
            goto LABEL_28;
          case 1uLL:
          case 2uLL:
            goto LABEL_18;
          case 3uLL:
            v25 = 0x1300000000;
            goto LABEL_18;
          case 4uLL:
            v25 = 0x7300000000;
            goto LABEL_18;
          case 5uLL:
            v25 = 0x3300000000;
            goto LABEL_18;
          case 6uLL:
          case 7uLL:
            v25 = 0x10000000000;
            goto LABEL_18;
          case 8uLL:
          case 9uLL:
            v25 = 0x2C00FFFFFFF7;
            goto LABEL_18;
          case 0xAuLL:
            v25 = 0x2E00FFFFFFF7;
            goto LABEL_18;
          case 0xBuLL:
            v25 = 0x20000FFFFFF7;
            goto LABEL_18;
          case 0xCuLL:
            v25 = 2;
            goto LABEL_18;
          case 0xDuLL:
            v25 = 4;
            goto LABEL_18;
          case 0xEuLL:
            v25 = 1;
            goto LABEL_18;
          case 0xFuLL:
            v25 = 0x100000;
            goto LABEL_18;
          case 0x10uLL:
            v25 = 0x40000;
            goto LABEL_18;
          case 0x11uLL:
            v25 = 0x2000000;
            goto LABEL_18;
          case 0x12uLL:
            v25 = 0x4000000;
            goto LABEL_18;
          case 0x13uLL:
            v25 = 0x22000FFFFFF7;
            goto LABEL_18;
          case 0x14uLL:
            v25 = 0x10000000;
            goto LABEL_18;
          case 0x15uLL:
          case 0x17uLL:
            v25 = 805306368;
            goto LABEL_18;
          case 0x16uLL:
            v25 = 0x20030000000;
            goto LABEL_18;
          case 0x18uLL:
            v25 = 0x1B73F0000000;
            goto LABEL_18;
          case 0x19uLL:
            v25 = 0x40000000;
            goto LABEL_18;
          case 0x1AuLL:
          case 0x1BuLL:
            v25 = 0x80000000000;
            goto LABEL_18;
          case 0x1CuLL:
            v25 = 0x100000000000;
            goto LABEL_18;
          case 0x1DuLL:
            v25 = 0x80000;
            goto LABEL_18;
          case 0x1EuLL:
            v25 = 0x200000;
            goto LABEL_18;
          case 0x1FuLL:
            v25 = 0x400000;
            goto LABEL_18;
          case 0x20uLL:
          case 0x21uLL:
            v25 = 0x8000000;
            goto LABEL_18;
          case 0x22uLL:
            v25 = 0x800000;
            goto LABEL_18;
          case 0x23uLL:
            v25 = 0x1000000;
            goto LABEL_18;
          case 0x24uLL:
            v25 = 0x200000000000;
            goto LABEL_18;
          case 0x25uLL:
            v25 = 0x20000;
            goto LABEL_18;
          case 0x26uLL:
            v25 = 805437440;
            goto LABEL_18;
          case 0x27uLL:
            v25 = -536870913;
            goto LABEL_18;
          case 0x28uLL:
            v25 = -1073741825;
            goto LABEL_18;
          case 0x29uLL:
          case 0x2AuLL:
            v25 = 0xFFFFD3FF00000008;
            goto LABEL_18;
          case 0x2BuLL:
            v25 = 0xFFFFFF0FFFFFFFFFLL;
            goto LABEL_18;
          case 0x2CuLL:
            v25 = 0xFFFFF70FFFFFFFFFLL;
            goto LABEL_18;
          case 0x2DuLL:
            v25 = 0xFFFFF70FCFFFFFFFLL;
            goto LABEL_18;
          case 0x2EuLL:
          case 0x2FuLL:
            v25 = 0x20000000000;
            goto LABEL_18;
          case 0x30uLL:
            v25 = 0x30000000000;
            goto LABEL_18;
          case 0x31uLL:
            v25 = 0xF000000000;
            goto LABEL_18;
          case 0x32uLL:
            v25 = 0x3000000000;
            goto LABEL_18;
          case 0x33uLL:
            v25 = 0x1000000000;
            goto LABEL_18;
          case 0x34uLL:
            v25 = 0xC00000000;
LABEL_18:
            v26 = *(_QWORD *)(a1 + 24);
            v27 = *(unsigned int *)(*(_QWORD *)(v26 + 40) + 8);
            if (*(_DWORD *)(v26 + 20) <= v27)
            {
              __break(0xC471u);
              JUMPOUT(0x198438F0CLL);
            }
            v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v27);
            if (!v28)
              goto LABEL_217;
            v29 = *(_DWORD *)(v28 - 8);
            v30 = v29 & v23;
            v31 = (uint64_t *)(v28 + 40 * (v29 & v23));
            v32 = *v31;
            if (*v31 == v24)
              goto LABEL_24;
            v33 = 1;
            break;
          default:
            goto LABEL_248;
        }
        while (v32)
        {
          v30 = (v30 + v33) & v29;
          v31 = (uint64_t *)(v28 + 40 * v30);
          v32 = *v31;
          ++v33;
          if (*v31 == v24)
            goto LABEL_24;
        }
        v31 = (uint64_t *)(v28 + 40 * *(unsigned int *)(v28 - 4));
LABEL_24:
        if (v31 == (uint64_t *)(v28 + 40 * *(unsigned int *)(v28 - 4)))
        {
LABEL_217:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v26, (JSC::DFG::Node *)(v23 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x198438CA8);
        }
        v34 = v31[2];
        v35 = *(unsigned __int8 *)(v26 + 48);
        if ((v34 & ~v25) != 0)
        {
          if (v35)
            *(_QWORD *)(a2 + 32) = v23 & 0xFFFEFFFFFFFFFFFFLL;
          v51 = v34 & v25;
          if ((v34 & v25) != v34)
          {
            v52 = (JSC::DFG::AbstractValue *)(v31 + 1);
            if ((v34 & 0x2800FFFFFFF7) != 0)
            {
              JSC::DFG::AbstractValue::filterSlow(v52, v25, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v31[2] = v51;
              if (!v51)
                JSC::DFG::AbstractValue::clear(v52, v25, a3, a4, a5, a6, a7, a8);
            }
          }
        }
        else if (v35)
        {
          *(_QWORD *)(a2 + 32) = v23 | 0x1000000000000;
        }
LABEL_28:
        v36 = *(_QWORD *)(a2 + 40);
        v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
        if ((v36 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v38 = 0x300000000;
          switch((v36 >> 50) & 0x3F)
          {
            case 0uLL:
              return;
            case 1uLL:
            case 2uLL:
              goto LABEL_31;
            case 3uLL:
              v38 = 0x1300000000;
              goto LABEL_31;
            case 4uLL:
              v38 = 0x7300000000;
              goto LABEL_31;
            case 5uLL:
              v38 = 0x3300000000;
              goto LABEL_31;
            case 6uLL:
            case 7uLL:
              v38 = 0x10000000000;
              goto LABEL_31;
            case 8uLL:
            case 9uLL:
              v38 = 0x2C00FFFFFFF7;
              goto LABEL_31;
            case 0xAuLL:
              v38 = 0x2E00FFFFFFF7;
              goto LABEL_31;
            case 0xBuLL:
              v38 = 0x20000FFFFFF7;
              goto LABEL_31;
            case 0xCuLL:
              v38 = 2;
              goto LABEL_31;
            case 0xDuLL:
              v38 = 4;
              goto LABEL_31;
            case 0xEuLL:
              v38 = 1;
              goto LABEL_31;
            case 0xFuLL:
              v38 = 0x100000;
              goto LABEL_31;
            case 0x10uLL:
              v38 = 0x40000;
              goto LABEL_31;
            case 0x11uLL:
              v38 = 0x2000000;
              goto LABEL_31;
            case 0x12uLL:
              v38 = 0x4000000;
              goto LABEL_31;
            case 0x13uLL:
              v38 = 0x22000FFFFFF7;
              goto LABEL_31;
            case 0x14uLL:
              v38 = 0x10000000;
              goto LABEL_31;
            case 0x15uLL:
            case 0x17uLL:
              v38 = 805306368;
              goto LABEL_31;
            case 0x16uLL:
              v38 = 0x20030000000;
              goto LABEL_31;
            case 0x18uLL:
              v38 = 0x1B73F0000000;
              goto LABEL_31;
            case 0x19uLL:
              v38 = 0x40000000;
              goto LABEL_31;
            case 0x1AuLL:
            case 0x1BuLL:
              v38 = 0x80000000000;
              goto LABEL_31;
            case 0x1CuLL:
              v38 = 0x100000000000;
              goto LABEL_31;
            case 0x1DuLL:
              v38 = 0x80000;
              goto LABEL_31;
            case 0x1EuLL:
              v38 = 0x200000;
              goto LABEL_31;
            case 0x1FuLL:
              v38 = 0x400000;
              goto LABEL_31;
            case 0x20uLL:
            case 0x21uLL:
              v38 = 0x8000000;
              goto LABEL_31;
            case 0x22uLL:
              v38 = 0x800000;
              goto LABEL_31;
            case 0x23uLL:
              v38 = 0x1000000;
              goto LABEL_31;
            case 0x24uLL:
              v38 = 0x200000000000;
              goto LABEL_31;
            case 0x25uLL:
              v38 = 0x20000;
              goto LABEL_31;
            case 0x26uLL:
              v38 = 805437440;
              goto LABEL_31;
            case 0x27uLL:
              v38 = -536870913;
              goto LABEL_31;
            case 0x28uLL:
              v38 = -1073741825;
              goto LABEL_31;
            case 0x29uLL:
            case 0x2AuLL:
              v38 = 0xFFFFD3FF00000008;
              goto LABEL_31;
            case 0x2BuLL:
              v38 = 0xFFFFFF0FFFFFFFFFLL;
              goto LABEL_31;
            case 0x2CuLL:
              v38 = 0xFFFFF70FFFFFFFFFLL;
              goto LABEL_31;
            case 0x2DuLL:
              v38 = 0xFFFFF70FCFFFFFFFLL;
              goto LABEL_31;
            case 0x2EuLL:
            case 0x2FuLL:
              v38 = 0x20000000000;
              goto LABEL_31;
            case 0x30uLL:
              v38 = 0x30000000000;
              goto LABEL_31;
            case 0x31uLL:
              v38 = 0xF000000000;
              goto LABEL_31;
            case 0x32uLL:
              v38 = 0x3000000000;
              goto LABEL_31;
            case 0x33uLL:
              v38 = 0x1000000000;
              goto LABEL_31;
            case 0x34uLL:
              v38 = 0xC00000000;
LABEL_31:
              v39 = *(_QWORD *)(a1 + 24);
              v40 = *(unsigned int *)(*(_QWORD *)(v39 + 40) + 8);
              if (*(_DWORD *)(v39 + 20) <= v40)
              {
                __break(0xC471u);
                JUMPOUT(0x198438F14);
              }
              v41 = *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v40);
              if (!v41)
                goto LABEL_222;
              v42 = *(_DWORD *)(v41 - 8);
              v43 = v42 & v36;
              v44 = (uint64_t *)(v41 + 40 * (v42 & v36));
              v45 = *v44;
              if (*v44 == v37)
                goto LABEL_37;
              v46 = 1;
              break;
            default:
              goto LABEL_248;
          }
          while (v45)
          {
            v43 = (v43 + v46) & v42;
            v44 = (uint64_t *)(v41 + 40 * v43);
            v45 = *v44;
            ++v46;
            if (*v44 == v37)
              goto LABEL_37;
          }
          v44 = (uint64_t *)(v41 + 40 * *(unsigned int *)(v41 - 4));
LABEL_37:
          if (v44 == (uint64_t *)(v41 + 40 * *(unsigned int *)(v41 - 4)))
          {
LABEL_222:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v39, (JSC::DFG::Node *)(v36 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
            __break(0xC471u);
            JUMPOUT(0x198438D20);
          }
          v47 = v44[2];
          v48 = *(unsigned __int8 *)(v39 + 48);
          if ((v47 & ~v38) != 0)
          {
            if (v48)
              *(_QWORD *)(a2 + 40) = v36 & 0xFFFEFFFFFFFFFFFFLL;
            v70 = v47 & v38;
            if ((v47 & v38) != v47)
            {
              v71 = (JSC::DFG::AbstractValue *)(v44 + 1);
              if ((v47 & 0x2800FFFFFFF7) != 0)
              {
                JSC::DFG::AbstractValue::filterSlow(v71, v38, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                v44[2] = v70;
                if (!v70)
                  JSC::DFG::AbstractValue::clear(v71, v38, a3, a4, a5, a6, a7, a8);
              }
            }
          }
          else if (v48)
          {
            *(_QWORD *)(a2 + 40) = v36 | 0x1000000000000;
          }
        }
      }
    }
  }
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  JSCell *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  JSC::DFG::Graph *v102;
  uint64_t *v103;
  JSC::DFG::Node *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  JSCell **v111;
  JSCell *v112;
  int v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _BOOL4 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  int v162;
  unsigned int v163;
  void **v164;
  void *v165;
  int v166;
  void **v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  JSC::JSBigInt *v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  JSC::DFG::AbstractValue *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  _QWORD *v203;
  uint64_t v204;
  int v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  JSC::DFG::Node *v220;
  int v221;
  unint64_t v222;
  _BYTE *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  __int128 v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  int v252;
  _QWORD *v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t *v270;
  uint64_t v271;
  int v272;
  uint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t *v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  JSC::DFG::Node *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unsigned int v291;
  _QWORD *v292;
  JSC::DFG::Node *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  int v305;
  unsigned int v306;
  uint64_t *v307;
  unint64_t v308;
  BOOL v309;
  int v310;
  unsigned int v311;
  uint64_t *v312;
  uint64_t v313;
  int v314;
  JSC::DFG::Graph *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  BOOL v325;
  JSC::DFG::Graph **v326;
  JSC::JSArrayBufferView *FoldableView;
  int v328;
  uint64_t v329;
  unsigned int *v330;
  uint64_t v331;
  unint64_t v332;
  BOOL v333;
  __int128 *v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  int v338;
  __int128 *v339;
  uint64_t v340;
  int v341;
  __int128 *v342;
  __int128 *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  unint64_t ConstantClosureVar;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  JSC::DFG::Node *v363;
  uint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  JSC::DFG::Node *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  __int128 v387;
  uint64_t *v388;
  int v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  JSC::DFG::Graph **v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int *v412;
  _DWORD *v413;
  uint64_t v414;
  unsigned int v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  JSC::DFG::Node *v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  uint64_t *v442;
  JSC::DFG::Graph **v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  JSC::DFG::Graph *v450;
  const JSC::DFG::AbstractValue *v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void **v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  unint64_t v483;
  uint64_t *v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v493;
  uint64_t *v494;
  uint64_t *v495;
  unint64_t v496;
  uint64_t *v497;
  uint64_t *v498;
  uint64_t v499;
  BOOL v500;
  uint64_t v501;
  unint64_t v502;
  WTF *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  unint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t *v518;
  _QWORD *v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t ConstantProperty;
  void *v528;
  uint64_t v529;
  __int128 *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  int8x16_t v556;
  BOOL v557;
  uint64_t *v558;
  unint64_t v559;
  uint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  uint64_t v567;
  const JSC::DFG::AbstractValue *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t v591;
  int v593;
  uint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t *v600;
  int v601;
  uint64_t *v602;
  unint64_t v603;
  unint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  JSC::DFG::Graph **v613;
  double v614;
  char v615;
  int v616;
  double v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t **v633;
  int v634;
  JSC::DFG::Graph **v635;
  uint64_t v636;
  JSC::DFG::Node *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  BOOL v645;
  JSC::DFG::Graph **v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t *v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  JSCell *v671;
  BOOL v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  JSC::DFG::Graph **v676;
  JSC::Structure *v677;
  uint64_t *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  JSC::DFG::Graph *v684;
  JSC::Structure *v685;
  uint64_t *v686;
  uint64_t v687;
  uint64_t v688;
  JSC::DFG::Graph **v689;
  uint64_t v690;
  _QWORD *v691;
  int v692;
  JSC::Structure *v693;
  JSC::DFG::Graph **v694;
  uint64_t *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  void *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  BOOL v715;
  JSC::DFG::Graph **v716;
  unint64_t v717;
  unint64_t v718;
  BOOL v720;
  int v721;
  char **v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  _QWORD *v728;
  BOOL v729;
  BOOL v730;
  int v731;
  unint64_t v732;
  unsigned int v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  void *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unsigned int v746;
  _DWORD *v747;
  void *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  int v757;
  JSC::DFG::AbstractValue *v758;
  void *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  double v773;
  double v774;
  double v775;
  uint64_t v776;
  unint64_t v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t *v780;
  void *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  void *v795;
  unint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t *v802;
  unint64_t *v803;
  unint64_t v804;
  const JSC::ObjectPropertyCondition *v805;
  uint64_t v806;
  char v807;
  uint64_t v808;
  unint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t *v817;
  uint64_t v818;
  uint64_t v819;
  char v820;
  unint64_t v821;
  uint64_t *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t *v831;
  double v832;
  uint64_t v834;
  uint64_t v835;
  _QWORD *v836;
  uint64_t v837;
  _QWORD *v838;
  uint64_t v839;
  uint64_t v840;
  double v841;
  double v842;
  uint64_t *v843;
  uint64_t *v844;
  unsigned __int8 v845;
  uint64_t *v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  BOOL v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  void *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  JSC::DFG::Node *v877;
  int *v878;
  int v879;
  uint64_t v880;
  unint64_t *v881;
  unint64_t *v882;
  unint64_t *v883;
  uint64_t v884;
  unsigned int v885;
  JSC::DFG::Graph **v886;
  uint64_t *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  JSC::DFG::Graph *v893;
  const JSC::DFG::AbstractValue *v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  __int128 *v904;
  unint64_t v905;
  unint64_t v906;
  BOOL v907;
  uint64_t v909;
  uint64_t v910;
  int v911;
  _QWORD *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v925;
  uint64_t *v926;
  uint64_t v927;
  uint64_t *v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  JSC::DFG::Graph *v935;
  uint64_t *v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  JSC::JSArrayBufferView *v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t *v958;
  uint64_t v959;
  _QWORD *v960;
  _QWORD *v961;
  _QWORD *v962;
  unint64_t v963;
  uint64_t v964;
  uint64_t *v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  JSC::JSArrayBufferView *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unint64_t v980;
  unint64_t v981;
  uint64_t v982;
  BOOL v983;
  unsigned int *v984;
  uint64_t *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  __int128 *v998;
  uint64_t *v999;
  uint64_t v1000;
  BOOL v1001;
  unint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  void *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  uint64_t v1018;
  __int16 v1019;
  uint64_t *v1020;
  unint64_t v1021;
  void *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  BOOL isAnyInt;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  unsigned int v1037;
  JSC::JSArrayBufferView *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  JSC::DFG::Node *v1047;
  uint64_t v1048;
  int v1049;
  _QWORD *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  _DWORD *v1061;
  __int128 *v1062;
  uint64_t *v1063;
  int v1064;
  uint64_t v1065;
  BOOL v1066;
  uint64_t v1067;
  uint64_t v1069;
  BOOL v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t *v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  BOOL v1085;
  unint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  JSC::DFG::Graph **v1089;
  uint64_t *v1090;
  JSC::DFG::Graph **v1091;
  uint64_t *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  WTF *v1105;
  unint64_t v1106;
  unsigned int *v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  double v1114;
  double v1115;
  double v1116;
  double v1117;
  uint64_t v1118;
  unint64_t v1119;
  BOOL v1120;
  uint64_t *v1121;
  unint64_t v1122;
  uint64_t *v1123;
  unint64_t v1124;
  uint64_t v1125;
  _QWORD *v1126;
  int v1127;
  JSC::Structure *v1128;
  JSC::DFG::Graph **v1129;
  uint64_t *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  void *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t *v1144;
  uint64_t v1145;
  int *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  void *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  JSC::JSBoundFunction *v1161;
  uint64_t *v1162;
  uint64_t *v1163;
  JSC::Structure *v1164;
  unint64_t v1165;
  JSC::JSGlobalObject *v1167;
  int v1168;
  JSC::DFG::Graph **v1169;
  unint64_t v1170;
  unint64_t v1171;
  JSC::DFG::Graph **v1172;
  unint64_t v1173;
  uint64_t v1174;
  _QWORD *v1175;
  int v1176;
  JSC::Structure *v1177;
  JSC::DFG::Graph **v1178;
  uint64_t *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  JSC::DFG::Graph **v1185;
  uint64_t *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  JSC::DFG::Graph **v1192;
  uint64_t *v1193;
  unint64_t v1194;
  unint64_t v1195;
  int v1196;
  uint64_t v1197;
  BOOL v1198;
  uint64_t v1199;
  uint64_t *v1200;
  uint64_t v1201;
  unint64_t v1202;
  unint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  BOOL v1211;
  WTF::StringImpl *v1212;
  unsigned int v1214;
  unsigned int v1215;
  __int128 *v1216;
  void *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  _QWORD *v1225;
  int v1226;
  JSC::Structure *v1227;
  JSC::DFG::Graph **v1228;
  uint64_t *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  __int128 *v1242;
  uint64_t v1243;
  JSC::DFG::Graph **v1244;
  int v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  JSC::DFG::AbstractValue *v1253;
  uint64_t v1254;
  __int128 v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  JSC::DFG::Graph **v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  _QWORD *v1264;
  int v1265;
  JSC::Structure *v1266;
  JSC::DFG::Graph **v1267;
  uint64_t *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  BOOL v1281;
  __int128 *v1282;
  uint64_t v1283;
  JSC::DFG::Graph **v1284;
  uint64_t *v1285;
  uint64_t v1286;
  JSC::JSFunction *v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  __int128 *v1295;
  int v1296;
  uint64_t v1297;
  void *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  _QWORD *v1306;
  int v1307;
  JSC::Structure *v1308;
  JSC::DFG::Graph **v1309;
  uint64_t *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t *v1316;
  _QWORD *v1317;
  uint64_t *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  int v1326;
  JSC::Structure *v1327;
  JSC::DFG::Graph **v1328;
  uint64_t *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t *v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  void *v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  _DWORD *v1351;
  int v1352;
  unint64_t v1353;
  WTF *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  WTF *v1360;
  int v1361;
  unint64_t v1362;
  unint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  unint64_t v1369;
  int v1370;
  unint64_t v1371;
  unint64_t v1372;
  unint64_t v1373;
  void **v1374;
  uint64_t *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  _QWORD *v1382;
  int v1383;
  JSC::Structure *v1384;
  JSC::DFG::Graph **v1385;
  uint64_t *v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t *v1392;
  unint64_t v1393;
  uint64_t v1394;
  uint64_t *v1395;
  JSC::DFG::Graph **v1396;
  uint64_t v1397;
  _QWORD *v1398;
  int v1399;
  JSC::Structure *v1400;
  JSC::DFG::Graph **v1401;
  uint64_t *v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t *v1409;
  void **v1410;
  uint64_t *v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  int v1424;
  JSC::Structure *v1425;
  JSC::DFG::Graph **v1426;
  uint64_t *v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  unint64_t v1434;
  unint64_t v1435;
  JSC::DFG::Graph **v1436;
  uint64_t v1437;
  JSC::DFG::Node *v1438;
  unint64_t v1439;
  double v1440;
  double v1441;
  uint64_t v1442;
  unint64_t v1443;
  BOOL v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t *v1452;
  _QWORD *v1453;
  uint64_t v1454;
  _QWORD *v1455;
  void *v1456;
  unint64_t v1457;
  JSC::DFG::Node *v1458;
  __int128 *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t *v1473;
  JSC::Structure *v1474;
  JSC::DFG::Graph **v1475;
  uint64_t *v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  JSC::DFG::Graph *v1483;
  uint64_t *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t *v1490;
  uint64_t v1491;
  BOOL v1492;
  uint64_t v1493;
  JSC::DFG::Graph **v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  int v1504;
  int v1505;
  unsigned int v1506;
  int v1507;
  JSC::Structure *v1508;
  JSC::DFG::Graph **v1509;
  uint64_t *v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  int v1517;
  int v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  int v1527;
  int v1528;
  unsigned int v1529;
  int v1530;
  JSC::Structure *v1531;
  JSC::DFG::Graph **v1532;
  uint64_t *v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  BOOL v1541;
  uint64_t *v1542;
  uint64_t *v1543;
  unsigned int *v1544;
  uint64_t v1545;
  uint64_t *v1546;
  char v1547;
  uint64_t v1548;
  _BYTE *v1549;
  uint64_t v1550;
  char v1551;
  WTF *v1552;
  uint64_t v1553;
  char v1554;
  const JSC::ClassInfo *v1555;
  uint64_t v1556;
  BOOL v1557;
  uint64_t *v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  int v1567;
  int v1568;
  unsigned int v1569;
  int v1570;
  JSC::Structure *v1571;
  JSC::DFG::Graph **v1572;
  uint64_t *v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t *v1579;
  unint64_t *v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  int v1586;
  unsigned int v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t *v1593;
  void *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  void *v1601;
  unint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  char v1610;
  uint64_t *v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  int v1617;
  uint64_t v1618;
  uint64_t *v1619;
  WTF *v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  int v1628;
  JSC::Structure *v1629;
  JSC::DFG::Graph **v1630;
  uint64_t *v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  int v1645;
  int v1646;
  unsigned int v1647;
  int v1648;
  JSC::Structure *v1649;
  JSC::DFG::Graph **v1650;
  uint64_t *v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  void *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  int v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  BOOL v1681;
  unint64_t v1682;
  uint64_t v1684;
  __int128 *v1685;
  JSC *v1686;
  char v1687;
  unsigned int v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  BOOL v1696;
  JSC::DFG::Graph **v1697;
  unint64_t v1698;
  double v1699;
  unint64_t v1700;
  double v1701;
  double v1702;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  BOOL v1715;
  _DWORD *v1716;
  __int128 *v1717;
  WTF *v1718;
  unint64_t v1720;
  double v1721;
  uint64_t v1722;
  int v1723;
  uint64_t *v1724;
  uint64_t *v1725;
  unint64_t *v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  JSC::DFG::Node *v1732;
  int v1733;
  unsigned int v1734;
  unint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  JSC::PutByVariant *v1738;
  uint64_t *v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  void *v1746;
  uint64_t v1747;
  unint64_t v1748;
  unint64_t v1749;
  unint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  char v1761;
  unint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  char v1766;
  unint64_t v1767;
  unint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  JSC::DFG::Graph **v1771;
  int v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  JSC::JSArrayBufferView *v1778;
  unint64_t v1779;
  unint64_t v1780;
  uint64_t v1781;
  BOOL v1782;
  unint64_t v1783;
  __int128 *v1784;
  __int128 *v1785;
  uint64_t v1786;
  void *v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  _QWORD *v1794;
  unint64_t v1795;
  void *v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  BOOL v1805;
  __int128 *v1806;
  uint64_t v1807;
  BOOL v1808;
  unint64_t v1809;
  BOOL v1810;
  _BOOL4 v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  unint64_t v1816;
  unint64_t v1817;
  __int128 *v1818;
  _BOOL4 v1819;
  double v1820;
  double v1821;
  double v1822;
  uint64_t v1823;
  unint64_t v1824;
  JSC::DFG::Graph **v1825;
  uint64_t *v1826;
  JSC::DFG::Graph **v1827;
  uint64_t *v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  unint64_t v1834;
  uint64_t *v1835;
  uint64_t *v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  JSC::DFG::Node *v1847;
  __int128 *v1848;
  JSC::DFG::Graph **v1849;
  uint64_t *v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t *v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  WTF *v1868;
  unsigned int v1869;
  uint64_t v1870;
  unint64_t v1871;
  uint64_t v1872;
  unint64_t v1873;
  unsigned int v1874;
  uint64_t v1875;
  uint64_t v1876;
  BOOL v1878;
  __int128 *v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  void *v1884;
  uint64_t v1885;
  uint64_t *v1886;
  uint64_t v1887;
  uint64_t v1888;
  unsigned int v1889;
  int v1890;
  uint64_t v1891;
  int v1892;
  uint64_t v1893;
  uint64_t v1894;
  unsigned int v1895;
  uint64_t v1896;
  uint64_t v1897;
  void *v1898;
  uint64_t v1899;
  uint64_t *v1900;
  uint64_t v1901;
  uint64_t v1902;
  unsigned int v1903;
  char v1904;
  uint64_t v1905;
  uint64_t v1906;
  BOOL v1907;
  uint64_t v1908;
  unint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  JSC::DFG::Graph **v1915;
  uint64_t *v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  uint64_t v1920;
  uint64_t v1921;
  int v1922;
  unint64_t v1923;
  WTF *v1924;
  const WTF::StringImpl *v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  JSCell *v1929;
  uint64_t v1930;
  uint64_t v1931;
  unint64_t v1932;
  int v1933;
  _BYTE *v1934;
  uint64_t v1935;
  unsigned int v1936;
  double v1937;
  double v1938;
  double v1939;
  uint64_t v1940;
  unint64_t v1941;
  BOOL v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  unint64_t v1946;
  unint64_t v1947;
  double v1948;
  uint64_t v1949;
  uint64_t *v1950;
  JSC::DFG::Graph **v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  int v1959;
  JSC::Structure *v1960;
  JSC::DFG::Graph **v1961;
  uint64_t *v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  _BOOL4 v1970;
  uint64_t v1971;
  BOOL v1972;
  uint64_t v1974;
  uint64_t v1975;
  BOOL v1976;
  uint64_t v1977;
  BOOL v1978;
  uint64_t v1980;
  uint64_t v1981;
  unint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  JSC::JSObject *Object;
  uint64_t v1993;
  char v1994;
  uint64_t v1995;
  uint64_t v1996;
  unint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unint64_t v2000;
  uint64_t v2001;
  unsigned int v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  JSC::DFG::Graph **v2016;
  uint64_t v2017;
  JSC::DFG::Node *v2018;
  uint64_t v2019;
  unint64_t v2020;
  __int128 *v2021;
  uint64_t v2022;
  unint64_t v2023;
  _DWORD *v2024;
  unint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  _DWORD *v2031;
  unint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  _DWORD *v2038;
  unint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  _DWORD *v2045;
  unint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  char v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  char v2070;
  __int128 *v2071;
  unint64_t v2072;
  int v2073;
  uint64_t v2074;
  uint64_t v2075;
  _QWORD *v2076;
  uint64_t *v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  int v2083;
  unint64_t v2084;
  WTF *v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  WTF *v2091;
  int v2092;
  unint64_t v2093;
  unint64_t v2094;
  unint64_t v2095;
  void **v2096;
  uint64_t *v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t *v2103;
  uint64_t v2104;
  unint64_t v2105;
  uint64_t v2106;
  unsigned int v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  char **v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t *v2123;
  uint64_t *v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  __int128 *v2132;
  uint64_t *v2133;
  unint64_t v2134;
  uint64_t v2135;
  __int128 *v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  void *v2143;
  uint64_t v2144;
  uint64_t v2145;
  void *v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t *v2153;
  uint64_t *v2154;
  JSC::DFG::Graph **v2155;
  uint64_t v2156;
  int v2157;
  void *v2158;
  uint64_t v2159;
  __int128 *v2160;
  WTF *v2161;
  const WTF::StringImpl *v2162;
  BOOL v2163;
  uint64_t v2164;
  double v2165;
  __int128 *v2167;
  int v2168;
  uint64_t v2169;
  int v2170;
  JSC::DFG::Graph **v2171;
  uint64_t v2172;
  unint64_t v2173;
  uint64_t v2174;
  unint64_t v2175;
  uint64_t *v2176;
  void *v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  uint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  __int128 *v2191;
  uint64_t v2192;
  unint64_t v2193;
  uint64_t v2194;
  unint64_t v2195;
  uint64_t v2196;
  double v2197;
  uint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  uint64_t v2202;
  BOOL v2203;
  uint64_t v2204;
  int v2205;
  uint64_t v2206;
  uint64_t v2207;
  unint64_t v2208;
  unint64_t v2209;
  unsigned int v2210;
  uint64_t v2211;
  void *v2212;
  uint64_t v2213;
  uint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  WTF *v2219;
  WTF *v2220;
  JSC::DFG::Node *v2221;
  uint64_t *v2222;
  double v2223;
  uint64_t v2224;
  unint64_t v2225;
  uint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  uint64_t v2229;
  uint64_t v2230;
  BOOL v2231;
  uint64_t v2232;
  int v2233;
  __int128 *v2234;
  uint64_t v2235;
  unint64_t v2236;
  uint64_t v2237;
  uint64_t v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  int v2244;
  JSC::Structure *v2245;
  JSC::DFG::Graph **v2246;
  uint64_t *v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  int v2253;
  uint64_t v2254;
  uint64_t v2255;
  unint64_t v2256;
  uint64_t v2257;
  double v2258;
  double v2259;
  double v2260;
  double v2262;
  double v2263;
  double v2264;
  uint64_t v2266;
  _BOOL4 v2267;
  int v2268;
  uint64_t v2269;
  char v2270;
  uint64_t v2271;
  char v2272;
  WTF *v2273;
  unsigned int v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  int v2285;
  JSC::Structure *v2286;
  JSC::DFG::Graph **v2287;
  uint64_t *v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  __int128 *v2294;
  uint64_t v2295;
  unsigned int v2296;
  double v2297;
  uint64_t v2298;
  unint64_t v2299;
  __int128 *v2300;
  double v2301;
  double v2302;
  double v2303;
  uint64_t v2305;
  unint64_t v2306;
  int v2307;
  _BYTE *v2308;
  uint64_t v2309;
  unsigned int v2310;
  unsigned int v2311;
  uint64_t v2312;
  char v2313;
  uint64_t v2314;
  unsigned int v2315;
  double v2316;
  uint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  unsigned int v2320;
  uint64_t v2321;
  unsigned int v2322;
  __int128 *v2323;
  __int128 *v2324;
  unsigned __int16 *v2325;
  uint64_t v2326;
  unsigned int v2327;
  int v2328;
  uint64_t v2329;
  int v2330;
  uint64_t v2331;
  int v2332;
  BOOL v2333;
  uint64_t v2334;
  int v2335;
  BOOL v2336;
  uint64_t v2337;
  double v2338;
  BOOL v2339;
  uint64_t v2340;
  unsigned __int16 *v2341;
  uint64_t v2342;
  unsigned int v2343;
  double v2344;
  double v2345;
  uint64_t v2346;
  uint64_t v2347;
  unint64_t v2348;
  unint64_t v2349;
  unint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  JSC::DFG::Graph **v2355;
  uint64_t *v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  _QWORD *v2362;
  unsigned __int8 *v2363;
  uint64_t v2364;
  unsigned int v2365;
  unsigned __int8 *v2366;
  uint64_t v2367;
  unsigned int v2368;
  uint64_t v2369;
  _QWORD v2370[2];
  int v2371;
  _QWORD v2372[2];
  int v2373;
  _QWORD v2374[2];
  int v2375;
  _QWORD v2376[2];
  int v2377;
  unint64_t v2378[2];
  int v2379;
  unint64_t v2380[2];
  int v2381;
  __int128 v2382;
  _OWORD v2383[3];
  uint64_t v2384;
  __int128 v2385;
  uint64_t v2386;
  __int128 v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  __int128 v2391;
  uint64_t v2392;
  __int128 v2393;
  uint64_t v2394;
  __int128 v2395;
  uint64_t v2396;
  _QWORD v2397[2];
  int v2398;
  _QWORD v2399[2];
  int v2400;
  __int128 v2401;
  uint64_t v2402;
  __int128 v2403;
  uint64_t v2404;
  _QWORD v2405[2];
  int v2406;
  uint64_t v2407;
  _QWORD v2408[2];
  int v2409;
  _QWORD v2410[2];
  int v2411;
  __int128 v2412;
  __int128 v2413;
  WTF *v2414[11];
  char v2415;
  uint64_t v2416;
  __int128 v2417;
  uint64_t v2418;
  __int128 v2419;
  uint64_t v2420;
  __int128 v2421;
  uint64_t v2422;
  __int128 v2423;
  uint64_t v2424;
  __int128 v2425;
  uint64_t v2426;
  __int128 v2427;
  uint64_t v2428;
  __int128 v2429;
  uint64_t v2430;
  __int128 v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  _QWORD v2444[2];
  int v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  __int128 v2457;
  uint64_t v2458;
  _QWORD v2459[2];
  int v2460;
  _QWORD v2461[2];
  int v2462;
  __int128 v2463;
  uint64_t v2464;
  _QWORD v2465[2];
  int v2466;
  _QWORD v2467[2];
  int v2468;
  _QWORD v2469[2];
  int v2470;
  uint64_t v2471;
  uint64_t v2472;
  _QWORD v2473[2];
  int v2474;
  _QWORD v2475[2];
  int v2476;
  _QWORD v2477[2];
  int v2478;
  _QWORD v2479[2];
  int v2480;
  _QWORD v2481[2];
  int v2482;
  _QWORD v2483[2];
  int v2484;
  _QWORD v2485[2];
  int v2486;
  _QWORD v2487[2];
  int v2488;
  _QWORD v2489[2];
  int v2490;
  _QWORD v2491[2];
  int v2492;
  _QWORD v2493[2];
  int v2494;
  _QWORD v2495[2];
  int v2496;
  _QWORD v2497[2];
  int v2498;
  _QWORD v2499[2];
  int v2500;
  _QWORD v2501[2];
  int v2502;
  _QWORD v2503[2];
  int v2504;
  _QWORD v2505[2];
  int v2506;
  _QWORD v2507[2];
  int v2508;
  _QWORD v2509[2];
  int v2510;
  _QWORD v2511[2];
  int v2512;
  _QWORD v2513[2];
  int v2514;
  _QWORD v2515[2];
  int v2516;
  _QWORD v2517[2];
  int v2518;
  _QWORD v2519[2];
  int v2520;
  _QWORD v2521[2];
  int v2522;
  __int128 v2523;
  uint64_t v2524;
  __int128 v2525;
  uint64_t v2526;
  __int128 v2527;
  uint64_t v2528;
  __int128 v2529;
  uint64_t v2530;
  __int128 v2531;
  uint64_t v2532;
  __int128 v2533;
  uint64_t v2534;
  __int128 v2535;
  uint64_t v2536;
  __int128 v2537;
  uint64_t v2538;
  uint64_t v2539;
  _QWORD v2540[2];
  int v2541;
  _QWORD v2542[2];
  int v2543;
  _QWORD v2544[2];
  int v2545;
  _QWORD v2546[2];
  int v2547;
  _QWORD v2548[2];
  int v2549;
  _QWORD v2550[2];
  int v2551;
  _QWORD v2552[2];
  int v2553;
  _QWORD v2554[2];
  int v2555;
  _QWORD v2556[2];
  int v2557;
  _QWORD v2558[2];
  int v2559;
  _QWORD v2560[2];
  int v2561;
  _QWORD v2562[2];
  int v2563;
  _QWORD v2564[2];
  int v2565;
  _QWORD v2566[2];
  int v2567;
  _QWORD v2568[2];
  int v2569;
  _QWORD v2570[2];
  int v2571;
  _QWORD v2572[2];
  int v2573;
  _QWORD v2574[2];
  int v2575;
  _QWORD v2576[2];
  int v2577;
  _QWORD v2578[2];
  int v2579;
  _QWORD v2580[2];
  int v2581;
  _QWORD v2582[2];
  int v2583;
  _QWORD v2584[2];
  int v2585;
  _QWORD v2586[2];
  int v2587;
  _QWORD v2588[2];
  int v2589;
  _QWORD v2590[2];
  int v2591;
  _QWORD v2592[2];
  int v2593;
  _QWORD v2594[2];
  int v2595;
  _QWORD v2596[2];
  int v2597;
  _QWORD v2598[2];
  int v2599;
  _QWORD v2600[2];
  int v2601;
  _QWORD v2602[2];
  int v2603;
  _QWORD v2604[2];
  int v2605;
  _QWORD v2606[2];
  int v2607;
  _QWORD v2608[2];
  int v2609;
  _QWORD v2610[2];
  int v2611;
  _QWORD v2612[2];
  int v2613;
  _QWORD v2614[2];
  int v2615;
  uint64_t v2616;
  _QWORD v2617[2];
  int v2618;
  uint64_t v2619;
  uint64_t v2620;
  __int128 v2621;
  int v2622;
  _QWORD v2623[2];
  int v2624;
  __int128 v2625;
  uint64_t v2626;
  __int128 v2627;
  uint64_t v2628;
  _QWORD v2629[2];
  int v2630;
  _QWORD v2631[2];
  int v2632;
  _QWORD v2633[2];
  int v2634;
  _QWORD v2635[2];
  int v2636;
  _QWORD v2637[2];
  int v2638;
  _QWORD v2639[2];
  int v2640;
  _QWORD v2641[2];
  int v2642;
  _QWORD v2643[2];
  int v2644;
  _QWORD v2645[2];
  int v2646;
  _QWORD v2647[2];
  int v2648;
  _QWORD v2649[2];
  int v2650;
  _QWORD v2651[2];
  int v2652;
  _QWORD v2653[2];
  int v2654;
  _QWORD v2655[2];
  int v2656;
  _QWORD v2657[2];
  int v2658;
  _QWORD v2659[2];
  int v2660;
  _QWORD v2661[2];
  int v2662;
  _QWORD v2663[2];
  int v2664;
  _QWORD v2665[2];
  int v2666;
  _QWORD v2667[2];
  int v2668;
  _QWORD v2669[2];
  int v2670;
  _QWORD v2671[2];
  int v2672;
  _QWORD v2673[2];
  int v2674;
  _QWORD v2675[2];
  int v2676;
  _QWORD v2677[2];
  int v2678;
  _QWORD v2679[2];
  int v2680;
  _QWORD v2681[2];
  int v2682;
  _QWORD v2683[2];
  int v2684;
  _QWORD v2685[2];
  int v2686;
  _QWORD v2687[2];
  int v2688;
  _QWORD v2689[2];
  int v2690;
  _QWORD v2691[2];
  int v2692;
  _QWORD v2693[2];
  int v2694;
  _QWORD v2695[2];
  int v2696;
  _QWORD v2697[2];
  int v2698;
  _QWORD v2699[2];
  int v2700;
  _QWORD v2701[2];
  int v2702;
  _QWORD v2703[2];
  int v2704;
  _QWORD v2705[2];
  int v2706;
  _QWORD v2707[2];
  int v2708;
  __int128 v2709;
  uint64_t v2710;
  _QWORD v2711[2];
  int v2712;
  _QWORD v2713[2];
  int v2714;
  _QWORD v2715[2];
  int v2716;
  _QWORD v2717[2];
  int v2718;
  _QWORD v2719[2];
  int v2720;
  _QWORD v2721[2];
  int v2722;
  __int128 v2723;
  uint64_t v2724;
  JSC::DFG::Node *v2725[3];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = v3;
  v10 = v2;
  v2725[0] = (JSC::DFG::Node *)v3;
  v12 = v3 + 24;
  v11 = *(_QWORD *)(v3 + 24);
  if ((*(_BYTE *)(v3 + 56) & 0x10) != 0)
  {
    v245 = *(_QWORD *)(v3 + 32);
    if ((int)v245 + (int)v11 > v11)
    {
      v246 = *(_QWORD *)(v3 + 24);
      do
      {
        v247 = *(_QWORD *)(v10 + 8);
        if (v246 >= *(unsigned int *)(v247 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x198445200);
        }
        v248 = *(_QWORD *)(*(_QWORD *)(v247 + 152) + 8 * v246);
        if ((v248 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(v10, v9, v248);
          v11 = *(_QWORD *)(v9 + 24);
          v245 = *(_QWORD *)(v9 + 32);
        }
        ++v246;
      }
      while (v246 < (v11 + v245));
    }
  }
  else if ((v11 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(v2, v3, v11);
    v13 = *(_QWORD *)(v9 + 32);
    if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(v10, v9, v13);
      v14 = *(_QWORD *)(v9 + 40);
      if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(v10, v9, v14);
    }
  }
  v16 = (uint64_t *)(v10 + 24);
  v15 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)&v2412 = v9;
  v17 = *(unsigned int *)(*(_QWORD *)(v15 + 40) + 8);
  if (*(_DWORD *)(v15 + 20) <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x198444B14);
  }
  v18 = (uint64_t *)(*(_QWORD *)(v15 + 8) + 8 * v17);
  memset(v2414, 0, 32);
  WTF::HashMap<JSC::DFG::NodeFlowProjection,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::NodeFlowProjection>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::add<JSC::DFG::AbstractValue>(v18, &v2412, (uint64_t)v2414, v4, v5, v6, v7, v8, (uint64_t)&v2382);
  if (((uint64_t)v2414[0] & 1) != 0)
    WTF::fastFree((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
  v26 = *(unsigned __int16 *)(v9 + 18);
  switch(*(_WORD *)(v9 + 18))
  {
    case 0:
    case 1:
    case 2:
      v90 = *(__int128 **)(v9 + 72);
      v91 = *v90;
      v2724 = *((_QWORD *)v90 + 2);
      v2723 = v91;
      v92 = *v16;
      v93 = *(_QWORD *)(*v16 + 40);
      v94 = *(unsigned int *)(v93 + 8);
      if (*(_DWORD *)(*v16 + 20) <= v94)
      {
        __break(0xC471u);
        JUMPOUT(0x1984451ACLL);
      }
      v95 = *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v94);
      if (!v95)
        goto LABEL_2759;
      v96 = *(_DWORD *)(v95 - 8);
      v97 = v96 & v9;
      v98 = (uint64_t *)(v95 + 40 * (v96 & v9));
      v99 = *v98;
      if (*v98 == v9)
        goto LABEL_76;
      v100 = 1;
      while (v99)
      {
        v97 = (v97 + v100) & v96;
        v98 = (uint64_t *)(v95 + 40 * v97);
        v99 = *v98;
        ++v100;
        if (*v98 == v9)
          goto LABEL_76;
      }
      v98 = (uint64_t *)(v95 + 40 * *(unsigned int *)(v95 - 4));
LABEL_76:
      if (v98 == (uint64_t *)(v95 + 40 * *(unsigned int *)(v95 - 4)))
      {
LABEL_2759:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v92, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x1984438F0);
      }
      v101 = v98 + 1;
      JSC::DFG::AbstractValue::set((uint64_t)(v98 + 1), *(_QWORD **)(v10 + 8), (unint64_t *)&v2723, *(unsigned __int8 *)(v93 + 13), v22, v23, v24, v25);
      v102 = *(JSC::DFG::Graph **)(v10 + 8);
      v103 = v101;
      v104 = (JSC::DFG::Node *)v9;
      goto LABEL_78;
    case 3:
      v633 = *(uint64_t ***)(v9 + 72);
      v634 = *((_DWORD *)v633 + 2);
      if ((v634 - 1) < 3)
        goto LABEL_572;
      if (v634)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v1807 = **v633;
      v2721[0] = v1807;
      v2721[1] = 0;
      v2722 = 0;
      if (v1807)
        v1808 = (v1807 & 0xFFFE000000000002) == 0;
      else
        v1808 = 0;
      if (v1808)
      {
        __break(0xC471u);
        JUMPOUT(0x198444718);
      }
      v334 = (__int128 *)v2721;
      goto LABEL_2546;
    case 4:
    case 5:
      v442 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v443 = (JSC::DFG::Graph **)*v16;
      v444 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v450 = *v443;
      v451 = (const JSC::DFG::AbstractValue *)v442;
      goto LABEL_393;
    case 6:
      v843 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v844 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v845 = JSC::DFG::Node::ecmaMode((JSC::DFG::Node *)v9);
      switch(JSC::DFG::isToThisAnIdentity(v845, v843))
      {
        case 0u:
          v687 = (uint64_t)v844;
          v846 = v843;
          goto LABEL_1551;
        case 1u:
          v2444[0] = 10;
          v2444[1] = 0;
          v2445 = 0;
          v334 = (__int128 *)v2444;
          goto LABEL_2546;
        case 2u:
          v315 = *(JSC::DFG::Graph **)(v10 + 8);
          v316 = v844;
          goto LABEL_627;
        case 3u:
          if (v845)
          {
            JSC::DFG::AbstractValue::operator=((uint64_t)v844, v843, v688, v21, v22, v23, v24, v25);
            JSC::DFG::AbstractValue::merge((JSC::DFG::AbstractValue *)v844, v2212, v2213, v2214, v2215, v2216, v2217, v2218);
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          }
          v780 = v844;
          break;
        default:
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
      goto LABEL_2203;
    case 7:
      v853 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v853)
        v854 = (v853 & 0xFFFE000000000002) == 0;
      else
        v854 = 0;
      if (!v854
        || *(_BYTE *)(v853 + 5) != 26
        || (v1999 = *(_QWORD *)(v853 + 24), (v1999 & 1) == 0)
        || (v2000 = v1999 & 0xFFFFFFFFFFFFFFFELL, (v1999 & 0xFFFFFFFFFFFFFFFELL) == 0)
        || ((v2001 = *(_QWORD *)(v2000 + 32), (v2001 & 1) != 0)
          ? (v2002 = (v2001 >> 1) & 3)
          : (v2002 = *(unsigned __int8 *)(v2001 + 4)),
            v2002 == 2
         || !JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v847, v848, v849, v850, v851, v852)|| (v2009 = *(_QWORD *)(v2000 + 16)) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x19843C76CLL);
      }
      JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2000, v2003, v2004, v2005, v2006, v2007, v2008);
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 136), (JSC::InlineWatchpointSet *)(v2000 + 32), v2010, v2011, v2012, v2013, v2014, v2015);
      v2016 = *(JSC::DFG::Graph ***)(v10 + 24);
      v2017 = (uint64_t)v2016;
      v2018 = (JSC::DFG::Node *)v9;
      goto LABEL_2187;
    case 8:
      v855 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2443, (const JSC::CodeOrigin *)v9);
      v869 = JSC::DFG::Graph::globalObjectFor(v855, &v2443, v856, v857, v858, v859, v860, v861);
      if ((v2443 & 1) != 0 && (v2443 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2443 & 0xFFFFFFFF8, v862, v863, v864, v865, v866, v867, v868);
      v876 = JSC::DFG::AtTailAbstractState::forNode(*v16, *((_QWORD *)v2725[0] + 3) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!v876)
        goto LABEL_2877;
      v877 = v2725[0];
      if (*((_DWORD *)v2725[0] + 20))
      {
        if (v876 == *(_QWORD *)(v869 + 272))
        {
          v878 = (int *)(v869 + 1184);
          goto LABEL_856;
        }
      }
      else if (v876 == *(_QWORD *)(v869 + 264))
      {
        v878 = (int *)(v869 + 1164);
LABEL_856:
        v879 = *v878;
        if (v879)
          v880 = 16 * (v879 & 0xFFFFFFFE);
        else
          v880 = 0;
        goto LABEL_1082;
      }
      if ((v876 & 0xFFFE000000000002) != 0)
        goto LABEL_2877;
      if (*(_BYTE *)(v876 + 5) != 26)
        goto LABEL_2877;
      v2104 = *(_QWORD *)(v876 + 24);
      if ((v2104 & 1) == 0)
        goto LABEL_2877;
      v2105 = v2104 & 0xFFFFFFFFFFFFFFFELL;
      if ((v2104 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_2877;
      v2106 = *(_QWORD *)(v2105 + 32);
      v2107 = (v2106 & 1) != 0 ? (v2106 >> 1) & 3 : *(unsigned __int8 *)(v2106 + 4);
      if (v2107 == 2
        || !JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], v870, v871, v872, v873, v874, v875)|| (v2114 = *(_DWORD *)(v2105 + 40) & 0xFFFFFFFE, !(_DWORD)v2114)|| ((v2009 = 16 * v2114, v2115 = *(unsigned int *)(16 * v2114 + 0x4C), *((_DWORD *)v2725[0] + 20))? (v2116 = &JSC::JSInternalPromise::s_info): (v2116 = &JSC::JSPromise::s_info), v2116 != (char **)(16 * v2115) || *(_QWORD *)(v2009 + 40) != v869))
      {
LABEL_2877:
        __break(0xC471u);
        JUMPOUT(0x198444424);
      }
      JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2105, v2108, v2109, v2110, v2111, v2112, v2113);
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 136), (JSC::InlineWatchpointSet *)(v2105 + 32), v2117, v2118, v2119, v2120, v2121, v2122);
      v2018 = v2725[0];
      v2016 = *(JSC::DFG::Graph ***)(v10 + 24);
      v2017 = (uint64_t)v2016;
LABEL_2187:
      v678 = JSC::DFG::AtTailAbstractState::forNode(v2017, (uint64_t)v2018);
      v684 = *v2016;
      v685 = (JSC::Structure *)v2009;
      goto LABEL_623;
    case 9:
    case 0xA:
      v2414[0] = (WTF *)v10;
      v2414[1] = (WTF *)v2725;
      if (v26 == 9)
      {
        v722 = &JSC::JSGenerator::s_info;
      }
      else
      {
        if (v26 != 10)
        {
          __break(0xC471u);
          JUMPOUT(0x198444F68);
        }
        v722 = &JSC::JSAsyncGenerator::s_info;
      }
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::ClassInfo const*)#1}::operator()((uint64_t *)v2414, v722, v20, v21, v22, v23, v24, v25) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19843F740);
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xB:
      v895 = *(_QWORD *)(*(_QWORD *)v10 + 64);
      if (v895 && *(_BYTE *)(v895 + 5) == 12)
      {
        v896 = *(_QWORD *)(v895 + 112);
        v897 = (v896 & 1) != 0 ? v896 & 0xFFFFFFFFFFFFFFF8 : *(_QWORD *)(v896 + 24);
        if (v897)
        {
          JSC::DFG::DesiredWatchpoints::addLazily((JSC::DFG::DesiredWatchpoints *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 136), *(JSC::DFG::Graph **)(v10 + 8), (JSC::FunctionExecutable *)v895, v21, v22, v23, v24, v25);
          v904 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v897, v898, v899, v900, v901, v902, v903);
          v2431 = *v904;
          v2432 = *((_QWORD *)v904 + 2);
          v334 = &v2431;
          goto LABEL_2546;
        }
      }
      v1825 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1825;
      v317 = 134217732;
      goto LABEL_296;
    case 0xD:
    case 0x18A:
    case 0x191:
      goto LABEL_2000;
    case 0xF:
      v881 = *(unint64_t **)(v9 + 72);
      v882 = v881;
      do
      {
        v883 = v882;
        v882 = (unint64_t *)*v882;
      }
      while (v882);
      if (v883 != v881)
        *v881 = (unint64_t)v883;
      v884 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), v883[3]);
      v885 = JSC::DFG::VariableAccessData::flushFormat((JSC::DFG::VariableAccessData *)v883);
      if ((*(_QWORD *)(v884 + 8) & ~JSC::DFG::typeFilterFor(v885)) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x1A3, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "value.isType(typeFilterFor(variableAccessData->flushFormat()))");
        __break(0xC471u);
        JUMPOUT(0x198444D78);
      }
      v886 = (JSC::DFG::Graph **)*v16;
      v887 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
      v893 = *v886;
      goto LABEL_865;
    case 0x10:
      v958 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v959 = *v16;
      v960 = *(_QWORD **)(v9 + 72);
      v961 = v960;
      do
      {
        v962 = v961;
        v961 = (_QWORD *)*v961;
      }
      while (v961);
      if (v962 != v960)
        *v960 = v962;
      v963 = v962[3];
      goto LABEL_1549;
    case 0x11:
      v958 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v959 = *v16;
      v963 = **(_QWORD **)(v9 + 72);
LABEL_1549:
      v687 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(v959 + 40), v963);
      goto LABEL_1550;
    case 0x13:
      v1769 = *(_QWORD *)(v9 + 72);
      v1770 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), *(_QWORD *)v1769);
      if ((*(_QWORD *)(v1770 + 8) & ~JSC::DFG::typeFilterFor(*(unsigned __int8 *)(v1769 + 12))) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x1AE, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "value.isType(typeFilterFor(data->format))");
        __break(0xC471u);
        JUMPOUT(0x198444F48);
      }
      v1771 = (JSC::DFG::Graph **)*v16;
      goto LABEL_1616;
    case 0x18:
    case 0x19:
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v27 = *(_DWORD *)(v9 + 24);
        v28 = *(_DWORD *)(v9 + 32);
        if (v28 + v27 > v27)
        {
          v29 = *(_DWORD *)(*(_QWORD *)(v10 + 8) + 164);
          v720 = v29 >= v27;
          v30 = v29 - v27;
          if (!v720)
            v30 = 0;
          if (v30 <= v28 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1984393BCLL);
          }
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x1A:
      v1087 = *(_QWORD *)(v9 + 72);
      if (*(_WORD *)((v1087 & 0xFFFFFFFFFFFFFFFELL) + 18) != 27)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v1088 = v1087 | 1;
      JSC::DFG::AtTailAbstractState::createValueForNode(*v16, v1087 | 1, v20, v21, v22, v23, v24, v25);
      v884 = (uint64_t)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1089 = (JSC::DFG::Graph **)*v16;
      v887 = JSC::DFG::AtTailAbstractState::forNode(*v16, v1088);
      v893 = *v1089;
LABEL_865:
      v894 = (const JSC::DFG::AbstractValue *)v884;
      goto LABEL_1284;
    case 0x1B:
      if (*(_DWORD *)(*(_QWORD *)(v10 + 8) + 944) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198444454);
      }
      v1090 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9 | 1);
      v1091 = (JSC::DFG::Graph **)*v16;
      v1092 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1092, *v1091, (const JSC::DFG::AbstractValue *)v1090, v1093, v1094, v1095, v1096, v1097);
      JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x1E:
      v1108 = *v16;
      v1109 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 36) <= v1109)
      {
        __break(0xC471u);
        JUMPOUT(0x198445460);
      }
      v1110 = *(_QWORD *)(v1108 + 24) + 16 * v1109;
      v1111 = (*(_DWORD *)(v9 + 72) + ~*(_DWORD *)((*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFELL) + 0x30));
      if (*(_DWORD *)(v1110 + 12) <= v1111)
      {
        __break(0xC471u);
        JUMPOUT(0x198445468);
      }
      v1112 = *(_QWORD *)v1110 + 32 * v1111;
      v444 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v450 = *(JSC::DFG::Graph **)v1108;
      v451 = (const JSC::DFG::AbstractValue *)v1112;
LABEL_393:
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v444, v450, v451, v445, v446, v447, v448, v449);
      JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x20:
    case 0x21:
    case 0xAE:
    case 0x197:
      goto LABEL_334;
    case 0x28:
      if (!*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x19843F134);
      }
      __break(0xC471u);
      JUMPOUT(0x1984444C8);
    case 0x29:
      v1767 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1767 >= 0xFFFE000000000000)
      {
        v2719[0] = v1767 ^ 0xFFFE0000FFFFFFFFLL;
        v2719[1] = 0;
        v2720 = 0;
        v334 = (__int128 *)v2719;
        goto LABEL_2546;
      }
      v1991 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v1991 != 26 && (_DWORD)v1991 != 27)
      {
        if ((_DWORD)v1991 == 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198440EBCLL);
        }
        __break(0xC471u);
        JUMPOUT(0x198445228);
      }
      goto LABEL_2230;
    case 0x2A:
      v1768 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1768 < 0xFFFE000000000000)
        goto LABEL_401;
      v2717[0] = v1768 ^ 0xFFFE0000FFFFFFFFLL;
      v2717[1] = 0;
      v2718 = 0;
      v334 = (__int128 *)v2717;
      goto LABEL_2546;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantBinaryBitwiseOp(v10, v9, v20, v21, v22, v23, v24, v25) & 1) != 0)return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v589 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v589 == 28)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x252, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "No BigInt32 support");
        __break(0xC471u);
        JUMPOUT(0x19843B3E4);
      }
      if ((_DWORD)v589 != 26
        && ((_DWORD)v589 != 27 || (*(_QWORD *)(v9 + 32) & 0xFC000000000000) != 0x6C000000000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19843C508);
      }
      goto LABEL_2230;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*(_BYTE *)(v12 + 6) & 0xFC) == 0 || (*(_BYTE *)(v9 + 38) & 0xFC) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19843B948);
      }
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantBinaryBitwiseOp(v10, v9, v20, v21, v22, v23, v24, v25) & 1) != 0)return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      if (*(_WORD *)(v9 + 18) == 44
        && (JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] == 0x100000000
         || JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[1] == 0x100000000))
      {
        v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v386 = *v385;
LABEL_361:
        if ((v386 & 1) != 0)
          WTF::fastFree(v386 & 0xFFFFFFFFFFFFFFFCLL, v378, v379, v380, v381, v382, v383, v384);
        *((_DWORD *)v385 + 4) = 0;
        v387 = xmmword_19911D1B0;
        goto LABEL_343;
      }
      v149 = *v16;
      v150 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v150)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452A8);
      }
      v151 = *(_QWORD *)(*(_QWORD *)(v149 + 8) + 8 * v150);
      if (!v151)
        goto LABEL_132;
      v152 = *(_DWORD *)(v151 - 8);
      v153 = v152 & v9;
      v47 = (uint64_t *)(v151 + 40 * (v152 & v9));
      v154 = *v47;
      if (*v47 != v9)
      {
        v155 = 1;
        while (v154)
        {
          v153 = (v153 + v155) & v152;
          v47 = (uint64_t *)(v151 + 40 * v153);
          v154 = *v47;
          ++v155;
          if (*v47 == v9)
            goto LABEL_131;
        }
        v47 = (uint64_t *)(v151 + 40 * *(unsigned int *)(v151 - 4));
      }
LABEL_131:
      if (v47 == (uint64_t *)(v151 + 40 * *(unsigned int *)(v151 - 4)))
      {
LABEL_132:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v149, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198439B74);
      }
      goto LABEL_33;
    case 0x36:
      v549 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v550 = v549[3];
      if (!v550)
        goto LABEL_475;
      if ((unint64_t)v550 >> 49)
      {
        v1809 = 0xFFFE000000000000;
        if ((unint64_t)v550 < 0xFFFE000000000000)
        {
          v2208 = ((unint64_t)(v550 - 0x2000000000000) >> 52) & 0x7FF;
          if ((v2208 - 1023) <= 0x53)
          {
            v2209 = (unint64_t)(v550 - 0x2000000000000) >> (51
                                                                   - ((unint64_t)(v550 - 0x2000000000000) >> 52));
            if (v2208 > 0x433)
              LODWORD(v2209) = v550 << (((unint64_t)(v550 - 0x2000000000000) >> 52) - 51);
            if (v2208 >= 0x41F)
              v2210 = v2209;
            else
              v2210 = (((1 << (((unint64_t)(v550 - 0x2000000000000) >> 52) + 1)) - 1) & v2209)
                    + (1 << (((unint64_t)(v550 - 0x2000000000000) >> 52) + 1));
            if (v550 >= 0x2000000000000)
              v2211 = v2210;
            else
              v2211 = -v2210;
            v1809 = v2211 | 0xFFFE000000000000;
          }
          v2703[0] = v1809;
          v2703[1] = 0;
          v2704 = 0;
          v334 = (__int128 *)v2703;
        }
        else
        {
          v2705[0] = v549[3];
          v2705[1] = 0;
          v2706 = 0;
          v334 = (__int128 *)v2705;
        }
        goto LABEL_2546;
      }
      if ((v550 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v2701[0] = (v550 == 7) | 0xFFFE000000000000;
        v2701[1] = 0;
        v2702 = 0;
        v334 = (__int128 *)v2701;
        goto LABEL_2546;
      }
      if ((v550 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v2699[0] = 0xFFFE000000000000;
        v2699[1] = 0;
        v2700 = 0;
        v334 = (__int128 *)v2699;
        goto LABEL_2546;
      }
LABEL_475:
      v551 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[1];
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v386 = *v385;
      if (v551 != 0x10000000000)
        goto LABEL_402;
      goto LABEL_361;
    case 0x37:
      v1718 = (WTF *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      v2414[0] = v1718;
      if (*(_DWORD *)(v9 + 72) < 4u)
      {
        if ((unint64_t)v1718 >= 0xFFFE000000000000 && (int)v1718 >= 0)
        {
          v2713[0] = v1718 | 0xFFFE000000000000;
          v2713[1] = 0;
          v2714 = 0;
          v334 = (__int128 *)v2713;
          goto LABEL_2546;
        }
        goto LABEL_340;
      }
      if (!v1718)
        goto LABEL_959;
      if (JSC::JSValue::isAnyInt((JSC::JSValue *)v2414))
      {
        LODWORD(v2235) = v2414[0];
        if (v2414[0] < (WTF *)0xFFFE000000000000)
          v2235 = (uint64_t)COERCE_DOUBLE((uint64_t)v2414[0] - 0x2000000000000);
        if ((v2235 & 0x80000000) != 0)
          v2236 = COERCE__INT64((double)v2235) + 0x2000000000000;
        else
          v2236 = v2235 | 0xFFFE000000000000;
        v377 = v2725[0];
        v2715[0] = v2236;
        v2715[1] = 0;
        v2716 = 0;
        if (v2236 && (v2236 & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444A40);
        }
        v334 = (__int128 *)v2715;
        goto LABEL_819;
      }
      goto LABEL_2501;
    case 0x38:
      v452 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v452)
      {
        if ((v452 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v2711[0] = (v452 == 7) | 0xFFFE000000000000;
          v2711[1] = 0;
          v2712 = 0;
          v334 = (__int128 *)v2711;
        }
        else
        {
          v2071 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v452, v453, v21, v22, v23, v24, v25);
          v2709 = *v2071;
          v2710 = *((_QWORD *)v2071 + 2);
          v334 = &v2709;
        }
        goto LABEL_2546;
      }
      v454 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v455 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      JSC::DFG::AbstractValue::operator=((uint64_t)v454, v455, v456, v457, v458, v459, v460, v461);
      v468 = v454[1];
      if ((v468 & 0x10000000000) != 0)
      {
        v454[1] = v468 | 0x100000000;
        v454[3] = 0;
        v469 = v468 & 0xFFFFFEFEFFFFFFFFLL | 0x100000000;
        if (v469 != (v468 | 0x100000000))
        {
          if ((v468 & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v454, 0xFFFFFEFFFFFFFFFFLL, v462, v463, v464, v465, v466, v467);
          else
            v454[1] = v469;
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x39:
      v1720 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!(v1720 >> 49))
        goto LABEL_401;
      if (v1720 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v1721 = v1720 - 0x2000000000000;
      else
        v1721 = (double)(int)v1720;
      v1722 = (*(_QWORD *)&v1721 >> 52) & 0x7FFLL;
      if ((v1722 - 1023) <= 0x53)
      {
        v2196 = *(_QWORD *)&v1721 >> (51 - (*(_QWORD *)&v1721 >> 52));
        if (v1722 > 0x433)
          LODWORD(v2196) = *(_QWORD *)&v1721 << ((*(_QWORD *)&v1721 >> 52) - 51);
        if (v1722 >= 0x41F)
          v1723 = v2196;
        else
          v1723 = (((1 << ((*(_QWORD *)&v1721 >> 52) + 1)) - 1) & v2196) + (1 << ((*(_QWORD *)&v1721 >> 52) + 1));
        if (v1721 < 0.0)
          v1723 = -v1723;
      }
      else
      {
        v1723 = 0;
      }
      if (*(_QWORD *)&v1721 != COERCE__INT64((double)v1723))
        goto LABEL_401;
      v2707[0] = v1723 | 0xFFFE000000000000;
      v2707[1] = 0;
      v2708 = 0;
      v334 = (__int128 *)v2707;
      goto LABEL_2546;
    case 0x3A:
      v264 = *v16;
      v265 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v265)
      {
        __break(0xC471u);
        JUMPOUT(0x198445384);
      }
      v266 = *(_QWORD *)v12;
      v267 = *(_QWORD *)(*(_QWORD *)(v264 + 8) + 8 * v265);
      if (!v267)
        goto LABEL_2844;
      v268 = *(_DWORD *)(v267 - 8);
      v269 = v268 & v266;
      v270 = (uint64_t *)(v267 + 40 * (v268 & v266));
      v271 = *v270;
      if (*v270 == (v266 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_248;
      v272 = 1;
      while (v271)
      {
        v269 = (v269 + v272) & v268;
        v270 = (uint64_t *)(v267 + 40 * v269);
        v271 = *v270;
        ++v272;
        if (*v270 == (v266 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_248;
      }
      v270 = (uint64_t *)(v267 + 40 * *(unsigned int *)(v267 - 4));
LABEL_248:
      v273 = (uint64_t *)(v267 + 40 * *(unsigned int *)(v267 - 4));
      if (v270 == v273)
      {
LABEL_2844:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v264, (JSC::DFG::Node *)(v266 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198444044);
      }
      v274 = v270[4];
      if (!v274)
        goto LABEL_250;
      if (v274 >> 49)
      {
        v832 = (double)(int)v274;
        if (v274 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v832 = v274 - 0x2000000000000;
      }
      else if ((v274 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v832 = 0.0;
        if (v274 == 7)
          v832 = 1.0;
      }
      else if (v274 == 10)
      {
        v832 = NAN;
      }
      else
      {
        if (v274 != 2)
        {
LABEL_250:
          v104 = v2725[0];
          v275 = *((_QWORD *)v2725[0] + 3);
          v276 = v268 & v275;
          v277 = (uint64_t *)(v267 + 40 * (v268 & v275));
          v278 = *v277;
          if (*v277 == (v275 & 0xFF00FFFFFFFFFFFFLL))
          {
LABEL_254:
            if (v277 != v273)
            {
              v280 = v277[2];
              v281 = (v275 >> 50) & 0x3F;
              if ((v281 - 4) >= 2)
              {
                if ((_DWORD)v281 == 42)
                {
                  v335 = v280 & 0xFFFFFDBEFFFFFFFFLL | 0x4100000000;
                  if ((v280 & 0x20000000000) == 0)
                    v335 = v277[2];
                  v280 = (v335 >> 8) & 0x100000000 | v335 & 0x7300000000;
                }
                else if ((_DWORD)v281 != 52)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19843C080);
                }
              }
              v282 = v268 & (uint64_t)v2725[0];
              v283 = v267 + 40 * (v268 & (uint64_t)v2725[0]);
              v284 = *(JSC::DFG::Node **)v283;
              if (*(JSC::DFG::Node **)v283 == v2725[0])
              {
LABEL_260:
                if ((uint64_t *)v283 != v273)
                {
                  if ((v280 & 0x2800FFFFFFF7) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984431A0);
                  }
                  v286 = *(_QWORD *)(v283 + 8);
                  if ((v286 & 1) != 0)
                  {
                    WTF::fastFree(v286 & 0xFFFFFFFFFFFFFFFCLL, v19, (uint64_t)v2725[0], v21, v22, v23, v24, v25);
                    v104 = v2725[0];
                  }
                  *(_DWORD *)(v283 + 24) = 0;
                  *(_QWORD *)(v283 + 8) = 0;
                  *(_QWORD *)(v283 + 16) = v280;
                  *(_QWORD *)(v283 + 32) = 0;
                  v287 = *v16;
                  v288 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
                  if (*(_DWORD *)(*v16 + 20) <= v288)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19844538CLL);
                  }
                  v289 = *(_QWORD *)(*(_QWORD *)(v287 + 8) + 8 * v288);
                  if (!v289)
                    goto LABEL_2848;
                  v290 = *(_DWORD *)(v289 - 8);
                  v291 = v290 & v104;
                  v292 = (_QWORD *)(v289 + 40 * (v290 & v104));
                  v293 = (JSC::DFG::Node *)*v292;
                  if ((JSC::DFG::Node *)*v292 != v104)
                  {
                    v294 = 1;
                    while (v293)
                    {
                      v291 = (v291 + v294) & v290;
                      v292 = (_QWORD *)(v289 + 40 * v291);
                      v293 = (JSC::DFG::Node *)*v292;
                      ++v294;
                      if ((JSC::DFG::Node *)*v292 == v104)
                        goto LABEL_270;
                    }
                    v292 = (_QWORD *)(v289 + 40 * *(unsigned int *)(v289 - 4));
                  }
LABEL_270:
                  if (v292 == (_QWORD *)(v289 + 40 * *(unsigned int *)(v289 - 4)))
                  {
LABEL_2848:
                    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v287, (JSC::DFG::Node *)((unint64_t)v104 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
                    __break(0xC471u);
                    JUMPOUT(0x198444130);
                  }
                  v103 = v292 + 1;
                  v102 = *(JSC::DFG::Graph **)(v10 + 8);
LABEL_78:
                  JSC::DFG::AbstractValue::fixTypeForRepresentation((unint64_t)v103, v102, v104);
                  return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
                }
              }
              else
              {
                v285 = 1;
                while (v284)
                {
                  v282 = (v282 + v285) & v268;
                  v283 = v267 + 40 * v282;
                  v284 = *(JSC::DFG::Node **)v283;
                  ++v285;
                  if (*(JSC::DFG::Node **)v283 == v2725[0])
                    goto LABEL_260;
                }
              }
              JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v264, (JSC::DFG::Node *)((unint64_t)v2725[0] & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
              __break(0xC471u);
              JUMPOUT(0x1984440D8);
            }
          }
          else
          {
            v279 = 1;
            while (v278)
            {
              v276 = (v276 + v279) & v268;
              v277 = (uint64_t *)(v267 + 40 * v276);
              v278 = *v277;
              ++v279;
              if (*v277 == (v275 & 0xFF00FFFFFFFFFFFFLL))
                goto LABEL_254;
            }
          }
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v264, (JSC::DFG::Node *)(v275 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x198444090);
        }
        v832 = 0.0;
      }
      v377 = v2725[0];
      v2697[0] = *(_QWORD *)&v832 + 0x2000000000000;
      v2697[1] = 0;
      v2698 = 0;
      if (v832 != NAN && ((*(_QWORD *)&v832 + 0x2000000000000) & 0xFFFE000000000002) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984443E4);
      }
      v334 = (__int128 *)v2697;
      goto LABEL_819;
    case 0x3B:
      v2414[0] = (WTF *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!v2414[0] || (isAnyInt = JSC::JSValue::isAnyInt((JSC::JSValue *)v2414), v9 = (uint64_t)v2725[0], !isAnyInt))
      {
        v1826 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
        v1827 = *(JSC::DFG::Graph ***)(v10 + 24);
        v1828 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1827, v9);
        JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)v1828, *v1827, v1826[1], v1829, v1830, v1831, v1832, v1833);
        v103 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), (uint64_t)v2725[0]);
        v102 = *(JSC::DFG::Graph **)(v10 + 8);
        v104 = v2725[0];
        goto LABEL_78;
      }
      v2695[0] = v2414[0];
      v2695[1] = 0;
      v2696 = 0;
      if (v2414[0] && ((unint64_t)v2414[0] & 0xFFFE000000000002) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19844475CLL);
      }
      v334 = (__int128 *)v2695;
      goto LABEL_2546;
    case 0x3C:
      v398 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      v399 = *(_QWORD *)v12;
      if (!v398)
      {
        v400 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), v399 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFFF7FFFFFFFFFLL;
        v401 = *(JSC::DFG::Graph ***)(v10 + 24);
        v402 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v401, v9);
        JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)v402, *v401, v400, v403, v404, v405, v406, v407);
        v103 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), v9);
        v102 = *(JSC::DFG::Graph **)(v10 + 8);
        v104 = (JSC::DFG::Node *)v9;
        goto LABEL_78;
      }
      if ((v399 & 0xFC000000000000) != 0xD0000000000000)
        goto LABEL_1664;
      if (v398 >= 0xFFFE000000000000)
        goto LABEL_1663;
      if (v398 >> 49 && COERCE_DOUBLE(v398 - 0x2000000000000) == (double)(int)COERCE_DOUBLE(v398 - 0x2000000000000))
      {
        LODWORD(v398) = (int)COERCE_DOUBLE(v398 - 0x2000000000000);
LABEL_1663:
        v398 = v398 | 0xFFFE000000000000;
      }
LABEL_1664:
      v2693[0] = v398;
      v2693[1] = 0;
      v2694 = 0;
      if ((v398 & 0xFFFE000000000002) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198444518);
      }
      v334 = (__int128 *)v2693;
      goto LABEL_2546;
    case 0x3D:
    case 0x43:
    case 0x1B1:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x1473, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Unexpected node type");
      __break(0xC471u);
      JUMPOUT(0x19843B808);
    case 0x3E:
      v105 = *v16;
      v106 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v106)
      {
        __break(0xC471u);
        JUMPOUT(0x198445208);
      }
      v107 = *(_QWORD *)v12;
      v108 = *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v106);
      if (!v108)
        goto LABEL_2764;
      v19 = (JSCell *)(v107 & 0xFF00FFFFFFFFFFFFLL);
      v109 = *(_DWORD *)(v108 - 8);
      v110 = v109 & v107;
      v111 = (JSCell **)(v108 + 40 * (v109 & v107));
      v112 = *v111;
      if (*v111 == (JSCell *)(v107 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_85;
      v113 = 1;
      while (v112)
      {
        v110 = (v110 + v113) & v109;
        v111 = (JSCell **)(v108 + 40 * v110);
        v112 = *v111;
        ++v113;
        if (*v111 == v19)
          goto LABEL_85;
      }
      v111 = (JSCell **)(v108 + 40 * *(unsigned int *)(v108 - 4));
LABEL_85:
      v114 = (uint64_t *)(v108 + 40 * *(unsigned int *)(v108 - 4));
      if (v111 == (JSCell **)v114)
      {
LABEL_2764:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v105, (JSC::DFG::Node *)(v107 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x1984439B8);
      }
      v115 = (unint64_t)v111[4];
      v2414[0] = (WTF *)v115;
      v116 = *(_QWORD *)(v9 + 32);
      v117 = v109 & v116;
      v118 = (uint64_t *)(v108 + 40 * (v109 & v116));
      v20 = *v118;
      if (*v118 != (v116 & 0xFF00FFFFFFFFFFFFLL))
      {
        v119 = 1;
        v21 = 40;
        while (v20)
        {
          v117 = (v117 + v119) & v109;
          v118 = (uint64_t *)(v108 + 40 * v117);
          v20 = *v118;
          ++v119;
          if (*v118 == (v116 & 0xFF00FFFFFFFFFFFFLL))
            goto LABEL_90;
        }
LABEL_2762:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v105, (JSC::DFG::Node *)(v116 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x19844395CLL);
      }
LABEL_90:
      if (v118 == v114)
        goto LABEL_2762;
      v120 = v118[4];
      *(_QWORD *)&v2382 = v120;
      v121 = (v107 >> 50) & 0x3F;
      if ((_DWORD)v121 == 1)
      {
        if (v115 >= 0xFFFE000000000000 && v120 >= 0xFFFE000000000000)
        {
          if (*(_DWORD *)(v9 + 72) == 1)
          {
            v2691[0] = (v120 + v115) | 0xFFFE000000000000;
            v2691[1] = 0;
            v2692 = 0;
            v334 = (__int128 *)v2691;
LABEL_2546:
            v834 = v10;
            v377 = (JSC::DFG::Node *)v9;
            goto LABEL_2547;
          }
          v2197 = (double)(int)v115 + (double)(int)v120;
          if (fabs(v2197) != INFINITY)
          {
            v2198 = (int)v2197;
            if (v2197 == (double)(int)v2198 && ((_DWORD)v2198 || (*(_QWORD *)&v2197 & 0x8000000000000000) == 0))
            {
              v2199 = v2198 | 0xFFFE000000000000;
LABEL_2367:
              v2689[0] = v2199;
              v2689[1] = 0;
              v2690 = 0;
              v334 = (__int128 *)v2689;
              goto LABEL_2546;
            }
          }
          v2199 = *(_QWORD *)&v2197 + 0x2000000000000;
          if ((unint64_t)(*(_QWORD *)&v2197 + 0x2000000000000) >= 0xFFFE000000000000)
            goto LABEL_2367;
        }
        v122 = v109 & v9;
        v47 = (uint64_t *)(v108 + 40 * (v109 & v9));
        v123 = *v47;
        if (*v47 != v9)
        {
          v124 = 1;
          while (v123)
          {
            v122 = (v122 + v124) & v109;
            v47 = (uint64_t *)(v108 + 40 * v122);
            v123 = *v47;
            ++v124;
            if (*v47 == v9)
              goto LABEL_97;
          }
LABEL_98:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v105, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x198439938);
        }
LABEL_97:
        if (v47 == v114)
          goto LABEL_98;
LABEL_67:
        v89 = v47[1];
        if ((v89 & 1) != 0)
          WTF::fastFree(v89 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
        *((_DWORD *)v47 + 6) = 0;
        v51 = xmmword_199123920;
        goto LABEL_36;
      }
      if ((_DWORD)v121 == 49)
      {
        if (v115 >> 49)
        {
          if (v120 && v120 >> 49 != 0)
          {
            v2258 = (double)(int)v115;
            if (v115 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2258 = v115 - 0x2000000000000;
            v2259 = (double)(int)v120;
            if (v120 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2259 = v120 - 0x2000000000000;
            v2260 = v2258 + v2259;
            v2685[0] = *(_QWORD *)&v2260 + 0x2000000000000;
            v2685[1] = 0;
            v2686 = 0;
            if (v2260 != NAN && ((*(_QWORD *)&v2260 + 0x2000000000000) & 0xFFFE000000000002) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19844494CLL);
            }
            v334 = (__int128 *)v2685;
            goto LABEL_2546;
          }
        }
        v493 = JSC::DFG::AtTailAbstractState::forNode(v105, (uint64_t)v19)[1];
        v494 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL);
        v483 = JSC::typeOfDoubleSum(v493, v494[1]);
        v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        if ((v483 & 0x2800FFFFFFF7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198443FE8);
        }
LABEL_423:
        v495 = v484;
        if ((*v484 & 1) != 0)
          WTF::fastFree(*v484 & 0xFFFFFFFFFFFFFFFCLL, v485, v486, v487, v488, v489, v490, v491);
        *((_DWORD *)v495 + 4) = 0;
        *v495 = 0;
        v495[1] = v483;
        v495[3] = 0;
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
      if ((_DWORD)v121 != 52)
      {
        __break(0xC471u);
        JUMPOUT(0x19843F804);
      }
      if (!v115
        || !v120
        || !JSC::JSValue::isAnyInt((JSC::JSValue *)v2414)
        || !JSC::JSValue::isAnyInt((JSC::JSValue *)&v2382))
      {
        goto LABEL_1749;
      }
      v768 = SLODWORD(v2414[0]);
      if (v2414[0] < (WTF *)0xFFFE000000000000)
        v768 = (uint64_t)COERCE_DOUBLE((uint64_t)v2414[0] - 0x2000000000000);
      v769 = (int)v2382;
      if ((unint64_t)v2382 < 0xFFFE000000000000)
        v769 = (uint64_t)COERCE_DOUBLE(v2382 - 0x2000000000000);
      v770 = v769 + v768;
      v309 = v770 == (int)v770;
      v771 = v770 | 0xFFFE000000000000;
      v772 = COERCE__INT64((double)v770) + 0x2000000000000;
      if (v309)
        v772 = v771;
      *(_QWORD *)&v2412 = v772;
      if (!JSC::JSValue::isAnyInt((JSC::JSValue *)&v2412))
        goto LABEL_1749;
      v377 = v2725[0];
      v2687[0] = v2412;
      v2687[1] = 0;
      v2688 = 0;
      if ((_QWORD)v2412 && (v2412 & 0xFFFE000000000002) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984449C0);
      }
      v334 = (__int128 *)v2687;
      goto LABEL_819;
    case 0x3F:
      v2414[0] = (WTF *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)v2414);
      if (v1687)
      {
        v1688 = JSC::toUInt32(v1686, *(double *)&v1686);
        v377 = v2725[0];
        v2683[0] = __clz(v1688) | 0xFFFE000000000000;
        v2683[1] = 0;
        v2684 = 0;
        v334 = (__int128 *)v2683;
        goto LABEL_819;
      }
      v377 = v2725[0];
      if (((*((_QWORD *)v2725[0] + 3) >> 50) & 0x3F) - 1 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198445138);
      }
      goto LABEL_2206;
    case 0x40:
      v595 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      v2414[0] = (WTF *)v595;
      v596 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      *(_QWORD *)&v2382 = v596;
      v597 = *(_QWORD *)(v9 + 24);
      v598 = (v597 >> 50) & 0x3F;
      if (((v597 >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v598 == 49)
        {
          if (v595 >> 49 && v596 && v596 >> 49)
          {
            v2301 = (double)(int)v595;
            if (v595 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2301 = v595 - 0x2000000000000;
            v2302 = (double)(int)v596;
            if (v596 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2302 = v596 - 0x2000000000000;
            v2303 = v2301 - v2302;
            v2675[0] = *(_QWORD *)&v2303 + 0x2000000000000;
            v2675[1] = 0;
            v2676 = 0;
            if (v2303 != NAN && ((*(_QWORD *)&v2303 + 0x2000000000000) & 0xFFFE000000000002) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198444A20);
            }
            v334 = (__int128 *)v2675;
            goto LABEL_2546;
          }
          v599 = JSC::DFG::AtTailAbstractState::forNode(*v16, v597 & 0xFF00FFFFFFFFFFFFLL)[1];
          v600 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL);
          v483 = JSC::typeOfDoubleSum(v599, v600[1]);
          v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          if ((v483 & 0x2800FFFFFFF7) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19843B550);
          }
          goto LABEL_423;
        }
        if ((_DWORD)v598 == 52)
        {
          if (v595
            && v596
            && JSC::JSValue::isAnyInt((JSC::JSValue *)v2414)
            && JSC::JSValue::isAnyInt((JSC::JSValue *)&v2382))
          {
            v1813 = v2414[0] < (WTF *)0xFFFE000000000000
                  ? (uint64_t)COERCE_DOUBLE((uint64_t)v2414[0] - 0x2000000000000)
                  : SLODWORD(v2414[0]);
            v1814 = (unint64_t)v2382 < 0xFFFE000000000000
                  ? (uint64_t)COERCE_DOUBLE(v2382 - 0x2000000000000)
                  : (int)v2382;
            v1815 = v1813 - v1814;
            v1816 = v1815 == (int)v1815
                  ? v1815 | 0xFFFE000000000000
                  : COERCE__INT64((double)v1815) + 0x2000000000000;
            *(_QWORD *)&v2412 = v1816;
            if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v2412))
            {
              v377 = v2725[0];
              v2677[0] = v2412;
              v2677[1] = 0;
              v2678 = 0;
              if ((_QWORD)v2412 && (v2412 & 0xFFFE000000000002) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x198444A60);
              }
              v334 = (__int128 *)v2677;
              goto LABEL_819;
            }
          }
          goto LABEL_1749;
        }
LABEL_2031:
        __break(0xC471u);
        JUMPOUT(0x198440CFCLL);
      }
      if ((_DWORD)v598 != 1)
      {
        if (!(_DWORD)v598)
        {
          __break(0xC471u);
          JUMPOUT(0x19843FE4CLL);
        }
        goto LABEL_2031;
      }
      if (v595 < 0xFFFE000000000000 || v596 < 0xFFFE000000000000)
        goto LABEL_340;
      if (*(_DWORD *)(v9 + 72) == 1)
      {
        v2681[0] = (v595 - v596) | 0xFFFE000000000000;
        v2681[1] = 0;
        v2682 = 0;
        v334 = (__int128 *)v2681;
        goto LABEL_2546;
      }
      v2316 = (double)(int)v595 - (double)(int)v596;
      if (vabdd_f64((double)(int)v595, (double)(int)v596) != INFINITY)
      {
        v2317 = (int)v2316;
        if (v2316 == (double)(int)v2317 && ((_DWORD)v2317 || (*(_QWORD *)&v2316 & 0x8000000000000000) == 0))
        {
          v2318 = v2317 | 0xFFFE000000000000;
LABEL_2728:
          v2679[0] = v2318;
          v2679[1] = 0;
          v2680 = 0;
          v334 = (__int128 *)v2679;
          goto LABEL_2546;
        }
      }
      v2318 = *(_QWORD *)&v2316 + 0x2000000000000;
      if ((unint64_t)(*(_QWORD *)&v2316 + 0x2000000000000) >= 0xFFFE000000000000)
        goto LABEL_2728;
      goto LABEL_340;
    case 0x41:
      v480 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      v2414[0] = (WTF *)v480;
      v481 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v481 == 49)
      {
        if (v480 >> 49)
        {
          v2165 = (double)(int)v480;
          if (v480 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v2165 = v480 - 0x2000000000000;
          v2667[0] = *(_QWORD *)&v2165 - 0x7FFE000000000000;
          v2667[1] = 0;
          v2668 = 0;
          if (v2165 != NAN && ((*(_QWORD *)&v2165 - 0x7FFE000000000000) & 0xFFFE000000000002) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19844479CLL);
          }
          v334 = (__int128 *)v2667;
          goto LABEL_2546;
        }
        v482 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        v483 = JSC::typeOfDoubleNegation(v482[1]);
        v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        if ((v483 & 0x2800FFFFFFF7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19843ACECLL);
        }
        goto LABEL_423;
      }
      if ((_DWORD)v481 != 52)
      {
        if ((_DWORD)v481 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19843FF6CLL);
        }
        if (v480 >= 0xFFFE000000000000)
        {
          v668 = *(_DWORD *)(v9 + 72);
          if (v668 == 1)
          {
            v2673[0] = -(int)v480 | 0xFFFE000000000000;
            v2673[1] = 0;
            v2674 = 0;
            v334 = (__int128 *)v2673;
            goto LABEL_2546;
          }
          v2223 = 0.0 - (double)(int)v480;
          if ((v668 - 3) < 0xFFFFFFFE)
            v2223 = -(double)(int)v480;
          if (fabs(v2223) != INFINITY)
          {
            v2224 = (int)v2223;
            if (v2223 == (double)(int)v2224 && ((_DWORD)v2224 || (*(_QWORD *)&v2223 & 0x8000000000000000) == 0))
            {
              v2225 = v2224 | 0xFFFE000000000000;
LABEL_2454:
              v2671[0] = v2225;
              v2671[1] = 0;
              v2672 = 0;
              v334 = (__int128 *)v2671;
              goto LABEL_2546;
            }
          }
          v2225 = *(_QWORD *)&v2223 + 0x2000000000000;
          if ((unint64_t)(*(_QWORD *)&v2223 + 0x2000000000000) >= 0xFFFE000000000000)
            goto LABEL_2454;
        }
        goto LABEL_340;
      }
      if (v480)
      {
        v1819 = JSC::JSValue::isAnyInt((JSC::JSValue *)v2414);
        v9 = (uint64_t)v2725[0];
        if (v1819)
        {
          v1820 = (double)SLODWORD(v2414[0]);
          if (v2414[0] <= (WTF *)0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v1820 = (char *)v2414[0] - 0x2000000000000;
          v1821 = -v1820;
          v1822 = 0.0 - v1820;
          if ((*((_DWORD *)v2725[0] + 18) - 3) < 0xFFFFFFFE)
            v1822 = v1821;
          if ((*(_QWORD *)&v1822 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v1823 = (int)v1822, v1822 == (double)(int)v1823)
            && ((_DWORD)v1823 || (*(_QWORD *)&v1822 & 0x8000000000000000) == 0))
          {
            v1824 = v1823 | 0xFFFE000000000000;
          }
          else
          {
            v1824 = *(_QWORD *)&v1822 + 0x2000000000000;
          }
          *(_QWORD *)&v2382 = v1824;
          if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v2382))
          {
            v377 = v2725[0];
            v2669[0] = v2382;
            v2669[1] = 0;
            v2670 = 0;
            if ((_QWORD)v2382 && (v2382 & 0xFFFE000000000002) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19844491CLL);
            }
            v334 = (__int128 *)v2669;
            goto LABEL_819;
          }
LABEL_2501:
          v9 = (uint64_t)v2725[0];
        }
      }
      goto LABEL_959;
    case 0x42:
      v372 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      v2414[0] = (WTF *)v372;
      v373 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      *(_QWORD *)&v2382 = v373;
      v374 = *(_QWORD *)(v9 + 24);
      v375 = (v374 >> 50) & 0x3F;
      if ((_DWORD)v375 != 1)
      {
        if ((_DWORD)v375 == 49)
        {
          if (v372 >> 49 && v373 && v373 >> 49)
          {
            v2262 = (double)(int)v372;
            if (v372 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2262 = v372 - 0x2000000000000;
            v2263 = (double)(int)v373;
            if (v373 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v2263 = v373 - 0x2000000000000;
            v2264 = v2262 * v2263;
            v2657[0] = *(_QWORD *)&v2264 + 0x2000000000000;
            v2657[1] = 0;
            v2658 = 0;
            if (v2264 != NAN && ((*(_QWORD *)&v2264 + 0x2000000000000) & 0xFFFE000000000002) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19844496CLL);
            }
            v334 = (__int128 *)v2657;
            goto LABEL_2546;
          }
          v496 = JSC::DFG::AtTailAbstractState::forNode(*v16, v374 & 0xFF00FFFFFFFFFFFFLL)[1];
          v497 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL);
          v483 = JSC::typeOfDoubleSum(v496, v497[1]);
          v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          if ((v483 & 0x2800FFFFFFF7) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19843AE24);
          }
          goto LABEL_423;
        }
        if ((_DWORD)v375 != 52)
        {
          __break(0xC471u);
          JUMPOUT(0x19843F9F4);
        }
        if (v372
          && v373
          && JSC::JSValue::isAnyInt((JSC::JSValue *)v2414)
          && JSC::JSValue::isAnyInt((JSC::JSValue *)&v2382))
        {
          v773 = (double)SLODWORD(v2414[0]);
          if (v2414[0] <= (WTF *)0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v773 = (char *)v2414[0] - 0x2000000000000;
          v774 = (double)(int)v2382;
          if ((unint64_t)v2382 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v774 = v2382 - 0x2000000000000;
          v775 = v773 * v774;
          if ((*((_DWORD *)v2725[0] + 18) - 3) >= 0xFFFFFFFE)
            v775 = v775 + 0.0;
          if ((*(_QWORD *)&v775 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v776 = (int)v775, v775 == (double)(int)v776)
            && ((_DWORD)v776 || (*(_QWORD *)&v775 & 0x8000000000000000) == 0))
          {
            v777 = v776 | 0xFFFE000000000000;
          }
          else
          {
            v777 = *(_QWORD *)&v775 + 0x2000000000000;
          }
          *(_QWORD *)&v2412 = v777;
          if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v2412))
          {
            v377 = v2725[0];
            v2659[0] = v2412;
            v2659[1] = 0;
            v2660 = 0;
            if ((_QWORD)v2412 && (v2412 & 0xFFFE000000000002) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1984449E0);
            }
            v334 = (__int128 *)v2659;
            goto LABEL_819;
          }
        }
LABEL_1749:
        v1047 = v2725[0];
        v1046 = *v16;
LABEL_960:
        v385 = JSC::DFG::AtTailAbstractState::forNode(v1046, (uint64_t)v1047);
        v386 = *v385;
        if ((*v385 & 1) == 0)
        {
LABEL_961:
          *((_DWORD *)v385 + 4) = 0;
          v387 = xmmword_199123970;
          goto LABEL_343;
        }
LABEL_1622:
        WTF::fastFree(v386 & 0xFFFFFFFFFFFFFFFCLL, v378, v379, v380, v381, v382, v383, v384);
        goto LABEL_961;
      }
      if (v372 < 0xFFFE000000000000 || v373 < 0xFFFE000000000000)
        goto LABEL_340;
      v2205 = *(_DWORD *)(v9 + 72);
      if (v2205 == 1)
      {
        v2663[0] = (v373 * v372) | 0xFFFE000000000000;
        v2663[1] = 0;
        v2664 = 0;
        v334 = (__int128 *)v2663;
        goto LABEL_2546;
      }
      v2297 = (double)(int)v372 * (double)(int)v373;
      if ((v2205 - 3) >= 0xFFFFFFFE)
        v2297 = v2297 + 0.0;
      if (fabs(v2297) != INFINITY)
      {
        v2298 = (int)v2297;
        if (v2297 == (double)(int)v2298 && ((_DWORD)v2298 || (*(_QWORD *)&v2297 & 0x8000000000000000) == 0))
        {
          v2299 = v2298 | 0xFFFE000000000000;
LABEL_2644:
          v2661[0] = v2299;
          v2661[1] = 0;
          v2662 = 0;
          v334 = (__int128 *)v2661;
          goto LABEL_2546;
        }
      }
      v2299 = *(_QWORD *)&v2297 + 0x2000000000000;
      if ((unint64_t)(*(_QWORD *)&v2297 + 0x2000000000000) >= 0xFFFE000000000000)
        goto LABEL_2644;
      goto LABEL_340;
    case 0x44:
    case 0x45:
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantDivOp(v10, v9) & 1) != 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v470 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v470 == 1)
        goto LABEL_401;
      if ((_DWORD)v470 != 49)
      {
        __break(0xC471u);
        JUMPOUT(0x19843FD7CLL);
      }
      v655 = *(unsigned __int16 *)(v9 + 18);
      v656 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1];
      v657 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[1];
      if (v655 == 68)
      {
        v658 = JSC::typeOfDoubleQuotient(v656, v657);
        v659 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        if ((v658 & 0x2800FFFFFFF7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444404);
        }
      }
      else
      {
        v658 = JSC::typeOfDoubleQuotient(v656, v657);
        v659 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        if ((v658 & 0x2800FFFFFFF7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198440804);
        }
      }
      goto LABEL_591;
    case 0x46:
      v2414[0] = (WTF *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      v1764 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v1764 != 1)
      {
        if ((_DWORD)v1764 != 49)
        {
          if (!(_DWORD)v1764)
          {
            __break(0xC471u);
            JUMPOUT(0x198444DE0);
          }
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x566, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "node->child1().useKind() == UntypedUse");
          WTFCrashWithInfoImpl(1382, "./dfg/DFGAbstractInterpreterInlines.h", "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]");
        }
        JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)v2414);
        if (!v1766)
        {
          v2221 = v2725[0];
          v2222 = JSC::DFG::AtTailAbstractState::forNode(*v16, *((_QWORD *)v2725[0] + 3) & 0xFF00FFFFFFFFFFFFLL);
          v483 = JSC::typeOfDoubleNegation(v2222[1]);
          v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2221);
          if ((v483 & 0x2800FFFFFFF7) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1984425F0);
          }
          goto LABEL_423;
        }
        v377 = v2725[0];
        v2646 = 0;
        v2645[0] = (v1765 & 0x7FFFFFFFFFFFFFFFLL) + 0x2000000000000;
        v2645[1] = 0;
        if ((v1765 & 0x7FFFFFFFFFFFFFFFLL) != 0xFFFE000000000000
          && (((v1765 & 0x7FFFFFFFFFFFFFFFLL) + 0x2000000000000) & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19844477CLL);
        }
        v334 = (__int128 *)v2645;
LABEL_819:
        v834 = v10;
LABEL_2547:
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(v834, v377, v334, v21, v22, v23, v24, v25);
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
      JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)v2414);
      if (!v1994)
        goto LABEL_2487;
      v1995 = v1993 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v1993 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v1996 = (int)*(double *)&v1995, *(double *)&v1995 == (double)(int)v1996))
      {
        v1997 = v1996 | 0xFFFE000000000000;
      }
      else
      {
        v1997 = v1995 + 0x2000000000000;
        if (v1997 < 0xFFFE000000000000)
        {
LABEL_2487:
          v377 = v2725[0];
LABEL_2206:
          v376 = *v16;
LABEL_341:
          v385 = JSC::DFG::AtTailAbstractState::forNode(v376, (uint64_t)v377);
          v386 = *v385;
          if ((*v385 & 1) == 0)
          {
LABEL_342:
            *((_DWORD *)v385 + 4) = 0;
            v387 = xmmword_199123920;
            goto LABEL_343;
          }
LABEL_403:
          WTF::fastFree(v386 & 0xFFFFFFFFFFFFFFFCLL, v378, v379, v380, v381, v382, v383, v384);
          goto LABEL_342;
        }
      }
      v377 = v2725[0];
      v2647[0] = v1997;
      v2647[1] = 0;
      v2648 = 0;
      v334 = (__int128 *)v2647;
      goto LABEL_819;
    case 0x47:
      v1048 = *(_QWORD *)(v10 + 8);
      v1049 = *(_DWORD *)(v9 + 56);
      v1050 = (_QWORD *)v12;
      if ((v1049 & 0x10) != 0)
      {
        if (*(_DWORD *)(v1048 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455C4);
        }
        v1050 = (_QWORD *)(*(_QWORD *)(v1048 + 152) + 8 * *(_QWORD *)v12);
      }
      v1051 = (*v1050 >> 50) & 0x3FLL;
      if ((_DWORD)v1051 != 49)
      {
        if ((_DWORD)v1051 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198445044);
        }
        LOBYTE(v2382) = 0;
        BYTE4(v2382) = 0;
        LOBYTE(v2412) = 1;
        v2414[0] = (WTF *)v10;
        v2414[1] = (WTF *)&v2412;
        v2414[2] = (WTF *)&v2382;
        v1052 = *(_QWORD *)v12;
        if ((v1049 & 0x10) != 0)
        {
          v2194 = *(_QWORD *)(v9 + 32);
          if ((int)v2194 + (int)v1052 > v1052)
          {
            v2195 = *(_QWORD *)v12;
            do
            {
              if (v2195 >= *(unsigned int *)(v1048 + 164))
              {
                __break(0xC471u);
                JUMPOUT(0x198445458);
              }
              if ((*(_QWORD *)(*(_QWORD *)(v1048 + 152) + 8 * v2195) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)v2414, *(_QWORD *)(*(_QWORD *)(v1048 + 152) + 8 * v2195));
                v1052 = *(_QWORD *)(v9 + 24);
                v2194 = *(_QWORD *)(v9 + 32);
              }
              ++v2195;
            }
            while (v2195 < (v1052 + v2194));
          }
        }
        else if ((v1052 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)v2414, v1052);
          v1053 = *(_QWORD *)(v9 + 32);
          if ((v1053 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)v2414, v1053);
            v1054 = *(_QWORD *)(v9 + 40);
            if ((v1054 & 0xFF00FFFFFFFFFFFFLL) != 0)
              JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()((uint64_t)v2414, v1054);
          }
        }
        v377 = v2725[0];
        if ((_BYTE)v2412 && BYTE4(v2382))
        {
          v2655[0] = v2382 | 0xFFFE000000000000;
          v2655[1] = 0;
          v2656 = 0;
          v334 = (__int128 *)v2655;
          goto LABEL_819;
        }
        goto LABEL_2206;
      }
      LOBYTE(v2382) = 0;
      BYTE8(v2382) = 0;
      LOBYTE(v2390) = 1;
      *(_QWORD *)&v2412 = 0;
      v2414[0] = (WTF *)&v2412;
      v2414[1] = (WTF *)v10;
      v2414[2] = (WTF *)&v2390;
      v2414[3] = (WTF *)&v2382;
      v1983 = *(_QWORD *)v12;
      if ((v1049 & 0x10) != 0)
      {
        v2192 = *(_QWORD *)(v9 + 32);
        if ((int)v2192 + (int)v1983 > v1983)
        {
          v2193 = *(_QWORD *)v12;
          do
          {
            if (v2193 >= *(unsigned int *)(v1048 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x198445450);
            }
            if ((*(_QWORD *)(*(_QWORD *)(v1048 + 152) + 8 * v2193) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()((uint64_t)v2414, *(_QWORD *)(*(_QWORD *)(v1048 + 152) + 8 * v2193));
              v1983 = *(_QWORD *)(v9 + 24);
              v2192 = *(_QWORD *)(v9 + 32);
            }
            ++v2193;
          }
          while (v2193 < (v1983 + v2192));
        }
      }
      else if ((v1983 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()((uint64_t)v2414, v1983);
        v1984 = *(_QWORD *)(v9 + 32);
        if ((v1984 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()((uint64_t)v2414, v1984);
          v1985 = *(_QWORD *)(v9 + 40);
          if ((v1985 & 0xFF00FFFFFFFFFFFFLL) != 0)
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()((uint64_t)v2414, v1985);
        }
      }
      v377 = v2725[0];
      if ((_BYTE)v2390 && BYTE8(v2382))
      {
        v2654 = 0;
        v2653[0] = v2382 + 0x2000000000000;
        v2653[1] = 0;
        if ((_QWORD)v2382 != 0xFFFE000000000000 && (((_QWORD)v2382 + 0x2000000000000) & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444828);
        }
        v334 = (__int128 *)v2653;
        goto LABEL_819;
      }
      v2176 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
      v2184 = v2412;
      if ((v2412 & 0x2800FFFFFFF7) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984447C8);
      }
      goto LABEL_2349;
    case 0x48:
      v910 = *(_QWORD *)(v10 + 8);
      v911 = *(_DWORD *)(v9 + 56);
      v912 = (_QWORD *)v12;
      if ((v911 & 0x10) != 0)
      {
        if (*(_DWORD *)(v910 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455BCLL);
        }
        v912 = (_QWORD *)(*(_QWORD *)(v910 + 152) + 8 * *(_QWORD *)v12);
      }
      v913 = (*v912 >> 50) & 0x3FLL;
      if ((_DWORD)v913 != 49)
      {
        if ((_DWORD)v913 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198445004);
        }
        LOBYTE(v2382) = 0;
        BYTE4(v2382) = 0;
        LOBYTE(v2412) = 1;
        v2414[0] = (WTF *)v10;
        v2414[1] = (WTF *)&v2412;
        v2414[2] = (WTF *)&v2382;
        v914 = *(_QWORD *)v12;
        if ((v911 & 0x10) != 0)
        {
          v2174 = *(_QWORD *)(v9 + 32);
          if ((int)v2174 + (int)v914 > v914)
          {
            v2175 = *(_QWORD *)v12;
            do
            {
              if (v2175 >= *(unsigned int *)(v910 + 164))
              {
                __break(0xC471u);
                JUMPOUT(0x198445448);
              }
              if ((*(_QWORD *)(*(_QWORD *)(v910 + 152) + 8 * v2175) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()((uint64_t)v2414, *(_QWORD *)(*(_QWORD *)(v910 + 152) + 8 * v2175));
                v914 = *(_QWORD *)(v9 + 24);
                v2174 = *(_QWORD *)(v9 + 32);
              }
              ++v2175;
            }
            while (v2175 < (v914 + v2174));
          }
        }
        else if ((v914 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()((uint64_t)v2414, v914);
          v915 = *(_QWORD *)(v9 + 32);
          if ((v915 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()((uint64_t)v2414, v915);
            v916 = *(_QWORD *)(v9 + 40);
            if ((v916 & 0xFF00FFFFFFFFFFFFLL) != 0)
              JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()((uint64_t)v2414, v916);
          }
        }
        v377 = v2725[0];
        if ((_BYTE)v2412 && BYTE4(v2382))
        {
          v2651[0] = v2382 | 0xFFFE000000000000;
          v2651[1] = 0;
          v2652 = 0;
          v334 = (__int128 *)v2651;
          goto LABEL_819;
        }
        goto LABEL_2206;
      }
      LOBYTE(v2382) = 0;
      BYTE8(v2382) = 0;
      LOBYTE(v2390) = 1;
      *(_QWORD *)&v2412 = 0;
      v2414[0] = (WTF *)&v2412;
      v2414[1] = (WTF *)v10;
      v2414[2] = (WTF *)&v2390;
      v2414[3] = (WTF *)&v2382;
      v1943 = *(_QWORD *)v12;
      if ((v911 & 0x10) != 0)
      {
        v2172 = *(_QWORD *)(v9 + 32);
        if ((int)v2172 + (int)v1943 > v1943)
        {
          v2173 = *(_QWORD *)v12;
          do
          {
            if (v2173 >= *(unsigned int *)(v910 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x198445440);
            }
            if ((*(_QWORD *)(*(_QWORD *)(v910 + 152) + 8 * v2173) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()((uint64_t)v2414, *(_QWORD *)(*(_QWORD *)(v910 + 152) + 8 * v2173));
              v1943 = *(_QWORD *)(v9 + 24);
              v2172 = *(_QWORD *)(v9 + 32);
            }
            ++v2173;
          }
          while (v2173 < (v1943 + v2172));
        }
      }
      else if ((v1943 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()((uint64_t)v2414, v1943);
        v1944 = *(_QWORD *)(v9 + 32);
        if ((v1944 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()((uint64_t)v2414, v1944);
          v1945 = *(_QWORD *)(v9 + 40);
          if ((v1945 & 0xFF00FFFFFFFFFFFFLL) != 0)
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()((uint64_t)v2414, v1945);
        }
      }
      v377 = v2725[0];
      if ((_BYTE)v2390 && BYTE8(v2382))
      {
        v2650 = 0;
        v2649[0] = v2382 + 0x2000000000000;
        v2649[1] = 0;
        if ((_QWORD)v2382 != 0xFFFE000000000000 && (((_QWORD)v2382 + 0x2000000000000) & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984447E8);
        }
        v334 = (__int128 *)v2649;
        goto LABEL_819;
      }
      v2176 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
      v2184 = v2412;
      if ((v2412 & 0x2800FFFFFFF7) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198441F24);
      }
LABEL_2349:
      v385 = v2176;
      if ((*v2176 & 1) != 0)
        WTF::fastFree(*v2176 & 0xFFFFFFFFFFFFFFFCLL, v2177, v2178, v2179, v2180, v2181, v2182, v2183);
      *((_DWORD *)v385 + 4) = 0;
      *v385 = 0;
      v385[1] = v2184;
      goto LABEL_344;
    case 0x49:
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#2}>(v10, (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x4A:
      v1698 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!(v1698 >> 49))
        goto LABEL_1785;
      if (v1698 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v1699 = v1698 - 0x2000000000000;
      else
        v1699 = (double)(int)v1698;
      if (v1699 == 0.0)
      {
        v2643[0] = 0x3FF2000000000000;
        v2643[1] = 0;
        v2644 = 0;
        v334 = (__int128 *)v2643;
        goto LABEL_2546;
      }
      v1700 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1700 >> 49)
      {
        v1701 = (double)(int)v1700;
        if (v1700 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v1701 = v1700 - 0x2000000000000;
        v1702 = operationMathPow(v1701, v1699);
        v2641[0] = *(_QWORD *)&v1702 + 0x2000000000000;
        v2641[1] = 0;
        v2642 = 0;
        if (v1702 != NAN && ((*(_QWORD *)&v1702 + 0x2000000000000) & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984448FCLL);
        }
        v334 = (__int128 *)v2641;
        goto LABEL_2546;
      }
LABEL_1785:
      v1834 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[1];
      v1835 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL);
      v658 = JSC::typeOfDoublePow(v1834, v1835[1]);
      v659 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      if ((v658 & 0x2800FFFFFFF7) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984400D4);
      }
      goto LABEL_591;
    case 0x4B:
LABEL_1696:
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      if ((*v385 & 1) != 0)
        WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v1797, v1798, v1799, v1800, v1801, v1802, v1803);
      *((_DWORD *)v385 + 4) = 0;
      v387 = xmmword_1991239E0;
      goto LABEL_343;
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      v2414[0] = (WTF *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)v2414);
      v9 = (uint64_t)v2725[0];
      if (v615)
      {
        v616 = *((unsigned __int16 *)v2725[0] + 9);
        switch(v616)
        {
          case 'N':
            v617 = ceilDouble(v614);
            break;
          case 'M':
            v617 = floorDouble(v614);
            break;
          case 'L':
            v617 = jsRound(v614);
            break;
          default:
            v617 = trunc(v614);
            break;
        }
        v9 = (uint64_t)v2725[0];
        v829 = *((_QWORD *)v2725[0] + 3);
        if ((v829 & 0xFC000000000000) == 0)
        {
          if ((*(_QWORD *)&v617 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v1872 = (int)v617, v617 == (double)(int)v1872)
            && ((_DWORD)v1872 || (*(_QWORD *)&v617 & 0x8000000000000000) == 0))
          {
            v1873 = v1872 | 0xFFFE000000000000;
          }
          else
          {
            v1873 = *(_QWORD *)&v617 + 0x2000000000000;
          }
          v2639[0] = v1873;
          v2639[1] = 0;
          v2640 = 0;
          if (v1873 && (v1873 & 0xFFFE000000000002) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198444538);
          }
          v334 = (__int128 *)v2639;
          goto LABEL_2546;
        }
        v1869 = *((_DWORD *)v2725[0] + 18);
        if (v1869 > 1)
        {
          v2634 = 0;
          v2633[0] = *(_QWORD *)&v617 + 0x2000000000000;
          v2633[1] = 0;
          if (v617 != NAN && ((*(_QWORD *)&v617 + 0x2000000000000) & 0xFFFE000000000002) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198444564);
          }
          v334 = (__int128 *)v2633;
          goto LABEL_2546;
        }
        v1870 = (int)v617;
        if (v617 == (double)(int)v1870)
        {
          if (v1869 != 1)
          {
            v2635[0] = v1870 | 0xFFFE000000000000;
            v2635[1] = 0;
            v2636 = 0;
            v334 = (__int128 *)v2635;
            goto LABEL_2546;
          }
          if ((_DWORD)v1870)
          {
            v1871 = v1870 | 0xFFFE000000000000;
LABEL_1813:
            v2637[0] = v1871;
            v2637[1] = 0;
            v2638 = 0;
            v334 = (__int128 *)v2637;
            goto LABEL_2546;
          }
          if ((*(_QWORD *)&v617 & 0x8000000000000000) == 0)
          {
            v1871 = 0xFFFE000000000000;
            goto LABEL_1813;
          }
        }
      }
      else
      {
        v829 = *((_QWORD *)v2725[0] + 3);
      }
      v830 = (v829 >> 50) & 0x3F;
      if ((_DWORD)v830 != 49)
      {
        if (!(_DWORD)v830)
        {
          __break(0xC471u);
          JUMPOUT(0x198444B80);
        }
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x5B6, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "node->child1().useKind() == UntypedUse");
        WTFCrashWithInfoImpl(1462, "./dfg/DFGAbstractInterpreterInlines.h", "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]");
      }
      if (*(_DWORD *)(v9 + 72) > 1u)
      {
        v831 = JSC::DFG::AtTailAbstractState::forNode(*v16, v829 & 0xFF00FFFFFFFFFFFFLL);
        v483 = JSC::typeOfDoubleRounding(v831[1]);
        v484 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        if ((v483 & 0x2800FFFFFFF7) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19843C4D8);
        }
        goto LABEL_423;
      }
LABEL_340:
      v376 = *v16;
      v377 = (JSC::DFG::Node *)v9;
      goto LABEL_341;
    case 0x50:
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#1}>(v10, (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x51:
      v2414[0] = (WTF *)JSC::DFG::arithUnaryFunction(*(_DWORD *)(v9 + 72));
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<double (*)(double)>(v10, (JSC::DFG::Node *)v9, (double (**)(double))v2414);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x52:
    case 0x53:
      v669 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if (((*(_QWORD *)v12 >> 50) & 0x3F) > 0x1B)
      {
        if ((_DWORD)v669 != 28)
        {
          if ((_DWORD)v669 == 49)
          {
            v2154 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
            v658 = JSC::typeOfDoubleIncOrDec(v2154[1]);
            v659 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
            if ((v658 & 0x2800FFFFFFF7) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1984419F4);
            }
LABEL_591:
            v667 = v659;
            if ((*v659 & 1) != 0)
              WTF::fastFree(*v659 & 0xFFFFFFFFFFFFFFFCLL, v660, v661, v662, v663, v664, v665, v666);
            *((_DWORD *)v667 + 4) = 0;
            *v667 = 0;
            v667[1] = v658;
            v667[3] = 0;
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          }
          if ((_DWORD)v669 == 52)
          {
            v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
            v386 = *v385;
LABEL_1621:
            if ((v386 & 1) == 0)
              goto LABEL_961;
            goto LABEL_1622;
          }
LABEL_3005:
          v2355 = (JSC::DFG::Graph **)*v16;
          v2356 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)v2356, *v2355, 0x87300000000, v2357, v2358, v2359, v2360, v2361);
          __break(0xC471u);
          JUMPOUT(0x1984451A4);
        }
        goto LABEL_2230;
      }
      if ((_DWORD)v669 == 1)
        goto LABEL_401;
      if ((_DWORD)v669 != 26 && (_DWORD)v669 != 27)
        goto LABEL_3005;
      goto LABEL_2230;
    case 0x54:
      __break(0xC471u);
      JUMPOUT(0x19843F5C4);
    case 0x55:
    case 0x56:
      v723 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if (((*(_QWORD *)v12 >> 50) & 0x3F) <= 0x1A)
      {
        if (!(_DWORD)v723)
        {
          __break(0xC471u);
          JUMPOUT(0x198440774);
        }
        if ((_DWORD)v723 != 26)
          goto LABEL_1713;
        v724 = *(_QWORD *)(v9 + 32) & 0xFC000000000000;
        v725 = 0x68000000000000;
LABEL_2229:
        if (v724 == v725)
        {
LABEL_2230:
          v2155 = (JSC::DFG::Graph **)*v16;
          v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          v315 = *v2155;
          v317 = 0x80000000000;
          goto LABEL_296;
        }
LABEL_1713:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x325, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "node->binaryUseKind() == UntypedUse");
        __break(0xC471u);
        JUMPOUT(0x19843FC80);
      }
      if ((_DWORD)v723 == 27)
      {
        v724 = *(_QWORD *)(v9 + 32) & 0xFC000000000000;
        v725 = 0x6C000000000000;
        goto LABEL_2229;
      }
      if ((_DWORD)v723 != 28 || (*(_QWORD *)(v9 + 32) & 0xFC000000000000) != 0x70000000000000)
        goto LABEL_1713;
      goto LABEL_2299;
    case 0x57:
      v1763 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v1763 == 27)
      {
        v2226 = *(_QWORD *)(v9 + 32) & 0xFC000000000000;
        v2227 = 0x6C000000000000;
      }
      else
      {
        if ((_DWORD)v1763 != 26)
        {
          if ((_DWORD)v1763 == 28 && (*(_QWORD *)(v9 + 32) & 0xFC000000000000) == 0x70000000000000)
          {
LABEL_2299:
            v2171 = (JSC::DFG::Graph **)*v16;
            v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
            v315 = *v2171;
            v317 = 0x100000000000;
            goto LABEL_296;
          }
LABEL_1600:
          __break(0xC471u);
          JUMPOUT(0x19843F530);
        }
        v2226 = *(_QWORD *)(v9 + 32) & 0xFC000000000000;
        v2227 = 0x68000000000000;
      }
      if (v2226 == v2227)
        goto LABEL_2230;
      goto LABEL_1600;
    case 0x58:
    case 0x5A:
      if ((JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantDivOp(v10, v9) & 1) != 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v766 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      switch((_DWORD)v766)
      {
        case 0x1B:
          v2228 = *(_QWORD *)(v9 + 32);
          v2229 = v2228 & 0xFC000000000000;
          v2230 = 0x6C000000000000;
          break;
        case 0x1A:
          v2228 = *(_QWORD *)(v9 + 32);
          v2229 = v2228 & 0xFC000000000000;
          v2230 = 0x68000000000000;
          break;
        case 0x1C:
          v2228 = *(_QWORD *)(v9 + 32);
          v2231 = (v2228 & 0xFC000000000000) != 0x70000000000000;
          goto LABEL_2477;
        default:
          goto LABEL_702;
      }
      if (v2229 != v2230)
        goto LABEL_702;
      v2231 = 0;
LABEL_2477:
      if ((*(_BYTE *)(v9 + 56) & 8) != 0 && !v2231)
      {
        v2232 = JSC::DFG::AtTailAbstractState::forNode(*v16, v2228 & 0xFF00FFFFFFFFFFFFLL)[3];
        if (v2232)
        {
          if ((v2232 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v2232 + 5) == 3)
          {
            if (*(_DWORD *)(v2232 + 8))
            {
              v2233 = *(_DWORD *)(v9 + 56);
              if ((v2233 & 0xFFFFFFF7) != v2233)
                *(_DWORD *)(v9 + 56) = v2233 & 0xFFFFFFF7;
            }
          }
        }
      }
LABEL_702:
      v767 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v767 != 26
        && (_DWORD)v767 != 28
        && ((_DWORD)v767 != 27 || (*(_QWORD *)(v9 + 32) & 0xFC000000000000) != 0x6C000000000000))
      {
        __break(0xC471u);
        JUMPOUT(0x19843BF84);
      }
      goto LABEL_2230;
    case 0x59:
      v905 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      v906 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v905 >> 49)
        v907 = v906 == 0;
      else
        v907 = 1;
      if (!v907 && v906 >> 49 != 0)
      {
        v1937 = (double)(int)v905;
        if (v905 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v1937 = v905 - 0x2000000000000;
        v1938 = (double)(int)v906;
        if (v906 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v1938 = v906 - 0x2000000000000;
        v1939 = operationMathPow(v1937, v1938);
        if ((*(_QWORD *)&v1939 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v1940 = (int)v1939, v1939 == (double)(int)v1940)
          && ((_DWORD)v1940 || (*(_QWORD *)&v1939 & 0x8000000000000000) == 0))
        {
          v1941 = v1940 | 0xFFFE000000000000;
        }
        else
        {
          v1941 = *(_QWORD *)&v1939 + 0x2000000000000;
        }
        v2665[0] = v1941;
        v2665[1] = 0;
        v2666 = 0;
        if (v1941)
          v1942 = (v1941 & 0xFFFE000000000002) == 0;
        else
          v1942 = 0;
        if (v1942)
        {
          __break(0xC471u);
          JUMPOUT(0x198444628);
        }
        v334 = (__int128 *)v2665;
        goto LABEL_2546;
      }
      v909 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      switch((_DWORD)v909)
      {
        case 0x1B:
          v2266 = *(_QWORD *)(v9 + 32);
          if ((v2266 & 0xFC000000000000) != 0x6C000000000000)
            goto LABEL_2612;
          break;
        case 0x1A:
          v2266 = *(_QWORD *)(v9 + 32);
          if ((v2266 & 0xFC000000000000) != 0x68000000000000)
            goto LABEL_2230;
          break;
        case 0x1C:
          v2266 = *(_QWORD *)(v9 + 32);
          v2267 = (v2266 & 0xFC000000000000) != 0x70000000000000;
          goto LABEL_2589;
        default:
          goto LABEL_883;
      }
      v2267 = 0;
LABEL_2589:
      v2268 = *(_DWORD *)(v9 + 56);
      if ((v2268 & 8) != 0
        && !v2267
        && v906
        && (v906 & 0xFFFE000000000002) == 0
        && *(_BYTE *)(v906 + 5) == 3
        && !*(_BYTE *)(v906 + 16)
        && (v2268 & 0xFFFFFFF7) != v2268)
      {
        *(_DWORD *)(v9 + 56) = v2268 & 0xFFFFFFF7;
      }
      if ((_DWORD)v909 != 27)
        goto LABEL_2230;
LABEL_2612:
      if ((v2266 & 0xFC000000000000) == 0x6C000000000000)
        goto LABEL_2230;
LABEL_883:
      __break(0xC471u);
      JUMPOUT(0x19843C924);
    case 0x5B:
      v1705 = *(_QWORD *)(v9 + 24);
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v1980 = *(_QWORD *)(v9 + 32);
        if ((int)v1980 + (int)v1705 > v1705)
        {
          v1981 = *(_QWORD *)(v10 + 8);
          v1982 = *(_QWORD *)(v9 + 24);
          do
          {
            if (v1982 >= *(unsigned int *)(v1981 + 164))
            {
              __break(0xC471u);
              JUMPOUT(0x19844541CLL);
            }
            if ((*(_QWORD *)(*(_QWORD *)(v1981 + 152) + 8 * v1982) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(*v16, v2414, *(_QWORD *)(*(_QWORD *)(v1981 + 152) + 8 * v1982));
              v1705 = *(_QWORD *)(v9 + 24);
              v1980 = *(_QWORD *)(v9 + 32);
            }
            ++v1982;
          }
          while (v1982 < (v1705 + v1980));
        }
      }
      else if ((v1705 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(*v16, v2414, v1705);
        v1706 = *(_QWORD *)(v9 + 32);
        if ((v1706 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(*v16, v2414, v1706);
          v1707 = *(_QWORD *)(v9 + 40);
          if ((v1707 & 0xFF00FFFFFFFFFFFFLL) != 0)
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(*v16, v2414, v1707);
        }
      }
      v637 = v2725[0];
      v635 = (JSC::DFG::Graph **)*v16;
      v636 = *v16;
      goto LABEL_573;
    case 0x5C:
    case 0x5D:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (v26 == 146)
        goto LABEL_2578;
      v249 = *(_DWORD *)(v9 + 72);
      v250 = v249;
      if ((v26 & 0xFFFE) != 0x5C)
      {
        if ((v26 - 202) >= 0xA || ((0x3EFu >> (v26 + 54)) & 1) == 0)
        {
LABEL_2578:
          __break(0xC471u);
          JUMPOUT(0x198442DB4);
        }
        v2075 = dword_199155ED0[(__int16)(v26 - 202)];
        if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
        {
          v2314 = *(_QWORD *)(v10 + 8);
          v2315 = v2075 + *(_DWORD *)v12;
          if (*(_DWORD *)(v2314 + 164) <= v2315)
          {
            __break(0xC471u);
            JUMPOUT(0x1984455F4);
          }
          v2076 = (_QWORD *)(*(_QWORD *)(v2314 + 152) + 8 * v2315);
        }
        else
        {
          v2076 = (_QWORD *)(v12 + 8 * v2075);
        }
        if ((*v2076 & 0xFF00FFFFFFFFFFFFLL) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198441594);
        }
        goto LABEL_229;
      }
      if (v249 - 7 < 5 || v249 == 4)
      {
        v251 = *(_QWORD *)(v10 + 8);
        v252 = *(_DWORD *)(v9 + 56);
        if ((v252 & 0x10) != 0)
        {
          v479 = *(_DWORD *)(v251 + 164);
          if (v479 <= *(_DWORD *)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x19844542CLL);
          }
          if (v479 <= *(_DWORD *)v12 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19843AC64);
          }
        }
      }
      else
      {
        v251 = *(_QWORD *)(v10 + 8);
        v252 = *(_DWORD *)(v9 + 56);
      }
      v253 = (_QWORD *)v12;
      if ((v252 & 0x10) != 0)
      {
        if (*(_DWORD *)(v251 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198445424);
        }
        v253 = (_QWORD *)(*(_QWORD *)(v251 + 152) + 8 * *(_QWORD *)v12);
      }
      if ((*v253 & 0xFC000000000000) != 0x2C000000000000 || v249 != 4)
        goto LABEL_229;
      if ((v252 & 0x10) != 0)
      {
        v2311 = *(_DWORD *)v12 + 1;
        if (*(_DWORD *)(v251 + 164) <= v2311)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455ECLL);
        }
        v838 = (_QWORD *)(*(_QWORD *)(v251 + 152) + 8 * v2311);
      }
      else
      {
        v838 = (_QWORD *)(v9 + 32);
      }
      v839 = JSC::DFG::AtTailAbstractState::forNode(*v16, *v838 & 0xFF00FFFFFFFFFFFFLL)[3];
      v250 = 4;
      if (!v839 || (v839 & 0xFFFE000000000002) != 0)
        goto LABEL_229;
      if (*(_BYTE *)(v839 + 5) != 2)
        goto LABEL_836;
      v840 = *(_QWORD *)(v839 + 8);
      v250 = 4;
      if (!v840 || (v840 & 1) != 0)
        goto LABEL_229;
      if ((*(_BYTE *)(v840 + 16) & 0x10) == 0)
        goto LABEL_836;
      v2305 = JSC::CacheableIdentifier::createFromCell(v839, v19);
      if (!v2305)
        goto LABEL_2673;
      v2306 = (v2305 & 1) != 0 ? v2305 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v2305 + 8);
      if (!v2306)
        goto LABEL_2673;
      v2307 = *(_DWORD *)(v2306 + 16);
      if ((v2307 & 0x20) != 0)
        goto LABEL_2673;
      v2308 = *(_BYTE **)(v2306 + 8);
      v2309 = *(unsigned int *)(v2306 + 4);
      if ((v2307 & 4) != 0)
      {
        if (!(_DWORD)v2309)
          goto LABEL_2673;
        v2310 = *v2308 - 48;
        if (v2310 > 9 || v2309 >= 2 && *v2308 == 48)
          goto LABEL_2673;
        v2363 = v2308 + 1;
        v2364 = v2309 - 1;
        while (v2364)
        {
          if (v2310 <= 0x19999999)
          {
            v2365 = *v2363 - 48;
            if (v2365 <= 9)
            {
              v720 = __CFADD__(v2365, 10 * v2310);
              v2310 = v2365 + 10 * v2310;
              ++v2363;
              --v2364;
              if (!v720)
                continue;
            }
          }
          goto LABEL_2673;
        }
      }
      else
      {
        if (!(_DWORD)v2309)
          goto LABEL_2673;
        v2310 = *(unsigned __int16 *)v2308 - 48;
        if (v2310 > 9 || *(_WORD *)v2308 == 48 && v2309 > 1)
          goto LABEL_2673;
        v2325 = (unsigned __int16 *)(v2308 + 2);
        v2326 = v2309 - 1;
        while (v2326)
        {
          if (v2310 <= 0x19999999)
          {
            v2327 = *v2325 - 48;
            if (v2327 <= 9)
            {
              v720 = __CFADD__(v2327, 10 * v2310);
              v2310 = v2327 + 10 * v2310;
              ++v2325;
              --v2326;
              if (!v720)
                continue;
            }
          }
          goto LABEL_2673;
        }
      }
      if (v2310 != -1)
      {
LABEL_836:
        v250 = 4;
LABEL_229:
        v254 = *(unsigned __int16 *)(v9 + 18);
        if (v254 != 209)
        {
          v255 = BYTE2(v249);
          if ((v250 - 9) < 3)
          {
            if (v255 == 4)
            {
              __break(0xC471u);
              JUMPOUT(0x19843FA14);
            }
            v256 = *v16;
            v257 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
            if (*(_DWORD *)(*v16 + 20) <= v257)
            {
              __break(0xC471u);
              JUMPOUT(0x19844539CLL);
            }
            v258 = *(_QWORD *)(*(_QWORD *)(v256 + 8) + 8 * v257);
            if (!v258)
              goto LABEL_2856;
            v259 = *(_DWORD *)(v258 - 8);
            v260 = v259 & v9;
            v47 = (uint64_t *)(v258 + 40 * (v259 & v9));
            v261 = *v47;
            if (*v47 != v9)
            {
              v262 = 1;
              while (v261)
              {
                v260 = (v260 + v262) & v259;
                v47 = (uint64_t *)(v258 + 40 * v260);
                v261 = *v47;
                ++v262;
                if (*v47 == v9)
                  goto LABEL_238;
              }
              v47 = (uint64_t *)(v258 + 40 * *(unsigned int *)(v258 - 4));
            }
LABEL_238:
            if (v47 == (uint64_t *)(v258 + 40 * *(unsigned int *)(v258 - 4)))
            {
LABEL_2856:
              JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v256, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
              __break(0xC471u);
              JUMPOUT(0x198444284);
            }
            v47[2] = 0x3B73FFFFFFF7;
            *((_DWORD *)v47 + 6) = -21020677;
            v263 = v47[1];
            if ((v263 & 1) != 0)
              WTF::fastFree(v263 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
            v47[1] = 4;
            goto LABEL_37;
          }
          switch(v250)
          {
            case 0:
            case 1:
            case 2:
              __break(0xC471u);
              JUMPOUT(0x19843B860);
            case 3:
              goto LABEL_1410;
            case 4:
              __break(0xC471u);
              JUMPOUT(0x19843FAB0);
            case 5:
              if ((v255 - 3) <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19843FB34);
              }
              goto LABEL_620;
            case 6:
              if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
              {
                v2295 = *(_QWORD *)(v10 + 8);
                v2296 = *(_DWORD *)v12 + 1;
                if (*(_DWORD *)(v2295 + 164) <= v2296)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984455E4);
                }
                v1794 = (_QWORD *)(*(_QWORD *)(v2295 + 152) + 8 * v2296);
              }
              else
              {
                v1794 = (_QWORD *)(v9 + 32);
              }
              v1795 = JSC::DFG::AtTailAbstractState::forNode(*v16, *v1794 & 0xFF00FFFFFFFFFFFFLL)[3];
              if (v1795 >= 0xFFFE000000000000 && (v1795 & 0x80000000) == 0)
              {
                v2473[0] = 10;
                v2473[1] = 0;
                v2474 = 0;
                v334 = (__int128 *)v2473;
                goto LABEL_2546;
              }
              v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
              v386 = *v385;
              if ((*v385 & 1) == 0)
                goto LABEL_1170;
              goto LABEL_1687;
            case 7:
              if (v255 == 3)
              {
                v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                v386 = *v385;
                goto LABEL_355;
              }
              if (v255 == 4)
              {
                __break(0xC471u);
                JUMPOUT(0x19843FB64);
              }
              goto LABEL_401;
            case 8:
              if (!v255)
              {
                v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                v654 = *v385;
LABEL_2285:
                if ((v654 & 1) != 0)
                  WTF::fastFree(v654 & 0xFFFFFFFFFFFFFFFCLL, v647, v648, v649, v650, v651, v652, v653);
                *((_DWORD *)v385 + 4) = 0;
                v387 = xmmword_199123910;
                break;
              }
              if (v255 != 3)
              {
                if (v255 == 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984451ECLL);
                }
                goto LABEL_1696;
              }
              v2168 = *(_DWORD *)(v9 + 56);
              v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
              v654 = *v385;
              if ((v2168 & 0x20000) == 0)
                goto LABEL_2285;
LABEL_749:
              if ((v654 & 1) != 0)
                WTF::fastFree(v654 & 0xFFFFFFFFFFFFFFFCLL, v647, v648, v649, v650, v651, v652, v653);
              *((_DWORD *)v385 + 4) = 0;
              v387 = xmmword_1991239A0;
              break;
            case 12:
            case 13:
              if ((v255 - 3) <= 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198444CC4);
              }
              v779 = *v16;
              goto LABEL_754;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
              goto LABEL_353;
            case 20:
              v1786 = *(_QWORD *)(v9 + 64);
              if (v1786 && (v1786 & 0xFFFFFFFCFFFFFFFFLL) == 0)
              {
LABEL_353:
                v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                v386 = *v385;
                if (v254 != 92 || (v255 - 3) > 1)
                  goto LABEL_402;
LABEL_355:
                if ((v386 & 1) != 0)
                  WTF::fastFree(v386 & 0xFFFFFFFFFFFFFFFCLL, v378, v379, v380, v381, v382, v383, v384);
                *((_DWORD *)v385 + 4) = 0;
                v387 = xmmword_1991239D0;
              }
              else if (v254 == 92 && (v255 - 3) < 2)
              {
                v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                if ((*v385 & 1) != 0)
                  WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v1787, v1788, v1789, v1790, v1791, v1792, v1793);
                *((_DWORD *)v385 + 4) = 0;
                v387 = xmmword_1991239C0;
              }
              else
              {
                if (v1786 && (v1786 & 0xFFFFFFF0FFFFFFFFLL) == 0)
                  goto LABEL_959;
                v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                if ((*v385 & 1) != 0)
                  WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v2146, v2147, v2148, v2149, v2150, v2151, v2152);
                *((_DWORD *)v385 + 4) = 0;
                v387 = xmmword_1991239B0;
              }
              break;
            case 21:
            case 22:
              v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
              v654 = *v385;
              if (v254 == 92 && (v255 - 3) <= 1)
                goto LABEL_749;
              goto LABEL_2211;
            default:
              __break(0xC471u);
              JUMPOUT(0x19843FBF0);
          }
LABEL_343:
          *(_OWORD *)v385 = v387;
LABEL_344:
          v385[3] = 0;
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
        if (v250 == 4)
        {
          __break(0xC471u);
          JUMPOUT(0x198444D30);
        }
        v835 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
        {
          v2274 = *(_DWORD *)v12 + 2;
          if (*(_DWORD *)(v835 + 164) <= v2274)
          {
            __break(0xC471u);
            JUMPOUT(0x1984455B4);
          }
          v836 = (_QWORD *)(*(_QWORD *)(v835 + 152) + 8 * v2274);
        }
        else
        {
          v836 = (_QWORD *)(v9 + 40);
        }
        v837 = (*v836 >> 50) & 0x3FLL;
        if ((_DWORD)v837 == 52)
        {
LABEL_959:
          v1046 = *v16;
          v1047 = (JSC::DFG::Node *)v9;
          goto LABEL_960;
        }
        if ((_DWORD)v837 == 49)
        {
          v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          v654 = *v385;
LABEL_2211:
          if ((v654 & 1) != 0)
LABEL_2212:
            WTF::fastFree(v654 & 0xFFFFFFFFFFFFFFFCLL, v647, v648, v649, v650, v651, v652, v653);
LABEL_581:
          *((_DWORD *)v385 + 4) = 0;
          v387 = xmmword_199123940;
          goto LABEL_343;
        }
        if ((_DWORD)v837 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v835, (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x9FA, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19843C5E8);
        }
LABEL_401:
        v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v386 = *v385;
LABEL_402:
        if ((v386 & 1) == 0)
          goto LABEL_342;
        goto LABEL_403;
      }
LABEL_2673:
      __break(0xC471u);
      JUMPOUT(0x1984432E4);
    case 0x5E:
    case 0x5F:
    case 0x70:
    case 0x71:
    case 0x8E:
      __break(0xC471u);
      JUMPOUT(0x19843B458);
    case 0x60:
    case 0x61:
      v726 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      v727 = *(_QWORD *)(*(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v728 = (_QWORD *)(v727 & 0xFFFFFFFF8);
      if ((v727 & 1) != 0)
        v728 = (_QWORD *)*v728;
      if (v726)
        v729 = v726 >= 0xFFFE000000000000;
      else
        v729 = 0;
      v730 = v729 && (v726 & 0x80000000) == 0;
      if (!v730 || (v731 = *(_DWORD *)(v9 + 72), v1874 = v726 + v731, __CFADD__((_DWORD)v726, v731)))
      {
        if (v728)
        {
          v731 = *(_DWORD *)(v9 + 72);
          v732 = v728[3];
          v733 = v732 & 0x3FFFFF;
LABEL_676:
          memset(v2414, 0, 32);
          if (v731 + 1 < v733)
          {
            v734 = v731 + 6;
            do
            {
              v735 = v734 + (HIDWORD(v732) & 0xFFFFF | ((int)(v732 >> 28) >> 24 << 20));
              v736 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), v735 | ((unint64_t)(v735 >> 31) << 32));
              v744 = *(_QWORD *)(v736 + 8);
              if (v744)
              {
                v745 = v736;
                if (v2414[1])
                {
                  v2414[1] = (WTF *)((unint64_t)v2414[1] | v744);
                  if ((LODWORD(v2414[2]) | *(_DWORD *)(v736 + 16)) != LODWORD(v2414[2]))
                    LODWORD(v2414[2]) |= *(_DWORD *)(v736 + 16);
                  if ((*(_QWORD *)v736 & 0xFFFFFFFFFFFFFFFDLL) != 0 && v2414[0] != (WTF *)4)
                  {
                    if (*(_QWORD *)v736 == 4)
                    {
                      if (((uint64_t)v2414[0] & 1) != 0)
                        WTF::fastFree((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL, v737, v738, v739, v740, v741, v742, v743);
                      v2414[0] = (WTF *)4;
                    }
                    else
                    {
                      JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)v2414, (const JSC::DFG::StructureAbstractValue *)v736, v738, v739, v740, v741, v742, v743);
                    }
                  }
                  if (v2414[3] != *(WTF **)(v745 + 24))
                    v2414[3] = 0;
                }
                else
                {
                  JSC::DFG::AbstractValue::operator=((uint64_t)v2414, (uint64_t *)v736, v738, v739, v740, v741, v742, v743);
                }
              }
              v732 = v728[3];
              v746 = v734 - 4;
              ++v734;
            }
            while (v746 < ((_DWORD)v728[3] & 0x3FFFFFu));
            v9 = (uint64_t)v2725[0];
          }
          if (*(_WORD *)(v9 + 18) == 97)
          {
            v2414[1] = (WTF *)((unint64_t)v2414[1] | 0x20000000000);
            v2414[3] = 0;
          }
          v1915 = (JSC::DFG::Graph **)*v16;
          v1916 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
          JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1916, *v1915, (const JSC::DFG::AbstractValue *)v2414, v1917, v1918, v1919, v1920, v1921);
          goto LABEL_1924;
        }
        v1771 = (JSC::DFG::Graph **)*v16;
      }
      else
      {
        if (v728)
        {
          v732 = v728[3];
          v733 = v732 & 0x3FFFFF;
          if (v1874 < (v732 & 0x3FFFFF) - 1)
          {
            v1771 = (JSC::DFG::Graph **)*v16;
            v1875 = v1874 + (HIDWORD(v732) & 0xFFFFF | ((int)(v732 >> 28) >> 24 << 20)) + 6;
            v1770 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), v1875 | ((unint64_t)(v1875 >> 31) << 32));
LABEL_1616:
            v887 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1771, v9);
            v893 = *v1771;
            v894 = (const JSC::DFG::AbstractValue *)v1770;
            goto LABEL_1284;
          }
          goto LABEL_676;
        }
        v1771 = (JSC::DFG::Graph **)*v16;
        v2204 = *(_QWORD *)(*v16 + 40);
        if (v1874 < *(_DWORD *)(v2204 + 160) - 1)
        {
          v1770 = *(_QWORD *)(v2204 + 144) + 32 * (v1874 + 1);
          goto LABEL_1616;
        }
      }
      v779 = (uint64_t)v1771;
LABEL_754:
      v780 = JSC::DFG::AtTailAbstractState::forNode(v779, v9);
LABEL_2203:
      JSC::DFG::AbstractValue::makeHeapTop((JSC::DFG::AbstractValue *)v780, v781, v688, v21, v22, v23, v24, v25);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x62:
      __break(0xC471u);
      JUMPOUT(0x19843CC0CLL);
    case 0x63:
    case 0x64:
      if (v26 != 100)
      {
        if (v26 == 99)
        {
          __break(0xC471u);
          JUMPOUT(0x198444B5CLL);
        }
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x201, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Bad opcode");
        __break(0xC471u);
        JUMPOUT(0x198444C54);
      }
      v747 = *(_DWORD **)(v9 + 72);
      v755 = JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), v747[1] | ((((unint64_t)v747[1] >> 31) & 1) << 32));
      if ((*(_QWORD *)v755 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v755 & 0xFFFFFFFFFFFFFFFCLL, v748, v749, v750, v751, v752, v753, v754);
      *(_DWORD *)(v755 + 16) = 0;
      *(_OWORD *)v755 = xmmword_199123920;
      *(_QWORD *)(v755 + 24) = 0;
      v756 = v747[6];
      if (v756 != 1)
      {
        v757 = v756 - 2;
        do
        {
          v758 = (JSC::DFG::AbstractValue *)JSC::DFG::AtTailAbstractState::operand(*(_QWORD *)(*v16 + 40), (v757 + *v747) | ((unint64_t)((v757 + *v747) >> 31) << 32));
          JSC::DFG::AbstractValue::makeHeapTop(v758, v759, v760, v761, v762, v763, v764, v765);
          --v757;
        }
        while (v757 != -1);
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v601 = *(_DWORD *)(v9 + 72);
      switch((char)v601)
      {
        case 3:
          goto LABEL_1410;
        case 4:
        case 5:
        case 12:
        case 13:
          if (v26 != 104 && v26 != 102)
            goto LABEL_3088;
          v1926 = *(_QWORD *)(v9 + 24);
          if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
          {
            v2319 = *(_QWORD *)(v10 + 8);
            v2320 = *(_DWORD *)(v2319 + 164);
            if (v2320 <= v1926)
            {
              __break(0xC471u);
              JUMPOUT(0x1984455FCLL);
            }
            v2321 = *(_QWORD *)(v2319 + 152);
            if ((*(_QWORD *)(v2321 + 8 * v1926) & 0xFC000000000000) != 0x20000000000000)
              goto LABEL_3088;
            v2322 = v1926 + 1;
            if (v2320 <= v2322)
            {
              __break(0xC471u);
              JUMPOUT(0x198445604);
            }
            v1927 = *(_QWORD *)(v2321 + 8 * v2322);
          }
          else
          {
            if ((v1926 & 0xFC000000000000) != 0x20000000000000)
              goto LABEL_3088;
            v1927 = *(_QWORD *)(v9 + 32);
          }
          if ((v1927 & 0xFC000000000000) == 0x54000000000000)
          {
            v1928 = JSC::DFG::AtTailAbstractState::forNode(*v16, v1927 & 0xFF00FFFFFFFFFFFFLL)[3];
            if (v1928)
            {
              if ((v1928 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1928 + 5) == 2)
              {
                v1930 = *(_QWORD *)(v1928 + 8);
                if (v1930)
                {
                  if ((v1930 & 1) == 0 && (*(_BYTE *)(v1930 + 16) & 0x10) != 0)
                  {
                    v1931 = JSC::CacheableIdentifier::createFromCell(v1928, v1929);
                    if (v1931)
                    {
                      v1932 = (v1931 & 1) != 0 ? v1931 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v1931 + 8);
                      if (v1932)
                      {
                        v1933 = *(_DWORD *)(v1932 + 16);
                        if ((v1933 & 0x20) == 0)
                        {
                          v1934 = *(_BYTE **)(v1932 + 8);
                          v1935 = *(unsigned int *)(v1932 + 4);
                          if ((v1933 & 4) != 0)
                          {
                            if (!(_DWORD)v1935)
                              goto LABEL_1967;
                            v1936 = *v1934 - 48;
                            if (v1936 > 9 || v1935 >= 2 && *v1934 == 48)
                              goto LABEL_1967;
                            v2366 = v1934 + 1;
                            v2367 = v1935 - 1;
                            while (v2367)
                            {
                              if (v1936 <= 0x19999999)
                              {
                                v2368 = *v2366 - 48;
                                if (v2368 <= 9)
                                {
                                  v720 = __CFADD__(v2368, 10 * v1936);
                                  v1936 = v2368 + 10 * v1936;
                                  ++v2366;
                                  --v2367;
                                  if (!v720)
                                    continue;
                                }
                              }
                              goto LABEL_1967;
                            }
                          }
                          else
                          {
                            if (!(_DWORD)v1935)
                              goto LABEL_1967;
                            v1936 = *(unsigned __int16 *)v1934 - 48;
                            if (v1936 > 9 || *(_WORD *)v1934 == 48 && v1935 > 1)
                              goto LABEL_1967;
                            v2341 = (unsigned __int16 *)(v1934 + 2);
                            v2342 = v1935 - 1;
                            while (v2342)
                            {
                              if (v1936 <= 0x19999999)
                              {
                                v2343 = *v2341 - 48;
                                if (v2343 <= 9)
                                {
                                  v720 = __CFADD__(v2343, 10 * v1936);
                                  v1936 = v2343 + 10 * v1936;
                                  ++v2341;
                                  --v2342;
                                  if (!v720)
                                    continue;
                                }
                              }
                              goto LABEL_1967;
                            }
                          }
                          if (v1936 != -1)
                            goto LABEL_3088;
                        }
                      }
                    }
LABEL_1967:
                    __break(0xC471u);
                    JUMPOUT(0x198440988);
                  }
                }
              }
            }
          }
LABEL_3088:
          __break(0xC471u);
          JUMPOUT(0x19844559CLL);
        case 7:
          if (BYTE2(v601) - 3 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198440FE4);
          }
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        case 8:
          if (BYTE2(v601) - 3 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198440FB4);
          }
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        case 9:
        case 10:
          if (BYTE2(v601) - 3 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19843B5ACLL);
          }
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        case 11:
          if ((v601 & 0xFE0000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19844100CLL);
          }
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        default:
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
    case 0x69:
    case 0x6B:
    case 0x6C:
      __break(0xC471u);
      JUMPOUT(0x19843B828);
    case 0x6A:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x79:
      v590 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      if (!byte_1ECF4C42A)
        goto LABEL_2948;
      v591 = (uint64_t)v590;
      if (*v590 == 4 || (*v590 & 2) != 0)
        goto LABEL_2948;
      v593 = *(unsigned __int16 *)(v9 + 18);
      if (v593 == 119)
      {
        v594 = 0;
        goto LABEL_761;
      }
      if (v593 == 106)
      {
        v594 = *(unsigned __int8 *)(v9 + 80);
LABEL_761:
        v782 = 1;
        goto LABEL_762;
      }
      v782 = 0;
      v594 = 0;
LABEL_762:
      v783 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2384, (const JSC::CodeOrigin *)v9);
      v790 = (_QWORD *)JSC::DFG::Graph::globalObjectFor(v783, &v2384, v784, v785, v786, v787, v788, v789);
      JSC::DFG::StructureAbstractValue::toStructureSet(v591, (uint64_t *)&v2382);
      v791 = JSC::DFG::Node::cacheableIdentifier(v2725[0]);
      JSC::PutByStatus::computeFor(v790, (unint64_t *)&v2382, v791, v782, v594, v792, v793, v794, (uint64_t)v2414);
      if ((v2382 & 1) != 0)
        WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
      if ((v2384 & 1) != 0 && (v2384 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2384 & 0xFFFFFFFF8, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
      if (LODWORD(v2414[0]) != 1)
        goto LABEL_2947;
      v2390 = 0;
      *(_QWORD *)&v2382 = v2383;
      *((_QWORD *)&v2382 + 1) = 3;
      if (!HIDWORD(v2414[2]))
        goto LABEL_799;
      v802 = (unint64_t *)v2414[1];
      v803 = (unint64_t *)((char *)v2414[1] + 64 * (unint64_t)HIDWORD(v2414[2]));
      while (2)
      {
        v804 = v802[3];
        if (v804)
          v805 = (const JSC::ObjectPropertyCondition *)(v804 + 8);
        else
          v805 = 0;
        if (v804)
          v806 = v804 + 8 + 24 * *(unsigned int *)(v804 + 4);
        else
          v806 = 0;
        while (v805 != (const JSC::ObjectPropertyCondition *)v806)
        {
          JSC::DFG::Graph::watchCondition(*(JSC::DFG::Graph **)(v10 + 8), v805, (uint64_t)v796, v797, v798, v799, v800, v801);
          if ((v807 & 1) == 0)
          {
            v820 = 0;
            goto LABEL_790;
          }
          v805 = (const JSC::ObjectPropertyCondition *)((char *)v805 + 24);
        }
        v808 = *(_QWORD *)(v10 + 8);
        if (*(_DWORD *)v802 == 2)
        {
          v809 = JSC::DFG::Graph::registerStructure(v808, v802[2], (int *)&v2412, v797, v798, v799, v800, v801);
          v810 = *(_QWORD *)(v10 + 8);
          v811 = JSC::PutByVariant::oldStructureForTransition((JSC::PutByVariant *)v802);
          *(_QWORD *)&v2412 = JSC::DFG::Graph::registerStructure(v810, v811, (int *)&v2412, v812, v813, v814, v815, v816);
          *((_QWORD *)&v2412 + 1) = v809;
          if (HIDWORD(v2382) == DWORD2(v2382))
          {
            WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Transition>((uint64_t)&v2382, (unint64_t)&v2412, (uint64_t)v796, v797, v798, v799, v800, v801);
          }
          else
          {
            *(_OWORD *)(v2382 + 16 * HIDWORD(v2382)) = v2412;
            ++HIDWORD(v2382);
          }
        }
        else
        {
          v817 = JSC::DFG::Graph::addStructureSet(v808, v802 + 1, v796, v797, v798, v799, v800, v801);
          v818 = *v817;
          if ((*v817 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v2390, v817);
            goto LABEL_784;
          }
          v809 = v818 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v818 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            goto LABEL_784;
        }
        if ((v2390 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v2390, v809);
        }
        else if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) != v809)
        {
          if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v2069 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v2069 = 0x400000002;
            v2070 = v2390;
            *(_QWORD *)(v2069 + 8) = v2390 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v2069 + 16) = v809;
            v819 = v2070 & 2 | (unint64_t)v2069 | 1;
          }
          else
          {
            v819 = v2390 & 2 | v809;
          }
          v2390 = v819;
        }
LABEL_784:
        v802 += 8;
        if (v802 != v803)
          continue;
        break;
      }
LABEL_799:
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransitions(v10, &v2382, (uint64_t)v796, v797, v798, v799, v800, v801);
      v823 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *((_QWORD *)v2725[0] + 3) & 0xFF00FFFFFFFFFFFFLL);
      if (JSC::DFG::AbstractValue::changeStructure((uint64_t)v823, *(_QWORD *)(v10 + 8), &v2390, v824, v825, v826, v827, v828) == 1)*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
      v820 = 1;
LABEL_790:
      v821 = v2382;
      if (v2383 != (_OWORD *)v2382 && (_QWORD)v2382 != 0)
      {
        *(_QWORD *)&v2382 = 0;
        DWORD2(v2382) = 0;
        WTF::fastFree(v821, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
      }
      if ((v2390 & 1) != 0)
        WTF::fastFree(v2390 & 0xFFFFFFFFFFFFFFFCLL, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
      if ((v820 & 1) != 0)
      {
        JSC::PutByStatus::~PutByStatus((JSC::PutByStatus *)v2414, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
LABEL_2947:
      JSC::PutByStatus::~PutByStatus((JSC::PutByStatus *)v2414, v795, (uint64_t)v796, v797, v798, v799, v800, v801);
LABEL_2948:
      __break(0xC471u);
      JUMPOUT(0x198444A9CLL);
    case 0x6D:
      v999 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1000 = *v999;
      v1001 = *v999 != 4 && (*v999 & 2) == 0;
      if (!v1001
        || (*(_QWORD *)v12 & 0xFC000000000000) != 0x20000000000000 && (v999[1] & 0xFFFFD7FF00000008) != 0)
      {
        goto LABEL_946;
      }
      v1002 = v1000 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v1000 & 1) == 0)
        goto LABEL_940;
      if (*(_DWORD *)v1002 != 1)
        goto LABEL_946;
      v1002 = *(_QWORD *)(v1002 + 8);
LABEL_940:
      *(_QWORD *)&v2382 = v1002;
      if (!v1002)
        goto LABEL_946;
      v1003 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2416, (const JSC::CodeOrigin *)v9);
      v1017 = JSC::DFG::Graph::globalObjectFor(v1003, &v2416, v1004, v1005, v1006, v1007, v1008, v1009);
      if ((v2416 & 1) != 0 && (v2416 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2416 & 0xFFFFFFFF8, v1010, v1011, v1012, v1013, v1014, v1015, v1016);
      if (*(_BYTE *)(v1002 + 9) != 59)
        goto LABEL_946;
      v1018 = *(_QWORD *)(v1002 + 48);
      if (!v1018)
        goto LABEL_946;
      if (v1018 != *(_QWORD *)(v1017 + 688))
        goto LABEL_946;
      v1019 = *(_WORD *)(v1002 + 12);
      if (v1019 & 8 | *(_BYTE *)(v1002 + 16) & 3)
        goto LABEL_946;
      if ((v1019 & 0x10) != 0)
      {
        if ((v1019 & 0xA0) != 0x20)
          goto LABEL_946;
      }
      else if ((v1019 & 0x80) != 0)
      {
        goto LABEL_946;
      }
      if (JSC::DFG::Graph::isWatchingRegExpPrimordialPropertiesWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], v1011, v1012, v1013, v1014, v1015, v1016))
      {
        v2022 = JSC::DFG::Node::cacheableIdentifier(v2725[0]);
        if (v2022)
          v2023 = (v2022 & 1) != 0 ? v2022 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v2022 + 8);
        else
          v2023 = 0;
        *(_QWORD *)&v2412 = v2023;
        v2414[0] = (WTF *)&v2412;
        v2414[1] = (WTF *)&v2382;
        v2414[2] = (WTF *)v10;
        v2414[3] = (WTF *)v2725;
        v2024 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 41952) + 1264);
        v2025 = JSC::JSGlobalObject::regExpProtoExecFunction(v1017);
        if (JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()((uint64_t)v2414, v2024, v2025, v2026, v2027, v2028, v2029, v2030))
        {
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
        v2031 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 41952) + 1392);
        v2032 = JSC::JSGlobalObject::regExpProtoGlobalGetter(v1017);
        if (JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()((uint64_t)v2414, v2031, v2032, v2033, v2034, v2035, v2036, v2037))
        {
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
        v2038 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 41952) + 2576);
        v2039 = JSC::JSGlobalObject::regExpProtoUnicodeGetter(v1017);
        if (JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()((uint64_t)v2414, v2038, v2039, v2040, v2041, v2042, v2043, v2044))
        {
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
        v2045 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 41952) + 2584);
        v2046 = JSC::JSGlobalObject::regExpProtoUnicodeSetsGetter(v1017);
        if (JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()((uint64_t)v2414, v2045, v2046, v2047, v2048, v2049, v2050, v2051)
          || JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()((uint64_t)v2414, *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 41952) + 2736), *(_QWORD *)(v1017 + 632), v2052, v2053, v2054, v2055, v2056))
        {
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
LABEL_946:
      __break(0xC471u);
      JUMPOUT(0x19843CD6CLL);
    case 0x6E:
    case 0x6F:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x8F:
      v498 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      if (!byte_1ECF4C42A)
        goto LABEL_2950;
      v499 = (uint64_t)v498;
      v500 = *v498 != 4 && (*v498 & 2) == 0;
      if (!v500 || (*(_QWORD *)v12 & 0xFC000000000000) != 0x20000000000000 && (v498[1] & 0xFFFFD7FF00000008) != 0)
        goto LABEL_2950;
      v501 = JSC::DFG::Node::cacheableIdentifier((JSC::DFG::Node *)v9);
      if (v501)
      {
        if ((v501 & 1) != 0)
          v502 = v501 & 0xFFFFFFFFFFFFFFFELL;
        else
          v502 = *(_QWORD *)(v501 + 8);
      }
      else
      {
        v502 = 0;
      }
      JSC::DFG::StructureAbstractValue::toStructureSet(v499, (uint64_t *)&v2382);
      JSC::GetByStatus::computeFor((unint64_t *)&v2382, v502, v503, v504, v505, v506, v507, v508, (uint64_t)v2414);
      if ((v2382 & 1) != 0)
        WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v509, (uint64_t)v510, v511, v512, v513, v514, v515);
      if (v2415 != 1)
      {
        JSC::GetByStatus::~GetByStatus((JSC::GetByStatus *)v2414, v509, (uint64_t)v510, v511, v512, v513, v514, v515);
LABEL_2950:
        __break(0xC471u);
        JUMPOUT(0x198444AC4);
      }
      v2382 = 0u;
      v2383[0] = 0u;
      if (!HIDWORD(v2414[1]))
        goto LABEL_471;
      v516 = (unint64_t)HIDWORD(v2414[1]) << 6;
      v517 = HIDWORD(v2414[1]) - 1;
      while (1)
      {
        if (v517 >= HIDWORD(v2414[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x19844537CLL);
        }
        v518 = (unint64_t *)((char *)v2414[0] + v516);
        if (*(_QWORD *)((char *)v2414[0] + v516 - 56))
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0xF1B, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "status[i].conditionSet().isEmpty()");
          __break(0xC471u);
          JUMPOUT(0x1984448B0);
        }
        v519 = *(_QWORD **)(v10 + 8);
        v520 = JSC::DFG::Graph::addStructureSet((uint64_t)v519, v518 - 8, v510, v511, v512, v513, v514, v515);
        v521 = *((unsigned int *)v518 - 12);
        v522 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 40) + 13);
        ConstantProperty = JSC::DFG::Graph::tryGetConstantProperty((uint64_t)v519, *(_QWORD *)(v499 + 24), (unint64_t *)v520, v521, v523, v524, v525, v526);
        if (!ConstantProperty)
          break;
        v2412 = 0u;
        v2413 = 0u;
        v530 = JSC::DFG::Graph::freeze((uint64_t)v519, ConstantProperty, (uint64_t)v510, v511, v512, v513, v514, v515);
        JSC::DFG::AbstractValue::set((uint64_t)&v2412, v519, (unint64_t *)v530, v522, v531, v532, v533, v534);
        v529 = *((_QWORD *)&v2412 + 1);
        if (*((_QWORD *)&v2412 + 1))
          goto LABEL_454;
LABEL_462:
        if ((v2412 & 1) != 0)
          WTF::fastFree(v2412 & 0xFFFFFFFFFFFFFFFCLL, v528, (uint64_t)v510, v511, v512, v513, v514, v515);
        --v517;
        v516 -= 64;
        if (!v516)
        {
LABEL_471:
          v535 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
          JSC::DFG::AbstractValue::operator=((uint64_t)v535, (uint64_t *)&v2382, v536, v537, v538, v539, v540, v541);
          if ((v2382 & 1) != 0)
            WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v542, v543, v544, v545, v546, v547, v548);
          JSC::GetByStatus::~GetByStatus((JSC::GetByStatus *)v2414, v542, v543, v544, v545, v546, v547, v548);
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
      v2412 = xmmword_199123950;
      v2413 = xmmword_199123960;
      v529 = 0x3B73FFFFFFF7;
LABEL_454:
      if (*((_QWORD *)&v2382 + 1))
      {
        *((_QWORD *)&v2382 + 1) |= v529;
        if ((LODWORD(v2383[0]) | v2413) != LODWORD(v2383[0]))
          LODWORD(v2383[0]) |= v2413;
        if ((v2412 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (_QWORD)v2382 != 4)
        {
          if ((_QWORD)v2412 == 4)
          {
            if ((v2382 & 1) != 0)
              WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v528, (uint64_t)v510, v511, v512, v513, v514, v515);
            *(_QWORD *)&v2382 = 4;
          }
          else
          {
            JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)&v2382, (const JSC::DFG::StructureAbstractValue *)&v2412, (uint64_t)v510, v511, v512, v513, v514, v515);
          }
        }
        if (*((_QWORD *)&v2383[0] + 1) != *((_QWORD *)&v2413 + 1))
          *((_QWORD *)&v2383[0] + 1) = 0;
      }
      else
      {
        JSC::DFG::AbstractValue::operator=((uint64_t)&v2382, (uint64_t *)&v2412, (uint64_t)v510, v511, v512, v513, v514, v515);
      }
      goto LABEL_462;
    case 0x78:
    case 0x7A:
      __break(0xC471u);
      JUMPOUT(0x19843BD54);
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
      __break(0xC471u);
      JUMPOUT(0x19843B478);
    case 0x80:
    case 0x81:
      __break(0xC471u);
      JUMPOUT(0x19843BCE0);
    case 0x82:
    case 0x83:
      __break(0xC471u);
      JUMPOUT(0x19843BCC0);
    case 0x84:
      v133 = *v16;
      v134 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v134)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452A0);
      }
      v135 = *(_QWORD *)v12;
      v136 = *(_QWORD *)(*(_QWORD *)(v133 + 8) + 8 * v134);
      if (!v136)
        goto LABEL_2788;
      v137 = *(_DWORD *)(v136 - 8);
      v138 = v137 & v135;
      v139 = (uint64_t *)(v136 + 40 * (v137 & v135));
      v140 = *v139;
      if (*v139 == (v135 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_115;
      v141 = 1;
      while (v140)
      {
        v138 = (v138 + v141) & v137;
        v139 = (uint64_t *)(v136 + 40 * v138);
        v140 = *v139;
        ++v141;
        if (*v139 == (v135 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_115;
      }
      v139 = (uint64_t *)(v136 + 40 * *(unsigned int *)(v136 - 4));
LABEL_115:
      if (v139 == (uint64_t *)(v136 + 40 * *(unsigned int *)(v136 - 4)))
      {
LABEL_2788:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v133, (JSC::DFG::Node *)(v135 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443B40);
      }
      v144 = v139[1];
      v142 = v139 + 1;
      v143 = v144;
      v145 = *(uint64_t **)(v9 + 72);
      if ((v144 & 3) == 1)
      {
        v411 = *v145;
        if ((*v145 & 1) != 0)
        {
          v412 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFFCLL);
          v415 = *v412;
          v413 = v412 + 2;
          v414 = v415;
          if (v415)
          {
            v416 = v411 & 0xFFFFFFFFFFFFFFFCLL;
            v417 = *(unsigned int *)(v411 & 0xFFFFFFFFFFFFFFFCLL);
            if ((_DWORD)v417)
            {
              v418 = 0;
              v419 = *(_QWORD *)(v416 + 8);
              v420 = v416 + 16;
              while (1)
              {
                v421 = *(_QWORD *)&v413[2 * v418];
                if (v419 != v421)
                  break;
LABEL_379:
                if (++v418 == v414)
                  goto LABEL_117;
              }
              v422 = 0;
              while (v417 - 1 != v422)
              {
                v423 = *(_QWORD *)(v420 + 8 * v422++);
                if (v423 == v421)
                {
                  if (v422 >= v417)
                    break;
                  goto LABEL_379;
                }
              }
            }
          }
        }
      }
LABEL_117:
      v146 = (v135 >> 50) & 0x3F;
      if ((v146 - 8) >= 2)
      {
        if ((_DWORD)v146 != 10)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0xF92, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x19843F84CLL);
        }
        v147 = *(_QWORD *)(v10 + 8);
        v148 = 0x20000000000;
      }
      else
      {
        v147 = *(_QWORD *)(v10 + 8);
        v148 = 0;
      }
LABEL_119:
      if (JSC::DFG::AbstractValue::filter((uint64_t)v142, v147, v145, v148, v22, v23, v24, v25))
        goto LABEL_1410;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x85:
      v142 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v148 = v142[1] & 0x40000000000;
      v145 = *(uint64_t **)(v9 + 72);
      v147 = *(_QWORD *)(v10 + 8);
      goto LABEL_119;
    case 0x86:
      v324 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v324)
        v325 = (v324 & 0xFFFE000000000002) == 0;
      else
        v325 = 0;
      if (!v325 || *(_BYTE *)(v324 + 5) != 26)
        goto LABEL_301;
      v1783 = *(_QWORD *)(v324 + 24);
      if ((v1783 & 1) != 0)
        v1783 = *(_QWORD *)((v1783 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v1784 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1783, v318, v319, v320, v321, v322, v323);
      v2387 = *v1784;
      v2388 = *((_QWORD *)v1784 + 2);
      v334 = &v2387;
      goto LABEL_2546;
    case 0x87:
      if ((*JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFFFFDLL) == 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v917 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v923 = *v917;
      if (*v917 == 4 || (*v917 & 2) != 0)
        goto LABEL_2761;
      v925 = v923 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v923 & 1) != 0)
      {
        if (*(_DWORD *)v925 == 1)
          v925 = *(_QWORD *)(v925 + 8);
        else
LABEL_2761:
          v925 = 0;
      }
      v926 = *(uint64_t **)(v9 + 72);
      v927 = v926[1];
      if (v927 == v925)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransition(v10, *v926, v927, v918, v919, v920, v921, v922);
      v928 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v929 = *(_QWORD *)(v10 + 8);
      v2414[0] = *(WTF **)(*(_QWORD *)(v9 + 72) + 8);
      JSC::DFG::AbstractValue::changeStructure((uint64_t)v928, v929, (uint64_t *)v2414, v930, v931, v932, v933, v934);
      goto LABEL_1924;
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
      v125 = *v16;
      v126 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v126)
      {
        __break(0xC471u);
        JUMPOUT(0x198445298);
      }
      v127 = *(_QWORD *)(*(_QWORD *)(v125 + 8) + 8 * v126);
      if (!v127)
        goto LABEL_2766;
      v128 = *(_DWORD *)(v127 - 8);
      v129 = v128 & v9;
      v47 = (uint64_t *)(v127 + 40 * (v128 & v9));
      v130 = *v47;
      if (*v47 == v9)
        goto LABEL_105;
      v131 = 1;
      while (v130)
      {
        v129 = (v129 + v131) & v128;
        v47 = (uint64_t *)(v127 + 40 * v129);
        v130 = *v47;
        ++v131;
        if (*v47 == v9)
          goto LABEL_105;
      }
      v47 = (uint64_t *)(v127 + 40 * *(unsigned int *)(v127 - 4));
LABEL_105:
      if (v47 == (uint64_t *)(v127 + 40 * *(unsigned int *)(v127 - 4)))
      {
LABEL_2766:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v125, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443A10);
      }
      goto LABEL_106;
    case 0x8C:
    case 0x8D:
      v424 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v429 = *(unsigned __int16 *)(v9 + 18);
      if (v429 == 141)
        v430 = v424[1] & 0x40000000000;
      else
        v430 = 0;
      if (v429 == 146)
        v431 = *(_DWORD *)(v9 + 80);
      else
        v431 = *(_DWORD *)(v9 + 72);
      LODWORD(v2414[0]) = v431;
      if ((JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)v2414, *(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const JSC::DFG::AbstractValue *)v424, v425, v426, v427, v428) & 1) == 0)
      {
        v437 = v2725[0];
        v438 = *((unsigned __int16 *)v2725[0] + 9);
        if (v438 == 146)
          v439 = *((_DWORD *)v2725[0] + 20);
        else
          v439 = *((_DWORD *)v2725[0] + 18);
        v440 = v439 - 5;
        v441 = 805306368;
        switch(v440)
        {
          case 0:
            goto LABEL_2245;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            goto LABEL_2246;
          case 7:
            v441 = 0x8000;
            goto LABEL_2245;
          case 8:
            v441 = 0x10000;
            goto LABEL_2245;
          case 9:
            v441 = 16;
            goto LABEL_2245;
          case 10:
            v441 = 32;
            goto LABEL_2245;
          case 11:
            v441 = 64;
            goto LABEL_2245;
          case 12:
            v441 = 128;
            goto LABEL_2245;
          case 13:
            v441 = 256;
            goto LABEL_2245;
          case 14:
            v441 = 512;
            goto LABEL_2245;
          case 15:
            v441 = 1024;
            goto LABEL_2245;
          case 16:
            v441 = 2048;
            goto LABEL_2245;
          case 17:
            v441 = 4096;
            goto LABEL_2245;
          case 18:
            v441 = 0x2000;
            goto LABEL_2245;
          case 19:
            v441 = 0x4000;
            goto LABEL_2245;
          case 20:
            v441 = 32752;
LABEL_2245:
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filter<JSC::DFG::Edge>(v10, *((_QWORD *)v2725[0] + 3), v441 | v430, v432, v433, v434, v435, v436);
            v437 = v2725[0];
            v438 = *((unsigned __int16 *)v2725[0] + 9);
LABEL_2246:
            v2156 = *((_QWORD *)v437 + 3);
            if (v438 == 146)
              v2157 = *((_DWORD *)v437 + 20);
            else
              v2157 = *((_DWORD *)v437 + 18);
            LODWORD(v2414[0]) = v2157;
            v2158 = (void *)JSC::DFG::ArrayMode::arrayModesThatPassFiltering((JSC::DFG::ArrayMode *)v2414);
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filterArrayModes<JSC::DFG::Edge>(v10, v2156, v2158, v430);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198441A80);
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x91:
      LODWORD(v2414[0]) = *(_DWORD *)(v9 + 72);
      v935 = *(JSC::DFG::Graph **)(v10 + 8);
      v936 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      if ((JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)v2414, v935, (JSC::DFG::Node *)v9, (const JSC::DFG::AbstractValue *)v936, v937, v938, v939, v940) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19843CA94);
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x92:
      v1020 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v2414[0] = *(WTF **)(v9 + 72);
      v1021 = (unint64_t)v2414[0];
      JSC::DFG::StructureAbstractValue::isSubsetOf(v1020, (uint64_t *)v2414);
      if ((v1021 & 1) != 0)
        WTF::fastFree(v1021 & 0xFFFFFFFFFFFFFFFCLL, v1022, v1023, v1024, v1025, v1026, v1027, v1028);
      __break(0xC471u);
      JUMPOUT(0x19843CDB0);
    case 0x93:
      v229 = *(_QWORD *)(v10 + 24);
      v230 = *(unsigned int *)(*(_QWORD *)(v229 + 40) + 8);
      if (*(_DWORD *)(v229 + 20) <= v230)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452D8);
      }
      v231 = *(_QWORD *)v12;
      v232 = *(_QWORD *)(*(_QWORD *)(v229 + 8) + 8 * v230);
      if (!v232)
        goto LABEL_2831;
      v233 = *(_DWORD *)(v232 - 8);
      v234 = v233 & v231;
      v235 = (uint64_t *)(v232 + 40 * (v233 & v231));
      v236 = *v235;
      if (*v235 == (v231 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_207;
      v237 = 1;
      while (v236)
      {
        v234 = (v234 + v237) & v233;
        v235 = (uint64_t *)(v232 + 40 * v234);
        v236 = *v235;
        ++v237;
        if (*v235 == (v231 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_207;
      }
      v235 = (uint64_t *)(v232 + 40 * *(unsigned int *)(v232 - 4));
LABEL_207:
      if (v235 == (uint64_t *)(v232 + 40 * *(unsigned int *)(v232 - 4)))
      {
LABEL_2831:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v229, (JSC::DFG::Node *)(v231 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443F1CLL);
      }
      JSC::DFG::Graph::tryGetFoldableView(*(_QWORD *)(v10 + 8), v235[4], *(unsigned int *)(v9 + 72), v21, v22, v23, v24, v25);
      v238 = *v16;
      v239 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v239)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452E0);
      }
      v240 = *(_QWORD *)(*(_QWORD *)(v238 + 8) + 8 * v239);
      if (!v240)
        goto LABEL_215;
      v241 = *(_DWORD *)(v240 - 8);
      v242 = v241 & v9;
      v47 = (uint64_t *)(v240 + 40 * (v241 & v9));
      v243 = *v47;
      if (*v47 != v9)
      {
        v244 = 1;
        while (v243)
        {
          v242 = (v242 + v244) & v241;
          v47 = (uint64_t *)(v240 + 40 * v242);
          v243 = *v47;
          ++v244;
          if (*v47 == v9)
            goto LABEL_214;
        }
        v47 = (uint64_t *)(v240 + 40 * *(unsigned int *)(v240 - 4));
      }
LABEL_214:
      if (v47 == (uint64_t *)(v240 + 40 * *(unsigned int *)(v240 - 4)))
      {
LABEL_215:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v238, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x19843A0A4);
      }
LABEL_106:
      v47[2] = 0;
      *((_DWORD *)v47 + 6) = 0;
      v132 = v47[1];
      if ((v132 & 1) != 0)
        WTF::fastFree(v132 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
      v47[1] = 0;
      goto LABEL_37;
    case 0x94:
      v295 = *v16;
      v296 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v296)
      {
        __break(0xC471u);
        JUMPOUT(0x198445394);
      }
      v297 = *(_QWORD *)v12;
      v298 = *(_QWORD *)(*(_QWORD *)(v295 + 8) + 8 * v296);
      if (!v298)
        goto LABEL_2850;
      v299 = v297 & 0xFF00FFFFFFFFFFFFLL;
      v300 = *(_DWORD *)(v298 - 8);
      v301 = v300 & v297;
      v302 = (uint64_t *)(v298 + 40 * (v300 & v297));
      v303 = *v302;
      v304 = v302;
      if (*v302 == (v297 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_278;
      v305 = 1;
      v20 = *v302;
      v306 = v300 & v297;
      while (v20)
      {
        v306 = (v306 + v305) & v300;
        v304 = (uint64_t *)(v298 + 40 * v306);
        v20 = *v304;
        ++v305;
        if (*v304 == v299)
          goto LABEL_278;
      }
      v304 = (uint64_t *)(v298 + 40 * *(unsigned int *)(v298 - 4));
LABEL_278:
      v307 = (uint64_t *)(v298 + 40 * *(unsigned int *)(v298 - 4));
      if (v304 == v307)
      {
LABEL_2850:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v295, (JSC::DFG::Node *)(v297 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x19844418CLL);
      }
      v308 = v304[4];
      if (v308)
        v309 = (v308 & 0xFFFE000000000002) == 0;
      else
        v309 = 0;
      if (v309 && *(_BYTE *)(v308 + 5) == 2 && (*(_BYTE *)(v308 + 8) & 1) == 0)
      {
        v1806 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v308, v20, v21, v22, v23, v24, v25);
        v2401 = *v1806;
        v2402 = *((_QWORD *)v1806 + 2);
        v334 = &v2401;
        goto LABEL_2546;
      }
      if (v303 != v299)
      {
        v310 = 1;
        while (v303)
        {
          v301 = (v301 + v310) & v300;
          v302 = (uint64_t *)(v298 + 40 * v301);
          v303 = *v302;
          ++v310;
          if (*v302 == v299)
            goto LABEL_287;
        }
LABEL_2851:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v295, (JSC::DFG::Node *)(v297 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x1984441D8);
      }
LABEL_287:
      if (v302 == v307)
        goto LABEL_2851;
      if ((v302[2] & 0xFFFFFFFFEFFFFFFFLL) == 0)
        goto LABEL_1283;
      v311 = v300 & v9;
      v312 = (uint64_t *)(v298 + 40 * (v300 & v9));
      v313 = *v312;
      if (*v312 != v9)
      {
        v314 = 1;
        while (v313)
        {
          v311 = (v311 + v314) & v300;
          v312 = (uint64_t *)(v298 + 40 * v311);
          v313 = *v312;
          ++v314;
          if (*v312 == v9)
            goto LABEL_293;
        }
LABEL_2854:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v295, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x19844422CLL);
      }
LABEL_293:
      if (v312 == v307)
        goto LABEL_2854;
      v315 = *(JSC::DFG::Graph **)v295;
      v316 = v312 + 1;
LABEL_295:
      v317 = 805306368;
      goto LABEL_296;
    case 0x95:
    case 0x116:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x120:
    case 0x122:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x163:
    case 0x17C:
      v362 = *v16;
      v363 = (JSC::DFG::Node *)v9;
      goto LABEL_336;
    case 0x96:
      v1714 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1714)
        v1715 = (v1714 & 0xFFFE000000000002) == 0;
      else
        v1715 = 0;
      if (!v1715)
        goto LABEL_626;
      if (*(_BYTE *)(v1714 + 5) != 5)
        goto LABEL_626;
      v1716 = *(_DWORD **)(v1714 + 8);
      if (&JSC::NullGetterFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*v1716 & 0xFFFFFFFE) + 0x4C)))
        goto LABEL_626;
      v1717 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), (unint64_t)v1716, v1708, v1709, v1710, v1711, v1712, v1713);
      v2429 = *v1717;
      v2430 = *((_QWORD *)v1717 + 2);
      v334 = &v2429;
      goto LABEL_2546;
    case 0x97:
      v1680 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1680)
        v1681 = (v1680 & 0xFFFE000000000002) == 0;
      else
        v1681 = 0;
      if (!v1681 || *(_BYTE *)(v1680 + 5) != 5)
        goto LABEL_626;
      v1682 = *(_QWORD *)(v1680 + 16);
      if (v1682 && *(_BYTE *)(v1682 + 5) == 28)
        goto LABEL_626;
      v1684 = *(_QWORD *)(v10 + 8);
      __dmb(0xBu);
      v1685 = JSC::DFG::Graph::freeze(v1684, v1682, v1674, v1675, v1676, v1677, v1678, v1679);
      v2427 = *v1685;
      v2428 = *((_QWORD *)v1685 + 2);
      v334 = &v2427;
      goto LABEL_2546;
    case 0x98:
      v196 = *(_QWORD *)(v10 + 24);
      v197 = *(_QWORD *)(v196 + 40);
      v198 = *(unsigned int *)(v197 + 8);
      if (*(_DWORD *)(v196 + 20) <= v198)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452C8);
      }
      v199 = *(_QWORD *)(v9 + 32);
      v200 = *(_QWORD *)(*(_QWORD *)(v196 + 8) + 8 * v198);
      if (!v200)
        goto LABEL_2824;
      v201 = *(_DWORD *)(v200 - 8);
      v202 = v201 & v199;
      v203 = (_QWORD *)(v200 + 40 * (v201 & v199));
      v204 = *v203;
      if (*v203 == (v199 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_180;
      v205 = 1;
      while (v204)
      {
        v202 = (v202 + v205) & v201;
        v203 = (_QWORD *)(v200 + 40 * v202);
        v204 = *v203;
        ++v205;
        if (*v203 == (v199 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_180;
      }
      v203 = (_QWORD *)(v200 + 40 * *(unsigned int *)(v200 - 4));
LABEL_180:
      if (v203 == (_QWORD *)(v200 + 40 * *(unsigned int *)(v200 - 4)))
      {
LABEL_2824:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v196, (JSC::DFG::Node *)(v199 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443E4CLL);
      }
      JSC::DFG::Graph::inferredValueForProperty(*(_QWORD **)(v10 + 8), v203 + 1, **(unsigned int **)(v9 + 72), *(unsigned __int8 *)(v197 + 13), v22, v23, v24, v25, v2414);
      v213 = *v16;
      v214 = *(_QWORD *)(*v16 + 40);
      if (!v2414[1])
        *(_BYTE *)(v214 + 17) = 0;
      v215 = *(unsigned int *)(v214 + 8);
      if (*(_DWORD *)(v213 + 20) <= v215)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452D0);
      }
      v216 = *(_QWORD *)(*(_QWORD *)(v213 + 8) + 8 * v215);
      if (!v216)
        goto LABEL_2825;
      v217 = *(_DWORD *)(v216 - 8);
      v218 = v217 & (uint64_t)v2725[0];
      v219 = v216 + 40 * (v217 & (uint64_t)v2725[0]);
      v220 = *(JSC::DFG::Node **)v219;
      if (*(JSC::DFG::Node **)v219 != v2725[0])
      {
        v221 = 1;
        while (v220)
        {
          v218 = (v218 + v221) & v217;
          v219 = v216 + 40 * v218;
          v220 = *(JSC::DFG::Node **)v219;
          ++v221;
          if (*(JSC::DFG::Node **)v219 == v2725[0])
            goto LABEL_189;
        }
        v219 = v216 + 40 * *(unsigned int *)(v216 - 4);
      }
LABEL_189:
      if (v219 == v216 + 40 * *(unsigned int *)(v216 - 4))
      {
LABEL_2825:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v213, (JSC::DFG::Node *)((unint64_t)v2725[0] & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443E94);
      }
      v223 = (_BYTE *)(v219 + 8);
      v222 = *(_QWORD *)(v219 + 8);
      if ((WTF **)(v219 + 8) != v2414)
      {
        if ((v222 & 1) != 0)
          WTF::fastFree(v222 & 0xFFFFFFFFFFFFFFFCLL, v206, v207, v208, v209, v210, v211, v212);
        if (((uint64_t)v2414[0] & 1) == 0 || v2414[0] == (WTF *)4)
        {
          v222 = (unint64_t)v2414[0] | 2;
          if ((*v223 & 2) == 0)
            v222 = (unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFDLL;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(v219 + 8), v2414);
          v222 = *(_QWORD *)v223;
        }
      }
      v224 = (unint64_t)v2414[0];
      v225 = v222 & 0xFFFFFFFFFFFFFFFDLL;
      v226 = v222 | 2;
      if (((uint64_t)v2414[0] & 2) == 0)
        v226 = v225;
      *(_QWORD *)(v219 + 8) = v226;
      v227 = *(_OWORD *)&v2414[1];
      *(WTF **)(v219 + 32) = v2414[3];
      *(_OWORD *)(v219 + 16) = v227;
      if ((v224 & 1) == 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v228 = v224 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_200;
    case 0x99:
      v984 = *(unsigned int **)(v9 + 72);
      v985 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL);
      v991 = JSC::DFG::Graph::tryGetConstantProperty(*(JSC::DFG::Graph **)(v10 + 8), (const JSC::DFG::AbstractValue *)v985, *v984, v986, v987, v988, v989, v990);
      if (v991 && (v991 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v991 + 5) == 5)
      {
        v998 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v991, v992, v993, v994, v995, v996, v997);
        v2391 = *v998;
        v2392 = *((_QWORD *)v998 + 2);
        v334 = &v2391;
        goto LABEL_2546;
      }
      v674 = 41528;
      goto LABEL_621;
    case 0x9A:
      v565 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      *(_QWORD *)&v2412 = 0;
      memset(v2414, 0, 32);
      v566 = *(_QWORD *)(v9 + 72);
      v567 = *(unsigned int *)(v566 + 20);
      if ((_DWORD)v567)
      {
        v568 = (const JSC::DFG::AbstractValue *)v565;
        v569 = *(_QWORD *)(v566 + 8);
        v570 = 32 * v567;
        do
        {
          JSC::DFG::RegisteredStructureSet::RegisteredStructureSet(&v2390, (uint64_t *)v569);
          JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v2390, v568, v571, v572, v573, v574, v575, v576);
          v584 = v2390;
          if ((v2390 & 0xFFFFFFFFFFFFFFFDLL) != 0)
          {
            if ((v2390 & 1) != 0)
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)&v2412, &v2390);
            }
            else
            {
              v585 = v2390 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              {
                if ((v2412 & 1) != 0)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v2412, v2390 & 0xFFFFFFFFFFFFFFFCLL);
                }
                else if ((v2412 & 0xFFFFFFFFFFFFFFFCLL) != v585)
                {
                  if ((v2412 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  {
                    v587 = WTF::fastMalloc((WTF *)0x28);
                    *(_QWORD *)v587 = 0x400000002;
                    v588 = v2412;
                    *(_QWORD *)(v587 + 8) = v2412 & 0xFFFFFFFFFFFFFFFCLL;
                    *(_QWORD *)(v587 + 16) = v585;
                    v586 = v588 & 2 | (unint64_t)v587 | 1;
                  }
                  else
                  {
                    v586 = v2412 & 2 | v585;
                  }
                  *(_QWORD *)&v2412 = v586;
                }
              }
            }
            if (*(_DWORD *)(v569 + 24) == 1)
            {
              v2382 = 0u;
              v2383[0] = 0u;
              JSC::DFG::AbstractValue::set((uint64_t)&v2382, *(_QWORD **)(v10 + 8), *(unint64_t **)(v569 + 8), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 40) + 13), v580, v581, v582, v583);
              if (*((_QWORD *)&v2382 + 1))
              {
                if (v2414[1])
                {
                  v2414[1] = (WTF *)((uint64_t)v2414[1] | *((_QWORD *)&v2382 + 1));
                  if ((LODWORD(v2414[2]) | LODWORD(v2383[0])) != LODWORD(v2414[2]))
                    LODWORD(v2414[2]) |= LODWORD(v2383[0]);
                  if ((v2382 & 0xFFFFFFFFFFFFFFFDLL) != 0 && v2414[0] != (WTF *)4)
                  {
                    if ((_QWORD)v2382 == 4)
                    {
                      if (((uint64_t)v2414[0] & 1) != 0)
                        WTF::fastFree((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL, v577, v578, v579, v580, v581, v582, v583);
                      v2414[0] = (WTF *)4;
                    }
                    else
                    {
                      JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)v2414, (const JSC::DFG::StructureAbstractValue *)&v2382, v578, v579, v580, v581, v582, v583);
                    }
                  }
                  if (v2414[3] != *((WTF **)&v2383[0] + 1))
                    v2414[3] = 0;
                }
                else
                {
                  JSC::DFG::AbstractValue::operator=((uint64_t)v2414, (uint64_t *)&v2382, v578, v579, v580, v581, v582, v583);
                }
              }
              if ((v2382 & 1) != 0)
                WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v577, v578, v579, v580, v581, v582, v583);
            }
            else
            {
              v2414[1] = (WTF *)0x3B73FFFFFFF7;
              LODWORD(v2414[2]) = -21020677;
              if (((uint64_t)v2414[0] & 1) != 0)
                WTF::fastFree((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL, v577, v578, v579, v580, v581, v582, v583);
              v2414[0] = (WTF *)4;
              v2414[3] = 0;
            }
            v584 = v2390;
          }
          if ((v584 & 1) != 0)
            WTF::fastFree(v584 & 0xFFFFFFFFFFFFFFFCLL, v577, v578, v579, v580, v581, v582, v583);
          v569 += 32;
          v570 -= 32;
        }
        while (v570);
        v9 = (uint64_t)v2725[0];
      }
      v618 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v624 = JSC::DFG::AbstractValue::changeStructure((uint64_t)v618, *(_QWORD *)(v10 + 8), (uint64_t *)&v2412, v619, v620, v621, v622, v623);
      v625 = *(_QWORD *)(v10 + 24);
      if (v624 == 1)
        *(_BYTE *)(*(_QWORD *)(v625 + 40) + 17) = 0;
      v626 = JSC::DFG::AtTailAbstractState::forNode(v625, (uint64_t)v2725[0]);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v626, *(JSC::DFG::Graph **)v625, (const JSC::DFG::AbstractValue *)v2414, v627, v628, v629, v630, v631);
      if (((uint64_t)v2414[0] & 1) == 0)
        goto LABEL_569;
      v1620 = (WTF *)((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_1453;
    case 0x9C:
      v2390 = 0;
      v2414[0] = (WTF *)&v2414[2];
      v2414[1] = (WTF *)3;
      v1724 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1725 = JSC::DFG::AtTailAbstractState::forNode(*v16, *((_QWORD *)v2725[0] + 4) & 0xFF00FFFFFFFFFFFFLL);
      v2382 = 0u;
      v2383[0] = 0u;
      JSC::DFG::MultiPutByOffsetData::writesStructures(*((JSC::DFG::MultiPutByOffsetData **)v2725[0] + 9));
      v1732 = v2725[0];
      v1733 = *(_DWORD *)(*((_QWORD *)v2725[0] + 9) + 20);
      if (!v1733)
        goto LABEL_1792;
      v1734 = v1733 - 1;
      v1735 = (unint64_t)(v1733 - 1) << 6;
      do
      {
        v1736 = *((_QWORD *)v2725[0] + 9);
        if (*(_DWORD *)(v1736 + 20) <= v1734)
        {
          __break(0xC471u);
          JUMPOUT(0x1984453E0);
        }
        v1737 = *(_QWORD *)(v1736 + 8);
        v1738 = (JSC::PutByVariant *)(v1737 + v1735);
        v1739 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(v10 + 8), (unint64_t *)(v1737 + v1735 + 8), v1726, v1727, v1728, v1729, v1730, v1731);
        JSC::DFG::RegisteredStructureSet::RegisteredStructureSet(&v2389, v1739);
        JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v2389, (const JSC::DFG::AbstractValue *)v1724, v1740, v1741, v1742, v1743, v1744, v1745);
        if ((v2389 & 0xFFFFFFFFFFFFFFFDLL) != 0)
        {
          v1747 = v1725[1];
          if (v1747)
          {
            if (*((_QWORD *)&v2382 + 1))
            {
              *((_QWORD *)&v2382 + 1) |= v1747;
              if ((LODWORD(v2383[0]) | *((_DWORD *)v1725 + 4)) != LODWORD(v2383[0]))
                LODWORD(v2383[0]) |= *((_DWORD *)v1725 + 4);
              if ((*v1725 & 0xFFFFFFFFFFFFFFFDLL) != 0 && (_QWORD)v2382 != 4)
              {
                if (*v1725 == 4)
                {
                  if ((v2382 & 1) != 0)
                    WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v1746, (uint64_t)v1726, v1727, v1728, v1729, v1730, v1731);
                  *(_QWORD *)&v2382 = 4;
                }
                else
                {
                  JSC::DFG::StructureAbstractValue::mergeSlow((JSC::DFG::StructureAbstractValue *)&v2382, (const JSC::DFG::StructureAbstractValue *)v1725, (uint64_t)v1726, v1727, v1728, v1729, v1730, v1731);
                }
              }
              if (*((_QWORD *)&v2383[0] + 1) != v1725[3])
                *((_QWORD *)&v2383[0] + 1) = 0;
            }
            else
            {
              JSC::DFG::AbstractValue::operator=((uint64_t)&v2382, v1725, (uint64_t)v1726, v1727, v1728, v1729, v1730, v1731);
            }
          }
          if (*(_DWORD *)v1738 == 2)
          {
            v1748 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), *(_QWORD *)(v1737 + v1735 + 16), (int *)&v2412, v1727, v1728, v1729, v1730, v1731);
            v1749 = v1748;
            v1750 = v2389 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v2389 & 1) != 0)
            {
              if (*(_DWORD *)v1750 == 1)
                v1750 = *(_QWORD *)(v1750 + 8);
              else
                v1750 = 0;
            }
            if (v1750 != v1748)
            {
              v1751 = *(_QWORD *)(v10 + 8);
              v1752 = JSC::PutByVariant::oldStructureForTransition(v1738);
              *(_QWORD *)&v2412 = JSC::DFG::Graph::registerStructure(v1751, v1752, (int *)&v2412, v1753, v1754, v1755, v1756, v1757);
              *((_QWORD *)&v2412 + 1) = v1749;
              if (HIDWORD(v2414[1]) == LODWORD(v2414[1]))
              {
                WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Transition>((uint64_t)v2414, (unint64_t)&v2412, (uint64_t)v1726, v1727, v1728, v1729, v1730, v1731);
              }
              else
              {
                *((_OWORD *)v2414[0] + HIDWORD(v2414[1])) = v2412;
                ++HIDWORD(v2414[1]);
              }
            }
            if ((v2390 & 1) == 0)
            {
              if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) == v1749)
                goto LABEL_1572;
              if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) == 0)
              {
                v1759 = v2390 & 2 | v1749;
                goto LABEL_1588;
              }
              v1760 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v1760 = 0x400000002;
              v1761 = v2390;
              *(_QWORD *)(v1760 + 8) = v2390 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v1760 + 16) = v1749;
              goto LABEL_1587;
            }
            v1762 = v1749;
LABEL_1591:
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v2390, v1762);
            goto LABEL_1572;
          }
          if ((v2389 & 1) == 0)
          {
            v1758 = v2389 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v2389 & 0xFFFFFFFFFFFFFFFCLL) == 0)
              goto LABEL_1572;
            if ((v2390 & 1) == 0)
            {
              if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) == v1758)
                goto LABEL_1572;
              if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) == 0)
              {
                v1759 = v2390 & 2 | v1758;
LABEL_1588:
                v2390 = v1759;
                goto LABEL_1572;
              }
              v1760 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v1760 = 0x400000002;
              v1761 = v2390;
              *(_QWORD *)(v1760 + 8) = v2390 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v1760 + 16) = v1758;
LABEL_1587:
              v1759 = v1761 & 2 | (unint64_t)v1760 | 1;
              goto LABEL_1588;
            }
            v1762 = v2389 & 0xFFFFFFFFFFFFFFFCLL;
            goto LABEL_1591;
          }
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v2390, &v2389);
        }
LABEL_1572:
        if ((v2389 & 1) != 0)
          WTF::fastFree(v2389 & 0xFFFFFFFFFFFFFFFCLL, v1746, (uint64_t)v1726, v1727, v1728, v1729, v1730, v1731);
        v1735 -= 64;
        --v1734;
      }
      while (v1734 != -1);
      v1732 = v2725[0];
LABEL_1792:
      v1849 = (JSC::DFG::Graph **)*v16;
      v1850 = JSC::DFG::AtTailAbstractState::forNode(*v16, *((_QWORD *)v1732 + 4) & 0xFF00FFFFFFFFFFFFLL);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1850, *v1849, (const JSC::DFG::AbstractValue *)&v2382, v1851, v1852, v1853, v1854, v1855);
      if (v1725[1] && !*((_QWORD *)&v2382 + 1))
        *(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransitions(v10, v2414, v1856, v1857, v1858, v1859, v1860, v1861);
      v1862 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *((_QWORD *)v2725[0] + 3) & 0xFF00FFFFFFFFFFFFLL);
      if (JSC::DFG::AbstractValue::changeStructure((uint64_t)v1862, *(_QWORD *)(v10 + 8), &v2390, v1863, v1864, v1865, v1866, v1867) == 1)*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
      if ((v2382 & 1) != 0)
        WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v206, v207, v208, v209, v210, v211, v212);
      v1868 = v2414[0];
      if (&v2414[2] != (WTF **)v2414[0] && v2414[0])
      {
        v2414[0] = 0;
        LODWORD(v2414[1]) = 0;
        WTF::fastFree((unint64_t)v1868, v206, v207, v208, v209, v210, v211, v212);
      }
      v632 = v2390;
      if ((v2390 & 1) != 0)
      {
LABEL_570:
        v228 = v632 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_200:
        WTF::fastFree(v228, v206, v207, v208, v209, v210, v211, v212);
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x9D:
      *(_QWORD *)&v2412 = 0;
      v2414[0] = (WTF *)&v2414[2];
      v2414[1] = (WTF *)3;
      v1579 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)v2725[0] + 9));
      v1586 = *(_DWORD *)(*((_QWORD *)v2725[0] + 9) + 20);
      if (!v1586)
        goto LABEL_1446;
      v1587 = v1586 - 1;
      v1588 = 40 * (v1586 - 1);
      while (1)
      {
        v1589 = *((_QWORD *)v2725[0] + 9);
        if (*(_DWORD *)(v1589 + 20) <= v1587)
        {
          __break(0xC471u);
          JUMPOUT(0x1984453D8);
        }
        v1590 = *(_QWORD *)(v1589 + 8);
        v1591 = *(_QWORD *)(v10 + 8);
        v1592 = v1590 + v1588;
        *(_QWORD *)&v2382 = *(_QWORD *)(v1590 + v1588 + 8);
        v1593 = JSC::DFG::Graph::addStructureSet(v1591, (unint64_t *)&v2382, v1580, v1581, v1582, v1583, v1584, v1585);
        JSC::DFG::RegisteredStructureSet::RegisteredStructureSet(&v2390, v1593);
        if ((v2382 & 1) != 0)
          WTF::fastFree(v2382 & 0xFFFFFFFFFFFFFFFCLL, v1594, v1595, v1596, v1597, v1598, v1599, v1600);
        JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v2390, (const JSC::DFG::AbstractValue *)v1579, v1595, v1596, v1597, v1598, v1599, v1600);
        if ((v2390 & 0xFFFFFFFFFFFFFFFDLL) == 0)
          goto LABEL_1432;
        v1601 = *(void **)(v1590 + v1588 + 16);
        if (v1601)
          break;
        if ((v2390 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)&v2412, &v2390);
        }
        else
        {
          v1602 = v2390 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v2390 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            goto LABEL_1430;
        }
LABEL_1432:
        if ((v2390 & 1) != 0)
          WTF::fastFree(v2390 & 0xFFFFFFFFFFFFFFFCLL, v1601, (uint64_t)v1580, v1581, v1582, v1583, v1584, v1585);
        v1588 -= 40;
        if (--v1587 == -1)
        {
LABEL_1446:
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransitions(v10, v2414, (uint64_t)v1580, v1581, v1582, v1583, v1584, v1585);
          v1611 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *((_QWORD *)v2725[0] + 3) & 0xFF00FFFFFFFFFFFFLL);
          v1617 = JSC::DFG::AbstractValue::changeStructure((uint64_t)v1611, *(_QWORD *)(v10 + 8), (uint64_t *)&v2412, v1612, v1613, v1614, v1615, v1616);
          v1618 = *(_QWORD *)(v10 + 24);
          if (v1617 == 1)
            *(_BYTE *)(*(_QWORD *)(v1618 + 40) + 17) = 0;
          v1619 = JSC::DFG::AtTailAbstractState::forNode(v1618, (uint64_t)v2725[0]);
          if ((*v1619 & 1) != 0)
            WTF::fastFree(*v1619 & 0xFFFFFFFFFFFFFFFCLL, v206, v207, v208, v209, v210, v211, v212);
          *((_DWORD *)v1619 + 4) = 0;
          *(_OWORD *)v1619 = xmmword_199123930;
          v1619[3] = 0;
          v1620 = v2414[0];
          if (&v2414[2] != (WTF **)v2414[0] && v2414[0])
          {
            v2414[0] = 0;
            LODWORD(v2414[1]) = 0;
LABEL_1453:
            WTF::fastFree((unint64_t)v1620, v206, v207, v208, v209, v210, v211, v212);
          }
LABEL_569:
          v632 = v2412;
          if ((v2412 & 1) != 0)
            goto LABEL_570;
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
      v1602 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), (unint64_t)v1601, (int *)&v2382, v1581, v1582, v1583, v1584, v1585);
      *(_QWORD *)&v2382 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), *(_QWORD *)(v1592 + 8), (int *)&v2382, v1603, v1604, v1605, v1606, v1607);
      *((_QWORD *)&v2382 + 1) = v1602;
      if (HIDWORD(v2414[1]) == LODWORD(v2414[1]))
      {
        WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Transition>((uint64_t)v2414, (unint64_t)&v2382, (uint64_t)v1580, v1581, v1582, v1583, v1584, v1585);
      }
      else
      {
        *((_OWORD *)v2414[0] + HIDWORD(v2414[1])) = v2382;
        ++HIDWORD(v2414[1]);
      }
LABEL_1430:
      if ((v2412 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v2412, v1602);
      }
      else if ((v2412 & 0xFFFFFFFFFFFFFFFCLL) != v1602)
      {
        if ((v2412 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v1609 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v1609 = 0x400000002;
          v1610 = v2412;
          *(_QWORD *)(v1609 + 8) = v2412 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v1609 + 16) = v1602;
          v1608 = v1610 & 2 | (unint64_t)v1609 | 1;
        }
        else
        {
          v1608 = v2412 & 2 | v1602;
        }
        *(_QWORD *)&v2412 = v1608;
      }
      goto LABEL_1432;
    case 0x9E:
    case 0x9F:
      v53 = *(unsigned int *)(v9 + 72);
      LODWORD(v2412) = *(_DWORD *)(v9 + 72);
      v54 = *v16;
      v55 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v55)
      {
        __break(0xC471u);
        JUMPOUT(0x198445140);
      }
      v56 = *(_QWORD *)(v9 + 24);
      v57 = *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * v55);
      if (!v57)
        goto LABEL_2753;
      v58 = *(_DWORD *)(v57 - 8);
      v59 = v58 & v56;
      v60 = (uint64_t *)(v57 + 40 * (v58 & v56));
      v61 = *v60;
      if (*v60 == (v56 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_45;
      v62 = 1;
      while (v61)
      {
        v59 = (v59 + v62) & v58;
        v60 = (uint64_t *)(v57 + 40 * v59);
        v61 = *v60;
        ++v62;
        if (*v60 == (v56 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_45;
      }
      v60 = (uint64_t *)(v57 + 40 * *(unsigned int *)(v57 - 4));
LABEL_45:
      if (v60 == (uint64_t *)(v57 + 40 * *(unsigned int *)(v57 - 4)))
      {
LABEL_2753:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v54, (JSC::DFG::Node *)(v56 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443804);
      }
      v63 = v60[4];
      if (!v63)
        goto LABEL_47;
      FoldableView = (JSC::JSArrayBufferView *)JSC::DFG::Graph::tryGetFoldableView(*(_QWORD *)(v10 + 8), v60[4], v53, v21, v22, v23, v24, v25);
      if (FoldableView)
      {
        v1778 = FoldableView;
        if ((*((_BYTE *)FoldableView + 40) & 6) == 0
          && !(JSC::JSArrayBufferView::length(FoldableView, (uint64_t)v19, v20, v21, v22, v23, v24, v25) >> 31))
        {
          v1779 = JSC::JSArrayBufferView::length(v1778, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
          v1780 = v1779 | 0xFFFE000000000000;
          if ((v1779 & 0x80000000) != 0)
            v1780 = COERCE__INT64((double)v1779) + 0x2000000000000;
          if (HIDWORD(v1779))
            v1781 = COERCE__INT64((double)v1779) + 0x2000000000000;
          else
            v1781 = v1780;
          v2410[0] = v1781;
          v2410[1] = 0;
          v2411 = 0;
          if (v1781)
            v1782 = (v1781 & 0xFFFE000000000002) == 0;
          else
            v1782 = 0;
          if (v1782)
          {
            __break(0xC471u);
            JUMPOUT(0x1984448DCLL);
          }
          v334 = (__int128 *)v2410;
          goto LABEL_2546;
        }
      }
      if ((v63 & 0xFFFE000000000002) != 0)
      {
        v26 = *(unsigned __int16 *)(v9 + 18);
      }
      else
      {
        v26 = *(unsigned __int16 *)(v9 + 18);
        if (*(_BYTE *)(v63 + 5) == 2)
        {
          if (v26 == 264)
            v328 = *(_DWORD *)(v9 + 72);
          else
            LOBYTE(v328) = v26 == 146 ? *(_BYTE *)(v9 + 80) : *(_BYTE *)(v9 + 72);
          if (v328 == 5)
          {
            v329 = *(_QWORD *)(v63 + 8);
            if ((v329 & 1) != 0)
              v330 = (unsigned int *)(v63 + 16);
            else
              v330 = (unsigned int *)(v329 + 4);
            v331 = *v330;
            if ((v331 & 0x80000000) != 0)
              v332 = COERCE__INT64((double)v331) + 0x2000000000000;
            else
              v332 = v331 | 0xFFFE000000000000;
            v2408[0] = v332;
            v2408[1] = 0;
            v2409 = 0;
            if (v332)
              v333 = (v332 & 0xFFFE000000000002) == 0;
            else
              v333 = 0;
            if (v333)
            {
              __break(0xC471u);
              JUMPOUT(0x1984446E8);
            }
            v334 = (__int128 *)v2408;
            goto LABEL_2546;
          }
        }
      }
LABEL_47:
      if (v26 == 158 && v53 != 25)
      {
        v64 = JSC::DFG::toTypedArrayType(v53);
        if (v64)
        {
          if (v64 != 12 && (v53 & 0x40000000) == 0)
          {
            v65 = v60[2];
            if (v65)
            {
              if ((v65 & 0xFFFFDFFFF0000008) == 0)
              {
                v66 = v60[1];
                if (v66 != 4 && (v66 & 2) == 0)
                {
                  LOBYTE(v2390) = (v66 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                  v67 = *(_QWORD *)(v10 + 8);
                  JSC::CodeOrigin::CodeOrigin(&v2407, (const JSC::CodeOrigin *)v9);
                  v81 = JSC::DFG::Graph::globalObjectFor(v67, &v2407, v68, v69, v70, v71, v72, v73);
                  if ((v2407 & 1) != 0 && (v2407 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v2407 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
                  *(_QWORD *)&v2382 = v81;
                  v2414[0] = (WTF *)&v2412;
                  v2414[1] = (WTF *)&v2390;
                  v2414[2] = (WTF *)&v2382;
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#3}>(v60[1], (uint64_t)v2414);
                  if ((_BYTE)v2390)
                    JSC::DFG::Graph::isWatchingArrayBufferDetachWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], v20, v21, v22, v23, v24, v25);
                  v9 = (uint64_t)v2725[0];
                }
              }
            }
          }
        }
      }
      v82 = *v16;
      v83 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v83)
      {
        __break(0xC471u);
        JUMPOUT(0x198445148);
      }
      v84 = *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v83);
      if (!v84)
        goto LABEL_2755;
      v85 = *(_DWORD *)(v84 - 8);
      v86 = v85 & v9;
      v47 = (uint64_t *)(v84 + 40 * (v85 & v9));
      v87 = *v47;
      if (*v47 != v9)
      {
        v88 = 1;
        while (v87)
        {
          v86 = (v86 + v88) & v85;
          v47 = (uint64_t *)(v84 + 40 * v86);
          v87 = *v47;
          ++v88;
          if (*v47 == v9)
            goto LABEL_66;
        }
        v47 = (uint64_t *)(v84 + 40 * *(unsigned int *)(v84 - 4));
      }
LABEL_66:
      if (v47 == (uint64_t *)(v84 + 40 * *(unsigned int *)(v84 - 4)))
      {
LABEL_2755:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v82, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x19844385CLL);
      }
      goto LABEL_67;
    case 0xA0:
      v1030 = *(_QWORD *)(v10 + 8);
      v1031 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (*(_WORD *)(v9 + 18) == 146)
        v1037 = *(_DWORD *)(v9 + 80);
      else
        v1037 = *(_DWORD *)(v9 + 72);
      v1038 = (JSC::JSArrayBufferView *)JSC::DFG::Graph::tryGetFoldableView(v1030, v1031, v1037, v1032, v1033, v1034, v1035, v1036);
      if (!v1038 || (*((_BYTE *)v1038 + 40) & 6) != 0)
        goto LABEL_959;
      v2200 = JSC::JSArrayBufferView::length(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
      v2201 = v2200 | 0xFFFE000000000000;
      if ((v2200 & 0x80000000) != 0)
        v2201 = COERCE__INT64((double)v2200) + 0x2000000000000;
      if (HIDWORD(v2200))
        v2202 = COERCE__INT64((double)v2200) + 0x2000000000000;
      else
        v2202 = v2201;
      v2405[0] = v2202;
      v2405[1] = 0;
      v2406 = 0;
      if (v2202)
        v2203 = (v2202 & 0xFFFE000000000002) == 0;
      else
        v2203 = 0;
      if (v2203)
      {
        __break(0xC471u);
        JUMPOUT(0x198444868);
      }
      v334 = (__int128 *)v2405;
      goto LABEL_2546;
    case 0xA1:
    case 0xBC:
    case 0xD7:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0x113:
    case 0x19E:
      goto LABEL_401;
    case 0xA2:
      v941 = *(_QWORD *)(v10 + 8);
      v942 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v949 = (JSC::JSArrayBufferView *)JSC::DFG::Graph::tryGetFoldableView(v941, v942[3], v943, v944, v945, v946, v947, v948);
      if (!v949)
        goto LABEL_401;
      if ((*((_BYTE *)v949 + 40) & 6) != 0)
        goto LABEL_401;
      v957 = JSC::JSArrayBufferView::byteOffset(v949, v950, v951, v952, v953, v954, v955, v956);
      if (v957 >> 31)
        goto LABEL_401;
      v2399[0] = v957 | 0xFFFE000000000000;
      v2399[1] = 0;
      v2400 = 0;
      v334 = (__int128 *)v2399;
      goto LABEL_2546;
    case 0xA3:
      v964 = *(_QWORD *)(v10 + 8);
      v965 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v972 = (JSC::JSArrayBufferView *)JSC::DFG::Graph::tryGetFoldableView(v964, v965[3], v966, v967, v968, v969, v970, v971);
      if (!v972 || (*((_BYTE *)v972 + 40) & 6) != 0)
        goto LABEL_959;
      v980 = JSC::JSArrayBufferView::byteOffset(v972, v973, v974, v975, v976, v977, v978, v979);
      v981 = v980 | 0xFFFE000000000000;
      if ((v980 & 0x80000000) != 0)
        v981 = COERCE__INT64((double)v980) + 0x2000000000000;
      if (HIDWORD(v980))
        v982 = COERCE__INT64((double)v980) + 0x2000000000000;
      else
        v982 = v981;
      v2397[0] = v982;
      v2397[1] = 0;
      v2398 = 0;
      if (v982)
        v983 = (v982 & 0xFFFE000000000002) == 0;
      else
        v983 = 0;
      if (v983)
      {
        __break(0xC471u);
        JUMPOUT(0x198444848);
      }
      v334 = (__int128 *)v2397;
      goto LABEL_2546;
    case 0xA4:
      v1695 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1695)
        v1696 = (v1695 & 0xFFFE000000000002) == 0;
      else
        v1696 = 0;
      if (!v1696
        || *(_BYTE *)(v1695 + 5) != 74
        || (v2019 = *(_QWORD *)(v1695 + 48)) == 0
        || (v2020 = *(_QWORD *)(v2019 + 144)) == 0)
      {
        v1697 = (JSC::DFG::Graph **)*v16;
        v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v315 = *v1697;
        v317 = 1;
        goto LABEL_296;
      }
      v2021 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2020, v1689, v1690, v1691, v1692, v1693, v1694);
      v2393 = *v2021;
      v2394 = *((_QWORD *)v2021 + 2);
      v334 = &v2393;
      goto LABEL_2546;
    case 0xA5:
      v1280 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1280)
        v1281 = (v1280 & 0xFFFE000000000002) == 0;
      else
        v1281 = 0;
      if (!v1281 || *(_BYTE *)(v1280 + 5) != 26)
        goto LABEL_579;
      v1282 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(v1280 + 16), v1274, v1275, v1276, v1277, v1278, v1279);
      v2425 = *v1282;
      v2426 = *((_QWORD *)v1282 + 2);
      v334 = &v2425;
      goto LABEL_2546;
    case 0xA6:
      v644 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v644)
        v645 = (v644 & 0xFFFE000000000002) == 0;
      else
        v645 = 0;
      if (!v645)
        goto LABEL_579;
      if (*(unsigned __int8 *)(v644 + 5) - 51 > 5)
        goto LABEL_579;
      v1817 = *(_QWORD *)(v644 + 16);
      if (!v1817)
        goto LABEL_579;
      v1818 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1817, v638, v639, v640, v641, v642, v643);
      v2423 = *v1818;
      v2424 = *((_QWORD *)v1818 + 2);
      v334 = &v2423;
      goto LABEL_2546;
    case 0xA7:
      __break(0xC471u);
      JUMPOUT(0x19843CC2CLL);
    case 0xA8:
      __break(0xC471u);
      JUMPOUT(0x19843CB24);
    case 0xA9:
      v1061 = (_DWORD *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1061)
      {
        v1062 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(16 * (*v1061 & 0xFFFFFFFE) + 0x28), v1055, v1056, v1057, v1058, v1059, v1060);
        v2421 = *v1062;
        v2422 = *((_QWORD *)v1062 + 2);
        v334 = &v2421;
        goto LABEL_2546;
      }
      v2123 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      if (*v2123 == 4 || (*v2123 & 2) != 0)
        goto LABEL_579;
      *(_QWORD *)&v2382 = 0;
      LOBYTE(v2412) = 1;
      v2125 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v2414[0] = (WTF *)&v2382;
      v2414[1] = (WTF *)&v2412;
      JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#2}>(*v2125, (uint64_t **)v2414);
      if (!(_QWORD)v2382 || !(_BYTE)v2412)
      {
        v9 = (uint64_t)v2725[0];
LABEL_579:
        v646 = (JSC::DFG::Graph **)*v16;
        v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v315 = *v646;
        v317 = 0x8000000;
        goto LABEL_296;
      }
      v9 = (uint64_t)v2725[0];
      v2132 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2382, v2126, v2127, v2128, v2129, v2130, v2131);
      v2419 = *v2132;
      v2420 = *((_QWORD *)v2132 + 2);
      v334 = &v2419;
      goto LABEL_2546;
    case 0xAA:
      goto LABEL_626;
    case 0xAB:
      v345 = *(_QWORD *)(v10 + 8);
      v346 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      ConstantClosureVar = JSC::DFG::Graph::tryGetConstantClosureVar(v345, (uint64_t)v346, *(_DWORD *)(v9 + 72));
      if (!ConstantClosureVar)
        goto LABEL_334;
      v1785 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), ConstantClosureVar, v348, v349, v350, v351, v352, v353);
      v2417 = *v1785;
      v2418 = *((_QWORD *)v1785 + 2);
      v334 = &v2417;
      goto LABEL_2546;
    case 0xAD:
    case 0xB3:
    case 0x164:
    case 0x166:
    case 0x18B:
    case 0x18D:
    case 0x18E:
    case 0x192:
    case 0x193:
    case 0x19A:
      goto LABEL_2202;
    case 0xB0:
      __break(0xC471u);
      JUMPOUT(0x19843CB04);
    case 0xB1:
      __break(0xC471u);
      JUMPOUT(0x19843EF4CLL);
    case 0xB6:
      v336 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v337 = v336[3];
      v338 = *(unsigned __int16 *)(v9 + 18);
      if (v338 == 355 || v338 == 348)
      {
        v339 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v339 = *(__int128 **)(v9 + 72);
      }
      if (v337 == *(_QWORD *)v339 && (v337 || v336[1] == 0x40000000000))
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      v340 = *(_QWORD *)(v9 + 24);
      v341 = *(unsigned __int16 *)(v9 + 18);
      if (v341 == 355 || v341 == 348)
      {
        v342 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v342 = *(__int128 **)(v9 + 72);
      }
      v2385 = *v342;
      v2386 = *((_QWORD *)v342 + 2);
      v343 = &v2385;
      v344 = v10;
      goto LABEL_332;
    case 0xB7:
    case 0xB8:
      v184 = *v16;
      v185 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v185)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452C0);
      }
      v186 = *(_QWORD *)v12;
      v187 = *(_QWORD *)(*(_QWORD *)(v184 + 8) + 8 * v185);
      if (!v187)
        goto LABEL_2801;
      v188 = *(_DWORD *)(v187 - 8);
      v189 = v188 & v186;
      v190 = (uint64_t *)(v187 + 40 * (v188 & v186));
      v191 = *v190;
      if (*v190 == (v186 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_168;
      v192 = 1;
      while (v191)
      {
        v189 = (v189 + v192) & v188;
        v190 = (uint64_t *)(v187 + 40 * v189);
        v191 = *v190;
        ++v192;
        if (*v190 == (v186 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_168;
      }
      v190 = (uint64_t *)(v187 + 40 * *(unsigned int *)(v187 - 4));
LABEL_168:
      if (v190 == (uint64_t *)(v187 + 40 * *(unsigned int *)(v187 - 4)))
      {
LABEL_2801:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v184, (JSC::DFG::Node *)(v186 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443CE0);
      }
      v193 = v190[2];
      if ((v193 & 0x40000000000) != 0)
      {
        v194 = v193 & 0xFFFFFBFFFFFFFFFFLL;
        if ((v193 & 0xFFFFFBFFFFFFFFFFLL) != v193)
        {
          v195 = (JSC::DFG::AbstractValue *)(v190 + 1);
          if ((v193 & 0x2800FFFFFFF7) != 0)
          {
            if (!JSC::DFG::AbstractValue::filterSlow(v195, 0xFFFFFBFFFFFFFFFFLL, v20, v21, v22, v23, v24, v25))return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          }
          else
          {
            v190[2] = v194;
            if (v194)
              return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
            JSC::DFG::AbstractValue::clear(v195, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
          }
LABEL_1410:
          *(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xB9:
    case 0x170:
    case 0x175:
    case 0x17B:
      goto LABEL_1410;
    case 0xBB:
      v31 = *v16;
      v32 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v32)
      {
        __break(0xC471u);
        JUMPOUT(0x198444FE4);
      }
      v33 = *(_QWORD *)v12;
      v34 = *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v32);
      if (!v34)
        goto LABEL_2714;
      v35 = *(_DWORD *)(v34 - 8);
      v36 = v35 & v33;
      v37 = (uint64_t *)(v34 + 40 * (v35 & v33));
      v38 = *v37;
      if (*v37 == (v33 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_22;
      v39 = 1;
      while (v38)
      {
        v36 = (v36 + v39) & v35;
        v37 = (uint64_t *)(v34 + 40 * v36);
        v38 = *v37;
        ++v39;
        if (*v37 == (v33 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_22;
      }
      v37 = (uint64_t *)(v34 + 40 * *(unsigned int *)(v34 - 4));
LABEL_22:
      v40 = (uint64_t *)(v34 + 40 * *(unsigned int *)(v34 - 4));
      if (v37 == v40)
      {
LABEL_2714:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v31, (JSC::DFG::Node *)(v33 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x1984435CCLL);
      }
      v41 = *(_QWORD *)(v9 + 32);
      v42 = v35 & v41;
      v43 = (uint64_t *)(v34 + 40 * (v35 & v41));
      v44 = *v43;
      if (*v43 != (v41 & 0xFF00FFFFFFFFFFFFLL))
      {
        v45 = 1;
        while (v44)
        {
          v42 = (v42 + v45) & v35;
          v43 = (uint64_t *)(v34 + 40 * v42);
          v44 = *v43;
          ++v45;
          if (*v43 == (v41 & 0xFF00FFFFFFFFFFFFLL))
            goto LABEL_27;
        }
LABEL_2711:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v31, (JSC::DFG::Node *)(v41 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443528);
      }
LABEL_27:
      if (v43 == v40)
        goto LABEL_2711;
      v46 = v35 & v9;
      v47 = (uint64_t *)(v34 + 40 * (v35 & v9));
      v48 = *v47;
      if (*v47 != v9)
      {
        v49 = 1;
        while (v48)
        {
          v46 = (v46 + v49) & v35;
          v47 = (uint64_t *)(v34 + 40 * v46);
          v48 = *v47;
          ++v49;
          if (*v47 == v9)
            goto LABEL_32;
        }
LABEL_2712:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v31, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443570);
      }
LABEL_32:
      if (v47 == v40)
        goto LABEL_2712;
LABEL_33:
      v50 = v47[1];
      if ((v50 & 1) != 0)
        WTF::fastFree(v50 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
      *((_DWORD *)v47 + 6) = 0;
      v51 = xmmword_199123920;
      goto LABEL_36;
    case 0xBD:
      v1078 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v1084 = v1078[3];
      if (v1084)
        v1085 = (v1084 & 0xFFFE000000000002) == 0;
      else
        v1085 = 0;
      if (!v1085)
        goto LABEL_997;
      v2073 = *(unsigned __int8 *)(v1084 + 5);
      if (v2073 == 4)
      {
        v2074 = *(_QWORD *)(v1084 + 8);
      }
      else
      {
        if (v2073 != 2)
          goto LABEL_997;
        v2074 = *(_QWORD *)(v1084 + 8);
        if ((v2074 & 1) != 0)
          v2074 = 0;
      }
      if (v2074 == *(_QWORD *)(v9 + 72))
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
LABEL_997:
      if ((*(_QWORD *)v12 & 0xFC000000000000) == 0x50000000000000)
        v1086 = 0x10000000;
      else
        v1086 = 0x40000000;
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filter(v10, (JSC::DFG::AbstractValue *)v1078, v1086, v1079, v1080, v1081, v1082, v1083);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xBE:
      v1063 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v1064 = *(_DWORD *)(v9 + 72);
      LODWORD(v2414[0]) = v1064;
      v1065 = v1063[3];
      if (v1065)
        v1066 = (v1065 & 0xFFFE000000000002) == 0;
      else
        v1066 = 0;
      if (!v1066 || (v1064 & ~*(unsigned __int8 *)(v1065 + 6)) != 0)
      {
        v1067 = *v1063;
        if (v1067 != 4 && (v1067 & 2) == 0)
        {
          LOBYTE(v2382) = 1;
          JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#5}>(v1067, (BOOL *)&v2382, (int *)v2414);
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xBF:
      v1555 = *(const JSC::ClassInfo **)(v9 + 72);
      v1556 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1556)
        v1557 = (v1556 & 0xFFFE000000000002) == 0;
      else
        v1557 = 0;
      if (!v1557)
        goto LABEL_3370;
      v1974 = 16 * (*(_DWORD *)v1556 & 0xFFFFFFFE);
      v1975 = *(unsigned int *)(v1974 + 76);
      v1976 = *(_DWORD *)(v1974 + 76) != 0;
      v1977 = 16 * v1975;
      if ((_DWORD)v1975)
        v1978 = v1555 == (const JSC::ClassInfo *)v1977;
      else
        v1978 = 1;
      if (!v1978)
      {
        do
        {
          v1977 = *(_QWORD *)(v1977 + 16);
          v1976 = v1977 != 0;
        }
        while ((const JSC::ClassInfo *)v1977 != v1555 && v1977 != 0);
      }
      if (!v1976)
      {
LABEL_3370:
        v1558 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        JSC::DFG::StructureAbstractValue::isSubClassOf((unint64_t *)v1558, (uint64_t)v1555);
        if (JSC::DFG::AbstractValue::filterClassInfo((JSC::DFG::AbstractValue *)v1558, *(JSC::DFG::Graph **)(v10 + 8), v1555))goto LABEL_1410;
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xC0:
      v1539 = *(_QWORD *)(v9 + 72);
      v1540 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1540)
        v1541 = (v1540 & 0xFFFE000000000002) == 0;
      else
        v1541 = 0;
      if (!v1541)
        goto LABEL_1388;
      v1968 = 16 * (*(_DWORD *)v1540 & 0xFFFFFFFE);
      v1969 = *(unsigned int *)(v1968 + 76);
      v1970 = *(_DWORD *)(v1968 + 76) != 0;
      v1971 = 16 * v1969;
      if ((_DWORD)v1969)
        v1972 = v1539 == v1971;
      else
        v1972 = 1;
      if (!v1972)
      {
        do
        {
          v1971 = *(_QWORD *)(v1971 + 16);
          v1970 = v1971 != 0;
        }
        while (v1971 != v1539 && v1971 != 0);
      }
      if (v1970)
      {
LABEL_1388:
        v1542 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        JSC::DFG::StructureAbstractValue::isNotSubClassOf((unint64_t *)v1542, v1539);
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0xC1:
      v1069 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1];
      if (v1069)
        v1070 = (v1069 & 0xFFFFFFFCFFFFFFFFLL) == 0;
      else
        v1070 = 0;
      if (!v1070)
        goto LABEL_989;
      v1946 = *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL;
      if (v1946)
      {
        v1947 = JSC::DFG::AtTailAbstractState::forNode(*v16, v1946)[3];
        if (!(v1947 >> 49))
          goto LABEL_989;
        if (v1947 < 0xFFFE000000000000)
          *(_QWORD *)&v1948 = v1947 - 0x2000000000000;
        else
          v1948 = (double)(int)v1947;
      }
      else
      {
        v1948 = 0.0;
      }
      if (v1948 == 0.0 || v1948 == 10.0)
        goto LABEL_401;
LABEL_989:
      if ((*(_BYTE *)(v12 + 6) & 0xFC) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198444FA8);
      }
      goto LABEL_990;
    case 0xC2:
      v1490 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1491 = v1490[1];
      if (v1491)
        v1492 = (v1491 & 0xFFFFDFFFF0000008) == 0;
      else
        v1492 = 0;
      if (!v1492)
        goto LABEL_1348;
      v1493 = *v1490;
      if (v1493 == 4 || (v1493 & 2) != 0)
        goto LABEL_1348;
      LOBYTE(v2412) = (v1493 & 0xFFFFFFFFFFFFFFFDLL) != 0;
      *(_QWORD *)&v2382 = 0;
      v2414[0] = (WTF *)&v2412;
      v2414[1] = (WTF *)&v2382;
      JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#4}>(v1493, (uint64_t)v2414);
      if ((_QWORD)v2382 && (_BYTE)v2412)
      {
        v9 = (uint64_t)v2725[0];
        v2191 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2382, v2185, v2186, v2187, v2188, v2189, v2190);
        v2395 = *v2191;
        v2396 = *((_QWORD *)v2191 + 2);
        v334 = &v2395;
        goto LABEL_2546;
      }
      v9 = (uint64_t)v2725[0];
LABEL_1348:
      if (((*(_QWORD *)(v9 + 24) >> 50) & 0x3F) - 12 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198444F88);
      }
LABEL_1349:
      v1495 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1495;
      v317 = 0x22000FFFFFF7;
      goto LABEL_296;
    case 0xC3:
      __break(0xC471u);
      JUMPOUT(0x19843EDB8);
    case 0xC4:
      v1657 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!v1657)
        goto LABEL_2508;
      v1658 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2442, (const JSC::CodeOrigin *)v9);
      v1672 = JSC::DFG::Graph::globalObjectFor(v1658, &v2442, v1659, v1660, v1661, v1662, v1663, v1664);
      if ((v2442 & 1) != 0 && (v2442 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2442 & 0xFFFFFFFF8, v1665, v1666, v1667, v1668, v1669, v1670, v1671);
      if (v1657 == 2)
      {
        v1673 = *(_DWORD *)(v1672 + 932);
        if (v1673)
        {
          v880 = 16 * (v1673 & 0xFFFFFFFE);
LABEL_1476:
          if (!v880)
            goto LABEL_2508;
LABEL_1065:
          v877 = v2725[0];
LABEL_1082:
          v1169 = (JSC::DFG::Graph **)*v16;
          v678 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v877);
          v684 = *v1169;
          v685 = (JSC::Structure *)v880;
LABEL_623:
          JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v678, v684, v685, v679, v680, v681, v682, v683);
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
      else if ((v1657 & 0xFFFE000000000002) == 0
             && *(unsigned __int8 *)(v1657 + 5) >= 0x17u
             && JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], v1666, v1667, v1668, v1669, v1670, v1671))
      {
        Object = (JSC::JSObject *)JSC::JSCell::getObject(v1657);
        v880 = JSC::StructureCache::emptyObjectStructureConcurrently((JSC::StructureCache *)(v1672 + 1968), Object, 6);
        goto LABEL_1476;
      }
LABEL_2508:
      __break(0xC471u);
      JUMPOUT(0x1984429B8);
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC9:
      if ((*(_QWORD *)v12 & 0xFC000000000000) != 0x2C000000000000)
        goto LABEL_1784;
      v602 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v603 = *v602;
      if (*v602 == 4 || (*v602 & 2) != 0)
        goto LABEL_1784;
      if ((v603 & 1) != 0)
      {
        v778 = v603 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(_DWORD *)v778 != 1)
          goto LABEL_1784;
        v605 = *(_QWORD *)(v778 + 8);
      }
      else
      {
        if (v603 < 4)
          goto LABEL_1784;
        v605 = v603 & 0xFFFFFFFFFFFFFFFCLL;
      }
      v606 = *(_QWORD *)(v605 + 64);
      if (v606
        && *(_BYTE *)(v606 + 5) != 1
        && *(_QWORD *)(v606 + 8 * JSC::DFG::Node::cachedPropertyNamesKind((JSC::DFG::Node *)v9) + 24) >= 2uLL
        && JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v607, v608, v609, v610, v611, v612))
      {
LABEL_560:
        v613 = (JSC::DFG::Graph **)*v16;
        v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v315 = *v613;
        v317 = 2;
LABEL_296:
        JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)v316, v315, v317, v21, v22, v23, v24, v25);
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
LABEL_1784:
      __break(0xC471u);
      JUMPOUT(0x198440054);
    case 0xC8:
      __break(0xC471u);
      JUMPOUT(0x19843CF28);
    case 0xCE:
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v2276 = *(_QWORD *)(v10 + 8);
        if (*(_DWORD *)(v2276 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455D4);
        }
        v12 = *(_QWORD *)(v2276 + 152) + 8 * *(_QWORD *)v12;
      }
      if ((*(_QWORD *)v12 & 0xFC000000000000) != 0x4000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x19843EE60);
      }
      goto LABEL_346;
    case 0xD4:
      if (*(_BYTE *)(v9 + 72) == 3)
        *(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
      __break(0xC471u);
      JUMPOUT(0x19843EF2CLL);
    case 0xD5:
      __break(0xC471u);
      JUMPOUT(0x19843D228);
    case 0xD6:
      v1337 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2472, (const JSC::CodeOrigin *)v9);
      v1351 = (_DWORD *)JSC::DFG::Graph::globalObjectFor(v1337, &v2472, v1338, v1339, v1340, v1341, v1342, v1343);
      if ((v2472 & 1) != 0 && (v2472 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2472 & 0xFFFFFFFF8, v1344, v1345, v1346, v1347, v1348, v1349, v1350);
      v2414[0] = 0;
      v1352 = v1351[215];
      if (v1352)
        v1353 = 16 * (v1352 & 0xFFFFFFFE);
      else
        v1353 = 0;
      v1354 = (WTF *)JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v1353, (int *)&v2382, v1346, v1347, v1348, v1349, v1350);
      v1360 = v1354;
      if (v1354)
        v2414[0] = v1354;
      v1361 = v1351[217];
      if (v1361)
        v1362 = 16 * (v1361 & 0xFFFFFFFE);
      else
        v1362 = 0;
      v1363 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v1362, (int *)&v2382, v1355, v1356, v1357, v1358, v1359);
      v1369 = v1363;
      if ((v1360 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v2414, v1363);
      }
      else if (((unint64_t)v1360 & 0xFFFFFFFFFFFFFFFCLL) != v1363)
      {
        if (((unint64_t)v1360 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v2269 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v2269 = 0x400000002;
          v2270 = (char)v2414[0];
          *(_QWORD *)(v2269 + 8) = (unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v2269 + 16) = v1369;
          v2219 = (WTF *)(v2270 & 2 | (unint64_t)v2269 | 1);
        }
        else
        {
          v2219 = (WTF *)(v1360 & 2 | v1363);
        }
        v2414[0] = v2219;
      }
      v1370 = v1351[216];
      if (v1370)
        v1371 = 16 * (v1370 & 0xFFFFFFFE);
      else
        v1371 = 0;
      v1372 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v1371, (int *)&v2382, v1364, v1365, v1366, v1367, v1368);
      v1373 = v1372;
      if (((uint64_t)v2414[0] & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v2414, v1372);
      }
      else if (((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL) != v1372)
      {
        if (((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v2271 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v2271 = 0x400000002;
          v2272 = (char)v2414[0];
          *(_QWORD *)(v2271 + 8) = (unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v2271 + 16) = v1373;
          v2220 = (WTF *)(v2272 & 2 | (unint64_t)v2271 | 1);
        }
        else
        {
          v2220 = (WTF *)((uint64_t)v2414[0] & 2 | v1372);
        }
        v2414[0] = v2220;
      }
      v1374 = (void **)*v16;
      v1375 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
      JSC::DFG::AbstractValue::set((uint64_t)v1375, *v1374, (uint64_t *)v2414, v1376, v1377, v1378, v1379, v1380);
      goto LABEL_1924;
    case 0xD8:
      __break(0xC471u);
      JUMPOUT(0x19843D0ECLL);
    case 0xD9:
    case 0xDA:
      if (v26 == 217)
      {
        __break(0xC471u);
        JUMPOUT(0x198444C0CLL);
      }
      v714 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v714)
        v715 = (v714 & 0xFFFE000000000002) == 0;
      else
        v715 = 0;
      if (!v715 || *(_BYTE *)(v714 + 5) != 51)
        goto LABEL_642;
      v1774 = *(_QWORD *)(v10 + 8);
      if (((*(_DWORD *)(*(_QWORD *)(v1774 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
      {
        JSC::CodeOrigin::CodeOrigin(&v2471, (const JSC::CodeOrigin *)v9);
        v2145 = JSC::DFG::Graph::globalObjectFor(v1774, &v2471, v2137, v2138, v2139, v2140, v2141, v2142);
        if ((v2471 & 1) != 0 && (v2471 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v2471 & 0xFFFFFFFF8, v2143, v2144, v709, v710, v711, v712, v713);
        if (v2145 != v714)
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
      if (*(_BYTE *)(*(_QWORD *)(v714 + 2048) + 4) != 2)
      {
        v2077 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 136);
        *(_QWORD *)&v2382 = *(_QWORD *)(v714 + 2048);
        WTF::HashTable<JSC::WatchpointSet *,JSC::WatchpointSet *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>,WTF::HashTraits<JSC::WatchpointSet *>>::add(v2077, (uint64_t *)&v2382, v709, v710, v711, v712, v713, (uint64_t)v2414);
        v2414[0] = 0;
        v2083 = *(_DWORD *)(v714 + 1012);
        if (v2083)
          v2084 = 16 * (v2083 & 0xFFFFFFFE);
        else
          v2084 = 0;
        v2085 = (WTF *)JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v2084, (int *)&v2382, v2078, v2079, v2080, v2081, v2082);
        v2091 = v2085;
        if (v2085)
          v2414[0] = v2085;
        v2092 = *(_DWORD *)(v714 + 1016);
        if (v2092)
          v2093 = 16 * (v2092 & 0xFFFFFFFE);
        else
          v2093 = 0;
        v2094 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v2093, (int *)&v2382, v2086, v2087, v2088, v2089, v2090);
        v2095 = v2094;
        if ((v2091 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v2414, v2094);
        }
        else if (((unint64_t)v2091 & 0xFFFFFFFFFFFFFFFCLL) != v2094)
        {
          if (((unint64_t)v2091 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v2312 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v2312 = 0x400000002;
            v2313 = (char)v2414[0];
            *(_QWORD *)(v2312 + 8) = (unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v2312 + 16) = v2095;
            v2273 = (WTF *)(v2313 & 2 | (unint64_t)v2312 | 1);
          }
          else
          {
            v2273 = (WTF *)(v2091 & 2 | v2094);
          }
          v2414[0] = v2273;
        }
        v2096 = (void **)*v16;
        v2097 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
        JSC::DFG::AbstractValue::set((uint64_t)v2097, *v2096, (uint64_t *)v2414, v2098, v2099, v2100, v2101, v2102);
        v2103 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
        v2103[1] |= 0x20000000000uLL;
        v2103[3] = 0;
        goto LABEL_1924;
      }
      v9 = (uint64_t)v2725[0];
LABEL_642:
      v716 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v716;
      v317 = 0x20000000002;
      goto LABEL_296;
    case 0xDB:
    case 0xDC:
      __break(0xC471u);
      JUMPOUT(0x19843BCA0);
    case 0xDD:
    case 0xDE:
      goto LABEL_642;
    case 0xDF:
    case 0xE0:
      if ((*(_QWORD *)v12 & 0xFC000000000000) != 0x54000000000000
        || (*(_QWORD *)(v9 + 32) & 0xFC000000000000) != 0x40000000000000
        || (*(_QWORD *)(v9 + 40) & 0xFC000000000000) != 0x54000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x19843B9D0);
      }
      goto LABEL_620;
    case 0xE1:
      if ((*(_QWORD *)(v9 + 40) & 0xFC000000000000) != 0x54000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x19843D1B0);
      }
      goto LABEL_620;
    case 0xE5:
      goto LABEL_620;
    case 0xE6:
      v1283 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((v1283 - 1) >= 2)
      {
        if (!(_DWORD)v1283)
        {
          __break(0xC471u);
          JUMPOUT(0x198444E44);
        }
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x911, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1984450D8);
      }
      v1284 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1284;
      goto LABEL_295;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v156 = *(_QWORD *)v12;
      v157 = (*(_QWORD *)v12 & 0xFC000000000000) == 0 && (*(_BYTE *)(v9 + 38) & 0xFC) == 0;
      v158 = *v16;
      v159 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 20) <= v159)
      {
        __break(0xC471u);
        JUMPOUT(0x1984452B0);
      }
      v160 = *(_QWORD *)(*(_QWORD *)(v158 + 8) + 8 * v159);
      if (!v160)
        goto LABEL_2796;
      v161 = (void *)(v156 & 0xFF00FFFFFFFFFFFFLL);
      v162 = *(_DWORD *)(v160 - 8);
      v163 = v162 & v156;
      v164 = (void **)(v160 + 40 * (v162 & v156));
      v165 = *v164;
      if (*v164 == (void *)(v156 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_141;
      v166 = 1;
      while (v165)
      {
        v163 = (v163 + v166) & v162;
        v164 = (void **)(v160 + 40 * v163);
        v165 = *v164;
        ++v166;
        if (*v164 == v161)
          goto LABEL_141;
      }
      v164 = (void **)(v160 + 40 * *(unsigned int *)(v160 - 4));
LABEL_141:
      v167 = (void **)(v160 + 40 * *(unsigned int *)(v160 - 4));
      if (v164 == v167)
      {
LABEL_2796:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v158, (JSC::DFG::Node *)(v156 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443C24);
      }
      v168 = (unint64_t)v164[4];
      v169 = *(_QWORD *)(v9 + 32);
      v170 = v162 & v169;
      v171 = v160 + 40 * (v162 & v169);
      v172 = *(JSC::JSBigInt **)v171;
      if (*(_QWORD *)v171 != (v169 & 0xFF00FFFFFFFFFFFFLL))
      {
        v173 = 1;
        v21 = 40;
        while (v172)
        {
          v170 = (v170 + v173) & v162;
          v171 = v160 + 40 * v170;
          v172 = *(JSC::JSBigInt **)v171;
          ++v173;
          if (*(_QWORD *)v171 == (v169 & 0xFF00FFFFFFFFFFFFLL))
            goto LABEL_146;
        }
LABEL_2794:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v158, (JSC::DFG::Node *)(v169 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198443BC8);
      }
LABEL_146:
      if ((void **)v171 == v167)
        goto LABEL_2794;
      if (!v168)
        goto LABEL_149;
      v174 = *(_QWORD *)(v171 + 32);
      if (!v174)
        goto LABEL_149;
      if (v168 >> 49 && v174 >> 49)
      {
        v841 = (double)(int)v168;
        if (v168 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v841 = v168 - 0x2000000000000;
        v842 = (double)(int)v174;
        if (v174 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v842 = v174 - 0x2000000000000;
        v2513[0] = JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double,double)#1}::operator()(*((_WORD *)v2725[0] + 9), v841, v842);
        v2513[1] = 0;
        v2514 = 0;
        v334 = (__int128 *)v2513;
        goto LABEL_2546;
      }
      if ((v168 & 0xFFFE000000000002) == 0)
      {
        v1922 = *(unsigned __int8 *)(v168 + 5);
        v1923 = v174 & 0xFFFE000000000002;
        if (v1922 == 3 && !v1923)
        {
          if (*(_BYTE *)(v174 + 5) == 3)
          {
            switch(*(_WORD *)(v9 + 18))
            {
              case 0xE7:
                v2253 = JSC::JSBigInt::compare((JSC::JSBigInt *)v168, *(JSC::JSBigInt **)(v171 + 32), v172);
                v2254 = 6;
                if (v2253 == 3)
                  v2254 = 7;
                v2511[0] = v2254;
                v2511[1] = 0;
                v2512 = 0;
                v334 = (__int128 *)v2511;
                break;
              case 0xE8:
                v2335 = JSC::JSBigInt::compare((JSC::JSBigInt *)v168, *(JSC::JSBigInt **)(v171 + 32), v172);
                if (v2335)
                  v2336 = v2335 == 3;
                else
                  v2336 = 1;
                v2337 = 6;
                if (v2336)
                  v2337 = 7;
                v2509[0] = v2337;
                v2509[1] = 0;
                v2510 = 0;
                v334 = (__int128 *)v2509;
                break;
              case 0xE9:
                v2330 = JSC::JSBigInt::compare(*(JSC::JSBigInt **)(v171 + 32), (JSC::JSBigInt *)v168, v172);
                v2331 = 6;
                if (v2330 == 3)
                  v2331 = 7;
                v2507[0] = v2331;
                v2507[1] = 0;
                v2508 = 0;
                v334 = (__int128 *)v2507;
                break;
              case 0xEA:
                v2332 = JSC::JSBigInt::compare(*(JSC::JSBigInt **)(v171 + 32), (JSC::JSBigInt *)v168, v172);
                if (v2332)
                  v2333 = v2332 == 3;
                else
                  v2333 = 1;
                v2334 = 6;
                if (v2333)
                  v2334 = 7;
                v2505[0] = v2334;
                v2505[1] = 0;
                v2506 = 0;
                v334 = (__int128 *)v2505;
                break;
              case 0xED:
                v2328 = JSC::JSBigInt::compare((JSC::JSBigInt *)v168, *(JSC::JSBigInt **)(v171 + 32), v172);
                v2329 = 6;
                if (!v2328)
                  v2329 = 7;
                v2503[0] = v2329;
                v2503[1] = 0;
                v2504 = 0;
                v334 = (__int128 *)v2503;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x1984453D0);
            }
            goto LABEL_2546;
          }
        }
        else if (v1922 == 2 && !v1923 && *(_BYTE *)(v174 + 5) == 2)
        {
          if ((*(_QWORD *)(v168 + 8) & 1) != 0)
            v1924 = 0;
          else
            v1924 = *(WTF **)(v168 + 8);
          v1925 = *(const WTF::StringImpl **)(v174 + 8);
          if ((v1925 & 1) != 0)
            v1925 = 0;
          if (v1924 && v1925)
          {
            switch(*(_WORD *)(v9 + 18))
            {
              case 0xE7:
                if ((WTF::codePointCompare(v1924, v1925, v172) & 0x80000000) != 0)
                  goto LABEL_2816;
                goto LABEL_2821;
              case 0xE8:
                if ((int)WTF::codePointCompare(v1924, v1925, v172) >= 1)
                  goto LABEL_2821;
                goto LABEL_2816;
              case 0xE9:
                if ((int)WTF::codePointCompare(v1924, v1925, v172) > 0)
                  goto LABEL_2816;
                goto LABEL_2821;
              case 0xEA:
                if ((WTF::codePointCompare(v1924, v1925, v172) & 0x80000000) != 0)
                  goto LABEL_2821;
                goto LABEL_2816;
              case 0xED:
                if (v1924 == v1925 || WTF::equal(v1924, v1925, v172))
LABEL_2816:
                  v2340 = 7;
                else
LABEL_2821:
                  v2340 = 6;
                v2501[0] = v2340;
                v2501[1] = 0;
                v2502 = 0;
                v334 = (__int128 *)v2501;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198445414);
            }
            goto LABEL_2546;
          }
        }
        if (v26 != 237)
          goto LABEL_150;
        if (v1922 == 4 && !v1923 && *(_BYTE *)(v174 + 5) == 4)
        {
          v309 = v168 == v174;
          v2255 = 6;
          if (v309)
            v2255 = 7;
          v2499[0] = v2255;
          v2499[1] = 0;
          v2500 = 0;
          v334 = (__int128 *)v2499;
          goto LABEL_2546;
        }
      }
      else
      {
LABEL_149:
        if (v26 != 237)
          goto LABEL_150;
      }
      v2256 = JSC::DFG::AtTailAbstractState::forNode(v158, (uint64_t)v161)[1];
      v2257 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[1];
      if (!JSC::valuesCouldBeEqual(v2256, v2257))
      {
        v2497[0] = 6;
        v2497[1] = 0;
        v2498 = 0;
        v334 = (__int128 *)v2497;
        goto LABEL_2546;
      }
      if (v2256 == 0x20000000000)
      {
        v2256 = v2257;
      }
      else if (v2257 != 0x20000000000)
      {
        goto LABEL_150;
      }
      if ((v2256 & 0xFFFFFDFFFFFFFFFFLL) == 0)
      {
        v2495[0] = 7;
        v2495[1] = 0;
        v2496 = 0;
        v334 = (__int128 *)v2495;
        goto LABEL_2546;
      }
      if ((v2256 & 0x20008000000) == 0)
      {
        v2493[0] = 6;
        v2493[1] = 0;
        v2494 = 0;
        v334 = (__int128 *)v2493;
        goto LABEL_2546;
      }
      if ((v2256 & 0x20000000000) == 0
        && JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (uint64_t)v172, v21, v22, v23, v24, v25))
      {
        v2491[0] = 6;
        v2491[1] = 0;
        v2492 = 0;
        v334 = (__int128 *)v2491;
        goto LABEL_2546;
      }
LABEL_150:
      v175 = *(_QWORD *)(v9 + 24);
      if (v175 != *(_QWORD *)(v9 + 32))
        goto LABEL_151;
      v1775 = (v175 >> 50) & 0x3F;
      if (((v175 >> 50) & 0x3F) <= 0xA)
      {
        if ((_DWORD)v1775 == 1)
        {
          v1776 = v175 & 0xFC000000000000;
          v1777 = 0x4000000000000;
        }
        else
        {
          if ((_DWORD)v1775 != 6)
          {
LABEL_151:
            if (v157)
            {
              __break(0xC471u);
              JUMPOUT(0x19843F7D8);
            }
            v176 = *v16;
            v177 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
            if (*(_DWORD *)(*v16 + 20) <= v177)
            {
              __break(0xC471u);
              JUMPOUT(0x1984452B8);
            }
            v178 = *(_QWORD *)(*(_QWORD *)(v176 + 8) + 8 * v177);
            if (!v178)
              goto LABEL_2798;
            v179 = *(_DWORD *)(v178 - 8);
            v180 = v179 & v9;
            v47 = (uint64_t *)(v178 + 40 * (v179 & v9));
            v181 = *v47;
            if (*v47 != v9)
            {
              v182 = 1;
              while (v181)
              {
                v180 = (v180 + v182) & v179;
                v47 = (uint64_t *)(v178 + 40 * v180);
                v181 = *v47;
                ++v182;
                if (*v47 == v9)
                  goto LABEL_158;
              }
              v47 = (uint64_t *)(v178 + 40 * *(unsigned int *)(v178 - 4));
            }
LABEL_158:
            if (v47 == (uint64_t *)(v178 + 40 * *(unsigned int *)(v178 - 4)))
            {
LABEL_2798:
              JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v176, (JSC::DFG::Node *)(v9 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
              __break(0xC471u);
              JUMPOUT(0x198443C7CLL);
            }
            v183 = v47[1];
            if ((v183 & 1) != 0)
              WTF::fastFree(v183 & 0xFFFFFFFFFFFFFFFCLL, v161, (uint64_t)v172, v21, v22, v23, v24, v25);
            *((_DWORD *)v47 + 6) = 0;
            v51 = xmmword_199123930;
LABEL_36:
            *(_OWORD *)(v47 + 1) = v51;
LABEL_37:
            v47[4] = 0;
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          }
          v1776 = v175 & 0xFC000000000000;
          v1777 = 0x18000000000000;
        }
      }
      else
      {
        switch((int)v1775)
        {
          case 11:
            v1776 = v175 & 0xFC000000000000;
            if (v1776 == 0x2C000000000000)
              goto LABEL_2294;
            v1777 = 0x4C000000000000;
            break;
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 22:
          case 23:
          case 24:
            goto LABEL_151;
          case 19:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x2C000000000000;
            break;
          case 20:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x50000000000000;
            break;
          case 21:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x54000000000000;
            break;
          case 25:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x64000000000000;
            break;
          case 26:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x68000000000000;
            break;
          case 27:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x6C000000000000;
            break;
          case 28:
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0x70000000000000;
            break;
          default:
            if ((_DWORD)v1775 != 52)
              goto LABEL_151;
            v1776 = v175 & 0xFC000000000000;
            v1777 = 0xD0000000000000;
            break;
        }
      }
      if (v1776 == v1777)
      {
LABEL_2294:
        if (*(unsigned __int16 *)(v9 + 18) - 231 <= 6)
        {
          v2170 = 1 << (*(_WORD *)(v9 + 18) + 25);
          if ((v2170 & 0x4A) != 0)
          {
            v2487[0] = 7;
            v2487[1] = 0;
            v2488 = 0;
            v334 = (__int128 *)v2487;
            goto LABEL_2546;
          }
          if ((v2170 & 5) != 0)
          {
            v2489[0] = 6;
            v2489[1] = 0;
            v2490 = 0;
            v334 = (__int128 *)v2489;
            goto LABEL_2546;
          }
        }
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x89B, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Unexpected node type");
        __break(0xC471u);
        JUMPOUT(0x198445328);
      }
      goto LABEL_151;
    case 0xEB:
    case 0xEC:
      v717 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
      v718 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      v720 = v717 >= 0xFFFE000000000000 && v718 != 0 && v718 >= 0xFFFE000000000000;
      if (v720)
      {
        v1772 = *(unsigned __int16 *)(v9 + 18);
        if (v1772 == 236)
        {
          v1198 = v717 > v718;
          v1998 = 6;
          if (!v1198)
            v1998 = 7;
          v2519[0] = v1998;
          v2519[1] = 0;
          v2520 = 0;
          v334 = (__int128 *)v2519;
        }
        else
        {
          if (v1772 != 235)
          {
            __break(0xC471u);
            JUMPOUT(0x198445118);
          }
          v720 = v717 >= v718;
          v1773 = 6;
          if (!v720)
            v1773 = 7;
          v2521[0] = v1773;
          v2521[1] = 0;
          v2522 = 0;
          v334 = (__int128 *)v2521;
        }
      }
      else
      {
        if (*(_QWORD *)(v9 + 24) != *(_QWORD *)(v9 + 32))
          goto LABEL_346;
        v721 = *(unsigned __int16 *)(v9 + 18);
        if (v721 == 236)
        {
          v2515[0] = 7;
          v2515[1] = 0;
          v2516 = 0;
          v334 = (__int128 *)v2515;
        }
        else
        {
          if (v721 != 235)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x800, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Unexpected node type");
            __break(0xC471u);
            JUMPOUT(0x198445270);
          }
          v2517[0] = 6;
          v2517[1] = 0;
          v2518 = 0;
          v334 = (__int128 *)v2517;
        }
      }
      goto LABEL_2546;
    case 0xEE:
    case 0xF0:
      v552 = *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL;
      v553 = *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL;
      v554 = JSC::DFG::AtTailAbstractState::forNode(*v16, v552)[3];
      v555 = JSC::DFG::AtTailAbstractState::forNode(*v16, v553)[3];
      if (v554)
        v557 = v555 == 0;
      else
        v557 = 1;
      if (v557)
        goto LABEL_482;
      if ((v554 & 0xFFFE000000000002) == 0)
      {
        v1810 = *(_BYTE *)(v554 + 5) == 2 && (v555 & 0xFFFE000000000002) == 0;
        if (v1810 && *(_BYTE *)(v555 + 5) == 2)
        {
          if ((*(_QWORD *)(v554 + 8) & 1) != 0)
            v2161 = 0;
          else
            v2161 = *(WTF **)(v554 + 8);
          if ((*(_QWORD *)(v555 + 8) & 1) != 0)
            v2162 = 0;
          else
            v2162 = *(const WTF::StringImpl **)(v555 + 8);
          if (v2161)
            v2163 = v2162 == 0;
          else
            v2163 = 1;
          if (!v2163)
          {
            if (v2161 == v2162 || WTF::equal(v2161, v2162, (const WTF::StringImpl *)v555))
              v2164 = 7;
            else
              v2164 = 6;
            v2485[0] = v2164;
            v2485[1] = 0;
            v2486 = 0;
            v334 = (__int128 *)v2485;
            goto LABEL_2546;
          }
LABEL_482:
          if ((*(_BYTE *)(v12 + 6) & 0xFC) == 0
            && (*(_BYTE *)(v9 + 38) & 0xFC) == 0
            && (v554
             && (v554 & 0xFFFE000000000002) == 0
             && *(unsigned __int8 *)(v554 + 5) - 4 < 0xFFFFFFFE
             || v555
             && (v555 & 0xFFFE000000000002) == 0
             && *(unsigned __int8 *)(v555 + 5) - 4 <= 0xFFFFFFFD))
          {
            goto LABEL_346;
          }
          v558 = JSC::DFG::AtTailAbstractState::forNode(*v16, v552);
          v559 = JSC::leastUpperBoundOfStrictlyEquivalentSpeculations(v558[1]);
          v560 = JSC::DFG::AtTailAbstractState::forNode(*v16, v553);
          if ((JSC::leastUpperBoundOfStrictlyEquivalentSpeculations(v560[1]) & v559) == 0)
          {
            v2479[0] = 6;
            v2479[1] = 0;
            v2480 = 0;
            v334 = (__int128 *)v2479;
            goto LABEL_2546;
          }
          v561 = *(_QWORD *)(v9 + 24);
          if (v561 != *(_QWORD *)(v9 + 32))
            goto LABEL_346;
          v562 = (v561 >> 50) & 0x3F;
          if (((v561 >> 50) & 0x3F) <= 0x13)
          {
            if (((v561 >> 50) & 0x3F) > 5)
            {
              if ((_DWORD)v562 == 6)
              {
                v563 = v561 & 0xFC000000000000;
                if (!v563)
                  goto LABEL_2684;
                v564 = 0x18000000000000;
              }
              else
              {
                if ((_DWORD)v562 != 11)
                  goto LABEL_346;
                v563 = v561 & 0xFC000000000000;
                v564 = 0x2C000000000000;
              }
              goto LABEL_2683;
            }
            if ((_DWORD)v562)
            {
              if ((_DWORD)v562 != 1)
                goto LABEL_346;
              v563 = v561 & 0xFC000000000000;
              v564 = 0x4000000000000;
              goto LABEL_2683;
            }
            v563 = v561 & 0xFC000000000000;
            if (v563 <= 0xBBFFFFFFFFFFFFLL)
            {
              if (v563 == 0x18000000000000)
                goto LABEL_2684;
LABEL_2678:
              v564 = 0x54000000000000;
              goto LABEL_2683;
            }
            if (v563 == 0xBC000000000000)
              goto LABEL_2684;
          }
          else
          {
            if (((v561 >> 50) & 0x3F) <= 0x26)
            {
              switch((int)v562)
              {
                case 20:
                  v563 = v561 & 0xFC000000000000;
                  if (v563 == 0x50000000000000)
                    goto LABEL_2684;
                  v564 = 0x9C000000000000;
                  break;
                case 21:
                  v563 = v561 & 0xFC000000000000;
                  if (v563)
                    goto LABEL_2678;
                  goto LABEL_2684;
                case 25:
                  v563 = v561 & 0xFC000000000000;
                  v564 = 0x64000000000000;
                  goto LABEL_2683;
                case 26:
                  v563 = v561 & 0xFC000000000000;
                  v564 = 0x68000000000000;
                  goto LABEL_2683;
                case 27:
                  v563 = v561 & 0xFC000000000000;
                  v564 = 0x6C000000000000;
                  goto LABEL_2683;
                case 28:
                  v563 = v561 & 0xFC000000000000;
                  v564 = 0x70000000000000;
                  goto LABEL_2683;
                default:
                  goto LABEL_346;
              }
              goto LABEL_2683;
            }
            if (((v561 >> 50) & 0x3F) <= 0x2F)
            {
              if ((_DWORD)v562 == 39)
              {
                v563 = v561 & 0xFC000000000000;
                v564 = 0x50000000000000;
                goto LABEL_2683;
              }
              if ((_DWORD)v562 != 47)
                goto LABEL_346;
              v563 = v561 & 0xFC000000000000;
              if (v563)
              {
                v564 = 0xBC000000000000;
                goto LABEL_2683;
              }
LABEL_2684:
              v2477[0] = 7;
              v2477[1] = 0;
              v2478 = 0;
              v334 = (__int128 *)v2477;
              goto LABEL_2546;
            }
            if ((_DWORD)v562 != 48)
            {
              if ((_DWORD)v562 != 52)
                goto LABEL_346;
              v563 = v561 & 0xFC000000000000;
              v564 = 0xD0000000000000;
LABEL_2683:
              if (v563 == v564)
                goto LABEL_2684;
LABEL_346:
              v390 = *v16;
              v377 = (JSC::DFG::Node *)v9;
LABEL_347:
              v385 = JSC::DFG::AtTailAbstractState::forNode(v390, (uint64_t)v377);
              if ((*v385 & 1) != 0)
                WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v391, v392, v393, v394, v395, v396, v397);
              *((_DWORD *)v385 + 4) = 0;
              v387 = xmmword_199123930;
              goto LABEL_343;
            }
            v563 = v561 & 0xFC000000000000;
            if (!v563)
              goto LABEL_2684;
          }
          v564 = 0xC0000000000000;
          goto LABEL_2683;
        }
      }
      if (*(_WORD *)(v9 + 18) == 238)
      {
        v1811 = JSC::JSValue::strictEqual(0, v554, v555, v21, v22, v23, v24, v25, v556);
        v1812 = 6;
        if (v1811)
          v1812 = 7;
        v2483[0] = v1812;
        v2483[1] = 0;
        v2484 = 0;
        v334 = (__int128 *)v2483;
        goto LABEL_2546;
      }
      if (v554 == v555)
        goto LABEL_2252;
      if (v554 >> 49)
      {
        if (v555 >> 49)
        {
          v2344 = (double)(int)v554;
          if (v554 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v2344 = v554 - 0x2000000000000;
          v2345 = (double)(int)v555;
          if (v555 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v2345 = v555 - 0x2000000000000;
          if (*(_QWORD *)&v2344 == *(_QWORD *)&v2345)
            goto LABEL_2252;
        }
      }
      else if (JSC::JSValue::strictEqual(0, v554, v555, v21, v22, v23, v24, v25, v556))
      {
LABEL_2252:
        v2159 = 7;
LABEL_2253:
        v2481[0] = v2159;
        v2481[1] = 0;
        v2482 = 0;
        v334 = (__int128 *)v2481;
        goto LABEL_2546;
      }
      v2159 = 6;
      goto LABEL_2253;
    case 0xEF:
      v1261 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!v1261)
        goto LABEL_346;
      if ((v1261 & 0xFFFE000000000002) != 0)
      {
        v1262 = 6;
      }
      else
      {
        v309 = **(_QWORD **)(v9 + 72) != v1261;
        v1262 = 6;
        if (!v309)
          v1262 = 7;
      }
      v2475[0] = v1262;
      v2475[1] = 0;
      v2476 = 0;
      v334 = (__int128 *)v2475;
      goto LABEL_2546;
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      __break(0xC471u);
      JUMPOUT(0x19843A968);
    case 0xFE:
      __break(0xC471u);
      JUMPOUT(0x19843D158);
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x11F:
      v471 = *(_QWORD *)(v9 + 72);
      v472 = (void **)*v16;
      v473 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((uint64_t)v473, *v472, v471, v474, v475, v476, v477, v478);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x106:
      v1637 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2455, (const JSC::CodeOrigin *)v9);
      v1644 = JSC::DFG::Graph::globalObjectFor(v1637, &v2455, v1638, v1639, v1640, v1641, v1642, v1643);
      v1645 = *((unsigned __int16 *)v2725[0] + 9);
      switch(v1645)
      {
        case 267:
          goto LABEL_2647;
        case 264:
          v1646 = *((_DWORD *)v2725[0] + 19);
          break;
        case 352:
LABEL_2647:
          v1646 = *((_DWORD *)v2725[0] + 21);
          break;
        default:
          v1646 = *((_DWORD *)v2725[0] + 18);
          goto LABEL_1463;
      }
      LOBYTE(v1646) = v1646 & 0xF;
LABEL_1463:
      if ((v1646 & 0x10) != 0)
        v1647 = ((v1646 & 0xEu) + 10) >> 1;
      else
        v1647 = (v1646 >> 1) & 7;
      v1648 = *(_DWORD *)(v1644 + 4 * v1647 + 892);
      if (v1648)
        v1649 = (JSC::Structure *)(16 * (v1648 & 0xFFFFFFFE));
      else
        v1649 = 0;
      v1650 = (JSC::DFG::Graph **)*v16;
      v1651 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1651, *v1650, v1649, v1652, v1653, v1654, v1655, v1656);
      v1335 = v2455;
      if ((v2455 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x107:
      if (JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25))
      {
        if (*(_DWORD *)(v9 + 32) == 1)
        {
          v1316 = *(uint64_t **)(v9 + 72);
          v1317 = (_QWORD *)(2 * *v1316);
          if (*v1316 < 0 || *v1317)
          {
            v1318 = v1317 + 1;
            if (*v1316 >= 0)
              v1316 = v1318;
            if ((*(_BYTE *)v1316 & 1) != 0)
            {
              v2237 = *(_QWORD *)(v10 + 8);
              if (*(_DWORD *)(v2237 + 164) <= *(_QWORD *)v12)
              {
                __break(0xC471u);
                JUMPOUT(0x1984455A4);
              }
              if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(v2237 + 152) + 8 * *(_QWORD *)v12) & 0xFF00FFFFFFFFFFFFLL)
                            + 0x12) != 350)
              {
                JSC::CodeOrigin::CodeOrigin(&v2453, (const JSC::CodeOrigin *)v9);
                v2285 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v2237, &v2453, v2279, v2280, v2281, v2282, v2283, v2284)+ 888);
                if (v2285)
                  v2286 = (JSC::Structure *)(16 * (v2285 & 0xFFFFFFFE));
                else
                  v2286 = 0;
                v2287 = (JSC::DFG::Graph **)*v16;
                v2288 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v2288, *v2287, v2286, v2289, v2290, v2291, v2292, v2293);
                v1335 = v2453;
                if ((v2453 & 1) != 0)
                  goto LABEL_2005;
                return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
              }
              if (*(_WORD *)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v2237 + 152) + 8 * *(_QWORD *)v12) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                            + 0x12) == 352
                && (*(_BYTE *)(**(_QWORD **)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v2237 + 152)
                                                                     + 8 * *(_QWORD *)v12) & 0xFF00FFFFFFFFFFFFLL)
                                                        + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                           + 0x48)
                             + 4) & 0xE) == 8)
              {
                JSC::CodeOrigin::CodeOrigin(&v2454, (const JSC::CodeOrigin *)v9);
                v2244 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v2237, &v2454, v2238, v2239, v2240, v2241, v2242, v2243)+ 888);
                if (v2244)
                  v2245 = (JSC::Structure *)(16 * (v2244 & 0xFFFFFFFE));
                else
                  v2245 = 0;
                v2246 = (JSC::DFG::Graph **)*v16;
                v2247 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
                JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v2247, *v2246, v2245, v2248, v2249, v2250, v2251, v2252);
                v1335 = v2454;
                if ((v2454 & 1) != 0)
                  goto LABEL_2005;
                return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
              }
            }
          }
        }
        v1319 = *(_QWORD *)(v10 + 8);
        JSC::CodeOrigin::CodeOrigin(&v2452, (const JSC::CodeOrigin *)v9);
        v1326 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v1319, &v2452, v1320, v1321, v1322, v1323, v1324, v1325)
                          + 868);
        if (v1326)
          v1327 = (JSC::Structure *)(16 * (v1326 & 0xFFFFFFFE));
        else
          v1327 = 0;
        v1328 = *(JSC::DFG::Graph ***)(v10 + 24);
        v1329 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1328, v9);
        JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1329, *v1328, v1327, v1330, v1331, v1332, v1333, v1334);
        v1335 = v2452;
        if ((v2452 & 1) == 0)
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        goto LABEL_2005;
      }
      v1952 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2451, (const JSC::CodeOrigin *)v9);
      v1959 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v1952, &v2451, v1953, v1954, v1955, v1956, v1957, v1958) + 908);
      if (v1959)
        v1960 = (JSC::Structure *)(16 * (v1959 & 0xFFFFFFFE));
      else
        v1960 = 0;
      v1961 = *(JSC::DFG::Graph ***)(v10 + 24);
      v1962 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1961, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1962, *v1961, v1960, v1963, v1964, v1965, v1966, v1967);
      v1335 = v2451;
      if ((v2451 & 1) == 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
LABEL_2005:
      v1408 = v1335 & 0xFFFFFFFF8;
      if ((v1335 & 0xFFFFFFFF8) != 0)
        goto LABEL_2006;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x108:
      __break(0xC471u);
      JUMPOUT(0x19843E2C0);
    case 0x109:
      if (!JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25)|| (*(_QWORD *)v12 & 0xFC000000000000) != 0x4000000000000|| *(unsigned __int16 *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
      {
        goto LABEL_560;
      }
      if (**(_QWORD **)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000
        || (**(_QWORD **)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) & 0xF8000000) != 0)
      {
        goto LABEL_560;
      }
      v1517 = *(unsigned __int16 *)(v9 + 18);
      switch(v1517)
      {
        case 267:
          goto LABEL_2852;
        case 264:
          v1518 = *(_DWORD *)(v9 + 76);
          break;
        case 352:
LABEL_2852:
          v1518 = *(_DWORD *)(v9 + 84);
          break;
        default:
          v1518 = *(_DWORD *)(v9 + 72);
          goto LABEL_1372;
      }
      LOBYTE(v1518) = v1518 & 0xF;
LABEL_1372:
      if (v1518 > 0x19u || ((1 << v1518) & 0x2A003F0) == 0)
        goto LABEL_560;
      v1519 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2449, (const JSC::CodeOrigin *)v9);
      v1526 = JSC::DFG::Graph::globalObjectFor(v1519, &v2449, v1520, v1521, v1522, v1523, v1524, v1525);
      v1527 = *((unsigned __int16 *)v2725[0] + 9);
      if (v1527 == 267 || v1527 == 352)
      {
        v1528 = *((_DWORD *)v2725[0] + 21);
      }
      else if (v1527 == 264)
      {
        v1528 = *((_DWORD *)v2725[0] + 19);
      }
      else
      {
        v1528 = *((_DWORD *)v2725[0] + 18);
      }
      if ((v1528 & 0x10) != 0)
        v1529 = ((v1528 & 0xEu) + 10) >> 1;
      else
        v1529 = (v1528 >> 1) & 7;
      v1530 = *(_DWORD *)(v1526 + 4 * v1529 + 892);
      if (v1530)
        v1531 = (JSC::Structure *)(16 * (v1530 & 0xFFFFFFFE));
      else
        v1531 = 0;
      v1532 = (JSC::DFG::Graph **)*v16;
      v1533 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1533, *v1532, v1531, v1534, v1535, v1536, v1537, v1538);
      v1335 = v2449;
      if ((v2449 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x10A:
      v1559 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2448, (const JSC::CodeOrigin *)v9);
      v1566 = JSC::DFG::Graph::globalObjectFor(v1559, &v2448, v1560, v1561, v1562, v1563, v1564, v1565);
      v1567 = *((unsigned __int16 *)v2725[0] + 9);
      if (v1567 == 267 || v1567 == 352)
      {
        v1568 = *((_DWORD *)v2725[0] + 21);
      }
      else if (v1567 == 264)
      {
        v1568 = *((_DWORD *)v2725[0] + 19);
      }
      else
      {
        v1568 = *((_DWORD *)v2725[0] + 18);
      }
      if ((v1568 & 0x10) != 0)
        v1569 = ((v1568 & 0xEu) + 10) >> 1;
      else
        v1569 = (v1568 >> 1) & 7;
      v1570 = *(_DWORD *)(v1566 + 4 * v1569 + 892);
      if (v1570)
        v1571 = (JSC::Structure *)(16 * (v1570 & 0xFFFFFFFE));
      else
        v1571 = 0;
      v1572 = (JSC::DFG::Graph **)*v16;
      v1573 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1573, *v1572, v1571, v1574, v1575, v1576, v1577, v1578);
      v1335 = v2448;
      if ((v2448 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x10B:
      v1496 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2450, (const JSC::CodeOrigin *)v9);
      v1503 = JSC::DFG::Graph::globalObjectFor(v1496, &v2450, v1497, v1498, v1499, v1500, v1501, v1502);
      v1504 = *((unsigned __int16 *)v2725[0] + 9);
      if (v1504 == 267 || v1504 == 352)
      {
        v1505 = *((_DWORD *)v2725[0] + 21);
      }
      else if (v1504 == 264)
      {
        v1505 = *((_DWORD *)v2725[0] + 19);
      }
      else
      {
        v1505 = *((_DWORD *)v2725[0] + 18);
      }
      if ((v1505 & 0x10) != 0)
        v1506 = ((v1505 & 0xEu) + 10) >> 1;
      else
        v1506 = (v1505 >> 1) & 7;
      v1507 = *(_DWORD *)(v1503 + 4 * v1506 + 892);
      if (v1507)
        v1508 = (JSC::Structure *)(16 * (v1507 & 0xFFFFFFFE));
      else
        v1508 = 0;
      v1509 = (JSC::DFG::Graph **)*v16;
      v1510 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1510, *v1509, v1508, v1511, v1512, v1513, v1514, v1515);
      v1335 = v2450;
      if ((v2450 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x10D:
      v1465 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v1465 != 1 && (_DWORD)v1465 != 52)
      {
        if (!(_DWORD)v1465)
        {
          __break(0xC471u);
          JUMPOUT(0x198444DBCLL);
        }
        __break(0xC471u);
        JUMPOUT(0x198445024);
      }
      v1466 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2447, (const JSC::CodeOrigin *)v9);
      v1473 = (uint64_t *)JSC::DFG::Graph::globalObjectFor(v1466, &v2447, v1467, v1468, v1469, v1470, v1471, v1472);
      v1474 = (JSC::Structure *)JSC::JSGlobalObject::typedArrayStructureConcurrently(v1473, *((unsigned __int8 *)v2725[0] + 72), 0);
      v1475 = *(JSC::DFG::Graph ***)(v10 + 24);
      v1476 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1475, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1476, *v1475, v1474, v1477, v1478, v1479, v1480, v1481);
      v1335 = v2447;
      if ((v2447 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x10E:
      v1621 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2446, (const JSC::CodeOrigin *)v9);
      v1628 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v1621, &v2446, v1622, v1623, v1624, v1625, v1626, v1627) + 976);
      if (v1628)
        v1629 = (JSC::Structure *)(16 * (v1628 & 0xFFFFFFFE));
      else
        v1629 = 0;
      v1630 = *(JSC::DFG::Graph ***)(v10 + 24);
      v1631 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1630, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1631, *v1630, v1629, v1632, v1633, v1634, v1635, v1636);
      v1335 = v2446;
      if ((v2446 & 1) != 0)
        goto LABEL_2005;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x10F:
      if ((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) != 0 && (*(_QWORD *)v12 & 0xFC000000000000) != 0x54000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x198444D98);
      }
      v674 = 41624;
      goto LABEL_621;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198444EE0);
      }
      v1417 = *(_QWORD *)(v10 + 8);
      JSC::CodeOrigin::CodeOrigin(&v2369, (const JSC::CodeOrigin *)v9);
      v1424 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v1417, &v2369, v1418, v1419, v1420, v1421, v1422, v1423) + 908);
      if (v1424)
        v1425 = (JSC::Structure *)(16 * (v1424 & 0xFFFFFFFE));
      else
        v1425 = 0;
      v1426 = *(JSC::DFG::Graph ***)(v10 + 24);
      v1427 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v1426, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1427, *v1426, v1425, v1428, v1429, v1430, v1431, v1432);
      v1433 = v2369;
      if ((v2369 & 1) != 0)
        goto LABEL_1302;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x115:
      v1482 = *(unsigned __int16 *)((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v1482 != 349 && v1482 != 352)
      {
        v1483 = *(JSC::DFG::Graph **)(v10 + 8);
        v1484 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        if (!JSC::DFG::Graph::canDoFastSpread(v1483, (JSC::DFG::Node *)v9, (const JSC::DFG::AbstractValue *)v1484, v1485, v1486, v1487, v1488, v1489))
        {
          __break(0xC471u);
          JUMPOUT(0x198445168);
        }
      }
      v674 = 41656;
      goto LABEL_621;
    case 0x118:
      v1098 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v1105 = *(WTF **)(v9 + 72);
      v1106 = v1098[3];
      if (v1106)
      {
        if ((v1106 & 0xFFFE000000000002) != 0)
          goto LABEL_1410;
        if (*(_BYTE *)(v1106 + 5) != 1)
          goto LABEL_1410;
        v1107 = (unsigned int *)JSC::DFG::Graph::registerStructure(*(_QWORD *)(v10 + 8), v1106, (int *)v2414, v1100, v1101, v1102, v1103, v1104);
        if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::contains(v1105, v1107) & 1) == 0)
          goto LABEL_1410;
      }
      else
      {
        v2133 = *(uint64_t **)(v10 + 32);
        if (!v2133
          || (LOBYTE(v2382) = 1,
              v2414[0] = v1105,
              v2414[1] = (WTF *)v10,
              v2414[2] = (WTF *)&v2382,
              JSC::DFG::PhiChildren::forAllTransitiveIncomingValues<JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1}>(v2133, v9, (uint64_t)v2414, v1100, v1101, v1102, v1103, v1104), !(_BYTE)v2382))
        {
          v2134 = *(_QWORD *)v1105 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_QWORD *)v1105 & 1) != 0)
          {
            if (*(_DWORD *)v2134 != 1)
              return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
            v2134 = *(_QWORD *)(v2134 + 8);
          }
          if (v2134)
          {
            v2135 = *((_QWORD *)v2725[0] + 3);
            v2136 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v2134, v1099, v1100, v1101, v1102, v1103, v1104);
            v2403 = *v2136;
            v2404 = *((_QWORD *)v2136 + 2);
            v343 = &v2403;
            v344 = v10;
            v340 = v2135;
LABEL_332:
            JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filterByValue<JSC::DFG::Edge>(v344, v340, v343);
          }
        }
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x119:
      v1409 = *(uint64_t **)(v9 + 72);
      v1410 = (void **)*v16;
      v1411 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((uint64_t)v1411, *v1410, v1409, v1412, v1413, v1414, v1415, v1416);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x121:
    case 0x159:
      v690 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2441, (const JSC::CodeOrigin *)v9);
      v691 = (_QWORD *)(v2441 & 0xFFFFFFFF8);
      if ((v2441 & 1) != 0)
        v691 = (_QWORD *)*v691;
      if (v691)
        v690 = v691[1];
      v692 = *(_DWORD *)(*(_QWORD *)(v690 + 8) + 832);
      if (v692)
        v693 = (JSC::Structure *)(16 * (v692 & 0xFFFFFFFE));
      else
        v693 = 0;
      v694 = (JSC::DFG::Graph **)*v16;
      v695 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v695, *v694, v693, v696, v697, v698, v699, v700);
      v708 = v2441;
      if ((v2441 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x123:
    case 0x196:
      goto LABEL_346;
    case 0x124:
      __break(0xC471u);
      JUMPOUT(0x19843D2B0);
    case 0x125:
      __break(0xC471u);
      JUMPOUT(0x19843D45CLL);
    case 0x126:
      v1543 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v2414[0] = 0;
      v1544 = *(unsigned int **)(v9 + 72);
      v1545 = v1544[3];
      if ((_DWORD)v1545)
      {
        v1546 = v1543;
        v1547 = 0;
        v1548 = 16 * v1545;
        v1549 = (_BYTE *)(*(_QWORD *)v1544 + 8);
        do
        {
          v1550 = *((_QWORD *)v1549 - 1);
          if (JSC::DFG::AbstractValue::contains(v1546, v1550))
          {
            if (((uint64_t)v2414[0] & 1) != 0)
            {
              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v2414, v1550);
            }
            else if (v1550 != ((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL))
            {
              if (((unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
              {
                v1553 = WTF::fastMalloc((WTF *)0x28);
                *(_QWORD *)v1553 = 0x400000002;
                v1554 = (char)v2414[0];
                *(_QWORD *)(v1553 + 8) = (unint64_t)v2414[0] & 0xFFFFFFFFFFFFFFFCLL;
                *(_QWORD *)(v1553 + 16) = v1550;
                v1552 = (WTF *)(v1554 & 2 | (unint64_t)v1553 | 1);
              }
              else
              {
                v1552 = (WTF *)((uint64_t)v2414[0] & 2 | (unint64_t)v1550);
              }
              v2414[0] = v1552;
            }
            if (*v1549)
              v1551 = 2;
            else
              v1551 = 1;
            v1547 |= v1551;
          }
          v1549 += 16;
          v1548 -= 16;
        }
        while (v1548);
        v9 = (uint64_t)v2725[0];
      }
      else
      {
        v1547 = 0;
      }
      v1836 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      if (JSC::DFG::AbstractValue::changeStructure((uint64_t)v1836, *(_QWORD *)(v10 + 8), (uint64_t *)v2414, v1837, v1838, v1839, v1840, v1841) == 1)*(_BYTE *)(*(_QWORD *)(*v16 + 40) + 17) = 0;
      if (v1547 == 2)
      {
        v1847 = v2725[0];
        v2374[0] = 7;
        v2374[1] = 0;
        v2375 = 0;
        v1848 = (__int128 *)v2374;
      }
      else
      {
        if (v1547 != 1)
        {
          v2153 = JSC::DFG::AtTailAbstractState::forNode(*v16, (uint64_t)v2725[0]);
          if ((*v2153 & 1) != 0)
            WTF::fastFree(*v2153 & 0xFFFFFFFFFFFFFFFCLL, v206, v207, v208, v209, v210, v211, v212);
          *((_DWORD *)v2153 + 4) = 0;
          *(_OWORD *)v2153 = xmmword_199123930;
          v2153[3] = 0;
LABEL_1924:
          v632 = (unint64_t)v2414[0];
          if (((uint64_t)v2414[0] & 1) == 0)
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          goto LABEL_570;
        }
        v1847 = v2725[0];
        v2376[0] = 6;
        v2376[1] = 0;
        v2377 = 0;
        v1848 = (__int128 *)v2376;
      }
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(v10, v1847, v1848, v1842, v1843, v1844, v1845, v1846);
      goto LABEL_1924;
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
      v408 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v409 = v408[3];
      if (!v409)
        goto LABEL_1884;
      switch(*(_WORD *)(v9 + 18))
      {
        case 0x127:
          if ((v409 & 0xFFFE000000000002) != 0)
          {
            v410 = 6;
          }
          else
          {
            v410 = 6;
            if (*(unsigned __int8 *)(v409 + 5) == *(unsigned __int8 *)(v9 + 72))
              v410 = 7;
          }
          v2623[0] = v410;
          v2623[1] = 0;
          v2624 = 0;
          v334 = (__int128 *)v2623;
          goto LABEL_2546;
        case 0x128:
          v2596[0] = 6;
          v2596[1] = 0;
          v2597 = 0;
          v334 = (__int128 *)v2596;
          goto LABEL_2546;
        case 0x12A:
          v1909 = v409 & 0xFFFE000000000002;
          if ((v409 & 0xFFFE000000000002) != 0)
          {
            if (v409 == 10)
            {
LABEL_1902:
              v1910 = 7;
              goto LABEL_2400;
            }
          }
          else
          {
            v2206 = 16 * (*(_DWORD *)v409 & 0xFFFFFFFE);
            v2207 = *(_QWORD *)v10;
            JSC::CodeOrigin::CodeOrigin(&v2620, (const JSC::CodeOrigin *)v9);
            if ((*(_BYTE *)(v2206 + 10) & 1) != 0)
            {
              v2362 = (_QWORD *)(v2620 & 0xFFFFFFFF8);
              if ((v2620 & 1) != 0)
                v2362 = (_QWORD *)*v2362;
              if (v2362)
                v2207 = v2362[1];
              if (*(_QWORD *)(v2206 + 40) == *(_QWORD *)(v2207 + 8))
                goto LABEL_1902;
            }
          }
          v1910 = 6;
LABEL_2400:
          v2621 = (unint64_t)v1910;
          v2622 = 0;
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(v10, (JSC::DFG::Node *)v9, &v2621, v21, v22, v23, v24, v25);
          if (v1909)
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
          v1433 = v2620;
          if ((v2620 & 1) == 0)
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
LABEL_1302:
          v1408 = v1433 & 0xFFFFFFFF8;
          if ((v1433 & 0xFFFFFFFF8) == 0)
            return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
LABEL_2006:
          WTF::fastFree(v1408, v701, v702, v703, v704, v705, v706, v707);
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        case 0x12B:
          v1897 = *(_QWORD *)v10;
          JSC::CodeOrigin::CodeOrigin(&v2619, (const JSC::CodeOrigin *)v9);
          v1900 = (uint64_t *)(v2619 & 0xFFFFFFFF8);
          v1901 = v2619 & 0xFFFFFFFF8;
          if ((v2619 & 1) != 0)
            v1901 = *v1900;
          if (v1901)
            v1897 = *(_QWORD *)(v1901 + 8);
          v1902 = v408[3];
          if ((v1902 & 0xFFFE000000000002) != 0 || (v1903 = *(unsigned __int8 *)(v1902 + 5), v1903 <= 0x16))
          {
            v1904 = v1902 == 2;
          }
          else if ((*(_BYTE *)(16 * (*(_DWORD *)v1902 & 0xFFFFFFFE) + 0xA) & 1) != 0
                 && *(_QWORD *)(16 * (*(_DWORD *)v1902 & 0xFFFFFFFE) + 0x28) == *(_QWORD *)(v1897 + 8)
                 || (v1903 & 0xFE) == 0x1A)
          {
            v1904 = 0;
          }
          else if ((*(_BYTE *)(v1902 + 6) & 4) != 0)
          {
            v1904 = 2;
          }
          else
          {
            v1904 = 1;
          }
          if ((v2619 & 1) != 0 && v1900)
            WTF::fastFree((unint64_t)v1900, v1898, v1899, v21, v22, v23, v24, v25);
          if (v1904 == 2)
            goto LABEL_1884;
          v377 = v2725[0];
          v2169 = 6;
          if (v1904 == 1)
            v2169 = 7;
          v2617[0] = v2169;
          v2617[1] = 0;
          v2618 = 0;
          v334 = (__int128 *)v2617;
          goto LABEL_819;
        case 0x12C:
          v1883 = *(_QWORD *)v10;
          JSC::CodeOrigin::CodeOrigin(&v2616, (const JSC::CodeOrigin *)v9);
          v1886 = (uint64_t *)(v2616 & 0xFFFFFFFF8);
          v1887 = v2616 & 0xFFFFFFFF8;
          if ((v2616 & 1) != 0)
            v1887 = *v1886;
          if (v1887)
            v1883 = *(_QWORD *)(v1887 + 8);
          v1888 = v408[3];
          if ((v1888 & 0xFFFE000000000002) != 0
            || (v1889 = *(unsigned __int8 *)(v1888 + 5), v1889 < 0x17)
            || (*(_BYTE *)(16 * (*(_DWORD *)v1888 & 0xFFFFFFFE) + 0xA) & 1) != 0
            && *(_QWORD *)(16 * (*(_DWORD *)v1888 & 0xFFFFFFFE) + 0x28) == *(_QWORD *)(v1883 + 8))
          {
            v1890 = 0;
          }
          else if ((v1889 & 0xFE) == 0x1A)
          {
            v1890 = 1;
          }
          else
          {
            v1890 = (*(unsigned __int8 *)(v1888 + 6) >> 1) & 2;
          }
          if ((v2616 & 1) != 0 && v1886)
            WTF::fastFree((unint64_t)v1886, v1884, v1885, v21, v22, v23, v24, v25);
          if (v1890 == 2)
            goto LABEL_1884;
          v377 = v2725[0];
          v1891 = 6;
          if (v1890 == 1)
            v1891 = 7;
          v2614[0] = v1891;
          v2614[1] = 0;
          v2615 = 0;
          v334 = (__int128 *)v2614;
          goto LABEL_819;
        case 0x12D:
          v1894 = 6;
          if ((v409 & 0xFFFFFFFFFFFFFFF7) == 2)
            v1894 = 7;
          v2612[0] = v1894;
          v2612[1] = 0;
          v2613 = 0;
          v334 = (__int128 *)v2612;
          goto LABEL_2546;
        case 0x12E:
          v1911 = 6;
          if ((v409 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v1911 = 7;
          v2610[0] = v1911;
          v2610[1] = 0;
          v2611 = 0;
          v334 = (__int128 *)v2610;
          goto LABEL_2546;
        case 0x12F:
          v1912 = 6;
          if (v409 >> 49)
            v1912 = 7;
          v2608[0] = v1912;
          v2608[1] = 0;
          v2609 = 0;
          v334 = (__int128 *)v2608;
          goto LABEL_2546;
        case 0x130:
          if ((v409 & 0xFFFE000000000002) != 0)
          {
            v1914 = 6;
          }
          else
          {
            v1914 = 6;
            if (*(_BYTE *)(v409 + 5) == 3)
              v1914 = 7;
          }
          v2606[0] = v1914;
          v2606[1] = 0;
          v2607 = 0;
          v334 = (__int128 *)v2606;
          goto LABEL_2546;
        case 0x133:
          if (v409 > 0xFFFDFFFFFFFFFFFFLL
            || v409 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
            && ((v2338 = trunc(COERCE_DOUBLE(v409 - 0x2000000000000)),
                 ((v409 - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
              ? (v2339 = v2338 == COERCE_DOUBLE(v409 - 0x2000000000000))
              : (v2339 = 0),
                v2339))
          {
            v1913 = 7;
          }
          else
          {
            v1913 = 6;
          }
          v2604[0] = v1913;
          v2604[1] = 0;
          v2605 = 0;
          v334 = (__int128 *)v2604;
          goto LABEL_2546;
        case 0x134:
          if ((v409 & 0xFFFE000000000002) != 0)
          {
            v1882 = 6;
          }
          else
          {
            v1882 = 6;
            if (*(unsigned __int8 *)(v409 + 5) > 0x16u)
              v1882 = 7;
          }
          v2602[0] = v1882;
          v2602[1] = 0;
          v2603 = 0;
          v334 = (__int128 *)v2602;
          goto LABEL_2546;
        case 0x135:
          if ((v409 & 0xFFFE000000000002) != 0)
            goto LABEL_2810;
          v1895 = *(unsigned __int8 *)(v409 + 5);
          if (v1895 < 0x17)
            goto LABEL_2810;
          if ((v1895 & 0xFE) == 0x1A)
          {
            v1896 = 7;
          }
          else
          {
            if ((*(_BYTE *)(v409 + 6) & 4) != 0)
            {
              if ((v408[1] & 0xFFFFD7FF00000008) != 0)
                goto LABEL_3371;
LABEL_1884:
              v1906 = *v408;
              v1907 = *v408 != 4 && (*v408 & 2) == 0;
              if (v1907
                && *((_WORD *)v2725[0] + 9) == 295
                && (LOBYTE(v2412) = 1,
                    LOWORD(v2382) = 0,
                    v2414[0] = (WTF *)v2725,
                    v2414[1] = (WTF *)&v2382,
                    v2414[2] = (WTF *)&v2412,
                    JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#1}>(v1906, (uint64_t)v2414), (_BYTE)v2412)&& BYTE1(v2382))
              {
                v377 = v2725[0];
                v1908 = 6;
                if ((_BYTE)v2382)
                  v1908 = 7;
                v2592[0] = v1908;
                v2592[1] = 0;
                v2593 = 0;
                v334 = (__int128 *)v2592;
              }
              else
              {
LABEL_3371:
                v377 = v2725[0];
                switch(*((_WORD *)v2725[0] + 9))
                {
                  case 0x127:
                    v2061 = JSC::speculationFromJSType((JSC *)*((unsigned __int8 *)v2725[0] + 72), (JSType)v2725[0]);
                    v2062 = v408[1];
                    if (v2063)
                    {
                      if ((v2062 & ~v2061) != 0)
                      {
                        v377 = v2725[0];
                        if ((v2062 & v2061) != 0)
                          goto LABEL_1888;
                        v2548[0] = 6;
                        v2548[1] = 0;
                        v2549 = 0;
                        v334 = (__int128 *)v2548;
                      }
                      else
                      {
                        v377 = v2725[0];
                        v2550[0] = 7;
                        v2550[1] = 0;
                        v2551 = 0;
                        v334 = (__int128 *)v2550;
                      }
                    }
                    else
                    {
                      v377 = v2725[0];
                      if ((v2062 & 0x2800FFFFFFF7) != 0)
                        goto LABEL_1888;
                      v2552[0] = 6;
                      v2552[1] = 0;
                      v2553 = 0;
                      v334 = (__int128 *)v2552;
                    }
                    goto LABEL_819;
                  case 0x128:
                    v2064 = v408[1];
                    if (v2064 && (v2064 & 0x40000000000) == 0)
                    {
                      v2590[0] = 6;
                      v2590[1] = 0;
                      v2591 = 0;
                      v334 = (__int128 *)v2590;
                      goto LABEL_819;
                    }
                    if (v2064 != 0x40000000000)
                      goto LABEL_1888;
                    v2588[0] = 7;
                    v2588[1] = 0;
                    v2589 = 0;
                    v334 = (__int128 *)v2588;
                    goto LABEL_819;
                  case 0x12A:
                    if ((v408[1] & 0x20008000000) != 0)
                      goto LABEL_1888;
                    v2586[0] = 6;
                    v2586[1] = 0;
                    v2587 = 0;
                    v334 = (__int128 *)v2586;
                    goto LABEL_819;
                  case 0x12B:
                    v2060 = v408[1];
                    if ((v2060 & 0xFFFFDFFFFA00000CLL) != 0)
                    {
                      if ((v2060 & 0x22000FFFFFF3) != 0)
                        goto LABEL_1888;
                      v2582[0] = 6;
                      v2582[1] = 0;
                      v2583 = 0;
                      v334 = (__int128 *)v2582;
                    }
                    else
                    {
                      v2584[0] = 7;
                      v2584[1] = 0;
                      v2585 = 0;
                      v334 = (__int128 *)v2584;
                    }
                    goto LABEL_819;
                  case 0x12C:
                  case 0x135:
                    v1905 = v408[1];
                    if ((v1905 & 0xFFFFFFFFFFFFFFFBLL) != 0)
                    {
                      if ((v1905 & 0xA000004) != 0)
                        goto LABEL_1888;
                      v2554[0] = 6;
                      v2554[1] = 0;
                      v2555 = 0;
                      v334 = (__int128 *)v2554;
                    }
                    else
                    {
                      v2556[0] = 7;
                      v2556[1] = 0;
                      v2557 = 0;
                      v334 = (__int128 *)v2556;
                    }
                    goto LABEL_819;
                  case 0x12D:
                    v2065 = v408[1];
                    if ((v2065 & 0xFFFFFDFFFFFFFFFFLL) != 0)
                    {
                      if ((v2065 & 0x20000000000) != 0)
                        goto LABEL_1888;
                      v2578[0] = 6;
                      v2578[1] = 0;
                      v2579 = 0;
                      v334 = (__int128 *)v2578;
                    }
                    else
                    {
                      v2580[0] = 7;
                      v2580[1] = 0;
                      v2581 = 0;
                      v334 = (__int128 *)v2580;
                    }
                    goto LABEL_819;
                  case 0x12E:
                    v2066 = v408[1];
                    if ((v2066 & 0xFFFFFEFFFFFFFFFFLL) != 0)
                    {
                      if ((v2066 & 0x10000000000) != 0)
                        goto LABEL_1888;
                      v2574[0] = 6;
                      v2574[1] = 0;
                      v2575 = 0;
                      v334 = (__int128 *)v2574;
                    }
                    else
                    {
                      v2576[0] = 7;
                      v2576[1] = 0;
                      v2577 = 0;
                      v334 = (__int128 *)v2576;
                    }
                    goto LABEL_819;
                  case 0x12F:
                    v2068 = v408[1];
                    if ((v2068 & 0xFFFFFF00FFFFFFFFLL) != 0)
                    {
                      if ((v2068 & 0xFF00000000) != 0)
                        goto LABEL_1888;
                      v2570[0] = 6;
                      v2570[1] = 0;
                      v2571 = 0;
                      v334 = (__int128 *)v2570;
                    }
                    else
                    {
                      v2572[0] = 7;
                      v2572[1] = 0;
                      v2573 = 0;
                      v334 = (__int128 *)v2572;
                    }
                    goto LABEL_819;
                  case 0x130:
                    v2067 = v408[1];
                    if ((v2067 & 0xFFFFF7FFFFFFFFFFLL) != 0)
                    {
                      if ((v2067 & 0x80000000000) != 0)
                        goto LABEL_1888;
                      v2566[0] = 6;
                      v2566[1] = 0;
                      v2567 = 0;
                      v334 = (__int128 *)v2566;
                    }
                    else
                    {
                      v2568[0] = 7;
                      v2568[1] = 0;
                      v2569 = 0;
                      v334 = (__int128 *)v2568;
                    }
                    goto LABEL_819;
                  case 0x133:
                    v2057 = v408[1];
                    if ((v2057 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                    {
                      if ((v2057 & 0xFF00000000) != 0)
                        goto LABEL_1888;
                      v2562[0] = 6;
                      v2562[1] = 0;
                      v2563 = 0;
                      v334 = (__int128 *)v2562;
                    }
                    else
                    {
                      v2564[0] = 7;
                      v2564[1] = 0;
                      v2565 = 0;
                      v334 = (__int128 *)v2564;
                    }
                    goto LABEL_819;
                  case 0x134:
                    v2059 = v408[1];
                    if ((v2059 & 0xFFFFDFFFF0000008) != 0)
                    {
                      if ((v2059 & 0x20000FFFFFF7) != 0)
                        goto LABEL_1888;
                      v2558[0] = 6;
                      v2558[1] = 0;
                      v2559 = 0;
                      v334 = (__int128 *)v2558;
                    }
                    else
                    {
                      v2560[0] = 7;
                      v2560[1] = 0;
                      v2561 = 0;
                      v334 = (__int128 *)v2560;
                    }
                    goto LABEL_819;
                  case 0x137:
                    v2058 = v408[1];
                    if ((v2058 & 0xFFFFFFFFFFFF800FLL) != 0)
                    {
                      if ((v2058 & 0x7FF0) != 0)
                      {
LABEL_1888:
                        v390 = *v16;
                        goto LABEL_347;
                      }
                      v2544[0] = 6;
                      v2544[1] = 0;
                      v2545 = 0;
                      v334 = (__int128 *)v2544;
                    }
                    else
                    {
                      v2546[0] = 7;
                      v2546[1] = 0;
                      v2547 = 0;
                      v334 = (__int128 *)v2546;
                    }
                    break;
                  default:
                    goto LABEL_1888;
                }
              }
              goto LABEL_819;
            }
LABEL_2810:
            v1896 = 6;
          }
          v2600[0] = v1896;
          v2600[1] = 0;
          v2601 = 0;
          v334 = (__int128 *)v2600;
          goto LABEL_2546;
        case 0x136:
          v1892 = JSC::JSValue::isConstructorWithConcurrency<(JSC::Concurrency)1>(v409);
          if (v1892 == 2)
            goto LABEL_1884;
          v377 = v2725[0];
          v1893 = 6;
          if (v1892 == 1)
            v1893 = 7;
          v2598[0] = v1893;
          v2598[1] = 0;
          v2599 = 0;
          v334 = (__int128 *)v2598;
          goto LABEL_819;
        case 0x137:
          if ((v409 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v409 + 5) < 0x17u)
          {
            v1881 = 6;
          }
          else
          {
            v1880 = JSC::JSCell::getObject(v409);
            v1881 = 6;
            if ((*(_BYTE *)(v1880 + 5) - 39) < 0xBu)
              v1881 = 7;
          }
          v2594[0] = v1881;
          v2594[1] = 0;
          v2595 = 0;
          v334 = (__int128 *)v2594;
          goto LABEL_2546;
        default:
          goto LABEL_1884;
      }
    case 0x129:
      JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      goto LABEL_346;
    case 0x131:
      if ((unint64_t)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3] >> 49)
      {
        v2542[0] = 6;
        v2542[1] = 0;
        v2543 = 0;
        v334 = (__int128 *)v2542;
        goto LABEL_2546;
      }
      if ((*(_QWORD *)v12 & 0xFC000000000000) != 0xC4000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x198440B28);
      }
      goto LABEL_346;
    case 0x132:
      if (!JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3])
        goto LABEL_346;
      v2540[0] = 6;
      v2540[1] = 0;
      v2541 = 0;
      v334 = (__int128 *)v2540;
      goto LABEL_2546;
    case 0x138:
      v1445 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      v1452 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      if (v1445)
      {
        v1453 = *(_QWORD **)(v10 + 16);
        v1454 = *(_QWORD *)v10;
        JSC::CodeOrigin::CodeOrigin(&v2539, (const JSC::CodeOrigin *)v9);
        v1455 = (_QWORD *)(v2539 & 0xFFFFFFFF8);
        if ((v2539 & 1) != 0)
          v1455 = (_QWORD *)*v1455;
        if (v1455)
          v1454 = v1455[1];
        v1457 = JSC::jsTypeStringForValueWithConcurrency(v1453, *(_QWORD *)(v1454 + 8), v1445, 1);
        if ((v2539 & 1) != 0 && (v2539 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v2539 & 0xFFFFFFFF8, v1456, v1446, v1447, v1448, v1449, v1450, v1451);
        if (v1457)
        {
          v1458 = v2725[0];
          v1459 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1457, v1446, v1447, v1448, v1449, v1450, v1451);
          v2537 = *v1459;
          v2538 = *((_QWORD *)v1459 + 2);
          JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(v10, v1458, &v2537, v1460, v1461, v1462, v1463, v1464);
          return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
        }
      }
      v1876 = v1452[1];
      if ((v1876 & 0xFF00000000) != 0 && (v1876 & 0xFFFFFF00FFFFFFFFLL) == 0)
      {
        v9 = (uint64_t)v2725[0];
        v2167 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42008), v1446, v1447, v1448, v1449, v1450, v1451);
        v2535 = *v2167;
        v2536 = *((_QWORD *)v2167 + 2);
        v334 = &v2535;
        goto LABEL_2546;
      }
      if (v1876)
        v1878 = (v1876 & 0xFFFFFFFFCFFFFFFFLL) == 0;
      else
        v1878 = 0;
      if (v1878)
      {
        v9 = (uint64_t)v2725[0];
        v2234 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42040), v1446, v1447, v1448, v1449, v1450, v1451);
        v2533 = *v2234;
        v2534 = *((_QWORD *)v2234 + 2);
        v334 = &v2533;
        goto LABEL_2546;
      }
      if ((v1876 & 0xFFFFDFFFFA00000CLL) == 0)
      {
        v9 = (uint64_t)v2725[0];
        v2294 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42024), v1446, v1447, v1448, v1449, v1450, v1451);
        v2531 = *v2294;
        v2532 = *((_QWORD *)v2294 + 2);
        v334 = &v2531;
        goto LABEL_2546;
      }
      if (v1876 > 0xFFFFFFFFFFLL)
      {
        if (v1876 == 0x10000000000)
        {
          v9 = (uint64_t)v2725[0];
          v2324 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 41984), v1446, v1447, v1448, v1449, v1450, v1451);
          v2527 = *v2324;
          v2528 = *((_QWORD *)v2324 + 2);
          v334 = &v2527;
          goto LABEL_2546;
        }
        if (v1876 == 0x80000000000)
        {
          v9 = (uint64_t)v2725[0];
          v2300 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42056), v1446, v1447, v1448, v1449, v1450, v1451);
          v2523 = *v2300;
          v2524 = *((_QWORD *)v2300 + 2);
          v334 = &v2523;
          goto LABEL_2546;
        }
      }
      else
      {
        if (v1876 == 4)
        {
          v9 = (uint64_t)v2725[0];
          v2323 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42000), v1446, v1447, v1448, v1449, v1450, v1451);
          v2529 = *v2323;
          v2530 = *((_QWORD *)v2323 + 2);
          v334 = &v2529;
          goto LABEL_2546;
        }
        if (v1876 == 0x40000000)
        {
          v9 = (uint64_t)v2725[0];
          v1879 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 16) + 42048), v1446, v1447, v1448, v1449, v1450, v1451);
          v2525 = *v1879;
          v2526 = *((_QWORD *)v1879 + 2);
          v334 = &v2525;
          goto LABEL_2546;
        }
      }
      v1438 = v2725[0];
      v1436 = (JSC::DFG::Graph **)*v16;
      v1437 = *v16;
LABEL_1309:
      v316 = JSC::DFG::AtTailAbstractState::forNode(v1437, (uint64_t)v1438);
      v315 = *v1436;
      v317 = 0x10000000;
      goto LABEL_296;
    case 0x139:
    case 0x13A:
      v388 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v389 = JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::BOOLeanResult((uint64_t *)v10, (JSC::CodeOrigin *)v9, (unint64_t *)v388);
      if (v389 == 2)
        goto LABEL_346;
      v1704 = 6;
      if ((v389 == 1) != (*(_WORD *)(v9 + 18) == 314))
        v1704 = 7;
      v2631[0] = v1704;
      v2631[1] = 0;
      v2632 = 0;
      v334 = (__int128 *)v2631;
      goto LABEL_2546;
    case 0x13B:
      v1121 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1122 = v1121[3];
      if (v1122 >> 49)
      {
        v2469[0] = v1121[3];
        v2469[1] = 0;
        v2470 = 0;
        if ((v1122 & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444668);
        }
        v334 = (__int128 *)v2469;
        goto LABEL_2546;
      }
      if ((JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFF6008FFFFFFFLL) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198440B6CLL);
      }
      goto LABEL_1281;
    case 0x13C:
      goto LABEL_1280;
    case 0x13D:
      v1392 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1393 = v1392[3];
      if (!(v1393 >> 49))
      {
LABEL_1280:
        if ((JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFFFFF8FFFFFFFLL) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444CF0);
        }
        goto LABEL_1281;
      }
      v2467[0] = v1392[3];
      v2467[1] = 0;
      v2468 = 0;
      if ((v1393 & 0xFFFE000000000002) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1984446A8);
      }
      v334 = (__int128 *)v2467;
      goto LABEL_2546;
    case 0x13E:
    case 0x145:
      v673 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if (v673 > 0x34)
        goto LABEL_3015;
      if (((1 << v673) & 0x12026001400002) == 0)
      {
        if (((1 << v673) & 0x101) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444FDCLL);
        }
LABEL_3015:
        __break(0xC471u);
        JUMPOUT(0x198445290);
      }
      goto LABEL_620;
    case 0x13F:
      if ((*(_QWORD *)v12 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_990;
      v1123 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1124 = v1123[3];
      if (v1124 >> 49)
      {
        v2465[0] = v1123[3];
        v2465[1] = 0;
        v2466 = 0;
        if ((v1124 & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444808);
        }
        v334 = (__int128 *)v2465;
        goto LABEL_2546;
      }
      if ((JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198441F64);
      }
      goto LABEL_1281;
    case 0x140:
      v1200 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1202 = v1200[3];
      if (!v1202)
        goto LABEL_2257;
      v1203 = v1202 & 0xFFFE000000000002;
      if (v1202 >> 49)
      {
        if (v1203)
        {
          v2461[0] = v1200[3];
          v2461[1] = 0;
          v2462 = 0;
          v334 = (__int128 *)v2461;
          goto LABEL_2546;
        }
      }
      else if (v1203 || *(_BYTE *)(v1202 + 5) != 3)
      {
LABEL_2257:
        if ((JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] & 0xFFFFF78CFFFFFFFFLL) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198441BC8);
        }
LABEL_1281:
        v1394 = *(_QWORD *)(v9 + 24);
LABEL_1282:
        v299 = v1394 & 0xFF00FFFFFFFFFFFFLL;
        v295 = *v16;
LABEL_1283:
        v1395 = JSC::DFG::AtTailAbstractState::forNode(v295, v299);
        v1396 = (JSC::DFG::Graph **)*v16;
        v887 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        v893 = *v1396;
        v894 = (const JSC::DFG::AbstractValue *)v1395;
LABEL_1284:
        JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v887, v893, v894, v888, v889, v890, v891, v892);
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      }
      v2160 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1202, v1201, v21, v22, v23, v24, v25);
      v2463 = *v2160;
      v2464 = *((_QWORD *)v2160 + 2);
      v334 = &v2463;
      goto LABEL_2546;
    case 0x141:
    case 0x144:
      v686 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v687 = (uint64_t)JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      if ((v686[1] & 0xFFFFDFFFF0000008) == 0)
      {
        v846 = v686;
        goto LABEL_1551;
      }
      if (*(_WORD *)(v9 + 18) == 321)
      {
        __break(0xC471u);
        JUMPOUT(0x198444D10);
      }
LABEL_626:
      v689 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v689;
LABEL_627:
      v317 = 0x20000FFFFFF7;
      goto LABEL_296;
    case 0x142:
      v1439 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1439 >> 49)
      {
        v1440 = (double)(int)v1439;
        if (v1439 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v1440 = v1439 - 0x2000000000000;
        v1441 = trunc(v1440 + 0.0);
        if ((*(_QWORD *)&v1441 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v1442 = (int)v1441, v1441 == (double)(int)v1442)
          && ((_DWORD)v1442 || (*(_QWORD *)&v1441 & 0x8000000000000000) == 0))
        {
          v1443 = v1442 | 0xFFFE000000000000;
        }
        else
        {
          v1443 = *(_QWORD *)&v1441 + 0x2000000000000;
        }
        v2372[0] = v1443;
        v2372[1] = 0;
        v2373 = 0;
        if (v1443)
          v1444 = (v1443 & 0xFFFE000000000002) == 0;
        else
          v1444 = 0;
        if (v1444)
        {
          __break(0xC471u);
          JUMPOUT(0x1984446C8);
        }
        v334 = (__int128 *)v2372;
        goto LABEL_2546;
      }
      if ((*(_BYTE *)(v12 + 6) & 0xFC) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198440C4CLL);
      }
      goto LABEL_990;
    case 0x143:
      v1113 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1113 >> 49)
      {
        v1114 = (double)(int)v1113;
        if (v1113 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v1114 = v1113 - 0x2000000000000;
        v1115 = trunc(v1114 + 0.0);
        v1116 = 9.00719925e15;
        if (v1115 <= 9.00719925e15)
          v1116 = v1115;
        if (v1115 <= 0.0)
          v1117 = 0.0;
        else
          v1117 = v1116;
        if ((*(_QWORD *)&v1117 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v1118 = (int)v1117, v1117 == (double)(int)v1118)
          && ((_DWORD)v1118 || (*(_QWORD *)&v1117 & 0x8000000000000000) == 0))
        {
          v1119 = v1118 | 0xFFFE000000000000;
        }
        else
        {
          v1119 = *(_QWORD *)&v1117 + 0x2000000000000;
        }
        v2370[0] = v1119;
        v2370[1] = 0;
        v2371 = 0;
        if (v1119)
          v1120 = (v1119 & 0xFFFE000000000002) == 0;
        else
          v1120 = 0;
        if (v1120)
        {
          __break(0xC471u);
          JUMPOUT(0x198444648);
        }
        v334 = (__int128 *)v2370;
        goto LABEL_2546;
      }
      v1949 = (*(_QWORD *)v12 >> 50) & 0x3FLL;
      if ((_DWORD)v1949 == 1)
        goto LABEL_401;
      if (!(_DWORD)v1949)
      {
        __break(0xC471u);
        JUMPOUT(0x198440AF4);
      }
LABEL_990:
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      if ((*v385 & 1) != 0)
        WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
      *((_DWORD *)v385 + 4) = 0;
      v387 = xmmword_199123990;
      goto LABEL_343;
    case 0x146:
      v1193 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1194 = v1193[3];
      if (v1194 >> 49)
      {
        v2459[0] = v1193[3];
        v2459[1] = 0;
        v2460 = 0;
        if ((v1194 & 0xFFFE000000000002) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198444688);
        }
        v334 = (__int128 *)v2459;
        goto LABEL_2546;
      }
      v1950 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1394 = *(_QWORD *)v12;
      if ((v1950[1] & 0xFFFFFF8CFFFFFFFFLL) == 0)
        goto LABEL_1282;
      if ((v1394 & 0xFC000000000000) != 0x70000000000000)
      {
        __break(0xC471u);
        JUMPOUT(0x1984451CCLL);
      }
LABEL_2000:
      v1951 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1951;
      v317 = 0x300000000;
      goto LABEL_296;
    case 0x147:
      v1173 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1173 < 0xFFFE000000000000 || (v1173 - 37) < 0xFFFFFFDD)
      {
        __break(0xC471u);
        JUMPOUT(0x198444F00);
      }
      goto LABEL_1091;
    case 0x148:
LABEL_1091:
      v677 = *(JSC::Structure **)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16) + 41512);
      v676 = *(JSC::DFG::Graph ***)(v10 + 24);
      goto LABEL_622;
    case 0x149:
      v1285 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
      v1286 = v1285[3];
      if (v1286)
      {
        if ((v1286 & 0xFFFE000000000002) != 0)
          v1287 = 0;
        else
          v1287 = *(_BYTE *)(v1286 + 5) == 26 ? (JSC::JSFunction *)v1285[3] : 0;
        v1288 = JSC::JSFunction::asStringConcurrently(v1287);
        if (v1288)
        {
          v1295 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1288, v1289, v1290, v1291, v1292, v1293, v1294);
          v2457 = *v1295;
          v2458 = *((_QWORD *)v1295 + 2);
          v334 = &v2457;
          goto LABEL_2546;
        }
      }
LABEL_620:
      v674 = 41512;
LABEL_621:
      v675 = *(_QWORD *)(v10 + 16);
      v676 = *(JSC::DFG::Graph ***)(v10 + 24);
      v677 = *(JSC::Structure **)(v675 + v674);
LABEL_622:
      v678 = JSC::DFG::AtTailAbstractState::forNode((uint64_t)v676, v9);
      v684 = *v676;
      v685 = v677;
      goto LABEL_623;
    case 0x14A:
      v1147 = *(_QWORD *)(v10 + 8);
      if (((*(_DWORD *)(*(_QWORD *)(v1147 + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198444E00);
      }
      JSC::CodeOrigin::CodeOrigin(&v2456, (const JSC::CodeOrigin *)v9);
      v1161 = (JSC::JSBoundFunction *)JSC::DFG::Graph::globalObjectFor(v1147, &v2456, v1148, v1149, v1150, v1151, v1152, v1153);
      if ((v2456 & 1) != 0 && (v2456 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2456 & 0xFFFFFFFF8, v1154, v1155, v1156, v1157, v1158, v1159, v1160);
      v1162 = (uint64_t *)((char *)v2725[0] + 24);
      if ((*((_BYTE *)v2725[0] + 56) & 0x10) != 0)
      {
        v2277 = *(_QWORD *)(v10 + 8);
        v2278 = *v1162;
        if (*(_DWORD *)(v2277 + 164) <= v2278)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455DCLL);
        }
        v1162 = (uint64_t *)(*(_QWORD *)(v2277 + 152) + 8 * v2278);
      }
      v1163 = JSC::DFG::AtTailAbstractState::forNode(*v16, *v1162 & 0xFF00FFFFFFFFFFFFLL);
      if ((v1163[1] & 0xFFFFFFFFFFFFFFFBLL) != 0)
        goto LABEL_2953;
      v1165 = *v1163;
      if (*v1163 == 4 || (*v1163 & 2) != 0)
        goto LABEL_2953;
      if ((v1165 & 1) != 0)
      {
        v2072 = v1165 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(_DWORD *)v2072 != 1)
          goto LABEL_2953;
        v1167 = *(JSC::JSGlobalObject **)(v2072 + 8);
      }
      else
      {
        if (v1165 < 4)
          goto LABEL_2953;
        v1167 = (JSC::JSGlobalObject *)(v1165 & 0xFFFFFFFFFFFFFFFCLL);
      }
      if (JSC::JSBoundFunction::canSkipNameAndLengthMaterialization(v1161, v1167, v1164))
      {
        v877 = v2725[0];
        v1168 = *((_DWORD *)v1161 + 242);
        if (v1168)
          v880 = 16 * (v1168 & 0xFFFFFFFE);
        else
          v880 = 0;
        goto LABEL_1082;
      }
LABEL_2953:
      __break(0xC471u);
      JUMPOUT(0x198444B34);
    case 0x14B:
      if ((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        v1170 = *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL;
        if (v1170)
        {
          JSC::DFG::AtTailAbstractState::forNode(*v16, v1170);
          v1171 = *(_QWORD *)(v9 + 40) & 0xFF00FFFFFFFFFFFFLL;
          if (v1171)
            JSC::DFG::AtTailAbstractState::forNode(*v16, v1171);
        }
      }
      v674 = 41512;
      goto LABEL_621;
    case 0x14C:
      if ((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL);
        v1434 = *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL;
        if (v1434)
        {
          JSC::DFG::AtTailAbstractState::forNode(*v16, v1434);
          v1435 = *(_QWORD *)(v9 + 40) & 0xFF00FFFFFFFFFFFFLL;
          if (v1435)
            JSC::DFG::AtTailAbstractState::forNode(*v16, v1435);
        }
      }
      v1436 = (JSC::DFG::Graph **)*v16;
      v1437 = *v16;
      v1438 = (JSC::DFG::Node *)v9;
      goto LABEL_1309;
    case 0x14D:
    case 0x14E:
      v670 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v670)
        v672 = (v670 & 0xFFFE000000000002) == 0;
      else
        v672 = 0;
      if (v672 && *(_BYTE *)(v670 + 5) == 2)
      {
        v1804 = *(_QWORD *)(v670 + 8);
        v1805 = v1804 && (*(_QWORD *)(v670 + 8) & 1) == 0;
        if (v1805 && (*(_BYTE *)(v1804 + 16) & 0x10) != 0)
          JSC::CacheableIdentifier::createFromCell(v670, v671);
      }
      __break(0xC471u);
      JUMPOUT(0x19843BA94);
    case 0x14F:
    case 0x150:
      __break(0xC471u);
      JUMPOUT(0x19843BA10);
    case 0x151:
    case 0x152:
      __break(0xC471u);
      JUMPOUT(0x19843B9F0);
    case 0x155:
      __break(0xC471u);
      JUMPOUT(0x19843DDDCLL);
    case 0x156:
      __break(0xC471u);
      JUMPOUT(0x19843D43CLL);
    case 0x157:
      if (JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[1] != 0x2000000)
        goto LABEL_334;
      v1245 = *(_DWORD *)(v9 + 72);
      if (v1245 == 1)
        goto LABEL_1349;
      if (!v1245)
        goto LABEL_626;
LABEL_334:
      v354 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::makeBytecodeTop((JSC::DFG::AbstractValue *)v354, v355, v356, v357, v358, v359, v360, v361);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x15A:
      goto LABEL_579;
    case 0x15B:
      v1397 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2440, (const JSC::CodeOrigin *)v9);
      v1398 = (_QWORD *)(v2440 & 0xFFFFFFFF8);
      if ((v2440 & 1) != 0)
        v1398 = (_QWORD *)*v1398;
      if (v1398)
        v1397 = v1398[1];
      v1399 = *(_DWORD *)(*(_QWORD *)(v1397 + 8) + 836);
      if (v1399)
        v1400 = (JSC::Structure *)(16 * (v1399 & 0xFFFFFFFE));
      else
        v1400 = 0;
      v1401 = (JSC::DFG::Graph **)*v16;
      v1402 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1402, *v1401, v1400, v1403, v1404, v1405, v1406, v1407);
      v708 = v2440;
      if ((v2440 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x161:
      v1263 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2439, (const JSC::CodeOrigin *)v9);
      v1264 = (_QWORD *)(v2439 & 0xFFFFFFFF8);
      if ((v2439 & 1) != 0)
        v1264 = (_QWORD *)*v1264;
      if (v1264)
        v1263 = v1264[1];
      v1265 = *(_DWORD *)(*(_QWORD *)(v1263 + 8) + 840);
      if (v1265)
        v1266 = (JSC::Structure *)(16 * (v1265 & 0xFFFFFFFE));
      else
        v1266 = 0;
      v1267 = (JSC::DFG::Graph **)*v16;
      v1268 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1268, *v1267, v1266, v1269, v1270, v1271, v1272, v1273);
      v708 = v2439;
      if ((v2439 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x162:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), (JSC::DFG::Node *)v9, v20, v21, v22, v23, v24, v25) & 1) == 0)goto LABEL_626;
      v1381 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2438, (const JSC::CodeOrigin *)v9);
      v1382 = (_QWORD *)(v2438 & 0xFFFFFFFF8);
      if ((v2438 & 1) != 0)
        v1382 = (_QWORD *)*v1382;
      if (v1382)
        v1381 = v1382[1];
      v1383 = *(_DWORD *)(*(_QWORD *)(v1381 + 8) + 844);
      if (v1383)
        v1384 = (JSC::Structure *)(16 * (v1383 & 0xFFFFFFFE));
      else
        v1384 = 0;
      v1385 = (JSC::DFG::Graph **)*v16;
      v1386 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1386, *v1385, v1384, v1387, v1388, v1389, v1390, v1391);
      v708 = v2438;
      if ((v2438 & 1) == 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
LABEL_1293:
      v1408 = v708 & 0xFFFFFFFF8;
      if ((v708 & 0xFFFFFFFF8) == 0)
        return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
      goto LABEL_2006;
    case 0x167:
      v1136 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2433, (const JSC::CodeOrigin *)v9);
      v1144 = (uint64_t *)(v2433 & 0xFFFFFFFF8);
      v1145 = v2433 & 0xFFFFFFFF8;
      if ((v2433 & 1) != 0)
        v1145 = *v1144;
      if (v1145)
        v1136 = *(_QWORD *)(v1145 + 8);
      v1146 = *(int **)(v1136 + 8);
      if ((v2433 & 1) != 0 && v1144)
        WTF::fastFree((unint64_t)v1144, v1137, v1138, v1139, v1140, v1141, v1142, v1143);
      v880 = JSC::JSFunction::selectStructureForNewFuncExp(v1146, **((_QWORD **)v2725[0] + 9));
      goto LABEL_1065;
    case 0x168:
      v1305 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2437, (const JSC::CodeOrigin *)v9);
      v1306 = (_QWORD *)(v2437 & 0xFFFFFFFF8);
      if ((v2437 & 1) != 0)
        v1306 = (_QWORD *)*v1306;
      if (v1306)
        v1305 = v1306[1];
      v1307 = *(_DWORD *)(*(_QWORD *)(v1305 + 8) + 988);
      if (v1307)
        v1308 = (JSC::Structure *)(16 * (v1307 & 0xFFFFFFFE));
      else
        v1308 = 0;
      v1309 = (JSC::DFG::Graph **)*v16;
      v1310 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1310, *v1309, v1308, v1311, v1312, v1313, v1314, v1315);
      v708 = v2437;
      if ((v2437 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x169:
      v1125 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2436, (const JSC::CodeOrigin *)v9);
      v1126 = (_QWORD *)(v2436 & 0xFFFFFFFF8);
      if ((v2436 & 1) != 0)
        v1126 = (_QWORD *)*v1126;
      if (v1126)
        v1125 = v1126[1];
      v1127 = *(_DWORD *)(*(_QWORD *)(v1125 + 8) + 984);
      if (v1127)
        v1128 = (JSC::Structure *)(16 * (v1127 & 0xFFFFFFFE));
      else
        v1128 = 0;
      v1129 = (JSC::DFG::Graph **)*v16;
      v1130 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1130, *v1129, v1128, v1131, v1132, v1133, v1134, v1135);
      v708 = v2436;
      if ((v2436 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x16A:
      v1174 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2435, (const JSC::CodeOrigin *)v9);
      v1175 = (_QWORD *)(v2435 & 0xFFFFFFFF8);
      if ((v2435 & 1) != 0)
        v1175 = (_QWORD *)*v1175;
      if (v1175)
        v1174 = v1175[1];
      v1176 = *(_DWORD *)(*(_QWORD *)(v1174 + 8) + 980);
      if (v1176)
        v1177 = (JSC::Structure *)(16 * (v1176 & 0xFFFFFFFE));
      else
        v1177 = 0;
      v1178 = (JSC::DFG::Graph **)*v16;
      v1179 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1179, *v1178, v1177, v1180, v1181, v1182, v1183, v1184);
      v708 = v2435;
      if ((v2435 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x16B:
      v1224 = *(_QWORD *)v10;
      JSC::CodeOrigin::CodeOrigin(&v2434, (const JSC::CodeOrigin *)v9);
      v1225 = (_QWORD *)(v2434 & 0xFFFFFFFF8);
      if ((v2434 & 1) != 0)
        v1225 = (_QWORD *)*v1225;
      if (v1225)
        v1224 = v1225[1];
      v1226 = *(_DWORD *)(*(_QWORD *)(v1224 + 8) + 968);
      if (v1226)
        v1227 = (JSC::Structure *)(16 * (v1226 & 0xFFFFFFFE));
      else
        v1227 = 0;
      v1228 = (JSC::DFG::Graph **)*v16;
      v1229 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::set((JSC::DFG::AbstractValue *)v1229, *v1228, v1227, v1230, v1231, v1232, v1233, v1234);
      v708 = v2434;
      if ((v2434 & 1) != 0)
        goto LABEL_1293;
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x16D:
      v1336 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v10 + 24), *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::BOOLeanResult((uint64_t *)v10, (JSC::CodeOrigin *)v9, (unint64_t *)v1336);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      __break(0xC471u);
      JUMPOUT(0x19843B064);
    case 0x17E:
    case 0x17F:
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filter<JSC::DFG::Edge>(v10, *(_QWORD *)v12, 0x2800FFFFFFF7uLL, v21, v22, v23, v24, v25);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x180:
      if ((*(_DWORD *)(v9 + 72) & 0xFE0000) != 0 || *(_DWORD *)(v9 + 72) - 7 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x19843DD58);
      }
      goto LABEL_346;
    case 0x181:
      v1185 = (JSC::DFG::Graph **)*v16;
      v1186 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      JSC::DFG::AbstractValue::setType((JSC::DFG::AbstractValue *)v1186, *v1185, 0x2800FFFFFFF7, v1187, v1188, v1189, v1190, v1191);
      __break(0xC471u);
      JUMPOUT(0x19843D788);
    case 0x182:
      v1296 = *(unsigned __int8 *)(v9 + 80);
      if (v1296 == 1)
      {
        v1986 = *(_DWORD *)(v9 + 72);
        v2378[0] = 0xFFFE000000000001;
        v2378[1] = 0;
        v2379 = 0;
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setTupleConstant(v10, (JSC::DFG::Node *)v9, v2378, v21, v22, v23, v24, v25);
        if (v1986 - 7 > 3 || (v1986 & 0xFE0000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984450F8);
        }
      }
      else
      {
        if (v1296 != 2)
          goto LABEL_2980;
        v1297 = *(_QWORD *)(v10 + 8);
        if (*(_DWORD *)(v1297 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198445510);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v1297 + 152) + 8 * *(_QWORD *)v12) & 0xFC000000000000) != 0x20000000000000)
        {
LABEL_2980:
          v2351 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
          if (*(_DWORD *)(*v16 + 36) > v2351)
          {
            v2352 = *(_QWORD *)(*v16 + 24) + 16 * v2351;
            v2353 = -*(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 48);
            if (*(_DWORD *)(v2352 + 12) > v2353)
            {
              v2354 = *(_QWORD *)v2352 + 32 * v2353;
              if ((*(_QWORD *)v2354 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v2354 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
              *(_DWORD *)(v2354 + 16) = 0;
              *(_OWORD *)v2354 = xmmword_199123920;
              *(_QWORD *)(v2354 + 24) = 0;
              __break(0xC471u);
              JUMPOUT(0x198444EC0);
            }
            __break(0xC471u);
            JUMPOUT(0x198445634);
          }
          __break(0xC471u);
          JUMPOUT(0x19844562CLL);
        }
        v2380[0] = 0xFFFE000000000002;
        v2380[1] = 0;
        v2381 = 0;
        JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setTupleConstant(v10, (JSC::DFG::Node *)v9, v2380, v21, v22, v23, v24, v25);
      }
      v1987 = *(unsigned int *)(*(_QWORD *)(*v16 + 40) + 8);
      if (*(_DWORD *)(*v16 + 36) <= v1987)
      {
        __break(0xC471u);
        JUMPOUT(0x198445478);
      }
      v1988 = *(_QWORD *)(*v16 + 24) + 16 * v1987;
      v1989 = ~*(_DWORD *)(((unint64_t)v2725[0] & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_DWORD *)(v1988 + 12) <= v1989)
      {
        __break(0xC471u);
        JUMPOUT(0x198445480);
      }
      v1990 = *(_QWORD *)v1988 + 32 * v1989;
      if ((*(_QWORD *)v1990 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v1990 & 0xFFFFFFFFFFFFFFFCLL, v1298, v1299, v1300, v1301, v1302, v1303, v1304);
      *(_DWORD *)(v1990 + 16) = 0;
      *(_OWORD *)v1990 = xmmword_199123920;
      *(_QWORD *)(v1990 + 24) = 0;
      v363 = v2725[0];
      v362 = *v16;
LABEL_336:
      v364 = JSC::DFG::AtTailAbstractState::forNode(v362, (uint64_t)v363);
      JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)v364, v365, v366, v367, v368, v369, v370, v371);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x183:
      v1172 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1172;
      v317 = 0x10000000;
      goto LABEL_296;
    case 0x184:
      __break(0xC471u);
      JUMPOUT(0x19843D7A8);
    case 0x185:
    case 0x186:
      __break(0xC471u);
      JUMPOUT(0x19843BA30);
    case 0x187:
      __break(0xC471u);
      JUMPOUT(0x19843D818);
    case 0x188:
      v1195 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (!v1195)
        goto LABEL_401;
      if ((v1195 + 0x2000000000000) >> 50)
      {
        v2346 = (int)COERCE_DOUBLE(v1195 - 0x2000000000000);
        if (COERCE_DOUBLE(v1195 - 0x2000000000000) == (double)(int)v2346)
          v1195 = v2346 | 0xFFFE000000000000;
      }
      if ((v1195 & 0xFFFE000000000002) != 0)
        goto LABEL_2958;
      v1196 = *(unsigned __int8 *)(v1195 + 5);
      if (v1196 == 2)
      {
        v1197 = *(_QWORD *)(v1195 + 8);
        if ((v1197 & 1) != 0)
          goto LABEL_401;
        v1198 = !v1197 || *(_DWORD *)(v1197 + 4) > 0x2800u;
        if (v1198)
          goto LABEL_401;
        LODWORD(v1195) = WTF::StringImpl::concurrentHash(*(WTF::StringImpl **)(v1195 + 8));
      }
      else if (v1196 == 3)
      {
        v1195 = JSC::JSBigInt::concurrentHash((JSC::JSBigInt *)v1195);
        if ((v1195 & 0xFF00000000) == 0)
          goto LABEL_401;
      }
      else
      {
LABEL_2958:
        v2348 = (v1195 + ~(v1195 << 32)) ^ ((v1195 + ~(v1195 << 32)) >> 22);
        v2349 = 9 * ((v2348 + ~(v2348 << 13)) ^ ((v2348 + ~(v2348 << 13)) >> 8));
        v2350 = (v2349 ^ (v2349 >> 15)) + ~((v2349 ^ (v2349 >> 15)) << 27);
        LODWORD(v1195) = (v2350 >> 31) ^ v2350;
      }
      v2629[0] = v1195 | 0xFFFE000000000000;
      v2629[1] = 0;
      v2630 = 0;
      v334 = (__int128 *)v2629;
      goto LABEL_2546;
    case 0x189:
      v1235 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1235)
      {
        if ((unint64_t)(v1235 + 0x2000000000000) >> 50)
        {
          v2347 = (int)COERCE_DOUBLE(v1235 - 0x2000000000000);
          if (COERCE_DOUBLE(v1235 - 0x2000000000000) == (double)(int)v2347)
            v1235 = v2347 | 0xFFFE000000000000;
        }
        v1242 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1235, v1236, v1237, v1238, v1239, v1240, v1241);
        v2627 = *v1242;
        v2628 = *((_QWORD *)v1242 + 2);
        v334 = &v2627;
        goto LABEL_2546;
      }
      if ((*((_WORD *)JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) + 6) & 0x8FC) != 0)
      {
LABEL_2202:
        v780 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
        goto LABEL_2203;
      }
      v958 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL);
      v687 = (uint64_t)JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
LABEL_1550:
      v846 = v958;
LABEL_1551:
      JSC::DFG::AbstractValue::operator=(v687, v846, v688, v21, v22, v23, v24, v25);
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x18C:
      v1192 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1192;
      v317 = 0x10000000000;
      goto LABEL_296;
    case 0x18F:
    case 0x190:
LABEL_301:
      v326 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v326;
      v317 = 0x80000000;
      goto LABEL_296;
    case 0x19B:
      __break(0xC471u);
      JUMPOUT(0x19843DACCLL);
    case 0x19C:
    case 0x19D:
      goto LABEL_572;
    case 0x19F:
      if ((*(_BYTE *)(v9 + 56) & 0x10) != 0)
      {
        v2275 = *(_QWORD *)(v10 + 8);
        if (*(_DWORD *)(v2275 + 164) <= *(_QWORD *)v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1984455CCLL);
        }
        v12 = *(_QWORD *)(v2275 + 152) + 8 * *(_QWORD *)v12;
      }
      v1210 = JSC::DFG::AtTailAbstractState::forNode(*v16, *(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL)[3];
      if (v1210)
        v1211 = (v1210 & 0xFFFE000000000002) == 0;
      else
        v1211 = 0;
      if (!v1211 || *(_BYTE *)(v1210 + 5) != 2)
        goto LABEL_572;
      v1212 = *(WTF::StringImpl **)(v1210 + 8);
      if (!v1212 || (*(_QWORD *)(v1210 + 8) & 1) != 0)
        goto LABEL_572;
      if (!*((_DWORD *)v1212 + 1))
        goto LABEL_1145;
      v1214 = 0;
      while (1)
      {
        v1215 = WTF::StringImpl::at(v1212, v1214);
        if (v1215 > 0x7F || v1215 - 91 >= 0xFFFFFFE6)
          break;
        if (++v1214 >= *((_DWORD *)v1212 + 1))
        {
LABEL_1145:
          v1216 = JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v1210, v1204, v1205, v1206, v1207, v1208, v1209);
          v2625 = *v1216;
          v2626 = *((_QWORD *)v1216 + 2);
          v334 = &v2625;
          goto LABEL_2546;
        }
      }
LABEL_572:
      v635 = (JSC::DFG::Graph **)*v16;
      v636 = *v16;
      v637 = (JSC::DFG::Node *)v9;
LABEL_573:
      v316 = JSC::DFG::AtTailAbstractState::forNode(v636, (uint64_t)v637);
      v315 = *v635;
      goto LABEL_295;
    case 0x1A0:
      v1256 = *(_QWORD *)(v9 + 72);
      v1257 = *(_QWORD *)(v1256 + 16);
      if (!v1257 || *(unsigned __int16 *)(v1257 + 24) != *(unsigned __int16 *)(v1257 + 26))
      {
        __break(0xC471u);
        JUMPOUT(0x198444BECLL);
      }
      v1258 = *(_QWORD *)(v1256 + 8);
      if (!v1258)
        goto LABEL_334;
      v1259 = *(_QWORD *)(v1258 + 16);
      v1260 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1260;
      v317 = v1259;
      goto LABEL_296;
    case 0x1A1:
      v1243 = *(_QWORD *)(v9 + 72);
      if (*(unsigned __int16 *)(v1243 + 48) != *(unsigned __int16 *)(v1243 + 50))
      {
        __break(0xC471u);
        JUMPOUT(0x198444E20);
      }
      v1244 = (JSC::DFG::Graph **)*v16;
      v316 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v315 = *v1244;
      v317 = *(_QWORD *)(v1243 + 16);
      goto LABEL_296;
    case 0x1A2:
      v1247 = *(unsigned int *)(v9 + 72);
      v1248 = *(_QWORD *)(v10 + 8);
      if (*(_DWORD *)(v1248 + 460) <= v1247)
      {
        __break(0xC471u);
        JUMPOUT(0x198445470);
      }
      v1249 = *(_QWORD *)(v1248 + 448) + 16 * v1247;
      if (*(_DWORD *)(v1249 + 12))
      {
        v1250 = 0;
        v1251 = 0;
        do
        {
          v1252 = *(_QWORD *)(*(_QWORD *)(*v16 + 40) + 144);
          v1253 = (JSC::DFG::AbstractValue *)(v1252 + v1250);
          switch(*(_BYTE *)(*(_QWORD *)v1249 + v1251))
          {
            case 1:
              if ((*(_QWORD *)v1253 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v1253 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
              v1254 = v1252 + v1250;
              *(_DWORD *)(v1252 + v1250 + 16) = 0;
              v1255 = xmmword_199123920;
              goto LABEL_1181;
            case 4:
              JSC::DFG::AbstractValue::setType(v1253, *(JSC::DFG::Graph **)(v10 + 8), 0x2C00FFFFFFF7, v21, v22, v23, v24, v25);
              break;
            case 5:
              if ((*(_QWORD *)v1253 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v1253 & 0xFFFFFFFFFFFFFFFCLL, v19, v20, v21, v22, v23, v24, v25);
              v1254 = v1252 + v1250;
              *(_DWORD *)(v1252 + v1250 + 16) = 0;
              v1255 = xmmword_199123930;
LABEL_1181:
              *(_OWORD *)v1254 = v1255;
              *(_QWORD *)(v1254 + 24) = 0;
              break;
            case 6:
              JSC::DFG::AbstractValue::makeBytecodeTop(v1253, v19, v20, v21, v22, v23, v24, v25);
              break;
            default:
              JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 8), v2725[0], (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0x1E8, "BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]", "Bad flush format for argument");
              __break(0xC471u);
              JUMPOUT(0x198444B0CLL);
          }
          ++v1251;
          v1250 += 32;
        }
        while (v1251 < *(unsigned int *)(v1249 + 12));
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
    case 0x1A3:
      v1246 = *(unsigned __int8 *)(v9 + 72);
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v386 = *v385;
      if (v1246 == 165)
        goto LABEL_402;
      if ((v386 & 1) != 0)
LABEL_1687:
        WTF::fastFree(v386 & 0xFFFFFFFFFFFFFFFCLL, v378, v379, v380, v381, v382, v383, v384);
LABEL_1170:
      *((_DWORD *)v385 + 4) = 0;
      v387 = xmmword_199123980;
      goto LABEL_343;
    case 0x1AB:
      v1199 = *(_QWORD *)(v9 + 72);
      if ((v1199 & 0xFC) == 0)
        goto LABEL_401;
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v386 = *v385;
      if ((v1199 & 0x100) == 0)
        goto LABEL_1621;
      goto LABEL_402;
    case 0x1AC:
    case 0x1AF:
    case 0x1B0:
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      v654 = *v385;
      if ((*v385 & 1) == 0)
        goto LABEL_581;
      goto LABEL_2212;
    case 0x1AE:
      v385 = JSC::DFG::AtTailAbstractState::forNode(*v16, v9);
      if ((*v385 & 1) != 0)
        WTF::fastFree(*v385 & 0xFFFFFFFFFFFFFFFCLL, v1217, v1218, v1219, v1220, v1221, v1222, v1223);
      *((_DWORD *)v385 + 4) = 0;
      v387 = xmmword_1991239F0;
      goto LABEL_343;
    default:
      return *(unsigned __int8 *)(*(_QWORD *)(*v16 + 40) + 17);
  }
}

uint64_t JSC::DFG::typeFilterFor(unsigned int a1)
{
  uint64_t result;

  if (a1 < 0x35)
    return qword_199155EF8[(char)a1];
  result = 210;
  __break(0xC471u);
  return result;
}

{
  uint64_t result;

  if (a1 < 8)
    return qword_1991560A0[(char)a1];
  result = 88;
  __break(0xC471u);
  return result;
}

unint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(uint64_t a1, JSC::DFG::Node *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v14;
  unsigned int v15;
  JSC::DFG::Node **v16;
  JSC::DFG::Node *v17;
  int v18;
  unint64_t v19;
  __int128 v21;
  uint64_t v22;

  v22 = *((_QWORD *)a3 + 2);
  v21 = *a3;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v8 + 20) <= v10)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x1984460A0);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v10);
  if (!v12)
    goto LABEL_10;
  v14 = *(_DWORD *)(v12 - 8);
  v15 = v14 & a2;
  v16 = (JSC::DFG::Node **)(v12 + 40 * (v14 & a2));
  v17 = *v16;
  if (*v16 != a2)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v14;
      v16 = (JSC::DFG::Node **)(v12 + 40 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == a2)
        goto LABEL_7;
    }
    v16 = (JSC::DFG::Node **)(v12 + 40 * *(unsigned int *)(v12 - 4));
  }
LABEL_7:
  if (v16 == (JSC::DFG::Node **)(v12 + 40 * *(unsigned int *)(v12 - 4)))
  {
LABEL_10:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_12;
  }
  v19 = (unint64_t)(v16 + 1);
  JSC::DFG::AbstractValue::set((uint64_t)(v16 + 1), *(_QWORD **)(a1 + 8), (unint64_t *)&v21, *(unsigned __int8 *)(v9 + 13), a5, a6, a7, a8);
  return JSC::DFG::AbstractValue::fixTypeForRepresentation(v19, *(JSC::DFG::Graph **)(a1 + 8), a2);
}

uint64_t JSC::DFG::AtTailAbstractState::operand(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (HIDWORD(a2) == 2)
  {
    v2 = *(unsigned int *)(a1 + 164);
    v3 = *(unsigned int *)(a1 + 160) + (uint64_t)(int)a2;
  }
  else
  {
    if ((a2 & 0x80000000) == 0)
    {
      v4 = (int)a2 - 5;
      return *(_QWORD *)(a1 + 144) + 32 * v4;
    }
    v3 = a2 ^ 0xFFFFFFFFLL;
    v2 = *(unsigned int *)(a1 + 160);
  }
  v4 = v3 + v2;
  return *(_QWORD *)(a1 + 144) + 32 * v4;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantBinaryBitwiseOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(v8 + 40) + 8);
  if (*(_DWORD *)(v8 + 20) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198446394);
  }
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9);
  if (!v11)
    goto LABEL_31;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = v12 & v10;
  v14 = (uint64_t *)(v11 + 40 * (v12 & v10));
  v15 = *v14;
  if (*v14 != (v10 & 0xFF00FFFFFFFFFFFFLL))
  {
    v16 = 1;
    while (v15)
    {
      v13 = (v13 + v16) & v12;
      v14 = (uint64_t *)(v11 + 40 * v13);
      v15 = *v14;
      ++v16;
      if (*v14 == (v10 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v14 = (uint64_t *)(v11 + 40 * *(unsigned int *)(v11 - 4));
  }
LABEL_7:
  v17 = (uint64_t *)(v11 + 40 * *(unsigned int *)(v11 - 4));
  if (v14 == v17)
  {
LABEL_31:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x19844638CLL);
  }
  v18 = v14[4];
  v19 = *(_QWORD *)(a2 + 32);
  v20 = v12 & v19;
  v21 = (uint64_t *)(v11 + 40 * (v12 & v19));
  v22 = *v21;
  if (*v21 != (v19 & 0xFF00FFFFFFFFFFFFLL))
  {
    v23 = 1;
    a4 = 40;
    while (v22)
    {
      v20 = (v20 + v23) & v12;
      v21 = (uint64_t *)(v11 + 40 * v20);
      v22 = *v21;
      ++v23;
      if (*v21 == (v19 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_12;
    }
LABEL_29:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v19 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446330);
  }
LABEL_12:
  if (v21 == v17)
    goto LABEL_29;
  if (!v18)
    return 0;
  v25 = v21[4];
  if (v25 < 0xFFFE000000000000 || v18 < 0xFFFE000000000000)
    return 0;
  switch(*(_WORD *)(a2 + 18))
  {
    case '+':
    case ',':
      v33 = v18 & v25 | 0xFFFE000000000000;
      v27 = &v33;
      break;
    case '-':
    case '.':
      v32 = v25 | v18 | 0xFFFE000000000000;
      v27 = &v32;
      break;
    case '/':
    case '0':
      v31 = v25 ^ v18 | 0xFFFE000000000000;
      v27 = &v31;
      break;
    case '1':
    case '2':
      v29 = ((_DWORD)v18 << v25) | 0xFFFE000000000000;
      v27 = &v29;
      break;
    case '3':
    case '4':
      v30 = ((int)v18 >> v25) | 0xFFFE000000000000;
      v27 = &v30;
      break;
    case '5':
      v28 = (v18 >> v25) | 0xFFFE000000000000;
      v27 = &v28;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984463B4);
  }
  v27[1] = 0;
  *((_DWORD *)v27 + 4) = 0;
  JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(a1, (JSC::DFG::Node *)a2, (__int128 *)v27, a4, a5, a6, a7, a8);
  return 1;
}

void JSC::DFG::AbstractValue::merge(JSC::DFG::AbstractValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)this;
  *((_QWORD *)this + 1) |= 0x20000FFFFFF7uLL;
  if ((v9 & 1) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = 4;
  *((_DWORD *)this + 4) = -21020677;
  *((_QWORD *)this + 3) = 0;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantDivOp(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  __int128 *v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  double v41;
  double v42;
  _QWORD v44[2];
  int v45;
  _QWORD v46[2];
  int v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  int v53;

  v4 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL)[3];
  v10 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL)[3];
  if (v4)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
    return 0;
  v13 = *(unsigned __int16 *)(a2 + 18);
  if (v4 < 0xFFFE000000000000)
  {
    if (v4 >> 49)
      v23 = v10 >> 49 == 0;
    else
      v23 = 1;
    if (v23)
      return 0;
  }
  else
  {
    if (v10 >= 0xFFFE000000000000)
    {
      if (v13 == 88 || v13 == 68)
        v14 = (double)(int)v4 / (double)(int)v10;
      else
        v14 = fmod((double)(int)v4, (double)(int)v10);
      if ((v13 - 68) < 3 || (v13 - 55) <= 0xB && ((1 << (v13 - 55)) & 0xE85) != 0)
      {
        v15 = *(_DWORD *)(a2 + 72);
        if (v15 == 1)
        {
          v16 = *(_QWORD *)&v14;
          v17 = (*(_QWORD *)&v14 >> 52) & 0x7FFLL;
          v18 = (*(_QWORD *)&v14 >> 52) + 1;
          v14 = 0.0;
          if ((v17 - 1023) <= 0x53)
          {
            v19 = (unint64_t)v16 >> (51 - v17);
            if (v17 > 0x433)
              LODWORD(v19) = v16 << (v17 - 51);
            v20 = (((1 << v18) - 1) & v19) + (1 << v18);
            if (v17 >= 0x41F)
              v21 = v19;
            else
              v21 = v20;
            if (v16 >= 0)
              v22 = v21;
            else
              v22 = -v21;
            v14 = (double)v22;
          }
        }
        else if ((v15 - 3) >= 0xFFFFFFFE)
        {
          v14 = v14 + 0.0;
        }
      }
      if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v31 = (int)v14;
        if (v14 == (double)(int)v31 && ((_DWORD)v31 || (*(_QWORD *)&v14 & 0x8000000000000000) == 0))
        {
          v32 = v31 | 0xFFFE000000000000;
LABEL_54:
          v52[0] = v32;
          v52[1] = 0;
          v30 = (__int128 *)v52;
          v53 = 0;
          goto LABEL_55;
        }
      }
      v32 = *(_QWORD *)&v14 + 0x2000000000000;
      if ((unint64_t)(*(_QWORD *)&v14 + 0x2000000000000) >= 0xFFFE000000000000)
        goto LABEL_54;
      return 0;
    }
    if (!(v10 >> 49))
      return 0;
  }
  v24 = (double)(int)v4;
  if (v13 == 68)
  {
    if (v4 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v24 = v4 - 0x2000000000000;
    v33 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v33 = v10 - 0x2000000000000;
    v34 = v24 / v33;
    v48[0] = *(_QWORD *)&v34 + 0x2000000000000;
    v48[1] = 0;
    v49 = 0;
    if (v34 != NAN && ((*(_QWORD *)&v34 + 0x2000000000000) & 0xFFFE000000000002) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198446840);
    }
    v30 = (__int128 *)v48;
    goto LABEL_55;
  }
  if (v13 == 90)
  {
    if (v4 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v24 = v4 - 0x2000000000000;
    v36 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v36 = v10 - 0x2000000000000;
    v37 = fmod(v24, v36);
    if ((*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v38 = (int)v37, v37 == (double)(int)v38)
      && ((_DWORD)v38 || (*(_QWORD *)&v37 & 0x8000000000000000) == 0))
    {
      v39 = v38 | 0xFFFE000000000000;
    }
    else
    {
      v39 = *(_QWORD *)&v37 + 0x2000000000000;
    }
    v46[0] = v39;
    v46[1] = 0;
    v47 = 0;
    if (v39)
      v40 = (v39 & 0xFFFE000000000002) == 0;
    else
      v40 = 0;
    if (v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198446860);
    }
    v30 = (__int128 *)v46;
    goto LABEL_55;
  }
  if (v13 != 88)
  {
    if (v4 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v24 = v4 - 0x2000000000000;
    v41 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v41 = v10 - 0x2000000000000;
    v42 = fmod(v24, v41);
    v44[0] = *(_QWORD *)&v42 + 0x2000000000000;
    v44[1] = 0;
    v45 = 0;
    if (v42 == NAN || ((*(_QWORD *)&v42 + 0x2000000000000) & 0xFFFE000000000002) != 0)
    {
      v30 = (__int128 *)v44;
      goto LABEL_55;
    }
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x198446820);
  }
  if (v4 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v24 = v4 - 0x2000000000000;
  v25 = (double)(int)v10;
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v25 = v10 - 0x2000000000000;
  v26 = v24 / v25;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v27 = (int)v26, v26 == (double)(int)v27)
    && ((_DWORD)v27 || (*(_QWORD *)&v26 & 0x8000000000000000) == 0))
  {
    v28 = v27 | 0xFFFE000000000000;
  }
  else
  {
    v28 = *(_QWORD *)&v26 + 0x2000000000000;
  }
  v50[0] = v28;
  v50[1] = 0;
  v51 = 0;
  if (v28)
    v29 = (v28 & 0xFFFE000000000002) == 0;
  else
    v29 = 0;
  if (v29)
    goto LABEL_99;
  v30 = (__int128 *)v50;
LABEL_55:
  JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(a1, (JSC::DFG::Node *)a2, v30, v5, v6, v7, v8, v9);
  return 1;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#1}>(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  JSC::DFG::Node *v30;
  int v31;
  uint64_t v32;
  double v33;
  double v34;
  unsigned int v36;
  uint64_t *v37;
  JSC::DFG::Node *v38;
  int v39;
  unint64_t v40;
  unint64_t v41[2];
  int v42;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v8 + 20) <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198446CA4);
  }
  v12 = *((_QWORD *)a2 + 3);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v10);
  if (!v13)
    goto LABEL_44;
  v15 = v12 & 0xFF00FFFFFFFFFFFFLL;
  v16 = *(_DWORD *)(v13 - 8);
  v17 = v16 & v12;
  v18 = (uint64_t *)(v13 + 40 * (v16 & v12));
  v19 = *v18;
  v20 = v18;
  if (*v18 != (v12 & 0xFF00FFFFFFFFFFFFLL))
  {
    v21 = 1;
    a4 = *v18;
    a3 = v16 & v12;
    while (a4)
    {
      a3 = ((_DWORD)a3 + v21) & v16;
      v20 = (uint64_t *)(v13 + 40 * a3);
      a4 = *v20;
      ++v21;
      if (*v20 == v15)
        goto LABEL_7;
    }
    v20 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  }
LABEL_7:
  v22 = 40;
  v23 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  if (v20 == v23)
  {
LABEL_44:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v12 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446B5CLL);
  }
  v24 = v20[4];
  if (!v24)
    goto LABEL_9;
  if (v24 >> 49)
  {
    v33 = (double)(int)v24;
    if (v24 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v33 = v24 - 0x2000000000000;
    goto LABEL_32;
  }
  v22 = v24 & 0xFFFFFFFFFFFFFFFELL;
  if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v33 = 0.0;
    if (v24 == 7)
      v33 = 1.0;
LABEL_32:
    v34 = sqrt(v33);
    if (v34 != NAN && ((*(_QWORD *)&v34 + 0x2000000000000) & 0xFFFE000000000002) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198446C10);
    }
    v41[0] = *(_QWORD *)&v34 + 0x2000000000000;
    v41[1] = 0;
    v42 = 0;
    v36 = v16 & a2;
    v37 = (uint64_t *)(v13 + 40 * (v16 & a2));
    v38 = (JSC::DFG::Node *)*v37;
    if ((JSC::DFG::Node *)*v37 == a2)
    {
LABEL_40:
      if (v37 != v23)
      {
        v40 = (unint64_t)(v37 + 1);
        JSC::DFG::AbstractValue::set((uint64_t)(v37 + 1), *(_QWORD **)(a1 + 8), v41, *(unsigned __int8 *)(v9 + 13), a5, a6, a7, a8);
        JSC::DFG::AbstractValue::fixTypeForRepresentation(v40, *(JSC::DFG::Graph **)(a1 + 8), a2);
        return;
      }
    }
    else
    {
      v39 = 1;
      while (v38)
      {
        v36 = (v36 + v39) & v16;
        v37 = (uint64_t *)(v13 + 40 * v36);
        v38 = (JSC::DFG::Node *)*v37;
        ++v39;
        if ((JSC::DFG::Node *)*v37 == a2)
          goto LABEL_40;
      }
    }
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446C9CLL);
  }
  if (v24 == 10)
  {
    v33 = NAN;
    goto LABEL_32;
  }
  if (v24 == 2)
  {
    v33 = 0.0;
    goto LABEL_32;
  }
LABEL_9:
  if ((v12 & 0xFC000000000000) != 0xC4000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x198446C54);
  }
  if (v19 != v15)
  {
    v25 = 1;
    while (v19)
    {
      v17 = (v17 + v25) & v16;
      v18 = (uint64_t *)(v13 + 40 * v17);
      v19 = *v18;
      ++v25;
      if (*v18 == v15)
        goto LABEL_14;
    }
LABEL_45:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v12 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446BA8);
  }
LABEL_14:
  if (v18 == v23)
    goto LABEL_45;
  v26 = v18[2];
  if ((v26 & 0x8000000000) != 0)
    v26 |= 0xC000000000uLL;
  if ((v26 & 0x3000000000) != 0)
    v27 = v26 | 0x7000000000;
  else
    v27 = v26;
  v28 = v16 & a2;
  v29 = v13 + 40 * (v16 & a2);
  v30 = *(JSC::DFG::Node **)v29;
  if (*(JSC::DFG::Node **)v29 != a2)
  {
    v31 = 1;
    while (v30)
    {
      v28 = (v28 + v31) & v16;
      v29 = v13 + 40 * v28;
      v30 = *(JSC::DFG::Node **)v29;
      ++v31;
      if (*(JSC::DFG::Node **)v29 == a2)
        goto LABEL_24;
    }
LABEL_46:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446BF0);
  }
LABEL_24:
  if ((uint64_t *)v29 == v23)
    goto LABEL_46;
  if ((v27 & 0x2800FFFFFFF7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198446B00);
  }
  v32 = *(_QWORD *)(v29 + 8);
  if ((v32 & 1) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, (void *)v22, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 32) = 0;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double)#2}>(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  JSC::DFG::Node *v30;
  int v31;
  uint64_t v32;
  double v33;
  float v34;
  double v35;
  unsigned int v37;
  uint64_t *v38;
  JSC::DFG::Node *v39;
  int v40;
  unint64_t v41;
  unint64_t v42[2];
  int v43;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v8 + 20) <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1984470ECLL);
  }
  v12 = *((_QWORD *)a2 + 3);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v10);
  if (!v13)
    goto LABEL_44;
  v15 = v12 & 0xFF00FFFFFFFFFFFFLL;
  v16 = *(_DWORD *)(v13 - 8);
  v17 = v16 & v12;
  v18 = (uint64_t *)(v13 + 40 * (v16 & v12));
  v19 = *v18;
  v20 = v18;
  if (*v18 != (v12 & 0xFF00FFFFFFFFFFFFLL))
  {
    v21 = 1;
    a4 = *v18;
    a3 = v16 & v12;
    while (a4)
    {
      a3 = ((_DWORD)a3 + v21) & v16;
      v20 = (uint64_t *)(v13 + 40 * a3);
      a4 = *v20;
      ++v21;
      if (*v20 == v15)
        goto LABEL_7;
    }
    v20 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  }
LABEL_7:
  v22 = 40;
  v23 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  if (v20 == v23)
  {
LABEL_44:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v12 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446FA4);
  }
  v24 = v20[4];
  if (!v24)
    goto LABEL_9;
  if (v24 >> 49)
  {
    v33 = (double)(int)v24;
    if (v24 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v33 = v24 - 0x2000000000000;
    goto LABEL_32;
  }
  v22 = v24 & 0xFFFFFFFFFFFFFFFELL;
  if ((v24 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v33 = 0.0;
    if (v24 == 7)
      v33 = 1.0;
LABEL_32:
    v34 = v33;
    v35 = v34;
    if (v35 != NAN && ((*(_QWORD *)&v35 + 0x2000000000000) & 0xFFFE000000000002) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198447058);
    }
    v42[0] = *(_QWORD *)&v35 + 0x2000000000000;
    v42[1] = 0;
    v43 = 0;
    v37 = v16 & a2;
    v38 = (uint64_t *)(v13 + 40 * (v16 & a2));
    v39 = (JSC::DFG::Node *)*v38;
    if ((JSC::DFG::Node *)*v38 == a2)
    {
LABEL_40:
      if (v38 != v23)
      {
        v41 = (unint64_t)(v38 + 1);
        JSC::DFG::AbstractValue::set((uint64_t)(v38 + 1), *(_QWORD **)(a1 + 8), v42, *(unsigned __int8 *)(v9 + 13), a5, a6, a7, a8);
        JSC::DFG::AbstractValue::fixTypeForRepresentation(v41, *(JSC::DFG::Graph **)(a1 + 8), a2);
        return;
      }
    }
    else
    {
      v40 = 1;
      while (v39)
      {
        v37 = (v37 + v40) & v16;
        v38 = (uint64_t *)(v13 + 40 * v37);
        v39 = (JSC::DFG::Node *)*v38;
        ++v40;
        if ((JSC::DFG::Node *)*v38 == a2)
          goto LABEL_40;
      }
    }
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x1984470E4);
  }
  if (v24 == 10)
  {
    v33 = NAN;
    goto LABEL_32;
  }
  if (v24 == 2)
  {
    v33 = 0.0;
    goto LABEL_32;
  }
LABEL_9:
  if ((v12 & 0xFC000000000000) != 0xC4000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x19844709CLL);
  }
  if (v19 != v15)
  {
    v25 = 1;
    while (v19)
    {
      v17 = (v17 + v25) & v16;
      v18 = (uint64_t *)(v13 + 40 * v17);
      v19 = *v18;
      ++v25;
      if (*v18 == v15)
        goto LABEL_14;
    }
LABEL_45:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(v12 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198446FF0);
  }
LABEL_14:
  if (v18 == v23)
    goto LABEL_45;
  v26 = v18[2];
  if ((v26 & 0x8000000000) != 0)
    v26 |= 0xC000000000uLL;
  if ((v26 & 0x3000000000) != 0)
    v27 = v26 | 0x7000000000;
  else
    v27 = v26;
  v28 = v16 & a2;
  v29 = v13 + 40 * (v16 & a2);
  v30 = *(JSC::DFG::Node **)v29;
  if (*(JSC::DFG::Node **)v29 != a2)
  {
    v31 = 1;
    while (v30)
    {
      v28 = (v28 + v31) & v16;
      v29 = v13 + 40 * v28;
      v30 = *(JSC::DFG::Node **)v29;
      ++v31;
      if (*(JSC::DFG::Node **)v29 == a2)
        goto LABEL_24;
    }
LABEL_46:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198447038);
  }
LABEL_24:
  if ((uint64_t *)v29 == v23)
    goto LABEL_46;
  if ((v27 & 0x2800FFFFFFF7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198446F48);
  }
  v32 = *(_QWORD *)(v29 + 8);
  if ((v32 & 1) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFFFFFFFFFCLL, (void *)v22, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 32) = 0;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeDoubleUnaryOpEffects<double (*)(double)>(uint64_t a1, JSC::DFG::Node *a2, double (**a3)(double))
{
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL)[3];
  JSC::JSValue::toNumberFromPrimitive((JSC::JSValue *)&v29);
  if (v7)
  {
    v25 = (*a3)(v6);
    v27 = (unint64_t)(*(_QWORD *)&v25 + 0x2000000000000);
    v28 = 0;
    if (v25 == NAN || ((*(_QWORD *)&v25 + 0x2000000000000) & 0xFFFE000000000002) != 0)
    {
      JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setConstant(a1, a2, &v27, v20, v21, v22, v23, v24);
      return;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x198447244);
  }
  v8 = *((_QWORD *)a2 + 3);
  if ((v8 & 0xFC000000000000) != 0xC4000000000000)
    goto LABEL_19;
  v9 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), v8 & 0xFF00FFFFFFFFFFFFLL)[1];
  if ((v9 & 0x8000000000) != 0)
    v9 |= 0xC000000000uLL;
  if ((v9 & 0x3000000000) != 0)
    v10 = v9 | 0x7000000000;
  else
    v10 = v9;
  v11 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), (uint64_t)a2);
  if ((v10 & 0x2800FFFFFFF7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198447270);
  }
  v19 = v11;
  if ((*v11 & 1) != 0)
    WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, v12, v13, v14, v15, v16, v17, v18);
  *((_DWORD *)v19 + 4) = 0;
  *v19 = 0;
  v19[1] = v10;
  v19[3] = 0;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::BOOLeanResult(uint64_t *a1, JSC::CodeOrigin *a2, unint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v37 = a3[3];
  if (v37)
  {
    v11 = *a1;
    JSC::CodeOrigin::CodeOrigin(&v36, a2);
    v12 = (_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 1) != 0)
      v12 = (_QWORD *)*v12;
    if (v12)
      v11 = v12[1];
    result = JSC::JSValue::toBoolean((uint64_t *)&v37, *(_QWORD *)(v11 + 8));
    if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    {
      v20 = result;
      WTF::fastFree(v36 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
      return v20;
    }
  }
  else
  {
    v6 = a3[1];
    v7 = v6 & 0x2800FFFFFFF7;
    v8 = v6 & 0xFFFFD7FF00000008;
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      v21 = *a3;
      if (*a3 != 4)
      {
        if ((v21 & 1) != 0)
          v22 = *(_DWORD *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        else
          v22 = v21 > 3;
        for (i = 8 * v22; ; i -= 8)
        {
          if (!i)
            return 1;
          v24 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*a3 & 1) != 0)
            v24 = *(_QWORD *)(v24 + i);
          v25 = *a1;
          JSC::CodeOrigin::CodeOrigin(&v35, a2);
          if ((*(_BYTE *)(v24 + 10) & 1) != 0)
          {
            v34 = (_QWORD *)(v35 & 0xFFFFFFFF8);
            if ((v35 & 1) != 0)
              v34 = (_QWORD *)*v34;
            if (v34)
              v25 = v34[1];
            if (*(_QWORD *)(v24 + 40) == *(_QWORD *)(v25 + 8))
              break;
          }
          v33 = *(unsigned __int8 *)(v24 + 9);
          if (v33 == 2)
            break;
          if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v35 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
          result = 2;
          if (v33 == 3)
            return result;
        }
        if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v35 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    return 2;
  }
  return result;
}

uint64_t JSC::JSValue::isConstructorWithConcurrency<(JSC::Concurrency)1>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD v5[5];

  if ((a1 & 0xFFFE000000000002) != 0)
    return 0;
  v5[3] = v1;
  v5[4] = v2;
  v3 = *(unsigned __int8 *)(a1 + 5);
  if (v3 < 0x17)
    return 0;
  if ((v3 & 0xFE) != 0x1A)
    return 2;
  (*(void (**)(_QWORD *__return_ptr))(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C)
                                               + 0x40))(v5);
  return LOBYTE(v5[0]) != 0;
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#1}>(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  int v3;
  _BYTE *v4;
  int v5;
  unint64_t v6;
  unint64_t i;
  int v8;
  _BYTE *v9;
  int v10;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v6 = *v2;
    if ((_DWORD)v6)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)&v2[2 * i + 2] + 9);
        v9 = *(_BYTE **)(a2 + 8);
        v10 = *(_DWORD *)(**(_QWORD **)a2 + 72);
        if (v9[1])
        {
          if (*v9 != (v8 == v10))
            **(_BYTE **)(a2 + 16) = 0;
        }
        else
        {
          *(_WORD *)v9 = (v8 == v10) | 0x100;
          v6 = *v2;
        }
      }
    }
  }
  else if (v2)
  {
    v3 = *((unsigned __int8 *)v2 + 9);
    v4 = *(_BYTE **)(a2 + 8);
    v5 = *(_DWORD *)(**(_QWORD **)a2 + 72);
    if (v4[1])
    {
      if (*v4 != (v3 == v5))
        **(_BYTE **)(a2 + 16) = 0;
    }
    else
    {
      *(_WORD *)v4 = (v3 == v5) | 0x100;
    }
  }
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(double,double)#1}::operator()(__int16 a1, double a2, double a3)
{
  _BOOL4 v3;

  switch(a1)
  {
    case 231:
      v3 = a2 < a3;
      break;
    case 232:
      v3 = a2 <= a3;
      break;
    case 233:
      v3 = a2 > a3;
      break;
    case 234:
      v3 = a2 >= a3;
      break;
    case 237:
      v3 = a2 == a3;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19844761CLL);
  }
  if (v3)
    return 7;
  else
    return 6;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::ClassInfo const*)#1}::operator()(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;

  v10 = *a1;
  v11 = *(_QWORD **)(*a1 + 8);
  v12 = **(_QWORD **)a1[1];
  if ((v12 & 1) == 0)
  {
    v13 = v11[4];
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_4;
  }
  v72 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v73 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v73 != 0x3FFFFFFF) ? (v74 = v73 == -1) : (v74 = 1), v74))
  {
    v75 = 2;
  }
  else if (v73 >> 28)
  {
    v81 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v81 = v72;
    *(_DWORD *)(v81 + 8) = v73;
    v75 = 1;
    v72 = v81;
  }
  else
  {
    v75 = v72;
    v72 = 0;
  }
  v12 = v72 | v75;
  v13 = v11[4];
  if (((v72 | v75) & 1) == 0)
    goto LABEL_3;
  v76 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v77 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v77 != 0x3FFFFFFF) ? (v78 = v77 == -1) : (v78 = 1), v78))
  {
    v79 = 2;
  }
  else if (v77 >> 28)
  {
    v82 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v82 = v76;
    *(_DWORD *)(v82 + 8) = v77;
    v79 = 1;
    v76 = v82;
  }
  else
  {
    v79 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v76 = 0;
  }
  v80 = v76 | v79;
  v14 = (_QWORD *)(v80 & 0xFFFFFFFF8);
  if ((v80 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = (_QWORD *)*v14;
    if (!*v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  v16 = 0;
  v15 = 1;
LABEL_4:
  v17 = v14;
  if (v14)
LABEL_5:
    v13 = v17[1];
LABEL_6:
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(v10 + 24);
  v20 = *(unsigned int *)(*(_QWORD *)(v19 + 40) + 8);
  if (*(_DWORD *)(v19 + 20) <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198447A40);
  }
  v21 = *(JSC::DFG::Node **)a1[1];
  v22 = *((_QWORD *)v21 + 3);
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v20);
  if (!v23)
    goto LABEL_67;
  v24 = *(_DWORD *)(v23 - 8);
  v25 = v24 & v22;
  v26 = (uint64_t *)(v23 + 40 * (v24 & v22));
  v27 = *v26;
  if (*v26 != (v22 & 0xFF00FFFFFFFFFFFFLL))
  {
    v28 = 1;
    while (v27)
    {
      v25 = (v25 + v28) & v24;
      v26 = (uint64_t *)(v23 + 40 * v25);
      v27 = *v26;
      ++v28;
      if (*v26 == (v22 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_14;
    }
    v26 = (uint64_t *)(v23 + 40 * *(unsigned int *)(v23 - 4));
  }
LABEL_14:
  if (v26 == (uint64_t *)(v23 + 40 * *(unsigned int *)(v23 - 4)))
  {
LABEL_67:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v19, (JSC::DFG::Node *)(v22 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x1984479A8);
  }
  v29 = v26[4];
  if (v29)
    v30 = (v29 & 0xFFFE000000000002) == 0;
  else
    v30 = 0;
  if (!v30 || *(_BYTE *)(v29 + 5) != 26)
    return 0;
  result = 0;
  v32 = *(_QWORD *)(v29 + 24);
  if ((v32 & 1) == 0)
    return result;
  v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
  if ((v32 & 0xFFFFFFFFFFFFFFFELL) == 0)
    return result;
  v34 = *(_QWORD *)(v33 + 32);
  v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
  if (v35 == 2)
    return 0;
  result = JSC::DFG::Graph::isWatchingStructureCacheClearedWatchpoint(*(JSC::DFG::Graph **)(v10 + 8), v21, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return result;
  v42 = *(_DWORD *)(v33 + 40) & 0xFFFFFFFE;
  if (!(_DWORD)v42)
    return 0;
  v43 = 16 * v42;
  if (a2 != (void *)(16 * *(unsigned int *)(16 * v42 + 0x4C)) || *(_QWORD *)(16 * v42 + 0x28) != v18)
    return 0;
  JSC::DFG::Graph::freeze(*(_QWORD *)(v10 + 8), v33, v36, v37, v38, v39, v40, v41);
  JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 136), (JSC::InlineWatchpointSet *)(v33 + 32), v44, v45, v46, v47, v48, v49);
  v55 = *(_QWORD *)(v10 + 24);
  v56 = *(unsigned int *)(*(_QWORD *)(v55 + 40) + 8);
  if (*(_DWORD *)(v55 + 20) <= v56)
  {
    __break(0xC471u);
    JUMPOUT(0x198447A48);
  }
  v57 = *(_QWORD *)a1[1];
  v58 = *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v56);
  if (!v58)
    goto LABEL_69;
  v59 = *(_DWORD *)(v58 - 8);
  v60 = v59 & v57;
  v61 = (uint64_t *)(v58 + 40 * (v59 & v57));
  v62 = *v61;
  if (*v61 != v57)
  {
    v63 = 1;
    while (v62)
    {
      v60 = (v60 + v63) & v59;
      v61 = (uint64_t *)(v58 + 40 * v60);
      v62 = *v61;
      ++v63;
      if (*v61 == v57)
        goto LABEL_37;
    }
    v61 = (uint64_t *)(v58 + 40 * *(unsigned int *)(v58 - 4));
  }
LABEL_37:
  if (v61 == (uint64_t *)(v58 + 40 * *(unsigned int *)(v58 - 4)))
  {
LABEL_69:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v55, (JSC::DFG::Node *)(v57 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198447A00);
  }
  v64 = (uint64_t)(v61 + 1);
  v65 = JSC::DFG::Graph::registerStructure(*(_QWORD *)v55, v43, &v83, v50, v51, v52, v53, v54);
  JSC::DFG::AbstractValue::set(v64, v66, v65, v67, v68, v69, v70, v71);
  return 1;
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#2}>(uint64_t result, uint64_t **a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v5 = *v2;
    if ((_DWORD)v5)
    {
      v6 = v2 + 2;
      v7 = **a2;
      if (v7)
      {
        v8 = a2[1];
        do
        {
          if (v7 != *(_QWORD *)(*(_QWORD *)v6 + 40))
            *(_BYTE *)v8 = 0;
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v9 = **a2;
          v10 = *(_QWORD *)(*(_QWORD *)v6 + 40);
          if (v9)
          {
            if (v9 != v10)
              *(_BYTE *)a2[1] = 0;
          }
          else
          {
            **a2 = v10;
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
    }
  }
  else if (v2)
  {
    v3 = **a2;
    v4 = *((_QWORD *)v2 + 5);
    if (v3)
    {
      if (v3 != v4)
        *(_BYTE *)a2[1] = 0;
    }
    else
    {
      **a2 = v4;
    }
  }
  return result;
}

BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v8;
  uint64_t v11;
  int Concurrently;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::DFG::Node *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  JSC::DFG::Node **v31;
  JSC::DFG::Node *v32;
  int v33;
  unint64_t v34;
  __int128 v36;
  int v37;
  __int128 v38;
  uint64_t v39;

  if (**(_DWORD ***)a1 != a2)
    return 0;
  v37 = 0;
  v11 = *(_QWORD *)(a1 + 16);
  Concurrently = JSC::Structure::getConcurrently(**(_QWORD **)(a1 + 8), a2, &v37, a4, a5, a6, a7, a8);
  v8 = Concurrently == -1;
  if (Concurrently == -1)
  {
    v19 = **(JSC::DFG::Node ***)(a1 + 24);
    v20 = JSC::DFG::Graph::freeze(*(_QWORD *)(v11 + 8), a3, v13, v14, v15, v16, v17, v18);
    v36 = *v20;
    v39 = *((_QWORD *)v20 + 2);
    v38 = v36;
    v25 = *(_QWORD *)(v11 + 24);
    v26 = *(_QWORD *)(v25 + 40);
    v27 = *(unsigned int *)(v26 + 8);
    if (*(_DWORD *)(v25 + 20) <= v27)
    {
      __break(0xC471u);
    }
    else
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v27);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 - 8);
        v30 = v29 & v19;
        v31 = (JSC::DFG::Node **)(v28 + 40 * (v29 & v19));
        v32 = *v31;
        if (*v31 != v19)
        {
          v33 = 1;
          while (v32)
          {
            v30 = (v30 + v33) & v29;
            v31 = (JSC::DFG::Node **)(v28 + 40 * v30);
            v32 = *v31;
            ++v33;
            if (*v31 == v19)
              goto LABEL_10;
          }
          v31 = (JSC::DFG::Node **)(v28 + 40 * *(unsigned int *)(v28 - 4));
        }
LABEL_10:
        if (v31 != (JSC::DFG::Node **)(v28 + 40 * *(unsigned int *)(v28 - 4)))
        {
          v34 = (unint64_t)(v31 + 1);
          JSC::DFG::AbstractValue::set((uint64_t)(v31 + 1), *(_QWORD **)(v11 + 8), (unint64_t *)&v38, *(unsigned __int8 *)(v26 + 13), v21, v22, v23, v24);
          JSC::DFG::AbstractValue::fixTypeForRepresentation(v34, *(JSC::DFG::Graph **)(v11 + 8), v19);
          return v8;
        }
      }
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v25, (JSC::DFG::Node *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
      __break(0xC471u);
    }
    JUMPOUT(0x198447C98);
  }
  return v8;
}

uint64_t JSC::JSGlobalObject::regExpProtoExecFunction(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1 <= 0xB1u)
  {
    __break(0xC471u);
    JUMPOUT(0x198447CF4);
  }
  v2 = *(_QWORD *)(v1 + 1424);
  if ((v2 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = v1 + 1424;
    return v4(v6);
  }
  return v2;
}

uint64_t JSC::JSGlobalObject::regExpProtoGlobalGetter(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1 <= 0xA8u)
  {
    __break(0xC471u);
    JUMPOUT(0x198447D84);
  }
  v2 = *(_QWORD *)(v1 + 1352);
  if ((v2 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = v1 + 1352;
    return v4(v6);
  }
  return v2;
}

uint64_t JSC::JSGlobalObject::regExpProtoUnicodeGetter(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1 <= 0xAFu)
  {
    __break(0xC471u);
    JUMPOUT(0x198447E14);
  }
  v2 = *(_QWORD *)(v1 + 1408);
  if ((v2 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = v1 + 1408;
    return v4(v6);
  }
  return v2;
}

uint64_t JSC::JSGlobalObject::regExpProtoUnicodeSetsGetter(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1 <= 0xB0u)
  {
    __break(0xC471u);
    JUMPOUT(0x198447EA4);
  }
  v2 = *(_QWORD *)(v1 + 1416);
  if ((v2 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = v1 + 1416;
    return v4(v6);
  }
  return v2;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filterByValue<JSC::DFG::Edge>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;

  v5 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), a2 & 0xFF00FFFFFFFFFFFFLL);
  v13 = *a3;
  v14 = *((_QWORD *)a3 + 2);
  result = JSC::DFG::AbstractValue::filterByValue((JSC::DFG::AbstractValue *)v5, (const JSC::DFG::FrozenValue *)&v13, v6, v7, v8, v9, v10, v11);
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 17) = 0;
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(v8 + 40) + 220);
  if (v9 > dword_1ECF4C460)
  {
    __break(0xC471u);
    JUMPOUT(0x198448518);
  }
  if ((_DWORD)v9)
  {
    do
    {
      --v9;
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(v13 + 40);
      if (v9 >= *(unsigned int *)(v14 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x198448520);
      }
      v15 = *(unsigned int *)(v14 + 8);
      if (*(_DWORD *)(v13 + 20) <= v15)
      {
        __break(0xC471u);
        JUMPOUT(0x198448528);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v9);
      v17 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v15);
      if (!v17)
        goto LABEL_81;
      v18 = *(_DWORD *)(v17 - 8);
      v19 = v18 & v16;
      v20 = (uint64_t *)(v17 + 40 * (v18 & v16));
      v21 = *v20;
      if (*v20 != v16)
      {
        v22 = 1;
        while (v21)
        {
          v19 = (v19 + v22) & v18;
          v20 = (uint64_t *)(v17 + 40 * v19);
          v21 = *v20;
          ++v22;
          if (*v20 == v16)
            goto LABEL_10;
        }
        v20 = (uint64_t *)(v17 + 40 * *(unsigned int *)(v17 - 4));
      }
LABEL_10:
      if (v20 == (uint64_t *)(v17 + 40 * *(unsigned int *)(v17 - 4)))
      {
LABEL_81:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v13, (JSC::DFG::Node *)(v16 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        goto LABEL_89;
      }
      if ((v20[2] & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::StructureAbstractValue::observeTransition(v20 + 1, (void **)a2, a3, a4, a5, a6, a7, a8);
        v31 = *(unsigned __int8 *)(a2 + 9);
        v32 = (v31 - 39) <= 0xA ? JSC::typedArrayModes[v31 - 39] : 1 << *(_BYTE *)(a2 + 8);
        v33 = *(unsigned __int8 *)(a3 + 9);
        v34 = (v33 - 39) <= 0xA ? JSC::typedArrayModes[v33 - 39] : 1 << *(_BYTE *)(a3 + 8);
        v35 = *((_DWORD *)v20 + 6);
        if ((v35 & v32) != 0)
          *((_DWORD *)v20 + 6) = v35 | v34;
      }
      if (*(_WORD *)(v16 + 18) == 27)
      {
        v23 = *(_QWORD *)(a1 + 24);
        v24 = *(unsigned int *)(*(_QWORD *)(v23 + 40) + 8);
        if (*(_DWORD *)(v23 + 20) <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x198448530);
        }
        v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v24);
        if (!v25)
          goto LABEL_82;
        v26 = *(_DWORD *)(v25 - 8);
        v27 = v26 & (v16 | 1);
        v28 = (uint64_t *)(v25 + 40 * v27);
        v29 = *v28;
        if (*v28 != (v16 | 1))
        {
          v30 = 1;
          while (v29)
          {
            v27 = (v27 + v30) & v26;
            v28 = (uint64_t *)(v25 + 40 * v27);
            v29 = *v28;
            ++v30;
            if (*v28 == (v16 | 1))
              goto LABEL_19;
          }
          v28 = (uint64_t *)(v25 + 40 * *(unsigned int *)(v25 - 4));
        }
LABEL_19:
        if (v28 == (uint64_t *)(v25 + 40 * *(unsigned int *)(v25 - 4)))
        {
LABEL_82:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v23, (JSC::DFG::Node *)(v16 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x1984484B0);
        }
        if ((v28[2] & 0x2800FFFFFFF7) != 0)
        {
          JSC::DFG::StructureAbstractValue::observeTransition(v28 + 1, (void **)a2, a3, a4, a5, a6, a7, a8);
          v36 = *(unsigned __int8 *)(a2 + 9);
          v37 = (v36 - 39) <= 0xA ? JSC::typedArrayModes[v36 - 39] : 1 << *(_BYTE *)(a2 + 8);
          v38 = *(unsigned __int8 *)(a3 + 9);
          v39 = (v38 - 39) <= 0xA ? JSC::typedArrayModes[v38 - 39] : 1 << *(_BYTE *)(a3 + 8);
          v40 = *((_DWORD *)v28 + 6);
          if ((v40 & v37) != 0)
            *((_DWORD *)v28 + 6) = v40 | v39;
        }
      }
    }
    while (v9);
    v8 = *(_QWORD *)(a1 + 24);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) == 2)
  {
    v41 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 200);
    v42 = *(unsigned int *)(v41 + 76);
    if ((_DWORD)v42)
    {
      v43 = *(uint64_t **)(v41 + 64);
      v44 = &v43[v42];
      while (1)
      {
        v45 = *v43;
        if (*v43 && ((v45 & 1) == 0 || *(_WORD *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27))
        {
          v46 = *(_QWORD *)(a1 + 24);
          v47 = *(unsigned int *)(*(_QWORD *)(v46 + 40) + 8);
          if (*(_DWORD *)(v46 + 20) <= v47)
          {
            __break(0xC471u);
LABEL_89:
            JUMPOUT(0x198448468);
          }
          v48 = *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8 * v47);
          if (!v48)
            goto LABEL_83;
          v49 = *(_DWORD *)(v48 - 8);
          v50 = v49 & v45;
          v51 = (uint64_t *)(v48 + 40 * (v49 & v45));
          v52 = *v51;
          if (*v51 != v45)
          {
            v53 = 1;
            while (v52)
            {
              v50 = (v50 + v53) & v49;
              v51 = (uint64_t *)(v48 + 40 * v50);
              v52 = *v51;
              ++v53;
              if (*v51 == v45)
                goto LABEL_52;
            }
            v51 = (uint64_t *)(v48 + 40 * *(unsigned int *)(v48 - 4));
          }
LABEL_52:
          if (v51 == (uint64_t *)(v48 + 40 * *(unsigned int *)(v48 - 4)))
          {
LABEL_83:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v46, (JSC::DFG::Node *)(v45 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
            __break(0xC471u);
            JUMPOUT(0x1984484F8);
          }
          if ((v51[2] & 0x2800FFFFFFF7) != 0)
          {
            JSC::DFG::StructureAbstractValue::observeTransition(v51 + 1, (void **)a2, a3, a4, a5, a6, a7, a8);
            v54 = *(unsigned __int8 *)(a2 + 9);
            v55 = (v54 - 39) <= 0xA ? JSC::typedArrayModes[v54 - 39] : 1 << *(_BYTE *)(a2 + 8);
            v56 = *(unsigned __int8 *)(a3 + 9);
            v57 = (v56 - 39) <= 0xA ? JSC::typedArrayModes[v56 - 39] : 1 << *(_BYTE *)(a3 + 8);
            v58 = *((_DWORD *)v51 + 6);
            if ((v58 & v55) != 0)
              *((_DWORD *)v51 + 6) = v58 | v57;
          }
        }
        if (++v43 == v44)
        {
          v8 = *(_QWORD *)(a1 + 24);
          break;
        }
      }
    }
  }
  v59 = *(unsigned int *)(*(_QWORD *)(v8 + 40) + 156);
  if ((_DWORD)v59)
  {
    v60 = 32 * v59;
    do
    {
      v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 144);
      if ((*(_QWORD *)(v61 + v60 - 24) & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::StructureAbstractValue::observeTransition((uint64_t *)(v61 + v60 - 32), (void **)a2, a3, a4, a5, a6, a7, a8);
        v62 = *(unsigned __int8 *)(a2 + 9);
        if ((v62 - 39) <= 0xA)
          v63 = JSC::typedArrayModes[v62 - 39];
        else
          v63 = 1 << *(_BYTE *)(a2 + 8);
        v64 = *(unsigned __int8 *)(a3 + 9);
        if ((v64 - 39) <= 0xA)
          v65 = JSC::typedArrayModes[v64 - 39];
        else
          v65 = 1 << *(_BYTE *)(a3 + 8);
        v66 = *(_DWORD *)(v61 + v60 - 16);
        if ((v66 & v63) != 0)
          *(_DWORD *)(v61 + v60 - 16) = v66 | v65;
      }
      v60 -= 32;
    }
    while (v60);
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filter<JSC::DFG::Edge>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(v8 + 40) + 8);
  if (*(_DWORD *)(v8 + 20) <= v9)
  {
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x198448694);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9);
  if (!v10)
    goto LABEL_18;
  v12 = *(_DWORD *)(v10 - 8);
  v13 = v12 & a2;
  v14 = (uint64_t *)(v10 + 40 * (v12 & a2));
  v15 = *v14;
  if (*v14 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v16 = 1;
    while (v15)
    {
      v13 = (v13 + v16) & v12;
      v14 = (uint64_t *)(v10 + 40 * v13);
      v15 = *v14;
      ++v16;
      if (*v14 == (a2 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v14 = (uint64_t *)(v10 + 40 * *(unsigned int *)(v10 - 4));
  }
LABEL_7:
  if (v14 == (uint64_t *)(v10 + 40 * *(unsigned int *)(v10 - 4)))
  {
LABEL_18:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v8, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_20;
  }
  v17 = v14[2];
  v18 = v17 & a3;
  if ((v17 & a3) == v17)
    return;
  if ((v17 & 0x2800FFFFFFF7) != 0)
  {
    if (JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)(v14 + 1), a3, a3, a4, a5, a6, a7, a8))LABEL_12:*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 17) = 0;
  }
  else
  {
    v14[2] = v18;
    if (!v18)
    {
      v14[2] = 0;
      *((_DWORD *)v14 + 6) = 0;
      v19 = v14[1];
      if ((v19 & 1) != 0)
        WTF::fastFree(v19 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      v14[1] = 0;
      v14[4] = 0;
      goto LABEL_12;
    }
  }
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filterArrayModes<JSC::DFG::Edge>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v7 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(a1 + 24), a2 & 0xFF00FFFFFFFFFFFFLL);
  result = JSC::DFG::AbstractValue::filterArrayModes((JSC::DFG::AbstractValue *)v7, a3, a4, v8, v9, v10, v11, v12);
  if ((_DWORD)result)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 17) = 0;
  return result;
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#4}>(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v5 = *v2;
    if (!(_DWORD)v5)
      return result;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)&v2[2 * v6 + 2];
      if ((*(_WORD *)(v7 + 12) & 0x800) != 0)
        goto LABEL_14;
      v8 = *(_QWORD *)(v7 + 48);
      if (!v8)
        goto LABEL_14;
      v9 = *(_QWORD **)(a2 + 8);
      if (!*v9)
      {
        *v9 = v8;
        v5 = *v2;
        goto LABEL_15;
      }
      if (*v9 != v8)
LABEL_14:
        **(_BYTE **)a2 = 0;
LABEL_15:
      if (++v6 >= v5)
        return result;
    }
  }
  if (v2)
  {
    if ((v2[3] & 0x800) != 0)
      goto LABEL_7;
    v3 = *((_QWORD *)v2 + 6);
    if (!v3)
      goto LABEL_7;
    v4 = *(_QWORD **)(a2 + 8);
    if (*v4)
    {
      if (*v4 != v3)
LABEL_7:
        **(_BYTE **)a2 = 0;
    }
    else
    {
      *v4 = v3;
    }
  }
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::observeTransitions(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int *v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;

  if (!a2[3])
    return;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(v9 + 40) + 220);
  if (v10 > dword_1ECF4C460)
  {
    __break(0xC471u);
    JUMPOUT(0x198448E38);
  }
  if ((_DWORD)v10)
  {
    while (1)
    {
      --v10;
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(v12 + 40);
      if (v10 >= *(unsigned int *)(v13 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x198448E40);
      }
      v14 = *(unsigned int *)(v13 + 8);
      if (*(_DWORD *)(v12 + 20) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198448E48);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 8 * v10);
      v16 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v14);
      if (!v16)
        break;
      v17 = *(_DWORD *)(v16 - 8);
      v18 = v17 & v15;
      v19 = (uint64_t *)(v16 + 40 * (v17 & v15));
      v20 = *v19;
      if (*v19 != v15)
      {
        v21 = 1;
        while (v20)
        {
          v18 = (v18 + v21) & v17;
          v19 = (uint64_t *)(v16 + 40 * v18);
          v20 = *v19;
          ++v21;
          if (*v19 == v15)
            goto LABEL_11;
        }
        v19 = (uint64_t *)(v16 + 40 * *(unsigned int *)(v16 - 4));
      }
LABEL_11:
      if (v19 == (uint64_t *)(v16 + 40 * *(unsigned int *)(v16 - 4)))
        break;
      if ((v19[2] & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::StructureAbstractValue::observeTransitions(v19 + 1, a2, a3, a4, a5, a6, a7, a8);
        v30 = a2[3];
        v31 = *((_DWORD *)v19 + 6);
        v32 = 0;
        if (v30)
        {
          v33 = *(_QWORD *)a2;
          v34 = v30 - 1;
          do
          {
            v35 = v34;
            v36 = *(_QWORD *)(v33 + 16 * v34);
            v37 = *(unsigned __int8 *)(v36 + 9);
            if ((v37 - 39) <= 0xA)
              v38 = JSC::typedArrayModes[v37 - 39];
            else
              v38 = 1 << *(_BYTE *)(v36 + 8);
            if ((v38 & v31) != 0)
            {
              v39 = *(_QWORD *)(v33 + 16 * v34 + 8);
              v40 = *(unsigned __int8 *)(v39 + 9);
              if ((v40 - 39) <= 0xA)
                v41 = JSC::typedArrayModes[v40 - 39];
              else
                v41 = 1 << *(_BYTE *)(v39 + 8);
              v32 |= v41;
            }
            --v34;
          }
          while (v35);
        }
        *((_DWORD *)v19 + 6) = v32 | v31;
      }
      if (*(_WORD *)(v15 + 18) == 27)
      {
        v22 = *(_QWORD *)(a1 + 24);
        v23 = *(unsigned int *)(*(_QWORD *)(v22 + 40) + 8);
        if (*(_DWORD *)(v22 + 20) <= v23)
        {
          __break(0xC471u);
          JUMPOUT(0x198448E50);
        }
        v24 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v23);
        if (!v24)
          goto LABEL_102;
        v25 = *(_DWORD *)(v24 - 8);
        v26 = v25 & (v15 | 1);
        v27 = (uint64_t *)(v24 + 40 * v26);
        v28 = *v27;
        if (*v27 != (v15 | 1))
        {
          v29 = 1;
          while (v28)
          {
            v26 = (v26 + v29) & v25;
            v27 = (uint64_t *)(v24 + 40 * v26);
            v28 = *v27;
            ++v29;
            if (*v27 == (v15 | 1))
              goto LABEL_20;
          }
          v27 = (uint64_t *)(v24 + 40 * *(unsigned int *)(v24 - 4));
        }
LABEL_20:
        if (v27 == (uint64_t *)(v24 + 40 * *(unsigned int *)(v24 - 4)))
        {
LABEL_102:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v22, (JSC::DFG::Node *)(v15 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
          __break(0xC471u);
          JUMPOUT(0x198448DD0);
        }
        if ((v27[2] & 0x2800FFFFFFF7) != 0)
        {
          JSC::DFG::StructureAbstractValue::observeTransitions(v27 + 1, a2, a3, a4, a5, a6, a7, a8);
          v42 = a2[3];
          v43 = *((_DWORD *)v27 + 6);
          v44 = 0;
          if (v42)
          {
            v45 = *(_QWORD *)a2;
            v46 = v42 - 1;
            do
            {
              v47 = v46;
              v48 = *(_QWORD *)(v45 + 16 * v46);
              v49 = *(unsigned __int8 *)(v48 + 9);
              if ((v49 - 39) <= 0xA)
                v50 = JSC::typedArrayModes[v49 - 39];
              else
                v50 = 1 << *(_BYTE *)(v48 + 8);
              if ((v50 & v43) != 0)
              {
                v51 = *(_QWORD *)(v45 + 16 * v46 + 8);
                v52 = *(unsigned __int8 *)(v51 + 9);
                if ((v52 - 39) <= 0xA)
                  v53 = JSC::typedArrayModes[v52 - 39];
                else
                  v53 = 1 << *(_BYTE *)(v51 + 8);
                v44 |= v53;
              }
              --v46;
            }
            while (v47);
          }
          *((_DWORD *)v27 + 6) = v44 | v43;
        }
      }
      if (!v10)
      {
        v9 = *(_QWORD *)(a1 + 24);
        goto LABEL_52;
      }
    }
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v12, (JSC::DFG::Node *)(v15 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
LABEL_109:
    JUMPOUT(0x198448D88);
  }
LABEL_52:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) != 2)
    goto LABEL_83;
  v54 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 200);
  v55 = *(unsigned int *)(v54 + 76);
  if (!(_DWORD)v55)
    goto LABEL_83;
  v56 = *(uint64_t **)(v54 + 64);
  v57 = &v56[v55];
  do
  {
    v58 = *v56;
    if (*v56 && ((v58 & 1) == 0 || *(_WORD *)((v58 & 0xFFFFFFFFFFFFFFFELL) + 18) == 27))
    {
      v59 = *(_QWORD *)(a1 + 24);
      v60 = *(unsigned int *)(*(_QWORD *)(v59 + 40) + 8);
      if (*(_DWORD *)(v59 + 20) <= v60)
      {
        __break(0xC471u);
        goto LABEL_109;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(v59 + 8) + 8 * v60);
      if (!v61)
        goto LABEL_103;
      v62 = *(_DWORD *)(v61 - 8);
      v63 = v62 & v58;
      v64 = (uint64_t *)(v61 + 40 * (v62 & v58));
      v65 = *v64;
      if (*v64 != v58)
      {
        v66 = 1;
        while (v65)
        {
          v63 = (v63 + v66) & v62;
          v64 = (uint64_t *)(v61 + 40 * v63);
          v65 = *v64;
          ++v66;
          if (*v64 == v58)
            goto LABEL_63;
        }
        v64 = (uint64_t *)(v61 + 40 * *(unsigned int *)(v61 - 4));
      }
LABEL_63:
      if (v64 == (uint64_t *)(v61 + 40 * *(unsigned int *)(v61 - 4)))
      {
LABEL_103:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v59, (JSC::DFG::Node *)(v58 & 0xFFFFFFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
        __break(0xC471u);
        JUMPOUT(0x198448E18);
      }
      if ((v64[2] & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::StructureAbstractValue::observeTransitions(v64 + 1, a2, a3, a4, a5, a6, a7, a8);
        v67 = a2[3];
        v68 = *((_DWORD *)v64 + 6);
        v69 = 0;
        if (v67)
        {
          v70 = *(_QWORD *)a2;
          v71 = v67 - 1;
          do
          {
            v72 = v71;
            v73 = *(_QWORD *)(v70 + 16 * v71);
            v74 = *(unsigned __int8 *)(v73 + 9);
            if ((v74 - 39) <= 0xA)
              v75 = JSC::typedArrayModes[v74 - 39];
            else
              v75 = 1 << *(_BYTE *)(v73 + 8);
            if ((v75 & v68) != 0)
            {
              v76 = *(_QWORD *)(v70 + 16 * v71 + 8);
              v77 = *(unsigned __int8 *)(v76 + 9);
              if ((v77 - 39) <= 0xA)
                v78 = JSC::typedArrayModes[v77 - 39];
              else
                v78 = 1 << *(_BYTE *)(v76 + 8);
              v69 |= v78;
            }
            --v71;
          }
          while (v72);
        }
        *((_DWORD *)v64 + 6) = v69 | v68;
      }
    }
    ++v56;
  }
  while (v56 != v57);
  v9 = *(_QWORD *)(a1 + 24);
LABEL_83:
  v79 = *(unsigned int *)(*(_QWORD *)(v9 + 40) + 156);
  if ((_DWORD)v79)
  {
    do
    {
      while (1)
      {
        --v79;
        v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 144) + 32 * v79;
        if ((*(_QWORD *)(v80 + 8) & 0x2800FFFFFFF7) != 0)
          break;
        if (!v79)
          return;
      }
      JSC::DFG::StructureAbstractValue::observeTransitions((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 144) + 32 * v79), a2, a3, a4, a5, a6, a7, a8);
      v81 = a2[3];
      v84 = *(_DWORD *)(v80 + 16);
      v83 = (int *)(v80 + 16);
      v82 = v84;
      v85 = 0;
      if (v81)
      {
        v86 = *(_QWORD *)a2;
        v87 = v81 - 1;
        do
        {
          v88 = v87;
          v89 = *(_QWORD *)(v86 + 16 * v87);
          v90 = *(unsigned __int8 *)(v89 + 9);
          if ((v90 - 39) <= 0xA)
            v91 = JSC::typedArrayModes[v90 - 39];
          else
            v91 = 1 << *(_BYTE *)(v89 + 8);
          if ((v91 & v82) != 0)
          {
            v92 = *(_QWORD *)(v86 + 16 * v87 + 8);
            v93 = *(unsigned __int8 *)(v92 + 9);
            if ((v93 - 39) <= 0xA)
              v94 = JSC::typedArrayModes[v93 - 39];
            else
              v94 = 1 << *(_BYTE *)(v92 + 8);
            v85 |= v94;
          }
          --v87;
        }
        while (v88);
      }
      *v83 = v85 | v82;
    }
    while (v79);
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::filter(uint64_t a1, JSC::DFG::AbstractValue *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;

  v8 = *((_QWORD *)this + 1);
  v9 = v8 & a3;
  if ((v8 & a3) != v8)
  {
    if ((v8 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(this, a3, a3, a4, a5, a6, a7, a8))
        return;
    }
    else
    {
      *((_QWORD *)this + 1) = v9;
      if (v9)
        return;
      JSC::DFG::AbstractValue::clear(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 17) = 0;
  }
}

unint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::setTupleConstant(uint64_t a1, JSC::DFG::Node *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v8 + 36) <= v10
    || (v12 = *(_QWORD *)(v8 + 24) + 16 * v10,
        v13 = -*(_DWORD *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL) + 48),
        *(_DWORD *)(v12 + 12) <= v13))
  {
    __break(0xC471u);
    JUMPOUT(0x198448F58);
  }
  v15 = *(_QWORD *)v12 + 32 * v13;
  JSC::DFG::AbstractValue::set(v15, *(_QWORD **)(a1 + 8), a3, *(unsigned __int8 *)(v9 + 13), a5, a6, a7, a8);
  return JSC::DFG::AbstractValue::fixTypeForRepresentation(v15, *(JSC::DFG::Graph **)(a1 + 8), a2);
}

uint64_t JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#5}>(uint64_t result, BOOL *a2, int *a3)
{
  unsigned int *v3;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  char v9;
  uint64_t v10;

  v3 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    v6 = *v3;
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)(v3 + 2);
      v8 = *a3;
      v9 = *a2;
      do
      {
        v10 = *v7++;
        v9 &= (v8 & ~*(unsigned __int8 *)(v10 + 10)) == 0;
        *a2 = v9;
        --v6;
      }
      while (v6);
    }
  }
  else if (v3)
  {
    v5 = (*a3 & ~*((unsigned __int8 *)v3 + 10)) == 0 && *a2;
    *a2 = v5;
  }
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  JSC::DFG::Graph *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  JSC::DFG::Graph *v33;
  uint64_t v34;
  uint64_t *v36;
  const char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  WTF::PrintStream *v48;
  WTF::PrintStream *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v51 = a2;
  v52 = a3;
  v3 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if (*(_WORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 386)
  {
    if (((a3 >> 50) & 0x3F) == 0 && *(_WORD *)(a2 + 18) == 30)
      return result;
    v13 = *(JSC::DFG::Graph **)(result + 8);
    LOBYTE(v48) = (a3 >> 50) & 0x3F;
    v14 = *(_QWORD *)(result + 24);
    v15 = *(unsigned int *)(*(_QWORD *)(v14 + 40) + 8);
    if (*(_DWORD *)(v14 + 36) <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198449368);
    }
    v17 = *(_QWORD *)(v14 + 24) + 16 * v15;
    v18 = (*(_DWORD *)(a2 + 72) + ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x30));
    if (*(_DWORD *)(v17 + 12) > v18)
    {
      v19 = result;
      v49 = *(WTF::PrintStream **)(*(_QWORD *)v17 + 32 * v18 + 8);
      WTF::toCString<char [32],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [45],JSC::DFG::UseKind,char [13],JSC::SpeculationDump>("Tuple edge verification error: ", &v51, "->", (JSC::DFG::Edge *)&v52, " was expected to have Untyped use kind (had ", (unsigned __int8 *)&v48, "). Has type ", &v49, &v50);
      if (v50)
        v20 = (const char *)(v50 + 16);
      else
        v20 = 0;
      JSC::DFG::Graph::logAssertionFailure(v13, (JSC::DFG::Node *)a2, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0xB5, "void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]", v20);
      WTF::CString::~CString((WTF::CString *)&v50, v21, v22, v23, v24, v25, v26, v27);
      v28 = v19;
      JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v19 + 24), v51);
      v29 = *(unsigned __int16 *)(v51 + 18);
      v30 = *(unsigned __int16 *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      v31 = (v52 >> 50) & 0x3F;
      v32 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v28 + 24), v51);
      WTFCrashWithInfoImpl(181, "./dfg/DFGAbstractInterpreterInlines.h", "void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]", 431, 0xAuLL, v29, v30, v31, v32[1]);
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x198449338);
  }
  v4 = *(_QWORD *)(result + 24);
  v5 = *(unsigned int *)(*(_QWORD *)(v4 + 40) + 8);
  if (*(_DWORD *)(v4 + 20) <= v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198449360);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
  if (!v6)
    goto LABEL_25;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = v7 & a3;
  v9 = (uint64_t *)(v6 + 40 * (v7 & a3));
  v10 = *v9;
  if (*v9 != v3)
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v7;
      v9 = (uint64_t *)(v6 + 40 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v3)
        goto LABEL_8;
    }
    v9 = (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4));
  }
LABEL_8:
  if (v9 == (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4)))
  {
LABEL_25:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v4, (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_30;
  }
  v12 = (a3 >> 50) & 0x3F;
  if (v12 >= 0x35)
  {
    __break(0xC471u);
    JUMPOUT(0x198449358);
  }
  if ((qword_1991560E0[v12] & v9[2]) != 0)
  {
    v33 = *(JSC::DFG::Graph **)(result + 8);
    v34 = result;
    v49 = (WTF::PrintStream *)JSC::DFG::typeFilterFor((a3 >> 50) & 0x3F);
    v48 = (WTF::PrintStream *)JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v34 + 24), v3)[1];
    v36 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v34 + 24), v3);
    WTF::toCString<char [26],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [28],JSC::SpeculationDump,char [15],JSC::SpeculationDump,char [3],unsigned long long,char [2]>(&v50, &v51, (JSC::DFG::Edge *)&v52, &v49, &v48, v36 + 1);
    if (v50)
      v37 = (const char *)(v50 + 16);
    else
      v37 = 0;
    JSC::DFG::Graph::logAssertionFailure(v33, (JSC::DFG::Node *)a2, (const WTF::CString *)"./dfg/DFGAbstractInterpreterInlines.h", (const char *)0xBB, "void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]", v37);
    WTF::CString::~CString((WTF::CString *)&v50, v38, v39, v40, v41, v42, v43, v44);
    JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v34 + 24), v3);
    v45 = *(unsigned __int16 *)(a2 + 18);
    v46 = *(unsigned __int16 *)(v3 + 18);
    v47 = JSC::DFG::AtTailAbstractState::forNode(*(_QWORD *)(v34 + 24), v3);
    WTFCrashWithInfoImpl(187, "./dfg/DFGAbstractInterpreterInlines.h", "void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(Node *, Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]", 432, 0xAuLL, v45, v46, v12, v47[1]);
  }
  return result;
}

void WTF::toCString<char [26],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [28],JSC::SpeculationDump,char [15],JSC::SpeculationDump,char [3],unsigned long long,char [2]>(uint64_t *a1, uint64_t *a2, JSC::DFG::Edge *a3, WTF::PrintStream **a4, WTF::PrintStream **a5, _QWORD *a6)
{
  uint64_t v12;
  int v13;
  WTF::PrintStream *v14;
  const char *v15;
  WTF::PrintStream *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  _BYTE *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = off_1E3572250;
  v30 = v32;
  v31 = xmmword_199122F80;
  v32[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "Edge verification error: ");
  v12 = *a2;
  if (*a2)
  {
    v13 = *(_DWORD *)(v12 + 20);
    v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
    WTF::PrintStream::printf(v14, "%s", "D@");
    WTF::PrintStream::printf(v14, "%u", v13);
    v29[5]((WTF::StringPrintStream *)&v29);
    if ((*(_DWORD *)(v12 + 56) & 7) == 3)
    {
      v15 = "<Double>";
    }
    else
    {
      if ((*(_DWORD *)(v12 + 56) & 7) != 5)
        goto LABEL_8;
      v15 = "<Int52>";
    }
  }
  else
  {
    v15 = "-";
  }
  v16 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v29[4])(&v29);
  WTF::PrintStream::printf(v16, "%s", v15);
  v29[5]((WTF::StringPrintStream *)&v29);
LABEL_8:
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", "->");
  JSC::DFG::Edge::dump(a3, (WTF::PrintStream *)&v29);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " was expected to have type ");
  JSC::dumpSpeculation((JSC *)&v29, *a4);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " but has type ");
  JSC::dumpSpeculation((JSC *)&v29, *a5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", " (");
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%llu", *a6);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", ")");
  v29[5]((WTF::StringPrintStream *)&v29);
  v25 = v30;
  v24 = v31;
  *a1 = 0;
  if (!v25)
  {
    v28 = 0;
LABEL_13:
    WTF::fastFree(v28, v17, v18, v19, v20, v21, v22, v23);
    return;
  }
  if (v24 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19844962CLL);
  }
  v26 = WTF::fastMalloc((WTF *)(v24 + 17));
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = v24;
  *a1 = v26;
  v27 = v26 + 16;
  memcpy((void *)(v26 + 16), v25, v24);
  *(_BYTE *)(v27 + v24) = 0;
  v28 = (unint64_t)v30;
  if (v30 != v32)
    goto LABEL_13;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(uint64_t result, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v3 = *(unsigned int *)(*(_QWORD *)(result + 40) + 8);
  if (*(_DWORD *)(result + 20) <= v3)
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x198449730);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v3);
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = v5 & a3;
  v7 = (uint64_t *)(v4 + 40 * (v5 & a3));
  v8 = *v7;
  if (*v7 != (a3 & 0xFF00FFFFFFFFFFFFLL))
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v5;
      v7 = (uint64_t *)(v4 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == (a3 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v7 = (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4));
  }
LABEL_7:
  if (v7 == (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4)))
  {
LABEL_12:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)result, (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_14;
  }
  if ((v7[2] & 0xFFFFFFFFCFFFFFFFLL) != 0)
    *a2 = 0;
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)result + 24);
  v3 = *(unsigned int *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_DWORD *)(v2 + 20) <= v3)
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x198449874);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3);
  if (!v4)
    goto LABEL_17;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = v5 & a2;
  v7 = (uint64_t *)(v4 + 40 * (v5 & a2));
  v8 = *v7;
  if (*v7 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v5;
      v7 = (uint64_t *)(v4 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == (a2 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v7 = (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4));
  }
LABEL_7:
  if (v7 == (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4)))
  {
LABEL_17:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_19;
  }
  v10 = v7[4];
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    **(_BYTE **)(result + 8) = 0;
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    if (*(_BYTE *)(v11 + 4))
    {
      if (*(_DWORD *)v11 < (int)v10)
        LODWORD(v10) = *(_DWORD *)v11;
      *(_DWORD *)v11 = v10;
    }
    else
    {
      *(_DWORD *)v11 = v10;
    }
    *(_BYTE *)(v11 + 4) = 1;
  }
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  v3 = *(unsigned int *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_DWORD *)(v2 + 20) <= v3)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198449AA0);
  }
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    goto LABEL_31;
  v6 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = v7 & a2;
  v9 = (uint64_t *)(v5 + 40 * (v7 & a2));
  v10 = *v9;
  if (*v9 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v7;
      v9 = (uint64_t *)(v5 + 40 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v6)
        goto LABEL_7;
    }
    v9 = (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4));
  }
LABEL_7:
  if (v9 == (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4)))
  {
LABEL_31:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_34;
  }
  v12 = v9[2] | **(_QWORD **)result;
  **(_QWORD **)result = (v12 >> 1) & 0x4000000000 | v12;
  v13 = *(_QWORD *)(v4 + 8 * v3);
  if (!v13)
    goto LABEL_32;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = v14 & a2;
  v16 = (uint64_t *)(v13 + 40 * (v14 & a2));
  v17 = *v16;
  if (*v16 != v6)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v14;
      v16 = (uint64_t *)(v13 + 40 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == v6)
        goto LABEL_13;
    }
    v16 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  }
LABEL_13:
  if (v16 == (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4)))
  {
LABEL_32:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198449AECLL);
  }
  v19 = v16[4];
  if (v19 >> 49)
  {
    v20 = *(_QWORD *)(result + 24);
    if (*(_BYTE *)(v20 + 8))
    {
      v21 = *(double *)v20;
      v22 = (double)(int)v19;
      if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v22 = v19 - 0x2000000000000;
      if (v21 >= v22 && (v22 != 0.0 || v21 != 0.0 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
      {
        if (v22 <= v21)
          v21 = -0.0;
        v21 = v22 + v21;
      }
    }
    else
    {
      v21 = (double)(int)v19;
      if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v21 = v19 - 0x2000000000000;
    }
    *(double *)v20 = v21;
    *(_BYTE *)(v20 + 8) = 1;
  }
  else
  {
    **(_BYTE **)(result + 16) = 0;
  }
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)result + 24);
  v3 = *(unsigned int *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_DWORD *)(v2 + 20) <= v3)
  {
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x198449C30);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3);
  if (!v4)
    goto LABEL_17;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = v5 & a2;
  v7 = (uint64_t *)(v4 + 40 * (v5 & a2));
  v8 = *v7;
  if (*v7 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v5;
      v7 = (uint64_t *)(v4 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == (a2 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_7;
    }
    v7 = (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4));
  }
LABEL_7:
  if (v7 == (uint64_t *)(v4 + 40 * *(unsigned int *)(v4 - 4)))
  {
LABEL_17:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_19;
  }
  v10 = v7[4];
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    **(_BYTE **)(result + 8) = 0;
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    if (*(_BYTE *)(v11 + 4))
    {
      if (*(_DWORD *)v11 > (int)v10)
        LODWORD(v10) = *(_DWORD *)v11;
      *(_DWORD *)v11 = v10;
    }
    else
    {
      *(_DWORD *)v11 = v10;
    }
    *(_BYTE *)(v11 + 4) = 1;
  }
  return result;
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  v3 = *(unsigned int *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_DWORD *)(v2 + 20) <= v3)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198449E5CLL);
  }
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    goto LABEL_31;
  v6 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = v7 & a2;
  v9 = (uint64_t *)(v5 + 40 * (v7 & a2));
  v10 = *v9;
  if (*v9 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v11 = 1;
    while (v10)
    {
      v8 = (v8 + v11) & v7;
      v9 = (uint64_t *)(v5 + 40 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v6)
        goto LABEL_7;
    }
    v9 = (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4));
  }
LABEL_7:
  if (v9 == (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4)))
  {
LABEL_31:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_34;
  }
  v12 = v9[2] | **(_QWORD **)result;
  **(_QWORD **)result = (v12 >> 1) & 0x4000000000 | v12;
  v13 = *(_QWORD *)(v4 + 8 * v3);
  if (!v13)
    goto LABEL_32;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = v14 & a2;
  v16 = (uint64_t *)(v13 + 40 * (v14 & a2));
  v17 = *v16;
  if (*v16 != v6)
  {
    v18 = 1;
    while (v17)
    {
      v15 = (v15 + v18) & v14;
      v16 = (uint64_t *)(v13 + 40 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == v6)
        goto LABEL_13;
    }
    v16 = (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4));
  }
LABEL_13:
  if (v16 == (uint64_t *)(v13 + 40 * *(unsigned int *)(v13 - 4)))
  {
LABEL_32:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v2, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    JUMPOUT(0x198449EA8);
  }
  v19 = v16[4];
  if (v19 >> 49)
  {
    v20 = *(_QWORD *)(result + 24);
    if (*(_BYTE *)(v20 + 8))
    {
      v21 = *(double *)v20;
      v22 = (double)(int)v19;
      if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v22 = v19 - 0x2000000000000;
      if (v21 <= v22 && (v22 != 0.0 || v21 != 0.0 || (*(_QWORD *)&v21 & 0x8000000000000000) != 0))
      {
        if (v22 >= v21)
          v21 = -0.0;
        v21 = v22 + v21;
      }
    }
    else
    {
      v21 = (double)(int)v19;
      if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v21 = v19 - 0x2000000000000;
    }
    *(double *)v20 = v21;
    *(_BYTE *)(v20 + 8) = 1;
  }
  else
  {
    **(_BYTE **)(result + 16) = 0;
  }
  return result;
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#3}>(uint64_t result, uint64_t a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  if ((result & 1) != 0)
  {
    if (*v3)
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)&v3[2 * v6 + 2];
        v8 = *(unsigned __int8 *)(v7 + 9);
        if ((v8 - 39) <= 0xA)
          v9 = JSC::typedArrayModes[v8 - 39];
        else
          v9 = 1 << *(_BYTE *)(v7 + 8);
        result = JSC::DFG::ArrayMode::arrayModesThatPassFiltering(*(JSC::DFG::ArrayMode **)a2);
        if ((result | v9) != (_DWORD)result || *(_QWORD *)(v7 + 40) != **(_QWORD **)(a2 + 16))
          **(_BYTE **)(a2 + 8) = 0;
        ++v6;
      }
      while (v6 < *v3);
    }
  }
  else if (v3)
  {
    v4 = *((unsigned __int8 *)v3 + 9);
    if ((v4 - 39) <= 0xA)
      v5 = JSC::typedArrayModes[v4 - 39];
    else
      v5 = 1 << *((_BYTE *)v3 + 8);
    result = JSC::DFG::ArrayMode::arrayModesThatPassFiltering(*(JSC::DFG::ArrayMode **)a2);
    if ((result | v5) != (_DWORD)result || *((_QWORD *)v3 + 5) != **(_QWORD **)(a2 + 16))
      **(_BYTE **)(a2 + 8) = 0;
  }
  return result;
}

_QWORD *JSC::DFG::Graph::copyVarargChildren<BOOL (*)(JSC::DFG::Edge)>(JSC::DFG::Node *,BOOL (*)(JSC::DFG::Edge))::{lambda(JSC::DFG::Edge)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  result = (_QWORD *)(**(uint64_t (***)(uint64_t))a1)(a2);
  if ((_DWORD)result)
  {
    ++**(_DWORD **)(a1 + 8);
    result = (_QWORD *)(v4 + 152);
    v11 = *(unsigned int *)(v4 + 164);
    if ((_DWORD)v11 == *(_DWORD *)(v4 + 160))
    {
      result = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v11 + 1), (unint64_t)&v12, v6, v7, v8, v9, v10);
      v11 = *(unsigned int *)(v4 + 164);
      *(_QWORD *)(*(_QWORD *)(v4 + 152) + 8 * v11) = *result;
    }
    else
    {
      *(_QWORD *)(*result + 8 * v11) = a2;
    }
    *(_DWORD *)(v4 + 164) = v11 + 1;
  }
  return result;
}

uint64_t _ZZN3JSC3DFG5Graph18copyVarargChildrenIPFbNS0_4EdgeEEEENS0_13AdjacencyListEPNS0_4NodeET_Ed_NUlS3_E_8__invokeES3_()
{
  return 1;
}

void WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::DFG::CrossThreadStringTranslator>,WTF::StringImpl const* const&,WTF::StringImpl const* const&>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl **v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  WTF *v25;
  BOOL v26;
  WTF::StringImpl *v27;
  int v28;
  _WORD *v29;
  size_t v30;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;

  v11 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a1) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = WTF::StringImpl::concurrentHash(*a2);
  v21 = 0;
  v22 = 0;
  while (1)
  {
    v23 = v13 & v12;
    v24 = (WTF::StringImpl **)(v11 + 8 * (v13 & v12));
    v25 = *v24;
    if (!*v24)
    {
      if (v22)
        v24 = v22;
      if (*v24 == (WTF::StringImpl *)-1)
      {
        *v24 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      v27 = *a2;
      v28 = *((_DWORD *)*a2 + 4);
      v29 = (_WORD *)*((_QWORD *)*a2 + 1);
      v30 = *((unsigned int *)v27 + 1);
      if ((v28 & 3) != 0 || v29 == (_WORD *)((char *)v27 + 20))
      {
        if ((v28 & 4) == 0)
        {
          WTF::StringImpl::create(v29, *((unsigned int *)v27 + 1), (uint64_t *)&v64);
          goto LABEL_42;
        }
        if ((_DWORD)v30)
        {
          if ((v30 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19844A364);
          }
          v32 = WTF::fastCompactMalloc((WTF *)(v30 + 20));
          v33 = (_BYTE *)(v32 + 20);
          *(_DWORD *)v32 = 2;
          *(_DWORD *)(v32 + 4) = v30;
          *(_QWORD *)(v32 + 8) = v32 + 20;
          *(_DWORD *)(v32 + 16) = 4;
          v64 = (WTF::StringImpl *)v32;
          if ((_DWORD)v30 == 1)
            *v33 = *(_BYTE *)v29;
          else
            memcpy(v33, v29, v30);
LABEL_42:
          v38 = v64;
          v64 = 0;
          v39 = *v24;
          *v24 = v38;
          if (!v39)
            goto LABEL_45;
          v40 = *(_DWORD *)v39 - 2;
          if (*(_DWORD *)v39 != 2)
            goto LABEL_44;
          WTF::StringImpl::~StringImpl(v39, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          v39 = v64;
          v64 = 0;
          if (v39)
          {
            v40 = *(_DWORD *)v39 - 2;
            if (*(_DWORD *)v39 != 2)
            {
LABEL_44:
              *(_DWORD *)v39 = v40;
              goto LABEL_45;
            }
            WTF::StringImpl::~StringImpl(v39, v55, (uint64_t)v15, v16, v17, v18, v19, v20);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
LABEL_45:
          v41 = *a1;
          if (*a1)
            v42 = *(_DWORD *)(v41 - 12) + 1;
          else
            v42 = 1;
          *(_DWORD *)(v41 - 12) = v42;
          v43 = *a1;
          if (*a1)
            v44 = *(_DWORD *)(v43 - 12);
          else
            v44 = 0;
          v45 = (*(_DWORD *)(v43 - 16) + v44);
          v46 = *(unsigned int *)(v43 - 4);
          if (v46 > 0x400)
          {
            if (v46 > 2 * v45)
              goto LABEL_51;
          }
          else if (3 * v46 > 4 * v45)
          {
LABEL_51:
            v37 = v43 + 8 * v46;
            v36 = 1;
            goto LABEL_52;
          }
          v24 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v24, (uint64_t)v15, v16, v17, v18, v19, v20);
          v43 = *a1;
          if (*a1)
            v46 = *(unsigned int *)(v43 - 4);
          else
            v46 = 0;
          goto LABEL_51;
        }
      }
      else if ((v28 & 4) != 0)
      {
        if ((_DWORD)v30)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty((uint64_t)v29, *((_DWORD *)v27 + 1), (uint64_t *)&v64);
          goto LABEL_42;
        }
      }
      else if ((_DWORD)v30)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty((uint64_t)v29, *((_DWORD *)v27 + 1), (uint64_t *)&v64);
        goto LABEL_42;
      }
      WTF::StringImpl::s_emptyAtomString += 2;
      v64 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      goto LABEL_42;
    }
    if (v25 == (WTF *)-1)
    {
      v22 = (WTF::StringImpl **)(v11 + 8 * v23);
      goto LABEL_13;
    }
    v14 = *a2;
    if (v25 == *a2)
      break;
    v26 = !v25 || v14 == 0;
    if (!v26 && WTF::equal(v25, v14, v15))
      break;
LABEL_13:
    v13 = ++v21 + v23;
  }
  v34 = *a1;
  if (*a1)
    v35 = *(unsigned int *)(v34 - 4);
  else
    v35 = 0;
  v36 = 0;
  v37 = v34 + 8 * v35;
LABEL_52:
  *(_QWORD *)a8 = v24;
  *(_QWORD *)(a8 + 8) = v37;
  *(_BYTE *)(a8 + 16) = v36;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DFG::LazyJSValue::emit(JSC::CCallHelpers &,JSC::JSValueRegs,JSC::DFG::Plan &)::$_0>::run(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 <= v4 + v5 && v5 + a2[1] >= v6)
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)&v15 = *(_QWORD *)(a1 + 32);
    DWORD2(v15) = *(_DWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    result = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = off_1E358E570;
    *(_OWORD *)(result + 16) = v15;
    *(_QWORD *)(result + 32) = v9;
    *(_QWORD *)(result + 40) = v6;
    v16 = result;
    v10 = *(unsigned int *)(v8 + 68);
    if ((_DWORD)v10 == *(_DWORD *)(v8 + 64))
    {
      WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>(v8 + 56, &v16);
      result = v16;
      v16 = 0;
      if (result)
      {
        v11 = (unsigned int *)(result + 8);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10) = result;
      *(_DWORD *)(v8 + 68) = v10 + 1;
    }
  }
  else
  {
    result = 366;
    __break(0xC471u);
  }
  return result;
}

void WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(void)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void)>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(_QWORD **)a1;
    v20 = *a2;
    *a2 = 0;
    v19[v18] = v20;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    return;
  }
  if (!(v8 >> 29))
  {
    v9 = *(_QWORD **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
}

void WTF::SharedTaskFunctor<void ()(void),JSC::DFG::LazyJSValue::emit(JSC::CCallHelpers &,JSC::JSValueRegs,JSC::DFG::Plan &)::$_0::operator() const(JSC::LinkBuffer &)::{lambda(void)#1}>::run(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  WTF::StringImpl *v51;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  v10 = *(_DWORD *)(a1 + 24);
  switch(v10)
  {
    case 3:
      v11 = *(WTF::StringImpl **)(a1 + 16);
      if (v11)
      {
        if ((*((_BYTE *)v11 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v11 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v11, a3, a4, a5, a6, a7, a8, (WTF *)&v51);
          v11 = v51;
        }
      }
      v51 = v11;
LABEL_6:
      v12 = JSC::jsString(v9, (JSC::VM *)&v51, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_7:
      v13 = v12;
      v14 = v51;
      v51 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      goto LABEL_10;
    case 2:
      v43 = *(WTF::StringImpl **)(a1 + 16);
      if (v43)
        *(_DWORD *)v43 += 2;
      v51 = v43;
      goto LABEL_6;
    case 1:
      v50 = *(_WORD *)(a1 + 16);
      if (v50 <= 0xFFuLL)
      {
        v13 = *(_QWORD *)(v9 + 8 * v50 + 42216);
        goto LABEL_10;
      }
      WTF::StringImpl::create(&v50, 1uLL, (uint64_t *)&v51);
      v12 = JSC::JSString::create(v9, (JSC::VM *)&v51, v44, v45, v46, v47, v48, v49);
      goto LABEL_7;
  }
  if (v10)
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  v13 = **(_QWORD **)(a1 + 16);
LABEL_10:
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19844A7E8);
  }
  v15 = *(_QWORD *)(a1 + 32);
  v16 = (unsigned __int8 *)(v15 + 16);
  if (__ldaxr((unsigned __int8 *)(v15 + 16)))
  {
    __clrex();
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 16);
    goto LABEL_14;
  }
  if (__stxr(1u, v16))
    goto LABEL_13;
LABEL_14:
  v18 = (_QWORD *)(v15 + 160);
  v51 = 0;
  v19 = *(unsigned int *)(v15 + 172);
  if ((_DWORD)v19 == *(_DWORD *)(v15 + 168))
    *(_QWORD *)(*(_QWORD *)(v15 + 160) + 8 * *(unsigned int *)(v15 + 172)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v51);
  else
    *(_QWORD *)(*v18 + 8 * v19) = 0;
  v20 = *(_DWORD *)(v15 + 172);
  v21 = __CFADD__(v20, 1);
  v22 = v20 + 1;
  *(_DWORD *)(v15 + 172) = v22;
  if (v21)
  {
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x19844A798);
  }
  v23 = *(_QWORD *)(v15 + 160) + 8 * v22;
  v24 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v23 - 8) = v13;
  if (v13 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v15 + 7))
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v15);
  v25 = __ldxr(v16);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v16))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v15 + 16), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    v26 = *(WTF::StringImpl **)(a1 + 16);
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  JSC::ARM64Assembler::linkPointer(*(JSC::ARM64Assembler **)(a1 + 40), v13, (void *)1);
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(4 * v7 + 16));
  v16 = v8;
  v17 = v8 + 16;
  if (v7)
    memset((void *)(v8 + 16), 255, 4 * v7);
  *a1 = v17;
  *(_DWORD *)(v16 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (int *)(v4 + 4 * v18);
      v21 = *v20;
      if (*v20 <= 0xFFFFFFFD)
      {
        v22 = *a1;
        v23 = *a1 ? *(_DWORD *)(v22 - 8) : 0;
        v24 = 0;
        v25 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
        v26 = ((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) ^ (((v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11)) >> 16);
        do
        {
          v27 = v26 & v23;
          v26 = ++v24 + v27;
        }
        while (*(_DWORD *)(v22 + 4 * v27) != -1);
        v28 = (_DWORD *)(v22 + 4 * v27);
        *v28 = v21;
        if (v20 == a2)
          v19 = v28;
      }
      ++v18;
    }
    while (v18 != v5);
  }
  else
  {
    v19 = 0;
  }
  if (v4)
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

uint64_t WTF::Vector<JSC::DFG::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t *JSC::DFG::`anonymous namespace'::mayExitImpl<JSC::DFG::AtTailAbstractState>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::AtTailAbstractState &)::{lambda(JSC::DFG::Edge &)#1}::operator()(uint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v2 = (a2 >> 50) & 0x3F;
  if (!(_DWORD)v2 || v2 <= 0x34 && ((1 << v2) & 0x12400001800284) != 0)
    goto LABEL_2;
  v3 = *result;
  v4 = *(unsigned int *)(*(_QWORD *)(*result + 40) + 8);
  if (*(_DWORD *)(*result + 20) <= v4)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x19844AB3CLL);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4);
  if (!v5)
    goto LABEL_19;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = v6 & a2;
  v8 = (uint64_t *)(v5 + 40 * (v6 & a2));
  v9 = *v8;
  if (*v8 != (a2 & 0xFF00FFFFFFFFFFFFLL))
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v6;
      v8 = (uint64_t *)(v5 + 40 * v7);
      v9 = *v8;
      ++v10;
      if (*v8 == (a2 & 0xFF00FFFFFFFFFFFFLL))
        goto LABEL_14;
    }
    v8 = (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4));
  }
LABEL_14:
  if (v8 == (uint64_t *)(v5 + 40 * *(unsigned int *)(v5 - 4)))
  {
LABEL_19:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)v3, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFELL), (const WTF::CString *)"./dfg/DFGAtTailAbstractState.cpp", (const char *)0x3E, "AbstractValue &JSC::DFG::AtTailAbstractState::forNode(NodeFlowProjection)", "iter != valuesAtTail.end()");
    __break(0xC471u);
    goto LABEL_22;
  }
  if (v2 >= 0x35)
  {
    __break(0xC471u);
    JUMPOUT(0x19844AB5CLL);
  }
  if ((qword_1991560E0[v2] & v8[2]) != 0)
    goto LABEL_17;
LABEL_2:
  if (*(_WORD *)(*(_QWORD *)result[2] + 18) != 215 && ((_DWORD)v2 == 19 || (_DWORD)v2 == 11))
LABEL_17:
    *(_DWORD *)result[1] = 2;
  return result;
}

void JSC::DFG::MinifiedGraph::prepareAndShrink(JSC::DFG::MinifiedGraph *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL (*v19)(uint64_t, uint64_t);

  v2 = *(_QWORD *)this;
  v3 = *((unsigned int *)this + 3);
  v19 = JSC::DFG::MinifiedNode::compareByNodeIndex;
  v4 = 126 - 2 * __clz(v3);
  if ((_DWORD)v3)
    v5 = v4;
  else
    v5 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*,false>(v2, (char *)(v2 + 13 * v3), (unsigned int (**)(char *, char *))&v19, v5, 1);
  v13 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 2) > v13)
  {
    v14 = *(_QWORD *)this;
    if (v13)
    {
      if (v13 >= 0x13B13B14)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)(13 * v13));
      *((_DWORD *)this + 2) = 13 * v13 / 0xD;
      *(_QWORD *)this = v15;
      if (v15 != (_QWORD *)v14)
      {
        v16 = 13 * v13;
        v17 = (uint64_t *)v14;
        do
        {
          v18 = *v17;
          *(_QWORD *)((char *)v15 + 5) = *(uint64_t *)((char *)v17 + 5);
          *v15 = v18;
          v15 = (_QWORD *)((char *)v15 + 13);
          v17 = (uint64_t *)((char *)v17 + 13);
          v16 -= 13;
        }
        while (v16);
      }
    }
    if (v14)
    {
      if (*(_QWORD *)this == v14)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      WTF::fastFree(v14, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

BOOL JSC::DFG::MinifiedNode::compareByNodeIndex(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
}

BOOL JSC::DFG::performMovHintRemoval(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  JSC::DFG *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::DFG::BasicBlock **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF *v21;
  JSC::DFG *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  JSC::UnlinkedCodeBlock ***v29;
  unint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  JSC::UnlinkedCodeBlock ***v35;
  JSC::UnlinkedCodeBlock **v36;
  void *v37;
  WTF *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  int v44;
  int v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  unsigned __int8 *v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  unint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::DFG *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  BOOL v92;
  JSC::UnlinkedCodeBlock ***v93;
  JSC::UnlinkedCodeBlock **v94;
  unint64_t v95;
  JSC::DFG *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  JSC::UnlinkedCodeBlock **v104;
  unsigned int **v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  _DWORD *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  unint64_t v127;
  JSC::DFG *v128;
  uint64_t v129;
  int isLiveInBytecode;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  BOOL v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  __n128 *v144;
  int v145;
  __n128 *v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  int v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  unsigned __int8 *v158;
  int v159;
  _BOOL4 v160;
  uint64_t v161;
  JSC::DFG *v162;
  unint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  JSC::DFG *v173;
  void *v174;
  uint64_t v175;
  JSC::DFG::Graph *v176;
  char v177;
  uint64_t *v178;
  int v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  JSC::UnlinkedCodeBlock ***v184;
  WTF *v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  unsigned int *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  __int128 *v196;
  WTF *v197;
  unsigned int v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  __int128 *v206;
  WTF *v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  int v213;
  char v214;
  unint64_t v215;
  _QWORD *v216;
  JSC::UnlinkedCodeBlock ***v217;
  JSC::UnlinkedCodeBlock ***v218;
  unsigned __int8 *v219;
  unsigned int v220;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  __int128 *v225;
  WTF *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  WTF *v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  JSC::BytecodeLivenessAnalysis *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t inserted;
  int v259;
  int v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v269;
  unint64_t v270;
  unint64_t v271;
  __int128 *v272;
  __int128 *v273;
  uint64_t v274;
  _QWORD *v275;
  int v276;
  BOOL v277;
  BOOL v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF *v286;
  WTF *v287;
  WTF *v288;
  JSC::DFG *v290;
  uint64_t v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  BOOL v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  _QWORD *v302;
  unint64_t v303;
  unint64_t v304;
  __int128 *v305;
  __int128 *v306;
  uint64_t v307;
  WTF *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  WTF *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  JSC::UnlinkedCodeBlock ***v317;
  uint64_t v318;
  uint64_t v319;
  BOOL v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  BOOL v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  BOOL v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  BOOL v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  BOOL v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  BOOL v373;
  uint64_t v374;
  JSC::DFG::Graph *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  BOOL v386;
  uint64_t v387;
  JSC::DFG *v388;
  uint64_t v389;
  JSC::DFG *v390;
  uint64_t v391;
  JSC::DFG *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  JSC::DFG *v400;
  uint64_t v401;
  JSC::DFG::Graph *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  WTF *v411;
  int v412;
  JSC::DFG::Graph *v413;
  JSC::DFG *v414;
  int v415;
  JSC::UnlinkedCodeBlock ***v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  JSC::UnlinkedCodeBlock **v420;
  int v421;
  uint64_t v422;
  uint64_t *v423;
  char v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  __int16 v430;
  JSC::DFG *v431;
  __int128 v432;
  char v433;
  WTF *v434;
  JSC::DFG *v435;
  WTF *v436;
  uint64_t v437;
  _BYTE v438[128];
  uint64_t v439;
  WTF *v440;
  int v441;
  unsigned int v442;
  uint64_t v443;
  unsigned __int8 v444;
  _QWORD v445[2];
  __int128 v446;
  double v447;
  uint64_t v448;
  unsigned int v449;
  unint64_t v450;
  unint64_t v451;
  unsigned int *v452;
  unint64_t v453;
  unint64_t v454;
  __int128 v455;
  __int16 v456;
  unsigned int **v457;
  uint64_t v458[3];

  v427 = -1;
  v428 = -1;
  v429 = 0;
  v430 = 256;
  v431 = this;
  *(_QWORD *)&v432 = "MovHint removal";
  *((_QWORD *)&v432 + 1) = 16;
  v433 = 0;
  v434 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v427);
  v435 = this;
  v436 = (WTF *)v438;
  v437 = 8;
  v439 = 0;
  if (!*((_DWORD *)this + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x19844CF30);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v10 = *v9;
  v11 = *(unsigned int *)(*v9 + 84);
  v440 = 0;
  v441 = 0;
  v442 = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x19844CF38);
    }
    v12 = (WTF *)WTF::fastMalloc((WTF *)(4 * v11));
    v441 = v11;
    v440 = v12;
    if (v442)
      bzero(v12, 4 * v442);
  }
  v443 = *(_QWORD *)(v10 + 88);
  v444 = 0;
  v445[0] = "DFG";
  v445[1] = 4;
  v446 = v432;
  v447 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v357 = mach_absolute_time();
    v359 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v359 != -1)
    {
      *(_QWORD *)&v455 = v458;
      v450 = (unint64_t)&v455;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v450, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v358) = dword_1ECF4400C;
    v447 = (double)(v357 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v358 * 1000000000.0);
  }
  v13 = v431;
  v14 = *((unsigned int *)v431 + 15);
  if (!(_DWORD)v14)
  {
LABEL_723:
    __break(0xC471u);
    JUMPOUT(0x19844CF28);
  }
  v15 = 0;
  v16 = (JSC::DFG::BasicBlock **)*((_QWORD *)v431 + 6);
  while (!v16[v15])
  {
    if (v14 == ++v15)
      goto LABEL_412;
  }
  if ((_DWORD)v14 != (_DWORD)v15)
  {
    LODWORD(v17) = *((_DWORD *)v431 + 15);
    LODWORD(v18) = v15;
    v414 = v431;
    v415 = v17;
LABEL_14:
    if (v17 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19844CEB4);
    }
    v19 = *(_QWORD *)(*((_QWORD *)v13 + 6) + 8 * v18);
    v449 = 1;
    if (v442)
    {
      v20 = 0;
      v21 = v440;
      do
        *((_DWORD *)v21 + v20++) = 0;
      while (v20 < v442);
    }
    v22 = v431;
    v23 = *(unsigned int *)(v19 + 220);
    v24 = v23 - 1;
    do
    {
      if (v24 >= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x19844CEBCLL);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v19 + 208) + 8 * v24--);
    }
    while (*(unsigned __int16 *)(v25 + 18) - 364 > 0xB);
    v421 = v18;
    v26 = *(_QWORD *)(v25 + 8);
    v426 = v19;
    if ((v26 & 1) != 0)
    {
      v327 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v328 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v328 != 0x3FFFFFFF)
          ? (v329 = (_DWORD)v328 == -1)
          : (v329 = 1),
            v329))
      {
        v330 = 2;
      }
      else if (v328 >> 28)
      {
        v395 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v395 = v327;
        *(_DWORD *)(v395 + 8) = v328;
        v330 = 1;
        v327 = v395;
      }
      else
      {
        v330 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        v327 = v328 << 36;
      }
      v26 = v327 | v330;
      v418 = v327 | v330;
      if (((v327 | v330) & 1) != 0)
      {
        v331 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        if ((v26 & 2) != 0
          || ((v332 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v332 != 0x3FFFFFFF)
            ? (v333 = (_DWORD)v332 == -1)
            : (v333 = 1),
              v333))
        {
          v334 = 2;
        }
        else if (v332 >> 28)
        {
          v396 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v396 = v331;
          *(_DWORD *)(v396 + 8) = v332;
          v334 = 1;
          v331 = v396;
        }
        else
        {
          v334 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
          v331 = v332 << 36;
        }
        v424 = 0;
        v27 = v331 | v334;
        goto LABEL_24;
      }
      v424 = 1;
    }
    else
    {
      v424 = 1;
      v418 = *(_QWORD *)(v25 + 8);
    }
    v27 = v26;
LABEL_24:
    v28 = 0;
    v29 = (JSC::UnlinkedCodeBlock ***)((char *)v22 + 40);
    *(_QWORD *)&v455 = v27;
    v30 = (unint64_t *)&v455;
    v31 = 0x3FFFFFFF;
    v422 = v27;
    v32 = 0x3FFFFFFF;
    while (1)
    {
      v33 = v27 & 0xFFFFFFFF8;
      if ((v27 & 1) != 0)
        v33 = *(_QWORD *)v33;
      if (v33)
      {
        v57 = *(_QWORD *)(v33 + 24);
        v34 = HIDWORD(v57) & 0xFFFFF | ((int)(v57 >> 28) >> 24 << 20);
        if ((*(_BYTE *)(v33 + 32) & 1) != 0)
        {
          v265 = (v34 + 3);
          if (v34 >= -3)
            v266 = ((v265 << 32) - 0x500000000) >> 32;
          else
            v266 = (v265 ^ 0xFFFFFFFFLL) + v443;
          *((_DWORD *)v440 + v266) = v449;
          v58 = (*(_QWORD *)(v33 + 24) >> 60) | (16 * *(_BYTE *)(v33 + 32));
        }
        else
        {
          v58 = (v57 >> 60) | (16 * *(_BYTE *)(v33 + 32));
        }
        if ((v58 & 0xFu) - 3 <= 2)
        {
          v314 = (v34 + 4);
          if (v34 >= -4)
            v315 = ((v314 << 32) - 0x500000000) >> 32;
          else
            v315 = (v314 ^ 0xFFFFFFFFLL) + v443;
          *((_DWORD *)v440 + v315) = v449;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = (JSC::UnlinkedCodeBlock ***)(v33 + 8);
      if (!v33)
        v35 = v29;
      v36 = *v35;
      v38 = JSC::DFG::Graph::livenessFor(v22, *v35, v3, v4, v5, v6, (uint64_t)v7, v8);
      v39 = *v30;
      if ((*v30 & 2) != 0)
      {
        if ((v39 & 1) == 0)
        {
          v40 = 0xFFFFFFFFLL;
          goto LABEL_34;
        }
        v323 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
        v40 = 0xFFFFFFFFLL;
      }
      else
      {
        if ((v39 & 1) == 0)
        {
          v40 = v39 >> 36;
          goto LABEL_34;
        }
        v322 = v39 & 0xFFFFFFFF8;
        v40 = *(unsigned int *)(v322 + 8);
        v323 = *(_QWORD *)v322;
        if ((_DWORD)v40 != -1 && v40 != 0x3FFFFFFF)
        {
          if (v40 >> 28)
          {
            v417 = *(_QWORD *)v322;
            v394 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v394 = v417;
            *(_DWORD *)(v394 + 8) = v40;
            v325 = 1;
            v323 = v394;
          }
          else
          {
            v325 = *(_QWORD *)v322;
            v323 = v40 << 36;
          }
          goto LABEL_537;
        }
      }
      v325 = 2;
LABEL_537:
      v39 = v323 | v325;
LABEL_34:
      if ((v28 & 1) == 0)
        goto LABEL_35;
      v43 = v39 & 1;
      if ((v39 & 2) != 0)
      {
        v60 = (_QWORD *)(v39 & 0xFFFFFFFF8);
        LODWORD(v59) = -1;
        if ((v39 & 1) == 0)
          goto LABEL_70;
      }
      else
      {
        if ((v39 & 1) == 0)
        {
          v59 = v39 >> 36;
          v60 = (_QWORD *)(v39 & 0xFFFFFFFF8);
          goto LABEL_70;
        }
        v60 = (_QWORD *)(v39 & 0xFFFFFFFF8);
        LODWORD(v59) = *(_DWORD *)((v39 & 0xFFFFFFFF8) + 8);
      }
      v60 = (_QWORD *)*v60;
LABEL_70:
      v61 = (char *)(v60 + 1);
      v65 = v60 == 0;
      v62 = (char *)v22 + 40;
      if (!v65)
        v62 = v61;
      v63 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v62 + 56) + 80)
                              + ((unint64_t)v59 >> 2));
      v64 = *v63;
      if ((v64 | 2) == 0x82)
        v64 = v63[1];
      v65 = v64 > 3 || v64 == 2;
      if (v65)
      {
LABEL_35:
        v41 = (v40 & 3) + (v40 >> 2);
        v42 = *(unsigned int **)v38;
        if (*v42 <= v41)
        {
          __break(0xC471u);
          JUMPOUT(0x19844C5C0);
        }
        v43 = v39 & 1;
        goto LABEL_37;
      }
      v41 = (v40 & 3) + (v40 >> 2);
      v42 = (unsigned int *)*((_QWORD *)v38 + 1);
      if (*v42 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x19844C544);
      }
LABEL_37:
      if (v43 && (v39 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v39 & 0xFFFFFFFF8, v37, v3, v4, v5, v6, (uint64_t)v7, v8);
      v44 = *((_DWORD *)v36 + 5);
      v45 = v34;
      if (v44)
      {
        v46 = v440;
        v47 = v34 - v44;
        v48 = v44 - 1;
        do
        {
          if ((v47 < v32 || v47 >= v31)
            && ((*(_DWORD *)(*(_QWORD *)&v42[4 * v41 + 2] + 4 * (v48 >> 5)) >> v48) & 1) != 0)
          {
            if (v47 < 0)
              v49 = (v47 ^ 0xFFFFFFFFLL) + v443;
            else
              v49 = (uint64_t)(((unint64_t)v47 << 32) - 0x500000000) >> 32;
            *((_DWORD *)v46 + v49) = v449;
          }
          ++v47;
          --v48;
        }
        while (v48 != -1);
      }
      v50 = *v30;
      if ((*v30 & 2) != 0)
      {
        v66 = 3;
        v67 = 0xFFFFFFFFLL;
        v51 = v426;
        goto LABEL_82;
      }
      v51 = v426;
      if ((v50 & 1) != 0)
      {
        LODWORD(v67) = *(_DWORD *)((v50 & 0xFFFFFFFF8) + 8);
        if ((v67 & 3) == 0)
          goto LABEL_52;
      }
      else
      {
        if ((v50 & 0x3000000000) == 0)
          goto LABEL_52;
        v67 = v50 >> 36;
      }
      v66 = v67 & 3;
      v51 = v426;
      v45 = v34;
      if ((v67 & 3) != 0)
      {
        v67 = v67;
LABEL_82:
        v68 = (unsigned __int8 *)(**((_QWORD **)v36[7] + 10) + (v67 >> 2));
        v69 = *v68;
        if ((v69 | 2) == 0x82)
          v69 = v68[1];
        switch(v69)
        {
          case 0:
          case 1:
          case 3:
            if (v66 == 1)
              goto LABEL_86;
            goto LABEL_52;
          case 2:
LABEL_86:
            if (v33)
            {
              *((_DWORD *)v440
              + HIDWORD(v443)
              + (unint64_t)v443
              + (*(_QWORD *)(v33 + 24) >> 22)) = v449;
              goto LABEL_53;
            }
            *((_DWORD *)v440 + v443 + (unint64_t)HIDWORD(v443)) = v449;
LABEL_88:
            if ((v422 & 1) != 0 && (v422 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v422 & 0xFFFFFFFF8, v37, v3, v4, v5, v6, (uint64_t)v7, v8);
            if (!*((_DWORD *)v22 + 15))
            {
              __break(0xC471u);
              JUMPOUT(0x19844CEDCLL);
            }
            v70 = *(unsigned int *)(**((_QWORD **)v22 + 6) + 88);
            if ((_DWORD)v70)
            {
              v71 = v440;
              v72 = v70 + 4;
              do
              {
                if ((v72 & 0x80000000) != 0)
                  v73 = (v72 ^ 0xFFFFFFFFLL) + v443;
                else
                  v73 = (uint64_t)(((unint64_t)v72 << 32) - 0x500000000) >> 32;
                *((_DWORD *)v71 + v73) = v449;
              }
              while ((_DWORD)v72-- - 5);
            }
            if ((v424 & 1) == 0 && (v418 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v418 & 0xFFFFFFFF8, v37, v3, v4, v5, v6, (uint64_t)v7, v8);
            ++v449;
            v75 = *(unsigned int *)(v51 + 220);
            if ((_DWORD)v75)
            {
              v76 = v75 - 1;
              v448 = 0;
              if (v75 < (int)v75 - 1)
              {
LABEL_703:
                __break(0xC471u);
                JUMPOUT(0x19844CE04);
              }
              while (2)
              {
                v77 = v75;
                v75 = v76;
                v78 = *(_QWORD *)(*(_QWORD *)(v51 + 208) + 8 * v76);
                v448 = v78;
                if (*(_WORD *)(v78 + 18) != 20)
                {
LABEL_101:
                  if (JSC::DFG::mayExit(v431, (JSC::DFG::Graph *)v78, (JSC::DFG::Node *)v3))
                    ++v449;
                  if (!(_DWORD)v75)
                    goto LABEL_336;
                  if (*(_DWORD *)(v51 + 220) <= (v77 - 2))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19844CE0CLL);
                  }
                  v80 = *(_QWORD *)(*(_QWORD *)(v51 + 208) + 8 * (v77 - 2));
                  v81 = v431;
                  v82 = v448;
                  v450 = (unint64_t)&v427;
                  v451 = (unint64_t)&v448;
                  v452 = &v449;
                  v83 = *(_QWORD *)(v80 + 8);
                  if ((v83 & 1) != 0)
                  {
                    v291 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
                    if ((v83 & 2) != 0
                      || ((v292 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8), (_DWORD)v292 != 0x3FFFFFFF)
                        ? (v293 = (_DWORD)v292 == -1)
                        : (v293 = 1),
                          v293))
                    {
                      v294 = 2;
                    }
                    else if (v292 >> 28)
                    {
                      v388 = v431;
                      v389 = WTF::fastMalloc((WTF *)0x10);
                      v81 = v388;
                      *(_QWORD *)v389 = v291;
                      *(_DWORD *)(v389 + 8) = v292;
                      v294 = 1;
                      v291 = v389;
                    }
                    else
                    {
                      v294 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
                      v291 = v292 << 36;
                    }
                    v83 = v291 | v294;
                  }
                  v454 = v83;
                  if (!v82)
                  {
                    v375 = v81;
                    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v455, (const JSC::CodeOrigin *)&v454);
                    if ((v455 & 1) != 0)
                    {
                      v299 = v455 & 0xFFFFFFFF8;
                      if ((v455 & 0xFFFFFFFF8) != 0)
                        goto LABEL_456;
                    }
                    goto LABEL_113;
                  }
                  v84 = *(_QWORD *)(v82 + 8);
                  if ((v84 & 1) != 0)
                  {
                    v295 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
                    if ((v84 & 2) != 0
                      || ((v296 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v296 != 0x3FFFFFFF)
                        ? (v297 = (_DWORD)v296 == -1)
                        : (v297 = 1),
                          v297))
                    {
                      v298 = 2;
                    }
                    else if (v296 >> 28)
                    {
                      v390 = v81;
                      v391 = WTF::fastMalloc((WTF *)0x10);
                      v81 = v390;
                      *(_QWORD *)v391 = v295;
                      *(_DWORD *)(v391 + 8) = v296;
                      v298 = 1;
                      v295 = v391;
                    }
                    else
                    {
                      v298 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
                      v295 = v296 << 36;
                    }
                    v84 = v295 | v298;
                  }
                  if ((*(_WORD *)(v82 + 18) & 0xFFFE) != 0x14)
                  {
                    LODWORD(v85) = 0;
                    LODWORD(v86) = 0x3FFFFFFF;
                    goto LABEL_110;
                  }
                  v86 = *(_QWORD *)(v82 + 72);
                  v127 = v84;
                  if ((v84 & 1) != 0)
                  {
                    v318 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
                    if ((v84 & 2) != 0
                      || ((v319 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v319 != 0x3FFFFFFF)
                        ? (v320 = (_DWORD)v319 == -1)
                        : (v320 = 1),
                          v320))
                    {
                      v321 = 2;
                    }
                    else if (v319 >> 28)
                    {
                      v392 = v81;
                      v393 = WTF::fastMalloc((WTF *)0x10);
                      v81 = v392;
                      *(_QWORD *)v393 = v318;
                      *(_DWORD *)(v393 + 8) = v319;
                      v321 = 1;
                      v318 = v393;
                    }
                    else
                    {
                      v321 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
                      v318 = v319 << 36;
                    }
                    v127 = v318 | v321;
                  }
                  v453 = v127;
                  v128 = v81;
                  isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode((uint64_t)v81, v86, &v453, v4, v5, v6, (uint64_t)v7, v8);
                  if ((v453 & 1) != 0 && (v453 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v453 & 0xFFFFFFFF8, (void *)v79, v3, v4, v5, v129, (uint64_t)v7, v8);
                  if (!isLiveInBytecode)
                  {
                    LODWORD(v85) = 0;
                    LODWORD(v86) = 0x3FFFFFFF;
                    v81 = v128;
                    goto LABEL_110;
                  }
                  v85 = HIDWORD(v86);
                  if (HIDWORD(v86) == 2)
                  {
                    v167 = HIDWORD(v443);
                    v166 = v443 + (uint64_t)(int)v86;
LABEL_222:
                    v168 = v166 + v167;
                    v169 = v440;
                    v81 = v128;
                    if (!*((_DWORD *)v440 + v168))
LABEL_223:
                      *((_DWORD *)v169 + v168) = v449;
                  }
                  else
                  {
                    if ((v86 & 0x80000000) != 0)
                    {
                      v166 = v86 ^ 0xFFFFFFFFLL;
                      v167 = v443;
                      goto LABEL_222;
                    }
                    v246 = ((unint64_t)v86 << 32) - 0x500000000;
                    v169 = v440;
                    v81 = v128;
                    if (!*(_DWORD *)((char *)v440 + (v246 >> 30)))
                    {
                      v168 = v246 >> 32;
                      goto LABEL_223;
                    }
                  }
LABEL_110:
                  if (v83 == v84)
                  {
                    v6 = v83 & 1;
                    goto LABEL_112;
                  }
                  if ((v83 & 2) != 0)
                  {
                    LODWORD(v87) = -1;
                  }
                  else if ((v83 & 1) != 0)
                  {
                    LODWORD(v87) = *(_DWORD *)((v83 & 0xFFFFFFFF8) + 8);
                  }
                  else
                  {
                    v87 = v83 >> 36;
                  }
                  if ((v84 & 2) != 0)
                  {
                    LODWORD(v88) = -1;
                  }
                  else if ((v84 & 1) != 0)
                  {
                    LODWORD(v88) = *(_DWORD *)((v84 & 0xFFFFFFFF8) + 8);
                  }
                  else
                  {
                    v88 = v84 >> 36;
                  }
                  v89 = (uint64_t *)(v83 & 0xFFFFFFFF8);
                  if ((_DWORD)v87 == (_DWORD)v88)
                  {
                    v274 = v83 & 0xFFFFFFFF8;
                    if ((v83 & 1) != 0)
                      v274 = *v89;
                    v275 = (_QWORD *)(v84 & 0xFFFFFFFF8);
                    if ((v84 & 1) != 0)
                      v275 = (_QWORD *)*v275;
                    if ((_QWORD *)v274 == v275)
                    {
                      v6 = v84 & 1;
                      goto LABEL_112;
                    }
                  }
                  v90 = v83 & 0xFFFFFFFF8;
                  if ((v83 & 1) != 0)
                    v90 = *v89;
                  v6 = v84 & 1;
                  v91 = (_QWORD *)(v84 & 0xFFFFFFFF8);
                  if ((v84 & 1) == 0)
                  {
                    if ((_QWORD *)v90 == v91)
                    {
                      v92 = v91 == 0;
                      v93 = (JSC::UnlinkedCodeBlock ***)(v91 + 1);
                      if (!v91)
                        v93 = (JSC::UnlinkedCodeBlock ***)((char *)v81 + 40);
                      v94 = *v93;
                      if ((v84 & 2) == 0)
                      {
                        v95 = v84 >> 36;
                        goto LABEL_131;
                      }
LABEL_197:
                      v97 = 0;
LABEL_198:
                      if ((v83 & 2) != 0)
                      {
                        v157 = 3;
                        v156 = 0xFFFFFFFFLL;
LABEL_203:
                        v158 = (unsigned __int8 *)(**((_QWORD **)v94[7] + 10) + (v156 >> 2));
                        v159 = *v158;
                        if ((v159 | 2) == 0x82)
                          v159 = v158[1];
                        v160 = 0;
                        switch(v159)
                        {
                          case 0:
                          case 1:
                          case 3:
                            v160 = v157 == 1;
                            break;
                          case 2:
                            v160 = 1;
                            break;
                          case 4:
                            break;
                          default:
                            __break(0xC471u);
                            JUMPOUT(0x19844C9FCLL);
                        }
                      }
                      else
                      {
                        if ((v83 & 1) != 0)
                          LODWORD(v156) = *(_DWORD *)((v83 & 0xFFFFFFFF8) + 8);
                        else
                          v156 = v83 >> 36;
                        v157 = v156 & 3;
                        if ((v156 & 3) != 0)
                        {
                          v156 = v156;
                          goto LABEL_203;
                        }
                        v160 = 0;
                      }
                      if (v97)
                      {
                        v161 = v84 & 1;
                        v162 = v81;
                        if ((v84 & 1) != 0)
                          LODWORD(v163) = *(_DWORD *)((v84 & 0xFFFFFFFF8) + 8);
                        else
                          v163 = v84 >> 36;
                      }
                      else
                      {
                        v161 = v84 & 1;
                        v162 = v81;
                        LODWORD(v163) = -1;
                      }
                      v164 = JSC::tmpLivenessForCheckpoint((uint64_t)v94, v163);
                      v81 = v162;
                      if ((v160 & ~v164) != 0)
                      {
                        if (v90)
                          v310 = (unint64_t)*(unsigned int *)(v90 + 24) >> 22;
                        else
                          v310 = 0;
                        v6 = v161;
                        v311 = v443 + v310 + HIDWORD(v443);
                        if (!*((_DWORD *)v440 + v311))
                          *((_DWORD *)v440 + v311) = v449;
                      }
                      else
                      {
                        v6 = v161;
                      }
LABEL_136:
                      v458[0] = (uint64_t)v94;
                      v98 = *((_QWORD *)v81 + 93);
                      if (!v98)
                        goto LABEL_345;
                      v99 = *(_DWORD *)(v98 - 8);
                      v100 = ((unint64_t)v94 + ~((_QWORD)v94 << 32)) ^ (((unint64_t)v94
                                                                              + ~((_QWORD)v94 << 32)) >> 22);
                      v101 = 9 * ((v100 + ~(v100 << 13)) ^ ((v100 + ~(v100 << 13)) >> 8));
                      v102 = (v101 ^ (v101 >> 15)) + ~((v101 ^ (v101 >> 15)) << 27);
                      v103 = v99 & ((v102 >> 31) ^ v102);
                      v104 = *(JSC::UnlinkedCodeBlock ***)(v98 + 16 * v103);
                      if (v104 != v94)
                      {
                        v170 = 1;
                        while (v104)
                        {
                          v103 = ((_DWORD)v103 + v170) & v99;
                          v104 = *(JSC::UnlinkedCodeBlock ***)(v98 + 16 * v103);
                          ++v170;
                          if (v104 == v94)
                            goto LABEL_138;
                        }
                        v103 = *(unsigned int *)(v98 - 4);
                      }
LABEL_138:
                      if (v103 == *(_DWORD *)(v98 - 4))
                      {
LABEL_345:
                        v234 = v6;
                        v235 = (JSC::BytecodeLivenessAnalysis *)*((_QWORD *)v94[7] + 11);
                        if (!v235)
                        {
                          v290 = v81;
                          v235 = (JSC::BytecodeLivenessAnalysis *)JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v94[7], v94, v3, v4, v5, v6, (uint64_t)v7, v8);
                          v81 = v290;
                        }
                        v236 = (uint64_t *)((char *)v81 + 744);
                        JSC::BytecodeLivenessAnalysis::computeFullLiveness(v235, (JSC::CodeBlock *)v94, &v457);
                        v105 = v457;
                        WTF::HashMap<JSC::CodeBlock *,std::unique_ptr<JSC::FullBytecodeLiveness>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<std::unique_ptr<JSC::FullBytecodeLiveness>>,WTF::HashTableTraits>::add<std::unique_ptr<JSC::FullBytecodeLiveness>>(v236, v458, (uint64_t *)&v457, v237, v238, v239, v240, v241, (uint64_t)&v455);
                        v79 = (uint64_t)v457;
                        v457 = 0;
                        if (v79)
                          std::default_delete<JSC::FullBytecodeLiveness>::operator()[abi:sn180100]((int)&v457, (WTF *)v79, v3, v242, v5, v243, (uint64_t)v7, v8);
                        v6 = v234;
                      }
                      else
                      {
                        v105 = *(unsigned int ***)(v98 + 16 * v103 + 8);
                      }
                      if ((v454 & 2) != 0)
                      {
                        LODWORD(v106) = -1;
                      }
                      else if ((v454 & 1) != 0)
                      {
                        LODWORD(v106) = *(_DWORD *)((v454 & 0xFFFFFFFF8) + 8);
                      }
                      else
                      {
                        v106 = v454 >> 36;
                      }
                      v107 = (v106 & 3) + (v106 >> 2);
                      v108 = *v105;
                      v109 = **v105;
                      if (v109 <= v107)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19844C3FCLL);
                      }
                      if (v97)
                      {
                        if (v6)
                          LODWORD(v110) = *(_DWORD *)((v84 & 0xFFFFFFFF8) + 8);
                        else
                          v110 = v84 >> 36;
                      }
                      else
                      {
                        LODWORD(v110) = -1;
                      }
                      v4 = 0xFFFFFFFF00000000;
                      v51 = v426;
                      v111 = (v110 & 3) + (v110 >> 2);
                      if (v109 <= v111)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19844C41CLL);
                      }
                      v112 = v108 + 2;
                      v113 = (uint64_t *)&v108[4 * v107 + 2];
                      v114 = v113[1] + 31;
                      if (v114 >= 0x20)
                      {
                        v115 = *(_QWORD *)&v112[4 * v111];
                        v116 = *v113;
                        v117 = v114 >> 5;
                        v118 = v450;
                        v119 = v452;
                        v120 = 0;
                        if (v92)
                        {
                          v121 = 0xFFFFFFFA00000000;
                          while (1)
                          {
                            v122 = *(_DWORD *)(v116 + 4 * v120) & ~*(_DWORD *)(v115 + 4 * v120);
                            if (v122)
                              break;
LABEL_159:
                            ++v120;
                            v121 -= 0x2000000000;
                            if (v120 == v117)
                              goto LABEL_112;
                          }
                          v123 = 32 * v120;
                          v124 = v121;
                          while (2)
                          {
                            if ((v122 & 1) == 0)
                            {
LABEL_154:
                              ++v123;
                              v124 -= 0x100000000;
                              v125 = v122 >= 2;
                              v122 >>= 1;
                              if (!v125)
                                goto LABEL_159;
                              continue;
                            }
                            break;
                          }
                          v126 = *(_QWORD *)(v118 + 232);
                          if ((v123 & 0x80000000) != 0)
                          {
                            v79 = *(unsigned int *)(v126 + (v124 >> 30));
                            if ((_DWORD)v79)
                              goto LABEL_154;
                            v79 = v124 >> 32;
                          }
                          else
                          {
                            v79 = *(unsigned int *)(v118 + 248) + (unint64_t)v123;
                            v3 = *(unsigned int *)(v126 + 4 * v79);
                            if ((_DWORD)v3)
                              goto LABEL_154;
                          }
                          v3 = *v119;
                          *(_DWORD *)(v126 + 4 * v79) = v3;
                          goto LABEL_154;
                        }
                        v149 = -1;
                        while (1)
                        {
                          v150 = *(_DWORD *)(v116 + 4 * v120) & ~*(_DWORD *)(v115 + 4 * v120);
                          if (v150)
                            break;
LABEL_195:
                          ++v120;
                          v149 -= 32;
                          if (v120 == v117)
                            goto LABEL_112;
                        }
                        v151 = v149;
                        while (2)
                        {
                          if ((v150 & 1) == 0)
                          {
LABEL_190:
                            --v151;
                            v152 = v150 > 1;
                            v150 >>= 1;
                            if (!v152)
                              goto LABEL_195;
                            continue;
                          }
                          break;
                        }
                        v153 = v151
                             + (HIDWORD(*(_QWORD *)(v90 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v90 + 24) >> 28) >> 24 << 20));
                        if ((int)v153 >= 0)
                        {
                          v245 = (v153 << 32) - 0x500000000;
                          v155 = *(_QWORD *)(v118 + 232);
                          v79 = *(unsigned int *)(v155 + (v245 >> 30));
                          if ((_DWORD)v79)
                            goto LABEL_190;
                          v154 = v245 >> 32;
                        }
                        else
                        {
                          v154 = (v153 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v118 + 248);
                          v155 = *(_QWORD *)(v118 + 232);
                          v79 = *(unsigned int *)(v155 + 4 * v154);
                          if ((_DWORD)v79)
                            goto LABEL_190;
                        }
                        v79 = *v119;
                        *(_DWORD *)(v155 + 4 * v154) = v79;
                        goto LABEL_190;
                      }
LABEL_112:
                      if (v6)
                      {
                        v299 = v84 & 0xFFFFFFFF8;
                        if ((v84 & 0xFFFFFFFF8) != 0)
LABEL_456:
                          WTF::fastFree(v299, (void *)v79, v3, v4, v5, v6, (uint64_t)v7, v8);
                      }
LABEL_113:
                      if ((v454 & 1) != 0 && (v454 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v454 & 0xFFFFFFFF8, (void *)v79, v3, v4, v5, v6, (uint64_t)v7, v8);
                      v76 = v75 - 1;
                      v448 = 0;
                      if (*(_DWORD *)(v51 + 220) <= (v75 - 1))
                        goto LABEL_703;
                      continue;
                    }
                    v171 = v84 & 1;
                    v172 = v84;
LABEL_229:
                    v458[0] = v172;
                    v173 = v81;
                    JSC::DFG::Graph::localsAndTmpsLiveInBytecode((uint64_t)v81, v458, (WTF::BitVector *)&v455);
                    if ((v458[0] & 1) != 0 && (v458[0] & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v458[0] & 0xFFFFFFFF8, v174, v3, v4, v5, v175, (uint64_t)v7, v8);
                    if (!*((_DWORD *)v173 + 15))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19844CEC4);
                    }
                    v176 = v173;
                    v412 = *(_DWORD *)(**((_QWORD **)v173 + 6) + 92);
                    v6 = v171;
                    if ((v83 & 1) != 0)
                    {
                      v352 = *v89;
                      if ((v83 & 2) != 0
                        || (v353 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8), (_DWORD)v353 == 0x3FFFFFFF)
                        || (_DWORD)v353 == -1)
                      {
                        v354 = 2;
                      }
                      else if (v353 >> 28)
                      {
                        v402 = v176;
                        v403 = WTF::fastMalloc((WTF *)0x10);
                        v6 = v171;
                        v176 = v402;
                        *(_QWORD *)v403 = v352;
                        *(_DWORD *)(v403 + 8) = v353;
                        v354 = 1;
                        v352 = v403;
                      }
                      else
                      {
                        v354 = v352;
                        v352 = v353 << 36;
                      }
                      v83 = v352 | v354;
                    }
                    v177 = 0;
                    v416 = (JSC::UnlinkedCodeBlock ***)((char *)v176 + 40);
                    v457 = (unsigned int **)v83;
                    v178 = (uint64_t *)&v457;
                    v179 = 0x3FFFFFFF;
                    v180 = v83;
                    v181 = 0x3FFFFFFF;
                    v413 = v176;
                    while (2)
                    {
                      v182 = v180 & 0xFFFFFFFF8;
                      if ((v180 & 1) != 0)
                        v182 = *(_QWORD *)v182;
                      v423 = v178;
                      if (!v182)
                      {
                        v183 = v6;
                        v425 = 0;
                        goto LABEL_237;
                      }
                      v212 = *(_QWORD *)(v182 + 24);
                      v213 = HIDWORD(v212) & 0xFFFFF | ((int)(v212 >> 28) >> 24 << 20);
                      v214 = (v212 >> 60) | (16 * *(_BYTE *)(v182 + 32));
                      if ((*(_BYTE *)(v182 + 32) & 1) != 0)
                      {
                        v267 = (v213 + 3);
                        if ((_DWORD)v85 != v267 >> 31 || (_DWORD)v86 != (_DWORD)v267)
                        {
                          v269 = (_QWORD *)(2 * v455);
                          v270 = (v455 & 0x8000000000000000) != 0 ? 63 : *v269;
                          v271 = (-4 - v213);
                          if (v270 <= v271)
                            goto LABEL_484;
                          v272 = (__int128 *)(v269 + 1);
                          v273 = &v455;
                          if ((uint64_t)v455 >= 0)
                            v273 = v272;
                          if (((*(_QWORD *)((char *)v273 + ((v271 >> 3) & 0x1FFFFFF8)) >> (-4 - v213)) & 1) == 0)
                          {
LABEL_484:
                            if (v213 >= -3)
                            {
                              v326 = (v267 << 32) - 0x500000000;
                              v313 = v440;
                              if (!*(_DWORD *)((char *)v440 + (v326 >> 30)))
                              {
                                v312 = v326 >> 32;
LABEL_486:
                                *((_DWORD *)v313 + v312) = v449;
                                v214 = (*(_QWORD *)(v182 + 24) >> 60) | (16 * *(_BYTE *)(v182 + 32));
                              }
                            }
                            else
                            {
                              v312 = (v267 ^ 0xFFFFFFFFLL) + v443;
                              v313 = v440;
                              if (!*((_DWORD *)v440 + v312))
                                goto LABEL_486;
                            }
                          }
                        }
                      }
                      v425 = v213;
                      v183 = v6;
                      if ((v214 & 0xFu) - 3 <= 2)
                      {
                        v300 = (v213 + 4);
                        if ((_DWORD)v85 != v300 >> 31 || (_DWORD)v86 != (_DWORD)v300)
                        {
                          v302 = (_QWORD *)(2 * v455);
                          v303 = (v455 & 0x8000000000000000) != 0 ? 63 : *v302;
                          v304 = (-5 - v213);
                          if (v303 <= v304)
                            goto LABEL_468;
                          v305 = (__int128 *)(v302 + 1);
                          v306 = &v455;
                          if ((uint64_t)v455 >= 0)
                            v306 = v305;
                          if (((*(_QWORD *)((char *)v306 + ((v304 >> 3) & 0x1FFFFFF8)) >> (-5 - v213)) & 1) == 0)
                          {
LABEL_468:
                            if (v213 >= -4)
                            {
                              v356 = (v300 << 32) - 0x500000000;
                              v308 = v440;
                              if (!*(_DWORD *)((char *)v440 + (v356 >> 30)))
                              {
                                v307 = v356 >> 32;
LABEL_470:
                                *((_DWORD *)v308 + v307) = v449;
                              }
                            }
                            else
                            {
                              v307 = (v300 ^ 0xFFFFFFFFLL) + v443;
                              v308 = v440;
                              if (!*((_DWORD *)v440 + v307))
                                goto LABEL_470;
                            }
                          }
                        }
                      }
LABEL_237:
                      v184 = (JSC::UnlinkedCodeBlock ***)(v182 + 8);
                      if (!v182)
                        v184 = v416;
                      v420 = *v184;
                      v185 = JSC::DFG::Graph::livenessFor(v176, *v184, v3, v4, v5, v6, (uint64_t)v7, v8);
                      v7 = v423;
                      v186 = *v423;
                      v419 = v182;
                      if ((*v423 & 2) != 0)
                      {
                        if ((v186 & 1) == 0)
                        {
                          v187 = 0xFFFFFFFFLL;
LABEL_242:
                          v6 = v183;
                          v188 = v425;
                          v8 = (uint64_t)v420;
                          goto LABEL_243;
                        }
                        v347 = *(_QWORD *)(v186 & 0xFFFFFFFF8);
                        v187 = 0xFFFFFFFFLL;
                        v6 = v183;
                        v188 = v425;
                        v8 = (uint64_t)v420;
                      }
                      else
                      {
                        if ((v186 & 1) == 0)
                        {
                          v187 = v186 >> 36;
                          goto LABEL_242;
                        }
                        v346 = v186 & 0xFFFFFFFF8;
                        v187 = *(unsigned int *)(v346 + 8);
                        v347 = *(_QWORD *)v346;
                        v348 = (_DWORD)v187 == -1 || v187 == 0x3FFFFFFF;
                        v6 = v183;
                        v8 = (uint64_t)v420;
                        if (!v348)
                        {
                          v188 = v425;
                          if (v187 >> 28)
                          {
                            v410 = *(_QWORD *)v346;
                            v411 = v185;
                            v397 = v6;
                            v398 = WTF::fastMalloc((WTF *)0x10);
                            v8 = (uint64_t)v420;
                            v7 = v423;
                            v6 = v397;
                            v188 = v425;
                            v399 = v398;
                            v185 = v411;
                            *(_QWORD *)v399 = v410;
                            *(_DWORD *)(v399 + 8) = v187;
                            v349 = 1;
                            v347 = v399;
                          }
                          else
                          {
                            v349 = *(_QWORD *)v346;
                            v347 = v187 << 36;
                          }
LABEL_574:
                          v186 = v347 | v349;
LABEL_243:
                          if ((v177 & 1) == 0)
                          {
LABEL_244:
                            v189 = (v187 & 3) + (v187 >> 2);
                            v190 = *(unsigned int **)v185;
                            if (**(unsigned int **)v185 <= v189)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19844C718);
                            }
                            v191 = v186 & 1;
                            goto LABEL_246;
                          }
                          v191 = v186 & 1;
                          if ((v186 & 2) != 0)
                          {
                            v216 = (_QWORD *)(v186 & 0xFFFFFFFF8);
                            LODWORD(v215) = -1;
                            if ((v186 & 1) == 0)
                              goto LABEL_295;
                          }
                          else
                          {
                            if ((v186 & 1) == 0)
                            {
                              v215 = v186 >> 36;
                              v216 = (_QWORD *)(v186 & 0xFFFFFFFF8);
LABEL_295:
                              v217 = (JSC::UnlinkedCodeBlock ***)(v216 + 1);
                              v65 = v216 == 0;
                              v218 = v416;
                              if (!v65)
                                v218 = v217;
                              v219 = (unsigned __int8 *)(**((_QWORD **)(*v218)[7] + 10)
                                                       + ((unint64_t)v215 >> 2));
                              v220 = *v219;
                              if ((v220 | 2) == 0x82)
                                v220 = v219[1];
                              if (v220 > 3 || v220 == 2)
                                goto LABEL_244;
                              v189 = (v187 & 3) + (v187 >> 2);
                              v190 = (unsigned int *)*((_QWORD *)v185 + 1);
                              if (*v190 <= v189)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19844C57CLL);
                              }
LABEL_246:
                              if (v191 && (v186 & 0xFFFFFFFF8) != 0)
                              {
                                v335 = v6;
                                WTF::fastFree(v186 & 0xFFFFFFFF8, (void *)v79, v3, v4, v5, v6, (uint64_t)v7, v8);
                                v8 = (uint64_t)v420;
                                v7 = v423;
                                v6 = v335;
                                v188 = v425;
                              }
                              v192 = *(unsigned int *)(v8 + 20);
                              if ((_DWORD)v192)
                              {
                                v193 = 0;
                                v194 = (uint64_t *)&v190[4 * v189 + 2];
                                v195 = v455;
                                v196 = (__int128 *)(2 * v455 + 8);
                                if ((uint64_t)v455 < 0)
                                  v196 = &v455;
                                v197 = v440;
                                v198 = v188 - v192;
                                v199 = v192 - v188;
                                v200 = -1;
                                v79 = 0xFFFFFFFFLL;
                                while (1)
                                {
                                  if ((int)v198 >= v181 && (int)v198 < v179)
                                    goto LABEL_254;
                                  v4 = v192 + v79;
                                  v5 = *v194;
                                  v3 = (*(_DWORD *)(*v194 + 4 * ((v192 + v200) >> 5)) >> (v192 + v79));
                                  if ((v3 & 1) == 0
                                    || (_DWORD)v85 == v198 >> 31 && (_DWORD)v192 + (_DWORD)v86 - v188 == (_DWORD)v193)
                                  {
                                    goto LABEL_254;
                                  }
                                  v201 = v195 < 0 ? 63 : *(_QWORD *)(2 * v195);
                                  v4 = (v199 + v79);
                                  if (v201 > v4)
                                  {
                                    v3 = *(_QWORD *)((char *)v196
                                                   + (((unint64_t)(v199 + v79) >> 3) & 0x1FFFFFF8)) >> (v199 + v79);
                                    if ((v3 & 1) != 0)
                                      goto LABEL_254;
                                  }
                                  if ((v198 & 0x80000000) == 0)
                                    break;
                                  v3 = (v198 ^ 0xFFFFFFFFLL) + v443;
                                  v4 = *((unsigned int *)v197 + v3);
                                  if (!(_DWORD)v4)
                                    goto LABEL_264;
LABEL_254:
                                  ++v198;
                                  --v79;
                                  ++v193;
                                  --v200;
                                  if ((_DWORD)v192 == (_DWORD)v193)
                                    goto LABEL_266;
                                }
                                v3 = ((unint64_t)v198 << 32) - 0x500000000;
                                v4 = *(unsigned int *)((char *)v197 + (v3 >> 30));
                                if ((_DWORD)v4)
                                  goto LABEL_254;
                                v3 >>= 32;
LABEL_264:
                                v4 = v449;
                                *((_DWORD *)v197 + v3) = v449;
                                goto LABEL_254;
                              }
LABEL_266:
                              v202 = *v7;
                              if ((*v7 & 2) != 0)
                              {
                                LODWORD(v79) = -1;
                                v51 = v426;
                                v203 = v419;
                                goto LABEL_307;
                              }
                              v51 = v426;
                              v203 = v419;
                              if ((v202 & 1) != 0)
                              {
                                v79 = *(unsigned int *)((v202 & 0xFFFFFFFF8) + 8);
                                if ((v79 & 3) != 0)
                                  goto LABEL_307;
                              }
                              else
                              {
                                if ((v202 & 0x3000000000) == 0)
                                  goto LABEL_269;
                                v79 = v202 >> 36;
LABEL_307:
                                v222 = v6;
                                v223 = JSC::tmpLivenessForCheckpoint(v8, v79);
                                v6 = v222;
                                if (v223)
                                {
                                  v224 = v455;
                                  v225 = (__int128 *)(2 * v455 + 8);
                                  if ((uint64_t)v455 < 0)
                                    v225 = &v455;
                                  v226 = v440;
                                  do
                                  {
                                    v227 = __clz(__rbit32(v223));
                                    if (v203)
                                      v227 += *(_DWORD *)(v203 + 24) >> 22;
                                    if ((_DWORD)v85 != 2 || (_DWORD)v86 != v227)
                                    {
                                      v228 = v224 < 0 ? 63 : *(_QWORD *)(2 * v224);
                                      v229 = v227 + v412;
                                      if (v228 <= v229
                                        || ((*(_QWORD *)((char *)v225 + ((v229 >> 3) & 0x1FFFFFF8)) >> (v227 + v412)) & 1) == 0)
                                      {
                                        v230 = v443 + (unint64_t)v227 + HIDWORD(v443);
                                        if (!*((_DWORD *)v226 + v230))
                                          *((_DWORD *)v226 + v230) = v449;
                                      }
                                    }
                                    v223 &= v223 - 1;
                                  }
                                  while (v223);
                                }
                              }
LABEL_269:
                              if (!v203)
                              {
                                if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
                                {
                                  v355 = v6;
                                  WTF::fastFree(v83 & 0xFFFFFFFF8, (void *)v79, v3, v4, v5, v6, (uint64_t)v7, v8);
                                  v6 = v355;
                                }
                                if ((v455 & 0x8000000000000000) == 0)
                                {
                                  v263 = v6;
                                  WTF::fastFree(2 * v455, (void *)v79, v3, v4, v5, v6, (uint64_t)v7, v8);
                                  v6 = v263;
                                }
                                goto LABEL_112;
                              }
                              v204 = *(_DWORD **)v203;
                              if (*(_QWORD *)v203)
                                LODWORD(v204) = *v204;
                              v181 = v188 + 5;
                              v179 = (_DWORD)v204 + v188 + 5;
                              if (v188 + 5 >= v179)
                              {
LABEL_291:
                                v180 = *(_QWORD *)(v203 + 16);
                                v177 = 1;
                                v178 = (uint64_t *)(v203 + 16);
                                v176 = v413;
                                continue;
                              }
                              v205 = v455;
                              v206 = (__int128 *)(2 * v455 + 8);
                              if ((uint64_t)v455 < 0)
                                v206 = &v455;
                              v207 = v440;
                              v208 = v188 + 5;
                              while (2)
                              {
                                v209 = v208;
                                if ((_DWORD)v85 == v208 >> 31 && v208 == (_DWORD)v86
                                  || (v205 < 0 ? (v210 = 63) : (v210 = *(_QWORD *)(2 * v205)),
                                      v210 > ~(_DWORD)v209
                                   && ((*(_QWORD *)((char *)v206
                                                  + (((unint64_t)~(_DWORD)v209 >> 3) & 0x1FFFFFF8)) >> ~(_BYTE)v209) & 1) != 0))
                                {
LABEL_282:
                                  v208 = v209 + 1;
                                  if ((_DWORD)v209 + 1 == v179)
                                    goto LABEL_291;
                                  continue;
                                }
                                break;
                              }
                              if ((v209 & 0x80000000) != 0)
                              {
                                v211 = (v209 ^ 0xFFFFFFFFLL) + v443;
                                if (*((_DWORD *)v207 + v211))
                                  goto LABEL_282;
                              }
                              else
                              {
                                v264 = (v209 << 32) - 0x500000000;
                                if (*(_DWORD *)((char *)v207 + (v264 >> 30)))
                                  goto LABEL_282;
                                v211 = v264 >> 32;
                              }
                              *((_DWORD *)v207 + v211) = v449;
                              goto LABEL_282;
                            }
                            v216 = (_QWORD *)(v186 & 0xFFFFFFFF8);
                            LODWORD(v215) = *(_DWORD *)((v186 & 0xFFFFFFFF8) + 8);
                          }
                          v216 = (_QWORD *)*v216;
                          goto LABEL_295;
                        }
                        v188 = v425;
                      }
                      break;
                    }
                    v349 = 2;
                    goto LABEL_574;
                  }
                  v316 = *v91;
                  if (v90 != *v91)
                  {
                    if ((v84 & 2) != 0
                      || (v350 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v350 == 0x3FFFFFFF)
                      || (_DWORD)v350 == -1)
                    {
                      v171 = v84 & 1;
                      v351 = 2;
                    }
                    else
                    {
                      v171 = v84 & 1;
                      if (v350 >> 28)
                      {
                        v400 = v81;
                        v401 = WTF::fastMalloc((WTF *)0x10);
                        v81 = v400;
                        *(_QWORD *)v401 = v316;
                        *(_DWORD *)(v401 + 8) = v350;
                        v351 = 1;
                        v316 = v401;
                      }
                      else
                      {
                        v351 = *v91;
                        v316 = v350 << 36;
                      }
                    }
                    v172 = v316 | v351;
                    goto LABEL_229;
                  }
                  v92 = v90 == 0;
                  v317 = (JSC::UnlinkedCodeBlock ***)(v90 + 8);
                  if (!v90)
                    v317 = (JSC::UnlinkedCodeBlock ***)((char *)v81 + 40);
                  v94 = *v317;
                  if ((v84 & 2) != 0)
                    goto LABEL_197;
                  LODWORD(v95) = *(_DWORD *)((v84 & 0xFFFFFFFF8) + 8);
LABEL_131:
                  if ((v95 & 3) != 0)
                  {
                    v97 = 1;
                    goto LABEL_198;
                  }
                  v96 = v81;
                  if ((v83 & 2) != 0)
                  {
                    LODWORD(v79) = -1;
                  }
                  else if ((v83 & 1) != 0)
                  {
                    v79 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8);
                    if ((v79 & 3) == 0)
                      goto LABEL_135;
                  }
                  else
                  {
                    if ((v83 & 0x3000000000) == 0)
                    {
LABEL_135:
                      v97 = 1;
                      goto LABEL_136;
                    }
                    v79 = v83 >> 36;
                  }
                  v165 = JSC::tmpLivenessForCheckpoint((uint64_t)v94, v79);
                  if (v165)
                  {
                    v231 = v440;
                    v81 = v96;
                    v6 = v84 & 1;
                    if (v92)
                    {
                      do
                      {
                        v232 = __clz(__rbit32(v165)) + (unint64_t)v443 + HIDWORD(v443);
                        if (!*((_DWORD *)v231 + v232))
                          *((_DWORD *)v231 + v232) = v449;
                        v97 = 1;
                        v165 &= v165 - 1;
                      }
                      while (v165);
                      v92 = 1;
                    }
                    else
                    {
                      do
                      {
                        v244 = HIDWORD(v443)
                             + (unint64_t)v443
                             + __clz(__rbit32(v165))
                             + (*(_DWORD *)(v90 + 24) >> 22);
                        if (!*((_DWORD *)v231 + v244))
                          *((_DWORD *)v231 + v244) = v449;
                        v97 = 1;
                        v165 &= v165 - 1;
                      }
                      while (v165);
                      v92 = 0;
                    }
                  }
                  else
                  {
                    v97 = 1;
                    v81 = v96;
                    v6 = v84 & 1;
                  }
                  goto LABEL_136;
                }
                break;
              }
              v131 = *(_QWORD *)(v78 + 72);
              if (HIDWORD(v131) == 2)
              {
                v133 = HIDWORD(v443);
                v132 = v443 + (uint64_t)(int)v131;
LABEL_168:
                v134 = v132 + v133;
              }
              else
              {
                if ((v131 & 0x80000000) != 0)
                {
                  v132 = *(_QWORD *)(v78 + 72) ^ 0xFFFFFFFFLL;
                  v133 = v443;
                  goto LABEL_168;
                }
                v134 = (uint64_t)(((unint64_t)v131 << 32) - 0x500000000) >> 32;
              }
              v135 = *((_DWORD *)v440 + v134);
              if (v135)
                v136 = v135 == v449;
              else
                v136 = 1;
              if (!v136)
              {
LABEL_180:
                if (HIDWORD(v131) == 2)
                {
                  v148 = v443 + (uint64_t)(int)v131 + HIDWORD(v443);
                }
                else if ((v131 & 0x80000000) != 0)
                {
                  v148 = (v131 ^ 0xFFFFFFFFLL) + v443;
                }
                else
                {
                  v148 = (uint64_t)(((unint64_t)v131 << 32) - 0x500000000) >> 32;
                }
                *((_DWORD *)v440 + v148) = 0;
                goto LABEL_101;
              }
              *(_WORD *)(v78 + 18) = 21;
              *(_DWORD *)(v78 + 56) = 8;
              v137 = *(_QWORD *)(v78 + 24);
              v138 = v439;
              if (v439
                || (WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>>,WTF::IntHash<unsigned char>,WTF::HashMap<unsigned char,JSC::DFG::Node *,WTF::IntHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand(&v439, 0), (v138 = v439) != 0))
              {
                v139 = *(_DWORD *)(v138 - 8);
              }
              else
              {
                v139 = 0;
              }
              v140 = (v137 >> 50) & 0x3F;
              v141 = 9 * ((~((_DWORD)v140 << 15) + v140) ^ ((~((_DWORD)v140 << 15) + v140) >> 10));
              v142 = (v141 ^ (v141 >> 6)) + ~((v141 ^ (v141 >> 6)) << 11);
              v143 = v139 & (v142 ^ HIWORD(v142));
              v144 = (__n128 *)(v138 + 16 * v143);
              v145 = v144->n128_u8[0];
              if (v145 != 255)
              {
                v146 = 0;
                v147 = 1;
                while ((_DWORD)v140 != v145)
                {
                  if (v145 == 254)
                    v146 = v144;
                  v143 = (v143 + v147) & v139;
                  v144 = (__n128 *)(v138 + 16 * v143);
                  v145 = v144->n128_u8[0];
                  ++v147;
                  if (v145 == 255)
                  {
                    if (v146)
                    {
                      v146->n128_u8[0] = -1;
                      v146->n128_u64[1] = 0;
                      --*(_DWORD *)(v439 - 16);
                      v144 = v146;
                    }
                    goto LABEL_359;
                  }
                }
                goto LABEL_179;
              }
LABEL_359:
              v144->n128_u8[0] = v140;
              if (!*((_DWORD *)v431 + 15))
              {
                __break(0xC471u);
                JUMPOUT(0x19844CED4);
              }
              v247 = **((_QWORD **)v431 + 6);
              if (!*(_DWORD *)(v247 + 220))
              {
                __break(0xC471u);
                JUMPOUT(0x19844CECCLL);
              }
              v248 = **(_QWORD **)(v247 + 208);
              v249 = *(_QWORD *)v248;
              if ((*(_QWORD *)v248 & 1) != 0)
              {
                v360 = *(_QWORD *)(v249 & 0xFFFFFFFF8);
                if ((v249 & 2) != 0
                  || ((v361 = *(unsigned int *)((v249 & 0xFFFFFFFF8) + 8), (_DWORD)v361 != 0x3FFFFFFF)
                    ? (v362 = (_DWORD)v361 == -1)
                    : (v362 = 1),
                      v362))
                {
                  v363 = 2;
                }
                else if (v361 >> 28)
                {
                  v404 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v404 = v360;
                  *(_DWORD *)(v404 + 8) = v361;
                  v363 = 1;
                  v360 = v404;
                }
                else
                {
                  v363 = *(_QWORD *)(v249 & 0xFFFFFFFF8);
                  v360 = v361 << 36;
                }
                v249 = v360 | v363;
                v51 = v426;
              }
              v450 = v249;
              v250 = *(_QWORD *)(v248 + 8);
              if ((v250 & 1) != 0)
              {
                v364 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                if ((v250 & 2) != 0
                  || ((v365 = *(unsigned int *)((v250 & 0xFFFFFFFF8) + 8), (_DWORD)v365 != 0x3FFFFFFF)
                    ? (v366 = (_DWORD)v365 == -1)
                    : (v366 = 1),
                      v366))
                {
                  v367 = 2;
                }
                else if (v365 >> 28)
                {
                  v405 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v405 = v364;
                  *(_DWORD *)(v405 + 8) = v365;
                  v367 = 1;
                  v364 = v405;
                }
                else
                {
                  v367 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                  v364 = v365 << 36;
                }
                v250 = v364 | v367;
                v51 = v426;
              }
              v451 = v250;
              LOWORD(v452) = *(_WORD *)(v248 + 16);
              if ((v140 - 49) <= 2)
              {
                v309 = v450;
                if ((v450 & 1) != 0)
                {
                  v381 = *(_QWORD *)(v450 & 0xFFFFFFFF8);
                  if ((v450 & 2) != 0
                    || (v382 = *(unsigned int *)((v450 & 0xFFFFFFFF8) + 8), (_DWORD)v382 == 0x3FFFFFFF)
                    || (_DWORD)v382 == -1)
                  {
                    v383 = 2;
                  }
                  else if (v382 >> 28)
                  {
                    v409 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v409 = v381;
                    *(_DWORD *)(v409 + 8) = v382;
                    v383 = 1;
                    v250 = v451;
                    v381 = v409;
                  }
                  else
                  {
                    v383 = *(_QWORD *)(v450 & 0xFFFFFFFF8);
                    v381 = v382 << 36;
                  }
                  v309 = v381 | v383;
                  v51 = v426;
                }
                *(_QWORD *)&v455 = v309;
                if ((v250 & 1) != 0)
                {
                  v384 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                  if ((v250 & 2) != 0
                    || ((v385 = *(unsigned int *)((v250 & 0xFFFFFFFF8) + 8), (_DWORD)v385 != 0x3FFFFFFF)
                      ? (v386 = (_DWORD)v385 == -1)
                      : (v386 = 1),
                        v386))
                  {
                    v387 = 2;
                  }
                  else if (v385 >> 28)
                  {
                    v408 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v408 = v384;
                    *(_DWORD *)(v408 + 8) = v385;
                    v387 = 1;
                    v384 = v408;
                  }
                  else
                  {
                    v387 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                    v384 = v385 << 36;
                  }
                  v250 = v384 | v387;
                  v51 = v426;
                }
                *((_QWORD *)&v455 + 1) = v250;
                v456 = (__int16)v452;
                inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)&v435, 0, (uint64_t)&v455, 0x7FFA000000000000uLL, (v137 >> 50) & 0x3F, v6, (uint64_t)v7, v8);
                if ((BYTE8(v455) & 1) != 0 && (*((_QWORD *)&v455 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v455 + 1) & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
                if ((v455 & 1) != 0)
                {
                  if ((v455 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v455 & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
                  v51 = v426;
                }
              }
              else if ((_DWORD)v140 == 52)
              {
                JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v455, (const JSC::DFG::NodeOrigin *)&v450);
                inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)&v435, 0, (uint64_t)&v455, 0xFFFE000000000000, 52, v336, v337, v338);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v455, v339, v340, v341, v342, v343, v344, v345);
              }
              else
              {
                v251 = v450;
                if ((v450 & 1) != 0)
                {
                  v368 = *(_QWORD *)(v450 & 0xFFFFFFFF8);
                  if ((v450 & 2) != 0
                    || (v369 = *(unsigned int *)((v450 & 0xFFFFFFFF8) + 8), (_DWORD)v369 == 0x3FFFFFFF)
                    || (_DWORD)v369 == -1)
                  {
                    v370 = 2;
                  }
                  else if (v369 >> 28)
                  {
                    v407 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v407 = v368;
                    *(_DWORD *)(v407 + 8) = v369;
                    v370 = 1;
                    v250 = v451;
                    v368 = v407;
                  }
                  else
                  {
                    v370 = *(_QWORD *)(v450 & 0xFFFFFFFF8);
                    v368 = v369 << 36;
                  }
                  v251 = v368 | v370;
                }
                *(_QWORD *)&v455 = v251;
                if ((v250 & 1) != 0)
                {
                  v371 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                  if ((v250 & 2) != 0
                    || ((v372 = *(unsigned int *)((v250 & 0xFFFFFFFF8) + 8), (_DWORD)v372 != 0x3FFFFFFF)
                      ? (v373 = (_DWORD)v372 == -1)
                      : (v373 = 1),
                        v373))
                  {
                    v374 = 2;
                  }
                  else if (v372 >> 28)
                  {
                    v406 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v406 = v371;
                    *(_DWORD *)(v406 + 8) = v372;
                    v374 = 1;
                    v371 = v406;
                  }
                  else
                  {
                    v374 = *(_QWORD *)(v250 & 0xFFFFFFFF8);
                    v371 = v372 << 36;
                  }
                  v250 = v371 | v374;
                }
                *((_QWORD *)&v455 + 1) = v250;
                v456 = (__int16)v452;
                inserted = JSC::DFG::InsertionSet::insertConstantForUse((uint64_t *)&v435, 0, (uint64_t)&v455, 0xAuLL, (v137 >> 50) & 0x3F, v6, (uint64_t)v7, v8);
                if ((BYTE8(v455) & 1) != 0 && (*((_QWORD *)&v455 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v455 + 1) & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
                if ((v455 & 1) != 0 && (v455 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v455 & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
              }
              if ((v451 & 1) != 0 && (v451 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v451 & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
              if ((v450 & 1) != 0 && (v450 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v450 & 0xFFFFFFFF8, v252, v3, v253, v254, v255, v256, v257);
              v144->n128_u64[1] = inserted & 0xFF00FFFFFFFFFFFFLL;
              if (v439)
                v259 = *(_DWORD *)(v439 - 12) + 1;
              else
                v259 = 1;
              *(_DWORD *)(v439 - 12) = v259;
              if (v439)
                v260 = *(_DWORD *)(v439 - 12);
              else
                v260 = 0;
              v261 = (*(_DWORD *)(v439 - 16) + v260);
              v262 = *(unsigned int *)(v439 - 4);
              if (v262 > 0x400)
              {
                if (v262 <= 2 * v261)
                  goto LABEL_472;
              }
              else if (3 * v262 <= 4 * v261)
              {
LABEL_472:
                v144 = (__n128 *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>>,WTF::IntHash<unsigned char>,WTF::HashMap<unsigned char,JSC::DFG::Node *,WTF::IntHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand(&v439, v144);
              }
LABEL_179:
              v78 = v448;
              *(_QWORD *)(v448 + 24) = v144->n128_u64[1] & 0xFF00FFFFFFFFFFFFLL | v137 & 0xFC000000000000;
              v444 = 1;
              v131 = *(_QWORD *)(v78 + 72);
              goto LABEL_180;
            }
LABEL_336:
            v18 = (v421 + 1);
            v13 = v414;
            v17 = *((unsigned int *)v414 + 15);
            if (v17 <= v18)
            {
              v233 = v415;
            }
            else
            {
              v233 = v415;
              while (!*(_QWORD *)(*((_QWORD *)v414 + 6) + 8 * v18))
              {
                if (v17 == ++v18)
                {
                  LODWORD(v18) = *((_DWORD *)v414 + 15);
                  break;
                }
              }
            }
            if (v233 != (_DWORD)v18)
              goto LABEL_14;
            if (!*((_DWORD *)v431 + 15))
              goto LABEL_723;
            v16 = (JSC::DFG::BasicBlock **)*((_QWORD *)v431 + 6);
            break;
          case 4:
            goto LABEL_52;
          default:
            __break(0xC471u);
            JUMPOUT(0x19844CB84);
        }
        break;
      }
LABEL_52:
      if (!v33)
        goto LABEL_88;
LABEL_53:
      v52 = *(_DWORD **)v33;
      if (*(_QWORD *)v33)
        LODWORD(v52) = *v52;
      v32 = v45 + 5;
      v31 = (_DWORD)v52 + v45 + 5;
      if (v45 + 5 < v31)
      {
        v53 = v440;
        v54 = v45 + 5;
        do
        {
          v55 = v54;
          if ((v54 & 0x80000000) != 0)
            v56 = (v54 ^ 0xFFFFFFFFLL) + v443;
          else
            v56 = (uint64_t)(((unint64_t)v54 << 32) - 0x500000000) >> 32;
          *((_DWORD *)v53 + v56) = v449;
          v54 = v55 + 1;
          LODWORD(v52) = (_DWORD)v52 - 1;
        }
        while ((_DWORD)v52);
      }
      v27 = *(_QWORD *)(v33 + 16);
      v28 = 1;
      v30 = (unint64_t *)(v33 + 16);
      v29 = (JSC::UnlinkedCodeBlock ***)((char *)v22 + 40);
    }
  }
LABEL_412:
  JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v435, *v16);
  v276 = v444;
  if (v444)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v277 = (*(_DWORD *)(*((_QWORD *)v431 + 3) + 16) & 0xFFFFFFFE) == 4) : (v277 = 0),
          !v277 ? (v278 = BYTE2(qword_1ECF4C32A) == 0) : (v278 = 0),
          !v278))
    {
      v455 = v432;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v431 + 1088, "Phase ", (uint64_t)&v455, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v445);
  v286 = v440;
  if (v440)
  {
    v440 = 0;
    v441 = 0;
    WTF::fastFree((unint64_t)v286, v279, v280, v281, v282, v283, v284, v285);
  }
  if (v439)
    WTF::fastFree(v439 - 16, v279, v280, v281, v282, v283, v284, v285);
  v287 = v436;
  if (v438 != (_BYTE *)v436 && v436)
  {
    v436 = 0;
    LODWORD(v437) = 0;
    WTF::fastFree((unint64_t)v287, v279, v280, v281, v282, v283, v284, v285);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v433)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v427, (uint64_t)v279, v280, v281, v282, v283, v284, v285);
  v288 = v434;
  v434 = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 1)
      WTF::fastFree((unint64_t)v288, v279, v280, v281, v282, v283, v284, v285);
    else
      --*(_DWORD *)v288;
  }
  return v276 != 0;
}

uint64_t JSC::DFG::GetByOffsetMethod::dumpInContext(JSC::Structure ***this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  uint64_t result;
  WTF::PrintStream *v12;
  JSC::Structure **v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  int v16;
  WTF::PrintStream *v17;

  v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v7 = *((int *)this + 4);
  if (v7 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19844D198);
  }
  v8 = (WTF::PrintStream *)v6;
  v9 = off_1E358E588[v7];
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v10, "%s", v9);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", ":");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  switch(*((_DWORD *)this + 4))
  {
    case 0:
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v12, "%s");
      goto LABEL_10;
    case 1:
      v13 = *this;
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      if (v13)
        goto LABEL_5;
      goto LABEL_9;
    case 2:
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v15, "%d");
      goto LABEL_10;
    case 3:
      v13 = *this;
      v16 = *((_DWORD *)this + 2);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v14, "%d", v16);
      WTF::PrintStream::printf(v14, "%s", "@");
      if (v13)
      {
LABEL_5:
        JSC::DFG::FrozenValue::dumpInContext(v13, v14, a3);
      }
      else
      {
LABEL_9:
        v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
        WTF::PrintStream::printf(v17, "%s", "(null)");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
      }
LABEL_10:
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      return result;
  }
  return result;
}

void JSC::DFG::MultiGetByOffsetCase::dumpInContext(JSC::Structure ***this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  _DWORD *v6;
  WTF::PrintStream *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;

  v21 = 0;
  v6 = (_DWORD *)((unint64_t)*this & 0xFFFFFFFFFFFFFFFCLL);
  if ((*this & 1) != 0)
  {
    if (*v6)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = &v6[2 * v16];
        v18 = *((_QWORD *)v17 + 1);
        if ((v15 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v21, *((_QWORD *)v17 + 1));
          v15 = v21;
        }
        else if (v18 != (v15 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v15 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v19 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v19 = 0x400000002;
            v20 = v21;
            *(_QWORD *)(v19 + 8) = v21 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v19 + 16) = v18;
            v15 = v20 & 2 | (unint64_t)v19 | 1;
          }
          else
          {
            v15 = v15 & 2 | v18;
          }
          v21 = v15;
        }
        ++v16;
      }
      while (v16 < *v6);
    }
  }
  else if (v6)
  {
    v21 = (unint64_t)*this & 0xFFFFFFFFFFFFFFFCLL;
  }
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::StructureSet::dumpInContext((JSC::StructureSet *)&v21, v7, a3);
  WTF::PrintStream::printf(v7, "%s", ":");
  JSC::DFG::GetByOffsetMethod::dumpInContext(this + 1, v7, a3);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((v21 & 1) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFFFFFFFFFCLL, v8, v9, v10, v11, v12, v13, v14);
}

BOOL JSC::DFG::MultiPutByOffsetData::writesStructures(JSC::DFG::MultiPutByOffsetData *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = ((unint64_t)*((unsigned int *)this + 5) << 6) - 64;
  do
  {
    v2 = v1 - 64;
    if (v1 == -64)
      break;
    v3 = *(_DWORD *)(*((_QWORD *)this + 1) + v1) - 2;
    v1 -= 64;
  }
  while (v3 > 3);
  return v2 != -128;
}

BOOL JSC::DFG::MultiPutByOffsetData::reallocatesStorage(_BOOL8 this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(unsigned int *)(this + 20);
  v3 = (v2 << 6) - 64;
  while (1)
  {
    v4 = v2;
    if (!v2)
      return v4 != 0;
    --v2;
    if (v4 - 1 >= (unint64_t)*(unsigned int *)(v1 + 20))
      break;
    v5 = v3 - 64;
    this = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v1 + 8) + v3));
    v3 = v5;
    if ((_DWORD)this)
      return v4 != 0;
  }
  __break(0xC471u);
  return this;
}

BOOL JSC::DFG::MultiDeleteByOffsetData::writesStructures(_BOOL8 this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(unsigned int *)(this + 20);
  v3 = 40 * v2 - 40;
  while (1)
  {
    v4 = v2;
    if (!v2)
      return v4 != 0;
    --v2;
    if (v4 - 1 >= (unint64_t)*(unsigned int *)(v1 + 20))
      break;
    v5 = v3 - 40;
    this = JSC::DeleteByVariant::writesStructures((JSC::DeleteByVariant *)(*(_QWORD *)(v1 + 8) + v3));
    v3 = v5;
    if ((_DWORD)this)
      return v4 != 0;
  }
  __break(0xC471u);
  return this;
}

float *JSC::DFG::BranchTarget::dump(float *this, WTF::PrintStream *a2)
{
  uint64_t v2;
  float *v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = this;
    v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v6, "%s", "#");
    WTF::PrintStream::printf(v6, "%u", *(_DWORD *)(v2 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, float))(*(_QWORD *)a2 + 32))(a2, v4[2]);
    WTF::PrintStream::printf(v7, "%s", "/w:");
    WTF::PrintStream::printf(v7, "%lf", v4[2]);
    return (float *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

void JSC::DFG::Node::remove(JSC::DFG::Node *this, JSC::DFG::Graph *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  __int128 v59;
  uint64_t v60;

  v8 = *((unsigned __int16 *)this + 9);
  if (v8 == 154)
  {
    v30 = *((_QWORD *)this + 9);
    *(_QWORD *)&v59 = 0;
    v31 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD **)(v30 + 8);
      v33 = &v32[4 * v31];
      do
      {
        v34 = *v32 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*v32 & 1) != 0)
        {
          if (*(_DWORD *)v34)
          {
            v36 = 0;
            do
              JSC::DFG::Node::remove(JSC::DFG::Graph &)::$_0::operator()((uint64_t)&v59, *(_QWORD *)(v34 + 8 * v36++ + 8));
            while (v36 < *(unsigned int *)v34);
          }
        }
        else if (v34)
        {
          if ((v59 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v59, *v32 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != v34)
          {
            if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v37 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v37 = 0x400000002;
              v38 = v59;
              *(_QWORD *)(v37 + 8) = v59 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v37 + 16) = v34;
              v35 = v38 & 2 | (unint64_t)v37 | 1;
            }
            else
            {
              v35 = v59 & 2 | v34;
            }
            *(_QWORD *)&v59 = v35;
          }
        }
        v32 += 4;
      }
      while (v32 != v33);
    }
    v39 = JSC::DFG::Graph::addStructureSet((uint64_t)a2, (unint64_t *)&v59, a3, a4, a5, a6, a7, a8);
    *((_WORD *)this + 9) = 132;
    *((_DWORD *)this + 14) = 8;
    *((_QWORD *)this + 9) = v39;
    goto LABEL_59;
  }
  if (v8 == 294)
  {
    *(_QWORD *)&v59 = 0;
    v48 = *((_QWORD *)this + 9);
    v49 = *(unsigned int *)(v48 + 12);
    if ((_DWORD)v49)
    {
      v50 = *(uint64_t **)v48;
      v51 = 16 * v49;
      do
      {
        v52 = *v50;
        if ((v59 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v59, *v50);
        }
        else if (v52 != (v59 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v53 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v53 = 0x400000002;
            v54 = v59;
            *(_QWORD *)(v53 + 8) = v59 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v53 + 16) = v52;
            *(_QWORD *)&v59 = v54 & 2 | (unint64_t)v53 | 1;
          }
          else
          {
            *(_QWORD *)&v59 = v59 & 2 | v52;
          }
        }
        v50 += 2;
        v51 -= 16;
      }
      while (v51);
    }
    v55 = JSC::DFG::Graph::addStructureSet((uint64_t)a2, (unint64_t *)&v59);
    *((_WORD *)this + 9) = 132;
    *((_DWORD *)this + 14) = 8;
    *((_QWORD *)this + 9) = v55;
LABEL_59:
    if ((v59 & 1) != 0)
      WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, v40, v41, v42, v43, v44, v45, v46);
    return;
  }
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
    LODWORD(v16) = *((_DWORD *)this + 8);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = *((_DWORD *)a2 + 41);
      v20 = *((_QWORD *)a2 + 19);
      while (1)
      {
        v21 = *((_DWORD *)this + 6);
        v22 = (v17 + v21);
        if (v19 <= v22)
          break;
        v23 = *(_QWORD *)(v20 + 8 * v22);
        if ((v23 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v24 = 0;
          if ((v23 & 0x1000000000000) == 0)
          {
            v25 = (v23 >> 50) & 0x3F;
            if ((_DWORD)v25)
            {
              v26 = v25 > 0x34;
              v27 = (1 << v25) & 0x12400001800284;
              if (v26 || v27 == 0)
              {
                v29 = v18 + v21;
                if (v19 <= v29)
                  break;
                ++v18;
                v24 = *(_QWORD *)(v20 + 8 * v29);
                *(_QWORD *)(v20 + 8 * v29) = v23;
              }
            }
          }
          *(_QWORD *)(v20 + 8 * v22) = v24;
          v16 = *((_QWORD *)this + 4);
        }
        if (++v17 >= v16)
          goto LABEL_41;
      }
      __break(0xC471u);
      JUMPOUT(0x19844D95CLL);
    }
    v18 = 0;
LABEL_41:
    *((_WORD *)this + 9) = 25;
    *((_DWORD *)this + 14) = 24;
    *((_QWORD *)this + 4) = v18;
  }
  else
  {
    v9 = *((_QWORD *)this + 3);
    v59 = 0uLL;
    v60 = 0;
    if ((v9 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v10 = 0;
      if ((v9 & 0x1000000000000) == 0)
      {
        v11 = (v9 >> 50) & 0x3F;
        if ((_DWORD)v11)
        {
          if (v11 > 0x34 || ((1 << v11) & 0x12400001800284) == 0)
          {
            *(_QWORD *)&v59 = v9;
            v10 = 1;
          }
        }
      }
      v12 = *((_QWORD *)this + 4);
      if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((v12 & 0x1000000000000) == 0)
        {
          v13 = (v12 >> 50) & 0x3F;
          if ((_DWORD)v13)
          {
            if (v13 > 0x34 || ((1 << v13) & 0x12400001800284) == 0)
              *((_QWORD *)&v59 + v10++) = v12;
          }
        }
        v14 = *((_QWORD *)this + 5);
        if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v14 & 0x1000000000000) == 0)
        {
          v15 = (v14 >> 50) & 0x3F;
          if ((_DWORD)v15)
          {
            if (v15 > 0x34 || ((1 << v15) & 0x12400001800284) == 0)
              *((_QWORD *)&v59 + v10) = v14;
          }
        }
      }
    }
    *(_OWORD *)((char *)this + 24) = v59;
    *((_QWORD *)this + 5) = v60;
    *((_WORD *)this + 9) = 24;
    *((_DWORD *)this + 14) = 8;
  }
}

uint64_t *JSC::DFG::Graph::addStructureSet(uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = (uint64_t *)WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::alloc<>(a1 + 1064);
  v4 = *a2;
  if ((*a2 & 1) != 0)
    v5 = *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v5 = v4 > 3;
  if (v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*a2 & 1) != 0)
        v8 = *(_QWORD *)(v8 + v6 + 8);
      v9 = *v3;
      if ((*v3 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(v3, v8);
      }
      else if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != v8)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v12 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v12 = 0x400000002;
          v13 = *v3;
          *(_QWORD *)(v12 + 8) = *v3 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v12 + 16) = v8;
          v10 = v13 & 2 | v12 | 1;
        }
        else
        {
          v10 = *v3 & 2 | v8;
        }
        *v3 = v10;
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return v3;
}

uint64_t JSC::DFG::Node::replaceWith(uint64_t this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  JSC::DFG::Node *v55;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  v8 = *(unsigned __int16 *)(this + 18);
  if (v8 == 154)
  {
    v55 = a3;
    v58 = this;
    *(_QWORD *)&v59 = 0;
    v30 = *(_QWORD *)(this + 72);
    v31 = *(unsigned int *)(v30 + 20);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD **)(v30 + 8);
      v33 = &v32[4 * v31];
      do
      {
        v34 = *v32 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*v32 & 1) != 0)
        {
          if (*(_DWORD *)v34)
          {
            v36 = 0;
            do
              JSC::DFG::Node::remove(JSC::DFG::Graph &)::$_0::operator()((uint64_t)&v59, *(_QWORD *)(v34 + 8 * v36++ + 8));
            while (v36 < *(unsigned int *)v34);
          }
        }
        else if (v34)
        {
          if ((v59 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)&v59, *v32 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != v34)
          {
            if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v37 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v37 = 0x400000002;
              v38 = v59;
              *(_QWORD *)(v37 + 8) = v59 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v37 + 16) = v34;
              v35 = v38 & 2 | (unint64_t)v37 | 1;
            }
            else
            {
              v35 = v59 & 2 | v34;
            }
            *(_QWORD *)&v59 = v35;
          }
        }
        v32 += 4;
      }
      while (v32 != v33);
    }
    v39 = JSC::DFG::Graph::addStructureSet((uint64_t)a2, (unint64_t *)&v59, (unint64_t *)a3, a4, a5, a6, a7, a8);
    goto LABEL_59;
  }
  if (v8 == 294)
  {
    v55 = a3;
    v58 = this;
    *(_QWORD *)&v59 = 0;
    v47 = *(_QWORD *)(this + 72);
    v48 = *(unsigned int *)(v47 + 12);
    if ((_DWORD)v48)
    {
      v49 = *(uint64_t **)v47;
      v50 = 16 * v48;
      do
      {
        v51 = *v49;
        if ((v59 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v59, *v49);
        }
        else if (v51 != (v59 & 0xFFFFFFFFFFFFFFFCLL))
        {
          if ((v59 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v53 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v53 = 0x400000002;
            v54 = v59;
            *(_QWORD *)(v53 + 8) = v59 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v53 + 16) = v51;
            v52 = v54 & 2 | (unint64_t)v53 | 1;
          }
          else
          {
            v52 = v59 & 2 | v51;
          }
          *(_QWORD *)&v59 = v52;
        }
        v49 += 2;
        v50 -= 16;
      }
      while (v50);
    }
    v39 = JSC::DFG::Graph::addStructureSet((uint64_t)a2, (unint64_t *)&v59);
LABEL_59:
    *(_WORD *)(v58 + 18) = 132;
    *(_DWORD *)(v58 + 56) = 8;
    *(_QWORD *)(v58 + 72) = v39;
    if ((v59 & 1) != 0)
      WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, v40, v41, v42, v43, v44, v45, v46);
    a3 = v55;
    this = v58;
    goto LABEL_6;
  }
  if ((*(_BYTE *)(this + 56) & 0x10) != 0)
  {
    LODWORD(v16) = *(_DWORD *)(this + 32);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = *((_DWORD *)a2 + 41);
      v20 = *((_QWORD *)a2 + 19);
      while (1)
      {
        v21 = *(_DWORD *)(this + 24);
        v22 = (v17 + v21);
        if (v19 <= v22)
          break;
        v23 = *(_QWORD *)(v20 + 8 * v22);
        if ((v23 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v24 = 0;
          if ((v23 & 0x1000000000000) == 0)
          {
            v25 = (v23 >> 50) & 0x3F;
            if ((_DWORD)v25)
            {
              v26 = v25 > 0x34;
              v27 = (1 << v25) & 0x12400001800284;
              if (v26 || v27 == 0)
              {
                v29 = v18 + v21;
                if (v19 <= v29)
                  break;
                ++v18;
                v24 = *(_QWORD *)(v20 + 8 * v29);
                *(_QWORD *)(v20 + 8 * v29) = v23;
              }
            }
          }
          *(_QWORD *)(v20 + 8 * v22) = v24;
          v16 = *(_QWORD *)(this + 32);
        }
        if (++v17 >= v16)
          goto LABEL_41;
      }
      __break(0xC471u);
      JUMPOUT(0x19844DE5CLL);
    }
    v18 = 0;
LABEL_41:
    *(_WORD *)(this + 18) = 25;
    *(_DWORD *)(this + 56) = 24;
    *(_QWORD *)(this + 32) = v18;
  }
  else
  {
    v9 = *(_QWORD *)(this + 24);
    v59 = 0uLL;
    v60 = 0;
    if ((v9 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v10 = 0;
      if ((v9 & 0x1000000000000) == 0)
      {
        v11 = (v9 >> 50) & 0x3F;
        if ((_DWORD)v11)
        {
          if (v11 > 0x34 || ((1 << v11) & 0x12400001800284) == 0)
          {
            *(_QWORD *)&v59 = v9;
            v10 = 1;
          }
        }
      }
      v12 = *(_QWORD *)(this + 32);
      if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((v12 & 0x1000000000000) == 0)
        {
          v13 = (v12 >> 50) & 0x3F;
          if ((_DWORD)v13)
          {
            if (v13 > 0x34 || ((1 << v13) & 0x12400001800284) == 0)
              *((_QWORD *)&v59 + v10++) = v12;
          }
        }
        v14 = *(_QWORD *)(this + 40);
        if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v14 & 0x1000000000000) == 0)
        {
          v15 = (v14 >> 50) & 0x3F;
          if ((_DWORD)v15)
          {
            if (v15 > 0x34 || ((1 << v15) & 0x12400001800284) == 0)
              *((_QWORD *)&v59 + v10) = v14;
          }
        }
      }
    }
    *(_OWORD *)(this + 24) = v59;
    *(_QWORD *)(this + 40) = v60;
    *(_WORD *)(this + 18) = 24;
    *(_DWORD *)(this + 56) = 8;
  }
LABEL_6:
  *(_QWORD *)(this + 88) = a3;
  return this;
}

uint64_t JSC::DFG::Node::replaceWithWithoutChecks(uint64_t this, JSC::DFG::Node *a2)
{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_WORD *)(this + 18) = 24;
  *(_DWORD *)(this + 56) = 8;
  *(_QWORD *)(this + 88) = a2;
  return this;
}

uint64_t JSC::DFG::Node::convertToIdentity(uint64_t this)
{
  int v1;

  if ((*(_QWORD *)(this + 24) & 0xFF00FFFFFFFFFFFFLL) == 0 || (*(_QWORD *)(this + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19844DEF4);
  }
  if ((*(_DWORD *)(this + 56) & 7u) - 3 > 4)
    v1 = 1;
  else
    v1 = dword_1991562B8[(*(_DWORD *)(this + 56) & 7) - 3];
  *(_WORD *)(this + 18) = 4;
  *(_DWORD *)(this + 56) = v1;
  return this;
}

uint64_t JSC::DFG::Node::convertToIdentityOn(uint64_t this, unint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  v2 = (_QWORD *)(this + 24);
  *(_QWORD *)(this + 40) = 0;
  v3 = *(_DWORD *)(this + 56);
  if ((v3 & 0xFFFFFFEF) != v3)
  {
    *(_DWORD *)(this + 56) = v3 & 0xFFFFFFEF;
    LOBYTE(v3) = v3 & 0xEF;
  }
  v4 = *(_DWORD *)(a2 + 56) & 7;
  if ((*(_DWORD *)(a2 + 56) & 7) == 3)
    v5 = 0xC4000000000000;
  else
    v5 = 0;
  v6 = a2 & 0xFF00FFFFFFFFFFFFLL;
  if ((*(_DWORD *)(a2 + 56) & 7) == 5)
    v5 = 0xD0000000000000;
  *v2 = v5 | v6;
  v7 = (v3 & 7) - 3;
  if (v7 > 4)
    v8 = 1;
  else
    v8 = dword_1991562B8[v7];
  v9 = v4 - 3;
  if (v9 > 4)
    v10 = 1;
  else
    v10 = dword_1991562B8[v9];
  if (v8 == v10)
  {
    *(_WORD *)(this + 18) = 4;
    *(_DWORD *)(this + 56) = v8;
    return this;
  }
  switch(v8)
  {
    case 1:
      *(_WORD *)(this + 18) = 60;
      *(_DWORD *)(this + 56) = 1;
      if (v10 != 5)
      {
        if (v10 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19844E0CCLL);
        }
        v11 = 0xC4000000000000;
        goto LABEL_29;
      }
      break;
    case 5:
      *(_WORD *)(this + 18) = 59;
      *(_DWORD *)(this + 56) = 5;
      if (v10 == 1)
      {
        v12 = v6 | 0xC000000000000;
        goto LABEL_30;
      }
      if (v10 != 3)
      {
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x19844E01CLL);
      }
      v11 = 0xCC000000000000;
      goto LABEL_29;
    case 3:
      *(_WORD *)(this + 18) = 58;
      *(_DWORD *)(this + 56) = 3;
      if (v10 == 1)
      {
        v12 = v6 | 0x10000000000000;
        goto LABEL_30;
      }
      if (v10 != 5)
        goto LABEL_35;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19844E0ACLL);
  }
  v11 = 0xD0000000000000;
LABEL_29:
  v12 = v6 | v11;
LABEL_30:
  *v2 = v12;
  return this;
}

_QWORD *JSC::DFG::Node::convertToLazyJSConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  *(_WORD *)(a1 + 18) = 3;
  *(_DWORD *)(a1 + 56) &= ~8u;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *result = a3;
  result[1] = a4;
  result[2] = 0;
  result[2] = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = result;
  *(_QWORD *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t JSC::DFG::Node::convertToNewArrayBuffer(uint64_t this, JSC::DFG::FrozenValue *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(this + 18) = 267;
  *(_DWORD *)(this + 56) = 1;
  v2 = *(_BYTE *)(*(_QWORD *)a2 + 4) & 0x1F;
  v3 = *(unsigned int *)(*(_QWORD *)a2 + 12);
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 72) = a2;
  *(_QWORD *)(this + 80) = v3 | (v2 << 32);
  return this;
}

uint64_t JSC::DFG::Node::convertToDirectCall(uint64_t this, JSC::DFG::FrozenValue *a2)
{
  int v2;
  __int16 v3;

  v2 = *(unsigned __int16 *)(this + 18);
  switch(v2)
  {
    case 241:
      v3 = 242;
LABEL_3:
      *(_WORD *)(this + 18) = v3;
      *(_QWORD *)(this + 72) = a2;
      return this;
    case 369:
      v3 = 370;
      goto LABEL_3;
    case 249:
      v3 = 250;
      goto LABEL_3;
    case 243:
      v3 = 244;
      goto LABEL_3;
  }
  this = 300;
  __break(0xC471u);
  return this;
}

uint64_t JSC::DFG::Node::convertToCallWasm(uint64_t this, JSC::DFG::FrozenValue *a2)
{
  *(_WORD *)(this + 18) = 254;
  *(_QWORD *)(this + 72) = a2;
  return this;
}

uint64_t JSC::DFG::Node::convertToRegExpMatchFastGlobalWithoutChecks(uint64_t this, JSC::DFG::FrozenValue *a2)
{
  *(_WORD *)(this + 18) = 222;
  *(_DWORD *)(this + 56) = 1;
  *(_BYTE *)(this + 30) = 36;
  *(_QWORD *)(this + 32) = *(_QWORD *)(this + 40) & 0xFF00FFFFFFFFFFFFLL | 0x5C000000000000;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 72) = a2;
  return this;
}

uint64_t JSC::DFG::Node::convertToGetByIdMaybeMegamorphic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;

  if (*(_WORD *)(a1 + 18) != 93)
    goto LABEL_2;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v13 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_BYTE **)(v13 + 8);
  v15 = *(unsigned int *)(v13 + 4);
  if ((*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    if (!(_DWORD)v15)
      goto LABEL_15;
    v16 = *v14 - 48;
    if (v16 > 9 || v15 >= 2 && *v14 == 48)
      goto LABEL_15;
    v23 = v15 - 1;
    v24 = v14 + 1;
    while (v23)
    {
      if (v16 <= 0x19999999)
      {
        v25 = *v24 - 48;
        if (v25 <= 9)
        {
          v22 = __CFADD__(v25, 10 * v16);
          v16 = v25 + 10 * v16;
          --v23;
          ++v24;
          if (!v22)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (!(_DWORD)v15)
      goto LABEL_15;
    v16 = *(unsigned __int16 *)v14 - 48;
    if (v16 > 9)
      goto LABEL_15;
    if (*(_WORD *)v14 == 48 && v15 > 1)
      goto LABEL_15;
    v19 = (unsigned __int16 *)(v14 + 2);
    v20 = v15 - 1;
    while (v20)
    {
      if (v16 <= 0x19999999)
      {
        v21 = *v19 - 48;
        if (v21 <= 9)
        {
          v22 = __CFADD__(v21, 10 * v16);
          v16 = v21 + 10 * v16;
          ++v19;
          --v20;
          if (!v22)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  if (v16 != -1)
  {
LABEL_2:
    v5 = 110;
    goto LABEL_3;
  }
LABEL_15:
  v17 = *(_QWORD **)(*(_QWORD *)(a2 + 16) + 41952);
  if (v17[221] == v13 || v17[246] == v13)
    goto LABEL_2;
  v5 = 110;
  if (v17[270] != v13)
  {
    if (v17[2] == v13)
      v5 = 110;
    else
      v5 = 116;
  }
LABEL_3:
  v6 = *(_DWORD *)(a2 + 164);
  if (v6 <= *(_QWORD *)(a1 + 24))
    goto LABEL_47;
  v7 = *(_QWORD *)(a2 + 152);
  v8 = *(_QWORD *)(v7 + 8 * *(_QWORD *)(a1 + 24));
  v9 = (_DWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
  {
    v10 = 0;
    while (1)
    {
      v11 = v10 + *(_DWORD *)(a1 + 24);
      if (v6 <= v11)
        break;
      *(_QWORD *)(v7 + 8 * v11) = 0;
      if (++v10 >= *v9)
        goto LABEL_8;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x19844E440);
  }
LABEL_8:
  result = JSC::DFG::Node::setOpAndDefaultFlags(a1, v5);
  *(_QWORD *)(a1 + 24) = v8 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  return result;
}

uint64_t JSC::DFG::Node::convertToPutByIdMaybeMegamorphic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  if (*(_WORD *)(a1 + 18) == 104)
  {
    v17 = *(_QWORD *)(a2 + 16);
    if (a3)
    {
      if ((a3 & 1) != 0)
        v18 = a3 & 0xFFFFFFFFFFFFFFFELL;
      else
        v18 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      v18 = 0;
    }
    if (JSC::canUseMegamorphicPutById(*(_QWORD *)(v17 + 41952), v18))
      v6 = 121;
    else
      v6 = 117;
  }
  else
  {
    v6 = 117;
  }
  v7 = (uint64_t *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    v19 = *v7;
    v20 = *(_DWORD *)(a2 + 164);
    if (v20 <= *v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19844E588);
    }
    if (v20 <= (int)v19 + 2)
      goto LABEL_23;
    v21 = *(_QWORD *)(a2 + 152);
    v9 = (uint64_t *)(v21 + 8 * *v7);
    v8 = (uint64_t *)(v21 + 8 * (v19 + 2));
  }
  else
  {
    v8 = (uint64_t *)(a1 + 40);
    v9 = (uint64_t *)(a1 + 24);
  }
  v10 = *v9;
  v11 = *v8;
  if (*(_DWORD *)(a1 + 32))
  {
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 164);
    v14 = *(_QWORD *)(a2 + 152);
    while (1)
    {
      v15 = v12 + *(_DWORD *)v7;
      if (v13 <= v15)
        break;
      *(_QWORD *)(v14 + 8 * v15) = 0;
      if (++v12 >= *(_DWORD *)(a1 + 32))
        goto LABEL_9;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x19844E580);
  }
LABEL_9:
  result = JSC::DFG::Node::setOpAndDefaultFlags(a1, v6);
  *(_QWORD *)(a1 + 24) = v10 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
  *(_QWORD *)(a1 + 32) = v11 & 0xFF00FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  return result;
}

BOOL JSC::canUseMegamorphicPutById(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;

  v2 = *(_BYTE **)(a2 + 8);
  v3 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if (!(_DWORD)v3)
      return *(_QWORD *)(a1 + 16) != a2;
    v4 = *v2 - 48;
    if (v4 > 9)
      return *(_QWORD *)(a1 + 16) != a2;
    if (v3 >= 2 && *v2 == 48)
      return *(_QWORD *)(a1 + 16) != a2;
    v12 = v3 - 1;
    v13 = v2 + 1;
    while (v12)
    {
      if (v4 <= 0x19999999)
      {
        v14 = *v13 - 48;
        if (v14 <= 9)
        {
          v10 = __CFADD__(v14, 10 * v4);
          v4 = v14 + 10 * v4;
          --v12;
          ++v13;
          if (!v10)
            continue;
        }
      }
      return *(_QWORD *)(a1 + 16) != a2;
    }
  }
  else
  {
    if (!(_DWORD)v3)
      return *(_QWORD *)(a1 + 16) != a2;
    v4 = *(unsigned __int16 *)v2 - 48;
    if (v4 > 9)
      return *(_QWORD *)(a1 + 16) != a2;
    if (*(_WORD *)v2 == 48 && v3 > 1)
      return *(_QWORD *)(a1 + 16) != a2;
    v7 = (unsigned __int16 *)(v2 + 2);
    v8 = v3 - 1;
    while (v8)
    {
      if (v4 <= 0x19999999)
      {
        v9 = *v7 - 48;
        if (v9 <= 9)
        {
          v10 = __CFADD__(v9, 10 * v4);
          v4 = v9 + 10 * v4;
          ++v7;
          --v8;
          if (!v10)
            continue;
        }
      }
      return *(_QWORD *)(a1 + 16) != a2;
    }
  }
  if (v4 == -1)
    return *(_QWORD *)(a1 + 16) != a2;
  return 0;
}

uint64_t JSC::DFG::Node::convertToInByIdMaybeMegamorphic(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (*(_WORD *)(result + 18) == 334)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (a3)
    {
      if ((a3 & 1) != 0)
        v7 = a3 & 0xFFFFFFFFFFFFFFFELL;
      else
        v7 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      v7 = 0;
    }
    result = JSC::canUseMegamorphicInById(v6, v7);
    if ((_DWORD)result)
      v8 = 336;
    else
      v8 = 335;
  }
  else
  {
    v8 = 335;
  }
  v9 = (uint64_t *)(v5 + 24);
  if ((*(_BYTE *)(v5 + 56) & 0x10) == 0)
    goto LABEL_9;
  v11 = *v9;
  if (*(_DWORD *)(a2 + 164) > v11)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a2 + 152) + 8 * v11);
LABEL_9:
    v10 = *v9;
    result = JSC::DFG::Node::setOpAndDefaultFlags(v5, v8);
    *(_QWORD *)(v5 + 24) = v10 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 72) = a3;
    return result;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::Node::tryGetString(JSC::DFG::Node *this@<X0>, JSC::DFG::Graph *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  unsigned int v8;
  __int128 *v9;
  int **v10;
  JSC::DFG::Graph *v11;
  __int128 v12;

  v8 = *((unsigned __int16 *)this + 9);
  if (v8 <= 2)
    goto LABEL_11;
  if (*((unsigned __int16 *)this + 9) > 0xB5u)
  {
    if (v8 == 182)
    {
LABEL_11:
      v9 = (__int128 *)*((_QWORD *)this + 9);
      goto LABEL_12;
    }
    if (v8 == 355 || v8 == 348)
    {
      v10 = a8;
      v11 = a2;
      v9 = JSC::DFG::FrozenValue::emptySingleton(this);
      a8 = v10;
      a2 = v11;
LABEL_12:
      DWORD2(v12) = 0;
      *(_QWORD *)&v12 = v9;
      goto LABEL_13;
    }
LABEL_3:
    *a8 = 0;
    return;
  }
  if (v8 != 3)
    goto LABEL_3;
  v12 = *(_OWORD *)*((_QWORD *)this + 9);
LABEL_13:
  JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v12, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::dumpNodeFlags(JSC::DFG *this, WTF::PrintStream *a2)
{
  int v2;
  int v4;
  WTF::PrintStream *v5;
  float v6;
  WTF::PrintStream *v7;
  float v8;
  char *v9;
  size_t v10;
  int v11;
  WTF::PrintStream *v12;
  float v13;
  WTF::PrintStream *v14;
  float v15;
  WTF::PrintStream *v16;
  float v17;
  WTF::PrintStream *v18;
  float v19;
  WTF::PrintStream *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  WTF::PrintStream *v24;
  float v25;
  char *v26;
  size_t v27;
  WTF::PrintStream *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  float v33;
  char *v34;
  size_t v35;
  WTF::PrintStream *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  WTF::PrintStream *v40;
  float v41;
  char *v42;
  size_t v43;
  char *v44;
  size_t v45;
  WTF::PrintStream *v46;
  float v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::PrintStream *v51;
  float v52;
  WTF::PrintStream *v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  WTF::PrintStream *v57;
  float v58;
  WTF::PrintStream *v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  WTF::PrintStream *v63;
  float v64;
  WTF::PrintStream *v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  WTF::PrintStream *v69;
  float v70;
  char *v71;
  size_t v72;
  WTF::PrintStream *v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  WTF::PrintStream *v77;
  float v78;
  char *v79;
  size_t v80;
  WTF::PrintStream *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  WTF::PrintStream *v85;
  float v86;
  char *v87;
  size_t v88;
  WTF::PrintStream *v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  WTF::PrintStream *v93;
  float v94;
  char *v95;
  size_t v96;
  WTF::PrintStream *v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  WTF::PrintStream *v101;
  float v102;
  char *v103;
  size_t v104;
  WTF::PrintStream *v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  WTF::PrintStream *v109;
  float v110;
  char *v111;
  size_t v112;
  WTF::PrintStream *v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  WTF::PrintStream *v117;
  float v118;
  char *v119;
  size_t v120;
  WTF::PrintStream *v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  WTF::PrintStream *v125;
  float v126;
  char *v127;
  size_t v128;
  WTF::PrintStream *v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  WTF::PrintStream *v133;
  float v134;
  char *v135;
  size_t v136;
  WTF::PrintStream *v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  WTF::PrintStream *v141;
  float v142;
  char *v143;
  size_t v144;
  WTF::PrintStream *v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  WTF::PrintStream *v149;
  float v150;
  char *v151;
  size_t v152;
  WTF::PrintStream *v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  WTF::PrintStream *v157;
  float v158;
  char *v159;
  size_t v160;
  WTF::PrintStream *v161;
  float v162;
  WTF *v163;
  size_t v164;
  unint64_t v165;
  WTF::PrintStream *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  WTF::PrintStream *v175;
  float v176;
  WTF::PrintStream *v177;
  float v178;
  WTF::PrintStream *v179;
  float v180;
  int v181;
  int v182;
  char v183;
  void (**v184)(WTF::StringPrintStream *__hidden);
  WTF *v185;
  __int128 v186;
  _BYTE v187[128];
  uint64_t v188;

  v2 = (int)a2;
  v188 = *MEMORY[0x1E0C80C00];
  v184 = off_1E3572250;
  v185 = (WTF *)v187;
  v186 = xmmword_199122F80;
  v187[0] = 0;
  v4 = a2 & 7;
  if ((a2 & 7) != 0)
  {
    switch(a2 & 7)
    {
      case 1:
        v5 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v6);
        WTF::printExpectedCStringHelper(v5, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "JS";
        v10 = 2;
        goto LABEL_25;
      case 2:
        v18 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v19);
        WTF::printExpectedCStringHelper(v18, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "Number";
        goto LABEL_21;
      case 3:
        v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v15);
        WTF::printExpectedCStringHelper(v14, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "Double";
LABEL_21:
        v10 = 6;
        goto LABEL_25;
      case 4:
        v16 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v17);
        WTF::printExpectedCStringHelper(v16, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "Int32";
        goto LABEL_17;
      case 5:
        v12 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v13);
        WTF::printExpectedCStringHelper(v12, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "Int52";
LABEL_17:
        v10 = 5;
        goto LABEL_25;
      case 6:
        v20 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v21);
        WTF::printExpectedCStringHelper(v20, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        v9 = "Boolean";
        v10 = 7;
LABEL_25:
        WTF::StringImpl::utf8ForCharacters(v9, v10, (uint64_t)&v181, v8);
        WTF::printExpectedCStringHelper(v7, "StringView", &v181);
        if (v182 != -1)
          goto LABEL_26;
        goto LABEL_27;
      case 7:
        v177 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v181, v178);
        WTF::printExpectedCStringHelper(v177, "StringView", &v181);
        if (v182 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v179 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v184[4])(&v184);
        WTF::StringImpl::utf8ForCharacters("Storage", 7uLL, (uint64_t)&v181, v180);
        WTF::printExpectedCStringHelper(v179, "StringView", &v181);
        if (v182 != -1)
LABEL_26:
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
LABEL_27:
        v184[5]((WTF::StringPrintStream *)&v184);
        v184[5]((WTF::StringPrintStream *)&v184);
        v11 = 1;
        if ((v2 & 8) != 0)
          goto LABEL_28;
        goto LABEL_36;
      default:
        __break(0xC471u);
        JUMPOUT(0x19845063CLL);
    }
  }
  v11 = 0;
  if ((a2 & 8) != 0)
  {
LABEL_28:
    v22 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    if (v4)
    {
      v26 = "|";
      v27 = 1;
    }
    else
    {
      v26 = "";
      v27 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v26, v27, (uint64_t)&v181, v25);
    WTF::printExpectedCStringHelper(v24, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    WTF::StringImpl::utf8ForCharacters("MustGen", 7uLL, (uint64_t)&v181, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    v184[5]((WTF::StringPrintStream *)&v184);
    v11 = 1;
  }
LABEL_36:
  if ((v2 & 0x10) != 0)
  {
    v30 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    v32 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
    if (v11)
    {
      v34 = "|";
      v35 = 1;
    }
    else
    {
      v34 = "";
      v35 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v34, v35, (uint64_t)&v181, v33);
    WTF::printExpectedCStringHelper(v32, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v36 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    WTF::StringImpl::utf8ForCharacters("VarArgs", 7uLL, (uint64_t)&v181, v37);
    WTF::printExpectedCStringHelper(v36, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v184[5]((WTF::StringPrintStream *)&v184);
    v11 = 1;
    if (!v4)
    {
LABEL_38:
      if ((v2 & 0x20) == 0)
        goto LABEL_39;
      goto LABEL_94;
    }
  }
  else if (!v4)
  {
    goto LABEL_38;
  }
  v38 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
  v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
  if ((v2 & 0x4000) != 0)
  {
    if (v11)
    {
      v44 = "|";
      v45 = 1;
    }
    else
    {
      v44 = "";
      v45 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v44, v45, (uint64_t)&v181, v41);
    WTF::printExpectedCStringHelper(v40, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    v46 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
    v48 = "PureNum";
  }
  else
  {
    if (v11)
    {
      v42 = "|";
      v43 = 1;
    }
    else
    {
      v42 = "";
      v43 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v42, v43, (uint64_t)&v181, v41);
    WTF::printExpectedCStringHelper(v40, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    v46 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
    v48 = "PureInt";
  }
  WTF::StringImpl::utf8ForCharacters(v48, 7uLL, (uint64_t)&v181, v47);
  WTF::printExpectedCStringHelper(v46, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  v184[5]((WTF::StringPrintStream *)&v184);
  if ((v2 & 0x8000) != 0)
  {
    v49 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    v51 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v181, v52);
    WTF::printExpectedCStringHelper(v51, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    v53 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    WTF::StringImpl::utf8ForCharacters("NeedsNegZero", 0xCuLL, (uint64_t)&v181, v54);
    WTF::printExpectedCStringHelper(v53, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    v184[5]((WTF::StringPrintStream *)&v184);
    if ((v2 & 0x10000) == 0)
    {
LABEL_76:
      if ((v2 & 0x20000) == 0)
        goto LABEL_93;
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_76;
  }
  v55 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
  v57 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
  WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v181, v58);
  WTF::printExpectedCStringHelper(v57, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
  v59 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("NeedsNaNOrInfinity", 0x12uLL, (uint64_t)&v181, v60);
  WTF::printExpectedCStringHelper(v59, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
  v184[5]((WTF::StringPrintStream *)&v184);
  if ((v2 & 0x20000) != 0)
  {
LABEL_88:
    v61 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
    v63 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
    WTF::StringImpl::utf8ForCharacters("|", 1uLL, (uint64_t)&v181, v64);
    WTF::printExpectedCStringHelper(v63, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    v65 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
    WTF::StringImpl::utf8ForCharacters("UseAsOther", 0xAuLL, (uint64_t)&v181, v66);
    WTF::printExpectedCStringHelper(v65, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    v184[5]((WTF::StringPrintStream *)&v184);
  }
LABEL_93:
  v11 = 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_39:
    if ((v2 & 0x800) == 0)
      goto LABEL_40;
    goto LABEL_102;
  }
LABEL_94:
  v67 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
  v69 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 32))(v68);
  if (v11)
  {
    v71 = "|";
    v72 = 1;
  }
  else
  {
    v71 = "";
    v72 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v71, v72, (uint64_t)&v181, v70);
  WTF::printExpectedCStringHelper(v69, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
  v73 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
  WTF::StringImpl::utf8ForCharacters("MayHaveDoubleResult", 0x13uLL, (uint64_t)&v181, v74);
  WTF::printExpectedCStringHelper(v73, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x800) == 0)
  {
LABEL_40:
    if ((v2 & 0x1000) == 0)
      goto LABEL_41;
    goto LABEL_110;
  }
LABEL_102:
  v75 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75);
  v77 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76);
  if (v11)
  {
    v79 = "|";
    v80 = 1;
  }
  else
  {
    v79 = "";
    v80 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v79, v80, (uint64_t)&v181, v78);
  WTF::printExpectedCStringHelper(v77, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
  v81 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75);
  WTF::StringImpl::utf8ForCharacters("MayHaveBigInt32Result", 0x15uLL, (uint64_t)&v181, v82);
  WTF::printExpectedCStringHelper(v81, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x1000) == 0)
  {
LABEL_41:
    if ((v2 & 0x2000) == 0)
      goto LABEL_42;
    goto LABEL_118;
  }
LABEL_110:
  v83 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83);
  v85 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 32))(v84);
  if (v11)
  {
    v87 = "|";
    v88 = 1;
  }
  else
  {
    v87 = "";
    v88 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v87, v88, (uint64_t)&v181, v86);
  WTF::printExpectedCStringHelper(v85, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84);
  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
  v89 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83);
  WTF::StringImpl::utf8ForCharacters("MayHaveHeapBigIntResult", 0x17uLL, (uint64_t)&v181, v90);
  WTF::printExpectedCStringHelper(v89, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x2000) == 0)
  {
LABEL_42:
    if ((v2 & 0x40) == 0)
      goto LABEL_43;
    goto LABEL_126;
  }
LABEL_118:
  v91 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 32))(v91);
  v93 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 32))(v92);
  if (v11)
  {
    v95 = "|";
    v96 = 1;
  }
  else
  {
    v95 = "";
    v96 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v95, v96, (uint64_t)&v181, v94);
  WTF::printExpectedCStringHelper(v93, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v92 + 40))(v92);
  (*(void (**)(uint64_t))(*(_QWORD *)v91 + 40))(v91);
  v97 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 32))(v91);
  WTF::StringImpl::utf8ForCharacters("MayHaveNonNumericResult", 0x17uLL, (uint64_t)&v181, v98);
  WTF::printExpectedCStringHelper(v97, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v91 + 40))(v91);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_43:
    if ((v2 & 0x80) == 0)
      goto LABEL_44;
    goto LABEL_134;
  }
LABEL_126:
  v99 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 32))(v99);
  v101 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
  if (v11)
  {
    v103 = "|";
    v104 = 1;
  }
  else
  {
    v103 = "";
    v104 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v103, v104, (uint64_t)&v181, v102);
  WTF::printExpectedCStringHelper(v101, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v100 + 40))(v100);
  (*(void (**)(uint64_t))(*(_QWORD *)v99 + 40))(v99);
  v105 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 32))(v99);
  WTF::StringImpl::utf8ForCharacters("MayOverflowInt52", 0x10uLL, (uint64_t)&v181, v106);
  WTF::printExpectedCStringHelper(v105, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v99 + 40))(v99);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x80) == 0)
  {
LABEL_44:
    if ((v2 & 0x100) == 0)
      goto LABEL_45;
    goto LABEL_142;
  }
LABEL_134:
  v107 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 32))(v107);
  v109 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 32))(v108);
  if (v11)
  {
    v111 = "|";
    v112 = 1;
  }
  else
  {
    v111 = "";
    v112 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v111, v112, (uint64_t)&v181, v110);
  WTF::printExpectedCStringHelper(v109, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v108 + 40))(v108);
  (*(void (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
  v113 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 32))(v107);
  WTF::StringImpl::utf8ForCharacters("MayOverflowInt32InBaseline", 0x1AuLL, (uint64_t)&v181, v114);
  WTF::printExpectedCStringHelper(v113, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x100) == 0)
  {
LABEL_45:
    if ((v2 & 0x200) == 0)
      goto LABEL_46;
    goto LABEL_150;
  }
LABEL_142:
  v115 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
  v117 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 32))(v116);
  if (v11)
  {
    v119 = "|";
    v120 = 1;
  }
  else
  {
    v119 = "";
    v120 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v119, v120, (uint64_t)&v181, v118);
  WTF::printExpectedCStringHelper(v117, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
  (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
  v121 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
  WTF::StringImpl::utf8ForCharacters("MayOverflowInt32InDFG", 0x15uLL, (uint64_t)&v181, v122);
  WTF::printExpectedCStringHelper(v121, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x200) == 0)
  {
LABEL_46:
    if ((v2 & 0x400) == 0)
      goto LABEL_47;
    goto LABEL_158;
  }
LABEL_150:
  v123 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
  v125 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 32))(v124);
  if (v11)
  {
    v127 = "|";
    v128 = 1;
  }
  else
  {
    v127 = "";
    v128 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v127, v128, (uint64_t)&v181, v126);
  WTF::printExpectedCStringHelper(v125, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 40))(v123);
  v129 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
  WTF::StringImpl::utf8ForCharacters("MayNegZeroInBaseline", 0x14uLL, (uint64_t)&v181, v130);
  WTF::printExpectedCStringHelper(v129, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 40))(v123);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x400) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000) == 0)
      goto LABEL_48;
    goto LABEL_166;
  }
LABEL_158:
  v131 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 32))(v131);
  v133 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
  if (v11)
  {
    v135 = "|";
    v136 = 1;
  }
  else
  {
    v135 = "";
    v136 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v135, v136, (uint64_t)&v181, v134);
  WTF::printExpectedCStringHelper(v133, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
  (*(void (**)(uint64_t))(*(_QWORD *)v131 + 40))(v131);
  v137 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 32))(v131);
  WTF::StringImpl::utf8ForCharacters("MayNegZeroInDFG", 0xFuLL, (uint64_t)&v181, v138);
  WTF::printExpectedCStringHelper(v137, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v131 + 40))(v131);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x40000) == 0)
  {
LABEL_48:
    if ((v2 & 0x80000) == 0)
      goto LABEL_49;
    goto LABEL_174;
  }
LABEL_166:
  v139 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 32))(v139);
  v141 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 32))(v140);
  if (v11)
  {
    v143 = "|";
    v144 = 1;
  }
  else
  {
    v143 = "";
    v144 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v143, v144, (uint64_t)&v181, v142);
  WTF::printExpectedCStringHelper(v141, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v140 + 40))(v140);
  (*(void (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
  v145 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 32))(v139);
  WTF::StringImpl::utf8ForCharacters("UseAsInt", 8uLL, (uint64_t)&v181, v146);
  WTF::printExpectedCStringHelper(v145, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x80000) == 0)
  {
LABEL_49:
    if ((v2 & 0x100000) == 0)
      goto LABEL_190;
    goto LABEL_182;
  }
LABEL_174:
  v147 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
  v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 32))(v147);
  v149 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 32))(v148);
  if (v11)
  {
    v151 = "|";
    v152 = 1;
  }
  else
  {
    v151 = "";
    v152 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v151, v152, (uint64_t)&v181, v150);
  WTF::printExpectedCStringHelper(v149, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v148 + 40))(v148);
  (*(void (**)(uint64_t))(*(_QWORD *)v147 + 40))(v147);
  v153 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 32))(v147);
  WTF::StringImpl::utf8ForCharacters("ReallyWantsInt", 0xEuLL, (uint64_t)&v181, v154);
  WTF::printExpectedCStringHelper(v153, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v147 + 40))(v147);
  v184[5]((WTF::StringPrintStream *)&v184);
  v11 = 1;
  if ((v2 & 0x100000) != 0)
  {
LABEL_182:
    v155 = ((uint64_t (*)(_QWORD))v184[4])(&v184);
    v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 32))(v155);
    v157 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 32))(v156);
    if (v11)
    {
      v159 = "|";
      v160 = 1;
    }
    else
    {
      v159 = "";
      v160 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v159, v160, (uint64_t)&v181, v158);
    WTF::printExpectedCStringHelper(v157, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
    v161 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 32))(v155);
    WTF::StringImpl::utf8ForCharacters("IsFlushed", 9uLL, (uint64_t)&v181, v162);
    WTF::printExpectedCStringHelper(v161, "StringView", &v181);
    if (v182 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
    v184[5]((WTF::StringPrintStream *)&v184);
  }
LABEL_190:
  v163 = v185;
  if (v185)
  {
    v164 = v186;
    if ((unint64_t)v186 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198450644);
    }
    if ((_QWORD)v186 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x19845064CLL);
    }
    v165 = WTF::fastMalloc((WTF *)(v186 + 17));
    *(_DWORD *)v165 = 1;
    *(_QWORD *)(v165 + 8) = v164;
    memcpy((void *)(v165 + 16), v163, v164);
    *(_BYTE *)(v165 + 16 + v164) = 0;
    if (*(_QWORD *)(v165 + 8))
    {
      v166 = (WTF::PrintStream *)(*(uint64_t (**)(JSC::DFG *))(*(_QWORD *)this + 32))(this);
      WTF::PrintStream::printf(v166, "%s", (const char *)(v165 + 16));
      (*(void (**)(JSC::DFG *))(*(_QWORD *)this + 40))(this);
LABEL_199:
      if (*(_DWORD *)v165 == 1)
        WTF::fastFree(v165, v167, v168, v169, v170, v171, v172, v173);
      else
        --*(_DWORD *)v165;
      goto LABEL_201;
    }
  }
  else
  {
    v165 = 0;
  }
  v174 = (*(uint64_t (**)(JSC::DFG *))(*(_QWORD *)this + 32))(this);
  v175 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
  WTF::StringImpl::utf8ForCharacters("<empty>", 7uLL, (uint64_t)&v181, v176);
  WTF::printExpectedCStringHelper(v175, "StringView", &v181);
  if (v182 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v182])(&v183, &v181);
  (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
  (*(void (**)(JSC::DFG *))(*(_QWORD *)this + 40))(this);
  if (v163)
    goto LABEL_199;
LABEL_201:
  if (v185 != (WTF *)v187)
    WTF::fastFree((unint64_t)v185, v167, v168, v169, v170, v171, v172, v173);
}

uint64_t JSC::DFG::NodeFlowProjection::dump(JSC::DFG::NodeFlowProjection *this, WTF::PrintStream *a2)
{
  uint64_t v3;
  WTF::PrintStream *v5;
  unint64_t v6;
  WTF::PrintStream *v7;
  int v8;
  WTF::PrintStream *v9;
  const char *v10;
  WTF::PrintStream *v11;
  unint64_t v12;
  unint64_t *v13;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if ((v3 & 1) == 0)
    {
      v12 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v13 = &v12;
      return WTF::PrintStream::atomically<void WTF::PrintStream::print<JSC::DFG::Node *>(JSC::DFG::Node * const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, (uint64_t **)&v13);
    }
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%s", "shadow(");
    if (v6)
    {
      v8 = *(_DWORD *)(v6 + 20);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
      WTF::PrintStream::printf(v9, "%s", "D@");
      WTF::PrintStream::printf(v9, "%u", v8);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      if ((*(_DWORD *)(v6 + 56) & 7) == 3)
      {
        v10 = "<Double>";
      }
      else
      {
        if ((*(_DWORD *)(v6 + 56) & 7) != 5)
        {
LABEL_12:
          WTF::PrintStream::printf(v7, "%s");
          return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        }
        v10 = "<Int52>";
      }
    }
    else
    {
      v10 = "-";
    }
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    goto LABEL_12;
  }
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*,false>(uint64_t result, char *a2, unsigned int (**a3)(char *, char *), uint64_t a4, char a5)
{
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, char *);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char v57;
  BOOL v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];

  v8 = (_QWORD *)result;
  v64[2] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v9 = (char *)v8;
  while (2)
  {
    v10 = 1 - a4;
LABEL_4:
    v8 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0x4EC4EC4EC4EC4EC5 * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v19 = *a3;
        v20 = a2 - 13;
        result = ((uint64_t (*)(char *, char *))v19)(a2 - 13, v9);
        if ((_DWORD)result)
        {
          v21 = *(_QWORD *)v9;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 5);
          v64[0] = v21;
          v22 = *(_QWORD *)v20;
          *(_QWORD *)(v9 + 5) = *((_QWORD *)a2 - 1);
          *(_QWORD *)v9 = v22;
          *(_QWORD *)v20 = v64[0];
          *((_QWORD *)a2 - 1) = *(_QWORD *)((char *)v64 + 5);
        }
        return result;
      case 3uLL:
        v14 = v9 + 13;
        v15 = a2 - 13;
        v16 = (*a3)(v9 + 13, v9);
        result = ((uint64_t (*)(char *, char *))*a3)(v15, v9 + 13);
        if ((v16 & 1) != 0)
        {
          if ((_DWORD)result)
          {
            v17 = *(_QWORD *)v9;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 5);
            v64[0] = v17;
            v18 = *(_QWORD *)v15;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)(v15 + 5);
            *(_QWORD *)v9 = v18;
            *(_QWORD *)v15 = v64[0];
            *(_QWORD *)(v15 + 5) = *(_QWORD *)((char *)v64 + 5);
          }
          else
          {
            v40 = *(_QWORD *)v9;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 5);
            v64[0] = v40;
            *(_QWORD *)v9 = *v14;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)(v9 + 18);
            *v14 = v64[0];
            *(_QWORD *)(v9 + 18) = *(_QWORD *)((char *)v64 + 5);
            result = ((uint64_t (*)(char *, char *))*a3)(v15, v9 + 13);
            if ((_DWORD)result)
            {
              v64[0] = *v14;
              *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 18);
              v41 = *(_QWORD *)(v15 + 5);
              *v14 = *(_QWORD *)v15;
              *(_QWORD *)(v9 + 18) = v41;
              *(_QWORD *)(v15 + 5) = *(_QWORD *)((char *)v64 + 5);
              *(_QWORD *)v15 = v64[0];
            }
          }
        }
        else if ((_DWORD)result)
        {
          v64[0] = *v14;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 18);
          v37 = *(_QWORD *)(v15 + 5);
          *v14 = *(_QWORD *)v15;
          *(_QWORD *)(v9 + 18) = v37;
          *(_QWORD *)(v15 + 5) = *(_QWORD *)((char *)v64 + 5);
          *(_QWORD *)v15 = v64[0];
          goto LABEL_18;
        }
        return result;
      case 4uLL:
        v14 = v9 + 13;
        v23 = v9 + 26;
        v24 = a2 - 13;
        v25 = (*a3)(v9 + 13, v9);
        v26 = (*a3)((char *)v8 + 26, (char *)v8 + 13);
        if ((v25 & 1) != 0)
        {
          if (v26)
          {
            v27 = *v8;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
            v64[0] = v27;
            *v8 = *v23;
            *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 31);
LABEL_13:
            *v23 = v64[0];
            *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v64 + 5);
            goto LABEL_14;
          }
          v42 = *v8;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
          v64[0] = v42;
          *v8 = *v14;
          *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 18);
          *v14 = v64[0];
          *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v64 + 5);
          if ((*a3)((char *)v8 + 26, (char *)v8 + 13))
          {
            v64[0] = *v14;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 18);
            *v14 = *v23;
            *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v8 + 31);
            goto LABEL_13;
          }
        }
        else if (v26)
        {
          v64[0] = *v14;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 18);
          *v14 = *v23;
          *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v8 + 31);
          *v23 = v64[0];
          *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v64 + 5);
          if ((*a3)((char *)v8 + 13, (char *)v8))
          {
            v38 = *v8;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
            v64[0] = v38;
            *v8 = *v14;
            *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 18);
            *v14 = v64[0];
            *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v64 + 5);
          }
        }
LABEL_14:
        result = ((uint64_t (*)(char *, uint64_t))*a3)(v24, (uint64_t)v8 + 26);
        if ((_DWORD)result)
        {
          v64[0] = *v23;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 31);
          v28 = *(_QWORD *)(v24 + 5);
          *v23 = *(_QWORD *)v24;
          *(_QWORD *)((char *)v8 + 31) = v28;
          *(_QWORD *)(v24 + 5) = *(_QWORD *)((char *)v64 + 5);
          *(_QWORD *)v24 = v64[0];
          goto LABEL_16;
        }
        return result;
      case 5uLL:
        v14 = v9 + 13;
        v23 = v9 + 26;
        v30 = v9 + 39;
        v31 = a2 - 13;
        v32 = (*a3)((char *)v8 + 13, (char *)v8);
        v33 = (*a3)((char *)v8 + 26, (char *)v8 + 13);
        if ((v32 & 1) != 0)
        {
          if (v33)
          {
            v34 = *v8;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
            v64[0] = v34;
            *v8 = *v23;
            *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 31);
LABEL_23:
            *v23 = v64[0];
            *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v64 + 5);
            goto LABEL_24;
          }
          v43 = *v8;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
          v64[0] = v43;
          *v8 = *v14;
          *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 18);
          *v14 = v64[0];
          *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v64 + 5);
          if ((*a3)((char *)v8 + 26, (char *)v8 + 13))
          {
            v64[0] = *v14;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 18);
            *v14 = *v23;
            *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v8 + 31);
            goto LABEL_23;
          }
        }
        else if (v33)
        {
          v64[0] = *v14;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 18);
          *v14 = *v23;
          *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v8 + 31);
          *v23 = v64[0];
          *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v64 + 5);
          if ((*a3)((char *)v8 + 13, (char *)v8))
          {
            v39 = *v8;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
            v64[0] = v39;
            *v8 = *v14;
            *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 18);
            *v14 = v64[0];
            *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v64 + 5);
          }
        }
LABEL_24:
        if ((*a3)((char *)v8 + 39, (char *)v8 + 26))
        {
          v64[0] = *v23;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 31);
          *v23 = *v30;
          *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v8 + 44);
          *v30 = v64[0];
          *(_QWORD *)((char *)v8 + 44) = *(_QWORD *)((char *)v64 + 5);
          if ((*a3)((char *)v8 + 26, (char *)v8 + 13))
          {
            v64[0] = *v14;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 18);
            *v14 = *v23;
            *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v8 + 31);
            *v23 = v64[0];
            *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v64 + 5);
            if ((*a3)((char *)v8 + 13, (char *)v8))
            {
              v35 = *v8;
              *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
              v64[0] = v35;
              *v8 = *v14;
              *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v8 + 18);
              *v14 = v64[0];
              *(_QWORD *)((char *)v8 + 18) = *(_QWORD *)((char *)v64 + 5);
            }
          }
        }
        result = ((uint64_t (*)(char *, uint64_t))*a3)(v31, (uint64_t)v8 + 39);
        if ((_DWORD)result)
        {
          v64[0] = *v30;
          *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 44);
          v36 = *(_QWORD *)(v31 + 5);
          *v30 = *(_QWORD *)v31;
          *(_QWORD *)((char *)v8 + 44) = v36;
          *(_QWORD *)(v31 + 5) = *(_QWORD *)((char *)v64 + 5);
          *(_QWORD *)v31 = v64[0];
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)((uint64_t)v8 + 39, (uint64_t)v8 + 26);
          if ((_DWORD)result)
          {
            v64[0] = *v23;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 31);
            *v23 = *v30;
            *(_QWORD *)((char *)v8 + 31) = *(_QWORD *)((char *)v8 + 44);
            *v30 = v64[0];
            *(_QWORD *)((char *)v8 + 44) = *(_QWORD *)((char *)v64 + 5);
LABEL_16:
            result = ((uint64_t (*)(_QWORD *, _QWORD *))*a3)(v23, v14);
            if ((_DWORD)result)
            {
              v64[0] = *v14;
              *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v14 + 5);
              *v14 = *v23;
              *(_QWORD *)((char *)v14 + 5) = *(_QWORD *)((char *)v23 + 5);
              *v23 = v64[0];
              *(_QWORD *)((char *)v23 + 5) = *(_QWORD *)((char *)v64 + 5);
LABEL_18:
              result = ((uint64_t (*)(_QWORD *, _QWORD *))*a3)(v14, v8);
              if ((_DWORD)result)
              {
                v29 = *v8;
                *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v8 + 5);
                v64[0] = v29;
                *v8 = *v14;
                *(_QWORD *)((char *)v8 + 5) = *(_QWORD *)((char *)v14 + 5);
                *v14 = v64[0];
                *(_QWORD *)((char *)v14 + 5) = *(_QWORD *)((char *)v64 + 5);
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 311)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*,JSC::DFG::MinifiedNode*>((uint64_t)v9, a2, a2, a3);
            return result;
          }
          v53 = a2 - 13;
          v54 = v13 >> 1;
          v55 = &v9[13 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x681)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(v9, &v9[13 * v54], v53, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            v59 = 13 * v54;
            v60 = &v9[13 * v54 - 13];
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(v9 + 13, v60, a2 - 26, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(v9 + 26, &v9[v59 + 13], a2 - 39, (uint64_t (**)(_QWORD *, _QWORD *))a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(v60, v55, &v9[v59 + 13], (uint64_t (**)(_QWORD *, _QWORD *))a3);
            v61 = *(_QWORD *)v9;
            *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)(v9 + 5);
            v64[0] = v61;
            v62 = *(_QWORD *)v55;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)(v55 + 5);
            *(_QWORD *)v9 = v62;
            v63 = v64[0];
            *(_QWORD *)(v55 + 5) = *(_QWORD *)((char *)v64 + 5);
            *(_QWORD *)v55 = v63;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(&v9[13 * v54], v9, v53, (uint64_t (**)(_QWORD *, _QWORD *))a3);
          }
          if ((a5 & 1) == 0 && (((uint64_t (*)(char *, char *))*a3)(v9 - 13, v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::MinifiedNode *,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&)>(v9, a2, (uint64_t (**)(_BYTE *, char *))a3);
            v9 = (char *)result;
            goto LABEL_66;
          }
          v56 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::MinifiedNode *,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&)>((uint64_t *)v9, (uint64_t *)a2, (uint64_t (**)(uint64_t, _BYTE *))a3);
          if ((v57 & 1) == 0)
            goto LABEL_65;
          v58 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(v9, (char *)v56, (uint64_t (**)(char *, char *))a3);
          v9 = (char *)v56 + 13;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>((uint64_t *)((char *)v56 + 13), a2, (uint64_t (**)(char *, char *))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (!v58)
            {
LABEL_65:
              result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*,false>(v8, v56, a3, -v11, a5 & 1);
              v9 = (char *)v56 + 13;
LABEL_66:
              a5 = 0;
              a4 = -v11;
              continue;
            }
            goto LABEL_4;
          }
          a4 = -v11;
          a2 = (char *)v56;
          if (v58)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
          return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>((uint64_t)v9, (uint64_t)a2, (uint64_t (**)(_QWORD *))a3);
        if (v9 != a2)
        {
          v44 = v9 + 13;
          if (v9 + 13 != a2)
          {
            v45 = 0;
            v46 = v9;
            do
            {
              v47 = v46;
              v46 = v44;
              result = ((uint64_t (*)(char *, _QWORD *))*a3)(v44, v47);
              if ((_DWORD)result)
              {
                v48 = *v46;
                *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)v46 + 5);
                v64[0] = v48;
                v49 = v45;
                while (1)
                {
                  v50 = (char *)v8 + v49;
                  *(_QWORD *)(v50 + 13) = *(_QWORD *)((char *)v8 + v49);
                  *(_QWORD *)(v50 + 18) = *(_QWORD *)((char *)v8 + v49 + 5);
                  if (!v49)
                    break;
                  v49 -= 13;
                  result = ((uint64_t (*)(_QWORD *, char *))*a3)(v64, (char *)v8 + v49);
                  if ((result & 1) == 0)
                  {
                    v51 = (_QWORD *)((char *)v8 + v49 + 13);
                    goto LABEL_57;
                  }
                }
                v51 = v8;
LABEL_57:
                v52 = v64[0];
                *(_QWORD *)((char *)v51 + 5) = *(_QWORD *)((char *)v64 + 5);
                *v51 = v52;
              }
              v44 = (char *)v46 + 13;
              v45 += 13;
            }
            while ((char *)v46 + 13 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD *))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v3 = result;
    v4 = (_QWORD *)(result + 13);
    if (result + 13 != a2)
    {
      v6 = 0;
      v7 = 0x4EC4EC4EC4EC4EC5 * (a2 - result);
      v8 = result - 13;
      v9 = -2;
      v10 = 1;
      do
      {
        v11 = v3 + 13 * v6;
        v6 = v10;
        result = ((uint64_t (*)(_QWORD *, uint64_t))*a3)(v4, v11);
        if ((_DWORD)result)
        {
          v16[0] = *v4;
          *(_QWORD *)((char *)v16 + 5) = *(_QWORD *)((char *)v4 + 5);
          v12 = v9;
          v13 = v8;
          do
          {
            *(_QWORD *)(v13 + 26) = *(_QWORD *)(v13 + 13);
            *(_QWORD *)(v13 + 31) = *(_QWORD *)(v13 + 18);
            if (__CFADD__(v12++, 1))
              __break(1u);
            v15 = v13 - 13;
            result = (*a3)(v16);
            v13 = v15;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v15 + 26) = v16[0];
          *(_QWORD *)(v15 + 31) = *(_QWORD *)((char *)v16 + 5);
        }
        v10 = v6 + 1;
        v4 = (_QWORD *)(v3 + 13 * (v6 + 1));
        v8 += 13;
        --v9;
      }
      while (v6 + 1 != v7);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD *, _QWORD *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[13];
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      *(_QWORD *)v15 = *a1;
      *(_QWORD *)&v15[5] = *(_QWORD *)((char *)a1 + 5);
      v10 = *(_QWORD *)((char *)a3 + 5);
      *a1 = *a3;
      *(_QWORD *)((char *)a1 + 5) = v10;
    }
    else
    {
      *(_QWORD *)&v18 = *a1;
      *(_QWORD *)((char *)&v18 + 5) = *(_QWORD *)((char *)a1 + 5);
      v13 = *(_QWORD *)((char *)a2 + 5);
      *a1 = *a2;
      *(_QWORD *)((char *)a1 + 5) = v13;
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v18 + 5);
      *a2 = v18;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      *(_QWORD *)v15 = *a2;
      *(_QWORD *)&v15[5] = *(_QWORD *)((char *)a2 + 5);
      v14 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v14;
    }
    *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)&v15[5];
    *a3 = *(_QWORD *)v15;
  }
  else if ((_DWORD)result)
  {
    *(_QWORD *)&v16 = *a2;
    *(_QWORD *)((char *)&v16 + 5) = *(_QWORD *)((char *)a2 + 5);
    v11 = *(_QWORD *)((char *)a3 + 5);
    *a2 = *a3;
    *(_QWORD *)((char *)a2 + 5) = v11;
    *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v16 + 5);
    *a3 = v16;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v17 = *a1;
      *(_QWORD *)((char *)&v17 + 5) = *(_QWORD *)((char *)a1 + 5);
      v12 = *(_QWORD *)((char *)a2 + 5);
      *a1 = *a2;
      *(_QWORD *)((char *)a1 + 5) = v12;
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v17 + 5);
      *a2 = v17;
    }
  }
  return result;
}

char *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::MinifiedNode *,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&)>(char *a1, char *a2, uint64_t (**a3)(_BYTE *, char *))
{
  char *v6;
  char *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[13];
  _BYTE v18[13];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v17 = *(_QWORD *)a1;
  *(_QWORD *)&v17[5] = *(_QWORD *)(a1 + 5);
  if (((*a3)(v17, a2 - 13) & 1) != 0)
  {
    v6 = a1;
    while (1)
    {
      v6 += 13;
      if (v6 == a2)
        break;
      if (((*a3)(v17, v6) & 1) != 0)
        goto LABEL_9;
    }
LABEL_23:
    __break(1u);
  }
  v7 = a1 + 13;
  do
  {
    v6 = v7;
    if (v7 >= a2)
      break;
    v8 = (*a3)(v17, v7);
    v7 = v6 + 13;
  }
  while (!v8);
LABEL_9:
  v9 = a2;
  if (v6 < a2)
  {
    v9 = a2;
    while (v9 != (_QWORD *)a1)
    {
      v9 = (_QWORD *)((char *)v9 - 13);
      if (((*a3)(v17, (char *)v9) & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_23;
  }
LABEL_19:
  if (v6 < (char *)v9)
  {
    v10 = *(_QWORD *)v6;
    *(_QWORD *)&v18[5] = *(_QWORD *)(v6 + 5);
    *(_QWORD *)v18 = v10;
    v11 = *v9;
    *(_QWORD *)(v6 + 5) = *(_QWORD *)((char *)v9 + 5);
    *(_QWORD *)v6 = v11;
    v12 = *(_QWORD *)v18;
    *(_QWORD *)((char *)v9 + 5) = *(_QWORD *)&v18[5];
    *v9 = v12;
    do
    {
      v6 += 13;
      if (v6 == a2)
        goto LABEL_23;
    }
    while (!(*a3)(v17, v6));
    while (v9 != (_QWORD *)a1)
    {
      v9 = (_QWORD *)((char *)v9 - 13);
      if (((*a3)(v17, (char *)v9) & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_23;
  }
  v13 = v6 - 13;
  if (v6 - 13 != a1)
  {
    v14 = *(_QWORD *)v13;
    *(_QWORD *)(a1 + 5) = *((_QWORD *)v6 - 1);
    *(_QWORD *)a1 = v14;
  }
  v15 = *(_QWORD *)v17;
  *((_QWORD *)v6 - 1) = *(_QWORD *)&v17[5];
  *(_QWORD *)v13 = v15;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::MinifiedNode *,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, _BYTE *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[13];
  _QWORD v18[3];

  v6 = 0;
  v18[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v17 = *a1;
  *(_QWORD *)&v17[5] = *(uint64_t *)((char *)a1 + 5);
  do
  {
    v7 = (uint64_t)a1 + v6 + 13;
    if ((uint64_t *)v7 == a2)
      goto LABEL_25;
    v6 += 13;
  }
  while (((*a3)(v7, v17) & 1) != 0);
  v8 = (uint64_t *)((char *)a1 + v6);
  if (v6 != 13)
  {
    v9 = a2;
    while (v9 != a1)
    {
      v9 = (uint64_t *)((char *)v9 - 13);
      if ((*a3)((uint64_t)v9, v17))
        goto LABEL_12;
    }
LABEL_25:
    __break(1u);
  }
  v9 = a2;
  do
  {
    if (v8 >= v9)
      break;
    v9 = (uint64_t *)((char *)v9 - 13);
  }
  while (((*a3)((uint64_t)v9, v17) & 1) == 0);
LABEL_12:
  if (v8 >= v9)
  {
    result = (uint64_t *)((char *)v8 - 13);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    do
    {
      v18[0] = *v10;
      *(_QWORD *)((char *)v18 + 5) = *(uint64_t *)((char *)v10 + 5);
      v12 = *v11;
      *(uint64_t *)((char *)v10 + 5) = *(uint64_t *)((char *)v11 + 5);
      *v10 = v12;
      v13 = v18[0];
      *(uint64_t *)((char *)v11 + 5) = *(_QWORD *)((char *)v18 + 5);
      *v11 = v13;
      do
      {
        v10 = (uint64_t *)((char *)v10 + 13);
        if (v10 == a2)
          goto LABEL_25;
      }
      while (((*a3)((uint64_t)v10, v17) & 1) != 0);
      do
      {
        if (v11 == a1)
          goto LABEL_25;
        v11 = (uint64_t *)((char *)v11 - 13);
      }
      while (!(*a3)((uint64_t)v11, v17));
    }
    while (v10 < v11);
    result = (uint64_t *)((char *)v10 - 13);
  }
  if (result != a1)
  {
    v15 = *result;
    *(uint64_t *)((char *)a1 + 5) = *(uint64_t *)((char *)result + 5);
    *a1 = v15;
  }
  v16 = *(_QWORD *)v17;
  *(uint64_t *)((char *)result + 5) = *(_QWORD *)&v17[5];
  *result = v16;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(_QWORD *a1, char *a2, uint64_t (**a3)(char *, char *))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  int v13;
  _QWORD *v14;
  char *v15;
  char v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v6 = 0x4EC4EC4EC4EC4EC5 * (a2 - (char *)a1);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 13;
      if ((*a3)(a2 - 13, (char *)a1))
      {
        v31[0] = *a1;
        *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
        v9 = *((_QWORD *)a2 - 1);
        *a1 = *(_QWORD *)v8;
        *(_QWORD *)((char *)a1 + 5) = v9;
        *((_QWORD *)a2 - 1) = *(_QWORD *)((char *)v31 + 5);
        *(_QWORD *)v8 = v31[0];
      }
      return 1;
    case 3:
      v14 = (_QWORD *)((char *)a1 + 13);
      v15 = a2 - 13;
      v16 = (*a3)((char *)a1 + 13, (char *)a1);
      v17 = (*a3)(v15, (char *)a1 + 13);
      if ((v16 & 1) != 0)
      {
        if (v17)
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          v18 = *(_QWORD *)(v15 + 5);
          *a1 = *(_QWORD *)v15;
          *(_QWORD *)((char *)a1 + 5) = v18;
        }
        else
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          *a1 = *v14;
          *(_QWORD *)((char *)a1 + 5) = *(_QWORD *)((char *)a1 + 18);
          *v14 = v31[0];
          *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)v31 + 5);
          if (!(*a3)(v15, (char *)a1 + 13))
            return 1;
          v31[0] = *v14;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 18);
          v30 = *(_QWORD *)(v15 + 5);
          *v14 = *(_QWORD *)v15;
          *(_QWORD *)((char *)a1 + 18) = v30;
        }
        *(_QWORD *)(v15 + 5) = *(_QWORD *)((char *)v31 + 5);
        *(_QWORD *)v15 = v31[0];
      }
      else if (v17)
      {
        v31[0] = *v14;
        *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 18);
        v23 = *(_QWORD *)(v15 + 5);
        *v14 = *(_QWORD *)v15;
        *(_QWORD *)((char *)a1 + 18) = v23;
        *(_QWORD *)(v15 + 5) = *(_QWORD *)((char *)v31 + 5);
        *(_QWORD *)v15 = v31[0];
LABEL_20:
        if ((*a3)((char *)v14, (char *)a1))
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          *a1 = *v14;
          *(_QWORD *)((char *)a1 + 5) = *(_QWORD *)((char *)v14 + 5);
          *v14 = v31[0];
          *(_QWORD *)((char *)v14 + 5) = *(_QWORD *)((char *)v31 + 5);
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(a1, (_QWORD *)((char *)a1 + 13), (_QWORD *)((char *)a1 + 26), a2 - 13, (uint64_t (**)(_QWORD, _QWORD))a3);
      return 1;
    case 5:
      v14 = (_QWORD *)((char *)a1 + 13);
      v19 = (_QWORD *)((char *)a1 + 26);
      v20 = (_QWORD *)((char *)a1 + 39);
      v21 = a2 - 13;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(a1, (_QWORD *)((char *)a1 + 13), (_QWORD *)((char *)a1 + 26), (_QWORD *)((char *)a1 + 39), (uint64_t (**)(_QWORD, _QWORD))a3);
      if (!(*a3)(v21, (char *)a1 + 39))
        return 1;
      v31[0] = *v20;
      *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 44);
      v22 = *(_QWORD *)(v21 + 5);
      *v20 = *(_QWORD *)v21;
      *(_QWORD *)((char *)a1 + 44) = v22;
      *(_QWORD *)(v21 + 5) = *(_QWORD *)((char *)v31 + 5);
      *(_QWORD *)v21 = v31[0];
      if (!(*a3)((char *)a1 + 39, (char *)a1 + 26))
        return 1;
      v31[0] = *v19;
      *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 31);
      *v19 = *v20;
      *(_QWORD *)((char *)a1 + 31) = *(_QWORD *)((char *)a1 + 44);
      *v20 = v31[0];
      *(_QWORD *)((char *)a1 + 44) = *(_QWORD *)((char *)v31 + 5);
      if (!(*a3)((char *)a1 + 26, (char *)a1 + 13))
        return 1;
      v31[0] = *v14;
      *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 18);
      *v14 = *v19;
      *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)a1 + 31);
      *v19 = v31[0];
      *(_QWORD *)((char *)a1 + 31) = *(_QWORD *)((char *)v31 + 5);
      goto LABEL_20;
    default:
      v10 = (char *)a1 + 26;
      v11 = (_QWORD *)((char *)a1 + 13);
      v12 = (*a3)((char *)a1 + 13, (char *)a1);
      v13 = (*a3)((char *)a1 + 26, (char *)a1 + 13);
      if ((v12 & 1) != 0)
      {
        if (v13)
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          *a1 = *(_QWORD *)v10;
          *(_QWORD *)((char *)a1 + 5) = *(_QWORD *)((char *)a1 + 31);
        }
        else
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          *a1 = *v11;
          *(_QWORD *)((char *)a1 + 5) = *(_QWORD *)((char *)a1 + 18);
          *v11 = v31[0];
          *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)v31 + 5);
          if (!(*a3)((char *)a1 + 26, (char *)a1 + 13))
            goto LABEL_25;
          v31[0] = *v11;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 18);
          *v11 = *(_QWORD *)v10;
          *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)a1 + 31);
        }
        *(_QWORD *)v10 = v31[0];
        *(_QWORD *)((char *)a1 + 31) = *(_QWORD *)((char *)v31 + 5);
      }
      else if (v13)
      {
        v31[0] = *v11;
        *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 18);
        *v11 = *(_QWORD *)v10;
        *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)a1 + 31);
        *(_QWORD *)v10 = v31[0];
        *(_QWORD *)((char *)a1 + 31) = *(_QWORD *)((char *)v31 + 5);
        if ((*a3)((char *)a1 + 13, (char *)a1))
        {
          v31[0] = *a1;
          *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)a1 + 5);
          *a1 = *v11;
          *(_QWORD *)((char *)a1 + 5) = *(_QWORD *)((char *)a1 + 18);
          *v11 = v31[0];
          *(_QWORD *)((char *)a1 + 18) = *(_QWORD *)((char *)v31 + 5);
        }
      }
LABEL_25:
      v24 = (char *)a1 + 39;
      if ((char *)a1 + 39 == a2)
        return 1;
      v25 = 0;
      v26 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v24, v10))
    {
      v31[0] = *(_QWORD *)v24;
      *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)(v24 + 5);
      v27 = v25;
      while (1)
      {
        v28 = (char *)a1 + v27;
        *(_QWORD *)(v28 + 39) = *(_QWORD *)((char *)a1 + v27 + 26);
        *(_QWORD *)(v28 + 44) = *(_QWORD *)((char *)a1 + v27 + 31);
        if (v27 == -26)
          break;
        v27 -= 13;
        if (((*a3)((char *)v31, v28 + 13) & 1) == 0)
        {
          v29 = (_QWORD *)((char *)a1 + v27 + 39);
          goto LABEL_33;
        }
      }
      v29 = a1;
LABEL_33:
      *v29 = v31[0];
      *(_QWORD *)((char *)v29 + 5) = *(_QWORD *)((char *)v31 + 5);
      if (++v26 == 8)
        return v24 + 13 == a2;
    }
    v10 = v24;
    v25 += 13;
    v24 += 13;
    if (v24 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[13];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      *(_QWORD *)v21 = *a1;
      *(_QWORD *)&v21[5] = *(_QWORD *)((char *)a1 + 5);
      v12 = *(_QWORD *)((char *)a3 + 5);
      *a1 = *a3;
      *(_QWORD *)((char *)a1 + 5) = v12;
LABEL_9:
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)&v21[5];
      *a3 = *(_QWORD *)v21;
      goto LABEL_10;
    }
    *(_QWORD *)&v24 = *a1;
    *(_QWORD *)((char *)&v24 + 5) = *(_QWORD *)((char *)a1 + 5);
    v15 = *(_QWORD *)((char *)a2 + 5);
    *a1 = *a2;
    *(_QWORD *)((char *)a1 + 5) = v15;
    *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v24 + 5);
    *a2 = v24;
    if ((*a5)(a3, a2))
    {
      *(_QWORD *)v21 = *a2;
      *(_QWORD *)&v21[5] = *(_QWORD *)((char *)a2 + 5);
      v16 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v16;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    *(_QWORD *)&v22 = *a2;
    *(_QWORD *)((char *)&v22 + 5) = *(_QWORD *)((char *)a2 + 5);
    v13 = *(_QWORD *)((char *)a3 + 5);
    *a2 = *a3;
    *(_QWORD *)((char *)a2 + 5) = v13;
    *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v22 + 5);
    *a3 = v22;
    if ((*a5)(a2, a1))
    {
      *(_QWORD *)&v23 = *a1;
      *(_QWORD *)((char *)&v23 + 5) = *(_QWORD *)((char *)a1 + 5);
      v14 = *(_QWORD *)((char *)a2 + 5);
      *a1 = *a2;
      *(_QWORD *)((char *)a1 + 5) = v14;
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v23 + 5);
      *a2 = v23;
    }
  }
LABEL_10:
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v25 = *a3;
    *(_QWORD *)((char *)&v25 + 5) = *(_QWORD *)((char *)a3 + 5);
    v18 = *(_QWORD *)((char *)a4 + 5);
    *a3 = *a4;
    *(_QWORD *)((char *)a3 + 5) = v18;
    *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v25 + 5);
    *a4 = v25;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      *(_QWORD *)&v26 = *a2;
      *(_QWORD *)((char *)&v26 + 5) = *(_QWORD *)((char *)a2 + 5);
      v19 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v19;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v26 + 5);
      *a3 = v26;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        *(_QWORD *)&v27 = *a1;
        *(_QWORD *)((char *)&v27 + 5) = *(_QWORD *)((char *)a1 + 5);
        v20 = *(_QWORD *)((char *)a2 + 5);
        *a1 = *a2;
        *(_QWORD *)((char *)a1 + 5) = v20;
        *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v27 + 5);
        *a2 = v27;
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(JSC::DFG::MinifiedNode const&,JSC::DFG::MinifiedNode const&),JSC::DFG::MinifiedNode*,JSC::DFG::MinifiedNode*>(uint64_t result, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(char *, char *))
{
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v50;
  _BYTE v51[13];
  _BYTE v52[13];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if ((_QWORD *)result != a2)
  {
    v5 = (_QWORD *)result;
    v6 = 0x4EC4EC4EC4EC4EC5 * ((_QWORD)a2 - result);
    v47 = (uint64_t)a2 - result;
    if ((uint64_t)a2 - result >= 14 && (unint64_t)v47 >= 0x1A)
    {
      v7 = (unint64_t)(v6 - 2) >> 1;
      v8 = v7;
      do
      {
        if (v7 >= v8)
        {
          v9 = (2 * v8) | 1;
          v10 = (_QWORD *)((char *)v5 + 13 * v9);
          if (2 * v8 + 2 < v6 && (*a4)((char *)v5 + 13 * v9, (char *)v10 + 13))
          {
            v10 = (_QWORD *)((char *)v10 + 13);
            v9 = 2 * v8 + 2;
          }
          v11 = (_QWORD *)((char *)v5 + 13 * v8);
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v10, v11);
          if ((result & 1) == 0)
          {
            *(_QWORD *)v52 = *v11;
            *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v11 + 5);
            do
            {
              v12 = v10;
              v13 = *v10;
              *(_QWORD *)((char *)v11 + 5) = *(_QWORD *)((char *)v10 + 5);
              *v11 = v13;
              if (v7 < v9)
                break;
              v14 = (2 * v9) | 1;
              v10 = (_QWORD *)((char *)v5 + 13 * v14);
              v15 = 2 * v9 + 2;
              if (v15 < v6 && (*a4)((char *)v5 + 13 * v14, (char *)v10 + 13))
              {
                v10 = (_QWORD *)((char *)v10 + 13);
                v14 = v15;
              }
              result = ((uint64_t (*)(_QWORD *, _BYTE *))*a4)(v10, v52);
              v11 = v12;
              v9 = v14;
            }
            while (!(_DWORD)result);
            v16 = *(_QWORD *)v52;
            *(_QWORD *)((char *)v12 + 5) = *(_QWORD *)&v52[5];
            *v12 = v16;
          }
        }
        v17 = v8-- <= 0;
      }
      while (!v17);
    }
    v18 = a3;
    if (a2 != a3)
    {
      if (v47 >= 26)
      {
        v21 = (_QWORD *)((char *)v5 + 13);
        v22 = a2;
        do
        {
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v22, v5);
          if ((_DWORD)result)
          {
            *(_QWORD *)v52 = *v22;
            *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v22 + 5);
            v23 = *(_QWORD *)((char *)v5 + 5);
            *v22 = *v5;
            *(_QWORD *)((char *)v22 + 5) = v23;
            *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)&v52[5];
            *v5 = *(_QWORD *)v52;
            if ((unint64_t)v6 < 3)
            {
              v25 = v21;
              v26 = 1;
            }
            else
            {
              v24 = (*a4)((char *)v21, (char *)v5 + 26);
              v25 = v24 ? (_QWORD *)((char *)v5 + 26) : v21;
              v26 = v24 ? 2 : 1;
            }
            result = ((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v25, v5);
            if ((result & 1) == 0)
            {
              *(_QWORD *)v52 = *v5;
              *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v5 + 5);
              v27 = v5;
              do
              {
                v28 = v25;
                v29 = *v25;
                *(_QWORD *)((char *)v27 + 5) = *(_QWORD *)((char *)v25 + 5);
                *v27 = v29;
                if ((uint64_t)((unint64_t)(v6 - 2) >> 1) < v26)
                  break;
                v30 = (2 * v26) | 1;
                v25 = (_QWORD *)((char *)v5 + 13 * v30);
                if (2 * v26 + 2 < v6 && (*a4)((char *)v5 + 13 * v30, (char *)v25 + 13))
                {
                  v25 = (_QWORD *)((char *)v25 + 13);
                  v30 = 2 * v26 + 2;
                }
                result = ((uint64_t (*)(_QWORD *, _BYTE *))*a4)(v25, v52);
                v27 = v28;
                v26 = v30;
              }
              while (!(_DWORD)result);
              v31 = *(_QWORD *)v52;
              *(_QWORD *)((char *)v28 + 5) = *(_QWORD *)&v52[5];
              *v28 = v31;
              v18 = a3;
              v21 = (_QWORD *)((char *)v5 + 13);
            }
          }
          v22 = (_QWORD *)((char *)v22 + 13);
        }
        while (v22 != v18);
      }
      else
      {
        v19 = a2;
        do
        {
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v19, v5);
          if ((_DWORD)result)
          {
            *(_QWORD *)v52 = *v19;
            *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v19 + 5);
            v20 = *(_QWORD *)((char *)v5 + 5);
            *v19 = *v5;
            *(_QWORD *)((char *)v19 + 5) = v20;
            *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)&v52[5];
            *v5 = *(_QWORD *)v52;
          }
          v19 = (_QWORD *)((char *)v19 + 13);
        }
        while (v19 != a3);
      }
    }
    v32 = a2;
    if (v47 >= 14)
    {
      v33 = v47 / 0xDuLL;
      do
      {
        v34 = 0;
        v50 = v32;
        *(_QWORD *)v51 = *v5;
        *(_QWORD *)&v51[5] = *(_QWORD *)((char *)v5 + 5);
        v35 = v5;
        do
        {
          v36 = (_QWORD *)((char *)v35 + 13 * v34 + 13);
          v37 = (2 * v34) | 1;
          v38 = 2 * v34 + 2;
          if (v38 < v33)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a4)((uint64_t)v35 + 13 * v34 + 13, (uint64_t)v35 + 13 * v34 + 26);
            if ((_DWORD)result)
            {
              v36 = (_QWORD *)((char *)v36 + 13);
              v37 = v38;
            }
          }
          v39 = *v36;
          *(_QWORD *)((char *)v35 + 5) = *(_QWORD *)((char *)v36 + 5);
          *v35 = v39;
          v35 = v36;
          v34 = v37;
        }
        while (v37 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        v32 = (_QWORD *)((char *)v50 - 13);
        if (v36 == (_QWORD *)((char *)v50 - 13))
        {
          *(_QWORD *)((char *)v36 + 5) = *(_QWORD *)&v51[5];
          *v36 = *(_QWORD *)v51;
        }
        else
        {
          v40 = *v32;
          *(_QWORD *)((char *)v36 + 5) = *(v50 - 1);
          *v36 = v40;
          *v32 = *(_QWORD *)v51;
          *(v50 - 1) = *(_QWORD *)&v51[5];
          v41 = (char *)v36 - (char *)v5 + 13;
          if (v41 >= 14)
          {
            v42 = (v41 / 0xDuLL - 2) >> 1;
            v43 = (_QWORD *)((char *)v5 + 13 * v42);
            result = ((uint64_t (*)(_QWORD *, _QWORD *))*a4)(v43, v36);
            if ((_DWORD)result)
            {
              v44 = *v36;
              *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v36 + 5);
              *(_QWORD *)v52 = v44;
              do
              {
                v45 = v43;
                v46 = *v43;
                *(_QWORD *)((char *)v36 + 5) = *(_QWORD *)((char *)v43 + 5);
                *v36 = v46;
                if (!v42)
                  break;
                v42 = (v42 - 1) >> 1;
                v43 = (_QWORD *)((char *)v5 + 13 * v42);
                result = ((uint64_t (*)(_QWORD *, _BYTE *))*a4)(v43, v52);
                v36 = v45;
              }
              while ((result & 1) != 0);
              *v45 = *(_QWORD *)v52;
              *(_QWORD *)((char *)v45 + 5) = *(_QWORD *)&v52[5];
            }
          }
        }
        v17 = v33-- <= 2;
      }
      while (!v17);
    }
  }
  return result;
}

uint64_t WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::alloc<>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = (*(_QWORD *)a1)++;
  v3 = v2 >> 4;
  v4 = *(unsigned int *)(a1 + 20);
  if (v2 >> 4 >= v4)
  {
    v10 = (_QWORD *)(a1 + 8);
    v11 = WTF::fastMalloc((WTF *)0x80);
    v14 = v11;
    v12 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
    {
      v13 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v12 + 1, (unint64_t)&v14);
      v12 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = *v13;
    }
    else
    {
      *(_QWORD *)(*v10 + 8 * v12) = v11;
    }
    v4 = (v12 + 1);
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_QWORD *)a1 - 1;
    v3 = v2 >> 4;
  }
  if (v3 >= v4
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = *(_QWORD *)(v5 + 8 * v3),
        v7 = v2 & 0xF,
        *(_QWORD *)(v6 + 8 * v7) = 0,
        v8 = v2 >> 4,
        v8 >= v4))
  {
    __break(0xC471u);
    JUMPOUT(0x198452670);
  }
  return *(_QWORD *)(v5 + 8 * v8) + 8 * v7;
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>>,WTF::IntHash<unsigned char>,WTF::HashMap<unsigned char,JSC::DFG::Node *,WTF::IntHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    v16 = v7;
    v17 = (_QWORD *)(v8 + 24);
    do
    {
      *((_BYTE *)v17 - 8) = -1;
      *v17 = 0;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v18 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v20 = (__n128 *)v4;
    do
    {
      if (v20->n128_u8[0] <= 0xFDu)
      {
        v22 = v20;
        WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>>,WTF::IntHash<unsigned char>,WTF::HashMap<unsigned char,JSC::DFG::Node *,WTF::IntHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::reinsert(*a1, v20);
        v20 = v22;
        if (v22 == a2)
          v18 = v21;
      }
      ++v20;
      --v5;
    }
    while (v5);
    goto LABEL_17;
  }
  result = 0;
  if (v4)
  {
LABEL_17:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v18;
  }
  return result;
}

__n128 WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,JSC::DFG::Node *>>,WTF::IntHash<unsigned char>,WTF::HashMap<unsigned char,JSC::DFG::Node *,WTF::IntHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9
     * ((~(a2->n128_u8[0] << 15) + a2->n128_u8[0]) ^ ((~(a2->n128_u8[0] << 15) + a2->n128_u8[0]) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(unsigned __int8 *)(a1 + 16 * v6) != 255);
  result = *a2;
  *(__n128 *)(a1 + 16 * v6) = *a2;
  return result;
}

void JSC::DFG::Graph::forAllLiveInBytecode<JSC::DFG::`anonymous namespace'::MovHintRemovalPhase::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::Operand)#2}>(JSC::DFG::Graph *this, uint64_t a2, _DWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::UnlinkedCodeBlock ***v29;
  JSC::UnlinkedCodeBlock **v30;
  WTF *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  int v38;
  _QWORD *v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  _DWORD *v59;
  _QWORD *v60;
  _DWORD *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _QWORD *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;

  if ((a2 & 1) != 0)
  {
    v85 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v86 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v86 != 0x3FFFFFFF)
        ? (v87 = (_DWORD)v86 == -1)
        : (v87 = 1),
          v87))
    {
      v88 = 2;
    }
    else if (v86 >> 28)
    {
      v89 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v89 = v85;
      *(_DWORD *)(v89 + 8) = v86;
      v88 = 1;
      v85 = v89;
    }
    else
    {
      v88 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v85 = v86 << 36;
    }
    a2 = v85 | v88;
  }
  v10 = 0;
  v93 = a2;
  v11 = (unint64_t *)&v93;
  v92 = a2;
  v12 = a2;
  v13 = 0x3FFFFFFF;
  v14 = 0x3FFFFFFF;
  while (1)
  {
    v15 = v12 & 0xFFFFFFFF8;
    if ((v12 & 1) != 0)
    {
      v15 = *(_QWORD *)v15;
      if (!v15)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_19;
      }
    }
    else if (!v15)
    {
      goto LABEL_18;
    }
    v16 = *(_QWORD *)(v15 + 24);
    v17 = HIDWORD(v16) & 0xFFFFF | ((int)(v16 >> 28) >> 24 << 20);
    v18 = (v16 >> 60) | (16 * *(_BYTE *)(v15 + 32));
    if ((*(_BYTE *)(v15 + 32) & 1) != 0)
    {
      v19 = (v17 + 3);
      v20 = *a3;
      if (v17 >= -3)
      {
        v27 = (v19 << 32) - 0x500000000;
        v22 = v20[29];
        if (*(_DWORD *)(v22 + (v27 >> 30)))
          goto LABEL_9;
        v21 = v27 >> 32;
LABEL_8:
        *(_DWORD *)(v22 + 4 * v21) = *a3[2];
        v18 = (*(_QWORD *)(v15 + 24) >> 60) | (16 * *(_BYTE *)(v15 + 32));
        goto LABEL_9;
      }
      v21 = (v19 ^ 0xFFFFFFFFLL) + *((unsigned int *)v20 + 62);
      v22 = v20[29];
      if (!*(_DWORD *)(v22 + 4 * v21))
        goto LABEL_8;
    }
LABEL_9:
    if ((v18 & 0xFu) - 3 > 2)
      goto LABEL_19;
    v23 = (v17 + 4);
    v24 = *a3;
    if (v17 < -4)
    {
      v25 = (v23 ^ 0xFFFFFFFFLL) + *((unsigned int *)v24 + 62);
      v26 = v24[29];
      if (*(_DWORD *)(v26 + 4 * v25))
        goto LABEL_19;
      goto LABEL_12;
    }
    v28 = (v23 << 32) - 0x500000000;
    v26 = v24[29];
    if (!*(_DWORD *)(v26 + (v28 >> 30)))
    {
      v25 = v28 >> 32;
LABEL_12:
      *(_DWORD *)(v26 + 4 * v25) = *a3[2];
    }
LABEL_19:
    v29 = (JSC::UnlinkedCodeBlock ***)(v15 + 8);
    if (!v15)
      v29 = (JSC::UnlinkedCodeBlock ***)((char *)this + 40);
    v30 = *v29;
    v31 = JSC::DFG::Graph::livenessFor(this, *v29, (uint64_t)a3, a4, a5, a6, a7, a8);
    v33 = *v11;
    if ((*v11 & 2) != 0)
    {
      if ((v33 & 1) == 0)
      {
        v34 = 0xFFFFFFFFLL;
LABEL_24:
        if ((v10 & 1) == 0)
          goto LABEL_25;
        goto LABEL_81;
      }
      v56 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v34 = 0xFFFFFFFFLL;
LABEL_63:
      v58 = 2;
      goto LABEL_80;
    }
    if ((v33 & 1) == 0)
    {
      v34 = v33 >> 36;
      goto LABEL_24;
    }
    v55 = v33 & 0xFFFFFFFF8;
    v34 = *(unsigned int *)(v55 + 8);
    v56 = *(_QWORD *)v55;
    v57 = (_DWORD)v34 == -1 || v34 == 0x3FFFFFFF;
    if (v57)
      goto LABEL_63;
    if (v34 >> 28)
    {
      v90 = *(_QWORD *)v55;
      v91 = v31;
      v74 = WTF::fastMalloc((WTF *)0x10);
      v31 = v91;
      *(_QWORD *)v74 = v90;
      *(_DWORD *)(v74 + 8) = v34;
      v58 = 1;
      v56 = v74;
    }
    else
    {
      v58 = *(_QWORD *)v55;
      v56 = v34 << 36;
    }
LABEL_80:
    v33 = v56 | v58;
    if ((v10 & 1) == 0)
      goto LABEL_25;
LABEL_81:
    v37 = v33 & 1;
    if ((v33 & 2) != 0)
    {
      v68 = (_QWORD *)(v33 & 0xFFFFFFFF8);
      LODWORD(v67) = -1;
      if ((v33 & 1) == 0)
        goto LABEL_84;
    }
    else
    {
      if ((v33 & 1) == 0)
      {
        v67 = v33 >> 36;
        v68 = (_QWORD *)(v33 & 0xFFFFFFFF8);
        goto LABEL_84;
      }
      v68 = (_QWORD *)(v33 & 0xFFFFFFFF8);
      LODWORD(v67) = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8);
    }
    v68 = (_QWORD *)*v68;
LABEL_84:
    v69 = (char *)(v68 + 1);
    v57 = v68 == 0;
    v70 = (char *)this + 40;
    if (!v57)
      v70 = v69;
    v71 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v70 + 56) + 80)
                            + ((unint64_t)v67 >> 2));
    v72 = *v71;
    if ((v72 | 2) == 0x82)
      v72 = v71[1];
    if (v72 > 3 || v72 == 2)
    {
LABEL_25:
      v35 = (v34 & 3) + (v34 >> 2);
      v36 = *(unsigned int **)v31;
      if (**(unsigned int **)v31 <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x198452DD0);
      }
      v37 = v33 & 1;
      goto LABEL_27;
    }
    v35 = (v34 & 3) + (v34 >> 2);
    v36 = (unsigned int *)*((_QWORD *)v31 + 1);
    if (*v36 <= v35)
    {
      __break(0xC471u);
      JUMPOUT(0x198452E68);
    }
LABEL_27:
    if (v37 && (v33 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v33 & 0xFFFFFFFF8, v32, (uint64_t)a3, a4, a5, a6, a7, a8);
    v38 = *((_DWORD *)v30 + 5);
    if (v38)
    {
      v39 = *a3;
      v40 = a3[2];
      v41 = v17 - v38;
      v42 = v38 - 1;
      while (1)
      {
        if (v41 >= v14 && v41 < v13 || ((*(_DWORD *)(*(_QWORD *)&v36[4 * v35 + 2] + 4 * (v42 >> 5)) >> v42) & 1) == 0)
          goto LABEL_36;
        if ((v41 & 0x80000000) == 0)
          break;
        v43 = (v41 ^ 0xFFFFFFFFLL) + *((unsigned int *)v39 + 62);
        v44 = v39[29];
        if (!*(_DWORD *)(v44 + 4 * v43))
          goto LABEL_35;
LABEL_36:
        ++v41;
        if (--v42 == -1)
          goto LABEL_40;
      }
      v45 = ((unint64_t)v41 << 32) - 0x500000000;
      v44 = v39[29];
      if (*(_DWORD *)(v44 + (v45 >> 30)))
        goto LABEL_36;
      v43 = v45 >> 32;
LABEL_35:
      *(_DWORD *)(v44 + 4 * v43) = *v40;
      goto LABEL_36;
    }
LABEL_40:
    v46 = *v11;
    if ((*v11 & 2) != 0)
      break;
    if ((v46 & 1) != 0)
    {
      LODWORD(v47) = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8);
      if ((v47 & 3) == 0)
        goto LABEL_65;
    }
    else
    {
      if ((v46 & 0x3000000000) == 0)
        goto LABEL_65;
      v47 = v46 >> 36;
    }
    v48 = v47 & 3;
    if ((v47 & 3) != 0)
    {
      v47 = v47;
      goto LABEL_46;
    }
LABEL_65:
    if (!v15)
      goto LABEL_102;
LABEL_66:
    v59 = *(_DWORD **)v15;
    if (*(_QWORD *)v15)
      LODWORD(v59) = *v59;
    v14 = v17 + 5;
    v13 = (_DWORD)v59 + v17 + 5;
    if (v17 + 5 < v13)
    {
      v60 = *a3;
      v61 = a3[2];
      v62 = v17 + 5;
      while (1)
      {
        v63 = v62;
        if ((v62 & 0x80000000) == 0)
          break;
        v64 = (v62 ^ 0xFFFFFFFFLL) + *((unsigned int *)v60 + 62);
        v65 = v60[29];
        if (!*(_DWORD *)(v65 + 4 * v64))
          goto LABEL_72;
LABEL_73:
        v62 = v63 + 1;
        LODWORD(v59) = (_DWORD)v59 - 1;
        if (!(_DWORD)v59)
          goto LABEL_77;
      }
      v66 = ((unint64_t)v62 << 32) - 0x500000000;
      v65 = v60[29];
      if (*(_DWORD *)(v65 + (v66 >> 30)))
        goto LABEL_73;
      v64 = v66 >> 32;
LABEL_72:
      *(_DWORD *)(v65 + 4 * v64) = *v61;
      goto LABEL_73;
    }
LABEL_77:
    v12 = *(_QWORD *)(v15 + 16);
    v10 = 1;
    v11 = (unint64_t *)(v15 + 16);
  }
  v48 = 3;
  v47 = 0xFFFFFFFFLL;
LABEL_46:
  v49 = (unsigned __int8 *)(**((_QWORD **)v30[7] + 10) + (v47 >> 2));
  v50 = *v49;
  if ((v50 | 2) == 0x82)
    v50 = v49[1];
  switch(v50)
  {
    case 0:
    case 1:
    case 3:
      if (v48 == 1)
        goto LABEL_50;
      goto LABEL_65;
    case 2:
LABEL_50:
      v51 = *a3;
      v52 = *((_QWORD *)*a3 + 29);
      v53 = a3[2];
      if (v15)
      {
        v54 = *((unsigned int *)v51 + 63)
            + (unint64_t)*((unsigned int *)v51 + 62)
            + (*(_QWORD *)(v15 + 24) >> 22);
        if (!*(_DWORD *)(v52 + 4 * v54))
          *(_DWORD *)(v52 + 4 * v54) = *v53;
        goto LABEL_66;
      }
      v75 = *((unsigned int *)v51 + 62) + (unint64_t)*((unsigned int *)v51 + 63);
      if (!*(_DWORD *)(v52 + 4 * v75))
        *(_DWORD *)(v52 + 4 * v75) = *v53;
LABEL_102:
      if ((v92 & 1) != 0 && (v92 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v92 & 0xFFFFFFFF8, v32, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*((_DWORD *)this + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x198452E8CLL);
      }
      v76 = *(_DWORD *)(**((_QWORD **)this + 6) + 88);
      if (v76)
      {
        v77 = *a3;
        v78 = a3[2];
        v79 = v76 - 1;
        while (1)
        {
          v80 = (v79 + 5);
          if (((v79 + 5) & 0x80000000) == 0)
            break;
          v81 = (v80 ^ 0xFFFFFFFFLL) + *((unsigned int *)v77 + 62);
          v82 = v77[29];
          if (!*(_DWORD *)(v82 + 4 * v81))
            goto LABEL_108;
LABEL_109:
          if (!v79--)
            return;
        }
        v84 = (v80 << 32) - 0x500000000;
        v82 = v77[29];
        if (*(_DWORD *)(v82 + (v84 >> 30)))
          goto LABEL_109;
        v81 = v84 >> 32;
LABEL_108:
        *(_DWORD *)(v82 + 4 * v81) = *v78;
        goto LABEL_109;
      }
      return;
    case 4:
      goto LABEL_65;
    default:
      __break(0xC471u);
      JUMPOUT(0x198452E30);
  }
}

uint64_t JSC::DFG::Node::remove(JSC::DFG::Graph &)::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)result, a2);
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != a2)
  {
    if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      result = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)result = 0x400000002;
      v6 = *v3;
      *(_QWORD *)(result + 8) = *v3 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(result + 16) = a2;
      v5 = v6 & 2 | result | 1;
    }
    else
    {
      v5 = *(_QWORD *)result & 2 | a2;
    }
    *v3 = v5;
  }
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<JSC::DFG::Node *>(JSC::DFG::Node * const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = v4;
  v6 = **a2;
  if (!v6)
  {
    v9 = "-";
    goto LABEL_7;
  }
  v7 = *(_DWORD *)(v6 + 20);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", "D@");
  WTF::PrintStream::printf(v8, "%u", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  if ((*(_DWORD *)(v6 + 56) & 7) == 3)
  {
    v9 = "<Double>";
    goto LABEL_7;
  }
  if ((*(_DWORD *)(v6 + 56) & 7) == 5)
  {
    v9 = "<Int52>";
LABEL_7:
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t JSC::DFG::performOSRAvailabilityAnalysis(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _UNKNOWN *__ptr32 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  JSC::DFG *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  JSC::DFG *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  void *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  BOOL v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int32 v140;
  unsigned __int32 v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  JSC::DFG *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  __int128 *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _UNKNOWN *__ptr32 *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  BOOL v183;
  uint64_t v184;
  int v185;
  int v186;
  BOOL v187;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  uint64_t v197;
  unint64_t v198;
  int isLiveInBytecode;
  unint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  BOOL v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF *v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  JSC::DFG *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  const char *v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF *v238;
  WTF::PrintStream *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  JSC::DFG *v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  WTF *v248;
  WTF *v249;
  WTF *v250;
  int v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  __int16 v259;
  JSC::DFG *v260;
  __int128 v261;
  char v262;
  WTF *v263;
  char *v264;
  char *v265;
  char v266;
  char v267;
  _QWORD v268[2];
  __int128 v269;
  double v270;
  uint64_t v271;
  unint64_t v272;
  __n128 v273;
  __int128 v274;
  uint64_t v275;
  __int128 *v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  JSC::DFG *v284;
  __n128 v285[2];

  v256 = -1;
  v257 = -1;
  v258 = 0;
  v259 = 256;
  v260 = this;
  *(_QWORD *)&v261 = "OSR availability analysis";
  *((_QWORD *)&v261 + 1) = 26;
  v262 = 0;
  v263 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v256);
  v264 = &v267;
  v265 = &v266;
  v268[0] = "DFG";
  v268[1] = 4;
  v269 = v261;
  v270 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v143 = mach_absolute_time();
    v145 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v145 != -1)
    {
      *(_QWORD *)&v282 = &v273;
      v276 = &v282;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v276, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v144) = dword_1ECF4400C;
    v270 = (double)(v143 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v144 * 1000000000.0);
  }
  v9 = *((unsigned int *)v260 + 15);
  if (!(_DWORD)v9)
    goto LABEL_424;
  v10 = xmmword_1991243B0;
  do
  {
    if (*((_DWORD *)v260 + 15) <= --v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198454680);
    }
    v11 = *(_QWORD *)(*((_QWORD *)v260 + 6) + 8 * v9);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 200);
      if (*(_DWORD *)(v12 + 12))
      {
        v13 = 0;
        do
          *(_OWORD *)(*(_QWORD *)v12 + 16 * v13++) = v10;
        while (v13 < *(unsigned int *)(v12 + 12));
      }
      v14 = *(_QWORD *)(v12 + 24);
      if (v14)
      {
        *(_QWORD *)(v12 + 24) = 0;
        v253 = v10;
        WTF::fastFree(v14 - 16, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
        v10 = v253;
      }
      v15 = *(_QWORD *)(v11 + 200);
      if (*(_DWORD *)(v15 + 44))
      {
        v16 = 0;
        do
          *(_OWORD *)(*(_QWORD *)(v15 + 32) + 16 * v16++) = v10;
        while (v16 < *(unsigned int *)(v15 + 44));
      }
      v17 = *(_QWORD *)(v15 + 56);
      if (v17)
      {
        *(_QWORD *)(v15 + 56) = 0;
        v254 = v10;
        WTF::fastFree(v17 - 16, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
        v10 = v254;
      }
    }
  }
  while ((_DWORD)v9);
  v18 = v260;
  if (!*((_DWORD *)v260 + 15))
  {
LABEL_424:
    __break(0xC471u);
    JUMPOUT(0x1984546E8);
  }
  v19 = **((_QWORD **)v260 + 6);
  v20 = *(_QWORD *)(v19 + 200);
  if (*(_DWORD *)(v20 + 12))
  {
    v21 = 0;
    do
      *(_OWORD *)(*(_QWORD *)v20 + 16 * v21++) = xmmword_199154D50;
    while (v21 < *(unsigned int *)(v20 + 12));
    v18 = v260;
    if (!*((_DWORD *)v260 + 15))
    {
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x198453230);
    }
  }
  v22 = 0;
  v23 = 0x500000006;
  v24 = -1;
  while (++v24 < (unint64_t)*(unsigned int *)(**((_QWORD **)v18 + 6) + 136))
  {
    v25 = (_QWORD *)(**(_QWORD **)(v19 + 200) + v22);
    *v25 = 1;
    v25[1] = v23;
    v23 += 0x100000000;
    v22 += 16;
    v18 = v260;
    if (!*((_DWORD *)v260 + 15))
      goto LABEL_25;
  }
  v282 = 0u;
  v283 = 0u;
  v284 = v18;
LABEL_27:
  v26 = v260;
  v252 = *((unsigned int *)v260 + 15);
  if ((_DWORD)v252)
  {
    v27 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v260 + 6) + 8 * v27))
    {
      if (v252 == ++v27)
        goto LABEL_146;
    }
    if ((_DWORD)v252 != (_DWORD)v27)
    {
      LOBYTE(v28) = 0;
      LODWORD(v29) = *((_DWORD *)v260 + 15);
      while (1)
      {
        if (v29 <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198454624);
        }
        v30 = *(_QWORD *)(*((_QWORD *)v26 + 6) + 8 * v27);
        v31 = *(_QWORD *)(v30 + 200);
        if ((__int128 *)v31 != &v282)
        {
          v32 = *(unsigned int *)(v31 + 12);
          if (HIDWORD(v282) > v32)
          {
            HIDWORD(v282) = *(_DWORD *)(v31 + 12);
          }
          else
          {
            v33 = DWORD2(v282);
            if (v32 > DWORD2(v282))
            {
              if (DWORD2(v282))
              {
                if (HIDWORD(v282))
                  HIDWORD(v282) = 0;
                v101 = v282;
                if ((_QWORD)v282)
                {
                  *(_QWORD *)&v282 = 0;
                  DWORD2(v282) = 0;
                  WTF::fastFree(v101, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
                  v33 = DWORD2(v282);
                }
              }
              v42 = *(unsigned int *)(v31 + 12);
              if (v33 < v42)
              {
                if (v42 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984546F0);
                }
                v248 = (WTF *)v282;
                v43 = HIDWORD(v282);
                v44 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v42));
                DWORD2(v282) = v42;
                *(_QWORD *)&v282 = v44;
                if ((_DWORD)v43)
                {
                  v215 = 16 * v43;
                  v216 = v248;
                  do
                  {
                    v217 = *(_OWORD *)v216;
                    v216 = (WTF *)((char *)v216 + 16);
                    *v44++ = v217;
                    v215 -= 16;
                  }
                  while (v215);
                }
                if (v248)
                {
                  if ((WTF *)v282 == v248)
                  {
                    *(_QWORD *)&v282 = 0;
                    DWORD2(v282) = 0;
                  }
                  WTF::fastFree((unint64_t)v248, v45, v3, v4, v5, v6, (uint64_t)v7, v8);
                }
              }
            }
            v32 = HIDWORD(v282);
          }
          v34 = v282;
          if (v32)
          {
            memmove((void *)v282, *(const void **)v31, 16 * v32);
            v35 = HIDWORD(v282);
            v34 = v282;
          }
          else
          {
            v35 = 0;
          }
          v36 = *(unsigned int *)(v31 + 12);
          if (v35 != v36)
          {
            v37 = (_OWORD *)(v34 + 16 * v35);
            v38 = (__int128 *)(*(_QWORD *)v31 + 16 * v35);
            v39 = 16 * v36 - 16 * v35;
            do
            {
              v40 = *v38++;
              *v37++ = v40;
              v39 -= 16;
            }
            while (v39);
            LODWORD(v35) = *(_DWORD *)(v31 + 12);
          }
          HIDWORD(v282) = v35;
        }
        *(_QWORD *)&v283 = *(_QWORD *)(v31 + 16);
        WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v283 + 1, (_QWORD *)(v31 + 24), v3, v4, v5, v6, (uint64_t)v7, v8);
        if (*(_DWORD *)(v30 + 220))
        {
          v41 = 0;
          do
          {
            while (2)
            {
              v46 = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v41);
              v47 = *(unsigned __int16 *)(v46 + 18);
              if (v47 <= 0x116)
              {
                switch(*(_WORD *)(v46 + 18))
                {
                  case 0x11:
                  case 0x13:
                    v52 = *(uint64_t **)(v46 + 72);
                    v53 = *v52;
                    if (HIDWORD(*v52) == 2)
                    {
                      v54 = v283 + (uint64_t)(int)v53 + DWORD1(v283);
                    }
                    else if ((v53 & 0x80000000) != 0)
                    {
                      v54 = (*v52 ^ 0xFFFFFFFFLL) + v283;
                    }
                    else
                    {
                      v54 = (uint64_t)(((unint64_t)v53 << 32) - 0x500000000) >> 32;
                    }
                    *(_QWORD *)(v282 + 16 * v54 + 8) = *((unsigned __int8 *)v52 + 12) | ((unint64_t)*((unsigned int *)v52 + 2) << 32);
                    goto LABEL_58;
                  case 0x12:
                    v50 = *(_QWORD *)(v46 + 72);
                    if (HIDWORD(v50) == 2)
                    {
                      v51 = v283 + (uint64_t)(int)v50 + DWORD1(v283);
                    }
                    else if ((v50 & 0x80000000) != 0)
                    {
                      v51 = (*(_QWORD *)(v46 + 72) ^ 0xFFFFFFFFLL) + v283;
                    }
                    else
                    {
                      v51 = (uint64_t)(((unint64_t)v50 << 32) - 0x500000000) >> 32;
                    }
                    *(_QWORD *)(v282 + 16 * v51 + 8) = 0x3FFFFFFF00000007;
                    goto LABEL_58;
                  case 0x14:
                  case 0x15:
                    v48 = *(_QWORD *)(v46 + 72);
                    if (HIDWORD(v48) == 2)
                    {
                      v49 = v283 + (uint64_t)(int)v48 + DWORD1(v283);
                    }
                    else if ((v48 & 0x80000000) != 0)
                    {
                      v49 = (*(_QWORD *)(v46 + 72) ^ 0xFFFFFFFFLL) + v283;
                    }
                    else
                    {
                      v49 = (uint64_t)(((unint64_t)v48 << 32) - 0x500000000) >> 32;
                    }
                    *(_QWORD *)(v282 + 16 * v49) = *(_QWORD *)(v46 + 24) & 0xFF00FFFFFFFFFFFFLL;
                    if (++v41 >= *(unsigned int *)(v30 + 220))
                      goto LABEL_82;
                    continue;
                  default:
                    if (v47 - 99 < 2)
                    {
                      v121 = *(_DWORD **)(v46 + 72);
                      v122 = v121[1];
                      v123 = (v122 & 0x80000000) != 0
                           ? (v122 ^ 0xFFFFFFFFLL) + v283
                           : ((v122 << 32) - 0x500000000) >> 32;
                      v124 = ((unint64_t)v121[3] << 32) | 1;
                      v125 = (_QWORD *)(v282 + 16 * v123);
                      *v125 = 1;
                      v125[1] = v124;
                      v126 = v121[6];
                      if (v126)
                      {
                        v127 = v126 - 1;
                        do
                        {
                          v128 = v121[2];
                          v103 = v128 == 0x3FFFFFFF;
                          LODWORD(v129) = v127 + v128;
                          if (v103)
                            v129 = 0x3FFFFFFFLL;
                          else
                            v129 = v129;
                          v130 = (v127 + *v121);
                          if (v127 + *v121 >= 0)
                            v131 = ((v130 << 32) - 0x500000000) >> 32;
                          else
                            v131 = (v130 ^ 0xFFFFFFFFLL) + v283;
                          v132 = (_QWORD *)(v282 + 16 * v131);
                          *v132 = 1;
                          v132[1] = (v129 << 32) | 6;
                          --v127;
                        }
                        while (v127 != -1);
                      }
                    }
                    goto LABEL_58;
                }
              }
              break;
            }
            if (v47 == 418)
            {
              v96 = *(unsigned int *)(v46 + 72);
              if (*((_DWORD *)v284 + 115) <= v96)
              {
                __break(0xC471u);
                JUMPOUT(0x198454634);
              }
              v97 = *((_QWORD *)v284 + 56) + 16 * v96;
              v60 = *(unsigned int *)(v97 + 12);
              if ((_DWORD)v60)
              {
                v57 = (v60 << 32) + 0x400000000;
                v59 = (v60 - 1);
                v58 = 16 * v59;
                do
                {
                  if (*(_DWORD *)(v97 + 12) <= v59)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19845463CLL);
                  }
                  v55 = v57 + *(unsigned __int8 *)(*(_QWORD *)v97 + v59);
                  v56 = (_QWORD *)(v282 + v58);
                  *v56 = 1;
                  v56[1] = v55;
                  v57 -= 0x100000000;
                  v58 -= 16;
                  --v59;
                  LODWORD(v60) = v60 - 1;
                }
                while ((_DWORD)v60);
              }
            }
            else
            {
              if (v47 != 279)
              {
                switch(*(_WORD *)(v46 + 18))
                {
                  case 0x15C:
                  case 0x15D:
                  case 0x163:
                    v114 = *(_QWORD *)v46 & 0xFFFFFFFF8;
                    if ((*(_QWORD *)v46 & 1) != 0)
                      v114 = *(_QWORD *)v114;
                    if (v114)
                    {
                      if (v47 == 349)
                        v115 = *(_DWORD *)(v46 + 72);
                      else
                        v115 = 0;
                      v116 = *(_QWORD *)(v114 + 24);
                      if ((v116 >> 60) - 3 <= 2)
                      {
                        *((_QWORD *)&v137 + 1) = (uint64_t)(16 * v116) >> 56;
                        *(_QWORD *)&v137 = v116 << 12;
                        v138 = (v137 >> 44) + 4;
                        v246 = v115;
                        if ((((v137 >> 44) + 4) & 0x80000000) != 0)
                          v139 = (v138 ^ 0xFFFFFFFFLL) + v283;
                        else
                          v139 = ((v138 << 32) - 0x500000000) >> 32;
                        v273 = *(__n128 *)(v282 + 16 * v139);
                        v285[0].n128_u64[0] = v46;
                        v285[0].n128_u64[1] = 3;
                        WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)&v283 + 1, (uint64_t)v285, &v273, (uint64_t)&v276);
                        v116 = *(_QWORD *)(v114 + 24);
                        v117 = *(_BYTE *)(v114 + 32);
                        v115 = v246;
                      }
                      else
                      {
                        v117 = *(_BYTE *)(v114 + 32);
                      }
                      if ((v117 & 1) != 0)
                      {
                        *((_QWORD *)&v146 + 1) = (uint64_t)(16 * v116) >> 56;
                        *(_QWORD *)&v146 = v116 << 12;
                        v147 = (v146 >> 44) + 3;
                        v247 = v115;
                        if ((((v146 >> 44) + 3) & 0x80000000) != 0)
                          v148 = (v147 ^ 0xFFFFFFFFLL) + v283;
                        else
                          v148 = ((v147 << 32) - 0x500000000) >> 32;
                        v273 = *(__n128 *)(v282 + 16 * v148);
                        v285[0].n128_u64[0] = v46;
                        v285[0].n128_u64[1] = 5;
                        WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)&v283 + 1, (uint64_t)v285, &v273, (uint64_t)&v276);
                        v116 = *(_QWORD *)(v114 + 24);
                        v115 = v247;
                      }
                      if (v115 < (v116 & 0x3FFFFF) - 1)
                      {
                        v249 = (WTF *)v114;
                        do
                        {
                          v118 = v115 + (HIDWORD(v116) & 0xFFFFF | ((int)(v116 >> 28) >> 24 << 20)) + 6;
                          if ((int)v118 >= 0)
                            v119 = ((v118 << 32) - 0x500000000) >> 32;
                          else
                            v119 = (v118 ^ 0xFFFFFFFFLL) + v283;
                          v273 = *(__n128 *)(v282 + 16 * v119);
                          v285[0].n128_u64[0] = v46;
                          v285[0].n128_u32[2] = 4;
                          v285[0].n128_u32[3] = v115;
                          v120 = v115;
                          WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)&v283 + 1, (uint64_t)v285, &v273, (uint64_t)&v276);
                          v115 = v120 + 1;
                          v116 = *((_QWORD *)v249 + 3);
                        }
                        while (v120 + 1 < (v116 & 0x3FFFFF) - 1);
                      }
                    }
                    goto LABEL_58;
                  case 0x15E:
                    v273.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v41);
                    v273.n128_u64[1] = 15;
                    goto LABEL_194;
                  case 0x15F:
                    if (*(_DWORD *)(v46 + 32))
                    {
                      v140 = 0;
                      do
                      {
                        v141 = v140 + *(_DWORD *)(v46 + 24);
                        if (*((_DWORD *)v284 + 41) <= v141)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19845462CLL);
                        }
                        v142 = *(_QWORD *)(*((_QWORD *)v284 + 19) + 8 * v141) & 0xFF00FFFFFFFFFFFFLL;
                        v273.n128_u64[0] = v46;
                        v273.n128_u32[2] = 16;
                        v273.n128_u32[3] = v140;
                        v285[0].n128_u64[0] = v142;
                        v285[0].n128_u8[8] = 7;
                        v285[0].n128_u32[3] = 0x3FFFFFFF;
                        WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>((uint64_t *)&v283 + 1, (uint64_t)&v273, v285, (uint64_t)&v276);
                        ++v140;
                      }
                      while (v140 < *(_DWORD *)(v46 + 32));
                    }
                    goto LABEL_58;
                  case 0x160:
                    v273.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v41);
                    v273.n128_u64[1] = 17;
LABEL_194:
                    v100 = *(_QWORD *)(v46 + 24) & 0xFF00FFFFFFFFFFFFLL;
                    goto LABEL_139;
                  default:
                    goto LABEL_58;
                }
              }
              v98 = *(_QWORD *)(v46 + 32);
              v99 = *(unsigned int *)(v46 + 72) | ((unint64_t)*(unsigned int *)(v46 + 80) << 32);
              v273.n128_u64[0] = *(_QWORD *)(v46 + 24) & 0xFF00FFFFFFFFFFFFLL;
              v273.n128_u64[1] = v99;
              v100 = v98 & 0xFF00FFFFFFFFFFFFLL;
LABEL_139:
              v285[0].n128_u64[0] = v100;
              v285[0].n128_u8[8] = 7;
              v285[0].n128_u32[3] = 0x3FFFFFFF;
              WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>((uint64_t *)&v283 + 1, (uint64_t)&v273, v285, (uint64_t)&v276);
            }
LABEL_58:
            ++v41;
          }
          while (v41 < *(unsigned int *)(v30 + 220));
        }
LABEL_82:
        v61 = *(_QWORD *)(v30 + 200);
        if ((JSC::DFG::operator==((uint64_t)&v282, v61 + 32) & 1) == 0)
          break;
LABEL_83:
        v27 = (v27 + 1);
        v29 = *((unsigned int *)v26 + 15);
        if (v29 > v27)
        {
          while (!*(_QWORD *)(*((_QWORD *)v26 + 6) + 8 * v27))
          {
            if (v29 == ++v27)
            {
              LODWORD(v27) = *((_DWORD *)v26 + 15);
              break;
            }
          }
        }
        if ((_DWORD)v252 == (_DWORD)v27)
        {
          if ((v28 & 1) == 0)
            goto LABEL_146;
          goto LABEL_27;
        }
      }
      WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v61 + 32), (const void **)&v282, v3, v4, v5, v6, (uint64_t)v7, v8);
      *(_QWORD *)(v61 + 48) = v283;
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)(v61 + 56), (_QWORD *)&v283 + 1, v62, v63, v64, v65, v66, v67);
      v68 = *(unsigned int *)(v30 + 220);
      v69 = v68 - 1;
      do
      {
        if (v69 >= v68)
        {
          __break(0xC471u);
          JUMPOUT(0x198454688);
        }
        v70 = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v69--);
      }
      while (*(unsigned __int16 *)(v70 + 18) - 364 > 0xB);
      v71 = 1;
      switch(*(_WORD *)(v70 + 18))
      {
        case 0x16C:
          goto LABEL_94;
        case 0x16D:
          v71 = 2;
          goto LABEL_94;
        case 0x16E:
          v71 = *(_DWORD *)(*(_QWORD *)(v70 + 72) + 12) + 1;
          goto LABEL_186;
        case 0x16F:
          v71 = *(_DWORD *)(*(_QWORD *)(v70 + 72) + 12);
LABEL_186:
          if (!v71)
            goto LABEL_110;
LABEL_94:
          v72 = v71;
          break;
        default:
          goto LABEL_110;
      }
      while (1)
      {
        v73 = v72--;
        v74 = *(unsigned int *)(v30 + 220);
        v75 = v74 - 1;
        do
        {
          if (v75 >= v74)
          {
            __break(0xC471u);
            JUMPOUT(0x198454668);
          }
          v76 = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v75);
          v77 = *(unsigned __int16 *)(v76 + 18);
          --v75;
        }
        while ((v77 - 364) > 0xB);
        if (v77 == 366)
        {
          v79 = *(_QWORD *)(v76 + 72);
          v80 = *(_DWORD *)(v79 + 12);
          if (v80 <= v72)
          {
            if (v80 != v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1984539C4);
            }
          }
          else
          {
            v79 = *(_QWORD *)v79 + 32 * v72;
          }
        }
        else
        {
          if (v77 == 367)
          {
            v213 = *(_QWORD *)(v76 + 72);
            if (*(_DWORD *)(v213 + 12) <= v72)
            {
              __break(0xC471u);
              JUMPOUT(0x198454698);
            }
            v78 = *(_QWORD *)v213 + 8 * v72;
            goto LABEL_106;
          }
          if (v73 == 1)
          {
            v78 = v76 + 72;
            if (v77 != 364)
              v78 = *(_QWORD *)v78;
            goto LABEL_106;
          }
          if (v73 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1984544A4);
          }
          v79 = *(_QWORD *)(v76 + 72);
        }
        v78 = v79 + 16;
LABEL_106:
        JSC::DFG::AvailabilityMap::merge(*(_QWORD **)(*(_QWORD *)v78 + 200), (const JSC::DFG::AvailabilityMap *)&v282);
        if (!v72)
        {
          v68 = *(unsigned int *)(v30 + 220);
LABEL_110:
          v81 = v68 - 1;
          do
          {
            if (v81 >= v68)
            {
              __break(0xC471u);
              JUMPOUT(0x198454690);
            }
            v82 = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v81--);
          }
          while (*(unsigned __int16 *)(v82 + 18) - 364 > 0xB);
          v28 = 1;
          switch(*(_WORD *)(v82 + 18))
          {
            case 0x16C:
              goto LABEL_115;
            case 0x16D:
              v28 = 2;
              goto LABEL_115;
            case 0x16E:
              v28 = *(_DWORD *)(*(_QWORD *)(v82 + 72) + 12) + 1;
              goto LABEL_189;
            case 0x16F:
              v28 = *(_DWORD *)(*(_QWORD *)(v82 + 72) + 12);
LABEL_189:
              if (!v28)
              {
                LOBYTE(v28) = 1;
                goto LABEL_83;
              }
LABEL_115:
              v83 = v28;
              break;
            default:
              goto LABEL_83;
          }
          while (1)
          {
            v84 = v83--;
            v85 = *(unsigned int *)(v30 + 220);
            v86 = v85 - 1;
            do
            {
              if (v86 >= v85)
              {
                __break(0xC471u);
                JUMPOUT(0x198454670);
              }
              v87 = *(_QWORD *)(*(_QWORD *)(v30 + 208) + 8 * v86);
              v88 = *(unsigned __int16 *)(v87 + 18);
              --v86;
            }
            while ((v88 - 364) > 0xB);
            if (v88 == 366)
            {
              v90 = *(_QWORD *)(v87 + 72);
              v95 = *(_DWORD *)(v90 + 12);
              if (v95 <= v83)
              {
                if (v95 != v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984539E8);
                }
              }
              else
              {
                v90 = *(_QWORD *)v90 + 32 * v83;
              }
            }
            else
            {
              if (v88 == 367)
              {
                v214 = *(_QWORD *)(v87 + 72);
                if (*(_DWORD *)(v214 + 12) <= v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984546A0);
                }
                v89 = (_QWORD *)(*(_QWORD *)v214 + 8 * v83);
                goto LABEL_127;
              }
              if (v84 == 1)
              {
                v89 = (_QWORD *)(v87 + 72);
                if (v88 != 364)
                  v89 = (_QWORD *)*v89;
                goto LABEL_127;
              }
              if (v84 != 2)
              {
                __break(0xC471u);
                JUMPOUT(0x1984544C4);
              }
              v90 = *(_QWORD *)(v87 + 72);
            }
            v89 = (_QWORD *)(v90 + 16);
LABEL_127:
            v91 = (_QWORD *)*v89;
            if (!*((_DWORD *)v91 + 55))
            {
              __break(0xC471u);
              JUMPOUT(0x198454678);
            }
            v92 = (uint64_t)v260;
            v93 = v91[25];
            v94 = *(_QWORD *)(*(_QWORD *)v91[26] + 8);
            if ((v94 & 1) != 0)
            {
              v133 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
              if ((v94 & 2) != 0
                || ((v134 = *(unsigned int *)((v94 & 0xFFFFFFFF8) + 8), (_DWORD)v134 != 0x3FFFFFFF)
                  ? (v135 = (_DWORD)v134 == -1)
                  : (v135 = 1),
                    v135))
              {
                v136 = 2;
              }
              else if (v134 >> 28)
              {
                v251 = *(_DWORD *)((v94 & 0xFFFFFFFF8) + 8);
                v220 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v220 = v133;
                *(_DWORD *)(v220 + 8) = v251;
                v136 = 1;
                v133 = v220;
              }
              else
              {
                v136 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
                v133 = v134 << 36;
              }
              v94 = v133 | v136;
            }
            v281 = v94;
            JSC::DFG::AvailabilityMap::pruneByLiveness(v93, v92, &v281, v4, v5, v6, v7);
            if ((v281 & 1) != 0 && (v281 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v281 & 0xFFFFFFFF8, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
            LOBYTE(v28) = 1;
            if (!v83)
              goto LABEL_83;
          }
        }
      }
    }
  }
LABEL_146:
  if (!(BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A)))
    goto LABEL_147;
  v149 = v260;
  v244 = *((unsigned int *)v260 + 15);
  if (!(_DWORD)v244)
    goto LABEL_147;
  v150 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v260 + 6) + 8 * v150))
  {
    if (v244 == ++v150)
      goto LABEL_147;
  }
  if ((_DWORD)v244 == (_DWORD)v150)
    goto LABEL_147;
  LODWORD(v151) = *((_DWORD *)v260 + 15);
  LODWORD(v152) = v150;
  v243 = v260;
  do
  {
    if (v151 <= v152)
    {
      __break(0xC471u);
      JUMPOUT(0x198454738);
    }
    v245 = v152;
    v153 = *(_QWORD *)(*((_QWORD *)v149 + 6) + 8 * v152);
    JSC::DFG::AvailabilityMap::operator=((uint64_t)&v282, *(_QWORD *)(v153 + 200), v3, v4, v5, v6, (uint64_t)v7, v8);
    v154 = *(unsigned int *)(v153 + 220);
    if (!(_DWORD)v154)
      goto LABEL_331;
    v155 = 0;
    v255 = v153;
    do
    {
      v156 = *(_QWORD *)(*(_QWORD *)(v153 + 208) + 8 * v155);
      if (!*(_BYTE *)(v156 + 16))
        goto LABEL_314;
      v157 = *(_QWORD *)(v156 + 8);
      v250 = (WTF *)v156;
      if ((v157 & 1) != 0)
      {
        v207 = *(_QWORD *)(v157 & 0xFFFFFFFF8);
        if ((v157 & 2) != 0
          || ((v208 = *(unsigned int *)((v157 & 0xFFFFFFFF8) + 8), (_DWORD)v208 != 0x3FFFFFFF)
            ? (v209 = (_DWORD)v208 == -1)
            : (v209 = 1),
              v209))
        {
          v218 = 2;
        }
        else if (v208 >> 28)
        {
          v236 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v236 = v207;
          *(_DWORD *)(v236 + 8) = v208;
          v218 = 1;
          v207 = v236;
        }
        else
        {
          v218 = v207;
          v207 = v208 << 36;
        }
        v157 = v207 | v218;
      }
      v285[0].n128_u64[0] = v157;
      v158 = HIDWORD(v282);
      v276 = 0;
      v277 = 0;
      v278 = HIDWORD(v282);
      if (HIDWORD(v282))
      {
        if (HIDWORD(v282) >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198454728);
        }
        v159 = (__int128 *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v282)));
        v277 = v158;
        v276 = v159;
        if (HIDWORD(v282))
        {
          v160 = (__int128 *)v282;
          v161 = 16 * HIDWORD(v282);
          do
          {
            v162 = *v160++;
            *v159++ = v162;
            v161 -= 16;
          }
          while (v161);
        }
      }
      v279 = v283;
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(&v280, (uint64_t *)&v283 + 1);
      v167 = (uint64_t)v260;
      v168 = v157;
      if ((v157 & 1) != 0)
      {
        v210 = *(_QWORD *)(v157 & 0xFFFFFFFF8);
        if ((v157 & 2) != 0
          || ((v211 = *(unsigned int *)((v157 & 0xFFFFFFFF8) + 8), (_DWORD)v211 != 0x3FFFFFFF)
            ? (v212 = (_DWORD)v211 == -1)
            : (v212 = 1),
              v212))
        {
          v219 = 2;
        }
        else if (v211 >> 28)
        {
          v237 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v237 = v210;
          *(_DWORD *)(v237 + 8) = v211;
          v219 = 1;
          v210 = v237;
        }
        else
        {
          v219 = *(_QWORD *)(v157 & 0xFFFFFFFF8);
          v210 = v211 << 36;
        }
        v168 = v210 | v219;
      }
      v275 = v168;
      JSC::DFG::AvailabilityMap::pruneByLiveness((uint64_t)&v276, v167, &v275, v163, v164, v165, v166);
      if ((v275 & 1) != 0 && (v275 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v275 & 0xFFFFFFFF8, v169, v170, v171, v172, v173, v174, v175);
      v176 = v280;
      if (!v280)
      {
        v177 = 0;
        v178 = 0;
LABEL_260:
        v179 = v280 + 32 * v178;
        goto LABEL_261;
      }
      v178 = *(unsigned int *)(v280 - 4);
      v179 = v280 + 32 * v178;
      if (!*(_DWORD *)(v280 - 12))
      {
        v177 = v280 + 32 * v178;
        goto LABEL_260;
      }
      v177 = v280;
      if (!(_DWORD)v178)
        goto LABEL_261;
      v201 = 32 * v178;
      v177 = v280;
      do
      {
        v202 = *(_DWORD *)(v177 + 8);
        if (*(_QWORD *)v177)
        {
          v203 = *(_DWORD *)(v177 + 12);
        }
        else
        {
          v203 = *(_DWORD *)(v177 + 12);
          if (!(v202 | v203))
            goto LABEL_323;
        }
        if (v202)
          v204 = 1;
        else
          v204 = v203 == 0;
        if (v204)
          goto LABEL_261;
LABEL_323:
        v177 += 32;
        v201 -= 32;
      }
      while (v201);
      v177 = v179;
LABEL_261:
      if (v280)
        v180 = v280 + 32 * *(unsigned int *)(v280 - 4);
      else
        v180 = 0;
      if (v180 != v177)
      {
        while (1)
        {
          v181 = *(_OWORD *)(v177 + 16);
          v273 = *(__n128 *)v177;
          v274 = v181;
          if (v273.n128_u32[2] <= 0xD && ((1 << v273.n128_i8[8]) & 0x2306) != 0)
          {
            v183 = BYTE8(v274) == 7 || BYTE8(v274) == 0;
            if (v183 && (unint64_t)v274 <= 1)
            {
              v238 = (WTF *)WTF::dataLogLn<char [50],JSC::DFG::PromotedHeapLocation>(&v273);
              v239 = (WTF::PrintStream *)WTF::dataFile(v238);
              JSC::DFG::AvailabilityMap::dump((JSC::DFG::AvailabilityMap *)&v276, v239);
              __break(0xC471u);
              JUMPOUT(0x198454710);
            }
          }
          v184 = v177 + 32;
          v177 = v179;
          if (v184 != v179)
            break;
LABEL_285:
          if (v177 == v180)
            goto LABEL_286;
        }
        v177 = v184;
        while (2)
        {
          v185 = *(_DWORD *)(v177 + 8);
          if (*(_QWORD *)v177)
          {
            v186 = *(_DWORD *)(v177 + 12);
          }
          else
          {
            v186 = *(_DWORD *)(v177 + 12);
            if (!(v185 | v186))
              goto LABEL_278;
          }
          if (v185)
            v187 = 1;
          else
            v187 = v186 == 0;
          if (v187)
            goto LABEL_285;
LABEL_278:
          v177 += 32;
          if (v177 == v179)
          {
            v177 = v179;
            goto LABEL_285;
          }
          continue;
        }
      }
LABEL_286:
      if (*(_DWORD *)(*((_QWORD *)v260 + 3) + 16) != 5 && v278 != 0)
      {
        v189 = 0;
        v190 = 0;
        v191 = -1;
        do
        {
          if (v190 < v279)
          {
            v193 = v190 + 5;
            v194 = (v190 + 5) >> 31;
          }
          else
          {
            v192 = HIDWORD(v279) + (unint64_t)v279;
            v193 = v190 - (v279 + HIDWORD(v279));
            LODWORD(v194) = (v191 + v279) >> 31;
            if (v192 > v190)
              v194 = v194;
            else
              v194 = 2;
            if (v192 > v190)
              v193 = v279 + ~(_DWORD)v190;
          }
          v169 = (void *)(v193 | (unint64_t)(v194 << 32));
          v273.n128_u64[0] = (unint64_t)v169;
          v195 = BYTE8(v276[v189]);
          v196 = v195 == 7 || v195 == 0;
          if (v196 && *(_QWORD *)&v276[v189] <= 1uLL)
          {
            v197 = (uint64_t)v260;
            v198 = v157;
            if ((v157 & 1) != 0)
            {
              v241 = v169;
              v242 = *(_QWORD *)(v157 & 0xFFFFFFFF8);
              if ((v157 & 2) != 0 || (v205 = *(_DWORD *)((v157 & 0xFFFFFFFF8) + 8), v205 == 0x3FFFFFFF) || v205 == -1)
              {
                v206 = 2;
              }
              else
              {
                v240 = *(unsigned int *)((v157 & 0xFFFFFFFF8) + 8);
                if (v205 >> 28)
                {
                  v235 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v235 = v242;
                  *(_DWORD *)(v235 + 8) = v240;
                  v206 = 1;
                  v242 = v235;
                }
                else
                {
                  v206 = *(_QWORD *)(v157 & 0xFFFFFFFF8);
                  v242 = v240 << 36;
                }
              }
              v169 = v241;
              v198 = v242 | v206;
            }
            v272 = v198;
            isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode(v197, (unint64_t)v169, &v272, v171, v172, v173, v174, v175);
            if ((v272 & 1) != 0 && (v272 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v272 & 0xFFFFFFFF8, v169, v170, v171, v172, v173, v174, v175);
              if ((isLiveInBytecode & 1) != 0)
              {
LABEL_389:
                v221 = v260;
                v222 = *((unsigned int *)v260 + 15);
                if ((_DWORD)v222)
                {
                  v223 = 0;
                  while (!*(_QWORD *)(*((_QWORD *)v260 + 6) + 8 * v223))
                  {
                    if (v222 == ++v223)
                      goto LABEL_404;
                  }
                  if ((_DWORD)v222 != (_DWORD)v223)
                  {
                    v224 = v223;
                    v225 = *((unsigned int *)v260 + 15);
                    do
                    {
                      if (v225 <= v224)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198454718);
                      }
                      v226 = *(_QWORD *)(*((_QWORD *)v221 + 6) + 8 * v224);
                      WTF::dataLog<char [8],unsigned int,char [2]>((_DWORD *)(v226 + 8));
                      WTF::dataLog<char [23],JSC::DFG::AvailabilityMap,char [2]>("Availability at head: ", *(_QWORD *)(v226 + 200));
                      WTF::dataLog<char [23],JSC::DFG::AvailabilityMap,char [2]>("Availability at tail: ", *(_QWORD *)(v226 + 200) + 32);
                      WTF::dataLog<char [16]>("\n");
                      ++v224;
                      v225 = *((unsigned int *)v221 + 15);
                      if (v225 > v224)
                      {
                        while (!*(_QWORD *)(*((_QWORD *)v221 + 6) + 8 * v224))
                        {
                          if (v225 == ++v224)
                          {
                            v224 = *((unsigned int *)v221 + 15);
                            goto LABEL_402;
                          }
                        }
                        v224 = v224;
                      }
LABEL_402:
                      ;
                    }
                    while (v222 != v224);
                    v221 = v260;
                  }
                }
LABEL_404:
                WTF::toCString<char [46],JSC::Operand,char [21],JSC::DFG::AvailabilityMap,char [12],JSC::CodeOrigin>(&v271, (int *)&v273, (uint64_t)&v276, (JSC::CodeOrigin *)v285);
                if (v271)
                  v227 = (const char *)(v271 + 16);
                else
                  v227 = 0;
                JSC::DFG::Graph::logAssertionFailure(v221, v250, (const WTF::CString *)"./dfg/DFGOSRAvailabilityAnalysisPhase.cpp", (const char *)0xB5, "BOOL JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)]", v227);
                WTF::CString::~CString((WTF::CString *)&v271, v228, v229, v230, v231, v232, v233, v234);
                __break(0xC471u);
                JUMPOUT(0x19845461CLL);
              }
            }
            else if (isLiveInBytecode)
            {
              goto LABEL_389;
            }
          }
          ++v190;
          --v191;
          ++v189;
        }
        while (v190 < v278);
        v176 = v280;
      }
      if (v176)
        WTF::fastFree(v176 - 16, v169, v170, v171, v172, v173, v174, v175);
      v200 = (unint64_t)v276;
      v153 = v255;
      if (v276)
      {
        v276 = 0;
        v277 = 0;
        WTF::fastFree(v200, v169, v170, v171, v172, v173, v174, v175);
      }
      if ((v285[0].n128_u8[0] & 1) != 0 && (v285[0].n128_u64[0] & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v285[0].n128_u64[0] & 0xFFFFFFFF8, v169, v170, v171, v172, v173, v174, v175);
      v154 = *(unsigned int *)(v255 + 220);
LABEL_314:
      if (v155 >= v154)
      {
        __break(0xC471u);
        JUMPOUT(0x198454720);
      }
      JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)&v282, *(JSC::DFG::Node **)(*(_QWORD *)(v153 + 208) + 8 * v155++));
      v154 = *(unsigned int *)(v153 + 220);
    }
    while (v155 < v154);
LABEL_331:
    v152 = (v245 + 1);
    v149 = v243;
    v151 = *((unsigned int *)v243 + 15);
    if (v151 > v152)
    {
      while (!*(_QWORD *)(*((_QWORD *)v243 + 6) + 8 * v152))
      {
        if (v151 == ++v152)
        {
          LODWORD(v152) = *((_DWORD *)v243 + 15);
          break;
        }
      }
    }
  }
  while ((_DWORD)v244 != (_DWORD)v152);
LABEL_147:
  if (*((_QWORD *)&v283 + 1))
    WTF::fastFree(*((_QWORD *)&v283 + 1) - 16, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
  v102 = v282;
  if ((_QWORD)v282)
  {
    *(_QWORD *)&v282 = 0;
    DWORD2(v282) = 0;
    WTF::fastFree(v102, v2, v3, v4, v5, v6, (uint64_t)v7, v8);
  }
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v103 = (*(_DWORD *)(*((_QWORD *)v260 + 3) + 16) & 0xFFFFFFFE) == 4) : (v103 = 0),
        !v103 ? (v104 = BYTE2(qword_1ECF4C32A) == 0) : (v104 = 0),
        !v104))
  {
    v282 = v261;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v260 + 1088, "Phase ", (uint64_t)&v282, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v268);
  if (HIBYTE(qword_1ECF4C32A) && !v262)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v256, (uint64_t)v105, v106, v107, v108, v109, v110, v111);
  v112 = v263;
  v263 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 1)
      WTF::fastFree((unint64_t)v112, v105, v106, v107, v108, v109, v110, v111);
    else
      --*(_DWORD *)v112;
  }
  return 1;
}

void JSC::DFG::validateOSRExitAvailability(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN *__ptr32 *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::DFG *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  JSC::DFG *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  WTF **v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  void *v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  void *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 *v117;
  __int128 v118;
  uint64_t v119;
  __int128 *v120;
  __int128 v121;
  JSC::DFG *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  __int128 *v130;
  uint64_t v131;
  __int128 v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  WTF *v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  WTF *v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  unint64_t StatusReg;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  JSC::DFG::Node *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *casual;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 *v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _UNKNOWN *__ptr32 *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  BOOL v218;
  uint64_t v219;
  int v220;
  int v221;
  BOOL v222;
  uint64_t v224;
  unint64_t v225;
  int v226;
  unint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  BOOL v232;
  uint64_t v233;
  unint64_t v234;
  int isLiveInBytecode;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  BOOL v244;
  uint64_t v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  BOOL v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unint64_t *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  WTF *v262;
  WTF *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  JSC::DFG *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  WTF *v287;
  WTF::PrintStream *v288;
  uint64_t v289;
  int v290;
  JSC::DFG *v291;
  uint64_t v292;
  int v293;
  JSC::DFG::Node *v294;
  JSC::DFG::Node *v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WTF *v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  JSC::DFG *v306;
  const char *v307;
  uint64_t v308;
  char v309;
  WTF *v310;
  WTF ***v311;
  WTF ***v312;
  WTF **v313;
  WTF **v314;
  WTF *v315;
  uint64_t v316;
  WTF *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  _OWORD *v324;
  int v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  JSC::DFG *v333;

  v317 = 0;
  v318 = 0;
  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    if (v3 <= 0x10)
      v4 = 16;
    else
      v4 = *((unsigned int *)this + 15);
    WTF::Vector<JSC::DFG::AvailabilityMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v317, v4);
    if (v317 && HIDWORD(v318) != (_DWORD)v3)
      bzero((char *)v317 + 32 * HIDWORD(v318), ((32 * v3 - 32 * HIDWORD(v318) - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
    v5 = *((unsigned int *)this + 15);
    HIDWORD(v318) = v3;
    v315 = 0;
    v316 = 0;
    if ((_DWORD)v5)
    {
      v6 = v5 <= 0x10 ? 16 : v5;
      WTF::Vector<JSC::DFG::AvailabilityMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v315, v6);
      if (v315)
      {
        if (HIDWORD(v316) != (_DWORD)v5)
          bzero((char *)v315 + 32 * HIDWORD(v316), ((32 * v5 - 32 * HIDWORD(v316) - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
    v315 = 0;
    v316 = 0;
  }
  HIDWORD(v316) = v5;
  v7 = *((unsigned int *)this + 15);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v8))
    {
      if (v7 == ++v8)
        goto LABEL_22;
    }
    if ((_DWORD)v7 != (_DWORD)v8)
    {
      LODWORD(v124) = *((_DWORD *)this + 15);
      do
      {
        if (v124 <= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x198455EB0);
        }
        v125 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v8);
        v126 = *(_QWORD *)(v125 + 200);
        v127 = *(unsigned int *)(v126 + 12);
        v301 = 0;
        v302 = 0;
        v303 = v127;
        if ((_DWORD)v127)
        {
          if (v127 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x198455EB8);
          }
          v128 = (WTF *)WTF::fastMalloc((WTF *)(16 * v127));
          v302 = v127;
          v301 = v128;
          v129 = *(unsigned int *)(v126 + 12);
          if ((_DWORD)v129)
          {
            v130 = *(__int128 **)v126;
            v131 = 16 * v129;
            do
            {
              v132 = *v130++;
              *(_OWORD *)v128 = v132;
              v128 = (WTF *)((char *)v128 + 16);
              v131 -= 16;
            }
            while (v131);
          }
        }
        v304 = *(_QWORD *)(v126 + 16);
        WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(&v305, (uint64_t *)(v126 + 24));
        v140 = *(unsigned int *)(v125 + 8);
        if (HIDWORD(v318) <= v140)
        {
          __break(0xC471u);
          JUMPOUT(0x198455EC0);
        }
        v141 = (char *)v317 + 32 * v140;
        v142 = *(_QWORD *)v141;
        if (*(_QWORD *)v141)
        {
          *(_QWORD *)v141 = 0;
          *((_DWORD *)v141 + 2) = 0;
          WTF::fastFree(v142, v133, v134, v135, v136, v137, v138, v139);
        }
        v143 = v301;
        v301 = 0;
        *(_QWORD *)v141 = v143;
        LODWORD(v143) = v302;
        v302 = 0;
        *((_DWORD *)v141 + 2) = (_DWORD)v143;
        LODWORD(v143) = v303;
        v303 = 0;
        *((_DWORD *)v141 + 3) = (_DWORD)v143;
        *((_QWORD *)v141 + 2) = v304;
        v144 = v305;
        v305 = 0;
        v145 = *((_QWORD *)v141 + 3);
        *((_QWORD *)v141 + 3) = v144;
        if (v145)
          WTF::fastFree(v145 - 16, v133, v134, v135, v136, v137, v138, v139);
        if (v305)
          WTF::fastFree(v305 - 16, v133, v134, v135, v136, v137, v138, v139);
        v146 = v301;
        if (v301)
        {
          v301 = 0;
          v302 = 0;
          WTF::fastFree((unint64_t)v146, v133, v134, v135, v136, v137, v138, v139);
        }
        v147 = *(_QWORD *)(v125 + 200);
        v148 = *(unsigned int *)(v147 + 44);
        v301 = 0;
        v302 = 0;
        v303 = v148;
        if ((_DWORD)v148)
        {
          if (v148 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x198455EC8);
          }
          v149 = (WTF *)WTF::fastMalloc((WTF *)(16 * v148));
          v302 = v148;
          v301 = v149;
          v150 = *(unsigned int *)(v147 + 44);
          if ((_DWORD)v150)
          {
            v151 = *(__int128 **)(v147 + 32);
            v152 = 16 * v150;
            do
            {
              v153 = *v151++;
              *(_OWORD *)v149 = v153;
              v149 = (WTF *)((char *)v149 + 16);
              v152 -= 16;
            }
            while (v152);
          }
        }
        v304 = *(_QWORD *)(v147 + 48);
        WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(&v305, (uint64_t *)(v147 + 56));
        v161 = *(unsigned int *)(v125 + 8);
        if (HIDWORD(v316) <= v161)
        {
          __break(0xC471u);
          JUMPOUT(0x198455ED0);
        }
        v162 = (char *)v315 + 32 * v161;
        v163 = *(_QWORD *)v162;
        if (*(_QWORD *)v162)
        {
          *(_QWORD *)v162 = 0;
          *((_DWORD *)v162 + 2) = 0;
          WTF::fastFree(v163, v154, v155, v156, v157, v158, v159, v160);
        }
        v164 = v301;
        v301 = 0;
        *(_QWORD *)v162 = v164;
        LODWORD(v164) = v302;
        v302 = 0;
        *((_DWORD *)v162 + 2) = (_DWORD)v164;
        LODWORD(v164) = v303;
        v303 = 0;
        *((_DWORD *)v162 + 3) = (_DWORD)v164;
        *((_QWORD *)v162 + 2) = v304;
        v165 = v305;
        v305 = 0;
        v166 = *((_QWORD *)v162 + 3);
        *((_QWORD *)v162 + 3) = v165;
        if (v166)
          WTF::fastFree(v166 - 16, v154, v155, v156, v157, v158, v159, v160);
        if (v305)
          WTF::fastFree(v305 - 16, v154, v155, v156, v157, v158, v159, v160);
        v167 = v301;
        if (v301)
        {
          v301 = 0;
          v302 = 0;
          WTF::fastFree((unint64_t)v167, v154, v155, v156, v157, v158, v159, v160);
        }
        v8 = (v8 + 1);
        v124 = *((unsigned int *)this + 15);
        if (v124 > v8)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v8))
          {
            if (v124 == ++v8)
            {
              LODWORD(v8) = *((_DWORD *)this + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v7 != (_DWORD)v8);
    }
  }
LABEL_22:
  v314 = &v317;
  v313 = &v315;
  v301 = (WTF *)-1;
  v302 = -1;
  v304 = 0;
  LOWORD(v305) = 256;
  v306 = this;
  v307 = "OSR availability analysis";
  v308 = 26;
  v309 = 0;
  v310 = 0;
  JSC::DFG::Phase::beginPhase(&v301);
  v311 = &v314;
  v312 = &v313;
  v16 = *((_DWORD *)v306 + 15);
  if (!v16)
    goto LABEL_476;
  v17 = v16 - 1;
  v18 = 8 * (v16 - 1);
  do
  {
    if (*((_DWORD *)v306 + 15) <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198455E90);
    }
    v19 = *(_QWORD *)(*((_QWORD *)v306 + 6) + v18);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 + 8);
      if (*((_DWORD *)*v311 + 3) <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198455EA0);
      }
      JSC::DFG::AvailabilityMap::clear((WTF *)((char *)**v311 + 32 * v20), v9, v10, v11, v12, v13, (uint64_t)v14, v15);
      v28 = *(unsigned int *)(v19 + 8);
      if (*((_DWORD *)*v312 + 3) <= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x198455EA8);
      }
      JSC::DFG::AvailabilityMap::clear((WTF *)((char *)**v312 + 32 * v28), v21, v22, v23, v24, v25, v26, v27);
    }
    v18 -= 8;
    --v17;
  }
  while (v17 != -1);
  v29 = v306;
  if (!*((_DWORD *)v306 + 15))
  {
LABEL_476:
    __break(0xC471u);
    JUMPOUT(0x198455EF8);
  }
  v30 = **((_QWORD **)v306 + 6);
  v31 = *(unsigned int *)(v30 + 8);
  if (*((_DWORD *)*v311 + 3) <= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x198455F00);
  }
  v32 = (uint64_t)**v311 + 32 * v31;
  if (*(_DWORD *)(v32 + 12))
  {
    v33 = 0;
    do
      *(_OWORD *)(*(_QWORD *)v32 + 16 * v33++) = xmmword_199154D50;
    while (v33 < *(unsigned int *)(v32 + 12));
    v29 = v306;
    if (!*((_DWORD *)v306 + 15))
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x198454A60);
    }
  }
  v34 = 0;
  v35 = 0x500000006;
  v36 = -1;
  while (++v36 < (unint64_t)*(unsigned int *)(**((_QWORD **)v29 + 6) + 136))
  {
    v37 = *(unsigned int *)(v30 + 8);
    if (*((_DWORD *)*v311 + 3) <= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198455E98);
    }
    v38 = (_QWORD *)(*((_QWORD *)**v311 + 4 * v37) + v34);
    *v38 = 1;
    v38[1] = v35;
    v35 += 0x100000000;
    v34 += 16;
    v29 = v306;
    if (!*((_DWORD *)v306 + 15))
      goto LABEL_40;
  }
  v331 = 0u;
  v332 = 0u;
  v333 = v29;
  do
  {
    v39 = v306;
    v40 = *((unsigned int *)v306 + 15);
    if (!(_DWORD)v40)
      break;
    v41 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v306 + 6) + 8 * v41))
    {
      if (v40 == ++v41)
        goto LABEL_195;
    }
    if ((_DWORD)v40 == (_DWORD)v41)
      break;
    LOBYTE(v42) = 0;
    LODWORD(v43) = *((_DWORD *)v306 + 15);
    do
    {
      if (v43 <= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x198455E50);
      }
      v44 = *(_QWORD *)(*((_QWORD *)v39 + 6) + 8 * v41);
      v45 = *(unsigned int *)(v44 + 8);
      if (*((_DWORD *)*v311 + 3) <= v45)
      {
        __break(0xC471u);
        JUMPOUT(0x198455E58);
      }
      v46 = (uint64_t)**v311 + 32 * v45;
      if ((__int128 *)v46 != &v331)
      {
        v47 = *(unsigned int *)(v46 + 12);
        if (HIDWORD(v331) > v47)
        {
          HIDWORD(v331) = *(_DWORD *)(v46 + 12);
        }
        else
        {
          v48 = DWORD2(v331);
          if (v47 > DWORD2(v331))
          {
            if (DWORD2(v331))
            {
              if (HIDWORD(v331))
                HIDWORD(v331) = 0;
              v114 = v331;
              if ((_QWORD)v331)
              {
                *(_QWORD *)&v331 = 0;
                DWORD2(v331) = 0;
                WTF::fastFree(v114, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
                v48 = DWORD2(v331);
              }
            }
            v104 = *(unsigned int *)(v46 + 12);
            if (v48 < v104)
            {
              if (v104 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x198455EE8);
              }
              v105 = v331;
              v106 = HIDWORD(v331);
              v107 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v104));
              DWORD2(v331) = v104;
              *(_QWORD *)&v331 = v107;
              if ((_DWORD)v106)
              {
                v116 = 16 * v106;
                v117 = (__int128 *)v105;
                do
                {
                  v118 = *v117++;
                  *v107++ = v118;
                  v116 -= 16;
                }
                while (v116);
              }
              if (v105)
              {
                if ((_QWORD)v331 == v105)
                {
                  *(_QWORD *)&v331 = 0;
                  DWORD2(v331) = 0;
                }
                WTF::fastFree(v105, v108, v10, v11, v12, v13, (uint64_t)v14, v15);
              }
            }
          }
          v47 = HIDWORD(v331);
        }
        v49 = v331;
        if (v47)
        {
          memmove((void *)v331, *(const void **)v46, 16 * v47);
          v50 = HIDWORD(v331);
          v49 = v331;
        }
        else
        {
          v50 = 0;
        }
        v51 = *(unsigned int *)(v46 + 12);
        if (v50 != v51)
        {
          v52 = (_OWORD *)(v49 + 16 * v50);
          v53 = (__int128 *)(*(_QWORD *)v46 + 16 * v50);
          v54 = 16 * v51 - 16 * v50;
          do
          {
            v55 = *v53++;
            *v52++ = v55;
            v54 -= 16;
          }
          while (v54);
          LODWORD(v50) = *(_DWORD *)(v46 + 12);
        }
        HIDWORD(v331) = v50;
      }
      *(_QWORD *)&v332 = *(_QWORD *)(v46 + 16);
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v332 + 1, (_QWORD *)(v46 + 24), v10, v11, v12, v13, (uint64_t)v14, v15);
      if (*(_DWORD *)(v44 + 220))
      {
        v56 = 0;
        do
          JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)&v331, *(JSC::DFG::Node **)(*(_QWORD *)(v44 + 208) + 8 * v56++));
        while (v56 < *(unsigned int *)(v44 + 220));
      }
      v57 = *v312;
      v58 = *(unsigned int *)(v44 + 8);
      if (*((_DWORD *)*v312 + 3) <= v58)
      {
        __break(0xC471u);
        JUMPOUT(0x198455E60);
      }
      v59 = *v57;
      v60 = (uint64_t)*v57 + 32 * v58;
      if ((JSC::DFG::operator==((uint64_t)&v331, v60) & 1) == 0)
      {
        if (&v331 != (__int128 *)v60)
        {
          v61 = HIDWORD(v331);
          if (*(unsigned int *)(v60 + 12) > (unint64_t)HIDWORD(v331))
          {
            *(_DWORD *)(v60 + 12) = HIDWORD(v331);
          }
          else
          {
            v62 = *(unsigned int *)(v60 + 8);
            if (HIDWORD(v331) > v62)
            {
              if (*(_DWORD *)(v60 + 8))
              {
                if (*(_DWORD *)(v60 + 12))
                  *(_DWORD *)(v60 + 12) = 0;
                v115 = *(_QWORD *)v60;
                if (*(_QWORD *)v60)
                {
                  *(_QWORD *)v60 = 0;
                  *(_DWORD *)(v60 + 8) = 0;
                  WTF::fastFree(v115, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
                  v62 = *(unsigned int *)(v60 + 8);
                }
              }
              v109 = HIDWORD(v331);
              if (v62 < HIDWORD(v331))
              {
                v299 = v40;
                if ((unint64_t)HIDWORD(v331) >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198455EF0);
                }
                v110 = *(_QWORD *)v60;
                v111 = *(unsigned int *)(v60 + 12);
                v112 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v331)));
                *(_DWORD *)(v60 + 8) = v109;
                *(_QWORD *)v60 = v112;
                if ((_DWORD)v111)
                {
                  v119 = 16 * v111;
                  v120 = (__int128 *)v110;
                  do
                  {
                    v121 = *v120++;
                    *v112++ = v121;
                    v119 -= 16;
                  }
                  while (v119);
                }
                v40 = v299;
                if (v110)
                {
                  if (*(_QWORD *)v60 == v110)
                  {
                    *(_QWORD *)v60 = 0;
                    *(_DWORD *)(v60 + 8) = 0;
                  }
                  WTF::fastFree(v110, v113, v10, v11, v12, v13, (uint64_t)v14, v15);
                }
              }
            }
            v61 = *(unsigned int *)(v60 + 12);
          }
          v63 = *(char **)v60;
          if (v61)
          {
            memmove(v63, (const void *)v331, 16 * v61);
            v64 = *(unsigned int *)(v60 + 12);
            v63 = *(char **)v60;
          }
          else
          {
            v64 = 0;
          }
          if (v64 != HIDWORD(v331))
          {
            v65 = &v63[16 * v64];
            v66 = (__int128 *)(v331 + 16 * v64);
            v67 = 16 * HIDWORD(v331) - 16 * v64;
            do
            {
              v68 = *v66++;
              *(_OWORD *)v65 = v68;
              v65 += 16;
              v67 -= 16;
            }
            while (v67);
            LODWORD(v64) = HIDWORD(v331);
          }
          *(_DWORD *)(v60 + 12) = v64;
        }
        *(_QWORD *)(v60 + 16) = v332;
        WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)v59 + 4 * v58 + 3, (_QWORD *)&v332 + 1, v10, v11, v12, v13, (uint64_t)v14, v15);
        v69 = *(unsigned int *)(v44 + 220);
        v70 = v69 - 1;
        do
        {
          if (v70 >= v69)
          {
            __break(0xC471u);
            JUMPOUT(0x198455E80);
          }
          v71 = *(_QWORD *)(*(_QWORD *)(v44 + 208) + 8 * v70--);
        }
        while (*(unsigned __int16 *)(v71 + 18) - 364 > 0xB);
        v72 = 1;
        switch(*(_WORD *)(v71 + 18))
        {
          case 0x16C:
            goto LABEL_85;
          case 0x16D:
            v72 = 2;
            goto LABEL_85;
          case 0x16E:
            v72 = *(_DWORD *)(*(_QWORD *)(v71 + 72) + 12) + 1;
            if (*(_DWORD *)(*(_QWORD *)(v71 + 72) + 12) == -1)
              goto LABEL_106;
            goto LABEL_85;
          case 0x16F:
            v72 = *(_DWORD *)(*(_QWORD *)(v71 + 72) + 12);
            if (!v72)
              goto LABEL_106;
LABEL_85:
            v73 = v72;
            break;
          default:
            goto LABEL_106;
        }
        while (2)
        {
          v74 = v73 - 1;
          v75 = *(unsigned int *)(v44 + 220);
          v76 = v75 - 1;
          do
          {
            if (v76 >= v75)
            {
              __break(0xC471u);
              JUMPOUT(0x198455DF4);
            }
            v77 = *(_QWORD *)(*(_QWORD *)(v44 + 208) + 8 * v76);
            v78 = *(unsigned __int16 *)(v77 + 18);
            --v76;
          }
          while ((v78 - 364) > 0xB);
          if (v78 == 366)
          {
            v80 = *(_QWORD *)(v77 + 72);
            v81 = *(_DWORD *)(v80 + 12);
            if (v81 <= v74)
            {
              if (v81 != (_DWORD)v74)
              {
                __break(0xC471u);
                JUMPOUT(0x198455BF8);
              }
            }
            else
            {
              v80 = *(_QWORD *)v80 + 32 * v74;
            }
            goto LABEL_98;
          }
          if (v78 != 367)
          {
            if ((_DWORD)v73 == 1)
            {
              v79 = v77 + 72;
              if (v78 != 364)
                v79 = *(_QWORD *)v79;
              goto LABEL_99;
            }
            if ((_DWORD)v73 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198455DACLL);
            }
            v80 = *(_QWORD *)(v77 + 72);
LABEL_98:
            v79 = v80 + 16;
            goto LABEL_99;
          }
          v83 = *(_QWORD *)(v77 + 72);
          if (*(_DWORD *)(v83 + 12) <= v74)
          {
            __break(0xC471u);
            JUMPOUT(0x198455E68);
          }
          v79 = *(_QWORD *)v83 + 8 * v74;
LABEL_99:
          v82 = *(unsigned int *)(*(_QWORD *)v79 + 8);
          if (*((_DWORD *)*v311 + 3) <= v82)
          {
            __break(0xC471u);
            JUMPOUT(0x198455DD4);
          }
          JSC::DFG::AvailabilityMap::merge((_QWORD *)**v311 + 4 * v82, (const JSC::DFG::AvailabilityMap *)&v331);
          v73 = v74;
          if ((_DWORD)v74)
            continue;
          break;
        }
        v69 = *(unsigned int *)(v44 + 220);
LABEL_106:
        v84 = v69 - 1;
        do
        {
          if (v84 >= v69)
          {
            __break(0xC471u);
            JUMPOUT(0x198455E88);
          }
          v85 = *(_QWORD *)(*(_QWORD *)(v44 + 208) + 8 * v84--);
        }
        while (*(unsigned __int16 *)(v85 + 18) - 364 > 0xB);
        LODWORD(v42) = 1;
        switch(*(_WORD *)(v85 + 18))
        {
          case 0x16C:
            goto LABEL_111;
          case 0x16D:
            LODWORD(v42) = 2;
            goto LABEL_111;
          case 0x16E:
            LODWORD(v42) = *(_DWORD *)(*(_QWORD *)(v85 + 72) + 12) + 1;
            goto LABEL_171;
          case 0x16F:
            LODWORD(v42) = *(_DWORD *)(*(_QWORD *)(v85 + 72) + 12);
LABEL_171:
            if (!(_DWORD)v42)
              goto LABEL_172;
LABEL_111:
            v42 = v42;
            break;
          default:
            goto LABEL_173;
        }
        while (2)
        {
          v86 = v42--;
          v87 = *(unsigned int *)(v44 + 220);
          v88 = v87 - 1;
          do
          {
            if (v88 >= v87)
            {
              __break(0xC471u);
              JUMPOUT(0x198455DDCLL);
            }
            v89 = *(_QWORD *)(*(_QWORD *)(v44 + 208) + 8 * v88);
            v90 = *(unsigned __int16 *)(v89 + 18);
            --v88;
          }
          while ((v90 - 364) > 0xB);
          if (v90 == 366)
          {
            v92 = *(_QWORD *)(v89 + 72);
            v93 = *(_DWORD *)(v92 + 12);
            if (v93 <= v42)
            {
              if (v93 != (_DWORD)v42)
              {
                __break(0xC471u);
                JUMPOUT(0x198455C18);
              }
            }
            else
            {
              v92 = *(_QWORD *)v92 + 32 * v42;
            }
          }
          else
          {
            if (v90 == 367)
            {
              v103 = *(_QWORD *)(v89 + 72);
              if (*(_DWORD *)(v103 + 12) <= v42)
              {
                __break(0xC471u);
                JUMPOUT(0x198455E70);
              }
              v91 = (_QWORD *)(*(_QWORD *)v103 + 8 * v42);
LABEL_125:
              v94 = (_QWORD *)*v91;
              v95 = *((unsigned int *)v94 + 2);
              if (*((_DWORD *)*v311 + 3) <= v95)
              {
                __break(0xC471u);
                JUMPOUT(0x198455DE4);
              }
              if (!*((_DWORD *)v94 + 55))
              {
                __break(0xC471u);
                JUMPOUT(0x198455DECLL);
              }
              v96 = **v311;
              v97 = (uint64_t)v306;
              v98 = *(_QWORD *)(*(_QWORD *)v94[26] + 8);
              if ((v98 & 1) != 0)
              {
                v99 = *(_QWORD *)(v98 & 0xFFFFFFFF8);
                if ((v98 & 2) != 0
                  || ((v100 = *(unsigned int *)((v98 & 0xFFFFFFFF8) + 8), (_DWORD)v100 != 0x3FFFFFFF)
                    ? (v101 = (_DWORD)v100 == -1)
                    : (v101 = 1),
                      v101))
                {
                  v102 = 2;
                }
                else if (v100 >> 28)
                {
                  v298 = *(_QWORD *)(v98 & 0xFFFFFFFF8);
                  v99 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v99 = v298;
                  *(_DWORD *)(v99 + 8) = v100;
                  v102 = 1;
                }
                else
                {
                  v102 = *(_QWORD *)(v98 & 0xFFFFFFFF8);
                  v99 = v100 << 36;
                }
                v98 = v99 | v102;
              }
              v330 = v98;
              JSC::DFG::AvailabilityMap::pruneByLiveness((uint64_t)v96 + 32 * v95, v97, &v330, v11, v12, v13, v14);
              if ((v330 & 1) != 0 && (v330 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v330 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
              if (!(_DWORD)v42)
              {
LABEL_172:
                LOBYTE(v42) = 1;
                goto LABEL_173;
              }
              continue;
            }
            if (v86 == 1)
            {
              v91 = (_QWORD *)(v89 + 72);
              if (v90 != 364)
                v91 = (_QWORD *)*v91;
              goto LABEL_125;
            }
            if (v86 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198455DCCLL);
            }
            v92 = *(_QWORD *)(v89 + 72);
          }
          break;
        }
        v91 = (_QWORD *)(v92 + 16);
        goto LABEL_125;
      }
LABEL_173:
      v41 = (v41 + 1);
      v43 = *((unsigned int *)v39 + 15);
      if (v43 > v41)
      {
        while (!*(_QWORD *)(*((_QWORD *)v39 + 6) + 8 * v41))
        {
          if (v43 == ++v41)
          {
            LODWORD(v41) = *((_DWORD *)v39 + 15);
            break;
          }
        }
      }
    }
    while ((_DWORD)v40 != (_DWORD)v41);
  }
  while ((v42 & 1) != 0);
LABEL_195:
  if (!(BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A)))
    goto LABEL_390;
  v122 = v306;
  v292 = *((unsigned int *)v306 + 15);
  if (!(_DWORD)v292)
    goto LABEL_390;
  v123 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v306 + 6) + 8 * v123))
  {
    if (v292 == ++v123)
      goto LABEL_390;
  }
  if ((_DWORD)v292 == (_DWORD)v123)
    goto LABEL_390;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  LODWORD(v169) = v292;
  LODWORD(v170) = v123;
  v291 = v306;
  v296 = StatusReg;
  do
  {
    if (v169 <= v170)
    {
      __break(0xC471u);
      JUMPOUT(0x198455ED8);
    }
    v293 = v170;
    v171 = *(_QWORD *)(*((_QWORD *)v122 + 6) + 8 * v170);
    v172 = *(unsigned int *)(v171 + 8);
    if (*((_DWORD *)*v311 + 3) <= v172)
    {
      __break(0xC471u);
      JUMPOUT(0x198455EE0);
    }
    v173 = (uint64_t)**v311 + 32 * v172;
    WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)&v331, (const void **)v173, v10, v11, v12, v13, (uint64_t)v14, v15);
    *(_QWORD *)&v332 = *(_QWORD *)(v173 + 16);
    WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v332 + 1, (_QWORD *)(v173 + 24), v174, v175, v176, v177, v178, v179);
    v180 = *(unsigned int *)(v171 + 220);
    if (!(_DWORD)v180)
      goto LABEL_385;
    v181 = 0;
    v300 = v171;
    do
    {
      v182 = *(JSC::DFG::Node **)(*(_QWORD *)(v171 + 208) + 8 * v181);
      if (!*((_BYTE *)v182 + 16))
        goto LABEL_332;
      v183 = *((_QWORD *)v182 + 1);
      if ((v183 & 1) != 0)
      {
        v245 = *(_QWORD *)(v183 & 0xFFFFFFFF8);
        if ((v183 & 2) != 0
          || ((v246 = *(unsigned int *)((v183 & 0xFFFFFFFF8) + 8), (_DWORD)v246 != 0x3FFFFFFF)
            ? (v247 = (_DWORD)v246 == -1)
            : (v247 = 1),
              v247))
        {
          v248 = 2;
        }
        else if (v246 >> 28)
        {
          v259 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v259 = v245;
          *(_DWORD *)(v259 + 8) = v246;
          v248 = 1;
          v245 = v259;
        }
        else
        {
          v248 = v245;
          v245 = v246 << 36;
        }
        v183 = v245 | v248;
        v171 = v300;
      }
      v329 = v183;
      v184 = HIDWORD(v331);
      v324 = 0;
      v325 = 0;
      v326 = HIDWORD(v331);
      if (!HIDWORD(v331))
        goto LABEL_261;
      if (HIDWORD(v331) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198455E78);
      }
      v185 = *(_QWORD *)(StatusReg + 752);
      if (!v185)
        goto LABEL_381;
      v186 = (16 * HIDWORD(v331)) | 0xF;
      if (v186 <= 0x1AF)
      {
        v187 = 23 * HIDWORD(v331) + 7;
LABEL_253:
        v188 = v185 + 8 * v187;
        v189 = v188 + 8064;
        *(_BYTE *)(v188 + 8064) = 1;
        v190 = *(unsigned int *)(v188 + 8080);
        if ((_DWORD)v190)
        {
          *(_DWORD *)(v189 + 16) = v190 - *(_DWORD *)(v189 + 20);
          casual = (_OWORD *)(*(_QWORD *)(v189 + 8) - v190);
        }
        else
        {
          v192 = *(_QWORD *)(v189 + 40);
          v193 = *(_QWORD *)(v189 + 24);
          if (!v192)
          {
            if (*(_BYTE *)(v189 + 5) == 6)
            {
              v253 = *(unsigned int *)(v189 + 32);
              v254 = *(_DWORD *)(v189 + 36);
              if (v253 < v254)
              {
                *(_QWORD *)(v189 + 8 * v253 + 56) = 0;
                v255 = (unint64_t *)(v185 + 8128 + 8 * v187 + 8 * v253);
                v256 = v254 - 1 - v253;
                while (v256)
                {
                  v193 += 1024;
                  v258 = *v255++;
                  v257 = v258;
                  LODWORD(v253) = v253 + 1;
                  --v256;
                  if (v258)
                  {
                    v192 = __rbit64(v257);
                    *(_DWORD *)(v189 + 32) = v253;
                    *(_QWORD *)(v189 + 24) = v193;
                    goto LABEL_256;
                  }
                }
                *(_DWORD *)(v189 + 32) = v254;
              }
            }
            *(_BYTE *)v189 = 0;
            goto LABEL_381;
          }
LABEL_256:
          v194 = __clz(v192);
          *(_QWORD *)(v189 + 40) = v192 & ~(0x8000000000000000 >> v194);
          casual = (_OWORD *)(v193 + 16 * v194);
        }
        *(_BYTE *)v189 = 0;
        goto LABEL_258;
      }
      if (v186 >> 5 <= 0x138)
      {
        v187 = *((unsigned int *)&bmalloc_common_primitive_heap_support + HIDWORD(v331) + 626);
        if (*(_DWORD *)(v185 + 8052) > v187)
          goto LABEL_253;
      }
LABEL_381:
      casual = (_OWORD *)bmalloc_allocate_casual(16 * v184, 1);
LABEL_258:
      v325 = v184;
      v324 = casual;
      if (HIDWORD(v331))
      {
        v195 = (__int128 *)v331;
        v196 = 16 * HIDWORD(v331);
        do
        {
          v197 = *v195++;
          *casual++ = v197;
          v196 -= 16;
        }
        while (v196);
      }
LABEL_261:
      v327 = v332;
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(&v328, (uint64_t *)&v332 + 1);
      v202 = (uint64_t)v306;
      v203 = v183;
      if ((v183 & 1) != 0)
      {
        v295 = v182;
        v249 = *(_QWORD *)(v183 & 0xFFFFFFFF8);
        if ((v183 & 2) != 0
          || ((v250 = *(unsigned int *)((v183 & 0xFFFFFFFF8) + 8), (_DWORD)v250 != 0x3FFFFFFF)
            ? (v251 = (_DWORD)v250 == -1)
            : (v251 = 1),
              v251))
        {
          v252 = 2;
        }
        else if (v250 >> 28)
        {
          v260 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v260 = v249;
          *(_DWORD *)(v260 + 8) = v250;
          v252 = 1;
          v249 = v260;
        }
        else
        {
          v252 = *(_QWORD *)(v183 & 0xFFFFFFFF8);
          v249 = v250 << 36;
        }
        v203 = v249 | v252;
        v182 = v295;
        v171 = v300;
      }
      v323 = v203;
      JSC::DFG::AvailabilityMap::pruneByLiveness((uint64_t)&v324, v202, &v323, v198, v199, v200, v201);
      if ((v323 & 1) != 0 && (v323 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v323 & 0xFFFFFFFF8, v204, v205, v206, v207, v208, v209, v210);
      v211 = v328;
      if (!v328)
      {
        v212 = 0;
        v213 = 0;
LABEL_265:
        v214 = v328 + 32 * v213;
        goto LABEL_266;
      }
      v213 = *(unsigned int *)(v328 - 4);
      v214 = v328 + 32 * v213;
      if (!*(_DWORD *)(v328 - 12))
      {
        v212 = v328 + 32 * v213;
        goto LABEL_265;
      }
      v212 = v328;
      if (!(_DWORD)v213)
        goto LABEL_266;
      v241 = 32 * v213;
      v212 = v328;
      do
      {
        v242 = *(_DWORD *)(v212 + 8);
        if (*(_QWORD *)v212)
        {
          v243 = *(_DWORD *)(v212 + 12);
        }
        else
        {
          v243 = *(_DWORD *)(v212 + 12);
          if (!(v242 | v243))
            goto LABEL_341;
        }
        if (v242)
          v244 = 1;
        else
          v244 = v243 == 0;
        if (v244)
          goto LABEL_266;
LABEL_341:
        v212 += 32;
        v241 -= 32;
      }
      while (v241);
      v212 = v214;
LABEL_266:
      if (v328)
        v215 = v328 + 32 * *(unsigned int *)(v328 - 4);
      else
        v215 = 0;
      if (v215 != v212)
      {
        while (1)
        {
          v216 = *(_OWORD *)(v212 + 16);
          v321 = *(_OWORD *)v212;
          v322 = v216;
          if (DWORD2(v321) <= 0xD && ((1 << SBYTE8(v321)) & 0x2306) != 0)
          {
            v218 = BYTE8(v322) == 7 || BYTE8(v322) == 0;
            if (v218 && (unint64_t)v322 <= 1)
            {
              v287 = (WTF *)WTF::dataLogLn<char [50],JSC::DFG::PromotedHeapLocation>(&v321);
              v288 = (WTF::PrintStream *)WTF::dataFile(v287);
              JSC::DFG::AvailabilityMap::dump((JSC::DFG::AvailabilityMap *)&v324, v288);
              __break(0xC471u);
              JUMPOUT(0x198455E14);
            }
          }
          v219 = v212 + 32;
          v212 = v214;
          if (v219 != v214)
            break;
LABEL_291:
          if (v212 == v215)
            goto LABEL_292;
        }
        v212 = v219;
        while (2)
        {
          v220 = *(_DWORD *)(v212 + 8);
          if (*(_QWORD *)v212)
          {
            v221 = *(_DWORD *)(v212 + 12);
          }
          else
          {
            v221 = *(_DWORD *)(v212 + 12);
            if (!(v220 | v221))
              goto LABEL_283;
          }
          if (v220)
            v222 = 1;
          else
            v222 = v221 == 0;
          if (v222)
            goto LABEL_291;
LABEL_283:
          v212 += 32;
          if (v212 == v214)
          {
            v212 = v214;
            goto LABEL_291;
          }
          continue;
        }
      }
LABEL_292:
      if (*(_DWORD *)(*((_QWORD *)v306 + 3) + 16) != 5 && v326 != 0)
      {
        v294 = v182;
        v224 = 0;
        v225 = 0;
        v297 = (uint64_t *)(v183 & 0xFFFFFFFF8);
        v226 = -1;
        do
        {
          if (v225 < v327)
          {
            v228 = v225 + 5;
            v229 = (v225 + 5) >> 31;
          }
          else
          {
            v227 = HIDWORD(v327) + (unint64_t)v327;
            v228 = v225 - (v327 + HIDWORD(v327));
            LODWORD(v229) = (v226 + v327) >> 31;
            if (v227 > v225)
              v229 = v229;
            else
              v229 = 2;
            if (v227 > v225)
              v228 = v327 + ~(_DWORD)v225;
          }
          v230 = v228 | (unint64_t)(v229 << 32);
          *(_QWORD *)&v321 = v230;
          v231 = BYTE8(v324[v224]);
          v232 = v231 == 7 || v231 == 0;
          if (v232 && *(_QWORD *)&v324[v224] <= 1uLL)
          {
            v233 = (uint64_t)v306;
            v234 = v183;
            if ((v183 & 1) != 0)
            {
              v236 = *v297;
              if ((v183 & 2) != 0
                || (v237 = *(unsigned int *)((v183 & 0xFFFFFFFF8) + 8), (_DWORD)v237 == 0x3FFFFFFF)
                || (_DWORD)v237 == -1)
              {
                v238 = 2;
              }
              else if (v237 >> 28)
              {
                v289 = *v297;
                v290 = *(_DWORD *)((v183 & 0xFFFFFFFF8) + 8);
                v239 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v239 = v289;
                *(_DWORD *)(v239 + 8) = v290;
                v238 = 1;
                v236 = v239;
              }
              else
              {
                v238 = *v297;
                v236 = v237 << 36;
              }
              v234 = v236 | v238;
            }
            v320 = v234;
            isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode(v233, v230, &v320, v206, v207, v208, v209, v210);
            if ((v320 & 1) != 0 && (v320 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v320 & 0xFFFFFFFF8, v204, v205, v206, v207, v208, v209, v210);
              if ((isLiveInBytecode & 1) != 0)
              {
LABEL_420:
                v271 = v306;
                v272 = *((unsigned int *)v306 + 15);
                if ((_DWORD)v272)
                {
                  v273 = 0;
                  while (!*(_QWORD *)(*((_QWORD *)v306 + 6) + 8 * v273))
                  {
                    if (v272 == ++v273)
                      goto LABEL_437;
                  }
                  if ((_DWORD)v272 != (_DWORD)v273)
                  {
                    v274 = v273;
                    v275 = *((unsigned int *)v306 + 15);
                    do
                    {
                      if (v275 <= v274)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198455E38);
                      }
                      v276 = *(_QWORD *)(*((_QWORD *)v271 + 6) + 8 * v274);
                      WTF::dataLog<char [8],unsigned int,char [2]>((_DWORD *)(v276 + 8));
                      v277 = *(unsigned int *)(v276 + 8);
                      if (*((_DWORD *)*v311 + 3) <= v277)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198455E30);
                      }
                      WTF::dataLog<char [23],JSC::DFG::AvailabilityMap,char [2]>("Availability at head: ", (uint64_t)**v311 + 32 * v277);
                      v278 = *(unsigned int *)(v276 + 8);
                      if (*((_DWORD *)*v312 + 3) <= v278)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198455E40);
                      }
                      WTF::dataLog<char [23],JSC::DFG::AvailabilityMap,char [2]>("Availability at tail: ", (uint64_t)**v312 + 32 * v278);
                      WTF::dataLog<char [16]>("\n");
                      ++v274;
                      v275 = *((unsigned int *)v271 + 15);
                      if (v275 > v274)
                      {
                        while (!*(_QWORD *)(*((_QWORD *)v271 + 6) + 8 * v274))
                        {
                          if (v275 == ++v274)
                          {
                            v274 = *((unsigned int *)v271 + 15);
                            goto LABEL_435;
                          }
                        }
                        v274 = v274;
                      }
LABEL_435:
                      ;
                    }
                    while (v272 != v274);
                    v271 = v306;
                  }
                }
LABEL_437:
                WTF::toCString<char [46],JSC::Operand,char [21],JSC::DFG::AvailabilityMap,char [12],JSC::CodeOrigin>(&v319, (int *)&v321, (uint64_t)&v324, (JSC::CodeOrigin *)&v329);
                if (v319)
                  v279 = (const char *)(v319 + 16);
                else
                  v279 = 0;
                JSC::DFG::Graph::logAssertionFailure(v271, v294, (const WTF::CString *)"./dfg/DFGOSRAvailabilityAnalysisPhase.cpp", (const char *)0xB5, "BOOL JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)]", v279);
                WTF::CString::~CString((WTF::CString *)&v319, v280, v281, v282, v283, v284, v285, v286);
                __break(0xC471u);
                JUMPOUT(0x198455D8CLL);
              }
            }
            else if (isLiveInBytecode)
            {
              goto LABEL_420;
            }
          }
          ++v225;
          --v226;
          ++v224;
        }
        while (v225 < v326);
        v211 = v328;
        StatusReg = v296;
        v171 = v300;
      }
      if (v211)
        WTF::fastFree(v211 - 16, v204, v205, v206, v207, v208, v209, v210);
      v240 = (unint64_t)v324;
      if (v324)
      {
        v324 = 0;
        v325 = 0;
        WTF::fastFree(v240, v204, v205, v206, v207, v208, v209, v210);
      }
      if ((v329 & 1) != 0 && (v329 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v329 & 0xFFFFFFFF8, v204, v205, v206, v207, v208, v209, v210);
      v180 = *(unsigned int *)(v171 + 220);
LABEL_332:
      if (v181 >= v180)
      {
        __break(0xC471u);
        JUMPOUT(0x198455E48);
      }
      JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)&v331, *(JSC::DFG::Node **)(*(_QWORD *)(v171 + 208) + 8 * v181++));
      v180 = *(unsigned int *)(v171 + 220);
    }
    while (v181 < v180);
LABEL_385:
    v170 = (v293 + 1);
    v122 = v291;
    v169 = *((unsigned int *)v291 + 15);
    if (v169 > v170)
    {
      while (!*(_QWORD *)(*((_QWORD *)v291 + 6) + 8 * v170))
      {
        if (v169 == ++v170)
        {
          LODWORD(v170) = *((_DWORD *)v291 + 15);
          break;
        }
      }
    }
  }
  while ((_DWORD)v292 != (_DWORD)v170);
LABEL_390:
  if (*((_QWORD *)&v332 + 1))
    WTF::fastFree(*((_QWORD *)&v332 + 1) - 16, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
  v261 = v331;
  if ((_QWORD)v331)
  {
    *(_QWORD *)&v331 = 0;
    DWORD2(v331) = 0;
    WTF::fastFree(v261, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v309)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v301);
  v262 = v310;
  v310 = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 1)
      WTF::fastFree((unint64_t)v262, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
    else
      --*(_DWORD *)v262;
  }
  v263 = v315;
  if (HIDWORD(v316))
  {
    v264 = 32 * HIDWORD(v316);
    do
    {
      v265 = *((_QWORD *)v263 + 3);
      if (v265)
        WTF::fastFree(v265 - 16, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
      v266 = *(_QWORD *)v263;
      if (*(_QWORD *)v263)
      {
        *(_QWORD *)v263 = 0;
        *((_DWORD *)v263 + 2) = 0;
        WTF::fastFree(v266, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
      }
      v263 = (WTF *)((char *)v263 + 32);
      v264 -= 32;
    }
    while (v264);
    v263 = v315;
  }
  if (v263)
  {
    v315 = 0;
    LODWORD(v316) = 0;
    WTF::fastFree((unint64_t)v263, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
  }
  v267 = v317;
  if (HIDWORD(v318))
  {
    v268 = 32 * HIDWORD(v318);
    do
    {
      v269 = *((_QWORD *)v267 + 3);
      if (v269)
        WTF::fastFree(v269 - 16, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
      v270 = *(_QWORD *)v267;
      if (*(_QWORD *)v267)
      {
        *(_QWORD *)v267 = 0;
        *((_DWORD *)v267 + 2) = 0;
        WTF::fastFree(v270, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
      }
      v267 = (WTF *)((char *)v267 + 32);
      v268 -= 32;
    }
    while (v268);
    v267 = v317;
  }
  if (v267)
  {
    v317 = 0;
    LODWORD(v318) = 0;
    WTF::fastFree((unint64_t)v267, v9, v10, v11, v12, v13, (uint64_t)v14, v15);
  }
}

uint64_t *JSC::DFG::LocalOSRAvailabilityCalculator::beginBlock(JSC::DFG::LocalOSRAvailabilityCalculator *this, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *((_QWORD *)a2 + 25);
  WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)this, (const void **)v9, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 2) = *(_QWORD *)(v9 + 16);
  return WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)this + 3, (_QWORD *)(v9 + 24), v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::DFG::AvailabilityMap::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)a1, (const void **)a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)(a1 + 24), (_QWORD *)(a2 + 24), v10, v11, v12, v13, v14, v15);
  return a1;
}

void JSC::DFG::LocalOSRAvailabilityCalculator::executeNode(JSC::DFG::LocalOSRAvailabilityCalculator *this, JSC::DFG::Node *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int32 v47;
  uint64_t v48;
  unsigned __int32 v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  __n128 v55;
  __n128 v56;

  v4 = *((unsigned __int16 *)a2 + 9);
  if (v4 > 0x116)
  {
    if (v4 == 418)
    {
      v30 = *((unsigned int *)a2 + 18);
      v31 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v31 + 460) <= v30)
      {
        __break(0xC471u);
        JUMPOUT(0x198456520);
      }
      v32 = *(_QWORD *)(v31 + 448) + 16 * v30;
      v33 = *(unsigned int *)(v32 + 12);
      if ((_DWORD)v33)
      {
        v34 = (v33 << 32) + 0x400000000;
        v35 = (v33 - 1);
        v36 = 16 * v35;
        do
        {
          if (*(_DWORD *)(v32 + 12) <= v35)
          {
            __break(0xC471u);
            JUMPOUT(0x198456518);
          }
          v37 = v34 + *(unsigned __int8 *)(*(_QWORD *)v32 + v35);
          v38 = (_QWORD *)(*(_QWORD *)this + v36);
          *v38 = 1;
          v38[1] = v37;
          v34 -= 0x100000000;
          v36 -= 16;
          --v35;
          LODWORD(v33) = v33 - 1;
        }
        while ((_DWORD)v33);
      }
    }
    else
    {
      if (v4 != 279)
      {
        switch(*((_WORD *)a2 + 9))
        {
          case 0x15C:
          case 0x15D:
          case 0x163:
            v9 = *(_QWORD *)a2 & 0xFFFFFFFF8;
            if ((*(_QWORD *)a2 & 1) != 0)
              v9 = *(_QWORD *)v9;
            if (v9)
            {
              if (v4 == 349)
                v10 = *((_DWORD *)a2 + 18);
              else
                v10 = 0;
              v11 = *(_QWORD *)(v9 + 24);
              if ((v11 >> 60) - 3 <= 2)
              {
                *((_QWORD *)&v44 + 1) = (uint64_t)(16 * v11) >> 56;
                *(_QWORD *)&v44 = v11 << 12;
                v45 = (v44 >> 44) + 4;
                if ((((v44 >> 44) + 4) & 0x80000000) != 0)
                  v46 = (v45 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
                else
                  v46 = (int)v45 - 5;
                v56 = *(__n128 *)(*(_QWORD *)this + 16 * v46);
                v55.n128_u64[0] = (unint64_t)a2;
                v55.n128_u64[1] = 3;
                WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)this + 3, (uint64_t)&v55, &v56, (uint64_t)v54);
                v11 = *(_QWORD *)(v9 + 24);
              }
              if ((*(_BYTE *)(v9 + 32) & 1) != 0)
              {
                *((_QWORD *)&v51 + 1) = (uint64_t)(16 * v11) >> 56;
                *(_QWORD *)&v51 = v11 << 12;
                v52 = (v51 >> 44) + 3;
                if ((((v51 >> 44) + 3) & 0x80000000) != 0)
                  v53 = (v52 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
                else
                  v53 = (int)v52 - 5;
                v56 = *(__n128 *)(*(_QWORD *)this + 16 * v53);
                v55.n128_u64[0] = (unint64_t)a2;
                v55.n128_u64[1] = 5;
                WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)this + 3, (uint64_t)&v55, &v56, (uint64_t)v54);
                v11 = *(_QWORD *)(v9 + 24);
              }
              for (; v10 < (v11 & 0x3FFFFF) - 1; v11 = *(_QWORD *)(v9 + 24))
              {
                v12 = v10 + (HIDWORD(v11) & 0xFFFFF | ((int)(v11 >> 28) >> 24 << 20)) + 6;
                if ((int)v12 >= 0)
                  v13 = (int)v12 - 5;
                else
                  v13 = (v12 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
                v56 = *(__n128 *)(*(_QWORD *)this + 16 * v13);
                v55.n128_u64[0] = (unint64_t)a2;
                v55.n128_u32[2] = 4;
                v55.n128_u32[3] = v10;
                WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>((uint64_t *)this + 3, (uint64_t)&v55, &v56, (uint64_t)v54);
                ++v10;
              }
            }
            return;
          case 0x15E:
            v39 = (uint64_t *)((char *)this + 24);
            v56.n128_u64[0] = (unint64_t)a2;
            v43 = 15;
            goto LABEL_59;
          case 0x15F:
            if (*((_DWORD *)a2 + 8))
            {
              v47 = 0;
              do
              {
                v48 = *((_QWORD *)this + 4);
                v49 = v47 + *((_DWORD *)a2 + 6);
                if (*(_DWORD *)(v48 + 164) <= v49)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198456528);
                }
                v50 = *(_QWORD *)(*(_QWORD *)(v48 + 152) + 8 * v49) & 0xFF00FFFFFFFFFFFFLL;
                v56.n128_u64[0] = (unint64_t)a2;
                v56.n128_u32[2] = 16;
                v56.n128_u32[3] = v47;
                v55.n128_u64[0] = v50;
                v55.n128_u8[8] = 7;
                v55.n128_u32[3] = 0x3FFFFFFF;
                WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>((uint64_t *)this + 3, (uint64_t)&v56, &v55, (uint64_t)v54);
                ++v47;
              }
              while (v47 < *((_DWORD *)a2 + 8));
            }
            return;
          case 0x160:
            v39 = (uint64_t *)((char *)this + 24);
            v56.n128_u64[0] = (unint64_t)a2;
            v43 = 17;
LABEL_59:
            v56.n128_u64[1] = v43;
            v42 = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
            goto LABEL_55;
          default:
            return;
        }
      }
      v39 = (uint64_t *)((char *)this + 24);
      v40 = *((_QWORD *)a2 + 4);
      v41 = *((unsigned int *)a2 + 18) | ((unint64_t)*((unsigned int *)a2 + 20) << 32);
      v56.n128_u64[0] = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
      v56.n128_u64[1] = v41;
      v42 = v40 & 0xFF00FFFFFFFFFFFFLL;
LABEL_55:
      v55.n128_u64[0] = v42;
      v55.n128_u8[8] = 7;
      v55.n128_u32[3] = 0x3FFFFFFF;
      WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>(v39, (uint64_t)&v56, &v55, (uint64_t)v54);
    }
  }
  else
  {
    switch(*((_WORD *)a2 + 9))
    {
      case 0x11:
      case 0x13:
        v27 = (uint64_t *)*((_QWORD *)a2 + 9);
        v28 = *v27;
        if (HIDWORD(*v27) == 2)
        {
          v29 = *((unsigned int *)this + 4) + (uint64_t)(int)v28 + *((unsigned int *)this + 5);
        }
        else if ((v28 & 0x80000000) != 0)
        {
          v29 = (*v27 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
        }
        else
        {
          v29 = (int)v28 - 5;
        }
        *(_QWORD *)(*(_QWORD *)this + 16 * v29 + 8) = *((unsigned __int8 *)v27 + 12) | ((unint64_t)*((unsigned int *)v27 + 2) << 32);
        break;
      case 0x12:
        v7 = *((_QWORD *)a2 + 9);
        if (HIDWORD(v7) == 2)
        {
          v8 = *((unsigned int *)this + 4) + (uint64_t)(int)v7 + *((unsigned int *)this + 5);
        }
        else if ((v7 & 0x80000000) != 0)
        {
          v8 = (*((_QWORD *)a2 + 9) ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
        }
        else
        {
          v8 = (int)v7 - 5;
        }
        *(_QWORD *)(*(_QWORD *)this + 16 * v8 + 8) = 0x3FFFFFFF00000007;
        break;
      case 0x14:
      case 0x15:
        v5 = *((_QWORD *)a2 + 9);
        if (HIDWORD(v5) == 2)
        {
          v6 = *((unsigned int *)this + 4) + (uint64_t)(int)v5 + *((unsigned int *)this + 5);
        }
        else if ((v5 & 0x80000000) != 0)
        {
          v6 = (*((_QWORD *)a2 + 9) ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
        }
        else
        {
          v6 = (int)v5 - 5;
        }
        *(_QWORD *)(*(_QWORD *)this + 16 * v6) = *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL;
        break;
      default:
        if (v4 - 99 < 2)
        {
          v14 = (_DWORD *)*((_QWORD *)a2 + 9);
          v15 = ((unint64_t)v14[3] << 32) | 1;
          v16 = v14[1];
          v17 = (v16 & 0x80000000) != 0 ? (v16 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4) : (int)v16 - 5;
          v18 = (_QWORD *)(*(_QWORD *)this + 16 * v17);
          *v18 = 1;
          v18[1] = v15;
          v19 = v14[6];
          if (v19)
          {
            v20 = v19 - 1;
            do
            {
              v21 = v14[2];
              v22 = v21 == 0x3FFFFFFF;
              LODWORD(v23) = v20 + v21;
              if (v22)
                v23 = 0x3FFFFFFFLL;
              else
                v23 = v23;
              v24 = (v20 + *v14);
              if (v20 + *v14 >= 0)
                v25 = (int)v24 - 5;
              else
                v25 = (v24 ^ 0xFFFFFFFFLL) + *((unsigned int *)this + 4);
              v26 = (_QWORD *)(*(_QWORD *)this + 16 * v25);
              *v26 = 1;
              v26[1] = (v23 << 32) | 6;
              --v20;
            }
            while (v20 != -1);
          }
        }
        break;
    }
  }
}

uint64_t JSC::DFG::OSREntryData::dumpInContext(JSC::DFG::OSREntryData *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  const void *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  WTF::PrintStream *v15;
  float v16;
  WTF::PrintStream *v17;
  float v18;
  unint64_t v19;
  WTF::PrintStream *v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  float v23;
  WTF::PrintStream *v24;
  float v25;
  WTF::PrintStream *v26;
  float v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unint64_t i;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  uint64_t *v36;
  uint64_t *v37;
  WTF::PrintStream *v38;
  _QWORD v40[3];
  JSC::DumpContext *v41;
  int v42;
  int v43;
  char v44;

  v41 = a3;
  v5 = (const void *)*((_QWORD *)this + 1);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::BytecodeIndex::dump(this, v6);
  WTF::PrintStream::printf(v6, "%s", ", machine code = ");
  WTF::PrintStream::printf(v6, "%p", v5);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", ", stack rules = [");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v40[0] = a2;
  v40[1] = this;
  v40[2] = &v41;
  v8 = *((unsigned int *)this + 6);
  v9 = 0;
  if ((_DWORD)v8)
  {
    v10 = v8 - 1;
    do
    {
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      if (v9)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v42, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
        v9 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
      WTF::StringImpl::utf8ForCharacters("arg", 3uLL, (uint64_t)&v42, v16);
      WTF::printExpectedCStringHelper(v15, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
      WTF::PrintStream::printf(v11, "%lu", v10);
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
      WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v42, v18);
      WTF::printExpectedCStringHelper(v17, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      JSC::DFG::OSREntryData::dumpInContext(WTF::PrintStream &,JSC::DumpContext *)const::$_0::operator()(v40, v10-- + 5);
    }
    while (v10 != -1);
  }
  if (*((_DWORD *)this + 7))
  {
    v19 = 0;
    do
    {
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v21 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
      if (v9)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v42, v23);
        WTF::printExpectedCStringHelper(v22, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v23);
        WTF::printExpectedCStringHelper(v22, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
        v9 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
      WTF::StringImpl::utf8ForCharacters("loc", 3uLL, (uint64_t)&v42, v25);
      WTF::printExpectedCStringHelper(v24, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
      WTF::PrintStream::printf(v20, "%lu", v19);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 32))(v20);
      WTF::StringImpl::utf8ForCharacters(":", 1uLL, (uint64_t)&v42, v27);
      WTF::printExpectedCStringHelper(v26, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v20 + 40))(v20);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      JSC::DFG::OSREntryData::dumpInContext(WTF::PrintStream &,JSC::DumpContext *)const::$_0::operator()(v40, ~(_DWORD)v19++);
    }
    while (v19 < *((unsigned int *)this + 7));
  }
  v28 = (uint64_t *)((char *)this + 56);
  v29 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("], machine stack used = ", 0x18uLL, (uint64_t)&v42, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  for (i = 0; ; ++i)
  {
    v33 = (unint64_t *)(2 * *v28);
    if (*v28 < 0)
      break;
    v34 = *v33;
    if (i >= *v33)
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_35:
    v35 = "-";
    if (v34 > i)
    {
      v36 = (uint64_t *)(v33 + 1);
      if (*v28 >= 0)
        v37 = v36;
      else
        v37 = v28;
      if ((*(uint64_t *)((char *)v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << i)) != 0)
        v35 = "1";
      else
        v35 = "-";
    }
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    WTF::PrintStream::printf(v38, "%s", v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  }
  if (i < 0x3F)
  {
    v34 = 63;
    goto LABEL_35;
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::DFG::OSREntryData::dumpInContext(WTF::PrintStream &,JSC::DumpContext *)const::$_0::operator()(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  JSC::DFG::AbstractValue *v8;
  JSC::DumpContext *v9;
  WTF::PrintStream *v10;
  unsigned int *v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  const char *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  WTF::PrintStream *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::PrintStream *v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  unsigned int v46;

  v4 = *a1;
  v5 = a1[1];
  if ((a2 & 0x80000000) != 0)
  {
    v7 = *(_DWORD **)(v5 + 16);
    if (*v7 <= ~a2 + *(_DWORD *)(v5 + 24))
    {
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x198456BECLL);
    }
    v6 = ~a2 + *(_DWORD *)(v5 + 24);
  }
  else
  {
    v6 = a2 - 5;
    v7 = *(_DWORD **)(v5 + 16);
    if (*v7 <= v6)
      goto LABEL_53;
  }
  v8 = (JSC::DFG::AbstractValue *)&v7[8 * v6 + 2];
  v9 = *(JSC::DumpContext **)a1[2];
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 32))(*a1);
  JSC::DFG::AbstractValue::dumpInContext(v8, v10, v9);
  WTF::PrintStream::printf(v10, "%s", " (");
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v11 = *(unsigned int **)(v5 + 48);
  if (v11)
    v12 = v11 + 1;
  else
    v12 = 0;
  if (v11)
    v13 = (uint64_t)&v11[2 * *v11 + 1];
  else
    v13 = 0;
  if (v12 == (_DWORD *)v13)
    goto LABEL_20;
  v14 = 0;
  while (1)
  {
    v15 = v12[1];
    if (*v12 == a2)
      break;
    v14 |= v15 == a2;
    v12 += 2;
    if (v12 == (_DWORD *)v13)
    {
      if ((v14 & 1) == 0)
        goto LABEL_20;
      goto LABEL_22;
    }
  }
  v46 = v12[1];
  if ((v14 & 1) != 0)
    goto LABEL_21;
  if (v15 == 0x3FFFFFFF)
  {
LABEL_20:
    v46 = a2;
    v15 = a2;
LABEL_21:
    if (v15 == 0x3FFFFFFF)
    {
LABEL_22:
      v16 = *a1;
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v18 = "overwritten";
LABEL_23:
      WTF::PrintStream::printf(v17, "%s", v18);
      goto LABEL_33;
    }
  }
  if ((v15 & 0x80000000) != 0)
  {
    v19 = (_QWORD *)(v5 + 56);
    v20 = *(_QWORD *)(v5 + 56);
    v21 = ~v15;
    v22 = (_QWORD *)(2 * v20);
    v23 = v20 < 0 ? 63 : *v22;
    if (v23 <= v21)
      goto LABEL_52;
    v24 = v22 + 1;
    if (v20 >= 0)
      v19 = v24;
    if (((*(_QWORD *)((char *)v19 + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) == 0)
    {
LABEL_52:
      v16 = *a1;
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v18 = "ignored";
      goto LABEL_23;
    }
  }
  v16 = *a1;
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  WTF::PrintStream::printf(v25, "%s", "maps to ");
  JSC::VirtualRegister::dump(&v46, v25);
LABEL_33:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  if ((a2 & 0x80000000) != 0)
  {
    v26 = (_QWORD *)(v5 + 32);
    v27 = *(_QWORD *)(v5 + 32);
    v28 = ~a2;
    v29 = (unint64_t *)(2 * v27);
    if (v27 < 0)
      v30 = 63;
    else
      v30 = *v29;
    if (v30 > v28)
    {
      v31 = v29 + 1;
      if (v27 >= 0)
        v26 = v31;
      if (((*(_QWORD *)((char *)v26 + ((v28 >> 3) & 0x1FFFFFF8)) >> ~(_BYTE)a2) & 1) != 0)
      {
        v32 = *a1;
        v33 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
        WTF::PrintStream::printf(v33, "%s", ", forced double");
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      }
    }
    v36 = *(_QWORD *)(v5 + 40);
    v35 = (_QWORD *)(v5 + 40);
    v34 = v36;
    v37 = (unint64_t *)(2 * v36);
    if (v36 < 0)
      v38 = 63;
    else
      v38 = *v37;
    if (v38 > v28)
    {
      v39 = v37 + 1;
      if (v34 >= 0)
        v40 = v39;
      else
        v40 = v35;
      if (((*(_QWORD *)((char *)v40 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
      {
        v41 = *a1;
        v42 = (WTF::PrintStream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
        WTF::PrintStream::printf(v42, "%s", ", forced machine int");
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
      }
    }
  }
  v43 = *a1;
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
  WTF::PrintStream::printf(v44, "%s", ")");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
}

_QWORD *JSC::DFG::prepareOSREntry(JSC *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  signed int v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  JSC::DFG::StructureAbstractValue *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  JSC::Structure *v63;
  int v64;
  int v65;
  unint64_t v66;
  _DWORD *v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  char v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t *v86;
  double *v87;
  uint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  unsigned int *v101;
  char *v102;
  _QWORD *v103;
  uint64_t *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  int v114;
  unint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int **v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  char *v136;
  BOOL v137;
  unint64_t v138;
  int64_t v139;
  uint64_t v140;
  int64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  unsigned int v150;
  unsigned int *v151;
  int *v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  double v157;
  double v158;
  _QWORD *v159;
  const char *v161;
  unsigned int v162;
  unsigned int *v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  JSC::VM *v173;
  _QWORD *v174;
  signed int v175;
  unsigned int v176;
  const void **v177;
  unsigned int *v178;

  v8 = a4;
  v176 = a4;
  if (!BYTE5(qword_1ECF4C414))
    return 0;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [12],JSC::CodeBlock,char [5],JSC::CodeBlock,char [7],JSC::BytecodeIndex,char [2]>(a3[24], (uint64_t)a3, (JSC::BytecodeIndex *)&v176);
  JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v8 != -1 && v8 != 0x3FFFFFFF)
    *(_BYTE *)(a3[8] + 65) = 1;
  v12 = a3[15];
  if (!v12)
    goto LABEL_296;
  v13 = *(unsigned __int8 *)(v12 + 12);
  if (v13 != 4)
  {
    if (v13 == 5)
    {
      if (!BYTE1(qword_1ECF4C332))
        return 0;
      v161 = "    OSR failed because the target code block is not DFG.";
LABEL_245:
      WTF::dataLog<char [88],char [2]>(v161, "\n");
      return 0;
    }
LABEL_296:
    __break(0xC471u);
    JUMPOUT(0x198457F3CLL);
  }
  v14 = (unsigned int *)(v12 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  do
  {
    v23 = __ldaxr(v14);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v14));
  if (!v24)
  {
    atomic_store(1u, (unsigned int *)(v12 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  }
  v25 = *(unsigned int **)(v22 + 256);
  if (!v25)
  {
LABEL_243:
    if (!BYTE1(qword_1ECF4C332))
      return 0;
    v161 = "    OSR failed because the entrypoint was optimized out.";
    goto LABEL_245;
  }
  v26 = *v25;
  v172 = v22;
  v27 = 0;
  if (*v25 < 2)
  {
    v28 = *v25;
LABEL_18:
    if (v28)
    {
      if (v26 <= v27)
      {
        __break(0xC471u);
        JUMPOUT(0x198457CC8);
      }
      v29 = &v25[16 * (unint64_t)v27];
      v31 = v29[2];
      v30 = v29 + 2;
      if (v31 == v176)
        goto LABEL_21;
    }
    goto LABEL_243;
  }
  v142 = v25 + 2;
  v28 = *v25;
  while (1)
  {
    if (v26 <= v27 + ((v28 - 1) >> 1))
    {
      __break(0xC471u);
      JUMPOUT(0x198457D98);
    }
    v143 = v142[16 * (unint64_t)(v27 + ((v28 - 1) >> 1))];
    if (v143 == v176)
      break;
    v144 = (v28 - 1) >> 1;
    v28 -= v144 + 1;
    if (v143 <= v176)
    {
      v145 = v144 + 1;
    }
    else
    {
      v28 = v144;
      v145 = 0;
    }
    v27 += v145;
    if (v28 <= 1)
      goto LABEL_18;
  }
  v30 = &v142[16 * (unint64_t)(v27 + ((v28 - 1) >> 1))];
LABEL_21:
  if (!v30[6])
  {
LABEL_31:
    v173 = a1;
    v174 = a3;
    if (v30[7])
    {
      v39 = 0;
      v40 = (uint64_t *)(v30 + 10);
      v41 = (uint64_t *)(v30 + 8);
      v42 = -1;
      while (1)
      {
        LODWORD(v177) = v42;
        v43 = a2[v42];
        v178 = (unsigned int *)v43;
        v44 = (unint64_t *)(2 * *v40);
        if (*v40 < 0)
          v45 = 63;
        else
          v45 = *v44;
        v46 = v39 >> 3;
        if (v45 > v39
          && ((v47 = v44 + 1, *v40 >= 0) ? (v48 = v47) : (v48 = v30 + 10),
              ((*(_QWORD *)((char *)v48 + (v46 & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) != 0))
        {
          if (!JSC::JSValue::isAnyInt((JSC::JSValue *)&v178))
          {
            if (BYTE1(qword_1ECF4C332))
              WTF::dataLog<char [33],int,char [5],JSC::JSValue,char [12],char [13],char [2]>(&v177, (JSC::JSValue *)&v178);
            return 0;
          }
          v169 = (int)v178;
          if ((unint64_t)v178 < 0xFFFE000000000000)
            v169 = (uint64_t)COERCE_DOUBLE(v178 - 0x800000000000);
          v43 = COERCE__INT64((double)v169) + 0x2000000000000;
          v178 = (unsigned int *)v43;
          v49 = 2;
        }
        else
        {
          v49 = 6;
        }
        v50 = (unint64_t *)(2 * *v41);
        if (*v41 < 0)
          v51 = 63;
        else
          v51 = *v50;
        if (v51 > v39)
        {
          v52 = (unsigned int *)(v50 + 1);
          v53 = *v41 >= 0 ? v52 : v30 + 8;
          if (((*(_QWORD *)((char *)v53 + (v46 & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
          {
            if (!(v43 >> 49))
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [33],int,char [5],JSC::JSValue,char [19],char [2]>(&v177, (JSC::JSValue *)&v178);
              return 0;
            }
            *(_QWORD *)&v157 = v43 - 0x2000000000000;
            if (v43 > 0xFFFDFFFFFFFFFFFFLL)
              v157 = (double)(int)v43;
            v43 = *(_QWORD *)&v157 + 0x2000000000000;
            v178 = (unsigned int *)(*(_QWORD *)&v157 + 0x2000000000000);
            v49 = 3;
          }
        }
        v54 = (_DWORD *)*((_QWORD *)v30 + 2);
        if (*v54 <= v39 + v30[6])
          goto LABEL_301;
        v55 = v54 + 2;
        v56 = v39 + v30[6];
        v57 = (JSC::DFG::StructureAbstractValue *)&v54[8 * v56 + 2];
        v58 = *((_QWORD *)v57 + 1);
        if ((v58 | 0x3F73FFFFFFF7) == v58 && *(_QWORD *)v57 == 4)
        {
          v67 = &v55[8 * v56];
          if (v67[4] == -21020677 && !*((_QWORD *)v67 + 3))
            goto LABEL_72;
        }
        if (v49 == 2)
        {
          if ((v58 & 0xFFFFFFF3FFFFFFFFLL) != 0
            || !JSC::DFG::AbstractValue::validateTypeAcceptingBoxedInt52((uint64_t)v57, v43))
          {
            goto LABEL_273;
          }
          v164 = *(_QWORD *)&v55[8 * v56 + 6];
          if (v164)
          {
            v165 = (unint64_t)v164 >= 0xFFFE000000000000;
            v166 = (uint64_t)COERCE_DOUBLE(v164 - 0x2000000000000);
            v164 = (int)v164;
            if (!v165)
              v164 = v166;
            v167 = (double)v164;
            v168 = (uint64_t)COERCE_DOUBLE(v43 - 0x2000000000000);
            if (v43 >= 0xFFFE000000000000)
              v168 = (int)v43;
            if (*(_QWORD *)&v167 != COERCE__INT64((double)v168))
            {
LABEL_273:
              if (BYTE1(qword_1ECF4C332))
              {
                v175 = v42;
                v171 = (_DWORD *)*((_QWORD *)v30 + 2);
                if (*v171 <= v30[6] + v39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198457F00);
                }
                WTF::dataLog<char [33],JSC::VirtualRegister,char [5],JSC::JSValue,char [12],JSC::DFG::AbstractValue,char [2],char [2]>((unsigned int *)&v175, (JSC::JSValue *)&v178, (JSC::DFG::AbstractValue *)&v171[8 * v30[6] + 2 + 8 * v39]);
              }
              return 0;
            }
          }
          if (!v43 || (v43 & 0xFFFE000000000002) != 0)
            goto LABEL_72;
LABEL_68:
          v63 = (JSC::Structure *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE));
          if (!JSC::DFG::StructureAbstractValue::contains(v57, v63, v16, v17, v18, v19, v20, v21))
            goto LABEL_273;
          v64 = *((unsigned __int8 *)v63 + 9);
          v65 = (v64 - 39) <= 0xA ? JSC::typedArrayModes[v64 - 39] : 1 << *((_BYTE *)v63 + 8);
          if ((v65 & v55[8 * v56 + 4]) == 0)
            goto LABEL_273;
          goto LABEL_72;
        }
        v59 = *(_QWORD *)&v55[8 * v56 + 6];
        if (v59)
          v60 = v59 == v43;
        else
          v60 = 1;
        if (!v60)
          goto LABEL_273;
        if (!v43)
        {
          v61 = 0x40000000000;
          goto LABEL_65;
        }
        if (v43 >= 0xFFFE000000000000)
          break;
        if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v71 = (uint64_t)COERCE_DOUBLE(v43 - 0x2000000000000);
          if ((double)v71 != COERCE_DOUBLE(v43 - 0x2000000000000))
            goto LABEL_93;
          if (v71)
          {
            if ((unint64_t)(v71 + 0x8000000000000) >> 52)
              goto LABEL_93;
          }
          else if ((uint64_t)v43 < 0x2000000000000)
          {
LABEL_93:
            v61 = 0x2000000000;
            goto LABEL_65;
          }
          v61 = 0x1000000000;
        }
        else
        {
          if ((v43 & 0xFFFE000000000002) != 0)
          {
            v68 = (v43 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v61 = 0x20000000000;
            v69 = 0x10000000000;
LABEL_81:
            if (v68)
              v61 = v69;
            goto LABEL_65;
          }
          if (qword_1ECF4C080 > v43)
            goto LABEL_291;
          v61 = 0;
          if (!(v43 >> 36) && (v43 & 0xFFFFFFFFFLL) != 0)
          {
            v62 = *(unsigned __int8 *)(v43 + 5);
            if (v62 != 2)
            {
              v61 = JSC::speculatedTypeMapping[v62];
              goto LABEL_65;
            }
            v70 = *(_QWORD *)(v43 + 8);
            if (!v70)
              goto LABEL_202;
            v61 = 805306368;
            if ((v70 & 1) != 0)
              goto LABEL_65;
            if (v70 < qword_1ECF4C080)
            {
LABEL_291:
              v61 = 0;
              goto LABEL_65;
            }
            v61 = 0;
            if (!(v70 >> 36) && (v70 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v70 + 16) & 0x10) != 0)
              {
                v61 = 0x10000000;
                goto LABEL_65;
              }
LABEL_202:
              v61 = 805306368;
            }
          }
        }
LABEL_65:
        if ((v61 | v58) != v58)
          goto LABEL_273;
        if (v43 && (v43 & 0xFFFE000000000002) == 0)
          goto LABEL_68;
LABEL_72:
        ++v39;
        v66 = v30[7];
        --v42;
        if (v39 >= v66)
        {
          a1 = v173;
          goto LABEL_94;
        }
      }
      v68 = (v43 & 0xFFFFFFFE) == 0;
      v61 = 0x200000000;
      v69 = 0x100000000;
      goto LABEL_81;
    }
    LODWORD(v66) = 0;
LABEL_94:
    v73 = *(_DWORD *)(v172 + 240);
    v72 = *(_DWORD *)(v172 + 244);
    if (v73 > v72)
      v72 = *(_DWORD *)(v172 + 240);
    if (*((_QWORD *)a1 + 1) > (unint64_t)&a2[-v72])
    {
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("    OSR failed because stack growth failed.", "\n");
      return 0;
    }
    if (BYTE1(qword_1ECF4C332))
    {
      WTF::dataLog<char [88],char [2]>("    OSR should succeed.", "\n");
      v73 = *(_DWORD *)(v172 + 240);
      LODWORD(v66) = v30[7];
    }
    if (v73 <= v66)
      v74 = v66;
    else
      v74 = v73;
    v75 = (_QWORD *)JSC::VM::scratchBufferForSize(a1, 8 * (v74 + 7), v16, v17, v18, v19, v20, v21);
    v75[1] = v73;
    v76 = (unsigned int *)*((_QWORD *)v30 + 1);
    v77 = (unsigned int *)v174[15];
    v78 = v76;
    if (v77)
    {
      v79 = v77 + 2;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 + 1, v79));
      v78 = (unsigned int *)*((_QWORD *)v30 + 1);
    }
    v81 = v77 + 2;
    v82 = (*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)v77 + 136))(v77, v78);
    do
    {
      v83 = __ldaxr(v81);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v81));
    if (!v84)
    {
      atomic_store(1u, v77 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 32))(v77);
    }
    if ((v82 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198457C28);
    }
    if (BYTE1(qword_1ECF4C332))
    {
      v178 = v76;
      WTF::dataLog<char [25],WTF::RawPointer,char [2]>("    OSR using target PC ", (const void **)&v178, "\n");
    }
    if (!v76)
    {
      __break(0xC471u);
      JUMPOUT(0x198457C68);
    }
    v75[2] = v76;
    if ((int)v66 < -4)
    {
LABEL_137:
      v100 = v75 + 8;
      v101 = (unsigned int *)*((_QWORD *)v30 + 6);
      if (v101)
      {
        v147 = *v101;
        v103 = v174;
        if ((_DWORD)v147)
        {
          if (v147 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x198457F6CLL);
          }
          v102 = (char *)WTF::fastMalloc((WTF *)(8 * v147));
          bzero(v102, 8 * v147);
          v148 = (int *)*((_QWORD *)v30 + 6);
          if (v148)
          {
            v149 = *v148;
            if (v149)
            {
              if (v149 - 1 >= v147)
              {
                __break(0xC471u);
                JUMPOUT(0x198457F74);
              }
              v150 = v149 - 1;
              do
              {
                v151 = (unsigned int *)*((_QWORD *)v30 + 6);
                if (*v151 <= v150)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198457DB8);
                }
                *(_QWORD *)&v102[8 * v150] = v100[~v151[2 * v150 + 1]];
                --v150;
              }
              while (v150 != -1);
              v152 = (int *)*((_QWORD *)v30 + 6);
              if (v152)
              {
                v153 = *v152;
                if (v153)
                {
                  v154 = v153 - 1;
                  if (v154 >= v147)
                  {
LABEL_301:
                    __break(0xC471u);
                    JUMPOUT(0x198457A1CLL);
                  }
                  v155 = 2 * v154;
                  do
                  {
                    v156 = (unsigned int *)*((_QWORD *)v30 + 6);
                    if (*v156 <= v154)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198457DD8);
                    }
                    v100[~v156[v155 + 2]] = *(_QWORD *)&v102[v155 * 4];
                    v155 -= 2;
                    --v154;
                  }
                  while (v154 != -1);
                }
              }
            }
          }
        }
        else
        {
          v102 = 0;
        }
      }
      else
      {
        v102 = 0;
        v103 = v174;
      }
      if (v73)
      {
        v104 = (uint64_t *)(v30 + 14);
        v105 = v73 - 1;
        do
        {
          v106 = (unint64_t *)(2 * *v104);
          if (*v104 < 0)
            v107 = 63;
          else
            v107 = *v106;
          v108 = v105;
          if (v107 <= v105
            || ((v109 = v106 + 1, *v104 >= 0) ? (v110 = v109) : (v110 = v30 + 14),
                ((*(_QWORD *)((char *)v110 + (((unint64_t)v105 >> 3) & 0x1FFFFFF8)) >> v105) & 1) == 0))
          {
            v100[v105] = 0;
          }
          --v105;
        }
        while (v108);
      }
      v111 = v103[15];
      if (v111)
      {
        v112 = (unsigned int *)(v111 + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 + 1, v112));
        v114 = *(unsigned __int8 *)(v111 + 12);
        if (v114 == 5)
        {
          v116 = (uint64_t *)(v111 + 256);
        }
        else if (v114 == 4)
        {
          v146 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
          if (v146 != -1)
          {
            v178 = (unsigned int *)&v175;
            v177 = (const void **)&v178;
            std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
          }
          v116 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
        }
        else
        {
          v115 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
          if (v115 != -1)
          {
            v178 = (unsigned int *)&v175;
            v177 = (const void **)&v178;
            std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
          }
          v116 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
        }
        do
        {
          v117 = __ldaxr(v112);
          v118 = v117 - 1;
        }
        while (__stlxr(v118, v112));
        if (!v118)
        {
          atomic_store(1u, (unsigned int *)(v111 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 32))(v111);
        }
      }
      else
      {
        v116 = JSC::JITCode::calleeSaveRegisters(0);
      }
      v119 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
      if (v119 != -1)
      {
        v178 = (unsigned int *)&v175;
        v177 = (const void **)&v178;
        std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
      }
      if (*v116)
      {
        v120 = (unsigned int **)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
        v121 = *(unsigned int *)*v116;
        v122 = vmEntryRecord(*((_QWORD *)v173 + 6));
        if ((_DWORD)v121)
        {
          v130 = 0;
          v131 = *v116 + 8;
          v132 = *(unsigned int *)*v116;
          do
          {
            if (v130 == v132)
            {
              __break(0xC471u);
LABEL_247:
              __break(1u);
LABEL_248:
              __break(0xC471u);
              JUMPOUT(0x198457AF4);
            }
            v133 = *(_QWORD *)(v131 + 8 * v130);
            if ((v133 & 0x7Fu) >= 0x40uLL)
              goto LABEL_247;
            if (((1 << (v133 & 0x7F)) & 0xA0000000) == 0)
            {
              if ((v133 & 0x60) != 0)
                goto LABEL_248;
              v134 = *v120;
              v135 = **v120;
              if (v135 < 2)
              {
                v123 = 0;
LABEL_180:
                v137 = __OFSUB__(v135, (_DWORD)v123);
                if (v135 <= v123)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198457B6CLL);
                }
                v128 = *(_QWORD *)&v134[2 * v123 + 2];
              }
              else
              {
                v123 = 0;
                v124 = *(_QWORD *)(v131 + 8 * v130);
                v125 = *(_QWORD *)(v131 + 8 * v130) & 0x7FLL;
                v126 = (uint64_t)(v134 + 2);
                v127 = **v120;
                while (1)
                {
                  v129 = v127 - 1;
                  v136 = (char *)v123 + ((v127 - 1) >> 1);
                  v137 = __OFSUB__(v135, (_DWORD)v136);
                  if (v135 <= v136)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198457A8CLL);
                  }
                  v128 = *(_QWORD *)(v126 + 8 * v136);
                  if (((v128 ^ v133) & 0x7F) == 0)
                    break;
                  v129 >>= 1;
                  v127 -= v129 + 1;
                  if (v125 >= (v128 & 0x7Fu))
                  {
                    v138 = v129 + 1;
                  }
                  else
                  {
                    v127 = v129;
                    v138 = 0;
                  }
                  v123 = (char *)v123 + v138;
                  if (v127 <= 1)
                    goto LABEL_180;
                }
              }
              v139 = (v128 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
              if (v128 >> 6 < 0 != v137)
                v139 += 7;
              v140 = *(_QWORD *)(v122 + 8 * (int)(v139 >> 3) + 24);
              v141 = (v133 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
              if (v141 < 0 != v137)
                v141 += 7;
              v75[-(int)(v141 >> 3) + 7] = v140;
            }
            ++v130;
          }
          while (v130 != v121);
        }
      }
      else
      {
        vmEntryRecord(*((_QWORD *)v173 + 6));
      }
      v75[5] = v103;
      v159 = v75 + 1;
      if (BYTE1(qword_1ECF4C332))
      {
        v178 = (unsigned int *)(v75 + 1);
        WTF::dataLog<char [31],WTF::RawPointer,char [2]>((const void **)&v178);
      }
      if (v102)
        WTF::fastFree((unint64_t)v102, v123, v124, v125, v126, v127, v128, v129);
      return v159;
    }
    v85 = (uint64_t *)(v30 + 8);
    v86 = (uint64_t *)(v30 + 10);
    v87 = (double *)(v75 + 3);
    v88 = a2 + 4;
    v89 = -5;
    while (1)
    {
      if ((v89 & 0x8000000000000000) != 0)
        goto LABEL_131;
      v90 = (unint64_t *)(2 * *v85);
      if (*v85 < 0)
        v91 = 63;
      else
        v91 = *v90;
      v92 = v89 >> 3;
      if (v91 > v89)
      {
        v93 = (unsigned int *)(v90 + 1);
        v94 = *v85 >= 0 ? v93 : v30 + 8;
        if (((*(_QWORD *)((char *)v94 + (v92 & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) != 0)
        {
          v158 = (double)(int)*v88;
          if ((unint64_t)*v88 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v158 = *v88 - 0x2000000000000;
          *v87 = v158;
          goto LABEL_133;
        }
      }
      v95 = (_QWORD *)(2 * *v86);
      v96 = *v86 < 0 ? 63 : *v95;
      if (v96 > v89
        && ((v97 = v95 + 1, *v86 >= 0) ? (v98 = v97) : (v98 = v30 + 10),
            ((*(_QWORD *)((char *)v98 + (v92 & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) != 0))
      {
        v170 = (int)*v88;
        if ((unint64_t)*v88 < 0xFFFE000000000000)
          v170 = (uint64_t)COERCE_DOUBLE(*v88 - 0x2000000000000);
        v99 = v170 << 12;
      }
      else
      {
LABEL_131:
        v99 = *v88;
      }
      *(_QWORD *)v87 = v99;
LABEL_133:
      ++v89;
      ++v87;
      --v88;
      if ((int)v66 == v89)
        goto LABEL_137;
    }
  }
  v32 = a2[5];
  v177 = (const void **)v32;
  v33 = (_DWORD *)*((_QWORD *)v30 + 2);
  if (!*v33)
  {
LABEL_253:
    __break(0xC471u);
    JUMPOUT(0x198457B4CLL);
  }
  if (JSC::DFG::AbstractValue::validateOSREntryValue((uint64_t)(v33 + 2), v32, 6, v17, v18, v19, v20, v21))
  {
    if (v30[6] >= 2)
    {
      v34 = 0x600000000;
      v35 = 1;
      v36 = 10;
      while (1)
      {
        if (*((int *)a2 + 8) - 1 <= v35 - 1)
          v37 = 10;
        else
          v37 = *(uint64_t *)((char *)a2 + (v34 >> 29));
        v177 = (const void **)v37;
        v38 = (_DWORD *)*((_QWORD *)v30 + 2);
        if (*v38 <= v35)
          goto LABEL_253;
        if ((JSC::DFG::AbstractValue::validateOSREntryValue((uint64_t)&v38[v36], v37, 6, v17, v18, v19, v20, v21) & 1) == 0)
          break;
        ++v35;
        v34 += 0x100000000;
        v36 += 8;
        if (v35 >= v30[6])
          goto LABEL_31;
      }
      v162 = v35;
      goto LABEL_250;
    }
    goto LABEL_31;
  }
  v35 = 0;
  v162 = 0;
LABEL_250:
  v178 = (unsigned int *)v35;
  if (BYTE1(qword_1ECF4C332))
  {
    v163 = (unsigned int *)*((_QWORD *)v30 + 2);
    if (*v163 <= v162)
    {
      __break(0xC471u);
      JUMPOUT(0x198457F5CLL);
    }
    WTF::dataLog<char [33],unsigned long,char [5],JSC::JSValue,char [12],JSC::DFG::AbstractValue,char [2]>(&v178, (JSC::JSValue *)&v177, (JSC::DFG::AbstractValue *)&v163[8 * v35 + 2]);
  }
  return 0;
}

uint64_t JSC::DFG::prepareCatchOSREntry(uint64_t a1, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  _QWORD *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;

  if (!BYTE5(qword_1ECF4C414))
  {
    v50 = *(_QWORD *)(a4 + 120);
    if (v50)
    {
      v51 = (unsigned int *)(v50 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
    }
    v53 = *(unsigned __int8 *)(v50 + 12);
    v54 = (unsigned int *)(v50 + 8);
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, (unsigned int *)(v50 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    }
    if (v53 == 4)
      return 0;
  }
  if (!BYTE6(qword_1ECF4C414))
  {
    v57 = *(_QWORD *)(a4 + 120);
    if (v57)
    {
      v58 = (unsigned int *)(v57 + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    v60 = *(unsigned __int8 *)(v57 + 12);
    v61 = (unsigned int *)(v57 + 8);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, (unsigned int *)(v57 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    }
    if (v60 == 5)
      return 0;
  }
  v10 = *(unsigned int **)(a4 + 120);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v10 + 2;
  v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 72))(v10);
  do
  {
    v15 = __ldaxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 32))(v10);
  }
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984582A8);
  }
  v17 = *(unsigned int **)(v14 + 80);
  if (!v17)
    return 0;
  v18 = *v17;
  if (*v17 >= 2)
  {
    v19 = 0;
    v45 = v17 + 2;
    v20 = *v17;
    while (1)
    {
      v46 = v19 + ((v20 - 1) >> 1);
      if (v18 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x1984583ACLL);
      }
      v47 = v45[6 * v46 + 4];
      if (v47 == a5)
        break;
      v48 = (v20 - 1) >> 1;
      v20 -= v48 + 1;
      if (v47 <= a5)
      {
        v49 = v48 + 1;
      }
      else
      {
        v20 = v48;
        v49 = 0;
      }
      v19 += v49;
      if (v20 <= 1)
        goto LABEL_14;
    }
    v22 = &v45[6 * v46];
  }
  else
  {
    LODWORD(v19) = 0;
    v20 = *v17;
LABEL_14:
    if (!v20)
      return 0;
    if (v18 <= v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1984582C8);
    }
    v21 = &v17[6 * v19];
    if (v21[6] != a5)
      return 0;
    v22 = v21 + 2;
  }
  v23 = (unsigned int *)*((_QWORD *)v22 + 1);
  if (v23)
  {
    v26 = *v23;
    v24 = v23 + 1;
    v25 = v26;
    if (v26)
    {
      v27 = 0;
      do
      {
        if (v25 <= v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198458260);
        }
        v28 = *(_QWORD *)((char *)a2 + (((v27 << 32) + 0x500000000) >> 29));
        if (*((_BYTE *)v24 + v27) != 4)
        {
          switch(*((_BYTE *)v24 + v27))
          {
            case 0:
            case 6:
              goto LABEL_24;
            case 1:
              if (v28 <= 0xFFFDFFFFFFFFFFFFLL)
                return 0;
              goto LABEL_24;
            case 5:
              if ((v28 & 0xFFFFFFFFFFFFFFFELL) != 6)
                return 0;
              goto LABEL_24;
            default:
              __break(0xC471u);
              JUMPOUT(0x198458374);
          }
        }
        if ((v28 & 0xFFFE000000000002) != 0)
          return 0;
LABEL_24:
        v27 = (v27 + 1);
      }
      while (v25 > v27);
    }
  }
  v29 = *(_DWORD *)(v14 + 200);
  if (v29 <= *(_DWORD *)(v14 + 204))
    v29 = *(_DWORD *)(v14 + 204);
  if (*(_QWORD *)(a1 + 8) > (unint64_t)a2 + 8 * (int)~v29)
    return 0;
  v30 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 80);
  v31 = (unsigned __int8 *)(*v30 + ((unint64_t)JSC::CallFrame::bytecodeIndex(a2) >> 2));
  v32 = *v31;
  if (v32 == 128)
  {
    v33 = *((unsigned __int16 *)v31 + 3);
  }
  else if (v32 == 130)
  {
    v33 = *(_DWORD *)(v31 + 10);
  }
  else
  {
    v33 = v31[3];
  }
  v34 = *(_QWORD *)(a3 + 136);
  v35 = *(unsigned __int16 *)(v34 + 30);
  if (!*(_WORD *)(v34 + 30))
    v35 = *(_DWORD *)(v34 + 156);
  v36 = *(unsigned int **)(((v34 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v33);
  v37 = *(_QWORD **)(v14 + 184);
  v38 = *v36;
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = 0;
    v41 = v37 + 1;
    v42 = 6;
    do
    {
      v43 = (int)v36[v42];
      if ((v43 & 0x80000000) != 0)
      {
        v41[v39++] = *((_QWORD *)a2 + v43);
        v38 = *v36;
      }
      ++v40;
      v42 += 6;
    }
    while (v40 < v38);
    v37 = *(_QWORD **)(v14 + 184);
  }
  else
  {
    v39 = 0;
  }
  *v37 = 8 * v39;
  *(_BYTE *)(a1 + 56) |= 8u;
  *((_QWORD *)a2 + 2) = a4;
  return *(_QWORD *)v22;
}

uint64_t JSC::DFG::runPhase<JSC::DFG::OSREntrypointCreationPhase>(JSC::DFG::Graph *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  JSC::DFG::OSREntrypointCreationPhase::OSREntrypointCreationPhase((JSC::DFG::OSREntrypointCreationPhase *)v10, a1);
  v1 = JSC::DFG::runAndLog<JSC::DFG::OSREntrypointCreationPhase>(v10);
  JSC::DFG::OSREntrypointCreationPhase::~OSREntrypointCreationPhase((JSC::DFG::OSREntrypointCreationPhase *)v10, v2, v3, v4, v5, v6, v7, v8);
  return v1;
}

uint64_t JSC::DFG::OSRExit::OSRExit(uint64_t a1, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::DFG::Graph *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;

  v8 = a7;
  v9 = a6;
  v14 = *(_QWORD *)(a5 + 5480);
  v15 = (_BYTE *)(a5 + 5488);
  if ((v14 & 1) != 0)
  {
    v23 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v24 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v44 = v23;
      v54 = a2;
      v23 = WTF::fastMalloc((WTF *)0x10);
      a2 = v54;
      *(_QWORD *)v23 = v44;
      *(_DWORD *)(v23 + 8) = v24;
      v26 = 1;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v14 = v23 | v26;
  }
  v16 = *(_QWORD *)(a5 + 5472);
  if ((v16 & 1) != 0)
  {
    v27 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v28 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v45 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v55 = a2;
      v46 = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
      v27 = WTF::fastMalloc((WTF *)0x10);
      a2 = v55;
      *(_QWORD *)v27 = v45;
      *(_DWORD *)(v27 + 8) = v46;
      v30 = 1;
    }
    else
    {
      v30 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v27 = v28 << 36;
    }
    v16 = v27 | v30;
  }
  v17 = v15[1];
  v18 = *(_QWORD *)(a5 + 3976);
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 + 20);
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = a2;
  v19 = v14;
  *(_BYTE *)(a1 + 5) = v17;
  if ((v14 & 1) != 0)
  {
    v31 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v32 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v47 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v56 = v18;
      v52 = v16;
      v48 = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
      v31 = WTF::fastMalloc((WTF *)0x10);
      v16 = v52;
      LODWORD(v18) = v56;
      *(_QWORD *)v31 = v47;
      *(_DWORD *)(v31 + 8) = v48;
      v34 = 1;
    }
    else
    {
      v34 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v19 = v31 | v34;
  }
  *(_QWORD *)(a1 + 8) = v19;
  if ((v16 & 1) != 0)
  {
    v35 = v16 & 0xFFFFFFFF8;
    v36 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v37 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
        ? (v38 = (_DWORD)v37 == -1)
        : (v38 = 1),
          v38))
    {
      v39 = 2;
    }
    else if (v37 >> 28)
    {
      v53 = v35;
      v57 = v18;
      v49 = v36;
      v50 = v37;
      v18 = WTF::fastMalloc((WTF *)0x10);
      v35 = v53;
      *(_QWORD *)v18 = v49;
      *(_DWORD *)(v18 + 8) = v50;
      v39 = 1;
      v36 = v18;
      LODWORD(v18) = v57;
    }
    else
    {
      v39 = v36;
      v36 = v37 << 36;
    }
    *(_QWORD *)(a1 + 16) = v36 | v39;
    *(_DWORD *)(a1 + 24) = -1;
    *(_DWORD *)(a1 + 28) = v18;
    if (v35)
      WTF::fastFree(v35, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v16;
    *(_DWORD *)(a1 + 24) = -1;
    *(_DWORD *)(a1 + 28) = v18;
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  v20 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v40 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || (v41 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v41 == 0x3FFFFFFF)
      || (_DWORD)v41 == -1)
    {
      v42 = 2;
    }
    else if (v41 >> 28)
    {
      v51 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = v40;
      *(_DWORD *)(v51 + 8) = v41;
      v42 = 1;
      v40 = v51;
    }
    else
    {
      v42 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v20 = v40 | v42;
  }
  *(_QWORD *)(a1 + 48) = v20;
  v21 = *(_BYTE *)(a4 + 12);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a4 + 8);
  *(_BYTE *)(a1 + 60) = v21;
  *(_DWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 68) = v9;
  if (!*v15)
  {
    v43 = *(JSC::DFG::Graph **)(a5 + 3976);
    if (v43)
    {
      if (JSC::DFG::mayExit(*(JSC::DFG **)(a5 + 3960), v43, a3) - 1 < 2)
        return a1;
      v43 = *(JSC::DFG::Graph **)(a5 + 3976);
    }
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a5 + 3960), v43, (const WTF::CString *)"./dfg/DFGOSRExit.cpp", (const char *)0x3E, "JSC::DFG::OSRExit::OSRExit(ExitKind, JSValueSource, MethodOfGettingAValueProfile, SpeculativeJIT *, unsigned int, unsigned int)", "canExit");
    __break(0xC471u);
    JUMPOUT(0x1984586ECLL);
  }
  return a1;
}

uint64_t JSC::DFG::MinifiedGraph::at(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 12);
  if (v2 < 2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(a1 + 12);
LABEL_9:
    if (v4)
    {
      if (v3 >= v2)
      {
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x198458874);
      }
      if (*(_DWORD *)(*(_QWORD *)a1 + 13 * v3 + 8) == a2)
        return *(_QWORD *)a1 + 13 * v3;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = *(unsigned int *)(a1 + 12);
    while (1)
    {
      v5 = v4 - 1;
      v6 = v3 + ((v4 - 1) >> 1);
      if (v6 >= v2)
        goto LABEL_17;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 13 * v6 + 8);
      if (v7 == a2)
        return *(_QWORD *)a1 + 13 * v6;
      v4 -= (v5 >> 1) + 1;
      if (v7 <= a2)
      {
        v8 = (v5 >> 1) + 1;
      }
      else
      {
        v4 = v5 >> 1;
        v8 = 0;
      }
      v3 += v8;
      if (v4 <= 1)
        goto LABEL_9;
    }
  }
}

_QWORD *WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::add<JSC::VirtualRegister>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 8 * v27;
        goto LABEL_12;
      }
      if (v16 == -2)
        v25 = v15;
      v14 = (v14 + v26) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v26;
    }
    while (*v15 != -1);
    if (v25)
    {
      *v25 = 0x3FFFFFFFFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v25;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::expand(a2, v15);
    v15 = result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_16;
LABEL_11:
  v23 = v19 + 8 * v22;
  v24 = 1;
LABEL_12:
  *v7 = v15;
  v7[1] = v23;
  *((_BYTE *)v7 + 16) = v24;
  return result;
}

void operationCompileOSRExit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::ARM64LogicalImmediate **v3;
  JSC::ARM64LogicalImmediate *v4;
  uint64_t v5;
  BOOL v6;
  unsigned int **v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _DWORD *v46;
  unsigned int *v47;
  int v48;
  unsigned int *v49;
  unint64_t v50;
  pthread_key_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  unsigned int v61;
  JSC::CodeBlock *v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  _DWORD *v81;
  char *v82;
  int v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unint64_t v92;
  unint64_t ArrayProfile;
  WTF::Lock *v94;
  int v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::once_flag::_State_type *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  WTF *v209;
  int v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  int v214;
  unint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  int *v224;
  unint64_t v225;
  BOOL v226;
  unsigned int v227;
  int v228;
  int *v229;
  unint64_t v230;
  int v231;
  int *v232;
  uint64_t v233;
  unint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  pthread_key_t *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  WTF *v257;
  unsigned int v258;
  BOOL v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const void *v267;
  size_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int8 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int i;
  unsigned int v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const void *v382;
  size_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  WTF::PrintStream *v388;
  unint64_t v389;
  unint64_t v390;
  _DWORD *v391;
  WTF::PrintStream *v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  WTF::PrintStream *v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  const void *v404;
  size_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  char v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int *v417;
  WTF *v418;
  JSC::CodeBlock *v419;
  unsigned int v420;
  unsigned int *v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  unsigned int v425;
  _DWORD *v426;
  _DWORD *v427;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _DWORD *v445;
  void *v446;
  JSC::ARM64LogicalImmediate *v447;
  unsigned int v448;
  unsigned int v449;
  WTF *v450;
  uint64_t v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int *v454;
  unsigned int *v455;
  unsigned int v456;
  unsigned int *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  WTF *v483;
  uint64_t v484;
  unsigned int v485;
  uint8x8_t v486;
  __int32 v487;
  uint8x8_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  WTF *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int *v551;
  unsigned int *v552;
  unsigned int v553;
  uint64_t v554;
  uint64_t v555;
  _DWORD *v556;
  unsigned int *v557;
  unsigned int v558;
  unsigned int v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  BOOL v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  BOOL v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  BOOL v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  char v654;
  int v655;
  uint64_t v656;
  WTF *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unsigned int v669;
  unsigned int *v670;
  unsigned int *v671;
  unsigned int v672;
  unsigned int *v673;
  uint64_t v674;
  unsigned int v675;
  unsigned int v676;
  JSC::Profiler::Database *v677;
  unsigned int *v678;
  unsigned int *v679;
  unsigned int v680;
  unsigned int *v681;
  uint64_t v682;
  unsigned int v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  void *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  unsigned int *v711;
  unsigned int v712;
  unsigned int v713;
  unint64_t v714;
  void *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  char v722;
  unint64_t v723;
  uint64_t v724;
  JSC::CodeOrigin *v725;
  uint64_t v726;
  uint64_t v727;
  _DWORD *v728;
  JSC::ARM64LogicalImmediate *v729;
  JSC::CodeBlock *v730;
  JSC::ARM64LogicalImmediate *v731;
  WTF *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD v735[3];
  JSC::ValueRecovery *v736;
  _QWORD *v737;
  const char *v738;
  uint64_t v739;
  const char *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743[4];
  char v744;
  int v745[2];
  __int128 v746;
  WTF *v747;
  char v748;
  JSC::ARM64LogicalImmediate *v749;
  char v750;
  uint64_t v751;
  int v752;
  int v753;
  unsigned int v754;
  char v755;
  int v756;
  int v757;
  __int128 v758;
  __int128 v759;
  uint64_t v760;
  unsigned int v761[6];
  char v762;
  uint64_t v763;
  uint64_t v764;
  unint64_t v765;
  WTF *v766;
  _BYTE v767[128];
  unsigned int v768;
  unsigned int v769;
  int v770;
  char v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  unsigned int *v775;
  char v776;
  uint64_t v777;
  int v778;
  unsigned int *v779;
  char v780;
  uint64_t v781;
  int v782;
  char v783;
  JSC::CodeBlock *v784;
  uint64_t v785;
  WTF *v786;
  uint64_t v787;
  __int128 v788;
  _BYTE v789[128];
  uint64_t v790;

  v790 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 8) != 0)
    v3 = (JSC::ARM64LogicalImmediate **)(v2 - 16);
  else
    v3 = (JSC::ARM64LogicalImmediate **)(v2 & 0xFFFFFFFFFFFFC000 | 8);
  v4 = *v3;
  v5 = (uint64_t)*v3 + 90480;
  *(_QWORD *)(a2 - 8) = 312;
  if (*(_QWORD *)v5)
    v6 = *(_QWORD *)v5 == a1;
  else
    v6 = 1;
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19845B2F4);
  }
  v8 = *(unsigned int ***)(a1 + 16);
  v729 = v4;
  ++*((_DWORD *)v4 + 229);
  v9 = *(unsigned int *)(v5 + 56);
  v10 = v8[15];
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(_DWORD **)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 88))(v10) + 264);
  if (*v13 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19845AA58);
  }
  v14 = v13 + 2;
  v731 = (JSC::ARM64LogicalImmediate *)&v13[18 * v9 + 2];
  v15 = v10 + 2;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 32))(v10);
  }
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v18 = v8[15];
  if (v18)
  {
    v19 = v18 + 2;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v21 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 88))(v18);
  v22 = *((_QWORD *)v731 + 1);
  v725 = (JSC::ARM64LogicalImmediate *)((char *)v731 + 8);
  v728 = v14;
  v724 = a2;
  if ((v22 & 1) != 0)
  {
    v571 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v572 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v572 != 0x3FFFFFFF)
        ? (v573 = (_DWORD)v572 == -1)
        : (v573 = 1),
          v573))
    {
      v574 = 2;
    }
    else if (v572 >> 28)
    {
      v706 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v706 = v571;
      *(_DWORD *)(v706 + 8) = v572;
      v574 = 1;
      v571 = v706;
    }
    else
    {
      v574 = v571;
      v571 = v572 << 36;
    }
    v22 = v571 | v574;
    v14 = v728;
  }
  v23 = (_DWORD **)(v21 + 312);
  v730 = (JSC::CodeBlock *)v8;
  v24 = v8[15];
  if (v24)
  {
    v25 = v24 + 2;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v28 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v24 + 88))(v24) + 320;
  v727 = v9;
  v30 = v14[18 * v9 + 17];
  v31 = v22;
  if ((v22 & 1) != 0)
  {
    v575 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v576 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v576 != 0x3FFFFFFF)
        ? (v577 = (_DWORD)v576 == -1)
        : (v577 = 1),
          v577))
    {
      v578 = 2;
    }
    else if (v576 >> 28)
    {
      v707 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v707 = v575;
      *(_DWORD *)(v707 + 8) = v576;
      v578 = 1;
      v575 = v707;
    }
    else
    {
      v578 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v575 = v576 << 36;
    }
    v31 = v575 | v578;
    v14 = v728;
  }
  *(_QWORD *)v761 = v31;
  JSC::DFG::VariableEventStream::reconstruct<(JSC::DFG::VariableEventStream::ReconstructionStyle)0>(v23, (unsigned int *)v730, v761, v28, v30, (uint64_t)&v732, 0, v27, v29);
  if ((v761[0] & 1) != 0 && (*(_QWORD *)v761 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v761 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  v39 = v24 + 2;
  v40 = v727;
  do
  {
    v41 = __ldaxr(v39);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v39));
  if (!v42)
  {
    atomic_store(1u, v24 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 32))(v24);
  }
  if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  v43 = v18 + 2;
  do
  {
    v44 = __ldaxr(v43);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v43));
  if (!v45)
  {
    atomic_store(1u, v18 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 32))(v18);
  }
  v46 = &v14[18 * v727];
  v48 = v46[16];
  v47 = v46 + 16;
  v726 = v5;
  if (v48 == -1)
  {
    v49 = 0;
  }
  else
  {
    v551 = (unsigned int *)*((_QWORD *)v730 + 15);
    if (v551)
    {
      v552 = v551 + 2;
      do
        v553 = __ldaxr(v552);
      while (__stlxr(v553 + 1, v552));
    }
    v554 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v551 + 88))(v551);
    v555 = *v47;
    v556 = *(_DWORD **)(v554 + 272);
    if (*v556 <= v555)
    {
      __break(0xC471u);
      JUMPOUT(0x19845B29CLL);
    }
    v49 = &v556[2 * v555 + 1];
    v557 = v551 + 2;
    do
    {
      v558 = __ldaxr(v557);
      v559 = v558 - 1;
    }
    while (__stlxr(v559, v557));
    if (!v559)
    {
      atomic_store(1u, v551 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v551 + 32))(v551);
    }
  }
  LOBYTE(v761[0]) = 0;
  v762 = 0;
  v764 = 0;
  v763 = 0;
  v765 = 0x8000000080000000;
  v766 = (WTF *)v767;
  v768 = 128;
  v50 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v50 != -1)
  {
    *(_QWORD *)v745 = v743;
    v786 = (WTF *)v745;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v786, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v51 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v59 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v59)
  {
    v59 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v59, v51);
  }
  v60 = *(WTF **)v59;
  if (*(_QWORD *)v59 != v59 + 8)
  {
    v61 = *(_DWORD *)(v59 + 136);
    if (v768 < v61)
    {
      if (v766 && v766 != (WTF *)v767)
      {
        WTF::fastFree((unint64_t)v766, v52, v53, v54, v55, v56, v57, v58);
        v60 = *(WTF **)v59;
        v61 = *(_DWORD *)(v59 + 136);
      }
      v766 = v60;
      v768 = v61;
      *(_QWORD *)v59 = v59 + 8;
      *(_DWORD *)(v59 + 136) = 128;
    }
  }
  v771 = 1;
  v769 = 0;
  v770 = 0;
  v774 = 0u;
  v773 = 0u;
  v772 = 0u;
  v775 = v761;
  v776 = 16;
  v777 = 0;
  v778 = 0x10000;
  v779 = v761;
  v780 = 17;
  v781 = 0;
  v782 = 0x20000;
  v783 = 0;
  v784 = v730;
  v62 = (JSC::CodeBlock *)*((_QWORD *)v730 + 24);
  if (!v62)
    v62 = v730;
  v63 = *((_QWORD *)v62 + 15);
  if (v63)
  {
    v64 = *(unsigned __int8 *)(v63 + 12);
    if ((v64 & 0xFE) != 2)
    {
      if (v64)
      {
        __break(0xC471u);
        JUMPOUT(0x19845B42CLL);
      }
    }
  }
  v785 = (uint64_t)v62;
  v65 = v728;
  if (*((_BYTE *)v731 + 4) == 27)
  {
    JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer((char *)v761, (uint64_t)v729 + 48, v53, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::load64((uint64_t)v761, v5, 29, v566, v567, v568, v569, v570);
  }
  v66 = *((_QWORD *)v730 + 15);
  if (!v66)
    goto LABEL_518;
  v67 = *(unsigned __int8 *)(v66 + 12);
  if (v67 == 3)
  {
    v68 = (((*(_DWORD *)(*((_QWORD *)v730 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
    goto LABEL_63;
  }
  if ((v67 - 4) >= 2)
  {
    if (v67 == 2)
    {
      v68 = JSC::LLInt::frameRegisterCountFor(v730, (JSC::CodeBlock *)v52);
      goto LABEL_63;
    }
LABEL_518:
    __break(0xC471u);
    JUMPOUT(0x19845B2D4);
  }
  v69 = (unsigned int *)(v66 + 8);
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 + 1, v69));
  v68 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 72))(v66) + 200);
  do
  {
    v71 = __ldaxr(v69);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, v69));
  if (!v72)
  {
    atomic_store(1u, (unsigned int *)(v66 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
  }
LABEL_63:
  JSC::MacroAssemblerARM64::add64((uint64_t)v761, -8 * v68, 29, 31, v55, v56, v57, v58);
  if (*(_QWORD *)(v5 + 2536))
  {
    v670 = (unsigned int *)*((_QWORD *)v730 + 15);
    if (v670)
    {
      v671 = v670 + 2;
      do
        v672 = __ldaxr(v671);
      while (__stlxr(v672 + 1, v671));
    }
    v673 = v670 + 2;
    v674 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v670 + 72))(v670) + 192);
    do
    {
      v675 = __ldaxr(v673);
      v676 = v675 - 1;
    }
    while (__stlxr(v676, v673));
    if (!v676)
    {
      atomic_store(1u, v670 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v670 + 32))(v670);
    }
    v40 = v727;
    v65 = v728;
    if (v674)
    {
      v677 = *(JSC::Profiler::Database **)(v5 + 2536);
      v678 = (unsigned int *)*((_QWORD *)v730 + 15);
      if (v678)
      {
        v679 = v678 + 2;
        do
          v680 = __ldaxr(v679);
        while (__stlxr(v680 + 1, v679));
      }
      v681 = v678 + 2;
      v682 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v678 + 72))(v678) + 192);
      do
      {
        v683 = __ldaxr(v681);
        v684 = v683 - 1;
      }
      while (__stlxr(v684, v681));
      if (!v684)
      {
        atomic_store(1u, v678 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v678 + 32))(v678);
      }
      JSC::Profiler::OriginStack::OriginStack((JSC::Profiler::OriginStack *)v745, v677, v730, v725);
      v40 = v727;
      v688 = JSC::Profiler::Compilation::addOSRExit(v682, (void *)v727, (uint64_t)v745, *((unsigned __int8 *)v731 + 4), *((unsigned __int8 *)v731 + 4) == 23, v685, v686, v687);
      JSC::Profiler::OriginStack::~OriginStack((JSC::Profiler::OriginStack *)v745, v689, v690, v691, v692, v693, v694, v695);
      JSC::MacroAssemblerARM64::add64((uint64_t)v761, 1, v688 + 40, v696, v697, v698, v699, v700);
      v65 = v728;
    }
  }
  if (BYTE3(qword_1ECF4C32A))
  {
    v584 = WTF::fastMalloc((WTF *)0x10);
    LODWORD(v589) = -1;
    *(_DWORD *)(v584 + 12) = -1;
    *(_QWORD *)v584 = v784;
    *(_BYTE *)(v584 + 8) = *((_BYTE *)v731 + 4);
    v590 = *((_QWORD *)v731 + 1);
    if ((v590 & 2) == 0)
    {
      if ((v590 & 1) != 0)
        LODWORD(v589) = *(_DWORD *)((v590 & 0xFFFFFFFF8) + 8);
      else
        v589 = v590 >> 36;
    }
    *(_DWORD *)(v584 + 12) = v589;
    JSC::MacroAssembler::probe(v761, (uint64_t)operationDebugPrintSpeculationFailure, v584, 1, v585, v586, v587, v588);
  }
  if (v49)
  {
    v560 = *((unsigned __int8 *)v49 + 5);
    if (v560 == 3)
    {
      JSC::MacroAssemblerARM64::xor64((uint64_t)v761, 6, *((char *)v49 + 4), *((char *)v49 + 4), v76, v77, v78, v79);
      goto LABEL_66;
    }
    if (*((_BYTE *)v49 + 5))
    {
      if (v560 == 1)
      {
        JSC::MacroAssemblerARM64::rshift32(v761, 1, *((char *)v49 + 4), v75, v76, v77, v78, v79);
        JSC::MacroAssemblerARM64::xor32((uint64_t)v761, (JSC::ARM64LogicalImmediate *)0x80000000, *((char *)v49 + 4), *((char *)v49 + 4), v702, v703, v704, v705);
      }
      else
      {
        if (v560 != 2)
          goto LABEL_66;
        JSC::MacroAssemblerARM64::sub32((uint64_t)v761, *((char *)v49 + 4), *v49, *((char *)v49 + 4), v76, v77, v78, v79);
      }
    }
    else
    {
      JSC::MacroAssemblerARM64::sub32(v761, *(char *)v49, *((char *)v49 + 4), v75, v76, v77, v78, v79);
    }
    JSC::MacroAssemblerARM64::or64(v761, 27, *((char *)v49 + 4), v579, v580, v581, v582, v583);
  }
LABEL_66:
  v81 = &v65[18 * v40];
  v83 = *((unsigned __int8 *)v81 + 44);
  v82 = (char *)(v81 + 11);
  if (v83 != 255)
  {
    v84 = (unsigned __int8 *)(v82 - 4);
    v85 = *((unsigned __int8 *)v731 + 4);
    if (v85 > 0x1D || ((1 << v85) & 0x200000A0) == 0)
    {
LABEL_91:
      v96 = *(_QWORD *)&v65[18 * v40 + 12];
      if ((v96 & 1) != 0)
      {
        v629 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
        if ((v96 & 2) != 0
          || ((v630 = *(unsigned int *)((v96 & 0xFFFFFFFF8) + 8), (_DWORD)v630 != 0x3FFFFFFF)
            ? (v631 = (_DWORD)v630 == -1)
            : (v631 = 1),
              v631))
        {
          v632 = 2;
        }
        else if (v630 >> 28)
        {
          v708 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v708 = v629;
          *(_DWORD *)(v708 + 8) = v630;
          v632 = 1;
          v629 = v708;
        }
        else
        {
          v632 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
          v629 = v630 << 36;
        }
        v96 = v629 | v632;
      }
      *(_QWORD *)v745 = v96;
      v97 = &v65[18 * v40];
      v98 = v97[14];
      BYTE4(v746) = *((_BYTE *)v97 + 60);
      LODWORD(v746) = v98;
      if ((((unint64_t)BYTE4(v746) << 32) & 0x1C00000000) != 0)
      {
        v271 = *(unsigned int *)v84;
        if ((_DWORD)v271 == 0x80000000)
        {
          JSC::MethodOfGettingAValueProfile::emitReportValue((unint64_t *)v745, (uint64_t)v761, v784, *v82, 28, 0, v78, v79);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, 0xFFFE000000000002, 28, v272, v273, v274, v275, v276);
        }
        else
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)v761, *v82 | (unint64_t)(v271 << 32), 27, v75, v76, v77, v78, v79);
          JSC::MethodOfGettingAValueProfile::emitReportValue((unint64_t *)v745, (uint64_t)v761, v784, 27, 28, 0, v365, v366);
          v374 = v769;
          if (v769 + 4 > v768)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v367, v368, v369, v370, v371, v372, v373);
            v374 = v769;
          }
          *(_DWORD *)((char *)v766 + v374) = -1303430149;
          v769 += 4;
          JSC::MacroAssemblerARM64::or64((uint64_t)v761, 2, 27, 28);
        }
      }
      if ((v745[0] & 1) != 0 && (*(_QWORD *)v745 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*(_QWORD *)v745 & 0xFFFFFFFF8, v73, v74, v75, v76, v77, v78, v79);
      goto LABEL_94;
    }
    v86 = *((_QWORD *)v731 + 2);
    if ((v86 & 1) != 0)
    {
      v659 = *(_QWORD *)(v86 & 0xFFFFFFFF8);
      if ((v86 & 2) != 0
        || (v660 = *(unsigned int *)((v86 & 0xFFFFFFFF8) + 8), (_DWORD)v660 == 0x3FFFFFFF)
        || (_DWORD)v660 == -1)
      {
        v661 = 2;
      }
      else if (v660 >> 28)
      {
        v709 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v709 = v659;
        *(_DWORD *)(v709 + 8) = v660;
        v661 = 1;
        v659 = v709;
      }
      else
      {
        v661 = v659;
        v659 = v660 << 36;
      }
      v86 = v659 | v661;
    }
    v87 = v785;
    v88 = (uint64_t *)(v86 & 0xFFFFFFFF8);
    v89 = v86 & 0xFFFFFFFF8;
    if ((v86 & 1) != 0)
      v89 = *v88;
    if (v89)
      v87 = *(_QWORD *)(v89 + 8);
    v90 = (unsigned __int8 *)(v87 + 16);
    LOBYTE(v747) = 0;
    *(_QWORD *)&v746 = v87 + 16;
    BYTE8(v746) = 1;
    if (__ldaxr((unsigned __int8 *)(v87 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v90))
    {
LABEL_77:
      LOBYTE(v747) = 1;
      if ((v86 & 2) != 0)
      {
        LODWORD(v92) = -1;
      }
      else if ((v86 & 1) != 0)
      {
        LODWORD(v92) = *(_DWORD *)((v86 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v92 = v86 >> 36;
      }
      ArrayProfile = JSC::CodeBlock::getArrayProfile(v87, v80, (uint64_t)v745, v92);
      if (!(_BYTE)v747 || !BYTE8(v746))
        goto LABEL_89;
      v94 = (WTF::Lock *)v746;
      v95 = __ldxr((unsigned __int8 *)v746);
      if (v95 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v746))
          goto LABEL_89;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v94, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
LABEL_89:
      if (ArrayProfile)
      {
        v280 = *v82;
        v281 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID>(v280);
        v289 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(v280, v281);
        v290 = v769;
        if (v769 + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v282, v283, v284, v285, v286, v287, v288);
          v290 = v769;
        }
        *(_DWORD *)((char *)v766 + v290) = v281 | 0xF81F0FE0;
        v291 = v769;
        v292 = v769 + 4;
        v769 += 4;
        if (v291 + 8 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v282, v283, v284, v285, v286, v287, v288);
          v292 = v769;
        }
        *(_DWORD *)((char *)v766 + v292) = v289 | 0xF81F0FE0;
        v769 += 4;
        v293 = *((unsigned int *)v82 - 1);
        v294 = *v82;
        if ((_DWORD)v293 != 0x80000000)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)v761, v294 | (v293 << 32), v281, v284, v285, v286, v287, v288);
          LOBYTE(v294) = v281;
        }
        v295 = v294;
        v296 = v294;
        JSC::MacroAssemblerARM64::load32((uint64_t)v761, v294, v281, v284, v285, v286, v287, v288);
        JSC::MacroAssemblerARM64::store32((uint64_t)v761, v281, (JSC::ARM64LogicalImmediate *)ArrayProfile, v297, v298, v299, v300, v301);
        JSC::MacroAssemblerARM64::load8((uint64_t)v761, v295 | 0x500000000, v289, v302, v303, v304, v305, v306);
        v314 = v769;
        if (v769 + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v307, v308, v309, v310, v311, v312, v313);
          v314 = v769;
        }
        *(_DWORD *)((char *)v766 + v314) = v289 | (32 * v289) | 0x51009C00;
        v769 += 4;
        JSC::MacroAssemblerARM64::branch32((uint64_t)v761, 2, v289, 11, v310, v311, v312, v313, (uint64_t)v745);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)JSC::typedArrayModes, v281, v315, v316, v317, v318, v319);
        JSC::MacroAssemblerARM64::load32((uint64_t)v761, v281 | ((unint64_t)v289 << 8) | 0x200000000, 0x200000000uLL, v289, v320, v321, v322, v323);
        for (i = v769; (int)i < SHIDWORD(v765); v769 = i)
        {
          if (i + 4 > v768)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v324, v325, v326, v327, v328, v329, v330);
            i = v769;
          }
          *(_DWORD *)((char *)v766 + i) = -721215457;
          i = v769 + 4;
        }
        v332 = i;
        if (i + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v324, v325, v326, v327, v328, v329, v330);
          v332 = v769;
        }
        *(_DWORD *)((char *)v766 + v332) = 335544320;
        v769 += 4;
        if (v783)
          v333 = 69;
        else
          v333 = 65;
        v786 = (WTF *)i;
        LOBYTE(v787) = v333;
        *(_WORD *)((char *)&v787 + 1) = 15;
        BYTE3(v787) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v745, (uint64_t)v761, v325, v326, v327, v328, v329, v330);
        JSC::MacroAssemblerARM64::load8((uint64_t)v761, v296 | 0x400000000, v281, v334, v335, v336, v337, v338);
        JSC::MacroAssemblerARM64::and32((uint64_t)v761, (JSC::ARM64LogicalImmediate *)0x1F, v281, v281);
        v346 = v769;
        if (v769 + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v339, v340, v341, v342, v343, v344, v345);
          v346 = v769;
        }
        *(_DWORD *)((char *)v766 + v346) = v289 | 0x320003E0;
        v347 = v769;
        v348 = v769 + 4;
        v769 += 4;
        if (v347 + 8 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v339, v340, v341, v342, v343, v344, v345);
          v348 = v769;
        }
        *(_DWORD *)((char *)v766 + v348) = ((v281 & 0x1F) << 16) | (32 * (v289 & 0x1F)) | v289 & 0x1F | 0x1AC02000;
        v769 += 4;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v786, (uint64_t)v761, v340, v341, v342, v343, v344, v345);
        if (!v771)
        {
          __break(0xC471u);
          JUMPOUT(0x19845B1F4);
        }
        v775[52] &= ~v778;
        JSC::MacroAssemblerARM64::load32((uint64_t)v761, ArrayProfile + 8, v776, v349, v350, v351, v352, v353);
        v361 = v769;
        if (v769 + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v354, v355, v356, v357, v358, v359, v360);
          v361 = v769;
        }
        *(_DWORD *)((char *)v766 + v361) = ((v289 & 0x1F) << 16) | 0x2A000210;
        v769 += 4;
        JSC::MacroAssemblerARM64::store32((uint64_t)v761, 16, (JSC::ARM64LogicalImmediate *)(ArrayProfile + 8), v356, v357, v358, v359, v360);
        v362 = v769;
        v40 = v727;
        if (v769 + 4 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
          v362 = v769;
        }
        *(_DWORD *)((char *)v766 + v362) = v289 | 0xF84107E0;
        v363 = v769;
        v364 = v769 + 4;
        v769 += 4;
        v84 = (unsigned __int8 *)(v82 - 4);
        if (v363 + 8 > v768)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
          v364 = v769;
        }
        *(_DWORD *)((char *)v766 + v364) = v281 | 0xF84107E0;
        v769 += 4;
        v65 = v728;
      }
      if ((v86 & 1) != 0 && v88)
        WTF::fastFree(v86 & 0xFFFFFFFF8, v73, v74, v75, v76, v77, v78, v79);
      goto LABEL_91;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v90);
    goto LABEL_77;
  }
LABEL_94:
  v99 = JSC::VM::scratchBufferForSize(v729, 8 * HIDWORD(v733), v74, v75, v76, v77, v78, v79);
  if (v99)
    v106 = v99 + 8;
  else
    v106 = 0;
  v107 = HIDWORD(v733);
  if (HIDWORD(v733))
  {
    v108 = 0;
    v109 = 0;
    v110 = v106;
    do
    {
      v111 = *((unsigned __int8 *)v732 + v108);
      if (v111 <= 5 && v111 != 4)
      {
        JSC::MacroAssemblerARM64::store64((uint64_t)v761, *((char *)v732 + v108 + 1), v110, v101, v102, v103, v104, v105);
        v107 = HIDWORD(v733);
      }
      ++v109;
      v110 += 8;
      v108 += 9;
    }
    while (v109 < v107);
    if (v107)
    {
      v113 = 0;
      v114 = 0;
      v115 = v106;
      do
      {
        v116 = v732;
        if ((*((_BYTE *)v732 + v113) & 0xFE) == 6)
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v115, 0, v101, v102, v103, v104, v105);
          JSC::MacroAssemblerARM64::storeDouble((uint64_t)v761, *((char *)v116 + v113 + 1), 0, v561, v562, v563, v564, v565);
          v107 = HIDWORD(v733);
        }
        ++v114;
        v113 += 9;
        v115 += 8;
      }
      while (v114 < v107);
    }
  }
  LOBYTE(v786) = 0;
  *(_QWORD *)v745 = &v786;
  JSC::CodeOrigin::walkUpInlineStack<JSC::CodeOrigin::inlineStackContainsActiveCheckpoint(void)::{lambda(JSC::CodeOrigin)#1}>((uint64_t *)v725, (_BYTE **)v745, v100, v101, v102, v103, v104, v105);
  v124 = v786;
  if ((_BYTE)v786)
    v125 = HIDWORD(v734) + (unint64_t)v734;
  else
    v125 = HIDWORD(v733);
  v126 = v769;
  if (v769 + 4 > v768)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v117, v118, v119, v120, v121, v122, v123);
    v126 = v769;
  }
  *(_DWORD *)((char *)v766 + v126) = -1303430149;
  v769 += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)v761, 2, 27, 28);
  if (HIDWORD(v733))
  {
    v132 = 0;
    v133 = 0;
    v134 = v106;
    v135 = v106;
    do
    {
      v136 = v732;
      if (*((_BYTE *)v732 + v132) != 17)
      {
        switch(*((_BYTE *)v732 + v132))
        {
          case 1:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, v135, 0, v127, v128, v129, v130, v131);
            goto LABEL_125;
          case 2:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, v135, 0, v127, v128, v129, v130, v131);
            goto LABEL_483;
          case 3:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, v135, 0, v127, v128, v129, v130, v131);
            goto LABEL_486;
          case 7:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v134, 1, v127, v128, v129, v130, v131);
            v499 = 1;
            goto LABEL_389;
          case 8:
          case 0xD:
          case 0xE:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, (*(_QWORD *)((char *)v732 + v132 + 1) << 35) | 0x1DLL, 0, v127, v128, v129, v130, v131);
            goto LABEL_123;
          case 9:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, (*(_QWORD *)((char *)v732 + v132 + 1) << 35) | 0x1DLL, 0, v127, v128, v129, v130, v131);
LABEL_125:
            JSC::MacroAssemblerARM64::and64((uint64_t)v761, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, 0);
            v144 = v769;
            if (v769 + 4 > v768)
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v142, v143, v137, v138, v139, v140, v141);
              v144 = v769;
            }
            *(_DWORD *)((char *)v766 + v144) = -1441071104;
            v769 += 4;
            goto LABEL_123;
          case 0xA:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, (*(_QWORD *)((char *)v732 + v132 + 1) << 35) | 0x1DLL, 0, v127, v128, v129, v130, v131);
LABEL_483:
            v669 = v769;
            if (v769 + 4 > v768)
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v665, v666, v667, v668, v662, v663, v664);
              v669 = v769;
            }
            *(_DWORD *)((char *)v766 + v669) = -1823671296;
            v769 += 4;
            goto LABEL_486;
          case 0xB:
            JSC::MacroAssemblerARM64::load64((uint64_t)v761, (*(_QWORD *)((char *)v732 + v132 + 1) << 35) | 0x1DLL, 0, v127, v128, v129, v130, v131);
LABEL_486:
            JSC::AssemblyHelpers::boxInt52((uint64_t)v761, 0, 0, 1, 0, v662, v663, v664);
            goto LABEL_123;
          case 0xC:
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v134, 1, v127, v128, v129, v130, v131);
            v499 = (*(_QWORD *)((char *)v136 + v132 + 1) << 35) | 0x1DLL;
LABEL_389:
            JSC::MacroAssemblerARM64::loadDouble((uint64_t)v761, v499, 0, v494, v495, v496, v497, v498);
            JSC::AssemblyHelpers::purifyNaN((uint64_t)v761, 0, v500, v501, v502, v503, v504, v505);
            JSC::AssemblyHelpers::boxDouble(v761, 0, 0, 1, v506, v507, v508, v509);
            JSC::MacroAssemblerARM64::store64((uint64_t)v761, 0, 1, v510, v511, v512, v513, v514);
            goto LABEL_119;
          default:
            goto LABEL_119;
        }
      }
      if (v133 >= v125)
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, *(_QWORD *)((char *)v732 + v132 + 1), 0, v127, v128, v129, v130, v131);
LABEL_123:
        JSC::MacroAssemblerARM64::store64((uint64_t)v761, 0, v135, v137, v138, v139, v140, v141);
      }
LABEL_119:
      ++v133;
      v135 += 8;
      v132 += 9;
      v134 += 8;
    }
    while (v133 < HIDWORD(v733));
  }
  v145 = (unsigned int *)*((_QWORD *)v784 + 15);
  if (v145)
  {
    v146 = v145 + 2;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 + 1, v146));
  }
  v148 = v145 + 2;
  v149 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v145 + 72))(v145);
  JSC::MacroAssemblerARM64::add64((uint64_t)v761, (-8 * *(_DWORD *)(v149 + 204)), 29, 31, v150, v151, v152, v153);
  do
  {
    v160 = __ldaxr(v148);
    v161 = v160 - 1;
  }
  while (__stlxr(v161, v148));
  if (!v161)
  {
    atomic_store(1u, v145 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v145 + 32))(v145);
  }
  v162 = *((_QWORD *)v784 + 15);
  if (v162)
  {
    v163 = (unsigned int *)(v162 + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 + 1, v163));
    v165 = *(unsigned __int8 *)(v162 + 12);
    if (v165 == 5)
    {
      v167 = (uint64_t *)(v162 + 256);
    }
    else if (v165 == 4)
    {
      v277 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v277 != -1)
      {
        *(_QWORD *)v745 = v743;
        v786 = (WTF *)v745;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v786, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v167 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v166 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v166 != -1)
      {
        *(_QWORD *)v745 = v743;
        v786 = (WTF *)v745;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v786, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v167 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)v761, (const JSC::RegisterAtOffsetList *)v167, v154, v155, v156, v157, v158, v159);
    do
    {
      v174 = __ldaxr(v163);
      v175 = v174 - 1;
    }
    while (__stlxr(v175, v163));
    if (!v175)
    {
      atomic_store(1u, (unsigned int *)(v162 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 32))(v162);
    }
  }
  else
  {
    v591 = JSC::JITCode::calleeSaveRegisters(0);
    JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)v761, (const JSC::RegisterAtOffsetList *)v591, v592, v593, v594, v595, v596, v597);
  }
  v176 = *(_QWORD *)(v785 + 120);
  if (v176)
  {
    v177 = (unsigned int *)(v176 + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 + 1, v177));
    v179 = *(unsigned __int8 *)(v176 + 12);
    if (v179 == 5)
    {
      v181 = (uint64_t *)(v176 + 256);
    }
    else if (v179 == 4)
    {
      v278 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v278 != -1)
      {
        *(_QWORD *)v745 = v743;
        v786 = (WTF *)v745;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v786, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v181 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v180 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v180 != -1)
      {
        *(_QWORD *)v745 = v743;
        v786 = (WTF *)v745;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v786, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v181 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    JSC::AssemblyHelpers::emitSaveCalleeSavesFor((JSC::AssemblyHelpers *)v761, (const JSC::RegisterAtOffsetList *)v181, v168, v169, v170, v171, v172, v173);
    do
    {
      v189 = __ldaxr(v177);
      v190 = v189 - 1;
    }
    while (__stlxr(v190, v177));
    if (!v190)
    {
      atomic_store(1u, (unsigned int *)(v176 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 32))(v176);
    }
  }
  else
  {
    v598 = JSC::JITCode::calleeSaveRegisters(0);
    JSC::AssemblyHelpers::emitSaveCalleeSavesFor((JSC::AssemblyHelpers *)v761, (const JSC::RegisterAtOffsetList *)v598, v599, v600, v601, v602, v603, v604);
  }
  v191 = v769;
  if (v769 + 4 > v768)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, v182, v183, v184, v185, v186, v187, v188);
    v191 = v769;
  }
  *(_DWORD *)((char *)v766 + v191) = -1303430149;
  v769 += 4;
  JSC::MacroAssemblerARM64::or64((uint64_t)v761, 2, 27, 28);
  if (v124)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v106 + 8 * (HIDWORD(v734) + (unint64_t)v734), 2, v192, v193, v194, v195, v196);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)v731, 1, v633, v634, v635, v636, v637);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)v729, 0, v638, v639, v640, v641, v642);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)operationMaterializeOSRExitSideState, 8, v643, v644, v645, v646, v647);
    v770 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v766, 3594453248, v648, v649, v650, v651, v652, v653);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v106, 2, v192, v193, v194, v195, v196);
  v205 = v769;
  if (v769 + 4 > v768)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, (uint64_t)v198, v199, v200, v201, v202, v203, v204);
    v205 = v769;
  }
  *(_DWORD *)((char *)v766 + v205) = -1440939037;
  v769 += 4;
  *(_QWORD *)v745 = v761;
  LODWORD(v746) = 16777986;
  *(_QWORD *)((char *)&v746 + 4) = 0x1FFFFFFFFLL;
  v748 |= 0x7Fu;
  v750 |= 0x7Fu;
  v751 = 0;
  v752 = 0;
  if (!HIDWORD(v733))
  {
    v233 = (uint64_t)v730;
    goto LABEL_207;
  }
  v206 = 0;
  v207 = 0;
  v208 = 24;
  do
  {
    v209 = v732;
    if (v206 < v734)
    {
      v210 = v206 + 5;
    }
    else
    {
      if (HIDWORD(v734) + (unint64_t)v734 <= v206)
        goto LABEL_190;
      v210 = v734 + ~(_DWORD)v206;
    }
    if ((v210 & 0x80000000) == 0)
      goto LABEL_184;
    v211 = *(_QWORD *)(v785 + 120);
    if (v211)
    {
      v212 = (unsigned int *)(v211 + 8);
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 + 1, v212));
    }
    v214 = *(unsigned __int8 *)(v211 + 12);
    if (v214 == 5)
    {
      v216 = (uint64_t *)(v211 + 256);
    }
    else if (v214 == 4)
    {
      v197 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey;
      v230 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v230 != -1)
      {
        v786 = (WTF *)v735;
        v743[0] = (uint64_t)&v786;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v743, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v216 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v215 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v215 != -1)
      {
        v786 = (WTF *)v735;
        v743[0] = (uint64_t)&v786;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v743, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v216 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    v217 = (unint64_t)(v216[1] + 7) >> 3;
    v218 = (unsigned int *)(v211 + 8);
    do
    {
      v219 = __ldaxr(v218);
      v220 = v219 - 1;
    }
    while (__stlxr(v220, v218));
    if (!v220)
    {
      atomic_store(1u, (unsigned int *)(v211 + 8));
      v197 = (std::once_flag::_State_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v211 + 32))(v211);
    }
    if (~v210 >= (int)v217)
    {
LABEL_184:
      v221 = *((unsigned __int8 *)v209 + 9 * v206);
      if (v221 == 17)
      {
        v222 = *(_QWORD *)((char *)v209 + 9 * v206 + 1);
        if (v222 == 10)
        {
          if ((v207 & 1) == 0)
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, 10, 4, v200, v201, v202, v203, v204);
          v223 = v751;
          LODWORD(v751) = v751 + 1;
          v224 = &v745[6 * v223];
          v207 = 1;
          v224[6] = 1;
          *((_BYTE *)v224 + 32) = 4;
        }
        else
        {
          v231 = v751;
          LODWORD(v751) = v751 + 1;
          v232 = &v745[6 * v231];
          v232[6] = 2;
          *((_QWORD *)v232 + 5) = v222;
        }
        goto LABEL_189;
      }
      v226 = v221 >= 0xF;
      v227 = v221 - 15;
      if (!v226)
      {
        v228 = v751;
        LODWORD(v751) = v751 + 1;
        v229 = &v745[6 * v228];
        v229[6] = 0;
        v229[7] = 8 * v206;
LABEL_189:
        JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)v745, (8 * v210), v199, v200, v201, v202, v203, v204);
        goto LABEL_190;
      }
      if (v227 >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19845A780);
      }
    }
LABEL_190:
    ++v206;
    v225 = HIDWORD(v733);
  }
  while (v206 < HIDWORD(v733));
  v233 = (uint64_t)v730;
  if ((_DWORD)v751)
  {
    if ((_DWORD)v747 == 1)
    {
      v279 = v748 & 0x7F;
    }
    else
    {
      v279 = BYTE2(v746);
      if ((_DWORD)v747)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v745, (uint64_t)v749, SBYTE2(v746), v200, v201, v202, v203, v204);
      else
        JSC::MacroAssemblerARM64::load64(*(uint64_t *)v745, v746 | ((unint64_t)(HIDWORD(v747) - HIDWORD(v751)) << 32), SBYTE2(v746), v200, v201, v202, v203, v204);
    }
    JSC::MacroAssemblerARM64::store64(*(uint64_t *)v745, v279, BYTE1(v746) | ((unint64_t)(v753 - v752) << 32), v200, v201, v202, v203, v204);
    LODWORD(v751) = 0;
    v225 = HIDWORD(v733);
  }
  v743[0] = 0;
  if (v225)
  {
    v234 = 0;
    while (1)
    {
      v235 = (unsigned __int8 *)v732 + 9 * v234;
      if (*v235 - 15 <= 1)
      {
        if (v234 < v734)
        {
          v451 = (v234 + 5);
          goto LABEL_343;
        }
        if (HIDWORD(v734) + (unint64_t)v734 > v234)
          break;
      }
LABEL_204:
      if (++v234 >= v225)
      {
        if (v743[0])
          WTF::fastFree(v743[0] - 16, v198, v199, v200, v201, v202, v203, v204);
        goto LABEL_207;
      }
    }
    v451 = (v734 + ~(_DWORD)v234);
LABEL_343:
    v452 = *(_DWORD *)((char *)v732 + 9 * v234 + 1);
    LODWORD(v735[0]) = v452;
    v453 = v743[0];
    if (v743[0])
    {
      v539 = WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::MinifiedID>>,JSC::DFG::MinifiedID>(v743[0], v452);
      if (v539 && v539 != v453 + 8 * *(unsigned int *)(v453 - 4))
      {
        JSC::MacroAssemblerARM64::load64((uint64_t)v761, ((unint64_t)*(unsigned int *)(v539 + 4) << 35) | 0x1D, 0, v540, v541, v542, v543, v544);
        JSC::MacroAssemblerARM64::store64((uint64_t)v761, 0, (v451 << 35) | 0x1D, v546, v547, v548, v549, v550);
LABEL_399:
        v225 = HIDWORD(v733);
        goto LABEL_204;
      }
    }
    v454 = (unsigned int *)*((_QWORD *)v784 + 15);
    if (v454)
    {
      v455 = v454 + 2;
      do
        v456 = __ldaxr(v455);
      while (__stlxr(v456 + 1, v455));
      v452 = v735[0];
    }
    v457 = v454 + 2;
    v458 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v454 + 88))(v454);
    v723 = v208 & 0xFFFFFFFF00000000 | v452;
    v464 = *(_QWORD *)JSC::DFG::MinifiedGraph::at(v458 + 320, v452);
    do
    {
      v465 = __ldaxr(v457);
      v466 = v465 - 1;
    }
    while (__stlxr(v466, v457));
    if (!v466)
    {
      atomic_store(1u, v454 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v454 + 32))(v454);
    }
    if (!v464)
    {
      v467 = 0;
      goto LABEL_354;
    }
    v467 = HIDWORD(*(_QWORD *)(v464 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v464 + 24) >> 28) >> 24 << 20);
    if ((*(_BYTE *)(v464 + 32) & 1) != 0)
    {
LABEL_354:
      JSC::MacroAssemblerARM64::load64((uint64_t)v761, ((unint64_t)(v467 + 3) << 35) | 0x1D, 0, v459, v460, v461, v462, v463);
      if (v464)
        goto LABEL_505;
    }
    else
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, *(_QWORD *)(v464 + 41), 0, v459, v460, v461, v462, v463);
LABEL_505:
      v701 = *(_QWORD *)(v464 + 24);
      if ((v701 >> 60) - 3 > 2)
      {
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v761, (JSC::ARM64LogicalImmediate *)(v701 & 0x3FFFFF), 1, v468, v469, v470, v471, v472);
LABEL_356:
        v786 = (WTF *)&v788;
        LODWORD(v788) = 50397696;
        v787 = 0x200000002;
        v480 = 2;
        do
        {
          v481 = 0;
          v482 = 0;
          v483 = v786;
          v484 = v480;
          while ((*((_BYTE *)v786 + v481 + 1) & 0x40) == 0)
          {
            v482 |= 1 << *((_BYTE *)v786 + v481 + 1);
            v481 += 2;
            if (2 * v480 == v481)
            {
              v481 = 0;
              while (1)
              {
                v485 = *((_BYTE *)v786 + v481) & 0x7F;
                if (v485 >= 0x40)
                  goto LABEL_512;
                v482 &= ~(1 << v485);
                v481 += 2;
                if (2 * v480 == v481)
                {
                  v486 = (uint8x8_t)vcnt_s8((int8x8_t)v482);
                  v486.i16[0] = vaddlv_u8(v486);
                  v487 = v486.i32[0];
                  v488 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v482));
                  v488.i16[0] = vaddlv_u8(v488);
                  if (v488.i32[0] + v487)
                  {
                    v467 = 0;
                    if (v480 <= 1uLL)
                      v489 = 1;
                    else
                      v489 = v480;
                    v490 = 2 * v489;
                    while (1)
                    {
                      LODWORD(v481) = *((unsigned __int8 *)v786 + v467 + 1);
                      if ((v481 & 0x7Fu) >= 0x40)
                        goto LABEL_512;
                      if (((v482 >> (v481 & 0x7F)) & 1) != 0)
                      {
                        v480 = *((unsigned __int8 *)v786 + v467);
                        if (v480 == (_DWORD)v481)
                          goto LABEL_380;
                        LODWORD(v483) = (char)v481;
                        v480 = (char)v480;
                        if ((char)v480 == 63)
                          goto LABEL_513;
                        if ((_DWORD)v481 != 31 && v480 != 31)
                        {
                          v492 = v481 & 0xFFE0FFFF | ((v480 & 0x1F) << 16) | 0xAA0003E0;
                          goto LABEL_377;
                        }
                        goto LABEL_383;
                      }
                      v467 += 2;
                      if (v490 == v467)
                        goto LABEL_381;
                    }
                  }
                  v654 = *(_BYTE *)v786;
                  v467 = *((char *)v786 + 1);
                  JSC::MacroAssemblerARM64::swap((uint64_t)v761, *(char *)v786, v467, v475, v476, v477, v478, v479);
                  memmove(v786, (char *)v786 + 2, 2 * HIDWORD(v787) - 2);
                  v655 = HIDWORD(v787);
                  v656 = --HIDWORD(v787);
                  if (v655 != 1)
                  {
                    v657 = v786;
                    v658 = 2 * v656;
                    while (*(unsigned __int8 *)v657 != v467)
                    {
                      v657 = (WTF *)((char *)v657 + 2);
                      v658 -= 2;
                      if (!v658)
                        goto LABEL_459;
                    }
                    *(_BYTE *)v657 = v654;
                  }
LABEL_459:
                  WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v786, (uint64_t)&v740, 0);
                  v480 = HIDWORD(v787);
                  goto LABEL_381;
                }
              }
            }
          }
LABEL_512:
          __break(1u);
LABEL_513:
          if ((_DWORD)v483 == 31)
LABEL_383:
            v492 = v483 | (32 * v480) | 0x91000000;
          else
            v492 = v481 & 0x1F | 0xD2800000;
LABEL_377:
          v493 = v769;
          if (v769 + 4 > v768)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v766, (uint64_t)v473, v474, v475, v476, v477, v478, v479);
            v493 = v769;
          }
          *(_DWORD *)((char *)v766 + v493) = v492;
          v769 += 4;
          v483 = v786;
          v484 = HIDWORD(v787);
LABEL_380:
          memmove((char *)v483 + v467, (char *)v483 + v467 + 2, 2 * v484 - v467 - 2);
          v480 = --HIDWORD(v787);
LABEL_381:
          ;
        }
        while (v480);
        v515 = v786;
        if (&v788 != (__int128 *)v786 && v786)
        {
          v786 = 0;
          LODWORD(v787) = 0;
          WTF::fastFree((unint64_t)v515, v473, v474, v475, v476, v477, v478, v479);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, v464, 1, v475, v476, v477, v478, v479);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)v729, 0, v516, v517, v518, v519, v520);
        v526 = *v235;
        v233 = (uint64_t)v730;
        if (v526 == 16)
        {
          v527 = operationCreateClonedArgumentsDuringExit;
        }
        else
        {
          if (v526 != 15)
          {
            __break(0xC471u);
            JUMPOUT(0x19845B138);
          }
          v527 = operationCreateDirectArgumentsDuringExit;
        }
        v208 = v723;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v761, (uint64_t)v527, 8, v521, v522, v523, v524, v525);
        v770 = 0;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v766, 3594453248, v528, v529, v530, v531, v532, v533);
        JSC::MacroAssemblerARM64::store64((uint64_t)v761, 0, (v451 << 35) | 0x1D, v534, v535, v536, v537, v538);
        LODWORD(v740) = v451;
        v197 = WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::add<JSC::VirtualRegister>(&v786, v743, (int *)v735, &v740);
        goto LABEL_399;
      }
    }
    JSC::MacroAssemblerARM64::load32((uint64_t)v761, ((unint64_t)(v467 + 4) << 35) | 0x1D, 1, v468, v469, v470, v471, v472);
    goto LABEL_356;
  }
LABEL_207:
  JSC::DFG::handleExitCounts((uint64_t)v197, (uint64_t)v761, (uint64_t)v731, v200, v201, v202, v203, v204);
  JSC::DFG::reifyInlinedCallFrames((uint64_t)v761, (uint64_t)v731, v236, v237, v238, v239, v240, v241);
  JSC::DFG::adjustAndJumpToTarget((uint64_t)v729, (uint64_t)v761, (uint64_t)v731, v242, v243, v244, v245, v246);
  *(_QWORD *)v745 = 0;
  *(_QWORD *)&v746 = 0;
  *((_QWORD *)&v746 + 1) = v233;
  v747 = (WTF *)&v748;
  v754 = 128;
  v247 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v247 != -1)
  {
    v786 = (WTF *)v735;
    v743[0] = (uint64_t)&v786;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, v743, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v248 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v256 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v256)
  {
    v256 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v256, v248);
  }
  v257 = *(WTF **)v256;
  if (*(_QWORD *)v256 != v256 + 8)
  {
    v258 = *(_DWORD *)(v256 + 136);
    if (v754 < v258)
    {
      if (v747 && v747 != (WTF *)&v748)
      {
        WTF::fastFree((unint64_t)v747, v249, v250, v251, v252, v253, v254, v255);
        v257 = *(WTF **)v256;
        v258 = *(_DWORD *)(v256 + 136);
      }
      v747 = v257;
      v754 = v258;
      *(_QWORD *)v256 = v256 + 8;
      *(_DWORD *)(v256 + 136) = 128;
    }
  }
  v259 = 1;
  v755 = 1;
  v756 = 0;
  v757 = 4;
  v758 = 0u;
  v759 = 0u;
  v760 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v745, (uint64_t)v761, 1, v251, v252, v253, v254, v255);
  if (HIBYTE(word_1ECF4C286))
  {
LABEL_218:
    v786 = (WTF *)off_1E3572250;
    v787 = (uint64_t)v789;
    v788 = xmmword_199122F80;
    v789[0] = 0;
    JSC::CodeOrigin::dump(v725, (WTF::PrintStream *)&v786);
    (*((void (**)(WTF **))v786 + 5))(&v786);
    v267 = (const void *)v787;
    if (v787)
    {
      v268 = v788;
      if ((unint64_t)v788 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19845B4C4);
      }
      if ((_QWORD)v788 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19845B4CCLL);
      }
      v269 = WTF::fastMalloc((WTF *)(v788 + 17));
      *(_DWORD *)v269 = 1;
      *(_QWORD *)(v269 + 8) = v268;
      memcpy((void *)(v269 + 16), v267, v268);
      *(_BYTE *)(v269 + 16 + v268) = 0;
      v270 = v787;
      v233 = (uint64_t)v730;
      if ((_BYTE *)v787 == v789)
      {
LABEL_225:
        switch(*((_BYTE *)v731 + 4))
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
            v786 = (WTF *)off_1E3572250;
            v787 = (uint64_t)v789;
            v788 = xmmword_199122F80;
            v789[0] = 0;
            JSC::CodeBlock::dumpAssumingJITType(v233);
            (*((void (**)(WTF **))v786 + 5))(&v786);
            v382 = (const void *)v787;
            v722 = v259;
            if (v787)
            {
              v383 = v788;
              if ((unint64_t)v788 >= 0xFFFFFFFFFFFFFFF0)
              {
                __break(0xC471u);
                JUMPOUT(0x19845B4D4);
              }
              if ((_QWORD)v788 == -17)
              {
                __break(0xC471u);
                JUMPOUT(0x19845B4DCLL);
              }
              v384 = WTF::fastMalloc((WTF *)(v788 + 17));
              *(_DWORD *)v384 = 1;
              *(_QWORD *)(v384 + 8) = v383;
              memcpy((void *)(v384 + 16), v382, v383);
              *(_BYTE *)(v384 + 16 + v383) = 0;
              v385 = v787;
              if ((_BYTE *)v787 == v789)
              {
LABEL_278:
                v786 = (WTF *)off_1E3572250;
                v787 = (uint64_t)v789;
                v788 = xmmword_199122F80;
                v789[0] = 0;
                memset(v735, 0, sizeof(v735));
                v743[0] = (uint64_t)" ";
                v743[1] = 2;
                v743[2] = (uint64_t)"";
                v743[3] = 1;
                v742 = v734 - 1;
                v744 = 0;
                if ((_DWORD)v734)
                {
                  v386 = 9 * v734 - 9;
                  v387 = v734 - 2;
                  do
                  {
                    if (*((_BYTE *)v732 + v386) != 18)
                    {
                      v740 = "arg";
                      v741 = 4;
                      v738 = ":";
                      v739 = 2;
                      v736 = (WTF *)((char *)v732 + v386);
                      v737 = v735;
                      v388 = (WTF::PrintStream *)(*((uint64_t (**)(WTF **))v786 + 4))(&v786);
                      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::ValueRecovery,JSC::DumpContext>>(v388, (uint64_t)v743, (uint64_t)&v740, &v742, (uint64_t)&v738, &v736);
                      (*((void (**)(WTF **))v786 + 5))(&v786);
                    }
                    v742 = v387;
                    v386 -= 9;
                    --v387;
                  }
                  while (v386 != -9);
                }
                v742 = 0;
                v389 = HIDWORD(v734);
                if (HIDWORD(v734))
                {
                  v390 = 0;
                  v391 = v728;
                  do
                  {
                    if (*((_BYTE *)v732 + 9 * v390 + 9 * v734) != 18)
                    {
                      v740 = "loc";
                      v741 = 4;
                      v738 = ":";
                      v739 = 2;
                      v736 = (WTF *)((char *)v732 + 9 * v390 + 9 * v734);
                      v737 = v735;
                      v392 = (WTF::PrintStream *)(*((uint64_t (**)(WTF **))v786 + 4))(&v786);
                      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::ValueRecovery,JSC::DumpContext>>(v392, (uint64_t)v743, (uint64_t)&v740, &v742, (uint64_t)&v738, &v736);
                      (*((void (**)(WTF **))v786 + 5))(&v786);
                      v389 = HIDWORD(v734);
                    }
                    v742 = ++v390;
                  }
                  while (v390 < v389);
                }
                else
                {
                  v389 = 0;
                  v391 = v728;
                }
                v742 = 0;
                v393 = HIDWORD(v733);
                v394 = v734;
                if (v734 + v389 != HIDWORD(v733))
                {
                  v395 = 0;
                  do
                  {
                    if (*((_BYTE *)v732 + 9 * v395 + 9 * v389 + 9 * v394) != 18)
                    {
                      v740 = "tmp";
                      v741 = 4;
                      v738 = ":";
                      v739 = 2;
                      v736 = (WTF *)((char *)v732 + 9 * v395 + 9 * v389 + 9 * v394);
                      v737 = v735;
                      v396 = (WTF::PrintStream *)(*((uint64_t (**)(WTF **))v786 + 4))(&v786);
                      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::ValueRecovery,JSC::DumpContext>>(v396, (uint64_t)v743, (uint64_t)&v740, &v742, (uint64_t)&v738, &v736);
                      (*((void (**)(WTF **))v786 + 5))(&v786);
                      v393 = HIDWORD(v733);
                      v394 = v734;
                      v389 = HIDWORD(v734);
                    }
                    v742 = ++v395;
                  }
                  while (v395 < v393 - (v394 + v389));
                }
                JSC::DumpContext::~DumpContext((JSC::DumpContext *)v735, v375, v376, v377, v378, v379, v380, v381);
                (*((void (**)(WTF **))v786 + 5))(&v786);
                v404 = (const void *)v787;
                if (v787)
                {
                  v405 = v788;
                  if ((unint64_t)v788 >= 0xFFFFFFFFFFFFFFF0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19845B4E4);
                  }
                  if ((_QWORD)v788 == -17)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19845B4ECLL);
                  }
                  v406 = WTF::fastMalloc((WTF *)(v788 + 17));
                  *(_DWORD *)v406 = 1;
                  *(_QWORD *)(v406 + 8) = v405;
                  memcpy((void *)(v406 + 16), v404, v405);
                  *(_BYTE *)(v406 + 16 + v405) = 0;
                  v407 = v787;
                  v408 = v727;
                  v409 = v722;
                  if ((_BYTE *)v787 == v789)
                  {
LABEL_301:
                    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)v745, v409, 0, 0, "DFG OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s", &v786, v408);
                    v418 = v786;
                    v417 = (unsigned int *)v787;
                    v419 = v730;
                    if (v787)
                    {
                      do
                        v420 = __ldaxr(v417);
                      while (__stlxr(v420 + 1, v417));
                      v421 = (unsigned int *)v787;
                      v787 = 0;
                      if (v421)
                      {
                        do
                        {
                          v422 = __ldaxr(v421);
                          v423 = v422 - 1;
                        }
                        while (__stlxr(v423, v421));
                        if (!v423)
                        {
                          atomic_store(1u, v421);
                          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v421, (uint64_t)v410, v411, v412, v413, v414, v415, v416);
                          WTF::fastFree(v605, v606, v607, v608, v609, v610, v611, v612);
                        }
                      }
                    }
                    if (v406)
                    {
                      if (*(_DWORD *)v406 == 1)
                        WTF::fastFree(v406, v410, v411, v412, v413, v414, v415, v416);
                      else
                        --*(_DWORD *)v406;
                    }
                    if (v384)
                    {
                      if (*(_DWORD *)v384 == 1)
                        WTF::fastFree(v384, v410, v411, v412, v413, v414, v415, v416);
                      else
                        --*(_DWORD *)v384;
                    }
                    if (v269)
                    {
                      if (*(_DWORD *)v269 == 1)
                        WTF::fastFree(v269, v410, v411, v412, v413, v414, v415, v416);
                      else
                        --*(_DWORD *)v269;
                    }
                    goto LABEL_316;
                  }
                }
                else
                {
                  v406 = 0;
                  v407 = 0;
                  v408 = v727;
                  v409 = v722;
                }
                WTF::fastFree(v407, v397, v398, v399, v400, v401, v402, v403);
                goto LABEL_301;
              }
            }
            else
            {
              v384 = 0;
              v385 = 0;
            }
            WTF::fastFree(v385, v375, v376, v377, v378, v379, v380, v381);
            goto LABEL_278;
          default:
            __break(0xC471u);
            JUMPOUT(0x19845B3E8);
        }
      }
    }
    else
    {
      v269 = 0;
      v270 = 0;
    }
    WTF::fastFree(v270, v260, v261, v262, v263, v264, v265, v266);
    goto LABEL_225;
  }
  if (BYTE1(dword_1ECF4C28A) | BYTE1(qword_1ECF4C332))
  {
LABEL_549:
    v233 = (uint64_t)v730;
    goto LABEL_218;
  }
  if (BYTE2(qword_1ECF4C332) || byte_1ECF4C289)
  {
    v259 = BYTE2(qword_1ECF4C332) != 0;
    goto LABEL_549;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl((uint64_t)v745, 0, 0, &v786);
  v418 = v786;
  v417 = (unsigned int *)v787;
  if (v787)
  {
    do
      v710 = __ldaxr(v417);
    while (__stlxr(v710 + 1, v417));
    v711 = (unsigned int *)v787;
    v787 = 0;
    if (v711)
    {
      do
      {
        v712 = __ldaxr(v711);
        v713 = v712 - 1;
      }
      while (__stlxr(v713, v711));
      if (!v713)
      {
        atomic_store(1u, v711);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v711, (uint64_t)v410, v411, v412, v413, v414, v415, v416);
        WTF::fastFree(v714, v715, v716, v717, v718, v719, v720, v721);
      }
    }
  }
  v408 = v727;
  v391 = v728;
  v419 = v730;
LABEL_316:
  v424 = *((_QWORD *)v419 + 15);
  if (v424)
  {
    if ((*(_BYTE *)(v424 + 12) & 0xFE) == 4)
      v424 = *((_QWORD *)v419 + 16);
    else
      v424 = 0;
  }
  if (v417)
  {
    do
      v425 = __ldaxr(v417);
    while (__stlxr(v425 + 1, v417));
  }
  v426 = *(_DWORD **)(v424 + 40);
  if (*v426 <= v408)
  {
    __break(0xC471u);
    JUMPOUT(0x19845AC54);
  }
  v427 = &v426[4 * v408];
  v428 = (unsigned int *)*((_QWORD *)v427 + 2);
  *((_QWORD *)v427 + 1) = v418;
  *((_QWORD *)v427 + 2) = v417;
  if (v428)
  {
    do
    {
      v429 = __ldaxr(v428);
      v430 = v429 - 1;
    }
    while (__stlxr(v430, v428));
    if (!v430)
    {
      atomic_store(1u, v428);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v428, (uint64_t)v410, v411, v412, v413, v414, v415, v416);
      WTF::fastFree(v613, v614, v615, v616, v617, v618, v619, v620);
    }
  }
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v745, v410, v411, v412, v413, v414, v415, v416);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v761, v431, v432, v433, v434, v435, v436, v437);
  v445 = &v391[18 * v408];
  v446 = (void *)*((_QWORD *)v445 + 4);
  if (v446)
  {
    JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(*((JSC::ExecutableAllocator **)v445 + 4), *((_QWORD *)v445 + 4), (unint64_t)v418);
    sys_icache_invalidate(v446, 4uLL);
  }
  *(_QWORD *)(v726 + 64) = v418;
  v447 = v729;
  if (v417)
  {
    do
    {
      v448 = __ldaxr(v417);
      v449 = v448 - 1;
    }
    while (__stlxr(v449, v417));
    if (!v449)
    {
      atomic_store(1u, v417);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v417, (uint64_t)v438, v439, v440, v441, v442, v443, v444);
      WTF::fastFree(v621, v622, v623, v624, v625, v626, v627, v628);
      v447 = v729;
    }
  }
  v450 = v732;
  if (v732)
  {
    v732 = 0;
    LODWORD(v733) = 0;
    WTF::fastFree((unint64_t)v450, v438, v439, v440, v441, v442, v443, v444);
    v447 = v729;
  }
  --*((_DWORD *)v447 + 229);
  *(_QWORD *)(v724 - 8) = 0;
}

void WTF::toCString<JSC::CodeBlock>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(WTF::StringPrintStream *__hidden);
  _BYTE *v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = off_1E3572250;
  v16 = v18;
  v17 = xmmword_199122F80;
  v18[0] = 0;
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::end((WTF::PrintStream *)&v15);
  v11 = v16;
  v10 = v17;
  *a2 = 0;
  if (!v11)
  {
    v14 = 0;
LABEL_6:
    WTF::fastFree(v14, v3, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (v10 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19845B71CLL);
  }
  v12 = WTF::fastMalloc((WTF *)(v10 + 17));
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v10;
  *a2 = v12;
  v13 = v12 + 16;
  memcpy((void *)(v12 + 16), v11, v10);
  *(_BYTE *)(v13 + v10) = 0;
  v14 = (unint64_t)v16;
  if (v16 != v18)
    goto LABEL_6;
}

void operationMaterializeOSRExitSideState(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD v44[2];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  _QWORD *v48;
  _QWORD var38[8];

  v48 = (_QWORD *)a3;
  v9 = var38[7];
  v45 = (WTF *)v47;
  v46 = 4;
  v11 = a2 + 1;
  v10 = a2[1];
  v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 1) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
  {
    LODWORD(v35) = 1;
    do
    {
      v36 = v12[2];
      v12 = (_QWORD *)(v36 & 0xFFFFFFFF8);
      if ((v36 & 1) != 0)
        v12 = (_QWORD *)*v12;
      v35 = (v35 + 1);
    }
    while (v12);
    if (v35 >= 5)
    {
      if (v35 >> 29)
      {
        __break(0xC471u);
LABEL_65:
        JUMPOUT(0x19845BA48);
      }
      LODWORD(v46) = v35;
      v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v35));
      v10 = *v11;
    }
  }
  v13 = a1 + 93216;
  v44[0] = &v48;
  v44[1] = &v45;
  while (1)
  {
    v14 = (uint64_t *)(v10 & 0xFFFFFFFF8);
    v15 = v10 & 0xFFFFFFFF8;
    if ((v10 & 1) != 0)
      v15 = *v14;
    v16 = v10 & 1;
    if (!v15)
      break;
    if ((v10 & 2) != 0)
    {
      LODWORD(a3) = -1;
LABEL_59:
      if ((v10 & 1) != 0)
        v14 = (uint64_t *)*v14;
      v42 = v14[3];
      *((_QWORD *)&v43 + 1) = (16 * v42) >> 56;
      *(_QWORD *)&v43 = v42 << 12;
      operationMaterializeOSRExitSideState::$_1::operator()((uint64_t)v44, v9 + ((v43 >> 41) & 0xFFFFFFFFFFFFFFF8), a3, v42 >> 22);
      v16 = *v11 & 1;
      v14 = (uint64_t *)(*v11 & 0xFFFFFFFF8);
      goto LABEL_38;
    }
    if ((v10 & 1) != 0)
      a3 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8);
    else
      a3 = v10 >> 36;
    if ((a3 & 3) != 0)
      goto LABEL_59;
LABEL_38:
    if (v16)
      v14 = (uint64_t *)*v14;
    do
    {
      v31 = v14;
      v10 = v14[2];
      v32 = (unint64_t)v14[3] >> 60;
      v14 = (uint64_t *)(v10 & 0xFFFFFFFF8);
      if ((v10 & 1) != 0)
        v14 = (uint64_t *)*v14;
      v33 = (v32 < 0xC) & (0x824u >> v32);
      if (v14)
        v34 = v33;
      else
        v34 = 0;
    }
    while ((v34 & 1) != 0);
    v11 = (unint64_t *)(v31 + 2);
    if ((v33 & 1) != 0)
      goto LABEL_14;
  }
  if ((v10 & 2) != 0)
  {
    LODWORD(v17) = -1;
LABEL_12:
    v18 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v18 = v9;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    var38[0] = v18;
    *(_DWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 16) = *v48;
    v19 = v48;
    *(_QWORD *)(v18 + 24) = v48[1];
    *(_QWORD *)(v18 + 32) = v19[2];
    *(_QWORD *)(v18 + 40) = v19[3];
    v20 = HIDWORD(v46);
    if (HIDWORD(v46) == (_DWORD)v46)
    {
      v37 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)var38);
      v38 = HIDWORD(v46);
      v39 = v45;
      v40 = *v37;
      *v37 = 0;
      *((_QWORD *)v39 + v38) = v40;
      v41 = var38[0];
      HIDWORD(v46) = v38 + 1;
      var38[0] = 0;
      if (v41)
        WTF::fastFree(v41, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *((_QWORD *)v45 + HIDWORD(v46)) = v18;
      HIDWORD(v46) = v20 + 1;
    }
  }
  else
  {
    if ((v10 & 1) != 0)
      LODWORD(v17) = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8);
    else
      v17 = v10 >> 36;
    if ((v17 & 3) != 0)
      goto LABEL_12;
  }
LABEL_14:
  if (!HIDWORD(v46))
    goto LABEL_21;
  v21 = 8 * HIDWORD(v46) - 8;
  v22 = HIDWORD(v46) - 1;
  while (2)
  {
    if (v22 >= HIDWORD(v46))
    {
      __break(0xC471u);
      goto LABEL_65;
    }
    a2 = (unint64_t *)((char *)v45 + v21);
    v23 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(v13 + 8))
    {
      WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::CheckpointOSRExitSideState>>(v13, (unint64_t)a2);
    }
    else
    {
      v24 = *(_QWORD *)v13;
      v25 = *a2;
      *a2 = 0;
      *(_QWORD *)(v24 + 8 * v23) = v25;
      *(_DWORD *)(v13 + 12) = v23 + 1;
    }
    v21 -= 8;
    --v22;
    if (v21 != -8)
      continue;
    break;
  }
  if (HIDWORD(v46))
  {
    v28 = v45;
    v29 = 8 * HIDWORD(v46);
    do
    {
      v30 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0;
      if (v30)
        WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
      v28 = (WTF *)((char *)v28 + 8);
      v29 -= 8;
    }
    while (v29);
  }
LABEL_21:
  v26 = v45;
  if (v47 != (_BYTE *)v45 && v45 != 0)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
  }
}

void operationMaterializeOSRExitSideState::$_1::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;

  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = a2;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  v23 = (WTF *)v8;
  *(_DWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(**(_QWORD **)a1 + 8 * a4);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(**(_QWORD **)a1 + 8 * a4 + 8);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(**(_QWORD **)a1 + 8 * a4 + 16);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(**(_QWORD **)a1 + 8 * a4 + 24);
  v9 = *(uint64_t **)(a1 + 8);
  v10 = *((unsigned int *)v9 + 3);
  if ((_DWORD)v10 == *((_DWORD *)v9 + 2))
  {
    v11 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(a1 + 8), v10 + 1, (unint64_t)&v23);
    v19 = *((unsigned int *)v9 + 3);
    v20 = *v9;
    v21 = *v11;
    *v11 = 0;
    *(_QWORD *)(v20 + 8 * v19) = v21;
    v22 = v23;
    *((_DWORD *)v9 + 3) = v19 + 1;
    v23 = 0;
    if (v22)
      WTF::fastFree((unint64_t)v22, v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    *(_QWORD *)(*v9 + 8 * v10) = v8;
    *((_DWORD *)v9 + 3) = v10 + 1;
  }
}

uint64_t operationDebugPrintSpeculationFailure(const void ***a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  const char *v10;
  const void *v12;
  __int128 v13;

  v2 = a1[1][1];
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 72);
  *(_QWORD *)(v5 + 40) = (*a1)[29];
  WTF::dataLog<char [24],JSC::CodeBlock>(v3);
  v6 = "Unset";
  v7 = 6;
  switch(v2[8])
  {
    case 0:
      break;
    case 1:
      v6 = "BadType";
      v7 = 8;
      break;
    case 2:
      v6 = "BadConstantValue";
      goto LABEL_37;
    case 3:
      v6 = "BadIdent";
      goto LABEL_11;
    case 4:
      v6 = "BadExecutable";
      goto LABEL_35;
    case 5:
      v6 = "BadCache";
      goto LABEL_11;
    case 6:
      v6 = "BadConstantCache";
      goto LABEL_37;
    case 7:
      v6 = "BadIndexingType";
      goto LABEL_23;
    case 8:
      v6 = "BadTypeInfoFlags";
      goto LABEL_37;
    case 9:
      v6 = "Overflow";
LABEL_11:
      v7 = 9;
      break;
    case 0xA:
      v6 = "NegativeZero";
      goto LABEL_17;
    case 0xB:
      v6 = "NegativeIndex";
      goto LABEL_35;
    case 0xC:
      v6 = "Int52Overflow";
      goto LABEL_35;
    case 0xD:
      v6 = "StoreToHole";
      goto LABEL_27;
    case 0xE:
      v6 = "LoadFromHole";
LABEL_17:
      v7 = 13;
      break;
    case 0xF:
      v6 = "OutOfBounds";
      goto LABEL_27;
    case 0x10:
      v6 = "InadequateCoverage";
      goto LABEL_30;
    case 0x11:
      v6 = "ArgumentsEscaped";
      goto LABEL_37;
    case 0x12:
      v6 = "ExoticObjectMode";
      goto LABEL_37;
    case 0x13:
      v6 = "VarargsOverflow";
LABEL_23:
      v7 = 16;
      break;
    case 0x14:
      v6 = "TDZFailure";
      v7 = 11;
      break;
    case 0x15:
      v6 = "HoistingFailed";
      goto LABEL_33;
    case 0x16:
      v6 = "Uncountable";
LABEL_27:
      v7 = 12;
      break;
    case 0x17:
      v6 = "UncountableInvalidation";
      v7 = 24;
      break;
    case 0x18:
      v6 = "WatchdogTimerFired";
LABEL_30:
      v7 = 19;
      break;
    case 0x19:
      v6 = "DebuggerEvent";
      goto LABEL_35;
    case 0x1A:
      v6 = "ExceptionCheck";
LABEL_33:
      v7 = 15;
      break;
    case 0x1B:
      v6 = "GenericUnwind";
LABEL_35:
      v7 = 14;
      break;
    case 0x1C:
      v6 = "BigInt32Overflow";
LABEL_37:
      v7 = 17;
      break;
    case 0x1D:
      v6 = "UnexpectedResizableArrayBufferView";
      v7 = 35;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19845C0A4);
  }
  *(_QWORD *)&v13 = v6;
  *((_QWORD *)&v13 + 1) = v7;
  WTF::dataLog<char [10],unsigned int,char [3],JSC::BytecodeIndex,char [3],WTF::ASCIILiteral,char [8]>((_DWORD *)(v5 + 90536), (JSC::BytecodeIndex *)(v2 + 12), (uint64_t)&v13);
  if (v4)
  {
    LODWORD(v13) = *(unsigned __int16 *)(v4 + 106);
    LODWORD(v12) = *(unsigned __int16 *)(v4 + 104);
    WTF::dataLog<char [18],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [32],unsigned int,char [30],unsigned int>(v4 + 200, &v13, &v12);
  }
  else
  {
    WTF::dataLog<char [16]>("no alternative code block (i.e. we've been jettisoned)");
  }
  LODWORD(v13) = *(_DWORD *)(v3 + 36);
  WTF::dataLog<char [20],unsigned int,char [2]>(&v13);
  WTF::dataLog<char [16]>("    GPRs at time of exit:");
  *(_QWORD *)&v13 = "x0";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = **a1;
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x1";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[1];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x2";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[2];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x3";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[3];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x4";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[4];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x5";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[5];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x6";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[6];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x7";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[7];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x8";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[8];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x9";
  *((_QWORD *)&v13 + 1) = 3;
  v12 = (*a1)[9];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x10";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[10];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x11";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[11];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x12";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[12];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x13";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[13];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x14";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[14];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  *(_QWORD *)&v13 = "x15";
  *((_QWORD *)&v13 + 1) = 4;
  v12 = (*a1)[15];
  WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>((uint64_t)&v13, &v12);
  WTF::dataLog<char [16]>("\n");
  WTF::dataLog<char [16]>("    FPRs at time of exit:");
  for (i = 0; i != 23; ++i)
  {
    v9 = JSC::FPRInfo::toRegister::registerForIndex[i];
    v13 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v9];
    WTF::dataLog<char [2],WTF::ASCIILiteral,char [2]>((uint64_t)&v13);
    WTF::dataLogF((WTF *)"%llx:%lf", v10, (*a1)[v9 + 35], (*a1)[v9 + 35]);
  }
  return WTF::dataLog<char [16]>("\n");
}

void JSC::DFG::handleExitCounts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::CodeBlock *v52;
  int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint8x8_t v85;
  __int32 v86;
  uint8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  char v112;
  JSC::CodeBlock *v113;
  uint64_t v114;
  double v115;
  unint64_t v116;
  double v117;
  char v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  JSC::CodeBlock *v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int8x8_t v152;
  unsigned int v153;
  _DWORD *v154;
  _QWORD *v155;
  int v156;
  _DWORD *v157;
  _QWORD *v158;
  _DWORD *v159;
  uint64_t v160;
  unsigned int i;
  unsigned int v162;
  char v163;
  uint64_t v164;
  unint64_t v165;
  JSC::CodeBlock *v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  uint64_t v184;
  _BYTE *v185;
  char *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  int v189;
  unsigned __int8 *v190;
  int v191;
  int64_t v192;
  char *v193;
  char *v194;
  JSC::AssemblerBuffer *v195;
  int v196;
  uint64_t v197;
  WTF *v198;
  uint64_t v199;
  _BYTE v200[28];
  unsigned int v201[3];
  _BYTE v202[12];
  void *__dst;
  uint64_t v204;
  _WORD v205[6];
  int v206;
  double v207;
  double v208[2];

  if ((*(_BYTE *)(a3 + 4) & 0xFE) == 0x1A)
    return;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19845CD1CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, a3, *(char *)(a2 + 272), a4, a5, a6, a7, a8);
  v195 = (JSC::AssemblerBuffer *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 200);
  if (v18 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v11, v12, v13, v14, v15, v16, v17);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = 285214224;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a2, 16, (JSC::ARM64LogicalImmediate *)a3, v13, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a2 + 336), 3, v19, v20, v21, v22, v23);
  *(_QWORD *)v202 = 0xFFFFFFFFLL;
  *(_DWORD *)&v202[8] = -16773311;
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -1203617694;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 285213762;
  v34 = *(_DWORD *)(a2 + 200);
  v35 = v34 + 4;
  *(_DWORD *)(a2 + 200) = v34 + 4;
  if ((v34 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v24, v25, v26, v27, v28, v29, v30);
    v35 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = -1207811998;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a2 + 344), 0, v26, v27, v28, v29, v30);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19845CD7CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v43 = *(_BYTE *)(a2 + 304) & 0x1F | 0xB84C8000;
  v44 = *(_DWORD *)(a2 + 200);
  if (v44 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = v43;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32(a2, 5, 17, 17, v39, v40, v41, v42, (uint64_t)v201);
  v198 = (WTF *)v200;
  v199 = 2;
  v50 = *(_QWORD *)(a3 + 8);
  v51 = v50 & 0xFFFFFFFF8;
  if ((v50 & 1) != 0)
    v51 = *(_QWORD *)v51;
  if (v51)
  {
    v8 = (uint64_t)&v197;
    v70 = a2 + 296;
    LODWORD(v54) = 12;
    goto LABEL_104;
  }
LABEL_17:
  v52 = *(JSC::CodeBlock **)(a2 + 336);
  if ((*(_WORD *)(*((_QWORD *)v52 + 7) + 28) & 0x3000) == 0x1000)
    v53 = DWORD1(xmmword_1ECF4C514);
  else
    v53 = 1;
  LODWORD(v54) = -721215457;
  v55 = JSC::CodeBlock::adjustedExitCountThreshold(v52, v53 * (int)xmmword_1ECF4C534);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v55, 1, v56, v57, v58, v59, v60);
  if (HIDWORD(v199))
  {
    for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v162 = i;
    if (i + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
      v162 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v162) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v163 = 69;
    else
      v163 = 65;
    __dst = (void *)i;
    LOBYTE(v204) = v163;
    *(_WORD *)((char *)&v204 + 1) = 15;
    BYTE3(v204) = -1;
    if (HIDWORD(v199))
    {
      v164 = 0;
      v165 = 0;
      v8 = 12 * HIDWORD(v199);
      while (v165 < HIDWORD(v199))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v198 + v164), a2, v62, v63, v64, v65, v66, v67);
        ++v165;
        v164 += 12;
        if (v8 == v164)
          goto LABEL_129;
      }
LABEL_189:
      __break(0xC471u);
      JUMPOUT(0x19845CC98);
    }
LABEL_129:
    v166 = *(JSC::CodeBlock **)(a2 + 336);
    if ((*(_WORD *)(*((_QWORD *)v166 + 7) + 28) & 0x3000) == 0x1000)
      v167 = DWORD1(xmmword_1ECF4C514);
    else
      v167 = 1;
    v168 = JSC::CodeBlock::adjustedExitCountThreshold(v166, v167 * DWORD1(xmmword_1ECF4C534));
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v168, 1, v169, v170, v171, v172, v173);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, a2, v174, v175, v176, v177, v178, v179);
  }
  v68 = *(_DWORD *)(a2 + 200);
  if (v68 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
    v68 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v68) = 1795227743;
  v69 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v69;
  if (*(_BYTE *)(a2 + 328))
  {
    if (v69 < *(_DWORD *)(a2 + 52))
    {
      LODWORD(v54) = -721215457;
      do
      {
        if ((v69 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
          v69 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = -721215457;
        v69 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v69;
      }
      while (v69 < *(_DWORD *)(a2 + 52));
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  if ((v69 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
    v69 = *(_DWORD *)(a2 + 200);
  }
  v70 = a2 + 264;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = 1409286153;
  v71 = *(_DWORD *)(a2 + 200);
  v72 = v71 + 4;
  *(_DWORD *)(a2 + 200) = v71 + 4;
  v73 = v71 + 8;
  v74 = v71 + 4;
  if (v73 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v61, v62, v63, v64, v65, v66, v67);
    v74 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v74) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  v75 = 0xFF00098600000000;
  if (!*(_BYTE *)(a2 + 328))
    v75 = 0xFF00098200000000;
  *(_DWORD *)v202 = v72;
  *(_QWORD *)&v202[4] = v75;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v201, a2, v62, v63, v64, v65, v66, v67);
  __dst = v205;
  v205[0] = 259;
  v204 = 0x100000002;
  v51 = 1;
  v78 = 1;
  do
  {
    v79 = 0;
    v80 = 0;
    v81 = (char *)__dst;
    v82 = v78;
    do
    {
      if ((*((_BYTE *)__dst + v79 + 1) & 0x40) != 0)
      {
LABEL_169:
        __break(1u);
LABEL_170:
        v51 = *(_QWORD *)v51;
        while (v51)
        {
LABEL_104:
          if (!*(_BYTE *)(a2 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x19845CEFCLL);
          }
          v147 = *(_QWORD *)(*(_QWORD *)(v51 + 8) + 64) + 65;
          *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
          v148 = *(unsigned __int8 *)(a2 + 304);
          JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a2, v147, v70, v45, v46, v47, v48, v49);
          v153 = *(_DWORD *)(a2 + 200);
          if (v153 + 4 > *(_DWORD *)(a2 + 192))
          {
            v152 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v195, v149, v150, v151, v46, v47, v48, v49).n128_u64[0];
            v153 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v153) = v148 & 0x1F | 0x387F6A20;
          *(_DWORD *)(a2 + 200) += 4;
          if (v148 == 17)
          {
            if (!*(_BYTE *)(a2 + 212))
            {
              v45 = 187;
              __break(0xC471u);
              goto LABEL_169;
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
          }
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 1, 17, v46, v47, v48, v49, (uint64_t)&v196, v152);
          if (v196 != -1)
          {
            if (HIDWORD(v199) == (_DWORD)v199)
            {
              v154 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v198, (void *)(HIDWORD(v199) + 1), (unint64_t)&v196, v45, v46, v47, v48, v49);
              v156 = *v154;
              v155 = v154 + 1;
              v157 = (_DWORD *)((char *)v198 + HIDWORD(v199) * (unint64_t)v54);
              *v157 = v156;
              v158 = v157 + 1;
            }
            else
            {
              v159 = (_DWORD *)((char *)v198 + HIDWORD(v199) * (unint64_t)v54);
              *v159 = v196;
              v158 = v159 + 1;
              v155 = (_QWORD *)v8;
            }
            *v158 = *v155;
            ++HIDWORD(v199);
          }
          v160 = *(_QWORD *)(v51 + 16);
          v51 = v160 & 0xFFFFFFFF8;
          if ((v160 & 1) != 0)
            goto LABEL_170;
        }
        goto LABEL_17;
      }
      v80 |= 1 << *((_BYTE *)__dst + v79 + 1);
      v79 += 2;
    }
    while (2 * v78 != v79);
    v83 = 0;
    do
    {
      v84 = *((_BYTE *)__dst + v83) & 0x7F;
      if (v84 >= 0x40)
        goto LABEL_169;
      v80 &= ~(1 << v84);
      v83 += 2;
    }
    while (2 * v78 != v83);
    v85 = (uint8x8_t)vcnt_s8((int8x8_t)v80);
    v85.i16[0] = vaddlv_u8(v85);
    v86 = v85.i32[0];
    v87 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v80));
    v87.i16[0] = vaddlv_u8(v87);
    if (v87.i32[0] + v86)
    {
      v8 = 0;
      if (v78 <= 1uLL)
        v88 = 1;
      else
        v88 = v78;
      v89 = 2 * v88;
      while (1)
      {
        v90 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v90 & 0x7Fu) >= 0x40)
          goto LABEL_169;
        if (((v80 >> (v90 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v89 == v8)
          goto LABEL_55;
      }
      v91 = *((unsigned __int8 *)__dst + v8);
      if (v91 != v90)
      {
        v92 = (char)v91;
        if ((char)v91 == 63)
        {
          v93 = *(_DWORD *)(a2 + 200);
          v94 = *(_DWORD *)(a2 + 192);
          if (v90 == 31)
            goto LABEL_57;
          LODWORD(v54) = v90 & 0x1F | 0xD2800000;
        }
        else
        {
          v93 = *(_DWORD *)(a2 + 200);
          v94 = *(_DWORD *)(a2 + 192);
          v95 = (char)v90 == 31 || v92 == 31;
          if (!v95)
          {
            LODWORD(v54) = v90 & 0xFFE0FFFF | ((v92 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_50;
          }
LABEL_57:
          LODWORD(v54) = (char)v90 | (32 * v92) | 0x91000000;
        }
LABEL_50:
        if (v93 + 4 > v94)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v195, (uint64_t)v76, v77, v45, v46, v47, v48, v49);
          v93 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v93) = (_DWORD)v54;
        *(_DWORD *)(a2 + 200) += 4;
        v81 = (char *)__dst;
        v82 = HIDWORD(v204);
      }
      memmove(&v81[v8], &v81[v8 + 2], 2 * v82 - v8 - 2);
      v78 = HIDWORD(v204) - 1;
    }
    else
    {
      LODWORD(v54) = *(char *)__dst;
      v180 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, v54, v180, v45, v46, v47, v48, v49);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v204) - 2);
      v181 = (HIDWORD(v204) - 1);
      v95 = HIDWORD(v204) == 1;
      HIDWORD(v204) = v181;
      v182 = (unsigned __int8 *)__dst;
      v183 = (unsigned __int8 *)__dst + 2 * v181;
      if (v95)
      {
        v188 = 0;
        v189 = 0;
        v8 = 0;
        v76 = v183;
      }
      else
      {
        v184 = 2 * v181;
        v185 = __dst;
        while (*v185 != v180)
        {
          v185 += 2;
          v184 -= 2;
          if (!v184)
            goto LABEL_136;
        }
        *v185 = (_BYTE)v54;
LABEL_136:
        v8 = 0;
        v54 = v182;
        v76 = v183;
        v186 = (char *)v183;
        do
        {
          if (*v182 == v182[1])
          {
            v187 = v182;
            if (v186 != (char *)__dst + 2 * HIDWORD(v204))
            {
              v194 = (char *)v183;
              if (v182 == v76)
              {
                v187 = (unsigned __int8 *)v186;
              }
              else
              {
                v192 = v54 - v76;
                v193 = v186;
                memmove(v186, v76, v54 - v76);
                v187 = (unsigned __int8 *)&v193[v192];
              }
              v183 = (unsigned __int8 *)v194;
            }
            v76 = v182 + 2;
            v8 = (v8 + 1);
            v186 = (char *)v187;
          }
          v182 += 2;
          v54 += 2;
        }
        while (v182 < v183);
        v182 = (unsigned __int8 *)__dst;
        v188 = HIDWORD(v204);
        v189 = HIDWORD(v204);
        v183 = (unsigned __int8 *)v186;
      }
      v190 = &v182[2 * v188];
      if (v76 != v190)
      {
        memmove(v183, v76, v190 - v76);
        v189 = HIDWORD(v204);
      }
      v78 = v189 - v8;
    }
    HIDWORD(v204) = v78;
LABEL_55:
    ;
  }
  while (v78);
  v96 = __dst;
  if (v205 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v204) = 0;
    WTF::fastFree((unint64_t)v96, v76, v77, v45, v46, v47, v48, v49);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a3, 2, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)operationTriggerReoptimizationNow, 8, v97, v98, v99, v100, v101);
  *(_DWORD *)(a2 + 208) = 0;
  v109 = *(_DWORD *)(a2 + 200);
  if (v109 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v102, v103, v104, v105, v106, v107, v108);
    v109 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v109) = -700514048;
  while (1)
  {
    v110 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v110;
    if ((signed int)v110 >= *(_DWORD *)(a2 + 52))
      break;
    if (v110 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v195, v102, v103, v104, v105, v106, v107, v108);
      v110 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v110) = -721215457;
  }
  v111 = v110;
  if (v110 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, v102, v103, v104, v105, v106, v107, v108);
    v111 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v111) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v112 = 69;
  else
    v112 = 65;
  __dst = (void *)v110;
  LOBYTE(v204) = v112;
  *(_WORD *)((char *)&v204 + 1) = 15;
  BYTE3(v204) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v202, a2, v103, v104, v105, v106, v107, v108);
  v114 = *(_QWORD *)(a2 + 344);
  v115 = (double)SHIDWORD(xmmword_1ECF4C4E4);
  LODWORD(v116) = *(_DWORD *)(v114 + 44);
  v208[0] = (double)v116;
  v117 = sqrt((double)v116 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*(_QWORD *)(v114 + 56) + 28) & 0x3000) == 0x1000)
  {
    v191 = DWORD1(xmmword_1ECF4C514);
    v117 = v117 * (double)SDWORD1(xmmword_1ECF4C514);
    v207 = v117;
    if (BYTE1(qword_1ECF4C332))
      goto LABEL_162;
  }
  else
  {
    v207 = v117;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_72;
    v191 = 1;
LABEL_162:
    v206 = v191;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v114, ": bytecode cost is ", v208, ", scaling execution counter by ", &v207, " * ", &v206, "\n");
    v117 = v207;
  }
LABEL_72:
  v118 = *(_WORD *)(v114 + 106);
  v119 = 1;
  v120 = v117 * v115 * (double)(1 << v118);
  if (v120 >= 1.0)
  {
    if (v120 > 2147483650.0)
      v119 = 0x7FFFFFFFLL;
    else
      v119 = (int)v120;
  }
  v127 = JSC::applyMemoryUsageHeuristics((JSC *)v119, *(JSC::CodeBlock **)(a2 + 344), v113);
  if (v127 >= 2147483650.0)
    v127 = 2147483650.0;
  v128 = *(JSC::CodeBlock **)(a2 + 336);
  v129 = *((_QWORD *)v128 + 15);
  if (!v129)
    goto LABEL_189;
  v130 = (int)v127;
  v131 = *(unsigned __int8 *)(v129 + 12);
  if (v131 == 4)
  {
    v132 = JSC::maximumExecutionCountsBetweenCheckpoints(0, v128, v127);
    if (v132 < v130)
      v130 = v132;
    goto LABEL_81;
  }
  if (v131 != 5)
    goto LABEL_189;
  if ((int)xmmword_1ECF4C524 < v130)
    v130 = xmmword_1ECF4C524;
LABEL_81:
  if (v130)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19845CE94);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)-v130, a2 + 264, v122, v123, v124, v125, v126);
    v133 = -1207140336;
  }
  else
  {
    v133 = -1207140321;
  }
  v134 = *(_DWORD *)(a2 + 200);
  if (v134 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, (uint64_t)v128, v121, v122, v123, v124, v125, v126);
    v134 = *(_DWORD *)(a2 + 200);
  }
  v135 = -1207107568;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v134) = v133;
  v136 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v136;
  if ((_DWORD)v119)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19845CEB4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v119, a2 + 264, v122, v123, v124, v125, v126);
    v136 = *(_DWORD *)(a2 + 200);
  }
  else
  {
    v135 = -1207107553;
  }
  if (v136 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, (uint64_t)v128, v121, v122, v123, v124, v125, v126);
    v136 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v136) = v135;
  v137 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v137;
  if (v130)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19845CED4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)COERCE_UNSIGNED_INT((float)v130), a2 + 264, v122, v123, v124, v125, v126);
    v137 = *(_DWORD *)(a2 + 200);
    v138 = -1207123952;
  }
  else
  {
    v138 = -1207123937;
  }
  if (v137 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v195, (uint64_t)v128, v121, v122, v123, v124, v125, v126);
    v137 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v137) = v138;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, a2, v121, v122, v123, v124, v125, v126);
  v146 = v198;
  if (v200 != (_BYTE *)v198)
  {
    if (v198)
    {
      v198 = 0;
      LODWORD(v199) = 0;
      WTF::fastFree((unint64_t)v146, v139, v140, v141, v142, v143, v144, v145);
    }
  }
}

void JSC::DFG::reifyInlinedCallFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  _DWORD *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unsigned int *StubInfo;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  __int128 v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned int v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unsigned int v225;
  JSC::AssemblerBuffer *v226;
  uint64_t v227;
  _BYTE v228[8];
  int v229;
  uint64_t v230;
  unsigned int *v231;

  v10 = -134151248;
  v11 = *(_QWORD *)(a1 + 344);
  if (v11)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19845E064);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v11, a1 + 264, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = -134151233;
  }
  v226 = (JSC::AssemblerBuffer *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 200);
  if (v12 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v226, v11, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v10;
  *(_DWORD *)(a1 + 200) += 4;
  v15 = *(_QWORD *)(a2 + 8);
  v14 = (unint64_t *)(a2 + 8);
  v13 = v15;
  v16 = a1 + 264;
  v227 = a1 + 264;
  while (1)
  {
    v17 = (uint64_t *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 1) == 0)
      break;
    v18 = *v17;
    if (!*v17)
    {
      if ((v13 & 2) == 0)
      {
        LODWORD(v13) = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
        goto LABEL_318;
      }
LABEL_339:
      v224 = 0x3FFFFFFFLL;
      goto LABEL_321;
    }
LABEL_10:
    v19 = *(_QWORD *)(a1 + 344);
    v20 = *(_QWORD *)(v18 + 8);
    v21 = v18;
    do
    {
      v22 = v21;
      v23 = *(_QWORD *)(v21 + 16);
      v24 = *(_QWORD *)(v21 + 24) >> 60;
      v25 = (uint64_t *)(v23 & 0xFFFFFFFF8);
      v21 = v23 & 0xFFFFFFFF8;
      if ((v23 & 1) != 0)
        v21 = *v25;
      v26 = (v24 < 0xC) & (0x824u >> v24);
      if (v21)
        v27 = (v24 < 0xC) & (0x824u >> v24);
      else
        v27 = 0;
    }
    while ((v27 & 1) != 0);
    if (!v26)
    {
      v28 = v23 & 0xFFFFFFFF8;
      if ((v23 & 1) != 0)
      {
        v28 = *v25;
        if (*v25)
          goto LABEL_88;
LABEL_20:
        if ((v23 & 2) == 0)
          goto LABEL_21;
LABEL_89:
        v29 = 0xFFFFFFFFLL;
      }
      else
      {
        if (!v25)
          goto LABEL_20;
LABEL_88:
        v19 = *(_QWORD *)(v28 + 8);
        if ((v23 & 2) != 0)
          goto LABEL_89;
LABEL_21:
        if ((v23 & 1) != 0)
          v29 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8);
        else
          v29 = v23 >> 36;
      }
      if (HIBYTE(word_1ECF4C758))
      {
        if ((v29 & 3) == 0)
        {
          v33 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v19 + 56) + 80) + (v29 >> 2));
          goto LABEL_71;
        }
        v32 = 1;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 120);
        if (v30)
          v31 = *(unsigned __int8 *)(v30 + 12);
        else
          v31 = 0;
        v32 = v31 == 2;
        if ((v29 & 3) == 0)
        {
          v33 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v19 + 56) + 80) + (v29 >> 2));
          if (v31 != 2)
          {
            if (v24 < 2)
              goto LABEL_29;
            if (v24 > 0xA)
              goto LABEL_326;
            v63 = 1 << v24;
            if ((v63 & 0x3C0) != 0)
            {
              v64 = 0;
              if (v29 == 0x3FFFFFFF)
              {
                v65 = 2;
              }
              else
              {
                v65 = 2;
                if (v29 != 0xFFFFFFFF)
                {
                  v65 = v29 >> 28;
                  if (v29 >> 28)
                  {
                    v64 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v64 = 0;
                    *(_DWORD *)(v64 + 8) = v29;
                    v65 = 1;
                  }
                  else
                  {
                    v64 = v29 << 36;
                  }
                }
              }
              v230 = v64 | v65;
              StubInfo = JSC::CodeBlock::findStubInfo(v19, (unint64_t *)&v230);
              if ((v230 & 1) != 0 && (v230 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v230 & 0xFFFFFFFF8, v66, v67, a4, a5, a6, a7, a8);
              if (!StubInfo)
              {
                JSC::BaseInstruction<JSC::JSOpcodeTraits>::opcodeID(v33);
                __break(0xC471u);
                JUMPOUT(0x19845E0FCLL);
              }
              v32 = 0;
              v44 = *((_QWORD *)StubInfo + 4);
            }
            else
            {
              if ((v63 & 0x418) == 0)
              {
LABEL_326:
                __break(0xC471u);
                JUMPOUT(0x19845DF14);
              }
LABEL_29:
              if (v30)
              {
                v34 = (unsigned int *)(v30 + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 + 1, v34));
                v36 = *(unsigned int **)(v30 + 72);
                if (v36)
                {
                  v39 = *v36;
                  v37 = v36 + 2;
                  v38 = v39;
                  if (v39 < 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v40 = 0;
                    while (1)
                    {
                      v41 = v38 - 1;
                      v42 = v37[4 * v40 + 4 * ((v38 - 1) >> 1)];
                      if (v42 == v29)
                        break;
                      v38 -= (v41 >> 1) + 1;
                      if (v42 <= v29)
                      {
                        v43 = (v41 >> 1) + 1;
                      }
                      else
                      {
                        v38 = v41 >> 1;
                        v43 = 0;
                      }
                      v40 += v43;
                      if (v38 <= 1)
                        goto LABEL_43;
                    }
                    v40 += (v38 - 1) >> 1;
                  }
LABEL_43:
                  v44 = *(_QWORD *)&v37[4 * v40 + 2];
                }
                else
                {
                  v44 = 0;
                }
                do
                  v45 = __ldaxr(v34);
                while (__stlxr(v45 - 1, v34));
                if (v45 == 1)
                {
                  atomic_store(1u, (unsigned int *)(v30 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
                }
              }
              else if (MEMORY[0x48])
              {
                v143 = MEMORY[0x48] + 8;
                v144 = *MEMORY[0x48];
                if (*MEMORY[0x48] < 2u)
                {
                  v145 = 0;
                }
                else
                {
                  v145 = 0;
                  while (1)
                  {
                    v146 = v144 - 1;
                    v147 = *(unsigned int *)(v143 + 16 * (v145 + ((v144 - 1) >> 1)));
                    if (v147 == v29)
                      break;
                    v144 -= (v146 >> 1) + 1;
                    if (v147 <= v29)
                    {
                      v148 = (v146 >> 1) + 1;
                    }
                    else
                    {
                      v144 = v146 >> 1;
                      v148 = 0;
                    }
                    v145 += v148;
                    if (v144 <= 1)
                      goto LABEL_253;
                  }
                  v145 += (v144 - 1) >> 1;
                }
LABEL_253:
                v44 = *(_QWORD *)(v143 + 16 * v145 + 8);
              }
              else
              {
                v44 = 0;
              }
              v32 = 0;
            }
LABEL_48:
            v46 = (_QWORD *)(v22 + 16);
            v47 = *(_QWORD *)(v22 + 16);
            v48 = (_QWORD *)(v47 & 0xFFFFFFFF8);
            if ((v47 & 1) != 0)
            {
              v48 = (_QWORD *)*v48;
              if (!v48)
                goto LABEL_91;
LABEL_50:
              v49 = v48[3];
              *((_QWORD *)&v50 + 1) = (16 * v49) >> 56;
              *(_QWORD *)&v50 = v49 << 12;
              v51 = 3;
              JSC::MacroAssemblerARM64::add64(a1, (v50 >> 41) & 0xFFFFFFF8, 29, 3, a5, a6, a7, a8);
            }
            else
            {
              if (v48)
                goto LABEL_50;
LABEL_91:
              v51 = 29;
            }
            v78 = *(_QWORD *)(v18 + 24);
            *((_QWORD *)&v79 + 1) = (16 * v78) >> 56;
            *(_QWORD *)&v79 = v78 << 12;
            v80 = ((v79 >> 9) & 0xFFFFFFF800000000) + 0x80000001DLL;
            if (v44)
            {
              if (!*(_BYTE *)(a1 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x19845DF54);
              }
              JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v44, v227, a4, a5, a6, a7, a8);
              v81 = a1;
              v82 = 16;
            }
            else
            {
              v81 = a1;
              v82 = 63;
            }
            JSC::MacroAssemblerARM64::store64(v81, v82, v80, a4, a5, a6, a7, a8);
            goto LABEL_97;
          }
LABEL_71:
          switch((int)v24)
          {
            case 0:
            case 10:
              v69 = *v33;
              v70 = v69;
              if ((v69 | 2) == 0x82)
                v70 = v33[1];
              if (v70 == 23)
              {
                if (v69 == 128)
                  v71 = 2;
                else
                  v71 = 1;
                if (v69 == 130)
                  v72 = 4;
                else
                  v72 = v71;
                JSC::LLInt::returnLocationThunk(222, v72, &v230);
                v44 = v230;
                v75 = v231;
                v231 = 0;
                if (v75)
                {
                  do
                  {
                    v76 = __ldaxr(v75);
                    v77 = --v76 == 0;
                  }
                  while (__stlxr(v76, v75));
                  goto LABEL_289;
                }
              }
              else
              {
                v171 = *v33;
                if ((v69 | 2) == 0x82)
                  v171 = v33[1];
                if (v171 == 24)
                {
                  if (v69 == 128)
                    v172 = 2;
                  else
                    v172 = 1;
                  if (v69 == 130)
                    v173 = 4;
                  else
                    v173 = v172;
                  JSC::LLInt::returnLocationThunk(223, v173, &v230);
                  v44 = v230;
                  v75 = v231;
                  v231 = 0;
                  if (v75)
                  {
                    do
                    {
                      v174 = __ldaxr(v75);
                      v77 = --v174 == 0;
                    }
                    while (__stlxr(v174, v75));
                    goto LABEL_289;
                  }
                }
                else
                {
                  v183 = *v33;
                  if ((v69 | 2) == 0x82)
                    v183 = v33[1];
                  if (v183 == 4)
                  {
                    if (v69 == 128)
                      v184 = 2;
                    else
                      v184 = 1;
                    if (v69 == 130)
                      v185 = 4;
                    else
                      v185 = v184;
                    JSC::LLInt::returnLocationThunk(232, v185, &v230);
                    v44 = v230;
                    v75 = v231;
                    v231 = 0;
                    if (v75)
                    {
                      do
                      {
                        v186 = __ldaxr(v75);
                        v77 = --v186 == 0;
                      }
                      while (__stlxr(v186, v75));
                      goto LABEL_289;
                    }
                  }
                  else
                  {
                    v191 = *v33;
                    if ((v69 | 2) == 0x82)
                      v191 = v33[1];
                    if (v191 != 2)
                    {
                      v44 = 0;
                      goto LABEL_291;
                    }
                    if (v69 == 128)
                      v192 = 2;
                    else
                      v192 = 1;
                    if (v69 == 130)
                      v193 = 4;
                    else
                      v193 = v192;
                    JSC::LLInt::returnLocationThunk(233, v193, &v230);
                    v44 = v230;
                    v75 = v231;
                    v231 = 0;
                    if (v75)
                    {
                      do
                      {
                        v194 = __ldaxr(v75);
                        v77 = --v194 == 0;
                      }
                      while (__stlxr(v194, v75));
                      goto LABEL_289;
                    }
                  }
                }
              }
              goto LABEL_291;
            case 1:
              v149 = *v33;
              if (v149 == 128)
                v150 = 2;
              else
                v150 = 1;
              if (v149 == 130)
                v151 = 4;
              else
                v151 = v150;
              JSC::LLInt::returnLocationThunk(224, v151, &v230);
              v44 = v230;
              v75 = v231;
              v231 = 0;
              if (!v75)
                goto LABEL_291;
              do
              {
                v152 = __ldaxr(v75);
                v77 = --v152 == 0;
              }
              while (__stlxr(v152, v75));
              goto LABEL_289;
            case 3:
              v163 = *v33;
              if (v163 == 128)
                v164 = 2;
              else
                v164 = 1;
              if (v163 == 130)
                v165 = 4;
              else
                v165 = v164;
              JSC::LLInt::returnLocationThunk(225, v165, &v230);
              v44 = v230;
              v75 = v231;
              v231 = 0;
              if (!v75)
                goto LABEL_291;
              do
              {
                v166 = __ldaxr(v75);
                v77 = --v166 == 0;
              }
              while (__stlxr(v166, v75));
              goto LABEL_289;
            case 4:
              v167 = *v33;
              if (v167 == 128)
                v168 = 2;
              else
                v168 = 1;
              if (v167 == 130)
                v169 = 4;
              else
                v169 = v168;
              JSC::LLInt::returnLocationThunk(226, v169, &v230);
              v44 = v230;
              v75 = v231;
              v231 = 0;
              if (!v75)
                goto LABEL_291;
              do
              {
                v170 = __ldaxr(v75);
                v77 = --v170 == 0;
              }
              while (__stlxr(v170, v75));
              goto LABEL_289;
            case 6:
            case 8:
              v153 = *v33;
              v154 = v153;
              if ((v153 | 2) == 0x82)
                v154 = v33[1];
              if (v154 == 18)
              {
                if (v153 == 128)
                  v155 = 2;
                else
                  v155 = 1;
                if (v153 == 130)
                  v156 = 4;
                else
                  v156 = v155;
                JSC::LLInt::returnLocationThunk(227, v156, &v230);
                v44 = v230;
                v75 = v231;
                v231 = 0;
                if (v75)
                {
                  do
                  {
                    v157 = __ldaxr(v75);
                    v77 = --v157 == 0;
                  }
                  while (__stlxr(v157, v75));
                  goto LABEL_289;
                }
              }
              else
              {
                v175 = *v33;
                if ((v153 | 2) == 0x82)
                  v175 = v33[1];
                if (v175 == 19)
                {
                  if (v153 == 128)
                    v176 = 2;
                  else
                    v176 = 1;
                  if (v153 == 130)
                    v177 = 4;
                  else
                    v177 = v176;
                  JSC::LLInt::returnLocationThunk(228, v177, &v230);
                  v44 = v230;
                  v75 = v231;
                  v231 = 0;
                  if (v75)
                  {
                    do
                    {
                      v178 = __ldaxr(v75);
                      v77 = --v178 == 0;
                    }
                    while (__stlxr(v178, v75));
                    goto LABEL_289;
                  }
                }
                else
                {
                  v187 = *v33;
                  if ((v153 | 2) == 0x82)
                    v187 = v33[1];
                  if (v187 != 32)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19845E11CLL);
                  }
                  if (v153 == 128)
                    v188 = 2;
                  else
                    v188 = 1;
                  if (v153 == 130)
                    v189 = 4;
                  else
                    v189 = v188;
                  JSC::LLInt::returnLocationThunk(229, v189, &v230);
                  v44 = v230;
                  v75 = v231;
                  v231 = 0;
                  if (v75)
                  {
                    do
                    {
                      v190 = __ldaxr(v75);
                      v77 = --v190 == 0;
                    }
                    while (__stlxr(v190, v75));
                    goto LABEL_289;
                  }
                }
              }
              goto LABEL_291;
            case 7:
            case 9:
              v158 = *v33;
              v159 = v158;
              if ((v158 | 2) == 0x82)
                v159 = v33[1];
              if (v159 == 7)
              {
                if (v158 == 128)
                  v160 = 2;
                else
                  v160 = 1;
                if (v158 == 130)
                  v161 = 4;
                else
                  v161 = v160;
                JSC::LLInt::returnLocationThunk(230, v161, &v230);
                v44 = v230;
                v75 = v231;
                v231 = 0;
                if (!v75)
                  goto LABEL_291;
                do
                {
                  v162 = __ldaxr(v75);
                  v77 = --v162 == 0;
                }
                while (__stlxr(v162, v75));
                goto LABEL_289;
              }
              v179 = *v33;
              if ((v158 | 2) == 0x82)
                v179 = v33[1];
              if (v179 != 35)
              {
                __break(0xC471u);
                JUMPOUT(0x19845E0E8);
              }
              if (v158 == 128)
                v180 = 2;
              else
                v180 = 1;
              if (v158 == 130)
                v181 = 4;
              else
                v181 = v180;
              JSC::LLInt::returnLocationThunk(231, v181, &v230);
              v44 = v230;
              v75 = v231;
              v231 = 0;
              if (v75)
              {
                do
                {
                  v182 = __ldaxr(v75);
                  v77 = --v182 == 0;
                }
                while (__stlxr(v182, v75));
LABEL_289:
                if (v77)
                {
                  atomic_store(1u, v75);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v75, v73, v74, a4, a5, a6, a7, a8);
                  WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
                }
              }
LABEL_291:
              v32 = 1;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19845E014);
          }
          goto LABEL_48;
        }
      }
      std::call_once[abi:sn180100]<JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::$_0>((uint64_t)&v230);
      v44 = JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::codeRef;
      v203 = (unsigned int *)JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::codeRef;
      if (JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::codeRef)
      {
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 + 1, v203));
        do
        {
          v205 = __ldaxr(v203);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v203));
        if (!v206)
        {
          atomic_store(1u, v203);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v203, v201, v202, a4, a5, a6, a7, a8);
          WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
        }
      }
      goto LABEL_48;
    }
    v52 = *(_DWORD *)(a1 + 200);
    if (v52 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v226, v11, a3, a4, a5, a6, a7, a8);
      v52 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = -129989723;
    *(_DWORD *)(a1 + 200) += 4;
    v53 = *(_QWORD *)(v18 + 24);
    *((_QWORD *)&v54 + 1) = (16 * v53) >> 56;
    *(_QWORD *)&v54 = v53 << 12;
    JSC::MacroAssemblerARM64::store64(a1, 5, ((v54 >> 9) & 0xFFFFFFF800000000) + 0x80000001DLL, a4, a5, a6, a7, a8);
    v62 = *(_DWORD *)(a1 + 200);
    if (v62 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v226, v55, v56, v57, v58, v59, v60, v61);
      v62 = *(_DWORD *)(a1 + 200);
    }
    v46 = 0;
    v32 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = -130022493;
    *(_DWORD *)(a1 + 200) += 4;
    v51 = 3;
LABEL_97:
    v83 = *(_QWORD *)(v18 + 24);
    if (v20)
    {
      v16 = a1 + 264;
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19845DF34);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v20, v227, v57, v58, v59, v60, v61);
      v84 = 16;
    }
    else
    {
      v84 = 63;
      v16 = a1 + 264;
    }
    *((_QWORD *)&v85 + 1) = (16 * v83) >> 56;
    *(_QWORD *)&v85 = v83 << 12;
    JSC::MacroAssemblerARM64::store64(a1, v84, ((v85 >> 9) & 0xFFFFFFF800000000) + 0x100000001DLL, v57, v58, v59, v60, v61);
    v86 = *(_QWORD *)(v18 + 24);
    *((_QWORD *)&v85 + 1) = (16 * v86) >> 56;
    *(_QWORD *)&v85 = v86 << 12;
    JSC::AssemblyHelpers::emitSaveOrCopyLLIntBaselineCalleeSavesFor(a1, v20, v85 >> 44, v26, 2, 1, 4, v87);
    if (v32)
    {
      v93 = (_QWORD *)(*v46 & 0xFFFFFFFF8);
      if ((*v46 & 1) != 0)
      {
        v93 = (_QWORD *)*v93;
        if (v93)
          goto LABEL_194;
LABEL_104:
        v94 = *(_QWORD *)(a1 + 344);
      }
      else
      {
        if (!v93)
          goto LABEL_104;
LABEL_194:
        v94 = v93[1];
      }
      v95 = *(_QWORD *)(v94 + 136);
      v101 = JSC::DFG::calleeSaveSlot(v18, *(_QWORD *)(v20 + 120), 0x19u);
      if (v95)
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19845DF94);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v95, v16, v96, v97, v98, v99, v100);
        v102 = 16;
      }
      else
      {
        v102 = 63;
      }
      JSC::MacroAssemblerARM64::store64(a1, v102, v101, v96, v97, v98, v99, v100);
      v113 = *(_QWORD *)(v94 + 80);
      v119 = JSC::DFG::calleeSaveSlot(v18, *(_QWORD *)(v20 + 120), 0x1Au);
      if (!v113)
        goto LABEL_123;
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19845DFB4);
      }
      goto LABEL_118;
    }
    if ((v26 & 1) != 0)
      goto LABEL_125;
    v103 = (_QWORD *)(*v46 & 0xFFFFFFFF8);
    if ((*v46 & 1) != 0)
    {
      v103 = (_QWORD *)*v103;
      if (v103)
      {
LABEL_251:
        v104 = (_QWORD *)v103[1];
        goto LABEL_112;
      }
    }
    else if (v103)
    {
      goto LABEL_251;
    }
    v104 = *(_QWORD **)(a1 + 344);
LABEL_112:
    v105 = v104[17];
    v111 = JSC::DFG::calleeSaveSlot(v18, *(_QWORD *)(v20 + 120), 0x19u);
    if (v105)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19845E034);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v105, v16, v106, v107, v108, v109, v110);
      v112 = 16;
    }
    else
    {
      v112 = 63;
    }
    JSC::MacroAssemblerARM64::store64(a1, v112, v111, v106, v107, v108, v109, v110);
    v122 = v104[15];
    if (v122 && (*(_BYTE *)(v122 + 12) & 0xFE) == 4)
    {
      v119 = JSC::DFG::calleeSaveSlot(v18, *(_QWORD *)(v20 + 120), 0x1Au);
LABEL_123:
      v120 = a1;
      v121 = 63;
      goto LABEL_124;
    }
    v113 = v104[16];
    v119 = JSC::DFG::calleeSaveSlot(v18, *(_QWORD *)(v20 + 120), 0x1Au);
    if (!v113)
      goto LABEL_123;
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19845E0C8);
    }
LABEL_118:
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v113, v16, v114, v115, v116, v117, v118);
    v120 = a1;
    v121 = 16;
LABEL_124:
    JSC::MacroAssemblerARM64::store64(v120, v121, v119, v114, v115, v116, v117, v118);
LABEL_125:
    v123 = *(_QWORD *)(v18 + 24);
    if ((v123 >> 60) - 3 >= 3)
    {
      if ((v123 & 0x3FFFFF) != 0)
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19845DFD4);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v123 & 0x3FFFFF), v16, v88, v89, v90, v91, v92);
        v124 = 16;
      }
      else
      {
        v124 = 63;
      }
      *((_QWORD *)&v125 + 1) = (uint64_t)(16 * v123) >> 56;
      *(_QWORD *)&v125 = v123 << 12;
      JSC::MacroAssemblerARM64::store32(a1, v124, ((v125 >> 9) & 0xFFFFFFF800000000) + 0x200000001DLL, v88, v89, v90, v91, v92);
      v123 = *(_QWORD *)(v18 + 24);
    }
    *((_QWORD *)&v126 + 1) = (uint64_t)(16 * v123) >> 56;
    *(_QWORD *)&v126 = v123 << 12;
    JSC::MacroAssemblerARM64::store64(a1, v51, (v126 >> 9) & 0xFFFFFFF800000000 | 0x1D, v88, v89, v90, v91, v92);
    v132 = *v14;
    if ((*v14 & 2) != 0)
    {
      LODWORD(v132) = -1;
LABEL_145:
      v230 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 80);
      LODWORD(v231) = v132 >> 2;
      JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const>::next((uint64_t)&v230, (uint64_t)v228);
      LODWORD(v132) = 4 * v229;
      goto LABEL_135;
    }
    if ((v132 & 1) != 0)
      LODWORD(v132) = *(_DWORD *)((v132 & 0xFFFFFFFF8) + 8);
    else
      v132 >>= 36;
    if ((v132 & 3) != 0)
      goto LABEL_145;
LABEL_135:
    v133 = *(_QWORD *)(v18 + 24);
    if (v132 >= 4)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19845DF74);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(v132 >> 2), v16, v127, v128, v129, v130, v131);
      v134 = 16;
    }
    else
    {
      v134 = 63;
    }
    *((_QWORD *)&v135 + 1) = (16 * v133) >> 56;
    *(_QWORD *)&v135 = v133 << 12;
    JSC::MacroAssemblerARM64::store32(a1, v134, ((v135 >> 9) & 0xFFFFFFF800000000) + 0x240000001DLL, v127, v128, v129, v130, v131);
    if ((*(_BYTE *)(v18 + 32) & 1) != 0)
      goto LABEL_299;
    v136 = *(_QWORD *)(v18 + 24);
    v137 = v136 << 12;
    v138 = (16 * v136) >> 56;
    if (*(_BYTE *)(v18 + 40) == 17)
    {
      v139 = *(_QWORD *)(v18 + 41);
      *((_QWORD *)&v141 + 1) = v138;
      *(_QWORD *)&v141 = v137;
      v140 = v141 >> 9;
      if (v139)
      {
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x19845DFF4);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v139, v16, a4, a5, a6, a7, a8);
        v142 = 16;
        goto LABEL_298;
      }
    }
    else
    {
      *((_QWORD *)&v195 + 1) = v138;
      *(_QWORD *)&v195 = v137;
      v140 = v195 >> 9;
    }
    v142 = 63;
LABEL_298:
    JSC::MacroAssemblerARM64::store64(a1, v142, (v140 & 0xFFFFFFF800000000) + 0x180000001DLL, a4, a5, a6, a7, a8);
LABEL_299:
    v196 = (_QWORD *)(*v14 & 0xFFFFFFFF8);
    if ((*v14 & 1) != 0)
      v196 = (_QWORD *)*v196;
    do
    {
      v197 = v196;
      v13 = v196[2];
      v198 = v196[3] >> 60;
      v196 = (_QWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 1) != 0)
        v196 = (_QWORD *)*v196;
      v199 = (v198 < 0xC) & (0x824u >> v198);
      if (v196)
        v200 = v199;
      else
        v200 = 0;
    }
    while ((v200 & 1) != 0);
    v14 = v197 + 2;
    if ((v199 & 1) != 0)
      return;
  }
  v18 = v13 & 0xFFFFFFFF8;
  if (v17)
    goto LABEL_10;
  if ((v13 & 2) != 0)
    goto LABEL_339;
  v13 >>= 36;
LABEL_318:
  if (v13 < 4)
  {
    v223 = -1207811137;
    goto LABEL_323;
  }
  v224 = v13 >> 2;
LABEL_321:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19845E0A8);
  }
  v223 = -1207811152;
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v224, v16, a4, a5, a6, a7, a8);
LABEL_323:
  v225 = *(_DWORD *)(a1 + 200);
  if (v225 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v226, v11, a3, a4, a5, a6, a7, a8);
    v225 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v225) = v223;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::DFG::adjustAndJumpToTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  _QWORD v137[2];

  v11 = (JSC::AssemblerBuffer *)(a2 + 56);
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = -721208385;
  *(_DWORD *)(a2 + 200) += 4;
  v13 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(v13 + 192))
    v14 = *(_QWORD *)(v13 + 192);
  else
    v14 = *(_QWORD *)(a2 + 336);
  v15 = *(_QWORD *)(v14 + 120);
  if (v15)
  {
    v16 = *(unsigned __int8 *)(v15 + 12);
    if ((v16 & 0xFE) != 2 && v16 != 0)
      goto LABEL_80;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v14, 1, a4, a5, a6, a7, a8);
  JSC::DFG::osrWriteBarrier(a1, a2, v18, v19, v20, v21, v22, v23);
  v24 = *(unsigned int **)(*(_QWORD *)(a2 + 336) + 120);
  if (v24)
  {
    v25 = v24 + 2;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v27 = v24 + 2;
  v33 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v24 + 72))(v24) + 32);
  do
  {
    v34 = __ldaxr(v27);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v27));
  if (!v35)
  {
    atomic_store(1u, v24 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 32))(v24);
  }
  if (v33)
  {
    for (i = *(_QWORD *)(v33 + 8); i; i = *(_QWORD *)(i + 56))
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(i + 8), 1, v28, v29, v30, v31, v32);
      JSC::DFG::osrWriteBarrier(a1, a2, v37, v38, v39, v40, v41, v42);
    }
  }
  v43 = *(_QWORD *)(a3 + 8);
  v44 = v43 & 0xFFFFFFFF8;
  v45 = v43 & 0xFFFFFFFF8;
  if ((v43 & 1) != 0)
    v45 = *(_QWORD *)v44;
  if (v45)
  {
    v103 = *(_QWORD *)(v45 + 24);
    *((_QWORD *)&v104 + 1) = (16 * v103) >> 56;
    *(_QWORD *)&v104 = v103 << 12;
    JSC::MacroAssemblerARM64::add64(a2, (v104 >> 41) & 0xFFFFFFF8, 29, 29, v29, v30, v31, v32);
    v43 = *(_QWORD *)(a3 + 8);
    v44 = v43 & 0xFFFFFFFF8;
  }
  v46 = *(_QWORD **)(a2 + 344);
  v47 = v44;
  if ((v43 & 1) != 0)
    v47 = *(_QWORD *)v44;
  if (v47)
    v46 = *(_QWORD **)(v47 + 8);
  if (HIBYTE(word_1ECF4C758) || (v48 = v46[15]) != 0 && *(_BYTE *)(v48 + 12) == 2)
  {
    if ((v43 & 2) != 0)
    {
      v106 = 0x3FFFFFFFLL;
      v107 = **(_QWORD **)(v46[7] + 80) + 0x3FFFFFFFLL;
    }
    else
    {
      if ((v43 & 1) != 0)
        LODWORD(v105) = *(_DWORD *)(v44 + 8);
      else
        v105 = v43 >> 36;
      v106 = v105 >> 2;
      v107 = **(_QWORD **)(v46[7] + 80) + v106;
      if ((v105 & 3) == 0)
      {
        JSC::LLInt::normalOSRExitTrampolineThunk(v137);
        v70 = v137[0];
LABEL_68:
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v137, v108, v109, v110, v111, v112, v113, v114);
        if ((*(_BYTE *)(a3 + 4) & 0xFE) == 0x1A)
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v107, 2, v115, v116, v117, v118, v119);
          if (*(_DWORD *)(a1 + 90512))
          {
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
            __break(0xC471u);
            return;
          }
          JSC::MacroAssemblerARM64::store64(a2, 2, a1 + 90504, v120, v121, v122, v123, v124);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v46[17], 25, v115, v116, v117, v118, v119);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v46[10], 26, v125, v126, v127, v128, v129);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v106, 4, v130, v131, v132, v133, v134);
        goto LABEL_50;
      }
    }
    std::call_once[abi:sn180100]<JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::$_0>((uint64_t)v137);
    v70 = JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef;
    v137[0] = JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef;
    v135 = (unsigned int *)JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef;
    if (JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef)
    {
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 + 1, v135));
      v70 = v137[0];
    }
    v137[1] = v135;
    goto LABEL_68;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v46[17], 25, v28, v29, v30, v31, v32);
  v54 = v46[15];
  if (v54 && (*(_BYTE *)(v54 + 12) & 0xFE) == 4)
    v55 = 0;
  else
    v55 = v46[16];
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v55, 26, v49, v50, v51, v52, v53);
  v61 = *(_QWORD *)(a3 + 8);
  if ((v61 & 2) != 0
    || ((v61 & 1) != 0 ? (LODWORD(v61) = *(_DWORD *)((v61 & 0xFFFFFFFF8) + 8)) : (v61 >>= 36), (v61 & 3) != 0))
  {
    std::call_once[abi:sn180100]<JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::$_0>((uint64_t)v137);
    v70 = JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef;
    v91 = (unsigned int *)JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef;
    if (JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef)
    {
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 + 1, v91));
      do
      {
        v93 = __ldaxr(v91);
        v94 = v93 - 1;
      }
      while (__stlxr(v94, v91));
      if (!v94)
      {
        atomic_store(1u, v91);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v91, v89, v90, v56, v57, v58, v59, v60);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
    }
    goto LABEL_50;
  }
  v62 = v46[15];
  v63 = *(_QWORD *)(v62 + 104);
  v64 = *(unsigned int *)(v62 + 112);
  if (v64 < 2)
  {
    v65 = 0;
    v70 = 0;
    if (!v63)
      goto LABEL_50;
  }
  else
  {
    v65 = 0;
    v66 = v63 + 8 * v64;
    while (1)
    {
      v67 = v64 - 1;
      v68 = *(_DWORD *)(v66 + 4 * (v65 + ((v64 - 1) >> 1)));
      if (v68 == (_DWORD)v61)
        break;
      v64 -= (v67 >> 1) + 1;
      if (v68 <= v61)
      {
        v69 = (v67 >> 1) + 1;
      }
      else
      {
        v64 = v67 >> 1;
        v69 = 0;
      }
      v65 += v69;
      if (v64 <= 1)
        goto LABEL_49;
    }
    v65 += (v64 - 1) >> 1;
  }
LABEL_49:
  v70 = *(_QWORD *)(v63 + 8 * v65);
LABEL_50:
  if ((*(_BYTE *)(a3 + 4) & 0xFE) == 0x1A)
  {
    JSC::MacroAssemblerARM64::load64(a2, a1 + 48, 0, v56, v57, v58, v59, v60);
    JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)a2, 0);
    JSC::MacroAssemblerARM64::store64(a2, 29, a1 + 90480, v71, v72, v73, v74, v75);
  }
  JSC::MacroAssemblerARM64::add64(a2, 16 - ((8 * *(_DWORD *)(v46[7] + 20) + 24) & 0xFFFFFFF0), 29, 31, v57, v58, v59, v60);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v70, 2, v76, v77, v78, v79, v80);
  v88 = *(_DWORD *)(a2 + 200);
  if (v88 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v81, v82, v83, v84, v85, v86, v87);
    v88 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v88) = -702611392;
  *(_DWORD *)(a2 + 200) += 4;
}

uint64_t WTF::dataLog<char [24],JSC::CodeBlock>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Speculation failure in ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [10],unsigned int,char [3],JSC::BytecodeIndex,char [3],WTF::ASCIILiteral,char [8]>(_DWORD *a1, JSC::BytecodeIndex *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  char **v17;
  char *v18;
  int v19;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", " @ exit #");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", " (");
  JSC::BytecodeIndex::dump(a2, v8);
  WTF::PrintStream::printf(v8, "%s", ", ");
  v9 = *(char **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v9)
  {
    v13 = v10 - 1;
    if (!v10)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v18, v12);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v18 = (char *)v14;
    v19 = 0;
  }
  WTF::printExpectedCStringHelper(v11, "StringView", &v18);
  if (v19 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v19])(&v17, &v18);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", ") with ");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [18],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [32],unsigned int,char [30],unsigned int>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "executeCounter = ");
  WTF::PrintStream::printf(v8, "%lf/%lf, %d", *(float *)(a1 + 4) + (double)*(int *)a1, (double)*(int *)(a1 + 8), *(_DWORD *)a1);
  WTF::PrintStream::printf(v8, "%s", ", reoptimizationRetryCounter = ");
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", ", optimizationDelayCounter = ");
  WTF::PrintStream::printf(v8, "%u", *a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [20],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", ", osrExitCounter = ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [2],WTF::ASCIILiteral,char [2],WTF::RawPointer>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char v14;
  char **v15;
  char *v16;
  int v17;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " ");
  v7 = *(char **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
  {
    v11 = v8 - 1;
    if (!v8)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v16, v10);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v16 = (char *)v12;
    v17 = 0;
  }
  WTF::printExpectedCStringHelper(v9, "StringView", &v16);
  if (v17 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v15, &v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", ":");
  WTF::PrintStream::printf(v6, "%p", *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [2],WTF::ASCIILiteral,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;
  int v15;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " ");
  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v9 = v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v14, v8);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v14 = (char *)v10;
    v15 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v14);
  if (v15 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v15])(&v13, &v14);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", ":");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DFG::calleeSaveSlot(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  char v21;
  char **v22;
  char *v23;

  if (a2)
  {
    v6 = (unsigned int *)(a2 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(unsigned __int8 *)(a2 + 12);
    if (v8 == 5)
    {
      v10 = (uint64_t *)(a2 + 256);
    }
    else if (v8 == 4)
    {
      v20 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      if (v20 != -1)
      {
        v23 = &v21;
        v22 = &v23;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v10 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
    }
    else
    {
      v9 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
      if (v9 != -1)
      {
        v23 = &v21;
        v22 = &v23;
        std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
      }
      v10 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    }
    do
    {
      v11 = __ldaxr(v6);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v6));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)(a2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    }
  }
  else
  {
    v10 = JSC::JITCode::calleeSaveRegisters(0);
  }
  v13 = (_DWORD *)*v10;
  if (!*v10 || (v16 = *v13, v14 = (unint64_t *)(v13 + 2), (v15 = v16) == 0))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x19845EEFCLL);
  }
  while (1)
  {
    v18 = *v14++;
    v17 = v18;
    if (((v18 ^ a3) & 0x7F) == 0)
      return ((((*(_QWORD *)(a1 + 24) >> 29) & 0x7FFFF8 | ((int)(*(_QWORD *)(a1 + 24) >> 28) >> 24 << 23))
             + ((v17 >> 6) & 0xFFFFFFFC)) >> 2 << 34) | 0x1DLL;
    if (!--v15)
      goto LABEL_16;
  }
}

unsigned int *JSC::DFG::osrWriteBarrier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v32[3];

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19845F0E4);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v10 = *(_BYTE *)(a2 + 304) & 0x1F | 0x38407020;
  v11 = (JSC::AssemblerBuffer *)(a2 + 56);
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v10;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 8, 17, 0, a5, a6, a7, a8, (uint64_t)v32);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a1, 0, v13, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)operationOSRWriteBarrier, 8, v18, v19, v20, v21, v22);
  *(_DWORD *)(a2 + 208) = 0;
  v30 = *(_DWORD *)(a2 + 200);
  if (v30 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -700514048;
  *(_DWORD *)(a2 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v32, a2, v24, v25, v26, v27, v28, v29);
}

uint64_t JSC::numberOfStaticOSRExitFuzzChecks(JSC *this)
{
  return JSC::DFG::g_numberOfStaticOSRExitFuzzChecks;
}

uint64_t JSC::numberOfOSRExitFuzzChecks(JSC *this)
{
  return JSC::DFG::g_numberOfOSRExitFuzzChecks;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::CheckpointOSRExitSideState>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 5)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x19845F2B0);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void JSC::CodeOrigin::walkUpInlineStack<JSC::CodeOrigin::inlineStackContainsActiveCheckpoint(void)::{lambda(JSC::CodeOrigin)#1}>(uint64_t *a1, _BYTE **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *a1;
  if ((*a1 & 1) != 0)
  {
    v22 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v23 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v27 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = v22;
      *(_DWORD *)(v27 + 8) = v23;
      v25 = 1;
      v22 = v27;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v9 = v22 | v25;
  }
  while (1)
  {
    v10 = v9;
    if ((v9 & 1) != 0)
    {
      v18 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v19 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
          ? (v20 = (_DWORD)v19 == -1)
          : (v20 = 1),
            v20))
      {
        v21 = 2;
      }
      else if (v19 >> 28)
      {
        v26 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v18 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v18 = v26;
        *(_DWORD *)(v18 + 8) = v19;
        v21 = 1;
      }
      else
      {
        v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v18 = v19 << 36;
      }
      v10 = v18 | v21;
    }
    if ((v10 & 2) != 0
      || ((v10 & 1) != 0 ? (LODWORD(v11) = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8)) : (v11 = v10 >> 36), (v11 & 3) != 0))
    {
      **a2 = 1;
    }
    if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v12 = (uint64_t *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 1) != 0)
      break;
    if (!v12)
      return;
    v13 = v9 & 0xFFFFFFFF8;
LABEL_13:
    v9 = *(_QWORD *)(v13 + 16);
    if ((v9 & 1) != 0)
    {
      v14 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v15 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
          ? (v16 = (_DWORD)v15 == -1)
          : (v16 = 1),
            v16))
      {
        v17 = 2;
      }
      else if (v15 >> 28)
      {
        v28 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v28 = v14;
        *(_DWORD *)(v28 + 8) = v15;
        v17 = 1;
        v14 = v28;
      }
      else
      {
        v17 = v14;
        v14 = v15 << 36;
      }
      v9 = v14 | v17;
    }
  }
  v13 = *v12;
  if (*v12)
  {
    if (v12)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  if (v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = a2;
  if (*((_DWORD *)a1 + 18) <= 1u)
  {
    *((_DWORD *)a1 + 21) = a2;
    return;
  }
  v10 = *((_DWORD *)a1 + 19);
  v11 = *((_DWORD *)a1 + 12);
  v12 = (*((_DWORD *)a1 + 13) - v10);
  v13 = *((_DWORD *)a1 + 6);
  if (v13)
  {
    if (v11)
    {
      if (v13 == 2)
      {
        v14 = *((_BYTE *)a1 + 10);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*a1, (uint64_t)a1[5], v14, a4, a5, a6, a7, a8);
        v11 = *((_DWORD *)a1 + 12);
      }
      else
      {
        v14 = (_BYTE)a1[4] & 0x7F;
      }
      if (v11 != 2)
        goto LABEL_8;
LABEL_45:
      v15 = *((_BYTE *)a1 + 11);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*a1, (uint64_t)a1[8], v15, a4, a5, a6, a7, a8);
      goto LABEL_9;
    }
    if (v13 == 2)
    {
      v14 = *((_BYTE *)a1 + 10);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*a1, (uint64_t)a1[5], v14, a4, a5, a6, a7, a8);
    }
    else
    {
      v14 = (_BYTE)a1[4] & 0x7F;
    }
    v43 = *((char *)a1 + 11);
    v15 = *((_BYTE *)a1 + 11);
    v44 = (uint64_t)*a1;
    v45 = *((unsigned __int8 *)a1 + 8) | (unint64_t)(v12 << 32);
LABEL_50:
    JSC::MacroAssemblerARM64::load64(v44, v45, v43, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  v25 = (*((_DWORD *)a1 + 7) - v10);
  v14 = *((_BYTE *)a1 + 10);
  if (!v11)
  {
    v15 = *((_BYTE *)a1 + 11);
    v26 = v25 - v12;
    if ((int)v25 - (int)v12 < 0)
      v26 = v12 - v25;
    if ((int)v12 >= (int)v25)
      v27 = v25;
    else
      v27 = v12;
    if (v26 == 8)
    {
      if ((v27 & 7) == 0 && (((int)v27 >> 3) + 64) < 0x80)
      {
LABEL_36:
        v28 = *((_BYTE *)a1 + 8);
        if ((int)v25 >= (int)v12)
        {
          v29 = v12;
          v30 = v28;
          v31 = v15;
          v32 = v14;
        }
        else
        {
          v29 = v25;
          v30 = v28;
          v31 = v14;
          v32 = v15;
        }
        JSC::MacroAssemblerARM64::loadPair64(*a1, v30, v29, v31, v32, a6, a7, a8);
        goto LABEL_9;
      }
      if (*((_DWORD *)a1 + 4) == 1)
      {
        *((_DWORD *)a1 + 19) = v27 + v10;
        JSC::MacroAssemblerARM64::add64((uint64_t)*a1, v27, *((char *)a1 + 8), *((char *)a1 + 8), a5, a6, a7, a8);
        LODWORD(v25) = v25 - v27;
        LODWORD(v12) = v12 - v27;
        goto LABEL_36;
      }
    }
    JSC::MacroAssemblerARM64::load64((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | (unint64_t)(v25 << 32), v14, a4, a5, a6, a7, a8);
    v44 = (uint64_t)*a1;
    v45 = *((unsigned __int8 *)a1 + 8) | (unint64_t)(v12 << 32);
    v43 = v15;
    goto LABEL_50;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)*a1, *((unsigned __int8 *)a1 + 8) | (unint64_t)(v25 << 32), v14, a4, a5, a6, a7, a8);
  if (*((_DWORD *)a1 + 12) == 2)
    goto LABEL_45;
LABEL_8:
  v15 = (_BYTE)a1[7] & 0x7F;
LABEL_9:
  v16 = *((_DWORD *)a1 + 20);
  v17 = (*((_DWORD *)a1 + 21) - v16);
  v18 = (v8 - v16);
  v19 = v17 - v18;
  if ((int)v17 - (int)v18 < 0)
    v19 = v18 - v17;
  if ((int)v18 >= (int)v17)
    v20 = v17;
  else
    v20 = v18;
  if (v19 != 8)
    goto LABEL_53;
  if ((v20 & 7) == 0 && (((int)v20 >> 3) + 64) < 0x80)
    goto LABEL_17;
  if (*((_DWORD *)a1 + 4) != 1)
  {
LABEL_53:
    JSC::MacroAssemblerARM64::store64((uint64_t)*a1, v14, *((unsigned __int8 *)a1 + 9) | (unint64_t)(v17 << 32), a4, a5, a6, a7, a8);
    v41 = (uint64_t)*a1;
    v39 = *((unsigned __int8 *)a1 + 9) | (unint64_t)(v18 << 32);
    v40 = v15;
    goto LABEL_41;
  }
  *((_DWORD *)a1 + 20) = v20 + v16;
  JSC::MacroAssemblerARM64::add64((uint64_t)*a1, v20, *((char *)a1 + 9), *((char *)a1 + 9), a5, a6, a7, a8);
  v17 = (v17 - v20);
  v18 = (v18 - v20);
LABEL_17:
  v21 = *a1;
  v22 = *((unsigned __int8 *)a1 + 9);
  if ((int)v17 >= (int)v18)
  {
    if ((v18 & 7) == 0 && (((int)v18 >> 3) + 64) <= 0x7F)
    {
      v23 = ((v14 & 0x1F) << 10) & 0x7FFF | ((((int)v18 >> 3) & 0x7F) << 15) | v15 & 0x1F | (32 * (char)v22) | 0xA9000000;
      goto LABEL_21;
    }
    v42 = *((unsigned __int8 *)a1 + 9) | (unint64_t)(v18 << 32);
    JSC::MacroAssemblerARM64::store64((uint64_t)*a1, v15, v42, a4, a5, a6, a7, a8);
    v39 = v42 + 0x800000000;
    v40 = v14;
  }
  else
  {
    if ((v17 & 7) == 0 && (((int)v17 >> 3) + 64) <= 0x7F)
    {
      v23 = ((v15 & 0x1F) << 10) & 0x7FFF | ((((int)v17 >> 3) & 0x7F) << 15) | v14 & 0x1F | (32 * *((char *)a1 + 9)) | 0xA9000000;
LABEL_21:
      v24 = v21[50];
      if (v24 + 4 > v21[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 + 14), a2, a3, a4, a5, a6, a7, a8);
        v24 = v21[50];
      }
      *(_DWORD *)(*((_QWORD *)v21 + 7) + v24) = v23;
      v21[50] += 4;
      goto LABEL_42;
    }
    v33 = v22 | (v17 << 32);
    JSC::MacroAssemblerARM64::store64((uint64_t)*a1, v14, v33, a4, a5, a6, a7, a8);
    v39 = v33 + 0x800000000;
    v40 = v15;
  }
  v41 = (uint64_t)v21;
LABEL_41:
  JSC::MacroAssemblerARM64::store64(v41, v40, v39, v34, v35, v36, v37, v38);
LABEL_42:
  *((_DWORD *)a1 + 18) = 0;
}

uint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::opcodeID(unsigned __int8 *a1)
{
  uint64_t result;

  result = *a1;
  if ((result | 2) == 0x82)
    return a1[1];
  return result;
}

uint64_t *JSC::CodeOrigin::CodeOrigin(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v9;

  v3 = a3;
  v4 = a2;
  if ((_DWORD)a2 == 0x3FFFFFFF || (_DWORD)a2 == -1)
  {
    v7 = 2;
  }
  else if (a2 >> 28)
  {
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = v3;
    *(_DWORD *)(v9 + 8) = v4;
    v7 = 1;
    v3 = v9;
  }
  else
  {
    v7 = a3;
    v3 = a2 << 36;
  }
  *a1 = v3 | v7;
  return a1;
}

uint64_t JSC::DFG::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v46;
  int v47;
  int v48;
  BOOL v49;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 12))
    return 0;
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)a2;
    if (**(_QWORD **)a1 != **(_QWORD **)a2)
      return 0;
    if (*((unsigned __int8 *)v3 + 8) != *((unsigned __int8 *)v4 + 8) || *((_DWORD *)v3 + 3) != *((_DWORD *)v4 + 3))
      return 0;
    v6 = 0;
    v7 = 1;
    do
    {
      if (16 * v2 - 16 == v6)
        goto LABEL_17;
      v8 = v7;
      v9 = &v3[v6 / 8];
      v10 = &v4[v6 / 8];
      if (v3[v6 / 8 + 2] != v4[v6 / 8 + 2])
        break;
      v11 = *((unsigned __int8 *)v9 + 24);
      v12 = *((unsigned __int8 *)v10 + 24);
      v13 = *((_DWORD *)v9 + 7);
      v14 = *((_DWORD *)v10 + 7);
      v7 = v8 + 1;
      v6 += 16;
    }
    while (v11 == v12 && v13 == v14);
    if (v8 < v2)
      return 0;
  }
LABEL_17:
  v16 = *(_QWORD *)(a1 + 24);
  if (v16)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = *(_QWORD *)(a2 + 24);
  if (v18)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  if (v17 != v19)
    return 0;
  if (v16)
    v20 = v16 + 32 * *(unsigned int *)(v16 - 4);
  else
    v20 = 0;
  if (v18)
    v21 = v18 + 32 * *(unsigned int *)(v18 - 4);
  else
    v21 = 0;
  if (!v16)
  {
    v22 = 0;
    v23 = 0;
LABEL_28:
    v24 = v16 + 32 * v23;
    v16 = v22;
    goto LABEL_29;
  }
  v23 = *(unsigned int *)(v16 - 4);
  v24 = v16 + 32 * v23;
  if (!*(_DWORD *)(v16 - 12))
  {
    v22 = v16 + 32 * v23;
    goto LABEL_28;
  }
  if (!(_DWORD)v23)
    goto LABEL_29;
  v26 = 32 * v23;
  do
  {
    v27 = *(_DWORD *)(v16 + 8);
    if (*(_QWORD *)v16)
    {
      v28 = *(_DWORD *)(v16 + 12);
    }
    else
    {
      v28 = *(_DWORD *)(v16 + 12);
      if (!(v27 | v28))
        goto LABEL_40;
    }
    if (v27)
      v29 = 1;
    else
      v29 = v28 == 0;
    if (v29)
      goto LABEL_29;
LABEL_40:
    v16 += 32;
    v26 -= 32;
  }
  while (v26);
  v16 = v24;
LABEL_29:
  if (v20 == v16)
    return 1;
  if (!v18)
  {
    if (v21)
    {
      result = 1;
      while (1)
      {
        if (*(_QWORD *)(v16 + 16) != MEMORY[0x10])
          return 0;
        if (*(unsigned __int8 *)(v16 + 24) != MEMORY[0x18] || *(_DWORD *)(v16 + 28) != MEMORY[0x1C])
          return 0;
        v46 = v16 + 32;
        v16 = v24;
        if (v46 != v24)
          break;
LABEL_97:
        if (v16 == v20)
          return result;
      }
      v16 = v46;
      while (1)
      {
        v47 = *(_DWORD *)(v16 + 8);
        if (*(_QWORD *)v16)
          break;
        v48 = *(_DWORD *)(v16 + 12);
        if (v47 | v48)
          goto LABEL_92;
LABEL_90:
        v16 += 32;
        if (v16 == v24)
        {
          v16 = v24;
          goto LABEL_97;
        }
      }
      v48 = *(_DWORD *)(v16 + 12);
LABEL_92:
      if (v47)
        v49 = 1;
      else
        v49 = v48 == 0;
      if (v49)
        goto LABEL_97;
      goto LABEL_90;
    }
    return 0;
  }
  while (2)
  {
    v30 = 0;
    v31 = *(_DWORD *)(v16 + 8);
    v32 = *(_DWORD *)(v16 + 12);
    v33 = ~(*(_QWORD *)v16 << 32) + *(_QWORD *)v16;
    v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
    v35 = (9 * (v34 ^ (v34 >> 8))) ^ ((9 * (v34 ^ (v34 >> 8))) >> 15);
    for (i = v32 + v31 + (((v35 + ~(v35 << 27)) >> 31) ^ (v35 + ~((_DWORD)v35 << 27))); ; i = v30 + v37)
    {
      v37 = i & *(_DWORD *)(v18 - 8);
      v38 = v18 + 32 * v37;
      if (*(_QWORD *)v38 == *(_QWORD *)v16 && *(_DWORD *)(v38 + 8) == v31 && *(_DWORD *)(v38 + 12) == v32)
        break;
      if (!*(_QWORD *)v38 && !*(_QWORD *)(v38 + 8))
      {
        v38 = v18 + 32 * *(unsigned int *)(v18 - 4);
        break;
      }
      ++v30;
    }
    if (v38 == v21 || *(_QWORD *)(v16 + 16) != *(_QWORD *)(v38 + 16))
      return 0;
    if (*(unsigned __int8 *)(v16 + 24) != *(unsigned __int8 *)(v38 + 24)
      || *(_DWORD *)(v16 + 28) != *(_DWORD *)(v38 + 28))
    {
      return 0;
    }
    v41 = v16 + 32;
    v16 = v24;
    if (v41 == v24)
      goto LABEL_73;
    v16 = v41;
    while (2)
    {
      v42 = *(_DWORD *)(v16 + 8);
      if (*(_QWORD *)v16)
      {
        v43 = *(_DWORD *)(v16 + 12);
      }
      else
      {
        v43 = *(_DWORD *)(v16 + 12);
        if (!(v42 | v43))
          goto LABEL_66;
      }
      if (v42)
        v44 = 1;
      else
        v44 = v43 == 0;
      if (v44)
        goto LABEL_73;
LABEL_66:
      v16 += 32;
      if (v16 != v24)
        continue;
      break;
    }
    v16 = v24;
LABEL_73:
    result = 1;
    if (v16 != v20)
      continue;
    return result;
  }
}

void WTF::toCString<char [46],JSC::Operand,char [21],JSC::DFG::AvailabilityMap,char [12],JSC::CodeOrigin>(uint64_t *a1, int *a2, uint64_t a3, JSC::CodeOrigin *a4)
{
  int v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24[7];
  char v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  _BYTE *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = off_1E3572250;
  v27 = v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "Live bytecode local not available: operand = ");
  v8 = *a2;
  if (a2[1] == 2)
  {
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
    WTF::PrintStream::printf(v9, "%s", "tmp");
    WTF::PrintStream::printf(v9, "%d", v8);
  }
  else
  {
    LODWORD(v24[0]) = *a2;
    v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
    JSC::VirtualRegister::dump((unsigned int *)v24, v10);
  }
  v26[5]((WTF::StringPrintStream *)&v26);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ", availabilityMap = ");
  v24[0] = (uint64_t *)(a3 + 24);
  v24[1] = (uint64_t *)"=>";
  v24[2] = (uint64_t *)3;
  v24[3] = (uint64_t *)", ";
  v24[4] = (uint64_t *)3;
  v24[5] = (uint64_t *)&str_90_2;
  v24[6] = (uint64_t *)1;
  v25 = 0;
  v11 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v11, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a3, (uint64_t)v11);
  WTF::PrintStream::printf(v11, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v24, (uint64_t)v11);
  WTF::PrintStream::printf(v11, "%s", "}");
  v26[5]((WTF::StringPrintStream *)&v26);
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", ", origin = ");
  JSC::CodeOrigin::dump(a4, (WTF::PrintStream *)&v26);
  v26[5]((WTF::StringPrintStream *)&v26);
  v20 = v27;
  v19 = v28;
  *a1 = 0;
  if (!v20)
  {
    v23 = 0;
LABEL_9:
    WTF::fastFree(v23, v12, v13, v14, v15, v16, v17, v18);
    return;
  }
  if (v19 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19845FEE8);
  }
  v21 = WTF::fastMalloc((WTF *)(v19 + 17));
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = v19;
  *a1 = v21;
  v22 = v21 + 16;
  memcpy((void *)(v21 + 16), v20, v19);
  *(_BYTE *)(v22 + v19) = 0;
  v23 = (unint64_t)v27;
  if (v27 != v29)
    goto LABEL_9;
}

uint64_t WTF::dataLog<char [50],JSC::DFG::PromotedHeapLocation,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  int v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "PromotedHeapLocation is dead, but should not be: ");
  v5 = *(_DWORD *)(a1 + 12);
  LODWORD(v10) = *(_DWORD *)(a1 + 8);
  LODWORD(v9) = v5;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],JSC::DFG::Node *,char [3],unsigned int,char [2]>(v6, (int *)&v10, "(", (uint64_t *)a1, ", ", &v9, ")");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [8],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Block #");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [23],JSC::DFG::AvailabilityMap,char [2]>(const char *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  uint64_t **v10;
  uint64_t *v11[7];
  char v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v11[0] = (uint64_t *)&v9;
    v10 = v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  v11[0] = (uint64_t *)(a2 + 24);
  v11[1] = (uint64_t *)"=>";
  v11[2] = (uint64_t *)3;
  v11[3] = (uint64_t *)", ";
  v11[4] = (uint64_t *)3;
  v11[5] = (uint64_t *)&str_90_2;
  v11[6] = (uint64_t *)1;
  v12 = 0;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a2, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v11, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "}");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void WTF::Vector<JSC::DFG::AvailabilityMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 32 * v5;
        v16 = v4 + 12;
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *(_QWORD *)(v16 - 12);
          *(_QWORD *)(v16 - 12) = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *(_DWORD *)(v16 - 4);
          *(_DWORD *)(v16 - 4) = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)v16;
          *(_DWORD *)v16 = 0;
          *(_DWORD *)(v14 + 12) = v17;
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v16 + 4);
          *(_QWORD *)(v14 + 24) = 0;
          v18 = *(_QWORD *)(v16 + 12);
          *(_QWORD *)(v16 + 12) = 0;
          *(_QWORD *)(v14 + 24) = v18;
          v19 = *(_QWORD *)(v16 + 12);
          if (v19)
            WTF::fastFree(v19 - 16, v7, v8, v9, v10, v11, v12, v13);
          v20 = *(_QWORD *)(v16 - 12);
          if (v20)
          {
            *(_QWORD *)(v16 - 12) = 0;
            *(_DWORD *)(v16 - 4) = 0;
            WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 32;
          v14 += 32;
          v15 -= 32;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

__n128 WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability&>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v24;
  __n128 result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 12);
  v14 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
  v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
  v17 = v13 + v12 + (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = v8 + 32 * v19;
    v21 = *(_DWORD *)(v20 + 8);
    if (!*(_QWORD *)v20 && !*(_QWORD *)(v20 + 8))
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        v11[3] = 0x3FFFFFFF00000000;
        --*(_DWORD *)(*a1 - 16);
        v20 = (uint64_t)v11;
      }
      *(_OWORD *)v20 = *(_OWORD *)a2;
      result = *a3;
      *(__n128 *)(v20 + 16) = *a3;
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a1;
      if (*a1)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_26;
      }
      else if (3 * v31 > 4 * v30)
      {
LABEL_26:
        *(_QWORD *)a4 = v20;
        *(_QWORD *)(a4 + 8) = v28 + 32 * v31;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      v20 = WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::expand(a1, (uint64_t *)v20);
      v28 = *a1;
      if (*a1)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_26;
    }
    if (*(_QWORD *)v20 != *(_QWORD *)a2)
    {
      v22 = *(_DWORD *)(v20 + 12);
      goto LABEL_12;
    }
    v22 = *(_DWORD *)(v20 + 12);
    if (v21 == v12 && v22 == v13)
      break;
LABEL_12:
    if (v21)
      v24 = 1;
    else
      v24 = v22 == 0;
    if (!v24)
      v11 = (_QWORD *)(v8 + 32 * v19);
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v32 = 0;
  else
    v32 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v8 + 32 * v32;
  *(_BYTE *)(a4 + 16) = 0;
  result = *a3;
  *(__n128 *)(v8 + 32 * v19 + 16) = *a3;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1, v4, a2);
}

__n128 WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v24;
  __n128 result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 12);
  v14 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
  v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
  v17 = v13 + v12 + (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = v8 + 32 * v19;
    v21 = *(_DWORD *)(v20 + 8);
    if (!*(_QWORD *)v20 && !*(_QWORD *)(v20 + 8))
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        v11[3] = 0x3FFFFFFF00000000;
        --*(_DWORD *)(*a1 - 16);
        v20 = (uint64_t)v11;
      }
      *(_OWORD *)v20 = *(_OWORD *)a2;
      result = *a3;
      *(__n128 *)(v20 + 16) = *a3;
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a1;
      if (*a1)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_25;
      }
      else
      {
        if (3 * v31 > 4 * v30)
        {
LABEL_25:
          *(_QWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = v28 + 32 * v31;
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v31)
        {
          v33 = 8;
          goto LABEL_39;
        }
      }
      v33 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_39:
      v20 = WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1, v33, (uint64_t *)v20);
      v28 = *a1;
      if (*a1)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_25;
    }
    if (*(_QWORD *)v20 != *(_QWORD *)a2)
    {
      v22 = *(_DWORD *)(v20 + 12);
      goto LABEL_11;
    }
    v22 = *(_DWORD *)(v20 + 12);
    if (v21 == v12 && v22 == v13)
      break;
LABEL_11:
    if (v21)
      v24 = 1;
    else
      v24 = v22 == 0;
    if (!v24)
      v11 = (_QWORD *)(v8 + 32 * v19);
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v32 = 0;
  else
    v32 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v8 + 32 * v32;
  *(_BYTE *)(a4 + 16) = 0;
  result = *a3;
  *(__n128 *)(v8 + 32 * v19 + 16) = *a3;
  return result;
}

uint64_t WTF::dataLog<char [12],JSC::CodeBlock,char [5],JSC::CodeBlock,char [7],JSC::BytecodeIndex,char [2]>(uint64_t a1, uint64_t a2, JSC::BytecodeIndex *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "DFG OSR in ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", " -> ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", " from ");
  JSC::BytecodeIndex::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [33],unsigned long,char [5],JSC::JSValue,char [12],JSC::DFG::AbstractValue,char [2]>(_QWORD *a1, JSC::JSValue *a2, JSC::DFG::AbstractValue *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  JSC::Structure *v9;
  unint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "    OSR failed because argument ");
  WTF::PrintStream::printf(v8, "%lu", *a1);
  WTF::PrintStream::printf(v8, "%s", " is ");
  v9 = 0;
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v10 & 0xFFFE000000000002) == 0)
    v9 = (JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v8, 0, v9);
  WTF::PrintStream::printf(v8, "%s", ", expected ");
  JSC::DFG::AbstractValue::dumpInContext(a3, v8, 0);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [33],int,char [5],JSC::JSValue,char [12],char [13],char [2]>(_DWORD *a1, JSC::JSValue *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  JSC::Structure *v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    OSR failed because variable ");
  WTF::PrintStream::printf(v6, "%d", *a1);
  WTF::PrintStream::printf(v6, "%s", " is ");
  v7 = 0;
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v8 & 0xFFFE000000000002) == 0)
    v7 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v6, 0, v7);
  WTF::PrintStream::printf(v6, "%s", ", expected ");
  WTF::PrintStream::printf(v6, "%s", "machine int.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [33],int,char [5],JSC::JSValue,char [19],char [2]>(_DWORD *a1, JSC::JSValue *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  JSC::Structure *v7;
  unint64_t v8;
  char v10;
  char **v11;
  char *v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    OSR failed because variable ");
  WTF::PrintStream::printf(v6, "%d", *a1);
  WTF::PrintStream::printf(v6, "%s", " is ");
  v7 = 0;
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v8 & 0xFFFE000000000002) == 0)
    v7 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v6, 0, v7);
  WTF::PrintStream::printf(v6, "%s", ", expected number.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [33],JSC::VirtualRegister,char [5],JSC::JSValue,char [12],JSC::DFG::AbstractValue,char [2],char [2]>(unsigned int *a1, JSC::JSValue *a2, JSC::DFG::AbstractValue *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  JSC::Structure *v9;
  unint64_t v10;
  char v12;
  char **v13;
  char *v14;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "    OSR failed because variable ");
  JSC::VirtualRegister::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", " is ");
  v9 = 0;
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && (v10 & 0xFFFE000000000002) == 0)
    v9 = (JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a2, v8, 0, v9);
  WTF::PrintStream::printf(v8, "%s", ", expected ");
  JSC::DFG::AbstractValue::dumpInContext(a3, v8, 0);
  WTF::PrintStream::printf(v8, "%s", ".");
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [31],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    OSR returning data buffer ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::OSREntrypointCreationPhase>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  __int128 v7;
  double v8[5];

  JSC::CompilerTimingScope::CompilerTimingScope(v8, (uint64_t)"DFG", 4, a1[5], a1[6]);
  v2 = JSC::DFG::OSREntrypointCreationPhase::run((JSC::DFG::OSREntrypointCreationPhase *)a1);
  if ((_DWORD)v2)
  {
    v3 = a1[4];
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v4 = (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 16) & 0xFFFFFFFE) == 4) : (v4 = 0),
          !v4 ? (v5 = BYTE2(qword_1ECF4C32A) == 0) : (v5 = 0),
          !v5))
    {
      v7 = *(_OWORD *)(a1 + 5);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v3 + 1088, "Phase ", (uint64_t)&v7, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v8);
  return v2;
}

void JSC::DFG::OSREntrypointCreationPhase::~OSREntrypointCreationPhase(JSC::DFG::OSREntrypointCreationPhase *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  if (HIBYTE(qword_1ECF4C32A) && !*((_BYTE *)this + 56))
    JSC::DFG::Phase::validate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v9 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
}

JSC::DFG::OSREntrypointCreationPhase *JSC::DFG::OSREntrypointCreationPhase::OSREntrypointCreationPhase(JSC::DFG::OSREntrypointCreationPhase *this, JSC::DFG::Graph *a2)
{
  *(_QWORD *)this = -1;
  *((_DWORD *)this + 2) = -1;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = "OSR entrypoint creation";
  *((_QWORD *)this + 6) = 24;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)this);
  return this;
}

uint64_t JSC::DFG::OSREntrypointCreationPhase::run(JSC::DFG::OSREntrypointCreationPhase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t **v19;
  uint64_t i;
  unint64_t *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  JSC::DFG::BlockInsertionSet *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::DFG::BasicBlock *v101;
  WTF *PreHeader;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD v218[3];
  _BYTE v219[24];
  uint64_t v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  WTF *v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  _QWORD v230[2];
  __int16 v231;
  uint64_t v232;
  uint64_t v233;
  __int16 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int16 v239;
  WTF *v240;
  unint64_t *v241[20];

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v3 + 16) != 5)
  {
    __break(0xC471u);
    goto LABEL_236;
  }
  if (*(_DWORD *)(v2 + 944) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198461998);
  }
  v4 = *(unsigned int *)(v3 + 108);
  if ((_DWORD)v4 == 0x3FFFFFFF || (_DWORD)v4 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198461AC8);
  }
  if (v4 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1984619B8);
  }
  JSC::DFG::Graph::ensureCPSDominators((JSC::DFG::Graph *)v2);
  v13 = *((_QWORD *)this + 4);
  v14 = *(_DWORD *)(v13 + 60);
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(v13 + 40);
  while (1)
  {
    --v14;
    v16 = *((_QWORD *)this + 4);
    if (*(_DWORD *)(v16 + 60) <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198461C28);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v14);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 220);
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x198461C30);
      }
      v19 = *(unint64_t ***)(v17 + 208);
      for (i = (v18 - 1); ; --i)
      {
        v21 = *v19;
        v22 = *((unsigned __int16 *)*v19 + 9);
        if (v22 != 40 && v22 != 376)
          break;
        if (!i)
        {
          __break(0xC471u);
          JUMPOUT(0x198461B20);
        }
        ++v19;
      }
      if (v22 == 31)
      {
        v23 = 0;
        v24 = 2;
        if ((_DWORD)v4 != -1 && (_DWORD)v4 != 0x3FFFFFFF)
        {
          if (v4 >> 28)
          {
            v23 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v23 = 0;
            *(_DWORD *)(v23 + 8) = v4;
            v24 = 1;
          }
          else
          {
            v24 = 0;
            v23 = v4 << 36;
          }
        }
        v25 = v23 | v24;
        v26 = *v21;
        if (*v21 == v25)
        {
          v27 = 1;
        }
        else
        {
          if ((v26 & 2) != 0)
          {
            LODWORD(v28) = -1;
          }
          else if ((v26 & 1) != 0)
          {
            LODWORD(v28) = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v28 = v26 >> 36;
          }
          if ((v25 & 2) != 0)
          {
            LODWORD(v29) = -1;
          }
          else if ((v25 & 1) != 0)
          {
            LODWORD(v29) = *(_DWORD *)((v23 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v29 = v23 >> 36;
          }
          if ((_DWORD)v28 == (_DWORD)v29)
          {
            v163 = (_QWORD *)(v26 & 0xFFFFFFFF8);
            if ((v26 & 1) != 0)
              v163 = (_QWORD *)*v163;
            v164 = (_QWORD *)(v23 & 0xFFFFFFFF8);
            if ((v25 & 1) != 0)
              v164 = (_QWORD *)*v164;
            v27 = v163 == v164;
          }
          else
          {
            v27 = 0;
          }
        }
        if ((v25 & 1) != 0)
        {
          v165 = v23 & 0xFFFFFFFF8;
          if (v165)
            WTF::fastFree(v165, v6, v7, v8, v9, v10, v11, v12);
        }
        if (v27)
          break;
      }
    }
    if (!v14)
      return 0;
  }
  JSC::DFG::BlockInsertionSet::BlockInsertionSet(v241, *((_QWORD *)this + 4));
  v31 = JSC::DFG::BlockInsertionSet::insert(v30, 0, 1.0);
  v240 = v31;
  v235 = 0;
  v236 = 0;
  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)&v237, &v236, &v235, 0);
  if ((v235 & 1) != 0 && (v235 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v235 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  if ((v236 & 1) != 0 && (v236 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v236 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  v39 = *(unsigned int *)(v15 + 20);
  v217 = v39;
  if ((_DWORD)v39)
  {
    if (v39 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198461C60);
    }
    v40 = WTF::fastMalloc((WTF *)(8 * v39));
    if (*(_DWORD *)(v15 + 20))
    {
      v41 = 0;
      do
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * (v41 + *(unsigned int *)(v17 + 88)));
        if (v42)
        {
          v43 = *(_QWORD **)(v42 + 72);
          v44 = v43;
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
          if (v45 != v43)
            *v43 = v45;
          v46 = *((_QWORD *)this + 4);
          v47 = v45;
          do
          {
            v48 = v47;
            v47 = (_QWORD *)*v47;
          }
          while (v47);
          if (v48 != v45)
            *v45 = v48;
          v49 = v48[1];
          v50 = v237;
          if ((v237 & 1) != 0)
          {
            v182 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
            if ((v237 & 2) != 0
              || ((v183 = *(unsigned int *)((v237 & 0xFFFFFFFF8) + 8), (_DWORD)v183 != 0x3FFFFFFF)
                ? (v184 = (_DWORD)v183 == -1)
                : (v184 = 1),
                  v184))
            {
              v185 = 2;
            }
            else if (v183 >> 28)
            {
              v214 = v46;
              v204 = v49;
              v205 = WTF::fastMalloc((WTF *)0x10);
              v49 = v204;
              v46 = v214;
              v39 = v217;
              *(_QWORD *)v205 = v182;
              *(_DWORD *)(v205 + 8) = v183;
              v185 = 1;
              v182 = v205;
            }
            else
            {
              v185 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
              v182 = v183 << 36;
            }
            v50 = v182 | v185;
          }
          v232 = v50;
          v51 = v238;
          if ((v238 & 1) != 0)
          {
            v186 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
            if ((v238 & 2) != 0
              || ((v187 = *(unsigned int *)((v238 & 0xFFFFFFFF8) + 8), (_DWORD)v187 != 0x3FFFFFFF)
                ? (v188 = (_DWORD)v187 == -1)
                : (v188 = 1),
                  v188))
            {
              v189 = 2;
            }
            else if (v187 >> 28)
            {
              v215 = v46;
              v206 = v49;
              v207 = WTF::fastMalloc((WTF *)0x10);
              v49 = v206;
              v46 = v215;
              v39 = v217;
              *(_QWORD *)v207 = v186;
              *(_DWORD *)(v207 + 8) = v187;
              v189 = 1;
              v186 = v207;
            }
            else
            {
              v189 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
              v186 = v187 << 36;
            }
            v51 = v186 | v189;
          }
          v233 = v51;
          v234 = v239;
          v52 = JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v31, v46, v49, 32, (uint64_t)&v232, v45[3] | (((v45[3] >> 31) & 1) << 32), v37, v38);
          if (v41 >= v39)
          {
            __break(0xC471u);
            JUMPOUT(0x198461C40);
          }
          *(_QWORD *)(v40 + 8 * v41) = v52;
          if ((v233 & 1) != 0 && (v233 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v233 & 0xFFFFFFFF8, v53, v54, v55, v56, v57, v58, v59);
          if ((v232 & 1) != 0 && (v232 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v232 & 0xFFFFFFFF8, v53, v54, v55, v56, v57, v58, v59);
          v31 = v240;
          v60 = *((_QWORD *)this + 4);
          v61 = v237;
          if ((v237 & 1) != 0)
          {
            v190 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
            if ((v237 & 2) != 0
              || (v191 = *(unsigned int *)((v237 & 0xFFFFFFFF8) + 8), (_DWORD)v191 == 0x3FFFFFFF)
              || (_DWORD)v191 == -1)
            {
              v192 = 2;
            }
            else if (v191 >> 28)
            {
              v208 = *((_QWORD *)this + 4);
              v209 = WTF::fastMalloc((WTF *)0x10);
              v60 = v208;
              *(_QWORD *)v209 = v190;
              *(_DWORD *)(v209 + 8) = v191;
              v192 = 1;
              v190 = v209;
            }
            else
            {
              v192 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
              v190 = v191 << 36;
            }
            v61 = v190 | v192;
          }
          v230[0] = v61;
          v62 = v238;
          if ((v238 & 1) != 0)
          {
            v193 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
            if ((v238 & 2) != 0
              || (v194 = *(unsigned int *)((v238 & 0xFFFFFFFF8) + 8), (_DWORD)v194 == 0x3FFFFFFF)
              || (_DWORD)v194 == -1)
            {
              v195 = 2;
            }
            else if (v194 >> 28)
            {
              v210 = v60;
              v216 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
              v211 = WTF::fastMalloc((WTF *)0x10);
              v60 = v210;
              *(_QWORD *)v211 = v216;
              *(_DWORD *)(v211 + 8) = v194;
              v195 = 1;
              v193 = v211;
            }
            else
            {
              v195 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
              v193 = v194 << 36;
            }
            v62 = v193 | v195;
            v63 = (v193 | v195) & 1;
          }
          else
          {
            v63 = 0;
          }
          v230[1] = v62;
          v231 = v239;
          JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v31, v60, 0x14u, (uint64_t)v230, v45[3] | (((v45[3] >> 31) & 1) << 32), *(_QWORD *)(v40 + 8 * v41) & 0xFF00FFFFFFFFFFFFLL);
          if (v63 && (v62 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v62 & 0xFFFFFFFF8, v64, v33, v34, v35, v36, v37, v38);
          if ((v61 & 1) != 0)
          {
            v39 = v217;
            if ((v61 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v61 & 0xFFFFFFFF8, v64, v33, v34, v35, v36, v37, v38);
          }
          else
          {
            v39 = v217;
          }
        }
        ++v41;
      }
      while (v41 < *(unsigned int *)(v15 + 20));
    }
  }
  else
  {
    v40 = 0;
  }
  if (!*(_DWORD *)(v17 + 220))
  {
    __break(0xC471u);
    JUMPOUT(0x198461C50);
  }
  JSC::DFG::NodeOrigin::operator=(&v237, **(uint64_t ***)(v17 + 208), v33, v34, v35, v36, v37, v38);
  v66 = *((_QWORD *)this + 4);
  if (!*(_DWORD *)(v66 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x198461C58);
  }
  v218[0] = **(_QWORD **)(v66 + 48);
  v67 = WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find((uint64_t *)(v66 + 440), v218);
  WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v226, (uint64_t)(v67 + 1));
  if (*(_DWORD *)(v15 + 28))
  {
    for (j = 0; j < *(unsigned int *)(v15 + 28); ++j)
    {
      v71 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * j);
      if (!v71)
      {
        if (j >= v228)
        {
          __break(0xC471u);
LABEL_236:
          JUMPOUT(0x198461978);
        }
        v71 = *((_QWORD *)v226 + j);
      }
      v72 = *((_QWORD *)this + 4);
      v73 = v237;
      if ((v237 & 1) != 0)
      {
        v166 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
        if ((v237 & 2) != 0
          || ((v167 = *(unsigned int *)((v237 & 0xFFFFFFFF8) + 8), (_DWORD)v167 != 0x3FFFFFFF)
            ? (v168 = (_DWORD)v167 == -1)
            : (v168 = 1),
              v168))
        {
          v169 = 2;
        }
        else if (v167 >> 28)
        {
          v196 = *((_QWORD *)this + 4);
          v197 = WTF::fastMalloc((WTF *)0x10);
          v72 = v196;
          v39 = v217;
          *(_QWORD *)v197 = v166;
          *(_DWORD *)(v197 + 8) = v167;
          v169 = 1;
          v166 = v197;
        }
        else
        {
          v169 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
          v166 = v167 << 36;
        }
        v73 = v166 | v169;
      }
      v223 = v73;
      v74 = v238;
      if ((v238 & 1) != 0)
      {
        v170 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
        if ((v238 & 2) != 0
          || ((v171 = *(unsigned int *)((v238 & 0xFFFFFFFF8) + 8), (_DWORD)v171 != 0x3FFFFFFF)
            ? (v172 = (_DWORD)v171 == -1)
            : (v172 = 1),
              v172))
        {
          v173 = 2;
        }
        else if (v171 >> 28)
        {
          v198 = v72;
          v199 = WTF::fastMalloc((WTF *)0x10);
          v72 = v198;
          v39 = v217;
          *(_QWORD *)v199 = v170;
          *(_DWORD *)(v199 + 8) = v171;
          v173 = 1;
          v170 = v199;
        }
        else
        {
          v173 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
          v170 = v171 << 36;
        }
        v74 = v170 | v173;
      }
      v224 = v74;
      v225 = v239;
      v75 = *(uint64_t **)(v71 + 72);
      v76 = v75;
      do
      {
        v77 = (uint64_t)v76;
        v76 = (uint64_t *)*v76;
      }
      while (v76);
      if ((uint64_t *)v77 != v75)
        *v75 = v77;
      v83 = JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v31, v72, 0, 38, (uint64_t)&v223, v77, v68, v69);
      if ((v224 & 1) != 0 && (v224 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v224 & 0xFFFFFFFF8, v78, v79, v80, v81, v82, v68, v69);
      if ((v223 & 1) != 0 && (v223 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v223 & 0xFFFFFFFF8, v78, v79, v80, v81, v82, v68, v69);
      if (j >= v228)
      {
        __break(0xC471u);
        JUMPOUT(0x198461C48);
      }
      *((_QWORD *)v226 + j) = v83;
    }
  }
  if (*(_DWORD *)(v15 + 20))
  {
    v84 = 0;
    do
    {
      v85 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * (v84 + *(unsigned int *)(v17 + 88)));
      if (v85)
      {
        v86 = *(uint64_t **)(v85 + 72);
        v87 = v86;
        do
        {
          v88 = (uint64_t)v87;
          v87 = (uint64_t *)*v87;
        }
        while (v87);
        if ((uint64_t *)v88 != v86)
          *v86 = v88;
        if (v84 >= v39)
        {
          __break(0xC471u);
          JUMPOUT(0x198461C38);
        }
        v89 = *(_QWORD *)(v40 + 8 * v84);
        v90 = *((_QWORD *)this + 4);
        v91 = v237;
        if ((v237 & 1) != 0)
        {
          v174 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
          if ((v237 & 2) != 0
            || ((v175 = *(unsigned int *)((v237 & 0xFFFFFFFF8) + 8), (_DWORD)v175 != 0x3FFFFFFF)
              ? (v176 = (_DWORD)v175 == -1)
              : (v176 = 1),
                v176))
          {
            v177 = 2;
          }
          else if (v175 >> 28)
          {
            v212 = v88;
            v200 = *((_QWORD *)this + 4);
            v201 = WTF::fastMalloc((WTF *)0x10);
            v90 = v200;
            v88 = v212;
            v39 = v217;
            *(_QWORD *)v201 = v174;
            *(_DWORD *)(v201 + 8) = v175;
            v177 = 1;
            v174 = v201;
          }
          else
          {
            v177 = *(_QWORD *)(v237 & 0xFFFFFFFF8);
            v174 = v175 << 36;
          }
          v91 = v174 | v177;
        }
        v220 = v91;
        v92 = v238;
        if ((v238 & 1) != 0)
        {
          v178 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
          if ((v238 & 2) != 0
            || ((v179 = *(unsigned int *)((v238 & 0xFFFFFFFF8) + 8), (_DWORD)v179 != 0x3FFFFFFF)
              ? (v180 = (_DWORD)v179 == -1)
              : (v180 = 1),
                v180))
          {
            v181 = 2;
          }
          else if (v179 >> 28)
          {
            v213 = v88;
            v202 = v90;
            v203 = WTF::fastMalloc((WTF *)0x10);
            v90 = v202;
            v88 = v213;
            v39 = v217;
            *(_QWORD *)v203 = v178;
            *(_DWORD *)(v203 + 8) = v179;
            v181 = 1;
            v178 = v203;
          }
          else
          {
            v181 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
            v178 = v179 << 36;
          }
          v92 = v178 | v181;
        }
        v221 = v92;
        v222 = v239;
        JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v31, v90, 0x10u, (uint64_t)&v220, v88, v89 & 0xFF00FFFFFFFFFFFFLL);
        if ((v221 & 1) != 0 && (v221 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v221 & 0xFFFFFFFF8, v93, v94, v95, v96, v97, v98, v99);
        if ((v220 & 1) != 0 && (v220 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v220 & 0xFFFFFFFF8, v93, v94, v95, v96, v97, v98, v99);
      }
      ++v84;
    }
    while (v84 < *(unsigned int *)(v15 + 20));
  }
  v100 = *((_QWORD *)this + 4);
  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v219, (const JSC::DFG::NodeOrigin *)&v237);
  PreHeader = JSC::DFG::createPreHeader(*((JSC::DFG **)this + 4), (JSC::DFG::Graph *)v241, (JSC::DFG::BlockInsertionSet *)v17, v101);
  JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)v31, v100, 0, 364, (uint64_t)v219, (uint64_t)PreHeader, v103, v104);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v219, v105, v106, v107, v108, v109, v110, v111);
  JSC::DFG::BlockInsertionSet::execute(v241, v112, v113, v114, v115, v116, v117, v118);
  v126 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(v126 + 140) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198461A20);
  }
  **(_QWORD **)(v126 + 128) = v240;
  WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear((uint64_t *)(*((_QWORD *)this + 4) + 440), v119, v120, v121, v122, v123, v124, v125);
  WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>((uint64_t)v218, (uint64_t *)(*((_QWORD *)this + 4) + 440), (uint64_t *)&v240, (const void **)&v226);
  JSC::DFG::Graph::invalidateCFG(*((JSC::DFG::Graph **)this + 4), v127, v128, v129, v130, v131, v132, v133);
  JSC::DFG::Graph::resetReachability(*((JSC::DFG::Graph **)this + 4), v134, v135, v136, v137, v138, v139, v140);
  JSC::DFG::Graph::killUnreachableBlocks(*((JSC::DFG::Graph **)this + 4), v141, v142, v143, v144, v145, v146, v147);
  v155 = v226;
  if (&v229 != (uint64_t *)v226 && v226)
  {
    v226 = 0;
    v227 = 0;
    WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
  }
  if (v40)
    WTF::fastFree(v40, v148, v149, v150, v151, v152, v153, v154);
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v237, v148, v149, v150, v151, v152, v153, v154);
  JSC::DFG::BlockInsertionSet::~BlockInsertionSet((JSC::DFG::BlockInsertionSet *)v241, v156, v157, v158, v159, v160, v161, v162);
  return 1;
}

uint64_t JSC::DFG::NodeOrigin::NodeOrigin(uint64_t result, uint64_t *a2, _QWORD *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  if ((*a2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v23 = result;
      v21 = a4;
      v20 = a3;
      v14 = v6;
      v15 = v7;
      v16 = WTF::fastMalloc((WTF *)0x10);
      a3 = v20;
      a4 = v21;
      v6 = v16;
      result = v23;
      *(_QWORD *)v6 = v14;
      *(_DWORD *)(v6 + 8) = v15;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)result = v4;
  v5 = *a3;
  if ((*a3 & 1) != 0)
  {
    v10 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v11 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      v24 = result;
      v22 = a4;
      v17 = v10;
      v18 = v11;
      v19 = WTF::fastMalloc((WTF *)0x10);
      a4 = v22;
      v10 = v19;
      result = v24;
      *(_QWORD *)v10 = v17;
      *(_DWORD *)(v10 + 8) = v18;
      v13 = 1;
    }
    else
    {
      v13 = v10;
      v10 = v11 << 36;
    }
    v5 = v10 | v13;
  }
  *(_QWORD *)(result + 8) = v5;
  *(_BYTE *)(result + 16) = a4;
  *(_BYTE *)(result + 17) = 0;
  return result;
}

_QWORD *JSC::DFG::BasicBlock::appendNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  v7 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v19 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v20 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
        ? (v21 = (_DWORD)v20 == -1)
        : (v21 = 1),
          v21))
    {
      v22 = 2;
    }
    else if (v20 >> 28)
    {
      v39 = a6;
      v31 = a2;
      v33 = a5;
      v37 = a3;
      v35 = a4;
      v27 = v20;
      v28 = WTF::fastMalloc((WTF *)0x10);
      a5 = v33;
      a4 = v35;
      a2 = v31;
      a3 = v37;
      a6 = v39;
      *(_QWORD *)v28 = v19;
      *(_DWORD *)(v28 + 8) = v27;
      v22 = 1;
      v19 = v28;
    }
    else
    {
      v22 = v19;
      v19 = v20 << 36;
    }
    v7 = v19 | v22;
  }
  v41 = v7;
  v8 = *(_QWORD *)(a4 + 8);
  if ((v8 & 1) != 0)
  {
    v23 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v24 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v40 = a6;
      v32 = a2;
      v34 = a5;
      v38 = a3;
      v36 = a4;
      v29 = v24;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a5 = v34;
      a4 = v36;
      a2 = v32;
      a3 = v38;
      a6 = v40;
      *(_QWORD *)v30 = v23;
      *(_DWORD *)(v30 + 8) = v29;
      v26 = 1;
      v23 = v30;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v8 = v23 | v26;
  }
  v42 = v8;
  v43 = *(_WORD *)(a4 + 16);
  v16 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>(a2, 0, a3, (uint64_t)&v41, a5, a6);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v44 = v16;
  result = (_QWORD *)(a1 + 208);
  v18 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 216))
  {
    result = (_QWORD *)WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v18 + 1, (unint64_t)&v44);
    v18 = *(unsigned int *)(a1 + 220);
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v18) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v18) = v16;
  }
  *(_DWORD *)(a1 + 220) = v18 + 1;
  return result;
}

void WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v8 = *a1;
  if (*a1)
  {
    *a1 = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v8 + 24;
      do
      {
        if (*(_QWORD *)(v10 - 24) != -1)
        {
          v11 = *(_QWORD *)(v10 - 16);
          if (v10 != v11 && v11 != 0)
          {
            *(_QWORD *)(v10 - 16) = 0;
            *(_DWORD *)(v10 - 8) = 0;
            WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v10 += 88;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>(uint64_t a1, uint64_t *a2, uint64_t *a3, const void **a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  int v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  result = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3);
  v18 = result & v9;
  v19 = (_QWORD *)(v8 + 88 * (result & v9));
  v20 = *v19;
  if (*v19)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == v10)
      {
        v28 = 0;
        v27 = v8 + 88 * *(unsigned int *)(v8 - 4);
        goto LABEL_12;
      }
      if (v20 == -1)
        v29 = v19;
      v18 = (v18 + v30) & v9;
      v19 = (_QWORD *)(v8 + 88 * v18);
      v20 = *v19;
      ++v30;
    }
    while (*v19);
    if (v29)
    {
      *v29 = 0;
      v29[1] = v29 + 3;
      v29[2] = 8;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v19 = v29;
    }
  }
  *v19 = v10;
  result = WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)(v19 + 1), a4, v12, v13, v14, v15, v16, v17);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_11;
LABEL_16:
    result = (unint64_t)WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::expand(a2, (uint64_t)v19);
    v19 = (_QWORD *)result;
    v23 = *a2;
    if (*a2)
      LODWORD(v26) = *(_DWORD *)(v23 - 4);
    else
      LODWORD(v26) = 0;
    goto LABEL_11;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_16;
LABEL_11:
  v27 = v23 + 88 * v26;
  v28 = 1;
LABEL_12:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v28;
  return result;
}

void WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    v4 = *(const void **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    if (a2 < 9)
    {
      v6 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
    }
    memcpy(v6, v4, 8 * v5);
    if ((const void *)(a1 + 16) != v4 && v4 != 0)
    {
      if (*(const void **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

uint64_t WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)WTF::VectorBuffer<JSC::DFG::Node *,8ul,WTF::FastMalloc>::VectorBuffer(a1, *(unsigned int *)(a2 + 12), *(_DWORD *)(a2 + 12));
  if (v4)
    memcpy(v4, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
  return a1;
}

uint64_t WTF::VectorBuffer<JSC::DFG::Node *,8ul,WTF::FastMalloc>::VectorBuffer(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 8;
  *(_DWORD *)(result + 12) = a3;
  if (a2 < 9)
    return v3;
  v4 = a2;
  if (!(a2 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = v5;
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (a2 != (const void **)a1)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *(_DWORD *)(a1 + 12) = v11;
      v10 = v11;
    }
    else if (v11 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1, a2, a3, a4, a5, a6, a7, a8);
      WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
      v10 = *(_DWORD *)(a1 + 12);
    }
    if (v10)
    {
      memmove(*(void **)a1, *a2, 8 * v10);
      v12 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v12 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v12), (char *)*a2 + 8 * v12, (_BYTE *)*a2 + 8 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 8 * v12));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

unint64_t WTF::Vector<JSC::DFG::Node *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v8 = result;
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 == *(_QWORD *)v8 || result == 0)
    {
      if (!result)
      {
LABEL_12:
        *(_QWORD *)v8 = v8 + 16;
        *(_DWORD *)(v8 + 8) = 8;
      }
    }
    else
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::MinifiedID>>,JSC::DFG::MinifiedID>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 8 * v5);
    if (v6 == a2)
    {
LABEL_3:
      result += 8 * v5;
    }
    else
    {
      v7 = 1;
      while (v6 != -1)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 8 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_3;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *result;
  _DWORD *v19;
  _QWORD *v20;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v17 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v19 = (_DWORD *)v6;
    do
    {
      if (*v19 <= 0xFFFFFFFD)
      {
        v20 = WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::reinsert(*a1, v19);
        if (v19 == a3)
          v17 = v20;
      }
      v19 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v17;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  result = WTF::fastMalloc((WTF *)(8 * a1 + 16)) + 16;
  if (a1)
  {
    v3 = a1;
    v4 = (_QWORD *)result;
    do
    {
      *v4++ = 0x3FFFFFFFFFFFFFFFLL;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::MinifiedID,WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::MinifiedID,JSC::VirtualRegister>>,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashMap<JSC::DFG::MinifiedID,JSC::VirtualRegister,WTF::DefaultHash<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::DFG::MinifiedID>,WTF::HashTraits<JSC::VirtualRegister>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::MinifiedID>>::reinsert(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = 0;
  v4 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
  do
  {
    v6 = v5 & v2;
    v5 = ++v3 + v6;
  }
  while (*(_DWORD *)(a1 + 8 * v6) != -1);
  result = (_QWORD *)(a1 + 8 * v6);
  *result = *(_QWORD *)a2;
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::ValueInContext<JSC::ValueRecovery,JSC::DumpContext>>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::ValueRecovery **a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v39 = v24;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v39, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v39 = v25;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v39, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v39 = v31;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v39, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v39 = v37;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::ValueRecovery::dumpInContext(*a6, a1, a6[1]);
}

BOOL JSC::DFG::performObjectAllocationSinking(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  JSC::DFG::Graph *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::DFG::Graph *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::DFG::Graph *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  WTF *v102;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  JSC::DFG::Graph *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  BOOL v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int *v135;
  _DWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int *v162;
  WTF *v163;
  _DWORD *v164;
  _BYTE v165[32];
  JSC::DFG::Graph *v166;
  __int128 v167;
  char v168;
  WTF *v169;
  _OWORD v170[2];
  __int128 v171;
  uint64_t v172;
  JSC::DFG *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  JSC::DFG *v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  JSC::DFG *v182;
  WTF *v183;
  uint64_t v184;
  _BYTE v185[49];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[2];
  __int128 v200;
  double v201;
  char v202;
  __int128 *v203;
  __int128 v204;
  __int128 v205;
  _BYTE v206[136];
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  JSC::DFG::Phase::Phase((uint64_t)v165, this, (uint64_t)"object allocation elimination", 30);
  v172 = 0;
  v171 = 0u;
  memset(v170, 0, sizeof(v170));
  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 16;
    if (v10 > 0x10)
      v11 = *((unsigned int *)this + 15);
    if (v11 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19846357CLL);
    }
    v12 = 24 * v11;
    v13 = WTF::fastMalloc((WTF *)(24 * v11));
    LODWORD(v172) = (v12 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)&v171 + 1) = v13;
    if (HIDWORD(v172) != (_DWORD)v10)
      bzero((void *)(v13 + 24 * HIDWORD(v172)), 24 * ((24 * v10 - 24 * (unint64_t)HIDWORD(v172) - 24) / 0x18) + 24);
    v14 = *((unsigned int *)this + 15);
    HIDWORD(v172) = v10;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = this;
    v177 = 0;
    if ((_DWORD)v14)
    {
      v15 = 16;
      if (v14 > 0x10)
        v15 = v14;
      if (v15 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x198463584);
      }
      v16 = 24 * v15;
      v17 = WTF::fastMalloc((WTF *)(24 * v15));
      LODWORD(v177) = (v16 & 0xFFFFFFF8) / 0x18;
      *((_QWORD *)&v176 + 1) = v17;
      if (HIDWORD(v177) != (_DWORD)v14)
        bzero((void *)(v17 + 24 * HIDWORD(v177)), 24 * ((24 * v14 - 24 * (unint64_t)HIDWORD(v177) - 24) / 0x18) + 24);
    }
  }
  else
  {
    LODWORD(v14) = 0;
    v174 = 0uLL;
    v175 = 0uLL;
    v176 = 0uLL;
    v173 = this;
    v177 = 0;
  }
  HIDWORD(v177) = v14;
  v179 = 0u;
  v180 = 0u;
  v178 = this;
  v181 = 0;
  v182 = this;
  v183 = (WTF *)v185;
  v184 = 8;
  v195 = 0;
  v194 = 0;
  v196 = 0;
  v186 = 0u;
  v187 = 0u;
  v188 = 0u;
  v189 = 0u;
  v190 = 0u;
  v191 = 0u;
  v192 = 0u;
  v193 = 0;
  v198 = 0;
  v197 = 0;
  v199[0] = "DFG";
  v199[1] = 4;
  v200 = v167;
  v201 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v154 = mach_absolute_time();
    v156 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v156 != -1)
    {
      *(_QWORD *)&v204 = &v202;
      v203 = &v204;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v203, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v155) = dword_1ECF4400C;
    v201 = (double)(v154 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v155 * 1000000000.0);
  }
  JSC::DFG::Graph::computeRefCounts(v166, v3, v4, v5, v6, v7, v8, v9);
  v18 = v166;
  v19 = *((_DWORD *)v166 + 15);
  if (v19)
  {
    v20 = *((_QWORD *)v166 + 6);
    do
    {
      v21 = *(_QWORD *)(v20 + 8 * --v19);
      if (v21)
      {
        v22 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v22)
        {
          v159 = *(_QWORD *)(v21 + 24);
          v160 = v22 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v159 + 8 * v160) + 96) = v21;
          while ((unint64_t)v160--);
        }
        v23 = *(unsigned int *)(v21 + 220);
        if ((_DWORD)v23)
        {
          v24 = *(_QWORD *)(v21 + 208);
          v25 = v23 - 1;
          do
            *(_QWORD *)(*(_QWORD *)(v24 + 8 * v25) + 96) = v21;
          while ((unint64_t)v25--);
        }
      }
    }
    while (v19);
  }
  JSC::DFG::Graph::ensureSSADominators(v18);
  JSC::DFG::performGraphPackingAndLivenessAnalysis(v166, v27, v28, v29, v30, v31, v32, v33);
  JSC::DFG::performOSRAvailabilityAnalysis(v166, v34);
  JSC::DFG::CombinedLiveness::CombinedLiveness((JSC::DFG::CombinedLiveness *)&v204, v166);
  v42 = (_QWORD *)v186;
  if (HIDWORD(v186))
  {
    v157 = 8 * HIDWORD(v186);
    do
    {
      if (*v42)
        WTF::fastFree(*v42 - 16, v35, v36, v37, v38, v39, v40, v41);
      ++v42;
      v157 -= 8;
    }
    while (v157);
    v42 = (_QWORD *)v186;
  }
  if (v42)
  {
    *(_QWORD *)&v186 = 0;
    DWORD2(v186) = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  v43 = *((_QWORD *)&v204 + 1);
  *(_QWORD *)&v186 = v204;
  v204 = 0uLL;
  *((_QWORD *)&v186 + 1) = v43;
  v44 = (_QWORD *)v187;
  if (HIDWORD(v187))
  {
    v158 = 8 * HIDWORD(v187);
    do
    {
      if (*v44)
        WTF::fastFree(*v44 - 16, v35, v36, v37, v38, v39, v40, v41);
      ++v44;
      v158 -= 8;
    }
    while (v158);
    v44 = (_QWORD *)v187;
  }
  if (v44)
  {
    *(_QWORD *)&v187 = 0;
    DWORD2(v187) = 0;
    WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
  }
  v45 = *((_QWORD *)&v205 + 1);
  *(_QWORD *)&v187 = v205;
  v205 = 0uLL;
  *((_QWORD *)&v187 + 1) = v45;
  v46 = (_QWORD *)v204;
  if (HIDWORD(v204))
  {
    v47 = 8 * HIDWORD(v204);
    do
    {
      if (*v46)
        WTF::fastFree(*v46 - 16, v35, v36, v37, v38, v39, v40, v41);
      ++v46;
      v47 -= 8;
    }
    while (v47);
    v46 = (_QWORD *)v204;
  }
  if (v46)
  {
    *(_QWORD *)&v204 = 0;
    DWORD2(v204) = 0;
    WTF::fastFree((unint64_t)v46, v35, v36, v37, v38, v39, v40, v41);
  }
  if ((_BYTE)qword_1ECF4C332 && HIBYTE(qword_1ECF4C32A))
  {
    *(_QWORD *)&v204 = off_1E3572250;
    *((_QWORD *)&v204 + 1) = v206;
    v205 = xmmword_199122F80;
    v206[0] = 0;
    JSC::DFG::Graph::dump(v166, (WTF::PrintStream *)&v204, 0);
    WTF::StringPrintStream::toCString(&v204, (uint64_t *)&v203);
    v48 = v203;
    if (*((_BYTE **)&v204 + 1) != v206)
      WTF::fastFree(*((unint64_t *)&v204 + 1), v35, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    v48 = 0;
  }
  if (v63)
  {
    v120 = v166;
    v121 = *((unsigned int *)v166 + 15);
    if ((_DWORD)v121)
    {
      v122 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v166 + 6) + 8 * v122))
      {
        if (v121 == ++v122)
          goto LABEL_147;
      }
      if ((_DWORD)v121 != (_DWORD)v122)
      {
        v125 = *((_DWORD *)v166 + 15);
        do
        {
          if (v125 <= v122)
          {
            __break(0xC471u);
            JUMPOUT(0x198463574);
          }
          v126 = *(_QWORD *)(*((_QWORD *)v120 + 6) + 8 * v122);
          v127 = *(unsigned int *)(v126 + 220);
          if ((_DWORD)v127)
          {
            v128 = *(uint64_t **)(v126 + 208);
            v129 = 8 * v127;
            do
            {
              v130 = *v128;
              v56 = *(unsigned __int16 *)(*v128 + 18) - 420;
              if (v56 <= 6)
              {
                v56 = v130 + 24;
                v57 = *(unsigned __int16 *)((*(_QWORD *)(v130 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                v58 = (1 << (v57 - 22)) & 0x15F1;
                v131 = (v57 - 278) > 0xC || (_DWORD)v58 == 0;
                if (!v131
                  || ((v132 = v57 - 348, v133 = v132 > 7, v57 = (1 << v132) & 0x9F, !v133)
                    ? (v134 = (_DWORD)v57 == 0)
                    : (v134 = 1),
                      !v134))
                {
                  *(_QWORD *)v56 = 0;
                  *(_QWORD *)(v130 + 32) = 0;
                  *(_QWORD *)(v130 + 40) = 0;
                  *(_WORD *)(v130 + 18) = 24;
                  *(_DWORD *)(v130 + 56) = 8;
                }
              }
              ++v128;
              v129 -= 8;
            }
            while (v129);
            v125 = *((_DWORD *)v120 + 15);
          }
          v122 = (v122 + 1);
          if (v125 > v122)
          {
            while (1)
            {
              v56 = *(_QWORD *)(*((_QWORD *)v120 + 6) + 8 * v122);
              if (v56)
                break;
              if (v125 == ++v122)
              {
                LODWORD(v122) = v125;
                break;
              }
            }
          }
        }
        while ((_DWORD)v121 != (_DWORD)v122);
      }
    }
LABEL_147:
    if (HIBYTE(qword_1ECF4C32A))
    {
      v135 = (unsigned int *)v166;
      if (v48)
        ++*(_DWORD *)v48;
      *(_QWORD *)&v204 = v48;
      JSC::DFG::validate(v135, (void *)1, (WTF **)&v204, v58, v59, v60, v61, v62);
      v136 = (_DWORD *)v204;
      *(_QWORD *)&v204 = 0;
      if (v136)
      {
        if (*v136 == 1)
          WTF::fastFree((unint64_t)v136, (void *)v56, v57, v58, v59, v60, v61, v62);
        else
          --*v136;
      }
    }
  }
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      WTF::fastFree((unint64_t)v48, (void *)v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v48;
  }
  if (v63)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v123 = (*(_DWORD *)(*((_QWORD *)v166 + 3) + 16) & 0xFFFFFFFE) == 4) : (v123 = 0),
          !v123 ? (v124 = BYTE2(qword_1ECF4C32A) == 0) : (v124 = 0),
          !v124))
    {
      v204 = v167;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v166 + 1088, "Phase ", (uint64_t)&v204, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v199);
  v71 = v197;
  if (v197)
  {
    v137 = *(unsigned int *)(v197 - 4);
    if ((_DWORD)v137)
    {
      v138 = (_QWORD *)(v197 + 40);
      do
      {
        if (*(v138 - 5) != -1)
        {
          if ((*v138 & 1) != 0)
            WTF::fastFree(*v138 & 0xFFFFFFFFFFFFFFFCLL, v64, v65, v66, v67, v68, v69, v70);
          v139 = *(v138 - 1);
          if ((v139 & 1) != 0)
            WTF::fastFree(v139 & 0xFFFFFFFFFFFFFFFCLL, v64, v65, v66, v67, v68, v69, v70);
          v140 = *(v138 - 2);
          if (v140)
            WTF::fastFree(v140 - 16, v64, v65, v66, v67, v68, v69, v70);
        }
        v138 += 6;
        --v137;
      }
      while (v137);
    }
    WTF::fastFree(v71 - 16, v64, v65, v66, v67, v68, v69, v70);
  }
  v72 = v195;
  if (v195)
  {
    v141 = *(unsigned int *)(v195 - 4);
    if ((_DWORD)v141)
    {
      v142 = (_QWORD *)(v195 + 40);
      do
      {
        if (*(v142 - 5) != -1)
        {
          if ((*v142 & 1) != 0)
            WTF::fastFree(*v142 & 0xFFFFFFFFFFFFFFFCLL, v64, v65, v66, v67, v68, v69, v70);
          v143 = *(v142 - 1);
          if ((v143 & 1) != 0)
            WTF::fastFree(v143 & 0xFFFFFFFFFFFFFFFCLL, v64, v65, v66, v67, v68, v69, v70);
          v144 = *(v142 - 2);
          if (v144)
            WTF::fastFree(v144 - 16, v64, v65, v66, v67, v68, v69, v70);
        }
        v142 += 6;
        --v141;
      }
      while (v141);
    }
    WTF::fastFree(v72 - 16, v64, v65, v66, v67, v68, v69, v70);
  }
  if (v194)
    WTF::fastFree(v194 - 16, v64, v65, v66, v67, v68, v69, v70);
  v73 = v192;
  if (HIDWORD(v192))
  {
    v74 = 40 * HIDWORD(v192);
    v75 = (uint64_t *)(v192 + 16);
    do
    {
      v83 = *(v75 - 1);
      if (v83)
        WTF::fastFree(v83 - 16, v64, v65, v66, v67, v68, v69, v70);
      v75 += 5;
      v74 -= 40;
    }
    while (v74);
    v73 = v192;
  }
  if (v73)
  {
    *(_QWORD *)&v192 = 0;
    DWORD2(v192) = 0;
    WTF::fastFree(v73, v64, v65, v66, v67, v68, v69, v70);
  }
  v84 = v191;
  if (HIDWORD(v191))
  {
    v85 = 40 * HIDWORD(v191);
    v86 = (uint64_t *)(v191 + 16);
    do
    {
      v94 = *(v86 - 1);
      if (v94)
        WTF::fastFree(v94 - 16, v64, v65, v66, v67, v68, v69, v70);
      v86 += 5;
      v85 -= 40;
    }
    while (v85);
    v84 = v191;
  }
  if (v84)
  {
    *(_QWORD *)&v191 = 0;
    DWORD2(v191) = 0;
    WTF::fastFree(v84, v64, v65, v66, v67, v68, v69, v70);
  }
  v95 = *((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v148 = *(unsigned int *)(*((_QWORD *)&v190 + 1) - 4);
    if ((_DWORD)v148)
    {
      v149 = *((_QWORD *)&v190 + 1) + 8;
      do
      {
        if (*(_QWORD *)(v149 - 8) != -1)
        {
          v150 = *(_QWORD *)v149;
          if (*(_QWORD *)v149)
          {
            *(_QWORD *)v149 = 0;
            *(_DWORD *)(v149 + 8) = 0;
            WTF::fastFree(v150, v64, v65, v66, v67, v68, v69, v70);
          }
        }
        v149 += 24;
        --v148;
      }
      while (v148);
    }
    WTF::fastFree(v95 - 16, v64, v65, v66, v67, v68, v69, v70);
  }
  v96 = v190;
  if ((_QWORD)v190)
  {
    v145 = *(unsigned int *)(v190 - 4);
    if ((_DWORD)v145)
    {
      v146 = v190 + 8;
      do
      {
        if (*(_QWORD *)(v146 - 8) != -1)
        {
          v147 = *(_QWORD *)v146;
          if (*(_QWORD *)v146)
          {
            *(_QWORD *)v146 = 0;
            *(_DWORD *)(v146 + 8) = 0;
            WTF::fastFree(v147, v64, v65, v66, v67, v68, v69, v70);
          }
        }
        v146 += 24;
        --v145;
      }
      while (v145);
    }
    WTF::fastFree(v96 - 16, v64, v65, v66, v67, v68, v69, v70);
  }
  v97 = *((_QWORD *)&v189 + 1);
  if (*((_QWORD *)&v189 + 1))
  {
    v151 = *(unsigned int *)(*((_QWORD *)&v189 + 1) - 4);
    if ((_DWORD)v151)
    {
      v152 = *((_QWORD *)&v189 + 1) + 8;
      do
      {
        if (*(_QWORD *)(v152 - 8) != -1)
        {
          v153 = *(_QWORD *)v152;
          if (*(_QWORD *)v152)
          {
            *(_QWORD *)v152 = 0;
            *(_DWORD *)(v152 + 8) = 0;
            WTF::fastFree(v153, v64, v65, v66, v67, v68, v69, v70);
          }
        }
        v152 += 24;
        --v151;
      }
      while (v151);
    }
    WTF::fastFree(v97 - 16, v64, v65, v66, v67, v68, v69, v70);
  }
  if ((_QWORD)v189)
    WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(v189, (unint64_t)v64, v65, v66, v67, v68, v69, v70);
  if (*((_QWORD *)&v188 + 1))
    WTF::fastFree(*((_QWORD *)&v188 + 1) - 16, v64, v65, v66, v67, v68, v69, v70);
  if ((_QWORD)v188)
    WTF::fastFree(v188 - 16, v64, v65, v66, v67, v68, v69, v70);
  v98 = (_QWORD *)v187;
  if (HIDWORD(v187))
  {
    v99 = 8 * HIDWORD(v187);
    do
    {
      if (*v98)
        WTF::fastFree(*v98 - 16, v64, v65, v66, v67, v68, v69, v70);
      ++v98;
      v99 -= 8;
    }
    while (v99);
    v98 = (_QWORD *)v187;
  }
  if (v98)
  {
    *(_QWORD *)&v187 = 0;
    DWORD2(v187) = 0;
    WTF::fastFree((unint64_t)v98, v64, v65, v66, v67, v68, v69, v70);
  }
  v100 = (_QWORD *)v186;
  if (HIDWORD(v186))
  {
    v101 = 8 * HIDWORD(v186);
    do
    {
      if (*v100)
        WTF::fastFree(*v100 - 16, v64, v65, v66, v67, v68, v69, v70);
      ++v100;
      v101 -= 8;
    }
    while (v101);
    v100 = (_QWORD *)v186;
  }
  if (v100)
  {
    *(_QWORD *)&v186 = 0;
    DWORD2(v186) = 0;
    WTF::fastFree((unint64_t)v100, v64, v65, v66, v67, v68, v69, v70);
  }
  v102 = v183;
  if (v185 != (_BYTE *)v183 && v183 != 0)
  {
    v183 = 0;
    LODWORD(v184) = 0;
    WTF::fastFree((unint64_t)v102, v64, v65, v66, v67, v68, v69, v70);
  }
  if (v181)
    WTF::fastFree(v181 - 16, v64, v65, v66, v67, v68, v69, v70);
  if (*((_QWORD *)&v180 + 1))
    WTF::fastFree(*((_QWORD *)&v180 + 1) - 16, v64, v65, v66, v67, v68, v69, v70);
  if ((_QWORD)v180)
    WTF::fastFree(v180 - 16, v64, v65, v66, v67, v68, v69, v70);
  if (*((_QWORD *)&v179 + 1))
    WTF::fastFree(*((_QWORD *)&v179 + 1) - 16, v64, v65, v66, v67, v68, v69, v70);
  if ((_QWORD)v179)
    WTF::fastFree(v179 - 16, v64, v65, v66, v67, v68, v69, v70);
  JSC::DFG::SSACalculator::~SSACalculator((JSC::DFG::SSACalculator *)&v174, v64, v65, v66, v67, v68, v69, v70);
  JSC::DFG::SSACalculator::~SSACalculator((JSC::DFG::SSACalculator *)v170, v104, v105, v106, v107, v108, v109, v110);
  if (HIBYTE(qword_1ECF4C32A) && !v168)
  {
    v162 = (unsigned int *)v166;
    v163 = v169;
    if (v169)
      ++*(_DWORD *)v169;
    *(_QWORD *)&v204 = v163;
    JSC::DFG::validate(v162, (void *)1, (WTF **)&v204, v113, v114, v115, v116, v117);
    v164 = (_DWORD *)v204;
    *(_QWORD *)&v204 = 0;
    if (v164)
    {
      if (*v164 == 1)
        WTF::fastFree((unint64_t)v164, v111, v112, v113, v114, v115, v116, v117);
      else
        --*v164;
    }
  }
  v118 = v169;
  v169 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 1)
      WTF::fastFree((unint64_t)v118, v111, v112, v113, v114, v115, v116, v117);
    else
      --*(_DWORD *)v118;
  }
  return v63;
}

uint64_t operationToThis(JSC::JSGlobalObject *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  _QWORD var8[2];

  v8 = a2;
  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = var8[1];
  var8[0] = a2;
  if ((a2 & 0xFFFE000000000002) != 0 || (v9 = *(unsigned __int8 *)(a2 + 5), v9 < 0x17))
  {
    if ((a2 & 0xFFFFFFFFFFFFFFF7) != 2)
      return JSC::JSValue::toThisSloppySlowCase((JSC::JSValue *)var8, a1, a3, a4, a5, a6, a7, a8);
    return *((_QWORD *)a1 + 8);
  }
  if (v9 - 51 <= 5)
    return *((_QWORD *)a1 + 8);
  return v8;
}

uint64_t operationToThisStrict(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t vars0;

  v2 = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) - 51 <= 5)
    return 10;
  return v2;
}

unint64_t operationObjectKeys(JSC::JSGlobalObject *a1, uint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  _QWORD var28[6];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var28[5];
  var28[0] = a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var28, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  v10 = a2;
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_8:
    v10 = v12;
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::ownPropertyKeys((unint64_t)a1, v10, 2, 1, a5, a6, a7, a8);
  }
}

unint64_t operationObjectKeysObject(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::ownPropertyKeys(a1, a2, 2, 1, a5, a6, a7, a8);
}

unint64_t operationObjectGetOwnPropertyNames(JSC::JSGlobalObject *a1, int64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  _QWORD var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v11 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var18, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v11 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_8:
    a2 = v11;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::ownPropertyKeys((unint64_t)a1, a2, 2, 0, a5, a6, a7, a8);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = (unsigned __int8 *)a2;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = (int64_t)v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::ownPropertyKeys((unint64_t)a1, a2, 2, 0, a5, a6, a7, a8);
}

unint64_t operationObjectGetOwnPropertyNamesObject(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::ownPropertyKeys(a1, a2, 2, 0, a5, a6, a7, a8);
}

unint64_t operationObjectGetOwnPropertySymbols(JSC::JSGlobalObject *a1, int64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  int v12;
  unsigned __int8 *v13;
  _QWORD var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v11 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var18, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    v11 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_8:
    a2 = v11;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::ownPropertyKeys((unint64_t)a1, a2, 1, 0, a5, a6, a7, a8);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = (unsigned __int8 *)a2;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = (int64_t)v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::ownPropertyKeys((unint64_t)a1, a2, 1, 0, a5, a6, a7, a8);
}

unint64_t operationObjectGetOwnPropertySymbolsObject(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::ownPropertyKeys(a1, a2, 1, 0, a5, a6, a7, a8);
}

unint64_t operationObjectCreate(unint64_t a1, JSC::Structure *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::Structure *v9;
  JSC::VM **v10;
  JSC::VM *v11;
  int v13;
  JSC::VM *var18[4];

  v9 = a2;
  v10 = *(JSC::VM ***)(a1 + 56);
  v10[5] = var18[3];
  var18[0] = (JSC::VM *)v10;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a2 + 5) <= 0x16u)
  {
    if (a2 != (JSC::Structure *)2)
    {
      JSC::throwTypeError(a1, var18, (uint64_t)"Object prototype may only be an Object or null.", 48);
      return 0;
    }
    v13 = *(_DWORD *)(a1 + 932);
    if (v13)
      v11 = (JSC::VM *)(16 * (v13 & 0xFFFFFFFE));
    else
      v11 = 0;
  }
  else
  {
    v11 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a1 + 1968), (JSC::JSGlobalObject *)a1, a2, 6, 0, 0, a8, a9, a3);
  }
  return JSC::constructEmptyObject((JSC *)v10, v11, v9, a5, a6, a7, a8, a9);
}

unint64_t JSC::constructEmptyObject(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v9;
  JSC::VM *v10;
  JSC::Structure *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (JSC *)*((_QWORD *)this + 7);
  v10 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC *)((char *)this + 1968), this, a2, 6, 0, 0, a8, a9, a4);
  return JSC::constructEmptyObject(v9, v10, v11, v12, v13, v14, v15, v16);
}

unint64_t operationObjectCreateObject(_QWORD *a1, JSC::JSObject *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v9;
  JSC::VM *v10;
  JSC::Structure *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t vars0;

  v9 = (JSC *)a1[7];
  *((_QWORD *)v9 + 5) = vars0;
  v10 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a1 + 246), (JSC::JSGlobalObject *)a1, a2, 6, 0, 0, a8, a9, a3);
  return JSC::constructEmptyObject(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t operationObjectAssignObject(JSC::JSGlobalObject *a1, unint64_t a2, JSC::JSObject *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::Structure *v30;
  int v31;
  int v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  _QWORD *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t SlowCase;
  unint64_t v64;
  __int128 *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  JSC::VM *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _OWORD *v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  const JSC::PropertyTable *v146;
  _OWORD v147[4];
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  _BYTE v151[64];
  JSC::JSObject *v152;
  WTF **v153;
  char *v154;
  uint64_t *v155;
  JSC::VM *v156;
  unint64_t v157;
  _QWORD var60[13];

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var60[12];
  if (a2)
  {
    if (*(_BYTE *)(a2 + 5) == 24)
    {
      v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
      v13 = *(_DWORD *)(v12 + 0x10);
      if ((v13 & 0x10) == 0)
      {
        v14 = (_DWORD *)a2;
        while (1)
        {
          if ((*(_WORD *)(v12 + 12) & 0x800) != 0 || v14 != (_DWORD *)a2 && (*(_WORD *)(v12 + 12) & 0x400) != 0)
            goto LABEL_166;
          v15 = *(_DWORD **)(v12 + 48);
          if (!v15)
            v15 = (_DWORD *)*((_QWORD *)v14 + 2);
          if (v15 == (_DWORD *)2)
            break;
          v12 = 16 * (*v15 & 0xFFFFFFFE);
          v14 = v15;
          if ((*(_BYTE *)(v12 + 0x10) & 0x10) != 0)
            goto LABEL_166;
        }
        if ((v13 & 0x100000) != 0)
          goto LABEL_166;
        v148 = 0;
        v149 = (WTF *)v151;
        v150 = 8;
        v144 = 0;
        v145 = 0x800000000;
        v146 = (const JSC::PropertyTable *)((char *)v147 + 8);
        memset(v147, 0, sizeof(v147));
        if ((*(_BYTE *)((16 * *(unsigned int *)a3) | 0x12) & 0x40) == 0)
        {
          JSC::JSObject::reifyAllStaticProperties(a3, a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, 0.0);
          if (*(_DWORD *)(v11 + 80))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
              goto LABEL_108;
          }
        }
        v152 = a3;
        v16 = *((_QWORD *)a1 + 7);
        v17 = (uint64_t)a3;
        if (HIDWORD(v150))
        {
          v18 = v149;
          v19 = 8 * HIDWORD(v150);
          do
          {
            v20 = *(WTF::StringImpl **)v18;
            *(_QWORD *)v18 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
              {
                WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
              }
              else
              {
                *(_DWORD *)v20 -= 2;
              }
            }
            v18 = (WTF *)((char *)v18 + 8);
            v19 -= 8;
          }
          while (v19);
          v17 = (uint64_t)v152;
        }
        HIDWORD(v150) = 0;
        v144 = 0;
        LODWORD(v145) = 0;
        v29 = *(_DWORD *)v17 & 0xFFFFFFFE;
        v30 = (JSC::Structure *)(16 * v29);
        if ((*(_BYTE *)(v17 + 6) & 0x20) != 0 && (*(_BYTE *)(16 * v29 + 0x12) & 0x40) == 0)
          goto LABEL_133;
        if (*(_WORD *)(16 * v29 + 0xC) & 6 | *(_BYTE *)(16 * v29 + 0xA) & 8)
          goto LABEL_133;
        v31 = *(_DWORD *)(16 * v29 + 0x10);
        if ((v31 & 0x20000008) != 0 || (*(_DWORD *)(16 * v29 + 0x10) & 3) == 2)
          goto LABEL_133;
        v33 = *(_DWORD *)a2;
        if (*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)
          || *(_BYTE *)(16 * (v33 & 0xFFFFFFFE) + 9) != 24
          || (v34 = *(_DWORD *)(16 * (v33 & 0xFFFFFFFE) + 0x10), (v34 & 3) != 0)
          || v34 & 0x9980000 | *(_BYTE *)(16 * (v33 & 0xFFFFFFFE) + 8) & 0xE
          || ((v35 = *(_QWORD *)(16 * (v33 & 0xFFFFFFFE) + 0x30), (v34 & 0x40000070) == 0x20)
            ? (v36 = v35 == 0)
            : (v36 = 1),
              v36
           || ((v37 = *(_QWORD *)(16 * (v33 & 0xFFFFFFFE) + 0x60), (v37 & 1) != 0)
             ? (v38 = (v37 >> 1) & 3)
             : (v38 = *(unsigned __int8 *)(v37 + 4)),
               (v34 & 0x200000) != 0 || v38 != 2)))
        {
LABEL_101:
          if ((*(_BYTE *)(v17 + 4) & 0xE) != 0)
          {
            v95 = *(_BYTE *)(v17 + 4) & 0xF;
            if ((v95 - 3) >= 7)
            {
              if ((v95 - 10) > 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198464434);
              }
              v96 = **(_QWORD **)(v17 + 8);
              if (v96)
              {
                if ((*(_BYTE *)(v96 + 16) & 4) != 0)
                  goto LABEL_133;
              }
            }
          }
          v153 = &v149;
          v154 = &v144;
          v155 = (uint64_t *)&v152;
          JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(v30, (JSC::VM *)v16, (uint64_t)&v153, a4, a5, a6, a7, a8);
          if ((*((_BYTE *)v152 + 4) & 0xE) == 0)
          {
LABEL_103:
            a5 = HIDWORD(v150);
            if (HIDWORD(v150))
              JSC::JSObject::putOwnDataPropertyBatching(a2, (JSC::VM *)v16, v149, v146, HIDWORD(v150), a6, a7, a8, v77);
            goto LABEL_105;
          }
          v80 = *((_BYTE *)v152 + 4) & 0xF;
          if ((v80 - 10) >= 4)
          {
            if ((v80 - 4) >= 6)
            {
              if (v80 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19846448CLL);
              }
              goto LABEL_103;
            }
            v85 = (_DWORD *)(*((_QWORD *)v152 + 1) - 8);
          }
          else
          {
            v81 = (_QWORD *)*((_QWORD *)v152 + 1);
            v82 = *((_DWORD *)v81 - 2);
            if (*((_DWORD *)v81 - 1) < v82)
              v82 = *((_DWORD *)v81 - 1);
            if (v82)
            {
LABEL_117:
              v157 = a2;
              var60[0] = a1;
              v86 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v153 = (WTF **)&v157;
              v154 = (char *)var60;
              v155 = (uint64_t *)&v156;
              v156 = v86;
              JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)0,JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject*,JSC::JSObject*)::{lambda(unsigned int,JSC::JSValue)#1}>((uint64_t)v152, (uint64_t)a1, (unint64_t **)&v153, (uint64_t)a4, v76, a6, a7, a8, (int32x4_t)v77);
              if (*((_DWORD *)v156 + 20))
                JSC::VM::hasExceptionsAfterHandlingTraps(v156, a2, (uint64_t)a3, (uint64_t)a4, v87, a6, a7, a8);
              if (*(_DWORD *)(v16 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, (uint64_t)a3, (uint64_t)a4, v87, a6, a7, a8))
              {
LABEL_133:
                v78 = 1;
LABEL_106:
                if (*(_DWORD *)(v11 + 80))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8)|| ((v78 ^ 1) & 1) != 0)
                  {
                    goto LABEL_108;
                  }
                }
                else if ((v78 & 1) == 0)
                {
LABEL_108:
                  v79 = 0;
                  v78 = *(_QWORD *)(v11 + 16);
                  goto LABEL_159;
                }
                v79 = 1;
LABEL_159:
                JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v145, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                if (HIDWORD(v150))
                {
                  v122 = v149;
                  v123 = 8 * HIDWORD(v150);
                  do
                  {
                    v124 = *(WTF::StringImpl **)v122;
                    *(_QWORD *)v122 = 0;
                    if (v124)
                    {
                      if (*(_DWORD *)v124 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v124, v113, v114, v115, a5, v116, v117, v118);
                        WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
                      }
                      else
                      {
                        *(_DWORD *)v124 -= 2;
                      }
                    }
                    v122 = (WTF *)((char *)v122 + 8);
                    v123 -= 8;
                  }
                  while (v123);
                }
                v119 = v149;
                if (v151 != (_BYTE *)v149 && v149 != 0)
                {
                  v149 = 0;
                  LODWORD(v150) = 0;
                  WTF::fastFree((unint64_t)v119, v113, v114, v115, a5, v116, v117, v118);
                }
                if (!v79)
                  return v78;
                goto LABEL_166;
              }
              goto LABEL_103;
            }
            v83 = *v81;
            if (!v83)
              goto LABEL_103;
            v84 = *(_QWORD *)(v83 + 8);
            if (!v84)
              goto LABEL_103;
            v85 = (_DWORD *)(v84 - 12);
          }
          if (!*v85)
            goto LABEL_103;
          goto LABEL_117;
        }
        if ((v31 & 0x3E000) == 0x1C000)
        {
          v39 = *((_QWORD *)v30 + 8);
          if (!v39)
            goto LABEL_101;
          if (*(_BYTE *)(v39 + 5) != 1)
          {
            v74 = *(_DWORD *)(v39 + 80) & 0xFFFFFFFE;
            if (!(_DWORD)v74)
              goto LABEL_101;
            v39 = 16 * v74;
          }
          if ((*(_DWORD *)(v39 + 16) & 0x3E000) != 0x10000)
            goto LABEL_48;
          if ((*(_BYTE *)(v17 + 4) & 0xE) == 0)
            goto LABEL_46;
          v52 = *(_BYTE *)(v17 + 4) & 0xF;
          if ((v52 - 10) >= 4)
          {
            if ((v52 - 4) >= 6)
            {
              if (v52 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198464464);
              }
              goto LABEL_46;
            }
            v57 = (_DWORD *)(*(_QWORD *)(v17 + 8) - 8);
LABEL_79:
            if (*v57)
              goto LABEL_48;
LABEL_46:
            v39 = *(_QWORD *)(v39 + 64);
            if (!v39)
              goto LABEL_101;
            if (*(_BYTE *)(v39 + 5) != 1)
            {
              v75 = *(_DWORD *)(v39 + 80) & 0xFFFFFFFE;
              if (!(_DWORD)v75)
                goto LABEL_101;
              v39 = 16 * v75;
            }
            goto LABEL_48;
          }
          v53 = *(_QWORD **)(v17 + 8);
          v54 = *((_DWORD *)v53 - 2);
          if (*((_DWORD *)v53 - 1) < v54)
            v54 = *((_DWORD *)v53 - 1);
          if (!v54)
          {
            v55 = *v53;
            if (!v55)
              goto LABEL_46;
            v56 = *(_QWORD *)(v55 + 8);
            if (!v56)
              goto LABEL_46;
            v57 = (_DWORD *)(v56 - 12);
            goto LABEL_79;
          }
        }
        else
        {
          v39 = (unint64_t)v30;
        }
LABEL_48:
        if (*(_BYTE *)(v39 + 9) == 24)
        {
          v40 = *(_DWORD *)(v39 + 16);
          if ((v40 & 3) == 0 && !(v40 & 0x9980000 | *(_BYTE *)(v39 + 8) & 0xE) && (v40 & 0x40200070) == 0x200020)
          {
            v41 = *(_QWORD *)(v39 + 48);
            if (v41)
            {
              v42 = *(unsigned __int8 *)(16 * (v33 & 0xFFFFFFFE) + 0xE);
              if ((_DWORD)v42 == *(unsigned __int8 *)(v39 + 14)
                && v35 == v41
                && *(_QWORD *)(16 * (v33 & 0xFFFFFFFE) + 0x28) == *(_QWORD *)(v39 + 40))
              {
                v43 = *(unsigned __int16 *)(v39 + 24);
                if (v43 == 65534)
                  goto LABEL_60;
                if (v43 == 0xFFFF)
                  v43 = *(_DWORD *)(*(_QWORD *)(v39 + 64) + 84);
                if (v43 < 64)
                {
LABEL_60:
                  v44 = (_OWORD *)(a2 + 16);
                  v45 = (__int128 *)(v17 + 16);
                  if (v42 > 0x1E)
                  {
                    v97 = (_OWORD *)((char *)v44 + 8 * v42);
                    v98 = (_OWORD *)((char *)v44 + ((8 * v42) & 0x7E0));
                    while (v44 != v98)
                    {
                      v99 = *v45;
                      v100 = v45[1];
                      v45 += 2;
                      *v44 = v99;
                      v44[1] = v100;
                      v44 += 2;
                    }
                    while (v44 != v97)
                    {
                      v101 = *(_QWORD *)v45;
                      v45 = (__int128 *)((char *)v45 + 8);
                      *(_QWORD *)v44 = v101;
                      v44 = (_OWORD *)((char *)v44 + 8);
                    }
                  }
                  else if ((_DWORD)v42)
                  {
                    do
                    {
                      v46 = *(_QWORD *)v45;
                      v45 = (__int128 *)((char *)v45 + 8);
                      *(_QWORD *)v44 = v46;
                      v44 = (_OWORD *)((char *)v44 + 8);
                      --v42;
                    }
                    while (v42);
                  }
LABEL_63:
                  *(_DWORD *)a2 = v39 >> 4;
                  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a2 + 6) & 0x80 | *(_BYTE *)(v39 + 10);
                  *(_BYTE *)(a2 + 5) = *(_BYTE *)(v39 + 9);
                  v47 = (unsigned __int8 *)(a2 + 4);
                  if (*(unsigned __int8 *)(a2 + 4) != *(unsigned __int8 *)(v39 + 8))
                  {
                    do
                    {
                      while (1)
                      {
                        v50 = *v47;
                        v51 = __ldxr(v47);
                        if (v51 == v50)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v50 & 0xC0 | *(_BYTE *)(v39 + 8), v47));
                  }
                  v48 = *(unsigned __int8 *)(a2 + 7);
                  v49 = *(_DWORD *)(v16 + 760);
                  if (v49 >= v48)
                  {
                    JSC::Heap::writeBarrierSlowPath(v16 + 192, a2);
                    v48 = *(unsigned __int8 *)(a2 + 7);
                    v49 = *(_DWORD *)(v16 + 760);
                  }
                  if (v49 >= v48)
                    JSC::Heap::writeBarrierSlowPath(v16 + 192, a2);
LABEL_105:
                  v78 = 0;
                  goto LABEL_106;
                }
                if ((v43 - 63) > 4)
                {
                  v88 = (v43 - 64) | ((v43 - 64) >> 1) | (((v43 - 64) | ((v43 - 64) >> 1)) >> 2);
                  v89 = v88 | (v88 >> 4) | ((v88 | (v88 >> 4)) >> 8);
                  v90 = v89 | HIWORD(v89);
                  v59 = v90 + 1;
                  v60 = 8 * v59;
                  v58 = v16 + 6648;
                  if (v90 > 0x3EB)
                    goto LABEL_123;
                }
                else
                {
                  v58 = v16 + 6648;
                  v59 = 4;
                  v60 = 32;
                }
                v61 = *(_QWORD *)(v16 + (((v60 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
                if (v61)
                {
                  v62 = *(unsigned int *)(v61 + 60);
                  SlowCase = *(_QWORD *)(v61 + 24);
                  if (SlowCase >= *(_QWORD *)(v61 + 32))
                  {
                    v137 = v17;
                    v138 = v59;
                    v141 = *(_DWORD *)a2;
                    v143 = *(unsigned int *)(v61 + 60);
                    v139 = *(_QWORD *)(v16 + (((v60 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
                    SlowCase = *(_QWORD *)(v61 + 40);
                    if ((SlowCase & 1) != 0)
                    {
                      JSC::sanitizeStackForVM((JSC *)v16, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                      SlowCase = JSC::LocalAllocator::allocateSlowCase(v139, v16 + 192, v143, 0, 0, v134, v135, v136);
                    }
                    else
                    {
                      v133 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v61 + 48);
                      *(_QWORD *)(v61 + 32) = SlowCase + HIDWORD(v133);
                      *(_QWORD *)(v61 + 40) = SlowCase + (int)v133;
                      *(_QWORD *)(v61 + 24) = SlowCase + v62;
                    }
                    v17 = v137;
                    v59 = v138;
                    v33 = v141;
                  }
                  else
                  {
                    *(_QWORD *)(v61 + 24) = SlowCase + v62;
                  }
LABEL_86:
                  if ((v60 & 7) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984643B4);
                  }
                  v64 = SlowCase + 8 * v59;
                  v65 = (__int128 *)(*(_QWORD *)(v17 + 8) - 8 * v59 - 8);
                  if (v60 > 0xF0)
                  {
                    v102 = v60 + SlowCase;
                    v103 = (v60 & 0x7FFFFFFE0) + SlowCase;
                    while (SlowCase != v103)
                    {
                      v104 = *v65;
                      v105 = v65[1];
                      v65 += 2;
                      *(_OWORD *)SlowCase = v104;
                      *(_OWORD *)(SlowCase + 16) = v105;
                      SlowCase += 32;
                    }
                    while (SlowCase != v102)
                    {
                      v106 = *(_QWORD *)v65;
                      v65 = (__int128 *)((char *)v65 + 8);
                      *(_QWORD *)SlowCase = v106;
                      SlowCase += 8;
                    }
                  }
                  else
                  {
                    v66 = v60 >> 3;
                    do
                    {
                      v67 = *(_QWORD *)v65;
                      v65 = (__int128 *)((char *)v65 + 8);
                      *(_QWORD *)SlowCase = v67;
                      SlowCase += 8;
                      --v66;
                    }
                    while (v66);
                  }
                  v68 = v64 + 8;
                  v69 = (_OWORD *)(a2 + 16);
                  v70 = (__int128 *)(v17 + 16);
                  v71 = *(unsigned __int8 *)(v39 + 14);
                  if (v71 > 0x1E)
                  {
                    v107 = (8 * v71) & 0x7E0;
                    v108 = (_OWORD *)((char *)v69 + 8 * v71);
                    v109 = (_OWORD *)((char *)v69 + v107);
                    while (v69 != v109)
                    {
                      v110 = *v70;
                      v111 = v70[1];
                      v70 += 2;
                      *v69 = v110;
                      v69[1] = v111;
                      v69 += 2;
                    }
                    while (v69 != v108)
                    {
                      v112 = *(_QWORD *)v70;
                      v70 = (__int128 *)((char *)v70 + 8);
                      *(_QWORD *)v69 = v112;
                      v69 = (_OWORD *)((char *)v69 + 8);
                    }
                  }
                  else if (*(_BYTE *)(v39 + 14))
                  {
                    do
                    {
                      v72 = *(_QWORD *)v70;
                      v70 = (__int128 *)((char *)v70 + 8);
                      *(_QWORD *)v69 = v72;
                      v69 = (_OWORD *)((char *)v69 + 8);
                      --v71;
                    }
                    while (v71);
                  }
                  v73 = v16 + 192;
                  if (*(_BYTE *)(v16 + 755))
                  {
                    *(_DWORD *)a2 = v33 | 1;
                    __dmb(0xAu);
                    *(_QWORD *)(a2 + 8) = v68;
                    if (*(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a2 + 7))
                      JSC::Heap::writeBarrierSlowPath(v73, a2);
                    __dmb(0xAu);
                  }
                  else
                  {
                    *(_QWORD *)(a2 + 8) = v68;
                    if (*(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a2 + 7))
                      JSC::Heap::writeBarrierSlowPath(v73, a2);
                  }
                  goto LABEL_63;
                }
LABEL_123:
                v140 = *(_DWORD *)a2;
                v142 = v60;
                v91 = v60;
                v92 = v39;
                v93 = v17;
                v94 = v59;
                SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v58, (JSC *)v16, v91, 0, a5, a6, a7, a8);
                v59 = v94;
                v17 = v93;
                v39 = v92;
                v33 = v140;
                v60 = v142;
                if (!SlowCase)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198464134);
                }
                goto LABEL_86;
              }
            }
          }
        }
        goto LABEL_101;
      }
    }
  }
LABEL_166:
  JSC::objectAssignGeneric(a1, (JSC::JSGlobalObject *)v11, (JSC::VM *)a2, a3, (JSC::JSObject *)a5);
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationObjectAssignUntyped(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  JSC::Structure *v18;
  int v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t SlowCase;
  unint64_t v50;
  __int128 *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  int v64;
  int v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  char v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  WTF *casual;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  WTF *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  WTF *v136;
  uint64_t v138;
  WTF::StringImpl **v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __n128 v164;
  char v165;
  const JSC::PropertyTable *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _WORD *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  _DWORD *v176;
  int v177;
  int v178;
  unsigned __int16 *v180;
  uint64_t v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  BOOL v187;
  unint64_t v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  char v195;
  int v196;
  int v197;
  unsigned __int8 *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t (*v205)(void);
  uint64_t v206;
  const JSC::PropertyTable *v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  WTF *v213;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  unsigned int *v218;
  JSC::VM *v219;
  unint64_t v220;
  WTF **v221;
  uint64_t (**v222)(void);
  JSC::VM **v223;
  uint64_t v224;
  JSC::VM *var70[15];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v9 + 40) = var70[14];
  v217 = a3;
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
    return *(_QWORD *)(v9 + 16);
  v10 = (unsigned int *)a3;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v217, a1, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_121;
  }
  if (*(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a3, (JSC::SymbolObject **)a1, a3, a4, a5, a6, a7, a8);
LABEL_121:
    v10 = (unsigned int *)v75;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v84 = *(_DWORD *)(v9 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return *(_QWORD *)(v9 + 16);
  }
  if (!a2)
    goto LABEL_168;
  if (*(_BYTE *)(a2 + 5) != 24)
    goto LABEL_168;
  v13 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v14 = *(_DWORD *)(v13 + 0x10);
  if ((v14 & 0x10) != 0)
    goto LABEL_168;
  v15 = (_DWORD *)a2;
  while (1)
  {
    if ((*(_WORD *)(v13 + 12) & 0x800) != 0 || v15 != (_DWORD *)a2 && (*(_WORD *)(v13 + 12) & 0x400) != 0)
      goto LABEL_168;
    v16 = *(_DWORD **)(v13 + 48);
    if (!v16)
      v16 = (_DWORD *)*((_QWORD *)v15 + 2);
    if (v16 == (_DWORD *)2)
      break;
    v13 = 16 * (*v16 & 0xFFFFFFFE);
    v15 = v16;
    if ((*(_BYTE *)(v13 + 0x10) & 0x10) != 0)
      goto LABEL_168;
  }
  if ((v14 & 0x100000) != 0)
  {
LABEL_168:
    v108 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v108)
    {
      v109 = (_BYTE *)(v108 + 10328);
      *(_BYTE *)(v108 + 10328) = 1;
      v110 = *(unsigned int *)(v108 + 10344);
      if ((_DWORD)v110)
      {
        *(_DWORD *)(v108 + 10344) = v110 - *(_DWORD *)(v108 + 10348);
        casual = (WTF *)(*(_QWORD *)(v108 + 10336) - v110);
LABEL_171:
        *v109 = 0;
LABEL_172:
        *(_DWORD *)casual = 1;
        *((_QWORD *)casual + 1) = (char *)casual + 24;
        *((_QWORD *)casual + 2) = 20;
        v213 = casual;
        v214 = 0;
        v215 = v9;
        v216 = 259;
        (*(void (**)(unsigned int *, JSC::JSGlobalObject *, WTF **, _QWORD))(16
                                                                                      * *(unsigned int *)(16 * (*v10 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x78))(v10, a1, &v213, 0);
        if (*(_DWORD *)(v9 + 80))
        {
          v135 = *(_DWORD *)(v9 + 80);
          if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v113, v114, v115, v116, v117, v118);
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_186;
        }
        v119 = *((unsigned int *)v213 + 5);
        if (!(_DWORD)v119)
        {
LABEL_186:
          if (v214)
            WTF::fastFree(v214 - 16, v112, v113, v114, v115, v116, v117, v118);
          v136 = v213;
          v213 = 0;
          if (v136)
          {
            if (*(_DWORD *)v136 == 1)
            {
              v138 = *((unsigned int *)v136 + 5);
              if ((_DWORD)v138)
              {
                v139 = (WTF::StringImpl **)*((_QWORD *)v136 + 1);
                v140 = 8 * v138;
                do
                {
                  v141 = *v139;
                  *v139 = 0;
                  if (v141)
                  {
                    if (*(_DWORD *)v141 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v141, (WTF::AtomStringImpl *)v112, v113, v114, v115, v116, v117, v118);
                      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
                    }
                    else
                    {
                      *(_DWORD *)v141 -= 2;
                    }
                  }
                  ++v139;
                  v140 -= 8;
                }
                while (v140);
              }
              v150 = *((_QWORD *)v136 + 1);
              if ((WTF *)((char *)v136 + 24) != (WTF *)v150 && v150 != 0)
              {
                *((_QWORD *)v136 + 1) = 0;
                *((_DWORD *)v136 + 4) = 0;
                WTF::fastFree(v150, v112, v113, v114, v115, v116, v117, v118);
              }
              WTF::fastFree((unint64_t)v136, v112, v113, v114, v115, v116, v117, v118);
            }
            else
            {
              --*(_DWORD *)v136;
            }
          }
          return *(_QWORD *)(v9 + 16);
        }
        v120 = 0;
        while (1)
        {
          if (v120 >= *((unsigned int *)v213 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x198465614);
          }
          v162 = *((_QWORD *)v213 + 1);
          v207 = (const JSC::PropertyTable *)0xFFFFFFFF00000000;
          v208 = (unint64_t)v10;
          *(_QWORD *)&v209 = 0;
          DWORD2(v209) = 0x20000;
          BYTE12(v209) = 0;
          LOBYTE(v210) = 0;
          BYTE8(v210) = 0;
          v211 = 0uLL;
          v163 = (*(uint64_t (**)(unsigned int *, JSC::JSGlobalObject *, _QWORD, uint64_t (**)(void)))(16 * *(unsigned int *)(16 * (*v10 & 0xFFFFFFFE) + 0x4C) + 0x68))(v10, a1, *(_QWORD *)(v162 + 8 * v120), &v205);
          v165 = v163;
          if (*(_DWORD *)(v9 + 80))
          {
            v193 = *(_DWORD *)(v9 + 80);
            if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v113, v114, v115, v116, v117, v118);
            v194 = *(_QWORD *)(v9 + 16);
            if (v194)
              v195 = 0;
            else
              v195 = v165;
            if (v194)
              v177 = 1;
            else
              v177 = 6;
            if ((v195 & 1) == 0)
              goto LABEL_265;
          }
          else if (!v163)
          {
            goto LABEL_271;
          }
          if ((v207 & 4) == 0)
          {
            if (BYTE12(v209))
            {
              v184 = JSC::JSObject::get(v10, (uint64_t)a1, *(_QWORD *)(v162 + 8 * v120), v114, v115, v116, v117, v118);
            }
            else
            {
              if (BYTE9(v209) == 1)
              {
                v166 = (const JSC::PropertyTable *)v205;
LABEL_245:
                if (*(_DWORD *)(v9 + 80))
                {
                  v196 = *(_DWORD *)(v9 + 80);
                  if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v113, v114, v115, v116, v117, v118);
                  if (*(_QWORD *)(v9 + 16))
                    goto LABEL_323;
                }
                v221 = 0;
                v222 = (uint64_t (**)(void))a2;
                LODWORD(v223) = -1;
                BYTE4(v223) = BYTE4(v223) & 0xF8 | 1;
                *(_WORD *)((char *)&v223 + 5) = 0;
                HIBYTE(v223) = 1;
                v224 = 0;
                v167 = *(_QWORD *)(v162 + 8 * v120);
                v168 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
                if ((*(_BYTE *)(v168 + 0xD) & 4) != 0)
                {
                  (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, WTF ***))(16 * *(unsigned int *)(16 * (*(_DWORD *)v168 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v167, v166, &v221);
                }
                else
                {
                  v169 = *((_QWORD *)a1 + 7);
                  if (!v167)
                    goto LABEL_252;
                  v170 = *(_DWORD *)(v167 + 16);
                  if ((v170 & 0x20) != 0)
                    goto LABEL_252;
                  v171 = *(_WORD **)(v167 + 8);
                  v172 = *(unsigned int *)(v167 + 4);
                  if ((v170 & 4) == 0)
                  {
                    if ((_DWORD)v172)
                    {
                      v173 = (unsigned __int16)*v171 - 48;
                      if (v173 <= 9 && (*v171 != 48 || v172 <= 1))
                      {
                        v180 = v171 + 1;
                        v181 = v172 - 1;
                        while (v181)
                        {
                          if (v173 <= 0x19999999)
                          {
                            v182 = *v180 - 48;
                            if (v182 <= 9)
                            {
                              v183 = __CFADD__(v182, 10 * v173);
                              v173 = v182 + 10 * (_DWORD)v173;
                              ++v180;
                              --v181;
                              if (!v183)
                                continue;
                            }
                          }
                          goto LABEL_252;
                        }
                        goto LABEL_287;
                      }
                    }
                    goto LABEL_252;
                  }
                  if (!(_DWORD)v172)
                    goto LABEL_357;
                  v173 = *(unsigned __int8 *)v171 - 48;
                  if (v173 > 9 || v172 >= 2 && *(_BYTE *)v171 == 48)
                    goto LABEL_357;
                  v198 = (unsigned __int8 *)v171 + 1;
                  v199 = v172 - 1;
                  while (v199)
                  {
                    if (v173 <= 0x19999999)
                    {
                      v200 = *v198 - 48;
                      if (v200 <= 9)
                      {
                        v183 = __CFADD__(v200, 10 * v173);
                        v173 = v200 + 10 * (_DWORD)v173;
                        ++v198;
                        --v199;
                        if (!v183)
                          continue;
                      }
                    }
                    goto LABEL_252;
                  }
LABEL_287:
                  if ((_DWORD)v173 == -1)
                  {
LABEL_357:
                  {
LABEL_252:
                    if (*(_QWORD *)(*(_QWORD *)(v169 + 41952) + 16) != v167)
                    {
                      v174 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
                      if ((v174 & 0x10) == 0)
                      {
                        v175 = (_DWORD *)a2;
                        while ((*(_WORD *)(v168 + 12) & 0x800) == 0
                             && (v175 == (_DWORD *)a2 || (*(_WORD *)(v168 + 12) & 0x400) == 0))
                        {
                          v176 = *(_DWORD **)(v168 + 48);
                          if (!v176)
                            v176 = (_DWORD *)*((_QWORD *)v175 + 2);
                          if (v176 == (_DWORD *)2)
                          {
                            if ((*(_BYTE *)(a2 + 6) & 0x20) == 0 || (v174 & 0x400000) != 0)
                            {
                              var70[0] = *((JSC::VM **)a1 + 7);
                              v185 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v169, v167, (uint64_t)v166, 0, (uint64_t)&v221, v117, v118, v164);
                              if (v112 && (BYTE4(v223) & 1) != 0)
                                JSC::throwTypeError((unint64_t)a1, var70, (uint64_t)v185, (uint64_t)v112);
                            }
                            else
                            {
                              JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)a1, v167, (uint64_t)v166, (uint64_t)&v221, v164, v116, v117, v118);
                            }
                            goto LABEL_263;
                          }
                          v168 = 16 * (*v176 & 0xFFFFFFFE);
                          v175 = v176;
                          if ((*(_BYTE *)(v168 + 0x10) & 0x10) != 0)
                            break;
                        }
                      }
                    }
                  }
                    JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v167, v166, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))&v221, v116, v117, v118, v164);
                  }
                  else
                  {
                    (*(void (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, v173, v166, 1);
                  }
                }
                if (!*(_DWORD *)(v9 + 80))
                  goto LABEL_264;
LABEL_263:
                v197 = *(_DWORD *)(v9 + 80);
                if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v113, v114, v115, v116, v117, v118);
                if (*(_QWORD *)(v9 + 16))
LABEL_323:
                  v177 = 1;
                else
LABEL_264:
                  v177 = 0;
LABEL_265:
                if (BYTE8(v210))
                  goto LABEL_266;
                goto LABEL_268;
              }
              if (BYTE9(v209) == 2)
              {
                v184 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v205, a1, v113, v114, v115, v116, v117, v118);
              }
              else
              {
                if ((v207 & 0x20) != 0)
                  v189 = v208;
                else
                  v189 = *((_QWORD *)&v208 + 1);
                v190 = *(WTF::StringImpl **)(v162 + 8 * v120);
                v191 = *(_QWORD *)(16 * (**((_DWORD **)&v208 + 1) & 0xFFFFFFFE) + 0x28);
                if (BYTE11(v209) != 1)
                  goto LABEL_298;
                if ((v189 & 0xFFFE000000000002) != 0)
                  goto LABEL_328;
                v192 = *(unsigned int *)(16 * (*(_DWORD *)v189 & 0xFFFFFFFE) + 0x4C);
                v187 = *(_DWORD *)(16 * (*(_DWORD *)v189 & 0xFFFFFFFE) + 0x4C) != 0;
                if ((_DWORD)v192)
                {
                  v186 = 16 * v192;
                  if ((_QWORD)v211 != v186)
                  {
                    do
                    {
                      v186 = *(_QWORD *)(v186 + 16);
                      v187 = v186 != 0;
                    }
                    while (v186 != (_QWORD)v211 && v186 != 0);
                  }
                }
                if (!v187)
                {
LABEL_328:
                  v221 = (WTF **)*((_QWORD *)a1 + 7);
                  v184 = JSC::throwDOMAttributeGetterTypeError(v191, (JSC::VM **)&v221, (int8x16_t **)v211, v190);
                }
                else
                {
LABEL_298:
                  v184 = v205();
                }
              }
            }
            v166 = (const JSC::PropertyTable *)v184;
            goto LABEL_245;
          }
LABEL_271:
          v177 = 6;
          if (BYTE8(v210))
          {
LABEL_266:
            v178 = *(_DWORD *)(v210 + 4);
            if (!v178)
            {
              __break(0xC471u);
              JUMPOUT(0x1984654CCLL);
            }
            *(_DWORD *)(v210 + 4) = v178 - 1;
          }
LABEL_268:
          if ((v177 == 6 || !v177) && ++v120 != v119)
            continue;
          goto LABEL_186;
        }
      }
      v121 = *(_QWORD *)(v108 + 10368);
      v122 = *(_QWORD *)(v108 + 10352);
      if (v121)
      {
LABEL_176:
        v123 = __clz(v121);
        *(_QWORD *)(v108 + 10368) = v121 & ~(0x8000000000000000 >> v123);
        casual = (WTF *)(v122 + 16 * v123);
        goto LABEL_171;
      }
      if (*(_BYTE *)(v108 + 10333) == 6)
      {
        v152 = *(_DWORD *)(v108 + 10364);
        v153 = *(unsigned int *)(v108 + 10360);
        if (v153 < v152)
        {
          *(_QWORD *)&v109[8 * v153 + 56] = 0;
          v154 = (unint64_t *)(v108 + 8 * v153 + 10392);
          v155 = v152 - 1 - v153;
          while (v155)
          {
            v122 += 1024;
            v157 = *v154++;
            v156 = v157;
            LODWORD(v153) = v153 + 1;
            --v155;
            if (v157)
            {
              v121 = __rbit64(v156);
              *(_DWORD *)(v108 + 10360) = v153;
              *(_QWORD *)(v108 + 10352) = v122;
              goto LABEL_176;
            }
          }
          *(_DWORD *)(v108 + 10360) = v152;
        }
      }
      *v109 = 0;
    }
    casual = (WTF *)bmalloc_allocate_casual(184, 1);
    goto LABEL_172;
  }
  if ((*(_BYTE *)((16 * *v10) | 0x12) & 0x40) == 0)
  {
    JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)v10, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v9 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
        return *(_QWORD *)(v9 + 16);
    }
  }
  v212 = 0;
  v213 = (WTF *)&v215;
  v207 = (const JSC::PropertyTable *)((char *)&v208 + 8);
  v208 = 0u;
  v209 = 0u;
  v210 = 0u;
  v211 = 0u;
  v218 = v10;
  v17 = *((_QWORD *)a1 + 7);
  v214 = 8;
  LOBYTE(v205) = 0;
  v206 = 0x800000000;
  v18 = (JSC::Structure *)(16 * (*v10 & 0xFFFFFFFE));
  if ((*((_BYTE *)v10 + 6) & 0x20) != 0 && (*(_BYTE *)(16 * (*v10 & 0xFFFFFFFE) + 0x12) & 0x40) == 0
    || *(_WORD *)(16 * (*v10 & 0xFFFFFFFE) + 0xC) & 6 | *(_BYTE *)(16 * (*v10 & 0xFFFFFFFE) + 0xA) & 8)
  {
    v20 = 1;
    goto LABEL_98;
  }
  v19 = *(_DWORD *)(16 * (*v10 & 0xFFFFFFFE) + 0x10);
  v20 = 1;
  if ((v19 & 0x20000008) == 0 && (*(_DWORD *)(16 * (*v10 & 0xFFFFFFFE) + 0x10) & 3) != 2)
  {
    v21 = *(_DWORD *)a2;
    if (*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20))
      goto LABEL_93;
    if (*(_BYTE *)(16 * (v21 & 0xFFFFFFFE) + 9) != 24)
      goto LABEL_93;
    v22 = *(_DWORD *)(16 * (v21 & 0xFFFFFFFE) + 0x10);
    if ((v22 & 3) != 0)
      goto LABEL_93;
    if (v22 & 0x9980000 | *(_BYTE *)(16 * (v21 & 0xFFFFFFFE) + 8) & 0xE)
      goto LABEL_93;
    if ((v22 & 0x40000070) != 0x20)
      goto LABEL_93;
    v23 = *(_QWORD *)(16 * (v21 & 0xFFFFFFFE) + 0x30);
    if (!v23)
      goto LABEL_93;
    v24 = *(_QWORD *)(16 * (v21 & 0xFFFFFFFE) + 0x60);
    v25 = (v24 & 1) != 0 ? (v24 >> 1) & 3 : *(unsigned __int8 *)(v24 + 4);
    if ((v22 & 0x200000) != 0 || v25 != 2)
      goto LABEL_93;
    if ((v19 & 0x3E000) != 0x1C000)
    {
      v26 = 16 * (*v10 & 0xFFFFFFFE);
      goto LABEL_40;
    }
    v26 = *(_QWORD *)(16 * (*v10 & 0xFFFFFFFE) + 0x40);
    if (!v26)
      goto LABEL_93;
    if (*(_BYTE *)(v26 + 5) != 1)
    {
      v60 = *(_DWORD *)(v26 + 80) & 0xFFFFFFFE;
      if (!(_DWORD)v60)
        goto LABEL_93;
      v26 = 16 * v60;
    }
    if ((*(_DWORD *)(v26 + 16) & 0x3E000) != 0x10000)
      goto LABEL_40;
    if ((v10[1] & 0xE) == 0)
      goto LABEL_38;
    v39 = v10[1] & 0xF;
    if ((v39 - 10) >= 4)
    {
      if ((v39 - 4) < 6)
      {
        v44 = (_DWORD *)(*((_QWORD *)v10 + 1) - 8);
LABEL_71:
        if (*v44)
          goto LABEL_40;
        goto LABEL_38;
      }
      if (v39 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198465098);
      }
    }
    else
    {
      v40 = (_QWORD *)*((_QWORD *)v10 + 1);
      v41 = *((_DWORD *)v40 - 2);
      if (*((_DWORD *)v40 - 1) < v41)
        v41 = *((_DWORD *)v40 - 1);
      if (v41)
        goto LABEL_40;
      v42 = *v40;
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
        {
          v44 = (_DWORD *)(v43 - 12);
          goto LABEL_71;
        }
      }
    }
LABEL_38:
    v26 = *(_QWORD *)(v26 + 64);
    if (!v26)
      goto LABEL_93;
    if (*(_BYTE *)(v26 + 5) != 1)
    {
      v61 = *(_DWORD *)(v26 + 80) & 0xFFFFFFFE;
      if (!(_DWORD)v61)
        goto LABEL_93;
      v26 = 16 * v61;
    }
LABEL_40:
    if (*(_BYTE *)(v26 + 9) == 24)
    {
      v27 = *(_DWORD *)(v26 + 16);
      if ((v27 & 3) == 0 && !(v27 & 0x9980000 | *(_BYTE *)(v26 + 8) & 0xE) && (v27 & 0x40200070) == 0x200020)
      {
        v28 = *(_QWORD *)(v26 + 48);
        if (v28)
        {
          v29 = *(unsigned __int8 *)(16 * (v21 & 0xFFFFFFFE) + 0xE);
          if ((_DWORD)v29 == *(unsigned __int8 *)(v26 + 14)
            && v23 == v28
            && *(_QWORD *)(16 * (v21 & 0xFFFFFFFE) + 0x28) == *(_QWORD *)(v26 + 40))
          {
            v30 = *(unsigned __int16 *)(v26 + 24);
            if (v30 == 65534)
              goto LABEL_52;
            if (v30 == 0xFFFF)
              v30 = *(_DWORD *)(*(_QWORD *)(v26 + 64) + 84);
            if (v30 < 64)
            {
LABEL_52:
              v31 = (_OWORD *)(a2 + 16);
              v32 = (__int128 *)(v10 + 4);
              if (v29 > 0x1E)
              {
                v78 = (8 * v29) & 0x7E0;
                v79 = (_OWORD *)((char *)v31 + 8 * v29);
                v80 = (_OWORD *)((char *)v31 + v78);
                while (v31 != v80)
                {
                  v81 = *v32;
                  v82 = v32[1];
                  v32 += 2;
                  *v31 = v81;
                  v31[1] = v82;
                  v31 += 2;
                }
                while (v31 != v79)
                {
                  v83 = *(_QWORD *)v32;
                  v32 = (__int128 *)((char *)v32 + 8);
                  *(_QWORD *)v31 = v83;
                  v31 = (_OWORD *)((char *)v31 + 8);
                }
              }
              else if (*(_BYTE *)(16 * (v21 & 0xFFFFFFFE) + 0xE))
              {
                do
                {
                  v33 = *(_QWORD *)v32;
                  v32 = (__int128 *)((char *)v32 + 8);
                  *(_QWORD *)v31 = v33;
                  v31 = (_OWORD *)((char *)v31 + 8);
                  --v29;
                }
                while (v29);
              }
LABEL_55:
              *(_DWORD *)a2 = v26 >> 4;
              *(_BYTE *)(a2 + 6) = *(_BYTE *)(a2 + 6) & 0x80 | *(_BYTE *)(v26 + 10);
              *(_BYTE *)(a2 + 5) = *(_BYTE *)(v26 + 9);
              v34 = (unsigned __int8 *)(a2 + 4);
              if (*(unsigned __int8 *)(a2 + 4) != *(unsigned __int8 *)(v26 + 8))
              {
                do
                {
                  while (1)
                  {
                    v37 = *v34;
                    v38 = __ldxr(v34);
                    if (v38 == v37)
                      break;
                    __clrex();
                  }
                }
                while (__stxr(v37 & 0xC0 | *(_BYTE *)(v26 + 8), v34));
              }
              v35 = *(unsigned __int8 *)(a2 + 7);
              v36 = *(_DWORD *)(v17 + 760);
              if (v36 >= v35)
              {
                JSC::Heap::writeBarrierSlowPath(v17 + 192, a2);
                v35 = *(unsigned __int8 *)(a2 + 7);
                v36 = *(_DWORD *)(v17 + 760);
              }
              if (v36 >= v35)
                JSC::Heap::writeBarrierSlowPath(v17 + 192, a2);
LABEL_97:
              v20 = 0;
              goto LABEL_98;
            }
            if ((v30 - 63) > 4)
            {
              v72 = (v30 - 64) | ((v30 - 64) >> 1) | (((v30 - 64) | ((v30 - 64) >> 1)) >> 2);
              v73 = v72 | (v72 >> 4) | ((v72 | (v72 >> 4)) >> 8);
              v74 = v73 | HIWORD(v73);
              v46 = v74 + 1;
              v47 = 8 * v46;
              v45 = v17 + 6648;
              if (v74 > 0x3EB)
                goto LABEL_116;
            }
            else
            {
              v45 = v17 + 6648;
              v46 = 4;
              v47 = 32;
            }
            v48 = *(_QWORD *)(v17 + (((v47 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
            if (v48)
            {
              SlowCase = *(_QWORD *)(v48 + 24);
              if (SlowCase >= *(_QWORD *)(v48 + 32))
              {
                v202 = *(unsigned int *)(v48 + 60);
                v204 = v47;
                v201 = *(_QWORD *)(v17 + (((v47 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
                SlowCase = *(_QWORD *)(v48 + 40);
                if ((SlowCase & 1) != 0)
                {
                  JSC::sanitizeStackForVM((JSC *)v17, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase(v201, v17 + 192, v202, 0, 0, v159, v160, v161);
                }
                else
                {
                  v158 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v48 + 48);
                  *(_QWORD *)(v48 + 32) = SlowCase + HIDWORD(v158);
                  *(_QWORD *)(v48 + 40) = SlowCase + (int)v158;
                  *(_QWORD *)(v48 + 24) = SlowCase + v202;
                }
                v47 = v204;
              }
              else
              {
                *(_QWORD *)(v48 + 24) = SlowCase + *(unsigned int *)(v48 + 60);
              }
LABEL_78:
              if ((v47 & 7) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x198464FB4);
              }
              v50 = SlowCase + 8 * v46;
              v51 = (__int128 *)(*((_QWORD *)v10 + 1) - 8 * v46 - 8);
              if (v47 > 0xF0)
              {
                v85 = v47 & 0x7FFFFFFE0;
                v86 = v47 + SlowCase;
                v87 = v85 + SlowCase;
                while (SlowCase != v87)
                {
                  v88 = *v51;
                  v89 = v51[1];
                  v51 += 2;
                  *(_OWORD *)SlowCase = v88;
                  *(_OWORD *)(SlowCase + 16) = v89;
                  SlowCase += 32;
                }
                while (SlowCase != v86)
                {
                  v90 = *(_QWORD *)v51;
                  v51 = (__int128 *)((char *)v51 + 8);
                  *(_QWORD *)SlowCase = v90;
                  SlowCase += 8;
                }
              }
              else
              {
                v52 = v47 >> 3;
                do
                {
                  v53 = *(_QWORD *)v51;
                  v51 = (__int128 *)((char *)v51 + 8);
                  *(_QWORD *)SlowCase = v53;
                  SlowCase += 8;
                  --v52;
                }
                while (v52);
              }
              v54 = v50 + 8;
              v55 = (_OWORD *)(a2 + 16);
              v56 = (__int128 *)(v10 + 4);
              v57 = *(unsigned __int8 *)(v26 + 14);
              if (v57 > 0x1E)
              {
                v91 = (8 * v57) & 0x7E0;
                v92 = (_OWORD *)((char *)v55 + 8 * v57);
                v93 = (_OWORD *)((char *)v55 + v91);
                while (v55 != v93)
                {
                  v94 = *v56;
                  v95 = v56[1];
                  v56 += 2;
                  *v55 = v94;
                  v55[1] = v95;
                  v55 += 2;
                }
                while (v55 != v92)
                {
                  v96 = *(_QWORD *)v56;
                  v56 = (__int128 *)((char *)v56 + 8);
                  *(_QWORD *)v55 = v96;
                  v55 = (_OWORD *)((char *)v55 + 8);
                }
              }
              else if (*(_BYTE *)(v26 + 14))
              {
                do
                {
                  v58 = *(_QWORD *)v56;
                  v56 = (__int128 *)((char *)v56 + 8);
                  *(_QWORD *)v55 = v58;
                  v55 = (_OWORD *)((char *)v55 + 8);
                  --v57;
                }
                while (v57);
              }
              v59 = v17 + 192;
              if (*(_BYTE *)(v17 + 755))
              {
                *(_DWORD *)a2 = v21 | 1;
                __dmb(0xAu);
                *(_QWORD *)(a2 + 8) = v54;
                if (*(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(a2 + 7))
                  JSC::Heap::writeBarrierSlowPath(v59, a2);
                __dmb(0xAu);
              }
              else
              {
                *(_QWORD *)(a2 + 8) = v54;
                if (*(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(a2 + 7))
                  JSC::Heap::writeBarrierSlowPath(v59, a2);
              }
              goto LABEL_55;
            }
LABEL_116:
            v203 = v47;
            SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v45, (JSC *)v17, v47, 0, a5, a6, a7, a8);
            v47 = v203;
            if (!SlowCase)
            {
              __break(0xC471u);
              JUMPOUT(0x198464B10);
            }
            goto LABEL_78;
          }
        }
      }
    }
LABEL_93:
    if ((v10[1] & 0xE) != 0)
    {
      v76 = v10[1] & 0xF;
      if ((v76 - 3) >= 7)
      {
        if ((v76 - 10) > 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198465044);
        }
        v77 = **((_QWORD **)v10 + 1);
        if (v77)
        {
          if ((*(_BYTE *)(v77 + 16) & 4) != 0)
            goto LABEL_98;
        }
      }
    }
    v221 = &v213;
    v222 = &v205;
    v223 = (JSC::VM **)&v218;
    JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(v18, (JSC::VM *)v17, (uint64_t)&v221, a4, a5, a6, a7, a8);
    if ((v218[1] & 0xE) == 0)
      goto LABEL_95;
    v65 = v218[1] & 0xF;
    if ((v65 - 10) >= 4)
    {
      if ((v65 - 4) >= 6)
      {
        if (v65 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x1984650C0);
        }
        goto LABEL_95;
      }
      v70 = (_DWORD *)(*((_QWORD *)v218 + 1) - 8);
    }
    else
    {
      v66 = (_QWORD *)*((_QWORD *)v218 + 1);
      v67 = *((_DWORD *)v66 - 2);
      if (*((_DWORD *)v66 - 1) < v67)
        v67 = *((_DWORD *)v66 - 1);
      if (v67)
      {
LABEL_110:
        var70[0] = a1;
        v219 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v220 = a2;
        v221 = (WTF **)&v220;
        v222 = (uint64_t (**)(void))var70;
        v223 = &v219;
        JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)0,JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject*,JSC::JSObject*)::{lambda(unsigned int,JSC::JSValue)#1}>((uint64_t)v218, (uint64_t)a1, (unint64_t **)&v221, (uint64_t)a4, v62, a6, a7, a8, (int32x4_t)v63);
        if (*((_DWORD *)v219 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v219, a2, a3, (uint64_t)a4, v71, a6, a7, a8);
        if (!*(_DWORD *)(v17 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17, a2, a3, (uint64_t)a4, v71, a6, a7, a8))
        {
          goto LABEL_95;
        }
        goto LABEL_98;
      }
      v68 = *v66;
      if (!v68 || (v69 = *(_QWORD *)(v68 + 8)) == 0)
      {
LABEL_95:
        a5 = HIDWORD(v214);
        if (HIDWORD(v214))
          JSC::JSObject::putOwnDataPropertyBatching(a2, (JSC::VM *)v17, v213, v207, HIDWORD(v214), a6, a7, a8, v63);
        goto LABEL_97;
      }
      v70 = (_DWORD *)(v69 - 12);
    }
    if (*v70)
      goto LABEL_110;
    goto LABEL_95;
  }
LABEL_98:
  if (*(_DWORD *)(v9 + 80))
  {
    v97 = *(_DWORD *)(v9 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(v9 + 16);
    if (v17)
      v98 = 0;
    else
      v98 = v20;
    if ((v98 & 1) == 0)
      goto LABEL_101;
  }
  else if ((v20 & 1) == 0)
  {
    v17 = *(_QWORD *)(v9 + 16);
LABEL_101:
    v64 = 0;
    goto LABEL_161;
  }
  v64 = 1;
LABEL_161:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v206, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (HIDWORD(v214))
  {
    v124 = v213;
    v125 = 8 * HIDWORD(v214);
    do
    {
      v126 = *(WTF::StringImpl **)v124;
      *(_QWORD *)v124 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
        {
          WTF::StringImpl::~StringImpl(v126, v99, v100, v101, v102, v103, v104, v105);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)v126 -= 2;
        }
      }
      v124 = (WTF *)((char *)v124 + 8);
      v125 -= 8;
    }
    while (v125);
  }
  v106 = v213;
  if (&v215 != (uint64_t *)v213 && v213 != 0)
  {
    v213 = 0;
    LODWORD(v214) = 0;
    WTF::fastFree((unint64_t)v106, v99, v100, v101, v102, v103, v104, v105);
  }
  if (v64)
    goto LABEL_168;
  return v17;
}

int *operationObjectToStringUntyped(JSC::JSGlobalObject *a1, unint64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;
  uint64_t v16;
  JSC::Structure *v17;
  uint64_t v18;
  JSC::JSString *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  JSC::VM *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  JSC::VM *v61;
  BOOL v62;
  JSC::Structure *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t **v81;
  unint64_t v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  JSC::VM *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  int *v134;
  int v135;
  uint64_t v136;
  int *v137;
  int v138;
  uint64_t v139;
  int *v140;
  int v141;
  JSC::VM *v142;
  BOOL v143;
  int v144;
  char v145;
  uint64_t v146;
  int *v147;
  int v148;
  int v149;
  _BOOL4 v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  int v155;
  uint64_t v156;
  int *v157;
  int v158;
  uint64_t v159;
  int *v160;
  int v161;
  int v162;
  _BOOL4 v163;
  JSC::JSString *v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  _BOOL4 v174;
  double v175;
  const unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unsigned int v179;
  JSC::VM *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  unsigned int v197;
  JSC::VM *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  char v207;
  _QWORD *v208;
  JSC::VM *v209;
  unint64_t v210;
  JSC::VM *v211;
  uint64_t v212;
  unint64_t v213;
  _DWORD *v214;
  _DWORD *v215;
  _QWORD v216[2];
  uint64_t v217;
  char v218;
  int8x16_t **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *varE0[29];

  v8 = a2;
  varE0[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v10 + 40) = varE0[28];
  if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) - 51 <= 5)
    return *(int **)(v10 + 42088);
  v210 = a2;
  if (a2 == 10)
    return *(int **)(v10 + 42088);
  if (a2 == 2)
    return *(int **)(v10 + 42080);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v82 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v210, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 5) > 0x16u)
      goto LABEL_7;
    v82 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v8 = v82;
LABEL_7:
  if (*(_DWORD *)(v10 + 80))
  {
    v83 = *(_DWORD *)(v10 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x40);
  if (v11)
  {
    if (*(_BYTE *)(v11 + 5) != 1)
    {
      v12 = *(_QWORD *)(v11 + 64);
      if (v12)
      {
        v13 = *(int **)(v12 + 16);
        if ((unint64_t)v13 >= 2)
          return v13;
      }
    }
  }
  v15 = *((_QWORD *)a1 + 7);
  JSC::inferBuiltinTag(a1, v8, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v221);
  if (*(_DWORD *)(v15 + 80))
  {
    v110 = *(_DWORD *)(v15 + 80);
    if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
    if (*(_QWORD *)(v15 + 16))
      return 0;
  }
  v213 = 0xFFFFFFFF00000000;
  LOBYTE(v217) = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v215 = 0;
  memset(v216, 0, 13);
  v214 = (_DWORD *)v8;
  v208 = (_QWORD *)(v15 + 41952);
  v209 = (JSC::VM *)v15;
  v23 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 2776);
  v24 = v8 + 6;
  v25 = v23 >> 4;
  v26 = v8;
  if ((*(_BYTE *)(v8 + 6) & 8) == 0)
  {
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v28 = v8;
    do
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
        goto LABEL_27;
      v31 = *(_QWORD *)(16 * v29 + 0x58);
      if (!v31)
      {
        v42 = *(_QWORD *)(16 * v29 + 0x40);
        if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
          goto LABEL_27;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v30, v27, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
        if (!v31)
          goto LABEL_27;
      }
      if (!*(_DWORD *)(v31 + 24))
        goto LABEL_27;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      v34 = *(unsigned int *)(v31 + 8);
      v35 = *(_DWORD *)(v23 + 16);
      if ((v32 & 1) != 0)
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v36 = *(_DWORD *)(v31 + 12);
        v37 = (v35 >> 8) & *(_QWORD *)&v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_27;
        v39 = v33 + v34;
        v40 = 1;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
          if (v23 == (v41 & 0xFFFFFFFFFFFFLL))
            break;
          v37 = ((_DWORD)v37 + v40) & v36;
          v38 = *(unsigned __int8 *)(v33 + v37);
          ++v40;
          if (!*(_BYTE *)(v33 + v37))
            goto LABEL_27;
        }
        v20 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      }
      else
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v43 = *(_DWORD *)(v31 + 12);
        v44 = v43 & (v35 >> 8);
        v45 = *(_DWORD *)(v33 + 4 * v44);
        if (!v45)
          goto LABEL_27;
        v46 = v33 + 4 * v34;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (v23 == *(_QWORD *)(v46 + 16 * v48))
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v33 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_27;
        }
        v20 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
      }
      if ((_DWORD)v20 != -1)
      {
        v19 = (JSC::JSString *)HIDWORD(v20);
        if ((int)v20 <= 63)
        {
          v57 = v28 + 16;
          v58 = v20 << 32;
        }
        else
        {
          v57 = *(_QWORD *)(v28 + 8) - 8;
          v58 = 0x3F00000000 - (v20 << 32);
        }
        v18 = *(_QWORD *)(v57 + (v58 >> 29));
        if ((v18 & 0xFFFE000000000002) == 0)
        {
          v59 = *(unsigned __int8 *)(v18 + 5);
          if (v59 != 5)
          {
            if (v59 != 6)
              goto LABEL_67;
            v78 = *(_DWORD *)(v30 + 16) & 3;
            v79 = *(_QWORD *)(v18 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v81 = *(int8x16_t ***)(v18 + 24);
              v80 = *(_QWORD *)(v18 + 32);
              v211 = *(JSC::VM **)(v18 + 8);
              v212 = v79;
              LODWORD(v213) = HIDWORD(v20);
              v215 = (_DWORD *)v28;
              goto LABEL_116;
            }
            v211 = *(JSC::VM **)(v18 + 8);
            v212 = v79;
            LODWORD(v213) = HIDWORD(v20);
            v215 = (_DWORD *)v28;
LABEL_189:
            BYTE1(v216[1]) = 3;
            if (v78 != 2)
              LOBYTE(v216[1]) = 1;
            goto LABEL_69;
          }
          v68 = (unsigned int *)v28;
          v69 = (uint64_t)v27;
LABEL_95:
          JSC::JSObject::fillGetterPropertySlot(v68, v69, (uint64_t)&v211, v18, (int)v19, v20);
          goto LABEL_69;
        }
LABEL_67:
        v211 = (JSC::VM *)v18;
        v215 = (_DWORD *)v28;
LABEL_68:
        v213 = __PAIR64__(v20, v19);
        LOWORD(v216[1]) = 257;
        goto LABEL_69;
      }
LABEL_27:
      if ((*(_BYTE *)v24 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, v27, v23, (uint64_t)&v211) & 1) != 0)
      {
        goto LABEL_69;
      }
      v26 = *(_QWORD *)(v30 + 48);
      if (!v26)
        v26 = *(_QWORD *)(v28 + 16);
      if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
      {
        if (!v23)
          goto LABEL_78;
        v49 = *(_DWORD *)(v23 + 16);
        if ((v49 & 0x20) != 0)
          goto LABEL_78;
        v50 = *(_BYTE **)(v23 + 8);
        v51 = *(unsigned int *)(v23 + 4);
        if ((v49 & 4) != 0)
        {
          if (!(_DWORD)v51)
            goto LABEL_78;
          v52 = *v50 - 48;
          if (v52 > 9 || v51 >= 2 && *v50 == 48)
            goto LABEL_78;
          v177 = v50 + 1;
          v178 = v51 - 1;
          while (v178)
          {
            if (v52 <= 0x19999999)
            {
              v179 = *v177 - 48;
              if (v179 <= 9)
              {
                v56 = __CFADD__(v179, 10 * v52);
                v52 = v179 + 10 * (_DWORD)v52;
                ++v177;
                --v178;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_78;
          }
        }
        else
        {
          if (!(_DWORD)v51)
            goto LABEL_78;
          v52 = *(unsigned __int16 *)v50 - 48;
          if (v52 > 9 || *(_WORD *)v50 == 48 && v51 > 1)
            goto LABEL_78;
          v53 = (unsigned __int16 *)(v50 + 2);
          v54 = v51 - 1;
          while (v54)
          {
            if (v52 <= 0x19999999)
            {
              v55 = *v53 - 48;
              if (v55 <= 9)
              {
                v56 = __CFADD__(v55, 10 * v52);
                v52 = v55 + 10 * (_DWORD)v52;
                ++v53;
                --v54;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_78;
          }
        }
        if ((_DWORD)v52 == -1)
          goto LABEL_78;
        v180 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v181 = v8;
        while (1)
        {
          v182 = 16 * (*(_DWORD *)v181 & 0xFFFFFFFE);
          v184 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, JSC::VM **))(16 * *(unsigned int *)(v182 + 0x4C) + 0x70))(v181, a1, v52, &v211);
          if (*((_DWORD *)v180 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v180, v183, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
          {
            goto LABEL_78;
          }
          if ((v184 & 1) != 0)
            goto LABEL_69;
          if (BYTE2(v216[1]) == 3)
          {
            if (BYTE4(v216[1]))
              goto LABEL_78;
            v185 = *(unsigned __int8 *)(v181 + 5);
            if (v185 == 61)
              goto LABEL_327;
          }
          else
          {
            v185 = *(unsigned __int8 *)(v181 + 5);
            if (v185 == 61)
            {
              if (BYTE2(v216[1]) == 1)
                goto LABEL_78;
              goto LABEL_327;
            }
          }
          if ((v185 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v181, v183, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v52)
          {
            goto LABEL_78;
          }
LABEL_327:
          if ((*(_WORD *)(v182 + 12) & 0x800) == 0 || BYTE2(v216[1]) == 3)
          {
            v186 = *(_QWORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x30);
            if (!v186)
              v186 = *(_QWORD *)(v181 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v186 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v181, a1);
            }
            else
            {
              v186 = *(_QWORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x30);
              if (!v186)
                v186 = *(_QWORD *)(v181 + 16);
            }
            if (*((_DWORD *)v180 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v180, v183, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
            {
              goto LABEL_78;
            }
          }
          if ((v186 & 0xFFFE000000000002) == 0)
          {
            v181 = v186;
            if (*(unsigned __int8 *)(v186 + 5) > 0x16u)
              continue;
          }
          goto LABEL_78;
        }
      }
      v24 = v26 + 6;
      v28 = v26;
    }
    while ((*(_BYTE *)(v26 + 6) & 8) == 0);
  }
  if (v23)
  {
    v84 = *(_DWORD *)(v23 + 16);
    if ((v84 & 0x20) == 0)
    {
      v85 = *(_BYTE **)(v23 + 8);
      v86 = *(unsigned int *)(v23 + 4);
      if ((v84 & 4) != 0)
      {
        if ((_DWORD)v86)
        {
          v87 = *v85 - 48;
          if (v87 <= 9 && (v86 < 2 || *v85 != 48))
          {
            v195 = v85 + 1;
            v196 = v86 - 1;
            while (v196)
            {
              if (v87 <= 0x19999999)
              {
                v197 = *v195 - 48;
                if (v197 <= 9)
                {
                  v56 = __CFADD__(v197, 10 * v87);
                  v87 = v197 + 10 * (_DWORD)v87;
                  ++v195;
                  --v196;
                  if (!v56)
                    continue;
                }
              }
              goto LABEL_131;
            }
LABEL_366:
            if ((_DWORD)v87 != -1)
            {
              v198 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v199 = v8;
              while (1)
              {
                v200 = 16 * (*(_DWORD *)v199 & 0xFFFFFFFE);
                v201 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, JSC::VM **))(16 * *(unsigned int *)(v200 + 0x4C) + 0x70))(v199, a1, v87, &v211);
                v203 = v201;
                if (*((_DWORD *)v198 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v198, v202, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
                  if (((hasExceptionsAfterHandlingTraps | v203) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_69;
                    goto LABEL_78;
                  }
                }
                else if ((v201 & 1) != 0)
                {
                  goto LABEL_69;
                }
                if (BYTE2(v216[1]) == 3)
                {
                  if (BYTE4(v216[1]))
                    goto LABEL_78;
                  v204 = *(unsigned __int8 *)(v199 + 5);
                  if (v204 == 61)
                    goto LABEL_373;
                }
                else
                {
                  v204 = *(unsigned __int8 *)(v199 + 5);
                  if (v204 == 61)
                  {
                    if (BYTE2(v216[1]) == 1)
                      goto LABEL_78;
                    goto LABEL_373;
                  }
                }
                if ((v204 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v199, v202, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v87)
                {
                  goto LABEL_78;
                }
LABEL_373:
                if ((*(_WORD *)(v200 + 12) & 0x800) == 0 || BYTE2(v216[1]) == 3)
                {
                  v205 = *(_QWORD *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0x30);
                  if (!v205)
                    v205 = *(_QWORD *)(v199 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v205 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v199, a1);
                  }
                  else
                  {
                    v205 = *(_QWORD *)(16 * (*(_DWORD *)v199 & 0xFFFFFFFE) + 0x30);
                    if (!v205)
                      v205 = *(_QWORD *)(v199 + 16);
                  }
                  if (*((_DWORD *)v198 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v198, v202, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
                  {
                    goto LABEL_78;
                  }
                }
                if ((v205 & 0xFFFE000000000002) == 0)
                {
                  v199 = v205;
                  if (*(unsigned __int8 *)(v205 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_78;
              }
            }
          }
        }
      }
      else if ((_DWORD)v86)
      {
        v87 = *(unsigned __int16 *)v85 - 48;
        if (v87 <= 9 && (*(_WORD *)v85 != 48 || v86 <= 1))
        {
          v114 = (unsigned __int16 *)(v85 + 2);
          v115 = v86 - 1;
          while (v115)
          {
            if (v87 <= 0x19999999)
            {
              v116 = *v114 - 48;
              if (v116 <= 9)
              {
                v56 = __CFADD__(v116, 10 * v87);
                v87 = v116 + 10 * (_DWORD)v87;
                ++v114;
                --v115;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_131;
          }
          goto LABEL_366;
        }
      }
    }
  }
LABEL_131:
  v88 = (JSC::VM *)*((_QWORD *)a1 + 7);
  while (1)
  {
    v89 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 6) & 8) == 0)
      break;
    v207 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C) + 0x68))(v26, a1, v23, &v211);
    if (*((_DWORD *)v88 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v88, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_78;
    }
    if ((v207 & 1) != 0)
      goto LABEL_69;
    if (BYTE2(v216[1]) == 3)
    {
      if (BYTE4(v216[1]))
        goto LABEL_78;
      v151 = *(unsigned __int8 *)(v26 + 5);
      if (v151 != 61)
      {
LABEL_255:
        if (!v23)
          goto LABEL_145;
        if ((v151 - 50) < 0xFFFFFFF5)
          goto LABEL_145;
        v152 = *(_DWORD *)(v23 + 16);
        if ((v152 & 0x20) != 0)
          goto LABEL_145;
        v153 = *(unsigned int *)(v23 + 4);
        if (!(_DWORD)v153)
          goto LABEL_145;
        v154 = *(unsigned __int8 **)(v23 + 8);
        if ((v152 & 4) == 0)
        {
          v155 = *(unsigned __int16 *)v154;
          if ((_DWORD)v153 == 1)
            goto LABEL_261;
          if (v155 == 45)
          {
            v155 = *((unsigned __int16 *)v154 + 1);
            goto LABEL_288;
          }
          if ((v155 - 48) >= 0xA && ((_DWORD)v153 != 8 || v155 != 73))
          {
LABEL_303:
            if ((_DWORD)v153 != 3 || v155 != 78)
              goto LABEL_145;
          }
LABEL_292:
          v24 = v24 & 0xFFFFFF0000000000 | v153 | ((unint64_t)((v152 >> 2) & 1) << 32);
          JSC::jsToNumber(v154, v24);
          WTF::numberToString(varE0, v175);
          if (WTF::equal(v23, (unint64_t)varE0, v176))
            goto LABEL_78;
          goto LABEL_145;
        }
        v155 = *v154;
        if ((_DWORD)v153 == 1)
        {
LABEL_261:
          if ((v155 - 48) < 0xA)
            goto LABEL_78;
          goto LABEL_145;
        }
        if (v155 == 45)
        {
          v155 = v154[1];
LABEL_288:
          if ((v155 - 48) < 0xA)
          {
            if ((_DWORD)v153 == 2)
              goto LABEL_78;
            goto LABEL_292;
          }
          if ((_DWORD)v153 != 9)
            goto LABEL_145;
        }
        else
        {
          if ((v155 - 48) < 0xA)
            goto LABEL_292;
          if ((_DWORD)v153 != 8)
            goto LABEL_303;
        }
        if (v155 != 73)
          goto LABEL_145;
        goto LABEL_292;
      }
    }
    else
    {
      v151 = *(unsigned __int8 *)(v26 + 5);
      if (v151 != 61)
        goto LABEL_255;
      if (BYTE2(v216[1]) == 1)
        goto LABEL_78;
    }
LABEL_145:
    if ((*(_WORD *)(v89 + 12) & 0x800) == 0)
    {
      v101 = *(_DWORD *)v26;
LABEL_147:
      v102 = *(_QWORD *)(16 * (v101 & 0xFFFFFFFE) + 0x30);
      if (!v102)
        v102 = *(_QWORD *)(v26 + 16);
      goto LABEL_149;
    }
    v101 = *(_DWORD *)v26;
    if (BYTE2(v216[1]) == 3)
      goto LABEL_147;
    v119 = 16 * (v101 & 0xFFFFFFFE);
    if ((*(_WORD *)(v119 + 12) & 0x800) != 0)
    {
      v102 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v119 + 76)
                                                                                + 0xB0))(v26, a1);
    }
    else
    {
      v102 = *(_QWORD *)(v119 + 48);
      if (!v102)
        v102 = *(_QWORD *)(v26 + 16);
    }
    if (*((_DWORD *)v88 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v88, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_78;
    }
LABEL_149:
    if ((v102 & 0xFFFE000000000002) == 0)
    {
      v26 = v102;
      if (*(unsigned __int8 *)(v102 + 5) > 0x16u)
        continue;
    }
    goto LABEL_78;
  }
  if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_144;
  v90 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x58);
  if (!v90)
  {
    v103 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x40);
    if (!v103 || *(_BYTE *)(v103 + 5) != 1 && *(_DWORD *)(v103 + 80) < 2u)
      goto LABEL_144;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)), v88, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
    if (!v90)
      goto LABEL_144;
  }
  if (!*(_DWORD *)(v90 + 24))
    goto LABEL_144;
  v91 = *(_QWORD *)(v90 + 16);
  v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
  v93 = *(unsigned int *)(v90 + 8);
  v94 = *(_DWORD *)(v23 + 16);
  if ((v91 & 1) != 0)
  {
    if ((v94 & 0x20) != 0)
      v94 = *(_DWORD *)(v23 + 32);
    v95 = *(_DWORD *)(v90 + 12);
    v96 = (v94 >> 8) & *(_QWORD *)&v95;
    v97 = *(unsigned __int8 *)(v92 + v96);
    if (*(_BYTE *)(v92 + v96))
    {
      v98 = v92 + v93;
      v99 = 1;
      while (1)
      {
        v100 = *(_QWORD *)(v98 + 8 * (v97 - 1));
        if (v23 == (v100 & 0xFFFFFFFFFFFFLL))
          break;
        v96 = ((_DWORD)v96 + v99) & v95;
        v97 = *(unsigned __int8 *)(v92 + v96);
        ++v99;
        if (!*(_BYTE *)(v92 + v96))
          goto LABEL_144;
      }
      v20 = (v100 >> 16) & 0xFF00000000 | HIBYTE(v100);
      goto LABEL_157;
    }
LABEL_144:
    if ((*(_BYTE *)(v26 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v26, v88, v23, (uint64_t)&v211) & 1) != 0)
    {
      goto LABEL_69;
    }
    goto LABEL_145;
  }
  if ((v94 & 0x20) != 0)
    v94 = *(_DWORD *)(v23 + 32);
  v104 = *(_DWORD *)(v90 + 12);
  v105 = v104 & (v94 >> 8);
  v106 = *(_DWORD *)(v92 + 4 * v105);
  if (!v106)
    goto LABEL_144;
  v107 = v92 + 4 * v93;
  v108 = 1;
  while (1)
  {
    v109 = (v106 - 1);
    if (v23 == *(_QWORD *)(v107 + 16 * v109))
      break;
    v105 = (v105 + v108) & v104;
    v106 = *(_DWORD *)(v92 + 4 * v105);
    ++v108;
    if (!v106)
      goto LABEL_144;
  }
  v20 = *(unsigned int *)(v107 + 16 * v109 + 8) | ((unint64_t)*(unsigned __int8 *)(v107 + 16 * v109 + 12) << 32);
LABEL_157:
  if ((_DWORD)v20 == -1)
    goto LABEL_144;
  v19 = (JSC::JSString *)HIDWORD(v20);
  if ((int)v20 <= 63)
  {
    v111 = v26 + 16;
    v112 = v20 << 32;
  }
  else
  {
    v111 = *(_QWORD *)(v26 + 8) - 8;
    v112 = 0x3F00000000 - (v20 << 32);
  }
  v18 = *(_QWORD *)(v111 + (v112 >> 29));
  if ((v18 & 0xFFFE000000000002) != 0)
  {
LABEL_175:
    v211 = (JSC::VM *)v18;
    v215 = (_DWORD *)v26;
    goto LABEL_68;
  }
  v113 = *(unsigned __int8 *)(v18 + 5);
  if (v113 == 5)
  {
    v68 = (unsigned int *)v26;
    v69 = (uint64_t)v88;
    goto LABEL_95;
  }
  if (v113 != 6)
    goto LABEL_175;
  v78 = *(_DWORD *)(v89 + 16) & 3;
  v118 = *(_QWORD *)(v18 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v211 = *(JSC::VM **)(v18 + 8);
    v212 = v118;
    LODWORD(v213) = HIDWORD(v20);
    v215 = (_DWORD *)v26;
    goto LABEL_189;
  }
  v81 = *(int8x16_t ***)(v18 + 24);
  v80 = *(_QWORD *)(v18 + 32);
  v211 = *(JSC::VM **)(v18 + 8);
  v212 = v118;
  LODWORD(v213) = HIDWORD(v20);
  v215 = (_DWORD *)v26;
LABEL_116:
  BYTE1(v216[1]) = 3;
  if (v78 != 2)
    LOBYTE(v216[1]) = 1;
  BYTE3(v216[1]) = 1;
  v219 = v81;
  v220 = v80;
LABEL_69:
  if (BYTE1(v216[1]) == 1)
  {
    v60 = (uint64_t)v211;
    v61 = v209;
  }
  else
  {
    v61 = v209;
    if (BYTE1(v216[1]) == 2)
    {
      v67 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v211, a1, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
    }
    else
    {
      v70 = *(WTF::StringImpl **)(*v208 + 2776);
      v71 = (unint64_t)v215;
      v72 = *(_QWORD *)(16 * (*v215 & 0xFFFFFFFE) + 0x28);
      if ((v213 & 0x20) != 0)
        v71 = (unint64_t)v214;
      if (BYTE3(v216[1]) != 1)
        goto LABEL_113;
      if ((v71 & 0xFFFE000000000002) != 0)
        goto LABEL_306;
      v73 = *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C);
      v74 = *(_DWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C) != 0;
      v75 = 16 * v73;
      if ((_DWORD)v73)
        v76 = v219 == (int8x16_t **)v75;
      else
        v76 = 1;
      if (!v76)
      {
        do
        {
          v75 = *(_QWORD *)(v75 + 16);
          v74 = v75 != 0;
        }
        while ((int8x16_t **)v75 != v219 && v75 != 0);
      }
      if (!v74)
      {
LABEL_306:
        varE0[0] = *((WTF::StringImpl **)a1 + 7);
        v67 = JSC::throwDOMAttributeGetterTypeError(v72, varE0, v219, v70);
      }
      else
      {
LABEL_113:
        v67 = ((uint64_t (*)(unint64_t))v211)(v72);
      }
    }
    v60 = v67;
  }
  if (*((_DWORD *)v61 + 20))
  {
    v117 = *((_DWORD *)v61 + 20);
    if ((v117 & 0x27) != 0 && (v117 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v61 + 64), 7u, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
    if (*((_QWORD *)v61 + 2))
    {
LABEL_187:
      v13 = 0;
      goto LABEL_83;
    }
  }
  if ((v60 & 0xFFFE000000000002) != 0 || (*(_BYTE *)(v60 + 5) == 2 ? (v62 = v60 == 0) : (v62 = 1), v62))
  {
LABEL_78:
    v13 = v223;
    if (!v223)
    {
      if (v222)
        v120 = v222 - 1;
      else
        v120 = 0;
      WTF::AtomStringImpl::addLiteral(v221, v120, v18, (uint64_t)v19, v20, v21, v22, &v224);
      v121 = v224;
      v224 = 0;
      varE0[0] = v121;
      v60 = JSC::jsString((uint64_t)v209, (JSC::VM *)varE0, v122, v123, v124, v125, v126, v127);
      v129 = varE0[0];
      varE0[0] = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 2)
        {
          WTF::StringImpl::~StringImpl(v129, v128, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
        }
        else
        {
          *(_DWORD *)v129 -= 2;
        }
      }
      v130 = v224;
      v224 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
        {
          WTF::StringImpl::~StringImpl(v130, v128, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        }
        else
        {
          *(_DWORD *)v130 -= 2;
        }
      }
      goto LABEL_215;
    }
    goto LABEL_79;
  }
LABEL_215:
  v131 = v208[15];
  v13 = (int *)v208[126];
  v132 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v224 = v132;
  v133 = *(_QWORD *)(v131 + 8);
  if ((v133 & 1) != 0)
    v134 = (int *)(v131 + 16);
  else
    v134 = (int *)(v133 + 4);
  v135 = *v134;
  if (!v135)
  {
    varE0[0] = v132;
    v156 = *(_QWORD *)(v60 + 8);
    if ((v156 & 1) != 0)
      v157 = (int *)(v60 + 16);
    else
      v157 = (int *)(v156 + 4);
    v158 = *v157;
    if (!v158)
      goto LABEL_249;
    v159 = *((_QWORD *)v13 + 1);
    if ((v159 & 1) != 0)
      v160 = v13 + 4;
    else
      v160 = (int *)(v159 + 4);
    v161 = *v160;
    if (!v161)
    {
      v13 = (int *)v60;
      goto LABEL_249;
    }
    v162 = v161 | v158;
    v163 = __OFADD__(v158, v161);
    if ((v162 & 0x80000000) == 0 && !v163)
    {
      v131 = v60;
      v164 = (JSC::JSString *)v13;
      goto LABEL_277;
    }
LABEL_404:
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)varE0);
    v13 = 0;
    goto LABEL_249;
  }
  v136 = *(_QWORD *)(v60 + 8);
  if ((v136 & 1) != 0)
    v137 = (int *)(v60 + 16);
  else
    v137 = (int *)(v136 + 4);
  v138 = *v137;
  if (!v138)
  {
    varE0[0] = v132;
    v146 = *((_QWORD *)v13 + 1);
    if ((v146 & 1) != 0)
      v147 = v13 + 4;
    else
      v147 = (int *)(v146 + 4);
    v148 = *v147;
    if (v148)
    {
      v149 = v148 | v135;
      v150 = __OFADD__(v135, v148);
      if (v149 < 0 || v150)
      {
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)varE0);
        v131 = 0;
      }
      else
      {
        v131 = JSC::JSRopeString::create(v132, v131, (JSC::JSString *)v13, (JSC::JSString *)v18, (uint64_t)v19, v20, v21, v22);
      }
    }
    v13 = (int *)v131;
    goto LABEL_249;
  }
  v139 = *((_QWORD *)v13 + 1);
  if ((v139 & 1) != 0)
    v140 = v13 + 4;
  else
    v140 = (int *)(v139 + 4);
  v141 = *v140;
  v142 = v209;
  if (v141)
  {
    if ((v141 | v138) < 0
      || ((v143 = __OFADD__(v138, v141), v144 = v138 + v141, !v143) ? (v145 = 0) : (v145 = 1),
          v135 < 0 || (v145 & 1) != 0 || __OFADD__(v135, v144)))
    {
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v224);
      v13 = 0;
    }
    else
    {
      v13 = (int *)JSC::JSRopeString::create(v132, v131, (JSC::JSString *)v60, (uint64_t)v13, v19, v20, v21, v22);
    }
    goto LABEL_235;
  }
  varE0[0] = v132;
  v173 = v138 | v135;
  v174 = __OFADD__(v135, v138);
  if (v173 < 0 || v174)
    goto LABEL_404;
  v164 = (JSC::JSString *)v60;
LABEL_277:
  v13 = (int *)JSC::JSRopeString::create(v132, v131, v164, (JSC::JSString *)v18, (uint64_t)v19, v20, v21, v22);
LABEL_249:
  v142 = v209;
LABEL_235:
  if (*((_DWORD *)v142 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v142, v131, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
  {
    goto LABEL_187;
  }
LABEL_79:
  v63 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
  v64 = *((_QWORD *)v63 + 8);
  if (!v64 || *(_BYTE *)(v64 + 5) == 1)
  {
    JSC::Structure::allocateRareData(v63, v209, v17, v18, (uint64_t)v19, v20, v21, v22);
    v64 = *((_QWORD *)v63 + 8);
  }
  v65 = *(_QWORD *)(v64 + 64);
  if (!v65 || *(_QWORD *)(v65 + 16) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v64, a1, v209, (unint64_t)v63, (uint64_t)v13, 0, (uint64_t)&v211, v22);
LABEL_83:
  if (v218)
  {
    v66 = *(_DWORD *)(v217 + 4);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x198465F0CLL);
    }
    *(_DWORD *)(v217 + 4) = v66 - 1;
  }
  return v13;
}

int *operationObjectToStringObjectSlow(JSC::JSGlobalObject *a1, int64_t a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;
  uint64_t v16;
  JSC::Structure *v17;
  uint64_t v18;
  JSC::JSString *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  JSC::VM *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  JSC::VM *v61;
  BOOL v62;
  JSC::Structure *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t **v81;
  unint64_t v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  JSC::VM *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned __int16 *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::AtomStringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  int *v131;
  int v132;
  uint64_t v133;
  int *v134;
  int v135;
  uint64_t v136;
  int *v137;
  int v138;
  JSC::VM *v139;
  BOOL v140;
  int v141;
  char v142;
  uint64_t v143;
  int *v144;
  int v145;
  int v146;
  _BOOL4 v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  int v152;
  uint64_t v153;
  int *v154;
  int v155;
  uint64_t v156;
  int *v157;
  int v158;
  int v159;
  _BOOL4 v160;
  JSC::JSString *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _BOOL4 v171;
  double v172;
  const unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned int v176;
  JSC::VM *v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned int v193;
  JSC::VM *v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  char v202;
  _QWORD *v203;
  JSC::VM *v204;
  int64_t v205;
  JSC::VM *v206;
  uint64_t v207;
  unint64_t v208;
  _DWORD *v209;
  _DWORD *v210;
  _QWORD v211[2];
  uint64_t v212;
  char v213;
  int8x16_t **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *varE0[29];

  v8 = a2;
  varE0[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v10 + 40) = varE0[28];
  if ((a2 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a2 + 5) - 51 <= 5)
    return *(int **)(v10 + 42088);
  v205 = a2;
  if (a2 == 10)
    return *(int **)(v10 + 42088);
  if (a2 == 2)
    return *(int **)(v10 + 42080);
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    v82 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v205, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 5) > 0x16u)
      goto LABEL_7;
    v82 = JSC::JSCell::toObjectSlow((JSC::JSCell *)a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v8 = v82;
LABEL_7:
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x40);
  if (v11)
  {
    if (*(_BYTE *)(v11 + 5) != 1)
    {
      v12 = *(_QWORD *)(v11 + 64);
      if (v12)
      {
        v13 = *(int **)(v12 + 16);
        if ((unint64_t)v13 >= 2)
          return v13;
      }
    }
  }
  v15 = *((_QWORD *)a1 + 7);
  JSC::inferBuiltinTag(a1, v8, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v216);
  if (*(_DWORD *)(v15 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
      return 0;
  }
  v208 = 0xFFFFFFFF00000000;
  LOBYTE(v212) = 0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v210 = 0;
  memset(v211, 0, 13);
  v209 = (_DWORD *)v8;
  v203 = (_QWORD *)(v15 + 41952);
  v204 = (JSC::VM *)v15;
  v23 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 2776);
  v24 = v8 + 6;
  v25 = v23 >> 4;
  v26 = v8;
  if ((*(_BYTE *)(v8 + 6) & 8) == 0)
  {
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v28 = v8;
    do
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
        goto LABEL_27;
      v31 = *(_QWORD *)(16 * v29 + 0x58);
      if (!v31)
      {
        v42 = *(_QWORD *)(16 * v29 + 0x40);
        if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
          goto LABEL_27;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v30, v27, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
        if (!v31)
          goto LABEL_27;
      }
      if (!*(_DWORD *)(v31 + 24))
        goto LABEL_27;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      v34 = *(unsigned int *)(v31 + 8);
      v35 = *(_DWORD *)(v23 + 16);
      if ((v32 & 1) != 0)
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v36 = *(_DWORD *)(v31 + 12);
        v37 = (v35 >> 8) & *(_QWORD *)&v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_27;
        v39 = v33 + v34;
        v40 = 1;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
          if (v23 == (v41 & 0xFFFFFFFFFFFFLL))
            break;
          v37 = ((_DWORD)v37 + v40) & v36;
          v38 = *(unsigned __int8 *)(v33 + v37);
          ++v40;
          if (!*(_BYTE *)(v33 + v37))
            goto LABEL_27;
        }
        v20 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      }
      else
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v43 = *(_DWORD *)(v31 + 12);
        v44 = v43 & (v35 >> 8);
        v45 = *(_DWORD *)(v33 + 4 * v44);
        if (!v45)
          goto LABEL_27;
        v46 = v33 + 4 * v34;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (v23 == *(_QWORD *)(v46 + 16 * v48))
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v33 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_27;
        }
        v20 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
      }
      if ((_DWORD)v20 != -1)
      {
        v19 = (JSC::JSString *)HIDWORD(v20);
        if ((int)v20 <= 63)
        {
          v57 = v28 + 16;
          v58 = v20 << 32;
        }
        else
        {
          v57 = *(_QWORD *)(v28 + 8) - 8;
          v58 = 0x3F00000000 - (v20 << 32);
        }
        v18 = *(_QWORD *)(v57 + (v58 >> 29));
        if ((v18 & 0xFFFE000000000002) == 0)
        {
          v59 = *(unsigned __int8 *)(v18 + 5);
          if (v59 != 5)
          {
            if (v59 != 6)
              goto LABEL_67;
            v78 = *(_DWORD *)(v30 + 16) & 3;
            v79 = *(_QWORD *)(v18 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v81 = *(int8x16_t ***)(v18 + 24);
              v80 = *(_QWORD *)(v18 + 32);
              v206 = *(JSC::VM **)(v18 + 8);
              v207 = v79;
              LODWORD(v208) = HIDWORD(v20);
              v210 = (_DWORD *)v28;
              goto LABEL_116;
            }
            v206 = *(JSC::VM **)(v18 + 8);
            v207 = v79;
            LODWORD(v208) = HIDWORD(v20);
            v210 = (_DWORD *)v28;
LABEL_186:
            BYTE1(v211[1]) = 3;
            if (v78 != 2)
              LOBYTE(v211[1]) = 1;
            goto LABEL_69;
          }
          v68 = (unsigned int *)v28;
          v69 = (uint64_t)v27;
LABEL_95:
          JSC::JSObject::fillGetterPropertySlot(v68, v69, (uint64_t)&v206, v18, (int)v19, v20);
          goto LABEL_69;
        }
LABEL_67:
        v206 = (JSC::VM *)v18;
        v210 = (_DWORD *)v28;
LABEL_68:
        v208 = __PAIR64__(v20, v19);
        LOWORD(v211[1]) = 257;
        goto LABEL_69;
      }
LABEL_27:
      if ((*(_BYTE *)v24 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, v27, v23, (uint64_t)&v206) & 1) != 0)
      {
        goto LABEL_69;
      }
      v26 = *(_QWORD *)(v30 + 48);
      if (!v26)
        v26 = *(_QWORD *)(v28 + 16);
      if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
      {
        if (!v23)
          goto LABEL_78;
        v49 = *(_DWORD *)(v23 + 16);
        if ((v49 & 0x20) != 0)
          goto LABEL_78;
        v50 = *(_BYTE **)(v23 + 8);
        v51 = *(unsigned int *)(v23 + 4);
        if ((v49 & 4) != 0)
        {
          if (!(_DWORD)v51)
            goto LABEL_78;
          v52 = *v50 - 48;
          if (v52 > 9 || v51 >= 2 && *v50 == 48)
            goto LABEL_78;
          v174 = v50 + 1;
          v175 = v51 - 1;
          while (v175)
          {
            if (v52 <= 0x19999999)
            {
              v176 = *v174 - 48;
              if (v176 <= 9)
              {
                v56 = __CFADD__(v176, 10 * v52);
                v52 = v176 + 10 * (_DWORD)v52;
                ++v174;
                --v175;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_78;
          }
        }
        else
        {
          if (!(_DWORD)v51)
            goto LABEL_78;
          v52 = *(unsigned __int16 *)v50 - 48;
          if (v52 > 9 || *(_WORD *)v50 == 48 && v51 > 1)
            goto LABEL_78;
          v53 = (unsigned __int16 *)(v50 + 2);
          v54 = v51 - 1;
          while (v54)
          {
            if (v52 <= 0x19999999)
            {
              v55 = *v53 - 48;
              if (v55 <= 9)
              {
                v56 = __CFADD__(v55, 10 * v52);
                v52 = v55 + 10 * (_DWORD)v52;
                ++v53;
                --v54;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_78;
          }
        }
        if ((_DWORD)v52 == -1)
          goto LABEL_78;
        v177 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v178 = v8;
        while (1)
        {
          v179 = 16 * (*(_DWORD *)v178 & 0xFFFFFFFE);
          v180 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, JSC::VM **))(16 * *(unsigned int *)(v179 + 0x4C) + 0x70))(v178, a1, v52, &v206);
          if (*((_DWORD *)v177 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v177, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
          {
            goto LABEL_78;
          }
          if ((v180 & 1) != 0)
            goto LABEL_69;
          if (BYTE2(v211[1]) == 3)
          {
            if (BYTE4(v211[1]))
              goto LABEL_78;
            v181 = *(unsigned __int8 *)(v178 + 5);
            if (v181 == 61)
              goto LABEL_324;
          }
          else
          {
            v181 = *(unsigned __int8 *)(v178 + 5);
            if (v181 == 61)
            {
              if (BYTE2(v211[1]) == 1)
                goto LABEL_78;
              goto LABEL_324;
            }
          }
          if ((v181 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v178, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v52)
          {
            goto LABEL_78;
          }
LABEL_324:
          if ((*(_WORD *)(v179 + 12) & 0x800) == 0 || BYTE2(v211[1]) == 3)
          {
            v182 = *(_QWORD *)(16 * (*(_DWORD *)v178 & 0xFFFFFFFE) + 0x30);
            if (!v182)
              v182 = *(_QWORD *)(v178 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v178 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v182 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v178 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v178, a1);
            }
            else
            {
              v182 = *(_QWORD *)(16 * (*(_DWORD *)v178 & 0xFFFFFFFE) + 0x30);
              if (!v182)
                v182 = *(_QWORD *)(v178 + 16);
            }
            if (*((_DWORD *)v177 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v177, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
            {
              goto LABEL_78;
            }
          }
          if ((v182 & 0xFFFE000000000002) == 0)
          {
            v178 = v182;
            if (*(unsigned __int8 *)(v182 + 5) > 0x16u)
              continue;
          }
          goto LABEL_78;
        }
      }
      v24 = v26 + 6;
      v28 = v26;
    }
    while ((*(_BYTE *)(v26 + 6) & 8) == 0);
  }
  if (v23)
  {
    v83 = *(_DWORD *)(v23 + 16);
    if ((v83 & 0x20) == 0)
    {
      v84 = *(_BYTE **)(v23 + 8);
      v85 = *(unsigned int *)(v23 + 4);
      if ((v83 & 4) != 0)
      {
        if ((_DWORD)v85)
        {
          v86 = *v84 - 48;
          if (v86 <= 9 && (v85 < 2 || *v84 != 48))
          {
            v191 = v84 + 1;
            v192 = v85 - 1;
            while (v192)
            {
              if (v86 <= 0x19999999)
              {
                v193 = *v191 - 48;
                if (v193 <= 9)
                {
                  v56 = __CFADD__(v193, 10 * v86);
                  v86 = v193 + 10 * (_DWORD)v86;
                  ++v191;
                  --v192;
                  if (!v56)
                    continue;
                }
              }
              goto LABEL_130;
            }
LABEL_363:
            if ((_DWORD)v86 != -1)
            {
              v194 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v195 = v8;
              while (1)
              {
                v196 = 16 * (*(_DWORD *)v195 & 0xFFFFFFFE);
                v197 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, JSC::VM **))(16 * *(unsigned int *)(v196 + 0x4C) + 0x70))(v195, a1, v86, &v206);
                v198 = v197;
                if (*((_DWORD *)v194 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v194, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
                  if (((hasExceptionsAfterHandlingTraps | v198) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_69;
                    goto LABEL_78;
                  }
                }
                else if ((v197 & 1) != 0)
                {
                  goto LABEL_69;
                }
                if (BYTE2(v211[1]) == 3)
                {
                  if (BYTE4(v211[1]))
                    goto LABEL_78;
                  v199 = *(unsigned __int8 *)(v195 + 5);
                  if (v199 == 61)
                    goto LABEL_370;
                }
                else
                {
                  v199 = *(unsigned __int8 *)(v195 + 5);
                  if (v199 == 61)
                  {
                    if (BYTE2(v211[1]) == 1)
                      goto LABEL_78;
                    goto LABEL_370;
                  }
                }
                if ((v199 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v195, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v86)
                {
                  goto LABEL_78;
                }
LABEL_370:
                if ((*(_WORD *)(v196 + 12) & 0x800) == 0 || BYTE2(v211[1]) == 3)
                {
                  v200 = *(_QWORD *)(16 * (*(_DWORD *)v195 & 0xFFFFFFFE) + 0x30);
                  if (!v200)
                    v200 = *(_QWORD *)(v195 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v195 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v200 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v195 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v195, a1);
                  }
                  else
                  {
                    v200 = *(_QWORD *)(16 * (*(_DWORD *)v195 & 0xFFFFFFFE) + 0x30);
                    if (!v200)
                      v200 = *(_QWORD *)(v195 + 16);
                  }
                  if (*((_DWORD *)v194 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v194, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
                  {
                    goto LABEL_78;
                  }
                }
                if ((v200 & 0xFFFE000000000002) == 0)
                {
                  v195 = v200;
                  if (*(unsigned __int8 *)(v200 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_78;
              }
            }
          }
        }
      }
      else if ((_DWORD)v85)
      {
        v86 = *(unsigned __int16 *)v84 - 48;
        if (v86 <= 9 && (*(_WORD *)v84 != 48 || v85 <= 1))
        {
          v112 = (unsigned __int16 *)(v84 + 2);
          v113 = v85 - 1;
          while (v113)
          {
            if (v86 <= 0x19999999)
            {
              v114 = *v112 - 48;
              if (v114 <= 9)
              {
                v56 = __CFADD__(v114, 10 * v86);
                v86 = v114 + 10 * (_DWORD)v86;
                ++v112;
                --v113;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_130;
          }
          goto LABEL_363;
        }
      }
    }
  }
LABEL_130:
  v87 = (JSC::VM *)*((_QWORD *)a1 + 7);
  while (1)
  {
    v88 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 6) & 8) == 0)
      break;
    v202 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C) + 0x68))(v26, a1, v23, &v206);
    if (*((_DWORD *)v87 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v87, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_78;
    }
    if ((v202 & 1) != 0)
      goto LABEL_69;
    if (BYTE2(v211[1]) == 3)
    {
      if (BYTE4(v211[1]))
        goto LABEL_78;
      v148 = *(unsigned __int8 *)(v26 + 5);
      if (v148 != 61)
      {
LABEL_252:
        if (!v23)
          goto LABEL_144;
        if ((v148 - 50) < 0xFFFFFFF5)
          goto LABEL_144;
        v149 = *(_DWORD *)(v23 + 16);
        if ((v149 & 0x20) != 0)
          goto LABEL_144;
        v150 = *(unsigned int *)(v23 + 4);
        if (!(_DWORD)v150)
          goto LABEL_144;
        v151 = *(unsigned __int8 **)(v23 + 8);
        if ((v149 & 4) == 0)
        {
          v152 = *(unsigned __int16 *)v151;
          if ((_DWORD)v150 == 1)
            goto LABEL_258;
          if (v152 == 45)
          {
            v152 = *((unsigned __int16 *)v151 + 1);
            goto LABEL_285;
          }
          if ((v152 - 48) >= 0xA && ((_DWORD)v150 != 8 || v152 != 73))
          {
LABEL_300:
            if ((_DWORD)v150 != 3 || v152 != 78)
              goto LABEL_144;
          }
LABEL_289:
          v24 = v24 & 0xFFFFFF0000000000 | v150 | ((unint64_t)((v149 >> 2) & 1) << 32);
          JSC::jsToNumber(v151, v24);
          WTF::numberToString(varE0, v172);
          if (WTF::equal(v23, (unint64_t)varE0, v173))
            goto LABEL_78;
          goto LABEL_144;
        }
        v152 = *v151;
        if ((_DWORD)v150 == 1)
        {
LABEL_258:
          if ((v152 - 48) < 0xA)
            goto LABEL_78;
          goto LABEL_144;
        }
        if (v152 == 45)
        {
          v152 = v151[1];
LABEL_285:
          if ((v152 - 48) < 0xA)
          {
            if ((_DWORD)v150 == 2)
              goto LABEL_78;
            goto LABEL_289;
          }
          if ((_DWORD)v150 != 9)
            goto LABEL_144;
        }
        else
        {
          if ((v152 - 48) < 0xA)
            goto LABEL_289;
          if ((_DWORD)v150 != 8)
            goto LABEL_300;
        }
        if (v152 != 73)
          goto LABEL_144;
        goto LABEL_289;
      }
    }
    else
    {
      v148 = *(unsigned __int8 *)(v26 + 5);
      if (v148 != 61)
        goto LABEL_252;
      if (BYTE2(v211[1]) == 1)
        goto LABEL_78;
    }
LABEL_144:
    if ((*(_WORD *)(v88 + 12) & 0x800) == 0)
    {
      v100 = *(_DWORD *)v26;
LABEL_146:
      v101 = *(_QWORD *)(16 * (v100 & 0xFFFFFFFE) + 0x30);
      if (!v101)
        v101 = *(_QWORD *)(v26 + 16);
      goto LABEL_148;
    }
    v100 = *(_DWORD *)v26;
    if (BYTE2(v211[1]) == 3)
      goto LABEL_146;
    v116 = 16 * (v100 & 0xFFFFFFFE);
    if ((*(_WORD *)(v116 + 12) & 0x800) != 0)
    {
      v101 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v116 + 76)
                                                                                + 0xB0))(v26, a1);
    }
    else
    {
      v101 = *(_QWORD *)(v116 + 48);
      if (!v101)
        v101 = *(_QWORD *)(v26 + 16);
    }
    if (*((_DWORD *)v87 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v87, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_78;
    }
LABEL_148:
    if ((v101 & 0xFFFE000000000002) == 0)
    {
      v26 = v101;
      if (*(unsigned __int8 *)(v101 + 5) > 0x16u)
        continue;
    }
    goto LABEL_78;
  }
  if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_143;
  v89 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x58);
  if (!v89)
  {
    v102 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x40);
    if (!v102 || *(_BYTE *)(v102 + 5) != 1 && *(_DWORD *)(v102 + 80) < 2u)
      goto LABEL_143;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)), v87, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
    if (!v89)
      goto LABEL_143;
  }
  if (!*(_DWORD *)(v89 + 24))
    goto LABEL_143;
  v90 = *(_QWORD *)(v89 + 16);
  v91 = v90 & 0xFFFFFFFFFFFFFFFELL;
  v92 = *(unsigned int *)(v89 + 8);
  v93 = *(_DWORD *)(v23 + 16);
  if ((v90 & 1) != 0)
  {
    if ((v93 & 0x20) != 0)
      v93 = *(_DWORD *)(v23 + 32);
    v94 = *(_DWORD *)(v89 + 12);
    v95 = (v93 >> 8) & *(_QWORD *)&v94;
    v96 = *(unsigned __int8 *)(v91 + v95);
    if (*(_BYTE *)(v91 + v95))
    {
      v97 = v91 + v92;
      v98 = 1;
      while (1)
      {
        v99 = *(_QWORD *)(v97 + 8 * (v96 - 1));
        if (v23 == (v99 & 0xFFFFFFFFFFFFLL))
          break;
        v95 = ((_DWORD)v95 + v98) & v94;
        v96 = *(unsigned __int8 *)(v91 + v95);
        ++v98;
        if (!*(_BYTE *)(v91 + v95))
          goto LABEL_143;
      }
      v20 = (v99 >> 16) & 0xFF00000000 | HIBYTE(v99);
      goto LABEL_156;
    }
LABEL_143:
    if ((*(_BYTE *)(v26 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v26, v87, v23, (uint64_t)&v206) & 1) != 0)
    {
      goto LABEL_69;
    }
    goto LABEL_144;
  }
  if ((v93 & 0x20) != 0)
    v93 = *(_DWORD *)(v23 + 32);
  v103 = *(_DWORD *)(v89 + 12);
  v104 = v103 & (v93 >> 8);
  v105 = *(_DWORD *)(v91 + 4 * v104);
  if (!v105)
    goto LABEL_143;
  v106 = v91 + 4 * v92;
  v107 = 1;
  while (1)
  {
    v108 = (v105 - 1);
    if (v23 == *(_QWORD *)(v106 + 16 * v108))
      break;
    v104 = (v104 + v107) & v103;
    v105 = *(_DWORD *)(v91 + 4 * v104);
    ++v107;
    if (!v105)
      goto LABEL_143;
  }
  v20 = *(unsigned int *)(v106 + 16 * v108 + 8) | ((unint64_t)*(unsigned __int8 *)(v106 + 16 * v108 + 12) << 32);
LABEL_156:
  if ((_DWORD)v20 == -1)
    goto LABEL_143;
  v19 = (JSC::JSString *)HIDWORD(v20);
  if ((int)v20 <= 63)
  {
    v109 = v26 + 16;
    v110 = v20 << 32;
  }
  else
  {
    v109 = *(_QWORD *)(v26 + 8) - 8;
    v110 = 0x3F00000000 - (v20 << 32);
  }
  v18 = *(_QWORD *)(v109 + (v110 >> 29));
  if ((v18 & 0xFFFE000000000002) != 0)
  {
LABEL_173:
    v206 = (JSC::VM *)v18;
    v210 = (_DWORD *)v26;
    goto LABEL_68;
  }
  v111 = *(unsigned __int8 *)(v18 + 5);
  if (v111 == 5)
  {
    v68 = (unsigned int *)v26;
    v69 = (uint64_t)v87;
    goto LABEL_95;
  }
  if (v111 != 6)
    goto LABEL_173;
  v78 = *(_DWORD *)(v88 + 16) & 3;
  v115 = *(_QWORD *)(v18 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v206 = *(JSC::VM **)(v18 + 8);
    v207 = v115;
    LODWORD(v208) = HIDWORD(v20);
    v210 = (_DWORD *)v26;
    goto LABEL_186;
  }
  v81 = *(int8x16_t ***)(v18 + 24);
  v80 = *(_QWORD *)(v18 + 32);
  v206 = *(JSC::VM **)(v18 + 8);
  v207 = v115;
  LODWORD(v208) = HIDWORD(v20);
  v210 = (_DWORD *)v26;
LABEL_116:
  BYTE1(v211[1]) = 3;
  if (v78 != 2)
    LOBYTE(v211[1]) = 1;
  BYTE3(v211[1]) = 1;
  v214 = v81;
  v215 = v80;
LABEL_69:
  if (BYTE1(v211[1]) == 1)
  {
    v60 = (uint64_t)v206;
    v61 = v204;
  }
  else
  {
    v61 = v204;
    if (BYTE1(v211[1]) == 2)
    {
      v67 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v206, a1, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
    }
    else
    {
      v70 = *(WTF::StringImpl **)(*v203 + 2776);
      v71 = (unint64_t)v210;
      v72 = *(_QWORD *)(16 * (*v210 & 0xFFFFFFFE) + 0x28);
      if ((v208 & 0x20) != 0)
        v71 = (unint64_t)v209;
      if (BYTE3(v211[1]) != 1)
        goto LABEL_113;
      if ((v71 & 0xFFFE000000000002) != 0)
        goto LABEL_303;
      v73 = *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C);
      v74 = *(_DWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C) != 0;
      v75 = 16 * v73;
      if ((_DWORD)v73)
        v76 = v214 == (int8x16_t **)v75;
      else
        v76 = 1;
      if (!v76)
      {
        do
        {
          v75 = *(_QWORD *)(v75 + 16);
          v74 = v75 != 0;
        }
        while ((int8x16_t **)v75 != v214 && v75 != 0);
      }
      if (!v74)
      {
LABEL_303:
        varE0[0] = *((WTF::StringImpl **)a1 + 7);
        v67 = JSC::throwDOMAttributeGetterTypeError(v72, varE0, v214, v70);
      }
      else
      {
LABEL_113:
        v67 = ((uint64_t (*)(unint64_t))v206)(v72);
      }
    }
    v60 = v67;
  }
  if (*((_DWORD *)v61 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v61, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
  {
LABEL_184:
    v13 = 0;
    goto LABEL_83;
  }
  if ((v60 & 0xFFFE000000000002) != 0 || (*(_BYTE *)(v60 + 5) == 2 ? (v62 = v60 == 0) : (v62 = 1), v62))
  {
LABEL_78:
    v13 = v218;
    if (!v218)
    {
      if (v217)
        v117 = v217 - 1;
      else
        v117 = 0;
      WTF::AtomStringImpl::addLiteral(v216, v117, v18, (uint64_t)v19, v20, v21, v22, &v219);
      v118 = v219;
      v219 = 0;
      varE0[0] = v118;
      v60 = JSC::jsString((uint64_t)v204, (JSC::VM *)varE0, v119, v120, v121, v122, v123, v124);
      v126 = varE0[0];
      varE0[0] = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
        {
          WTF::StringImpl::~StringImpl(v126, v125, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
        }
        else
        {
          *(_DWORD *)v126 -= 2;
        }
      }
      v127 = v219;
      v219 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
        {
          WTF::StringImpl::~StringImpl(v127, v125, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
        }
        else
        {
          *(_DWORD *)v127 -= 2;
        }
      }
      goto LABEL_212;
    }
    goto LABEL_79;
  }
LABEL_212:
  v128 = v203[15];
  v13 = (int *)v203[126];
  v129 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  v219 = v129;
  v130 = *(_QWORD *)(v128 + 8);
  if ((v130 & 1) != 0)
    v131 = (int *)(v128 + 16);
  else
    v131 = (int *)(v130 + 4);
  v132 = *v131;
  if (!v132)
  {
    varE0[0] = v129;
    v153 = *(_QWORD *)(v60 + 8);
    if ((v153 & 1) != 0)
      v154 = (int *)(v60 + 16);
    else
      v154 = (int *)(v153 + 4);
    v155 = *v154;
    if (!v155)
      goto LABEL_246;
    v156 = *((_QWORD *)v13 + 1);
    if ((v156 & 1) != 0)
      v157 = v13 + 4;
    else
      v157 = (int *)(v156 + 4);
    v158 = *v157;
    if (!v158)
    {
      v13 = (int *)v60;
      goto LABEL_246;
    }
    v159 = v158 | v155;
    v160 = __OFADD__(v155, v158);
    if ((v159 & 0x80000000) == 0 && !v160)
    {
      v128 = v60;
      v161 = (JSC::JSString *)v13;
      goto LABEL_274;
    }
LABEL_395:
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)varE0);
    v13 = 0;
    goto LABEL_246;
  }
  v133 = *(_QWORD *)(v60 + 8);
  if ((v133 & 1) != 0)
    v134 = (int *)(v60 + 16);
  else
    v134 = (int *)(v133 + 4);
  v135 = *v134;
  if (!v135)
  {
    varE0[0] = v129;
    v143 = *((_QWORD *)v13 + 1);
    if ((v143 & 1) != 0)
      v144 = v13 + 4;
    else
      v144 = (int *)(v143 + 4);
    v145 = *v144;
    if (v145)
    {
      v146 = v145 | v132;
      v147 = __OFADD__(v132, v145);
      if (v146 < 0 || v147)
      {
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)varE0);
        v128 = 0;
      }
      else
      {
        v128 = JSC::JSRopeString::create(v129, v128, (JSC::JSString *)v13, (JSC::JSString *)v18, (uint64_t)v19, v20, v21, v22);
      }
    }
    v13 = (int *)v128;
    goto LABEL_246;
  }
  v136 = *((_QWORD *)v13 + 1);
  if ((v136 & 1) != 0)
    v137 = v13 + 4;
  else
    v137 = (int *)(v136 + 4);
  v138 = *v137;
  v139 = v204;
  if (v138)
  {
    if ((v138 | v135) < 0
      || ((v140 = __OFADD__(v135, v138), v141 = v135 + v138, !v140) ? (v142 = 0) : (v142 = 1),
          v132 < 0 || (v142 & 1) != 0 || __OFADD__(v132, v141)))
    {
      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v219);
      v13 = 0;
    }
    else
    {
      v13 = (int *)JSC::JSRopeString::create(v129, v128, (JSC::JSString *)v60, (uint64_t)v13, v19, v20, v21, v22);
    }
    goto LABEL_232;
  }
  varE0[0] = v129;
  v170 = v135 | v132;
  v171 = __OFADD__(v132, v135);
  if (v170 < 0 || v171)
    goto LABEL_395;
  v161 = (JSC::JSString *)v60;
LABEL_274:
  v13 = (int *)JSC::JSRopeString::create(v129, v128, v161, (JSC::JSString *)v18, (uint64_t)v19, v20, v21, v22);
LABEL_246:
  v139 = v204;
LABEL_232:
  if (*((_DWORD *)v139 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v139, v128, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
  {
    goto LABEL_184;
  }
LABEL_79:
  v63 = (JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE));
  v64 = *((_QWORD *)v63 + 8);
  if (!v64 || *(_BYTE *)(v64 + 5) == 1)
  {
    JSC::Structure::allocateRareData(v63, v204, v17, v18, (uint64_t)v19, v20, v21, v22);
    v64 = *((_QWORD *)v63 + 8);
  }
  v65 = *(_QWORD *)(v64 + 64);
  if (!v65 || *(_QWORD *)(v65 + 16) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v64, a1, v204, (unint64_t)v63, (uint64_t)v13, 0, (uint64_t)&v206, v22);
LABEL_83:
  if (v213)
  {
    v66 = *(_DWORD *)(v212 + 4);
    if (!v66)
    {
      __break(0xC471u);
      JUMPOUT(0x1984670F0);
    }
    *(_DWORD *)(v212 + 4) = v66 - 1;
  }
  return v13;
}

unint64_t operationReflectOwnKeys(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v8;
  JSC::VM *var18[4];

  v8 = *(JSC::VM ***)(a1 + 56);
  v8[5] = var18[3];
  var18[0] = (JSC::VM *)v8;
  if ((a2 & 0xFFFE000000000002) == 0 && a2 && *(unsigned __int8 *)(a2 + 5) > 0x16u)
    return JSC::ownPropertyKeys(a1, a2, 3, 0, a5, a6, a7, a8);
  JSC::throwTypeError(a1, var18, (uint64_t)"Reflect.ownKeys requires the first argument be an object", 57);
  return 0;
}

unint64_t operationReflectOwnKeysObject(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) = vars0;
  return JSC::ownPropertyKeys(a1, a2, 3, 0, a5, a6, a7, a8);
}

unint64_t operationCreateThis(JSC::VM **a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  JSC::VM *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  JSC::Structure *v42;
  JSC::VM *v43;
  uint64_t v44;
  JSC::JSGlobalObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  JSC *v54;
  JSC::VM *v55;
  JSC::Structure *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char **v63;
  JSC *v64;
  int v65;
  JSC::VM *var38[8];

  v8 = a2;
  v10 = a1[7];
  *((JSC::VM **)v10 + 5) = var38[7];
  if (*(_BYTE *)(a2 + 5) != 26)
    goto LABEL_50;
  v11 = *(_QWORD *)(a2 + 24);
  if ((v11 & 1) != 0)
  {
    v35 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v35 + 5) == 8)
      goto LABEL_50;
    v12 = *(_QWORD *)(v35 + 88);
  }
  else
  {
    if (*(_BYTE *)(v11 + 5) == 8)
      goto LABEL_50;
    v12 = *(_QWORD *)(v11 + 88);
  }
  if ((*(_DWORD *)(v12 + 16) & 0x80000000) != 0)
  {
    v42 = a3;
    v43 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 56);
    v65 = 0;
    JSC::JSObject::getDirect((_DWORD *)v8, v43, *(_QWORD *)(*((_QWORD *)v43 + 5244) + 2160), (const JSC::PropertyTable *)&v65, a5, a6, a7, a8);
    if (!v44 || (v65 & 0x70) != 0)
      goto LABEL_50;
    v11 = *(_QWORD *)(v8 + 24);
    a3 = v42;
  }
  v13 = (v11 & 1) != 0 ? *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 48) : v11;
  v14 = *(_QWORD *)(v13 + 88);
  if (((1 << *(_BYTE *)(v14 + 50)) & 0x78007) == 0)
  {
    v15 = *(_QWORD **)(v14 + 88);
    if (!v15 || !*v15)
    {
LABEL_50:
      v52 = JSC::JSObject::get((unsigned int *)v8, (uint64_t)a1, *(_QWORD *)(*((_QWORD *)v10 + 5244) + 2160), a4, a5, a6, a7, a8);
      if (*((_DWORD *)v10 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v45, v46, v47, v48, v49, v50, v51))
      {
        return 0;
      }
      if ((v52 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v52 + 5) < 0x17u)
      {
        var38[0] = a1[7];
        while (1)
        {
          while (1)
          {
            v63 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C));
            if (v63 != &JSC::JSBoundFunction::s_info && v63 != &JSC::JSRemoteFunction::s_info)
              break;
            v8 = *(_QWORD *)(v8 + 32);
          }
          if (*(_BYTE *)(v8 + 5) != 61)
          {
            v64 = *(JSC **)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28);
            goto LABEL_59;
          }
          if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v8))
            break;
          v8 = *(_QWORD *)(v8 + 16);
        }
        JSC::throwTypeError((unint64_t)a1, var38, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
        v64 = 0;
LABEL_59:
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v45, v46, v47, v48, v49, v50, v51))
        {
          return 0;
        }
        return JSC::constructEmptyObject(v64, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        v54 = a1[7];
        v55 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a1 + 246), (JSC::JSGlobalObject *)a1, (JSC::JSObject *)v52, 6, 0, 0, v50, v51, v53);
        return JSC::constructEmptyObject(v54, v55, v56, v57, v58, v59, v60, v61);
      }
    }
  }
  v16 = v11 & 1;
  v17 = *((_DWORD *)v10 + 22);
  *((_DWORD *)v10 + 22) = v17 + 1;
  if (!v17)
  {
    v18 = *((_QWORD *)v10 + 2);
    if (v18)
    {
      if (*((_QWORD *)v10 + 3) == v18)
      {
        *((_QWORD *)v10 + 2) = 0;
        v37 = (unsigned int *)((char *)v10 + 80);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 & 0xFFFFFFEF, v37));
        *((_BYTE *)v10 + 86) = 1;
        v11 = *(_QWORD *)(v8 + 24);
        v16 = v11 & 1;
      }
    }
  }
  v19 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
    v20 = v19 == 0;
  else
    v20 = 1;
  if (v20)
  {
    v36 = JSC::JSFunction::allocateAndInitializeRareData((JSC::JSFunction *)v8, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
LABEL_32:
    v19 = (unint64_t)v36;
    goto LABEL_18;
  }
  if (!*(_QWORD *)(v19 + 16))
  {
    v36 = JSC::JSFunction::initializeRareData((JSC::JSFunction *)v8, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
    goto LABEL_32;
  }
LABEL_18:
  if (*((_QWORD *)v10 + 2))
  {
    __break(0xC471u);
    JUMPOUT(0x198467C58);
  }
  v21 = *(JSC::VM **)(v19 + 16);
  v22 = JSC::constructEmptyObject(v10, v21, a3, a4, a5, a6, a7, a8);
  v30 = v22;
  if (!*((_QWORD *)v21 + 6))
  {
    v31 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v22 + 16) = v31;
    if (v31)
      v32 = (v31 & 0xFFFE000000000002) == 0;
    else
      v32 = 0;
    if (v32 && *((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v22 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v10 + 192, v22);
    JSC::JSObject::didBecomePrototype(v31, v10, v29, v23, v24, v25, v26, v27, v28);
  }
  v33 = *((_DWORD *)v10 + 22) - 1;
  *((_DWORD *)v10 + 22) = v33;
  if (!v33 && *((_BYTE *)v10 + 93441))
  {
    v39 = *((_QWORD *)v10 + 3);
    *((_QWORD *)v10 + 2) = v39;
    *((_QWORD *)v10 + 4) = v39;
    if (v39)
    {
      v40 = (unsigned int *)((char *)v10 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 0x10, v40));
    }
    if (*((_BYTE *)v10 + 93443))
      *((_BYTE *)v10 + 93442) = 1;
    *((_BYTE *)v10 + 86) = 0;
  }
  return v30;
}

unint64_t JSC::JSObject::putDirectOffset(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 <= 63)
  {
    *(_QWORD *)(result + 16 + 8 * a3) = a4;
    if ((a4 & 0xFFFE000000000002) != 0)
      return result;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(result + 8) - 8 + 8 * (63 - a3)) = a4;
    if ((a4 & 0xFFFE000000000002) != 0)
      return result;
  }
  if (result && a4 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(result + 7))
    return JSC::Heap::writeBarrierSlowPath(a2 + 192, result);
  return result;
}

unint64_t operationCreatePromise(JSC::InternalFunction *a1, JSC::ProxyObject *this, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::ProxyObject *v9;
  char **v10;
  uint64_t v11;
  int v12;
  JSC::JSObject *v13;
  unint64_t SubclassStructure;
  int v15;
  unint64_t SlowCase;
  int v17;
  int v19;
  unint64_t v20;
  int v21;
  JSC::JSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::ProxyObject *v26;
  JSC::ProxyObject *v27;
  JSC::ProxyObject *v28;
  JSC::InternalFunction *v29;
  JSC::InternalFunction *v30;
  JSC::InternalFunction *v31;
  JSC::VM *var28[6];

  v8 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v8 + 40) = var28[5];
  if (*((JSC::ProxyObject **)a1 + 33) == this)
  {
    v15 = *((_DWORD *)a1 + 291);
    if (v15)
      SubclassStructure = 16 * (v15 & 0xFFFFFFFE);
    else
      SubclassStructure = 0;
  }
  else
  {
    var28[0] = (JSC::VM *)v8;
    v9 = this;
    while (1)
    {
      while (1)
      {
        v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C));
        if (v10 != &JSC::JSBoundFunction::s_info && v10 != &JSC::JSRemoteFunction::s_info)
          break;
        v9 = (JSC::ProxyObject *)*((_QWORD *)v9 + 4);
      }
      if (*((_BYTE *)v9 + 5) != 61)
      {
        v11 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v28 = this;
      v29 = a1;
      v27 = v9;
      if (JSC::ProxyObject::isRevoked(v9))
        break;
      this = v28;
      v9 = (JSC::ProxyObject *)*((_QWORD *)v27 + 2);
      a1 = v29;
    }
    JSC::throwTypeError((unint64_t)v29, var28, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    a1 = v29;
    v11 = 0;
    this = v28;
    if (!*(_DWORD *)(v8 + 80))
      goto LABEL_11;
LABEL_10:
    v21 = *(_DWORD *)(v8 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v31 = a1;
      v26 = this;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      a1 = v31;
      this = v26;
    }
    if (*(_QWORD *)(v8 + 16))
    {
      SubclassStructure = 0;
    }
    else
    {
LABEL_11:
      v12 = *(_DWORD *)(v11 + 1164);
      if (v12)
        v13 = (JSC::JSObject *)(16 * (v12 & 0xFFFFFFFE));
      else
        v13 = 0;
      SubclassStructure = (unint64_t)JSC::InternalFunction::createSubclassStructure(a1, this, v13, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v8 + 80))
  {
    v19 = *(_DWORD *)(v8 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v22 = (JSC::JSObject *)SubclassStructure;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      SubclassStructure = (unint64_t)v22;
    }
    this = *(JSC::ProxyObject **)(v8 + 16);
    if (this)
      return 0;
  }
  SlowCase = *(_QWORD *)(v8 + 38992);
  if (SlowCase >= *(_QWORD *)(v8 + 39000))
  {
    SlowCase = *(_QWORD *)(v8 + 39008);
    if ((SlowCase & 1) != 0)
    {
      v30 = (JSC::InternalFunction *)SubclassStructure;
      JSC::sanitizeStackForVM((JSC *)v8, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v8 + 38968, v8 + 192, 32, 0, 0, v23, v24, v25);
      SubclassStructure = (unint64_t)v30;
      goto LABEL_21;
    }
    v20 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v8 + 39016);
    *(_QWORD *)(v8 + 39000) = SlowCase + HIDWORD(v20);
    *(_QWORD *)(v8 + 39008) = SlowCase + (int)v20;
  }
  *(_QWORD *)(v8 + 38992) = SlowCase + 32;
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  v17 = *(_DWORD *)(SubclassStructure + 8);
  *(_DWORD *)SlowCase = SubclassStructure >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  return SlowCase;
}

unint64_t operationCreateInternalPromise(JSC::InternalFunction *a1, JSC::ProxyObject *this, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::ProxyObject *v9;
  char **v10;
  uint64_t v11;
  int v12;
  JSC::JSObject *v13;
  unint64_t SubclassStructure;
  int v15;
  unint64_t SlowCase;
  int v17;
  int v19;
  unint64_t v20;
  int v21;
  JSC::JSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::ProxyObject *v26;
  JSC::ProxyObject *v27;
  JSC::ProxyObject *v28;
  JSC::InternalFunction *v29;
  JSC::InternalFunction *v30;
  JSC::InternalFunction *v31;
  JSC::VM *var28[6];

  v8 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v8 + 40) = var28[5];
  if (*((JSC::ProxyObject **)a1 + 34) == this)
  {
    v15 = *((_DWORD *)a1 + 296);
    if (v15)
      SubclassStructure = 16 * (v15 & 0xFFFFFFFE);
    else
      SubclassStructure = 0;
  }
  else
  {
    var28[0] = (JSC::VM *)v8;
    v9 = this;
    while (1)
    {
      while (1)
      {
        v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C));
        if (v10 != &JSC::JSBoundFunction::s_info && v10 != &JSC::JSRemoteFunction::s_info)
          break;
        v9 = (JSC::ProxyObject *)*((_QWORD *)v9 + 4);
      }
      if (*((_BYTE *)v9 + 5) != 61)
      {
        v11 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      v28 = this;
      v29 = a1;
      v27 = v9;
      if (JSC::ProxyObject::isRevoked(v9))
        break;
      this = v28;
      v9 = (JSC::ProxyObject *)*((_QWORD *)v27 + 2);
      a1 = v29;
    }
    JSC::throwTypeError((unint64_t)v29, var28, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    a1 = v29;
    v11 = 0;
    this = v28;
    if (!*(_DWORD *)(v8 + 80))
      goto LABEL_11;
LABEL_10:
    v21 = *(_DWORD *)(v8 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v31 = a1;
      v26 = this;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      a1 = v31;
      this = v26;
    }
    if (*(_QWORD *)(v8 + 16))
    {
      SubclassStructure = 0;
    }
    else
    {
LABEL_11:
      v12 = *(_DWORD *)(v11 + 1184);
      if (v12)
        v13 = (JSC::JSObject *)(16 * (v12 & 0xFFFFFFFE));
      else
        v13 = 0;
      SubclassStructure = (unint64_t)JSC::InternalFunction::createSubclassStructure(a1, this, v13, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v8 + 80))
  {
    v19 = *(_DWORD *)(v8 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v22 = (JSC::JSObject *)SubclassStructure;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      SubclassStructure = (unint64_t)v22;
    }
    this = *(JSC::ProxyObject **)(v8 + 16);
    if (this)
      return 0;
  }
  SlowCase = *(_QWORD *)(v8 + 38992);
  if (SlowCase >= *(_QWORD *)(v8 + 39000))
  {
    SlowCase = *(_QWORD *)(v8 + 39008);
    if ((SlowCase & 1) != 0)
    {
      v30 = (JSC::InternalFunction *)SubclassStructure;
      JSC::sanitizeStackForVM((JSC *)v8, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v8 + 38968, v8 + 192, 32, 0, 0, v23, v24, v25);
      SubclassStructure = (unint64_t)v30;
      goto LABEL_21;
    }
    v20 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v8 + 39016);
    *(_QWORD *)(v8 + 39000) = SlowCase + HIDWORD(v20);
    *(_QWORD *)(v8 + 39008) = SlowCase + (int)v20;
  }
  *(_QWORD *)(v8 + 38992) = SlowCase + 32;
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  v17 = *(_DWORD *)(SubclassStructure + 8);
  *(_DWORD *)SlowCase = SubclassStructure >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  return SlowCase;
}

void operationCreateGenerator(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  JSC::JSObject *v10;
  JSC::JSObject *SubclassStructure;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  JSC::JSObject *v18;
  uint64_t vars0;

  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = vars0;
  v9 = *(_DWORD *)(a1 + 992);
  if (v9)
    v10 = (JSC::JSObject *)(16 * (v9 & 0xFFFFFFFE));
  else
    v10 = 0;
  SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, a2, v10, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v8 + 80))
    goto LABEL_5;
  v17 = *(_DWORD *)(v8 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
  {
    v18 = SubclassStructure;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)SubclassStructure, v12, v13, v14, v15, v16);
    SubclassStructure = v18;
  }
  if (!*(_QWORD *)(v8 + 16))
LABEL_5:
    JSC::JSGenerator::create((JSC::JSGenerator *)v8, SubclassStructure, SubclassStructure, v12, v13, v14, v15, v16);
}

void operationCreateAsyncGenerator(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  JSC::JSObject *v10;
  JSC::JSObject *SubclassStructure;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  JSC::JSObject *v18;
  uint64_t vars0;

  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v8 + 40) = vars0;
  v9 = *(_DWORD *)(a1 + 996);
  if (v9)
    v10 = (JSC::JSObject *)(16 * (v9 & 0xFFFFFFFE));
  else
    v10 = 0;
  SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)a1, a2, v10, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v8 + 80))
    goto LABEL_5;
  v17 = *(_DWORD *)(v8 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
  {
    v18 = SubclassStructure;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)SubclassStructure, v12, v13, v14, v15, v16);
    SubclassStructure = v18;
  }
  if (!*(_QWORD *)(v8 + 16))
LABEL_5:
    JSC::JSAsyncGenerator::create((JSC::JSAsyncGenerator *)v8, SubclassStructure, SubclassStructure, v12, v13, v14, v15, v16);
}

JSC::JSCell *operationCallObjectConstructor(JSC *this, JSC::JSCell *a2, JSC::JSObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::JSCell *v9;
  _QWORD var18[4];

  *(_QWORD *)(*((_QWORD *)this + 7) + 40) = var18[3];
  var18[0] = a2;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
    return (JSC::JSCell *)JSC::constructEmptyObject(this, *((JSC::JSGlobalObject **)this + 82), a3, a9, (uint64_t)a4, a5, a6, a7, a8);
  v9 = a2;
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return (JSC::JSCell *)JSC::JSValue::toObjectSlowCase((JSC::JSValue *)var18, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*((unsigned __int8 *)a2 + 5) <= 0x16u)
    return (JSC::JSCell *)JSC::JSCell::toObjectSlow(a2, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v9;
}

unint64_t operationToObject(JSC::JSGlobalObject *a1, JSC::JSCell *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  JSC::VM **v9;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::JSCell *v29;
  JSC::VM *var18[4];

  v8 = a2;
  v9 = (JSC::VM **)*((_QWORD *)a1 + 7);
  v9[5] = var18[3];
  v29 = a2;
  var18[0] = (JSC::VM *)v9;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) != 2 || !a3 || !*((_DWORD *)a3 + 1))
  {
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      return JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v29, a1, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((unsigned __int8 *)a2 + 5) > 0x16u)
      return (unint64_t)v8;
    return JSC::JSCell::toObjectSlow(a2, (JSC::SymbolObject **)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)a3 += 2;
  v28 = a3;
  JSC::throwTypeError((unint64_t)a1, var18, &v28);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  return 0;
}

JSC::JSBigInt *operationValueMod(JSC::JSGlobalObject *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  JSC::VM *v19;
  int v20;
  double v21;
  uint64_t v22;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  double v27;
  JSC::VM *v28;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v28 = (JSC::VM *)v12;
  if ((unint64_t)a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_46;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_53:
    v10 = 0;
    goto LABEL_2;
  }
  if (v10 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_2;
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 3)
      goto LABEL_2;
    goto LABEL_44;
  }
  if (v10 < 0xFFFE000000000000)
  {
LABEL_44:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_45;
  }
  *(double *)a9.i64 = (double)(int)v10;
LABEL_45:
  if (*(_DWORD *)(v12 + 80))
  {
    v26 = a9.i64[0];
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v26;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_53;
  }
LABEL_46:
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v22 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v22)
    && ((_DWORD)v22 || (a9.i64[0] & 0x8000000000000000) == 0))
  {
    v10 = v22 | 0xFFFE000000000000;
  }
  else
  {
    v10 = a9.i64[0] + 0x2000000000000;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v9 >> 49)
    goto LABEL_4;
  v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_66;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_73:
    v9 = 0;
    goto LABEL_4;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_4;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_4;
    goto LABEL_64;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_64:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_65;
  }
  v21 = (double)(int)v9;
LABEL_65:
  if (*((_DWORD *)v19 + 20))
  {
    v27 = v21;
    v25 = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8);
    v21 = v27;
    if (v25)
      goto LABEL_73;
  }
LABEL_66:
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v24 = (int)v21, v21 == (double)(int)v24)
    && ((_DWORD)v24 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
  {
    v9 = v24 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v21 + 0x2000000000000;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = fmod(v13, v14);
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"Invalid mix of BigInt and other type in remainder.", 51);
  }
  else
  {
    return JSC::JSBigInt::remainderImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)a1, v10, v9, a4, a5, a6, a7, a8);
  }
}

JSC::JSBigInt *operationInc(JSC::JSGlobalObject *a1, unint64_t a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  int v15;
  double v16;
  int v17;
  uint64_t v18;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  JSC::JSObject *var18[4];

  v10 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v10 + 40) = var18[3];
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 5);
    if (v15 == 3)
      goto LABEL_2;
    if (v15 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_30;
    }
    a2 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var18[0] = (JSC::JSObject *)a2;
  if (*(_DWORD *)(v10 + 80))
  {
    v21 = a2;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    a2 = v21;
    if (hasExceptionsAfterHandlingTraps)
    {
LABEL_37:
      a2 = 0;
      goto LABEL_2;
    }
  }
  if (a2 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      if (a2 >= 0xFFFE000000000000)
      {
        v16 = (double)(int)a2;
LABEL_29:
        if (!*(_DWORD *)(v10 + 80)
          || (v22 = v16,
              v20 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8),
              v16 = v22,
              !v20))
        {
LABEL_30:
          if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v18 = (int)v16, v16 == (double)(int)v18)
            && ((_DWORD)v18 || (*(_QWORD *)&v16 & 0x8000000000000000) == 0))
          {
            a2 = v18 | 0xFFFE000000000000;
          }
          else
          {
            a2 = *(_QWORD *)&v16 + 0x2000000000000;
          }
          goto LABEL_2;
        }
        goto LABEL_37;
      }
LABEL_28:
      JSC::JSValue::toNumberSlowCase(var18, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_29;
    }
    if (*(_BYTE *)(a2 + 5) != 3)
      goto LABEL_28;
  }
LABEL_2:
  if (*(_DWORD *)(v10 + 80))
  {
    v17 = *(_DWORD *)(v10 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
    {
      v23 = a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a2 = v23;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (!(a2 >> 49))
    return JSC::JSBigInt::inc(a1, (JSC::JSGlobalObject *)a2, a3, a4);
  v11 = (double)(int)a2;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v11 = a2 - 0x2000000000000;
  v12 = v11 + 1.0;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v13 = (int)v12, v12 == (double)(int)v13)
    && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    return (JSC::JSBigInt *)(v13 | 0xFFFE000000000000);
  }
  else
  {
    return (JSC::JSBigInt *)(*(_QWORD *)&v12 + 0x2000000000000);
  }
}

JSC::JSBigInt *operationDec(JSC::JSGlobalObject **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  double v11;
  double v12;
  uint64_t v13;
  JSC::JSBigInt *result;
  int v15;
  double v16;
  JSC::VM *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  JSC::JSObject *var18[4];

  v10 = a1[7];
  *((JSC::JSObject **)v10 + 5) = var18[3];
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 5);
    if (v15 == 3)
      goto LABEL_2;
    if (v15 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_43:
      if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v20 = (int)v16, v16 == (double)(int)v20)
        && ((_DWORD)v20 || (*(_QWORD *)&v16 & 0x8000000000000000) == 0))
      {
        a2 = v20 | 0xFFFE000000000000;
      }
      else
      {
        a2 = *(_QWORD *)&v16 + 0x2000000000000;
      }
      goto LABEL_2;
    }
    a2 = JSC::JSCell::toPrimitive(a2, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var18[0] = (JSC::JSObject *)a2;
  if (*((_DWORD *)v10 + 20))
  {
    v24 = a2;
    v21 = *((_DWORD *)v10 + 20);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    a2 = v24;
    if (*((_QWORD *)v10 + 2))
    {
LABEL_54:
      a2 = 0;
      goto LABEL_2;
    }
  }
  if (a2 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      if (a2 >= 0xFFFE000000000000)
      {
        v16 = (double)(int)a2;
LABEL_42:
        if (!*((_DWORD *)v10 + 20))
          goto LABEL_43;
        v25 = v16;
        v22 = *((_DWORD *)v10 + 20);
        if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v16 = v25;
        if (!*((_QWORD *)v10 + 2))
          goto LABEL_43;
        goto LABEL_54;
      }
LABEL_41:
      JSC::JSValue::toNumberSlowCase(var18, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_42;
    }
    if (*(_BYTE *)(a2 + 5) != 3)
      goto LABEL_41;
  }
LABEL_2:
  if (*((_DWORD *)v10 + 20))
  {
    v19 = *((_DWORD *)v10 + 20);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v23 = a2;
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a2 = v23;
    }
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if (a2 >> 49)
  {
    v11 = (double)(int)a2;
    if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v11 = a2 - 0x2000000000000;
    v12 = v11 + -1.0;
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v13 = (int)v12, v12 == (double)(int)v13)
      && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v13 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v12 + 0x2000000000000);
    }
  }
  else
  {
    v17 = (JSC::VM *)*(unsigned int *)(a2 + 8);
    if ((_DWORD)v17)
    {
      if (*(_BYTE *)(a2 + 16))
        return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, a2, 0, a4);
      else
        return JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>(a1, a2, v17, a4);
    }
    else
    {
      result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)1, a4, a5, a6, a7, a8);
      if (result)
      {
        v18 = *((_QWORD *)result + 3);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_QWORD *)v18 = 1;
        *((_BYTE *)result + 16) = 1;
      }
    }
  }
  return result;
}

JSC::JSBigInt *operationValueBitNot(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  JSC::JSObject *var28[6];

  v10 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v10 + 40) = var28[5];
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_12;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v11 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v11 == *(double *)a9.i64)
      {
        a2 = v11 | 0xFFFE000000000000;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_12;
    a2 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var28[0] = (JSC::JSObject *)a2;
  if (*(_DWORD *)(v10 + 80))
  {
    v15 = *(_DWORD *)(v10 + 80);
    if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
    {
      v25 = a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a2 = v25;
    }
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_23:
      a2 = 0;
      goto LABEL_12;
    }
  }
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      v18 = a2 - 0x2000000000000;
      if (a2 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_33:
        v19 = (v18 >> 52) & 0x7FF;
        if ((v19 - 1023) <= 0x53)
        {
          v21 = v18 >> (51 - (v18 >> 52));
          if (v19 > 0x433)
            LODWORD(v21) = v18 << ((v18 >> 52) - 51);
          if (v19 >= 0x41F)
            v22 = v21;
          else
            v22 = (((1 << ((v18 >> 52) + 1)) - 1) & v21) + (1 << ((v18 >> 52) + 1));
          if ((v18 & 0x8000000000000000) == 0)
            v23 = v22;
          else
            v23 = -v22;
          v20 = v23 | 0xFFFE000000000000;
        }
        else
        {
          v20 = 0xFFFE000000000000;
        }
        if (!*(_DWORD *)(v10 + 80))
          goto LABEL_45;
        v24 = *(_DWORD *)(v10 + 80);
        if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (!*(_QWORD *)(v10 + 16))
        {
LABEL_45:
          a2 = v20;
          goto LABEL_12;
        }
        goto LABEL_23;
      }
    }
    else if (*(_BYTE *)(a2 + 5) == 3)
    {
      goto LABEL_12;
    }
    JSC::JSValue::toNumberSlowCase(var28, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v18 = v17;
    goto LABEL_33;
  }
LABEL_12:
  if (*(_DWORD *)(v10 + 80))
  {
    v14 = *(_DWORD *)(v10 + 80);
    if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
    {
      v16 = a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
      a2 = v16;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (a2 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(a2 ^ 0xFFFE0000FFFFFFFFLL);
  if (*(_BYTE *)(a2 + 16))
    return JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)*(unsigned int *)(a2 + 8), a4);
  return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, a2, 0, a4);
}

JSC::JSBigInt *operationValueBitAnd(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v15;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  JSC::VM *v29;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v29 = (JSC::VM *)v12;
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_7;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v15 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v15 == *(double *)a9.i64)
        goto LABEL_66;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_7;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_37:
    v10 = 0;
    goto LABEL_7;
  }
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_49;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_7;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_49:
    v19 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v19 - 1023) <= 0x53)
    {
      v24 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v19 > 0x433)
        LODWORD(v24) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v19 >= 0x41F)
        v25 = v24;
      else
        v25 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v24)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v20 = v25;
      else
        v20 = -v25;
    }
    else
    {
      v20 = 0;
    }
    if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_37;
    v15 = v20;
LABEL_66:
    v10 = v15 | 0xFFFE000000000000;
  }
LABEL_7:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_14;
  v13 = *(JSC::VM **)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      v17 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY && (double)(int)v17 == *(double *)a9.i64)
      {
        v9 = v17 | 0xFFFE000000000000;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_14;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_39:
    v9 = 0;
    goto LABEL_14;
  }
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v22 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_54:
        v23 = (v22 >> 52) & 0x7FF;
        if ((v23 - 1023) <= 0x53)
        {
          v26 = v22 >> (51 - (v22 >> 52));
          if (v23 > 0x433)
            LODWORD(v26) = v22 << ((v22 >> 52) - 51);
          if (v23 >= 0x41F)
            v27 = v26;
          else
            v27 = (((1 << ((v22 >> 52) + 1)) - 1) & v26) + (1 << ((v22 >> 52) + 1));
          if ((v22 & 0x8000000000000000) == 0)
            v28 = v27;
          else
            v28 = -v27;
          v9 = v28 | 0xFFFE000000000000;
        }
        else
        {
          v9 = 0xFFFE000000000000;
        }
        if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_39;
        goto LABEL_14;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_14;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v22 = v21;
    goto LABEL_54;
  }
LABEL_14:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v10 >= 0xFFFE000000000000 && v9 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(v10 & v9 | 0xFFFE000000000000);
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError(a1, &v29, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'and' operation.", 65);
  }
  return JSC::JSBigInt::bitwiseAndImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationValueBitOr(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v15;
  uint64_t v17;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v31 = (JSC::VM *)v12;
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_7;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v15 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v15 == *(double *)a9.i64)
        goto LABEL_72;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_7;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_42:
    v10 = 0;
    goto LABEL_7;
  }
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_7;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_55:
    v21 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v21 - 1023) <= 0x53)
    {
      v26 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v21 > 0x433)
        LODWORD(v26) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v21 >= 0x41F)
        v27 = v26;
      else
        v27 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v26)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v22 = v27;
      else
        v22 = -v27;
    }
    else
    {
      v22 = 0;
    }
    if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_42;
    v15 = v22;
LABEL_72:
    v10 = v15 | 0xFFFE000000000000;
  }
LABEL_7:
  if (*(_DWORD *)(v12 + 80))
  {
    v19 = *(_DWORD *)(v12 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_14;
  v13 = *(JSC::VM **)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      v17 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY && (double)(int)v17 == *(double *)a9.i64)
      {
        v9 = v17 | 0xFFFE000000000000;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_14;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_44:
    v9 = 0;
    goto LABEL_14;
  }
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v24 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_60:
        v25 = (v24 >> 52) & 0x7FF;
        if ((v25 - 1023) <= 0x53)
        {
          v28 = v24 >> (51 - (v24 >> 52));
          if (v25 > 0x433)
            LODWORD(v28) = v24 << ((v24 >> 52) - 51);
          if (v25 >= 0x41F)
            v29 = v28;
          else
            v29 = (((1 << ((v24 >> 52) + 1)) - 1) & v28) + (1 << ((v24 >> 52) + 1));
          if ((v24 & 0x8000000000000000) == 0)
            v30 = v29;
          else
            v30 = -v29;
          v9 = v30 | 0xFFFE000000000000;
        }
        else
        {
          v9 = 0xFFFE000000000000;
        }
        if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_44;
        goto LABEL_14;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_14;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v24 = v23;
    goto LABEL_60;
  }
LABEL_14:
  if (*(_DWORD *)(v12 + 80))
  {
    v20 = *(_DWORD *)(v12 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >= 0xFFFE000000000000 && v9 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(v9 | v10 | 0xFFFE000000000000);
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError(a1, &v31, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'or' operation.", 64);
  }
  return JSC::JSBigInt::bitwiseOrImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationValueBitXor(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  JSC::VM *v35;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v35 = (JSC::VM *)v12;
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_12;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v13 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v13 == *(double *)a9.i64)
        goto LABEL_75;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_12;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v21 = *(_DWORD *)(v12 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_36;
  }
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_63;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_12;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_63:
    v25 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v25 - 1023) <= 0x53)
    {
      v27 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v25 > 0x433)
        LODWORD(v27) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v25 >= 0x41F)
        v28 = v27;
      else
        v28 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v27)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v26 = v28;
      else
        v26 = -v28;
    }
    else
    {
      v26 = 0;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v34 = *(_DWORD *)(v12 + 80);
      if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_36:
        v10 = 0;
        goto LABEL_12;
      }
    }
    v13 = v26;
LABEL_75:
    v10 = v13 | 0xFFFE000000000000;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80))
  {
    v19 = *(_DWORD *)(v12 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_24;
  v15 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      v16 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY && (double)(int)v16 == *(double *)a9.i64)
      {
        v9 = v16 | 0xFFFE000000000000;
        goto LABEL_24;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_24;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v15 + 80))
  {
    v22 = *(_DWORD *)(v15 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_39;
  }
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v24 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_77:
        v29 = (v24 >> 52) & 0x7FF;
        if ((v29 - 1023) <= 0x53)
        {
          v30 = v24 >> (51 - (v24 >> 52));
          if (v29 > 0x433)
            LODWORD(v30) = v24 << ((v24 >> 52) - 51);
          if (v29 >= 0x41F)
            v31 = v30;
          else
            v31 = (((1 << ((v24 >> 52) + 1)) - 1) & v30) + (1 << ((v24 >> 52) + 1));
          if ((v24 & 0x8000000000000000) == 0)
            v32 = v31;
          else
            v32 = -v31;
          v9 = v32 | 0xFFFE000000000000;
        }
        else
        {
          v9 = 0xFFFE000000000000;
        }
        if (*(_DWORD *)(v15 + 80))
        {
          v33 = *(_DWORD *)(v15 + 80);
          if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v15 + 16))
          {
LABEL_39:
            v9 = 0;
            goto LABEL_24;
          }
        }
        goto LABEL_24;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_24;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v24 = v23;
    goto LABEL_77;
  }
LABEL_24:
  if (*(_DWORD *)(v12 + 80))
  {
    v20 = *(_DWORD *)(v12 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >= 0xFFFE000000000000 && v9 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(v9 ^ v10 | 0xFFFE000000000000);
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError(a1, &v35, (uint64_t)"Invalid mix of BigInt and other type in bitwise 'xor' operation.", 65);
  }
  return JSC::JSBigInt::bitwiseXorImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, v10, v9, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *operationValueBitLShift(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  JSC::VM *v36;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v36 = (JSC::VM *)v12;
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_12;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v13 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v13 == *(double *)a9.i64)
        goto LABEL_81;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_12;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v21 = *(_DWORD *)(v12 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_37;
  }
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_69;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_12;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_69:
    v26 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v26 - 1023) <= 0x53)
    {
      v28 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v26 > 0x433)
        LODWORD(v28) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v26 >= 0x41F)
        v29 = v28;
      else
        v29 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v28)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v27 = v29;
      else
        v27 = -v29;
    }
    else
    {
      v27 = 0;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v35 = *(_DWORD *)(v12 + 80);
      if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_37:
        v10 = 0;
        goto LABEL_12;
      }
    }
    v13 = v27;
LABEL_81:
    v10 = v13 | 0xFFFE000000000000;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80))
  {
    v19 = *(_DWORD *)(v12 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_24;
  v15 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      v16 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY && (double)(int)v16 == *(double *)a9.i64)
      {
        v9 = v16 | 0xFFFE000000000000;
        goto LABEL_24;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_24;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v15 + 80))
  {
    v22 = *(_DWORD *)(v15 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_40;
  }
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v25 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_83:
        v30 = (v25 >> 52) & 0x7FF;
        if ((v30 - 1023) <= 0x53)
        {
          v31 = v25 >> (51 - (v25 >> 52));
          if (v30 > 0x433)
            LODWORD(v31) = v25 << ((v25 >> 52) - 51);
          if (v30 >= 0x41F)
            v32 = v31;
          else
            v32 = (((1 << ((v25 >> 52) + 1)) - 1) & v31) + (1 << ((v25 >> 52) + 1));
          if ((v25 & 0x8000000000000000) == 0)
            v33 = v32;
          else
            v33 = -v32;
          v9 = v33 | 0xFFFE000000000000;
        }
        else
        {
          v9 = 0xFFFE000000000000;
        }
        if (*(_DWORD *)(v15 + 80))
        {
          v34 = *(_DWORD *)(v15 + 80);
          if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v15 + 16))
          {
LABEL_40:
            v9 = 0;
            goto LABEL_24;
          }
        }
        goto LABEL_24;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_24;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v25 = v24;
    goto LABEL_83;
  }
LABEL_24:
  if (*(_DWORD *)(v12 + 80))
  {
    v20 = *(_DWORD *)(v12 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >= 0xFFFE000000000000 && v9 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(((_DWORD)v10 << v9) | 0xFFFE000000000000);
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError(a1, &v36, (uint64_t)"Invalid mix of BigInt and other type in left shift operation.", 62);
  }
  if (*(_DWORD *)(v10 + 8) && *(_DWORD *)(v9 + 8))
  {
    if (*(_BYTE *)(v9 + 16))
      return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v10, v9, a4);
    else
      return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v10, v9, a4);
  }
  return (JSC::JSBigInt *)v10;
}

JSC::JSBigInt *operationValueBitRShift(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  JSC::VM *v36;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v36 = (JSC::VM *)v12;
  if (a2 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_12;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = a2 - 0x2000000000000;
      v13 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v13 == *(double *)a9.i64)
        goto LABEL_81;
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 3)
      goto LABEL_12;
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v21 = *(_DWORD *)(v12 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_37;
  }
  if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_69;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_12;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_69:
    v26 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v26 - 1023) <= 0x53)
    {
      v28 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v26 > 0x433)
        LODWORD(v28) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v26 >= 0x41F)
        v29 = v28;
      else
        v29 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v28)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v27 = v29;
      else
        v27 = -v29;
    }
    else
    {
      v27 = 0;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      v35 = *(_DWORD *)(v12 + 80);
      if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_37:
        v10 = 0;
        goto LABEL_12;
      }
    }
    v13 = v27;
LABEL_81:
    v10 = v13 | 0xFFFE000000000000;
  }
LABEL_12:
  if (*(_DWORD *)(v12 + 80))
  {
    v19 = *(_DWORD *)(v12 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_24;
  v15 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      v16 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY && (double)(int)v16 == *(double *)a9.i64)
      {
        v9 = v16 | 0xFFFE000000000000;
        goto LABEL_24;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_24;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v15 + 80))
  {
    v22 = *(_DWORD *)(v15 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_40;
  }
  if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v25 = v9 - 0x2000000000000;
      if (v9 - 0x2000000000000 < 0xFFFC000000000000)
      {
LABEL_83:
        v30 = (v25 >> 52) & 0x7FF;
        if ((v30 - 1023) <= 0x53)
        {
          v31 = v25 >> (51 - (v25 >> 52));
          if (v30 > 0x433)
            LODWORD(v31) = v25 << ((v25 >> 52) - 51);
          if (v30 >= 0x41F)
            v32 = v31;
          else
            v32 = (((1 << ((v25 >> 52) + 1)) - 1) & v31) + (1 << ((v25 >> 52) + 1));
          if ((v25 & 0x8000000000000000) == 0)
            v33 = v32;
          else
            v33 = -v32;
          v9 = v33 | 0xFFFE000000000000;
        }
        else
        {
          v9 = 0xFFFE000000000000;
        }
        if (*(_DWORD *)(v15 + 80))
        {
          v34 = *(_DWORD *)(v15 + 80);
          if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v15 + 16))
          {
LABEL_40:
            v9 = 0;
            goto LABEL_24;
          }
        }
        goto LABEL_24;
      }
    }
    else if (*(_BYTE *)(v9 + 5) == 3)
    {
      goto LABEL_24;
    }
    JSC::JSValue::toNumberSlowCase(var38, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v25 = v24;
    goto LABEL_83;
  }
LABEL_24:
  if (*(_DWORD *)(v12 + 80))
  {
    v20 = *(_DWORD *)(v12 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >= 0xFFFE000000000000 && v9 >= 0xFFFE000000000000)
    return (JSC::JSBigInt *)(((int)v10 >> v9) | 0xFFFE000000000000);
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError(a1, &v36, (uint64_t)"Invalid mix of BigInt and other type in signed right shift operation.", 70);
  }
  if (*(_DWORD *)(v10 + 8) && *(_DWORD *)(v9 + 8))
  {
    if (*(_BYTE *)(v9 + 16))
      return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v10, v9, a4);
    else
      return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v10, v9, a4);
  }
  return (JSC::JSBigInt *)v10;
}

unint64_t operationValueBitURShift(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  JSC::VM *v16;
  int v17;
  char v18;
  uint64_t v20;
  uint64_t v22;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  JSC::VM *v34;
  JSC::JSObject *var48[10];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 56);
  *(JSC::JSObject **)(v12 + 40) = var48[9];
  v34 = (JSC::VM *)v12;
  if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
  {
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      if (a2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = a2 - 0x2000000000000;
        v20 = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
        if (fabs(COERCE_DOUBLE(a2 - 0x2000000000000)) != INFINITY && (double)(int)v20 == *(double *)a9.i64)
        {
LABEL_73:
          v10 = v20 | 0xFFFE000000000000;
          goto LABEL_7;
        }
      }
    }
    else
    {
      if (*(_BYTE *)(a2 + 5) == 3)
        goto LABEL_7;
      v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    }
    var48[0] = (JSC::JSObject *)v10;
    if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    {
LABEL_49:
      v10 = 0;
      goto LABEL_7;
    }
    if (v10 > 0xFFFDFFFFFFFFFFFFLL)
      goto LABEL_7;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9.i64[0] = v10 - 0x2000000000000;
        goto LABEL_56;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_7;
    }
    JSC::JSValue::toNumberSlowCase(var48, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_56:
    v24 = ((unint64_t)a9.i64[0] >> 52) & 0x7FF;
    if ((v24 - 1023) <= 0x53)
    {
      v29 = (unint64_t)a9.i64[0] >> (51 - ((unint64_t)a9.i64[0] >> 52));
      if (v24 > 0x433)
        LODWORD(v29) = a9.i64[0] << (((unint64_t)a9.i64[0] >> 52) - 51);
      if (v24 >= 0x41F)
        v30 = v29;
      else
        v30 = (((1 << (((unint64_t)a9.i64[0] >> 52) + 1)) - 1) & v29)
            + (1 << (((unint64_t)a9.i64[0] >> 52) + 1));
      if (a9.i64[0] >= 0)
        v25 = v30;
      else
        v25 = -v30;
    }
    else
    {
      v25 = 0;
    }
    if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_49;
    v20 = v25;
    goto LABEL_73;
  }
LABEL_7:
  if (*(_DWORD *)(v12 + 80))
  {
    v15 = 0;
    v13 = 1;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    {
      v14 = 0;
      goto LABEL_10;
    }
    v14 = 0;
    if (v10 < 0xFFFE000000000000)
      goto LABEL_10;
  }
  else if (v10 < 0xFFFE000000000000)
  {
    v15 = 0;
    v14 = 0;
    v13 = 1;
    goto LABEL_10;
  }
  v13 = 0;
  v14 = v10 & 0xFFFFFF00;
  v15 = v10;
LABEL_10:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v16 = *(JSC::VM **)(a1 + 56);
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_17;
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v9 - 0x2000000000000;
      if (fabs(COERCE_DOUBLE(v9 - 0x2000000000000)) != INFINITY)
      {
        v22 = (int)*(double *)a9.i64;
        if ((double)(int)v22 == *(double *)a9.i64)
        {
          v9 = v22 | 0xFFFE000000000000;
          goto LABEL_17;
        }
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_17;
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var48[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16, a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_51;
  if (v9 > 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_17;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_17;
    goto LABEL_60;
  }
  v27 = v9 - 0x2000000000000;
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
LABEL_60:
    JSC::JSValue::toNumberSlowCase(var48, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
    v27 = v26;
  }
  v28 = (v27 >> 52) & 0x7FF;
  if ((v28 - 1023) <= 0x53)
  {
    v31 = v27 >> (51 - (v27 >> 52));
    if (v28 > 0x433)
      LODWORD(v31) = v27 << ((v27 >> 52) - 51);
    if (v28 >= 0x41F)
      v32 = v31;
    else
      v32 = (((1 << ((v27 >> 52) + 1)) - 1) & v31) + (1 << ((v27 >> 52) + 1));
    if ((v27 & 0x8000000000000000) == 0)
      v33 = v32;
    else
      v33 = -v32;
    v9 = v33 | 0xFFFE000000000000;
  }
  else
  {
    v9 = 0xFFFE000000000000;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16, a2, a3, a4, a5, a6, a7, a8))
LABEL_51:
    v9 = 0;
LABEL_17:
  if (!*((_DWORD *)v16 + 20))
  {
    if (v9 < 0xFFFE000000000000)
    {
      v18 = 0;
      v17 = 1;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16, a2, a3, a4, a5, a6, a7, a8);
  v18 = 0;
  v17 = 1;
  if (!hasExceptionsAfterHandlingTraps && v9 >= 0xFFFE000000000000)
  {
LABEL_19:
    v17 = 0;
    v18 = v9 & 0x1F;
  }
LABEL_20:
  if (!*(_DWORD *)(v12 + 80) || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
    if ((v13 | v17) != 1)
      return ((v14 | v15) >> v18) | 0xFFFE000000000000;
    JSC::throwTypeError(a1, &v34, (uint64_t)"BigInt does not support >>> operator", 37);
  }
  return 0;
}

JSC::JSBigInt *operationValueAddNotNumber(JSC::VM **a1, unint64_t a2, uint64_t a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  int v15;
  unint64_t v16;
  int *v17;
  int v18;
  _BOOL4 v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  JSC::JSString *v51;
  JSC::JSString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t SlowCase;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _QWORD var48[10];

  v11 = a1[7];
  *((_QWORD *)v11 + 5) = var48[9];
  v88 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  v12 = *(unsigned __int8 *)(a3 + 5);
  if (v12 > 0x16)
    return JSC::jsAddSlowCase(a1, a2, (const WTF::String *)a3, a4, a5, a6, a7, a8, a9);
  if (v12 == 2)
  {
    var48[0] = v11;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = (int *)(a2 + 16);
    if ((v13 & 1) == 0)
      v14 = (int *)(v13 + 4);
    v15 = *v14;
    if (!*v14)
      return (JSC::JSBigInt *)a3;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = (int *)(a3 + 16);
    if ((v16 & 1) == 0)
      v17 = (int *)(v16 + 4);
    v18 = *v17;
    if (!*v17)
      return (JSC::JSBigInt *)a2;
    v19 = __OFADD__(v15, v18);
    if ((v18 | v15) < 0 || v19)
    {
      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)var48);
      return 0;
    }
    v20 = (uint64_t *)((char *)v11 + 39432);
    if ((v13 & 1) != 0)
      v13 = (v13 >> 2) & 1;
    else
      LODWORD(v13) = (*(unsigned __int8 *)(v13 + 16) >> 2) & 1;
    if ((v16 & 1) != 0)
      v16 = (v16 >> 2) & 1;
    else
      LODWORD(v16) = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
    v21 = v18 + v15;
    v22 = v13 & v16;
    v23 = *v20;
    if ((unint64_t)*v20 >= *((_QWORD *)v11 + 4930))
    {
      v23 = *((_QWORD *)v11 + 4931);
      if ((v23 & 1) != 0)
      {
        v82 = a3;
        JSC::sanitizeStackForVM(v11, (JSC::VM *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11 + 39408, (uint64_t)v11 + 192, 32, 0, 0, v83, v84, v85);
        a3 = v82;
        v23 = SlowCase;
        goto LABEL_23;
      }
      v73 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)v11 + 4932);
      *((_QWORD *)v11 + 4930) = v23 + HIDWORD(v73);
      *((_QWORD *)v11 + 4931) = v23 + (int)v73;
    }
    *v20 = v23 + 32;
LABEL_23:
    *(_DWORD *)v23 = *((_QWORD *)v11 + 5189) >> 4;
    *(_DWORD *)(v23 + 4) = 17302016;
    v24 = 5;
    if (!v22)
      v24 = 1;
    *(_QWORD *)(v23 + 8) = v24 | a2;
    *(_DWORD *)(v23 + 16) = v21;
    *(_DWORD *)(v23 + 20) = a3;
    *(_WORD *)(v23 + 24) = WORD2(a3);
    *(_WORD *)(v23 + 26) = 0;
    *(_DWORD *)(v23 + 28) = 0;
    if (*((_BYTE *)v11 + 755))
      __dmb(0xAu);
    return (JSC::JSBigInt *)v23;
  }
LABEL_30:
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v87);
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v26, v27, (uint64_t)v28, v29, v30, v31, v32))
  {
    goto LABEL_76;
  }
  v33 = a1[7];
  var48[0] = v33;
  v34 = *(_QWORD *)(a2 + 8);
  v35 = (unsigned int *)(a2 + 16);
  if ((v34 & 1) == 0)
    v35 = (unsigned int *)(v34 + 4);
  v36 = *v35;
  if (!(_DWORD)v36)
  {
    v49 = JSC::jsString(v33, (JSC::VM *)&v87, (const WTF::String *)v34, (uint64_t)v28, v29, v30, v31, v32);
    goto LABEL_59;
  }
  v28 = v87;
  if (!v87 || (v37 = *((unsigned int *)v87 + 1), !(_DWORD)v37))
  {
    v23 = a2;
    goto LABEL_60;
  }
  v38 = __OFADD__((_DWORD)v36, (_DWORD)v37);
  if (((v37 | v36) & 0x80000000) == 0 && !v38)
  {
    if ((v34 & 1) == 0 && (unint64_t)(v36 + v37 + 20) < 0x20)
    {
      if (v34)
        v39 = *(_DWORD *)(v34 + 4);
      else
        v39 = 0;
      if (((v39 | v37) & 0x80000000) != 0 || __OFADD__(v39, (_DWORD)v37))
      {
        v90 = 0;
      }
      else
      {
        if (v34 && (*(_BYTE *)(v34 + 16) & 4) == 0)
          v40 = 0;
        else
          v40 = (*((unsigned __int8 *)v87 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v39 + v37), v40, v34, (uint64_t)v87, (int **)&v90);
        if (v90)
        {
          v89 = v90;
          v90 = 0;
          v23 = JSC::JSString::create((uint64_t)v33, (JSC::VM *)&v89, v41, v42, v43, v44, v45, v46);
          v47 = v89;
          v89 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v26, v34, (uint64_t)v28, v29, v30, v31, v32);
              WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
          goto LABEL_52;
        }
      }
      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)var48);
      v23 = 0;
LABEL_52:
      v48 = v90;
      v90 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v26, v34, (uint64_t)v28, v29, v30, v31, v32);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
      goto LABEL_60;
    }
    v51 = (JSC::JSString *)JSC::jsString(v33, (JSC::VM *)&v87, (const WTF::String *)v34, (uint64_t)v87, v29, v30, v31, v32);
    v49 = JSC::JSRopeString::create(v33, a2, v51, v52, v53, v54, v55, v56);
LABEL_59:
    v23 = v49;
    goto LABEL_60;
  }
  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)var48);
LABEL_76:
  v23 = 0;
LABEL_60:
  v50 = v87;
  v87 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v26, v34, (uint64_t)v28, v29, v30, v31, v32);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return (JSC::JSBigInt *)v23;
}

JSC::JSBigInt *operationValueDiv(JSC::JSGlobalObject *a1, int64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;
  JSC::VM *v19;
  int v20;
  double v21;
  uint64_t v22;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  double v27;
  JSC::VM *v28;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v28 = (JSC::VM *)v12;
  if ((unint64_t)a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned __int8 *)(a2 + 5);
    if (v18 == 3)
      goto LABEL_2;
    if (v18 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_46;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_53:
    v10 = 0;
    goto LABEL_2;
  }
  if (v10 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_2;
  if ((v10 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v10 + 5) == 3)
      goto LABEL_2;
    goto LABEL_44;
  }
  if (v10 < 0xFFFE000000000000)
  {
LABEL_44:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_45;
  }
  *(double *)a9.i64 = (double)(int)v10;
LABEL_45:
  if (*(_DWORD *)(v12 + 80))
  {
    v26 = a9.i64[0];
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v26;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_53;
  }
LABEL_46:
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v22 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v22)
    && ((_DWORD)v22 || (a9.i64[0] & 0x8000000000000000) == 0))
  {
    v10 = v22 | 0xFFFE000000000000;
  }
  else
  {
    v10 = a9.i64[0] + 0x2000000000000;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v9 >> 49)
    goto LABEL_4;
  v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v9 + 5);
    if (v20 == 3)
      goto LABEL_4;
    if (v20 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_66;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8))
  {
LABEL_73:
    v9 = 0;
    goto LABEL_4;
  }
  if (v9 - 0x2000000000000 < 0xFFFC000000000000)
    goto LABEL_4;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v9 + 5) == 3)
      goto LABEL_4;
    goto LABEL_64;
  }
  if (v9 < 0xFFFE000000000000)
  {
LABEL_64:
    JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_65;
  }
  v21 = (double)(int)v9;
LABEL_65:
  if (*((_DWORD *)v19 + 20))
  {
    v27 = v21;
    v25 = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, a3, a4, a5, a6, a7, a8);
    v21 = v27;
    if (v25)
      goto LABEL_73;
  }
LABEL_66:
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v24 = (int)v21, v21 == (double)(int)v24)
    && ((_DWORD)v24 || (*(_QWORD *)&v21 & 0x8000000000000000) == 0))
  {
    v9 = v24 | 0xFFFE000000000000;
  }
  else
  {
    v9 = *(_QWORD *)&v21 + 0x2000000000000;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    v14 = (double)(int)v9;
    if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v14 = v9 - 0x2000000000000;
    v15 = v13 / v14;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v16 = (int)v15, v15 == (double)(int)v16)
      && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return (JSC::JSBigInt *)(v16 | 0xFFFE000000000000);
    }
    else
    {
      return (JSC::JSBigInt *)(*(_QWORD *)&v15 + 0x2000000000000);
    }
  }
  else if ((v10 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v10 + 5) != 3
         || (v9 & 0xFFFE000000000002) != 0
         || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v28, (uint64_t)"Invalid mix of BigInt and other type in division.", 50);
  }
  else
  {
    return JSC::JSBigInt::divideImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((unint64_t)a1, v10, v9, a4, a5, a6, a7, a8);
  }
}

JSC::JSBigInt *operationValuePow(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned int v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  int v27;
  double v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *var38[8];

  v9 = a3;
  v10 = a2;
  v12 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v12 + 40) = var38[7];
  v39 = (JSC::VM *)v12;
  if (a2 >> 49)
    goto LABEL_2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned __int8 *)(a2 + 5);
    if (v25 == 3)
      goto LABEL_2;
    if (v25 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_77:
      if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v31 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v31)
        && ((_DWORD)v31 || (a9.i64[0] & 0x8000000000000000) == 0))
      {
        v10 = v31 | 0xFFFE000000000000;
      }
      else
      {
        v10 = a9.i64[0] + 0x2000000000000;
      }
      goto LABEL_2;
    }
    v10 = JSC::JSCell::toPrimitive(a2, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v10;
  if (*(_DWORD *)(v12 + 80))
  {
    v32 = *(_DWORD *)(v12 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
LABEL_88:
      v10 = 0;
      goto LABEL_2;
    }
  }
  if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_76:
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_77;
        v37 = a9.i64[0];
        v33 = *(_DWORD *)(v12 + 80);
        if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a9.i64[0] = v37;
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_77;
        goto LABEL_88;
      }
LABEL_75:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_76;
    }
    if (*(_BYTE *)(v10 + 5) != 3)
      goto LABEL_75;
  }
LABEL_2:
  if (*(_DWORD *)(v12 + 80))
  {
    v29 = *(_DWORD *)(v12 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v9 >> 49)
    goto LABEL_4;
  v26 = *((_QWORD *)a1 + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v27 = *(unsigned __int8 *)(v9 + 5);
    if (v27 == 3)
      goto LABEL_4;
    if (v27 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v9, a1, a3, a4, a5, a6, a7, a8, a9);
LABEL_103:
      if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v34 = (int)v28, v28 == (double)(int)v34)
        && ((_DWORD)v34 || (*(_QWORD *)&v28 & 0x8000000000000000) == 0))
      {
        v9 = v34 | 0xFFFE000000000000;
      }
      else
      {
        v9 = *(_QWORD *)&v28 + 0x2000000000000;
      }
      goto LABEL_4;
    }
    v9 = JSC::JSCell::toPrimitive(v9, (JSC::VM **)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  var38[0] = (JSC::JSObject *)v9;
  if (*(_DWORD *)(v26 + 80))
  {
    v35 = *(_DWORD *)(v26 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v26 + 16))
    {
LABEL_114:
      v9 = 0;
      goto LABEL_4;
    }
  }
  if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v28 = (double)(int)v9;
LABEL_102:
        if (!*(_DWORD *)(v26 + 80))
          goto LABEL_103;
        v38 = v28;
        v36 = *(_DWORD *)(v26 + 80);
        if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, a3, a4, a5, a6, a7, a8);
        v28 = v38;
        if (!*(_QWORD *)(v26 + 16))
          goto LABEL_103;
        goto LABEL_114;
      }
LABEL_101:
      JSC::JSValue::toNumberSlowCase(var38, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_102;
    }
    if (*(_BYTE *)(v9 + 5) != 3)
      goto LABEL_101;
  }
LABEL_4:
  if (*(_DWORD *)(v12 + 80))
  {
    v30 = *(_DWORD *)(v12 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v10 >> 49 && v9 >> 49)
  {
    v13 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v13 = v10 - 0x2000000000000;
    *(_QWORD *)&v14 = v9 - 0x2000000000000;
    if (v9 > 0xFFFDFFFFFFFFFFFFLL)
      v14 = (double)(int)v9;
    v15 = fabs(v13);
    v16 = fabs(v14);
    *(double *)&v17 = INFINITY;
    if (v15 == 1.0 && v16 == INFINITY)
    {
      *(double *)&v17 = NAN;
    }
    else
    {
      if (v14 == 0.5)
      {
        v20 = 0.0;
        if (v13 != 0.0)
        {
          v20 = INFINITY;
          if (v15 != INFINITY)
            v20 = sqrt(v13);
        }
        goto LABEL_29;
      }
      if (v14 != -0.5)
      {
        v19 = (int)v14;
        if ((int)v14 <= 0x3E8 && v14 == (double)(int)v19)
        {
          if (v19)
          {
            v20 = 1.0;
            do
            {
              if ((v19 & 1) != 0)
                v21 = v13;
              else
                v21 = 1.0;
              v20 = v20 * v21;
              v13 = v13 * v13;
              v22 = v19 >= 2;
              v19 >>= 1;
            }
            while (v22);
          }
          else
          {
            v20 = 1.0;
          }
        }
        else
        {
          v20 = pow(v13, v14);
        }
        goto LABEL_29;
      }
      if (v13 != 0.0)
      {
        if (v15 == INFINITY)
          v20 = 0.0;
        else
          v20 = 1.0 / sqrt(v13);
LABEL_29:
        if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v23 = (int)v20, v20 == (double)(int)v23)
          && ((_DWORD)v23 || (*(_QWORD *)&v20 & 0x8000000000000000) == 0))
        {
          return (JSC::JSBigInt *)(v23 | 0xFFFE000000000000);
        }
        else
        {
          return (JSC::JSBigInt *)(*(_QWORD *)&v20 + 0x2000000000000);
        }
      }
    }
    v20 = *(double *)&v17;
    goto LABEL_29;
  }
  if ((v10 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v10 + 5) != 3
    || (v9 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v9 + 5) != 3)
  {
    return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v39, (uint64_t)"Invalid mix of BigInt and other type in exponentiation.", 56);
  }
  else
  {
    return JSC::JSBigInt::exponentiateImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((unint64_t)a1, v10, v9, a4, a5, a6, a7, a8);
  }
}

double operationArithAbs(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return fabs(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return fabs(v10);
}

uint64_t operationArithClz32(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 < 0xFFFE000000000000)
  {
    v11 = (unint64_t)a2 - 0x2000000000000;
    if ((unint64_t)a2 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
      v11 = v16;
    }
    v12 = (v11 >> 52) & 0x7FF;
    v13 = v12 - 1023;
    v14 = v11 >> (51 - (v11 >> 52));
    if (v12 > 0x433)
      LODWORD(v14) = v11 << ((v11 >> 52) - 51);
    if (v12 >= 0x41F)
      v15 = v14;
    else
      v15 = (((1 << ((v11 >> 52) + 1)) - 1) & v14) + (1 << ((v11 >> 52) + 1));
    if ((v11 & 0x8000000000000000) != 0)
      v15 = -v15;
    if (v13 <= 0x53)
      LODWORD(a2) = v15;
    else
      LODWORD(a2) = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    return __clz(a2);
  v17 = *(_DWORD *)(v9 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
  {
    v18 = (int)a2;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    LODWORD(a2) = v18;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return __clz(a2);
}

double operationArithFRound(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v13;
  double v14;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v13 = *(_DWORD *)(v9 + 80);
    if ((v13 & 0x27) != 0 && (v13 & 0x20) == 0)
    {
      v14 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v14;
    }
    if (*(_QWORD *)(v9 + 16))
      return NAN;
  }
  return (float)v10;
}

double operationArithSin(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return sin(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return sin(v10);
}

double operationArithSinh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return sinh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return sinh(v10);
}

double operationArithCos(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return cos(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return cos(v10);
}

double operationArithCosh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return cosh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return cosh(v10);
}

double operationArithTan(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return tan(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return tan(v10);
}

double operationArithTanh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return tanh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return tanh(v10);
}

double operationArithASin(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return asin(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return asin(v10);
}

double operationArithASinh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return asinh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return asinh(v10);
}

double operationArithACos(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return acos(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return acos(v10);
}

double operationArithACosh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return acosh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return acosh(v10);
}

double operationArithATan(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return atan(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return atan(v10);
}

double operationArithATanh(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return atanh(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return atanh(v10);
}

double operationArithLog(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return log(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return log(v10);
}

double operationArithLog10(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return log10(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return log10(v10);
}

double operationArithLog2(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return log2(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return log2(v10);
}

double operationArithCbrt(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return cbrt(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return cbrt(v10);
}

double operationArithExp(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return exp(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return exp(v10);
}

double operationArithExpm1(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return expm1(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return expm1(v10);
}

double operationArithLog1p(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double result;
  int v11;
  double v12;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    result = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&result = (char *)a2 - 0x2000000000000;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v11 = *(_DWORD *)(v9 + 80);
    if ((v11 & 0x27) != 0 && (v11 & 0x20) == 0)
    {
      v12 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      result = v12;
    }
    if (*(_QWORD *)(v9 + 16))
      return NAN;
  }
  if (result != 0.0)
    return log1p(result);
  return result;
}

double operationArithSqrt(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  int v12;
  double v13;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v9 + 80))
    return sqrt(v10);
  v12 = *(_DWORD *)(v9 + 80);
  if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
  {
    v13 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v10 = v13;
  }
  if (*(_QWORD *)(v9 + 16))
    return NAN;
  else
    return sqrt(v10);
}

unint64_t operationArithRound(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v16;
  JSC::JSObject *var28[6];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var28[5];
  var28[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var28, a1, a3, a4, a5, a6, a7, a8, a9);
    v10 = v16;
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v11 = ceil(v10);
  v12 = 0.0;
  if (v11 + -0.5 > v10)
    v12 = 1.0;
  v13 = v11 - v12;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v14 = (int)v13, v13 == (double)(int)v14)
    && ((_DWORD)v14 || (*(_QWORD *)&v13 & 0x8000000000000000) == 0))
  {
    return v14 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v13 + 0x2000000000000;
  }
}

unint64_t operationArithFloor(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v14;
  double v15;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v14 = *(_DWORD *)(v9 + 80);
    if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
    {
      v15 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v15;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = floor(v10);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v12 = (int)v11, v11 == (double)(int)v12)
    && ((_DWORD)v12 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
  {
    return v12 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v11 + 0x2000000000000;
  }
}

unint64_t operationArithCeil(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v14;
  double v15;
  JSC::JSObject *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(JSC::JSObject **)(v9 + 40) = var18[3];
  var18[0] = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a2;
  }
  else if ((unint64_t)a2 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *(_QWORD *)&v10 = (char *)a2 - 0x2000000000000;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v14 = *(_DWORD *)(v9 + 80);
    if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
    {
      v15 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v15;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = ceil(v10);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v12 = (int)v11, v11 == (double)(int)v12)
    && ((_DWORD)v12 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
  {
    return v12 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v11 + 0x2000000000000;
  }
}

unint64_t operationArithTrunc(JSC::JSGlobalObject *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  int v19;
  double v20;
  unsigned __int8 *var18[4];

  v9 = *((_QWORD *)a1 + 7);
  *(unsigned __int8 **)(v9 + 40) = var18[3];
  var18[0] = a2;
  v16 = JSC::JSValue::toIntegerPreserveNaN(var18, a1, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80))
  {
    v19 = *(_DWORD *)(v9 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v20 = v16;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v10, v11, v12, v13, v14, v15);
      v16 = v20;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v17 = (int)v16;
    if (v16 == (double)(int)v17 && ((_DWORD)v17 || (*(_QWORD *)&v16 & 0x8000000000000000) == 0))
      return v17 | 0xFFFE000000000000;
  }
  return *(_QWORD *)&v16 + 0x2000000000000;
}

double operationArithMinMultipleDouble(double *a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  double v4;

  if (!a2)
    return INFINITY;
  v2 = a2;
  result = INFINITY;
  do
  {
    v4 = *a1;
    if (*a1 < result || v4 == 0.0 && result == 0.0 && (*(_QWORD *)&v4 & 0x8000000000000000) != 0)
      result = *a1;
    ++a1;
    --v2;
  }
  while (v2);
  return result;
}

double operationArithMaxMultipleDouble(double *a1, unsigned int a2)
{
  uint64_t v2;
  double result;
  double v4;

  if (!a2)
    return -INFINITY;
  v2 = a2;
  result = -INFINITY;
  do
  {
    v4 = *a1;
    if (*a1 > result || v4 == 0.0 && result == 0.0 && (*(_QWORD *)&v4 & 0x8000000000000000) == 0)
      result = *a1;
    ++a1;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t operationGetByValObjectInt(JSC::JSGlobalObject *a1, uint64_t this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int8x16_t v50;
  uint64_t v51;
  unsigned int v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  WTF::StringImpl *v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  JSC::VM *v108;
  _BYTE *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  int v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unsigned __int16 *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  _BYTE *v150;
  uint64_t v151;
  JSC::VM *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  int v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  _BYTE *v176;
  uint64_t v177;
  JSC::VM *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  unsigned __int16 *v192;
  unsigned int v193;
  unsigned __int16 *v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t **v197;
  WTF::StringImpl *v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  int v223;
  char v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  int v229;
  uint64_t v230;
  _DWORD *v231;
  double v232;
  const unsigned __int8 *v233;
  double v234;
  const unsigned __int8 *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  unsigned int v238;
  JSC::VM *v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  int v243;
  uint64_t v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  JSC::VM *v248;
  uint64_t v249;
  char v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  uint64_t v255;
  int *Index;
  int v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  int *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  _BYTE *v268;
  uint64_t v269;
  int v270;
  _BYTE *v271;
  uint64_t v272;
  unsigned __int16 *v274;
  uint64_t v275;
  unsigned int v276;
  unsigned __int16 *v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  unsigned __int8 *v281;
  unsigned int v282;
  JSC::VM *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v291;
  uint64_t v292;
  unsigned int v293;
  JSC::VM *v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  _BOOL4 v300;
  unsigned __int8 *v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  JSC::JSString *v306;
  unsigned __int8 *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  JSC::JSString *v311;
  uint64_t v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  unint64_t v315;
  WTF::StringImpl *v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  _QWORD v321[2];
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326[2];
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD v330[2];
  uint64_t v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t vars0;

  v10 = a3;
  v11 = this;
  v335 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  if ((a3 & 0x80000000) != 0)
  {
    if ((_DWORD)a3 == -1)
    {
      v14 = *(unsigned __int8 *)(this + 5);
      if (this && (v14 & 0xFE) == 0x24)
      {
        v15 = *(_QWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
        v16 = v15[288];
        v17 = (v16 & 1) != 0 ? (v16 >> 1) & 3 : *(unsigned __int8 *)(v16 + 4);
        if (v17 != 2)
        {
          v18 = v15[287];
          v19 = (v18 & 1) != 0 ? (v18 >> 1) & 3 : *(unsigned __int8 *)(v18 + 4);
          if (v19 != 2)
          {
            v20 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
            v21 = (v20 & 0x10) != 0 ? ((v20 & 0xE) + 10) >> 1 : (v20 >> 1) & 7;
            v22 = *((_DWORD *)v15 + v21 + 213);
            v23 = v22 ? 16 * (v22 & 0xFFFFFFFE) : 0;
            if (v23 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
              return 10;
            v105 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
            if (!v105)
              v105 = *(_QWORD *)(this + 16);
            if (v105 == v15[84] && !*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x20))
              return 10;
          }
        }
      }
      v315 = this;
      v106 = *(_QWORD *)(v13 + 41952);
      v107 = *(_QWORD *)(v106 + 40);
      a9.i64[0] = 0xFFFFFFFF00000000;
      v318 = 0xFFFFFFFF00000000;
      LOBYTE(v322) = 0;
      v323 = 0;
      v324 = 0;
      v325 = 0;
      v320 = 0;
      memset(v321, 0, 13);
      v319 = this;
      if ((this & 0xFFFE000000000002) != 0)
        goto LABEL_537;
      if (v14 > 0x16)
      {
        v108 = (JSC::VM *)v13;
        goto LABEL_136;
      }
      if (v14 != 2)
      {
LABEL_537:
        v259 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v315, (unint64_t)a1);
        if (!v259)
          goto LABEL_176;
        v11 = v259;
        v108 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_136:
        v109 = (_BYTE *)(v11 + 6);
        v110 = v107 >> 4;
        v111 = v11;
        if ((*(_BYTE *)(v11 + 6) & 8) == 0)
        {
          v9 = v11;
          do
          {
            v112 = *(_DWORD *)v9 & 0xFFFFFFFE;
            v113 = 16 * v112;
            if (!(_DWORD)v110 || (v110 & ~*(_DWORD *)(16 * v112 + 0x20)) != 0)
              goto LABEL_149;
            v114 = *(_QWORD *)(16 * v112 + 0x58);
            if (!v114)
            {
              v125 = *(_QWORD *)(16 * v112 + 0x40);
              if (!v125 || *(_BYTE *)(v125 + 5) != 1 && *(_DWORD *)(v125 + 80) < 2u)
                goto LABEL_149;
              JSC::Structure::materializePropertyTable((JSC::Structure *)v113, v108, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (!v114)
                goto LABEL_149;
            }
            if (!*(_DWORD *)(v114 + 24))
              goto LABEL_149;
            v115 = *(_QWORD *)(v114 + 16);
            v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
            v117 = *(unsigned int *)(v114 + 8);
            v118 = *(_DWORD *)(v107 + 16);
            if ((v115 & 1) != 0)
            {
              if ((v118 & 0x20) != 0)
                v118 = *(_DWORD *)(v107 + 32);
              v119 = *(_DWORD *)(v114 + 12);
              v120 = (v118 >> 8) & *(_QWORD *)&v119;
              v121 = *(unsigned __int8 *)(v116 + v120);
              if (!*(_BYTE *)(v116 + v120))
                goto LABEL_149;
              v122 = v116 + v117;
              v123 = 1;
              while (1)
              {
                v124 = *(_QWORD *)(v122 + 8 * (v121 - 1));
                if (v107 == (v124 & 0xFFFFFFFFFFFFLL))
                  break;
                v120 = ((_DWORD)v120 + v123) & v119;
                v121 = *(unsigned __int8 *)(v116 + v120);
                ++v123;
                if (!*(_BYTE *)(v116 + v120))
                  goto LABEL_149;
              }
              a6 = (v124 >> 16) & 0xFF00000000 | HIBYTE(v124);
            }
            else
            {
              if ((v118 & 0x20) != 0)
                v118 = *(_DWORD *)(v107 + 32);
              v126 = *(_DWORD *)(v114 + 12);
              v127 = v126 & (v118 >> 8);
              v128 = *(_DWORD *)(v116 + 4 * v127);
              if (!v128)
                goto LABEL_149;
              v129 = v116 + 4 * v117;
              v130 = 1;
              while (1)
              {
                v131 = (v128 - 1);
                if (v107 == *(_QWORD *)(v129 + 16 * v131))
                  break;
                v127 = (v127 + v130) & v126;
                v128 = *(_DWORD *)(v116 + 4 * v127);
                ++v130;
                if (!v128)
                  goto LABEL_149;
              }
              a6 = *(unsigned int *)(v129 + 16 * v131 + 8) | ((unint64_t)*(unsigned __int8 *)(v129 + 16 * v131 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              a5 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v136 = v9 + 16;
                v137 = a6 << 32;
              }
              else
              {
                v136 = *(_QWORD *)(v9 + 8) - 8;
                v137 = 0x3F00000000 - (a6 << 32);
              }
              a4 = *(_QWORD *)(v136 + (v137 >> 29));
              if ((a4 & 0xFFFE000000000002) == 0)
              {
                v138 = *(unsigned __int8 *)(a4 + 5);
                if (v138 == 5)
                {
                  v143 = (unsigned int *)v9;
                  v144 = (uint64_t)v108;
                  goto LABEL_204;
                }
                if (v138 == 6)
                {
                  v145 = *(_DWORD *)(v113 + 16) & 3;
                  v146 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v148 = *(_QWORD *)(a4 + 24);
                    v147 = *(_QWORD *)(a4 + 32);
                    v316 = *(WTF::StringImpl **)(a4 + 8);
                    v317 = v146;
                    LODWORD(v318) = HIDWORD(a6);
                    v320 = v9;
                    goto LABEL_210;
                  }
                  v316 = *(WTF::StringImpl **)(a4 + 8);
                  v317 = v146;
                  LODWORD(v318) = HIDWORD(a6);
                  v320 = v9;
                  goto LABEL_311;
                }
              }
              v316 = (WTF::StringImpl *)a4;
              v320 = v9;
LABEL_183:
              v318 = __PAIR64__(a6, a5);
              LOWORD(v321[1]) = 257;
              goto LABEL_184;
            }
LABEL_149:
            if ((*v109 & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v9, v108, v107, (uint64_t)&v316) & 1) != 0)
            {
              goto LABEL_184;
            }
            v111 = *(_QWORD *)(v113 + 48);
            if (!v111)
              v111 = *(_QWORD *)(v9 + 16);
            if ((v111 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v111 + 5) < 0x17u)
            {
              if (!v107)
                goto LABEL_176;
              v132 = *(_DWORD *)(v107 + 16);
              if ((v132 & 0x20) != 0)
                goto LABEL_176;
              v133 = *(_WORD **)(v107 + 8);
              v134 = *(unsigned int *)(v107 + 4);
              if ((v132 & 4) == 0)
              {
                if ((_DWORD)v134)
                {
                  v135 = (unsigned __int16)*v133 - 48;
                  if (v135 <= 9 && (*v133 != 48 || v134 <= 1))
                  {
                    v139 = v134 - 1;
                    v140 = v133 + 1;
                    v24 = 10;
                    while (v139)
                    {
                      if (v135 <= 0x19999999)
                      {
                        v141 = *v140 - 48;
                        if (v141 <= 9)
                        {
                          v89 = __CFADD__(v141, 10 * v135);
                          v135 = v141 + 10 * (_DWORD)v135;
                          --v139;
                          ++v140;
                          if (!v89)
                            continue;
                        }
                      }
                      goto LABEL_186;
                    }
                    goto LABEL_447;
                  }
                }
                goto LABEL_176;
              }
              if (!(_DWORD)v134)
                goto LABEL_176;
              v135 = *(unsigned __int8 *)v133 - 48;
              if (v135 > 9 || v134 >= 2 && *(_BYTE *)v133 == 48)
                goto LABEL_176;
              v236 = v134 - 1;
              v237 = (unsigned __int8 *)v133 + 1;
              v24 = 10;
              while (v236)
              {
                if (v135 <= 0x19999999)
                {
                  v238 = *v237 - 48;
                  if (v238 <= 9)
                  {
                    v89 = __CFADD__(v238, 10 * v135);
                    v135 = v238 + 10 * (_DWORD)v135;
                    --v236;
                    ++v237;
                    if (!v89)
                      continue;
                  }
                }
                goto LABEL_186;
              }
LABEL_447:
              if ((_DWORD)v135 == -1)
              {
LABEL_176:
                v24 = 10;
                goto LABEL_186;
              }
              v239 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v24 = 10;
              while (2)
              {
                v240 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v242 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v240 + 0x4C) + 0x70))(v11, a1, v135, &v316);
                if (*((_DWORD *)v239 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v239, v241, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_176;
                }
                if ((v242 & 1) != 0)
                  goto LABEL_184;
                if (BYTE2(v321[1]) == 3)
                {
                  if (BYTE4(v321[1]))
                    goto LABEL_176;
                  v243 = *(unsigned __int8 *)(v11 + 5);
                  if (v243 != 61)
                    goto LABEL_453;
                }
                else
                {
                  v243 = *(unsigned __int8 *)(v11 + 5);
                  if (v243 == 61)
                  {
                    if (BYTE2(v321[1]) == 1)
                      goto LABEL_176;
                  }
                  else
                  {
LABEL_453:
                    if ((v243 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v241, a3, a4, a5, a6, a7, a8) <= v135)
                    {
                      goto LABEL_176;
                    }
                  }
                }
                if ((*(_WORD *)(v240 + 12) & 0x800) == 0 || BYTE2(v321[1]) == 3)
                {
                  v244 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v244)
                    v244 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v244 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v11, a1);
                  }
                  else
                  {
                    v244 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v244)
                      v244 = *(_QWORD *)(v11 + 16);
                  }
                  if (*((_DWORD *)v239 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v239, v241, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_176;
                  }
                }
                if ((v244 & 0xFFFE000000000002) != 0)
                  goto LABEL_186;
                v11 = v244;
                if (*(unsigned __int8 *)(v244 + 5) <= 0x16u)
                  goto LABEL_186;
                continue;
              }
            }
            v109 = (_BYTE *)(v111 + 6);
            v9 = v111;
          }
          while ((*(_BYTE *)(v111 + 6) & 8) == 0);
        }
        v312 = v111;
        if (v107)
        {
          v149 = *(_DWORD *)(v107 + 16);
          if ((v149 & 0x20) == 0)
          {
            v150 = *(_BYTE **)(v107 + 8);
            v151 = *(unsigned int *)(v107 + 4);
            if ((v149 & 4) != 0)
            {
              if ((_DWORD)v151)
              {
                v9 = *v150 - 48;
                if (v9 <= 9 && (v151 < 2 || *v150 != 48))
                {
                  v280 = v151 - 1;
                  v281 = v150 + 1;
                  while (v280)
                  {
                    if (v9 <= 0x19999999)
                    {
                      v282 = *v281 - 48;
                      if (v282 <= 9)
                      {
                        v89 = __CFADD__(v282, 10 * v9);
                        v9 = v282 + 10 * (_DWORD)v9;
                        --v280;
                        ++v281;
                        if (!v89)
                          continue;
                      }
                    }
                    goto LABEL_220;
                  }
LABEL_601:
                  if ((_DWORD)v9 != -1)
                  {
                    v283 = (JSC::VM *)*((_QWORD *)a1 + 7);
                    v24 = 10;
                    while (1)
                    {
                      v284 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                      v285 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v284 + 0x4C) + 0x70))(v11, a1, v9, &v316);
                      v287 = v285;
                      if (*((_DWORD *)v283 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v283, v286, a3, a4, a5, a6, a7, a8);
                        if (((hasExceptionsAfterHandlingTraps | v287) & 1) != 0)
                        {
                          if (!hasExceptionsAfterHandlingTraps)
                            goto LABEL_184;
                          goto LABEL_176;
                        }
                      }
                      else if ((v285 & 1) != 0)
                      {
                        goto LABEL_184;
                      }
                      if (BYTE2(v321[1]) == 3)
                      {
                        if (BYTE4(v321[1]))
                          goto LABEL_176;
                        v288 = *(unsigned __int8 *)(v11 + 5);
                        if (v288 == 61)
                          goto LABEL_608;
                      }
                      else
                      {
                        v288 = *(unsigned __int8 *)(v11 + 5);
                        if (v288 == 61)
                        {
                          if (BYTE2(v321[1]) == 1)
                            goto LABEL_176;
                          goto LABEL_608;
                        }
                      }
                      if ((v288 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v286, a3, a4, a5, a6, a7, a8) <= v9)
                      {
                        goto LABEL_176;
                      }
LABEL_608:
                      if ((*(_WORD *)(v284 + 12) & 0x800) == 0 || BYTE2(v321[1]) == 3)
                      {
                        v289 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                        if (!v289)
                          v289 = *(_QWORD *)(v11 + 16);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v289 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0xB0))(v11, a1);
                        }
                        else
                        {
                          v289 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                          if (!v289)
                            v289 = *(_QWORD *)(v11 + 16);
                        }
                        if (*((_DWORD *)v283 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v283, v286, a3, a4, a5, a6, a7, a8))
                        {
                          goto LABEL_176;
                        }
                      }
                      if ((v289 & 0xFFFE000000000002) == 0)
                      {
                        v11 = v289;
                        if (*(unsigned __int8 *)(v289 + 5) > 0x16u)
                          continue;
                      }
                      goto LABEL_186;
                    }
                  }
                }
              }
            }
            else if ((_DWORD)v151)
            {
              v9 = *(unsigned __int16 *)v150 - 48;
              if (v9 <= 9 && (*(_WORD *)v150 != 48 || v151 <= 1))
              {
                v191 = v151 - 1;
                v192 = (unsigned __int16 *)(v150 + 2);
                while (v191)
                {
                  if (v9 <= 0x19999999)
                  {
                    v193 = *v192 - 48;
                    if (v193 <= 9)
                    {
                      v89 = __CFADD__(v193, 10 * v9);
                      v9 = v193 + 10 * (_DWORD)v9;
                      --v191;
                      ++v192;
                      if (!v89)
                        continue;
                    }
                  }
                  goto LABEL_220;
                }
                goto LABEL_601;
              }
            }
          }
        }
LABEL_220:
        v152 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v24 = 10;
        while (1)
        {
          v153 = *(_DWORD *)v312 & 0xFFFFFFFE;
          v154 = 16 * v153;
          if ((*(_BYTE *)(v312 + 6) & 8) == 0)
            break;
          v218 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v153 + 0x4C) + 0x68))(v312, a1, v107, &v316);
          if (*((_DWORD *)v152 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v152, this, a3, a4, a5, a6, a7, a8))
            goto LABEL_176;
          if ((v218 & 1) != 0)
            goto LABEL_184;
          if (BYTE2(v321[1]) == 3)
          {
            if (BYTE4(v321[1]))
              goto LABEL_176;
            v219 = *(unsigned __int8 *)(v312 + 5);
            if (v219 != 61)
            {
LABEL_366:
              if (!v107)
                goto LABEL_234;
              if ((v219 - 50) < 0xFFFFFFF5)
                goto LABEL_234;
              v220 = *(_DWORD *)(v107 + 16);
              if ((v220 & 0x20) != 0)
                goto LABEL_234;
              v221 = *(unsigned int *)(v107 + 4);
              if (!(_DWORD)v221)
                goto LABEL_234;
              v222 = *(unsigned __int8 **)(v107 + 8);
              if ((v220 & 4) == 0)
              {
                v223 = *(unsigned __int16 *)v222;
                if ((_DWORD)v221 == 1)
                  goto LABEL_372;
                if (v223 == 45)
                {
                  v223 = *((unsigned __int16 *)v222 + 1);
                  goto LABEL_400;
                }
                if ((v223 - 48) >= 0xA && ((_DWORD)v221 != 8 || v223 != 73))
                {
LABEL_423:
                  if ((_DWORD)v221 != 3 || v223 != 78)
                    goto LABEL_234;
                }
LABEL_409:
                v9 = v9 & 0xFFFFFF0000000000 | v221 | ((unint64_t)((v220 >> 2) & 1) << 32);
                JSC::jsToNumber(v222, v9);
                WTF::numberToString(v326, v232);
                if (WTF::equal(v107, (unint64_t)v326, v233))
                  goto LABEL_176;
                goto LABEL_234;
              }
              v223 = *v222;
              if ((_DWORD)v221 == 1)
              {
LABEL_372:
                if ((v223 - 48) < 0xA)
                  goto LABEL_176;
                goto LABEL_234;
              }
              if (v223 == 45)
              {
                v223 = v222[1];
LABEL_400:
                if ((v223 - 48) < 0xA)
                {
                  if ((_DWORD)v221 == 2)
                    goto LABEL_176;
                  goto LABEL_409;
                }
                if ((_DWORD)v221 != 9)
                  goto LABEL_234;
              }
              else
              {
                if ((v223 - 48) < 0xA)
                  goto LABEL_409;
                if ((_DWORD)v221 != 8)
                  goto LABEL_423;
              }
              if (v223 != 73)
                goto LABEL_234;
              goto LABEL_409;
            }
          }
          else
          {
            v219 = *(unsigned __int8 *)(v312 + 5);
            if (v219 != 61)
              goto LABEL_366;
            if (BYTE2(v321[1]) == 1)
              goto LABEL_176;
          }
LABEL_234:
          if ((*(_WORD *)(v154 + 12) & 0x800) == 0)
          {
            v166 = *(_DWORD *)v312;
LABEL_236:
            v167 = *(_QWORD *)(16 * (v166 & 0xFFFFFFFE) + 0x30);
            if (!v167)
              v167 = *(_QWORD *)(v312 + 16);
            goto LABEL_238;
          }
          v166 = *(_DWORD *)v312;
          if (BYTE2(v321[1]) == 3)
            goto LABEL_236;
          v216 = 16 * (v166 & 0xFFFFFFFE);
          if ((*(_WORD *)(v216 + 12) & 0x800) != 0)
          {
            v167 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v216 + 76) + 0xB0))(v312, a1);
          }
          else
          {
            v167 = *(_QWORD *)(v216 + 48);
            if (!v167)
              v167 = *(_QWORD *)(v312 + 16);
          }
          if (*((_DWORD *)v152 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v152, this, a3, a4, a5, a6, a7, a8))
            goto LABEL_176;
LABEL_238:
          if ((v167 & 0xFFFE000000000002) == 0)
          {
            v312 = v167;
            if (*(unsigned __int8 *)(v167 + 5) > 0x16u)
              continue;
          }
          goto LABEL_186;
        }
        if ((_DWORD)v110 && (v110 & ~*(_DWORD *)(16 * v153 + 0x20)) == 0)
        {
          v155 = *(_QWORD *)(16 * v153 + 0x58);
          if (v155
            || (v168 = *(_QWORD *)(16 * v153 + 0x40)) != 0
            && (*(_BYTE *)(v168 + 5) == 1 || *(_DWORD *)(v168 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)v154, v152, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v155))
          {
            if (*(_DWORD *)(v155 + 24))
            {
              v156 = *(_QWORD *)(v155 + 16);
              v157 = v156 & 0xFFFFFFFFFFFFFFFELL;
              v158 = *(unsigned int *)(v155 + 8);
              v159 = *(_DWORD *)(v107 + 16);
              if ((v156 & 1) != 0)
              {
                if ((v159 & 0x20) != 0)
                  v159 = *(_DWORD *)(v107 + 32);
                v160 = *(_DWORD *)(v155 + 12);
                v161 = (v159 >> 8) & *(_QWORD *)&v160;
                v162 = *(unsigned __int8 *)(v157 + v161);
                if (*(_BYTE *)(v157 + v161))
                {
                  v163 = v157 + v158;
                  v164 = 1;
                  while (1)
                  {
                    v165 = *(_QWORD *)(v163 + 8 * (v162 - 1));
                    if (v107 == (v165 & 0xFFFFFFFFFFFFLL))
                      break;
                    v161 = ((_DWORD)v161 + v164) & v160;
                    v162 = *(unsigned __int8 *)(v157 + v161);
                    ++v164;
                    if (!*(_BYTE *)(v157 + v161))
                      goto LABEL_233;
                  }
                  a6 = (v165 >> 16) & 0xFF00000000 | HIBYTE(v165);
                  goto LABEL_246;
                }
              }
              else
              {
                if ((v159 & 0x20) != 0)
                  v159 = *(_DWORD *)(v107 + 32);
                v169 = *(_DWORD *)(v155 + 12);
                v170 = v169 & (v159 >> 8);
                v171 = *(_DWORD *)(v157 + 4 * v170);
                if (v171)
                {
                  v172 = v157 + 4 * v158;
                  v173 = 1;
                  while (1)
                  {
                    v174 = (v171 - 1);
                    if (v107 == *(_QWORD *)(v172 + 16 * v174))
                      break;
                    v170 = (v170 + v173) & v169;
                    v171 = *(_DWORD *)(v157 + 4 * v170);
                    ++v173;
                    if (!v171)
                      goto LABEL_233;
                  }
                  a6 = *(unsigned int *)(v172 + 16 * v174 + 8) | ((unint64_t)*(unsigned __int8 *)(v172 + 16 * v174 + 12) << 32);
LABEL_246:
                  if ((_DWORD)a6 != -1)
                  {
                    a5 = HIDWORD(a6);
                    if ((int)a6 <= 63)
                    {
                      v188 = v312 + 16;
                      v189 = a6 << 32;
                    }
                    else
                    {
                      v188 = *(_QWORD *)(v312 + 8) - 8;
                      v189 = 0x3F00000000 - (a6 << 32);
                    }
                    a4 = *(_QWORD *)(v188 + (v189 >> 29));
                    if ((a4 & 0xFFFE000000000002) == 0)
                    {
                      v190 = *(unsigned __int8 *)(a4 + 5);
                      if (v190 != 5)
                      {
                        if (v190 != 6)
                          goto LABEL_286;
                        v145 = *(_DWORD *)(v154 + 16) & 3;
                        v215 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v148 = *(_QWORD *)(a4 + 24);
                          v147 = *(_QWORD *)(a4 + 32);
                          v316 = *(WTF::StringImpl **)(a4 + 8);
                          v317 = v215;
                          LODWORD(v318) = HIDWORD(a6);
                          v320 = v312;
LABEL_210:
                          BYTE1(v321[1]) = 3;
                          if (v145 != 2)
                            LOBYTE(v321[1]) = 1;
                          BYTE3(v321[1]) = 1;
                          v324 = v148;
                          v325 = v147;
LABEL_184:
                          if (BYTE1(v321[1]) == 1)
                          {
                            v24 = (uint64_t)v316;
                          }
                          else
                          {
                            if (BYTE1(v321[1]) == 2)
                              v142 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v316, a1, a3, a4, a5, a6, a7, a8);
                            else
                              v142 = JSC::PropertySlot::customGetter((uint64_t)&v316, *((JSC::VM **)a1 + 7), (WTF::StringImpl *)v107);
                            v24 = v142;
                          }
LABEL_186:
                          if (v323)
                          {
                            v39 = v322;
                            v40 = *(_DWORD *)(v322 + 4);
                            if (!v40)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19846D730);
                            }
                            goto LABEL_39;
                          }
                          return v24;
                        }
                        v316 = *(WTF::StringImpl **)(a4 + 8);
                        v317 = v215;
                        LODWORD(v318) = HIDWORD(a6);
                        v320 = v312;
LABEL_311:
                        BYTE1(v321[1]) = 3;
                        if (v145 != 2)
                          LOBYTE(v321[1]) = 1;
                        goto LABEL_184;
                      }
                      v143 = (unsigned int *)v312;
                      v144 = (uint64_t)v152;
LABEL_204:
                      JSC::JSObject::fillGetterPropertySlot(v143, v144, (uint64_t)&v316, a4, a5, a6);
                      goto LABEL_184;
                    }
LABEL_286:
                    v316 = (WTF::StringImpl *)a4;
                    v320 = v312;
                    goto LABEL_183;
                  }
                }
              }
            }
          }
        }
LABEL_233:
        if ((*(_BYTE *)(v312 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v312, v152, v107, (uint64_t)&v316) & 1) != 0)
        {
          goto LABEL_184;
        }
        goto LABEL_234;
      }
      if (*(_QWORD *)(v106 + 1768) == v107)
      {
        v253 = *(_QWORD *)(this + 8);
        if ((v253 & 1) != 0)
          v254 = (unsigned int *)(this + 16);
        else
          v254 = (unsigned int *)(v253 + 4);
        v255 = *v254;
        if ((v255 & 0x80000000) != 0)
          Index = (int *)(COERCE__INT64((double)v255) + 0x2000000000000);
        else
          Index = (int *)(v255 | 0xFFFE000000000000);
        v257 = 14;
        goto LABEL_534;
      }
      if (v107)
      {
        v267 = *(_DWORD *)(v107 + 16);
        if ((v267 & 0x20) == 0)
        {
          v268 = *(_BYTE **)(v107 + 8);
          v269 = *(unsigned int *)(v107 + 4);
          if ((v267 & 4) != 0)
          {
            if (!(_DWORD)v269)
              goto LABEL_561;
            a3 = *v268 - 48;
            if (a3 > 9)
              goto LABEL_561;
            if (v269 >= 2 && *v268 == 48)
              goto LABEL_561;
            v302 = v268 + 1;
            v303 = v269 - 1;
            while (v303)
            {
              if (a3 > 0x19999999)
                goto LABEL_561;
              v304 = *v302 - 48;
              if (v304 > 9)
                goto LABEL_561;
              v258 = 0;
              v89 = __CFADD__(v304, 10 * a3);
              a3 = v304 + 10 * (_DWORD)a3;
              ++v302;
              --v303;
              if (v89)
                goto LABEL_535;
            }
          }
          else
          {
            if (!(_DWORD)v269)
              goto LABEL_561;
            a3 = *(unsigned __int16 *)v268 - 48;
            if (a3 > 9)
              goto LABEL_561;
            if (*(_WORD *)v268 == 48 && v269 > 1)
              goto LABEL_561;
            v274 = (unsigned __int16 *)(v268 + 2);
            v275 = v269 - 1;
            while (v275)
            {
              if (a3 > 0x19999999)
                goto LABEL_561;
              v276 = *v274 - 48;
              if (v276 > 9)
                goto LABEL_561;
              v258 = 0;
              v89 = __CFADD__(v276, 10 * a3);
              a3 = v276 + 10 * (_DWORD)a3;
              ++v274;
              --v275;
              if (v89)
                goto LABEL_535;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v305 = *(_QWORD *)(this + 8);
            v306 = (JSC::JSString *)((v305 & 1) != 0 ? this + 16 : v305 + 4);
            if (*(_DWORD *)v306 > a3)
            {
              Index = (int *)JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v13 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, this, a3, a4, a5, a6, a7, a8))
              {
                v257 = 10;
LABEL_534:
                v316 = (WTF::StringImpl *)Index;
                LODWORD(v318) = v257;
                v320 = 0;
                v258 = 1;
                BYTE1(v321[1]) = 1;
                goto LABEL_535;
              }
            }
          }
        }
      }
LABEL_561:
      v258 = 0;
LABEL_535:
      if (*(_DWORD *)(v13 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, this, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_176;
      }
      if ((v258 & 1) != 0)
        goto LABEL_184;
      goto LABEL_537;
    }
    v315 = this;
    JSC::Identifier::from((uint64_t **)v13, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v314);
    v48 = (unint64_t)v314;
    v49 = v315;
    v50.i64[0] = 0xFFFFFFFF00000000;
    v318 = 0xFFFFFFFF00000000;
    LOBYTE(v322) = 0;
    v323 = 0;
    v324 = 0;
    v325 = 0;
    v320 = 0;
    memset(v321, 0, 13);
    v319 = v315;
    if ((v315 & 0xFFFE000000000002) != 0)
      goto LABEL_550;
    v51 = *((_QWORD *)a1 + 7);
    v52 = *(unsigned __int8 *)(v315 + 5);
    if (v52 > 0x16)
      goto LABEL_44;
    if (v52 != 2)
    {
LABEL_550:
      v265 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v315, (unint64_t)a1);
      if (!v265)
        goto LABEL_87;
      v49 = v265;
      v51 = *((_QWORD *)a1 + 7);
LABEL_44:
      v53 = (_BYTE *)(v49 + 6);
      v54 = v48 >> 4;
      v55 = v49;
      if ((*(_BYTE *)(v49 + 6) & 8) == 0)
      {
        v9 = v49;
        do
        {
          v56 = *(_DWORD *)v9 & 0xFFFFFFFE;
          v57 = 16 * v56;
          if (!(_DWORD)v54 || (v54 & ~*(_DWORD *)(16 * v56 + 0x20)) != 0)
            goto LABEL_57;
          v58 = *(_QWORD *)(16 * v56 + 0x58);
          if (!v58)
          {
            v69 = *(_QWORD *)(16 * v56 + 0x40);
            if (!v69 || *(_BYTE *)(v69 + 5) != 1 && *(_DWORD *)(v69 + 80) < 2u)
              goto LABEL_57;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v57, (JSC::VM *)v51, 1, (const JSC::PropertyTable *)v43, v44, v45, v46, v47);
            if (!v58)
              goto LABEL_57;
          }
          if (!*(_DWORD *)(v58 + 24))
            goto LABEL_57;
          v59 = *(_QWORD *)(v58 + 16);
          v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
          v61 = *(unsigned int *)(v58 + 8);
          v62 = *(_DWORD *)(v48 + 16);
          if ((v59 & 1) != 0)
          {
            if ((v62 & 0x20) != 0)
              v62 = *(_DWORD *)(v48 + 32);
            v63 = *(_DWORD *)(v58 + 12);
            v64 = (v62 >> 8) & *(_QWORD *)&v63;
            v65 = *(unsigned __int8 *)(v60 + v64);
            if (!*(_BYTE *)(v60 + v64))
              goto LABEL_57;
            v66 = v60 + v61;
            v67 = 1;
            while (1)
            {
              v68 = *(_QWORD *)(v66 + 8 * (v65 - 1));
              if (v48 == (v68 & 0xFFFFFFFFFFFFLL))
                break;
              v64 = ((_DWORD)v64 + v67) & v63;
              v65 = *(unsigned __int8 *)(v60 + v64);
              ++v67;
              if (!*(_BYTE *)(v60 + v64))
                goto LABEL_57;
            }
            v45 = (v68 >> 16) & 0xFF00000000 | HIBYTE(v68);
          }
          else
          {
            if ((v62 & 0x20) != 0)
              v62 = *(_DWORD *)(v48 + 32);
            v70 = *(_DWORD *)(v58 + 12);
            v71 = v70 & (v62 >> 8);
            v72 = *(_DWORD *)(v60 + 4 * v71);
            if (!v72)
              goto LABEL_57;
            v73 = v60 + 4 * v61;
            v74 = 1;
            while (1)
            {
              v75 = (v72 - 1);
              if (v48 == *(_QWORD *)(v73 + 16 * v75))
                break;
              v71 = (v71 + v74) & v70;
              v72 = *(_DWORD *)(v60 + 4 * v71);
              ++v74;
              if (!v72)
                goto LABEL_57;
            }
            v45 = *(unsigned int *)(v73 + 16 * v75 + 8) | ((unint64_t)*(unsigned __int8 *)(v73 + 16 * v75 + 12) << 32);
          }
          if ((_DWORD)v45 != -1)
          {
            v44 = HIDWORD(v45);
            if ((int)v45 <= 63)
            {
              v81 = v9 + 16;
              v82 = v45 << 32;
            }
            else
            {
              v81 = *(_QWORD *)(v9 + 8) - 8;
              v82 = 0x3F00000000 - (v45 << 32);
            }
            v43 = *(_QWORD *)(v81 + (v82 >> 29));
            if ((v43 & 0xFFFE000000000002) == 0)
            {
              v83 = *(unsigned __int8 *)(v43 + 5);
              if (v83 == 5)
              {
                v99 = (unsigned int *)v9;
                v100 = v51;
                goto LABEL_120;
              }
              if (v83 == 6)
              {
                v101 = *(_DWORD *)(v57 + 16) & 3;
                v102 = *(_QWORD *)(v43 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v43 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v104 = *(_QWORD *)(v43 + 24);
                  v103 = *(_QWORD *)(v43 + 32);
                  v316 = *(WTF::StringImpl **)(v43 + 8);
                  v317 = v102;
                  LODWORD(v318) = HIDWORD(v45);
                  v320 = v9;
                  goto LABEL_126;
                }
                v316 = *(WTF::StringImpl **)(v43 + 8);
                v317 = v102;
                LODWORD(v318) = HIDWORD(v45);
                v320 = v9;
                goto LABEL_314;
              }
            }
            v316 = (WTF::StringImpl *)v43;
            v320 = v9;
LABEL_95:
            v318 = __PAIR64__(v45, v44);
            LOWORD(v321[1]) = 257;
            goto LABEL_96;
          }
LABEL_57:
          if ((*v53 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v9, (JSC::VM *)v51, v48, (uint64_t)&v316) & 1) != 0)
          {
            goto LABEL_96;
          }
          v55 = *(_QWORD *)(v57 + 48);
          if (!v55)
            v55 = *(_QWORD *)(v9 + 16);
          if ((v55 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v55 + 5) < 0x17u)
          {
            if (v48)
            {
              v77 = *(_DWORD *)(v48 + 16);
              if ((v77 & 0x20) == 0)
              {
                v78 = *(_BYTE **)(v48 + 8);
                v79 = *(unsigned int *)(v48 + 4);
                if ((v77 & 4) != 0)
                {
                  if ((_DWORD)v79)
                  {
                    v80 = *v78 - 48;
                    if (v80 <= 9 && (v79 < 2 || *v78 != 48))
                    {
                      v245 = v78 + 1;
                      v246 = v79 - 1;
                      v24 = 10;
                      while (v246)
                      {
                        if (v80 <= 0x19999999)
                        {
                          v247 = *v245 - 48;
                          if (v247 <= 9)
                          {
                            v89 = __CFADD__(v247, 10 * v80);
                            v80 = v247 + 10 * (_DWORD)v80;
                            ++v245;
                            --v246;
                            if (!v89)
                              continue;
                          }
                        }
                        goto LABEL_98;
                      }
                      goto LABEL_473;
                    }
                  }
                }
                else if ((_DWORD)v79)
                {
                  v80 = *(unsigned __int16 *)v78 - 48;
                  if (v80 <= 9 && (*(_WORD *)v78 != 48 || v79 <= 1))
                  {
                    v86 = (unsigned __int16 *)(v78 + 2);
                    v87 = v79 - 1;
                    v24 = 10;
                    while (v87)
                    {
                      if (v80 <= 0x19999999)
                      {
                        v88 = *v86 - 48;
                        if (v88 <= 9)
                        {
                          v89 = __CFADD__(v88, 10 * v80);
                          v80 = v88 + 10 * (_DWORD)v80;
                          ++v86;
                          --v87;
                          if (!v89)
                            continue;
                        }
                      }
                      goto LABEL_98;
                    }
LABEL_473:
                    if ((_DWORD)v80 != -1)
                    {
                      v248 = (JSC::VM *)*((_QWORD *)a1 + 7);
                      v24 = 10;
                      while (1)
                      {
                        v249 = 16 * (*(_DWORD *)v49 & 0xFFFFFFFE);
                        v250 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v249 + 0x4C) + 0x70))(v49, a1, v80, &v316);
                        if (*((_DWORD *)v248 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v248, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
                        {
                          break;
                        }
                        if ((v250 & 1) != 0)
                          goto LABEL_96;
                        if (BYTE2(v321[1]) == 3)
                        {
                          if (BYTE4(v321[1]))
                            break;
                          v251 = *(unsigned __int8 *)(v49 + 5);
                          if (v251 == 61)
                            goto LABEL_480;
                        }
                        else
                        {
                          v251 = *(unsigned __int8 *)(v49 + 5);
                          if (v251 == 61)
                          {
                            if (BYTE2(v321[1]) == 1)
                              break;
                            goto LABEL_480;
                          }
                        }
                        if ((v251 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v49, (uint64_t)v41, v42, v43, v44, v45, v46, v47) <= v80)
                        {
                          break;
                        }
LABEL_480:
                        if ((*(_WORD *)(v249 + 12) & 0x800) == 0 || BYTE2(v321[1]) == 3)
                        {
                          v252 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
                          if (!v252)
                            v252 = *(_QWORD *)(v49 + 16);
                        }
                        else
                        {
                          if ((*(_WORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                          {
                            v252 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v49, a1);
                          }
                          else
                          {
                            v252 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
                            if (!v252)
                              v252 = *(_QWORD *)(v49 + 16);
                          }
                          if (*((_DWORD *)v248 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v248, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
                          {
                            break;
                          }
                        }
                        if ((v252 & 0xFFFE000000000002) == 0)
                        {
                          v49 = v252;
                          if (*(unsigned __int8 *)(v252 + 5) > 0x16u)
                            continue;
                        }
                        goto LABEL_98;
                      }
                    }
                  }
                }
              }
            }
LABEL_87:
            v24 = 10;
            goto LABEL_98;
          }
          v53 = (_BYTE *)(v55 + 6);
          v9 = v55;
        }
        while ((*(_BYTE *)(v55 + 6) & 8) == 0);
      }
      v313 = v55;
      if (v48)
      {
        v175 = *(_DWORD *)(v48 + 16);
        if ((v175 & 0x20) == 0)
        {
          v176 = *(_BYTE **)(v48 + 8);
          v177 = *(unsigned int *)(v48 + 4);
          if ((v175 & 4) != 0)
          {
            if ((_DWORD)v177)
            {
              v9 = *v176 - 48;
              if (v9 <= 9 && (v177 < 2 || *v176 != 48))
              {
                v291 = v176 + 1;
                v292 = v177 - 1;
                while (v292)
                {
                  if (v9 <= 0x19999999)
                  {
                    v293 = *v291 - 48;
                    if (v293 <= 9)
                    {
                      v89 = __CFADD__(v293, 10 * v9);
                      v9 = v293 + 10 * (_DWORD)v9;
                      ++v291;
                      --v292;
                      if (!v89)
                        continue;
                    }
                  }
                  goto LABEL_261;
                }
LABEL_628:
                if ((_DWORD)v9 != -1)
                {
                  v294 = (JSC::VM *)*((_QWORD *)a1 + 7);
                  v24 = 10;
                  while (1)
                  {
                    v295 = 16 * (*(_DWORD *)v49 & 0xFFFFFFFE);
                    v296 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v295 + 0x4C) + 0x70))(v49, a1, v9, &v316);
                    v297 = v296;
                    if (*((_DWORD *)v294 + 20))
                    {
                      v300 = JSC::VM::hasExceptionsAfterHandlingTraps(v294, (uint64_t)v41, v42, v43, v44, v45, v46, v47);
                      if (((v300 | v297) & 1) != 0)
                      {
                        if (!v300)
                          goto LABEL_96;
                        goto LABEL_87;
                      }
                    }
                    else if ((v296 & 1) != 0)
                    {
                      goto LABEL_96;
                    }
                    if (BYTE2(v321[1]) == 3)
                    {
                      if (BYTE4(v321[1]))
                        goto LABEL_87;
                      v298 = *(unsigned __int8 *)(v49 + 5);
                      if (v298 == 61)
                        goto LABEL_635;
                    }
                    else
                    {
                      v298 = *(unsigned __int8 *)(v49 + 5);
                      if (v298 == 61)
                      {
                        if (BYTE2(v321[1]) == 1)
                          goto LABEL_87;
                        goto LABEL_635;
                      }
                    }
                    if ((v298 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v49, (uint64_t)v41, v42, v43, v44, v45, v46, v47) <= v9)
                    {
                      goto LABEL_87;
                    }
LABEL_635:
                    if ((*(_WORD *)(v295 + 12) & 0x800) == 0 || BYTE2(v321[1]) == 3)
                    {
                      v299 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
                      if (!v299)
                        v299 = *(_QWORD *)(v49 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v299 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0xB0))(v49, a1);
                      }
                      else
                      {
                        v299 = *(_QWORD *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x30);
                        if (!v299)
                          v299 = *(_QWORD *)(v49 + 16);
                      }
                      if (*((_DWORD *)v294 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v294, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
                      {
                        goto LABEL_87;
                      }
                    }
                    if ((v299 & 0xFFFE000000000002) == 0)
                    {
                      v49 = v299;
                      if (*(unsigned __int8 *)(v299 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_98;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v177)
          {
            v9 = *(unsigned __int16 *)v176 - 48;
            if (v9 <= 9 && (*(_WORD *)v176 != 48 || v177 <= 1))
            {
              v194 = (unsigned __int16 *)(v176 + 2);
              v195 = v177 - 1;
              while (v195)
              {
                if (v9 <= 0x19999999)
                {
                  v196 = *v194 - 48;
                  if (v196 <= 9)
                  {
                    v89 = __CFADD__(v196, 10 * v9);
                    v9 = v196 + 10 * (_DWORD)v9;
                    ++v194;
                    --v195;
                    if (!v89)
                      continue;
                  }
                }
                goto LABEL_261;
              }
              goto LABEL_628;
            }
          }
        }
      }
LABEL_261:
      v178 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v24 = 10;
      while (1)
      {
        v179 = *(_DWORD *)v313 & 0xFFFFFFFE;
        v180 = 16 * v179;
        if ((*(_BYTE *)(v313 + 6) & 8) != 0)
        {
          v224 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v179 + 0x4C) + 0x68))(v313, a1, v48, &v316);
          if (*((_DWORD *)v178 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v178, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
          {
            goto LABEL_87;
          }
          if ((v224 & 1) != 0)
            goto LABEL_96;
          if (BYTE2(v321[1]) == 3)
          {
            if (BYTE4(v321[1]))
              goto LABEL_87;
            v225 = *(unsigned __int8 *)(v313 + 5);
            if (v225 != 61)
            {
LABEL_378:
              if (!v48)
                goto LABEL_268;
              if ((v225 - 50) < 0xFFFFFFF5)
                goto LABEL_268;
              v226 = *(_DWORD *)(v48 + 16);
              if ((v226 & 0x20) != 0)
                goto LABEL_268;
              v227 = *(unsigned int *)(v48 + 4);
              if (!(_DWORD)v227)
                goto LABEL_268;
              v228 = *(unsigned __int8 **)(v48 + 8);
              if ((v226 & 4) == 0)
              {
                v229 = *(unsigned __int16 *)v228;
                if ((_DWORD)v227 == 1)
                  goto LABEL_384;
                if (v229 == 45)
                {
                  v229 = *((unsigned __int16 *)v228 + 1);
                  goto LABEL_405;
                }
                if ((v229 - 48) >= 0xA && ((_DWORD)v227 != 8 || v229 != 73))
                {
LABEL_432:
                  if ((_DWORD)v227 != 3 || v229 != 78)
                    goto LABEL_268;
                }
LABEL_416:
                v9 = v9 & 0xFFFFFF0000000000 | v227 | ((unint64_t)((v226 >> 2) & 1) << 32);
                JSC::jsToNumber(v228, v9);
                WTF::numberToString(v326, v234);
                if (WTF::equal(v48, (unint64_t)v326, v235))
                  goto LABEL_87;
                goto LABEL_268;
              }
              v229 = *v228;
              if ((_DWORD)v227 == 1)
              {
LABEL_384:
                if ((v229 - 48) < 0xA)
                  goto LABEL_87;
                goto LABEL_268;
              }
              if (v229 == 45)
              {
                v229 = v228[1];
LABEL_405:
                if ((v229 - 48) < 0xA)
                {
                  if ((_DWORD)v227 == 2)
                    goto LABEL_87;
                  goto LABEL_416;
                }
                if ((_DWORD)v227 != 9)
                  goto LABEL_268;
              }
              else
              {
                if ((v229 - 48) < 0xA)
                  goto LABEL_416;
                if ((_DWORD)v227 != 8)
                  goto LABEL_432;
              }
              if (v229 != 73)
                goto LABEL_268;
              goto LABEL_416;
            }
          }
          else
          {
            v225 = *(unsigned __int8 *)(v313 + 5);
            if (v225 != 61)
              goto LABEL_378;
            if (BYTE2(v321[1]) == 1)
              goto LABEL_87;
          }
        }
        else
        {
          if ((_DWORD)v54)
          {
            if ((v54 & ~*(_DWORD *)(16 * v179 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v179), v178, v42, (const JSC::PropertyTable *)v43, v44, v45, v46, v47);
              if (v181)
              {
                v326[0] = v48;
                v182 = JSC::PropertyTable::get(v181, v326);
                v45 = v182;
                if ((_DWORD)v182 != -1)
                {
                  v44 = HIDWORD(v182);
                  if ((int)v182 <= 63)
                  {
                    v185 = v313 + 16;
                    v186 = v182 << 32;
                  }
                  else
                  {
                    v185 = *(_QWORD *)(v313 + 8) - 8;
                    v186 = 0x3F00000000 - (v182 << 32);
                  }
                  v43 = *(_QWORD *)(v185 + (v186 >> 29));
                  if ((v43 & 0xFFFE000000000002) == 0)
                  {
                    v187 = *(unsigned __int8 *)(v43 + 5);
                    if (v187 != 5)
                    {
                      if (v187 != 6)
                        goto LABEL_280;
                      v101 = *(_DWORD *)(v180 + 16) & 3;
                      v214 = *(_QWORD *)(v43 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)v43 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v104 = *(_QWORD *)(v43 + 24);
                        v103 = *(_QWORD *)(v43 + 32);
                        v316 = *(WTF::StringImpl **)(v43 + 8);
                        v317 = v214;
                        LODWORD(v318) = HIDWORD(v182);
                        v320 = v313;
LABEL_126:
                        BYTE1(v321[1]) = 3;
                        if (v101 != 2)
                          LOBYTE(v321[1]) = 1;
                        BYTE3(v321[1]) = 1;
                        v324 = v104;
                        v325 = v103;
LABEL_96:
                        if (BYTE1(v321[1]) == 1)
                        {
                          v24 = (uint64_t)v316;
                        }
                        else
                        {
                          if (BYTE1(v321[1]) == 2)
                            v98 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v316, a1, v42, v43, v44, v45, v46, v47);
                          else
                            v98 = JSC::PropertySlot::customGetter((uint64_t)&v316, *((JSC::VM **)a1 + 7), (WTF::StringImpl *)v48);
                          v24 = v98;
                        }
LABEL_98:
                        if (v323)
                        {
                          v84 = *(_DWORD *)(v322 + 4);
                          if (!v84)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19846DC88);
                          }
                          *(_DWORD *)(v322 + 4) = v84 - 1;
                        }
                        v85 = v314;
                        v314 = 0;
                        if (v85)
                        {
                          if (*(_DWORD *)v85 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v85, v41, v42, v43, v44, v45, v46, v47);
                            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
                          }
                          else
                          {
                            *(_DWORD *)v85 -= 2;
                          }
                        }
                        return v24;
                      }
                      v316 = *(WTF::StringImpl **)(v43 + 8);
                      v317 = v214;
                      LODWORD(v318) = HIDWORD(v182);
                      v320 = v313;
LABEL_314:
                      BYTE1(v321[1]) = 3;
                      if (v101 != 2)
                        LOBYTE(v321[1]) = 1;
                      goto LABEL_96;
                    }
                    v99 = (unsigned int *)v313;
                    v100 = (uint64_t)v178;
LABEL_120:
                    JSC::JSObject::fillGetterPropertySlot(v99, v100, (uint64_t)&v316, v43, v44, v45);
                    goto LABEL_96;
                  }
LABEL_280:
                  v316 = (WTF::StringImpl *)v43;
                  v320 = v313;
                  goto LABEL_95;
                }
              }
            }
          }
          if ((*(_BYTE *)(v313 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v313, v178, v48, (uint64_t)&v316) & 1) != 0)
          {
            goto LABEL_96;
          }
        }
LABEL_268:
        if ((*(_WORD *)(v180 + 12) & 0x800) == 0)
        {
          v183 = *(_DWORD *)v313;
LABEL_270:
          v184 = *(_QWORD *)(16 * (v183 & 0xFFFFFFFE) + 0x30);
          if (!v184)
            v184 = *(_QWORD *)(v313 + 16);
          goto LABEL_272;
        }
        v183 = *(_DWORD *)v313;
        if (BYTE2(v321[1]) == 3)
          goto LABEL_270;
        v217 = 16 * (v183 & 0xFFFFFFFE);
        if ((*(_WORD *)(v217 + 12) & 0x800) != 0)
        {
          v184 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v217 + 76) + 0xB0))(v313, a1);
        }
        else
        {
          v184 = *(_QWORD *)(v217 + 48);
          if (!v184)
            v184 = *(_QWORD *)(v313 + 16);
        }
        if (*((_DWORD *)v178 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v178, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
        {
          goto LABEL_87;
        }
LABEL_272:
        if ((v184 & 0xFFFE000000000002) == 0)
        {
          v313 = v184;
          if (*(unsigned __int8 *)(v184 + 5) > 0x16u)
            continue;
        }
        goto LABEL_98;
      }
    }
    if (*(WTF::StringImpl **)(*(_QWORD *)(v51 + 41952) + 1768) == v314)
    {
      v260 = *(_QWORD *)(v315 + 8);
      if ((v260 & 1) != 0)
        v261 = (unsigned int *)(v315 + 16);
      else
        v261 = (unsigned int *)(v260 + 4);
      v262 = *v261;
      if ((v262 & 0x80000000) != 0)
        v263 = (int *)(COERCE__INT64((double)v262) + 0x2000000000000);
      else
        v263 = (int *)(v262 | 0xFFFE000000000000);
      v264 = 14;
      goto LABEL_547;
    }
    if (v314)
    {
      v270 = *((_DWORD *)v314 + 4);
      if ((v270 & 0x20) == 0)
      {
        v271 = (_BYTE *)*((_QWORD *)v314 + 1);
        v272 = *((unsigned int *)v314 + 1);
        if ((v270 & 4) != 0)
        {
          if (!(_DWORD)v272)
            goto LABEL_567;
          v42 = *v271 - 48;
          if (v42 > 9 || v272 >= 2 && *v271 == 48)
            goto LABEL_567;
          v307 = v271 + 1;
          v308 = v272 - 1;
          while (v308)
          {
            if (v42 > 0x19999999)
              goto LABEL_567;
            v309 = *v307 - 48;
            if (v309 > 9)
              goto LABEL_567;
            v9 = 0;
            v89 = __CFADD__(v309, 10 * v42);
            v42 = v309 + 10 * (_DWORD)v42;
            ++v307;
            --v308;
            if (v89)
              goto LABEL_548;
          }
        }
        else
        {
          if (!(_DWORD)v272)
            goto LABEL_567;
          v42 = *(unsigned __int16 *)v271 - 48;
          if (v42 > 9 || *(_WORD *)v271 == 48 && v272 > 1)
            goto LABEL_567;
          v277 = (unsigned __int16 *)(v271 + 2);
          v278 = v272 - 1;
          while (v278)
          {
            if (v42 > 0x19999999)
              goto LABEL_567;
            v279 = *v277 - 48;
            if (v279 > 9)
              goto LABEL_567;
            v9 = 0;
            v89 = __CFADD__(v279, 10 * v42);
            v42 = v279 + 10 * (_DWORD)v42;
            ++v277;
            --v278;
            if (v89)
              goto LABEL_548;
          }
        }
        if ((_DWORD)v42 != -1)
        {
          v310 = *(_QWORD *)(v315 + 8);
          v311 = (JSC::JSString *)((v310 & 1) != 0 ? v315 + 16 : v310 + 4);
          if (*(_DWORD *)v311 > v42)
          {
            v263 = (int *)JSC::JSString::getIndex((JSC::JSString *)v315, a1, v42, v43, v44, v45, v46, v47, v50);
            if (!*(_DWORD *)(v51 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
            {
              v264 = 10;
LABEL_547:
              v316 = (WTF::StringImpl *)v263;
              LODWORD(v318) = v264;
              v320 = 0;
              v9 = 1;
              BYTE1(v321[1]) = 1;
              goto LABEL_548;
            }
          }
        }
      }
    }
LABEL_567:
    v9 = 0;
LABEL_548:
    if (*(_DWORD *)(v51 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51, (uint64_t)v41, v42, v43, v44, v45, v46, v47))
    {
      goto LABEL_87;
    }
    if ((v9 & 1) != 0)
      goto LABEL_96;
    goto LABEL_550;
  }
  v315 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v327 = 0xFFFFFFFF00000000;
  LOBYTE(v331) = 0;
  v332 = 0;
  v333 = 0;
  v334 = 0;
  v329 = 0;
  memset(v330, 0, 13);
  v328 = this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_554;
  v26 = *(unsigned __int8 *)(this + 5);
  if (v26 > 0x16)
  {
    v27 = v13;
LABEL_23:
    v24 = 10;
    while (1)
    {
      v28 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
      v36 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v28 + 0x4C) + 0x70))(v11, a1, v10, v326);
      if (*(_DWORD *)(v27 + 80))
      {
        v76 = *(_DWORD *)(v27 + 80);
        if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
        if (*(_QWORD *)(v27 + 16))
        {
LABEL_81:
          v24 = 10;
          goto LABEL_37;
        }
      }
      if ((v36 & 1) != 0)
      {
        if (BYTE1(v330[1]) == 1)
        {
          v24 = v326[0];
        }
        else if (BYTE1(v330[1]) == 2)
        {
          v24 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v326, a1, (uint64_t)v30, v31, v32, v33, v34, v35);
        }
        else
        {
          v197 = (uint64_t **)*((_QWORD *)a1 + 7);
          JSC::Identifier::from(v197, v10, v30, v31, v32, v33, v34, v35, (int **)&v316);
          v198 = v316;
          v24 = JSC::PropertySlot::customGetter((uint64_t)v326, (JSC::VM *)v197, v316);
          if (v198)
          {
            if (*(_DWORD *)v198 == 2)
            {
              WTF::StringImpl::~StringImpl(v198, v199, v200, v201, v202, v203, v204, v205);
              WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
            }
            else
            {
              *(_DWORD *)v198 -= 2;
            }
          }
        }
        goto LABEL_37;
      }
      if (BYTE2(v330[1]) == 3)
      {
        if (BYTE4(v330[1]))
          goto LABEL_81;
        v37 = *(unsigned __int8 *)(v11 + 5);
        if (v37 == 61)
          goto LABEL_29;
      }
      else
      {
        v37 = *(unsigned __int8 *)(v11 + 5);
        if (v37 == 61)
        {
          if (BYTE2(v330[1]) == 1)
            goto LABEL_81;
          goto LABEL_29;
        }
      }
      if ((v37 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, v29, (uint64_t)v30, v31, v32, v33, v34, v35) <= v10)
      {
        goto LABEL_81;
      }
LABEL_29:
      if ((*(_WORD *)(v28 + 12) & 0x800) == 0 || BYTE2(v330[1]) == 3)
      {
        v38 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
        if (!v38)
          v38 = *(_QWORD *)(v11 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v38 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v11, a1);
        }
        else
        {
          v38 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
          if (!v38)
            v38 = *(_QWORD *)(v11 + 16);
        }
        if (*(_DWORD *)(v27 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v27, v29, (uint64_t)v30, v31, v32, v33, v34, v35))
        {
          goto LABEL_81;
        }
      }
      if ((v38 & 0xFFFE000000000002) == 0)
      {
        v11 = v38;
        if (*(unsigned __int8 *)(v38 + 5) > 0x16u)
          continue;
      }
      goto LABEL_37;
    }
  }
  if (v26 != 2)
  {
LABEL_554:
    v266 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v315, (unint64_t)a1);
    if (v266)
    {
      v11 = v266;
      v27 = *((_QWORD *)a1 + 7);
      goto LABEL_23;
    }
LABEL_589:
    v24 = 0;
    goto LABEL_37;
  }
  v230 = *(_QWORD *)(this + 8);
  if ((v230 & 1) != 0)
    v231 = (_DWORD *)(this + 16);
  else
    v231 = (_DWORD *)(v230 + 4);
  if (*v231 <= a3
    || (v24 = JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9), *(_DWORD *)(v13 + 80))
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, this, a3, a4, a5, a6, a7, a8))
  {
    if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, this, a3, a4, a5, a6, a7, a8))
      goto LABEL_589;
    goto LABEL_554;
  }
  v326[0] = v24;
  LODWORD(v327) = 10;
  v329 = 0;
  BYTE1(v330[1]) = 1;
  if (*(_DWORD *)(v13 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, this, a3, a4, a5, a6, a7, a8))
    v24 = 0;
LABEL_37:
  if (v332)
  {
    v39 = v331;
    v40 = *(_DWORD *)(v331 + 4);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x19846D2A0);
    }
LABEL_39:
    *(_DWORD *)(v39 + 4) = v40 - 1;
  }
  return v24;
}

uint64_t operationGetByValStringInt(JSC::JSGlobalObject *a1, unint64_t this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSString *v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  const WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::JSString *v54;
  int8x16_t v55;
  uint64_t v56;
  unsigned int v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  JSC::JSString *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  _WORD *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  uint64_t v90;
  unsigned int v91;
  BOOL v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  BOOL v101;
  int v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int8x16_t **v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  JSC::VM *v120;
  _BYTE *v121;
  unint64_t v122;
  uint64_t v123;
  JSC::JSString *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  _WORD *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unsigned __int16 *v153;
  unsigned int v154;
  unsigned int *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  BOOL v163;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int8x16_t **v168;
  int v169;
  _BYTE *v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  int v188;
  unsigned int v189;
  int v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  char v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  size_t v210;
  char *v211;
  char *v212;
  int v213;
  uint64_t v214;
  unsigned __int8 *v215;
  JSC::VM **v216;
  uint64_t v217;
  int v218;
  int v219;
  JSC::VM **p_dst;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  int v225;
  _BYTE *v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  int v244;
  unsigned int v245;
  int v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  char v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  unsigned __int8 *v258;
  int v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  unint64_t v265;
  size_t v266;
  char *v267;
  char *v268;
  int v269;
  uint64_t v270;
  unsigned __int8 *v271;
  JSC::VM **v272;
  uint64_t v273;
  int v274;
  int v275;
  JSC::VM **v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned __int16 *v286;
  unsigned int v287;
  unsigned __int16 *v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t **v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  BOOL v296;
  uint64_t v297;
  BOOL v298;
  uint64_t v300;
  WTF::AtomStringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  unint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _DWORD *v321;
  char v322;
  uint64_t v323;
  unsigned __int8 *v324;
  unsigned int v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  int v330;
  uint64_t v331;
  int v332;
  int v333;
  unint64_t v334;
  unint64_t v335;
  char v336;
  unsigned __int8 *v337;
  uint64_t v338;
  unsigned int v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unsigned int *v351;
  uint64_t v352;
  JSC::VM *Index;
  int v354;
  char v355;
  uint64_t v356;
  unsigned int *v357;
  uint64_t v358;
  JSC::VM *v359;
  int v360;
  char v361;
  int v362;
  uint64_t v363;
  int v364;
  _BYTE *v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  _BYTE *v369;
  uint64_t v370;
  uint64_t v371;
  unsigned __int16 *v373;
  uint64_t v374;
  unsigned int v375;
  unsigned __int16 *v376;
  uint64_t v377;
  unsigned int v378;
  int v379;
  uint64_t v380;
  BOOL v381;
  char v382;
  uint64_t v383;
  unsigned __int8 *v384;
  unsigned int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  char v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  char v395;
  unint64_t v396;
  int v397;
  unint64_t v398;
  char v399;
  unsigned __int8 *v400;
  uint64_t v401;
  unsigned int v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char v406;
  char v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  char v412;
  int v413;
  unint64_t v414;
  unint64_t v415;
  int v416;
  int v417;
  unsigned __int8 *v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  JSC::JSString *v423;
  int v424;
  unsigned __int8 *v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  JSC::JSString *v429;
  int v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v435;
  WTF::StringImpl *v436;
  unint64_t v437;
  JSC::VM *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  _DWORD *v442;
  _QWORD v443[2];
  uint64_t v444;
  char v445;
  int8x16_t **v446;
  uint64_t v447;
  JSC::VM *__dst;
  char v449;
  unint64_t v450;
  unint64_t v451;
  _DWORD *v452;
  _QWORD v453[2];
  uint64_t v454;
  char v455;
  int8x16_t **v456;
  uint64_t v457;
  char __s[8];
  uint64_t v459;
  uint64_t vars0;

  v9 = a3;
  v10 = (JSC::JSString *)this;
  v11 = a1;
  v459 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = vars0;
  if ((a3 & 0x80000000) != 0)
  {
    if ((_DWORD)a3 == -1)
    {
      v13 = *(unsigned __int8 *)(this + 5);
      if (this && (v13 & 0xFE) == 0x24)
      {
        v14 = *(_QWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
        v15 = v14[288];
        v16 = (v15 & 1) != 0 ? (v15 >> 1) & 3 : *(unsigned __int8 *)(v15 + 4);
        if (v16 != 2)
        {
          v17 = v14[287];
          v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
          if (v18 != 2)
          {
            v19 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
            v20 = (v19 & 0x10) != 0 ? ((v19 & 0xE) + 10) >> 1 : (v19 >> 1) & 7;
            v21 = *((_DWORD *)v14 + v20 + 213);
            v22 = v21 ? 16 * (v21 & 0xFFFFFFFE) : 0;
            if (v22 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
              return 10;
            v117 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
            if (!v117)
              v117 = *(_QWORD *)(this + 16);
            if (v117 == v14[84] && !*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x20))
              return 10;
          }
        }
      }
      v437 = this;
      v118 = *(_QWORD *)(v12 + 41952);
      v119 = *(_QWORD *)(v118 + 40);
      a9.i64[0] = 0xFFFFFFFF00000000;
      v440 = 0xFFFFFFFF00000000;
      LOBYTE(v444) = 0;
      v445 = 0;
      v446 = 0;
      v447 = 0;
      v442 = 0;
      memset(v443, 0, 13);
      v441 = this;
      if ((this & 0xFFFE000000000002) != 0)
        goto LABEL_734;
      if (v13 > 0x16)
      {
        v120 = (JSC::VM *)v12;
        goto LABEL_173;
      }
      if (v13 != 2)
      {
LABEL_734:
        v367 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v437, (unint64_t)a1);
        if (!v367)
          goto LABEL_216;
        v10 = (JSC::JSString *)v367;
        v120 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_173:
        v121 = (char *)v10 + 6;
        v122 = v119 >> 4;
        v123 = (uint64_t)v10;
        if ((*((_BYTE *)v10 + 6) & 8) == 0)
        {
          v124 = v10;
          do
          {
            v125 = *(_DWORD *)v124 & 0xFFFFFFFE;
            v126 = 16 * v125;
            if (!(_DWORD)v122 || (v122 & ~*(_DWORD *)(16 * v125 + 0x20)) != 0)
              goto LABEL_202;
            v127 = *(_QWORD *)(16 * v125 + 0x58);
            if (!v127)
            {
              v128 = *(_QWORD *)(16 * v125 + 0x40);
              if (!v128 || *(_BYTE *)(v128 + 5) != 1 && *(_DWORD *)(v128 + 80) < 2u)
                goto LABEL_202;
              JSC::Structure::materializePropertyTable((JSC::Structure *)v126, v120, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (!v127)
                goto LABEL_202;
            }
            if (!*(_DWORD *)(v127 + 24))
              goto LABEL_202;
            v129 = *(_QWORD *)(v127 + 16);
            v130 = v129 & 0xFFFFFFFFFFFFFFFELL;
            v131 = *(unsigned int *)(v127 + 8);
            v132 = *(_DWORD *)(v119 + 16);
            if ((v129 & 1) != 0)
            {
              if ((v132 & 0x20) != 0)
                v132 = *(_DWORD *)(v119 + 32);
              v133 = *(_DWORD *)(v127 + 12);
              v134 = (v132 >> 8) & *(_QWORD *)&v133;
              v135 = *(unsigned __int8 *)(v130 + v134);
              if (!*(_BYTE *)(v130 + v134))
                goto LABEL_202;
              v136 = v130 + v131;
              v137 = 1;
              while (1)
              {
                v138 = *(_QWORD *)(v136 + 8 * (v135 - 1));
                if (v119 == (v138 & 0xFFFFFFFFFFFFLL))
                  break;
                v134 = ((_DWORD)v134 + v137) & v133;
                v135 = *(unsigned __int8 *)(v130 + v134);
                ++v137;
                if (!*(_BYTE *)(v130 + v134))
                  goto LABEL_202;
              }
              a6 = (v138 >> 16) & 0xFF00000000 | HIBYTE(v138);
            }
            else
            {
              if ((v132 & 0x20) != 0)
                v132 = *(_DWORD *)(v119 + 32);
              v139 = *(_DWORD *)(v127 + 12);
              v140 = v139 & (v132 >> 8);
              v141 = *(_DWORD *)(v130 + 4 * v140);
              if (!v141)
                goto LABEL_202;
              v142 = v130 + 4 * v131;
              v143 = 1;
              while (1)
              {
                v144 = (v141 - 1);
                if (v119 == *(_QWORD *)(v142 + 16 * v144))
                  break;
                v140 = (v140 + v143) & v139;
                v141 = *(_DWORD *)(v130 + 4 * v140);
                ++v143;
                if (!v141)
                  goto LABEL_202;
              }
              a6 = *(unsigned int *)(v142 + 16 * v144 + 8) | ((unint64_t)*(unsigned __int8 *)(v142 + 16 * v144 + 12) << 32);
            }
            if ((_DWORD)a6 != -1)
            {
              a5 = HIDWORD(a6);
              if ((int)a6 <= 63)
              {
                v149 = (uint64_t)v124 + 16;
                v150 = a6 << 32;
              }
              else
              {
                v149 = *((_QWORD *)v124 + 1) - 8;
                v150 = 0x3F00000000 - (a6 << 32);
              }
              a4 = *(_QWORD *)(v149 + (v150 >> 29));
              if ((a4 & 0xFFFE000000000002) == 0)
              {
                v151 = *(unsigned __int8 *)(a4 + 5);
                if (v151 == 5)
                {
                  v155 = (unsigned int *)v124;
                  v156 = (uint64_t)v120;
                  goto LABEL_234;
                }
                if (v151 == 6)
                {
                  v165 = *(_DWORD *)(v126 + 16) & 3;
                  v166 = *(_QWORD *)(a4 + 16);
                  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
                  {
                    v168 = *(int8x16_t ***)(a4 + 24);
                    v167 = *(_QWORD *)(a4 + 32);
                    v438 = *(JSC::VM **)(a4 + 8);
                    v439 = v166;
                    LODWORD(v440) = HIDWORD(a6);
                    v442 = v124;
                    goto LABEL_260;
                  }
                  v438 = *(JSC::VM **)(a4 + 8);
                  v439 = v166;
                  LODWORD(v440) = HIDWORD(a6);
                  v442 = v124;
                  goto LABEL_553;
                }
              }
              v438 = (JSC::VM *)a4;
              v442 = v124;
LABEL_224:
              v440 = __PAIR64__(a6, a5);
              LOWORD(v443[1]) = 257;
              goto LABEL_235;
            }
LABEL_202:
            if ((*v121 & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v124, v120, v119, (uint64_t)&v438) & 1) != 0)
            {
              goto LABEL_235;
            }
            v123 = *(_QWORD *)(v126 + 48);
            if (!v123)
              v123 = *((_QWORD *)v124 + 2);
            if ((v123 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v123 + 5) < 0x17u)
            {
              if (!v119)
                goto LABEL_216;
              v145 = *(_DWORD *)(v119 + 16);
              if ((v145 & 0x20) != 0)
                goto LABEL_216;
              v146 = *(_WORD **)(v119 + 8);
              v147 = *(unsigned int *)(v119 + 4);
              if ((v145 & 4) == 0)
              {
                if ((_DWORD)v147)
                {
                  v148 = (unsigned __int16)*v146 - 48;
                  if (v148 <= 9 && (*v146 != 48 || v147 <= 1))
                  {
                    v152 = v147 - 1;
                    v153 = v146 + 1;
                    while (v152)
                    {
                      if (v148 > 0x19999999)
                        goto LABEL_216;
                      v154 = *v153 - 48;
                      if (v154 > 9)
                        goto LABEL_216;
                      v92 = __CFADD__(v154, 10 * v148);
                      v148 = v154 + 10 * v148;
                      --v152;
                      ++v153;
                      v23 = 10;
                      if (v92)
                        goto LABEL_255;
                    }
                    goto LABEL_608;
                  }
                }
                goto LABEL_216;
              }
              if (!(_DWORD)v147)
                goto LABEL_216;
              v148 = *(unsigned __int8 *)v146 - 48;
              if (v148 > 9 || v147 >= 2 && *(_BYTE *)v146 == 48)
                goto LABEL_216;
              v323 = v147 - 1;
              v324 = (unsigned __int8 *)v146 + 1;
              while (v323)
              {
                if (v148 > 0x19999999)
                  goto LABEL_216;
                v325 = *v324 - 48;
                if (v325 > 9)
                  goto LABEL_216;
                v92 = __CFADD__(v325, 10 * v148);
                v148 = v325 + 10 * v148;
                --v323;
                ++v324;
                v23 = 10;
                if (v92)
                  goto LABEL_255;
              }
LABEL_608:
              if (v148 == -1)
              {
LABEL_216:
                v23 = 10;
                goto LABEL_255;
              }
              v326 = v148;
              v327 = *((_QWORD *)a1 + 7);
              while (2)
              {
                v328 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v329 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v328 + 0x4C) + 0x70))(v10, a1, v326, &v438);
                if (*(_DWORD *)(v327 + 80))
                {
                  v332 = *(_DWORD *)(v327 + 80);
                  if ((v332 & 0x27) != 0 && (v332 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v327 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v327 + 16))
                    goto LABEL_216;
                }
                if ((v329 & 1) != 0)
                  goto LABEL_235;
                if (BYTE2(v443[1]) == 3)
                {
                  if (BYTE4(v443[1]))
                    goto LABEL_216;
                  v330 = *((unsigned __int8 *)v10 + 5);
                  if (v330 != 61)
                    goto LABEL_614;
                }
                else
                {
                  v330 = *((unsigned __int8 *)v10 + 5);
                  if (v330 == 61)
                  {
                    if (BYTE2(v443[1]) == 1)
                      goto LABEL_216;
                  }
                  else
                  {
LABEL_614:
                    if ((v330 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v10 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v449 = 0;
                        v335 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                        v334 = v336 ? v335 : 0;
                      }
                      else
                      {
                        v334 = *((_QWORD *)v10 + 3);
                      }
                      if (v334 <= v326)
                        goto LABEL_216;
                    }
                  }
                }
                if ((*(_WORD *)(v328 + 12) & 0x800) == 0 || BYTE2(v443[1]) == 3)
                {
                  v331 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v331)
                    v331 = *((_QWORD *)v10 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v331 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v10, a1);
                  }
                  else
                  {
                    v331 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v331)
                      v331 = *((_QWORD *)v10 + 2);
                  }
                  if (*(_DWORD *)(v327 + 80))
                  {
                    v333 = *(_DWORD *)(v327 + 80);
                    if ((v333 & 0x27) != 0 && (v333 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v327 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v327 + 16))
                      goto LABEL_216;
                  }
                }
                if ((v331 & 0xFFFE000000000002) != 0)
                  goto LABEL_216;
                v10 = (JSC::JSString *)v331;
                v23 = 10;
                if (*(unsigned __int8 *)(v331 + 5) <= 0x16u)
                  goto LABEL_255;
                continue;
              }
            }
            v121 = (_BYTE *)(v123 + 6);
            v124 = (JSC::JSString *)v123;
          }
          while ((*(_BYTE *)(v123 + 6) & 8) == 0);
        }
        v435 = v123;
        if (v119)
        {
          v169 = *(_DWORD *)(v119 + 16);
          if ((v169 & 0x20) == 0)
          {
            v170 = *(_BYTE **)(v119 + 8);
            v171 = *(unsigned int *)(v119 + 4);
            if ((v169 & 4) != 0)
            {
              if ((_DWORD)v171)
              {
                v172 = *v170 - 48;
                if (v172 <= 9 && (v171 < 2 || *v170 != 48))
                {
                  v383 = v171 - 1;
                  v384 = v170 + 1;
                  while (v383)
                  {
                    if (v172 <= 0x19999999)
                    {
                      v385 = *v384 - 48;
                      if (v385 <= 9)
                      {
                        v92 = __CFADD__(v385, 10 * v172);
                        v172 = v385 + 10 * v172;
                        --v383;
                        ++v384;
                        if (!v92)
                          continue;
                      }
                    }
                    goto LABEL_270;
                  }
LABEL_785:
                  if (v172 != -1)
                  {
                    v386 = v172;
                    v387 = *((_QWORD *)a1 + 7);
                    while (1)
                    {
                      v388 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                      v389 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v388 + 0x4C) + 0x70))(v10, a1, v386, &v438);
                      v390 = v389;
                      if (*(_DWORD *)(v387 + 80))
                      {
                        v393 = *(_DWORD *)(v387 + 80);
                        if ((v393 & 0x27) != 0 && (v393 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v387 + 64), 7u, a3, a4, a5, a6, a7, a8);
                        v394 = *(_QWORD *)(v387 + 16);
                        if (v394)
                          v395 = 1;
                        else
                          v395 = v390;
                        if ((v395 & 1) != 0)
                        {
                          if (!v394)
                            goto LABEL_235;
                          goto LABEL_216;
                        }
                      }
                      else if ((v389 & 1) != 0)
                      {
                        goto LABEL_235;
                      }
                      if (BYTE2(v443[1]) == 3)
                      {
                        if (BYTE4(v443[1]))
                          goto LABEL_216;
                        v391 = *((unsigned __int8 *)v10 + 5);
                        if (v391 == 61)
                          goto LABEL_792;
                      }
                      else
                      {
                        v391 = *((unsigned __int8 *)v10 + 5);
                        if (v391 == 61)
                        {
                          if (BYTE2(v443[1]) == 1)
                            goto LABEL_216;
                          goto LABEL_792;
                        }
                      }
                      if ((v391 - 39) <= 0xA)
                      {
                        if ((*((_BYTE *)v10 + 40) & 7u) > 2)
                        {
                          LOBYTE(__dst) = 0;
                          v449 = 0;
                          v398 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                          v396 = v399 ? v398 : 0;
                        }
                        else
                        {
                          v396 = *((_QWORD *)v10 + 3);
                        }
                        if (v396 <= v386)
                          goto LABEL_216;
                      }
LABEL_792:
                      if ((*(_WORD *)(v388 + 12) & 0x800) == 0 || BYTE2(v443[1]) == 3)
                      {
                        v392 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                        if (!v392)
                          v392 = *((_QWORD *)v10 + 2);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v392 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v10, a1);
                        }
                        else
                        {
                          v392 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                          if (!v392)
                            v392 = *((_QWORD *)v10 + 2);
                        }
                        if (*(_DWORD *)(v387 + 80))
                        {
                          v397 = *(_DWORD *)(v387 + 80);
                          if ((v397 & 0x27) != 0 && (v397 & 0x20) == 0)
                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v387 + 64), 7u, a3, a4, a5, a6, a7, a8);
                          if (*(_QWORD *)(v387 + 16))
                            goto LABEL_216;
                        }
                      }
                      if ((v392 & 0xFFFE000000000002) != 0)
                        goto LABEL_216;
                      v10 = (JSC::JSString *)v392;
                      v23 = 10;
                      if (*(unsigned __int8 *)(v392 + 5) <= 0x16u)
                        goto LABEL_255;
                    }
                  }
                }
              }
            }
            else if ((_DWORD)v171)
            {
              v172 = *(unsigned __int16 *)v170 - 48;
              if (v172 <= 9 && (*(_WORD *)v170 != 48 || v171 <= 1))
              {
                v285 = v171 - 1;
                v286 = (unsigned __int16 *)(v170 + 2);
                while (v285)
                {
                  if (v172 <= 0x19999999)
                  {
                    v287 = *v286 - 48;
                    if (v287 <= 9)
                    {
                      v92 = __CFADD__(v287, 10 * v172);
                      v172 = v287 + 10 * v172;
                      --v285;
                      ++v286;
                      if (!v92)
                        continue;
                    }
                  }
                  goto LABEL_270;
                }
                goto LABEL_785;
              }
            }
          }
        }
LABEL_270:
        v173 = *((_QWORD *)a1 + 7);
        while (1)
        {
          v174 = *(_DWORD *)v435 & 0xFFFFFFFE;
          v175 = 16 * v174;
          if ((*(_BYTE *)(v435 + 6) & 8) == 0)
          {
            if ((_DWORD)v122 && (v122 & ~*(_DWORD *)(16 * v174 + 0x20)) == 0)
            {
              v176 = *(_QWORD *)(16 * v174 + 0x58);
              if (v176
                || (v177 = *(_QWORD *)(16 * v174 + 0x40)) != 0
                && (*(_BYTE *)(v177 + 5) == 1 || *(_DWORD *)(v177 + 80) >= 2u)
                && (JSC::Structure::materializePropertyTable((JSC::Structure *)v175, (JSC::VM *)v173, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v176))
              {
                if (*(_DWORD *)(v176 + 24))
                {
                  v178 = *(_QWORD *)(v176 + 16);
                  v179 = v178 & 0xFFFFFFFFFFFFFFFELL;
                  v180 = *(unsigned int *)(v176 + 8);
                  v181 = *(_DWORD *)(v119 + 16);
                  if ((v178 & 1) != 0)
                  {
                    if ((v181 & 0x20) != 0)
                      v181 = *(_DWORD *)(v119 + 32);
                    v182 = *(_DWORD *)(v176 + 12);
                    v183 = (v181 >> 8) & *(_QWORD *)&v182;
                    v184 = *(unsigned __int8 *)(v179 + v183);
                    if (*(_BYTE *)(v179 + v183))
                    {
                      v185 = v179 + v180;
                      v186 = 1;
                      while (1)
                      {
                        v187 = *(_QWORD *)(v185 + 8 * (v184 - 1));
                        if (v119 == (v187 & 0xFFFFFFFFFFFFLL))
                          break;
                        v183 = ((_DWORD)v183 + v186) & v182;
                        v184 = *(unsigned __int8 *)(v179 + v183);
                        ++v186;
                        if (!*(_BYTE *)(v179 + v183))
                          goto LABEL_299;
                      }
                      a6 = (v187 >> 16) & 0xFF00000000 | HIBYTE(v187);
LABEL_296:
                      if ((_DWORD)a6 != -1)
                      {
                        a5 = HIDWORD(a6);
                        if ((int)a6 <= 63)
                        {
                          v281 = v435 + 16;
                          v282 = a6 << 32;
                        }
                        else
                        {
                          v281 = *(_QWORD *)(v435 + 8) - 8;
                          v282 = 0x3F00000000 - (a6 << 32);
                        }
                        a4 = *(_QWORD *)(v281 + (v282 >> 29));
                        if ((a4 & 0xFFFE000000000002) == 0)
                        {
                          v308 = *(unsigned __int8 *)(a4 + 5);
                          if (v308 != 5)
                          {
                            if (v308 != 6)
                              goto LABEL_562;
                            v165 = *(_DWORD *)(v175 + 16) & 3;
                            v318 = *(_QWORD *)(a4 + 16);
                            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                            {
                              v168 = *(int8x16_t ***)(a4 + 24);
                              v167 = *(_QWORD *)(a4 + 32);
                              v438 = *(JSC::VM **)(a4 + 8);
                              v439 = v318;
                              LODWORD(v440) = HIDWORD(a6);
                              v442 = (_DWORD *)v435;
LABEL_260:
                              BYTE1(v443[1]) = 3;
                              if (v165 != 2)
                                LOBYTE(v443[1]) = 1;
                              BYTE3(v443[1]) = 1;
                              v446 = v168;
                              v447 = v167;
LABEL_235:
                              if (BYTE1(v443[1]) == 1)
                              {
                                v23 = (uint64_t)v438;
                              }
                              else
                              {
                                if (BYTE1(v443[1]) == 2)
                                {
                                  v157 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v438, a1, a3, a4, a5, a6, a7, a8);
                                }
                                else
                                {
                                  v158 = (unint64_t)v442;
                                  v159 = *(_QWORD *)(16 * (*v442 & 0xFFFFFFFE) + 0x28);
                                  if ((v440 & 0x20) != 0)
                                    v158 = v441;
                                  if (BYTE3(v443[1]) != 1)
                                    goto LABEL_253;
                                  if ((v158 & 0xFFFE000000000002) != 0)
                                    goto LABEL_593;
                                  v160 = *(unsigned int *)(16 * (*(_DWORD *)v158 & 0xFFFFFFFE) + 0x4C);
                                  v161 = *(_DWORD *)(16 * (*(_DWORD *)v158 & 0xFFFFFFFE) + 0x4C) != 0;
                                  v162 = 16 * v160;
                                  if ((_DWORD)v160)
                                    v163 = v446 == (int8x16_t **)v162;
                                  else
                                    v163 = 1;
                                  if (!v163)
                                  {
                                    do
                                    {
                                      v162 = *(_QWORD *)(v162 + 16);
                                      v161 = v162 != 0;
                                    }
                                    while ((int8x16_t **)v162 != v446 && v162 != 0);
                                  }
                                  if (!v161)
                                  {
LABEL_593:
                                    __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
                                    v157 = JSC::throwDOMAttributeGetterTypeError(v159, &__dst, v446, (WTF::StringImpl *)v119);
                                  }
                                  else
                                  {
LABEL_253:
                                    v157 = ((uint64_t (*)(unint64_t))v438)(v159);
                                  }
                                }
                                v23 = v157;
                              }
LABEL_255:
                              if (v445)
                              {
                                v42 = v444;
                                v43 = *(_DWORD *)(v444 + 4);
                                if (!v43)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19846FB58);
                                }
                                goto LABEL_64;
                              }
                              return v23;
                            }
                            v438 = *(JSC::VM **)(a4 + 8);
                            v439 = v318;
                            LODWORD(v440) = HIDWORD(a6);
                            v442 = (_DWORD *)v435;
LABEL_553:
                            BYTE1(v443[1]) = 3;
                            if (v165 != 2)
                              LOBYTE(v443[1]) = 1;
                            goto LABEL_235;
                          }
                          v155 = (unsigned int *)v435;
                          v156 = v173;
LABEL_234:
                          JSC::JSObject::fillGetterPropertySlot(v155, v156, (uint64_t)&v438, a4, a5, a6);
                          goto LABEL_235;
                        }
LABEL_562:
                        v438 = (JSC::VM *)a4;
                        v442 = (_DWORD *)v435;
                        goto LABEL_224;
                      }
                    }
                  }
                  else
                  {
                    if ((v181 & 0x20) != 0)
                      v181 = *(_DWORD *)(v119 + 32);
                    v188 = *(_DWORD *)(v176 + 12);
                    v189 = v188 & (v181 >> 8);
                    v190 = *(_DWORD *)(v179 + 4 * v189);
                    if (v190)
                    {
                      v191 = v179 + 4 * v180;
                      v192 = 1;
                      while (1)
                      {
                        v193 = (v190 - 1);
                        if (v119 == *(_QWORD *)(v191 + 16 * v193))
                          break;
                        v189 = (v189 + v192) & v188;
                        v190 = *(_DWORD *)(v179 + 4 * v189);
                        ++v192;
                        if (!v190)
                          goto LABEL_299;
                      }
                      a6 = *(unsigned int *)(v191 + 16 * v193 + 8) | ((unint64_t)*(unsigned __int8 *)(v191 + 16 * v193 + 12) << 32);
                      goto LABEL_296;
                    }
                  }
                }
              }
            }
LABEL_299:
            if ((*(_BYTE *)(v435 + 6) & 0x20) != 0
              && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v435, (JSC::VM *)v173, v119, (uint64_t)&v438) & 1) != 0)
            {
              goto LABEL_235;
            }
            goto LABEL_300;
          }
          v198 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(16 * v174 + 0x4C) + 0x68))(v435, a1, v119, &v438);
          if (*(_DWORD *)(v173 + 80))
          {
            v224 = *(_DWORD *)(v173 + 80);
            if ((v224 & 0x27) != 0 && (v224 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v173 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v173 + 16))
              goto LABEL_216;
          }
          if ((v198 & 1) != 0)
            goto LABEL_235;
          if (BYTE2(v443[1]) == 3)
          {
            if (BYTE4(v443[1]))
              goto LABEL_216;
            v199 = *(unsigned __int8 *)(v435 + 5);
            if (v199 == 61)
              goto LABEL_300;
          }
          else
          {
            v199 = *(unsigned __int8 *)(v435 + 5);
            if (v199 == 61)
            {
              if (BYTE2(v443[1]) == 1)
                goto LABEL_216;
              goto LABEL_300;
            }
          }
          if (!v119)
            goto LABEL_300;
          if ((v199 - 50) < 0xFFFFFFF5)
            goto LABEL_300;
          v200 = *(_DWORD *)(v119 + 16);
          if ((v200 & 0x20) != 0)
            goto LABEL_300;
          v201 = *(unsigned int *)(v119 + 4);
          if (!(_DWORD)v201)
            goto LABEL_300;
          v202 = *(unsigned __int8 **)(v119 + 8);
          if ((v200 & 4) != 0)
          {
            v203 = *v202;
            if ((_DWORD)v201 == 1)
            {
LABEL_327:
              if ((v203 - 48) < 0xA)
                goto LABEL_216;
              goto LABEL_300;
            }
            if (v203 == 45)
            {
              v203 = v202[1];
              goto LABEL_331;
            }
            if ((v203 - 48) < 0xA)
              goto LABEL_342;
            if ((_DWORD)v201 == 8)
              goto LABEL_341;
          }
          else
          {
            v203 = *(unsigned __int16 *)v202;
            if ((_DWORD)v201 == 1)
              goto LABEL_327;
            if (v203 == 45)
            {
              v203 = *((unsigned __int16 *)v202 + 1);
LABEL_331:
              if ((v203 - 48) < 0xA)
              {
                if ((_DWORD)v201 == 2)
                  goto LABEL_216;
                goto LABEL_342;
              }
              if ((_DWORD)v201 != 9)
                goto LABEL_300;
LABEL_341:
              if (v203 != 73)
                goto LABEL_300;
              goto LABEL_342;
            }
            if ((v203 - 48) < 0xA || (_DWORD)v201 == 8 && v203 == 73)
              goto LABEL_342;
          }
          if ((_DWORD)v201 != 3 || v203 != 78)
            goto LABEL_300;
LABEL_342:
          v432 = v432 & 0xFFFFFF0000000000 | v201 | ((unint64_t)((v200 >> 2) & 1) << 32);
          JSC::jsToNumber(v202, v432);
          v205 = (v204 >> 52) & 0x7FF;
          if ((_DWORD)v205 == 2047)
          {
            if ((v204 & 0xFFFFFFFFFFFFFLL) != 0)
            {
              qmemcpy(__s, "NaN", 3);
              v206 = &__s[3];
            }
            else
            {
              if ((v204 & 0x8000000000000000) != 0)
              {
                __s[0] = 45;
                v212 = &__s[1];
              }
              else
              {
                v212 = __s;
              }
              *(_QWORD *)v212 = 0x7974696E69666E49;
              v206 = v212 + 8;
            }
            goto LABEL_356;
          }
          v207 = v204 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v204 & 0x8000000000000000) != 0 && v207)
          {
            __s[0] = 45;
            v208 = &__s[1];
          }
          else
          {
            if (!v207)
            {
              __s[0] = 48;
              v206 = &__s[1];
              goto LABEL_356;
            }
            v208 = __s;
          }
          v209 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v204 & 0x800FFFFFFFFFFFFFLL, v205);
          v206 = WTF::dragonbox::detail::to_shortest(v209, v210, (uint64_t)v208, v211);
LABEL_356:
          *v206 = 0;
          v213 = strlen(__s);
          memcpy(&__dst, __s, v213);
          *((_BYTE *)&__dst + v213) = 0;
          v214 = *(unsigned int *)(v119 + 4);
          v215 = *(unsigned __int8 **)(v119 + 8);
          if ((*(_BYTE *)(v119 + 16) & 4) != 0)
          {
            if ((_DWORD)v214)
            {
              p_dst = &__dst;
              v221 = *(unsigned int *)(v119 + 4);
              do
              {
                v223 = *(unsigned __int8 *)p_dst;
                p_dst = (JSC::VM **)((char *)p_dst + 1);
                v222 = v223;
                if (!v223 || *v215 != v222)
                  goto LABEL_300;
                ++v215;
              }
              while (--v221);
            }
          }
          else if ((_DWORD)v214)
          {
            v216 = &__dst;
            v217 = *(unsigned int *)(v119 + 4);
            do
            {
              v219 = *(unsigned __int8 *)v216;
              v216 = (JSC::VM **)((char *)v216 + 1);
              v218 = v219;
              if (!v219 || *(unsigned __int16 *)v215 != v218)
                goto LABEL_300;
              v215 += 2;
            }
            while (--v217);
          }
          if (!*((_BYTE *)&__dst + v214))
            goto LABEL_216;
LABEL_300:
          if ((*(_WORD *)(v175 + 12) & 0x800) != 0)
          {
            v194 = *(_DWORD *)v435;
            if (BYTE2(v443[1]) != 3)
            {
              v196 = 16 * (v194 & 0xFFFFFFFE);
              if ((*(_WORD *)(v196 + 12) & 0x800) != 0)
              {
                v195 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v196 + 76)
                                                                                 + 0xB0))(v435, a1);
              }
              else
              {
                v195 = *(_QWORD *)(v196 + 48);
                if (!v195)
                  v195 = *(_QWORD *)(v435 + 16);
              }
              if (*(_DWORD *)(v173 + 80))
              {
                v197 = *(_DWORD *)(v173 + 80);
                if ((v197 & 0x27) != 0 && (v197 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v173 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v173 + 16))
                  goto LABEL_216;
              }
              goto LABEL_304;
            }
          }
          else
          {
            v194 = *(_DWORD *)v435;
          }
          v195 = *(_QWORD *)(16 * (v194 & 0xFFFFFFFE) + 0x30);
          if (!v195)
            v195 = *(_QWORD *)(v435 + 16);
LABEL_304:
          if ((v195 & 0xFFFE000000000002) != 0)
            goto LABEL_216;
          v435 = v195;
          v23 = 10;
          if (*(unsigned __int8 *)(v195 + 5) <= 0x16u)
            goto LABEL_255;
        }
      }
      if (*(_QWORD *)(v118 + 1768) == v119)
      {
        v350 = *(_QWORD *)(this + 8);
        if ((v350 & 1) != 0)
          v351 = (unsigned int *)(this + 16);
        else
          v351 = (unsigned int *)(v350 + 4);
        v352 = *v351;
        if ((v352 & 0x80000000) != 0)
          Index = (JSC::VM *)(COERCE__INT64((double)v352) + 0x2000000000000);
        else
          Index = (JSC::VM *)(v352 | 0xFFFE000000000000);
        v354 = 14;
        goto LABEL_709;
      }
      if (v119)
      {
        v364 = *(_DWORD *)(v119 + 16);
        if ((v364 & 0x20) == 0)
        {
          v365 = *(_BYTE **)(v119 + 8);
          v366 = *(unsigned int *)(v119 + 4);
          if ((v364 & 4) != 0)
          {
            if (!(_DWORD)v366)
              goto LABEL_731;
            a3 = *v365 - 48;
            if (a3 > 9)
              goto LABEL_731;
            if (v366 >= 2 && *v365 == 48)
              goto LABEL_731;
            v419 = v365 + 1;
            v420 = v366 - 1;
            while (v420)
            {
              if (a3 > 0x19999999)
                goto LABEL_731;
              v421 = *v419 - 48;
              if (v421 > 9)
                goto LABEL_731;
              v355 = 0;
              v92 = __CFADD__(v421, 10 * a3);
              a3 = v421 + 10 * (_DWORD)a3;
              ++v419;
              --v420;
              if (v92)
                goto LABEL_732;
            }
          }
          else
          {
            if (!(_DWORD)v366)
              goto LABEL_731;
            a3 = *(unsigned __int16 *)v365 - 48;
            if (a3 > 9)
              goto LABEL_731;
            if (*(_WORD *)v365 == 48 && v366 > 1)
              goto LABEL_731;
            v373 = (unsigned __int16 *)(v365 + 2);
            v374 = v366 - 1;
            while (v374)
            {
              if (a3 > 0x19999999)
                goto LABEL_731;
              v375 = *v373 - 48;
              if (v375 > 9)
                goto LABEL_731;
              v355 = 0;
              v92 = __CFADD__(v375, 10 * a3);
              a3 = v375 + 10 * (_DWORD)a3;
              ++v373;
              --v374;
              if (v92)
                goto LABEL_732;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v422 = *(_QWORD *)(this + 8);
            v423 = (JSC::JSString *)((v422 & 1) != 0 ? this + 16 : v422 + 4);
            if (*(_DWORD *)v423 > a3)
            {
              Index = (JSC::VM *)JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v12 + 80))
                goto LABEL_921;
              v424 = *(_DWORD *)(v12 + 80);
              if ((v424 & 0x27) != 0 && (v424 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v12 + 16))
              {
LABEL_921:
                v354 = 10;
LABEL_709:
                v438 = Index;
                LODWORD(v440) = v354;
                v442 = 0;
                v355 = 1;
                BYTE1(v443[1]) = 1;
                goto LABEL_732;
              }
            }
          }
        }
      }
LABEL_731:
      v355 = 0;
LABEL_732:
      if (*(_DWORD *)(v12 + 80))
      {
        v416 = *(_DWORD *)(v12 + 80);
        if ((v416 & 0x27) != 0 && (v416 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_216;
      }
      if ((v355 & 1) != 0)
        goto LABEL_235;
      goto LABEL_734;
    }
    v437 = this;
    JSC::Identifier::from((uint64_t **)v12, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v436);
    v53 = (unint64_t)v436;
    v54 = (JSC::JSString *)v437;
    v55.i64[0] = 0xFFFFFFFF00000000;
    v440 = 0xFFFFFFFF00000000;
    LOBYTE(v444) = 0;
    v445 = 0;
    v446 = 0;
    v447 = 0;
    v442 = 0;
    memset(v443, 0, 13);
    v441 = v437;
    if ((v437 & 0xFFFE000000000002) != 0)
      goto LABEL_744;
    v56 = *((_QWORD *)v11 + 7);
    v57 = *(unsigned __int8 *)(v437 + 5);
    if (v57 > 0x16)
      goto LABEL_71;
    if (v57 != 2)
    {
LABEL_744:
      v371 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v437, (unint64_t)v11);
      if (!v371)
        goto LABEL_114;
      v54 = (JSC::JSString *)v371;
      v56 = *((_QWORD *)v11 + 7);
LABEL_71:
      v58 = (char *)v54 + 6;
      v59 = v53 >> 4;
      v60 = (uint64_t)v54;
      if ((*((_BYTE *)v54 + 6) & 8) == 0)
      {
        v61 = v54;
        do
        {
          v62 = *(_DWORD *)v61 & 0xFFFFFFFE;
          v63 = 16 * v62;
          if (!(_DWORD)v59 || (v59 & ~*(_DWORD *)(16 * v62 + 0x20)) != 0)
            goto LABEL_100;
          v64 = *(_QWORD *)(16 * v62 + 0x58);
          if (!v64)
          {
            v65 = *(_QWORD *)(16 * v62 + 0x40);
            if (!v65 || *(_BYTE *)(v65 + 5) != 1 && *(_DWORD *)(v65 + 80) < 2u)
              goto LABEL_100;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v63, (JSC::VM *)v56, 1, (const JSC::PropertyTable *)v48, v49, v50, v51, v52);
            if (!v64)
              goto LABEL_100;
          }
          if (!*(_DWORD *)(v64 + 24))
            goto LABEL_100;
          v66 = *(_QWORD *)(v64 + 16);
          v67 = v66 & 0xFFFFFFFFFFFFFFFELL;
          v68 = *(unsigned int *)(v64 + 8);
          v69 = *(_DWORD *)(v53 + 16);
          if ((v66 & 1) != 0)
          {
            if ((v69 & 0x20) != 0)
              v69 = *(_DWORD *)(v53 + 32);
            v70 = *(_DWORD *)(v64 + 12);
            v71 = (v69 >> 8) & *(_QWORD *)&v70;
            v72 = *(unsigned __int8 *)(v67 + v71);
            if (!*(_BYTE *)(v67 + v71))
              goto LABEL_100;
            v73 = v67 + v68;
            v74 = 1;
            while (1)
            {
              v75 = *(_QWORD *)(v73 + 8 * (v72 - 1));
              if (v53 == (v75 & 0xFFFFFFFFFFFFLL))
                break;
              v71 = ((_DWORD)v71 + v74) & v70;
              v72 = *(unsigned __int8 *)(v67 + v71);
              ++v74;
              if (!*(_BYTE *)(v67 + v71))
                goto LABEL_100;
            }
            v50 = (v75 >> 16) & 0xFF00000000 | HIBYTE(v75);
          }
          else
          {
            if ((v69 & 0x20) != 0)
              v69 = *(_DWORD *)(v53 + 32);
            v76 = *(_DWORD *)(v64 + 12);
            v77 = v76 & (v69 >> 8);
            v78 = *(_DWORD *)(v67 + 4 * v77);
            if (!v78)
              goto LABEL_100;
            v79 = v67 + 4 * v68;
            v80 = 1;
            while (1)
            {
              v81 = (v78 - 1);
              if (v53 == *(_QWORD *)(v79 + 16 * v81))
                break;
              v77 = (v77 + v80) & v76;
              v78 = *(_DWORD *)(v67 + 4 * v77);
              ++v80;
              if (!v78)
                goto LABEL_100;
            }
            v50 = *(unsigned int *)(v79 + 16 * v81 + 8) | ((unint64_t)*(unsigned __int8 *)(v79 + 16 * v81 + 12) << 32);
          }
          if ((_DWORD)v50 != -1)
          {
            v49 = HIDWORD(v50);
            if ((int)v50 <= 63)
            {
              v86 = (uint64_t)v61 + 16;
              v87 = v50 << 32;
            }
            else
            {
              v86 = *((_QWORD *)v61 + 1) - 8;
              v87 = 0x3F00000000 - (v50 << 32);
            }
            v48 = *(_QWORD *)(v86 + (v87 >> 29));
            if ((v48 & 0xFFFE000000000002) == 0)
            {
              v88 = *(unsigned __int8 *)(v48 + 5);
              if (v88 == 5)
              {
                v93 = (unsigned int *)v61;
                v94 = v56;
                goto LABEL_133;
              }
              if (v88 == 6)
              {
                v113 = *(_DWORD *)(v63 + 16) & 3;
                v114 = *(_QWORD *)(v48 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v48 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v116 = *(int8x16_t ***)(v48 + 24);
                  v115 = *(_QWORD *)(v48 + 32);
                  v438 = *(JSC::VM **)(v48 + 8);
                  v439 = v114;
                  LODWORD(v440) = HIDWORD(v50);
                  v442 = v61;
                  goto LABEL_163;
                }
                v438 = *(JSC::VM **)(v48 + 8);
                v439 = v114;
                LODWORD(v440) = HIDWORD(v50);
                v442 = v61;
                goto LABEL_556;
              }
            }
            v438 = (JSC::VM *)v48;
            v442 = v61;
LABEL_123:
            v440 = __PAIR64__(v50, v49);
            LOWORD(v443[1]) = 257;
            goto LABEL_134;
          }
LABEL_100:
          if ((*v58 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v61, (JSC::VM *)v56, v53, (uint64_t)&v438) & 1) != 0)
          {
            goto LABEL_134;
          }
          v60 = *(_QWORD *)(v63 + 48);
          if (!v60)
            v60 = *((_QWORD *)v61 + 2);
          if ((v60 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v60 + 5) < 0x17u)
          {
            if (!v53)
              goto LABEL_114;
            v82 = *(_DWORD *)(v53 + 16);
            if ((v82 & 0x20) != 0)
              goto LABEL_114;
            v83 = *(_WORD **)(v53 + 8);
            v84 = *(unsigned int *)(v53 + 4);
            if ((v82 & 4) == 0)
            {
              if ((_DWORD)v84)
              {
                v85 = (unsigned __int16)*v83 - 48;
                if (v85 <= 9 && (*v83 != 48 || v84 <= 1))
                {
                  v89 = v83 + 1;
                  v90 = v84 - 1;
                  while (v90)
                  {
                    if (v85 > 0x19999999)
                      goto LABEL_114;
                    v91 = *v89 - 48;
                    if (v91 > 9)
                      goto LABEL_114;
                    v92 = __CFADD__(v91, 10 * v85);
                    v85 = v91 + 10 * v85;
                    ++v89;
                    --v90;
                    v23 = 10;
                    if (v92)
                      goto LABEL_154;
                  }
                  goto LABEL_660;
                }
              }
              goto LABEL_114;
            }
            if (!(_DWORD)v84)
              goto LABEL_114;
            v85 = *(unsigned __int8 *)v83 - 48;
            if (v85 > 9 || v84 >= 2 && *(_BYTE *)v83 == 48)
              goto LABEL_114;
            v337 = (unsigned __int8 *)v83 + 1;
            v338 = v84 - 1;
            while (v338)
            {
              if (v85 > 0x19999999)
                goto LABEL_114;
              v339 = *v337 - 48;
              if (v339 > 9)
                goto LABEL_114;
              v92 = __CFADD__(v339, 10 * v85);
              v85 = v339 + 10 * v85;
              ++v337;
              --v338;
              v23 = 10;
              if (v92)
                goto LABEL_154;
            }
LABEL_660:
            if (v85 == -1)
            {
LABEL_114:
              v23 = 10;
              goto LABEL_154;
            }
            v340 = v85;
            v341 = *((_QWORD *)a1 + 7);
            while (2)
            {
              v342 = 16 * (*(_DWORD *)v54 & 0xFFFFFFFE);
              v343 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v342 + 0x4C) + 0x70))(v54, a1, v340, &v438);
              if (*(_DWORD *)(v341 + 80))
              {
                v346 = *(_DWORD *)(v341 + 80);
                if ((v346 & 0x27) != 0 && (v346 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v341 + 64), 7u, v47, v48, v49, v50, v51, v52);
                if (*(_QWORD *)(v341 + 16))
                  goto LABEL_114;
              }
              if ((v343 & 1) != 0)
                goto LABEL_134;
              if (BYTE2(v443[1]) == 3)
              {
                if (BYTE4(v443[1]))
                  goto LABEL_114;
                v344 = *((unsigned __int8 *)v54 + 5);
                if (v344 != 61)
                  goto LABEL_666;
              }
              else
              {
                v344 = *((unsigned __int8 *)v54 + 5);
                if (v344 == 61)
                {
                  if (BYTE2(v443[1]) == 1)
                    goto LABEL_114;
                }
                else
                {
LABEL_666:
                  if ((v344 - 39) <= 0xA)
                  {
                    if ((*((_BYTE *)v54 + 40) & 7u) > 2)
                    {
                      LOBYTE(__dst) = 0;
                      v449 = 0;
                      v349 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v54, (uint64_t)&__dst, v47, v48, v49, v50, v51, v52);
                      v348 = (_BYTE)v46 ? v349 : 0;
                    }
                    else
                    {
                      v348 = *((_QWORD *)v54 + 3);
                    }
                    if (v348 <= v340)
                      goto LABEL_114;
                  }
                }
              }
              if ((*(_WORD *)(v342 + 12) & 0x800) == 0 || BYTE2(v443[1]) == 3)
              {
                v345 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                if (!v345)
                  v345 = *((_QWORD *)v54 + 2);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v345 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0xB0))(v54, a1);
                }
                else
                {
                  v345 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                  if (!v345)
                    v345 = *((_QWORD *)v54 + 2);
                }
                if (*(_DWORD *)(v341 + 80))
                {
                  v347 = *(_DWORD *)(v341 + 80);
                  if ((v347 & 0x27) != 0 && (v347 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v341 + 64), 7u, v47, v48, v49, v50, v51, v52);
                  if (*(_QWORD *)(v341 + 16))
                    goto LABEL_114;
                }
              }
              if ((v345 & 0xFFFE000000000002) != 0)
                goto LABEL_114;
              v54 = (JSC::JSString *)v345;
              v23 = 10;
              if (*(unsigned __int8 *)(v345 + 5) <= 0x16u)
                goto LABEL_154;
              continue;
            }
          }
          v58 = (_BYTE *)(v60 + 6);
          v61 = (JSC::JSString *)v60;
        }
        while ((*(_BYTE *)(v60 + 6) & 8) == 0);
      }
      v433 = v60;
      if (v53)
      {
        v225 = *(_DWORD *)(v53 + 16);
        if ((v225 & 0x20) == 0)
        {
          v226 = *(_BYTE **)(v53 + 8);
          v227 = *(unsigned int *)(v53 + 4);
          if ((v225 & 4) != 0)
          {
            if ((_DWORD)v227)
            {
              v228 = *v226 - 48;
              if (v228 <= 9 && (v227 < 2 || *v226 != 48))
              {
                v400 = v226 + 1;
                v401 = v227 - 1;
                while (v401)
                {
                  if (v228 <= 0x19999999)
                  {
                    v402 = *v400 - 48;
                    if (v402 <= 9)
                    {
                      v92 = __CFADD__(v402, 10 * v228);
                      v228 = v402 + 10 * v228;
                      ++v400;
                      --v401;
                      if (!v92)
                        continue;
                    }
                  }
                  goto LABEL_394;
                }
LABEL_842:
                if (v228 != -1)
                {
                  v403 = v228;
                  v404 = *((_QWORD *)a1 + 7);
                  while (1)
                  {
                    v405 = 16 * (*(_DWORD *)v54 & 0xFFFFFFFE);
                    v406 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v405 + 0x4C) + 0x70))(v54, a1, v403, &v438);
                    v407 = v406;
                    if (*(_DWORD *)(v404 + 80))
                    {
                      v410 = *(_DWORD *)(v404 + 80);
                      if ((v410 & 0x27) != 0 && (v410 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v404 + 64), 7u, v47, v48, v49, v50, v51, v52);
                      v411 = *(_QWORD *)(v404 + 16);
                      if (v411)
                        v412 = 1;
                      else
                        v412 = v407;
                      if ((v412 & 1) != 0)
                      {
                        if (!v411)
                          goto LABEL_134;
                        goto LABEL_114;
                      }
                    }
                    else if ((v406 & 1) != 0)
                    {
                      goto LABEL_134;
                    }
                    if (BYTE2(v443[1]) == 3)
                    {
                      if (BYTE4(v443[1]))
                        goto LABEL_114;
                      v408 = *((unsigned __int8 *)v54 + 5);
                      if (v408 == 61)
                        goto LABEL_849;
                    }
                    else
                    {
                      v408 = *((unsigned __int8 *)v54 + 5);
                      if (v408 == 61)
                      {
                        if (BYTE2(v443[1]) == 1)
                          goto LABEL_114;
                        goto LABEL_849;
                      }
                    }
                    if ((v408 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v54 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v449 = 0;
                        v415 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v54, (uint64_t)&__dst, v47, v48, v49, v50, v51, v52);
                        v414 = (_BYTE)v46 ? v415 : 0;
                      }
                      else
                      {
                        v414 = *((_QWORD *)v54 + 3);
                      }
                      if (v414 <= v403)
                        goto LABEL_114;
                    }
LABEL_849:
                    if ((*(_WORD *)(v405 + 12) & 0x800) == 0 || BYTE2(v443[1]) == 3)
                    {
                      v409 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                      if (!v409)
                        v409 = *((_QWORD *)v54 + 2);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v409 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0xB0))(v54, a1);
                      }
                      else
                      {
                        v409 = *(_QWORD *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x30);
                        if (!v409)
                          v409 = *((_QWORD *)v54 + 2);
                      }
                      if (*(_DWORD *)(v404 + 80))
                      {
                        v413 = *(_DWORD *)(v404 + 80);
                        if ((v413 & 0x27) != 0 && (v413 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v404 + 64), 7u, v47, v48, v49, v50, v51, v52);
                        if (*(_QWORD *)(v404 + 16))
                          goto LABEL_114;
                      }
                    }
                    if ((v409 & 0xFFFE000000000002) != 0)
                      goto LABEL_114;
                    v54 = (JSC::JSString *)v409;
                    v23 = 10;
                    if (*(unsigned __int8 *)(v409 + 5) <= 0x16u)
                      goto LABEL_154;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v227)
          {
            v228 = *(unsigned __int16 *)v226 - 48;
            if (v228 <= 9 && (*(_WORD *)v226 != 48 || v227 <= 1))
            {
              v288 = (unsigned __int16 *)(v226 + 2);
              v289 = v227 - 1;
              while (v289)
              {
                if (v228 <= 0x19999999)
                {
                  v290 = *v288 - 48;
                  if (v290 <= 9)
                  {
                    v92 = __CFADD__(v290, 10 * v228);
                    v228 = v290 + 10 * v228;
                    ++v288;
                    --v289;
                    if (!v92)
                      continue;
                  }
                }
                goto LABEL_394;
              }
              goto LABEL_842;
            }
          }
        }
      }
LABEL_394:
      v229 = *((_QWORD *)a1 + 7);
      while (1)
      {
        v230 = *(_DWORD *)v433 & 0xFFFFFFFE;
        v231 = 16 * v230;
        if ((*(_BYTE *)(v433 + 6) & 8) == 0)
        {
          if ((_DWORD)v59 && (v59 & ~*(_DWORD *)(16 * v230 + 0x20)) == 0)
          {
            v232 = *(_QWORD *)(16 * v230 + 0x58);
            if (v232
              || (v233 = *(_QWORD *)(16 * v230 + 0x40)) != 0
              && (*(_BYTE *)(v233 + 5) == 1 || *(_DWORD *)(v233 + 80) >= 2u)
              && (JSC::Structure::materializePropertyTable((JSC::Structure *)v231, (JSC::VM *)v229, 1, (const JSC::PropertyTable *)v48, v49, v50, v51, v52), v232))
            {
              if (*(_DWORD *)(v232 + 24))
              {
                v234 = *(_QWORD *)(v232 + 16);
                v235 = v234 & 0xFFFFFFFFFFFFFFFELL;
                v236 = *(unsigned int *)(v232 + 8);
                v237 = *(_DWORD *)(v53 + 16);
                if ((v234 & 1) != 0)
                {
                  if ((v237 & 0x20) != 0)
                    v237 = *(_DWORD *)(v53 + 32);
                  v238 = *(_DWORD *)(v232 + 12);
                  v239 = (v237 >> 8) & *(_QWORD *)&v238;
                  v240 = *(unsigned __int8 *)(v235 + v239);
                  if (*(_BYTE *)(v235 + v239))
                  {
                    v241 = v235 + v236;
                    v242 = 1;
                    while (1)
                    {
                      v243 = *(_QWORD *)(v241 + 8 * (v240 - 1));
                      if (v53 == (v243 & 0xFFFFFFFFFFFFLL))
                        break;
                      v239 = ((_DWORD)v239 + v242) & v238;
                      v240 = *(unsigned __int8 *)(v235 + v239);
                      ++v242;
                      if (!*(_BYTE *)(v235 + v239))
                        goto LABEL_423;
                    }
                    v50 = (v243 >> 16) & 0xFF00000000 | HIBYTE(v243);
LABEL_420:
                    if ((_DWORD)v50 != -1)
                    {
                      v49 = HIDWORD(v50);
                      if ((int)v50 <= 63)
                      {
                        v283 = v433 + 16;
                        v284 = v50 << 32;
                      }
                      else
                      {
                        v283 = *(_QWORD *)(v433 + 8) - 8;
                        v284 = 0x3F00000000 - (v50 << 32);
                      }
                      v48 = *(_QWORD *)(v283 + (v284 >> 29));
                      if ((v48 & 0xFFFE000000000002) == 0)
                      {
                        v309 = *(unsigned __int8 *)(v48 + 5);
                        if (v309 != 5)
                        {
                          if (v309 != 6)
                            goto LABEL_567;
                          v113 = *(_DWORD *)(v231 + 16) & 3;
                          v319 = *(_QWORD *)(v48 + 16);
                          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)))
                          {
                            v116 = *(int8x16_t ***)(v48 + 24);
                            v115 = *(_QWORD *)(v48 + 32);
                            v438 = *(JSC::VM **)(v48 + 8);
                            v439 = v319;
                            LODWORD(v440) = HIDWORD(v50);
                            v442 = (_DWORD *)v433;
LABEL_163:
                            BYTE1(v443[1]) = 3;
                            if (v113 != 2)
                              LOBYTE(v443[1]) = 1;
                            BYTE3(v443[1]) = 1;
                            v446 = v116;
                            v447 = v115;
LABEL_134:
                            if (BYTE1(v443[1]) == 1)
                            {
                              v23 = (uint64_t)v438;
                            }
                            else
                            {
                              if (BYTE1(v443[1]) == 2)
                              {
                                v95 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v438, a1, v47, v48, v49, v50, v51, v52);
                              }
                              else
                              {
                                v96 = (unint64_t)v442;
                                v97 = *(_QWORD *)(16 * (*v442 & 0xFFFFFFFE) + 0x28);
                                if ((v440 & 0x20) != 0)
                                  v96 = v441;
                                if (BYTE3(v443[1]) != 1)
                                  goto LABEL_152;
                                if ((v96 & 0xFFFE000000000002) != 0)
                                  goto LABEL_594;
                                v98 = *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C);
                                v99 = *(_DWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C) != 0;
                                v100 = 16 * v98;
                                if ((_DWORD)v98)
                                  v101 = v446 == (int8x16_t **)v100;
                                else
                                  v101 = 1;
                                if (!v101)
                                {
                                  do
                                  {
                                    v100 = *(_QWORD *)(v100 + 16);
                                    v99 = v100 != 0;
                                  }
                                  while ((int8x16_t **)v100 != v446 && v100 != 0);
                                }
                                if (!v99)
                                {
LABEL_594:
                                  __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
                                  v95 = JSC::throwDOMAttributeGetterTypeError(v97, &__dst, v446, (WTF::StringImpl *)v53);
                                }
                                else
                                {
LABEL_152:
                                  v95 = ((uint64_t (*)(unint64_t))v438)(v97);
                                }
                              }
                              v23 = v95;
                            }
LABEL_154:
                            if (v445)
                            {
                              v103 = *(_DWORD *)(v444 + 4);
                              if (!v103)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1984707D4);
                              }
                              *(_DWORD *)(v444 + 4) = v103 - 1;
                            }
                            v104 = v436;
                            v436 = 0;
                            if (v104)
                            {
                              if (*(_DWORD *)v104 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v104, v46, v47, v48, v49, v50, v51, v52);
                                WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                              }
                              else
                              {
                                *(_DWORD *)v104 -= 2;
                              }
                            }
                            return v23;
                          }
                          v438 = *(JSC::VM **)(v48 + 8);
                          v439 = v319;
                          LODWORD(v440) = HIDWORD(v50);
                          v442 = (_DWORD *)v433;
LABEL_556:
                          BYTE1(v443[1]) = 3;
                          if (v113 != 2)
                            LOBYTE(v443[1]) = 1;
                          goto LABEL_134;
                        }
                        v93 = (unsigned int *)v433;
                        v94 = v229;
LABEL_133:
                        JSC::JSObject::fillGetterPropertySlot(v93, v94, (uint64_t)&v438, v48, v49, v50);
                        goto LABEL_134;
                      }
LABEL_567:
                      v438 = (JSC::VM *)v48;
                      v442 = (_DWORD *)v433;
                      goto LABEL_123;
                    }
                  }
                }
                else
                {
                  if ((v237 & 0x20) != 0)
                    v237 = *(_DWORD *)(v53 + 32);
                  v244 = *(_DWORD *)(v232 + 12);
                  v245 = v244 & (v237 >> 8);
                  v246 = *(_DWORD *)(v235 + 4 * v245);
                  if (v246)
                  {
                    v247 = v235 + 4 * v236;
                    v248 = 1;
                    while (1)
                    {
                      v249 = (v246 - 1);
                      if (v53 == *(_QWORD *)(v247 + 16 * v249))
                        break;
                      v245 = (v245 + v248) & v244;
                      v246 = *(_DWORD *)(v235 + 4 * v245);
                      ++v248;
                      if (!v246)
                        goto LABEL_423;
                    }
                    v50 = *(unsigned int *)(v247 + 16 * v249 + 8) | ((unint64_t)*(unsigned __int8 *)(v247 + 16 * v249 + 12) << 32);
                    goto LABEL_420;
                  }
                }
              }
            }
          }
LABEL_423:
          if ((*(_BYTE *)(v433 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v433, (JSC::VM *)v229, v53, (uint64_t)&v438) & 1) != 0)
          {
            goto LABEL_134;
          }
          goto LABEL_424;
        }
        v254 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(16 * v230 + 0x4C) + 0x68))(v433, a1, v53, &v438);
        if (*(_DWORD *)(v229 + 80))
        {
          v280 = *(_DWORD *)(v229 + 80);
          if ((v280 & 0x27) != 0 && (v280 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v229 + 64), 7u, v47, v48, v49, v50, v51, v52);
          if (*(_QWORD *)(v229 + 16))
            goto LABEL_114;
        }
        if ((v254 & 1) != 0)
          goto LABEL_134;
        if (BYTE2(v443[1]) == 3)
        {
          if (BYTE4(v443[1]))
            goto LABEL_114;
          v255 = *(unsigned __int8 *)(v433 + 5);
          if (v255 == 61)
            goto LABEL_424;
        }
        else
        {
          v255 = *(unsigned __int8 *)(v433 + 5);
          if (v255 == 61)
          {
            if (BYTE2(v443[1]) == 1)
              goto LABEL_114;
            goto LABEL_424;
          }
        }
        if (!v53)
          goto LABEL_424;
        if ((v255 - 50) < 0xFFFFFFF5)
          goto LABEL_424;
        v256 = *(_DWORD *)(v53 + 16);
        if ((v256 & 0x20) != 0)
          goto LABEL_424;
        v257 = *(unsigned int *)(v53 + 4);
        if (!(_DWORD)v257)
          goto LABEL_424;
        v258 = *(unsigned __int8 **)(v53 + 8);
        if ((v256 & 4) != 0)
        {
          v259 = *v258;
          if ((_DWORD)v257 == 1)
          {
LABEL_451:
            if ((v259 - 48) < 0xA)
              goto LABEL_114;
            goto LABEL_424;
          }
          if (v259 == 45)
          {
            v259 = v258[1];
            goto LABEL_455;
          }
          if ((v259 - 48) < 0xA)
            goto LABEL_466;
          if ((_DWORD)v257 == 8)
            goto LABEL_465;
        }
        else
        {
          v259 = *(unsigned __int16 *)v258;
          if ((_DWORD)v257 == 1)
            goto LABEL_451;
          if (v259 == 45)
          {
            v259 = *((unsigned __int16 *)v258 + 1);
LABEL_455:
            if ((v259 - 48) < 0xA)
            {
              if ((_DWORD)v257 == 2)
                goto LABEL_114;
              goto LABEL_466;
            }
            if ((_DWORD)v257 != 9)
              goto LABEL_424;
LABEL_465:
            if (v259 != 73)
              goto LABEL_424;
            goto LABEL_466;
          }
          if ((v259 - 48) < 0xA || (_DWORD)v257 == 8 && v259 == 73)
            goto LABEL_466;
        }
        if ((_DWORD)v257 != 3 || v259 != 78)
          goto LABEL_424;
LABEL_466:
        v431 = v431 & 0xFFFFFF0000000000 | v257 | ((unint64_t)((v256 >> 2) & 1) << 32);
        JSC::jsToNumber(v258, v431);
        v261 = (v260 >> 52) & 0x7FF;
        if ((_DWORD)v261 == 2047)
        {
          if ((v260 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            qmemcpy(__s, "NaN", 3);
            v262 = &__s[3];
          }
          else
          {
            if ((v260 & 0x8000000000000000) != 0)
            {
              __s[0] = 45;
              v268 = &__s[1];
            }
            else
            {
              v268 = __s;
            }
            *(_QWORD *)v268 = 0x7974696E69666E49;
            v262 = v268 + 8;
          }
          goto LABEL_480;
        }
        v263 = v260 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v260 & 0x8000000000000000) != 0 && v263)
        {
          __s[0] = 45;
          v264 = &__s[1];
        }
        else
        {
          if (!v263)
          {
            __s[0] = 48;
            v262 = &__s[1];
            goto LABEL_480;
          }
          v264 = __s;
        }
        v265 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v260 & 0x800FFFFFFFFFFFFFLL, v261);
        v262 = WTF::dragonbox::detail::to_shortest(v265, v266, (uint64_t)v264, v267);
LABEL_480:
        *v262 = 0;
        v269 = strlen(__s);
        memcpy(&__dst, __s, v269);
        *((_BYTE *)&__dst + v269) = 0;
        v270 = *(unsigned int *)(v53 + 4);
        v271 = *(unsigned __int8 **)(v53 + 8);
        if ((*(_BYTE *)(v53 + 16) & 4) != 0)
        {
          if ((_DWORD)v270)
          {
            v276 = &__dst;
            v277 = *(unsigned int *)(v53 + 4);
            do
            {
              v279 = *(unsigned __int8 *)v276;
              v276 = (JSC::VM **)((char *)v276 + 1);
              v278 = v279;
              if (!v279 || *v271 != v278)
                goto LABEL_424;
              ++v271;
            }
            while (--v277);
          }
        }
        else if ((_DWORD)v270)
        {
          v272 = &__dst;
          v273 = *(unsigned int *)(v53 + 4);
          do
          {
            v275 = *(unsigned __int8 *)v272;
            v272 = (JSC::VM **)((char *)v272 + 1);
            v274 = v275;
            if (!v275 || *(unsigned __int16 *)v271 != v274)
              goto LABEL_424;
            v271 += 2;
          }
          while (--v273);
        }
        if (!*((_BYTE *)&__dst + v270))
          goto LABEL_114;
LABEL_424:
        if ((*(_WORD *)(v231 + 12) & 0x800) != 0)
        {
          v250 = *(_DWORD *)v433;
          if (BYTE2(v443[1]) != 3)
          {
            v252 = 16 * (v250 & 0xFFFFFFFE);
            if ((*(_WORD *)(v252 + 12) & 0x800) != 0)
            {
              v251 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v252 + 76)
                                                                               + 0xB0))(v433, a1);
            }
            else
            {
              v251 = *(_QWORD *)(v252 + 48);
              if (!v251)
                v251 = *(_QWORD *)(v433 + 16);
            }
            if (*(_DWORD *)(v229 + 80))
            {
              v253 = *(_DWORD *)(v229 + 80);
              if ((v253 & 0x27) != 0 && (v253 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v229 + 64), 7u, v47, v48, v49, v50, v51, v52);
              if (*(_QWORD *)(v229 + 16))
                goto LABEL_114;
            }
            goto LABEL_428;
          }
        }
        else
        {
          v250 = *(_DWORD *)v433;
        }
        v251 = *(_QWORD *)(16 * (v250 & 0xFFFFFFFE) + 0x30);
        if (!v251)
          v251 = *(_QWORD *)(v433 + 16);
LABEL_428:
        if ((v251 & 0xFFFE000000000002) != 0)
          goto LABEL_114;
        v433 = v251;
        v23 = 10;
        if (*(unsigned __int8 *)(v251 + 5) <= 0x16u)
          goto LABEL_154;
      }
    }
    if (*(WTF::StringImpl **)(*(_QWORD *)(v56 + 41952) + 1768) == v436)
    {
      v356 = *(_QWORD *)(v437 + 8);
      if ((v356 & 1) != 0)
        v357 = (unsigned int *)(v437 + 16);
      else
        v357 = (unsigned int *)(v356 + 4);
      v358 = *v357;
      if ((v358 & 0x80000000) != 0)
        v359 = (JSC::VM *)(COERCE__INT64((double)v358) + 0x2000000000000);
      else
        v359 = (JSC::VM *)(v358 | 0xFFFE000000000000);
      v360 = 14;
      goto LABEL_718;
    }
    if (v436)
    {
      v368 = *((_DWORD *)v436 + 4);
      if ((v368 & 0x20) == 0)
      {
        v369 = (_BYTE *)*((_QWORD *)v436 + 1);
        v370 = *((unsigned int *)v436 + 1);
        if ((v368 & 4) != 0)
        {
          if (!(_DWORD)v370)
            goto LABEL_741;
          v47 = *v369 - 48;
          if (v47 > 9 || v370 >= 2 && *v369 == 48)
            goto LABEL_741;
          v425 = v369 + 1;
          v426 = v370 - 1;
          while (v426)
          {
            if (v47 > 0x19999999)
              goto LABEL_741;
            v427 = *v425 - 48;
            if (v427 > 9)
              goto LABEL_741;
            v361 = 0;
            v92 = __CFADD__(v427, 10 * v47);
            v47 = v427 + 10 * (_DWORD)v47;
            ++v425;
            --v426;
            if (v92)
              goto LABEL_742;
          }
        }
        else
        {
          if (!(_DWORD)v370)
            goto LABEL_741;
          v47 = *(unsigned __int16 *)v369 - 48;
          if (v47 > 9 || *(_WORD *)v369 == 48 && v370 > 1)
            goto LABEL_741;
          v376 = (unsigned __int16 *)(v369 + 2);
          v377 = v370 - 1;
          while (v377)
          {
            if (v47 > 0x19999999)
              goto LABEL_741;
            v378 = *v376 - 48;
            if (v378 > 9)
              goto LABEL_741;
            v361 = 0;
            v92 = __CFADD__(v378, 10 * v47);
            v47 = v378 + 10 * (_DWORD)v47;
            ++v376;
            --v377;
            if (v92)
              goto LABEL_742;
          }
        }
        if ((_DWORD)v47 != -1)
        {
          v428 = *(_QWORD *)(v437 + 8);
          v429 = (JSC::JSString *)((v428 & 1) != 0 ? v437 + 16 : v428 + 4);
          if (*(_DWORD *)v429 > v47)
          {
            v359 = (JSC::VM *)JSC::JSString::getIndex((JSC::JSString *)v437, v11, v47, v48, v49, v50, v51, v52, v55);
            if (!*(_DWORD *)(v56 + 80))
              goto LABEL_942;
            v430 = *(_DWORD *)(v56 + 80);
            if ((v430 & 0x27) != 0 && (v430 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v56 + 64), 7u, v47, v48, v49, v50, v51, v52);
            if (!*(_QWORD *)(v56 + 16))
            {
LABEL_942:
              v360 = 10;
LABEL_718:
              v438 = v359;
              LODWORD(v440) = v360;
              v442 = 0;
              v361 = 1;
              BYTE1(v443[1]) = 1;
              goto LABEL_742;
            }
          }
        }
      }
    }
LABEL_741:
    v361 = 0;
LABEL_742:
    if (*(_DWORD *)(v56 + 80))
    {
      v417 = *(_DWORD *)(v56 + 80);
      if ((v417 & 0x27) != 0 && (v417 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v56 + 64), 7u, v47, v48, v49, v50, v51, v52);
      if (*(_QWORD *)(v56 + 16))
        goto LABEL_114;
    }
    if ((v361 & 1) != 0)
      goto LABEL_134;
    goto LABEL_744;
  }
  v437 = this;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v450 = 0xFFFFFFFF00000000;
  LOBYTE(v454) = 0;
  v455 = 0;
  v456 = 0;
  v457 = 0;
  v452 = 0;
  memset(v453, 0, 13);
  v451 = this;
  if ((this & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(this + 5);
    if (v24 > 0x16)
    {
      while (1)
      {
LABEL_21:
        v25 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
        v26 = v11;
        v33 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, JSC::VM **))(16 * *(unsigned int *)(v25 + 0x4C) + 0x70))(v10, v11, v9, &__dst);
        if (*(_DWORD *)(v12 + 80))
        {
          v37 = *(_DWORD *)(v12 + 80);
          if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
          if (*(_QWORD *)(v12 + 16))
          {
LABEL_68:
            v23 = 10;
            goto LABEL_62;
          }
        }
        if ((v33 & 1) != 0)
        {
          if (BYTE1(v453[1]) == 1)
          {
            v23 = (uint64_t)__dst;
          }
          else if (BYTE1(v453[1]) == 2)
          {
            v23 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&__dst, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
          }
          else
          {
            v291 = (uint64_t **)*((_QWORD *)v26 + 7);
            JSC::Identifier::from(v291, v9, v27, v28, v29, v30, v31, v32, (int **)__s);
            v292 = *(WTF::StringImpl **)__s;
            v293 = (unint64_t)v452;
            v294 = *(_QWORD *)(16 * (*v452 & 0xFFFFFFFE) + 0x28);
            if ((v450 & 0x20) != 0)
              v293 = v451;
            if (BYTE3(v453[1]) != 1)
              goto LABEL_548;
            if ((v293 & 0xFFFE000000000002) != 0)
              goto LABEL_725;
            v295 = *(unsigned int *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0x4C);
            v296 = *(_DWORD *)(16 * (*(_DWORD *)v293 & 0xFFFFFFFE) + 0x4C) != 0;
            v297 = 16 * v295;
            if ((_DWORD)v295)
              v298 = v456 == (int8x16_t **)v297;
            else
              v298 = 1;
            if (!v298)
            {
              do
              {
                v297 = *(_QWORD *)(v297 + 16);
                v296 = v297 != 0;
              }
              while ((int8x16_t **)v297 != v456 && v297 != 0);
            }
            if (!v296)
            {
LABEL_725:
              v438 = (JSC::VM *)v291;
              v300 = JSC::throwDOMAttributeGetterTypeError(v294, &v438, v456, *(WTF::StringImpl **)__s);
            }
            else
            {
LABEL_548:
              v300 = ((uint64_t (*)(unint64_t))__dst)(v294);
            }
            v23 = v300;
            if (v292)
            {
              if (*(_DWORD *)v292 == 2)
              {
                WTF::StringImpl::~StringImpl(v292, v301, v302, v303, v304, v305, v306, v307);
                WTF::fastFree(v310, v311, v312, v313, v314, v315, v316, v317);
              }
              else
              {
                *(_DWORD *)v292 -= 2;
              }
            }
          }
          goto LABEL_62;
        }
        if (BYTE2(v453[1]) == 3)
        {
          if (BYTE4(v453[1]))
            goto LABEL_68;
          v34 = *((unsigned __int8 *)v10 + 5);
          if (v34 == 61)
            goto LABEL_26;
        }
        else
        {
          v34 = *((unsigned __int8 *)v10 + 5);
          if (v34 == 61)
          {
            if (BYTE2(v453[1]) == 1)
              goto LABEL_68;
            goto LABEL_26;
          }
        }
        if ((v34 - 39) <= 0xA)
        {
          if ((*((_BYTE *)v10 + 40) & 7u) > 2)
          {
            LOBYTE(v438) = 0;
            LOBYTE(v439) = 0;
            v40 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v10, (uint64_t)&v438, (uint64_t)v27, v28, v29, v30, v31, v32);
            v39 = v41 ? v40 : 0;
          }
          else
          {
            v39 = *((_QWORD *)v10 + 3);
          }
          if (v39 <= v9)
            goto LABEL_68;
        }
LABEL_26:
        if ((*(_WORD *)(v25 + 12) & 0x800) == 0 || BYTE2(v453[1]) == 3)
        {
          v35 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          if (!v35)
            v35 = *((_QWORD *)v10 + 2);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v35 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v10, v26);
          }
          else
          {
            v35 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v35)
              v35 = *((_QWORD *)v10 + 2);
          }
          if (*(_DWORD *)(v12 + 80))
          {
            v38 = *(_DWORD *)(v12 + 80);
            if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
            if (*(_QWORD *)(v12 + 16))
              goto LABEL_68;
          }
        }
        if ((v35 & 0xFFFE000000000002) == 0)
        {
          v36 = *(unsigned __int8 *)(v35 + 5);
          v10 = (JSC::JSString *)v35;
          v11 = v26;
          if (v36 > 0x16)
            continue;
        }
        goto LABEL_68;
      }
    }
    if (v24 == 2)
    {
      v320 = *(_QWORD *)(this + 8);
      if ((v320 & 1) != 0)
        v321 = (_DWORD *)(this + 16);
      else
        v321 = (_DWORD *)(v320 + 4);
      if (*v321 <= a3)
        goto LABEL_959;
      v10 = (JSC::JSString *)JSC::JSString::getIndex((JSC::JSString *)this, a1, a3, a4, a5, a6, a7, a8, a9);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_585;
      v362 = *(_DWORD *)(v12 + 80);
      if ((v362 & 0x27) != 0 && (v362 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_959:
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_722;
        v322 = 0;
      }
      else
      {
LABEL_585:
        __dst = v10;
        LODWORD(v450) = 10;
        v452 = 0;
        v322 = 1;
        BYTE1(v453[1]) = 1;
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_586;
      }
      v379 = *(_DWORD *)(v12 + 80);
      if ((v379 & 0x27) != 0 && (v379 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v380 = *(_QWORD *)(v12 + 16);
      v381 = v380 == 0;
      if (v380)
        v382 = 1;
      else
        v382 = v322;
      if (!v381)
        v10 = 0;
      if ((v382 & 1) == 0)
        goto LABEL_722;
LABEL_586:
      v23 = (uint64_t)v10;
      goto LABEL_62;
    }
  }
LABEL_722:
  v363 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v437, (unint64_t)v11);
  if (v363)
  {
    v10 = (JSC::JSString *)v363;
    v12 = *((_QWORD *)v11 + 7);
    goto LABEL_21;
  }
  v23 = 0;
LABEL_62:
  if (v455)
  {
    v42 = v454;
    v43 = *(_DWORD *)(v454 + 4);
    if (!v43)
    {
      __break(0xC471u);
      JUMPOUT(0x19846F524);
    }
LABEL_64:
    *(_DWORD *)(v42 + 4) = v43 - 1;
  }
  return v23;
}

uint64_t operationGetByValObjectString(uint64_t a1, uint64_t a2)
{
  JSC *v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  int v64;
  uint64_t v66;
  uint64_t *v67;
  _DWORD *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  uint64_t v98;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  _QWORD *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl **v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[2];
  int v145;
  _QWORD v146[2];
  int v147;
  WTF::StringImpl *__dst[2];
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t vars0;

  v2 = (JSC *)MEMORY[0x1E0C80A78](a1, a2);
  v11 = v4;
  v12 = v3;
  v13 = (uint64_t)v2;
  v150 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)v2 + 7);
  *(_QWORD *)(v14 + 40) = vars0;
  v15 = *(_QWORD *)(v4 + 8);
  if ((v15 & 1) == 0)
  {
    if ((*(_BYTE *)(v15 + 16) & 0x10) != 0)
    {
LABEL_3:
      *(_DWORD *)v15 += 2;
      goto LABEL_4;
    }
    v62 = *(WTF::StringImpl **)(v14 + 64768);
    if (v62 == (WTF::StringImpl *)v15)
    {
LABEL_146:
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
      {
        v106 = *(WTF::StringImpl **)(v14 + 64776);
        *(_DWORD *)v106 += 2;
        __dst[0] = v106;
        __dmb(0xAu);
        v107 = *(WTF::StringImpl **)(v11 + 8);
        *(WTF::StringImpl **)(v11 + 8) = __dst[0];
        __dst[0] = v107;
        v108 = (_QWORD *)(v14 + 808);
        v109 = *(unsigned int *)(v14 + 820);
        if ((_DWORD)v109 == *(_DWORD *)(v14 + 816))
        {
          v111 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v109 + 1, (unint64_t)__dst);
          v109 = *(unsigned int *)(v14 + 820);
          v110 = (WTF::StringImpl **)(*(_QWORD *)(v14 + 808) + 8 * v109);
          v107 = *v111;
        }
        else
        {
          v110 = (WTF::StringImpl **)(*v108 + 8 * v109);
          v111 = __dst;
        }
        *v111 = 0;
        *v110 = v107;
        *(_DWORD *)(v14 + 820) = v109 + 1;
        v112 = __dst[0];
        __dst[0] = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
          {
            WTF::StringImpl::~StringImpl(v112, v3, v4, v5, v6, v7, v8, v9);
            WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
          }
          else
          {
            *(_DWORD *)v112 -= 2;
          }
        }
      }
      v15 = *(_QWORD *)(v14 + 64776);
      goto LABEL_3;
    }
    *(_DWORD *)v15 += 2;
    *(_QWORD *)(v14 + 64768) = v15;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v3, v4, v5, v6, v7, v8, v9);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
    v63 = *(_QWORD *)(v11 + 8);
    if (v63)
    {
      v64 = *(_DWORD *)(v63 + 16);
      if ((v64 & 0x10) == 0)
      {
        if (!*(_DWORD *)(v63 + 4))
        {
          WTF::StringImpl::s_emptyAtomString += 2;
          v146[0] = &WTF::StringImpl::s_emptyAtomString;
          goto LABEL_144;
        }
        if ((*(_BYTE *)v63 & 1) == 0)
        {
          if ((v64 & 0x20) != 0)
          {
            WTF::addSymbol((WTF *)v146, *(WTF::StringImpl **)(v11 + 8), v4, v5, v6, v7, v8, v9);
            goto LABEL_144;
          }
          if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
          {
            __clrex();
          }
          else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
          {
            goto LABEL_77;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_77:
          v66 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v66)
            v66 = WTF::Thread::initializeCurrentTLS(0);
          v67 = *(uint64_t **)(v66 + 56);
          LODWORD(v146[0]) = v63 >> 4;
          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add(v67, (unsigned int *)v146, (const WTF::StringImpl *)v4, v5, v6, v7, v8, v9, (uint64_t)__dst);
          if (v149)
            *(_DWORD *)(v63 + 16) |= 0x10u;
          v68 = (_DWORD *)(16 * *(unsigned int *)__dst[0]);
          *v68 += 2;
          v146[0] = v68;
LABEL_134:
          v101 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
          if (v101 == 1)
          {
            if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
              goto LABEL_144;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v4, v5, v6, v7, v8, v9);
LABEL_144:
          v63 = v146[0];
          goto LABEL_145;
        }
        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
        {
          goto LABEL_131;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_131:
        v100 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v100)
          v100 = WTF::Thread::initializeCurrentTLS(0);
        WTF::addStatic(v146, *(uint64_t **)(v100 + 56), (WTF::StringImpl *)v63, v5, v6, v7, v8, v9);
        goto LABEL_134;
      }
      *(_DWORD *)v63 += 2;
    }
LABEL_145:
    v105 = *(WTF::StringImpl **)(v14 + 64776);
    *(_QWORD *)(v14 + 64776) = v63;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
      {
        WTF::StringImpl::~StringImpl(v105, v3, v4, v5, v6, v7, v8, v9);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v105 -= 2;
      }
    }
    goto LABEL_146;
  }
  v6 = *(unsigned int *)(v4 + 16);
  if (v6 < 0x801)
  {
    if ((v15 & 2) == 0)
    {
      v38 = *(WTF **)(v14 + 8);
      v39 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) == 0)
      {
        JSC::JSRopeString::resolveToBuffer<char16_t>(v39, *(_QWORD *)(v4 + 20) & 0xFFFFFFFFFLL, *(_QWORD *)(v4 + 24) >> 16, (char *)__dst, v6, (unint64_t)v38, v8, v9, v10);
        WTF::AtomStringImpl::add((uint64_t)__dst, *(unsigned int *)(v11 + 16), v139, v140, v141, v142, v143, v146);
        v52 = (WTF::StringImpl *)v146[0];
        goto LABEL_84;
      }
      JSC::JSRopeString::resolveToBuffer<unsigned char>(v39, (char *)(*(_QWORD *)(v4 + 20) & 0xFFFFFFFFFLL), *(_QWORD *)(v4 + 24) >> 16, (uint64_t)__dst, v6, v38, v8, v9);
      v41 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v41)
      {
        v52 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_84;
      }
      v42 = -1640531527;
      v144[0] = __dst;
      v144[1] = v41;
      if ((_DWORD)v41 == 1)
        goto LABEL_41;
      v82 = 0;
      do
      {
        v83 = (*((unsigned __int8 *)__dst + v82 + 1) << 11) ^ ((v42 + *((unsigned __int8 *)__dst + v82)) << 16) ^ (v42 + *((unsigned __int8 *)__dst + v82));
        v42 = v83 + (v83 >> 11);
        v84 = v82 + 3;
        v82 += 2;
      }
      while (v84 < v41);
      if ((v41 & 1) != 0)
      {
LABEL_41:
        v43 = (v42 + *((unsigned __int8 *)__dst + v41 - 1)) ^ ((v42 + *((unsigned __int8 *)__dst + v41 - 1)) << 11);
        v42 = v43 + (v43 >> 17);
      }
      v44 = (v42 ^ (8 * v42)) + ((v42 ^ (8 * v42)) >> 5);
      v45 = (v44 ^ (4 * v44)) + ((v44 ^ (4 * v44)) >> 15);
      v46 = (v45 ^ (v45 << 10)) & 0xFFFFFF;
      if (!v46)
        v46 = 0x800000;
      v145 = v46;
      if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
      {
        goto LABEL_47;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_47:
      v48 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v48)
        v48 = WTF::Thread::initializeCurrentTLS(0);
      WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v48 + 56), (uint64_t)v144, v40, v6, v7, v8, v9, (uint64_t)v146);
      v50 = v147;
      v51 = (WTF::StringImpl *)v146[0];
LABEL_50:
      v52 = (WTF::StringImpl *)(16 * *(unsigned int *)v51);
      if (!v50)
        *(_DWORD *)v52 += 2;
      v53 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
      if (v53 == 1)
      {
        if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
          goto LABEL_84;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v4, v49, v6, v7, v8, v9);
LABEL_84:
      v69 = *(_DWORD *)v52;
      goto LABEL_85;
    }
    v72 = *(_QWORD *)((*(_QWORD *)(v4 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v72)
    {
      v73 = *(char **)(v72 + 8);
      v74 = *(unsigned int *)(v72 + 4) | ((unint64_t)((*(_DWORD *)(v72 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v73 = 0;
      v74 = 0x100000000;
    }
    v75 = *(_QWORD *)(v4 + 24);
    v76 = v75 >> 16;
    if (v74 <= (v75 >> 16))
    {
      v3 = 0;
      v73 = &str_105_2;
      goto LABEL_116;
    }
    if (v74 - (v75 >> 16) > v6
      || (v6 = v74 - (v75 >> 16), (_DWORD)v76))
    {
      v77 = (v75 >> 16);
      v78 = v6;
      v79 = v74 - (unint64_t)v76;
      if ((v74 & 0x100000000) != 0)
      {
        if (v79 >= v6)
        {
          v73 += v77;
          v78 = v6 | 0x100000000;
          goto LABEL_102;
        }
LABEL_191:
        __break(1u);
      }
      if (v79 < v6)
        goto LABEL_191;
      v73 += 2 * v77;
    }
    else
    {
      v78 = v74;
    }
LABEL_102:
    v3 = (WTF::AtomStringImpl *)v78;
    if ((v78 & 0x100000000) == 0)
    {
      WTF::AtomStringImpl::add((uint64_t)v73, v78, v5, v6, v7, v8, v9, __dst);
      v52 = __dst[0];
      goto LABEL_84;
    }
LABEL_116:
    if (!v3)
    {
      v52 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      v69 = WTF::StringImpl::s_emptyAtomString + 2;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_85:
      if (v69 != 2)
        goto LABEL_86;
      v80 = *((_DWORD *)v52 + 4);
      v81 = v52;
      if ((v80 & 3) == 2)
      {
        v81 = v52;
        do
        {
          v81 = (WTF::StringImpl *)*((_QWORD *)v81 + 3);
          v80 = *((_DWORD *)v81 + 4);
        }
        while ((v80 & 3) == 2);
      }
      if ((v80 & 8) != 0)
      {
LABEL_86:
        v5 = 0;
      }
      else
      {
        *((_DWORD *)v81 + 4) = v80 | 8;
        v5 = (unint64_t)*((unsigned int *)v81 + 1) << ((v80 & 4) == 0);
      }
      *(_DWORD *)v52 = v69 + 2;
      __dmb(0xAu);
      *(_QWORD *)(v11 + 8) = v52;
      if (v5 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v14 + 192, 0, v11, v5, v6, v7, v8, v9);
      goto LABEL_89;
    }
    v93 = -1640531527;
    v146[0] = v73;
    v146[1] = v3;
    if (v3 == (WTF::AtomStringImpl *)1)
      goto LABEL_118;
    v102 = 0;
    do
    {
      v103 = (v73[v102 + 1] << 11) ^ ((v93 + v73[v102]) << 16) ^ (v93
                                                                                                  + v73[v102]);
      v93 = v103 + (v103 >> 11);
      v104 = v102 + 3;
      v102 += 2;
    }
    while (v104 < (unint64_t)v3);
    if ((v3 & 1) != 0)
LABEL_118:
      v93 = ((v93 + v73[(_QWORD)v3 - 1]) ^ ((v93 + v73[(_QWORD)v3 - 1]) << 11))
          + (((v93 + v73[(_QWORD)v3 - 1]) ^ ((v93 + v73[(_QWORD)v3 - 1]) << 11)) >> 17);
    v94 = (v93 ^ (8 * v93)) + ((v93 ^ (8 * v93)) >> 5);
    v95 = (v94 ^ (4 * v94)) + ((v94 ^ (4 * v94)) >> 15);
    v96 = (v95 ^ (v95 << 10)) & 0xFFFFFF;
    if (!v96)
      v96 = 0x800000;
    v147 = v96;
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
      goto LABEL_124;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
LABEL_124:
    v98 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v98)
      v98 = WTF::Thread::initializeCurrentTLS(0);
    WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v98 + 56), (uint64_t)v146, v5, v6, v7, v8, v9, (uint64_t)__dst);
    v50 = v149;
    v51 = __dst[0];
    goto LABEL_50;
  }
  v52 = *JSC::JSRopeString::resolveRopeWithFunction<true,JSC::JSRopeString::resolveRopeToAtomString(JSC::JSGlobalObject *)::$_1>(v4, v2, v10, v4, v5, v6, v7, v8, v9);
  if (v52)
    *(_DWORD *)v52 += 2;
LABEL_89:
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_90;
  v138 = *(_DWORD *)(v14 + 80);
  if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v4, v5, v6, v7, v8, v9);
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_90:
    if (v52)
    {
      v70 = *(_DWORD *)v52 + 2;
      *(_DWORD *)v52 = v70;
      v15 = (unint64_t)v52;
      goto LABEL_92;
    }
LABEL_189:
    v15 = 0;
    goto LABEL_4;
  }
  if (!v52)
    goto LABEL_189;
  v15 = 0;
  v70 = *(_DWORD *)v52;
LABEL_92:
  v71 = v70 - 2;
  if (v71)
  {
    *(_DWORD *)v52 = v71;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v52, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
LABEL_4:
  if (*(_DWORD *)(v14 + 80))
  {
    v121 = *(_DWORD *)(v14 + 80);
    if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v4, v5, v6, v7, v8, v9);
    if (*(_QWORD *)(v14 + 16))
    {
      v31 = 0;
      goto LABEL_58;
    }
  }
  if (((*(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x10) | *(unsigned __int8 *)(16
                                                                                       * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                       + 0xA)) & 8) != 0
    || !(v15 >> 4)
    || ((v15 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_57;
  }
  v16 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x58);
  if (!v16)
  {
    v27 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x40);
    if (!v27 || *(_BYTE *)(v27 + 5) != 1 && *(_DWORD *)(v27 + 80) < 2u)
      goto LABEL_57;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)), (JSC::VM *)v14, 1, (const JSC::PropertyTable *)v5, v6, v7, v8, v9);
    if (!v16)
      goto LABEL_57;
  }
  if (!*(_DWORD *)(v16 + 24))
    goto LABEL_57;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(unsigned int *)(v16 + 8);
  v20 = *(_DWORD *)(v15 + 16);
  if ((v17 & 1) != 0)
  {
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(v15 + 32);
    v21 = *(_DWORD *)(v16 + 12);
    v22 = (v20 >> 8) & *(_QWORD *)&v21;
    v23 = *(unsigned __int8 *)(v18 + v22);
    if (!*(_BYTE *)(v18 + v22))
      goto LABEL_57;
    v24 = v18 + v19;
    v25 = 1;
    while (1)
    {
      v26 = *(_QWORD *)(v24 + 8 * (v23 - 1));
      if (v15 == (v26 & 0xFFFFFFFFFFFFLL))
        break;
      v22 = ((_DWORD)v22 + v25) & v21;
      v23 = *(unsigned __int8 *)(v18 + v22);
      ++v25;
      if (!*(_BYTE *)(v18 + v22))
        goto LABEL_57;
    }
    v28 = HIBYTE(v26);
  }
  else
  {
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(v15 + 32);
    v32 = *(_DWORD *)(v16 + 12);
    v33 = v32 & (v20 >> 8);
    v34 = *(_DWORD *)(v18 + 4 * v33);
    if (!v34)
      goto LABEL_57;
    v35 = v18 + 4 * v19;
    v36 = 1;
    while (1)
    {
      v37 = (v34 - 1);
      if (v15 == *(_QWORD *)(v35 + 16 * v37))
        break;
      v33 = (v33 + v36) & v32;
      v34 = *(_DWORD *)(v18 + 4 * v33);
      ++v36;
      if (!v34)
        goto LABEL_57;
    }
    v28 = *(unsigned int *)(v35 + 16 * v37 + 8);
  }
  if ((_DWORD)v28 == -1
    || ((int)v28 <= 63
      ? (v29 = (uint64_t)v12 + 16, v30 = v28 << 32)
      : (v29 = *((_QWORD *)v12 + 1) - 8, v30 = 0x3F00000000 - (v28 << 32)),
        (v31 = *(_QWORD *)(v29 + (v30 >> 29))) == 0))
  {
LABEL_57:
    v31 = JSC::JSObject::get((unsigned int *)v12, v13, v15, v5, v6, v7, v8, v9);
  }
LABEL_58:
  if (!v15)
    return v31;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    return v31;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v3, v4, v5, v6, v7, v8, v9);
  v60 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v60)
  {
    pas_try_deallocate_slow_no_cache(v15, (uint64_t)&bmalloc_heap_config, 1);
    return v31;
  }
  if (v15 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v15 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v15)) & 1) == 0)
  {
    if (v15 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v15 >> 24)
    {
      v55 = 0;
    }
    else
    {
      v55 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v15 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v15) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v55 == 1)
        goto LABEL_65;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v60, v15, 1, v55, v56, v57, v58, v59);
    return v31;
  }
LABEL_65:
  v61 = *(unsigned int *)(v60 + 8000);
  if (v61 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v60, v15, (os_unfair_lock_s *)5, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_QWORD *)(v60 + 8 * v61) = v15 | 0x5000000000000;
    *(_DWORD *)(v60 + 8000) = v61 + 1;
  }
  return v31;
}

uint64_t operationGetByValObjectSymbol(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t vars0;

  v10 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v10 + 5) = vars0;
  v11 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)v11 += 2;
  if (((*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10) | *(unsigned __int8 *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0xA)) & 8) != 0
    || !(v11 >> 4)
    || ((v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_34;
  }
  v12 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v12)
  {
    v23 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
      goto LABEL_34;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v10, 1, a4, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_34;
  }
  if (!*(_DWORD *)(v12 + 24))
    goto LABEL_34;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v15 = *(unsigned int *)(v12 + 8);
  v16 = *(_DWORD *)(v11 + 16);
  if ((v13 & 1) != 0)
  {
    if ((v16 & 0x20) != 0)
      v16 = *(_DWORD *)(v11 + 32);
    v17 = *(_DWORD *)(v12 + 12);
    v18 = (v16 >> 8) & *(_QWORD *)&v17;
    v19 = *(unsigned __int8 *)(v14 + v18);
    if (!*(_BYTE *)(v14 + v18))
      goto LABEL_34;
    v20 = v14 + v15;
    v21 = 1;
    while (1)
    {
      v22 = *(_QWORD *)(v20 + 8 * (v19 - 1));
      if (v11 == (v22 & 0xFFFFFFFFFFFFLL))
        break;
      v18 = ((_DWORD)v18 + v21) & v17;
      v19 = *(unsigned __int8 *)(v14 + v18);
      ++v21;
      if (!*(_BYTE *)(v14 + v18))
        goto LABEL_34;
    }
    v24 = HIBYTE(v22);
  }
  else
  {
    if ((v16 & 0x20) != 0)
      v16 = *(_DWORD *)(v11 + 32);
    v28 = *(_DWORD *)(v12 + 12);
    v29 = v28 & (v16 >> 8);
    v30 = *(_DWORD *)(v14 + 4 * v29);
    if (!v30)
      goto LABEL_34;
    v31 = v14 + 4 * v15;
    v32 = 1;
    while (1)
    {
      v33 = (v30 - 1);
      if (v11 == *(_QWORD *)(v31 + 16 * v33))
        break;
      v29 = (v29 + v32) & v28;
      v30 = *(_DWORD *)(v14 + 4 * v29);
      ++v32;
      if (!v30)
        goto LABEL_34;
    }
    v24 = *(unsigned int *)(v31 + 16 * v33 + 8);
  }
  if ((_DWORD)v24 == -1
    || ((int)v24 <= 63
      ? (v25 = a2 + 16, v26 = v24 << 32)
      : (v25 = *(_QWORD *)(a2 + 8) - 8, v26 = 0x3F00000000 - (v24 << 32)),
        (v27 = *(_QWORD *)(v25 + (v26 >> 29))) == 0))
  {
LABEL_34:
    v27 = JSC::JSObject::get((unsigned int *)a2, a1, v11, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  return v27;
}

uint64_t operationPutByValCellStringStrict(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, JSC::JSRopeString *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::AtomStringImpl *v22;
  WTF::AtomStringImpl *v23;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  WTF::StringImpl *v88[2];
  int v89;
  char v90;
  __int16 v91;
  char v92;
  uint64_t v93;
  JSC::VM *var48[10];

  v13 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v13 + 40) = var48[9];
  v14 = *((_QWORD *)a3 + 1);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v40 = v88[0];
      if (!v88[0])
      {
        v14 = 0;
        goto LABEL_4;
      }
      v14 = 0;
      v39 = *(_DWORD *)v88[0];
    }
    else
    {
      v14 = (unint64_t)v88[0];
      if (!v88[0])
        goto LABEL_4;
      v39 = *(_DWORD *)v88[0] + 2;
      *(_DWORD *)v88[0] = v39;
      v40 = (WTF::StringImpl *)v14;
    }
    v41 = v39 - 2;
    if (v41)
    {
      *(_DWORD *)v40 = v41;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v40, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
  {
    v42 = *(WTF::StringImpl **)(v13 + 64768);
    if (v42 != (WTF::StringImpl *)v14)
    {
      *(_DWORD *)v14 += 2;
      *(_QWORD *)(v13 + 64768) = v14;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      v43 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v43)
      {
        if ((*((_BYTE *)v43 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v43 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v43, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v88);
          v43 = v88[0];
        }
      }
      v44 = *(WTF::StringImpl **)(v13 + 64776);
      *(_QWORD *)(v13 + 64776) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
        {
          WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v44 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v45 = *(_DWORD **)(v13 + 64776);
      *v45 += 2;
      __dmb(0xAu);
      v46 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v45;
      v88[0] = v46;
      v47 = (_QWORD *)(v13 + 808);
      v48 = *(unsigned int *)(v13 + 820);
      if ((_DWORD)v48 == *(_DWORD *)(v13 + 816))
      {
        v50 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)v88);
        v48 = *(unsigned int *)(v13 + 820);
        v49 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 808) + 8 * v48);
        v46 = *v50;
      }
      else
      {
        v49 = (WTF::StringImpl **)(*v47 + 8 * v48);
        v50 = v88;
      }
      *v50 = 0;
      *v49 = v46;
      *(_DWORD *)(v13 + 820) = v48 + 1;
      v51 = v88[0];
      v88[0] = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
    }
    v14 = *(_QWORD *)(v13 + 64776);
  }
  *(_DWORD *)v14 += 2;
LABEL_4:
  if (*(_DWORD *)(v13 + 80))
  {
    v68 = *(_DWORD *)(v13 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_22;
  }
  v88[0] = 0;
  v88[1] = a2;
  v89 = -1;
  v90 = v90 & 0xF8 | 1;
  v91 = 0;
  v92 = 1;
  v93 = 0;
  v15 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v15 + 0xD) & 4) != 0)
  {
    (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v14, a4, v88);
    goto LABEL_22;
  }
  v16 = *((_QWORD *)a1 + 7);
  if (v14)
  {
    v17 = *(_DWORD *)(v14 + 16);
    if ((v17 & 0x20) == 0)
    {
      v18 = *(_BYTE **)(v14 + 8);
      v19 = *(unsigned int *)(v14 + 4);
      if ((v17 & 4) != 0)
      {
        if ((_DWORD)v19)
        {
          v20 = *v18 - 48;
          if (v20 <= 9 && (v19 < 2 || *v18 != 48))
          {
            v85 = v18 + 1;
            v86 = v19 - 1;
            while (v86)
            {
              if (v20 <= 0x19999999)
              {
                v87 = *v85 - 48;
                if (v87 <= 9)
                {
                  v29 = __CFADD__(v87, 10 * v20);
                  v20 = v87 + 10 * (_DWORD)v20;
                  ++v85;
                  --v86;
                  if (!v29)
                    continue;
                }
              }
              goto LABEL_11;
            }
LABEL_92:
            if ((_DWORD)v20 != -1)
            {
              (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, v20, a4, 1);
              goto LABEL_22;
            }
          }
        }
      }
      else if ((_DWORD)v19)
      {
        v20 = *(unsigned __int16 *)v18 - 48;
        if (v20 <= 9 && (*(_WORD *)v18 != 48 || v19 <= 1))
        {
          v26 = (unsigned __int16 *)(v18 + 2);
          v27 = v19 - 1;
          while (v27)
          {
            if (v20 <= 0x19999999)
            {
              v28 = *v26 - 48;
              if (v28 <= 9)
              {
                v29 = __CFADD__(v28, 10 * v20);
                v20 = v28 + 10 * (_DWORD)v20;
                ++v26;
                --v27;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_11;
          }
          goto LABEL_92;
        }
      }
    }
  }
LABEL_11:
  if (*(_QWORD *)(*(_QWORD *)(v16 + 41952) + 16) != v14)
  {
    v21 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v21 & 0x10) == 0)
    {
      v22 = a2;
      while ((*(_WORD *)(v15 + 12) & 0x800) == 0 && (v22 == a2 || (*(_WORD *)(v15 + 12) & 0x400) == 0))
      {
        v23 = *(WTF::AtomStringImpl **)(v15 + 48);
        if (!v23)
          v23 = (WTF::AtomStringImpl *)*((_QWORD *)v22 + 2);
        if (v23 == (WTF::AtomStringImpl *)2)
        {
          if ((*((_BYTE *)a2 + 6) & 0x20) == 0 || (v21 & 0x400000) != 0)
          {
            var48[0] = *((JSC::VM **)a1 + 7);
            v30 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v16, v14, (uint64_t)a4, 0, (uint64_t)v88, a7, a8, a9);
            if (a2 && (v90 & 1) != 0)
              JSC::throwTypeError((unint64_t)a1, var48, (uint64_t)v30, (uint64_t)a2);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v88, a9, a6, a7, a8);
          }
          goto LABEL_22;
        }
        v15 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
        v22 = v23;
        if ((*(_BYTE *)(v15 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v14, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v88, a6, a7, a8, a9);
LABEL_22:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValCellStringSloppy(JSC::JSGlobalObject *a1, WTF::AtomStringImpl *a2, JSC::JSRopeString *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::AtomStringImpl *v22;
  WTF::AtomStringImpl *v23;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  WTF::StringImpl *v88[2];
  int v89;
  char v90;
  __int16 v91;
  char v92;
  uint64_t v93;
  JSC::VM *var48[10];

  v13 = *((_QWORD *)a1 + 7);
  *(JSC::VM **)(v13 + 40) = var48[9];
  v14 = *((_QWORD *)a3 + 1);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v40 = v88[0];
      if (!v88[0])
      {
        v14 = 0;
        goto LABEL_4;
      }
      v14 = 0;
      v39 = *(_DWORD *)v88[0];
    }
    else
    {
      v14 = (unint64_t)v88[0];
      if (!v88[0])
        goto LABEL_4;
      v39 = *(_DWORD *)v88[0] + 2;
      *(_DWORD *)v88[0] = v39;
      v40 = (WTF::StringImpl *)v14;
    }
    v41 = v39 - 2;
    if (v41)
    {
      *(_DWORD *)v40 = v41;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v40, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
  {
    v42 = *(WTF::StringImpl **)(v13 + 64768);
    if (v42 != (WTF::StringImpl *)v14)
    {
      *(_DWORD *)v14 += 2;
      *(_QWORD *)(v13 + 64768) = v14;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      v43 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v43)
      {
        if ((*((_BYTE *)v43 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v43 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v43, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v88);
          v43 = v88[0];
        }
      }
      v44 = *(WTF::StringImpl **)(v13 + 64776);
      *(_QWORD *)(v13 + 64776) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
        {
          WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v44 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v45 = *(_DWORD **)(v13 + 64776);
      *v45 += 2;
      __dmb(0xAu);
      v46 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v45;
      v88[0] = v46;
      v47 = (_QWORD *)(v13 + 808);
      v48 = *(unsigned int *)(v13 + 820);
      if ((_DWORD)v48 == *(_DWORD *)(v13 + 816))
      {
        v50 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)v88);
        v48 = *(unsigned int *)(v13 + 820);
        v49 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 808) + 8 * v48);
        v46 = *v50;
      }
      else
      {
        v49 = (WTF::StringImpl **)(*v47 + 8 * v48);
        v50 = v88;
      }
      *v50 = 0;
      *v49 = v46;
      *(_DWORD *)(v13 + 820) = v48 + 1;
      v51 = v88[0];
      v88[0] = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
    }
    v14 = *(_QWORD *)(v13 + 64776);
  }
  *(_DWORD *)v14 += 2;
LABEL_4:
  if (*(_DWORD *)(v13 + 80))
  {
    v68 = *(_DWORD *)(v13 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_22;
  }
  v88[0] = 0;
  v88[1] = a2;
  v89 = -1;
  v90 &= 0xF8u;
  v91 = 0;
  v92 = 1;
  v93 = 0;
  v15 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v15 + 0xD) & 4) != 0)
  {
    (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v14, a4, v88);
    goto LABEL_22;
  }
  v16 = *((_QWORD *)a1 + 7);
  if (v14)
  {
    v17 = *(_DWORD *)(v14 + 16);
    if ((v17 & 0x20) == 0)
    {
      v18 = *(_BYTE **)(v14 + 8);
      v19 = *(unsigned int *)(v14 + 4);
      if ((v17 & 4) != 0)
      {
        if ((_DWORD)v19)
        {
          v20 = *v18 - 48;
          if (v20 <= 9 && (v19 < 2 || *v18 != 48))
          {
            v85 = v18 + 1;
            v86 = v19 - 1;
            while (v86)
            {
              if (v20 <= 0x19999999)
              {
                v87 = *v85 - 48;
                if (v87 <= 9)
                {
                  v29 = __CFADD__(v87, 10 * v20);
                  v20 = v87 + 10 * (_DWORD)v20;
                  ++v85;
                  --v86;
                  if (!v29)
                    continue;
                }
              }
              goto LABEL_11;
            }
LABEL_90:
            if ((_DWORD)v20 != -1)
            {
              (*(void (**)(WTF::AtomStringImpl *, JSC::JSGlobalObject *, uint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, v20, a4, 0);
              goto LABEL_22;
            }
          }
        }
      }
      else if ((_DWORD)v19)
      {
        v20 = *(unsigned __int16 *)v18 - 48;
        if (v20 <= 9 && (*(_WORD *)v18 != 48 || v19 <= 1))
        {
          v26 = (unsigned __int16 *)(v18 + 2);
          v27 = v19 - 1;
          while (v27)
          {
            if (v20 <= 0x19999999)
            {
              v28 = *v26 - 48;
              if (v28 <= 9)
              {
                v29 = __CFADD__(v28, 10 * v20);
                v20 = v28 + 10 * (_DWORD)v20;
                ++v26;
                --v27;
                if (!v29)
                  continue;
              }
            }
            goto LABEL_11;
          }
          goto LABEL_90;
        }
      }
    }
  }
LABEL_11:
  if (*(_QWORD *)(*(_QWORD *)(v16 + 41952) + 16) != v14)
  {
    v21 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v21 & 0x10) == 0)
    {
      v22 = a2;
      while ((*(_WORD *)(v15 + 12) & 0x800) == 0 && (v22 == a2 || (*(_WORD *)(v15 + 12) & 0x400) == 0))
      {
        v23 = *(WTF::AtomStringImpl **)(v15 + 48);
        if (!v23)
          v23 = (WTF::AtomStringImpl *)*((_QWORD *)v22 + 2);
        if (v23 == (WTF::AtomStringImpl *)2)
        {
          if ((*((_BYTE *)a2 + 6) & 0x20) == 0 || (v21 & 0x400000) != 0)
          {
            var48[0] = *((JSC::VM **)a1 + 7);
            v30 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a2, v16, v14, (uint64_t)a4, 0, (uint64_t)v88, a7, a8, a9);
            if (a2 && (v90 & 1) != 0)
              JSC::throwTypeError((unint64_t)a1, var48, (uint64_t)v30, (uint64_t)a2);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a2, (unint64_t)a1, v14, (uint64_t)a4, (uint64_t)v88, a9, a6, a7, a8);
          }
          goto LABEL_22;
        }
        v15 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
        v22 = v23;
        if ((*(_BYTE *)(v15 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow((unsigned __int8 *)a2, (unint64_t)a1, v14, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v88, a6, a7, a8, a9);
LABEL_22:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValCellSymbolStrict(unint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::PropertyTable *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  const char *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD v50[2];
  int v51;
  int v52;
  uint64_t v53;
  JSC::VM *var28[6];

  v10 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v10 + 40) = var28[5];
  v11 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)v11 += 2;
  v50[0] = 0;
  v50[1] = a2;
  v51 = -1;
  a5.n128_u64[0] = 16777217;
  v52 = 16777217;
  v53 = 0;
  v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v12 + 0xD) & 4) != 0)
  {
    (*(void (**)(unsigned __int8 *, unint64_t, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v11, a4, v50);
    goto LABEL_19;
  }
  v13 = *(_DWORD *)(v11 + 16);
  if ((v13 & 0x20) == 0)
  {
    v14 = *(_BYTE **)(v11 + 8);
    v15 = *(unsigned int *)(v11 + 4);
    if ((v13 & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        v16 = *v14 - 48;
        if (v16 <= 9 && (v15 < 2 || *v14 != 48))
        {
          v47 = v14 + 1;
          v48 = v15 - 1;
          while (v48)
          {
            if (v16 > 0x19999999)
              goto LABEL_6;
            v49 = *v47 - 48;
            if (v49 > 9)
              goto LABEL_6;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v36 = __CFADD__(v49, 10 * v16);
            v16 = v49 + 10 * v16;
            ++v47;
            --v48;
            if (v36)
              goto LABEL_7;
          }
          goto LABEL_55;
        }
      }
    }
    else if ((_DWORD)v15)
    {
      v16 = *(unsigned __int16 *)v14 - 48;
      if (v16 <= 9 && (*(_WORD *)v14 != 48 || v15 <= 1))
      {
        v33 = (unsigned __int16 *)(v14 + 2);
        v34 = v15 - 1;
        while (v34)
        {
          if (v16 > 0x19999999)
            goto LABEL_6;
          v35 = *v33 - 48;
          if (v35 > 9)
            goto LABEL_6;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v36 = __CFADD__(v35, 10 * v16);
          v16 = v35 + 10 * v16;
          ++v33;
          --v34;
          if (v36)
            goto LABEL_7;
        }
LABEL_55:
        v17 = 0x100000000;
        if (v16 == -1)
        {
          v17 = 0;
          v18 = 0;
        }
        else
        {
          v18 = v16;
        }
        if (v16 == -1)
          v19 = 0;
        else
          v19 = v16 & 0xFFFFFF00;
LABEL_7:
        if (HIDWORD(v17))
        {
          (*(void (**)(unsigned __int8 *, unint64_t, unint64_t, const JSC::PropertyTable *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, v17 | v19 | v18, a4, 1);
          goto LABEL_19;
        }
        goto LABEL_8;
      }
    }
LABEL_6:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_7;
  }
LABEL_8:
  if (*(_QWORD *)(*(_QWORD *)(v10 + 41952) + 16) != v11)
  {
    v20 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v20 & 0x10) == 0)
    {
      v21 = a2;
      while ((*(_WORD *)(v12 + 12) & 0x800) == 0 && (v21 == a2 || (*(_WORD *)(v12 + 12) & 0x400) == 0))
      {
        v22 = *(unsigned __int8 **)(v12 + 48);
        if (!v22)
          v22 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        if (v22 == (unsigned __int8 *)2)
        {
          if ((a2[6] & 0x20) == 0 || (v20 & 0x400000) != 0)
          {
            var28[0] = (JSC::VM *)v10;
            v37 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v10, v11, (uint64_t)a4, 0, (uint64_t)v50, a8, a9, a5);
            if (v23 && (v52 & 1) != 0)
              JSC::throwTypeError(a1, var28, (uint64_t)v37, (uint64_t)v23);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(a2, a1, v11, (uint64_t)a4, (uint64_t)v50, a5, a7, a8, a9);
          }
          goto LABEL_19;
        }
        v12 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
        v21 = v22;
        if ((*(_BYTE *)(v12 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow(a2, a1, v11, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v50, a7, a8, a9, a5);
LABEL_19:
  v30 = *(_QWORD *)(v10 + 16);
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  return v30;
}

uint64_t operationPutByValCellSymbolSloppy(unint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::PropertyTable *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  const char *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD v50[2];
  int v51;
  int v52;
  uint64_t v53;
  JSC::VM *var28[6];

  v10 = *(_QWORD *)(a1 + 56);
  *(JSC::VM **)(v10 + 40) = var28[5];
  v11 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)v11 += 2;
  v50[0] = 0;
  v50[1] = a2;
  v51 = -1;
  a5.n128_u64[0] = 0x100000001000000;
  v52 = 0x1000000;
  v53 = 0;
  v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v12 + 0xD) & 4) != 0)
  {
    (*(void (**)(unsigned __int8 *, unint64_t, unint64_t, const JSC::PropertyTable *, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x48))(a2, a1, v11, a4, v50);
    goto LABEL_19;
  }
  v13 = *(_DWORD *)(v11 + 16);
  if ((v13 & 0x20) == 0)
  {
    v14 = *(_BYTE **)(v11 + 8);
    v15 = *(unsigned int *)(v11 + 4);
    if ((v13 & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        v16 = *v14 - 48;
        if (v16 <= 9 && (v15 < 2 || *v14 != 48))
        {
          v47 = v14 + 1;
          v48 = v15 - 1;
          while (v48)
          {
            if (v16 > 0x19999999)
              goto LABEL_6;
            v49 = *v47 - 48;
            if (v49 > 9)
              goto LABEL_6;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v36 = __CFADD__(v49, 10 * v16);
            v16 = v49 + 10 * v16;
            ++v47;
            --v48;
            if (v36)
              goto LABEL_7;
          }
          goto LABEL_55;
        }
      }
    }
    else if ((_DWORD)v15)
    {
      v16 = *(unsigned __int16 *)v14 - 48;
      if (v16 <= 9 && (*(_WORD *)v14 != 48 || v15 <= 1))
      {
        v33 = (unsigned __int16 *)(v14 + 2);
        v34 = v15 - 1;
        while (v34)
        {
          if (v16 > 0x19999999)
            goto LABEL_6;
          v35 = *v33 - 48;
          if (v35 > 9)
            goto LABEL_6;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v36 = __CFADD__(v35, 10 * v16);
          v16 = v35 + 10 * v16;
          ++v33;
          --v34;
          if (v36)
            goto LABEL_7;
        }
LABEL_55:
        v17 = 0x100000000;
        if (v16 == -1)
        {
          v17 = 0;
          v18 = 0;
        }
        else
        {
          v18 = v16;
        }
        if (v16 == -1)
          v19 = 0;
        else
          v19 = v16 & 0xFFFFFF00;
LABEL_7:
        if (HIDWORD(v17))
        {
          (*(void (**)(unsigned __int8 *, unint64_t, unint64_t, const JSC::PropertyTable *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, v17 | v19 | v18, a4, 0);
          goto LABEL_19;
        }
        goto LABEL_8;
      }
    }
LABEL_6:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_7;
  }
LABEL_8:
  if (*(_QWORD *)(*(_QWORD *)(v10 + 41952) + 16) != v11)
  {
    v20 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x10);
    if ((v20 & 0x10) == 0)
    {
      v21 = a2;
      while ((*(_WORD *)(v12 + 12) & 0x800) == 0 && (v21 == a2 || (*(_WORD *)(v12 + 12) & 0x400) == 0))
      {
        v22 = *(unsigned __int8 **)(v12 + 48);
        if (!v22)
          v22 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        if (v22 == (unsigned __int8 *)2)
        {
          if ((a2[6] & 0x20) == 0 || (v20 & 0x400000) != 0)
          {
            var28[0] = (JSC::VM *)v10;
            v37 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(a2, v10, v11, (uint64_t)a4, 0, (uint64_t)v50, a8, a9, a5);
            if (v23 && (v52 & 1) != 0)
              JSC::throwTypeError(a1, var28, (uint64_t)v37, (uint64_t)v23);
          }
          else
          {
            JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded(a2, a1, v11, (uint64_t)a4, (uint64_t)v50, a5, a7, a8, a9);
          }
          goto LABEL_19;
        }
        v12 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
        v21 = v22;
        if ((*(_BYTE *)(v12 + 0x10) & 0x10) != 0)
          break;
      }
    }
  }
  JSC::JSObject::putInlineSlow(a2, a1, v11, a4, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v50, a7, a8, a9, a5);
LABEL_19:
  v30 = *(_QWORD *)(v10 + 16);
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *(_DWORD *)v11 -= 2;
  }
  return v30;
}

uint64_t operationPutByValBeyondArrayBoundsStrict(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  void (*v15)(_DWORD *, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *);
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  int v34;
  int v35;
  uint64_t v36;
  uint64_t vars0;

  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v13 + 40) = vars0;
  if ((a3 & 0x80000000) != 0)
  {
    v33[0] = 0;
    v33[1] = a2;
    v34 = -1;
    v35 = 16777217;
    v36 = 0;
    v15 = *(void (**)(_DWORD *, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x48);
    JSC::Identifier::from((uint64_t **)v13, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v32);
    v15(a2, a1, v32, a4, v33);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  else if ((JSC::JSObject::trySetIndexQuickly((unint64_t)a2, (JSC::VM *)v13, a3, a4, 0, a6, a7, a8, a9) & 1) == 0)
  {
    (*(void (**)(_DWORD *, uint64_t, unint64_t, unint64_t, uint64_t))(16
                                                                                           * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x50))(a2, a1, a3, a4, 1);
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValBeyondArrayBoundsSloppy(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  void (*v15)(_DWORD *, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *);
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  int v34;
  int v35;
  uint64_t v36;
  uint64_t vars0;

  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v13 + 40) = vars0;
  if ((a3 & 0x80000000) != 0)
  {
    v33[0] = 0;
    v33[1] = a2;
    v34 = -1;
    v35 = 0x1000000;
    v36 = 0;
    v15 = *(void (**)(_DWORD *, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x48);
    JSC::Identifier::from((uint64_t **)v13, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v32);
    v15(a2, a1, v32, a4, v33);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  else if ((JSC::JSObject::trySetIndexQuickly((unint64_t)a2, (JSC::VM *)v13, a3, a4, 0, a6, a7, a8, a9) & 1) == 0)
  {
    (*(void (**)(_DWORD *, uint64_t, unint64_t, unint64_t, _QWORD))(16
                                                                                          * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0x50))(a2, a1, a3, a4, 0);
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutDoubleByValBeyondArrayBoundsStrict(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *);
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];
  int v41;
  int v42;
  uint64_t v43;
  uint64_t vars0;

  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = vars0;
  v13 = *(_QWORD *)&a9 + 0x2000000000000;
  if ((a3 & 0x80000000) != 0)
  {
    v40[0] = 0;
    v40[1] = a2;
    v41 = -1;
    v42 = 16777217;
    v43 = 0;
    v19 = *(void (**)(unint64_t, uint64_t, WTF::StringImpl *, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x48);
    JSC::Identifier::from((uint64_t **)v12, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v39);
    v19(a2, a1, v39, v13, v40);
    v27 = v39;
    v39 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 8);
    switch(*(_BYTE *)(a2 + 4) & 0x1F)
    {
      case 0:
      case 1:
        if ((JSC::JSObject::trySetIndexQuicklyForTypedArray(a2, a3, *(_QWORD *)&a9 + 0x2000000000000, 0) & 1) == 0)
          goto LABEL_11;
        return *(_QWORD *)(v12 + 16);
      case 3:
        goto LABEL_11;
      case 4:
      case 5:
        if (*(_DWORD *)(v14 - 4) <= a3)
          goto LABEL_11;
        if (v13 > 0xFFFDFFFFFFFFFFFFLL)
        {
LABEL_3:
          if (*(_DWORD *)(v14 - 4) <= a3)
          {
LABEL_11:
            (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, a3, v13, 1);
          }
          else
          {
            *(_QWORD *)(v14 + 8 * a3) = v13;
            if (*(_DWORD *)(v14 - 8) <= a3)
              *(_DWORD *)(v14 - 8) = a3 + 1;
LABEL_6:
            if (a9 != NAN
              && (v13 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a2 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v12 + 192, a2);
            }
          }
        }
        else
        {
          JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)a2, (JSC::VM *)v12, a3, *(_QWORD *)&a9 + 0x2000000000000, a5, a6, a7, a8);
        }
        break;
      case 6:
      case 7:
        if (*(_DWORD *)(v14 - 4) <= a3)
          goto LABEL_11;
        if (*(_QWORD *)&a9 >= 0xFFFE000000000000)
        {
          JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)a2, (JSC::VM *)v12, a3, *(_QWORD *)&a9 + 0x2000000000000, a5, a6, a7, a8, a9);
        }
        else
        {
          if (v13 > 0xFFFDFFFFFFFFFFFFLL)
            a9 = (double)SLODWORD(a9);
          *(double *)(v14 + 8 * a3) = a9;
          if (*(_DWORD *)(v14 - 8) <= a3)
            *(_DWORD *)(v14 - 8) = a3 + 1;
        }
        return *(_QWORD *)(v12 + 16);
      case 8:
      case 9:
        goto LABEL_3;
      case 0xA:
      case 0xB:
        if (*(_DWORD *)(v14 - 4) <= a3)
          goto LABEL_11;
        v16 = *(_QWORD *)(a2 + 8);
        v17 = v14 + 8 * a3;
        v18 = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(v17 + 16) = v13;
        if (a9 != NAN
          && (v13 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a2 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v12 + 192, a2);
        }
        if (!v18)
        {
          ++*(_DWORD *)(v16 + 12);
          if (*(_DWORD *)(v16 - 8) <= a3)
            *(_DWORD *)(v16 - 8) = a3 + 1;
        }
        return *(_QWORD *)(v12 + 16);
      case 0xC:
      case 0xD:
        if (*(_DWORD *)(v14 - 4) <= a3)
          goto LABEL_11;
        v28 = v14 + 8 * a3;
        v30 = *(_QWORD *)(v28 + 16);
        v29 = (unint64_t *)(v28 + 16);
        if (!v30)
          goto LABEL_11;
        *v29 = v13;
        goto LABEL_6;
      default:
        if ((*(_BYTE *)(a2 + 4) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198473A30);
        }
        goto LABEL_11;
    }
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationPutDoubleByValBeyondArrayBoundsSloppy(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t, _QWORD *);
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  int v34;
  int v35;
  uint64_t v36;
  uint64_t vars0;

  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 40) = vars0;
  v13 = *(_QWORD *)&a9 + 0x2000000000000;
  if ((a3 & 0x80000000) != 0)
  {
    v33[0] = 0;
    v33[1] = a2;
    v34 = -1;
    v35 = 0x1000000;
    v36 = 0;
    v14 = *(void (**)(_DWORD *, uint64_t, WTF::StringImpl *, uint64_t, _QWORD *))(16
                                                                                         * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x48);
    JSC::Identifier::from((uint64_t **)v12, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v32);
    v14(a2, a1, v32, v13, v33);
    v22 = v32;
    v32 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else if ((JSC::JSObject::trySetIndexQuickly((unint64_t)a2, (JSC::VM *)v12, a3, *(_QWORD *)&a9 + 0x2000000000000, 0, a6, a7, a8, a9) & 1) == 0)
  {
    (*(void (**)(_DWORD *, uint64_t, unint64_t, uint64_t, _QWORD))(16
                                                                                 * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x50))(a2, a1, a3, v13, 0);
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationPutDoubleByValDirectBeyondArrayBoundsStrict(JSC::ExecutableBase *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF::AtomStringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;
  uint64_t var60[13];

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var60[12];
  v12 = *(_QWORD *)&a9 + 0x2000000000000;
  if ((a3 & 0x80000000) == 0)
  {
    JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, (JSC::VM *)a3, *(_QWORD *)&a9 + 0x2000000000000, 0, 2, a7, a8, a9);
    return *(_QWORD *)(v11 + 16);
  }
  v41[0] = 0;
  v41[1] = a2;
  v42 = -1;
  v43 = 16777217;
  v44 = 0;
  JSC::Identifier::from((uint64_t **)v11, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v40);
  v21 = (unint64_t)v40;
  v22 = *(unsigned __int8 *)(a2 + 5);
  v23 = v22;
  if (v22 == 26)
  {
    if (*(WTF::StringImpl **)(*(_QWORD *)(v11 + 41952) + 2160) == v40)
    {
      HIBYTE(v43) = 0;
      v31 = *(_QWORD *)(a2 + 24);
      if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v31 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v11, a1, (const JSC::PropertyTable *)v21, v16, v17, v18, v19, v20);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v24, v14, (uint64_t)v15, v16, v17, v18, v19))
    {
      goto LABEL_18;
    }
    v23 = *(unsigned __int8 *)(a2 + 5);
  }
  v25 = (_DWORD *)a2;
  if (v23 == 32)
    v25 = *(_DWORD **)(a2 + 16);
  v26 = 16 * (*v25 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v26 + 0x12) & 0x10) == 0
    && (!(v21 >> 4)
     || ((v21 >> 4) & ~*(_DWORD *)(16 * (*v25 & 0xFFFFFFFE) + 0x20)) != 0
     || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v26, (JSC::VM *)v11, v14, v15, v16, v17, v18, v19), !v27)|| (var60[0] = v21, v28 = JSC::PropertyTable::get(v27, var60), (_DWORD)v28 == -1)|| (v28 & 0x800000000) == 0)&& (v22 == 26|| ((*(_BYTE *)(v26 + 10) & 0x20) == 0 || (*(_BYTE *)(v26 + 18) & 0x40) != 0)&& *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v26 + 76) + 0x90) == JSC::JSObject::defineOwnProperty))
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v11, v21, v12, 0, (uint64_t)v41, v18, v19, v20);
  }
  else
  {
    HIBYTE(v43) = 0;
    var60[0] = v12;
    var60[1] = 0;
    var60[2] = 0;
    var60[3] = 0x700000000;
    (*(void (**)(unint64_t, JSC::ExecutableBase *, unint64_t, uint64_t *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v21, var60, 1);
  }
LABEL_18:
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v29, v14, (uint64_t)v15, v16, v17, v18, v19);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t JSC::JSObject::putDirectIndex(unint64_t a1, uint64_t a2, JSC::VM *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v12;
  unsigned int v13;
  uint64_t v14;
  JSC::VM *v15;
  int v16;
  double v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((_DWORD)a5)
    return JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)a1, a2, a3);
  v12 = *(_BYTE *)(a1 + 4);
  v13 = v12 & 0x1F;
  if (v13 - 4 >= 0xA)
  {
    v19 = v13 > 3 || v13 == 2;
    if (v19 && (*(_BYTE *)(a1 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198474170);
    }
    return JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)a1, a2, a3);
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v14 - 4) <= a3)
    return JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)a1, a2, a3);
  v15 = *(JSC::VM **)(a2 + 56);
  v16 = v12 & 0xF;
  if ((v16 - 8) >= 2)
  {
    switch(v16)
    {
      case 0:
      case 1:
        JSC::JSObject::setIndexQuicklyForTypedArray(a1, a3, a4);
        return 1;
      case 4:
      case 5:
        if (a4 > 0xFFFDFFFFFFFFFFFFLL)
          goto LABEL_5;
        if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
          && (*(_QWORD *)&a9 = a4 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
        {
          JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
        else
        {
          JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
        JSC::JSObject::setIndexQuickly(a1, v15, (uint64_t)a3, a4, v20, v21, v22, v23);
        return 1;
      case 6:
      case 7:
        if (a4 >> 49)
        {
          v18 = (double)(int)a4;
          if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v18 = a4 - 0x2000000000000;
          *(double *)(v14 + 8 * a3) = v18;
LABEL_15:
          if (*(_DWORD *)(v14 - 8) <= a3)
            *(_DWORD *)(v14 - 8) = (_DWORD)a3 + 1;
        }
        else
        {
          JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
        break;
      case 10:
      case 11:
      case 12:
      case 13:
        v26 = *(_QWORD *)(a1 + 8);
        v24 = v14 + 8 * a3;
        v25 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = a4;
        if (a4
          && (a4 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v15 + 190) >= *(unsigned __int8 *)(a1 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, a1);
        }
        v14 = v26;
        if (v25)
          return 1;
        ++*(_DWORD *)(v26 + 12);
        goto LABEL_15;
      default:
        __break(0xC471u);
        JUMPOUT(0x19847414CLL);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(v14 + 8 * a3) = a4;
    if (*(_DWORD *)(v14 - 8) <= a3)
      *(_DWORD *)(v14 - 8) = (_DWORD)a3 + 1;
    if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v15 + 190) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, a1);
  }
  return 1;
}

uint64_t operationPutDoubleByValDirectBeyondArrayBoundsSloppy(JSC::ExecutableBase *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF::AtomStringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;
  uint64_t var60[13];

  v11 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v11 + 40) = var60[12];
  v12 = a9.i64[0] + 0x2000000000000;
  if ((a3 & 0x80000000) == 0)
  {
    JSC::JSObject::putDirectIndex(a2, (unint64_t)a1, (JSC::VM *)a3, a9.i64[0] + 0x2000000000000, a5, a6, a7, a8, a9);
    return *(_QWORD *)(v11 + 16);
  }
  v41[0] = 0;
  v41[1] = a2;
  v42 = -1;
  v43 = 0x1000000;
  v44 = 0;
  JSC::Identifier::from((uint64_t **)v11, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v40);
  v21 = (unint64_t)v40;
  v22 = *(unsigned __int8 *)(a2 + 5);
  v23 = v22;
  if (v22 == 26)
  {
    if (*(WTF::StringImpl **)(*(_QWORD *)(v11 + 41952) + 2160) == v40)
    {
      HIBYTE(v43) = 0;
      v31 = *(_QWORD *)(a2 + 24);
      if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v31 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v11, a1, (const JSC::PropertyTable *)v21, v16, v17, v18, v19, v20);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v24, v14, (uint64_t)v15, v16, v17, v18, v19))
    {
      goto LABEL_18;
    }
    v23 = *(unsigned __int8 *)(a2 + 5);
  }
  v25 = (_DWORD *)a2;
  if (v23 == 32)
    v25 = *(_DWORD **)(a2 + 16);
  v26 = 16 * (*v25 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v26 + 0x12) & 0x10) == 0
    && (!(v21 >> 4)
     || ((v21 >> 4) & ~*(_DWORD *)(16 * (*v25 & 0xFFFFFFFE) + 0x20)) != 0
     || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v26, (JSC::VM *)v11, v14, v15, v16, v17, v18, v19), !v27)|| (var60[0] = v21, v28 = JSC::PropertyTable::get(v27, var60), (_DWORD)v28 == -1)|| (v28 & 0x800000000) == 0)&& (v22 == 26|| ((*(_BYTE *)(v26 + 10) & 0x20) == 0 || (*(_BYTE *)(v26 + 18) & 0x40) != 0)&& *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v26 + 76) + 0x90) == JSC::JSObject::defineOwnProperty))
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v11, v21, v12, 0, (uint64_t)v41, v18, v19, v20);
  }
  else
  {
    HIBYTE(v43) = 0;
    var60[0] = v12;
    var60[1] = 0;
    var60[2] = 0;
    var60[3] = 0x700000000;
    (*(void (**)(unint64_t, JSC::ExecutableBase *, unint64_t, uint64_t *, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v21, var60, 0);
  }
LABEL_18:
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v29, v14, (uint64_t)v15, v16, v17, v18, v19);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  return *(_QWORD *)(v11 + 16);
}

uint64_t operationPutByValDirectCellStringStrict(JSC::JSGlobalObject *a1, unint64_t a2, JSC::JSRopeString *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  int v112;
  int v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t vars0;

  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  v14 = *((_QWORD *)a3 + 1);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (!*(_DWORD *)(v13 + 80))
      goto LABEL_64;
    v98 = *(_DWORD *)(v13 + 80);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
    {
      v52 = v115;
      if (!v115)
      {
        v14 = 0;
        goto LABEL_4;
      }
      v14 = 0;
      v51 = *(_DWORD *)v115;
    }
    else
    {
LABEL_64:
      v14 = (unint64_t)v115;
      if (!v115)
        goto LABEL_4;
      v51 = *(_DWORD *)v115 + 2;
      *(_DWORD *)v115 = v51;
      v52 = (WTF::StringImpl *)v14;
    }
    v53 = v51 - 2;
    if (v53)
    {
      *(_DWORD *)v52 = v53;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
  {
    v54 = *(WTF::StringImpl **)(v13 + 64768);
    if (v54 != (WTF::StringImpl *)v14)
    {
      *(_DWORD *)v14 += 2;
      *(_QWORD *)(v13 + 64768) = v14;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v55 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v55)
      {
        if ((*((_BYTE *)v55 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v55 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v55, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v115);
          v55 = v115;
        }
      }
      v56 = *(WTF::StringImpl **)(v13 + 64776);
      *(_QWORD *)(v13 + 64776) = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v57 = *(_DWORD **)(v13 + 64776);
      *v57 += 2;
      __dmb(0xAu);
      v58 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v57;
      v115 = v58;
      v59 = (_QWORD *)(v13 + 808);
      v60 = *(unsigned int *)(v13 + 820);
      if ((_DWORD)v60 == *(_DWORD *)(v13 + 816))
      {
        v62 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v115);
        v60 = *(unsigned int *)(v13 + 820);
        v61 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 808) + 8 * v60);
        v58 = *v62;
      }
      else
      {
        v61 = (WTF::StringImpl **)(*v59 + 8 * v60);
        v62 = &v115;
      }
      *v62 = 0;
      *v61 = v58;
      *(_DWORD *)(v13 + 820) = v60 + 1;
      v63 = v115;
      v115 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
    v14 = *(_QWORD *)(v13 + 64776);
  }
  *(_DWORD *)v14 += 2;
LABEL_4:
  if (*(_DWORD *)(v13 + 80))
  {
    v80 = *(_DWORD *)(v13 + 80);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_130;
  }
  v111[0] = 0;
  v111[1] = a2;
  v112 = -1;
  a9.n128_u64[0] = 16777217;
  v113 = 16777217;
  v114 = 0;
  v15 = *(unsigned __int8 *)(a2 + 5);
  if (v15 <= 0x16)
  {
    __break(0xC471u);
    JUMPOUT(0x1984748F8);
  }
  if (v14)
  {
    v16 = *(_DWORD *)(v14 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(v14 + 8);
      v18 = *(unsigned int *)(v14 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_11;
        v19 = (JSC::VM *)(*v17 - 48);
        if (v19 > 9 || v18 >= 2 && *v17 == 48)
          goto LABEL_11;
        v99 = v17 + 1;
        v100 = v18 - 1;
        while (v100)
        {
          if (v19 <= 0x19999999)
          {
            v101 = *v99 - 48;
            if (v101 <= 9)
            {
              v42 = __CFADD__(v101, 10 * (_DWORD)v19);
              v19 = (JSC::VM *)(v101 + 10 * (_DWORD)v19);
              ++v99;
              --v100;
              if (!v42)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!(_DWORD)v18)
          goto LABEL_11;
        v19 = (JSC::VM *)(*(unsigned __int16 *)v17 - 48);
        if (v19 > 9)
          goto LABEL_11;
        if (*(_WORD *)v17 == 48 && v18 > 1)
          goto LABEL_11;
        v39 = (unsigned __int16 *)(v17 + 2);
        v40 = v18 - 1;
        while (v40)
        {
          if (v19 <= 0x19999999)
          {
            v41 = *v39 - 48;
            if (v41 <= 9)
            {
              v42 = __CFADD__(v41, 10 * (_DWORD)v19);
              v19 = (JSC::VM *)(v41 + 10 * (_DWORD)v19);
              ++v39;
              --v40;
              if (!v42)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      if ((_DWORD)v19 != -1)
      {
        JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, v19, (unint64_t)a4, 0, 2, a7, a8, COERCE_DOUBLE(16777217));
        goto LABEL_130;
      }
    }
  }
LABEL_11:
  if (v15 != 26)
    goto LABEL_20;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2160) == v14)
  {
    HIBYTE(v113) = 0;
    v20 = *(_QWORD *)(a2 + 24);
    if ((v20 & 1) != 0)
    {
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      if ((v20 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_DWORD *)(v21 + 40) = 0;
        if ((v20 & 8) != 0)
          v22 = (uint64_t *)(v21 - 16);
        else
          v22 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFC000 | 8);
        v23 = *v22;
        v115 = (WTF::StringImpl *)&off_1E3583C90;
        v116 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v21 + 32), v23);
      }
    }
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v13, a1, (const JSC::PropertyTable *)v14, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_20;
  v81 = *(_DWORD *)(v13 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_20:
    v24 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v24 = *(_DWORD **)(a2 + 16);
    v25 = 16 * (*v24 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v25 + 0x12) & 0x10) != 0)
      goto LABEL_72;
    if ((v14 >> 4) && ((v14 >> 4) & ~*(_DWORD *)(v25 + 32)) == 0)
    {
      v26 = *(_QWORD *)(v25 + 88);
      if (v26
        || (v27 = *(_QWORD *)(v25 + 64)) != 0
        && (*(_BYTE *)(v27 + 5) == 1 || *(_DWORD *)(v27 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v25, (JSC::VM *)v13, 1, a4, a5, a6, a7, a8), v26))
      {
        if (*(_DWORD *)(v26 + 24))
        {
          v28 = *(_QWORD *)(v26 + 16);
          v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
          v30 = *(unsigned int *)(v26 + 8);
          v31 = *(_DWORD *)(v14 + 16);
          if ((v28 & 1) != 0)
          {
            if ((v31 & 0x20) != 0)
              v31 = *(_DWORD *)(v14 + 32);
            v32 = *(_DWORD *)(v26 + 12);
            v33 = (v31 >> 8) & *(_QWORD *)&v32;
            v34 = *(unsigned __int8 *)(v29 + v33);
            if (*(_BYTE *)(v29 + v33))
            {
              v35 = v29 + v30;
              v36 = 1;
              while (1)
              {
                v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
                if (v14 == (v37 & 0xFFFFFFFFFFFFLL))
                  break;
                v33 = ((_DWORD)v33 + v36) & v32;
                v34 = *(unsigned __int8 *)(v29 + v33);
                ++v36;
                if (!*(_BYTE *)(v29 + v33))
                  goto LABEL_69;
              }
              v43 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
              goto LABEL_58;
            }
          }
          else
          {
            if ((v31 & 0x20) != 0)
              v31 = *(_DWORD *)(v14 + 32);
            v44 = *(_DWORD *)(v26 + 12);
            v45 = v44 & (v31 >> 8);
            v46 = *(_DWORD *)(v29 + 4 * v45);
            if (v46)
            {
              v47 = v29 + 4 * v30;
              v48 = 1;
              while (1)
              {
                v49 = (v46 - 1);
                if (v14 == *(_QWORD *)(v47 + 16 * v49))
                  break;
                v45 = (v45 + v48) & v44;
                v46 = *(_DWORD *)(v29 + 4 * v45);
                ++v48;
                if (!v46)
                  goto LABEL_69;
              }
              v43 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
LABEL_58:
              if ((_DWORD)v43 != -1 && (v43 & 0x800000000) != 0)
                goto LABEL_72;
            }
          }
        }
      }
    }
LABEL_69:
    if (v15 == 26
      || ((*(_BYTE *)(v25 + 10) & 0x20) == 0 || (*(_BYTE *)(v25 + 18) & 0x40) != 0)
      && *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v25 + 76) + 0x90) == JSC::JSObject::defineOwnProperty)
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v13, v14, (uint64_t)a4, 0, (uint64_t)v111, a7, a8, a9);
      goto LABEL_130;
    }
LABEL_72:
    v115 = a4;
    v116 = 0;
    v117 = 0;
    v118 = 0x700000000;
    (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v14, &v115, 1);
  }
LABEL_130:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValDirectCellStringSloppy(JSC::JSGlobalObject *a1, unint64_t a2, JSC::JSRopeString *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  int v112;
  int v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t vars0;

  v13 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v13 + 40) = vars0;
  v14 = *((_QWORD *)a3 + 1);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(a3, a1);
    if (!*(_DWORD *)(v13 + 80))
      goto LABEL_64;
    v98 = *(_DWORD *)(v13 + 80);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
    {
      v52 = v115;
      if (!v115)
      {
        v14 = 0;
        goto LABEL_4;
      }
      v14 = 0;
      v51 = *(_DWORD *)v115;
    }
    else
    {
LABEL_64:
      v14 = (unint64_t)v115;
      if (!v115)
        goto LABEL_4;
      v51 = *(_DWORD *)v115 + 2;
      *(_DWORD *)v115 = v51;
      v52 = (WTF::StringImpl *)v14;
    }
    v53 = v51 - 2;
    if (v53)
    {
      *(_DWORD *)v52 = v53;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v14 + 16) & 0x10) == 0)
  {
    v54 = *(WTF::StringImpl **)(v13 + 64768);
    if (v54 != (WTF::StringImpl *)v14)
    {
      *(_DWORD *)v14 += 2;
      *(_QWORD *)(v13 + 64768) = v14;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v55 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      if (v55)
      {
        if ((*((_BYTE *)v55 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v55 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v55, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v115);
          v55 = v115;
        }
      }
      v56 = *(WTF::StringImpl **)(v13 + 64776);
      *(_QWORD *)(v13 + 64776) = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x10) == 0)
    {
      v57 = *(_DWORD **)(v13 + 64776);
      *v57 += 2;
      __dmb(0xAu);
      v58 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v57;
      v115 = v58;
      v59 = (_QWORD *)(v13 + 808);
      v60 = *(unsigned int *)(v13 + 820);
      if ((_DWORD)v60 == *(_DWORD *)(v13 + 816))
      {
        v62 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v115);
        v60 = *(unsigned int *)(v13 + 820);
        v61 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 808) + 8 * v60);
        v58 = *v62;
      }
      else
      {
        v61 = (WTF::StringImpl **)(*v59 + 8 * v60);
        v62 = &v115;
      }
      *v62 = 0;
      *v61 = v58;
      *(_DWORD *)(v13 + 820) = v60 + 1;
      v63 = v115;
      v115 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
    v14 = *(_QWORD *)(v13 + 64776);
  }
  *(_DWORD *)v14 += 2;
LABEL_4:
  if (*(_DWORD *)(v13 + 80))
  {
    v80 = *(_DWORD *)(v13 + 80);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_130;
  }
  v111[0] = 0;
  v111[1] = a2;
  v112 = -1;
  a9.n128_u64[0] = 0x100000001000000;
  v113 = 0x1000000;
  v114 = 0;
  v15 = *(unsigned __int8 *)(a2 + 5);
  if (v15 <= 0x16)
  {
    __break(0xC471u);
    JUMPOUT(0x198474FB8);
  }
  if (v14)
  {
    v16 = *(_DWORD *)(v14 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(v14 + 8);
      v18 = *(unsigned int *)(v14 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_11;
        v19 = (JSC::VM *)(*v17 - 48);
        if (v19 > 9 || v18 >= 2 && *v17 == 48)
          goto LABEL_11;
        v99 = v17 + 1;
        v100 = v18 - 1;
        while (v100)
        {
          if (v19 <= 0x19999999)
          {
            v101 = *v99 - 48;
            if (v101 <= 9)
            {
              v42 = __CFADD__(v101, 10 * (_DWORD)v19);
              v19 = (JSC::VM *)(v101 + 10 * (_DWORD)v19);
              ++v99;
              --v100;
              if (!v42)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!(_DWORD)v18)
          goto LABEL_11;
        v19 = (JSC::VM *)(*(unsigned __int16 *)v17 - 48);
        if (v19 > 9)
          goto LABEL_11;
        if (*(_WORD *)v17 == 48 && v18 > 1)
          goto LABEL_11;
        v39 = (unsigned __int16 *)(v17 + 2);
        v40 = v18 - 1;
        while (v40)
        {
          if (v19 <= 0x19999999)
          {
            v41 = *v39 - 48;
            if (v41 <= 9)
            {
              v42 = __CFADD__(v41, 10 * (_DWORD)v19);
              v19 = (JSC::VM *)(v41 + 10 * (_DWORD)v19);
              ++v39;
              --v40;
              if (!v42)
                continue;
            }
          }
          goto LABEL_11;
        }
      }
      if ((_DWORD)v19 != -1)
      {
        JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, v19, (unint64_t)a4, 0, 1, a7, a8, 7.29112205e-304);
        goto LABEL_130;
      }
    }
  }
LABEL_11:
  if (v15 != 26)
    goto LABEL_20;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2160) == v14)
  {
    HIBYTE(v113) = 0;
    v20 = *(_QWORD *)(a2 + 24);
    if ((v20 & 1) != 0)
    {
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      if ((v20 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_DWORD *)(v21 + 40) = 0;
        if ((v20 & 8) != 0)
          v22 = (uint64_t *)(v21 - 16);
        else
          v22 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFC000 | 8);
        v23 = *v22;
        v115 = (WTF::StringImpl *)&off_1E3583C90;
        v116 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v21 + 32), v23);
      }
    }
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v13, a1, (const JSC::PropertyTable *)v14, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_20;
  v81 = *(_DWORD *)(v13 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_20:
    v24 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v24 = *(_DWORD **)(a2 + 16);
    v25 = 16 * (*v24 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v25 + 0x12) & 0x10) != 0)
      goto LABEL_72;
    if ((v14 >> 4) && ((v14 >> 4) & ~*(_DWORD *)(v25 + 32)) == 0)
    {
      v26 = *(_QWORD *)(v25 + 88);
      if (v26
        || (v27 = *(_QWORD *)(v25 + 64)) != 0
        && (*(_BYTE *)(v27 + 5) == 1 || *(_DWORD *)(v27 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v25, (JSC::VM *)v13, 1, a4, a5, a6, a7, a8), v26))
      {
        if (*(_DWORD *)(v26 + 24))
        {
          v28 = *(_QWORD *)(v26 + 16);
          v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
          v30 = *(unsigned int *)(v26 + 8);
          v31 = *(_DWORD *)(v14 + 16);
          if ((v28 & 1) != 0)
          {
            if ((v31 & 0x20) != 0)
              v31 = *(_DWORD *)(v14 + 32);
            v32 = *(_DWORD *)(v26 + 12);
            v33 = (v31 >> 8) & *(_QWORD *)&v32;
            v34 = *(unsigned __int8 *)(v29 + v33);
            if (*(_BYTE *)(v29 + v33))
            {
              v35 = v29 + v30;
              v36 = 1;
              while (1)
              {
                v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
                if (v14 == (v37 & 0xFFFFFFFFFFFFLL))
                  break;
                v33 = ((_DWORD)v33 + v36) & v32;
                v34 = *(unsigned __int8 *)(v29 + v33);
                ++v36;
                if (!*(_BYTE *)(v29 + v33))
                  goto LABEL_69;
              }
              v43 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
              goto LABEL_58;
            }
          }
          else
          {
            if ((v31 & 0x20) != 0)
              v31 = *(_DWORD *)(v14 + 32);
            v44 = *(_DWORD *)(v26 + 12);
            v45 = v44 & (v31 >> 8);
            v46 = *(_DWORD *)(v29 + 4 * v45);
            if (v46)
            {
              v47 = v29 + 4 * v30;
              v48 = 1;
              while (1)
              {
                v49 = (v46 - 1);
                if (v14 == *(_QWORD *)(v47 + 16 * v49))
                  break;
                v45 = (v45 + v48) & v44;
                v46 = *(_DWORD *)(v29 + 4 * v45);
                ++v48;
                if (!v46)
                  goto LABEL_69;
              }
              v43 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
LABEL_58:
              if ((_DWORD)v43 != -1 && (v43 & 0x800000000) != 0)
                goto LABEL_72;
            }
          }
        }
      }
    }
LABEL_69:
    if (v15 == 26
      || ((*(_BYTE *)(v25 + 10) & 0x20) == 0 || (*(_BYTE *)(v25 + 18) & 0x40) != 0)
      && *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v25 + 76) + 0x90) == JSC::JSObject::defineOwnProperty)
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v13, v14, (uint64_t)a4, 0, (uint64_t)v111, a7, a8, a9);
      goto LABEL_130;
    }
LABEL_72:
    v115 = a4;
    v116 = 0;
    v117 = 0;
    v118 = 0x700000000;
    (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v14, &v115, 0);
  }
LABEL_130:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return *(_QWORD *)(v13 + 16);
}

uint64_t operationPutByValDirectCellSymbolStrict(JSC::ExecutableBase *a1, unint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v52;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  int v69;
  uint64_t v70;
  void (**v71)(JSC::StringFireDetail *__hidden);
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)v10 += 2;
  v67[0] = 0;
  v67[1] = a2;
  v68 = -1;
  a9.n128_u64[0] = 16777217;
  v69 = 16777217;
  v70 = 0;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 <= 0x16)
  {
    __break(0xC471u);
    JUMPOUT(0x19847551CLL);
  }
  v15 = *(_DWORD *)(v10 + 16);
  if ((v15 & 0x20) == 0)
  {
    v16 = *(_BYTE **)(v10 + 8);
    v17 = *(unsigned int *)(v10 + 4);
    if ((v15 & 4) != 0)
    {
      if (!(_DWORD)v17)
        goto LABEL_6;
      v18 = (JSC::VM *)(*v16 - 48);
      if (v18 > 9)
        goto LABEL_6;
      if (v17 >= 2 && *v16 == 48)
        goto LABEL_6;
      v54 = v16 + 1;
      v55 = v17 - 1;
      while (v55)
      {
        if (v18 <= 0x19999999)
        {
          v56 = *v54 - 48;
          if (v56 <= 9)
          {
            v43 = __CFADD__(v56, 10 * (_DWORD)v18);
            v18 = (JSC::VM *)(v56 + 10 * (_DWORD)v18);
            ++v54;
            --v55;
            if (!v43)
              continue;
          }
        }
        goto LABEL_6;
      }
    }
    else
    {
      if (!(_DWORD)v17)
        goto LABEL_6;
      v18 = (JSC::VM *)(*(unsigned __int16 *)v16 - 48);
      if (v18 > 9)
        goto LABEL_6;
      if (*(_WORD *)v16 == 48 && v17 > 1)
        goto LABEL_6;
      v40 = (unsigned __int16 *)(v16 + 2);
      v41 = v17 - 1;
      while (v41)
      {
        if (v18 <= 0x19999999)
        {
          v42 = *v40 - 48;
          if (v42 <= 9)
          {
            v43 = __CFADD__(v42, 10 * (_DWORD)v18);
            v18 = (JSC::VM *)(v42 + 10 * (_DWORD)v18);
            ++v40;
            --v41;
            if (!v43)
              continue;
          }
        }
        goto LABEL_6;
      }
    }
    if ((_DWORD)v18 != -1)
    {
      JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, v18, (unint64_t)a4, 0, 2, a7, a8, COERCE_DOUBLE(16777217));
      goto LABEL_87;
    }
  }
LABEL_6:
  if (v11 != 26)
    goto LABEL_15;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2160) == v10)
  {
    HIBYTE(v69) = 0;
    v19 = *(_QWORD *)(a2 + 24);
    if ((v19 & 1) != 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if ((v19 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 40) = 0;
        if ((v19 & 8) != 0)
          v21 = (uint64_t *)(v20 - 16);
        else
          v21 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
        v22 = *v21;
        v71 = &off_1E3583C90;
        v72 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v20 + 32), v22);
      }
    }
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v9, a1, (const JSC::PropertyTable *)v10, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_15;
  v52 = *(_DWORD *)(v9 + 80);
  if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v24, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_15:
    v25 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v25 = *(_DWORD **)(a2 + 16);
    v26 = 16 * (*v25 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 0x12) & 0x10) != 0)
      goto LABEL_62;
    if ((v10 >> 4) && ((v10 >> 4) & ~*(_DWORD *)(v26 + 32)) == 0)
    {
      v27 = *(_QWORD *)(v26 + 88);
      if (v27
        || (v28 = *(_QWORD *)(v26 + 64)) != 0
        && (*(_BYTE *)(v28 + 5) == 1 || *(_DWORD *)(v28 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v26, (JSC::VM *)v9, 1, a4, a5, a6, a7, a8), v27))
      {
        if (*(_DWORD *)(v27 + 24))
        {
          v29 = *(_QWORD *)(v27 + 16);
          v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
          v31 = *(unsigned int *)(v27 + 8);
          v32 = *(_DWORD *)(v10 + 16);
          if ((v29 & 1) != 0)
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v10 + 32);
            v33 = *(_DWORD *)(v27 + 12);
            v34 = (v32 >> 8) & *(_QWORD *)&v33;
            v35 = *(unsigned __int8 *)(v30 + v34);
            if (*(_BYTE *)(v30 + v34))
            {
              v36 = v30 + v31;
              v37 = 1;
              while (1)
              {
                v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
                if (v10 == (v38 & 0xFFFFFFFFFFFFLL))
                  break;
                v34 = ((_DWORD)v34 + v37) & v33;
                v35 = *(unsigned __int8 *)(v30 + v34);
                ++v37;
                if (!*(_BYTE *)(v30 + v34))
                  goto LABEL_59;
              }
              v44 = (v38 >> 16) & 0xFF00000000 | HIBYTE(v38);
              goto LABEL_53;
            }
          }
          else
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v10 + 32);
            v45 = *(_DWORD *)(v27 + 12);
            v46 = v45 & (v32 >> 8);
            v47 = *(_DWORD *)(v30 + 4 * v46);
            if (v47)
            {
              v48 = v30 + 4 * v31;
              v49 = 1;
              while (1)
              {
                v50 = (v47 - 1);
                if (v10 == *(_QWORD *)(v48 + 16 * v50))
                  break;
                v46 = (v46 + v49) & v45;
                v47 = *(_DWORD *)(v30 + 4 * v46);
                ++v49;
                if (!v47)
                  goto LABEL_59;
              }
              v44 = *(unsigned int *)(v48 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v48 + 16 * v50 + 12) << 32);
LABEL_53:
              if ((_DWORD)v44 != -1 && (v44 & 0x800000000) != 0)
                goto LABEL_62;
            }
          }
        }
      }
    }
LABEL_59:
    if (v11 == 26
      || ((*(_BYTE *)(v26 + 10) & 0x20) == 0 || (*(_BYTE *)(v26 + 18) & 0x40) != 0)
      && *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v26 + 76) + 0x90) == JSC::JSObject::defineOwnProperty)
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v9, v10, (uint64_t)a4, 0, (uint64_t)v67, a7, a8, a9);
      goto LABEL_87;
    }
LABEL_62:
    v71 = (void (**)(JSC::StringFireDetail *__hidden))a4;
    v72 = 0;
    v73 = 0;
    v74 = 0x700000000;
    (*(void (**)(unint64_t, JSC::ExecutableBase *, unint64_t, void (***)(JSC::StringFireDetail *__hidden), uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v10, &v71, 1);
  }
LABEL_87:
  v57 = *(_QWORD *)(v9 + 16);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v23, v24, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  return v57;
}

uint64_t operationPutByValDirectCellSymbolSloppy(JSC::ExecutableBase *a1, unint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v52;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  int v69;
  uint64_t v70;
  void (**v71)(JSC::StringFireDetail *__hidden);
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t vars0;

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = vars0;
  v10 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)v10 += 2;
  v67[0] = 0;
  v67[1] = a2;
  v68 = -1;
  a9.n128_u64[0] = 0x100000001000000;
  v69 = 0x1000000;
  v70 = 0;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 <= 0x16)
  {
    __break(0xC471u);
    JUMPOUT(0x1984759ACLL);
  }
  v15 = *(_DWORD *)(v10 + 16);
  if ((v15 & 0x20) == 0)
  {
    v16 = *(_BYTE **)(v10 + 8);
    v17 = *(unsigned int *)(v10 + 4);
    if ((v15 & 4) != 0)
    {
      if (!(_DWORD)v17)
        goto LABEL_6;
      v18 = (JSC::VM *)(*v16 - 48);
      if (v18 > 9)
        goto LABEL_6;
      if (v17 >= 2 && *v16 == 48)
        goto LABEL_6;
      v54 = v16 + 1;
      v55 = v17 - 1;
      while (v55)
      {
        if (v18 <= 0x19999999)
        {
          v56 = *v54 - 48;
          if (v56 <= 9)
          {
            v43 = __CFADD__(v56, 10 * (_DWORD)v18);
            v18 = (JSC::VM *)(v56 + 10 * (_DWORD)v18);
            ++v54;
            --v55;
            if (!v43)
              continue;
          }
        }
        goto LABEL_6;
      }
    }
    else
    {
      if (!(_DWORD)v17)
        goto LABEL_6;
      v18 = (JSC::VM *)(*(unsigned __int16 *)v16 - 48);
      if (v18 > 9)
        goto LABEL_6;
      if (*(_WORD *)v16 == 48 && v17 > 1)
        goto LABEL_6;
      v40 = (unsigned __int16 *)(v16 + 2);
      v41 = v17 - 1;
      while (v41)
      {
        if (v18 <= 0x19999999)
        {
          v42 = *v40 - 48;
          if (v42 <= 9)
          {
            v43 = __CFADD__(v42, 10 * (_DWORD)v18);
            v18 = (JSC::VM *)(v42 + 10 * (_DWORD)v18);
            ++v40;
            --v41;
            if (!v43)
              continue;
          }
        }
        goto LABEL_6;
      }
    }
    if ((_DWORD)v18 != -1)
    {
      JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, v18, (unint64_t)a4, 0, 1, a7, a8, 7.29112205e-304);
      goto LABEL_87;
    }
  }
LABEL_6:
  if (v11 != 26)
    goto LABEL_15;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2160) == v10)
  {
    HIBYTE(v69) = 0;
    v19 = *(_QWORD *)(a2 + 24);
    if ((v19 & 1) != 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if ((v19 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 40) = 0;
        if ((v19 & 8) != 0)
          v21 = (uint64_t *)(v20 - 16);
        else
          v21 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
        v22 = *v21;
        v71 = &off_1E3583C90;
        v72 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v20 + 32), v22);
      }
    }
  }
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v9, a1, (const JSC::PropertyTable *)v10, a5, a6, a7, a8, a9);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_15;
  v52 = *(_DWORD *)(v9 + 80);
  if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v24, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_15:
    v25 = (_DWORD *)a2;
    if (*(_BYTE *)(a2 + 5) == 32)
      v25 = *(_DWORD **)(a2 + 16);
    v26 = 16 * (*v25 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 0x12) & 0x10) != 0)
      goto LABEL_62;
    if ((v10 >> 4) && ((v10 >> 4) & ~*(_DWORD *)(v26 + 32)) == 0)
    {
      v27 = *(_QWORD *)(v26 + 88);
      if (v27
        || (v28 = *(_QWORD *)(v26 + 64)) != 0
        && (*(_BYTE *)(v28 + 5) == 1 || *(_DWORD *)(v28 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v26, (JSC::VM *)v9, 1, a4, a5, a6, a7, a8), v27))
      {
        if (*(_DWORD *)(v27 + 24))
        {
          v29 = *(_QWORD *)(v27 + 16);
          v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
          v31 = *(unsigned int *)(v27 + 8);
          v32 = *(_DWORD *)(v10 + 16);
          if ((v29 & 1) != 0)
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v10 + 32);
            v33 = *(_DWORD *)(v27 + 12);
            v34 = (v32 >> 8) & *(_QWORD *)&v33;
            v35 = *(unsigned __int8 *)(v30 + v34);
            if (*(_BYTE *)(v30 + v34))
            {
              v36 = v30 + v31;
              v37 = 1;
              while (1)
              {
                v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
                if (v10 == (v38 & 0xFFFFFFFFFFFFLL))
                  break;
                v34 = ((_DWORD)v34 + v37) & v33;
                v35 = *(unsigned __int8 *)(v30 + v34);
                ++v37;
                if (!*(_BYTE *)(v30 + v34))
                  goto LABEL_59;
              }
              v44 = (v38 >> 16) & 0xFF00000000 | HIBYTE(v38);
              goto LABEL_53;
            }
          }
          else
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v10 + 32);
            v45 = *(_DWORD *)(v27 + 12);
            v46 = v45 & (v32 >> 8);
            v47 = *(_DWORD *)(v30 + 4 * v46);
            if (v47)
            {
              v48 = v30 + 4 * v31;
              v49 = 1;
              while (1)
              {
                v50 = (v47 - 1);
                if (v10 == *(_QWORD *)(v48 + 16 * v50))
                  break;
                v46 = (v46 + v49) & v45;
                v47 = *(_DWORD *)(v30 + 4 * v46);
                ++v49;
                if (!v47)
                  goto LABEL_59;
              }
              v44 = *(unsigned int *)(v48 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v48 + 16 * v50 + 12) << 32);
LABEL_53:
              if ((_DWORD)v44 != -1 && (v44 & 0x800000000) != 0)
                goto LABEL_62;
            }
          }
        }
      }
    }
LABEL_59:
    if (v11 == 26
      || ((*(_BYTE *)(v26 + 10) & 0x20) == 0 || (*(_BYTE *)(v26 + 18) & 0x40) != 0)
      && *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v26 + 76) + 0x90) == JSC::JSObject::defineOwnProperty)
    {
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v9, v10, (uint64_t)a4, 0, (uint64_t)v67, a7, a8, a9);
      goto LABEL_87;
    }
LABEL_62:
    v71 = (void (**)(JSC::StringFireDetail *__hidden))a4;
    v72 = 0;
    v73 = 0;
    v74 = 0x700000000;
    (*(void (**)(unint64_t, JSC::ExecutableBase *, unint64_t, void (***)(JSC::StringFireDetail *__hidden), _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v10, &v71, 0);
  }
LABEL_87:
  v57 = *(_QWORD *)(v9 + 16);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v23, v24, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  return v57;
}

uint64_t operationPutByValDirectBeyondArrayBoundsStrict(JSC::ExecutableBase *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::AtomStringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v41;
  _QWORD v42[2];
  int v43;
  int v44;
  uint64_t v45;
  uint64_t var50[11];

  v9 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v9 + 40) = var50[10];
  if ((a3 & 0x80000000) == 0)
  {
    JSC::JSObject::putDirectIndex(a2, (uint64_t)a1, (JSC::VM *)a3, a4, 0, 2, a7, a8, a9);
    return *(_QWORD *)(v9 + 16);
  }
  v42[0] = 0;
  v42[1] = a2;
  v43 = -1;
  v44 = 16777217;
  v45 = 0;
  JSC::Identifier::from((uint64_t **)v9, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v41);
  v19 = (unint64_t)v41;
  v20 = (int *)a2;
  v21 = *(unsigned __int8 *)(a2 + 5);
  v22 = v21;
  if (v21 == 26)
  {
    if (*(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 2160) == v41)
    {
      HIBYTE(v44) = 0;
      v30 = *(_QWORD *)(a2 + 24);
      if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v30 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v9, a1, (const JSC::PropertyTable *)v19, v14, v15, v16, v17, v18);
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v23, v12, (uint64_t)v13, v14, v15, v16, v17))
    {
      goto LABEL_18;
    }
    v22 = *(unsigned __int8 *)(a2 + 5);
  }
  v24 = (_DWORD *)a2;
  if (v22 == 32)
    v24 = *(_DWORD **)(a2 + 16);
  v25 = 16 * (*v24 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v25 + 0x12) & 0x10) == 0
    && (!(v19 >> 4)
     || ((v19 >> 4) & ~*(_DWORD *)(16 * (*v24 & 0xFFFFFFFE) + 0x20)) != 0
     || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v25, (JSC::VM *)v9, v12, v13, v14, v15, v16, v17), !v26)|| (var50[0] = v19, v27 = JSC::PropertyTable::get(v26, var50), (_DWORD)v27 == -1)|| (v27 & 0x800000000) == 0)&& (v21 == 26|| ((*(_BYTE *)(v25 + 10) & 0x20) == 0 || (*(_BYTE *)(v25 + 18) & 0x40) != 0)&& *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v25 + 76) + 0x90) == JSC::JSObject::defineOwnProperty))
  {
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v20, v9, v19, a4, 0, (uint64_t)v42, v16, v17, v18);
  }
  else
  {
    HIBYTE(v44) = 0;
    var50[0] = a4;
    var50[1] = 0;
    var50[2] = 0;
    var50[3] = 0x700000000;
    (*(void (**)(int *, JSC::ExecutableBase *, unint64_t, uint64_t *, uint64_t))(16
                                                                                               * *(unsigned int *)(16 * (*v20 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x90))(v20, a1, v19, var50, 1);
  }
LABEL_18:
  v29 = v41;
  v41 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v28, v12, (uint64_t)v13, v14, v15, v16, v17);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return *(_QWORD *)(v9 + 16);
}

uint64_t operationPutByValDirectBeyondArrayBoundsSloppy(JSC::ExecutableBase *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  _QWORD v62[2];
  int v63;
  int v64;
  uint64_t v65;
  void (**v66)(JSC::StringFireDetail *__hidden);
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t vars0;

  v12 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(v12 + 40) = vars0;
  if ((a3 & 0x80000000) == 0)
  {
    JSC::JSObject::putDirectIndex(a2, (unint64_t)a1, (JSC::VM *)a3, a4, a5, a6, a7, a8, a9);
    return *(_QWORD *)(v12 + 16);
  }
  v62[0] = 0;
  v62[1] = a2;
  v63 = -1;
  v64 = 0x1000000;
  v65 = 0;
  JSC::Identifier::from((uint64_t **)v12, a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v61);
  v19 = (unint64_t)v61;
  v20 = *(unsigned __int8 *)(a2 + 5);
  v21 = v20;
  if (v20 == 26)
  {
    if (*(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 2160) == v61)
    {
      HIBYTE(v64) = 0;
      v22 = *(_QWORD *)(a2 + 24);
      if ((v22 & 1) != 0)
      {
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if ((v22 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v23 + 16) = 0;
          *(_QWORD *)(v23 + 24) = 0;
          *(_DWORD *)(v23 + 40) = 0;
          if ((v22 & 8) != 0)
            v24 = (uint64_t *)(v23 - 16);
          else
            v24 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFC000 | 8);
          v25 = *v24;
          v66 = &off_1E3583C90;
          v67 = "Store to prototype property of a function";
          JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v23 + 32), v25);
        }
      }
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)a2, (JSC::FunctionRareData *)v12, a1, (const JSC::PropertyTable *)v19, v14, v15, v16, v17, v18);
    if (*(_DWORD *)(v12 + 80))
    {
      v60 = *(_DWORD *)(v12 + 80);
      if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v27, (uint64_t)v13, v14, v15, v16, v17);
      if (*(_QWORD *)(v12 + 16))
        goto LABEL_51;
    }
    v21 = *(unsigned __int8 *)(a2 + 5);
  }
  v28 = (_DWORD *)a2;
  if (v21 == 32)
    v28 = *(_DWORD **)(a2 + 16);
  v29 = 16 * (*v28 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v29 + 0x12) & 0x10) != 0)
    goto LABEL_49;
  if ((v19 >> 4) && ((v19 >> 4) & ~*(_DWORD *)(16 * (*v28 & 0xFFFFFFFE) + 0x20)) == 0)
  {
    v30 = *(_QWORD *)(16 * (*v28 & 0xFFFFFFFE) + 0x58);
    if (v30
      || (v31 = *(_QWORD *)(16 * (*v28 & 0xFFFFFFFE) + 0x40)) != 0
      && (*(_BYTE *)(v31 + 5) == 1 || *(_DWORD *)(v31 + 80) >= 2u)
      && (JSC::Structure::materializePropertyTable((JSC::Structure *)v29, (JSC::VM *)v12, 1, v13, v14, v15, v16, v17),
          v30))
    {
      if (*(_DWORD *)(v30 + 24))
      {
        v32 = *(_QWORD *)(v30 + 16);
        v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(unsigned int *)(v30 + 8);
        v35 = *(_DWORD *)(v19 + 16);
        if ((v32 & 1) != 0)
        {
          if ((v35 & 0x20) != 0)
            v35 = *(_DWORD *)(v19 + 32);
          v36 = *(_DWORD *)(v30 + 12);
          v37 = (v35 >> 8) & *(_QWORD *)&v36;
          v38 = *(unsigned __int8 *)(v33 + v37);
          if (!*(_BYTE *)(v33 + v37))
            goto LABEL_46;
          v39 = v33 + v34;
          v40 = 1;
          while (1)
          {
            v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
            if (v19 == (v41 & 0xFFFFFFFFFFFFLL))
              break;
            v37 = ((_DWORD)v37 + v40) & v36;
            v38 = *(unsigned __int8 *)(v33 + v37);
            ++v40;
            if (!*(_BYTE *)(v33 + v37))
              goto LABEL_46;
          }
          v42 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
        }
        else
        {
          if ((v35 & 0x20) != 0)
            v35 = *(_DWORD *)(v19 + 32);
          v43 = *(_DWORD *)(v30 + 12);
          v44 = v43 & (v35 >> 8);
          v45 = *(_DWORD *)(v33 + 4 * v44);
          if (!v45)
            goto LABEL_46;
          v46 = v33 + 4 * v34;
          v47 = 1;
          while (1)
          {
            v48 = (v45 - 1);
            if (v19 == *(_QWORD *)(v46 + 16 * v48))
              break;
            v44 = (v44 + v47) & v43;
            v45 = *(_DWORD *)(v33 + 4 * v44);
            ++v47;
            if (!v45)
              goto LABEL_46;
          }
          v42 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
        }
        if ((_DWORD)v42 != -1 && (v42 & 0x800000000) != 0)
          goto LABEL_49;
      }
    }
  }
LABEL_46:
  if (v20 != 26
    && ((*(_BYTE *)(v29 + 10) & 0x20) != 0 && (*(_BYTE *)(v29 + 18) & 0x40) == 0
     || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v29 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
  {
LABEL_49:
    HIBYTE(v64) = 0;
    v66 = (void (**)(JSC::StringFireDetail *__hidden))a4;
    v67 = 0;
    v68 = 0;
    v69 = 0x700000000;
    (*(void (**)(unint64_t, JSC::ExecutableBase *, unint64_t, void (***)(JSC::StringFireDetail *__hidden), _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x90))(a2, a1, v19, &v66, 0);
    goto LABEL_51;
  }
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a2, v12, v19, a4, 0, (uint64_t)v62, v16, v17, v18);
LABEL_51:
  v50 = v61;
  v61 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v26, v27, (uint64_t)v13, v14, v15, v16, v17);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t operationArrayPush(JSC::VM *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  const WTF::String *v20;
  unint64_t RangeError;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *var38[8];

  v12 = *((_QWORD *)a1 + 7);
  *(WTF::StringImpl **)(v12 + 40) = var38[7];
  v13 = *(_BYTE *)(a3 + 4);
  if ((v13 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a3, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
    v13 = *(_BYTE *)(a3 + 4);
  }
  v14 = *(_QWORD *)(a3 + 8);
  switch(v13 & 0x1F)
  {
    case 1:
      JSC::JSObject::createInitialUndecided((JSC::JSObject *)a3, (JSC::VM *)v12, 0, a9);
      goto LABEL_38;
    case 3:
LABEL_38:
      JSC::JSObject::convertUndecidedForValue(a3, (JSC::VM *)v12, a2, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      goto LABEL_39;
    case 5:
      if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a3, (JSC::VM *)v12, a2, a4, a5, a6, a7, a8);
        goto LABEL_39;
      }
      v16 = *(unsigned int *)(v14 - 8);
      if (v16 < *(_DWORD *)(v14 - 4))
      {
        *(_QWORD *)(v14 + 8 * v16) = a2;
        goto LABEL_12;
      }
      if ((_DWORD)v16 != -1)
      {
        JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a3, (unint64_t)a1, v16, a2, a5, a6, a7, a8, (int32x4_t)a9);
        goto LABEL_13;
      }
      goto LABEL_29;
    case 7:
      if (a2 >> 49)
      {
        a9.n128_f64[0] = (double)(int)a2;
        if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
          a9.n128_u64[0] = a2 - 0x2000000000000;
        v16 = *(unsigned int *)(v14 - 8);
        if (v16 < *(_DWORD *)(v14 - 4))
        {
          *(_QWORD *)(v14 + 8 * v16) = a9.n128_u64[0];
LABEL_12:
          *(_DWORD *)(v14 - 8) = v16 + 1;
        }
        else
        {
          if ((_DWORD)v16 == -1)
            goto LABEL_29;
          JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a3, a1, v16, a2, a5, a6, a7, a8, a9);
        }
      }
      else
      {
        JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a3, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_39:
        JSC::JSArray::push(a3, (JSC::VM **)a1, a2, v35, v36, v37, v38, v39, v40);
      }
      goto LABEL_13;
    case 9:
      v15 = *(unsigned int *)(v14 - 8);
      if (v15 < *(_DWORD *)(v14 - 4))
      {
        *(_QWORD *)(v14 + 8 * v15) = a2;
        *(_DWORD *)(v14 - 8) = v15 + 1;
        if (a2
          && (a2 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a3 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v12 + 192, a3);
        }
        goto LABEL_13;
      }
      if ((_DWORD)v15 != -1)
      {
        JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a3, a1, v15, a2, a5, a6, a7, a8, a9);
        goto LABEL_13;
      }
LABEL_29:
      (*(void (**)(unint64_t, JSC::VM *, __n128))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x50))(a3, a1, a9);
      goto LABEL_30;
    case 0xB:
      goto LABEL_48;
    case 0xD:
      v57 = *(_QWORD *)(a3 + 8);
      if ((v13 & 0xE) != 0)
        v49 = *(unsigned int *)(v57 - 8);
      else
        v49 = 0;
      LOBYTE(var38[0]) = 0;
      v55 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a3, (unint64_t)a1, v49, a2, 1, var38, a7, a8);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v50, v51, v52, v53, v54, a7, a8))
      {
        goto LABEL_13;
      }
      if (v55)
      {
        if ((_DWORD)v49 != -1)
          JSC::JSArray::setLength((JSC::JSArray *)a3, (JSC::VM **)a1, (v49 + 1), 1, v53, v54, a7, a8, a9);
      }
      else
      {
        v14 = v57;
LABEL_48:
        v58 = v14;
        v56 = *(unsigned int *)(v14 - 8);
        if (v56 >= *(_DWORD *)(v14 - 4))
        {
          if ((_DWORD)v56 == -1)
          {
            (*(void (**)(unint64_t, JSC::VM *, __n128))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x50))(a3, a1, a9);
LABEL_30:
            if (!*(_QWORD *)(v12 + 16))
            {
              v19 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v19 = 0x2800000002;
              *(_QWORD *)(v19 + 8) = "Length exceeded the maximum array length";
              *(_DWORD *)(v19 + 16) = 4;
              var38[0] = (WTF::StringImpl *)v19;
              RangeError = JSC::createRangeError((unint64_t)a1, var38, v20);
              JSC::VM::throwException((JSC::VM *)v12, a1, RangeError, v22, v23, v24, v25, v26);
              v34 = var38[0];
              var38[0] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                {
                  WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
                  WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
                }
                else
                {
                  *(_DWORD *)v34 -= 2;
                }
              }
            }
          }
          else
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a3, a1, v56, a2, 1, v14, a7, a8);
          }
        }
        else
        {
          *(_QWORD *)(v14 + 8 * v56 + 16) = a2;
          if (a2
            && (a2 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a3 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v12 + 192, a3);
          }
          *(_DWORD *)(v58 - 8) = v56 + 1;
          ++*(_DWORD *)(v58 + 12);
        }
      }
LABEL_13:
      if ((*(_BYTE *)(a3 + 4) & 0xE) == 0)
      {
        v17 = 0;
        return v17 | 0xFFFE000000000000;
      }
      v17 = *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8);
      if ((v17 & 0x80000000) == 0)
        return v17 | 0xFFFE000000000000;
      return COERCE__INT64((double)v17) + 0x2000000000000;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984763C8);
  }
}

uint64_t operationArrayPushDouble(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  double v10;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  const WTF::String *v21;
  unint64_t RangeError;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *var48[10];

  v10 = a9.n128_f64[0];
  v12 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v12 + 40) = var48[9];
  v13 = *(_BYTE *)(a2 + 4);
  if ((v13 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a2, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9);
    v13 = *(_BYTE *)(a2 + 4);
  }
  v14 = *(_QWORD *)&v10 + 0x2000000000000;
  v15 = *(_QWORD *)(a2 + 8);
  switch(v13 & 0x1F)
  {
    case 1:
      JSC::JSObject::createInitialUndecided((JSC::JSObject *)a2, (JSC::VM *)v12, 0, a9);
      goto LABEL_38;
    case 3:
LABEL_38:
      JSC::JSObject::convertUndecidedForValue(a2, (JSC::VM *)v12, *(_QWORD *)&v10 + 0x2000000000000, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      goto LABEL_39;
    case 5:
      if (v14 <= 0xFFFDFFFFFFFFFFFFLL)
      {
        JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a2, (JSC::VM *)v12, *(_QWORD *)&v10 + 0x2000000000000, a4, a5, a6, a7, a8);
        goto LABEL_39;
      }
      v17 = *(unsigned int *)(v15 - 8);
      if (v17 < *(_DWORD *)(v15 - 4))
      {
        *(_QWORD *)(v15 + 8 * v17) = v14;
        goto LABEL_12;
      }
      if ((_DWORD)v17 != -1)
      {
        JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a2, a1, v17, *(_QWORD *)&v10 + 0x2000000000000, a5, a6, a7, a8, (int32x4_t)a9);
        goto LABEL_13;
      }
      goto LABEL_29;
    case 7:
      if (*(_QWORD *)&v10 >= 0xFFFE000000000000)
      {
        JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a2, (JSC::VM *)v12, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_39:
        JSC::JSArray::push(a2, (JSC::VM **)a1, *(_QWORD *)&v10 + 0x2000000000000, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        a9.n128_f64[0] = (double)SLODWORD(v10);
        if (v14 <= 0xFFFDFFFFFFFFFFFFLL)
          a9.n128_f64[0] = v10;
        v17 = *(unsigned int *)(v15 - 8);
        if (v17 < *(_DWORD *)(v15 - 4))
        {
          *(_QWORD *)(v15 + 8 * v17) = a9.n128_u64[0];
LABEL_12:
          *(_DWORD *)(v15 - 8) = v17 + 1;
        }
        else
        {
          if ((_DWORD)v17 == -1)
            goto LABEL_29;
          JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a2, (JSC::VM *)a1, v17, *(_QWORD *)&v10 + 0x2000000000000, a5, a6, a7, a8, a9);
        }
      }
      goto LABEL_13;
    case 9:
      v16 = *(unsigned int *)(v15 - 8);
      if (v16 < *(_DWORD *)(v15 - 4))
      {
        *(_QWORD *)(v15 + 8 * v16) = v14;
        *(_DWORD *)(v15 - 8) = v16 + 1;
        if (v10 != NAN
          && (v14 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a2 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v12 + 192, a2);
        }
        goto LABEL_13;
      }
      if ((_DWORD)v16 != -1)
      {
        JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a2, (JSC::VM *)a1, v16, *(_QWORD *)&v10 + 0x2000000000000, a5, a6, a7, a8, a9);
        goto LABEL_13;
      }
LABEL_29:
      (*(void (**)(unint64_t, unint64_t, __n128))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x50))(a2, a1, a9);
      goto LABEL_30;
    case 0xB:
      goto LABEL_48;
    case 0xD:
      v58 = *(_QWORD *)(a2 + 8);
      if ((v13 & 0xE) != 0)
        v50 = *(unsigned int *)(v58 - 8);
      else
        v50 = 0;
      LOBYTE(var48[0]) = 0;
      v56 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a2, a1, v50, *(_QWORD *)&v10 + 0x2000000000000, 1, var48, a7, a8);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v51, v52, v53, v54, v55, a7, a8))
      {
        goto LABEL_13;
      }
      if (v56)
      {
        if ((_DWORD)v50 != -1)
          JSC::JSArray::setLength((JSC::JSArray *)a2, (JSC::VM **)a1, (v50 + 1), 1, v54, v55, a7, a8, a9);
      }
      else
      {
        v15 = v58;
LABEL_48:
        v59 = v15;
        v57 = *(unsigned int *)(v15 - 8);
        if (v57 >= *(_DWORD *)(v15 - 4))
        {
          if ((_DWORD)v57 == -1)
          {
            (*(void (**)(unint64_t, unint64_t, __n128))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x50))(a2, a1, a9);
LABEL_30:
            if (!*(_QWORD *)(v12 + 16))
            {
              v20 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v20 = 0x2800000002;
              *(_QWORD *)(v20 + 8) = "Length exceeded the maximum array length";
              *(_DWORD *)(v20 + 16) = 4;
              var48[0] = (WTF::StringImpl *)v20;
              RangeError = JSC::createRangeError(a1, var48, v21);
              JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, RangeError, v23, v24, v25, v26, v27);
              v35 = var48[0];
              var48[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                {
                  WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
                  WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
                }
                else
                {
                  *(_DWORD *)v35 -= 2;
                }
              }
            }
          }
          else
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a2, (JSC::VM *)a1, v57, *(_QWORD *)&v10 + 0x2000000000000, 1, v15, a7, a8);
          }
        }
        else
        {
          *(_QWORD *)(v15 + 8 * v57 + 16) = v14;
          if (v10 != NAN
            && (v14 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(a2 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v12 + 192, a2);
          }
          *(_DWORD *)(v59 - 8) = v57 + 1;
          ++*(_DWORD *)(v59 + 12);
        }
      }
LABEL_13:
      if ((*(_BYTE *)(a2 + 4) & 0xE) == 0)
      {
        v18 = 0;
        return v18 | 0xFFFE000000000000;
      }
      v18 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8);
      if ((v18 & 0x80000000) == 0)
        return v18 | 0xFFFE000000000000;
      return COERCE__INT64((double)v18) + 0x2000000000000;
    default:
      __break(0xC471u);
      JUMPOUT(0x198476830);
  }
}

unint64_t operationArrayPushMultiple(JSC::VM **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  JSC::VM *v18;
  char v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  const WTF::String *v23;
  unint64_t RangeError;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const WTF::String *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  const WTF::String *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  WTF::StringImpl *var58[12];

  v9 = a1[7];
  *((WTF::StringImpl **)v9 + 5) = var58[11];
  *(_QWORD *)(a3 - 8) = 8 * (int)a4;
  v10 = *(_BYTE *)(a2 + 4) & 0xE;
  if (v10 == 12)
  {
    __break(0xC471u);
    JUMPOUT(0x198476B94);
  }
  v11 = a3;
  if ((int)a4 < 1)
    goto LABEL_27;
  v14 = a4;
  v15 = (unint64_t *)a3;
  while (2)
  {
    v17 = *v15++;
    v16 = v17;
    v18 = a1[7];
    v19 = *(_BYTE *)(a2 + 4);
    if ((v19 & 0x10) != 0)
    {
      JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a2, a1[7], a3, a4, a5, a6, a7, a8, a9);
      v19 = *(_BYTE *)(a2 + 4);
    }
    v20 = *(_QWORD *)(a2 + 8);
    switch(v19 & 0x1F)
    {
      case 1:
        JSC::JSObject::createInitialUndecided((JSC::JSObject *)a2, v18, 0, a9);
        goto LABEL_54;
      case 3:
LABEL_54:
        JSC::JSObject::convertUndecidedForValue(a2, v18, v16, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_55;
      case 5:
        if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
        {
          JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a2, v18, v16, a4, a5, a6, a7, a8);
          goto LABEL_55;
        }
        a3 = *(unsigned int *)(v20 - 8);
        if (a3 < *(_DWORD *)(v20 - 4))
        {
          *(_QWORD *)(v20 + 8 * a3) = v16;
          goto LABEL_14;
        }
        if ((_DWORD)a3 != -1)
        {
          JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a2, (unint64_t)a1, a3, v16, a5, a6, a7, a8, (int32x4_t)a9);
          goto LABEL_15;
        }
        goto LABEL_44;
      case 7:
        if (v16 >> 49)
        {
          a9.n128_f64[0] = (double)(int)v16;
          if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
            a9.n128_u64[0] = v16 - 0x2000000000000;
          a3 = *(unsigned int *)(v20 - 8);
          if (a3 < *(_DWORD *)(v20 - 4))
          {
            *(_QWORD *)(v20 + 8 * a3) = a9.n128_u64[0];
LABEL_14:
            *(_DWORD *)(v20 - 8) = a3 + 1;
          }
          else
          {
            if ((_DWORD)a3 != -1)
            {
              JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, v16, a5, a6, a7, a8, a9);
              goto LABEL_15;
            }
            (*(void (**)(unint64_t, JSC::VM **, uint64_t, unint64_t, uint64_t, __n128))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, a3, v16, 1, a9);
            if (!*((_QWORD *)v18 + 2))
            {
              v22 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v22 = 0x2800000002;
              *(_QWORD *)(v22 + 8) = "Length exceeded the maximum array length";
              *(_DWORD *)(v22 + 16) = 4;
              var58[0] = (WTF::StringImpl *)v22;
              RangeError = JSC::createRangeError((unint64_t)a1, var58, v23);
              JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, RangeError, v25, v26, v27, v28, v29);
              v30 = var58[0];
              var58[0] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  goto LABEL_50;
                *(_DWORD *)v30 -= 2;
              }
            }
          }
        }
        else
        {
          JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a2, v18, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_55:
          JSC::JSArray::push(a2, a1, v16, v39, v40, v41, v42, v43, v44);
        }
        goto LABEL_15;
      case 9:
        a3 = *(unsigned int *)(v20 - 8);
        if (a3 >= *(_DWORD *)(v20 - 4))
        {
          if ((_DWORD)a3 == -1)
          {
LABEL_44:
            (*(void (**)(unint64_t, JSC::VM **))(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x50))(a2, a1);
            if (!*((_QWORD *)v18 + 2))
            {
              v31 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v31 = 0x2800000002;
              *(_QWORD *)(v31 + 8) = "Length exceeded the maximum array length";
              *(_DWORD *)(v31 + 16) = 4;
              var58[0] = (WTF::StringImpl *)v31;
              v33 = JSC::createRangeError((unint64_t)a1, var58, v32);
              JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, v33, v34, v35, v36, v37, v38);
              v30 = var58[0];
              var58[0] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                {
LABEL_50:
                  WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
                }
                else
                {
                  *(_DWORD *)v30 -= 2;
                }
              }
            }
          }
          else
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, v16, a5, a6, a7, a8, a9);
          }
        }
        else
        {
          *(_QWORD *)(v20 + 8 * a3) = v16;
          *(_DWORD *)(v20 - 8) = a3 + 1;
          if (v16
            && (v16 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v18 + 190) >= *(unsigned __int8 *)(a2 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((uint64_t)v18 + 192, a2);
          }
        }
        goto LABEL_15;
      case 0xB:
        goto LABEL_65;
      case 0xD:
        v75 = v15;
        v53 = *(_QWORD *)(a2 + 8);
        if ((v19 & 0xE) != 0)
          v54 = *(unsigned int *)(v20 - 8);
        else
          v54 = 0;
        LOBYTE(var58[0]) = 0;
        v55 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a2, (unint64_t)a1, v54, v16, 1, var58, a7, a8);
        if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_71;
        if (v55)
        {
          if ((_DWORD)v54 != -1)
            JSC::JSArray::setLength((JSC::JSArray *)a2, a1, (v54 + 1), 1, a5, a6, a7, a8, a9);
          goto LABEL_71;
        }
        v20 = v53;
        v15 = v75;
LABEL_65:
        v74 = v20;
        v75 = v15;
        v56 = *(unsigned int *)(v20 - 8);
        if (v56 < *(_DWORD *)(v20 - 4))
        {
          *(_QWORD *)(v20 + 8 * v56 + 16) = v16;
          if (v16
            && (v16 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v18 + 190) >= *(unsigned __int8 *)(a2 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((uint64_t)v18 + 192, a2);
          }
          *(_DWORD *)(v74 - 8) = v56 + 1;
          ++*(_DWORD *)(v74 + 12);
          goto LABEL_71;
        }
        if ((_DWORD)v56 != -1)
        {
          JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a2, (JSC::VM *)a1, v56, v16, 1, v20, a7, a8);
LABEL_71:
          v15 = v75;
          goto LABEL_15;
        }
        (*(void (**)(unint64_t, JSC::VM **, uint64_t, unint64_t, uint64_t))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x50))(a2, a1, 0xFFFFFFFFLL, v16, 1);
        v15 = v75;
        if (!*((_QWORD *)v18 + 2))
        {
          v57 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v57 = 0x2800000002;
          *(_QWORD *)(v57 + 8) = "Length exceeded the maximum array length";
          *(_DWORD *)(v57 + 16) = 4;
          var58[0] = (WTF::StringImpl *)v57;
          v59 = JSC::createRangeError((unint64_t)a1, var58, v58);
          JSC::VM::throwException(v18, (JSC::JSGlobalObject *)a1, v59, v60, v61, v62, v63, v64);
          v65 = var58[0];
          var58[0] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
            {
              WTF::StringImpl::~StringImpl(v65, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
            }
            else
            {
              *(_DWORD *)v65 -= 2;
            }
          }
          goto LABEL_71;
        }
LABEL_15:
        if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, a2, a3, a4, a5, a6, a7, a8))
        {
          result = 0;
          goto LABEL_30;
        }
        if (--v14)
          continue;
        v10 = *(_BYTE *)(a2 + 4) & 0xE;
LABEL_27:
        if (v10 && (v10 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8), (v10 & 0x80000000) != 0))
          result = COERCE__INT64((double)v10) + 0x2000000000000;
        else
          result = v10 | 0xFFFE000000000000;
LABEL_30:
        *(_QWORD *)(v11 - 8) = 0;
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x198476DF8);
    }
  }
}

uint64_t operationArrayPushDoubleMultiple(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  double *v11;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  JSC::Heap **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  JSC::Exception *v31;
  WTF::AtomStringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Heap **v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  JSC::Exception *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t (*v64)(uint64_t *);
  uint64_t (*v65)(uint64_t *);
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  JSC::Heap **v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  JSC::Exception *v80;
  WTF::AtomStringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t *);
  unsigned int v92;
  uint64_t v94;
  uint64_t v95;
  JSC::VMTraps *v96;
  uint64_t *v97;
  unint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t vars0;

  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v10 + 40) = vars0;
  if ((int)a4 >= 1)
  {
    v11 = (double *)a3;
    v13 = a4;
    v14 = a1 - 16;
    v96 = (JSC::VMTraps *)(v10 + 64);
    if ((a1 & 8) == 0)
      v14 = a1 & 0xFFFFFFFFFFFFC000 | 8;
    v97 = (uint64_t *)v14;
    v98 = a1 + 128;
    while (1)
    {
      v15 = *v11;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_BYTE *)(a2 + 4);
      if ((v17 & 0x10) != 0)
      {
        JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a2, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, a9);
        v17 = *(_BYTE *)(a2 + 4);
      }
      v18 = *(_QWORD *)&v15 + 0x2000000000000;
      v19 = *(_QWORD *)(a2 + 8);
      switch(v17 & 0x1F)
      {
        case 1:
          JSC::JSObject::createInitialUndecided((JSC::JSObject *)a2, (JSC::VM *)v16, 0, a9);
          goto LABEL_58;
        case 3:
LABEL_58:
          JSC::JSObject::convertUndecidedForValue(a2, (JSC::VM *)v16, *(_QWORD *)&v15 + 0x2000000000000, a4, a5, a6, a7, a8, a9.n128_f64[0]);
          goto LABEL_59;
        case 5:
          if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
          {
            JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a2, (JSC::VM *)v16, *(_QWORD *)&v15 + 0x2000000000000, a4, a5, a6, a7, a8);
            goto LABEL_59;
          }
          a3 = *(unsigned int *)(v19 - 8);
          if (a3 < *(_DWORD *)(v19 - 4))
          {
            *(_QWORD *)(v19 + 8 * a3) = v18;
            goto LABEL_16;
          }
          if ((_DWORD)a3 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a2, a1, a3, *(_QWORD *)&v15 + 0x2000000000000, a5, a6, a7, a8, (int32x4_t)a9);
            goto LABEL_17;
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x50))(a2, a1, a3, *(_QWORD *)&v15 + 0x2000000000000, 1);
          if (*(_QWORD *)(v16 + 16))
            goto LABEL_17;
          v48 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v48 = 0x2800000002;
          *(_QWORD *)(v48 + 8) = "Length exceeded the maximum array length";
          *(_DWORD *)(v48 + 16) = 4;
          v99 = (WTF::StringImpl *)v48;
          v49 = *(JSC::Heap ***)(a1 + 56);
          v50 = *(_QWORD *)(a1 + 128);
          if ((v50 & 1) != 0)
          {
            v65 = *(uint64_t (**)(uint64_t *))(v50 & 0xFFFFFFFFFFFFFFFCLL);
            v100 = *v97;
            v101 = a1;
            v102 = v98;
            v50 = v65(&v100);
          }
          v51 = JSC::ErrorInstance::create(v49, v50, &v99, 0, 0, 0, 2, 1);
          v58 = (JSC::Exception *)v51;
          if ((v51 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C)))
          {
            v58 = (JSC::Exception *)JSC::Exception::create(v16, (JSC::VM *)v51, 0, v52, v53, v54, v55, v56);
          }
          JSC::VM::throwException((JSC::VM *)v16, (JSC::JSGlobalObject *)a1, v58, v57, v52, v53, v54, v55, v56);
          v33 = v99;
          v99 = 0;
          if (!v33)
            goto LABEL_17;
          if (*(_DWORD *)v33 == 2)
            goto LABEL_43;
          *(_DWORD *)v33 -= 2;
          goto LABEL_17;
        case 7:
          if (*(_QWORD *)&v15 >= 0xFFFE000000000000)
          {
            JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a2, (JSC::VM *)v16, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_59:
            JSC::JSArray::push(a2, (JSC::VM **)a1, *(_QWORD *)&v15 + 0x2000000000000, v34, v35, v36, v37, v38, v39);
          }
          else
          {
            a9.n128_f64[0] = (double)SLODWORD(v15);
            if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
              a9.n128_f64[0] = v15;
            a3 = *(unsigned int *)(v19 - 8);
            if (a3 < *(_DWORD *)(v19 - 4))
            {
              *(_QWORD *)(v19 + 8 * a3) = a9.n128_u64[0];
LABEL_16:
              *(_DWORD *)(v19 - 8) = a3 + 1;
            }
            else
            {
              if ((_DWORD)a3 == -1)
                goto LABEL_34;
              JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, *(_QWORD *)&v15 + 0x2000000000000, a5, a6, a7, a8, a9);
            }
          }
          goto LABEL_17;
        case 9:
          a3 = *(unsigned int *)(v19 - 8);
          if (a3 >= *(_DWORD *)(v19 - 4))
          {
            if ((_DWORD)a3 == -1)
            {
LABEL_34:
              (*(void (**)(unint64_t, unint64_t, __n128))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x50))(a2, a1, a9);
              if (!*(_QWORD *)(v16 + 16))
              {
                v21 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v21 = 0x2800000002;
                *(_QWORD *)(v21 + 8) = "Length exceeded the maximum array length";
                *(_DWORD *)(v21 + 16) = 4;
                v99 = (WTF::StringImpl *)v21;
                v22 = *(JSC::Heap ***)(a1 + 56);
                v23 = *(_QWORD *)(a1 + 128);
                if ((v23 & 1) != 0)
                {
                  v64 = *(uint64_t (**)(uint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
                  v100 = *v97;
                  v101 = a1;
                  v102 = v98;
                  v23 = v64(&v100);
                }
                v24 = JSC::ErrorInstance::create(v22, v23, &v99, 0, 0, 0, 2, 1);
                v31 = (JSC::Exception *)v24;
                if ((v24 & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)))
                {
                  v31 = (JSC::Exception *)JSC::Exception::create(v16, (JSC::VM *)v24, 0, v25, v26, v27, v28, v29);
                }
                JSC::VM::throwException((JSC::VM *)v16, (JSC::JSGlobalObject *)a1, v31, v30, v25, v26, v27, v28, v29);
                v33 = v99;
                v99 = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                  {
LABEL_43:
                    WTF::StringImpl::~StringImpl(v33, v32, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
                  }
                  else
                  {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
            }
            else
            {
              JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, *(_QWORD *)&v15 + 0x2000000000000, a5, a6, a7, a8, a9);
            }
          }
          else
          {
            *(_QWORD *)(v19 + 8 * a3) = v18;
            *(_DWORD *)(v19 - 8) = a3 + 1;
            if (v15 != NAN
              && (v18 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a2 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v16 + 192, a2);
            }
          }
          goto LABEL_17;
        case 0xB:
          goto LABEL_80;
        case 0xD:
          v94 = v10;
          v95 = v13;
          v59 = *(_QWORD *)(a2 + 8);
          if ((v17 & 0xE) != 0)
            v60 = *(unsigned int *)(v19 - 8);
          else
            v60 = 0;
          LOBYTE(v100) = 0;
          v61 = *(_QWORD *)(a1 + 56);
          if ((*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v62 = (*(uint64_t (**)(unint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(a2, a1);
          }
          else
          {
            v62 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
            if (!v62)
              v62 = *(_QWORD *)(a2 + 16);
          }
          if (!*(_DWORD *)(v61 + 80))
          {
            if (v62 == 2)
            {
              v63 = 0;
              goto LABEL_75;
            }
LABEL_74:
            v63 = JSC::JSObject::attemptToInterceptPutByIndexOnHoleForPrototype(v62, a1, (const WTF::StringImpl *)a2, v60, *(_QWORD *)&v15 + 0x2000000000000, 1, &v100, a8);
            goto LABEL_75;
          }
          v66 = *(_DWORD *)(v61 + 80);
          if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, a3, a4, a5, a6, a7, a8);
          v63 = 0;
          if (!*(_QWORD *)(v61 + 16) && v62 != 2)
            goto LABEL_74;
LABEL_75:
          if (*(_DWORD *)(v16 + 80))
          {
            v69 = *(_DWORD *)(v16 + 80);
            if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v16 + 16))
              goto LABEL_86;
          }
          if (v63)
          {
            if ((_DWORD)v60 != -1)
              JSC::JSArray::setLength((JSC::JSArray *)a2, (JSC::VM **)a1, (v60 + 1), 1, a5, a6, a7, a8, a9);
            goto LABEL_86;
          }
          v19 = v59;
          v10 = v94;
          v13 = v95;
LABEL_80:
          v94 = v10;
          v95 = v13;
          v67 = v19;
          v68 = *(unsigned int *)(v19 - 8);
          if (v68 < *(_DWORD *)(v19 - 4))
          {
            *(_QWORD *)(v19 + 8 * v68 + 16) = v18;
            if (v15 != NAN
              && (v18 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a2 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v16 + 192, a2);
            }
            *(_DWORD *)(v67 - 8) = v68 + 1;
            ++*(_DWORD *)(v67 + 12);
            goto LABEL_86;
          }
          if ((_DWORD)v68 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a2, (JSC::VM *)a1, v68, *(_QWORD *)&v15 + 0x2000000000000, 1, v19, a7, a8);
LABEL_86:
            v10 = v94;
            v13 = v95;
            goto LABEL_17;
          }
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x50))(a2, a1, 0xFFFFFFFFLL, *(_QWORD *)&v15 + 0x2000000000000, 1);
          v10 = v94;
          if (!*(_QWORD *)(v16 + 16))
          {
            v70 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v70 = 0x2800000002;
            *(_QWORD *)(v70 + 8) = "Length exceeded the maximum array length";
            *(_DWORD *)(v70 + 16) = 4;
            v99 = (WTF::StringImpl *)v70;
            v71 = *(JSC::Heap ***)(a1 + 56);
            v72 = *(_QWORD *)(a1 + 128);
            if ((v72 & 1) != 0)
            {
              v91 = *(uint64_t (**)(uint64_t *))(v72 & 0xFFFFFFFFFFFFFFFCLL);
              v100 = *v97;
              v101 = a1;
              v102 = v98;
              v72 = v91(&v100);
            }
            v73 = JSC::ErrorInstance::create(v71, v72, &v99, 0, 0, 0, 2, 1);
            v80 = (JSC::Exception *)v73;
            if ((v73 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v73 & 0xFFFFFFFE) + 0x4C)))
            {
              v80 = (JSC::Exception *)JSC::Exception::create(v16, (JSC::VM *)v73, 0, v74, v75, v76, v77, v78);
            }
            JSC::VM::throwException((JSC::VM *)v16, (JSC::JSGlobalObject *)a1, v80, v79, v74, v75, v76, v77, v78);
            v82 = v99;
            v99 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
              {
                WTF::StringImpl::~StringImpl(v82, v81, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
              }
              else
              {
                *(_DWORD *)v82 -= 2;
              }
            }
            v10 = v94;
          }
LABEL_17:
          if (*(_DWORD *)(v10 + 80))
          {
            v20 = *(_DWORD *)(v10 + 80);
            if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v96, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v10 + 16))
              return 0;
          }
          ++v11;
          if (!--v13)
            goto LABEL_108;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198477870);
      }
    }
  }
LABEL_108:
  if ((*(_BYTE *)(a2 + 4) & 0xE) == 0)
  {
    v92 = 0;
    return v92 | 0xFFFE000000000000;
  }
  v92 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8);
  if ((v92 & 0x80000000) == 0)
    return v92 | 0xFFFE000000000000;
  return COERCE__INT64((double)v92) + 0x2000000000000;
}

unint64_t operationArrayPushMultipleSlow(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  unsigned int v20;
  _QWORD *v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  JSC::Heap **v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(WTF **);
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  JSC::Heap **v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  JSC::Exception *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(WTF **);
  unsigned int v89;
  unint64_t v90;
  WTF *v92;
  unint64_t OutOfMemoryError;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  JSC::Exception *v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF **v109;
  char v110;
  uint64_t v111;
  WTF *v112;
  _OWORD v113[4];
  uint64_t v114;
  WTF *v115;
  unint64_t v116;
  unint64_t v117;
  WTF::StringImpl *var70[15];

  v8 = a4;
  v9 = a3;
  v12 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v12 + 40) = var70[14];
  *(_QWORD *)(a3 - 8) = 8 * (int)a4;
  v110 = 0;
  v111 = 0x800000000;
  v112 = (WTF *)((char *)v113 + 8);
  v13 = 0uLL;
  memset(v113, 0, sizeof(v113));
  v114 = 0;
  if (a4 >= 9)
  {
    if ((a4 & 0x80000000) != 0 || (WTF::tryFastMalloc((WTF *)(8 * a4), &v115), (v92 = v115) == 0))
    {
      v110 = 1;
    }
    else
    {
      if (v112 != (WTF *)((char *)v113 + 8) && v112 != 0)
        WTF::fastFree((unint64_t)v112, a2, a3, a4, a5, a6, a7, a8);
      v112 = v92;
      HIDWORD(v111) = v8;
    }
  }
  if (v8 >= 1)
  {
    v14 = 0;
    v15 = v8;
    while (1)
    {
      v16 = *(_QWORD *)(v9 + 8 * v14);
      v17 = v111;
      if ((_DWORD)v111 == HIDWORD(v111))
      {
        if (!(v111 >> 30))
        {
          WTF::tryFastMalloc((WTF *)(16 * v111), &v115);
          v18 = v115;
          if (v115)
          {
            v107 = v9;
            v20 = v111;
            if ((_DWORD)v111)
            {
              v23 = 0;
              do
              {
                v24 = v112;
                *((_QWORD *)v18 + v23) = *((_QWORD *)v112 + v23);
                v25 = *((_QWORD *)v24 + v23);
                if (*(_QWORD *)&v113[0])
                  v26 = 0;
                else
                  v26 = (v25 & 0xFFFE000000000002) == 0;
                if (v26 && v25 != 0)
                {
                  v28 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
                  if ((v25 & 8) != 0)
                    v28 = (_QWORD *)(v25 - 16);
                  *(_QWORD *)&v113[0] = *v28 + 560;
                  var70[0] = (WTF::StringImpl *)&v111;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v113[0], (uint64_t *)var70, a4, a5, a6, a7, a8, (uint64_t)&v115);
                  v20 = v111;
                }
                ++v23;
              }
              while (v23 < v20);
            }
            if (v112 != (WTF *)((char *)v113 + 8) && v112 != 0)
            {
              WTF::fastFree((unint64_t)v112, a2, a3, a4, a5, a6, a7, a8);
              v20 = v111;
            }
            v112 = v18;
            HIDWORD(v111) = 2 * v17;
            v9 = v107;
            goto LABEL_13;
          }
        }
        v110 = 1;
      }
      else
      {
        v18 = v112;
        if (v112 != (WTF *)((char *)v113 + 8) && v112 != 0)
        {
          v20 = v111;
LABEL_13:
          *((_QWORD *)v18 + v20) = v16;
          LODWORD(v111) = v20 + 1;
          if (!*(_QWORD *)&v113[0] && (v16 & 0xFFFE000000000002) == 0 && v16 != 0)
          {
            v22 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v16 & 8) != 0)
              v22 = (_QWORD *)(v16 - 16);
            *(_QWORD *)&v113[0] = *v22 + 560;
            var70[0] = (WTF::StringImpl *)&v111;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v113[0], (uint64_t *)var70, a4, a5, a6, a7, a8, (uint64_t)&v115);
          }
          goto LABEL_11;
        }
        *((_QWORD *)v112 + v111) = v16;
        LODWORD(v111) = v17 + 1;
      }
LABEL_11:
      if (++v14 == v15)
      {
        if (!v110)
        {
          v30 = 0;
          v31 = a1 - 16;
          if ((a1 & 8) == 0)
            v31 = a1 & 0xFFFFFFFFFFFFC000 | 8;
          v109 = (WTF **)v31;
          while (1)
          {
            if (v30 >= v111)
              v32 = 10;
            else
              v32 = *((_QWORD *)v112 + v30);
            v33 = *(_QWORD *)(a1 + 56);
            v34 = *((_BYTE *)a2 + 4);
            if ((v34 & 0x10) != 0)
            {
              JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a2, *(JSC::VM **)(a1 + 56), a3, a4, a5, a6, a7, a8, v13);
              v34 = *((_BYTE *)a2 + 4);
            }
            v35 = a2[1];
            switch(v34 & 0x1F)
            {
              case 1:
                JSC::JSObject::createInitialUndecided((JSC::JSObject *)a2, (JSC::VM *)v33, 0, v13);
                goto LABEL_95;
              case 3:
LABEL_95:
                JSC::JSObject::convertUndecidedForValue((unint64_t)a2, (JSC::VM *)v33, v32, a4, a5, a6, a7, a8, v13.n128_f64[0]);
                goto LABEL_96;
              case 5:
                if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
                {
                  JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a2, (JSC::VM *)v33, v32, a4, a5, a6, a7, a8);
                  goto LABEL_96;
                }
                a3 = *(unsigned int *)(v35 - 8);
                if (a3 < *(_DWORD *)(v35 - 4))
                {
                  *(_QWORD *)(v35 + 8 * a3) = v32;
                  goto LABEL_62;
                }
                if ((_DWORD)a3 != -1)
                {
                  JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a2, a1, a3, v32, a5, a6, a7, a8, (int32x4_t)v13);
                  goto LABEL_63;
                }
                goto LABEL_80;
              case 7:
                if (v32 >> 49)
                {
                  v13.n128_f64[0] = (double)(int)v32;
                  if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
                    v13.n128_u64[0] = v32 - 0x2000000000000;
                  a3 = *(unsigned int *)(v35 - 8);
                  if (a3 < *(_DWORD *)(v35 - 4))
                  {
                    *(_QWORD *)(v35 + 8 * a3) = v13.n128_u64[0];
LABEL_62:
                    *(_DWORD *)(v35 - 8) = a3 + 1;
                  }
                  else
                  {
                    if ((_DWORD)a3 == -1)
                      goto LABEL_80;
                    JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, v32, a5, a6, a7, a8, v13);
                  }
                }
                else
                {
                  JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a2, (JSC::VM *)v33, a3, a4, a5, a6, a7, a8, v13.n128_f64[0]);
LABEL_96:
                  JSC::JSArray::push((unint64_t)a2, (JSC::VM **)a1, v32, v49, v50, v51, v52, v53, v54);
                }
                goto LABEL_63;
              case 9:
                a3 = *(unsigned int *)(v35 - 8);
                if (a3 >= *(_DWORD *)(v35 - 4))
                {
                  if ((_DWORD)a3 == -1)
                  {
LABEL_80:
                    (*(void (**)(uint64_t *, unint64_t, __n128))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x50))(a2, a1, v13);
                    if (!*(_QWORD *)(v33 + 16))
                    {
                      v37 = WTF::fastCompactMalloc((WTF *)0x20);
                      *(_QWORD *)v37 = 0x2800000002;
                      *(_QWORD *)(v37 + 8) = "Length exceeded the maximum array length";
                      *(_DWORD *)(v37 + 16) = 4;
                      var70[0] = (WTF::StringImpl *)v37;
                      v38 = *(JSC::Heap ***)(a1 + 56);
                      v39 = *(_QWORD *)(a1 + 128);
                      if ((v39 & 1) != 0)
                      {
                        v64 = *(uint64_t (**)(WTF **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
                        v115 = *v109;
                        v116 = a1;
                        v117 = a1 + 128;
                        v39 = v64(&v115);
                      }
                      v40 = JSC::ErrorInstance::create(v38, v39, var70, 0, 0, 0, 2, 1);
                      v47 = (JSC::Exception *)v40;
                      if ((v40 & 0xFFFE000000000002) != 0
                        || &JSC::Exception::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE)
                                                                                + 0x4C)))
                      {
                        v47 = (JSC::Exception *)JSC::Exception::create(v33, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
                      }
                      JSC::VM::throwException((JSC::VM *)v33, (JSC::JSGlobalObject *)a1, v47, v46, v41, v42, v43, v44, v45);
                      v48 = var70[0];
                      var70[0] = 0;
                      if (v48)
                      {
                        if (*(_DWORD *)v48 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
                        }
                        else
                        {
                          *(_DWORD *)v48 -= 2;
                        }
                      }
                    }
                  }
                  else
                  {
                    JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a2, (JSC::VM *)a1, a3, v32, a5, a6, a7, a8, v13);
                  }
                }
                else
                {
                  *(_QWORD *)(v35 + 8 * a3) = v32;
                  *(_DWORD *)(v35 - 8) = a3 + 1;
                  if (v32
                    && (v32 & 0xFFFE000000000002) == 0
                    && *(_DWORD *)(v33 + 760) >= *((unsigned __int8 *)a2 + 7))
                  {
                    JSC::Heap::writeBarrierSlowPath(v33 + 192, (unint64_t)a2);
                  }
                }
                goto LABEL_63;
              case 0xB:
                goto LABEL_116;
              case 0xD:
                v105 = a2[1];
                v108 = v9;
                if ((v34 & 0xE) != 0)
                  v104 = *(_DWORD *)(v105 - 8);
                else
                  v104 = 0;
                LOBYTE(v115) = 0;
                v103 = *(_QWORD *)(a1 + 56);
                if ((*(_WORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v63 = (*(uint64_t (**)(uint64_t *, unint64_t))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(a2, a1);
                }
                else
                {
                  v63 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
                  if (!v63)
                    v63 = a2[2];
                }
                if (!*(_DWORD *)(v103 + 80))
                {
                  if (v63 == 2)
                  {
                    v102 = 0;
                    goto LABEL_111;
                  }
LABEL_110:
                  v102 = JSC::JSObject::attemptToInterceptPutByIndexOnHoleForPrototype(v63, a1, (const WTF::StringImpl *)a2, v104, v32, 1, &v115, a8);
                  goto LABEL_111;
                }
                v65 = *(_DWORD *)(v103 + 80);
                if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v103 + 64), 7u, a3, a4, a5, a6, a7, a8);
                v102 = 0;
                if (!*(_QWORD *)(v103 + 16) && v63 != 2)
                  goto LABEL_110;
LABEL_111:
                if (*(_DWORD *)(v33 + 80))
                {
                  v67 = *(_DWORD *)(v33 + 80);
                  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v33 + 16))
                    goto LABEL_122;
                }
                if (v102)
                {
                  if (v104 != -1)
                    JSC::JSArray::setLength((JSC::JSArray *)a2, (JSC::VM **)a1, v104 + 1, 1, a5, a6, a7, a8, v13);
                }
                else
                {
                  v35 = v105;
                  v9 = v108;
LABEL_116:
                  v106 = v35;
                  v108 = v9;
                  v66 = *(unsigned int *)(v35 - 8);
                  if (v66 >= *(_DWORD *)(v35 - 4))
                  {
                    if ((_DWORD)v66 == -1)
                    {
                      (*(void (**)(uint64_t *, unint64_t, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) + 0x50))(a2, a1, 0xFFFFFFFFLL, v32, 1);
                      v9 = v108;
                      if (*(_QWORD *)(v33 + 16))
                        goto LABEL_63;
                      v68 = WTF::fastCompactMalloc((WTF *)0x20);
                      *(_QWORD *)v68 = 0x2800000002;
                      *(_QWORD *)(v68 + 8) = "Length exceeded the maximum array length";
                      *(_DWORD *)(v68 + 16) = 4;
                      var70[0] = (WTF::StringImpl *)v68;
                      v69 = *(JSC::Heap ***)(a1 + 56);
                      v70 = *(_QWORD *)(a1 + 128);
                      if ((v70 & 1) != 0)
                      {
                        v88 = *(uint64_t (**)(WTF **))(v70 & 0xFFFFFFFFFFFFFFFCLL);
                        v115 = *v109;
                        v116 = a1;
                        v117 = a1 + 128;
                        v70 = v88(&v115);
                      }
                      v71 = JSC::ErrorInstance::create(v69, v70, var70, 0, 0, 0, 2, 1);
                      v78 = (JSC::Exception *)v71;
                      if ((v71 & 0xFFFE000000000002) != 0
                        || &JSC::Exception::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE)
                                                                                + 0x4C)))
                      {
                        v78 = (JSC::Exception *)JSC::Exception::create(v33, (JSC::VM *)v71, 0, v72, v73, v74, v75, v76);
                      }
                      JSC::VM::throwException((JSC::VM *)v33, (JSC::JSGlobalObject *)a1, v78, v77, v72, v73, v74, v75, v76);
                      v79 = var70[0];
                      var70[0] = 0;
                      if (v79)
                      {
                        if (*(_DWORD *)v79 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                        }
                        else
                        {
                          *(_DWORD *)v79 -= 2;
                        }
                      }
                    }
                    else
                    {
                      JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a2, (JSC::VM *)a1, v66, v32, 1, v35, a7, a8);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v35 + 8 * v66 + 16) = v32;
                    if (v32
                      && (v32 & 0xFFFE000000000002) == 0
                      && *(_DWORD *)(v33 + 760) >= *((unsigned __int8 *)a2 + 7))
                    {
                      JSC::Heap::writeBarrierSlowPath(v33 + 192, (unint64_t)a2);
                    }
                    *(_DWORD *)(v106 - 8) = v66 + 1;
                    ++*(_DWORD *)(v106 + 12);
                  }
                }
LABEL_122:
                v9 = v108;
LABEL_63:
                if (*(_DWORD *)(v12 + 80))
                {
                  v36 = *(_DWORD *)(v12 + 80);
                  if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v12 + 16))
                    goto LABEL_159;
                }
                if (v15 == ++v30)
                  goto LABEL_144;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x198478324);
            }
          }
        }
LABEL_156:
        OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)a2);
        v101 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v101 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v95, v96, v97, v98, v99);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v101, v100, v95, v96, v97, v98, v99);
LABEL_159:
        v90 = 0;
        goto LABEL_147;
      }
    }
  }
  if (v110)
    goto LABEL_156;
LABEL_144:
  if ((*((_BYTE *)a2 + 4) & 0xE) != 0)
  {
    v89 = *(_DWORD *)(a2[1] - 8);
    if ((v89 & 0x80000000) != 0)
    {
      v90 = COERCE__INT64((double)v89) + 0x2000000000000;
      goto LABEL_147;
    }
  }
  else
  {
    v89 = 0;
  }
  v90 = v89 | 0xFFFE000000000000;
LABEL_147:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v111, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 - 8) = 0;
  return v90;
}

uint64_t *JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;

  v9 = result;
  v10 = *((unsigned int *)result + 2);
  v11 = result + 1;
  if ((_DWORD)v10 == *((_DWORD *)result + 3))
  {
    if (v10 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(result + 1), 2 * (int)v10),
          (_DWORD)result))
    {
      *(_BYTE *)v9 = 1;
      return result;
    }
    LODWORD(v10) = *v11;
  }
  else
  {
    v12 = (uint64_t *)result[2];
    if (v12 == result + 4 || v12 == 0)
    {
      v12[v10] = a2;
      *v11 = v10 + 1;
      return result;
    }
  }
  *(_QWORD *)(v9[2] + 8 * v10) = a2;
  *((_DWORD *)v9 + 2) = v10 + 1;
  if (!v9[3] && (a2 & 0xFFFE000000000002) == 0 && a2)
  {
    v14 = (_QWORD *)(a2 - 16);
    if ((a2 & 8) == 0)
      v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v15 = (uint64_t *)(*v14 + 560);
    v9[3] = (uint64_t)v15;
    v17 = v11;
    return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v15, (uint64_t *)&v17, a4, a5, a6, a7, a8, (uint64_t)&v16);
  }
  return result;
}

uint64_t operationArrayPop(JSC::JSGlobalObject *a1, JSC::JSArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::JSArray::pop(a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t operationArrayPopAndRecoverLength(JSC::JSGlobalObject *a1, JSC::JSArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  ++*(_DWORD *)(*((_QWORD *)a2 + 1) - 8);
  return JSC::JSArray::pop(a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t operationArraySpliceExtract(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  JSC::VM *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int isArraySlow;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  JSC::Structure *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  JSC::Structure *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  JSC::Structure *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t SlowCase;
  unint64_t v76;
  unint64_t *v77;
  _DWORD *v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  __int128 v89;
  unint64_t v90;
  JSC::VM *v91;
  unint64_t v92;
  unint64_t v93;
  WTF::StringImpl *v94;
  JSC::Butterfly *v95;
  char v96;
  unsigned int v97;
  unsigned int v98;
  JSC::JSObject *v100;
  JSC::JSGlobalObject *v101;
  unsigned int v102;
  JSC::Butterfly *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  int v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  JSC::Heap **v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  JSC::Exception *v155;
  WTF::AtomStringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  int v168;
  _WORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  JSC::VM *v193;
  uint64_t IndexQuickly;
  JSC::VM *v195;
  const WTF::StringImpl *v196;
  uint64_t v197;
  unint64_t v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  WTF::AtomStringImpl *v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int16 *v205;
  uint64_t v206;
  unsigned int v207;
  BOOL v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  _DWORD *v218;
  _DWORD *v219;
  __int128 v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __n128 v231;
  WTF::StringImpl *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t (*v251)(WTF::StringImpl **);
  WTF::StringImpl **v252;
  uint64_t v253;
  const WTF::String *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  double v266;
  unsigned __int16 *v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  uint64_t v286;
  WTF::StringImpl *Index;
  int v288;
  char v289;
  int v290;
  unint64_t v291;
  unint64_t UninitializedRestricted;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  int v299;
  _BYTE *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  unint64_t v305;
  unsigned __int16 *v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  char v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  unsigned __int8 *v314;
  int v315;
  int v316;
  unint64_t v317;
  double v318;
  const unsigned __int8 *v319;
  unsigned __int8 *v320;
  uint64_t v321;
  unsigned int v322;
  JSC::VM *v323;
  uint64_t v324;
  char v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  const WTF::String *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  WTF::AtomStringImpl *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  WTF::StringImpl *v343;
  unint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned __int8 *v352;
  uint64_t v353;
  unsigned int v354;
  JSC::VM *v355;
  uint64_t v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  _DWORD *v366;
  uint64_t v367;
  unint64_t v368;
  JSC::DirectArguments *v369;
  JSC::VM *v370;
  JSC::VM *v372;
  _QWORD *v373;
  int v374;
  uint64_t v375;
  WTF::StringImpl *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD v381[2];
  uint64_t v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  JSC::VM *v386;
  WTF::StringImpl *v387;
  uint64_t v388;
  _QWORD *v389;
  _QWORD varC8[26];

  v9 = a5;
  varC8[13] = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::VM **)(a1 + 56);
  *((_QWORD *)v11 + 5) = varC8[25];
  v370 = v11;
  v372 = v11;
  if ((*(_BYTE *)(a2 + 4) & 0xE) != 0)
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8);
  else
    v12 = 0;
  v13 = v12;
  if (v12 >= (unint64_t)(int)a3)
    v14 = (int)a3;
  else
    v14 = v12;
  v15 = (v12 + (uint64_t)(int)a3) & ~((v12 + (uint64_t)(int)a3) >> 63);
  if ((a3 & 0x80000000) != 0)
    v14 = v15;
  v16 = a4;
  v368 = v13;
  v369 = (JSC::DirectArguments *)v14;
  v17 = v13 - v14;
  if (v17 < a4)
    v16 = v17;
  if ((int)a4 >= 0)
    v18 = v16;
  else
    v18 = 0;
  v375 = 10;
  if ((a2 & 0xFFFE000000000002) != 0 || (v19 = *(unsigned __int8 *)(a2 + 5), v19 < 0x17))
  {
LABEL_54:
    isArraySlow = 0;
    goto LABEL_17;
  }
  if (v19 - 36 >= 2)
  {
    if (v19 == 61)
    {
      isArraySlow = JSC::isArraySlow((JSC *)a1, (JSC::JSGlobalObject *)a2, (JSC::ProxyObject *)a3);
      goto LABEL_17;
    }
    goto LABEL_54;
  }
  isArraySlow = 1;
LABEL_17:
  if (*((_DWORD *)v370 + 20))
  {
    v113 = *((_DWORD *)v370 + 20);
    if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v370 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v370 + 2))
      return 0;
  }
  if (!isArraySlow)
    goto LABEL_29;
  v21 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v22 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v22)
    v22 = *(_QWORD *)(a2 + 16);
  v25 = v22 == *(_QWORD *)(v21 + 672)
     && ((v23 = *(_QWORD *)(v21 + 2280), (v23 & 1) != 0)
       ? (v24 = (v23 >> 1) & 3)
       : (v24 = *(unsigned __int8 *)(v23 + 4)),
         v24 == 1)
     && ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) == 0
      || JSC::JSObject::getDirectOffset((_DWORD *)a2, v370, *(_QWORD *)(*((_QWORD *)v370 + 5244) + 1080), (const JSC::PropertyTable *)a4, a5, a6, a7, a8) == -1);
  if (*((_DWORD *)v370 + 20))
  {
    v114 = *((_DWORD *)v370 + 20);
    if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v370 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v370 + 2))
      return 0;
  }
  if (v25)
    goto LABEL_29;
  v115 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*((_QWORD *)v370 + 5244) + 1080), a4, a5, a6, a7, a8);
  v375 = v115;
  if (*((_DWORD *)v370 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v370, a2, a3, a4, a5, a6, a7, a8))
      return 0;
  }
  if ((v115 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v115 + 5) >= 0x17u)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v115 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x40))(&v387, v115);
    v115 = v375;
    if ((_BYTE)v387)
    {
      if (*(_QWORD *)(16 * (*(_DWORD *)v375 & 0xFFFFFFFE) + 0x28) != a1
        && &JSC::ArrayConstructor::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v375 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_29;
      }
    }
  }
  if ((v115 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v115 + 5) < 0x17u)
  {
LABEL_297:
    if (v115 == 10)
      goto LABEL_29;
    LOBYTE(v387) = 0;
    HIDWORD(v388) = 8;
    memset(varC8, 0, 72);
    v389 = &varC8[1];
    if (HIDWORD(v18))
    {
      v266 = (double)v18;
    }
    else
    {
      if ((v18 & 0x80000000) == 0)
      {
        v177 = v18 | 0xFFFE000000000000;
        goto LABEL_301;
      }
      v266 = (double)v18;
    }
    v177 = *(_QWORD *)&v266 + 0x2000000000000;
LABEL_301:
    varC8[1] = v177;
    LODWORD(v388) = 1;
    v373 = &varC8[1];
    v374 = 1;
    v386 = *(JSC::VM **)(a1 + 56);
    if ((v115 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v376) = 0;
    }
    else
    {
      if (*(_BYTE *)(v115 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v376, (uint64_t *)v115, (JSC::JSCell *)a2);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v115 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x40))(&v376, v115);
      if ((_BYTE)v376)
      {
        v27 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v115, (unsigned __int8 *)&v376, (uint64_t)&v373, (WTF *)v115, v178, v179, v180);
        goto LABEL_306;
      }
    }
    JSC::throwTypeError(a1, &v386, (uint64_t)"Species construction did not get a valid constructor", 53);
    v27 = 0;
LABEL_306:
    if (!*((_DWORD *)v370 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v370, (uint64_t)v181, v182, v183, v184, v185, v186, v187))
    {
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v388, v181, v182, v183, v184, v185, v186, v187);
LABEL_308:
      if (v18)
      {
        v193 = 0;
        while (1)
        {
          v387 = (JSC::VM *)((char *)v193 + (_QWORD)v369);
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, (unint64_t)v193 + (_QWORD)v369);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::getIfPropertyExists<unsigned long long>((_BYTE *)a2, (JSC::VM *)a1, (const WTF::StringImpl *)&v387, v197, v188, v189, v190, v191);
          v198 = IndexQuickly;
          if (*((_DWORD *)v372 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v372, (uint64_t)v195, (uint64_t)v196, v197, v188, v189, v190, v191))
            {
              return 0;
            }
          }
          if (v198)
          {
            if ((unint64_t)v193 > 0xFFFFFFFE)
            {
              v227 = *(_QWORD *)(a1 + 56);
              if (v193 == (JSC::VM *)0xFFFFFFFFLL)
                JSC::Identifier::from(*(uint64_t ***)(a1 + 56), 0xFFFFFFFFuLL, v196, v197, v188, v189, v190, v191, (int **)&v387);
              else
                JSC::Identifier::from(*(uint64_t ***)(a1 + 56), v195, (double)(unint64_t)v193, v196, v197, v188, v189, v190, v191, &v387);
              v232 = v387;
              JSC::JSObject::putDirect((int *)v27, v227, (unint64_t)v387, v198, 0, v231, v228, v229, v230);
              if (v232)
              {
                if (*(_DWORD *)v232 == 2)
                {
                  WTF::StringImpl::~StringImpl(v232, v199, v200, v201, v188, v189, v190, v191);
                  WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
                }
                else
                {
                  *(_DWORD *)v232 -= 2;
                }
              }
            }
            else
            {
              JSC::JSObject::putDirectIndex(v27, a1, v193, v198, 0, 2, v190, v191, v192.n128_f64[0]);
            }
            if (*((_DWORD *)v372 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v372, (uint64_t)v199, v200, v201, v188, v189, v190, v191))
            {
              return 0;
            }
          }
          v193 = (JSC::VM *)((char *)v193 + 1);
          if ((JSC::VM *)v18 == v193)
          {
            if (*(_BYTE *)(v27 + 5) != 36)
              goto LABEL_325;
            if (HIDWORD(v18))
            {
              v253 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v253 = 0x1400000002;
              *(_QWORD *)(v253 + 8) = "Invalid array length";
              *(_DWORD *)(v253 + 16) = 4;
              v387 = (WTF::StringImpl *)v253;
              v255 = JSC::createRangeError(a1, &v387, v254);
              JSC::VM::throwException(v370, (JSC::JSGlobalObject *)a1, v255, v256, v257, v258, v259, v260);
              v261 = v387;
              v387 = 0;
              if (v261)
              {
                if (*(_DWORD *)v261 == 2)
                {
                  WTF::StringImpl::~StringImpl(v261, v202, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
                }
                else
                {
                  *(_DWORD *)v261 -= 2;
                }
              }
              goto LABEL_321;
            }
            goto LABEL_320;
          }
        }
      }
      if (*(_BYTE *)(v27 + 5) == 36)
      {
LABEL_320:
        JSC::JSArray::setLength((JSC::JSArray *)v27, (JSC::VM **)a1, v18, 1, v188, v189, v190, v191, v192);
      }
      else
      {
LABEL_325:
        v387 = 0;
        v388 = v27;
        LODWORD(v389) = -1;
        BYTE4(v389) = BYTE4(v389) & 0xF8 | 1;
        *(_WORD *)((char *)&v389 + 5) = 0;
        HIBYTE(v389) = 1;
        varC8[0] = 0;
        v203 = v18 | 0xFFFE000000000000;
        if ((v18 & 0x80000000) != 0)
          v203 = COERCE__INT64((double)v18) + 0x2000000000000;
        if (HIDWORD(v18))
          v204 = COERCE__INT64((double)v18) + 0x2000000000000;
        else
          v204 = v203;
        (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) + 0x48))(v27, a1, *(_QWORD *)(*((_QWORD *)v370 + 5244) + 1768), v204, &v387);
      }
LABEL_321:
      if (*((_DWORD *)v372 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v372, (uint64_t)v202, a3, a4, a5, a6, a7, a8))
      {
        return 0;
      }
      goto LABEL_154;
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v388, v181, v182, v183, v184, v185, v186, v187);
    return 0;
  }
  v116 = *(_QWORD *)(*((_QWORD *)v370 + 5244) + 2752);
  a9.n128_u64[0] = 0xFFFFFFFF00000000;
  v378 = 0xFFFFFFFF00000000;
  LOBYTE(v382) = 0;
  v383 = 0;
  v384 = 0;
  v385 = 0;
  v380 = 0;
  memset(v381, 0, 13);
  v379 = v115;
  v117 = *(_QWORD *)(a1 + 56);
  v118 = *(unsigned __int8 *)(v115 + 5);
  if (v118 > 0x16)
    goto LABEL_216;
  if (v118 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v117 + 41952) + 1768) == v116)
    {
      v284 = *(_QWORD *)(v115 + 8);
      if ((v284 & 1) != 0)
        v285 = (unsigned int *)(v115 + 16);
      else
        v285 = (unsigned int *)(v284 + 4);
      v286 = *v285;
      if ((v286 & 0x80000000) != 0)
      {
        a9.n128_f64[0] = (double)v286;
        Index = (WTF::StringImpl *)(COERCE__INT64((double)v286) + 0x2000000000000);
      }
      else
      {
        Index = (WTF::StringImpl *)(v286 | 0xFFFE000000000000);
      }
      v288 = 14;
      goto LABEL_474;
    }
    if (v116)
    {
      v299 = *(_DWORD *)(v116 + 16);
      if ((v299 & 0x20) == 0)
      {
        v300 = *(_BYTE **)(v116 + 8);
        v301 = *(unsigned int *)(v116 + 4);
        if ((v299 & 4) != 0)
        {
          if (!(_DWORD)v301)
            goto LABEL_497;
          a3 = *v300 - 48;
          if (a3 > 9 || v301 >= 2 && *v300 == 48)
            goto LABEL_497;
          v362 = v300 + 1;
          v363 = v301 - 1;
          while (v363)
          {
            if (a3 > 0x19999999)
              goto LABEL_497;
            v364 = *v362 - 48;
            if (v364 > 9)
              goto LABEL_497;
            v289 = 0;
            v208 = __CFADD__(v364, 10 * a3);
            a3 = v364 + 10 * (_DWORD)a3;
            ++v362;
            --v363;
            if (v208)
              goto LABEL_475;
          }
        }
        else
        {
          if (!(_DWORD)v301)
            goto LABEL_497;
          a3 = *(unsigned __int16 *)v300 - 48;
          if (a3 > 9 || *(_WORD *)v300 == 48 && v301 > 1)
            goto LABEL_497;
          v306 = (unsigned __int16 *)(v300 + 2);
          v307 = v301 - 1;
          while (v307)
          {
            if (a3 > 0x19999999)
              goto LABEL_497;
            v308 = *v306 - 48;
            if (v308 > 9)
              goto LABEL_497;
            v289 = 0;
            v208 = __CFADD__(v308, 10 * a3);
            a3 = v308 + 10 * (_DWORD)a3;
            ++v306;
            --v307;
            if (v208)
              goto LABEL_475;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          v365 = *(_QWORD *)(v115 + 8);
          v366 = (_DWORD *)((v365 & 1) != 0 ? v115 + 16 : v365 + 4);
          if (*v366 > a3)
          {
            Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v115, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
            if (!*(_DWORD *)(v117 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v117, a2, a3, a4, a5, a6, a7, a8))
            {
              v288 = 10;
LABEL_474:
              v376 = Index;
              LODWORD(v378) = v288;
              v380 = 0;
              v289 = 1;
              BYTE1(v381[1]) = 1;
              goto LABEL_475;
            }
          }
        }
      }
    }
LABEL_497:
    v289 = 0;
LABEL_475:
    if (*(_DWORD *)(v117 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v117, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_282;
    if ((v289 & 1) != 0)
      goto LABEL_290;
  }
  v265 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v375, a1);
  if (!v265)
    goto LABEL_282;
  v115 = v265;
  v117 = *(_QWORD *)(a1 + 56);
LABEL_216:
  v119 = v115 + 6;
  v120 = v116 >> 4;
  v121 = v115;
  if ((*(_BYTE *)(v115 + 6) & 8) == 0)
  {
    v122 = v115;
    do
    {
      v123 = *(_DWORD *)v122 & 0xFFFFFFFE;
      v124 = 16 * v123;
      if (!(_DWORD)v120 || (v120 & ~*(_DWORD *)(16 * v123 + 0x20)) != 0)
        goto LABEL_229;
      v125 = *(_QWORD *)(16 * v123 + 0x58);
      if (!v125)
      {
        v136 = *(_QWORD *)(16 * v123 + 0x40);
        if (!v136 || *(_BYTE *)(v136 + 5) != 1 && *(_DWORD *)(v136 + 80) < 2u)
          goto LABEL_229;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v124, (JSC::VM *)v117, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v125)
          goto LABEL_229;
      }
      if (!*(_DWORD *)(v125 + 24))
        goto LABEL_229;
      v126 = *(_QWORD *)(v125 + 16);
      v127 = v126 & 0xFFFFFFFFFFFFFFFELL;
      v128 = *(unsigned int *)(v125 + 8);
      v129 = *(_DWORD *)(v116 + 16);
      if ((v126 & 1) != 0)
      {
        if ((v129 & 0x20) != 0)
          v129 = *(_DWORD *)(v116 + 32);
        v130 = *(_DWORD *)(v125 + 12);
        v131 = (v129 >> 8) & *(_QWORD *)&v130;
        v132 = *(unsigned __int8 *)(v127 + v131);
        if (!*(_BYTE *)(v127 + v131))
          goto LABEL_229;
        v133 = v127 + v128;
        v134 = 1;
        while (1)
        {
          v135 = *(_QWORD *)(v133 + 8 * (v132 - 1));
          if (v116 == (v135 & 0xFFFFFFFFFFFFLL))
            break;
          v131 = ((_DWORD)v131 + v134) & v130;
          v132 = *(unsigned __int8 *)(v127 + v131);
          ++v134;
          if (!*(_BYTE *)(v127 + v131))
            goto LABEL_229;
        }
        a6 = (v135 >> 16) & 0xFF00000000 | HIBYTE(v135);
      }
      else
      {
        if ((v129 & 0x20) != 0)
          v129 = *(_DWORD *)(v116 + 32);
        v137 = *(_DWORD *)(v125 + 12);
        v138 = v137 & (v129 >> 8);
        v139 = *(_DWORD *)(v127 + 4 * v138);
        if (!v139)
          goto LABEL_229;
        v140 = v127 + 4 * v128;
        v141 = 1;
        while (1)
        {
          v142 = (v139 - 1);
          if (v116 == *(_QWORD *)(v140 + 16 * v142))
            break;
          v138 = (v138 + v141) & v137;
          v139 = *(_DWORD *)(v127 + 4 * v138);
          ++v141;
          if (!v139)
            goto LABEL_229;
        }
        a6 = *(unsigned int *)(v140 + 16 * v142 + 8) | ((unint64_t)*(unsigned __int8 *)(v140 + 16 * v142 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v173 = v122 + 16;
          v174 = a6 << 32;
        }
        else
        {
          v173 = *(_QWORD *)(v122 + 8) - 8;
          v174 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v173 + (v174 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v175 = *(unsigned __int8 *)(a4 + 5);
          if (v175 != 5)
          {
            if (v175 != 6)
              goto LABEL_288;
            v223 = *(_DWORD *)(v124 + 16) & 3;
            v224 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v226 = *(_QWORD *)(a4 + 24);
              v225 = *(_QWORD *)(a4 + 32);
              v376 = *(WTF::StringImpl **)(a4 + 8);
              v377 = v224;
              LODWORD(v378) = HIDWORD(a6);
              v380 = v122;
              goto LABEL_367;
            }
            v376 = *(WTF::StringImpl **)(a4 + 8);
            v377 = v224;
            LODWORD(v378) = HIDWORD(a6);
            v380 = v122;
LABEL_448:
            BYTE1(v381[1]) = 3;
            if (v223 != 2)
              LOBYTE(v381[1]) = 1;
            goto LABEL_290;
          }
          v217 = (unsigned int *)v122;
LABEL_349:
          JSC::JSObject::fillGetterPropertySlot(v217, v117, (uint64_t)&v376, a4, a5, a6);
          goto LABEL_290;
        }
LABEL_288:
        v376 = (WTF::StringImpl *)a4;
        v380 = v122;
LABEL_289:
        v378 = __PAIR64__(a6, a5);
        LOWORD(v381[1]) = 257;
        goto LABEL_290;
      }
LABEL_229:
      if ((*(_BYTE *)v119 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v122, (JSC::VM *)v117, v116, (uint64_t)&v376) & 1) != 0)
      {
        goto LABEL_290;
      }
      v121 = *(_QWORD *)(v124 + 48);
      if (!v121)
        v121 = *(_QWORD *)(v122 + 16);
      if ((v121 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v121 + 5) < 0x17u)
      {
        if (!v116)
          goto LABEL_282;
        v168 = *(_DWORD *)(v116 + 16);
        if ((v168 & 0x20) != 0)
          goto LABEL_282;
        v169 = *(_WORD **)(v116 + 8);
        v170 = *(unsigned int *)(v116 + 4);
        if ((v168 & 4) == 0)
        {
          if ((_DWORD)v170)
          {
            v171 = (unsigned __int16)*v169 - 48;
            if (v171 <= 9 && (*v169 != 48 || v170 <= 1))
            {
              v205 = v169 + 1;
              v206 = v170 - 1;
              v172 = 10;
              while (v206)
              {
                if (v171 <= 0x19999999)
                {
                  v207 = *v205 - 48;
                  if (v207 <= 9)
                  {
                    v208 = __CFADD__(v207, 10 * v171);
                    v171 = v207 + 10 * (_DWORD)v171;
                    ++v205;
                    --v206;
                    if (!v208)
                      continue;
                  }
                }
                goto LABEL_292;
              }
              goto LABEL_577;
            }
          }
          goto LABEL_282;
        }
        if (!(_DWORD)v170)
          goto LABEL_282;
        v171 = *(unsigned __int8 *)v169 - 48;
        if (v171 > 9 || v170 >= 2 && *(_BYTE *)v169 == 48)
          goto LABEL_282;
        v320 = (unsigned __int8 *)v169 + 1;
        v321 = v170 - 1;
        while (v321)
        {
          if (v171 > 0x19999999)
            goto LABEL_282;
          v322 = *v320 - 48;
          if (v322 > 9)
            goto LABEL_282;
          v208 = __CFADD__(v322, 10 * v171);
          v171 = v322 + 10 * (_DWORD)v171;
          ++v320;
          --v321;
          v172 = 10;
          if (v208)
            goto LABEL_292;
        }
LABEL_577:
        if ((_DWORD)v171 == -1)
        {
LABEL_282:
          v172 = 10;
          goto LABEL_292;
        }
        v323 = *(JSC::VM **)(a1 + 56);
        while (2)
        {
          v324 = 16 * (*(_DWORD *)v115 & 0xFFFFFFFE);
          v325 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v324 + 0x4C) + 0x70))(v115, a1, v171, &v376);
          if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_282;
          if ((v325 & 1) != 0)
            goto LABEL_290;
          if (BYTE2(v381[1]) == 3)
          {
            if (BYTE4(v381[1]))
              goto LABEL_282;
            v326 = *(unsigned __int8 *)(v115 + 5);
            if (v326 != 61)
              goto LABEL_583;
          }
          else
          {
            v326 = *(unsigned __int8 *)(v115 + 5);
            if (v326 == 61)
            {
              if (BYTE2(v381[1]) == 1)
                goto LABEL_282;
            }
            else
            {
LABEL_583:
              if ((v326 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v115, a2, a3, a4, a5, a6, a7, a8) <= v171)
              {
                goto LABEL_282;
              }
            }
          }
          if ((*(_WORD *)(v324 + 12) & 0x800) == 0 || BYTE2(v381[1]) == 3)
          {
            v327 = *(_QWORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x30);
            if (!v327)
              v327 = *(_QWORD *)(v115 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v327 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v115 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v115, a1);
            }
            else
            {
              v327 = *(_QWORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x30);
              if (!v327)
                v327 = *(_QWORD *)(v115 + 16);
            }
            if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_282;
          }
          if ((v327 & 0xFFFE000000000002) != 0)
            goto LABEL_282;
          v115 = v327;
          v172 = 10;
          if (*(unsigned __int8 *)(v327 + 5) <= 0x16u)
            goto LABEL_292;
          continue;
        }
      }
      v119 = v121 + 6;
      v122 = v121;
    }
    while ((*(_BYTE *)(v121 + 6) & 8) == 0);
  }
  v367 = v121;
  if (v116)
  {
    v241 = *(_DWORD *)(v116 + 16);
    if ((v241 & 0x20) == 0)
    {
      v242 = *(_BYTE **)(v116 + 8);
      v243 = *(unsigned int *)(v116 + 4);
      if ((v241 & 4) != 0)
      {
        if ((_DWORD)v243)
        {
          v244 = *v242 - 48;
          if (v244 <= 9 && (v243 < 2 || *v242 != 48))
          {
            v352 = v242 + 1;
            v353 = v243 - 1;
            while (v353)
            {
              if (v244 <= 0x19999999)
              {
                v354 = *v352 - 48;
                if (v354 <= 9)
                {
                  v208 = __CFADD__(v354, 10 * v244);
                  v244 = v354 + 10 * (_DWORD)v244;
                  ++v352;
                  --v353;
                  if (!v208)
                    continue;
                }
              }
              goto LABEL_388;
            }
LABEL_637:
            if ((_DWORD)v244 != -1)
            {
              v355 = *(JSC::VM **)(a1 + 56);
              while (1)
              {
                v356 = 16 * (*(_DWORD *)v115 & 0xFFFFFFFE);
                v357 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v356 + 0x4C) + 0x70))(v115, a1, v244, &v376);
                v358 = v357;
                if (*((_DWORD *)v355 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v355, a2, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v358) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_290;
                    goto LABEL_282;
                  }
                }
                else if ((v357 & 1) != 0)
                {
                  goto LABEL_290;
                }
                if (BYTE2(v381[1]) == 3)
                {
                  if (BYTE4(v381[1]))
                    goto LABEL_282;
                  v359 = *(unsigned __int8 *)(v115 + 5);
                  if (v359 == 61)
                    goto LABEL_644;
                }
                else
                {
                  v359 = *(unsigned __int8 *)(v115 + 5);
                  if (v359 == 61)
                  {
                    if (BYTE2(v381[1]) == 1)
                      goto LABEL_282;
                    goto LABEL_644;
                  }
                }
                if ((v359 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v115, a2, a3, a4, a5, a6, a7, a8) <= v244)
                {
                  goto LABEL_282;
                }
LABEL_644:
                if ((*(_WORD *)(v356 + 12) & 0x800) == 0 || BYTE2(v381[1]) == 3)
                {
                  v360 = *(_QWORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x30);
                  if (!v360)
                    v360 = *(_QWORD *)(v115 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v360 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v115, a1);
                  }
                  else
                  {
                    v360 = *(_QWORD *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x30);
                    if (!v360)
                      v360 = *(_QWORD *)(v115 + 16);
                  }
                  if (*((_DWORD *)v355 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v355, a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_282;
                  }
                }
                if ((v360 & 0xFFFE000000000002) != 0)
                  goto LABEL_282;
                v115 = v360;
                v172 = 10;
                if (*(unsigned __int8 *)(v360 + 5) <= 0x16u)
                  goto LABEL_292;
              }
            }
          }
        }
      }
      else if ((_DWORD)v243)
      {
        v244 = *(unsigned __int16 *)v242 - 48;
        if (v244 <= 9 && (*(_WORD *)v242 != 48 || v243 <= 1))
        {
          v267 = (unsigned __int16 *)(v242 + 2);
          v268 = v243 - 1;
          while (v268)
          {
            if (v244 <= 0x19999999)
            {
              v269 = *v267 - 48;
              if (v269 <= 9)
              {
                v208 = __CFADD__(v269, 10 * v244);
                v244 = v269 + 10 * (_DWORD)v244;
                ++v267;
                --v268;
                if (!v208)
                  continue;
              }
            }
            goto LABEL_388;
          }
          goto LABEL_637;
        }
      }
    }
  }
LABEL_388:
  v117 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v245 = *(_DWORD *)v367 & 0xFFFFFFFE;
    v246 = 16 * v245;
    if ((*(_BYTE *)(v367 + 6) & 8) == 0)
      break;
    v310 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * v245 + 0x4C) + 0x68))(v367, a1, v116, &v376);
    if (*(_DWORD *)(v117 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v117, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_282;
    if ((v310 & 1) != 0)
      goto LABEL_290;
    if (BYTE2(v381[1]) == 3)
    {
      if (BYTE4(v381[1]))
        goto LABEL_282;
      v311 = *(unsigned __int8 *)(v367 + 5);
      if (v311 != 61)
      {
LABEL_528:
        if (!v116)
          goto LABEL_395;
        if ((v311 - 50) < 0xFFFFFFF5)
          goto LABEL_395;
        v312 = *(_DWORD *)(v116 + 16);
        if ((v312 & 0x20) != 0)
          goto LABEL_395;
        v313 = *(unsigned int *)(v116 + 4);
        if (!(_DWORD)v313)
          goto LABEL_395;
        v314 = *(unsigned __int8 **)(v116 + 8);
        if ((v312 & 4) == 0)
        {
          v315 = *(unsigned __int16 *)v314;
          if ((_DWORD)v313 == 1)
            goto LABEL_534;
          if (v315 == 45)
          {
            v315 = *((unsigned __int16 *)v314 + 1);
            goto LABEL_546;
          }
          if ((v315 - 48) >= 0xA && ((_DWORD)v313 != 8 || v315 != 73))
          {
LABEL_561:
            if ((_DWORD)v313 != 3 || v315 != 78)
              goto LABEL_395;
          }
LABEL_552:
          v119 = v119 & 0xFFFFFF0000000000 | v313 | ((unint64_t)((v312 >> 2) & 1) << 32);
          JSC::jsToNumber(v314, v119);
          WTF::numberToString(&v387, v318);
          if (WTF::equal(v116, (unint64_t)&v387, v319))
            goto LABEL_282;
          goto LABEL_395;
        }
        v315 = *v314;
        if ((_DWORD)v313 == 1)
        {
LABEL_534:
          if ((v315 - 48) < 0xA)
            goto LABEL_282;
          goto LABEL_395;
        }
        if (v315 == 45)
        {
          v315 = v314[1];
LABEL_546:
          if ((v315 - 48) < 0xA)
          {
            if ((_DWORD)v313 == 2)
              goto LABEL_282;
            goto LABEL_552;
          }
          if ((_DWORD)v313 != 9)
            goto LABEL_395;
        }
        else
        {
          if ((v315 - 48) < 0xA)
            goto LABEL_552;
          if ((_DWORD)v313 != 8)
            goto LABEL_561;
        }
        if (v315 != 73)
          goto LABEL_395;
        goto LABEL_552;
      }
    }
    else
    {
      v311 = *(unsigned __int8 *)(v367 + 5);
      if (v311 != 61)
        goto LABEL_528;
      if (BYTE2(v381[1]) == 1)
        goto LABEL_282;
    }
LABEL_395:
    if ((*(_WORD *)(v246 + 12) & 0x800) != 0)
    {
      v249 = *(_DWORD *)v367;
      if (BYTE2(v381[1]) != 3)
      {
        v309 = 16 * (v249 & 0xFFFFFFFE);
        if ((*(_WORD *)(v309 + 12) & 0x800) != 0)
        {
          v250 = (*(uint64_t (**)(uint64_t, unint64_t))(16 * *(unsigned int *)(v309 + 76) + 0xB0))(v367, a1);
        }
        else
        {
          v250 = *(_QWORD *)(v309 + 48);
          if (!v250)
            v250 = *(_QWORD *)(v367 + 16);
        }
        if (*(_DWORD *)(v117 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v117, a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_282;
        }
        goto LABEL_399;
      }
    }
    else
    {
      v249 = *(_DWORD *)v367;
    }
    v250 = *(_QWORD *)(16 * (v249 & 0xFFFFFFFE) + 0x30);
    if (!v250)
      v250 = *(_QWORD *)(v367 + 16);
LABEL_399:
    if ((v250 & 0xFFFE000000000002) != 0)
      goto LABEL_282;
    v367 = v250;
    v172 = 10;
    if (*(unsigned __int8 *)(v250 + 5) <= 0x16u)
      goto LABEL_292;
  }
  if (!(_DWORD)v120
    || (v120 & ~*(_DWORD *)(16 * v245 + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * v245), (JSC::VM *)v117, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v247)|| (v387 = (WTF::StringImpl *)v116, v248 = JSC::PropertyTable::get(v247, (uint64_t *)&v387), a6 = v248, (_DWORD)v248 == -1))
  {
    if ((*(_BYTE *)(v367 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v367, (JSC::VM *)v117, v116, (uint64_t)&v376) & 1) != 0)
    {
      goto LABEL_290;
    }
    goto LABEL_395;
  }
  a5 = HIDWORD(v248);
  if ((int)v248 <= 63)
  {
    v262 = v367 + 16;
    v263 = v248 << 32;
  }
  else
  {
    v262 = *(_QWORD *)(v367 + 8) - 8;
    v263 = 0x3F00000000 - (v248 << 32);
  }
  a4 = *(_QWORD *)(v262 + (v263 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_420:
    v376 = (WTF::StringImpl *)a4;
    v380 = v367;
    goto LABEL_289;
  }
  v264 = *(unsigned __int8 *)(a4 + 5);
  if (v264 == 5)
  {
    v217 = (unsigned int *)v367;
    goto LABEL_349;
  }
  if (v264 != 6)
    goto LABEL_420;
  v223 = *(_DWORD *)(v246 + 16) & 3;
  v298 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v376 = *(WTF::StringImpl **)(a4 + 8);
    v377 = v298;
    LODWORD(v378) = HIDWORD(v248);
    v380 = v367;
    goto LABEL_448;
  }
  v226 = *(_QWORD *)(a4 + 24);
  v225 = *(_QWORD *)(a4 + 32);
  v376 = *(WTF::StringImpl **)(a4 + 8);
  v377 = v298;
  LODWORD(v378) = HIDWORD(v248);
  v380 = v367;
LABEL_367:
  BYTE1(v381[1]) = 3;
  if (v223 != 2)
    LOBYTE(v381[1]) = 1;
  BYTE3(v381[1]) = 1;
  v384 = v226;
  v385 = v225;
LABEL_290:
  if (BYTE1(v381[1]) == 1)
  {
    v172 = (uint64_t)v376;
  }
  else if (BYTE1(v381[1]) == 2)
  {
    v172 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v376, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v172 = JSC::PropertySlot::customGetter((uint64_t)&v376, *(JSC::VM **)(a1 + 56), (WTF::StringImpl *)v116);
  }
LABEL_292:
  if (v383)
  {
    v176 = *(_DWORD *)(v382 + 4);
    if (!v176)
    {
      __break(0xC471u);
      JUMPOUT(0x198479D8CLL);
    }
    *(_DWORD *)(v382 + 4) = v176 - 1;
  }
  v375 = v172;
  if (*((_DWORD *)v370 + 20))
  {
    if (!JSC::VM::hasExceptionsAfterHandlingTraps(v370, a2, a3, a4, a5, a6, a7, a8))
    {
      v172 = v375;
      goto LABEL_296;
    }
    return 0;
  }
LABEL_296:
  v115 = v172;
  if (v172 != 2)
    goto LABEL_297;
LABEL_29:
  if (!v9)
  {
    v26 = *(_BYTE *)(a2 + 4) & 0xE;
    v27 = 10;
    switch(*(_BYTE *)(a2 + 4) & 0xE)
    {
      case 2:
        goto LABEL_154;
      case 4:
      case 6:
      case 8:
        if (v18 >> 5 > 0xC34)
          break;
        v28 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
        if (*((_BYTE *)v28 + 9) == 36)
        {
          v29 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
          v30 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
          v31 = (v30 >> 1) & 7;
          if ((v30 & 0x10) != 0)
            v31 = ((v30 & 0xE) + 10) >> 1;
          v32 = *(_DWORD *)(v29 + 4 * v31 + 852);
          if (v32)
            v33 = 16 * (v32 & 0xFFFFFFFE);
          else
            v33 = 0;
          if ((JSC::Structure *)v33 == v28)
          {
            v34 = *(_QWORD *)(v29 + 2304);
            v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
            if (v35 != 2)
              goto LABEL_46;
          }
        }
        else
        {
          LOBYTE(v30) = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
        }
        if ((v30 & 0x20) == 0)
        {
          v36 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
          if ((!v36 || *(_BYTE *)(*(_QWORD *)(v36 + 2048) + 4) != 2)
            && (JSC::Structure::holesMustForwardToPrototypeSlow(v28, (JSC::JSObject *)a2) & 1) == 0)
          {
LABEL_46:
            v37 = *(_DWORD *)(a1 + 2 * v26 + 892);
            goto LABEL_47;
          }
        }
        break;
      case 0xA:
        if (v18 >> 5 > 0xC34)
          break;
        v39 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
        if (*((_BYTE *)v39 + 9) == 36)
        {
          v40 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
          v41 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
          v42 = (v41 >> 1) & 7;
          if ((v41 & 0x10) != 0)
            v42 = ((v41 & 0xE) + 10) >> 1;
          v43 = *(_DWORD *)(v40 + 4 * v42 + 852);
          if (v43)
            v44 = 16 * (v43 & 0xFFFFFFFE);
          else
            v44 = 0;
          if ((JSC::Structure *)v44 == v39)
          {
            v45 = *(_QWORD *)(v40 + 2304);
            v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
            if (v46 != 2)
              goto LABEL_70;
          }
        }
        else
        {
          LOBYTE(v41) = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
        }
        if ((v41 & 0x20) != 0)
          break;
        v47 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
        if (v47)
        {
          if (*(_BYTE *)(*(_QWORD *)(v47 + 2048) + 4) == 2)
            break;
        }
        if ((JSC::Structure::holesMustForwardToPrototypeSlow(v39, (JSC::JSObject *)a2) & 1) != 0)
          break;
LABEL_70:
        v37 = *(_DWORD *)(a1 + 908);
LABEL_47:
        if (v37)
          v38 = 16 * (v37 & 0xFFFFFFFE);
        else
          v38 = 0;
        if ((*(_BYTE *)(v38 + 8) & 0xEu) < 0xA)
        {
          v27 = 10;
          goto LABEL_154;
        }
        break;
      default:
        break;
    }
  }
  v48 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
  if ((*((_WORD *)v48 + 6) & 0x100) != 0)
  {
    if (*(_BYTE *)(a2 + 5) == 33)
    {
      v104 = JSC::DirectArguments::fastSlice((JSC::DirectArguments *)a1, (JSC::JSGlobalObject *)a2, v369, v18, a5, a6, a7, a8);
LABEL_196:
      v27 = v104;
      goto LABEL_152;
    }
    goto LABEL_444;
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(_BYTE *)(a2 + 4) & 0xE;
  v51 = v50 | 1;
  if ((v50 | 1) != 9)
  {
    v27 = 0;
    switch(v51)
    {
      case 3:
        if (v18)
          goto LABEL_444;
        v104 = JSC::constructEmptyArray(a1, 0, 0, 0, a5, a6, a7, a8, a9);
        goto LABEL_196;
      case 5:
      case 7:
        break;
      case 11:
        if (v18 >> 5 > 0xC34
          || (JSC::Structure::holesMustForwardToPrototype(v48, (JSC::JSObject *)a2) & 1) != 0
          || (unint64_t)v369 + v18 > *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4))
        {
          goto LABEL_444;
        }
        v290 = *(_DWORD *)(a1 + 908);
        v291 = v290 ? 16 * (v290 & 0xFFFFFFFE) : 0;
        if ((*(_BYTE *)(v291 + 8) & 0xEu) > 9)
          goto LABEL_444;
        v387 = (WTF::StringImpl *)v49;
        UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v387, v291, v18, a4, a5, a6, a7, a8);
        v27 = UninitializedRestricted;
        if (UninitializedRestricted)
        {
          v293 = *(_QWORD *)(UninitializedRestricted + 8);
          v294 = *(_QWORD *)(a2 + 8) + 8 * (_QWORD)v369 + 16;
          v295 = (8 * v18) & 0x7FFFFFFF8;
          if (v295 > 0xF0)
          {
            v302 = v295 + v293;
            v303 = ((8 * v18) & 0x7FFFFFFE0) + v293;
            while (v293 != v303)
            {
              a9 = *(__n128 *)v294;
              v304 = *(_OWORD *)(v294 + 16);
              v294 += 32;
              *(__n128 *)v293 = a9;
              *(_OWORD *)(v293 + 16) = v304;
              v293 += 32;
            }
            while (v293 != v302)
            {
              v305 = *(_QWORD *)v294;
              v294 += 8;
              a9.n128_u64[0] = v305;
              *(_QWORD *)v293 = v305;
              v293 += 8;
            }
          }
          else if (v295)
          {
            v296 = v295 >> 3;
            if (v296 <= 1)
              v296 = 1;
            do
            {
              v297 = *(_QWORD *)v294;
              v294 += 8;
              *(_QWORD *)v293 = v297;
              v293 += 8;
              --v296;
            }
            while (v296);
          }
        }
        if (*((_BYTE *)v387 + 755))
          goto LABEL_151;
        goto LABEL_152;
      default:
        goto LABEL_152;
    }
  }
  if (v18 >> 5 > 0xC34)
    goto LABEL_444;
  if (*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 9) == 36)
  {
    v52 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
    v53 = *(unsigned __int8 *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
    v54 = (v53 >> 1) & 7;
    if ((v53 & 0x10) != 0)
      v54 = ((v53 & 0xE) + 10) >> 1;
    v55 = *(_DWORD *)(v52 + 4 * v54 + 852);
    if (v55)
      v56 = 16 * (v55 & 0xFFFFFFFE);
    else
      v56 = 0;
    if ((JSC::Structure *)v56 == v48)
    {
      v57 = *(_QWORD *)(v52 + 2304);
      v58 = (v57 & 1) != 0 ? (v57 >> 1) & 3 : *(unsigned __int8 *)(v57 + 4);
      if (v58 != 2)
        goto LABEL_99;
    }
  }
  else
  {
    LOBYTE(v53) = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8);
  }
  if ((v53 & 0x20) != 0
    || (v59 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28)) != 0
    && *(_BYTE *)(*(_QWORD *)(v59 + 2048) + 4) == 2)
  {
LABEL_444:
    v27 = 0;
    goto LABEL_152;
  }
  v60 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v60)
    v60 = *(_QWORD *)(a2 + 16);
  if ((v60 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v60 + 5) >= 0x17u)
  {
    while ((*(_BYTE *)(v60 + 4) & 0xE) == 0)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 8) & 0x20) != 0)
        break;
      v61 = *(_QWORD *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x28);
      if (v61)
      {
        if (*(_BYTE *)(*(_QWORD *)(v61 + 2048) + 4) == 2)
          break;
      }
      v62 = *(_QWORD *)(16 * (*(_DWORD *)v60 & 0xFFFFFFFE) + 0x30);
      if (!v62)
        v62 = *(_QWORD *)(v60 + 16);
      if ((v62 & 0xFFFE000000000002) == 0)
      {
        v60 = v62;
        if (*(unsigned __int8 *)(v62 + 5) > 0x16u)
          continue;
      }
      goto LABEL_99;
    }
    goto LABEL_444;
  }
LABEL_99:
  if ((unint64_t)v369 + v18 > *(unsigned int *)(*(_QWORD *)(a2 + 8) - 4))
    goto LABEL_444;
  v63 = *(_DWORD *)(a1 + 2 * v50 + 892);
  v64 = v63 ? 16 * (v63 & 0xFFFFFFFE) : 0;
  v65 = *(_BYTE *)(v64 + 8) & 0xE;
  if (v65 > 9)
    goto LABEL_444;
  v66 = *(unsigned __int16 *)(v64 + 24);
  if (v66 == 65534)
  {
    v68 = 0;
  }
  else
  {
    if (v66 == 0xFFFF)
      v67 = *(_DWORD *)(*(_QWORD *)(v64 + 64) + 84);
    else
      v67 = *(unsigned __int16 *)(v64 + 24);
    if (v67 >= 64)
    {
      if ((v67 - 63) >= 5)
      {
        v110 = (v67 - 64) | ((v67 - 64) >> 1) | (((v67 - 64) | ((v67 - 64) >> 1)) >> 2);
        v111 = v110 | (v110 >> 4) | ((v110 | (v110 >> 4)) >> 8);
        v68 = (v111 | HIWORD(v111)) + 1;
      }
      else
      {
        v68 = 4;
      }
    }
    else
    {
      v68 = 0;
    }
    if (v66 == 0xFFFF)
      v66 = *(_DWORD *)(*(_QWORD *)(v64 + 64) + 84);
    if (v66 >= 64)
    {
      if ((v66 - 63) >= 5)
      {
        v108 = (v66 - 64) | ((v66 - 64) >> 1) | (((v66 - 64) | ((v66 - 64) >> 1)) >> 2);
        v109 = v108 | (v108 >> 4) | ((v108 | (v108 >> 4)) >> 8);
        v69 = 8 * ((v109 | HIWORD(v109)) + 1) + 8;
      }
      else
      {
        v69 = 40;
      }
      goto LABEL_116;
    }
  }
  v69 = 8;
LABEL_116:
  if (v18 <= 3)
    v70 = 3;
  else
    v70 = v18;
  if (!(_DWORD)v18)
    v70 = 5;
  v71 = v69 + 8 * v70;
  if (v71 > 0x50)
  {
    if (v71 <= 0x1F60)
      v71 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v71 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v71 = (v71 + 15) & 0x3FFFFFFFF0;
  }
  v72 = v71 - v69;
  a3 = ((v71 - v69) & 0x7FFFFFFF8) + 8 * v68 + 8;
  if (a3 <= 0x1F60
    && (v73 = *(_QWORD *)(v49 + (((((v71 - v69) & 0x7FFFFFFF8) + 8 * v68 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v74 = *(unsigned int *)(v73 + 60);
    SlowCase = *(_QWORD *)(v73 + 24);
    if (SlowCase >= *(_QWORD *)(v73 + 32))
    {
      SlowCase = *(_QWORD *)(v73 + 40);
      if ((SlowCase & 1) == 0)
      {
        v166 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v73 + 48);
        *(_QWORD *)(v73 + 32) = SlowCase + HIDWORD(v166);
        *(_QWORD *)(v73 + 40) = SlowCase + (int)v166;
        *(_QWORD *)(v73 + 24) = SlowCase + v74;
        goto LABEL_128;
      }
      JSC::sanitizeStackForVM((JSC *)v49, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v73, v49 + 192, v74, 0, 1, v273, v274, v275);
    }
    else
    {
      *(_QWORD *)(v73 + 24) = SlowCase + v74;
    }
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v49 + 6648, *(JSC **)(a1 + 56), a3, 0, a5, a6, a7, a8);
  }
  if (!SlowCase)
  {
    v27 = 0;
    goto LABEL_150;
  }
LABEL_128:
  v76 = v72 >> 3;
  if ((v72 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x19847934CLL);
  }
  v77 = (unint64_t *)(v49 + 37584);
  v78 = (_DWORD *)(SlowCase + 8 * v68);
  v79 = v78 + 2;
  *v78 = v18;
  v78[1] = v76;
  if (v65 == 6)
  {
    if (v76 > v18)
      memset_pattern16((void *)(SlowCase + 8 * (v18 + v68) + 8), &memset_pattern_263, 8 * (v76 + ~(_DWORD)v18) + 8);
  }
  else if (v76 > v18)
  {
    bzero((void *)(SlowCase + 8 * (v18 + v68) + 8), 8 * (v76 + ~(_DWORD)v18) + 8);
  }
  v27 = *v77;
  if (*v77 >= *(_QWORD *)(v49 + 37592))
  {
    v27 = *(_QWORD *)(v49 + 37600);
    if ((v27 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v49, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      v27 = JSC::LocalAllocator::allocateSlowCase(v49 + 37560, v49 + 192, 16, 0, 0, v270, v271, v272);
      goto LABEL_134;
    }
    v165 = *(_QWORD *)(v27 + 8) ^ *(_QWORD *)(v49 + 37608);
    *(_QWORD *)(v49 + 37592) = v27 + HIDWORD(v165);
    *(_QWORD *)(v49 + 37600) = v27 + (int)v165;
  }
  *v77 = v27 + 16;
LABEL_134:
  *(_DWORD *)v27 = 0;
  v80 = *(_DWORD *)(v64 + 8);
  *(_DWORD *)v27 = v64 >> 4;
  *(_DWORD *)(v27 + 4) = v80;
  *(_QWORD *)(v27 + 8) = v79;
  if (*(_BYTE *)(v49 + 755))
  {
    __dmb(0xAu);
    v79 = *(_DWORD **)(v27 + 8);
  }
  v81 = *(_QWORD *)(a2 + 8);
  v82 = 8 * v18;
  v83 = (8 * v18) & 0x7FFFFFFF8;
  if (v51 == 7)
  {
    v105 = v81 + 8 * (_QWORD)v369;
    if (v83 > 0xF0)
    {
      v218 = (_DWORD *)((char *)v79 + v83);
      v219 = (_DWORD *)((char *)v79 + (v82 & 0x7FFFFFFE0));
      while (v79 != v219)
      {
        a9 = *(__n128 *)v105;
        v220 = *(_OWORD *)(v105 + 16);
        v105 += 32;
        *(__n128 *)v79 = a9;
        *((_OWORD *)v79 + 1) = v220;
        v79 += 8;
      }
      while (v79 != v218)
      {
        v221 = *(_QWORD *)v105;
        v105 += 8;
        a9.n128_u64[0] = v221;
        *(_QWORD *)v79 = v221;
        v79 += 2;
      }
    }
    else if (v83)
    {
      v106 = v83 >> 3;
      if (v106 <= 1)
        v106 = 1;
      do
      {
        v107 = *(_QWORD *)v105;
        v105 += 8;
        *(_QWORD *)v79 = v107;
        v79 += 2;
        --v106;
      }
      while (v106);
    }
  }
  else
  {
    v84 = v81 + 8 * (_QWORD)v369;
    if (v83 > 0xF0)
    {
      v87 = (_DWORD *)((char *)v79 + v83);
      v88 = (_DWORD *)((char *)v79 + (v82 & 0x7FFFFFFE0));
      while (v79 != v88)
      {
        a9 = *(__n128 *)v84;
        v89 = *(_OWORD *)(v84 + 16);
        v84 += 32;
        *(__n128 *)v79 = a9;
        *((_OWORD *)v79 + 1) = v89;
        v79 += 8;
      }
      while (v79 != v87)
      {
        v90 = *(_QWORD *)v84;
        v84 += 8;
        a9.n128_u64[0] = v90;
        *(_QWORD *)v79 = v90;
        v79 += 2;
      }
    }
    else if (v83)
    {
      v85 = v83 >> 3;
      if (v85 <= 1)
        v85 = 1;
      do
      {
        v86 = *(_QWORD *)v84;
        v84 += 8;
        *(_QWORD *)v79 = v86;
        v79 += 2;
        --v85;
      }
      while (v85);
    }
  }
LABEL_150:
  if (*(_BYTE *)(v49 + 755))
LABEL_151:
    __dmb(0xAu);
LABEL_152:
  v91 = v372;
  if (*((_DWORD *)v372 + 20))
  {
    v164 = *((_DWORD *)v372 + 20);
    if ((v164 & 0x27) != 0 && (v164 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v372 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v372 + 2))
      return 0;
  }
  if (!v27)
  {
    if (HIDWORD(v18))
    {
      v328 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v328 = 0x2800000002;
      *(_QWORD *)(v328 + 8) = "Length exceeded the maximum array length";
      *(_DWORD *)(v328 + 16) = 4;
      v387 = (WTF::StringImpl *)v328;
      v330 = JSC::createRangeError(a1, &v387, v329);
      JSC::VM::throwException(v91, (JSC::JSGlobalObject *)a1, v330, v331, v332, v333, v334, v335);
      v343 = v387;
      v387 = 0;
      if (v343)
      {
        if (*(_DWORD *)v343 == 2)
        {
          WTF::StringImpl::~StringImpl(v343, v336, v337, v338, v339, v340, v341, v342);
          WTF::fastFree(v344, v345, v346, v347, v348, v349, v350, v351);
        }
        else
        {
          *(_DWORD *)v343 -= 2;
        }
      }
      return 0;
    }
    v316 = *(_DWORD *)(a1 + 896);
    if (v316)
      v317 = 16 * (v316 & 0xFFFFFFFE);
    else
      v317 = 0;
    v27 = JSC::JSArray::tryCreate(v370, v317, (JSC::Structure *)v18, a4, a5, a6, a7, a8, a9);
    if (!v27)
    {
      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v372);
      return v27;
    }
    goto LABEL_308;
  }
LABEL_154:
  if (v18)
  {
    JSC::shift<(JSC::JSArray::ShiftCountMode)1>((JSC::VM **)a1, (JSC::JSObject *)a2, v369, v18, 0, v368, a7, a8, a9);
    if (*((_DWORD *)v372 + 20))
    {
      v167 = *((_DWORD *)v372 + 20);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v372 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v372 + 2))
        return 0;
    }
  }
  v92 = v368 - v18;
  v93 = (v368 - v18) >> 32;
  if (*(_BYTE *)(a2 + 5) != 36)
  {
    v387 = 0;
    v388 = a2;
    LODWORD(v389) = -1;
    BYTE4(v389) = BYTE4(v389) & 0xF8 | 1;
    *(_WORD *)((char *)&v389 + 5) = 0;
    HIBYTE(v389) = 1;
    varC8[0] = 0;
    v143 = v92 | 0xFFFE000000000000;
    if ((v92 & 0x80000000) != 0)
      v143 = COERCE__INT64((double)v92) + 0x2000000000000;
    if (v93)
      v144 = COERCE__INT64((double)v92) + 0x2000000000000;
    else
      v144 = v143;
    (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, WTF::StringImpl **))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x48))(a2, a1, *(_QWORD *)(*((_QWORD *)v370 + 5244) + 1768), v144, &v387);
    return v27;
  }
  if (v93)
  {
    v145 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v145 = 0x1400000002;
    *(_QWORD *)(v145 + 8) = "Invalid array length";
    *(_DWORD *)(v145 + 16) = 4;
    v376 = (WTF::StringImpl *)v145;
    v146 = *(_QWORD *)(a1 + 128);
    v147 = *(JSC::Heap ***)(a1 + 56);
    if ((v146 & 1) != 0)
    {
      v251 = *(uint64_t (**)(WTF::StringImpl **))(v146 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a1 & 8) != 0)
        v252 = (WTF::StringImpl **)(a1 - 16);
      else
        v252 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      v387 = *v252;
      v388 = a1;
      v389 = (_QWORD *)(a1 + 128);
      v146 = v251(&v387);
    }
    v148 = JSC::ErrorInstance::create(v147, v146, &v376, 0, 0, 0, 2, 1);
    v155 = (JSC::Exception *)v148;
    if ((v148 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v148 & 0xFFFFFFFE) + 0x4C)))
    {
      v155 = (JSC::Exception *)JSC::Exception::create((uint64_t)v370, (JSC::VM *)v148, 0, v149, v150, v151, v152, v153);
    }
    JSC::VM::throwException(v370, (JSC::JSGlobalObject *)a1, v155, v154, v149, v150, v151, v152, v153);
    v163 = v376;
    v376 = 0;
    if (v163)
    {
      if (*(_DWORD *)v163 == 2)
      {
        WTF::StringImpl::~StringImpl(v163, v156, v157, v158, v159, v160, v161, v162);
        WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
      }
      else
      {
        *(_DWORD *)v163 -= 2;
      }
    }
    return v27;
  }
  v94 = *(WTF::StringImpl **)(a1 + 56);
  v387 = v94;
  v95 = *(JSC::Butterfly **)(a2 + 8);
  v96 = *(_BYTE *)(a2 + 4);
  v97 = v96 & 0x1F;
  if (v97 == 9)
    goto LABEL_159;
  if (v97 > 0x19)
    goto LABEL_450;
  if (((1 << v97) & 0xA8) == 0)
  {
    if (((1 << v97) & 0x2800) != 0)
    {
LABEL_164:
      v100 = (JSC::JSObject *)a2;
      v101 = (JSC::JSGlobalObject *)a1;
      v102 = v92;
      v103 = v95;
LABEL_165:
      JSC::JSArray::setLengthWithArrayStorage((uint64_t)v100, v101, v102, 1, v103);
      return v27;
    }
    if (((1 << v97) & 0x2A00000) != 0)
    {
      if (*((_DWORD *)v95 - 2) == (_DWORD)v92)
        return v27;
      JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a2, v94, a3, a4, a5, a6, a7, a8, a9);
      v95 = *(JSC::Butterfly **)(a2 + 8);
      goto LABEL_159;
    }
LABEL_450:
    if (v97 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19847A120);
    }
    if (!(_DWORD)v92)
      return v27;
    if (v92 >> 5 < 0xC35)
    {
      JSC::JSObject::createInitialUndecided((JSC::JSObject *)a2, v94, v92, a9);
      return v27;
    }
    if ((v96 & 0xEu) <= 9)
      v95 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a2, v94, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_164;
  }
LABEL_159:
  v98 = *((_DWORD *)v95 - 2);
  if (v98 == (_DWORD)v92)
    return v27;
  if (v92 > 0x10000000)
    goto LABEL_458;
  if (v92 >> 5 < 0xC35)
    goto LABEL_185;
  if (JSC::JSObject::countElements((JSC::JSObject *)a2) < v92 >> 3)
  {
LABEL_458:
    if ((*(_BYTE *)(a2 + 4) & 0xEu) < 0xA)
      v103 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a2, v94, a3, a4, a5, a6, a7, a8, a9);
    else
      v103 = *(JSC::Butterfly **)(a2 + 8);
    v100 = (JSC::JSObject *)a2;
    v101 = (JSC::JSGlobalObject *)a1;
    v102 = v92;
    goto LABEL_165;
  }
  v98 = *((_DWORD *)v95 - 2);
LABEL_185:
  v112 = v98 - v92;
  if (v98 < v92)
  {
    v222 = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)(v222 - 4) < v92 || (*(_BYTE *)(a2 + 4) & 0x10) != 0)
    {
      if (!JSC::JSObject::ensureLengthSlow((JSC::JSObject *)a2, v94, v92, a4, a5, a6, a7, a8, a9))
      {
        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v387);
        return v27;
      }
      v222 = *(_QWORD *)(a2 + 8);
    }
    if (*(_DWORD *)(v222 - 8) < v92)
      *(_DWORD *)(v222 - 8) = v92;
  }
  else if (v112 > v92 && v112 >= 0x41)
  {
    JSC::JSObject::reallocateAndShrinkButterfly((JSC::JSObject *)a2, v94, v92);
  }
  else
  {
    if ((*(_BYTE *)(a2 + 4) & 0xF) == 7)
    {
      if (v98 > v92)
        memset_pattern16((char *)v95 + 8 * (v98 - 1 - (unint64_t)(v98 - 1 - v92)), &memset_pattern_4, 8 * (v98 - 1 - v92) + 8);
    }
    else if (v98 > v92)
    {
      bzero((char *)v95 + 8 * (v98 - 1 - (unint64_t)(v98 - 1 - v92)), 8 * (v98 - 1 - v92) + 8);
    }
    *((_DWORD *)v95 - 2) = v92;
  }
  return v27;
}

void JSC::shift<(JSC::JSArray::ShiftCountMode)1>(JSC::VM **a1, JSC::JSObject *a2, const WTF::StringImpl *a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  JSC::JSObject *v15;
  JSC::VM *v16;
  char v17;
  uint64_t v18;
  JSC::Butterfly *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  JSC::JSArray *v50;
  JSC::VM *v51;
  uint64_t v52;
  uint64_t v53;
  JSC::ArrayStorage *v54;
  JSC::VM *v55;
  char v56;
  JSC::VM *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t IndexQuicklyForTypedArray;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  JSC::VM *v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _OWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t **v82;
  WTF::StringImpl *v83;
  void (*v84)(JSC::JSObject *, JSC::VM *, int *, unint64_t, _QWORD *);
  WTF::StringImpl *v85;
  uint64_t **v86;
  WTF::StringImpl *v87;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  _OWORD *v124;
  _OWORD *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  JSC::VM *v146;
  _QWORD v147[2];
  int v148;
  char v149;
  __int16 v150;
  char v151;
  uint64_t v152;
  int *v153;

  v9 = a1[7];
  v146 = v9;
  v10 = a4 - a5;
  if (a4 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x19847AFF8);
  }
  v11 = a6;
  v12 = (unint64_t)a3;
  if (a6 < (unint64_t)a3)
  {
    __break(0xC471u);
    JUMPOUT(0x19847B018);
  }
  if (a6 - (unint64_t)a3 < a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19847B038);
  }
  v15 = a2;
  v16 = (JSC::VM *)a1;
  if (*((_BYTE *)a2 + 5) != 36)
  {
    v57 = (JSC::VM *)a1;
    goto LABEL_77;
  }
  v17 = *((_BYTE *)a2 + 4);
  if ((v17 & 0xE) != 0)
    v18 = *(unsigned int *)(*((_QWORD *)a2 + 1) - 8);
  else
    v18 = 0;
  if (v18 == a6)
  {
    if (!(_DWORD)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19847B058);
    }
    if ((*((_BYTE *)a2 + 4) & 0x10) != 0)
    {
      JSC::JSObject::convertFromCopyOnWrite(a2, v9, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v16 = (JSC::VM *)a1;
      v17 = *((_BYTE *)v15 + 4);
    }
    v19 = (JSC::Butterfly *)*((_QWORD *)v15 + 1);
    v20 = v17 & 0xF;
    if (v20 != 9)
    {
      switch(v17 & 0xF)
      {
        case 1:
          return;
        case 3:
          goto LABEL_76;
        case 5:
          goto LABEL_12;
        case 7:
          v47 = *((_DWORD *)v19 - 2);
          v48 = v47 - v10;
          if (v47 < v10)
          {
            __break(0xC471u);
            JUMPOUT(0x19847B0C8);
          }
          if ((v47 - ((_DWORD)v10 + (_DWORD)v12)) >> 5 >= 0xC35)
            goto LABEL_128;
          if ((_DWORD)v48 != (_DWORD)v12)
          {
            v145 = v48 - v12;
            if (*((_BYTE *)v15 + 5) == 36
              && (v74 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30)) != 0
              && (v75 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28), v74 == *(_QWORD *)(v75 + 672))
              && ((v76 = *(_QWORD *)(v75 + 2304), (v76 & 1) != 0)
                ? (v77 = (v76 >> 1) & 3)
                : (v77 = *(unsigned __int8 *)(v76 + 4)),
                  v77 != 2)
              || !JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)), v15))
            {
              v78 = (_OWORD *)((char *)v19 + 8 * v12);
              if (v145 > 0x1E)
              {
                v123 = (_OWORD *)((char *)v78 + 8 * v10);
                v124 = (_OWORD *)((char *)v78 + 8 * v145);
                v125 = (_OWORD *)((char *)v78 + ((8 * v145) & 0x7FFFFFFE0));
                while (v78 != v125)
                {
                  v126 = *v123;
                  v127 = v123[1];
                  v123 += 2;
                  *v78 = v126;
                  v78[1] = v127;
                  v78 += 2;
                }
                while (v78 != v124)
                {
                  v128 = *(_QWORD *)v123;
                  v123 = (__int128 *)((char *)v123 + 8);
                  *(_QWORD *)v78 = v128;
                  v78 = (_OWORD *)((char *)v78 + 8);
                }
              }
              else
              {
                if (v145 <= 1)
                  v79 = 1;
                else
                  v79 = v145;
                do
                {
                  *(_QWORD *)v78 = *((_QWORD *)v78 + v10);
                  v78 = (_OWORD *)((char *)v78 + 8);
                  --v79;
                }
                while (v79);
              }
            }
            else if (v48 > v12)
            {
              v12 = v12;
              do
              {
                *((_QWORD *)v19 + v12) = *((_QWORD *)v19 + (v10 + v12));
                ++v12;
              }
              while (v48 != v12);
            }
          }
          if (v47 <= (int)v48 + 1)
            v49 = v48 + 1;
          else
            v49 = v47;
          memset_pattern16((char *)v19 + 8 * v48, &memset_pattern_268, 8 * (~v47 + (_DWORD)v10 + v49) + 8);
          *((_DWORD *)v19 - 2) = v48;
          break;
        case 0xB:
        case 0xD:
          v50 = v15;
          v51 = v9;
          v52 = v12;
          v53 = v10;
          v54 = (JSC::ArrayStorage *)*((_QWORD *)v15 + 1);
          v55 = v16;
          goto LABEL_75;
        default:
          __break(0xC471u);
          JUMPOUT(0x19847B638);
      }
      return;
    }
LABEL_12:
    v21 = *((_DWORD *)v19 - 2);
    v22 = v21 - v10;
    if (v21 < v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19847B078);
    }
    if ((v21 - ((_DWORD)v10 + (_DWORD)v12)) >> 5 >= 0xC35)
    {
LABEL_128:
      v55 = v16;
      if ((v17 & 0xEu) <= 9)
        v19 = JSC::JSObject::ensureArrayStorageSlow(v15, v9, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v50 = v15;
      v51 = v9;
      v52 = v12;
      v53 = v10;
      v54 = v19;
LABEL_75:
      v56 = JSC::JSArray::shiftCountWithArrayStorage(v50, v51, v52, v53, v54, a6, a7, a8);
      v16 = v55;
      if ((v56 & 1) != 0)
        return;
      goto LABEL_76;
    }
    LODWORD(v23) = v22 - v12;
    if ((_DWORD)v22 == (_DWORD)v12)
    {
LABEL_57:
      if (v21 <= (int)v22 + 1)
        v46 = v22 + 1;
      else
        v46 = v21;
      bzero((char *)v19 + 8 * v22, 8 * (~v21 + (_DWORD)v10 + v46) + 8);
      *((_DWORD *)v19 - 2) = v22;
      if (v20 == 9 && v15 && *((_DWORD *)v9 + 190) >= *((unsigned __int8 *)v15 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v9 + 192, (unint64_t)v15);
      return;
    }
    if (*((_BYTE *)v15 + 5) != 36
      || (v24 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30)) == 0
      || (v25 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28), v24 != *(_QWORD *)(v25 + 672))
      || ((v26 = *(_QWORD *)(v25 + 2304), (v26 & 1) != 0)
        ? (v27 = (v26 >> 1) & 3)
        : (v27 = *(unsigned __int8 *)(v26 + 4)),
          v27 == 2))
    {
      if (*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 9) == 36)
      {
        v28 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28);
        v29 = *(unsigned __int8 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8);
        v30 = (v29 >> 1) & 7;
        if ((v29 & 0x10) != 0)
          v30 = ((v29 & 0xE) + 10) >> 1;
        v31 = *(_DWORD *)(v28 + 4 * v30 + 852);
        if (v31)
          v32 = 16 * (v31 & 0xFFFFFFFE);
        else
          v32 = 0;
        if (v32 == 16 * (*(_DWORD *)v15 & 0xFFFFFFFE))
        {
          v33 = *(_QWORD *)(v28 + 2304);
          v34 = (v33 & 1) != 0 ? (v33 >> 1) & 3 : *(unsigned __int8 *)(v33 + 4);
          if (v34 != 2)
            goto LABEL_46;
        }
      }
      else
      {
        LOBYTE(v29) = *(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8);
      }
      if ((v29 & 0x20) != 0)
        goto LABEL_115;
      v35 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28);
      if (v35)
      {
        if (*(_BYTE *)(*(_QWORD *)(v35 + 2048) + 4) == 2)
          goto LABEL_115;
      }
      v36 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x30);
      if (!v36)
        v36 = *((_QWORD *)v15 + 2);
      if ((v36 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v36 + 5) >= 0x17u)
      {
        while ((*(_BYTE *)(v36 + 4) & 0xE) == 0)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 8) & 0x20) != 0)
            break;
          v37 = *(_QWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x28);
          if (v37)
          {
            if (*(_BYTE *)(*(_QWORD *)(v37 + 2048) + 4) == 2)
              break;
          }
          v38 = *(_QWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x30);
          if (!v38)
            v38 = *(_QWORD *)(v36 + 16);
          if ((v38 & 0xFFFE000000000002) == 0)
          {
            v36 = v38;
            if (*(unsigned __int8 *)(v38 + 5) > 0x16u)
              continue;
          }
          goto LABEL_46;
        }
LABEL_115:
        if (v22 > v12)
        {
          v12 = v12;
          while (1)
          {
            v70 = *((_QWORD *)v19 + (v10 + v12));
            if (!v70)
              goto LABEL_128;
            *((_QWORD *)v19 + v12++) = v70;
            if (v22 == v12)
              goto LABEL_57;
          }
        }
        goto LABEL_57;
      }
    }
LABEL_46:
    v39 = (_OWORD *)((char *)v19 + 8 * v12);
    if (v23 > 0x1E)
    {
      v40 = (_OWORD *)((char *)v39 + 8 * v10);
      v41 = (_OWORD *)((char *)v39 + 8 * v23);
      v42 = (_OWORD *)((char *)v39 + ((8 * (v22 - v12)) & 0x7FFFFFFE0));
      while (v39 != v42)
      {
        v43 = *v40;
        v44 = v40[1];
        v40 += 2;
        *v39 = v43;
        v39[1] = v44;
        v39 += 2;
      }
      while (v39 != v41)
      {
        v45 = *(_QWORD *)v40;
        v40 = (__int128 *)((char *)v40 + 8);
        *(_QWORD *)v39 = v45;
        v39 = (_OWORD *)((char *)v39 + 8);
      }
    }
    else
    {
      if (v23 <= 1)
        v23 = 1;
      else
        v23 = v23;
      do
      {
        *(_QWORD *)v39 = *((_QWORD *)v39 + v10);
        v39 = (_OWORD *)((char *)v39 + 8);
        --v23;
      }
      while (v23);
    }
    goto LABEL_57;
  }
LABEL_76:
  v57 = v16;
  v12 = v12;
LABEL_77:
  v142 = v11 - a4;
  if (v12 >= v11 - a4)
  {
LABEL_131:
    v71 = v11 - v10;
    while (v11 > v71)
    {
      v72 = v11 - 1;
      if (HIDWORD(v11))
      {
        v82 = (uint64_t **)*((_QWORD *)v57 + 7);
        if (v11 == 0x100000000)
          JSC::Identifier::from(v82, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, &v153);
        else
          JSC::Identifier::from(v82, a2, (double)v72, a3, a4, a5, a6, a7, a8, (WTF::StringImpl **)&v153);
        v83 = (WTF::StringImpl *)v153;
        LODWORD(v147[0]) = -1;
        WORD2(v147[0]) = 1;
        v73 = (*(uint64_t (**)(JSC::JSObject *, JSC::VM *, int *, _QWORD *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0x58))(v15, v57, v153, v147);
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
          {
            WTF::StringImpl::~StringImpl(v83, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
          else
          {
            *(_DWORD *)v83 -= 2;
          }
        }
      }
      else
      {
        v73 = (*(uint64_t (**)(JSC::JSObject *, JSC::VM *, _QWORD))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x60))(v15, v57, (v11 - 1));
      }
      if (*((_DWORD *)v9 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        break;
      }
      v11 = v72;
      if ((v73 & 1) == 0)
      {
        v80 = (unint64_t)v57;
        goto LABEL_138;
      }
    }
    return;
  }
  v58 = 0;
  v143 = v12 + a5;
  v144 = 0;
  v140 = v12 + a5 - 0xFFFFFFFF;
  v141 = v12 + a4;
  v138 = 8 * v12 + 8 * a5;
  v139 = 8 * v12 + 8 * a4;
  while (1)
  {
    v59 = v141 + v58;
    v147[0] = v141 + v58;
    if (v141 + v58 > 0xFFFFFFFE)
      goto LABEL_84;
    v60 = *((_QWORD *)v15 + 1);
    if ((*((_BYTE *)v15 + 4) & 0xFu) - 8 >= 2)
    {
      switch(*((_BYTE *)v15 + 4) & 0xF)
      {
        case 0:
        case 1:
          switch(*((_BYTE *)v15 + 5))
          {
            case '\'':
            case '(':
              if ((*((_BYTE *)v15 + 40) & 7u) <= 2)
                goto LABEL_162;
              v112 = *(_QWORD *)(v60 - 8);
              if (*(_BYTE *)(v112 + 64) && (v136 = *(_QWORD *)(v112 + 32)) != 0)
                v113 = *(_QWORD *)(v136 + 32);
              else
                v113 = *(_QWORD *)(v112 + 48);
              v92 = *((_QWORD *)v15 + 3);
              v114 = *((_QWORD *)v15 + 4);
              if (v92 + v114 > v113)
                goto LABEL_84;
              if ((*((_BYTE *)v15 + 40) & 1) == 0)
                goto LABEL_238;
              v81 = v113 - v114;
              goto LABEL_163;
            case ')':
              if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds((uint64_t)v15, v141 + v58))
                goto LABEL_84;
              goto LABEL_164;
            case '*':
            case '+':
              if ((*((_BYTE *)v15 + 40) & 7u) <= 2)
                goto LABEL_162;
              v89 = *(_QWORD *)(v60 - 8);
              if (*(_BYTE *)(v89 + 64) && (v134 = *(_QWORD *)(v89 + 32)) != 0)
                v90 = *(_QWORD *)(v134 + 32);
              else
                v90 = *(_QWORD *)(v89 + 48);
              v92 = *((_QWORD *)v15 + 3);
              v91 = *((_QWORD *)v15 + 4);
              if (v91 + 2 * v92 > v90)
                goto LABEL_84;
              if ((*((_BYTE *)v15 + 40) & 1) == 0)
                goto LABEL_238;
              if (v59 >= (v90 - v91) >> 1)
                goto LABEL_84;
              goto LABEL_164;
            case ',':
            case '-':
            case '.':
              if ((*((_BYTE *)v15 + 40) & 7u) <= 2)
                goto LABEL_162;
              v129 = *(_QWORD *)(v60 - 8);
              if (*(_BYTE *)(v129 + 64) && (v133 = *(_QWORD *)(v129 + 32)) != 0)
                v130 = *(_QWORD *)(v133 + 32);
              else
                v130 = *(_QWORD *)(v129 + 48);
              v92 = *((_QWORD *)v15 + 3);
              v131 = *((_QWORD *)v15 + 4);
              if (v131 + 4 * v92 > v130)
                goto LABEL_84;
              if ((*((_BYTE *)v15 + 40) & 1) == 0)
                goto LABEL_238;
              if (v59 >= (v130 - v131) >> 2)
                goto LABEL_84;
              goto LABEL_164;
            case '/':
              if ((*((_BYTE *)v15 + 40) & 7u) <= 2)
              {
LABEL_162:
                v81 = *((_QWORD *)v15 + 3);
LABEL_163:
                if (v81 > v59)
                {
LABEL_164:
                  IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)v15, v59, 0);
                  goto LABEL_83;
                }
              }
              else
              {
                v101 = *(_QWORD *)(v60 - 8);
                if (*(_BYTE *)(v101 + 64) && (v135 = *(_QWORD *)(v101 + 32)) != 0)
                  v102 = *(_QWORD *)(v135 + 32);
                else
                  v102 = *(_QWORD *)(v101 + 48);
                v92 = *((_QWORD *)v15 + 3);
                v103 = *((_QWORD *)v15 + 4);
                if (v103 + 8 * v92 <= v102)
                {
                  if ((*((_BYTE *)v15 + 40) & 1) != 0)
                  {
                    if (v59 < (v102 - v103) >> 3)
                      goto LABEL_164;
                  }
                  else
                  {
LABEL_238:
                    if (v92 > v59)
                      goto LABEL_164;
                  }
                }
              }
              break;
            default:
              goto LABEL_84;
          }
          break;
        case 3:
          break;
        case 4:
        case 5:
          goto LABEL_81;
        case 6:
        case 7:
          if (*(_DWORD *)(v60 - 8) <= v59)
            break;
          a9.n128_u64[0] = *(_QWORD *)(v60 + v139 + v144);
          IndexQuicklyForTypedArray = a9.n128_u64[0] + 0x2000000000000;
          goto LABEL_83;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (*(_DWORD *)(v60 - 4) <= v59)
            break;
          IndexQuicklyForTypedArray = *(_QWORD *)(v60 + v139 + 8 * v58 + 16);
          goto LABEL_83;
        default:
          __break(0xC471u);
          JUMPOUT(0x19847B7E0);
      }
LABEL_84:
      IndexQuicklyForTypedArray = JSC::JSObject::getIfPropertyExists<unsigned long long>(v15, v57, (const WTF::StringImpl *)v147, a4, a5, a6, a7, a8);
      goto LABEL_85;
    }
LABEL_81:
    if (*(_DWORD *)(v60 - 8) <= v59)
      goto LABEL_84;
    IndexQuicklyForTypedArray = *(_QWORD *)(v60 + v139 + v144);
LABEL_83:
    if (!IndexQuicklyForTypedArray)
      goto LABEL_84;
LABEL_85:
    v9 = v146;
    if (*((_DWORD *)v146 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v146, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return;
    }
    v62 = v143 + v58;
    v63 = v140 + v58;
    if (IndexQuicklyForTypedArray)
    {
      a2 = (JSC::JSObject *)*((_QWORD *)v57 + 7);
      if (v62 > 0xFFFFFFFE)
      {
        v147[0] = 0;
        v147[1] = v15;
        v148 = -1;
        v149 = v149 & 0xF8 | 1;
        v150 = 0;
        v151 = 1;
        v152 = 0;
        v84 = *(void (**)(JSC::JSObject *, JSC::VM *, int *, unint64_t, _QWORD *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) + 0x48);
        if (v63)
          JSC::Identifier::from((uint64_t **)a2, a2, (double)v62, a3, a4, a5, a6, a7, a8, (WTF::StringImpl **)&v153);
        else
          JSC::Identifier::from((uint64_t **)a2, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, &v153);
        v85 = (WTF::StringImpl *)v153;
        v84(v15, v57, v153, IndexQuicklyForTypedArray, v147);
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
          {
            WTF::StringImpl::~StringImpl(v85, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
          }
          else
          {
            *(_DWORD *)v85 -= 2;
          }
        }
      }
      else
      {
        v64 = v143 + v58;
        v65 = *((_QWORD *)v15 + 1);
        switch(*((_BYTE *)v15 + 4) & 0x1F)
        {
          case 0:
          case 1:
            if ((JSC::JSObject::trySetIndexQuicklyForTypedArray((uint64_t)v15, (int)v143 + (int)v58, IndexQuicklyForTypedArray, 0) & 1) == 0)goto LABEL_101;
            break;
          case 3:
            goto LABEL_101;
          case 4:
          case 5:
            if (*(_DWORD *)(v65 - 4) <= v64)
              goto LABEL_101;
            if (IndexQuicklyForTypedArray > 0xFFFDFFFFFFFFFFFFLL)
            {
LABEL_89:
              if (*(_DWORD *)(v65 - 4) <= v64)
              {
LABEL_101:
                (*(void (**)(JSC::JSObject *, JSC::VM *, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) + 0x50))(v15, v57, v64, IndexQuicklyForTypedArray, 1);
              }
              else
              {
                *(_QWORD *)(v65 + v138 + v144) = IndexQuicklyForTypedArray;
                if (*(_DWORD *)(v65 - 8) <= v64)
                  *(_DWORD *)(v65 - 8) = v143 + v58 + 1;
LABEL_92:
                if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) == 0
                  && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v15 + 7))
                {
                  JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v15);
                }
              }
            }
            else
            {
              JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex(v15, a2, v143 + v58, IndexQuicklyForTypedArray, a5, a6, a7, a8);
            }
            break;
          case 6:
          case 7:
            if (*(_DWORD *)(v65 - 4) <= v64)
              goto LABEL_101;
            if (IndexQuicklyForTypedArray >> 49)
            {
              a9.n128_f64[0] = (double)(int)IndexQuicklyForTypedArray;
              if (IndexQuicklyForTypedArray <= 0xFFFDFFFFFFFFFFFFLL)
                a9.n128_u64[0] = IndexQuicklyForTypedArray - 0x2000000000000;
              *(_QWORD *)(v65 + v138 + v144) = a9.n128_u64[0];
LABEL_192:
              if (*(_DWORD *)(v65 - 8) <= v64)
                *(_DWORD *)(v65 - 8) = v143 + v58 + 1;
            }
            else
            {
              JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(v15, a2, v143 + v58, IndexQuicklyForTypedArray, a5, a6, a7, a8, a9.n128_f64[0]);
            }
            break;
          case 8:
          case 9:
            goto LABEL_89;
          case 0xA:
          case 0xB:
            if (*(_DWORD *)(v65 - 4) <= v64)
              goto LABEL_101;
            v68 = v65 + v138 + 8 * v58;
            v137 = *(_QWORD *)(v68 + 16);
            *(_QWORD *)(v68 + 16) = IndexQuicklyForTypedArray;
            if ((IndexQuicklyForTypedArray & 0xFFFE000000000002) == 0
              && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v15 + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v15);
            }
            if (v137)
              break;
            ++*(_DWORD *)(v65 + 12);
            goto LABEL_192;
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v65 - 4) <= v64)
              goto LABEL_101;
            v132 = v65 + v138 + 8 * v58;
            if (!*(_QWORD *)(v132 + 16))
              goto LABEL_101;
            *(_QWORD *)(v132 + 16) = IndexQuicklyForTypedArray;
            goto LABEL_92;
          default:
            if ((*((_BYTE *)v15 + 4) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19847B228);
            }
            goto LABEL_101;
        }
      }
      if (*((_DWORD *)v9 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        return;
      }
      goto LABEL_103;
    }
    if (v62 > 0xFFFFFFFE)
    {
      v86 = (uint64_t **)*((_QWORD *)v57 + 7);
      if (v63)
        JSC::Identifier::from(v86, a2, (double)v62, a3, a4, a5, a6, a7, a8, (WTF::StringImpl **)&v153);
      else
        JSC::Identifier::from(v86, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, &v153);
      v87 = (WTF::StringImpl *)v153;
      LODWORD(v147[0]) = -1;
      WORD2(v147[0]) = 1;
      v66 = (*(uint64_t (**)(JSC::JSObject *, JSC::VM *, int *, _QWORD *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0x58))(v15, v57, v153, v147);
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
    }
    else
    {
      v66 = (*(uint64_t (**)(JSC::JSObject *, JSC::VM *, _QWORD))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x60))(v15, v57, (v143 + v58));
    }
    v67 = v57;
    if (*((_DWORD *)v9 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v67 = v57;
      if (hasExceptionsAfterHandlingTraps)
        return;
    }
    if ((v66 & 1) == 0)
      break;
LABEL_103:
    ++v58;
    v144 += 8;
    if (v12 + v58 >= v142)
      goto LABEL_131;
  }
  v80 = (unint64_t)v67;
LABEL_138:
  JSC::throwTypeError(v80, &v146, (uint64_t)"Unable to delete property.", 27);
}

uint64_t operationRegExpExecString(JSC::JSGlobalObject *a1, JSC::RegExpObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t vars0;

  *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) = vars0;
  return JSC::RegExpObject::execInline(a2, a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::RegExpObject::execInline(JSC::RegExpObject *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::RegExpObject *v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  unint64_t v14;
  __int16 v15;
  JSC::VM *v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  unsigned int v21;
  _BOOL8 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t *v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  JSC::Structure *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  JSC::JSObject *v49;
  void *v50;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  JSC::JSGlobalObject *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t Slow;
  int32x2_t *v72;
  int32x2_t *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  JSC::JSString *v79;
  unint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  BOOL v84;
  int v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  uint64_t v89;
  _OWORD *v90;
  _OWORD *v91;
  _OWORD *v92;
  JSC::JSObject *v93;
  unsigned int v94;
  unsigned int v95;
  JSC::JSString *v96;
  WTF::StringImpl *v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t SlowCase;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  JSC::JSString *v109;
  WTF::StringImpl *v110;
  unsigned __int8 v111;
  JSC::RegExpObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  WTF::StringImpl *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  JSC::Structure *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t *v141;
  BOOL v142;
  WTF::StringImpl *v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  JSC::JSObject *v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t *v164;
  BOOL v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  int v168;
  WTF::StringImpl *v169;
  unint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  int v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  void *v179;
  unsigned __int8 *v180;
  int v181;
  unint64_t *v182;
  unint64_t *v183;
  JSC::Structure *v184;
  unint64_t *v185;
  JSC::JSObject *v186;
  unint64_t *v187;
  uint64_t v188;
  int v189;
  int v190;
  double v191;
  int *v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  JSC::JSObject *UninitializedRestricted;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 v203;
  int v204;
  unint64_t v205;
  JSC::JSObject *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  JSC::JSObject *v219;
  uint64_t v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  JSC::RegExpObject *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  _BYTE *v231;
  _BYTE *v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  double v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  double v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  BOOL hasExceptionsAfterHandlingTraps;
  int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  JSC::VM *v273;
  int v274;
  JSC::VM *v275;
  uint64_t v276;
  int v277;
  JSC::Structure *v278;
  JSC *v279;
  unsigned int v280;
  uint64_t v281;
  JSC::JSObject *Uninitialized;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  void **v289;
  void *v290;
  const WTF::String *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t IndexQuickly;
  int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __n128 v304;
  WTF::StringImpl *v305;
  BOOL v306;
  int *v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __n128 v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int *v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  int v339;
  int v340;
  unsigned int v341;
  _OWORD *v342;
  uint64_t v343;
  _OWORD *v344;
  _OWORD *v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int v349;
  JSC::JSObject *v350;
  unint64_t v351;
  JSC::JSObject *v352;
  unsigned int v353;
  unsigned int v354;
  BOOL v355;
  unsigned int v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  unint64_t *v381;
  unsigned int v382;
  unint64_t *v383;
  unint64_t *v384;
  unint64_t *v385;
  unsigned int v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t *v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t *v394;
  unint64_t *v395;
  unint64_t *v396;
  unint64_t *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  uint64_t v407;
  JSC::JSObject *v408;
  JSC::Structure *v409;
  JSC::JSObject *v410;
  JSC::Structure *v411;
  JSC::JSObject *v412;
  JSC::Structure *v413;
  JSC::Structure *v414;
  JSC::JSObject *v415;
  JSC::JSObject *v416;
  unint64_t *v417;
  unint64_t *v418;
  unint64_t *v419;
  unint64_t *v420;
  unint64_t *v421;
  unint64_t *v422;
  __int128 v423;
  unint64_t *__dst;
  unint64_t *__dsta;
  unint64_t *__dstg;
  unint64_t *__dsth;
  JSC::RegExpObject *__dstb;
  unint64_t *__dstc;
  unint64_t *__dstd;
  unint64_t *__dsti;
  unint64_t *__dste;
  unint64_t *__dstj;
  unint64_t *__dstf;
  unint64_t *__dstk;
  int v436;
  double v437;
  unsigned int v439[4];
  __int128 v440;
  void *v441;
  uint64_t v442;
  WTF::StringImpl *v443;
  char v444;
  JSC *v445;
  WTF::StringImpl *v446;
  JSC::JSGlobalObject **v447;
  JSC::JSGlobalObject **v448;
  uint64_t v449;
  unsigned int *v450;
  JSC::JSString **v451;
  BOOL *v452;
  int **v453;
  unint64_t *v454;
  unsigned __int8 *v455;
  uint64_t *v456;
  JSC::JSGlobalObject **v457;
  uint64_t *v458;
  int *v459;
  unint64_t v460;
  int *v461;
  unsigned __int8 v462;
  BOOL v463;
  JSC::JSObject *v464;
  JSC::JSObject *v465;
  void *__src;
  uint64_t v467;
  _BYTE v468[128];
  JSC::JSString *v469;
  JSC::JSGlobalObject *v470;
  char v471;
  char v472;
  WTF::StringImpl *v473[2];

  v10 = this;
  v11 = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)this + 2);
  v13 = (int **)((char *)a3 + 8);
  if ((*((_BYTE *)a3 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope((unint64_t)a3, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v189 = *(_DWORD *)(v11 + 80);
    if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = *(_WORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  v16 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v17 = *((_QWORD *)v10 + 3);
  __src = (void *)v17;
  if (v17 >= 0xFFFE000000000000 && (v17 & 0x80000000) == 0)
  {
    v18 = *v13;
    if (*v13)
      LODWORD(v18) = v18[1];
    if (v18 >= v17)
      goto LABEL_9;
LABEL_267:
    LODWORD(v17) = -1;
    goto LABEL_9;
  }
  if (v17 < 0xFFFE000000000000)
  {
    if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&__src, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      *(_QWORD *)&v243 = v17 - 0x2000000000000;
    v191 = trunc(v243 + 0.0);
  }
  else
  {
    v191 = (double)(int)v17;
  }
  if (*((_DWORD *)v16 + 20))
  {
    v437 = v191;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v191 = v437;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_267;
  }
  v192 = *v13;
  if (*v13)
    LODWORD(v192) = v192[1];
  if (v191 > (double)v192)
    goto LABEL_267;
  if (v191 <= 0.0)
    v191 = 0.0;
  LODWORD(v17) = v191;
LABEL_9:
  if (*(_DWORD *)(v11 + 80))
  {
    v190 = *(_DWORD *)(v11 + 80);
    if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((_DWORD)v17 == -1 && (v15 & 0x82) != 0)
  {
    __src = (void *)*((_QWORD *)a2 + 7);
    if ((*((_BYTE *)v10 + 16) & 1) == 0)
      goto LABEL_272;
    goto LABEL_399;
  }
  v436 = v15 & 0x82;
  if ((v15 & 0x82) != 0)
    v19 = v17;
  else
    v19 = 0;
  *(_OWORD *)v439 = xmmword_199154590;
  v469 = a3;
  v470 = a2;
  __src = v468;
  v467 = 32;
  v446 = a2;
  v20 = *v13;
  if (*v13)
  {
    v21 = v20[4];
    v22 = (v21 & 4) == 0;
    v23 = *((_QWORD *)v20 + 1);
    LODWORD(v20) = v20[1];
    v24 = (v21 >> 2) & 1;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    LOBYTE(v24) = 1;
  }
  v25 = *(unsigned __int8 *)(v14 + 16);
  if (v25 == 1)
  {
    v26 = *(_QWORD *)(v14 + 40);
    if (v22)
    {
      v248 = *(_QWORD *)(v26 + 40);
      if (v248 && *(_DWORD *)(v248 + 4))
        goto LABEL_21;
    }
    else
    {
      v27 = *(_QWORD *)(v26 + 24);
      if (v27 && *(_DWORD *)(v27 + 4))
      {
LABEL_21:
        v448 = &v446;
        v449 = v11;
        v450 = (unsigned int *)v14;
        goto LABEL_22;
      }
    }
    goto LABEL_383;
  }
  if (v25 != 2 && *(_BYTE *)(v14 + 16))
  {
LABEL_383:
    *(_QWORD *)&v440 = v23;
    DWORD2(v440) = (_DWORD)v20;
    BYTE12(v440) = v24;
    LOBYTE(v441) = 1;
    JSC::RegExp::compile(v14, v11, v22, &v440);
    v25 = *(unsigned __int8 *)(v14 + 16);
  }
  v448 = &v446;
  v449 = v11;
  v450 = (unsigned int *)v14;
  if (!v25)
    goto LABEL_278;
LABEL_22:
  v28 = *(_DWORD **)(v14 + 48);
  if (v28 && v28[5])
    v29 = *v28 + 2 * *(_DWORD *)(v14 + 24);
  else
    v29 = 2 * *(_DWORD *)(v14 + 24);
  v30 = v29 + 2;
  v31 = HIDWORD(v467);
  if (HIDWORD(v467) < (unint64_t)(v29 + 2) && v467 < (unint64_t)v30)
  {
    v227 = v10;
    v228 = v467 + ((unint64_t)v467 >> 2);
    if (v228 >= 0x10)
      v229 = v228 + 1;
    else
      v229 = 16;
    if (v229 <= v30)
      v230 = v30;
    else
      v230 = v229;
    v231 = __src;
    if (v230 < 0x21)
    {
      v232 = v468;
      __src = v468;
      LODWORD(v467) = 32;
    }
    else
    {
      if (v230 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19847DBA0);
      }
      v232 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v230));
      LODWORD(v467) = v230;
      __src = v232;
    }
    memcpy(v232, v231, 4 * v31);
    v10 = v227;
    if (v468 != v231 && v231)
    {
      if (__src == v231)
      {
        __src = 0;
        LODWORD(v467) = 0;
      }
      WTF::fastFree((unint64_t)v231, v233, v234, v235, v236, a6, a7, a8);
      v10 = v227;
    }
  }
  v32 = (unint64_t *)(v11 + 90552);
  HIDWORD(v467) = v30;
  v33 = __src;
  if (*(_BYTE *)(v14 + 16) != 1)
    goto LABEL_389;
  v34 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 40) + 104);
  v441 = 0;
  v442 = 0;
  v35 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)&v440 = v11;
  *((_QWORD *)&v440 + 1) = v35;
  *v32 = v14;
  if (v34)
  {
    v177 = (unsigned __int8 *)(v11 + 93049);
    if (__ldaxr((unsigned __int8 *)(v11 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v177))
    {
LABEL_237:
      v179 = *(void **)(v11 + 93056);
      if (!v179)
      {
        v179 = (void *)WTF::fastMalloc((WTF *)0x2000);
        bzero(v179, 0x2000uLL);
        v268 = *(_QWORD *)(v11 + 93056);
        *(_QWORD *)(v11 + 93056) = v179;
        if (v268)
        {
          WTF::fastFree(v268, v261, v262, v263, v264, v265, v266, v267);
          v179 = *(void **)(v11 + 93056);
        }
      }
      v441 = v179;
      LODWORD(v442) = 0x2000;
      goto LABEL_28;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v177);
    goto LABEL_237;
  }
LABEL_28:
  v36 = *v13;
  if (!*v13)
  {
    v37 = 0;
    v38 = 0;
    goto LABEL_31;
  }
  if ((v36[4] & 4) != 0)
  {
    v37 = *((_QWORD *)v36 + 1);
    v38 = v36[1];
LABEL_31:
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, __int128 *))(*(_QWORD *)(v14 + 40) + 16))(v37, v19, v38, v33, &v440);
    goto LABEL_32;
  }
  v39 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _DWORD *, __int128 *))(*(_QWORD *)(v14 + 40) + 32))(*((_QWORD *)v36 + 1), v19, v36[1], v33, &v440);
LABEL_32:
  v48 = v39;
  if (!v441)
    goto LABEL_33;
  v180 = (unsigned __int8 *)(v440 + 93049);
  v181 = __ldxr((unsigned __int8 *)(v440 + 93049));
  if (v181 != 1)
  {
    __clrex();
    goto LABEL_243;
  }
  if (__stlxr(0, v180))
LABEL_243:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v180, 0, (uint64_t)v41, v42, v43, v44, v45, v46);
LABEL_33:
  if (!HIDWORD(v442))
    *(_QWORD *)(v440 + 90552) = 0;
  if (v48 == -2)
  {
    JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v14, (JSC::VM *)v11);
    if (*(_BYTE *)(v14 + 16))
    {
LABEL_389:
      *v32 = v14;
      v250 = *v13;
      if (*v13)
      {
        v251 = v250[4];
        v252 = *((_QWORD *)v250 + 1);
        LODWORD(v250) = v250[1];
        v253 = (v251 >> 2) & 1;
      }
      else
      {
        v252 = 0;
        v253 = 1;
      }
      v48 = JSC::Yarr::interpret(*(_QWORD *)(v14 + 32), v252, v250 | (unint64_t)(v253 << 32), v19, (uint64_t)v33, a6, a7, a8);
      *v32 = 0;
      goto LABEL_36;
    }
LABEL_278:
    v48 = JSC::RegExp::matchInline<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(&v448);
    goto LABEL_38;
  }
LABEL_36:
  if (!*v13 || ((*v13)[1] & 0x80000000) == 0)
    goto LABEL_38;
  v354 = 0;
  v355 = v48 < -1;
LABEL_480:
  v356 = 2 * v354;
  do
  {
    v357 = v356;
    v358 = v33[v356];
    if (v358 <= -2)
    {
      v359 = (v357 + 1);
LABEL_487:
      v33[v357] = -1;
      v33[v359] = -1;
      ++v354;
      v355 = 1;
      if (v354 > *(_DWORD *)(v14 + 24))
      {
LABEL_39:
        v49 = 0;
        *(_OWORD *)v439 = xmmword_199154590;
        goto LABEL_40;
      }
      goto LABEL_480;
    }
    if ((v358 & 0x80000000) == 0)
    {
      v359 = (v357 + 1);
      if ((int)v33[v359] < -1)
        goto LABEL_487;
    }
    ++v354;
    v356 = v357 + 2;
  }
  while (v354 <= *(_DWORD *)(v14 + 24));
  if (v355)
    goto LABEL_39;
LABEL_38:
  if (v48 == -1)
    goto LABEL_39;
  *(_QWORD *)v439 = v48;
  if (HIDWORD(v467) <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19847D844);
  }
  *(_QWORD *)&v439[2] = *((int *)__src + 1);
  v464 = 0;
  v465 = 0;
  v53 = *(unsigned int *)(v14 + 24);
  v54 = *(_QWORD *)(v14 + 48);
  if (v54)
  {
    v245 = *(unsigned int *)(v14 + 24);
    v246 = *(_DWORD *)(v54 + 20);
    v463 = v246 != 0;
    v57 = *(_BYTE *)(v14 + 18) & 1;
    v462 = *(_BYTE *)(v14 + 18) & 1;
    v461 = 0;
    if (v246)
    {
      v274 = *((_DWORD *)v470 + 233);
      if (v274)
        v275 = (JSC::VM *)(16 * (v274 & 0xFFFFFFFE));
      else
        v275 = 0;
      v55 = JSC::constructEmptyObject((JSC *)v11, v275, v41, v42, v43, v44, v45, v46);
      v57 = v462;
    }
    else
    {
      v55 = 0;
    }
    v53 = v245;
  }
  else
  {
    v55 = 0;
    v463 = 0;
    v56 = *(unsigned __int8 *)(v14 + 18);
    v57 = v56 & 1;
    v462 = v56 & 1;
  }
  v461 = (int *)v55;
  v58 = v470;
  if (v57)
  {
    v269 = v53;
    v270 = *((_DWORD *)v470 + 254);
    if (v270)
      v271 = 16 * (v270 & 0xFFFFFFFE);
    else
      v271 = 0;
    v459 = 0;
    v460 = v271;
    if (v463)
    {
      v272 = *((_DWORD *)v470 + 233);
      if (v272)
        v273 = (JSC::VM *)(16 * (v272 & 0xFFFFFFFE));
      else
        v273 = 0;
      v59 = JSC::constructEmptyObject((JSC *)v11, v273, v41, v42, v43, v44, v45, v46);
      v58 = v470;
    }
    else
    {
      v59 = 0;
    }
    v53 = v269;
  }
  else
  {
    v59 = 0;
    v60 = *((_DWORD *)v470 + 253);
    if (v60)
      v61 = 16 * (v60 & 0xFFFFFFFE);
    else
      v61 = 0;
    v460 = v61;
  }
  v448 = &v465;
  v449 = v11;
  v450 = v439;
  v451 = &v469;
  v452 = &v463;
  v453 = &v461;
  v454 = &v460;
  v455 = &v462;
  v456 = (uint64_t *)&v464;
  v457 = &v470;
  v458 = (uint64_t *)&v459;
  v459 = (int *)v59;
  v446 = (WTF::StringImpl *)v11;
  v447 = &v470;
  if (*(_BYTE *)(*((_QWORD *)v58 + 256) + 4) == 2)
  {
    __dstb = v10;
    *(_QWORD *)&v440 = v11;
    BYTE8(v440) = 0;
    v473[0] = (WTF::StringImpl *)v11;
    v445 = (JSC *)v11;
    v196 = v53;
    v197 = (v53 + 1);
    UninitializedRestricted = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)v473, (JSC::VM *)&v440, v460, v197, v43, v44, v45, v46);
    v465 = UninitializedRestricted;
    if (v462)
    {
      v204 = *((_DWORD *)v470 + 255);
      if (v204)
        v205 = 16 * (v204 & 0xFFFFFFFE);
      else
        v205 = 0;
      v464 = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v445, (JSC::VM *)&v440, v205, v197, v199, v200, v201, v202);
      UninitializedRestricted = v465;
    }
    if (!UninitializedRestricted)
    {
      __break(0xC471u);
      JUMPOUT(0x19847D01CLL);
    }
    JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(void)#1}::operator()((uint64_t)&v448, v203);
    v206 = v465;
    v210 = JSC::jsSubstringOfResolved(v11, (uint64_t)&v440, (uint64_t)v469, v439[0], v439[2] - v439[0], v207, v208, v209);
    JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v206, (uint64_t)v473, 0, v210);
    v211 = v196;
    if ((_DWORD)v196)
    {
      v212 = 1;
      v213 = 2;
      do
      {
        if (HIDWORD(v467) <= v213)
        {
          __break(0xC471u);
          JUMPOUT(0x19847DB18);
        }
        v214 = *((unsigned int *)__src + v213);
        if ((v214 & 0x80000000) != 0)
        {
          v215 = 10;
        }
        else
        {
          if (HIDWORD(v467) <= v213 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19847DB28);
          }
          v215 = JSC::jsSubstringOfResolved(v11, (uint64_t)&v440, (uint64_t)v469, v214, (*((_DWORD *)__src + v213 + 1) - v214), v44, v45, v46);
        }
        JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v465, (uint64_t)v473, v212++, v215);
        v213 += 2;
        v211 = v196;
      }
      while (v212 <= v196);
    }
    if (!v462)
    {
LABEL_314:
      if (*((_BYTE *)v445 + 755))
        __dmb(0xAu);
      if (*((_BYTE *)v473[0] + 755))
        __dmb(0xAu);
      if (BYTE8(v440))
        JSC::Heap::collectIfNecessaryOrDefer(v440 + 192, 0);
      v10 = __dstb;
      goto LABEL_322;
    }
    v216 = 0;
    v217 = 0;
    while (1)
    {
      if (HIDWORD(v467) <= v216)
      {
        __break(0xC471u);
        JUMPOUT(0x19847DB20);
      }
      v218 = *((unsigned int *)__src + v216);
      v219 = v464;
      if ((v218 & 0x80000000) != 0)
      {
        v224 = *((_QWORD *)v464 + 1);
        if ((*((_BYTE *)v464 + 4) & 0xFu) - 8 < 2)
        {
          *(_QWORD *)(v224 + 8 * v217) = 10;
          goto LABEL_310;
        }
        switch(*((_BYTE *)v464 + 4) & 0xF)
        {
          case 3:
            __break(0xC471u);
            JUMPOUT(0x19847D96CLL);
          case 4:
          case 5:
            __break(0xC471u);
            JUMPOUT(0x19847D94CLL);
          case 6:
          case 7:
            __break(0xC471u);
            JUMPOUT(0x19847D92CLL);
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            *(_QWORD *)(v224 + 8 * v217 + 16) = 10;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19847D98CLL);
        }
      }
      else
      {
        if (HIDWORD(v467) <= v216 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19847DB30);
        }
        v220 = *((unsigned int *)__src + v216 + 1);
        v443 = v446;
        v221 = *((_DWORD *)*v447 + 227);
        if (v221)
          v222 = 16 * (v221 & 0xFFFFFFFE);
        else
          v222 = 0;
        v223 = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v443, (JSC::VM *)&v440, v222, 2, v43, v44, v45, v46);
        JSC::JSObject::initializeIndexWithoutBarrier(v223, (uint64_t)&v443, 0, v218 | 0xFFFE000000000000);
        JSC::JSObject::initializeIndexWithoutBarrier(v223, (uint64_t)&v443, 1u, v220 | 0xFFFE000000000000);
        if (*((_BYTE *)v443 + 755))
          __dmb(0xAu);
        JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v219, (uint64_t)&v445, v217, v223);
      }
      v211 = v196;
LABEL_310:
      ++v217;
      v216 += 2;
      if (v217 > v211)
        goto LABEL_314;
    }
  }
  v443 = (WTF::StringImpl *)v11;
  v444 = 0;
  v445 = (JSC *)v11;
  v62 = v53 + 1;
  if ((v53 + 1) > 0x10000000)
  {
    Slow = 0;
    goto LABEL_77;
  }
  v63 = v460;
  v64 = *(unsigned __int16 *)(v460 + 24);
  if (v64 == 65534)
    goto LABEL_68;
  if (v64 == 0xFFFF)
    v64 = *(_DWORD *)(*(_QWORD *)(v460 + 64) + 84);
  if (v64 < 64)
  {
LABEL_68:
    v65 = 0;
  }
  else if ((v64 - 63) >= 5)
  {
    v118 = (v64 - 64) | ((v64 - 64) >> 1) | (((v64 - 64) | ((v64 - 64) >> 1)) >> 2);
    v119 = v118 | (v118 >> 4) | ((v118 | (v118 >> 4)) >> 8);
    v65 = (v119 | HIWORD(v119)) + 1;
  }
  else
  {
    v65 = 4;
  }
  v66 = v65;
  v67 = v65 + (unint64_t)v62;
  v68 = 8 * v67;
  if (v67 > 0x3EB || (v69 = *(_QWORD *)(v11 + (((unint64_t)(v68 + 23) >> 1) & 0xFFFFFFFF8) + 6736)) == 0)
  {
    v188 = v53;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, v68 + 8, (uint64_t)&v443, v43, v44, v45, v46);
    goto LABEL_253;
  }
  v70 = *(unsigned int *)(v69 + 60);
  Slow = *(_QWORD *)(v69 + 24);
  if (Slow >= *(_QWORD *)(v69 + 32))
  {
    Slow = *(_QWORD *)(v69 + 40);
    if ((Slow & 1) == 0)
    {
      v226 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v69 + 48);
      *(_QWORD *)(v69 + 32) = Slow + HIDWORD(v226);
      *(_QWORD *)(v69 + 40) = Slow + (int)v226;
      *(_QWORD *)(v69 + 24) = Slow + v70;
      goto LABEL_73;
    }
    v188 = v53;
    JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
    Slow = JSC::LocalAllocator::allocateSlowCase(v69, v11 + 192, v70, (uint64_t)&v443, 1, v258, v259, v260);
LABEL_253:
    v53 = v188;
    if (!Slow)
      goto LABEL_77;
LABEL_73:
    v72 = (int32x2_t *)(Slow + 8 * v66);
    *v72 = vdup_n_s32(v62);
    v73 = v72 + 1;
    Slow = *(_QWORD *)(v11 + 37584);
    if (Slow >= *(_QWORD *)(v11 + 37592))
    {
      Slow = *(_QWORD *)(v11 + 37600);
      if ((Slow & 1) != 0)
      {
        v254 = v53;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
        Slow = JSC::LocalAllocator::allocateSlowCase(v11 + 37560, v11 + 192, 16, (uint64_t)&v443, 0, v255, v256, v257);
        v53 = v254;
LABEL_75:
        *(_DWORD *)Slow = 0;
        v74 = *(_DWORD *)(v63 + 8);
        *(_DWORD *)Slow = v63 >> 4;
        *(_DWORD *)(Slow + 4) = v74;
        *(_QWORD *)(Slow + 8) = v73;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        goto LABEL_77;
      }
      v225 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v11 + 37608);
      *(_QWORD *)(v11 + 37592) = Slow + HIDWORD(v225);
      *(_QWORD *)(v11 + 37600) = Slow + (int)v225;
    }
    *(_QWORD *)(v11 + 37584) = Slow + 16;
    goto LABEL_75;
  }
  *(_QWORD *)(v69 + 24) = Slow + v70;
  if (Slow)
    goto LABEL_73;
LABEL_77:
  v465 = (JSC::JSObject *)Slow;
  if (v462)
  {
    v276 = v53;
    v277 = *((_DWORD *)v470 + 255);
    if (v277)
      v278 = (JSC::Structure *)(16 * (v277 & 0xFFFFFFFE));
    else
      v278 = 0;
    if (v62 > 0x10000000)
    {
      Uninitialized = 0;
    }
    else
    {
      v279 = v445;
      v280 = JSC::Structure::outOfLineCapacity(v278);
      Uninitialized = (JSC::JSObject *)JSC::Butterfly::tryCreateUninitialized(v279, 0, 0, v280, 1, 8 * v62, (uint64_t)&v443, v281);
      if (Uninitialized)
      {
        *((_DWORD *)Uninitialized - 2) = v62;
        *((_DWORD *)Uninitialized - 1) = v62;
        Uninitialized = (JSC::JSObject *)JSC::JSArray::createWithButterfly((uint64_t)v279, (JSC::VM *)&v443, (unint64_t)v278, (uint64_t)Uninitialized, v43, v44, v45, v46);
      }
    }
    v464 = Uninitialized;
    Slow = (unint64_t)v465;
    v53 = v276;
  }
  if (!Slow)
  {
    __break(0xC471u);
    JUMPOUT(0x19847C9D4);
  }
  v75 = v449;
  v40 = (unint64_t)*v448;
  v76 = *(_QWORD *)v450;
  if (HIDWORD(*(_QWORD *)v450))
  {
    v239 = (double)v76;
    goto LABEL_348;
  }
  if ((v76 & 0x80000000) != 0)
  {
    v239 = (double)v76;
LABEL_348:
    v77 = *(_QWORD *)&v239 + 0x2000000000000;
    goto LABEL_82;
  }
  v77 = v76 | 0xFFFE000000000000;
LABEL_82:
  v78 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v78 - 16) = v77;
  if (v77 && (v77 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v75 + 760) >= *(unsigned __int8 *)(v40 + 7))
  {
    v237 = v53;
    JSC::Heap::writeBarrierSlowPath(v75 + 192, v40);
    v53 = v237;
    v75 = v449;
    v40 = (unint64_t)*v448;
    v78 = *((_QWORD *)*v448 + 1);
  }
  v79 = *v451;
  *(_QWORD *)(v78 - 24) = *v451;
  if (v79
    && ((unint64_t)v79 & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v75 + 760) >= *(unsigned __int8 *)(v40 + 7))
  {
    v238 = v53;
    JSC::Heap::writeBarrierSlowPath(v75 + 192, v40);
    v53 = v238;
    v75 = v449;
    v40 = (unint64_t)*v448;
  }
  if (*v452)
  {
    v332 = *v453;
    *(_QWORD *)(*(_QWORD *)(v40 + 8) - 32) = *v453;
    if (v332
      && ((unint64_t)v332 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v75 + 760) >= *(unsigned __int8 *)(v40 + 7))
    {
      v333 = v53;
      JSC::Heap::writeBarrierSlowPath(v75 + 192, v40);
      v53 = v333;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v40 + 8) - 32) = 10;
  }
  v80 = *v454;
  v81 = *(unsigned __int16 *)(*v454 + 24);
  if (v81 == 65534)
  {
    v83 = 0;
LABEL_98:
    v85 = 0;
    goto LABEL_99;
  }
  if (v81 == 0xFFFF)
    v82 = *(_DWORD *)(*(_QWORD *)(v80 + 64) + 84);
  else
    v82 = *(unsigned __int16 *)(*v454 + 24);
  if (v82 >= 64)
  {
    if ((v82 - 63) >= 5)
    {
      v120 = (v82 - 64) | ((v82 - 64) >> 1) | (((v82 - 64) | ((v82 - 64) >> 1)) >> 2);
      v121 = v120 | (v120 >> 4) | ((v120 | (v120 >> 4)) >> 8);
      v83 = (v121 | HIWORD(v121)) + 1;
    }
    else
    {
      v83 = 4;
    }
  }
  else
  {
    v83 = 0;
  }
  if (v81 == 0xFFFF)
    v81 = *(_DWORD *)(*(_QWORD *)(v80 + 64) + 84);
  v84 = __OFSUB__(v81, 63);
  v85 = v81 - 63;
  if ((v85 < 0) ^ v84 | (v85 == 0))
    goto LABEL_98;
LABEL_99:
  v86 = (unint64_t *)(v11 + 41968);
  v87 = (unint64_t *)(v11 + 39696);
  v88 = (unint64_t *)(v11 + 39432);
  v89 = 8 * (v83 - v85);
  v90 = (_OWORD *)(*((_QWORD *)*v448 + 1) - 8 * v83 - 8);
  v91 = (_OWORD *)((char *)v90 + v89);
  v92 = (_OWORD *)((char *)v90 + (v89 & 0x7FFFFFFC0));
  *(_QWORD *)&v47 = 0;
  while (v90 != v92)
  {
    *v90 = v47;
    v90[1] = v47;
    v90[2] = v47;
    v90[3] = v47;
    v90 += 4;
  }
  while (v90 != v91)
  {
    *(_QWORD *)v90 = 0;
    v90 = (_OWORD *)((char *)v90 + 8);
  }
  if (*v455)
  {
    v334 = v53;
    JSC::JSObject::putDirectOffset((unint64_t)*v448, v449, 67, *v456);
    v335 = *((_DWORD *)*v457 + 255);
    if (v335)
      v336 = 16 * (v335 & 0xFFFFFFFE);
    else
      v336 = 0;
    if (*v458)
      v337 = *v458;
    else
      v337 = 10;
    JSC::JSObject::putDirectOffset(*v456, v449, 64, v337);
    v338 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v336);
    v339 = *(unsigned __int16 *)(v336 + 24);
    if (v339 == 65534)
      goto LABEL_464;
    if (v339 == 0xFFFF)
      v339 = *(_DWORD *)(*(_QWORD *)(v336 + 64) + 84);
    v84 = __OFSUB__(v339, 63);
    v340 = v339 - 63;
    if ((v340 < 0) ^ v84 | (v340 == 0))
LABEL_464:
      v340 = 0;
    v341 = v338 - v340;
    v342 = (_OWORD *)(*(_QWORD *)(*v456 + 8) - 8 * v338 - 8);
    v343 = (8 * v341) & 0x7FFFFFFC0;
    v344 = (_OWORD *)((char *)v342 + 8 * v341);
    v345 = (_OWORD *)((char *)v342 + v343);
    *(_QWORD *)&v47 = 0;
    while (v342 != v345)
    {
      *v342 = v47;
      v342[1] = v47;
      v342[2] = v47;
      v342[3] = v47;
      v342 += 4;
    }
    while (v342 != v344)
    {
      *(_QWORD *)v342 = 0;
      v342 = (_OWORD *)((char *)v342 + 8);
    }
    v53 = v334;
    v86 = (unint64_t *)(v11 + 41968);
    v87 = (unint64_t *)(v11 + 39696);
    v88 = (unint64_t *)(v11 + 39432);
  }
  v93 = v465;
  v94 = v439[0];
  v95 = v439[2] - v439[0];
  if (v439[2] == v439[0])
  {
    SlowCase = *v86;
    goto LABEL_123;
  }
  v96 = v469;
  if (!v439[0])
  {
    v116 = *((_QWORD *)v469 + 1);
    if (v116)
      LODWORD(v116) = *(_DWORD *)(v116 + 4);
    if ((_DWORD)v116 == v95)
    {
      SlowCase = (unint64_t)v469;
      goto LABEL_123;
    }
  }
  if (v95 != 1)
  {
    if (v95 != 2)
      goto LABEL_115;
    v143 = (WTF::StringImpl *)*((_QWORD *)v469 + 1);
    if (!v143)
    {
      v145 = 0;
      goto LABEL_201;
    }
    v144 = *((_DWORD *)v143 + 1);
    if (v144 > v439[0])
    {
      v415 = v465;
      v422 = v88;
      __dstf = v87;
      v389 = v86;
      v390 = v53;
      v145 = WTF::StringImpl::at(v143, v439[0]);
      v143 = (WTF::StringImpl *)*((_QWORD *)v96 + 1);
      if (!v143)
      {
        v53 = v390;
        v86 = v389;
        v87 = __dstf;
        v93 = v415;
        v88 = v422;
        goto LABEL_201;
      }
      v144 = *((_DWORD *)v143 + 1);
      v53 = v390;
      v86 = v389;
      v87 = __dstf;
      v93 = v415;
      v88 = v422;
    }
    else
    {
      v145 = 0;
    }
    v40 = v94 + 1;
    if (v144 > v40)
    {
      v406 = v53;
      v391 = v86;
      __dstk = v87;
      v416 = v93;
      v392 = v88;
      LODWORD(v143) = WTF::StringImpl::at(v143, v40);
      v88 = v392;
      v93 = v416;
      v87 = __dstk;
      v86 = v391;
      v53 = v406;
    }
    else
    {
      LODWORD(v143) = 0;
    }
LABEL_201:
    if ((v143 | v145) <= 0x7F)
    {
      v471 = v145;
      v472 = (char)v143;
      *(_QWORD *)&v440 = &v471;
      *((_QWORD *)&v440 + 1) = 2;
      v146 = ((v145 - 1640531527) << 16) ^ ((_DWORD)v143 << 11) ^ (v145 - 1640531527);
      v147 = (v146 + (v146 >> 11)) ^ (8 * (v146 + (v146 >> 11)));
      v148 = (v147 + (v147 >> 5)) ^ (4 * (v147 + (v147 >> 5)));
      v149 = ((v148 + (v148 >> 15)) ^ ((v148 + (v148 >> 15)) << 10)) & 0xFFFFFF;
      if (v149)
        v150 = v149;
      else
        v150 = 0x800000;
      LODWORD(v441) = v150;
      v151 = v11 + 81168;
      v152 = v150 & 0x1FF;
      v153 = *(_QWORD *)(v11 + 81168 + 8 * v152);
      if (!v153)
        goto LABEL_224;
      v154 = *(_QWORD *)(v153 + 8);
      v155 = (v154 & 1) != 0 ? 0 : (WTF::StringImpl *)v154;
      v156 = *((_DWORD *)v155 + 4);
      *(_QWORD *)&v423 = v150 & 0x1FF;
      if (v156 < 0x100)
      {
        v400 = v53;
        v185 = v86;
        __dsth = v87;
        v186 = v93;
        v187 = v88;
        v157 = WTF::StringImpl::hashSlowCase(v155);
        v88 = v187;
        v93 = v186;
        v151 = v11 + 81168;
        v152 = v150 & 0x1FF;
        v87 = __dsth;
        v86 = v185;
        v53 = v400;
      }
      else
      {
        v157 = v156 >> 8;
      }
      if (v157 != v150)
        goto LABEL_224;
      v158 = (uint64_t)v155;
      v159 = v151;
      v160 = v93;
      v161 = v53;
      v162 = v86;
      v163 = v87;
      v164 = v88;
      v165 = WTF::equalInternal<unsigned char>(v158, (unint64_t)&v471, 2);
      v88 = v164;
      v87 = v163;
      v86 = v162;
      v53 = v161;
      v93 = v160;
      v151 = v159;
      v152 = v423;
      if (v165)
      {
        SlowCase = *(_QWORD *)(v151 + 8 * v423);
      }
      else
      {
LABEL_224:
        v408 = v93;
        v418 = v88;
        __dsta = v87;
        v171 = v86;
        v172 = v53;
        WTF::AtomStringImpl::add(&v440, v42, v43, v44, v45, v46, v473);
        v173 = v473[0];
        v473[0] = 0;
        v174 = *((_DWORD *)v173 + 4);
        v175 = v173;
        if ((v174 & 3) == 2)
        {
          v175 = v173;
          do
          {
            v175 = (WTF::StringImpl *)*((_QWORD *)v175 + 3);
            v174 = *((_DWORD *)v175 + 4);
          }
          while ((v174 & 3) == 2);
        }
        v87 = __dsta;
        if ((v174 & 8) != 0)
        {
          v42 = 0;
        }
        else
        {
          *((_DWORD *)v175 + 4) = v174 | 8;
          v42 = (unint64_t)*((unsigned int *)v175 + 1) << ((v174 & 4) == 0);
        }
        v53 = v172;
        v86 = v171;
        v88 = v418;
        v176 = v11 + 192;
        SlowCase = *__dsta;
        if (*__dsta >= __dsta[1])
        {
          v393 = v42;
          SlowCase = __dsta[2];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, (uint64_t)&v443, 0, v377, v378, v379);
            v42 = v393;
            v176 = v11 + 192;
            v53 = v172;
            v86 = v171;
            v87 = __dsta;
            v88 = v418;
          }
          else
          {
            v87 = __dsta;
            v247 = *(_QWORD *)(SlowCase + 8) ^ __dsta[3];
            __dsta[1] = SlowCase + HIDWORD(v247);
            __dsta[2] = SlowCase + (int)v247;
            *__dsta = SlowCase + 16;
            v53 = v172;
            v86 = v171;
            v88 = v418;
            v176 = v11 + 192;
          }
        }
        else
        {
          *__dsta = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = v87[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v173;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        if (v42 >= 0x101)
        {
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v176, (uint64_t)&v443, SlowCase, v42, v43, v44, v45, v46);
          v88 = v418;
          v87 = __dsta;
          v86 = v171;
          v53 = v172;
        }
        *(_QWORD *)(v151 + 8 * v152) = SlowCase;
        v93 = v408;
      }
LABEL_123:
      **((_QWORD **)v93 + 1) = SlowCase;
      if (!(_DWORD)v53)
        goto LABEL_153;
      goto LABEL_124;
    }
LABEL_115:
    v99 = *((_QWORD *)v96 + 1);
    if (v99)
    {
      if ((*(_BYTE *)(v99 + 16) & 4) != 0)
        v100 = 7;
      else
        v100 = 3;
    }
    else
    {
      v100 = 7;
    }
    SlowCase = *v88;
    if (*v88 >= v88[1])
    {
      v410 = v93;
      __dstd = v87;
      v396 = v86;
      v402 = v53;
      v241 = v88;
      SlowCase = v88[2];
      if ((SlowCase & 1) != 0)
      {
        *(_QWORD *)&v423 = v11 + 39408;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, (uint64_t)&v443, 0, v363, v364, v365);
        v53 = v402;
        v86 = v396;
        v87 = __dstd;
        v88 = v241;
      }
      else
      {
        v242 = *(_QWORD *)(SlowCase + 8) ^ v88[3];
        v88[1] = SlowCase + HIDWORD(v242);
        v88[2] = SlowCase + (int)v242;
        *v88 = SlowCase + 32;
        v53 = v53;
      }
      v93 = v410;
    }
    else
    {
      *v88 = SlowCase + 32;
    }
    *(_DWORD *)SlowCase = v87[227] >> 4;
    *(_DWORD *)(SlowCase + 4) = 17302016;
    *(_QWORD *)(SlowCase + 8) = v100;
    *(_DWORD *)(SlowCase + 16) = v95;
    *(_DWORD *)(SlowCase + 20) = (_DWORD)v96;
    *(_WORD *)(SlowCase + 24) = WORD2(v96);
    *(_WORD *)(SlowCase + 26) = v94;
    *(_DWORD *)(SlowCase + 28) = HIWORD(v94);
    if (*(_BYTE *)(v11 + 755))
      __dmb(0xAu);
    goto LABEL_123;
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)v469 + 1);
  if (!v97 || *((_DWORD *)v97 + 1) <= v439[0])
  {
    v98 = 0;
    goto LABEL_111;
  }
  v404 = v53;
  v383 = v86;
  v384 = v87;
  v412 = v465;
  v385 = v88;
  v386 = WTF::StringImpl::at(v97, v439[0]);
  v88 = v385;
  v93 = v412;
  v87 = v384;
  v86 = v383;
  v53 = v404;
  if (v386 > 0xFF)
    goto LABEL_115;
  v98 = v386;
LABEL_111:
  **((_QWORD **)v93 + 1) = *(_QWORD *)(v11 + 8 * v98 + 42216);
  if ((_DWORD)v53)
  {
LABEL_124:
    v102 = 1;
    *(_QWORD *)&v47 = 17302016;
    v41 = (JSC::Structure *)(v11 + 81168);
    v42 = (unint64_t)&v471;
    v43 = 2;
    v44 = 2654435769;
    v45 = 0x800000;
    do
    {
      while (1)
      {
        v103 = 2 * v102;
        if (HIDWORD(v467) <= 2 * v102)
        {
          __break(0xC471u);
          JUMPOUT(0x19847D800);
        }
        v104 = *((_DWORD *)__src + v103);
        if ((v104 & 0x80000000) == 0)
          break;
        v105 = 10;
LABEL_128:
        *(_QWORD *)(*((_QWORD *)v465 + 1) + 8 * v102++) = v105;
        if (v102 > v53)
          goto LABEL_153;
      }
      v106 = v103 | 1;
      if (HIDWORD(v467) <= v106)
      {
        __break(0xC471u);
        JUMPOUT(0x19847D83CLL);
      }
      v107 = *((_DWORD *)__src + v106);
      v108 = v107 - v104;
      if (v107 == v104)
      {
        v105 = *v86;
        goto LABEL_128;
      }
      v109 = v469;
      if (!v104)
      {
        v115 = *((_QWORD *)v469 + 1);
        if (v115)
          LODWORD(v115) = *(_DWORD *)(v115 + 4);
        if ((_DWORD)v115 == v108)
        {
          v105 = (unint64_t)v469;
          goto LABEL_128;
        }
      }
      if (v108 != 1)
      {
        if (v108 != 2)
        {
LABEL_140:
          v112 = v10;
          v113 = *((_QWORD *)v109 + 1);
          if (v113)
          {
            if ((*(_BYTE *)(v113 + 16) & 4) != 0)
              v114 = 7;
            else
              v114 = 3;
          }
          else
          {
            v114 = 7;
          }
          v105 = *v88;
          if (*v88 >= v88[1])
          {
            v409 = v41;
            v419 = v88;
            v423 = v47;
            __dstc = v87;
            v395 = v86;
            v401 = v53;
            v105 = v88[2];
            if ((v105 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, (uint64_t)v41, (uint64_t)&v471, 2, 2654435769, 0x800000, v46);
              v105 = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, (uint64_t)&v443, 0, v360, v361, v362);
              v53 = v401;
              v86 = v395;
              v87 = __dstc;
              v88 = v419;
            }
            else
            {
              v240 = *(_QWORD *)(v105 + 8) ^ v88[3];
              v88[1] = v105 + HIDWORD(v240);
              v88[2] = v105 + (int)v240;
              *v88 = v105 + 32;
              v53 = v53;
            }
            v47 = v423;
            v41 = v409;
            v42 = (unint64_t)&v471;
            v43 = 2;
            v44 = 2654435769;
            v45 = 0x800000;
          }
          else
          {
            *v88 = v105 + 32;
          }
          *(_DWORD *)v105 = v87[227] >> 4;
          *(_DWORD *)(v105 + 4) = v47;
          *(_QWORD *)(v105 + 8) = v114;
          *(_DWORD *)(v105 + 16) = v108;
          *(_DWORD *)(v105 + 20) = (_DWORD)v109;
          *(_WORD *)(v105 + 24) = WORD2(v109);
          *(_WORD *)(v105 + 26) = v104;
          *(_DWORD *)(v105 + 28) = HIWORD(v104);
          if (*(_BYTE *)(v11 + 755))
            __dmb(0xAu);
          v10 = v112;
          goto LABEL_128;
        }
        v122 = (WTF::StringImpl *)*((_QWORD *)v469 + 1);
        v423 = v47;
        if (v122)
        {
          v123 = *((_DWORD *)v122 + 1);
          if (v123 > v104)
          {
            v413 = v41;
            v420 = v88;
            __dste = v87;
            v397 = v86;
            v387 = v53;
            v124 = WTF::StringImpl::at(v122, v104);
            v122 = (WTF::StringImpl *)*((_QWORD *)v109 + 1);
            if (v122)
            {
              v123 = *((_DWORD *)v122 + 1);
              v53 = v387;
              v86 = v397;
              v87 = __dste;
              v41 = v413;
              v88 = v420;
              v47 = v423;
              v42 = (unint64_t)&v471;
              v43 = 2;
              v44 = 2654435769;
              v45 = 0x800000;
              goto LABEL_181;
            }
            v53 = v387;
            v86 = v397;
            v87 = __dste;
            v41 = v413;
            v88 = v420;
            v47 = v423;
            v42 = (unint64_t)&v471;
            v43 = 2;
            v44 = 2654435769;
            v45 = 0x800000;
          }
          else
          {
            v124 = 0;
LABEL_181:
            v40 = v104 + 1;
            if (v123 > v40)
            {
              v405 = v53;
              v388 = v86;
              __dstj = v87;
              v414 = v41;
              v421 = v88;
              LODWORD(v122) = WTF::StringImpl::at(v122, v40);
              v45 = 0x800000;
              v44 = 2654435769;
              v43 = 2;
              v42 = (unint64_t)&v471;
              v41 = v414;
              v88 = v421;
              v47 = v423;
              v87 = __dstj;
              v86 = v388;
              v53 = v405;
            }
            else
            {
              LODWORD(v122) = 0;
            }
          }
        }
        else
        {
          v124 = 0;
        }
        if ((v122 | v124) <= 0x7F)
        {
          v471 = v124;
          v472 = (char)v122;
          *(_QWORD *)&v440 = &v471;
          *((_QWORD *)&v440 + 1) = 2;
          v125 = (((v124 - 1640531527) << 16) ^ ((_DWORD)v122 << 11) ^ (v124 - 1640531527))
               + ((((v124 - 1640531527) << 16) ^ ((_DWORD)v122 << 11) ^ (v124 - 1640531527)) >> 11);
          v126 = (v125 ^ (8 * v125)) + ((v125 ^ (8 * v125)) >> 5);
          v127 = (v126 ^ (4 * v126)) + ((v126 ^ (4 * v126)) >> 15);
          v128 = (v127 ^ (v127 << 10)) & 0xFFFFFF;
          if (v128)
            v129 = v128;
          else
            v129 = 0x800000;
          LODWORD(v441) = v129;
          v130 = v129 & 0x1FF;
          v131 = *((_QWORD *)v41 + v130);
          if (!v131)
            goto LABEL_214;
          v132 = *(_QWORD *)(v131 + 8);
          v133 = (v132 & 1) != 0 ? 0 : (WTF::StringImpl *)v132;
          v134 = *((_DWORD *)v133 + 4);
          v407 = v129 & 0x1FF;
          if (v134 < 0x100)
          {
            v399 = v53;
            v182 = v86;
            __dstg = v87;
            v183 = v88;
            v184 = v41;
            v135 = WTF::StringImpl::hashSlowCase(v133);
            v41 = v184;
            v130 = v129 & 0x1FF;
            v88 = v183;
            v87 = __dstg;
            v86 = v182;
            v53 = v399;
          }
          else
          {
            v135 = v134 >> 8;
          }
          if (v135 != v129)
            goto LABEL_214;
          v136 = (uint64_t)v133;
          v137 = v41;
          v138 = v53;
          v139 = v86;
          v140 = v87;
          v141 = v88;
          v142 = WTF::equalInternal<unsigned char>(v136, (unint64_t)&v471, 2);
          v45 = 0x800000;
          v44 = 2654435769;
          v43 = 2;
          v42 = (unint64_t)&v471;
          v41 = v137;
          v130 = v407;
          v47 = v423;
          v88 = v141;
          v87 = v140;
          v86 = v139;
          v53 = v138;
          if (v142)
          {
            v105 = *((_QWORD *)v41 + v407);
          }
          else
          {
LABEL_214:
            v398 = v53;
            v166 = (uint64_t)v41;
            v417 = v88;
            __dst = v87;
            v394 = v86;
            WTF::AtomStringImpl::add(&v440, v42, v43, v44, v45, v46, v473);
            v167 = v473[0];
            v473[0] = 0;
            v168 = *((_DWORD *)v167 + 4);
            v169 = v167;
            if ((v168 & 3) == 2)
            {
              v169 = v167;
              do
              {
                v169 = (WTF::StringImpl *)*((_QWORD *)v169 + 3);
                v168 = *((_DWORD *)v169 + 4);
              }
              while ((v168 & 3) == 2);
            }
            v87 = __dst;
            v47 = v423;
            if ((v168 & 8) != 0)
            {
              v170 = 0;
            }
            else
            {
              *((_DWORD *)v169 + 4) = v168 | 8;
              v170 = (unint64_t)*((unsigned int *)v169 + 1) << ((v168 & 4) == 0);
            }
            v53 = v398;
            v86 = v394;
            v88 = v417;
            v41 = (JSC::Structure *)v166;
            v42 = (unint64_t)&v471;
            v43 = 2;
            v44 = 2654435769;
            v45 = 0x800000;
            v105 = *__dst;
            if (*__dst >= __dst[1])
            {
              v105 = __dst[2];
              if ((v105 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v40, v166, (uint64_t)&v471, 2, 2654435769, 0x800000, v46);
                v105 = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, (uint64_t)&v443, 0, v366, v367, v368);
                v53 = v398;
                v86 = v394;
                v87 = __dst;
                v88 = v417;
                v47 = v423;
                v41 = (JSC::Structure *)v166;
                v42 = (unint64_t)&v471;
                v43 = 2;
                v44 = 2654435769;
                v45 = 0x800000;
              }
              else
              {
                v87 = __dst;
                v244 = *(_QWORD *)(v105 + 8) ^ __dst[3];
                __dst[1] = v105 + HIDWORD(v244);
                __dst[2] = v105 + (int)v244;
                *__dst = v105 + 16;
                v53 = v398;
                v86 = v394;
                v88 = v417;
                v47 = v423;
                v41 = (JSC::Structure *)v166;
                v43 = 2;
              }
            }
            else
            {
              *__dst = v105 + 16;
            }
            *(_DWORD *)v105 = v87[227] >> 4;
            *(_DWORD *)(v105 + 4) = v47;
            *(_QWORD *)(v105 + 8) = v167;
            if (*(_BYTE *)(v11 + 755))
              __dmb(0xAu);
            if (v170 >= 0x101)
            {
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v11 + 192, (uint64_t)&v443, v105, v170, 2, 2654435769, 0x800000, v46);
              v45 = 0x800000;
              v44 = 2654435769;
              v43 = 2;
              v42 = (unint64_t)&v471;
              v41 = (JSC::Structure *)v166;
              v47 = v423;
              v88 = v417;
              v87 = __dst;
              v86 = v394;
              v53 = v398;
            }
            *((_QWORD *)v41 + v130) = v105;
          }
          goto LABEL_128;
        }
        goto LABEL_140;
      }
      v110 = (WTF::StringImpl *)*((_QWORD *)v469 + 1);
      if (v110 && *((_DWORD *)v110 + 1) > v104)
      {
        v403 = v53;
        v380 = v86;
        __dsti = v87;
        v381 = v88;
        v423 = v47;
        v411 = v41;
        v382 = WTF::StringImpl::at(v110, v104);
        v45 = 0x800000;
        v44 = 2654435769;
        v43 = 2;
        v42 = (unint64_t)&v471;
        v41 = v411;
        v47 = v423;
        v88 = v381;
        v87 = __dsti;
        v86 = v380;
        v53 = v403;
        if (v382 > 0xFF)
          goto LABEL_140;
        v111 = v382;
      }
      else
      {
        v111 = 0;
      }
      *(_QWORD *)(*((_QWORD *)v465 + 1) + 8 * v102++) = *(_QWORD *)(v11 + 8 * v111 + 42216);
    }
    while (v102 <= v53);
  }
LABEL_153:
  if (v462)
  {
    v346 = 0;
    v347 = 0;
    do
    {
      if (HIDWORD(v467) <= v346)
      {
        __break(0xC471u);
        JUMPOUT(0x19847DBB0);
      }
      v348 = v53;
      v349 = *((_DWORD *)__src + v346);
      if ((v349 & 0x80000000) != 0)
      {
        v352 = v464;
        v353 = v347;
        v351 = 10;
      }
      else
      {
        if (HIDWORD(v467) <= v346 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19847DBB8);
        }
        v350 = v464;
        v351 = JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(JSC::GCDeferralContext &,int,int)#1}::operator()((uint64_t *)&v446, (JSC::VM *)&v443, v349, *((_DWORD *)__src + v346 + 1), v43, v44, v45, v46);
        v352 = v350;
        v353 = v347;
      }
      JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v352, (uint64_t)&v445, v353, v351);
      ++v347;
      v346 += 2;
      v53 = v348;
    }
    while (v347 <= v348);
  }
  if (*((_BYTE *)v445 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (v444)
  {
    v196 = v53;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v443 + 192, 0);
LABEL_322:
    v53 = v196;
  }
  if (v463 && (_DWORD)v53)
  {
    v283 = 1;
    do
    {
      v284 = v53;
      JSC::RegExp::getCaptureGroupNameForSubpatternId(v14, v283, &v443);
      if (v443)
      {
        v285 = *((unsigned int *)v443 + 1);
        if ((_DWORD)v285)
        {
          v286 = *((_DWORD *)v443 + 4);
          v287 = *((_QWORD *)v443 + 1);
          v288 = HIDWORD(v467);
          *(_QWORD *)&v440 = &v441;
          DWORD2(v440) = 32;
          HIDWORD(v440) = HIDWORD(v467);
          if (HIDWORD(v467) >= 0x21)
          {
            if (HIDWORD(v467) >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x19847DBC0);
            }
            v289 = (void **)WTF::fastMalloc((WTF *)(4 * HIDWORD(v467)));
            DWORD2(v440) = v288;
            *(_QWORD *)&v440 = v289;
            v288 = HIDWORD(v467);
          }
          else
          {
            v289 = &v441;
          }
          memcpy(v289, __src, 4 * v288);
          *(_QWORD *)&v423 = v423 & 0xFFFFFF0000000000 | v285 | ((unint64_t)((v286 >> 2) & 1) << 32);
          v297 = JSC::RegExp::subpatternIdForGroupName<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v14, v287, v423, (uint64_t)&v440);
          v298 = v440;
          if (&v441 != (void **)v440 && (_QWORD)v440)
          {
            *(_QWORD *)&v440 = 0;
            DWORD2(v440) = 0;
            WTF::fastFree(v298, v290, (uint64_t)v291, v292, v293, v294, v295, v296);
          }
          if (v297)
            IndexQuickly = JSC::JSObject::getIndexQuickly(v465, v297);
          else
            IndexQuickly = 10;
          v300 = v461;
          JSC::Identifier::fromString((uint64_t **)v11, &v443, v291, v292, v293, v294, v295, v296, v473);
          JSC::JSObject::putDirect(v300, v11, (unint64_t)v473[0], IndexQuickly, 0, v304, v301, v302, v303);
          v305 = v473[0];
          v473[0] = 0;
          if (v305)
          {
            if (*(_DWORD *)v305 == 2)
            {
              WTF::StringImpl::~StringImpl(v305, (WTF::AtomStringImpl *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
              WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
            }
            else
            {
              *(_DWORD *)v305 -= 2;
            }
          }
          if (v297)
            v306 = v462 == 0;
          else
            v306 = 1;
          if (!v306)
          {
            v307 = v459;
            JSC::Identifier::fromString((uint64_t **)v11, &v443, v41, v42, v43, v44, v45, v46, v473);
            v308 = v473[0];
            v309 = JSC::JSObject::getIndexQuickly(v464, v297);
            JSC::JSObject::putDirect(v307, v11, (unint64_t)v308, v309, 0, v313, v310, v311, v312);
            v314 = v473[0];
            v473[0] = 0;
            if (v314)
            {
              if (*(_DWORD *)v314 == 2)
              {
                WTF::StringImpl::~StringImpl(v314, (WTF::AtomStringImpl *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
                WTF::fastFree(v369, v370, v371, v372, v373, v374, v375, v376);
              }
              else
              {
                *(_DWORD *)v314 -= 2;
              }
            }
          }
        }
        v315 = v443;
        v443 = 0;
        if (v315)
        {
          if (*(_DWORD *)v315 == 2)
          {
            WTF::StringImpl::~StringImpl(v315, (WTF::AtomStringImpl *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
          }
          else
          {
            *(_DWORD *)v315 -= 2;
          }
        }
      }
      ++v283;
      v53 = v284;
    }
    while (v283 <= v284);
  }
  v49 = v465;
LABEL_40:
  v50 = __src;
  if (v468 != __src && __src != 0)
  {
    __src = 0;
    LODWORD(v467) = 0;
    WTF::fastFree((unint64_t)v50, (void *)v40, (uint64_t)v41, v42, v43, v44, v45, v46);
  }
  if (v49)
  {
    if (v436)
    {
      __src = (void *)*((_QWORD *)a2 + 7);
      if ((*((_BYTE *)v10 + 16) & 1) != 0)
      {
        JSC::throwTypeError((unint64_t)a2, (JSC::VM **)&__src, (uint64_t)"Attempted to assign to readonly property.", 42);
      }
      else
      {
        if ((v439[2] & 0x80000000) != 0)
          v117 = COERCE__INT64((double)v439[2]) + 0x2000000000000;
        else
          v117 = *(_QWORD *)&v439[2] | 0xFFFE000000000000;
        if (v439[3])
          v117 = COERCE__INT64((double)*(unint64_t *)&v439[2]) + 0x2000000000000;
        *((_QWORD *)v10 + 3) = v117;
      }
    }
    if (*(_DWORD *)(v11 + 80))
    {
      v195 = *(_DWORD *)(v11 + 80);
      if ((v195 & 0x27) != 0 && (v195 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v41, v42, v43, v44, v45, v46);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    *((_QWORD *)a2 + 269) = v14;
    *((_QWORD *)a2 + 268) = a3;
    *(_OWORD *)((char *)a2 + 2120) = *(_OWORD *)v439;
    *((_BYTE *)a2 + 2136) = 0;
    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)a2);
  }
  else
  {
    if (!*(_DWORD *)(v11 + 80))
    {
      if (!v436)
        return 2;
LABEL_271:
      __src = (void *)*((_QWORD *)a2 + 7);
      if ((*((_BYTE *)v10 + 16) & 1) == 0)
      {
LABEL_272:
        *((_QWORD *)v10 + 3) = 0xFFFE000000000000;
        return 2;
      }
LABEL_399:
      JSC::throwTypeError((unint64_t)a2, (JSC::VM **)&__src, (uint64_t)"Attempted to assign to readonly property.", 42);
      return 2;
    }
    v193 = *(_DWORD *)(v11 + 80);
    if ((v193 & 0x27) != 0 && (v193 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v41, v42, v43, v44, v45, v46);
    v194 = *(_QWORD *)(v11 + 16);
    v49 = (JSC::JSObject *)(2 * (v194 == 0));
    if (!v194 && v436)
      goto LABEL_271;
  }
  return (uint64_t)v49;
}

uint64_t operationRegExpExec(unint64_t a1, JSC::RegExpObject *this, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t (*v21)(_QWORD *);
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27[2];
  int v28[2];
  _QWORD var38[8];

  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v11 + 40) = var38[7];
  if ((a3 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(a3 + 5) == 2)
      return JSC::RegExpObject::execInline(this, (JSC::JSGlobalObject *)a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
LABEL_10:
    switch(a3)
    {
      case 2uLL:
        a3 = *(_QWORD *)(v11 + 42016);
        goto LABEL_7;
      case 6uLL:
        a3 = *(_QWORD *)(v11 + 41992);
        goto LABEL_7;
      case 7uLL:
        a3 = *(_QWORD *)(v11 + 42064);
        goto LABEL_7;
      case 0xAuLL:
        a3 = *(_QWORD *)(v11 + 42032);
        goto LABEL_7;
      default:
        v14 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40);
        if (!v14)
          goto LABEL_20;
        if (*(_BYTE *)(v14 + 5) == 1)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 64);
        if (!v15 || (*(_QWORD *)(v15 + 88) & 0xFFFFFFFFFFFFFFF7) != 2)
          goto LABEL_20;
        v16 = *(_QWORD *)(v15 + 40);
        if (v16 == 1)
          v16 = 0;
        v17 = *(_QWORD *)(a1 + 512);
        if ((v17 & 1) != 0)
        {
          v25 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40);
          v26 = v16;
          *(_QWORD *)v28 = a3;
          v21 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a1 & 8) != 0)
            v22 = (_QWORD *)(a1 - 16);
          else
            v22 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          var38[0] = *v22;
          var38[1] = a1;
          var38[2] = a1 + 512;
          v17 = v21(var38);
          v16 = v26;
          a3 = *(_QWORD *)v28;
          v14 = v25;
        }
        if (v17 == v16 && (v23 = *(_QWORD *)(v14 + 64)) != 0 && (v24 = *(_QWORD *)(v23 + 16), v24 >= 2))
        {
          a3 = v24;
        }
        else
        {
LABEL_20:
          v18 = *(unsigned __int8 *)(a3 + 5);
          v19 = a3;
          if (v18 < 0x17)
          {
            if (v18 != 2)
              v19 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)a3, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            v19 = JSC::JSObject::toString((JSC::JSObject *)a3, (JSC::JSGlobalObject *)a1, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
          }
          a3 = v19;
        }
        if (*(_DWORD *)(v11 + 80))
        {
          *(_QWORD *)v27 = a3;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)this, a3, a4, a5, a6, a7, a8);
          a3 = *(_QWORD *)v27;
          if (hasExceptionsAfterHandlingTraps)
            return 0;
        }
        goto LABEL_7;
    }
  }
  if (a3 < 0xFFFE000000000000)
  {
    if (a3 - 0x2000000000000 >= 0xFFFC000000000000)
      goto LABEL_10;
    v13 = JSC::numberToString((JSC *)v11, (JSC::VM *)0xA, COERCE_DOUBLE(a3 - 0x2000000000000), a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = JSC::int32ToString(v11, (JSC::VM *)a3, (const WTF::String *)0xA, a4, a5, a6, a7, a8);
  }
  a3 = v13;
LABEL_7:
  if (a3)
    return JSC::RegExpObject::execInline(this, (JSC::JSGlobalObject *)a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
  return 0;
}

uint64_t operationRegExpExecGeneric(JSC::JSGlobalObject *a1, unint64_t this, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM **v10;
  unsigned __int8 *v13;
  JSC::VM *var28[6];

  v10 = (JSC::VM **)*((_QWORD *)a1 + 7);
  v10[5] = var28[5];
  v13 = a3;
  var28[0] = (JSC::VM *)v10;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 59)
    return JSC::throwTypeError((unint64_t)a1, var28, (uint64_t)"Builtin RegExp exec can only be called on a RegExp object", 58);
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && a3[5] == 2)
    return JSC::RegExpObject::execInline((JSC::RegExpObject *)this, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
  a3 = JSC::JSValue::toStringSlowCase(&v13, (uint64_t)a1, 0, a4, a5, a6, a7, a8);
  if (a3)
    return JSC::RegExpObject::execInline((JSC::RegExpObject *)this, a1, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
  return 10;
}

uint64_t operationRegExpExecNonGlobalOrSticky(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int **v12;
  _BYTE *v13;
  int *v14;
  unsigned int v15;
  _BOOL8 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  JSC::Structure *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  JSC::JSObject *v43;
  void *v44;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t Slow;
  int32x2_t *v66;
  int32x2_t *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  BOOL v78;
  int v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  _OWORD *v86;
  JSC::JSObject *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t SlowCase;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unsigned __int8 v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  WTF::StringImpl *v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  JSC::Structure *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  unint64_t *v134;
  BOOL v135;
  WTF::StringImpl *v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  JSC::JSObject *v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t *v157;
  BOOL v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  unint64_t v163;
  unint64_t *v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  void *v172;
  unsigned __int8 *v173;
  int v174;
  unint64_t *v175;
  unint64_t *v176;
  JSC::Structure *v177;
  unint64_t *v178;
  JSC::JSObject *v179;
  unint64_t *v180;
  uint64_t v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  JSC::JSObject *UninitializedRestricted;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __n128 v191;
  int v192;
  unint64_t v193;
  JSC::JSObject *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  JSC::JSObject *v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _BYTE *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  unint64_t v233;
  uint64_t v234;
  int *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  JSC::VM *v258;
  int v259;
  JSC::VM *v260;
  uint64_t v261;
  int v262;
  JSC::Structure *v263;
  JSC *v264;
  unsigned int v265;
  uint64_t v266;
  JSC::JSObject *Uninitialized;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  void *v275;
  const WTF::String *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unint64_t v283;
  uint64_t IndexQuickly;
  int *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  __n128 v289;
  WTF::StringImpl *v290;
  BOOL v291;
  int *v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __n128 v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  int v324;
  int v325;
  unsigned int v326;
  _OWORD *v327;
  uint64_t v328;
  _OWORD *v329;
  _OWORD *v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int v334;
  JSC::JSObject *v335;
  unint64_t v336;
  JSC::JSObject *v337;
  unsigned int v338;
  unsigned int v339;
  BOOL v340;
  unsigned int v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t *v365;
  unint64_t *v366;
  unsigned int v367;
  unint64_t *v368;
  unint64_t *v369;
  unint64_t *v370;
  unsigned int v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t *v374;
  uint64_t v375;
  unint64_t *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  unint64_t *v380;
  unint64_t *v381;
  unint64_t *v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  JSC::JSObject *v393;
  JSC::Structure *v394;
  JSC::JSObject *v395;
  JSC::Structure *v396;
  JSC::JSObject *v397;
  JSC::Structure *v398;
  JSC::Structure *v399;
  JSC::JSObject *v400;
  JSC::JSObject *v401;
  unint64_t *v402;
  unint64_t *v403;
  unint64_t *v404;
  unint64_t *v405;
  unint64_t *v406;
  unint64_t *v407;
  __int128 v408;
  unint64_t *__dst;
  unint64_t *__dsta;
  unint64_t *__dstf;
  unint64_t *__dstg;
  unint64_t *__dstb;
  unint64_t *__dstc;
  unint64_t *__dsth;
  unint64_t *__dstd;
  unint64_t *__dsti;
  unint64_t *__dste;
  unint64_t *__dstj;
  unsigned int v421[6];
  __int128 v422;
  void *v423;
  uint64_t v424;
  WTF::StringImpl *v425;
  char v426;
  JSC *v427;
  WTF::StringImpl *v428;
  _DWORD **v429;
  JSC::JSGlobalObject **v430;
  uint64_t v431;
  unsigned int *v432;
  uint64_t *v433;
  BOOL *v434;
  int **v435;
  unint64_t *v436;
  unsigned __int8 *v437;
  uint64_t *v438;
  _DWORD **v439;
  uint64_t *v440;
  int *v441;
  unint64_t v442;
  int *v443;
  unsigned __int8 v444;
  BOOL v445;
  JSC::JSObject *v446;
  JSC::JSObject *v447;
  void *__src;
  uint64_t v449;
  _BYTE v450[128];
  uint64_t v451;
  _DWORD *v452;
  char v453;
  char v454;
  WTF::StringImpl *var60[13];

  v11 = *(_QWORD *)(a1 + 56);
  *(WTF::StringImpl **)(v11 + 40) = var60[12];
  v12 = (int **)(a3 + 8);
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v182 = *(_DWORD *)(v11 + 80);
    if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  *(_OWORD *)v421 = xmmword_199154590;
  v451 = a3;
  v452 = (_DWORD *)a1;
  v13 = v450;
  __src = v450;
  v449 = 32;
  v428 = (WTF::StringImpl *)a1;
  v14 = *v12;
  if (*v12)
  {
    v15 = v14[4];
    v16 = (v15 & 4) == 0;
    v17 = *((_QWORD *)v14 + 1);
    LODWORD(v14) = v14[1];
    v18 = (v15 >> 2) & 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    LOBYTE(v18) = 1;
  }
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 == 1)
  {
    v20 = *(_QWORD *)(a2 + 40);
    if (v16)
    {
      v234 = *(_QWORD *)(v20 + 40);
      if (v234 && *(_DWORD *)(v234 + 4))
        goto LABEL_10;
    }
    else
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (v21 && *(_DWORD *)(v21 + 4))
      {
LABEL_10:
        v430 = &v428;
        v431 = v11;
        v432 = (unsigned int *)a2;
        goto LABEL_11;
      }
    }
    goto LABEL_340;
  }
  if (v19 != 2 && *(_BYTE *)(a2 + 16))
  {
LABEL_340:
    *(_QWORD *)&v422 = v17;
    DWORD2(v422) = (_DWORD)v14;
    BYTE12(v422) = v18;
    LOBYTE(v423) = 1;
    JSC::RegExp::compile(a2, v11, v16, &v422);
    v19 = *(unsigned __int8 *)(a2 + 16);
  }
  v430 = &v428;
  v431 = v11;
  v432 = (unsigned int *)a2;
  if (!v19)
    goto LABEL_242;
LABEL_11:
  v22 = *(_DWORD **)(a2 + 48);
  if (v22 && v22[5])
    v23 = *v22 + 2 * *(_DWORD *)(a2 + 24);
  else
    v23 = 2 * *(_DWORD *)(a2 + 24);
  v24 = v23 + 2;
  v25 = HIDWORD(v449);
  if (HIDWORD(v449) < (unint64_t)(v23 + 2) && v449 < (unint64_t)v24)
  {
    v215 = v449 + ((unint64_t)v449 >> 2);
    if (v215 >= 0x10)
      v216 = v215 + 1;
    else
      v216 = 16;
    if (v216 <= v24)
      v217 = v24;
    else
      v217 = v216;
    v218 = __src;
    if (v217 < 0x21)
    {
      v219 = v450;
      __src = v450;
      LODWORD(v449) = 32;
    }
    else
    {
      if (v217 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x19847FEA8);
      }
      v219 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v217));
      LODWORD(v449) = v217;
      __src = v219;
    }
    memcpy(v219, v218, 4 * v25);
    if (v450 != v218 && v218)
    {
      if (__src == v218)
      {
        __src = 0;
        LODWORD(v449) = 0;
      }
      WTF::fastFree((unint64_t)v218, v220, v221, v222, v223, a6, a7, a8);
      v13 = v450;
    }
  }
  v26 = (uint64_t *)(v11 + 90552);
  HIDWORD(v449) = v24;
  v27 = __src;
  if (*(_BYTE *)(a2 + 16) != 1)
    goto LABEL_343;
  v28 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 104);
  v423 = 0;
  v424 = 0;
  v29 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)&v422 = v11;
  *((_QWORD *)&v422 + 1) = v29;
  *v26 = a2;
  if (v28)
  {
    v170 = (unsigned __int8 *)(v11 + 93049);
    if (__ldaxr((unsigned __int8 *)(v11 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v170))
    {
LABEL_216:
      v172 = *(void **)(v11 + 93056);
      if (!v172)
      {
        v172 = (void *)WTF::fastMalloc((WTF *)0x2000);
        bzero(v172, 0x2000uLL);
        v253 = *(_QWORD *)(v11 + 93056);
        *(_QWORD *)(v11 + 93056) = v172;
        if (v253)
        {
          WTF::fastFree(v253, v246, v247, v248, v249, v250, v251, v252);
          v172 = *(void **)(v11 + 93056);
        }
      }
      v423 = v172;
      LODWORD(v424) = 0x2000;
      goto LABEL_17;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v170);
    goto LABEL_216;
  }
LABEL_17:
  v30 = *v12;
  if (!*v12)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_20;
  }
  if ((v30[4] & 4) != 0)
  {
    v31 = *((_QWORD *)v30 + 1);
    v32 = v30[1];
LABEL_20:
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _DWORD *, __int128 *))(*(_QWORD *)(a2 + 40) + 16))(v31, 0, v32, v27, &v422);
    goto LABEL_21;
  }
  v33 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *, __int128 *))(*(_QWORD *)(a2 + 40) + 32))(*((_QWORD *)v30 + 1), 0, v30[1], v27, &v422);
LABEL_21:
  v42 = v33;
  if (!v423)
    goto LABEL_22;
  v173 = (unsigned __int8 *)(v422 + 93049);
  v174 = __ldxr((unsigned __int8 *)(v422 + 93049));
  if (v174 != 1)
  {
    __clrex();
    goto LABEL_222;
  }
  if (__stlxr(0, v173))
LABEL_222:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v173, 0, (uint64_t)v35, v36, v37, v38, v39, v40);
LABEL_22:
  if (!HIDWORD(v424))
    *(_QWORD *)(v422 + 90552) = 0;
  if (v42 == -2)
  {
    JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)a2, (JSC::VM *)v11);
    if (*(_BYTE *)(a2 + 16))
    {
LABEL_343:
      *v26 = a2;
      v235 = *v12;
      if (*v12)
      {
        v236 = v235[4];
        v237 = *((_QWORD *)v235 + 1);
        LODWORD(v235) = v235[1];
        v238 = (v236 >> 2) & 1;
      }
      else
      {
        v237 = 0;
        v238 = 1;
      }
      v42 = JSC::Yarr::interpret(*(_QWORD *)(a2 + 32), v237, v235 | (unint64_t)(v238 << 32), 0, (uint64_t)v27, a6, a7, a8);
      *v26 = 0;
      goto LABEL_25;
    }
LABEL_242:
    v42 = JSC::RegExp::matchInline<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(&v430);
    goto LABEL_27;
  }
LABEL_25:
  if (!*v12 || ((*v12)[1] & 0x80000000) == 0)
    goto LABEL_27;
  v339 = 0;
  v340 = v42 < -1;
LABEL_432:
  v341 = 2 * v339;
  do
  {
    v342 = v341;
    v343 = v27[v341];
    if (v343 <= -2)
    {
      v344 = (v342 + 1);
LABEL_439:
      v27[v342] = -1;
      v27[v344] = -1;
      ++v339;
      v340 = 1;
      if (v339 > *(_DWORD *)(a2 + 24))
      {
LABEL_28:
        v43 = 0;
        *(_OWORD *)v421 = xmmword_199154590;
        goto LABEL_29;
      }
      goto LABEL_432;
    }
    if ((v343 & 0x80000000) == 0)
    {
      v344 = (v342 + 1);
      if ((int)v27[v344] < -1)
        goto LABEL_439;
    }
    ++v339;
    v341 = v342 + 2;
  }
  while (v339 <= *(_DWORD *)(a2 + 24));
  if (v340)
    goto LABEL_28;
LABEL_27:
  if (v42 == -1)
    goto LABEL_28;
  *(_QWORD *)v421 = v42;
  if (HIDWORD(v449) <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19847FB84);
  }
  *(_QWORD *)&v421[2] = *((int *)__src + 1);
  v446 = 0;
  v447 = 0;
  v47 = *(unsigned int *)(a2 + 24);
  v48 = *(_QWORD *)(a2 + 48);
  if (v48)
  {
    v231 = *(unsigned int *)(a2 + 24);
    v232 = *(_DWORD *)(v48 + 20);
    v445 = v232 != 0;
    v51 = *(_BYTE *)(a2 + 18) & 1;
    v444 = *(_BYTE *)(a2 + 18) & 1;
    v443 = 0;
    if (v232)
    {
      v259 = v452[233];
      if (v259)
        v260 = (JSC::VM *)(16 * (v259 & 0xFFFFFFFE));
      else
        v260 = 0;
      v49 = JSC::constructEmptyObject((JSC *)v11, v260, v35, v36, v37, v38, v39, v40);
      v51 = v444;
    }
    else
    {
      v49 = 0;
    }
    v47 = v231;
  }
  else
  {
    v49 = 0;
    v445 = 0;
    v50 = *(unsigned __int8 *)(a2 + 18);
    v51 = v50 & 1;
    v444 = v50 & 1;
  }
  v443 = (int *)v49;
  v52 = v452;
  if (v51)
  {
    v254 = v47;
    v255 = v452[254];
    if (v255)
      v256 = 16 * (v255 & 0xFFFFFFFE);
    else
      v256 = 0;
    v441 = 0;
    v442 = v256;
    if (v445)
    {
      v257 = v452[233];
      if (v257)
        v258 = (JSC::VM *)(16 * (v257 & 0xFFFFFFFE));
      else
        v258 = 0;
      v53 = JSC::constructEmptyObject((JSC *)v11, v258, v35, v36, v37, v38, v39, v40);
      v52 = v452;
    }
    else
    {
      v53 = 0;
    }
    v47 = v254;
  }
  else
  {
    v53 = 0;
    v54 = v452[253];
    if (v54)
      v55 = 16 * (v54 & 0xFFFFFFFE);
    else
      v55 = 0;
    v442 = v55;
  }
  v430 = &v447;
  v431 = v11;
  v432 = v421;
  v433 = &v451;
  v434 = &v445;
  v435 = &v443;
  v436 = &v442;
  v437 = &v444;
  v438 = (uint64_t *)&v446;
  v439 = &v452;
  v440 = (uint64_t *)&v441;
  v441 = (int *)v53;
  v428 = (WTF::StringImpl *)v11;
  v429 = &v452;
  if (*(_BYTE *)(*((_QWORD *)v52 + 256) + 4) == 2)
  {
    *(_QWORD *)&v422 = v11;
    BYTE8(v422) = 0;
    var60[0] = (WTF::StringImpl *)v11;
    v427 = (JSC *)v11;
    v184 = v47;
    v185 = (v47 + 1);
    UninitializedRestricted = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)var60, (JSC::VM *)&v422, v442, v185, v37, v38, v39, v40);
    v447 = UninitializedRestricted;
    if (v444)
    {
      v192 = v452[255];
      if (v192)
        v193 = 16 * (v192 & 0xFFFFFFFE);
      else
        v193 = 0;
      v446 = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v427, (JSC::VM *)&v422, v193, v185, v187, v188, v189, v190);
      UninitializedRestricted = v447;
    }
    if (!UninitializedRestricted)
    {
      __break(0xC471u);
      JUMPOUT(0x19847F390);
    }
    JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(void)#1}::operator()((uint64_t)&v430, v191);
    v194 = v447;
    v198 = JSC::jsSubstringOfResolved(v11, (uint64_t)&v422, v451, v421[0], v421[2] - v421[0], v195, v196, v197);
    JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v194, (uint64_t)var60, 0, v198);
    v199 = v184;
    if ((_DWORD)v184)
    {
      v200 = 1;
      v201 = 2;
      do
      {
        if (HIDWORD(v449) <= v201)
        {
          __break(0xC471u);
          JUMPOUT(0x19847FE58);
        }
        v202 = *((unsigned int *)__src + v201);
        if ((v202 & 0x80000000) != 0)
        {
          v203 = 10;
        }
        else
        {
          if (HIDWORD(v449) <= v201 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19847FE68);
          }
          v203 = JSC::jsSubstringOfResolved(v11, (uint64_t)&v422, v451, v202, (*((_DWORD *)__src + v201 + 1) - v202), v38, v39, v40);
        }
        JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v447, (uint64_t)var60, v200++, v203);
        v201 += 2;
        v199 = v184;
      }
      while (v200 <= v184);
    }
    if (!v444)
    {
LABEL_275:
      if (*((_BYTE *)v427 + 755))
        __dmb(0xAu);
      if (*((_BYTE *)var60[0] + 755))
        __dmb(0xAu);
      if (BYTE8(v422))
        JSC::Heap::collectIfNecessaryOrDefer(v422 + 192, 0);
      v13 = v450;
      goto LABEL_283;
    }
    v204 = 0;
    v205 = 0;
    while (1)
    {
      if (HIDWORD(v449) <= v204)
      {
        __break(0xC471u);
        JUMPOUT(0x19847FE60);
      }
      v206 = *((unsigned int *)__src + v204);
      v207 = v446;
      if ((v206 & 0x80000000) != 0)
      {
        v212 = *((_QWORD *)v446 + 1);
        if ((*((_BYTE *)v446 + 4) & 0xFu) - 8 < 2)
        {
          *(_QWORD *)(v212 + 8 * v205) = 10;
          goto LABEL_271;
        }
        switch(*((_BYTE *)v446 + 4) & 0xF)
        {
          case 3:
            __break(0xC471u);
            JUMPOUT(0x19847FCACLL);
          case 4:
          case 5:
            __break(0xC471u);
            JUMPOUT(0x19847FC8CLL);
          case 6:
          case 7:
            __break(0xC471u);
            JUMPOUT(0x19847FC6CLL);
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            *(_QWORD *)(v212 + 8 * v205 + 16) = 10;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x19847FCCCLL);
        }
      }
      else
      {
        if (HIDWORD(v449) <= v204 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19847FE70);
        }
        v208 = *((unsigned int *)__src + v204 + 1);
        v425 = v428;
        v209 = (*v429)[227];
        if (v209)
          v210 = 16 * (v209 & 0xFFFFFFFE);
        else
          v210 = 0;
        v211 = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v425, (JSC::VM *)&v422, v210, 2, v37, v38, v39, v40);
        JSC::JSObject::initializeIndexWithoutBarrier(v211, (uint64_t)&v425, 0, v206 | 0xFFFE000000000000);
        JSC::JSObject::initializeIndexWithoutBarrier(v211, (uint64_t)&v425, 1u, v208 | 0xFFFE000000000000);
        if (*((_BYTE *)v425 + 755))
          __dmb(0xAu);
        JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v207, (uint64_t)&v427, v205, v211);
      }
      v199 = v184;
LABEL_271:
      ++v205;
      v204 += 2;
      if (v205 > v199)
        goto LABEL_275;
    }
  }
  v425 = (WTF::StringImpl *)v11;
  v426 = 0;
  v427 = (JSC *)v11;
  v56 = v47 + 1;
  if ((v47 + 1) > 0x10000000)
  {
    Slow = 0;
    goto LABEL_61;
  }
  v57 = v442;
  v58 = *(unsigned __int16 *)(v442 + 24);
  if (v58 == 65534)
    goto LABEL_52;
  if (v58 == 0xFFFF)
    v58 = *(_DWORD *)(*(_QWORD *)(v442 + 64) + 84);
  if (v58 < 64)
  {
LABEL_52:
    v59 = 0;
  }
  else if ((v58 - 63) >= 5)
  {
    v111 = (v58 - 64) | ((v58 - 64) >> 1) | (((v58 - 64) | ((v58 - 64) >> 1)) >> 2);
    v112 = v111 | (v111 >> 4) | ((v111 | (v111 >> 4)) >> 8);
    v59 = (v112 | HIWORD(v112)) + 1;
  }
  else
  {
    v59 = 4;
  }
  v60 = v59;
  v61 = v59 + (unint64_t)v56;
  v62 = 8 * v61;
  if (v61 > 0x3EB || (v63 = *(_QWORD *)(v11 + (((unint64_t)(v62 + 23) >> 1) & 0xFFFFFFFF8) + 6736)) == 0)
  {
    v181 = v47;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, v62 + 8, (uint64_t)&v425, v37, v38, v39, v40);
    goto LABEL_232;
  }
  v64 = *(unsigned int *)(v63 + 60);
  Slow = *(_QWORD *)(v63 + 24);
  if (Slow >= *(_QWORD *)(v63 + 32))
  {
    Slow = *(_QWORD *)(v63 + 40);
    if ((Slow & 1) == 0)
    {
      v214 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v63 + 48);
      *(_QWORD *)(v63 + 32) = Slow + HIDWORD(v214);
      *(_QWORD *)(v63 + 40) = Slow + (int)v214;
      *(_QWORD *)(v63 + 24) = Slow + v64;
      goto LABEL_57;
    }
    v181 = v47;
    JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
    Slow = JSC::LocalAllocator::allocateSlowCase(v63, v11 + 192, v64, (uint64_t)&v425, 1, v243, v244, v245);
LABEL_232:
    v47 = v181;
    if (!Slow)
      goto LABEL_61;
LABEL_57:
    v66 = (int32x2_t *)(Slow + 8 * v60);
    *v66 = vdup_n_s32(v56);
    v67 = v66 + 1;
    Slow = *(_QWORD *)(v11 + 37584);
    if (Slow >= *(_QWORD *)(v11 + 37592))
    {
      Slow = *(_QWORD *)(v11 + 37600);
      if ((Slow & 1) != 0)
      {
        v239 = v47;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        Slow = JSC::LocalAllocator::allocateSlowCase(v11 + 37560, v11 + 192, 16, (uint64_t)&v425, 0, v240, v241, v242);
        v47 = v239;
LABEL_59:
        *(_DWORD *)Slow = 0;
        v68 = *(_DWORD *)(v57 + 8);
        *(_DWORD *)Slow = v57 >> 4;
        *(_DWORD *)(Slow + 4) = v68;
        *(_QWORD *)(Slow + 8) = v67;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        goto LABEL_61;
      }
      v213 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v11 + 37608);
      *(_QWORD *)(v11 + 37592) = Slow + HIDWORD(v213);
      *(_QWORD *)(v11 + 37600) = Slow + (int)v213;
    }
    *(_QWORD *)(v11 + 37584) = Slow + 16;
    goto LABEL_59;
  }
  *(_QWORD *)(v63 + 24) = Slow + v64;
  if (Slow)
    goto LABEL_57;
LABEL_61:
  v447 = (JSC::JSObject *)Slow;
  if (v444)
  {
    v261 = v47;
    v262 = v452[255];
    if (v262)
      v263 = (JSC::Structure *)(16 * (v262 & 0xFFFFFFFE));
    else
      v263 = 0;
    if (v56 > 0x10000000)
    {
      Uninitialized = 0;
    }
    else
    {
      v264 = v427;
      v265 = JSC::Structure::outOfLineCapacity(v263);
      Uninitialized = (JSC::JSObject *)JSC::Butterfly::tryCreateUninitialized(v264, 0, 0, v265, 1, 8 * v56, (uint64_t)&v425, v266);
      if (Uninitialized)
      {
        *((_DWORD *)Uninitialized - 2) = v56;
        *((_DWORD *)Uninitialized - 1) = v56;
        Uninitialized = (JSC::JSObject *)JSC::JSArray::createWithButterfly((uint64_t)v264, (JSC::VM *)&v425, (unint64_t)v263, (uint64_t)Uninitialized, v37, v38, v39, v40);
      }
    }
    v446 = Uninitialized;
    Slow = (unint64_t)v447;
    v47 = v261;
  }
  if (!Slow)
  {
    __break(0xC471u);
    JUMPOUT(0x19847EDBCLL);
  }
  v69 = v431;
  v34 = (unint64_t)*v430;
  v70 = *(_QWORD *)v432;
  if (HIDWORD(*(_QWORD *)v432))
  {
    v226 = (double)v70;
    goto LABEL_309;
  }
  if ((v70 & 0x80000000) != 0)
  {
    v226 = (double)v70;
LABEL_309:
    v71 = *(_QWORD *)&v226 + 0x2000000000000;
    goto LABEL_66;
  }
  v71 = v70 | 0xFFFE000000000000;
LABEL_66:
  v72 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v72 - 16) = v71;
  if (v71 && (v71 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v69 + 760) >= *(unsigned __int8 *)(v34 + 7))
  {
    v224 = v47;
    JSC::Heap::writeBarrierSlowPath(v69 + 192, v34);
    v47 = v224;
    v69 = v431;
    v34 = (unint64_t)*v430;
    v72 = *((_QWORD *)*v430 + 1);
  }
  v73 = *v433;
  *(_QWORD *)(v72 - 24) = *v433;
  if (v73 && (v73 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v69 + 760) >= *(unsigned __int8 *)(v34 + 7))
  {
    v225 = v47;
    JSC::Heap::writeBarrierSlowPath(v69 + 192, v34);
    v47 = v225;
    v69 = v431;
    v34 = (unint64_t)*v430;
  }
  if (*v434)
  {
    v317 = *v435;
    *(_QWORD *)(*(_QWORD *)(v34 + 8) - 32) = *v435;
    if (v317
      && ((unint64_t)v317 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v69 + 760) >= *(unsigned __int8 *)(v34 + 7))
    {
      v318 = v47;
      JSC::Heap::writeBarrierSlowPath(v69 + 192, v34);
      v47 = v318;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v34 + 8) - 32) = 10;
  }
  v74 = *v436;
  v75 = *(unsigned __int16 *)(*v436 + 24);
  if (v75 == 65534)
  {
    v77 = 0;
LABEL_84:
    v79 = 0;
    goto LABEL_85;
  }
  if (v75 == 0xFFFF)
    v76 = *(_DWORD *)(*(_QWORD *)(v74 + 64) + 84);
  else
    v76 = *(unsigned __int16 *)(*v436 + 24);
  if (v76 >= 64)
  {
    if ((v76 - 63) >= 5)
    {
      v113 = (v76 - 64) | ((v76 - 64) >> 1) | (((v76 - 64) | ((v76 - 64) >> 1)) >> 2);
      v114 = v113 | (v113 >> 4) | ((v113 | (v113 >> 4)) >> 8);
      v77 = (v114 | HIWORD(v114)) + 1;
    }
    else
    {
      v77 = 4;
    }
  }
  else
  {
    v77 = 0;
  }
  if (v75 == 0xFFFF)
    v75 = *(_DWORD *)(*(_QWORD *)(v74 + 64) + 84);
  v78 = __OFSUB__(v75, 63);
  v79 = v75 - 63;
  if ((v79 < 0) ^ v78 | (v79 == 0))
    goto LABEL_84;
LABEL_85:
  v80 = (unint64_t *)(v11 + 41968);
  v81 = (unint64_t *)(v11 + 39696);
  v82 = (unint64_t *)(v11 + 39432);
  v83 = 8 * (v77 - v79);
  v84 = (_OWORD *)(*((_QWORD *)*v430 + 1) - 8 * v77 - 8);
  v85 = (_OWORD *)((char *)v84 + v83);
  v86 = (_OWORD *)((char *)v84 + (v83 & 0x7FFFFFFC0));
  *(_QWORD *)&v41 = 0;
  while (v84 != v86)
  {
    *v84 = v41;
    v84[1] = v41;
    v84[2] = v41;
    v84[3] = v41;
    v84 += 4;
  }
  while (v84 != v85)
  {
    *(_QWORD *)v84 = 0;
    v84 = (_OWORD *)((char *)v84 + 8);
  }
  if (*v437)
  {
    v319 = v47;
    JSC::JSObject::putDirectOffset((unint64_t)*v430, v431, 67, *v438);
    v320 = (*v439)[255];
    if (v320)
      v321 = 16 * (v320 & 0xFFFFFFFE);
    else
      v321 = 0;
    if (*v440)
      v322 = *v440;
    else
      v322 = 10;
    JSC::JSObject::putDirectOffset(*v438, v431, 64, v322);
    v323 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v321);
    v324 = *(unsigned __int16 *)(v321 + 24);
    if (v324 == 65534)
      goto LABEL_416;
    if (v324 == 0xFFFF)
      v324 = *(_DWORD *)(*(_QWORD *)(v321 + 64) + 84);
    v78 = __OFSUB__(v324, 63);
    v325 = v324 - 63;
    if ((v325 < 0) ^ v78 | (v325 == 0))
LABEL_416:
      v325 = 0;
    v326 = v323 - v325;
    v327 = (_OWORD *)(*(_QWORD *)(*v438 + 8) - 8 * v323 - 8);
    v328 = (8 * v326) & 0x7FFFFFFC0;
    v329 = (_OWORD *)((char *)v327 + 8 * v326);
    v330 = (_OWORD *)((char *)v327 + v328);
    *(_QWORD *)&v41 = 0;
    while (v327 != v330)
    {
      *v327 = v41;
      v327[1] = v41;
      v327[2] = v41;
      v327[3] = v41;
      v327 += 4;
    }
    while (v327 != v329)
    {
      *(_QWORD *)v327 = 0;
      v327 = (_OWORD *)((char *)v327 + 8);
    }
    v47 = v319;
    v80 = (unint64_t *)(v11 + 41968);
    v81 = (unint64_t *)(v11 + 39696);
    v82 = (unint64_t *)(v11 + 39432);
  }
  v87 = v447;
  v88 = v421[0];
  v89 = v421[2] - v421[0];
  if (v421[2] == v421[0])
  {
    SlowCase = *v80;
    goto LABEL_109;
  }
  v90 = v451;
  if (!v421[0])
  {
    v110 = *(_QWORD *)(v451 + 8);
    if (v110)
      LODWORD(v110) = *(_DWORD *)(v110 + 4);
    if ((_DWORD)v110 == v89)
    {
      SlowCase = v451;
      goto LABEL_109;
    }
  }
  if (v89 != 1)
  {
    if (v89 != 2)
      goto LABEL_101;
    v136 = *(WTF::StringImpl **)(v451 + 8);
    if (!v136)
    {
      v138 = 0;
      goto LABEL_180;
    }
    v137 = *((_DWORD *)v136 + 1);
    if (v137 > v421[0])
    {
      v400 = v447;
      v407 = v82;
      __dste = v81;
      v374 = v80;
      v375 = v47;
      v138 = WTF::StringImpl::at(v136, v421[0]);
      v136 = *(WTF::StringImpl **)(v90 + 8);
      if (!v136)
      {
        v47 = v375;
        v80 = v374;
        v81 = __dste;
        v87 = v400;
        v82 = v407;
        goto LABEL_180;
      }
      v137 = *((_DWORD *)v136 + 1);
      v47 = v375;
      v80 = v374;
      v81 = __dste;
      v87 = v400;
      v82 = v407;
    }
    else
    {
      v138 = 0;
    }
    v34 = v88 + 1;
    if (v137 > v34)
    {
      v391 = v47;
      v376 = v80;
      __dstj = v81;
      v401 = v87;
      v377 = v82;
      LODWORD(v136) = WTF::StringImpl::at(v136, v34);
      v82 = v377;
      v87 = v401;
      v81 = __dstj;
      v80 = v376;
      v47 = v391;
    }
    else
    {
      LODWORD(v136) = 0;
    }
LABEL_180:
    if ((v136 | v138) <= 0x7F)
    {
      v453 = v138;
      v454 = (char)v136;
      *(_QWORD *)&v422 = &v453;
      *((_QWORD *)&v422 + 1) = 2;
      v139 = ((v138 - 1640531527) << 16) ^ ((_DWORD)v136 << 11) ^ (v138 - 1640531527);
      v140 = (v139 + (v139 >> 11)) ^ (8 * (v139 + (v139 >> 11)));
      v141 = (v140 + (v140 >> 5)) ^ (4 * (v140 + (v140 >> 5)));
      v142 = ((v141 + (v141 >> 15)) ^ ((v141 + (v141 >> 15)) << 10)) & 0xFFFFFF;
      if (v142)
        v143 = v142;
      else
        v143 = 0x800000;
      LODWORD(v423) = v143;
      v144 = v11 + 81168;
      v145 = v143 & 0x1FF;
      v146 = *(_QWORD *)(v11 + 81168 + 8 * v145);
      if (!v146)
        goto LABEL_203;
      v147 = *(_QWORD *)(v146 + 8);
      v148 = (v147 & 1) != 0 ? 0 : (WTF::StringImpl *)v147;
      v149 = *((_DWORD *)v148 + 4);
      *(_QWORD *)&v408 = v143 & 0x1FF;
      if (v149 < 0x100)
      {
        v385 = v47;
        v178 = v80;
        __dstg = v81;
        v179 = v87;
        v180 = v82;
        v150 = WTF::StringImpl::hashSlowCase(v148);
        v82 = v180;
        v87 = v179;
        v144 = v11 + 81168;
        v145 = v143 & 0x1FF;
        v81 = __dstg;
        v80 = v178;
        v47 = v385;
      }
      else
      {
        v150 = v149 >> 8;
      }
      if (v150 != v143)
        goto LABEL_203;
      v151 = (uint64_t)v148;
      v152 = v144;
      v153 = v87;
      v154 = v47;
      v155 = v80;
      v156 = v81;
      v157 = v82;
      v158 = WTF::equalInternal<unsigned char>(v151, (unint64_t)&v453, 2);
      v82 = v157;
      v81 = v156;
      v80 = v155;
      v47 = v154;
      v87 = v153;
      v144 = v152;
      v145 = v408;
      if (v158)
      {
        SlowCase = *(_QWORD *)(v144 + 8 * v408);
      }
      else
      {
LABEL_203:
        v393 = v87;
        v403 = v82;
        __dsta = v81;
        v164 = v80;
        v165 = v47;
        WTF::AtomStringImpl::add(&v422, v36, v37, v38, v39, v40, var60);
        v166 = var60[0];
        var60[0] = 0;
        v167 = *((_DWORD *)v166 + 4);
        v168 = v166;
        if ((v167 & 3) == 2)
        {
          v168 = v166;
          do
          {
            v168 = (WTF::StringImpl *)*((_QWORD *)v168 + 3);
            v167 = *((_DWORD *)v168 + 4);
          }
          while ((v167 & 3) == 2);
        }
        v81 = __dsta;
        if ((v167 & 8) != 0)
        {
          v36 = 0;
        }
        else
        {
          *((_DWORD *)v168 + 4) = v167 | 8;
          v36 = (unint64_t)*((unsigned int *)v168 + 1) << ((v167 & 4) == 0);
        }
        v47 = v165;
        v80 = v164;
        v82 = v403;
        v169 = v11 + 192;
        SlowCase = *__dsta;
        if (*__dsta >= __dsta[1])
        {
          v378 = v36;
          SlowCase = __dsta[2];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, (uint64_t)&v425, 0, v362, v363, v364);
            v36 = v378;
            v169 = v11 + 192;
            v47 = v165;
            v80 = v164;
            v81 = __dsta;
            v82 = v403;
          }
          else
          {
            v81 = __dsta;
            v233 = *(_QWORD *)(SlowCase + 8) ^ __dsta[3];
            __dsta[1] = SlowCase + HIDWORD(v233);
            __dsta[2] = SlowCase + (int)v233;
            *__dsta = SlowCase + 16;
            v47 = v165;
            v80 = v164;
            v82 = v403;
            v169 = v11 + 192;
          }
        }
        else
        {
          *__dsta = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = v81[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v166;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        if (v36 >= 0x101)
        {
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v169, (uint64_t)&v425, SlowCase, v36, v37, v38, v39, v40);
          v82 = v403;
          v81 = __dsta;
          v80 = v164;
          v47 = v165;
        }
        *(_QWORD *)(v144 + 8 * v145) = SlowCase;
        v87 = v393;
      }
LABEL_109:
      **((_QWORD **)v87 + 1) = SlowCase;
      if (!(_DWORD)v47)
        goto LABEL_139;
      goto LABEL_110;
    }
LABEL_101:
    v93 = *(_QWORD *)(v90 + 8);
    if (v93)
    {
      if ((*(_BYTE *)(v93 + 16) & 4) != 0)
        v94 = 7;
      else
        v94 = 3;
    }
    else
    {
      v94 = 7;
    }
    SlowCase = *v82;
    if (*v82 >= v82[1])
    {
      v395 = v87;
      __dstc = v81;
      v381 = v80;
      v387 = v47;
      v228 = v82;
      SlowCase = v82[2];
      if ((SlowCase & 1) != 0)
      {
        *(_QWORD *)&v408 = v11 + 39408;
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, (uint64_t)&v425, 0, v348, v349, v350);
        v47 = v387;
        v80 = v381;
        v81 = __dstc;
        v82 = v228;
      }
      else
      {
        v229 = *(_QWORD *)(SlowCase + 8) ^ v82[3];
        v82[1] = SlowCase + HIDWORD(v229);
        v82[2] = SlowCase + (int)v229;
        *v82 = SlowCase + 32;
        v47 = v47;
      }
      v87 = v395;
    }
    else
    {
      *v82 = SlowCase + 32;
    }
    *(_DWORD *)SlowCase = v81[227] >> 4;
    *(_DWORD *)(SlowCase + 4) = 17302016;
    *(_QWORD *)(SlowCase + 8) = v94;
    *(_DWORD *)(SlowCase + 16) = v89;
    *(_DWORD *)(SlowCase + 20) = v90;
    *(_WORD *)(SlowCase + 24) = WORD2(v90);
    *(_WORD *)(SlowCase + 26) = v88;
    *(_DWORD *)(SlowCase + 28) = HIWORD(v88);
    if (*(_BYTE *)(v11 + 755))
      __dmb(0xAu);
    goto LABEL_109;
  }
  v91 = *(WTF::StringImpl **)(v451 + 8);
  if (!v91 || *((_DWORD *)v91 + 1) <= v421[0])
  {
    v92 = 0;
    goto LABEL_97;
  }
  v389 = v47;
  v368 = v80;
  v369 = v81;
  v397 = v447;
  v370 = v82;
  v371 = WTF::StringImpl::at(v91, v421[0]);
  v82 = v370;
  v87 = v397;
  v81 = v369;
  v80 = v368;
  v47 = v389;
  if (v371 > 0xFF)
    goto LABEL_101;
  v92 = v371;
LABEL_97:
  **((_QWORD **)v87 + 1) = *(_QWORD *)(v11 + 8 * v92 + 42216);
  if ((_DWORD)v47)
  {
LABEL_110:
    v96 = 1;
    *(_QWORD *)&v41 = 17302016;
    v35 = (JSC::Structure *)(v11 + 81168);
    v36 = (unint64_t)&v453;
    v37 = 2;
    v38 = 2654435769;
    v39 = 0x800000;
    do
    {
      while (1)
      {
        v97 = 2 * v96;
        if (HIDWORD(v449) <= 2 * v96)
        {
          __break(0xC471u);
          JUMPOUT(0x19847FB40);
        }
        v98 = *((_DWORD *)__src + v97);
        if ((v98 & 0x80000000) == 0)
          break;
        v99 = 10;
LABEL_114:
        *(_QWORD *)(*((_QWORD *)v447 + 1) + 8 * v96++) = v99;
        if (v96 > v47)
          goto LABEL_139;
      }
      v100 = v97 | 1;
      if (HIDWORD(v449) <= v100)
      {
        __break(0xC471u);
        JUMPOUT(0x19847FB7CLL);
      }
      v101 = *((_DWORD *)__src + v100);
      v102 = v101 - v98;
      if (v101 == v98)
      {
        v99 = *v80;
        goto LABEL_114;
      }
      v103 = v451;
      if (!v98)
      {
        v109 = *(_QWORD *)(v451 + 8);
        if (v109)
          LODWORD(v109) = *(_DWORD *)(v109 + 4);
        if ((_DWORD)v109 == v102)
        {
          v99 = v451;
          goto LABEL_114;
        }
      }
      if (v102 != 1)
      {
        if (v102 != 2)
        {
LABEL_126:
          v106 = v13;
          v107 = *(_QWORD *)(v103 + 8);
          if (v107)
          {
            if ((*(_BYTE *)(v107 + 16) & 4) != 0)
              v108 = 7;
            else
              v108 = 3;
          }
          else
          {
            v108 = 7;
          }
          v99 = *v82;
          if (*v82 >= v82[1])
          {
            v394 = v35;
            v404 = v82;
            v408 = v41;
            __dstb = v81;
            v380 = v80;
            v386 = v47;
            v99 = v82[2];
            if ((v99 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, (uint64_t)v35, (uint64_t)&v453, 2, 2654435769, 0x800000, v40);
              v99 = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, (uint64_t)&v425, 0, v345, v346, v347);
              v47 = v386;
              v80 = v380;
              v81 = __dstb;
              v82 = v404;
            }
            else
            {
              v227 = *(_QWORD *)(v99 + 8) ^ v82[3];
              v82[1] = v99 + HIDWORD(v227);
              v82[2] = v99 + (int)v227;
              *v82 = v99 + 32;
              v47 = v47;
            }
            v41 = v408;
            v35 = v394;
            v36 = (unint64_t)&v453;
            v37 = 2;
            v38 = 2654435769;
            v39 = 0x800000;
          }
          else
          {
            *v82 = v99 + 32;
          }
          *(_DWORD *)v99 = v81[227] >> 4;
          *(_DWORD *)(v99 + 4) = v41;
          *(_QWORD *)(v99 + 8) = v108;
          *(_DWORD *)(v99 + 16) = v102;
          *(_DWORD *)(v99 + 20) = v103;
          *(_WORD *)(v99 + 24) = WORD2(v103);
          *(_WORD *)(v99 + 26) = v98;
          *(_DWORD *)(v99 + 28) = HIWORD(v98);
          if (*(_BYTE *)(v11 + 755))
            __dmb(0xAu);
          v13 = v106;
          goto LABEL_114;
        }
        v115 = *(WTF::StringImpl **)(v451 + 8);
        v408 = v41;
        if (v115)
        {
          v116 = *((_DWORD *)v115 + 1);
          if (v116 > v98)
          {
            v398 = v35;
            v405 = v82;
            __dstd = v81;
            v382 = v80;
            v372 = v47;
            v117 = WTF::StringImpl::at(v115, v98);
            v115 = *(WTF::StringImpl **)(v103 + 8);
            if (v115)
            {
              v116 = *((_DWORD *)v115 + 1);
              v47 = v372;
              v80 = v382;
              v81 = __dstd;
              v35 = v398;
              v82 = v405;
              v41 = v408;
              v36 = (unint64_t)&v453;
              v37 = 2;
              v38 = 2654435769;
              v39 = 0x800000;
              goto LABEL_160;
            }
            v47 = v372;
            v80 = v382;
            v81 = __dstd;
            v35 = v398;
            v82 = v405;
            v41 = v408;
            v36 = (unint64_t)&v453;
            v37 = 2;
            v38 = 2654435769;
            v39 = 0x800000;
          }
          else
          {
            v117 = 0;
LABEL_160:
            v34 = v98 + 1;
            if (v116 > v34)
            {
              v390 = v47;
              v373 = v80;
              __dsti = v81;
              v399 = v35;
              v406 = v82;
              LODWORD(v115) = WTF::StringImpl::at(v115, v34);
              v39 = 0x800000;
              v38 = 2654435769;
              v37 = 2;
              v36 = (unint64_t)&v453;
              v35 = v399;
              v82 = v406;
              v41 = v408;
              v81 = __dsti;
              v80 = v373;
              v47 = v390;
            }
            else
            {
              LODWORD(v115) = 0;
            }
          }
        }
        else
        {
          v117 = 0;
        }
        if ((v115 | v117) <= 0x7F)
        {
          v453 = v117;
          v454 = (char)v115;
          *(_QWORD *)&v422 = &v453;
          *((_QWORD *)&v422 + 1) = 2;
          v118 = (((v117 - 1640531527) << 16) ^ ((_DWORD)v115 << 11) ^ (v117 - 1640531527))
               + ((((v117 - 1640531527) << 16) ^ ((_DWORD)v115 << 11) ^ (v117 - 1640531527)) >> 11);
          v119 = (v118 ^ (8 * v118)) + ((v118 ^ (8 * v118)) >> 5);
          v120 = (v119 ^ (4 * v119)) + ((v119 ^ (4 * v119)) >> 15);
          v121 = (v120 ^ (v120 << 10)) & 0xFFFFFF;
          if (v121)
            v122 = v121;
          else
            v122 = 0x800000;
          LODWORD(v423) = v122;
          v123 = v122 & 0x1FF;
          v124 = *((_QWORD *)v35 + v123);
          if (!v124)
            goto LABEL_193;
          v125 = *(_QWORD *)(v124 + 8);
          v126 = (v125 & 1) != 0 ? 0 : (WTF::StringImpl *)v125;
          v127 = *((_DWORD *)v126 + 4);
          v392 = v122 & 0x1FF;
          if (v127 < 0x100)
          {
            v384 = v47;
            v175 = v80;
            __dstf = v81;
            v176 = v82;
            v177 = v35;
            v128 = WTF::StringImpl::hashSlowCase(v126);
            v35 = v177;
            v123 = v122 & 0x1FF;
            v82 = v176;
            v81 = __dstf;
            v80 = v175;
            v47 = v384;
          }
          else
          {
            v128 = v127 >> 8;
          }
          if (v128 != v122)
            goto LABEL_193;
          v129 = (uint64_t)v126;
          v130 = v35;
          v131 = v47;
          v132 = v80;
          v133 = v81;
          v134 = v82;
          v135 = WTF::equalInternal<unsigned char>(v129, (unint64_t)&v453, 2);
          v39 = 0x800000;
          v38 = 2654435769;
          v37 = 2;
          v36 = (unint64_t)&v453;
          v35 = v130;
          v123 = v392;
          v41 = v408;
          v82 = v134;
          v81 = v133;
          v80 = v132;
          v47 = v131;
          if (v135)
          {
            v99 = *((_QWORD *)v35 + v392);
          }
          else
          {
LABEL_193:
            v383 = v47;
            v159 = (uint64_t)v35;
            v402 = v82;
            __dst = v81;
            v379 = v80;
            WTF::AtomStringImpl::add(&v422, v36, v37, v38, v39, v40, var60);
            v160 = var60[0];
            var60[0] = 0;
            v161 = *((_DWORD *)v160 + 4);
            v162 = v160;
            if ((v161 & 3) == 2)
            {
              v162 = v160;
              do
              {
                v162 = (WTF::StringImpl *)*((_QWORD *)v162 + 3);
                v161 = *((_DWORD *)v162 + 4);
              }
              while ((v161 & 3) == 2);
            }
            v81 = __dst;
            v41 = v408;
            if ((v161 & 8) != 0)
            {
              v163 = 0;
            }
            else
            {
              *((_DWORD *)v162 + 4) = v161 | 8;
              v163 = (unint64_t)*((unsigned int *)v162 + 1) << ((v161 & 4) == 0);
            }
            v47 = v383;
            v80 = v379;
            v82 = v402;
            v35 = (JSC::Structure *)v159;
            v36 = (unint64_t)&v453;
            v37 = 2;
            v38 = 2654435769;
            v39 = 0x800000;
            v99 = *__dst;
            if (*__dst >= __dst[1])
            {
              v99 = __dst[2];
              if ((v99 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v34, v159, (uint64_t)&v453, 2, 2654435769, 0x800000, v40);
                v99 = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, (uint64_t)&v425, 0, v351, v352, v353);
                v47 = v383;
                v80 = v379;
                v81 = __dst;
                v82 = v402;
                v41 = v408;
                v35 = (JSC::Structure *)v159;
                v36 = (unint64_t)&v453;
                v37 = 2;
                v38 = 2654435769;
                v39 = 0x800000;
              }
              else
              {
                v81 = __dst;
                v230 = *(_QWORD *)(v99 + 8) ^ __dst[3];
                __dst[1] = v99 + HIDWORD(v230);
                __dst[2] = v99 + (int)v230;
                *__dst = v99 + 16;
                v47 = v383;
                v80 = v379;
                v82 = v402;
                v41 = v408;
                v35 = (JSC::Structure *)v159;
                v37 = 2;
              }
            }
            else
            {
              *__dst = v99 + 16;
            }
            *(_DWORD *)v99 = v81[227] >> 4;
            *(_DWORD *)(v99 + 4) = v41;
            *(_QWORD *)(v99 + 8) = v160;
            if (*(_BYTE *)(v11 + 755))
              __dmb(0xAu);
            if (v163 >= 0x101)
            {
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v11 + 192, (uint64_t)&v425, v99, v163, 2, 2654435769, 0x800000, v40);
              v39 = 0x800000;
              v38 = 2654435769;
              v37 = 2;
              v36 = (unint64_t)&v453;
              v35 = (JSC::Structure *)v159;
              v41 = v408;
              v82 = v402;
              v81 = __dst;
              v80 = v379;
              v47 = v383;
            }
            *((_QWORD *)v35 + v123) = v99;
          }
          goto LABEL_114;
        }
        goto LABEL_126;
      }
      v104 = *(WTF::StringImpl **)(v451 + 8);
      if (v104 && *((_DWORD *)v104 + 1) > v98)
      {
        v388 = v47;
        v365 = v80;
        __dsth = v81;
        v366 = v82;
        v408 = v41;
        v396 = v35;
        v367 = WTF::StringImpl::at(v104, v98);
        v39 = 0x800000;
        v38 = 2654435769;
        v37 = 2;
        v36 = (unint64_t)&v453;
        v35 = v396;
        v41 = v408;
        v82 = v366;
        v81 = __dsth;
        v80 = v365;
        v47 = v388;
        if (v367 > 0xFF)
          goto LABEL_126;
        v105 = v367;
      }
      else
      {
        v105 = 0;
      }
      *(_QWORD *)(*((_QWORD *)v447 + 1) + 8 * v96++) = *(_QWORD *)(v11 + 8 * v105 + 42216);
    }
    while (v96 <= v47);
  }
LABEL_139:
  if (v444)
  {
    v331 = 0;
    v332 = 0;
    do
    {
      if (HIDWORD(v449) <= v331)
      {
        __break(0xC471u);
        JUMPOUT(0x19847FEB8);
      }
      v333 = v47;
      v334 = *((_DWORD *)__src + v331);
      if ((v334 & 0x80000000) != 0)
      {
        v337 = v446;
        v338 = v332;
        v336 = 10;
      }
      else
      {
        if (HIDWORD(v449) <= v331 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19847FEC0);
        }
        v335 = v446;
        v336 = JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(JSC::GCDeferralContext &,int,int)#1}::operator()((uint64_t *)&v428, (JSC::VM *)&v425, v334, *((_DWORD *)__src + v331 + 1), v37, v38, v39, v40);
        v337 = v335;
        v338 = v332;
      }
      JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v337, (uint64_t)&v427, v338, v336);
      ++v332;
      v331 += 2;
      v47 = v333;
    }
    while (v332 <= v333);
  }
  if (*((_BYTE *)v427 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (v426)
  {
    v184 = v47;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v425 + 192, 0);
LABEL_283:
    v47 = v184;
  }
  if (v445 && (_DWORD)v47)
  {
    v268 = 1;
    do
    {
      v269 = v47;
      JSC::RegExp::getCaptureGroupNameForSubpatternId(a2, v268, &v425);
      if (v425)
      {
        v270 = *((unsigned int *)v425 + 1);
        if ((_DWORD)v270)
        {
          v271 = *((_DWORD *)v425 + 4);
          v272 = *((_QWORD *)v425 + 1);
          v273 = HIDWORD(v449);
          *(_QWORD *)&v422 = &v423;
          DWORD2(v422) = 32;
          HIDWORD(v422) = HIDWORD(v449);
          if (HIDWORD(v449) >= 0x21)
          {
            if (HIDWORD(v449) >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x19847FEC8);
            }
            v274 = (void **)WTF::fastMalloc((WTF *)(4 * HIDWORD(v449)));
            DWORD2(v422) = v273;
            *(_QWORD *)&v422 = v274;
            v273 = HIDWORD(v449);
          }
          else
          {
            v274 = &v423;
          }
          memcpy(v274, __src, 4 * v273);
          *(_QWORD *)&v408 = v408 & 0xFFFFFF0000000000 | v270 | ((unint64_t)((v271 >> 2) & 1) << 32);
          v282 = JSC::RegExp::subpatternIdForGroupName<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v272, v408, (uint64_t)&v422);
          v283 = v422;
          if (&v423 != (void **)v422 && (_QWORD)v422)
          {
            *(_QWORD *)&v422 = 0;
            DWORD2(v422) = 0;
            WTF::fastFree(v283, v275, (uint64_t)v276, v277, v278, v279, v280, v281);
          }
          if (v282)
            IndexQuickly = JSC::JSObject::getIndexQuickly(v447, v282);
          else
            IndexQuickly = 10;
          v285 = v443;
          JSC::Identifier::fromString((uint64_t **)v11, &v425, v276, v277, v278, v279, v280, v281, var60);
          JSC::JSObject::putDirect(v285, v11, (unint64_t)var60[0], IndexQuickly, 0, v289, v286, v287, v288);
          v290 = var60[0];
          var60[0] = 0;
          if (v290)
          {
            if (*(_DWORD *)v290 == 2)
            {
              WTF::StringImpl::~StringImpl(v290, (WTF::AtomStringImpl *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
              WTF::fastFree(v309, v310, v311, v312, v313, v314, v315, v316);
            }
            else
            {
              *(_DWORD *)v290 -= 2;
            }
          }
          if (v282)
            v291 = v444 == 0;
          else
            v291 = 1;
          if (!v291)
          {
            v292 = v441;
            JSC::Identifier::fromString((uint64_t **)v11, &v425, v35, v36, v37, v38, v39, v40, var60);
            v293 = var60[0];
            v294 = JSC::JSObject::getIndexQuickly(v446, v282);
            JSC::JSObject::putDirect(v292, v11, (unint64_t)v293, v294, 0, v298, v295, v296, v297);
            v299 = var60[0];
            var60[0] = 0;
            if (v299)
            {
              if (*(_DWORD *)v299 == 2)
              {
                WTF::StringImpl::~StringImpl(v299, (WTF::AtomStringImpl *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
                WTF::fastFree(v354, v355, v356, v357, v358, v359, v360, v361);
              }
              else
              {
                *(_DWORD *)v299 -= 2;
              }
            }
          }
        }
        v300 = v425;
        v425 = 0;
        if (v300)
        {
          if (*(_DWORD *)v300 == 2)
          {
            WTF::StringImpl::~StringImpl(v300, (WTF::AtomStringImpl *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
          }
          else
          {
            *(_DWORD *)v300 -= 2;
          }
        }
      }
      ++v268;
      v47 = v269;
    }
    while (v268 <= v269);
  }
  v43 = v447;
LABEL_29:
  v44 = __src;
  if (v13 != __src && __src != 0)
  {
    __src = 0;
    LODWORD(v449) = 0;
    WTF::fastFree((unint64_t)v44, (void *)v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_35;
  v183 = *(_DWORD *)(v11 + 80);
  if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v35, v36, v37, v38, v39, v40);
  if (*(_QWORD *)(v11 + 16))
    return 0;
LABEL_35:
  if (!v43)
    return 2;
  *(_QWORD *)(a1 + 2152) = a2;
  *(_QWORD *)(a1 + 2144) = a3;
  *(_OWORD *)(a1 + 2120) = *(_OWORD *)v421;
  *(_BYTE *)(a1 + 2136) = 0;
  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(v11 + 192, a1);
  return (uint64_t)v43;
}

